(data (i32.const 8232) "failed to allocate pages\00PrivEOS: Token %s not accepted\00")
(data (i32.const 8288) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 8368) "%u\00Overdrawn balance\00")
(data (i32.const 8389) "PrivEOS: Balance table entry does not exist for user %s, call prepare first\00")
(data (i32.const 8465) "PrivEOS: User %s has no balance\00")
(data (i32.const 8497) "PrivEOS: Trying to deduct %s but user %s only has %s\00")
(data (i32.const 8550) "PrivEOS: Feebalance table entry does not exist for asset %s.\00")
(data (i32.const 8611) "PrivEOS: sub_fee_balance: Trying to subtract %s but we only have %s.\00")
(data (i32.const 8680) "We just created a peeraproval, so it should be there\00")
(data (i32.const 8733) "We just added a disapproval, so it should be here.\00")
(data (i32.const 8784) "0\15\a4\19S\b5\dd\ad")
(data (i32.const 8792) "Withdrawal\00")
(data (i32.const 8803) "User has no balance\00")
(data (i32.const 8823) "PrivEOS: Only PRIVEOS tokens allowed\00")
(data (i32.const 8860) "PrivEOS: Amount must be positive.\00")
(data (i32.const 8894) "PrivEOS: Trying to overdraw free balance\00")
(data (i32.const 8935) "PrivEOS: User has no balance\00")
(data (i32.const 8964) "PrivEOS: Overdrawn balance. User has only %s but is trying to withdraw %s\00")
(data (i32.const 9038) "PrivEOS: The locked_until values don\'t match\00")
(data (i32.const 9083) "PrivEOS: Funds have not yet become unlocked\00")
(data (i32.const 9127) "Inconsistent balances\00")
(data (i32.const 9149) "PrivEOS: There is no balance found for %s\00")
(data (i32.const 9191) "PrivEOS: There is nothing to withdraw, please try again later.\00")
(data (i32.const 9254) "Whole amount to withdraw: % \00")
(data (i32.const 9283) "User % has % locked tokens. \00")
(data (i32.const 9312) "User % has % staked tokens. \00")
(data (i32.const 9341) "User % has % delegated tokens. \00")
(data (i32.const 9373) "That\'s a total of % tokens. \00")
(data (i32.const 9402) "PrivEOS: Withdrawal amount is too small, please try again later.\00")
(data (i32.const 9467) "unable to find key\00")
(data (i32.const 9486) "DAC Rewards\00")
(data (i32.const 9498) "PrivEOS: User is not a registered node.\00")
(data (i32.const 9544) "\04EOS\00\00\00\00")
(data (i32.const 9552) "PrivEOS: Cannot withdraw %s until bond of % is posted in full.\00")
(data (i32.const 9615) "PrivEOS: Data Corruption\00")
(data (i32.const 9640) "Sanity Check\00")
(data (i32.const 9653) "PrivEOS: The withdrawal amount is too small (%s), please try again later\00")
(data (i32.const 9726) "Node Rewards\00")
(data (i32.const 9739) "PrivEOS: This should only work if bond is posted in full\00")
(data (i32.const 9796) "PrivEOS: Already initialized\00")
(data (i32.const 9825) "PrivEOS: node_delegation_singleton already exists. This should not be possible\00")
(data (i32.const 9904) "file has more than 256 bytes\00")
(data (i32.const 9933) "data has more than 256 bytes\00")
(data (i32.const 9962) "PrivEOS: Amount must be positive\00")
(data (i32.const 9995) "PrivEOS: You must register before posting a bond.\00")
(data (i32.const 10045) "PrivEOS: Wrong currency. Bond must be %s.\00")
(data (i32.const 10087) "public key should not be the default value\00")
(data (i32.const 10130) "Only K1 Keys supported\00")
(data (i32.const 10153) "url has more than 256 bytes\00")
(data (i32.const 10181) "PrivEOS: Peer approvals will become available once the DAC has activated\00")
(data (i32.const 10254) "Sender must be a registered node\00")
(data (i32.const 10287) "Owner must be a registered node\00")
(data (i32.const 10319) "You\'re outside of the top %s\00")
(data (i32.const 10348) "PrivEOS: Peer disapprovals will become available once the DAC has activated\00")
(data (i32.const 10424) "User %s is not registered as node\00")
(data (i32.const 10458) "PrivEOS: Node %s already indicated the wish to leave.\00")
(data (i32.const 10512) "PrivEOS: Node %s is already cleared for leaving.\00")
(data (i32.const 10561) "PrivEOS: Node %s does not want to leave.\00")
(data (i32.const 10602) "DAC has already been activated. This action is obsolete.\00")
(data (i32.const 10659) "owner not found\00")
(data (i32.const 10675) "PrivEOS: Invalid price\00")
(data (i32.const 10698) "Price must be non-negative.\00")
(data (i32.const 10726) "PrivEOS: node not found.\00")
(data (i32.const 10751) "Token not accepted\00")
(data (i32.const 10770) "Invalid action name\00")
(data (i32.const 10790) "PrivEOS: Currency %s already exists.\00")
(data (i32.const 10827) "PrivEOS: feebalance entry already exists. This should not be possible.\00")
(data (i32.const 10898) "PrivEOS: Please vote for not more than %s nodes.\00")
(data (i32.const 10947) "PrivEOS: You need to vote for at least %s nodes.\00")
(data (i32.const 10996) "PrivEOS: You\'re trying to vote for %s which is not a registered node.\00")
(data (i32.const 11066) "PrivEOS: Invalid quantity\00")
(data (i32.const 11092) "PrivEOS: Deposit amount must be > 0\00")
(data (i32.const 11128) "PrivEOS: The account %s does not exist.\00")
(data (i32.const 11168) "PrivEOS: memo has more than 256 bytes\00")
(data (i32.const 11206) "cannot transfer to self\00")
(data (i32.const 11230) "PrivEOS: Contract mismatch. Nice try, 1337 haxx0r\00")
(data (i32.const 11280) "PrivEOS: This part of the code should only respond to incoming transfers.\00")
(data (i32.const 11354) "PrivEOS: Sorry, we don\'t take any fake tokens. Contract should be %s but is %s\00")
(data (i32.const 11433) "PrivEOS: Currency not accepted\00")
(data (i32.const 11464) "PrivEOS: Token contract should be %s but is %s. We\'re not so easily fooled.\00")
(data (i32.const 11540) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 11599) "write\00")
(data (i32.const 11605) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 11654) "invalid symbol name\00")
(data (i32.const 11674) "attempt to add asset with different symbol\00")
(data (i32.const 11717) "addition underflow\00")
(data (i32.const 11736) "addition overflow\00")
(data (i32.const 11754) "attempt to subtract asset with different symbol\00")
(data (i32.const 11802) "subtraction underflow\00")
(data (i32.const 11824) "subtraction overflow\00")
(data (i32.const 11845) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 11896) "error reading iterator\00")
(data (i32.const 11919) "PrivEOS: Must initialize first\00")
(data (i32.const 11950) "PrivEOS: Contract %s has not voted yet.\00")
(data (i32.const 11990) "PrivEOS: It should not have been possible to vote for more than %s nodes but you voted for %s\00")
(data (i32.const 12084) "\1e\00\00\00")
(data (i32.const 12089) "PrivEOS: You can only vote for up to 30 nodes. So where does this come from?\00")
(data (i32.const 12166) "PrivEOS: Trying to access a container outside its valid range.\00")
(data (i32.const 12232) "\00\00\00\00\00\00\00\00\03\00\00\00\04\00\00\00\05\00\00\00\06\00\00\00\07\00\00\00\08\00\00\00\t\00\00\00")
(data (i32.const 12268) "cannot pass end iterator to modify\00")
(data (i32.const 12303) "object passed to modify is not in multi_index\00")
(data (i32.const 12349) "cannot modify objects in table of another contract\00")
(data (i32.const 12400) "updater cannot change primary key when modifying an object\00")
(data (i32.const 12459) "PrivEOS: Nodetoken amount to be added must be non-negative\00")
(data (i32.const 12518) "PrivEOS: nodetoken_balances entry does not yet exist for %s\00")
(data (i32.const 12578) "cannot increment end iterator\00")
(data (i32.const 12608) "accessgrant\00")
(data (i32.const 12620) "store\00")
(data (i32.const 12626) "read\00")
(data (i32.const 12631) "singleton does not exist\00")
(data (i32.const 12656) "cannot create objects in table of another contract\00")
(data (i32.const 12708) "\a81\00\00")
(data (i32.const 12712) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 12745) "%lld%s%s %s\00")
(data (i32.const 12757) ".\00")
(data (i32.const 12759) "object passed to erase is not in multi_index\00")
(data (i32.const 12804) "cannot erase objects in table of another contract\00")
(data (i32.const 12854) "attempt to remove object that was not in multi_index\00")
(data (i32.const 12907) "get\00")
(data (i32.const 12911) "cannot pass end iterator to erase\00")
(data (i32.const 12945) "PrivEOS: Trying to fall below the required bond amount after withdrawal.\00")
(data (i32.const 13018) "PrivEOS: Price must be non-negative.\00")
(data (i32.const 0) "\003\00\00")
(import "env" "abort" (func $fimport$0))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$5 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$8 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$11 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$15 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$16 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$18 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$21 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$22 (param i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$23 (result i64)))
(import "env" "db_update_i64" (func $fimport$24 (param i32 i64 i32 i32)))
(import "env" "db_find_i64" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "__lttf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth" (func $fimport$28 (param i64)))
(import "env" "db_store_i64" (func $fimport$29 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$30 (param i32)))
(import "env" "send_inline" (func $fimport$31 (param i32 i32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$32 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$33 (param i32 i32) (result i32)))
(import "env" "set_proposed_producers" (func $fimport$34 (param i32 i32) (result i64)))
(import "env" "current_time" (func $fimport$35 (result i64)))
(import "env" "get_active_producers" (func $fimport$36 (param i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$37 (param i32 i32) (result i32)))
(import "env" "printn" (func $fimport$38 (param i64)))
(import "env" "require_recipient" (func $fimport$39 (param i64)))
(import "env" "eosio_assert_message" (func $fimport$40 (param i32 i32 i32)))
(import "env" "is_account" (func $fimport$41 (param i64) (result i32)))
(import "env" "action_data_size" (func $fimport$42 (result i32)))
(import "env" "read_action_data" (func $fimport$43 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$44 (param i32 i64)))
(import "env" "db_get_i64" (func $fimport$45 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$46 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$47 (param i32 i64 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$48 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$49 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$50 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$51 (param i64 i64 i64 i64 i32) (result i32)))
(export "apply" (func $1))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $19 $21 $430 $431 $432 $433 $434 $435 $436)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 13055))
(global $global$2 i32 (i32.const 13055))


void .FUNC $220 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $832(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $833($0, $9)
	CALL $834($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $44(((int_64)*($1 + [8]) == (int_64)6003093065207795716), [8823])
	CALL $44(((int_64)*($1) > (int_64)0), [8860])
	$3 = ($0 + [88])
	CALL $126($2, $3)
	CALL $44(CALL $60($2, $1), [8894])
	CALL $64($2, $1)
	CALL $127($3, $2, *($0))
	$global$0 = ($2 + [16])
}

void .FUNC $122 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = ($2 + [8])
	$6 = *($5)
	*((($4 + [48]) + [8])) = $6
	$7 = *($2)
	*((($4 + [16]) + [8])) = $6
	*($4 + [16]) = $7
	*($4 + [48]) = $7
	CALL $123($0, ($4 + [16]))
	$6 = *($5)
	*((($4 + [32]) + [8])) = $6
	$7 = *($2)
	*(($4 + [8])) = $6
	*($4) = $7
	*($4 + [32]) = $7
	CALL $124($0, $1, $4, $3)
	CALL $125($0)
	$global$0 = ($4 + [64])
}

void .FUNC $288 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($1)), [12656])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL $9([40])
	CALL $881($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $882(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $11($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $221 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	float_64 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	CALL $44(((int_32)*(($1 + [92])) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$5 = *($1 + [64])
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (Rounds 0)($5)
	
.LABEL $label$1
	*($4 + [24]) = ((int_64)$6 ^ (int_64)-1)
	$6 = *($1)
	CALL $52(($1 + [72]), *($2))
	CALL $44(((int_64)$6 == (int_64)*($1)), [12400])
	$2 = CALL $444($1)
	if ( ($2 <= [513]) ){ goto $label$4 }
	$3 = CALL $3($2)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $2)
	CALL $445(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [96]), (int_64)0, $3, $2)
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $4($3)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$5 = *(($1 + [64]))
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$7 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$7 = (Rounds 0)($5)
	
.LABEL $label$7
	*($4 + [40]) = ((int_64)$7 ^ (int_64)-1)
	if ( (CALL $17(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$9 }
	$3 = *($1 + [100])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7128446144174096384, ($4 + [32]), $6)
	*(($1 + [100])) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, (int_64)0, ($4 + [40]))
	
.LABEL $label$9
	$global$0 = ($4 + [48])
}

void .FUNC $537 (int_32 $0, int_32 $1)
{
	CALL $538(*($0 + [4]), $1)
	*($1 + [28]) = *(*($0 + [8]))
}

void .FUNC $503 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

void .FUNC $127 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL $185(($3 + [40]), $0, (int_64)6761208822947119104)
	if ( (*($3 + [44]) == 0) ){ goto $label$2 }
	*($3 + [32]) = *($3 + [40])
	*($3 + [16]) = $1
	*($3 + [8]) = *($3 + [32])
	CALL $187($0, ($3 + [8]), $2, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [24]) = $1
	CALL $188(($3 + [16]), $0, $2, ($3 + [24]))
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $502 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $531 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($global$0 - [80])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	*($3 + [16]) = *($1)
	CALL $50($3, ($3 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8))
	$0 = *($3 + [4])
	*(($3 + [56])) = [0]
	*($3 + [48]) = (int_64)0
	CALL $25(($3 + [48]), [8389], CALL $2([8389]))
	CALL $51(((int_32)$0 != (int_32)[0]), ($3 + [48]), $1)
	CALL $26(($3 + [48]))
	$4 = *($1)
	$1 = *($3 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($1 + [16]) == (int_32)($3 + [8])), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($3 + [8])), [12349])
	$5 = *($1 + [8])
	CALL $52($1, $2)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL $44(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [12400])
	*($3 + [72]) = (($3 + [48]) + [16])
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [48])
	CALL $53(($3 + [64]), $1)
	CALL db_update_i64(*($1 + [20]), $4, ($3 + [48]), [16])
	if ( (uint_64)($5 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	CALL $54(($3 + [32]))
	$global$0 = ($3 + [80])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)(uint_64)*(*($3) + [8]) >> (uint_64)(int_64)8) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $598($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4149656565420228608, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $598($0, $1, CALL $599($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [128])
	$global$0 = $1
	*($1 + [96]) = *($0)
	*($1 + [80]) = (int_64)23449582285967952
	CALL $131(($1 + [112]), [8784], ($1 + [96]), ($1 + [80]))
	CALL $126(($1 + [80]), ($0 + [88]))
	*((($1 + [96]) + [8])) = *((($1 + [80]) + [8]))
	*($1 + [96]) = *($1 + [80])
	$2 = CALL $132(($1 + [80]), (int_64)0, (int_64)6003093065207795716)
	CALL $133(($1 + [64]), ($0 + [168]))
	
.LOOP $label$2:
	$3 = *($1 + [68])
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $52($2, ($3 + [8]))
	CALL $134(($1 + [64]))
	goto $label$2 
	
.LABEL $label$1
	$4 = CALL $132(($1 + [64]), (int_64)0, (int_64)6003093065207795716)
	CALL $135(($1 + [48]), ($0 + [208]))
	
.LOOP $label$4:
	$3 = *($1 + [52])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $52($4, ($3 + [8]))
	CALL $136(($1 + [48]))
	goto $label$4 
	
.LABEL $label$3
	$5 = CALL $132(($1 + [48]), (int_64)0, (int_64)6003093065207795716)
	CALL $137(($1 + [32]), ($0 + [248]))
	
.LOOP $label$6:
	$3 = *($1 + [36])
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $52($5, ($3 + [8]))
	CALL $138(($1 + [32]))
	goto $label$6 
	
.LABEL $label$5
	*(($3 = ($1 + [8]))) = *((($1 + [96]) + [8]))
	*($1) = *($1 + [96])
	CALL $52($1, $2)
	*(($2 = (($1 + [16]) + [8]))) = *($3)
	*($1 + [16]) = *($1)
	CALL $52(($1 + [16]), $5)
	*((($1 + [32]) + [8])) = *($2)
	*($1 + [32]) = *($1 + [16])
	CALL $52(($1 + [32]), $4)
	CALL $44(CALL $62(($1 + [32]), ($1 + [112])), [9127])
	$global$0 = ($1 + [128])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)(uint_64)*(*($3) + [8]) >> (uint_64)(int_64)8) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $589($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-5004454808576327680, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $589($0, $1, CALL $590($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $42 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $43(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [544])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1)
	CALL $45(($3 + [16]), $2)
	*($3) = ( *($3 + [24]) ? (($3 + [16]) | [1]) : (*($3 + [16]) & [1]) )
	CALL $22(($3 + [32]), [512], ( $4 ? ($1 + [1]) : ($5 & [1]) ), $3)
	CALL $26(($3 + [16]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	CALL $25($0, ($3 + [32]), CALL $2(($3 + [32])))
	$global$0 = ($3 + [544])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($2)
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	CALL $25($3, [8257], CALL $2([8257]))
	CALL $41(($3 + [16]), $3, $2)
	$1 = CALL $42(($1 + [608]), (uint_64)$4 >> (uint_64)(int_64)8), ( *($3 + [24]) ? (($3 + [16]) | [1]) : (*($3 + [16]) & [1]) )
	*(($2 = (($3 + [32]) + [8]))) = *(($1) + [8]))
	*($3 + [32]) = *($1)
	CALL $26(($3 + [16]))
	CALL $26($3)
	*(($0 + [8])) = *($2)
	*($0) = *($3 + [32])
	$global$0 = ($3 + [48])
}

int_32 .FUNC $47 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $48(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($2)
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	CALL $25($3, [8257], CALL $2([8257]))
	CALL $41(($3 + [16]), $3, $2)
	$1 = CALL $47(($1 + [568]), (uint_64)$4 >> (uint_64)(int_64)8), ( *($3 + [24]) ? (($3 + [16]) | [1]) : (*($3 + [16]) & [1]) )
	*(($2 = (($3 + [32]) + [8]))) = *(($1) + [8]))
	*($3 + [32]) = *($1)
	CALL $26(($3 + [16]))
	CALL $26($3)
	*(($0 + [8])) = *($2)
	*($0) = *($3 + [32])
	$global$0 = ($3 + [48])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (uint_64)*($1) >> (uint_64)(int_64)8)
	CALL $597($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	if ( $0 ){ goto $label$1 }
	CALL eosio_assert([0], $1)
	
.LABEL $label$1
}

void .FUNC $222 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	float_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	CALL $44(((int_32)*(($1 + [92])) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$5 = *($1 + [64])
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (Rounds 0)($5)
	
.LABEL $label$1
	*($4 + [24]) = ((int_64)$6 ^ (int_64)-1)
	$6 = *($1)
	$7 = *($2 + [4])
	$8 = ($1 + [72])
	CALL $64($8, *($2))
	CALL $44(CALL $60($8, ($7 + [56])), [12945])
	CALL $44(((int_64)$6 == (int_64)*($1)), [12400])
	$7 = CALL $444($1)
	if ( ($7 <= [513]) ){ goto $label$4 }
	$2 = CALL $3($7)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $7)
	CALL $445(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [96]), (int_64)0, $2, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $4($2)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$5 = *(($1 + [64]))
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$9 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$9 = (Rounds 0)($5)
	
.LABEL $label$7
	*($4 + [40]) = ((int_64)$9 ^ (int_64)-1)
	if ( (CALL $17(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$9 }
	$2 = *($1 + [100])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$10 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7128446144174096384, ($4 + [32]), $6)
	*(($1 + [100])) = $2
	
.LABEL $label$10
	CALL db_idx64_update($2, (int_64)0, ($4 + [40]))
	
.LABEL $label$9
	$global$0 = ($4 + [48])
}

int_32 .FUNC $509 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $714 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $715(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $508 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $923 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	$5 = CALL $927($0, $1, $2, $3, $5)
	$7 = *($3)
	$6 = *($4)
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$4 }
	*($3) = $6
	*($4) = $7
	$7 = *($2)
	$6 = *($3)
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$3 }
	*($2) = $6
	*($3) = $7
	$7 = *($1)
	$6 = *($2)
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$2 }
	*($1) = $6
	*($2) = $7
	$7 = *($0)
	$6 = *($1)
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$1 }
	*($0) = $6
	*($1) = $7
	$5 = ($5 + [4])
	
.LABEL $label$4
	return $5
	
.LABEL $label$3
	return ($5 + [1])
	
.LABEL $label$2
	return ($5 + [2])
	
.LABEL $label$1
	return ($5 + [3])
}

void .FUNC $922 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $124 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL $44(((int_64)*($2 + [8]) == (int_64)6003093065207795716), [8823])
	$5 = ($0 + [168])
	CALL $128(($4 + [8]), $5, $1)
	$6 = *($4 + [12])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $44(((int_32)*($6 + [24]) == (int_32)$3), [9038])
	$7 = *($0)
	$6 = *($4 + [12])
	CALL $44(((int_32)$6 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($6 + [28]) == (int_32)$5), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($5)), [12349])
	$1 = *($6)
	CALL $52(($6 + [8]), $2)
	CALL $44(((int_64)$1 == (int_64)*($6)), [12400])
	*($4 + [56]) = (($4 + [16]) + [28])
	*($4 + [52]) = ($4 + [16])
	*($4 + [48]) = ($4 + [16])
	CALL $129(($4 + [48]), $6)
	CALL db_update_i64(*($6 + [32]), $7, ($4 + [16]), [28])
	$0 = ($0 + [184])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$1 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	$7 = *($0)
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($5)), [12656])
	*(($6 = CALL $9([40])) + [28]) = $5
	*($6) = $1
	*($6 + [24]) = $3
	*($6 + [8]) = *($2)
	*(($6 + [16])) = *(($2 + [8]))
	*($4 + [56]) = (($4 + [16]) + [28])
	*($4 + [52]) = ($4 + [16])
	*($4 + [48]) = ($4 + [16])
	CALL $129(($4 + [48]), $6)
	$1 = *($6)
	$5 = CALL db_store_i64(*(($0 + [176])), (int_64)6716332327921008640, $7, $1, ($4 + [16]), [28])
	*($6 + [32]) = $5
	$2 = ($0 + [184])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$3 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($4 + [48]) = $6
	$1 = *($6)
	*($4 + [16]) = $1
	*($4 + [44]) = $5
	$3 = ($0 + [196])
	$2 = *($3)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [200]))) ){ goto $label$5 }
	*($2 + [8]) = $1
	*($2 + [16]) = $5
	*($4 + [48]) = [0]
	*($2) = $6
	*($3) = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $130(($0 + [192]), ($4 + [48]), ($4 + [16]), ($4 + [44]))
	
.LABEL $label$4
	$0 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $11($0)
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $920 (int_32 $0, int_32 $1)
{
	CALL $921($1, *($0))
	CALL $922($1, *($0 + [4]))
}

int_32 .FUNC $927 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	$4 = CALL $924($0, $1, $2, $4)
	$6 = *($2)
	$5 = *($3)
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$3 }
	*($2) = $5
	*($3) = $6
	$6 = *($1)
	$5 = *($2)
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$2 }
	*($1) = $5
	*($2) = $6
	$6 = *($0)
	$5 = *($1)
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$1 }
	*($0) = $5
	*($1) = $6
	$4 = ($4 + [3])
	
.LABEL $label$3
	return $4
	
.LABEL $label$2
	return ($4 + [1])
	
.LABEL $label$1
	return ($4 + [2])
}

void .FUNC $854 (int_32 $0, int_32 $1)
{
	CALL $855(*($0 + [4]), $1)
	*($1 + [28]) = *(*($0 + [8]))
}

int_32 .FUNC $925 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = int_32(($1 - $0) >> [3])
	if ( ((uint_32)$3 > (uint_32)[5]) ){ goto $label$6 }
	$4 = [1]
	goto $label$5 
	
.LABEL $label$7
	$6 = *($0)
	$3 = ($1 + [-8])
	$5 = *($3)
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$5 }
	*($0) = $5
	*($3) = $6
	return [1]
	
.LABEL $label$6
	$7 = [16]
	$3 = ($0 + [16])
	CALL $924($0, ($0 + [8]), $3, $2)
	$8 = ($0 + [24])
	$9 = [0]
	$4 = [1]
	
.LOOP $label$8:
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$5 }
	$5 = *($3)
	$6 = *($8)
	if ( ((uint_64)$6 >= (uint_64)$5) ){ goto $label$9 }
	$3 = $7
	
.LOOP $label$12:
	*((($2 = ($0 + $3)) + [8])) = $5
	if ( ($3 == 0) ){ goto $label$11 }
	$3 = ($3 + [-8])
	$5 = *(($2 + [-8]))
	if ( (uint_64)($6 <= $5) ){ goto $label$12 }
	$3 = (($0 + $3) + [8])
	goto $label$10 
	
.LABEL $label$11
	$3 = $0
	
.LABEL $label$10
	*($3) = $6
	$9 = ($9 + [1])
	if ( ((int_32)$9 == (int_32)[8]) ){ goto $label$1 }
	
.LABEL $label$9
	$7 = ($7 + [8])
	$3 = $8
	$8 = ($8 + [8])
	goto $label$8 
	
.LABEL $label$5
	return $4
	
.LABEL $label$4
	CALL $924($0, ($0 + [8]), ($1 + [-8]), $2)
	return [1]
	
.LABEL $label$3
	CALL $927($0, ($0 + [8]), ($0 + [16]), ($1 + [-8]), $2)
	return [1]
	
.LABEL $label$2
	CALL $923($0, ($0 + [8]), ($0 + [16]), ($0 + [24]), ($1 + [-8]), $2)
	return [1]
	
.LABEL $label$1
	$3
	return ((int_32)($8 + [8]) == (int_32)$1)
}

int_32 .FUNC $924 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$4 = *($2)
	$6 = *($0)
	$5 = *($1)
	if ( ((uint_64)$5 >= (uint_64)$6) ){ goto $label$4 }
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$3 }
	*($0) = $4
	*($2) = $6
	return [1]
	
.LABEL $label$4
	$7 = [0]
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$1 }
	*($1) = $4
	*($2) = $5
	$7 = [1]
	$5 = *($0)
	$4 = *($1)
	if ( ((uint_64)$4 >= (uint_64)$5) ){ goto $label$1 }
	*($0) = $4
	*($1) = $5
	goto $label$2 
	
.LABEL $label$3
	*($0) = $5
	*($1) = $6
	$7 = [1]
	$4 = *($2)
	if ( ((uint_64)$4 >= (uint_64)$6) ){ goto $label$1 }
	*($1) = $4
	*($2) = $6
	
.LABEL $label$2
	$7 = [2]
	
.LABEL $label$1
	return $7
}

void .FUNC $289 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [48])
	$global$0 = $5
	if ( (CALL $265($0) == 0) ){ goto $label$1 }
	*($5 + [40]) = [0]
	*($5 + [32]) = (int_64)0
	CALL $849(($5 + [16]), $0)
	$6 = *($5 + [20])
	$7 = *($5 + [16])
	
.LOOP $label$3:
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL $286($5, $4, *($7))
	$8 = *($5 + [4])
	if ( ($8 == 0) ){ goto $label$4 }
	$9 = ($8 + [8])
	$8 = *($5 + [36])
	if ( ((int_32)$8 == (int_32)*((($5 + [32]) + [8]))) ){ goto $label$5 }
	*($8) = *($9)
	*($5 + [36]) = ($8 + [8])
	goto $label$4 
	
.LABEL $label$5
	CALL $850(($5 + [32]), $9)
	
.LABEL $label$4
	$7 = ($7 + [96])
	goto $label$3 
	
.LABEL $label$2
	$10 = CALL $132($5, CALL $69($5, ($5 + [32])), *($2 + [8]))
	$7 = ($7 & [1])
	$7 = *($0 + [28])
	$8 = ($6 & [1])
	$6 = *($3)
	$4 = uint_32($6 >> [1])
	$2 = *($3 + [4])
	$9 = ( $2 ? $4 : $8 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [32])) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$10 }
	$7 = ( *(($0 + [36])) ? (($0 + [28]) + [1]) : $7 )
	if ( $8 ){ goto $label$11 }
	$8 = ([0] - $4)
	$9 = ($3 + [1])
	
.LOOP $label$12:
	if ( ($8 == 0) ){ goto $label$9 }
	if ( ((int_32)*($9) != (int_32)*($7)) ){ goto $label$10 }
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	$9 = ($9 + [1])
	goto $label$12 
	
.LABEL $label$11
	if ( (CALL $277(*($3 + [8]), $7, $9) == 0) ){ goto $label$9 }
	$6 = *($3)
	$4 = uint_32($6 >> [1])
	$2 = *(($3 + [4]))
	
.LABEL $label$10
	$7 = ($7 & [1])
	$7 = *($0 + [40])
	$8 = ($6 & [1])
	$9 = ( $2 ? $4 : $8 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [44])) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$6 }
	$7 = ( *(($0 + [48])) ? (($0 + [40]) + [1]) : $7 )
	if ( $8 ){ goto $label$8 }
	$8 = ($3 + [1])
	
.LOOP $label$13:
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ((int_32)*($8) != (int_32)*($7)) ){ goto $label$6 }
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	$4 = ($4 + [-1])
	goto $label$13 
	
.LABEL $label$9
	CALL $292($0, $1, $10, ($0 + [608]))
	goto $label$6 
	
.LABEL $label$8
	if ( CALL $277(*($3 + [8]), $7, $9) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $291($0, $1, $10, ($0 + [568]))
	
.LABEL $label$6
	CALL $851(($5 + [16]))
	CALL $852(($5 + [32]))
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

void .FUNC $928 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$3 = int_32(($2 - $1) >> [3])
	if ( ((uint_32)$3 <= (uint_32)int_32((*($0 + [8]) - $4) >> [3])) ){ goto $label$2 }
	CALL $929($0)
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$4 = [536870911]
	$5 = (*(($0 + [8])) - *($0))
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$3 }
	$4 = int_32($5 >> [2])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	
.LABEL $label$3
	CALL $375($0, $4)
	CALL $376($0, $1, $2, $3)
	return 
	
.LABEL $label$2
	$6 = int_32($5 >> [3])
	$5 = (*($0 + [4]) - $4)
	$7 = ( ($1 + $5) ? $2 : ((uint_32)$3 > (uint_32)$6) )
	$5 = ($7 - $1)
	if ( ($5 == 0) ){ goto $label$4 }
	CALL memmove($4, $1, $5)
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$5 }
	CALL $376($0, $7, $2, ($3 - int_32((*(($0 + [4])) - *($0)) >> [3])))
	return 
	
.LABEL $label$5
	*(($0 + [4])) = ($4 + (int_32($5 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $563 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $516($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $562 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $561 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $560 (int_32 $0, int_32 $1)
{
	CALL $326($0, $1, [8])
	return $0
}

void .FUNC $567 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $576(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $577($0, $9)
	CALL $578($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $566 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = [0]
	*($0 + [40]) = $1
	CALL $568($2, $0)
	return $0
}

int_32 .FUNC $565 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([56])
	$2 = CALL $566($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	*($3 + [8]) = (int_64)7235159537265672192
	$8 = *($1 + [44])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$7 = *($9)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $8
	*($3 + [24]) = [0]
	*($7) = $1
	*($9) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $567($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $564 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [40]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $569 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $570($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $568 (int_32 $0, int_32 $1)
{
	CALL $569(*($0 + [4]), $1)
	*($1 + [44]) = *(*($0 + [8]))
}

void .FUNC $398 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [16]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $399 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([32])
	$2 = CALL $400($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $8)
	$9 = *($1 + [20])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $401($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $648 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = [0]
	$6 = CALL $640($1, ($4 + [12]), $2)
	$2 = *($6)
	if ( $2 ){ goto $label$1 }
	*(($2 = CALL $9([24])) + [16]) = *($3)
	CALL $641($1, *($4 + [12]), $6, $2)
	$5 = [1]
	
.LABEL $label$1
	*($0 + [4]) = $5
	*($0) = $2
	$global$0 = ($4 + [16])
}

int_32 .FUNC $649 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = [0]
	CALL $651(($1 + [8]), $0)
	$0 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $390 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [8])
	$2 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$2:
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$1 = ($1 + [-1])
	*($3) = $1
	goto $label$2 
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $11($1)
	
.LABEL $label$3
	return $0
}

void .FUNC $643 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	$2 = *($1 + [4])
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	*($2 + [8]) = $0
	
.LABEL $label$1
	*($1 + [8]) = *($0 + [8])
	*((($2 = *($0 + [8])) + ( [0] ? [4] : ((int_32)*($2) == (int_32)$0) ))) = $1
	*($0 + [8]) = $1
	*(($1 + [4])) = $0
}

int_32 .FUNC $392 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$3 = *($1)
	$2 = *($1 + [4])
	$1 = (($2 + *($0)) - $3)
	$4 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $1
	return $0
}

int_32 .FUNC $393 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	
.LOOP $label$1:
	$1 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$4 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($4) << [7]) | ($1 & [127]))
	CALL $394($0, ($2 + [15]), [1])
	if ( $4 ){ goto $label$1 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $394 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)(*($0 + [8]) - *($0 + [4])) >= (int_32)$2), [11599])
	CALL memcpy(*($0 + [4]), $1, $2)
	*($0 + [4]) = (*($0 + [4]) + $2)
	return [1]
}

int_32 .FUNC $395 (int_32 $0, int_32 $1)
{
	return CALL $385(CALL $385($0, $1), ($1 + [8]))
}

int_32 .FUNC $396 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = *($0)
	$0 = [0]
	$2 = [1]
	
.LOOP $label$2:
	if ( ((int_32)$0 > (int_32)[6]) ){ goto $label$1 }
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$1 = $3
	$4 = $0
	goto $label$4 
	
.LABEL $label$5
	$1 = $3
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$4
	$0 = ($4 + [1])
	goto $label$2 
	
.LABEL $label$3
	$2 = [0]
	
.LABEL $label$1
	return $2
}

void .FUNC $397 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)(uint_64)*(*($3) + [8]) >> (uint_64)(int_64)8) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $398($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)3607749779137757184, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $398($0, $1, CALL $399($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $653 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $654($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $859 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $858 (int_32 $0, int_32 $1)
{
	CALL $859($1, *($0))
	CALL $860($1, *($0 + [4]))
}

void .FUNC $857 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $858(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $856 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $857($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $855 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $856($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $652 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $658($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $853 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $854($2, $0)
	return $0
}

int_32 .FUNC $852 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0 + [4]) = $1
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $851 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	CALL $26(($2 + [-48]))
	$2 = ($2 + [-96])
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $850 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = int_32((*($0 + [4]) - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = ($0 + [8])
	$7 = [536870911]
	$3 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($3 >> [3]) > (uint_32)[268435454]) ){ goto $label$2 }
	$7 = int_32($3 >> [2])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	
.LABEL $label$2
	*(($3 = *(($7 = CALL $875(($2 + [8]), $7, $4, $6)) + [8]))) = *($1)
	*($7 + [8]) = ($3 + [8])
	CALL $876($0, $7)
	CALL $877($7)
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $365 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [820]) = $2
	*($3 + [816]) = $2
	*($3 + [824]) = ($2 + $4)
	*($3 + [808]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [808]))
	$2 = *($3 + [824])
	*((($3 + [24]) + [8])) = $2
	*((($3 + [8]) + [8])) = $2
	$5 = *($3 + [816])
	*($3 + [8]) = $5
	*($3 + [24]) = $5
	$2 = CALL $322(($3 + [40]), $0, $1, ($3 + [8]))
	CALL $273($2, *($3 + [808]))
	CALL $323($2)
	$global$0 = ($3 + [832])
}

void .FUNC $364 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [820]) = $2
	*($3 + [816]) = $2
	*($3 + [824]) = ($2 + $4)
	*($3 + [808]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [808]))
	$2 = *($3 + [824])
	*((($3 + [24]) + [8])) = $2
	*((($3 + [8]) + [8])) = $2
	$5 = *($3 + [816])
	*($3 + [8]) = $5
	*($3 + [24]) = $5
	$2 = CALL $322(($3 + [40]), $0, $1, ($3 + [8]))
	CALL $271($2, *($3 + [808]))
	CALL $323($2)
	$global$0 = ($3 + [832])
}

void .FUNC $367 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [912])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [900]) = $4
	*($3 + [896]) = $4
	*($3 + [904]) = ($4 + $5)
	*($3 + [888]) = (int_64)0
	CALL $319(($3 + [896]), ($3 + [888]))
	*($3 + [880]) = (int_64)0
	*($3 + [872]) = (int_64)0
	CALL $320(($3 + [896]), ($3 + [872]))
	*(($3 + [864])) = [0]
	*($3 + [856]) = (int_64)0
	$4 = [0]
	
.LOOP $label$5:
	if ( ((int_32)$4 == (int_32)[12]) ){ goto $label$4 }
	*((($3 + [856]) + $4)) = [0]
	$4 = ($4 + [4])
	goto $label$5 
	
.LABEL $label$4
	CALL $351(($3 + [896]), ($3 + [856]))
	$4 = *((($3 + [896]) + [8]))
	*((($3 + [72]) + [8])) = $4
	*((($3 + [24]) + [8])) = $4
	$6 = *($3 + [896])
	*($3 + [24]) = $6
	*($3 + [72]) = $6
	$4 = CALL $322(($3 + [88]), $0, $1, ($3 + [24]))
	*(($2 = (($3 + [56]) + [8]))) = *((($3 + [872]) + [8]))
	*($3 + [56]) = *($3 + [872])
	$0 = *($3 + [888])
	$5 = CALL $24(($3 + [40]), ($3 + [856]))
	*((($3 + [8]) + [8])) = *($2)
	*($3 + [8]) = *($3 + [56])
	CALL $275($4, $0, ($3 + [8]), $5)
	CALL $26($5)
	CALL $323($4)
	CALL $26(($3 + [856]))
	$global$0 = ($3 + [912])
}

void .FUNC $366 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [820]) = $2
	*($3 + [816]) = $2
	*($3 + [824]) = ($2 + $4)
	*($3 + [808]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [808]))
	$2 = *($3 + [824])
	*((($3 + [24]) + [8])) = $2
	*((($3 + [8]) + [8])) = $2
	$5 = *($3 + [816])
	*($3 + [8]) = $5
	*($3 + [24]) = $5
	$2 = CALL $322(($3 + [40]), $0, $1, ($3 + [8]))
	CALL $274($2, *($3 + [808]))
	CALL $323($2)
	$global$0 = ($3 + [832])
}

void .FUNC $361 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [820]) = $2
	*($3 + [816]) = $2
	*($3 + [824]) = ($2 + $4)
	*($3 + [808]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [808]))
	*($3 + [800]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [800]))
	$2 = *($3 + [824])
	*((($3 + [16]) + [8])) = $2
	*(($3 + [8])) = $2
	$5 = *($3 + [816])
	*($3) = $5
	*($3 + [16]) = $5
	$2 = CALL $322(($3 + [32]), $0, $1, $3)
	CALL $264($2, *($3 + [808]), *($3 + [800]))
	CALL $323($2)
	$global$0 = ($3 + [832])
}

void .FUNC $360 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [880])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [868]) = $2
	*($3 + [864]) = $2
	*($3 + [872]) = ($2 + $4)
	*($3 + [856]) = (int_64)0
	CALL $319(($3 + [864]), ($3 + [856]))
	*($3 + [848]) = (int_64)0
	*($3 + [840]) = (int_64)0
	CALL $320(($3 + [864]), ($3 + [840]))
	$2 = *($3 + [872])
	*((($3 + [56]) + [8])) = $2
	*((($3 + [24]) + [8])) = $2
	$5 = *($3 + [864])
	*($3 + [24]) = $5
	*($3 + [56]) = $5
	$2 = CALL $322(($3 + [72]), $0, $1, ($3 + [24]))
	$0 = *($3 + [848])
	*((($3 + [40]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [840])
	*($3 + [40]) = $0
	*($3 + [8]) = $0
	CALL $252($2, *($3 + [856]), ($3 + [8]))
	CALL $323($2)
	$global$0 = ($3 + [880])
}

void .FUNC $363 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [820]) = $2
	*($3 + [816]) = $2
	*($3 + [824]) = ($2 + $4)
	*($3 + [808]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [808]))
	$2 = *($3 + [824])
	*((($3 + [24]) + [8])) = $2
	*((($3 + [8]) + [8])) = $2
	$5 = *($3 + [816])
	*($3 + [8]) = $5
	*($3 + [24]) = $5
	$2 = CALL $322(($3 + [40]), $0, $1, ($3 + [8]))
	CALL $269($2, *($3 + [808]))
	CALL $323($2)
	$global$0 = ($3 + [832])
}

void .FUNC $362 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [820]) = $2
	*($3 + [816]) = $2
	*($3 + [824]) = ($2 + $4)
	*($3 + [808]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [808]))
	*($3 + [800]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [800]))
	$2 = *($3 + [824])
	*((($3 + [16]) + [8])) = $2
	*(($3 + [8])) = $2
	$5 = *($3 + [816])
	*($3) = $5
	*($3 + [16]) = $5
	$2 = CALL $322(($3 + [32]), $0, $1, $3)
	CALL $268($2, *($3 + [808]), *($3 + [800]))
	CALL $323($2)
	$global$0 = ($3 + [832])
}

int_32 .FUNC $246 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	float_64 $5
	int_32 $6
	int_32 $7
	$4 = int_32((*($1 + [4]) - *($1)) >> [3])
	CALL $44(($4 <= [31]), [12089])
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$5 = ((float_64)(CASTING float_64)(uint_32 $4) / (float_64)(CASTING float_64)(uint_32 $2))
	$7 = ((uint_32)$0 % (uint_32)$4)
	$6 = *($1)
	$0 = ($6 + ($7 << [3]))
	$4 = ((uint_32)($7 + $2) % (uint_32)$4)
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$6 = ($1 + [4])
	
.LOOP $label$5:
	if ( ((int_32)$0 == (int_32)*($6)) ){ goto $label$4 }
	CALL $426($3, *($0), $5)
	$0 = ($0 + [8])
	goto $label$5 
	
.LABEL $label$4
	$2 = ($4 << [3])
	$7 = ($1 + [4])
	$6 = *($1)
	$0 = $6
	
.LOOP $label$6:
	if ( ((int_32)$0 == (int_32)($6 + $2)) ){ goto $label$1 }
	CALL $44(((int_32)$0 != (int_32)*($7)), [12166])
	CALL $426($3, *($0), $5)
	$0 = ($0 + [8])
	$6 = *($1)
	goto $label$6 
	
.LABEL $label$3
	$6 = *(($1 + [4]))
	$0 = *($1)
	
.LOOP $label$7:
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$1 }
	CALL $426($3, *($0), (float_64)1)
	$0 = ($0 + [8])
	goto $label$7 
	
.LABEL $label$2
	$2 = ($4 << [3])
	$7 = ($1 + [4])
	
.LOOP $label$8:
	if ( ((int_32)$0 == (int_32)($6 + $2)) ){ goto $label$1 }
	CALL $44(((int_32)$0 != (int_32)*($7)), [12166])
	CALL $426($3, *($0), $5)
	$0 = ($0 + [8])
	$6 = *($1)
	goto $label$8 
	
.LABEL $label$1
	return $4
}

int_32 .FUNC $247 (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [16])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$2 }
	CALL void $1((int_32 *(*($1) + [20])))
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	CALL void $1((int_32 *(*($1) + [16])))
	return $0
}

int_32 .FUNC $244 (int_32 $0, int_32 $1)
{
	*($0) = *($1)
	CALL $373(($0 + [8]), ($1 + [8]))
	*($0 + [20]) = *($1 + [20])
	return $0
}

void .FUNC $245 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( $0 ){ goto $label$1 }
	CALL $425($4, $1, $2, $3)
	CALL $44([0], ( *($4 + [8]) ? ($4 | [1]) : (*($4) & [1]) ))
	CALL $26($4)
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $242 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [256])
	$global$0 = $2
	$3 = ($0 + [488])
	CALL $243(($2 + [248]), $3, *($1))
	$4 = *($2 + [252])
	*(($5 = (($2 + [128]) + [8]))) = [0]
	*($2 + [128]) = (int_64)0
	CALL $25(($2 + [128]), [11950], CALL $2([11950]))
	CALL $51(((int_32)$4 != (int_32)[0]), ($2 + [128]), $1)
	CALL $26(($2 + [128]))
	$1 = CALL $244(($2 + [224]), *($2 + [252]))
	$4 = ($1 + [12])
	$6 = *($4)
	$7 = *($1 + [8])
	*($5) = [0]
	*($2 + [128]) = (int_64)0
	CALL $25(($2 + [128]), [11990], CALL $2([11990]))
	*($2 + [80]) = int_32((*($4) - *($1 + [8])) >> [3])
	CALL $245((int_32(($6 - $7) >> [3]) <= [31]), ($2 + [128]), [12084], ($2 + [80]))
	CALL $26(($2 + [128]))
	*($2 + [216]) = (int_64)0
	$4 = CALL $132(($2 + [200]), (int_64)0, (int_64)92656475524612)
	*($2 + [168]) = [12240]
	*($2 + [172]) = $0
	*($2 + [180]) = $4
	*($2 + [176]) = ($2 + [216])
	*($2 + [184]) = ($2 + [168])
	$4 = CALL $246(*($1 + [20]), ($1 + [8]), [3], ($2 + [168]))
	CALL $247(($2 + [168]))
	*($2 + [196]) = $4
	$4 = ($0 + [448])
	CALL $99(($2 + [128]), $4)
	*($2 + [128]) = ((int_64)*($2 + [128]) + (int_64)1)
	*($2 + [136]) = ((float_64)*($2 + [216]) + (float_64)*($2 + [136]))
	CALL $102($4, ($2 + [128]), *($0))
	*($2 + [120]) = *($2 + [248])
	*($2) = *($2 + [120])
	*($2 + [80]) = ($2 + [196])
	CALL $248($3, $2, (int_64)0, ($2 + [80]))
	*($2 + [72]) = (int_64)3617214756542218240
	$8 = *($0)
	*($2 + [64]) = $8
	*(($0 = (($2 + [8]) + [8]))) = [0]
	*($2 + [8]) = (int_64)0
	CALL $25(($2 + [8]), [12088], [0])
	*(($2 + [40])) = *((($2 + [200]) + [8]))
	*(($2 + [56])) = *($0)
	*($2 + [24]) = $8
	*($2 + [32]) = *($2 + [200])
	*($2 + [48]) = *($2 + [8])
	$0 = [0]
	
.LOOP $label$2:
	if ( ((int_32)$0 == (int_32)[12]) ){ goto $label$1 }
	*((($2 + [8]) + $0)) = [0]
	$0 = ($0 + [4])
	goto $label$2 
	
.LABEL $label$1
	$0 = CALL $249(($2 + [80]), ($2 + [64]), (int_64)-5918374966777866960, (int_64)8516769789752901632, ($2 + [24]))
	CALL $155($0)
	CALL $156($0)
	CALL $26(($2 + [48]))
	CALL $26(($2 + [8]))
	CALL $250(($1 + [8]))
	$global$0 = ($2 + [256])
}

void .FUNC $243 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3)) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $311($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-2507753063930920960, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $311($0, $1, CALL $312($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $240 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	$8 = ($global$0 - [32])
	$global$0 = $8
	*($8 + [16]) = $2
	*($8 + [24]) = $1
	*($8 + [8]) = $6
	CALL require_auth($1)
	CALL $241($0)
	$9 = *($3)
	if ( ($9 & [1]) ){ goto $label$2 }
	$3 = uint_32($9 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($3 + [4])
	
.LABEL $label$1
	CALL $44(($3 <= [257]), [9904])
	$3 = *($4)
	if ( ($3 & [1]) ){ goto $label$4 }
	$4 = uint_32($3 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($4 + [4])
	
.LABEL $label$3
	CALL $44(($4 <= [257]), [9933])
	CALL require_recipient($2)
	CALL $70($0, ($8 + [24]), ($8 + [16]), ($8 + [8]), $7)
	CALL $242($0, ($8 + [16]))
	$global$0 = ($8 + [32])
}

void .FUNC $241 (int_32 $0)
{
	CALL $44(CALL $234(($0 + [448])), [11919])
}

void .FUNC $227 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	$5 = $3
	$3 = ($5 + [-24])
	if ( ((int_64)$2 == (int_64)-7128454209411632640) ){ goto $label$1 }
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL $796($0, $1, *($3))
	return 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7128454209411632640, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$4 }
	CALL $796($0, $1, CALL $797($1, $3))
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $789 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $790(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $788 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $789($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $787 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $788($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $552 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [48])
	*($2 + [12]) = ($0 + [60])
	*($2 + [16]) = ($0 + [64])
	*($2 + [20]) = ($0 + [72])
	*($2 + [24]) = ($0 + [88])
	*($2 + [28]) = ($0 + [89])
	CALL $553($2, $1)
	$global$0 = ($2 + [32])
}

int_32 .FUNC $785 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $786($2, $0)
	return $0
}

void .FUNC $784 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $783 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

void .FUNC $782 (int_32 $0, int_32 $1)
{
	CALL $468(*($0), $1)
}

void .FUNC $781 (int_32 $0, int_32 $1)
{
	CALL $782($1, *($0))
	CALL $783($1, *($0 + [4]))
	CALL $784($1, *($0 + [8]))
}

void .FUNC $658 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [20])
	CALL $659($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $149 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($1)
	$4 = *($2)
	*($3 + [16]) = $4
	$2 = CALL $202(($3 + [8]), $4, [9467])
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
	CALL $203(($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $148 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3)) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $178($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)5378043540710670336, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $178($0, $1, CALL $179($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $419 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $418 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	
.LOOP $label$3:
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[37]) ){ goto $label$1 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	goto $label$3 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	CALL $201($1)
	CALL prints(($0 + [1]))
}

void .FUNC $416 (int_32 $0, int_32 $1)
{
	CALL $417($1, *($0))
	CALL $417($1, *($0 + [4]))
	CALL $418($1, *($0 + [8]))
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3)) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $189($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4157661224948465664, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $189($0, $1, CALL $190($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $146 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	
.LOOP $label$2:
	$4 = *($0)
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)[37]) ){ goto $label$3 }
	CALL prints_l($0, [1])
	$0 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	CALL printn($1)
	$5 = *(($2 + [8]))
	*((($3 + [16]) + [8])) = $5
	$1 = *($2)
	*(($3 + [8])) = $5
	*($3) = $1
	*($3 + [16]) = $1
	CALL $145(($0 + [1]), $3)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
}

void .FUNC $141 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL $44(((int_64)*($2 + [8]) == (int_64)6003093065207795716), [8823])
	$4 = ($0 + [208])
	CALL $147(($3 + [8]), $4, $1)
	if ( (*($3 + [12]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$6 = *($3 + [12])
	CALL $44(((int_32)$6 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($6 + [24]) == (int_32)$4), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($4)), [12349])
	$1 = *($6)
	CALL $52(($6 + [8]), $2)
	CALL $44(((int_64)$1 == (int_64)*($6)), [12400])
	*($3 + [56]) = (($3 + [16]) + [24])
	*($3 + [52]) = ($3 + [16])
	*($3 + [48]) = ($3 + [16])
	CALL $158(($3 + [48]), $6)
	CALL db_update_i64(*($6 + [28]), $5, ($3 + [16]), [24])
	$0 = ($0 + [224])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$1 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0)
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($4)), [12656])
	*(($6 = CALL $9([40])) + [24]) = $4
	*($6) = $1
	*($6 + [8]) = *($2)
	*(($6 + [16])) = *(($2 + [8]))
	*($3 + [56]) = (($3 + [16]) + [24])
	*($3 + [52]) = ($3 + [16])
	*($3 + [48]) = ($3 + [16])
	CALL $158(($3 + [48]), $6)
	$1 = *($6)
	$4 = CALL db_store_i64(*(($0 + [216])), (int_64)-4157661224948465664, $5, $1, ($3 + [16]), [24])
	*($6 + [28]) = $4
	$2 = ($0 + [224])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$3 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($3 + [48]) = $6
	$1 = *($6)
	*($3 + [16]) = $1
	*($3 + [44]) = $4
	$7 = ($0 + [236])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [240]))) ){ goto $label$5 }
	*($2 + [8]) = $1
	*($2 + [16]) = $4
	*($3 + [48]) = [0]
	*($2) = $6
	*($7) = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $159(($0 + [232]), ($3 + [48]), ($3 + [16]), ($3 + [44]))
	
.LABEL $label$4
	$0 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $11($0)
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $140 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	float_64 $10
	$4 = ($global$0 - [512])
	$global$0 = $4
	*($4 + [496]) = $2
	*($4 + [504]) = $1
	CALL require_auth($1)
	CALL $74(($4 + [488]), ($0 + [288]), (uint_64)$2 >> (uint_64)(int_64)8))
	$5 = *($4 + [492])
	if ( $5 ){ goto $label$2 }
	if ( ($3 == 0) ){ goto $label$1 }
	*(($4 + [88])) = [0]
	*($4 + [80]) = (int_64)0
	CALL $25(($4 + [80]), [9149], CALL $2([9149]))
	CALL $142([0], ($4 + [80]), ($4 + [496]))
	CALL $26(($4 + [80]))
	$1 = *($4 + [504])
	$2 = *($4 + [496])
	$5 = *($4 + [492])
	
.LABEL $label$2
	*((($4 + [472]) + [8])) = *(($5 + [24]))
	*($4 + [472]) = *($5 + [16])
	$5 = CALL $132(($4 + [456]), (int_64)0, $2)
	*(($4 + [448])) = [0]
	*($4 + [432]) = (int_64)-1
	*($4 + [440]) = (int_64)0
	*($4 + [416]) = *($0)
	*($4 + [424]) = (uint_64)*($4 + [496]) >> (uint_64)(int_64)8)
	CALL $143(($4 + [408]), ($4 + [416]), $1)
	$6 = *($4 + [412])
	if ( ($6 == 0) ){ goto $label$3 }
	*((($4 + [456]) + [8])) = *(($6 + [16]))
	*($4 + [456]) = *($6 + [8])
	
.LABEL $label$3
	if ( (CALL $144(($4 + [472]), $5) == 0) ){ goto $label$5 }
	if ( ($3 == 0) ){ goto $label$4 }
	CALL eosio_assert([0], [9191])
	$1 = *($4 + [504])
	
.LABEL $label$5
	*(($6 = (($4 + [392]) + [8]))) = *((($4 + [472]) + [8]))
	*($4 + [392]) = *($4 + [472])
	CALL $64(($4 + [392]), $5)
	$2 = *($6)
	*((($4 + [376]) + [8])) = $2
	*((($4 + [48]) + [8])) = $2
	$2 = *($4 + [392])
	*($4 + [48]) = $2
	*($4 + [376]) = $2
	CALL $145([9254], ($4 + [48]))
	$6 = CALL $132(($4 + [360]), (int_64)0, (int_64)6003093065207795716)
	CALL $128(($4 + [352]), ($0 + [168]), $1)
	$5 = *($4 + [356])
	if ( ($5 == 0) ){ goto $label$6 }
	*((($4 + [360]) + [8])) = *(($5 + [16]))
	*($4 + [360]) = *($5 + [8])
	
.LABEL $label$6
	$2 = *((($4 + [360]) + [8]))
	*((($4 + [336]) + [8])) = $2
	*((($4 + [32]) + [8])) = $2
	$2 = *($4 + [360])
	*($4 + [32]) = $2
	*($4 + [336]) = $2
	CALL $146([9283], $1, ($4 + [32]))
	CALL $132(($4 + [320]), (int_64)0, (int_64)6003093065207795716)
	CALL $147(($4 + [312]), ($0 + [208]), $1)
	$5 = *($4 + [316])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [328])) = *(($5 + [16]))
	*($4 + [320]) = *($5 + [8])
	
.LABEL $label$7
	$7 = (($4 + [320]) + [8])
	$2 = *($7)
	*((($4 + [296]) + [8])) = $2
	*((($4 + [16]) + [8])) = $2
	$2 = *($4 + [320])
	*($4 + [16]) = $2
	*($4 + [296]) = $2
	CALL $146([9312], $1, ($4 + [16]))
	$8 = CALL $132(($4 + [280]), (int_64)0, (int_64)6003093065207795716)
	CALL $148(($4 + [272]), ($0 + [248]), $1)
	$5 = *($4 + [276])
	if ( ($5 == 0) ){ goto $label$8 }
	*((($4 + [280]) + [8])) = *(($5 + [16]))
	*($4 + [280]) = *($5 + [8])
	
.LABEL $label$8
	CALL prints([9341])
	*(($5 = (($4 + [80]) + [8]))) = *($7)
	*($4 + [80]) = *($4 + [320])
	CALL $52(($4 + [80]), $6)
	*(($6 = (($4 + [256]) + [8]))) = *($5)
	*($4 + [256]) = *($4 + [80])
	CALL $52(($4 + [256]), $8)
	$2 = *($6)
	*((($4 + [240]) + [8])) = $2
	*(($4 + [8])) = $2
	$2 = *($4 + [256])
	*($4) = $2
	*($4 + [240]) = $2
	CALL $145([9373], $4)
	*($4 + [80]) = (int_64)23449582285967952
	CALL $149(($4 + [224]), [8784], ($4 + [80]))
	$2 = *($4 + [256])
	$9 = *($4 + [224])
	$5 = CALL $132(($4 + [208]), (int_64)0, *($4 + [496]))
	$10 = ((float_64)((float_64)(CASTING float_64)(int_64 $2) / (float_64)(CASTING float_64)(int_64 $9)) * (float_64)(CASTING float_64)(int_64 *($4 + [392])))
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)9223372036854775808) ){ goto $label$10 }
	$2 = (int_64)-9223372036854775808
	goto $label$9 
	
.LABEL $label$10
	$2 = (Rounds 0)($10)
	
.LABEL $label$9
	*($5) = $2
	if ( ((int_64)$2 > (int_64)0) ){ goto $label$11 }
	if ( ($3 == 0) ){ goto $label$4 }
	CALL eosio_assert([0], [9402])
	$1 = *($4 + [504])
	
.LABEL $label$11
	CALL $80($0, $5)
	CALL $143(($4 + [200]), ($4 + [416]), $1)
	*($4 + [196]) = ($4 + [504])
	*($4 + [192]) = ($4 + [472])
	if ( (*($4 + [204]) == 0) ){ goto $label$13 }
	$5 = *($4 + [204])
	CALL $44(((int_32)$5 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($5 + [32]) == (int_32)($4 + [416])), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($4 + [416])), [12349])
	$2 = *($5 + [24])
	CALL $150(($4 + [192]), $5)
	CALL $44(((int_64)$2 == (int_64)*($5 + [24])), [12400])
	*($4 + [160]) = (($4 + [80]) + [32])
	*($4 + [156]) = ($4 + [80])
	*($4 + [152]) = ($4 + [80])
	CALL $151(($4 + [152]), $5)
	CALL db_update_i64(*($5 + [36]), $1, ($4 + [80]), [32])
	$5 = ($4 + [432])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$12 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	goto $label$12 
	
.LABEL $label$13
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($4 + [416])), [12656])
	*(($5 = CALL $9([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = ($4 + [416])
	CALL $150(($4 + [192]), $5)
	*($4 + [160]) = (($4 + [80]) + [32])
	*($4 + [156]) = ($4 + [80])
	*($4 + [152]) = ($4 + [80])
	CALL $151(($4 + [152]), $5)
	$2 = *($5 + [24])
	$6 = CALL db_store_i64(*(($4 + [424])), (int_64)7864012133102518272, $1, $2, ($4 + [80]), [32])
	*($5 + [36]) = $6
	$3 = ($4 + [432])
	if ( (uint_64)($2 <= *($3)) ){ goto $label$14 }
	*($3) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($4 + [152]) = $5
	$1 = *(($5 + [24]))
	*($4 + [80]) = $1
	*($4 + [136]) = $6
	$7 = ($4 + [444])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*((($4 + [416]) + [32]))) ){ goto $label$16 }
	*($3 + [8]) = $1
	*($3 + [16]) = $6
	*($4 + [152]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $152((($4 + [416]) + [24]), ($4 + [152]), ($4 + [80]), ($4 + [136]))
	
.LABEL $label$15
	$5 = *($4 + [152])
	*($4 + [152]) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $11($5)
	
.LABEL $label$12
	$1 = *(CALL $153(($0 + [648]), (uint_64)*($4 + [496]) >> (uint_64)(int_64)8), [9467]) + [8])
	*($4 + [144]) = (int_64)3617214756542218240
	$2 = *($0)
	*($4 + [136]) = $2
	*(($0 = (($4 + [64]) + [8]))) = [0]
	*($4 + [64]) = (int_64)0
	CALL $25(($4 + [64]), [9486], [11])
	*(($4 + [104])) = *((($4 + [208]) + [8]))
	*(($4 + [120])) = *($0)
	*($4 + [80]) = $2
	*($4 + [88]) = *($4 + [504])
	*($4 + [96]) = *($4 + [208])
	*($4 + [112]) = *($4 + [64])
	$0 = [0]
	
.LOOP $label$18:
	if ( ((int_32)$0 == (int_32)[12]) ){ goto $label$17 }
	*((($4 + [64]) + $0)) = [0]
	$0 = ($0 + [4])
	goto $label$18 
	
.LABEL $label$17
	$0 = CALL $154(($4 + [152]), ($4 + [136]), $1, (int_64)-3617168760277827584, ($4 + [80]))
	CALL $155($0)
	CALL $156($0)
	CALL $26(($4 + [112]))
	CALL $26(($4 + [64]))
	
.LABEL $label$4
	CALL $157(($4 + [440]))
	
.LABEL $label$1
	$global$0 = ($4 + [512])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3) + [24]) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $199($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7864012133102518272, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $199($0, $1, CALL $200($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	if ( $0 ){ goto $label$1 }
	CALL $41($3, $1, $2)
	CALL $44([0], ( *($3 + [8]) ? ($3 | [1]) : (*($3) & [1]) ))
	CALL $26($3)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $887 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $888(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $702 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $703($2, $0)
	return $0
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12759])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12804])
	$2 = *(($0 + [28]))
	$3 = *($0 + [24])
	$4 = *($1)
	
.LOOP $label$3:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	if ( ((int_64)*(*($2)) != (int_64)$4) ){ goto $label$3 }
	$5 = ($2 + [24])
	goto $label$1 
	
.LABEL $label$2
	$2 = ($3 + [-24])
	$5 = $3
	
.LABEL $label$1
	CALL $44(((int_32)$5 != (int_32)$3), [12854])
	$2 = ($2 + [24])
	$3 = *(($0 + [28]))
	
.LOOP $label$5:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	CALL $664(($2 + [-24]), $2)
	$2 = ($2 + [24])
	goto $label$5 
	
.LABEL $label$4
	$3 = ($2 + [-24])
	$2 = *(($0 + [28]))
	
.LOOP $label$7:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	$2 = ($2 + [-24])
	CALL $512($2)
	goto $label$7 
	
.LABEL $label$6
	*(($0 + [28])) = $3
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $119(($2 + [8]), $1, (int_64)7235159537265672192)
	CALL $44(((int_32)*($2 + [12]) != (int_32)[0]), [12631])
	CALL memcpy($0, *($2 + [12]), [40])
	$global$0 = ($2 + [16])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [24]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([40])
	$2 = CALL $627($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1)
	*($3 + [8]) = $8
	$9 = *($1 + [28])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $89($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $90(($5 + [8]))
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

int_32 .FUNC $96 ()
{
	return (CASTING uint_32)(uint_64 ((int_64)CALL $37() / (int_64)1000000))
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL $44(((int_32)*($0 + [4]) != (int_32)[0]), [12578])
	$3 = CALL db_next_i64(*(*($0 + [4]) + [28]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $95(*($0), $3)
	
.LABEL $label$1
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $90 (int_32 $0)
{
	CALL $511($0, *($0 + [4]))
	return $0
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$5 = *($1)
	$3 = *($3)
	$6 = $4
	CALL $648($6, ($1 + [8]), $3, $3)
	CALL $44(((int_64)$5 == (int_64)*($1)), [12400])
	$3 = CALL $649($1)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $3($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $3)
	CALL $650($6, $1)
	CALL db_update_i64(*($1 + [28]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $4($4)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($6 + [16])
}

int_32 .FUNC $92 (int_32 $0)
{
	int_32 $1
	int_64 $2
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL $99(($1 + [8]), ($0 + [448]))
	$2 = *($1 + [32])
	$global$0 = ($1 + [48])
	return ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)1)) + [1])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = ($0 + [528])
	CALL $100(($2 + [72]), $3, *($1))
	$4 = *($2 + [76])
	if ( ($4 == 0) ){ goto $label$1 }
	if ( *($4 + [60]) ){ goto $label$1 }
	$4 = *($2 + [76])
	CALL $44(((int_32)$4 != (int_32)[0]), [12268])
	CALL $101($3, $4)
	$4 = ($0 + [448])
	CALL $99(($2 + [32]), $4)
	*($2 + [56]) = ((int_64)*($2 + [56]) + (int_64)1)
	CALL $102($4, ($2 + [32]), *($0))
	
.LABEL $label$1
	$0 = ($0 + [728])
	CALL $103(($2 + [32]), $0, *($1))
	if ( (*($2 + [36]) == 0) ){ goto $label$2 }
	*($2 + [24]) = *($2 + [32])
	*($2 + [8]) = *($2 + [24])
	CALL $104(($2 + [16]), $0, ($2 + [8]))
	
.LABEL $label$2
	$global$0 = ($2 + [80])
}

void .FUNC $732 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $733($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $733 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $734(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $730 (int_32 $0, int_32 $1)
{
	CALL $731(*($0 + [4]), $1)
	*($1 + [28]) = *(*($0 + [8]))
}

int_32 .FUNC $731 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $732($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $736 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

int_32 .FUNC $737 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $734 (int_32 $0, int_32 $1)
{
	CALL $735($1, *($0))
	CALL $736($1, *($0 + [4]))
}

void .FUNC $735 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $738 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $739 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $192($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $872 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[44739243]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[96]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[96]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[96]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $260 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $472($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $261 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $533(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $534($0, $9)
	CALL $535($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $354 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($2 - $1)
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $9($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$2
	$0 = $4
	
.LOOP $label$5:
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$4 }
	*($0) = *($1)
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	goto $label$5 
	
.LABEL $label$4
	*(($4 + $3)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $23($0)
}

int_32 .FUNC $355 (int_32 $0, int_32 $1)
{
	CALL $326($0, $1, [1])
	return $0
}

void .FUNC $356 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [1008])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [996]) = $4
	*($3 + [992]) = $4
	*($3 + [1000]) = ($4 + $5)
	*($3 + [984]) = (int_64)0
	CALL $319(($3 + [992]), ($3 + [984]))
	*($3 + [976]) = (int_64)0
	CALL $319(($3 + [992]), ($3 + [976]))
	*(($3 + [968])) = [0]
	*($3 + [960]) = (int_64)0
	$4 = [0]
	
.LOOP $label$5:
	if ( ((int_32)$4 == (int_32)[12]) ){ goto $label$4 }
	*((($3 + [960]) + $4)) = [0]
	$4 = ($4 + [4])
	goto $label$5 
	
.LABEL $label$4
	CALL $351(($3 + [992]), ($3 + [960]))
	*($3 + [920]) = [0]
	CALL $357(($3 + [992]), ($3 + [920]))
	*($3 + [912]) = (int_64)0
	CALL $325(($3 + [992]), ($3 + [912]))
	CALL $352(($3 + [992]), ($3 + [911]))
	$4 = *((($3 + [992]) + [8]))
	*((($3 + [120]) + [8])) = $4
	*((($3 + [48]) + [8])) = $4
	$6 = *($3 + [992])
	*($3 + [48]) = $6
	*($3 + [120]) = $6
	$4 = CALL $322(($3 + [136]), $0, $1, ($3 + [48]))
	$0 = *($3 + [976])
	$1 = *($3 + [984])
	$5 = CALL $24(($3 + [104]), ($3 + [960]))
	$2 = *($3 + [911])
	$6 = *($3 + [912])
	CALL memcpy(($3 + [8]), ($3 + [64]), [40])
	CALL $251($4, $1, $0, $5, ($3 + [8]), $6, $2)
	CALL $26($5)
	CALL $323($4)
	CALL $26(($3 + [960]))
	$global$0 = ($3 + [1008])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = ($0 + [288])
	CALL $74(($2 + [8]), $3, (uint_64)*($1 + [8]) >> (uint_64)(int_64)8))
	$4 = *($2 + [12])
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	CALL $25(($2 + [16]), [8550], CALL $2([8550]))
	CALL $75(((int_32)$4 != (int_32)[0]), ($2 + [16]), $1)
	CALL $26(($2 + [16]))
	$4 = *($2 + [12])
	CALL $44(((int_32)$4 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($4 + [32]) == (int_32)$3), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0 + [288])), [12349])
	$5 = *($4 + [8])
	CALL $52($4, $1)
	CALL $52(($4 + [16]), $1)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL $44(((int_64)$5) == (int_64)(uint_64)*($4 + [8]) >> (uint_64)(int_64)8)), [12400])
	*($2 + [56]) = (($2 + [16]) + [32])
	*($2 + [52]) = ($2 + [16])
	*($2 + [48]) = ($2 + [16])
	CALL $76(($2 + [48]), $4)
	CALL db_update_i64(*($4 + [36]), (int_64)0, ($2 + [16]), [32])
	$4 = ($0 + [304])
	if ( (uint_64)($5 <= *($4)) ){ goto $label$1 }
	*($4) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

int_32 .FUNC $357 (int_32 $0, int_32 $1)
{
	CALL $358($0, $1)
	CALL $326($0, ($1 + [4]), [33])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL $40($5, $0, $3)
	CALL $71($0, $1, $2, $5, $4)
	$global$0 = ($5 + [16])
}

void .FUNC $350 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [928])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [916]) = $4
	*($3 + [912]) = $4
	*($3 + [920]) = ($4 + $5)
	*($3 + [904]) = (int_64)0
	CALL $319(($3 + [912]), ($3 + [904]))
	*($3 + [896]) = (int_64)0
	CALL $319(($3 + [912]), ($3 + [896]))
	*(($3 + [888])) = [0]
	*($3 + [880]) = (int_64)0
	$4 = [0]
	
.LOOP $label$5:
	if ( ((int_32)$4 == (int_32)[12]) ){ goto $label$4 }
	*((($3 + [880]) + $4)) = [0]
	$4 = ($4 + [4])
	goto $label$5 
	
.LABEL $label$4
	CALL $351(($3 + [912]), ($3 + [880]))
	*(($3 + [872])) = [0]
	*($3 + [864]) = (int_64)0
	$4 = [0]
	
.LOOP $label$7:
	if ( ((int_32)$4 == (int_32)[12]) ){ goto $label$6 }
	*((($3 + [864]) + $4)) = [0]
	$4 = ($4 + [4])
	goto $label$7 
	
.LABEL $label$6
	CALL $351(($3 + [912]), ($3 + [864]))
	CALL $352(($3 + [912]), ($3 + [863]))
	*($3 + [848]) = (int_64)0
	CALL $325(($3 + [912]), ($3 + [848]))
	CALL $352(($3 + [912]), ($3 + [847]))
	$4 = *((($3 + [912]) + [8]))
	*((($3 + [56]) + [8])) = $4
	*((($3 + [8]) + [8])) = $4
	$6 = *($3 + [912])
	*($3 + [8]) = $6
	*($3 + [56]) = $6
	$2 = CALL $24(($3 + [24]), ($3 + [864]))
	$5 = CALL $24(($3 + [40]), ($3 + [880]))
	$4 = CALL $322(($3 + [72]), $0, $1, ($3 + [8]))
	CALL $240($4, *($3 + [904]), *($3 + [896]), $5, $2, [0], *($3 + [848]), *($3 + [847]))
	CALL $26($2)
	CALL $26($5)
	CALL $323($4)
	CALL $26(($3 + [864]))
	CALL $26(($3 + [880]))
	$global$0 = ($3 + [928])
}

int_32 .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $814($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	CALL $46($5, $0, $3)
	CALL $71($0, $1, $2, $5, $4)
	$global$0 = ($5 + [16])
}

int_32 .FUNC $351 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $353($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$6 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	CALL $354($2, $3, ($3 + $4))
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	goto $label$4 
	
.LABEL $label$6
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = [0]
	
.LOOP $label$8:
	if ( ((int_32)$3 == (int_32)[12]) ){ goto $label$7 }
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	goto $label$8 
	
.LABEL $label$7
	if ( (*($1) & [1]) ){ goto $label$3 }
	*($1) = [0]
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$4
	CALL $29($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = [0]
	
.LOOP $label$10:
	if ( ((int_32)$3 == (int_32)[12]) ){ goto $label$9 }
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	goto $label$10 
	
.LABEL $label$9
	CALL $26($2)
	goto $label$1 
	
.LABEL $label$3
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$2
	CALL $29($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = [0]
	
.LOOP $label$12:
	if ( ((int_32)$3 == (int_32)[12]) ){ goto $label$11 }
	*(($2 + $3)) = [0]
	$3 = ($3 + [4])
	goto $label$12 
	
.LABEL $label$11
	CALL $26($2)
	
.LABEL $label$1
	CALL $169(($2 + [16]))
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $181 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $148(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $494 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = [0]
	CALL $496(($1 + [8]), $0)
	$0 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $352 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $355($0, ($2 + [15]))
	*($1) = ((int_32)*($2 + [15]) != (int_32)[0])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $269 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [128])
	$global$0 = $2
	*($2 + [120]) = $1
	CALL require_auth($1)
	$3 = ($0 + [528])
	CALL $100(($2 + [112]), $3, $1)
	$4 = *($2 + [116])
	*((($2 + [16]) + [8])) = [0]
	*($2 + [16]) = (int_64)0
	CALL $25(($2 + [16]), [10424], CALL $2([10424]))
	CALL $51(((int_32)$4 != (int_32)[0]), ($2 + [16]), ($2 + [120]))
	CALL $26(($2 + [16]))
	$4 = CALL $207(($2 + [16]), *($2 + [116]))
	$5 = *($4 + [88])
	*(($6 = ($2 + [8]))) = [0]
	*($2) = (int_64)0
	CALL $25($2, [10458], CALL $2([10458]))
	CALL $51(($5 == 0), $2, $4)
	CALL $26($2)
	$5 = *($4 + [89])
	*($6) = [0]
	*($2) = (int_64)0
	CALL $25($2, [10512], CALL $2([10512]))
	CALL $51(($5 == 0), $2, $4)
	CALL $26($2)
	CALL $111($0, $4)
	$0 = *($2 + [116])
	CALL $44(((int_32)$0 != (int_32)[0]), [12268])
	CALL $270($3, $0)
	CALL $26(($4 + [48]))
	$global$0 = ($2 + [128])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $623($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $601 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $603(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $604($0, $9)
	CALL $605($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [32]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)(uint_64)*(*($3) + [8]) >> (uint_64)(int_64)8) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $77($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6526968495861661696, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $77($0, $1, CALL $78($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $759 (int_32 $0, int_32 $1)
{
	CALL $760($1, *($0))
	CALL $761($1, *($0 + [4]))
	CALL $762($1, *($0 + [8]))
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	if ( $0 ){ goto $label$1 }
	CALL $79($3, $1, $2)
	CALL $44([0], ( *($3 + [8]) ? ($3 | [1]) : (*($3) & [1]) ))
	CALL $26($3)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $761 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

int_32 .FUNC $358 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($2 + [15]) = [0]
	$4 = (int_64)0
	
.LOOP $label$1:
	CALL $639($0, ($2 + [15]))
	$3 = ($3 & [255])
	$5 = *($2 + [15])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($5 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($5 & [128]) ){ goto $label$1 }
	*($1) = $4
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $359 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [976])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [964]) = $4
	*($3 + [960]) = $4
	*($3 + [968]) = ($4 + $5)
	*($3 + [952]) = (int_64)0
	CALL $319(($3 + [960]), ($3 + [952]))
	*($3 + [912]) = [0]
	CALL $357(($3 + [960]), ($3 + [912]))
	*(($3 + [904])) = [0]
	*($3 + [896]) = (int_64)0
	$4 = [0]
	
.LOOP $label$5:
	if ( ((int_32)$4 == (int_32)[12]) ){ goto $label$4 }
	*((($3 + [896]) + $4)) = [0]
	$4 = ($4 + [4])
	goto $label$5 
	
.LABEL $label$4
	CALL $351(($3 + [960]), ($3 + [896]))
	$4 = *((($3 + [960]) + [8]))
	*((($3 + [112]) + [8])) = $4
	*((($3 + [40]) + [8])) = $4
	$6 = *($3 + [960])
	*($3 + [40]) = $6
	*($3 + [112]) = $6
	$4 = CALL $322(($3 + [128]), $0, $1, ($3 + [40]))
	$0 = *($3 + [952])
	CALL memcpy(($3 + [72]), ($3 + [912]), [40])
	$5 = CALL $24(($3 + [56]), ($3 + [896]))
	$3 = CALL memcpy($3, ($3 + [72]), [40])
	CALL $254($4, $0, $3, $5)
	CALL $26($5)
	CALL $323($4)
	CALL $26(($3 + [896]))
	$global$0 = ($3 + [976])
}

int_32 .FUNC $608 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $609 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $606 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $607($2, $0)
	return $0
}

void .FUNC $607 (int_32 $0, int_32 $1)
{
	CALL $320(*($0 + [4]), $1)
	*($1 + [20]) = *(*($0 + [8]))
}

void .FUNC $604 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $605 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $515($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $602 (int_32 $0, int_32 $1)
{
	CALL $320(*($0 + [4]), $1)
	*($1 + [20]) = *(*($0 + [8]))
}

int_32 .FUNC $603 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $600 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $602($2, $0)
	return $0
}

int_32 .FUNC $353 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = [0]
	CALL $358($0, ($2 + [8]))
	CALL $381($1, *($2 + [8]))
	$3 = *($1)
	CALL $326($0, $3, (*($1 + [4]) - $3))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $813 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $520($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $812 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $811 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $810 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

void .FUNC $817 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

void .FUNC $816 (int_32 $0, int_32 $1)
{
	CALL $817($1, *($0))
	CALL $817($1, *($0 + [4]))
}

void .FUNC $815 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [16])
	CALL $816(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $814 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $815($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $819 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $820(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $818 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $819($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $764 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)-4157661224948465664, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $190($1, $4)
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
}

void .FUNC $259 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $561(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $562($0, $9)
	CALL $563($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $258 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	float_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	CALL memcpy(($1 + [8]), *($3 + [4]), [37])
	CALL $27(($1 + [48]), *($3 + [8]))
	*($1 + [60]) = [0]
	$3 = $2
	CALL $132(($3 + [8]), (int_64)0, (int_64)1397703940)
	*(($1 + [80])) = *((($3 + [8]) + [8]))
	*($1 + [72]) = *($3 + [8])
	$5 = CALL $444($1)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $3($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL $445(($3 + [8]), $1)
	$6 = *($1)
	*($1 + [96]) = CALL db_store_i64(*($4 + [8]), (int_64)-7128446144174096384, *(*($0 + [8])), $6, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL $4($2)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$6 = *(($4 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	$9 = *($1 + [64])
	if ( (((float_64)$9 < (float_64)(float_64)18446744073709551615) & ((float_64)$9 >= (float_64)(float_64)0)) ){ goto $label$6 }
	$10 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$10 = (Rounds 0)($9)
	
.LABEL $label$5
	*($3 + [24]) = ((int_64)$10 ^ (int_64)-1)
	*($1 + [100]) = CALL db_idx64_store($6, (int_64)-7128446144174096384, $7, $8, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $755 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $329 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $513($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $328 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $512($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $321 (int_32 $0, int_32 $1)
{
	CALL $326($0, $1, [4])
	return $0
}

int_32 .FUNC $320 (int_32 $0, int_32 $1)
{
	return CALL $325(CALL $324($0, $1), ($1 + [8]))
}

int_32 .FUNC $323 (int_32 $0)
{
	CALL $327(($0 + [752]))
	CALL $328(($0 + [712]))
	CALL $329(($0 + [672]))
	CALL $330(($0 + [632]))
	CALL $331(($0 + [592]))
	CALL $332(($0 + [552]))
	CALL $333(($0 + [512]))
	CALL $334(($0 + [472]))
	CALL $335(($0 + [432]))
	CALL $336(($0 + [392]))
	CALL $337(($0 + [352]))
	CALL $338(($0 + [312]))
	CALL $339(($0 + [272]))
	CALL $340(($0 + [232]))
	CALL $341(($0 + [192]))
	CALL $342(($0 + [152]))
	CALL $343(($0 + [112]))
	CALL $26(($0 + [40]))
	CALL $26(($0 + [28]))
	return $0
}

int_32 .FUNC $322 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	*(($5 = ($4 + [8]))) = *(($3 + [8]))
	*($4) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [16]) + [8])) = $3
	$2 = *($4)
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [16]) = $2
	*(($0 + [36])) = [0]
	*($0 + [28 align=4]) = (int_64)0
	CALL $25(($0 + [28]), [12608], CALL $2([12608]))
	*(($0 + [48])) = [0]
	*($0 + [40 align=4]) = (int_64)0
	CALL $25(($0 + [40]), [12620], CALL $2([12620]))
	CALL $132(($0 + [56]), (int_64)10000000, (int_64)1397703940)
	CALL $132(($0 + [72]), (int_64)100000, (int_64)1397703940)
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = (int_64)0
	*(($0 + [120])) = [0]
	*(($0 + [144])) = (int_64)-1
	*(($0 + [152])) = (int_64)0
	*(($0 + [160])) = [0]
	*(($0 + [184])) = (int_64)-1
	*(($0 + [192])) = (int_64)0
	*(($0 + [200])) = [0]
	$2 = *($0)
	*($0 + [88]) = $2
	*(($0 + [96])) = $2
	*($0 + [128]) = $2
	*(($0 + [136])) = $2
	*($0 + [168]) = $2
	*(($0 + [176])) = $2
	*($0 + [208]) = $2
	*(($0 + [216])) = $2
	*(($0 + [224])) = (int_64)-1
	*(($0 + [232])) = (int_64)0
	*(($0 + [240])) = [0]
	*($0 + [248]) = $2
	*(($0 + [256])) = $2
	*(($0 + [264])) = (int_64)-1
	*(($0 + [272])) = (int_64)0
	*(($0 + [280])) = [0]
	*($0 + [288]) = $2
	*(($0 + [296])) = $2
	*(($0 + [304])) = (int_64)-1
	*(($0 + [312])) = (int_64)0
	*(($0 + [320])) = [0]
	*($0 + [328]) = $2
	*(($0 + [336])) = $2
	*(($0 + [344])) = (int_64)-1
	*(($0 + [352])) = (int_64)0
	*($0 + [368]) = $2
	*(($0 + [360])) = [0]
	*(($0 + [376])) = $2
	*(($0 + [384])) = (int_64)-1
	*(($0 + [392])) = (int_64)0
	*(($0 + [400])) = [0]
	*($0 + [408]) = $2
	*(($0 + [416])) = $2
	*(($0 + [424])) = (int_64)-1
	*(($0 + [432])) = (int_64)0
	*(($0 + [440])) = [0]
	*($0 + [448]) = $2
	*(($0 + [456])) = $2
	*(($0 + [464])) = (int_64)-1
	*(($0 + [472])) = (int_64)0
	*(($0 + [480])) = [0]
	*($0 + [488]) = $2
	*(($0 + [496])) = $2
	*(($0 + [504])) = (int_64)-1
	*(($0 + [512])) = (int_64)0
	*(($0 + [520])) = [0]
	*($0 + [528]) = $2
	*(($0 + [536])) = $2
	*(($0 + [544])) = (int_64)-1
	*(($0 + [552])) = (int_64)0
	*(($0 + [560])) = [0]
	*(($0 + [564])) = [0]
	*($0 + [568]) = $2
	*(($0 + [576])) = $2
	*(($0 + [584])) = (int_64)-1
	*(($0 + [592])) = (int_64)0
	*(($0 + [600])) = [0]
	*($0 + [608]) = $2
	*(($0 + [616])) = $2
	*(($0 + [624])) = (int_64)-1
	*(($0 + [632])) = [0]
	*($0 + [648]) = $2
	*(($0 + [636])) = (int_64)0
	*(($0 + [656])) = $2
	*(($0 + [664])) = (int_64)-1
	*(($0 + [672])) = (int_64)0
	*(($0 + [680])) = [0]
	*($0 + [688]) = $2
	*(($0 + [696])) = $2
	*(($0 + [704])) = (int_64)-1
	*(($0 + [712])) = (int_64)0
	*(($0 + [720])) = [0]
	*($0 + [728]) = $2
	*(($0 + [736])) = $2
	*(($0 + [744])) = (int_64)-1
	*(($0 + [752])) = (int_64)0
	*(($0 + [760])) = [0]
	$global$0 = ($4 + [32])
	return $0
}

int_32 .FUNC $325 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	CALL $326($0, ($2 + [8]), [8])
	*($1) = *($2 + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $324 (int_32 $0, int_32 $1)
{
	CALL $326($0, $1, [8])
	return $0
}

int_32 .FUNC $327 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $510($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $326 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((uint_32)(*($0 + [8]) - *($0 + [4])) >= (uint_32)$2), [12626])
	CALL memcpy($1, *($0 + [4]), $2)
	*($0 + [4]) = (*($0 + [4]) + $2)
	return [1]
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	float_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	CALL $44(((int_32)*(($1 + [92])) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	*($1 + [60]) = [1]
	$4 = *($1 + [64])
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$5 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($4)
	
.LABEL $label$1
	*($3 + [24]) = ((int_64)$5 ^ (int_64)-1)
	$5 = *($1)
	CALL $44([1], [12400])
	$6 = CALL $444($1)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$2 = CALL $3($6)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $6)
	CALL $445(($3 + [8]), $1)
	CALL db_update_i64(*($1 + [96]), (int_64)0, $2, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL $4($2)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$4 = *(($1 + [64]))
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$7 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$7 = (Rounds 0)($4)
	
.LABEL $label$7
	*($3 + [40]) = ((int_64)$7 ^ (int_64)-1)
	if ( (CALL $17(($3 + [24]), ($3 + [40]), [8]) == 0) ){ goto $label$9 }
	$2 = *($1 + [100])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$10 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7128446144174096384, ($3 + [32]), $5)
	*(($1 + [100])) = $2
	
.LABEL $label$10
	CALL db_idx64_update($2, (int_64)0, ($3 + [40]))
	
.LABEL $label$9
	$global$0 = ($3 + [48])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3)) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $117($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7128446144174096384, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $117($0, $1, CALL $118($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $103 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3)) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $112($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6154884969112179200, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $112($0, $1, CALL $113($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $450 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [48])
	*($2 + [12]) = ($0 + [60])
	*($2 + [16]) = ($0 + [64])
	*($2 + [20]) = ($0 + [72])
	*($2 + [24]) = ($0 + [88])
	*($2 + [28]) = ($0 + [89])
	CALL $451($2, $1)
	$global$0 = ($2 + [32])
}

void .FUNC $457 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $456 (int_32 $0, int_32 $1)
{
	CALL $457($1, *($0))
	CALL $458($1, *($0 + [4]))
	CALL $459($1, *($0 + [8]))
	CALL $460($1, *($0 + [12]))
	CALL $461($1, *($0 + [16]))
	CALL $462($1, *($0 + [20]))
	CALL $460($1, *($0 + [24]))
	CALL $460($1, *($0 + [28]))
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	$5 = $2
	CALL $648($5, ($1 + [8]), $3, $3)
	*($1 + [20]) = CALL $96()
	$3 = CALL $677($1)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$2 = CALL $3($3)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = ($2 + $3)
	CALL $678($5, $1)
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-6154884969112179200, *(*($0 + [8])), $6, $2, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $4($2)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

int_32 .FUNC $454 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($1)
	$3 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	$2 = *($0)
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$1 = *($1)
	$1 = ( *(($1 + [4])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$2 }
	*($0) = ($1 + $2)
	
.LABEL $label$2
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $674(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $675($0, $9)
	CALL $676($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	$5 = $2
	CALL $648($5, ($1 + [8]), $3, $3)
	*($1 + [20]) = CALL $96()
	$3 = CALL $677($1)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$2 = CALL $3($3)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = ($2 + $3)
	CALL $678($5, $1)
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-6154884969112179200, *(*($0 + [8])), $6, $2, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $4($2)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $459 (int_32 $0, int_32 $1)
{
	CALL $464(*($0), $1)
}

void .FUNC $458 (int_32 $0, int_32 $1)
{
	CALL $463(*($0), $1)
}

int_32 .FUNC $691 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = [0]
	CALL $693(($1 + [8]), $0)
	$0 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $251 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	$7 = ($global$0 - [32])
	$global$0 = $7
	*($7 + [16]) = $2
	*($7 + [24]) = $1
	*($7 + [8]) = $5
	CALL require_auth($1)
	CALL $241($0)
	$8 = *($3)
	if ( ($8 & [1]) ){ goto $label$2 }
	$3 = uint_32($8 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$3 = *($3 + [4])
	
.LABEL $label$1
	CALL $44(($3 <= [257]), [9904])
	CALL require_recipient($2)
	CALL $73($0, ($7 + [24]), ($7 + [16]), ($7 + [8]), $6)
	$global$0 = ($7 + [32])
}

int_32 .FUNC $518 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $519 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $695 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $696(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $694 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $698(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $697 (int_32 $0, int_32 $1)
{
	CALL $454(*($0), $1)
}

int_32 .FUNC $250 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0 + [4]) = $1
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $512 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $90(($1 + [8]))
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $513 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $510 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $90(($1 + [8]))
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $511 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $511($0, *($1))
	CALL $511($0, *($1 + [4]))
	CALL $11($1)
	
.LABEL $label$1
}

int_32 .FUNC $516 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $26(($1 + [48]))
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $517 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $250(($1 + [8]))
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $514 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $515 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $921 (int_32 $0, int_32 $1)
{
	CALL $469(*($0), *($1))
}

int_32 .FUNC $215 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $230(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $214 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $793(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $794($0, $9)
	CALL $795($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $217 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3) + [24]) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $231($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7128443690987696704, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $231($0, $1, CALL $232($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $216 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $211(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $211 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)(uint_64)*(*($3) + [8]) >> (uint_64)(int_64)8) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $228($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7128455377816911872, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $228($0, $1, CALL $229($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $210 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $227(($2 + [8]), $1, (int_64)-7128454209411632640)
	CALL $44(((int_32)*($2 + [12]) != (int_32)[0]), [12631])
	$1 = *($2 + [12])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $213 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $818($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $199 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [32]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $196 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $197 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $397(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([40])
	$2 = CALL $745($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1)
	*($3 + [8]) = $8
	$9 = *($1 + [32])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $130($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

int_32 .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $11($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

int_32 .FUNC $192 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $193 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [28]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([40])
	$2 = CALL $729($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1)
	*($3 + [8]) = $8
	$9 = *($1 + [28])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $159($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

int_32 .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $11($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

void .FUNC $776 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $777 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $423($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $774 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

int_32 .FUNC $775 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $772 (int_32 $0, int_32 $1)
{
	CALL $324(*($0), $1)
}

void .FUNC $773 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

void .FUNC $770 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [24])
	CALL $771($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $771 (int_32 $0, int_32 $1)
{
	CALL $772($1, *($0))
	CALL $773($1, *($0 + [4]))
	CALL $774($1, *($0 + [8]))
}

int_32 .FUNC $523 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $778 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	$2 = ($1 & [1])
	CALL prints_l(( *($0 + [8]) ? ($0 + [1]) : $2 ), ( *($0 + [4]) ? uint_32($1 >> [1]) : $2 ))
}

void .FUNC $779 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $780($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	CALL $44(((int_32)*($1 + [28]) == (int_32)$0), [12759])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12804])
	$2 = *(($0 + [28]))
	$3 = *($0 + [24])
	$4 = *($1)
	
.LOOP $label$3:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	if ( ((int_64)*(*($2)) != (int_64)$4) ){ goto $label$3 }
	$5 = ($2 + [24])
	goto $label$1 
	
.LABEL $label$2
	$2 = ($3 + [-24])
	$5 = $3
	
.LABEL $label$1
	CALL $44(((int_32)$5 != (int_32)$3), [12854])
	$2 = ($2 + [24])
	$3 = *(($0 + [28]))
	
.LOOP $label$5:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	CALL $195(($2 + [-24]), $2)
	$2 = ($2 + [24])
	goto $label$5 
	
.LABEL $label$4
	$3 = ($2 + [-24])
	$2 = *(($0 + [28]))
	
.LOOP $label$7:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	$2 = ($2 + [-24])
	CALL $196($2)
	goto $label$7 
	
.LABEL $label$6
	*(($0 + [28])) = $3
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC $175 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($2 + [8])
	$5 = *($4)
	*((($3 + [32]) + [8])) = $5
	$6 = *($2)
	*((($3 + [8]) + [8])) = $5
	*($3 + [8]) = $6
	*($3 + [32]) = $6
	CALL $123($0, ($3 + [8]))
	$7 = ($0 + [248])
	CALL $148(($3 + [24]), $7, $1)
	if ( (*($3 + [28]) == 0) ){ goto $label$2 }
	$1 = *($0)
	$8 = *($3 + [28])
	CALL $44(((int_32)$8 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($8 + [24]) == (int_32)$7), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($7)), [12349])
	$6 = *($8)
	CALL $52(($8 + [8]), $2)
	CALL $44(((int_64)$6 == (int_64)*($8)), [12400])
	*($3 + [88]) = (($3 + [48]) + [24])
	*($3 + [84]) = ($3 + [48])
	*($3 + [80]) = ($3 + [48])
	CALL $176(($3 + [80]), $8)
	CALL db_update_i64(*($8 + [28]), $1, ($3 + [48]), [24])
	$8 = ($0 + [264])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$1 }
	*($8) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	goto $label$1 
	
.LABEL $label$2
	$5 = *($0)
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($7)), [12656])
	*(($8 = CALL $9([40])) + [24]) = $7
	*($8) = $1
	*($8 + [8]) = *($2)
	*(($8 + [16])) = *($4)
	*($3 + [88]) = (($3 + [48]) + [24])
	*($3 + [84]) = ($3 + [48])
	*($3 + [80]) = ($3 + [48])
	CALL $176(($3 + [80]), $8)
	$6 = *($8)
	$7 = CALL db_store_i64(*(($0 + [256])), (int_64)5378043540710670336, $5, $6, ($3 + [48]), [24])
	*($8 + [28]) = $7
	$2 = ($0 + [264])
	if ( (uint_64)($6 <= *($2)) ){ goto $label$3 }
	*($2) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($3 + [80]) = $8
	$6 = *($8)
	*($3 + [48]) = $6
	*($3 + [76]) = $7
	$4 = ($0 + [276])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [280]))) ){ goto $label$5 }
	*($2 + [8]) = $6
	*($2 + [16]) = $7
	*($3 + [80]) = [0]
	*($2) = $8
	*($4) = ($2 + [24])
	goto $label$4 
	
.LABEL $label$5
	CALL $177(($0 + [272]), ($3 + [80]), ($3 + [48]), ($3 + [76]))
	
.LABEL $label$4
	$8 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( ($8 == 0) ){ goto $label$1 }
	CALL $11($8)
	
.LABEL $label$1
	CALL $125($0)
	$global$0 = ($3 + [96])
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $713($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $710(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $711($0, $9)
	CALL $712($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $170 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0 + [4]) = $1
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $171 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL require_auth($1)
	CALL $140($0, $1, *($2 + [8]), [0])
	$4 = *($2 + [8])
	*((($3 + [176]) + [8])) = $4
	$5 = *($2)
	*((($3 + [24]) + [8])) = $4
	*($3 + [24]) = $5
	*($3 + [176]) = $5
	CALL $172($0, $1, ($3 + [24]))
	$4 = *($2 + [8])
	*((($3 + [160]) + [8])) = $4
	$5 = *($2)
	*((($3 + [8]) + [8])) = $4
	*($3 + [8]) = $5
	*($3 + [160]) = $5
	CALL $162($0, ($3 + [8]))
	*($3 + [112]) = (int_64)3617214756542218240
	$5 = *($0)
	*($3 + [104]) = $5
	*(($0 = (($3 + [40]) + [8]))) = [0]
	*($3 + [40]) = (int_64)0
	CALL $25(($3 + [40]), [8792], CALL $2([8792]))
	*(($3 + [80])) = *($2 + [8])
	*(($3 + [96])) = *($0)
	*($3 + [64]) = $1
	*($3 + [56]) = $5
	*($3 + [72]) = *($2)
	*($3 + [88]) = *($3 + [40])
	$2 = [0]
	
.LOOP $label$2:
	if ( ((int_32)$2 == (int_32)[12]) ){ goto $label$1 }
	*((($3 + [40]) + $2)) = [0]
	$2 = ($2 + [4])
	goto $label$2 
	
.LABEL $label$1
	$2 = CALL $154(($3 + [120]), ($3 + [104]), (int_64)-5918374966777866960, (int_64)-3617168760277827584, ($3 + [56]))
	CALL $155($2)
	CALL $156($2)
	CALL $26(($3 + [88]))
	CALL $26(($3 + [40]))
	$global$0 = ($3 + [192])
}

void .FUNC $172 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL $44(((int_64)*($2 + [8]) == (int_64)6003093065207795716), [8823])
	$4 = ($0 + [168])
	$5 = CALL $173($4, $1, [8935])
	CALL $44((*($5 + [24]) <= CALL $96()), [9083])
	$6 = ($5 + [8])
	$7 = CALL $60($6, $2)
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	CALL $25($3, [8964], CALL $2([8964]))
	CALL $81($7, $3, $6, $2)
	CALL $26($3)
	if ( (CALL $62($6, $2) == 0) ){ goto $label$2 }
	CALL $174($4, $5)
	goto $label$1 
	
.LABEL $label$2
	CALL $44(((int_32)*($5 + [28]) == (int_32)$4), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($4)), [12349])
	$8 = *($5)
	CALL $64($6, $2)
	CALL $44(((int_64)$8 == (int_64)*($5)), [12400])
	*($3 + [40]) = ($3 + [28])
	*($3 + [36]) = $3
	*($3 + [32]) = $3
	CALL $129(($3 + [32]), $5)
	CALL db_update_i64(*($5 + [32]), $1, $3, [28])
	$2 = ($0 + [184])
	if ( (uint_64)($8 <= *($2)) ){ goto $label$1 }
	*($2) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $173 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $128(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $178 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [24]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([40])
	$2 = CALL $702($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1)
	*($3 + [8]) = $8
	$9 = *($1 + [28])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $177($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $589 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [16]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

void .FUNC $588 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$1 = CALL memcpy($1, *(*($0 + [4])), [33])
	*($2 + [56]) = ($2 + [33])
	*($2 + [52]) = $2
	*($2 + [48]) = $2
	CALL $581(($2 + [48]), $1)
	*($1 + [44]) = CALL db_store_i64(*($3 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), (int_64)7235159537265672192, $2, [33])
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($3 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $585 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $584 (int_32 $0, int_32 $1)
{
	CALL $585($1, *($0))
	CALL $586($1, *($0 + [4]))
	CALL $585($1, *($0 + [8]))
	CALL $585($1, *($0 + [12]))
	CALL $587($1, *($0 + [16]))
}

void .FUNC $587 (int_32 $0, int_32 $1)
{
	CALL $465(*($0), $1)
}

void .FUNC $586 (int_32 $0, int_32 $1)
{
	CALL $467(*($0), $1)
}

int_32 .FUNC $581 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $582($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $580 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = [0]
	*($0 + [40]) = $1
	CALL $588($2, $0)
	return $0
}

void .FUNC $583 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	*($2 + [16]) = ($0 + [16])
	*($2 + [20]) = ($0 + [24])
	*($2 + [24]) = ($0 + [32])
	CALL $584(($2 + [8]), $1)
	$global$0 = ($2 + [32])
}

void .FUNC $582 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $583($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $629 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $630($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	float_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	CALL $44(((int_32)*(($1 + [92])) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	*($1 + [60]) = [0]
	$4 = *($1 + [64])
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$5 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($4)
	
.LABEL $label$1
	*($3 + [24]) = ((int_64)$5 ^ (int_64)-1)
	$5 = *($1)
	CALL $44([1], [12400])
	$6 = CALL $444($1)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$2 = CALL $3($6)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $6)
	CALL $445(($3 + [8]), $1)
	CALL db_update_i64(*($1 + [96]), (int_64)0, $2, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL $4($2)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$4 = *(($1 + [64]))
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$7 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$7 = (Rounds 0)($4)
	
.LABEL $label$7
	*($3 + [40]) = ((int_64)$7 ^ (int_64)-1)
	if ( (CALL $17(($3 + [24]), ($3 + [40]), [8]) == 0) ){ goto $label$9 }
	$2 = *($1 + [100])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$10 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7128446144174096384, ($3 + [32]), $5)
	*(($1 + [100])) = $2
	
.LABEL $label$10
	CALL db_idx64_update($2, (int_64)0, ($3 + [40]))
	
.LABEL $label$9
	$global$0 = ($3 + [48])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*(($2 + [92])) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

void .FUNC $58 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [80])
	$global$0 = $3
	if ( (int_64)(*($2) == 0) ){ goto $label$1 }
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	*($3 + [16]) = *($1)
	$4 = *($2 + [8])
	*((($3 + [64]) + [8])) = [0]
	*($3 + [64]) = (int_64)0
	CALL $25(($3 + [64]), [8465], CALL $2([8465]))
	CALL $57(($3 + [48]), ($3 + [64]), $1)
	$0 = CALL $59(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), ( *($3 + [56]) ? (($3 + [48]) | [1]) : (*($3 + [48]) & [1]) ))
	CALL $26(($3 + [48]))
	CALL $26(($3 + [64]))
	$5 = CALL $60($0, $2)
	*((($3 + [48]) + [8])) = [0]
	*($3 + [48]) = (int_64)0
	CALL $25(($3 + [48]), [8497], CALL $2([8497]))
	CALL $61($5, ($3 + [48]), $2, $1, $0)
	CALL $26(($3 + [48]))
	if ( (CALL $62($0, $2) == 0) ){ goto $label$3 }
	CALL $63(($3 + [8]), $0)
	goto $label$2 
	
.LABEL $label$3
	$6 = *($1)
	CALL $44(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($3 + [8])), [12349])
	$4 = *($0 + [8])
	CALL $64($0, $2)
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	CALL $44(((int_64)$4) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [12400])
	*($3 + [72]) = (($3 + [48]) + [16])
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [48])
	CALL $53(($3 + [64]), $0)
	CALL db_update_i64(*($0 + [20]), $6, ($3 + [48]), [16])
	$2 = (($3 + [8]) + [16])
	if ( (uint_64)($4 <= *($2)) ){ goto $label$2 }
	*($2) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$2
	CALL $54(($3 + [32]))
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

int_32 .FUNC $59 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $50(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)(uint_64)*(*($3) + [8]) >> (uint_64)(int_64)8) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $55($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4152997948076064768, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $55($0, $1, CALL $56($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	if ( $0 ){ goto $label$1 }
	CALL $57($3, $1, $2)
	CALL $44([0], ( *($3 + [8]) ? ($3 | [1]) : (*($3) & [1]) ))
	CALL $26($3)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_64 $2
	CALL $44(((int_64)*($1 + [8]) == (int_64)*($0 + [8])), [11674])
	$2 = ((int_64)*($0) + (int_64)*($1))
	*($0) = $2
	CALL $44(((int_64)$2 > (int_64)-4611686018427387904), [11717])
	CALL $44(((int_64)*($0) < (int_64)4611686018427387904), [11736])
	return $0
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	return CALL $469(CALL $468($0, $1), *($1 + [8]))
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $68($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [16]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([32])
	$2 = CALL $606($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $8)
	$9 = *($1 + [20])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $305($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [544])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1)
	CALL $65(($3 + [16]), $2)
	*($3) = ( *($3 + [24]) ? (($3 + [16]) | [1]) : (*($3 + [16]) & [1]) )
	CALL $22(($3 + [32]), [512], ( $4 ? ($1 + [1]) : ($5 & [1]) ), $3)
	CALL $26(($3 + [16]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	CALL $25($0, ($3 + [32]), CALL $2(($3 + [32])))
	$global$0 = ($3 + [544])
}

void .FUNC $453 (int_32 $0, int_32 $1)
{
	CALL $454(*($0), $1)
}

void .FUNC $452 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = *($0)
	$0 = (*($2) + [33])
	$3 = *($1)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($2) = $0
}

void .FUNC $451 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [8])
	CALL $452($1, *($0 + [4]))
	CALL $453($1, *($0 + [8]))
	*(($1 = *($1))) = (*($1) + [27])
}

void .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $754(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $755($0, $9)
	CALL $756($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $102 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL $119(($3 + [40]), $0, (int_64)7235159537265672192)
	if ( (*($3 + [44]) == 0) ){ goto $label$2 }
	*($3 + [32]) = *($3 + [40])
	*($3 + [16]) = $1
	*($3 + [8]) = *($3 + [32])
	CALL $120($0, ($3 + [8]), $2, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [24]) = $1
	CALL $121(($3 + [16]), $0, $2, ($3 + [24]))
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $918 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $919($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [8]) = *($1)
	*($4 + [16]) = *($2)
	$3 = CALL $197(($4 + [8]), *($3), [9467])
	*($0) = *($3)
	*(($0 + [8])) = *(($3 + [8]))
	CALL $198(($4 + [32]))
	$global$0 = ($4 + [48])
}

void .FUNC $916 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	if ( (*($2 + [60]) == 0) ){ goto $label$1 }
	$4 = ($0 + [728])
	CALL $103(($3 + [48]), $4, *($2))
	$5 = *($3 + [52])
	if ( ($5 == 0) ){ goto $label$5 }
	if ( (CALL $106($5) == 0) ){ goto $label$2 }
	*($3 + [32]) = *($3 + [48])
	*($3 + [16]) = *($3 + [32])
	CALL $104(($3 + [64]), $4, ($3 + [16]))
	$6 = *($1)
	*($3 + [44]) = $1
	*($3 + [40]) = $2
	*($3 + [88]) = $6
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*(($0 + [728]))), [12656])
	*($3 + [64]) = $4
	*($3 + [68]) = ($3 + [40])
	*($3 + [72]) = ($3 + [88])
	*(($5 = CALL $9([40]))) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [24]) = $4
	*($5 + [8]) = ($5 + [12])
	CALL $107(($3 + [64]), $5)
	*($3 + [80]) = $5
	$6 = *($5)
	*($3 + [64]) = $6
	$7 = *($5 + [28])
	*($3 + [60]) = $7
	$8 = ($0 + [756])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [760]))) ){ goto $label$4 }
	*($9 + [8]) = $6
	*($9 + [16]) = $7
	*($3 + [80]) = [0]
	*($9) = $5
	*($8) = ($9 + [24])
	goto $label$3 
	
.LABEL $label$5
	$6 = *($1)
	*($3 + [44]) = $1
	*($3 + [40]) = $2
	*($3 + [88]) = $6
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($4)), [12656])
	*($3 + [64]) = $4
	*($3 + [68]) = ($3 + [40])
	*($3 + [72]) = ($3 + [88])
	*(($5 = CALL $9([40]))) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [24]) = $4
	*($5 + [8]) = ($5 + [12])
	CALL $108(($3 + [64]), $5)
	*($3 + [80]) = $5
	$6 = *($5)
	*($3 + [64]) = $6
	$7 = *($5 + [28])
	*($3 + [60]) = $7
	$8 = ($0 + [756])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [760]))) ){ goto $label$7 }
	*($9 + [8]) = $6
	*($9 + [16]) = $7
	*($3 + [80]) = [0]
	*($9) = $5
	*($8) = ($9 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $109(($0 + [752]), ($3 + [80]), ($3 + [64]), ($3 + [60]))
	
.LABEL $label$6
	$5 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	CALL $90(($5 + [8]))
	CALL $11($5)
	goto $label$2 
	
.LABEL $label$4
	CALL $109(($0 + [752]), ($3 + [80]), ($3 + [64]), ($3 + [60]))
	
.LABEL $label$3
	$5 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	CALL $90(($5 + [8]))
	CALL $11($5)
	
.LABEL $label$2
	CALL $103(($3 + [64]), $4, *($2))
	$6 = *($3 + [64])
	*($3 + [48]) = $6
	CALL $44(((uint_64)$6 > (uint_64)(int_64)4294967295), [8733])
	$6 = *($1)
	$5 = *($3 + [52])
	*($3 + [64]) = $1
	CALL $44(((int_32)$5 != (int_32)[0]), [12268])
	CALL $110($4, $5, $6, ($3 + [64]))
	CALL $103(($3 + [64]), $4, *($2))
	$6 = *($3 + [64])
	*($3 + [48]) = $6
	CALL $44(((uint_64)$6 > (uint_64)(int_64)4294967295), [8733])
	if ( (*((*($3 + [52]) + [16])) <= CALL $92($0)) ){ goto $label$1 }
	*($3 + [24]) = *($3 + [48])
	*($3 + [8]) = *($3 + [24])
	CALL $104(($3 + [64]), $4, ($3 + [8]))
	CALL $111($0, $2)
	
.LABEL $label$1
	$global$0 = ($3 + [96])
}

void .FUNC $914 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

int_32 .FUNC $915 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $912 (int_32 $0, int_32 $1)
{
	CALL $913($1, *($0))
	CALL $914($1, *($0 + [4]))
}

int_32 .FUNC $132 (int_32 $0, int_64 $1, int_64 $2)
{
	*($0 + [8]) = $2
	*($0) = $1
	CALL $44((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [11605])
	CALL $44(CALL $186(($0 + [8])), [11654])
	return $0
}

void .FUNC $910 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $911($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($2 + [4])
	CALL $44(((int_32)$3 != (int_32)[0]), [12911])
	CALL $114($2)
	CALL $115($1, $3)
	*($0) = *($2)
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	CALL $763($0, $1, (int_64)0)
}

int_32 .FUNC $723 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $455 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [48])
	*($2 + [12]) = ($0 + [60])
	*($2 + [16]) = ($0 + [64])
	*($2 + [20]) = ($0 + [72])
	*($2 + [24]) = ($0 + [88])
	*($2 + [28]) = ($0 + [89])
	CALL $456($2, $1)
	$global$0 = ($2 + [32])
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL $44(((int_32)*($0 + [4]) != (int_32)[0]), [12578])
	$3 = CALL db_next_i64(*(*($0 + [4]) + [32]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $194(*($0), $3)
	
.LABEL $label$1
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $678 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $680($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $106 (int_32 $0)
{
	return ((uint_32)(CALL $96() - *($0 + [20])) > (uint_32)[305])
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	CALL $764($0, $1, (int_64)0)
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL $44(((int_32)*($0 + [4]) != (int_32)[0]), [12578])
	$3 = CALL db_next_i64(*(*($0 + [4]) + [28]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $190(*($0), $3)
	
.LABEL $label$1
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	CALL $765($0, $1, (int_64)0)
}

int_32 .FUNC $536 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $537($2, $0)
	return $0
}

void .FUNC $655 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [8])
	CALL $656($1, *($0 + [4]))
	*(($1 = *($1))) = (*($1) + [4])
}

void .FUNC $654 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [20])
	CALL $655($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $657 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = *($1 + [8])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$4 = ($1 + [4])
	$1 = *($1)
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$2 }
	$2 = ($2 + [8])
	*($0) = $2
	$5 = *($1 + [4])
	if ( ($5 == 0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = $5
	$5 = *($1)
	if ( $5 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	
.LOOP $label$6:
	$5 = *($1 + [8])
	$6 = ((int_32)*($5) == (int_32)$1)
	$1 = $5
	if ( ($6 == 0) ){ goto $label$6 }
	$1 = $5
	goto $label$3 
	
.LABEL $label$2
	return $0
}

void .FUNC $656 (int_32 $0, int_32 $1)
{
	CALL $657(*($0), $1)
}

int_32 .FUNC $651 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $653($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $229 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([48])
	$2 = CALL $804($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $8)
	$9 = *($1 + [36])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $301($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $558 (int_32 $0, int_32 $1)
{
	CALL $560(*($0), $1)
}

void .FUNC $559 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

void .FUNC $224 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [560])
	$global$0 = $4
	$5 = *($1 + [8])
	$6 = *($1)
	CALL $45(($4 + [32]), $2)
	$2 = *($4 + [40])
	$7 = *($4 + [32])
	CALL $612(($4 + [16]), $3)
	*($4) = ( $2 ? (($4 + [32]) | [1]) : ($7 & [1]) )
	*($4 + [4]) = ( *($4 + [24]) ? (($4 + [16]) | [1]) : (*($4 + [16]) & [1]) )
	CALL $22(($4 + [48]), [512], ( $5 ? ($1 + [1]) : ($6 & [1]) ), $4)
	CALL $26(($4 + [16]))
	CALL $26(($4 + [32]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	CALL $25($0, ($4 + [48]), CALL $2(($4 + [48])))
	$global$0 = ($4 + [560])
}

void .FUNC $225 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [24]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $226 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([40])
	$2 = CALL $785($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = (uint_64)*($1 + [16]) >> (uint_64)(int_64)8
	*($3 + [8]) = $8)
	$9 = *($1 + [28])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $214($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $555 (int_32 $0, int_32 $1)
{
	CALL $357(*($0), $1)
}

void .FUNC $659 (int_32 $0, int_32 $1)
{
	CALL $660($1, *($0))
	CALL $661($1, *($0 + [4]))
	CALL $662($1, *($0 + [8]))
}

void .FUNC $553 (int_32 $0, int_32 $1)
{
	CALL $554($1, *($0))
	CALL $555($1, *($0 + [4]))
	CALL $556($1, *($0 + [8]))
	CALL $557($1, *($0 + [12]))
	CALL $558($1, *($0 + [16]))
	CALL $559($1, *($0 + [20]))
	CALL $557($1, *($0 + [24]))
	CALL $557($1, *($0 + [28]))
}

int_32 .FUNC $550 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $551($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $223 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $424($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $389 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	$4 = (*($1 + [4]) - $3)
	*($1 + [4]) = $4
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $2, $3)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$3 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $3
	$3 = ($0 + [4])
	$2 = *($3)
	*($3) = *($1 + [8])
	*($1 + [8]) = $2
	$3 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $3
	*($1) = *($4)
}

int_32 .FUNC $388 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = CALL $9($1)
	
.LABEL $label$1
	*($0) = $4
	$2 = ($4 + $2)
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + $1)
	return $0
}

void .FUNC $383 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$3 }
	$5 = *($0)
	$6 = ($4 - $5)
	$7 = ($6 + $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$4 = [2147483647]
	$3 = ($3 - $5)
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$4 }
	$4 = ($3 << [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	
.LABEL $label$4
	$5 = CALL $388(($2 + [8]), $4, $6, $8)
	$4 = *($5 + [8])
	$3 = ($5 + [8])
	
.LOOP $label$5:
	*($4) = [0]
	$4 = (*($3) + [1])
	*($3) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	CALL $389($0, $5)
	CALL $390($5)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($0 + [4])
	
.LOOP $label$6:
	*($4) = [0]
	$4 = (*($3) + [1])
	*($3) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $382 (int_32 $0, int_32 $1)
{
	return CALL $387(CALL $386(CALL $385(CALL $385($0, $1), ($1 + [8])), ($1 + [16])), ($1 + [28]))
}

void .FUNC $381 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	CALL $383($0, ($1 - $3))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$2 }
	*(($0 + [4])) = ($2 + $1)
	
.LABEL $label$2
}

int_32 .FUNC $380 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = [0]
	CALL $384(($1 + [8]), $0)
	$0 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $387 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (*($1 + [4]) - *($1))
	CALL $393($0, ($2 + [8]))
	$3 = *($1)
	CALL $394($0, $3, (*($1 + [4]) - $3))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $386 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = int_32((*($1 + [4]) - *($1)) >> [4])
	CALL $393($0, ($2 + [8]))
	$3 = *($1 + [4])
	$1 = *($1)
	
.LOOP $label$2:
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	CALL $395($0, $1)
	$1 = ($1 + [16])
	goto $label$2 
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $385 (int_32 $0, int_32 $1)
{
	CALL $394($0, $1, [8])
	return $0
}

int_32 .FUNC $384 (int_32 $0, int_32 $1)
{
	CALL $392(CALL $391($0, ($1 + [16])), ($1 + [28]))
	return *($0) = (*($0) + [16])
}

void .FUNC $868 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $869 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

void .FUNC $689 (int_32 $0, int_32 $1)
{
	CALL $492(*($0), $1)
}

int_32 .FUNC $690 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $90(($3 + [8]))
	CALL $11($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

void .FUNC $862 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $863 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $508($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $860 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

int_32 .FUNC $861 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $866 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $867(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $693 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $695($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $864 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $865($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $865 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $866($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $310 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $545(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $546($0, $9)
	CALL $547($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $311 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [24]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $312 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([40])
	$2 = CALL $536($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1)
	*($3 + [8]) = $8
	$9 = *($1 + [28])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $310($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $250(($5 + [8]))
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $313 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL $140($0, $1, $2, [1])
}

void .FUNC $314 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL $205($0, $1, $2, [1])
}

void .FUNC $315 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	$5 = ($global$0 - [96])
	$global$0 = $5
	*($5 + [88]) = $1
	CALL $44(CALL $276($3), [11066])
	CALL $44(((int_64)*($3) > (int_64)0), [11092])
	CALL $44(CALL $fimport$41($1), [11128])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$2 }
	$4 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($4 + [4])
	
.LABEL $label$1
	CALL $44(($4 <= [257]), [11168])
	CALL $44(((int_64)$1 != (int_64)$2), [11206])
	$7 = *($0)
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$4 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$3 }
	if ( ((int_64)*($3 + [8]) != (int_64)6003093065207795716) ){ goto $label$3 }
	CALL $44(((int_64)*($0 + [8]) == (int_64)-5918374966777866960), [11230])
	$2 = *(($3 + [8]))
	*((($5 + [72]) + [8])) = $2
	$1 = *($3)
	*(($5 + [8])) = $2
	*($5) = $1
	*($5 + [72]) = $1
	CALL $123($0, $5)
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$3 }
	CALL $44([1], [11280])
	$1 = *($3 + [8])
	if ( ((int_64)$1 != (int_64)6003093065207795716) ){ goto $label$5 }
	$1 = *($0 + [8])
	*((($5 + [56]) + [8])) = [0]
	*($5 + [56]) = (int_64)0
	CALL $25(($5 + [56]), [11354], CALL $2([11354]))
	*($5 + [48]) = *($0 + [8])
	CALL $316(((int_64)$1 == (int_64)-5918374966777866960), ($5 + [56]), [8784], ($5 + [48]))
	CALL $26(($5 + [56]))
	$2 = *(($3 + [8]))
	*((($5 + [32]) + [8])) = $2
	$1 = *($3)
	*((($5 + [16]) + [8])) = $2
	*($5 + [16]) = $1
	*($5 + [32]) = $1
	CALL $162($0, ($5 + [16]))
	goto $label$3 
	
.LABEL $label$5
	$4 = CALL $153(($0 + [648]), (uint_64)$1 >> (uint_64)(int_64)8), [11433]
	$1 = *($4) + [8])
	$2 = *($0 + [8])
	*((($5 + [56]) + [8])) = [0]
	*($5 + [56]) = (int_64)0
	CALL $25(($5 + [56]), [11464], CALL $2([11464]))
	*($5 + [48]) = *($0 + [8])
	CALL $316(((int_64)$1 == (int_64)$2), ($5 + [56]), ($4 + [8]), ($5 + [48]))
	CALL $26(($5 + [56]))
	CALL $49($0, ($5 + [88]), $3)
	
.LABEL $label$3
	$global$0 = ($5 + [96])
}

void .FUNC $316 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( $0 ){ goto $label$1 }
	CALL $317($4, $1, $2, $3)
	CALL $44([0], ( *($4 + [8]) ? ($4 | [1]) : (*($4) & [1]) ))
	CALL $26($4)
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $317 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [560])
	$global$0 = $4
	$5 = *($1 + [8])
	$6 = *($1)
	CALL $65(($4 + [32]), $2)
	$2 = *($4 + [40])
	$7 = *($4 + [32])
	CALL $65(($4 + [16]), $3)
	*($4) = ( $2 ? (($4 + [32]) | [1]) : ($7 & [1]) )
	*($4 + [4]) = ( *($4 + [24]) ? (($4 + [16]) | [1]) : (*($4 + [16]) & [1]) )
	CALL $22(($4 + [48]), [512], ( $5 ? ($1 + [1]) : ($6 & [1]) ), $4)
	CALL $26(($4 + [16]))
	CALL $26(($4 + [32]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	CALL $25($0, ($4 + [48]), CALL $2(($4 + [48])))
	$global$0 = ($4 + [560])
}

void .FUNC $318 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [880])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [868]) = $2
	*($3 + [864]) = $2
	*($3 + [872]) = ($2 + $4)
	*($3 + [856]) = (int_64)0
	CALL $319(($3 + [864]), ($3 + [856]))
	*($3 + [848]) = (int_64)0
	*($3 + [840]) = (int_64)0
	CALL $320(($3 + [864]), ($3 + [840]))
	CALL $321(($3 + [864]), ($3 + [836]))
	$2 = *($3 + [872])
	*((($3 + [48]) + [8])) = $2
	*((($3 + [16]) + [8])) = $2
	$5 = *($3 + [864])
	*($3 + [16]) = $5
	*($3 + [48]) = $5
	$2 = CALL $322(($3 + [64]), $0, $1, ($3 + [16]))
	$0 = *($3 + [848])
	*((($3 + [32]) + [8])) = $0
	*(($3 + [8])) = $0
	$0 = *($3 + [840])
	*($3 + [32]) = $0
	*($3) = $0
	CALL $122($2, *($3 + [856]), $3, *($3 + [836]))
	CALL $323($2)
	$global$0 = ($3 + [880])
}

int_32 .FUNC $319 (int_32 $0, int_32 $1)
{
	CALL $326($0, $1, [8])
	return $0
}

void .FUNC $253 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	float_64 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	CALL $44(((int_32)*(($1 + [92])) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$5 = *($1 + [64])
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$6 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$6 = (Rounds 0)($5)
	
.LABEL $label$1
	*($4 + [24]) = ((int_64)$6 ^ (int_64)-1)
	$6 = *($1)
	CALL $52(($1 + [72]), *($2))
	CALL $44(((int_64)$6 == (int_64)*($1)), [12400])
	$2 = CALL $444($1)
	if ( ($2 <= [513]) ){ goto $label$4 }
	$3 = CALL $3($2)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $2)
	CALL $445(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [96]), (int_64)0, $3, $2)
	if ( ($2 <= [513]) ){ goto $label$5 }
	CALL $4($3)
	
.LABEL $label$5
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$5 = *(($1 + [64]))
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$7 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$7 = (Rounds 0)($5)
	
.LABEL $label$7
	*($4 + [40]) = ((int_64)$7 ^ (int_64)-1)
	if ( (CALL $17(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$9 }
	$3 = *($1 + [100])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7128446144174096384, ($4 + [32]), $6)
	*(($1 + [100])) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, (int_64)0, ($4 + [40]))
	
.LABEL $label$9
	$global$0 = ($4 + [48])
}

void .FUNC $252 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth($1)
	$4 = ($0 + [528])
	CALL $100(($3 + [16]), $4, $1)
	CALL $44(((int_64)*($2) > (int_64)0), [9962])
	CALL $44(((int_32)*($3 + [20]) != (int_32)[0]), [9995])
	$1 = *($2 + [8])
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	CALL $25($3, [10045], CALL $2([10045]))
	CALL $142(((int_64)$1 == (int_64)1397703940), $3, [9544])
	CALL $26($3)
	CALL $58($0, ($3 + [24]), $2)
	$0 = *($3 + [20])
	*($3) = $2
	CALL $44(((int_32)$0 != (int_32)[0]), [12268])
	CALL $253($4, $0, $3)
	$global$0 = ($3 + [32])
}

int_32 .FUNC $255 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = [1]
	if ( ((int_32)*($0) != (int_32)*($1)) ){ goto $label$1 }
	$2 = [4]
	
.LOOP $label$4:
	if ( ((int_32)$2 == (int_32)[37]) ){ goto $label$3 }
	if ( ((int_32)*(($0 + $2)) != (int_32)*(($1 + $2))) ){ goto $label$2 }
	$2 = ($2 + [1])
	goto $label$4 
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	$2 = [1]
	
.LABEL $label$1
	return $2
}

void .FUNC $254 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [112])
	$global$0 = $4
	*($4 + [56]) = $1
	CALL require_auth($1)
	CALL memset((($4 + [16]) | [4]), [0], [36])
	*($4 + [16]) = [0]
	CALL $44(CALL $255($2, ($4 + [16])), [10087])
	CALL $44((*($2) == 0), [10130])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$2 }
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($3 + [4])
	
.LABEL $label$1
	CALL $44(($5 <= [257]), [10153])
	$5 = ($0 + [528])
	CALL $100(($4 + [8]), $5, $1)
	if ( (*($4 + [12]) == 0) ){ goto $label$4 }
	$0 = *($4 + [12])
	*($4 + [20]) = $3
	*($4 + [16]) = $2
	CALL $44(((int_32)$0 != (int_32)[0]), [12268])
	CALL $256($5, $0, $1, ($4 + [16]))
	goto $label$3 
	
.LABEL $label$4
	*($4 + [68]) = $2
	*($4 + [72]) = $3
	*($4 + [64]) = ($4 + [56])
	*($4 + [88]) = $1
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($5)), [12656])
	*($4 + [16]) = $5
	*($4 + [20]) = ($4 + [64])
	*($4 + [24]) = ($4 + [88])
	$2 = CALL $9([104])
	CALL $257($2)
	*($2 + [92]) = $5
	CALL $258(($4 + [16]), $2)
	*($4 + [104]) = $2
	$1 = *($2)
	*($4 + [16]) = $1
	$5 = *($2 + [96])
	*($4 + [100]) = $5
	$6 = ($0 + [556])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [560]))) ){ goto $label$6 }
	*($3 + [8]) = $1
	*($3 + [16]) = $5
	*($4 + [104]) = [0]
	*($3) = $2
	*($6) = ($3 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $259(($0 + [552]), ($4 + [104]), ($4 + [16]), ($4 + [100]))
	
.LABEL $label$5
	$2 = *($4 + [104])
	*($4 + [104]) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $26(($2 + [48]))
	CALL $11($2)
	
.LABEL $label$7
	$2 = ($0 + [448])
	CALL $99(($4 + [16]), $2)
	*($4 + [32]) = ((int_64)*($4 + [32]) + (int_64)1)
	CALL $102($2, ($4 + [16]), *($0))
	$3 = ($0 + [408])
	CALL $230(($4 + [64]), $3, *($4 + [56]))
	if ( *($4 + [68]) ){ goto $label$8 }
	$7 = *($4 + [56])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($3)), [12656])
	*(($2 = CALL $9([40])) + [16]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = $3
	*($2) = *($4 + [56])
	CALL $132(($4 + [64]), (int_64)0, (int_64)92656475524612)
	*($2 + [16]) = *(($4 + [72]))
	*($2 + [8]) = *($4 + [64])
	*($4 + [96]) = (($4 + [64]) + [24])
	*($4 + [92]) = ($4 + [64])
	*($4 + [88]) = ($4 + [64])
	CALL $260(($4 + [88]), $2)
	$1 = *($2)
	$5 = CALL db_store_i64(*(($0 + [416])), (int_64)-7128445242053112560, $7, $1, ($4 + [64]), [24])
	*($2 + [28]) = $5
	$3 = ($0 + [424])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$9 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($4 + [88]) = $2
	$1 = *($2)
	*($4 + [64]) = $1
	*($4 + [104]) = $5
	$6 = ($0 + [436])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [440]))) ){ goto $label$11 }
	*($3 + [8]) = $1
	*($3 + [16]) = $5
	*($4 + [88]) = [0]
	*($3) = $2
	*($6) = ($3 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $261(($0 + [432]), ($4 + [88]), ($4 + [64]), ($4 + [104]))
	
.LABEL $label$10
	$2 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $11($2)
	
.LABEL $label$8
	$2 = ($0 + [72])
	CALL $58($0, ($4 + [56]), $2)
	CALL $72($0, $2)
	
.LABEL $label$3
	$global$0 = ($4 + [112])
}

int_32 .FUNC $257 (int_32 $0)
{
	int_32 $1
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($0 + [48 align=4]) = (int_64)0
	*(($0 + [56])) = [0]
	$1 = [48]
	
.LOOP $label$2:
	if ( ((int_32)$1 == (int_32)[60]) ){ goto $label$1 }
	*(($0 + $1)) = [0]
	$1 = ($1 + [4])
	goto $label$2 
	
.LABEL $label$1
	*($0 + [64]) = (int_64)0
	*($0 + [60]) = [0]
	*($0 + [72]) = (int_64)0
	*($0 + [88]) = [0]
	*(($0 + [80])) = (int_64)0
	return $0
}

void .FUNC $256 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	float_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL $44(((int_32)*(($1 + [92])) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$6 = *($1 + [64])
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$7 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$7 = (Rounds 0)($6)
	
.LABEL $label$1
	*($5 + [24]) = ((int_64)$7 ^ (int_64)-1)
	$7 = *($1)
	CALL memcpy(($1 + [8]), *($3), [37])
	CALL $27(($1 + [48]), *($3 + [4]))
	*($1 + [88]) = [0]
	CALL $44(((int_64)$7 == (int_64)*($1)), [12400])
	$8 = CALL $444($1)
	if ( ($8 <= [513]) ){ goto $label$4 }
	$3 = CALL $3($8)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($8 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $8)
	CALL $445(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [96]), $2, $3, $8)
	if ( ($8 <= [513]) ){ goto $label$5 }
	CALL $4($3)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = *(($1 + [64]))
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$9 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$9 = (Rounds 0)($6)
	
.LABEL $label$7
	*($5 + [40]) = ((int_64)$9 ^ (int_64)-1)
	if ( (CALL $17(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$3 = *($1 + [100])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7128446144174096384, ($5 + [32]), $7)
	*(($1 + [100])) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

int_32 .FUNC $406 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $696 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [32])
	CALL $697($1, (*($0) + [32]))
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL $44(((int_32)*($0 + [4]) != (int_32)[0]), [12578])
	$3 = CALL db_next_i64(*(*($0 + [4]) + [28]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $179(*($0), $3)
	
.LABEL $label$1
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $139 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($1)
	CALL $140($0, $1, *($2 + [8]), [0])
	$4 = *($2 + [8])
	*((($3 + [48]) + [8])) = $4
	$5 = *($2)
	*((($3 + [16]) + [8])) = $4
	*($3 + [16]) = $5
	*($3 + [48]) = $5
	CALL $123($0, ($3 + [16]))
	$4 = *($2 + [8])
	*((($3 + [32]) + [8])) = $4
	$5 = *($2)
	*(($3 + [8])) = $4
	*($3) = $5
	*($3 + [32]) = $5
	CALL $141($0, $1, $3)
	CALL $125($0)
	$global$0 = ($3 + [64])
}

void .FUNC $428 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL $381($0, CALL $494($1))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	CALL $495($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $429 (int_32 $0, int_32 $1)
{
	CALL $32($0, *($1))
}

void .FUNC $698 (int_32 $0, int_32 $1)
{
	CALL $699($1, *($0))
	$0 = *($0)
	CALL $699($1, ($0 + [8]))
	CALL $700($1, ($0 + [16]))
	CALL $701($1, ($0 + [32]))
}

int_32 .FUNC $422 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $423 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $420 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $421 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $422($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $426 (int_32 $0, int_64 $1, float_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3) = $2
	*($3 + [8]) = $1
	$0 = *($0 + [16])
	if ( ($0 == 0) ){ goto $label$1 }
	CALL void $0((int_32 ($3 + [8])), (int_32 $3), (int_32 *(*($0) + [24])))
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $427 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	*($1 + [20]) = *(*($3))
	$6 = *($1)
	CALL $44([1], [12400])
	$3 = CALL $477($1)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $3($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $478($5, $1)
	CALL db_update_i64(*($1 + [28]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $4($4)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

int_32 .FUNC $424 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $425 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [560])
	$global$0 = $4
	$5 = *($1 + [8])
	$6 = *($1)
	CALL $429(($4 + [32]), $2)
	$2 = *($4 + [40])
	$7 = *($4 + [32])
	CALL $429(($4 + [16]), $3)
	*($4) = ( $2 ? (($4 + [32]) | [1]) : ($7 & [1]) )
	*($4 + [4]) = ( *($4 + [24]) ? (($4 + [16]) | [1]) : (*($4 + [16]) & [1]) )
	CALL $22(($4 + [48]), [512], ( $5 ? ($1 + [1]) : ($6 & [1]) ), $4)
	CALL $26(($4 + [16]))
	CALL $26(($4 + [32]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	CALL $25($0, ($4 + [48]), CALL $2(($4 + [48])))
	$global$0 = ($4 + [560])
}

int_32 .FUNC $917 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $513($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $729 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $730($2, $0)
	return $0
}

void .FUNC $728 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($1 + [8])) = *(($4 + [8]))
	*($2 + [24]) = ($2 + [16])
	*($2 + [20]) = $2
	*($2 + [16]) = $2
	CALL $53(($2 + [16]), $1)
	*($1 + [20]) = CALL db_store_i64(*($3 + [8]), (int_64)6761208822947119104, *(*($0 + [8])), (int_64)6761208822947119104, $2, [16])
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)6761208822947119104) ){ goto $label$1 }
	*(($3 + [16])) = (int_64)6761208822947119105
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $6())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $7($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $3($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $3($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $6 ()
{
	return [8208]
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $3($1)
	
.LABEL $label$2
	*(CALL $6()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $3(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $4($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $4 (int_32 $0)
{
}

void .FUNC $5 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8232])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $0 ()
{
	CALL $5()
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	CALL $0()
	CALL $318($0, $1)
	CALL $344($0, $1)
	CALL $345($0, $1)
	CALL $346($0, $1)
	CALL $347($0, $1)
	CALL $348($0, $1)
	CALL $349($0, $1)
	CALL $350($0, $1)
	CALL $356($0, $1)
	CALL $359($0, $1)
	CALL $360($0, $1)
	CALL $361($0, $1)
	CALL $362($0, $1)
	CALL $363($0, $1)
	CALL $364($0, $1)
	CALL $365($0, $1)
	CALL $366($0, $1)
	CALL $367($0, $1)
	CALL $368($0, $1)
	CALL $369($0, $1)
	CALL $370($0, $1)
	CALL $371($0, $1)
	CALL $377($0, $1)
	CALL $378($0, $1)
	CALL eosio_assert_code([0], (int_64)8000000000000000000)
	CALL eosio_assert_code([0], (int_64)8000000000000000001)
	CALL $379($0, $1)
	CALL $38([0])
	((int_64)$0 == (int_64)$1)
	((int_64)6716332328216010912 == (int_64)$2)
	((int_64)-4157661383434960896 == (int_64)$2)
	((int_64)-3102536759825661952 == (int_64)$2)
	((int_64)6716332328246719072 == (int_64)$2)
	((int_64)5378043540632764416 == (int_64)$2)
	((int_64)-3111238946495234048 == (int_64)$2)
	((int_64)8421045207927095296 == (int_64)$2)
	((int_64)-4149656938784751616 == (int_64)$2)
	((int_64)3607572836672401920 == (int_64)$2)
	((int_64)-5000901979556282368 == (int_64)$2)
	((int_64)-5966825499375173632 == (int_64)$2)
	((int_64)-6154886499457302528 == (int_64)$2)
	((int_64)-6154884969112179200 == (int_64)$2)
	((int_64)-3103360236970311680 == (int_64)$2)
	((int_64)3849304916452554400 == (int_64)$2)
	((int_64)3631137588199707648 == (int_64)$2)
	((int_64)3631193641487859712 == (int_64)$2)
	((int_64)-4417085959225475072 == (int_64)$2)
	((int_64)3631455350755038208 == (int_64)$2)
	((int_64)3626116088789089280 == (int_64)$2)
	((int_64)-5920734475137843200 == (int_64)$2)
	((int_64)-2507766120631500800 == (int_64)$2)
	((int_64)5301147363900784640 == (int_64)$2)
	((int_64)-7128446506985951232 == (int_64)$2)
	((int_64)$0 != (int_64)6138663577826885632)
	((int_64)6138663577826885632 == (int_64)$1)
	((int_64)-6569208335818555392 == (int_64)$2)
	((int_64)-3617168760277827584 == (int_64)$2)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	return CALL $13($0, $1)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $4($0)
	
.LABEL $label$1
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	CALL $15($0, $1)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $10 (int_32 $0)
{
	return CALL $9($0)
}

void .FUNC $11 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $4($0)
	
.LABEL $label$1
}

void .FUNC $12 (int_32 $0)
{
	CALL $11($0)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $8(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $8(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $554 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [1] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $20($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $20($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [8288]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $20($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $579 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL $44(((int_32)*($1 + [40]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$1 = CALL memcpy($1, *($3), [33])
	CALL $44([1], [12400])
	*($4 + [56]) = ($4 + [33])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $581(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $4, [33])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC $902 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $903($2, $0)
	return $0
}

void .FUNC $556 (int_32 $0, int_32 $1)
{
	CALL $351(*($0), $1)
}

void .FUNC $631 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [20])
	CALL $632($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $642 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($1 + [12]) = ((int_32)$1 == (int_32)$0)
	
.LOOP $label$4:
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$3 }
	$2 = *($1 + [8])
	if ( *($2 + [12]) ){ goto $label$3 }
	$3 = ($2 + [12])
	$4 = *($2 + [8])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$2 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($4 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$2 = ($5 + [12])
	
.LABEL $label$5
	*($3) = [1]
	*($4 + [12]) = ((int_32)$4 == (int_32)$0)
	*($2) = [1]
	$1 = $4
	goto $label$4 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($2) != (int_32)$1) ){ goto $label$7 }
	CALL $643($2)
	$4 = *($2 + [8])
	$3 = ($4 + [12])
	$4 = *($4 + [8])
	
.LABEL $label$7
	*($3) = [1]
	*($4 + [12]) = [0]
	CALL $644($4)
	return 
	
.LABEL $label$1
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$8 }
	CALL $644($2)
	$4 = *($2 + [8])
	$3 = ($4 + [12])
	$4 = *($4 + [8])
	
.LABEL $label$8
	*($3) = [1]
	*($4 + [12]) = [0]
	CALL $643($4)
}

void .FUNC $630 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $631($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $391 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = (*($1 + [4]) - *($1))
	$3 = (CASTING uint_64)(uint_32 int_32($2 >> [4]))
	$4 = *($0)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $4
	$1 = [0]
	
.LOOP $label$3:
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	*($0) = (($4 + $1) + [16])
	$1 = ($1 + [16])
	goto $label$3 
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $640 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$4 }
	$4 = *($2)
	
.LOOP $label$6:
	$5 = *($0 + [16])
	if ( (uint_64)($4 <= $5) ){ goto $label$8 }
	if ( ((uint_64)$5 >= (uint_64)$4) ){ goto $label$3 }
	$3 = ($0 + [4])
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = $3
	goto $label$7 
	
.LABEL $label$8
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$5 }
	
.LABEL $label$7
	$3 = $0
	$0 = $2
	goto $label$6 
	
.LABEL $label$5
	*($1) = $0
	return $0
	
.LABEL $label$4
	*($1) = $3
	goto $label$2 
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return $3
	
.LABEL $label$1
	*($1) = $0
	return $3
}

void .FUNC $641 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	*($3 + [8]) = $1
	*($3) = (int_64)0
	*($2) = $3
	$1 = *(*($0))
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = *($2)
	
.LABEL $label$1
	CALL $642(*($0 + [4]), $3)
	*($0 + [8]) = (*($0 + [8]) + [1])
}

void .FUNC $646 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

void .FUNC $557 (int_32 $0, int_32 $1)
{
	CALL $352(*($0), $1)
}

int_32 .FUNC $647 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $512($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $650 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $652($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $644 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [4])
	$2 = *($1)
	*($0 + [4]) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	*($2 + [8]) = $0
	
.LABEL $label$1
	*($1 + [8]) = *($0 + [8])
	*((($2 = *($0 + [8])) + ( [0] ? [4] : ((int_32)*($2) == (int_32)$0) ))) = $1
	*($0 + [8]) = $1
	*($1) = $0
}

int_32 .FUNC $645 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $639 (int_32 $0, int_32 $1)
{
	CALL $44((*($0 + [4]) <= *($0 + [8])), [12907])
	*($1) = *(*($0 + [4]))
	*($0 + [4]) = (*($0 + [4]) + [1])
	return [1]
}

void .FUNC $619 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

void .FUNC $618 (int_32 $0, int_32 $1)
{
	CALL $619($1, *($0))
	CALL $619($1, *($0 + [4]))
}

void .FUNC $638 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = [0]
	$6 = CALL $640($1, ($4 + [12]), $2)
	$2 = *($6)
	if ( $2 ){ goto $label$1 }
	*(($2 = CALL $9([24])) + [16]) = *($3)
	CALL $641($1, *($4 + [12]), $6, $2)
	$5 = [1]
	
.LABEL $label$1
	*($0 + [4]) = $5
	*($0) = $2
	$global$0 = ($4 + [16])
}

int_32 .FUNC $198 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $406($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $349 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [800])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	$4 = ($2 + $4)
	*(($3 + [8])) = $4
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = $4
	*($3) = *($3 + [16])
	$2 = CALL $322(($3 + [32]), $0, $1, $3)
	CALL $233($2)
	CALL $323($2)
	$global$0 = ($3 + [800])
}

void .FUNC $348 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [880])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [868]) = $2
	*($3 + [864]) = $2
	*($3 + [872]) = ($2 + $4)
	*($3 + [856]) = (int_64)0
	CALL $319(($3 + [864]), ($3 + [856]))
	*($3 + [848]) = (int_64)0
	*($3 + [840]) = (int_64)0
	CALL $320(($3 + [864]), ($3 + [840]))
	$2 = *($3 + [872])
	*((($3 + [56]) + [8])) = $2
	*((($3 + [24]) + [8])) = $2
	$5 = *($3 + [864])
	*($3 + [24]) = $5
	*($3 + [56]) = $5
	$2 = CALL $322(($3 + [72]), $0, $1, ($3 + [24]))
	$0 = *($3 + [848])
	*((($3 + [40]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [840])
	*($3 + [40]) = $0
	*($3 + [8]) = $0
	CALL $180($2, *($3 + [856]), ($3 + [8]))
	CALL $323($2)
	$global$0 = ($3 + [880])
}

int_32 .FUNC $611 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	if ( ((uint_32)($1 + [13]) <= (uint_32)$2) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	$3 = *($0)
	$2 = [0]
	
.LOOP $label$3:
	$0 = ($1 + $2)
	if ( (int_64)($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$2 > (uint_32)[12]) ){ goto $label$2 }
	*($0) = *((*([0] + [12708]) + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$3 = ((int_64)$3 << (int_64)5)
	$2 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $610 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $68($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $613 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = $1
	*(($0 + [24])) = (int_64)0
	CALL $614($2, $0)
	return $0
}

void .FUNC $612 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = (int_64)1
	$5 = *($1 + [8])
	$6 = ((int_64)$5 & (int_64)255)
	$7 = $6
	
.LOOP $label$2:
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$1 }
	$7 = ((int_64)$7 + (int_64)-1)
	$4 = ((int_64)$4 * (int_64)10)
	goto $label$2 
	
.LABEL $label$1
	$8 = ((CASTING uint_32)(uint_64 $5) & [255])
	$9 = ($2 - (($8 + [16]) & [496]))
	$10 = $9
	$global$0 = $10
	*(($2 = ($9 + $8))) = [0]
	$2 = ($2 + [-1])
	$11 = ((int_64)$7 / (int_64)$4)
	$7 = *($1)
	$7 = ((int_64)( (int_64)-1 ? (int_64)1 : ((int_64)$7 < (int_64)0) ) * (int_64))($7 - ((int_64)$11 * (int_64)$4)))
	
.LOOP $label$4:
	if ( ((int_64)$6 <= (int_64)0) ){ goto $label$3 }
	$6 = ((int_64)$6 + (int_64)-1)
	$4 = ((int_64)$7 / (int_64)10)
	*($2) = ((CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$4 * (int_64)10))) + [48])
	$2 = ($2 + [-1])
	$7 = $4
	goto $label$4 
	
.LABEL $label$3
	$2 = ($10 - (($8 + [47]) & [496]))
	$global$0 = $2
	$1 = *($9)
	*($3 + [24]) = (uint_64)$5 >> (uint_64)(int_64)8)
	CALL $597(($3 + [32]), ($3 + [24]))
	*(($3 + [16])) = ( *($3 + [40]) ? (($3 + [32]) | [1]) : (*($3 + [32]) & [1]) )
	*($3 + [12]) = $9
	*($3 + [8]) = ( [12757] ? [12088] : $1 )
	*($3) = $11
	CALL $22($2, ($8 + [32]), [12745], $3)
	CALL $26(($3 + [32]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	CALL $25($0, $2, CALL $2($2))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $615 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $616($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $614 (int_32 $0, int_32 $1)
{
	CALL $615(*($0 + [4]), $1)
	*($1 + [36]) = *(*($0 + [8]))
}

void .FUNC $617 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [16])
	CALL $618(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $616 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $617($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $828 (int_32 $0, int_32 $1)
{
	CALL $829($1, *($0))
	CALL $830($1, *($0 + [4]))
	CALL $831($1, *($0 + [8]))
}

void .FUNC $829 (int_32 $0, int_32 $1)
{
	CALL $324(*($0), $1)
}

void .FUNC $826 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $827($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $827 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [24])
	CALL $828($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $824 (int_32 $0, int_32 $1)
{
	CALL $825(*($0 + [4]), $1)
	*($1 + [36]) = *(*($0 + [8]))
}

int_32 .FUNC $825 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $826($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $822 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

int_32 .FUNC $823 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $824($2, $0)
	return $0
}

void .FUNC $820 (int_32 $0, int_32 $1)
{
	CALL $821($1, *($0))
	CALL $822($1, *($0 + [4]))
}

void .FUNC $821 (int_32 $0, int_32 $1)
{
	CALL $468(*($0), $1)
}

int_32 .FUNC $219 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $835($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $218 (int_32 $0, int_32 $1)
{
	int_32 $2
	*($1) = CALL $37()
	$2 = *($0)
	*($1 + [8]) = *($2)
	*(($1 + [16])) = *(($2 + [8]))
	*($1 + [24]) = *(*($0 + [4]))
}

void .FUNC $911 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $912(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $505 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	CALL $507($0, $1, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $504 (int_32 $0, int_32 $1)
{
	CALL $464(*($0), $1)
}

void .FUNC $507 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = *($2)
	$2 = [0]
	$4 = *($1)
	$4 = CALL db_idx64_lowerbound(*($4), *($4 + [8]), (int_64)-7128446144174096384, ($3 + [16]), ($3 + [24]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL $100(($3 + [8]), *($1), *($3 + [24]))
	*(($2 = *($3 + [12])) + [100]) = $4
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	$global$0 = ($3 + [32])
}

int_32 .FUNC $506 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $44(((int_32)*($0 + [4]) != (int_32)[0]), [12578])
	$2 = *($0 + [4])
	$3 = *($2 + [100])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-7128446144174096384, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [100]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$3 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $100($1, *(*($0)), *($1 + [8]))
	*(($2 = *($1 + [4])) + [100]) = $3
	*(($0 + [4])) = $2
	goto $label$2 
	
.LABEL $label$3
	*(($0 + [4])) = [0]
	
.LABEL $label$2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $501 (int_32 $0, int_32 $1)
{
	CALL $502($1, *($0))
	$0 = *($0)
	CALL $503($1, ($0 + [8]))
	CALL $504($1, ($0 + [24]))
}

void .FUNC $500 (int_32 $0, int_32 $1)
{
	CALL $454(*($0), $1)
}

int_32 .FUNC $468 (int_32 $0, int_32 $1)
{
	CALL $394($0, $1, [8])
	return $0
}

int_32 .FUNC $469 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $1
	CALL $394($0, ($2 + [8]), [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $466 (int_32 $0, int_32 $1)
{
	CALL $394($0, $1, [1])
	return $0
}

int_32 .FUNC $467 (int_32 $0, int_32 $1)
{
	CALL $394($0, $1, [8])
	return $0
}

int_32 .FUNC $464 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	*($2 + [8]) = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	CALL $393($0, ($2 + [8]))
	$3 = ($3 & [1])
	$3 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $3 )
	if ( ($4 == 0) ){ goto $label$1 }
	CALL $394($0, ( *($1 + [8]) ? ($1 + [1]) : $3 ), $4)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $465 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [15]) = *($1)
	$0 = CALL $466($0, ($2 + [15]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $462 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

int_32 .FUNC $463 (int_32 $0, int_32 $1)
{
	CALL $393($0, $1)
	CALL $394($0, ($1 + [4]), [33])
	return $0
}

void .FUNC $460 (int_32 $0, int_32 $1)
{
	CALL $465(*($0), $1)
}

void .FUNC $461 (int_32 $0, int_32 $1)
{
	CALL $467(*($0), $1)
}

int_32 .FUNC $725 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $524($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $668 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $669($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $669 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [20])
	CALL $670($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $724 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $664 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $90(($3 + [8]))
	CALL $11($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

int_32 .FUNC $665 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0) = (int_64)0
	*($0 + [24]) = $1
	*(($1 = ($0 + [12]))) = (int_64)0
	*($0 + [8]) = $1
	CALL $666($2, $0)
	return $0
}

void .FUNC $666 (int_32 $0, int_32 $1)
{
	CALL $667(*($0 + [4]), $1)
	*($1 + [28]) = *(*($0 + [8]))
}

int_32 .FUNC $667 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $668($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $660 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $661 (int_32 $0, int_32 $1)
{
	CALL $663(*($0), $1)
}

void .FUNC $662 (int_32 $0, int_32 $1)
{
	CALL $492(*($0), $1)
}

int_32 .FUNC $663 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1 + [8])
	CALL $393($0, ($2 + [8]))
	$3 = ($1 + [4])
	$1 = *($1)
	
.LOOP $label$2:
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$1 }
	CALL $385($0, ($1 + [16]))
	$4 = $1
	$5 = *($1 + [4])
	if ( ($5 == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$1 = $5
	$5 = *($1)
	if ( $5 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	
.LOOP $label$5:
	$1 = *($4 + [8])
	$5 = ((int_32)*($1) == (int_32)$4)
	$4 = $1
	if ( ($5 == 0) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $726 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL $44(((int_32)*($1 + [16]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [8])) = *(($3 + [8]))
	CALL $44([1], [12400])
	*($4 + [24]) = ($4 + [16])
	*($4 + [20]) = $4
	*($4 + [16]) = $4
	CALL $53(($4 + [16]), $1)
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)6761208822947119104) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)6761208822947119105
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $721 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $723(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $724($0, $9)
	CALL $725($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $720 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $722($2, $0)
	return $0
}

void .FUNC $189 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [24]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

void .FUNC $188 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($1)), [12656])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL $9([32])
	CALL $727($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)6761208822947119104
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)6761208822947119104
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $721(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $11($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $262 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [24]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $263 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([40])
	$2 = CALL $525($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1)
	*($3 + [8]) = $8
	$9 = *($1 + [28])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $261($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $264 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = $1
	CALL require_auth($1)
	CALL $44(CALL $265($0), [10181])
	$4 = ($0 + [528])
	CALL $206($4, $1, [10254])
	$4 = CALL $206($4, $2, [10287])
	CALL $267(CALL $266($0, $4), [10319], [30])
	CALL $83($0, ($3 + [8]), $4)
	$global$0 = ($3 + [16])
}

int_32 .FUNC $265 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL $99(($1 + [8]), ($0 + [448]))
	$0 = *($1 + [40])
	$global$0 = ($1 + [48])
	return $0
}

int_32 .FUNC $266 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = ($0 + [528])
	CALL $505($2, ($2 + [8]))
	$3 = [0]
	$0 = [0]
	
.LOOP $label$2:
	if ( ((uint_32)$0 > (uint_32)[29]) ){ goto $label$1 }
	$4 = *($2 + [4])
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ((int_64)*($4) == (int_64)*($1)) ){ goto $label$3 }
	$0 = ($0 + [1])
	CALL $506($2)
	goto $label$2 
	
.LABEL $label$3
	$3 = [1]
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $3
}

void .FUNC $267 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( $0 ){ goto $label$1 }
	CALL eosio_assert_message([0], $1, $2)
	
.LABEL $label$1
}

void .FUNC $268 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = $1
	CALL require_auth($1)
	CALL $44(CALL $265($0), [10348])
	$4 = ($0 + [528])
	CALL $206($4, $1, [10254])
	$4 = CALL $206($4, $2, [10287])
	CALL $267(CALL $266($0, $4), [10319], [30])
	CALL $105($0, ($3 + [8]), $4)
	$global$0 = ($3 + [16])
}

void .FUNC $180 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = *(($2 + [8]))
	*((($3 + [16]) + [8])) = $4
	$5 = *($2)
	*(($3 + [8])) = $4
	*($3) = $5
	*($3 + [16]) = $5
	CALL $162($0, $3)
	$6 = ($0 + [248])
	$7 = CALL $181($6, $1, [8803])
	$8 = ($7 + [8])
	CALL $44(CALL $60($8, $2), [8371])
	if ( (CALL $62($8, $2) == 0) ){ goto $label$2 }
	CALL $182($6, $7)
	goto $label$1 
	
.LABEL $label$2
	CALL $44(((int_32)*($7 + [24]) == (int_32)$6), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($6)), [12349])
	$5 = *($7)
	CALL $64($8, $2)
	CALL $44(((int_64)$5 == (int_64)*($7)), [12400])
	*($3 + [72]) = (($3 + [32]) + [24])
	*($3 + [68]) = ($3 + [32])
	*($3 + [64]) = ($3 + [32])
	CALL $176(($3 + [64]), $7)
	CALL db_update_i64(*($7 + [28]), $1, ($3 + [32]), [24])
	$2 = ($0 + [264])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$1 }
	*($2) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	CALL $125($0)
	$global$0 = ($3 + [80])
}

int_32 .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $11($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12759])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12804])
	$2 = *(($0 + [28]))
	$3 = *($0 + [24])
	$4 = *($1)
	
.LOOP $label$3:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	if ( ((int_64)*(*($2)) != (int_64)$4) ){ goto $label$3 }
	$5 = ($2 + [24])
	goto $label$1 
	
.LABEL $label$2
	$2 = ($3 + [-24])
	$5 = $3
	
.LABEL $label$1
	CALL $44(((int_32)$5 != (int_32)$3), [12854])
	$2 = ($2 + [24])
	$3 = *(($0 + [28]))
	
.LOOP $label$5:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	CALL $183(($2 + [-24]), $2)
	$2 = ($2 + [24])
	goto $label$5 
	
.LABEL $label$4
	$3 = ($2 + [-24])
	$2 = *(($0 + [28]))
	
.LOOP $label$7:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	$2 = ($2 + [-24])
	CALL $184($2)
	goto $label$7 
	
.LABEL $label$6
	*(($0 + [28])) = $3
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $185 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	$5 = $3
	$3 = ($5 + [-24])
	if ( ((int_64)$2 == (int_64)6761208822947119104) ){ goto $label$1 }
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL $718($0, $1, *($3))
	return 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6761208822947119104, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$4 }
	CALL $718($0, $1, CALL $719($1, $3))
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $184 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	$1 = *($1 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $726($0, $1, $2, $3)
}

int_32 .FUNC $186 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (uint_64)*($0) >> (uint_64)(int_64)8)
	$0 = CALL $396(($1 + [8]))
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL $44(((int_32)*($0 + [4]) != (int_32)[0]), [12578])
	$3 = CALL db_next_i64(*(*($0 + [4]) + [28]), ($1 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $113(*($0), $3)
	
.LABEL $label$1
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $760 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $763 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)6716332327921008640, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $194($1, $4)
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
}

void .FUNC $762 (int_32 $0, int_32 $1)
{
	CALL $492(*($0), $1)
}

void .FUNC $765 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = [0]
	$4 = CALL db_lowerbound_i64(*($1), *($1 + [8]), (int_64)5378043540710670336, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $179($1, $4)
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
}

void .FUNC $248 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	$1 = *($1 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $427($0, $1, $2, $3)
}

void .FUNC $767 (int_32 $0, int_32 $1)
{
	CALL $768(*($0 + [4]), $1)
	*($1 + [36]) = *(*($0 + [8]))
}

int_32 .FUNC $766 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $767($2, $0)
	return $0
}

void .FUNC $769 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $770($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $768 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $769($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $249 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	*($0 + [8]) = $3
	*($0) = $2
	CALL $166(($0 + [16]), [1], $1)
	CALL $428(($0 + [28]), $4)
	return $0
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL $381($0, CALL $691($1))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	CALL $692($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $166 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $493($0, $1)
	$3 = ($0 + [4])
	$4 = *($3)
	
.LOOP $label$2:
	*($4) = *($2)
	*(($4 + [8])) = *(($2 + [8]))
	$4 = (*($3) + [16])
	*($3) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $185(($3 + [8]), $1, (int_64)6761208822947119104)
	$1 = *($3 + [12])
	$2 = ( $1 ? $2 : $1 )
	*($0) = *($2)
	*(($0 + [8])) = *(($2 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12759])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12804])
	$2 = *(($0 + [28]))
	$3 = *($0 + [24])
	$4 = *($1)
	
.LOOP $label$3:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	if ( ((int_64)*(*($2)) != (int_64)$4) ){ goto $label$3 }
	$5 = ($2 + [24])
	goto $label$1 
	
.LABEL $label$2
	$2 = ($3 + [-24])
	$5 = $3
	
.LABEL $label$1
	CALL $44(((int_32)$5 != (int_32)$3), [12854])
	$2 = ($2 + [24])
	$3 = *(($0 + [28]))
	
.LOOP $label$5:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	CALL $191(($2 + [-24]), $2)
	$2 = ($2 + [24])
	goto $label$5 
	
.LABEL $label$4
	$3 = ($2 + [-24])
	$2 = *(($0 + [28]))
	
.LOOP $label$7:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	$2 = ($2 + [-24])
	CALL $192($2)
	goto $label$7 
	
.LABEL $label$6
	*(($0 + [28])) = $3
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $163 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $147(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL $44(((int_64)*($1 + [8]) == (int_64)6003093065207795716), [8823])
	CALL $44(((int_64)*($1) > (int_64)0), [8860])
	CALL $132($2, (int_64)0, (int_64)6003093065207795716)
	$3 = ($0 + [88])
	CALL $165(($2 + [16]), $3, $2)
	CALL $52(($2 + [16]), $1)
	CALL $127($3, ($2 + [16]), *($0))
	$global$0 = ($2 + [32])
}

void .FUNC $161 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL $44(((int_64)*($2 + [8]) == (int_64)6003093065207795716), [8823])
	$4 = ($0 + [208])
	$5 = CALL $163($4, $1, [8935])
	$6 = ($5 + [8])
	$7 = CALL $60($6, $2)
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	CALL $25($3, [8964], CALL $2([8964]))
	CALL $81($7, $3, $6, $2)
	CALL $26($3)
	if ( (CALL $62($6, $2) == 0) ){ goto $label$2 }
	CALL $164($4, $5)
	goto $label$1 
	
.LABEL $label$2
	CALL $44(((int_32)*($5 + [24]) == (int_32)$4), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($4)), [12349])
	$8 = *($5)
	CALL $64($6, $2)
	CALL $44(((int_64)$8 == (int_64)*($5)), [12400])
	*($3 + [40]) = ($3 + [24])
	*($3 + [36]) = $3
	*($3 + [32]) = $3
	CALL $158(($3 + [32]), $5)
	CALL db_update_i64(*($5 + [28]), $1, $3, [24])
	$2 = ($0 + [224])
	if ( (uint_64)($8 <= *($2)) ){ goto $label$1 }
	*($2) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $160 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL require_auth($1)
	CALL $140($0, $1, *($2 + [8]), [0])
	$4 = *($2 + [8])
	*((($3 + [176]) + [8])) = $4
	$5 = *($2)
	*((($3 + [24]) + [8])) = $4
	*($3 + [24]) = $5
	*($3 + [176]) = $5
	CALL $161($0, $1, ($3 + [24]))
	$4 = *($2 + [8])
	*((($3 + [160]) + [8])) = $4
	$5 = *($2)
	*((($3 + [8]) + [8])) = $4
	*($3 + [8]) = $5
	*($3 + [160]) = $5
	CALL $162($0, ($3 + [8]))
	*($3 + [112]) = (int_64)3617214756542218240
	$5 = *($0)
	*($3 + [104]) = $5
	*(($0 = (($3 + [40]) + [8]))) = [0]
	*($3 + [40]) = (int_64)0
	CALL $25(($3 + [40]), [8792], CALL $2([8792]))
	*(($3 + [80])) = *($2 + [8])
	*(($3 + [96])) = *($0)
	*($3 + [64]) = $1
	*($3 + [56]) = $5
	*($3 + [72]) = *($2)
	*($3 + [88]) = *($3 + [40])
	$2 = [0]
	
.LOOP $label$2:
	if ( ((int_32)$2 == (int_32)[12]) ){ goto $label$1 }
	*((($3 + [40]) + $2)) = [0]
	$2 = ($2 + [4])
	goto $label$2 
	
.LABEL $label$1
	$2 = CALL $154(($3 + [120]), ($3 + [104]), (int_64)-5918374966777866960, (int_64)-3617168760277827584, ($3 + [56]))
	CALL $155($2)
	CALL $156($2)
	CALL $26(($3 + [88]))
	CALL $26(($3 + [40]))
	$global$0 = ($3 + [192])
}

int_32 .FUNC $169 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0 + [4]) = $1
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	CALL $381($0, CALL $380($1))
	$3 = *($0)
	*($2) = $3
	*($2 + [4]) = $3
	*($2 + [8]) = *($0 + [4])
	CALL $382($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $930 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	if ( ((uint_32)int_32(($3 - $4) >> [3]) >= (uint_32)$1) ){ goto $label$3 }
	$5 = *($0)
	$4 = int_32(($4 - $5) >> [3])
	$6 = ($4 + $1)
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$1 }
	$7 = ($0 + [8])
	$8 = [536870911]
	$3 = ($3 - $5)
	if ( ((uint_32)int_32($3 >> [3]) > (uint_32)[268435454]) ){ goto $label$4 }
	$3 = int_32($3 >> [2])
	$8 = ( $6 ? $3 : ($3 <= $6) )
	
.LABEL $label$4
	$4 = CALL $931(($2 + [8]), $8, $4, $7)
	$5 = *($4 + [8])
	$3 = $5
	$8 = $1
	
.LOOP $label$5:
	*($3) = (int_64)0
	$3 = ($3 + [8])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$5 }
	*(($4 + [8])) = ($5 + ($1 << [3]))
	CALL $932($0, $4)
	CALL $933($4)
	goto $label$2 
	
.LABEL $label$3
	$3 = $4
	$8 = $1
	
.LOOP $label$6:
	*($3) = (int_64)0
	$3 = ($3 + [8])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$6 }
	*(($0 + [4])) = ($4 + ($1 << [3]))
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $931 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[536870912]) ){ goto $label$1 }
	$4 = CALL $9(($1 << [3]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ($2 << [3]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ($1 << [3]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $369 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [820]) = $2
	*($3 + [816]) = $2
	*($3 + [824]) = ($2 + $4)
	*($3 + [808]) = (int_64)0
	CALL $325(($3 + [816]), ($3 + [808]))
	*($3 + [800]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [800]))
	$2 = *($3 + [824])
	*((($3 + [16]) + [8])) = $2
	*(($3 + [8])) = $2
	$5 = *($3 + [816])
	*($3) = $5
	*($3 + [16]) = $5
	$2 = CALL $322(($3 + [32]), $0, $1, $3)
	CALL $297($2, *($3 + [808]), *($3 + [800]))
	CALL $323($2)
	$global$0 = ($3 + [832])
}

void .FUNC $368 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [896])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [884]) = $4
	*($3 + [880]) = $4
	*($3 + [888]) = ($4 + $5)
	*($3 + [872]) = (int_64)0
	*($3 + [864]) = (int_64)0
	CALL $320(($3 + [880]), ($3 + [864]))
	*(($3 + [856])) = [0]
	*($3 + [848]) = (int_64)0
	$4 = [0]
	
.LOOP $label$5:
	if ( ((int_32)$4 == (int_32)[12]) ){ goto $label$4 }
	*((($3 + [848]) + $4)) = [0]
	$4 = ($4 + [4])
	goto $label$5 
	
.LABEL $label$4
	CALL $351(($3 + [880]), ($3 + [848]))
	$4 = *((($3 + [880]) + [8]))
	*((($3 + [64]) + [8])) = $4
	*((($3 + [16]) + [8])) = $4
	$6 = *($3 + [880])
	*($3 + [16]) = $6
	*($3 + [64]) = $6
	$4 = CALL $322(($3 + [80]), $0, $1, ($3 + [16]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [864]) + [8]))
	*($3 + [48]) = *($3 + [864])
	$5 = CALL $24(($3 + [32]), ($3 + [848]))
	*(($3 + [8])) = *($2)
	*($3) = *($3 + [48])
	CALL $290($4, $3, $5)
	CALL $26($5)
	CALL $323($4)
	CALL $26(($3 + [848]))
	$global$0 = ($3 + [896])
}

void .FUNC $688 (int_32 $0, int_32 $1)
{
	CALL $663(*($0), $1)
}

void .FUNC $715 (int_32 $0, int_32 $1)
{
	CALL $716($1, *($0))
	CALL $717($1, *($0 + [4]))
}

void .FUNC $716 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $717 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

int_32 .FUNC $710 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $711 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $712 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $184($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $713 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $714($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $718 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [16]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $719 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([32])
	$2 = CALL $720($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	*($3 + [8]) = (int_64)6761208822947119104
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$7 = *($9)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)6761208822947119104
	*($7 + [16]) = $8
	*($3 + [24]) = [0]
	*($7) = $1
	*($9) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $721($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $484 (int_32 $0, int_32 $1)
{
	CALL $485(*($0), $1)
}

int_32 .FUNC $485 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = (*($1 + [4]) - *($1))
	$3 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	$4 = *($0)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $4
	$1 = [0]
	
.LOOP $label$3:
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	*($0) = (($4 + $1) + [8])
	$1 = ($1 + [8])
	goto $label$3 
	
.LABEL $label$2
	return $0
}

void .FUNC $486 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [20])
	CALL $487($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $487 (int_32 $0, int_32 $1)
{
	CALL $488($1, *($0))
	CALL $489($1, *($0 + [4]))
	CALL $490($1, *($0 + [8]))
}

void .FUNC $480 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $486($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $481 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $482($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $482 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [20])
	CALL $483($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $483 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [8])
	CALL $484($1, *($0 + [4]))
	*(($1 = *($1))) = (*($1) + [4])
}

void .FUNC $488 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $489 (int_32 $0, int_32 $1)
{
	CALL $491(*($0), $1)
}

int_64 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$4 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $4)
	$6 = int_32($5 >> [3])
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$6 != (int_32)[1]) ){ goto $label$2 }
	$7 = *($4)
	goto $label$1 
	
.LABEL $label$3
	$7 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	CALL $33($4, $3, ($2 + [8]))
	$6 = uint_32($6 >> [1])
	if ( ($5 & [8]) ){ goto $label$4 }
	$1 = (*($1) + ($6 << [3]))
	$7 = ((int_64)((int_64)*($1) + (int_64)*(($1 + [-8]))) / (int_64)2)
	goto $label$1 
	
.LABEL $label$4
	$7 = *((*($1) + ($6 << [3])))
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $7
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $786 (int_32 $0, int_32 $1)
{
	CALL $787(*($0 + [4]), $1)
	*($1 + [28]) = *(*($0 + [8]))
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	$1 = CALL $611($1, ($2 + [3]), ($2 + [16]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	CALL $354($0, ($2 + [3]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_64 $2
	CALL $44(((int_64)*($1 + [8]) == (int_64)*($0 + [8])), [11754])
	$2 = (int_64)
	*($0) = $2(*($0) - *($1)))
	CALL $44(((int_64)$2 > (int_64)-4611686018427387904), [11802])
	CALL $44(((int_64)*($0) < (int_64)4611686018427387904), [11824])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $11($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [576])
	$global$0 = $5
	$6 = *($1 + [8])
	$7 = *($1)
	CALL $612(($5 + [48]), $2)
	$2 = *($5 + [56])
	$8 = *($5 + [48])
	CALL $65(($5 + [32]), $3)
	$3 = *($5 + [40])
	$9 = *($5 + [32])
	CALL $612(($5 + [16]), $4)
	*($5 + [4]) = ( $3 ? (($5 + [32]) | [1]) : ($9 & [1]) )
	*($5) = ( $2 ? (($5 + [48]) | [1]) : ($8 & [1]) )
	*($5 + [8]) = ( *($5 + [24]) ? (($5 + [16]) | [1]) : (*($5 + [16]) & [1]) )
	CALL $22(($5 + [64]), [512], ( $6 ? ($1 + [1]) : ($7 & [1]) ), $5)
	CALL $26(($5 + [16]))
	CALL $26(($5 + [32]))
	CALL $26(($5 + [48]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	CALL $25($0, ($5 + [64]), CALL $2(($5 + [64])))
	$global$0 = ($5 + [576])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	if ( $0 ){ goto $label$1 }
	CALL $66($5, $1, $2, $3, $4)
	CALL $44([0], ( *($5 + [8]) ? ($5 | [1]) : (*($5) & [1]) ))
	CALL $26($5)
	
.LABEL $label$1
	$global$0 = ($5 + [16])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	CALL $44(((int_64)*($0 + [8]) == (int_64)*($1 + [8])), [11540])
	return ((int_64)*($0) >= (int_64)*($1))
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	CALL $44(((int_32)*($1 + [16]) == (int_32)$0), [12759])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12804])
	$2 = *(($0 + [28]))
	$3 = *($0 + [24])
	$4 = *($1 + [8])
	
.LOOP $label$3:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	if ( ((uint_64)((int_64)*(*($2) + [8]) ^ (int_64)$4) > (uint_64)(int_64)255) ){ goto $label$3 }
	$5 = ($2 + [24])
	goto $label$1 
	
.LABEL $label$2
	$2 = ($3 + [-24])
	$5 = $3
	
.LABEL $label$1
	CALL $44(((int_32)$5 != (int_32)$3), [12854])
	$2 = ($2 + [24])
	$3 = *(($0 + [28]))
	
.LOOP $label$5:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	CALL $67(($2 + [-24]), $2)
	$2 = ($2 + [24])
	goto $label$5 
	
.LABEL $label$4
	$3 = ($2 + [-24])
	$2 = *(($0 + [28]))
	
.LOOP $label$7:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	$2 = ($2 + [-24])
	CALL $68($2)
	goto $label$7 
	
.LABEL $label$6
	*(($0 + [28])) = $3
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	CALL $44(((int_64)*($0 + [8]) == (int_64)*($1 + [8])), [11540])
	return ((int_64)*($0) == (int_64)*($1))
}

int_32 .FUNC $909 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $910($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $908 (int_32 $0, int_32 $1)
{
	CALL $909(*($0 + [4]), $1)
	*($1 + [20]) = *(*($0 + [8]))
}

int_32 .FUNC $337 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $521($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $901 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL $44(((int_32)*($1 + [16]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$5 = *($1 + [8])
	$3 = *($3)
	*($1 + [8]) = *(($3 + [8]))
	*($1) = *($3)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL $44(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [12400])
	*($4 + [24]) = ($4 + [16])
	*($4 + [20]) = $4
	*($4 + [16]) = $4
	CALL $53(($4 + [16]), $1)
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $900 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($1 + [16])) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	*($2 + [40]) = ($2 + [24])
	*($2 + [36]) = $2
	*($2 + [32]) = $2
	CALL $894(($2 + [32]), $1)
	$5 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-5004454808576147456, *(*($0 + [8])), $5, $2, [24])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $903 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [8]))) = *(($4 + [8]))
	*($2 + [24]) = ($2 + [16])
	*($2 + [20]) = $2
	*($2 + [16]) = $2
	CALL $53(($2 + [16]), $1)
	$6 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($1 + [20]) = CALL db_store_i64(*($3 + [8]), (int_64)-4149656565420228608, *(*($0 + [8])), $6), $2, [16])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $780 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [24])
	CALL $781($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $905 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $906($2, $0)
	return $0
}

void .FUNC $904 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL $44(((int_32)*($1 + [16]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$5 = *($1 + [8])
	$3 = *($3)
	*($1 + [8]) = *(($3 + [8]))
	*($1) = *($3)
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL $44(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [12400])
	*($4 + [24]) = ($4 + [16])
	*($4 + [20]) = $4
	*($4 + [16]) = $4
	CALL $53(($4 + [16]), $1)
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $907 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $908($2, $0)
	return $0
}

void .FUNC $906 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [8]))) = *(($4 + [8]))
	*($2 + [24]) = ($2 + [16])
	*($2 + [20]) = $2
	*($2 + [16]) = $2
	CALL $53(($2 + [16]), $1)
	$6 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($1 + [20]) = CALL db_store_i64(*($3 + [8]), (int_64)-5004454808576327680, *(*($0 + [8])), $6), $2, [16])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $331 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $515($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $549 (int_32 $0, int_32 $1)
{
	CALL $550(*($0 + [4]), $1)
	*($1 + [96]) = *(*($0 + [8]))
	*($1 + [100]) = [-1]
}

void .FUNC $621 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $622 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $522($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $623 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $624($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $624 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [16])
	CALL $625(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $625 (int_32 $0, int_32 $1)
{
	CALL $626($1, *($0))
	CALL $626($1, *($0 + [4]))
}

void .FUNC $239 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($1)), [12656])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL $9([32])
	CALL $842($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)-7128454209411632640
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)-7128454209411632640
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $799(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $11($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $238 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	$1 = *($1 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $841($0, $1, $2, $3)
}

void .FUNC $541 (int_32 $0, int_32 $1)
{
	CALL $542($1, *($0))
	CALL $543($1, *($0 + [4]))
	CALL $544($1, *($0 + [8]))
}

void .FUNC $236 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL $227(($3 + [40]), $0, (int_64)-7128454209411632640)
	if ( (*($3 + [44]) == 0) ){ goto $label$2 }
	*($3 + [32]) = *($3 + [40])
	*($3 + [16]) = $1
	*($3 + [8]) = *($3 + [32])
	CALL $238($0, ($3 + [8]), $2, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [24]) = $1
	CALL $239(($3 + [16]), $0, $2, ($3 + [24]))
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $235 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $227(($1 + [8]), $0, (int_64)-7128454209411632640)
	$0 = *($1 + [12])
	$global$0 = ($1 + [16])
	return ((int_32)$0 != (int_32)[0])
}

int_32 .FUNC $234 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $119(($1 + [8]), $0, (int_64)7235159537265672192)
	$0 = *($1 + [12])
	$global$0 = ($1 + [16])
	return ((int_32)$0 != (int_32)[0])
}

void .FUNC $233 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [448])
	CALL $44(((int_32)CALL $234($2) ^ (int_32)[1]), [9796])
	*($1 + [64]) = (int_64)0
	*($1 + [56]) = (int_64)0
	*($1 + [72]) = (int_64)0
	*($1 + [80]) = (int_64)0
	*($1 + [88]) = [0]
	CALL $102($2, ($1 + [56]), *($0))
	$2 = ($0 + [128])
	CALL $44(((int_32)CALL $235($2) ^ (int_32)[1]), [9825])
	CALL $132(($1 + [56]), (int_64)6000000, (int_64)6003093065207795716)
	$3 = (($1 + [56]) + [8])
	*((($1 + [40]) + [8])) = *($3)
	*($1 + [40]) = *($1 + [56])
	CALL $236($2, ($1 + [40]), *($0))
	if ( (CALL $237(($0 + [88])) == 0) ){ goto $label$1 }
	$4 = *($3)
	*((($1 + [24]) + [8])) = $4
	*((($1 + [8]) + [8])) = $4
	$4 = *($1 + [56])
	*($1 + [8]) = $4
	*($1 + [24]) = $4
	CALL $123($0, ($1 + [8]))
	
.LABEL $label$1
	$global$0 = ($1 + [96])
}

void .FUNC $544 (int_32 $0, int_32 $1)
{
	CALL $321(*($0), $1)
}

int_32 .FUNC $547 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $517($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $230 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3)) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $262($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7128445242053112560, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $262($0, $1, CALL $263($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

int_32 .FUNC $875 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[536870912]) ){ goto $label$1 }
	$4 = CALL $9(($1 << [3]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ($2 << [3]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ($1 << [3]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $417 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

int_32 .FUNC $877 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [8])
	$2 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$2:
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$1 = ($1 + [-8])
	*($3) = $1
	goto $label$2 
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $11($1)
	
.LABEL $label$3
	return $0
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12759])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12804])
	$2 = *(($0 + [28]))
	$3 = *($0 + [24])
	$4 = *($1)
	
.LOOP $label$3:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	if ( ((int_64)*(*($2)) != (int_64)$4) ){ goto $label$3 }
	$5 = ($2 + [24])
	goto $label$1 
	
.LABEL $label$2
	$2 = ($3 + [-24])
	$5 = $3
	
.LABEL $label$1
	CALL $44(((int_32)$5 != (int_32)$3), [12854])
	$2 = ($2 + [24])
	$3 = *(($0 + [28]))
	
.LOOP $label$5:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$4 }
	CALL $690(($2 + [-24]), $2)
	$2 = ($2 + [24])
	goto $label$5 
	
.LABEL $label$4
	$3 = ($2 + [-24])
	$2 = *(($0 + [28]))
	
.LOOP $label$7:
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	$2 = ($2 + [-24])
	CALL $510($2)
	goto $label$7 
	
.LABEL $label$6
	*(($0 + [28])) = $3
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $871 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[96])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[44739243]) ){ goto $label$1 }
	$6 = ($0 + [8])
	$7 = [44739242]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[96])
	if ( ((uint_32)$3 > (uint_32)[22369620]) ){ goto $label$2 }
	$7 = ($3 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	
.LABEL $label$2
	$7 = CALL $872(($2 + [8]), $7, $4, $6)
	CALL $207(*($7 + [8]), $1)
	*($7 + [8]) = (*($7 + [8]) + [96])
	CALL $873($0, $7)
	CALL $874($7)
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $870 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($1 + [16])) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	*($2 + [40]) = ($2 + [24])
	*($2 + [36]) = $2
	*($2 + [32]) = $2
	CALL $864(($2 + [32]), $1)
	$5 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-4149656565420222976, *(*($0 + [8])), $5, $2, [24])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $873 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = *($0)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$1 }
	$6 = ($2 + [-96])
	$5 = *($4)
	CALL memcpy(($5 + [-96]), $6, [45])
	*(($5 + [-40])) = *(($2 + [-40]))
	$7 = [-48]
	*(($5 + [-48])) = *(($2 + [-48]))
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)[-36]) ){ goto $label$3 }
	*(($2 + $7)) = [0]
	$7 = ($7 + [4])
	goto $label$4 
	
.LABEL $label$3
	*(($5 + [-14])) = *(($2 + [-14]))
	*(($5 + [-20])) = *(($2 + [-20]))
	*(($5 + [-28])) = *(($2 + [-28]))
	*(($5 + [-36])) = *(($2 + [-36]))
	*($4) = (*($4) + [-96])
	$2 = $6
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	$7 = ($1 + [4])
	*($0) = *($7)
	*($7) = $2
	$2 = ($0 + [4])
	$5 = *($2)
	*($2) = *($1 + [8])
	*($1 + [8]) = $5
	$2 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $2
	*($1) = *($7)
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	CALL $44(((int_64)*($0 + [8]) == (int_64)*($1 + [8])), [11540])
	return ((int_64)*($0) <= (int_64)*($1))
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [24]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $879 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([40])
	$2 = CALL $883($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1)
	*($3 + [8]) = $8
	$9 = *($1 + [28])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $882($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $415 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [16])
	*($2 + [8]) = ($0 + [32])
	CALL $416($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $237 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $185(($1 + [8]), $0, (int_64)6761208822947119104)
	$0 = *($1 + [12])
	$global$0 = ($1 + [16])
	return ((int_32)$0 != (int_32)[0])
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([40])
	$2 = CALL $665($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1)
	*($3 + [8]) = $8
	$9 = *($1 + [28])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $109($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $90(($5 + [8]))
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $414 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $415($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$5 = *($1)
	$3 = *($3)
	$6 = $4
	CALL $648($6, ($1 + [8]), $3, $3)
	CALL $44(((int_64)$5 == (int_64)*($1)), [12400])
	$3 = CALL $677($1)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $3($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $3)
	CALL $678($6, $1)
	CALL db_update_i64(*($1 + [28]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $4($4)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($6 + [16])
}

int_32 .FUNC $413 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $414($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = ($0 + [528])
	CALL $100(($2 + [72]), $3, *($1))
	$4 = *($2 + [76])
	if ( ($4 == 0) ){ goto $label$1 }
	if ( (*($4 + [60]) == 0) ){ goto $label$1 }
	$4 = *($2 + [76])
	CALL $44(((int_32)$4 != (int_32)[0]), [12268])
	CALL $116($3, $4)
	$4 = ($0 + [448])
	CALL $99(($2 + [32]), $4)
	*($2 + [56]) = ((int_64)*($2 + [56]) + (int_64)-1)
	CALL $102($4, ($2 + [32]), *($0))
	
.LABEL $label$1
	$0 = ($0 + [688])
	CALL $84(($2 + [32]), $0, *($1))
	if ( (*($2 + [36]) == 0) ){ goto $label$2 }
	*($2 + [24]) = *($2 + [32])
	*($2 + [8]) = *($2 + [24])
	CALL $86(($2 + [16]), $0, ($2 + [8]))
	
.LABEL $label$2
	$global$0 = ($2 + [80])
}

void .FUNC $412 (int_32 $0, int_32 $1)
{
	CALL $413(*($0 + [4]), $1)
	*($1 + [44]) = *(*($0 + [8]))
}

int_32 .FUNC $303 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([32])
	$2 = CALL $907($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = (uint_64)*($1) >> (uint_64)(int_64)8
	*($3 + [8]) = $8)
	$9 = *($1 + [20])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $299($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $302 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [16]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

void .FUNC $301 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $811(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $812($0, $9)
	CALL $813($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $300 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $620(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $621($0, $9)
	CALL $622($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $307 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$10 = ($1 + [-16])
	$5 = ($1 + [-8])
	
.LOOP $label$11:
	$8 = $0
	$0 = ($1 - $8)
	$6 = int_32($0 >> [3])
	if ( ((uint_32)$6 <= (uint_32)[5]) ){ goto $label$9 }
	if ( ((int_32)$0 <= (int_32)[247]) ){ goto $label$8 }
	$11 = ($8 + (((int_32)$6 / (int_32)[2]) << [3]))
	if ( ((int_32)$0 < (int_32)[7993]) ){ goto $label$13 }
	$0 = (((int_32)$6 / (int_32)[4]) << [3])
	$12 = CALL $923($8, ($8 + $0), $11, ($11 + $0), $5, $2)
	goto $label$12 
	
.LABEL $label$13
	$12 = CALL $924($8, $11, $5, $2)
	
.LABEL $label$12
	$4 = *($11)
	$3 = *($8)
	if ( ((uint_64)$3 >= (uint_64)$4) ){ goto $label$15 }
	$6 = $5
	goto $label$14 
	
.LABEL $label$15
	$0 = $10
	
.LOOP $label$16:
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$10 }
	$7 = *($0)
	$6 = ($0 + [-8])
	$0 = $6
	if ( ((uint_64)$7 >= (uint_64)$4) ){ goto $label$16 }
	*($8) = $7
	*(($6 = ($6 + [8]))) = $3
	$12 = ($12 + [1])
	
.LABEL $label$14
	$9 = ($8 + [8])
	if ( ((uint_32)$9 >= (uint_32)$6) ){ goto $label$17 }
	
.LOOP $label$18:
	$0 = ($9 + [-8])
	$7 = *($11)
	
.LOOP $label$19:
	$0 = ($0 + [8])
	$4 = *($0)
	if ( (uint_64)($4 <= $7) ){ goto $label$19 }
	$9 = ($0 + [8])
	
.LOOP $label$20:
	$6 = ($6 + [-8])
	$3 = *($6)
	if ( ((uint_64)$3 >= (uint_64)$7) ){ goto $label$20 }
	if ( ((uint_32)$0 > (uint_32)$6) ){ goto $label$21 }
	*($0) = $3
	*($6) = $4
	$11 = ( $6 ? $11 : ((int_32)$11 == (int_32)$0) )
	$12 = ($12 + [1])
	goto $label$18 
	
.LABEL $label$21
	$9 = $0
	
.LABEL $label$17
	if ( ((int_32)$9 == (int_32)$11) ){ goto $label$22 }
	$4 = *($9)
	$7 = *($11)
	if ( ((uint_64)$7 >= (uint_64)$4) ){ goto $label$22 }
	*($9) = $7
	*($11) = $4
	$12 = ($12 + [1])
	
.LABEL $label$22
	if ( $12 ){ goto $label$23 }
	$6 = CALL $925($8, $9, $2)
	$0 = ($9 + [8])
	if ( CALL $925($0, $1, $2) ){ goto $label$4 }
	if ( $6 ){ goto $label$11 }
	
.LABEL $label$23
	if ( ((int_32)($9 - $8) >= (int_32)($1 - $9)) ){ goto $label$24 }
	CALL $307($8, $9, $2)
	$0 = ($9 + [8])
	goto $label$11 
	
.LABEL $label$24
	CALL $307(($9 + [8]), $1, $2)
	$1 = $9
	$0 = $8
	goto $label$1 
	
.LABEL $label$10
	$4 = *($5)
	if ( ((uint_64)$3 >= (uint_64)$4) ){ goto $label$26 }
	$6 = ($8 + [8])
	goto $label$25 
	
.LABEL $label$26
	$6 = ($8 + [16])
	
.LOOP $label$27:
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$2 }
	$0 = ($6 + [-8])
	$7 = *($0)
	if ( (uint_64)($3 <= $7) ){ goto $label$28 }
	$6 = ($6 + [8])
	goto $label$27 
	
.LABEL $label$28
	*($0) = $4
	*($5) = $7
	
.LABEL $label$25
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$29:
	$0 = ($6 + [-8])
	$7 = *($8)
	
.LOOP $label$30:
	$0 = ($0 + [8])
	$4 = *($0)
	if ( ((uint_64)$7 >= (uint_64)$4) ){ goto $label$30 }
	$6 = ($0 + [8])
	
.LOOP $label$31:
	$5 = ($5 + [-8])
	$3 = *($5)
	if ( (uint_64)($7 <= $3) ){ goto $label$31 }
	if ( ((uint_32)$0 >= (uint_32)$5) ){ goto $label$32 }
	*($0) = $3
	*($5) = $4
	goto $label$29 
	
.LABEL $label$32
	$5 = [4]
	goto $label$3 
	
.LABEL $label$9
	goto $label$2 
	
.LABEL $label$33
	$4 = *($8)
	$0 = ($1 + [-8])
	$7 = *($0)
	if ( ((uint_64)$7 >= (uint_64)$4) ){ goto $label$2 }
	*($8) = $7
	*($0) = $4
	return 
	
.LABEL $label$8
	CALL $926($8, $1, $2)
	return 
	
.LABEL $label$7
	CALL $924($8, ($8 + [8]), ($1 + [-8]), $2)
	return 
	
.LABEL $label$6
	CALL $927($8, ($8 + [8]), ($8 + [16]), ($1 + [-8]), $2)
	return 
	
.LABEL $label$5
	CALL $923($8, ($8 + [8]), ($8 + [16]), ($8 + [24]), ($1 + [-8]), $2)
	goto $label$2 
	
.LABEL $label$4
	$5 = ( [1] ? [2] : $6 )
	$1 = ( $1 ? $9 : $6 )
	$0 = $8
	
.LABEL $label$3
	$6 = ($5 & [7])
	if ( ((uint_32)$6 > (uint_32)[4]) ){ goto $label$2 }
	if ( (([1] << $6) & [21]) ){ goto $label$1 }
	
.LABEL $label$2
	$6
}

void .FUNC $411 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $419(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $420($0, $9)
	CALL $421($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $305 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $608(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $609($0, $9)
	CALL $610($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $304 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL require_auth($1)
	*((($3 + [16]) + [32])) = [0]
	*($3 + [24]) = $1
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [16]) = *($0)
	CALL $50(($3 + [8]), ($3 + [16]), (uint_64)$2 >> (uint_64)(int_64)8))
	if ( *($3 + [12]) ){ goto $label$1 }
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($3 + [16])), [12656])
	*(($0 = CALL $9([32])) + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = ($3 + [16])
	CALL $132(($3 + [80]), (int_64)0, $2)
	*($0 + [8]) = *((($3 + [80]) + [8]))
	*($0) = *($3 + [80])
	*($3 + [72]) = (($3 + [80]) + [16])
	*($3 + [68]) = ($3 + [80])
	*($3 + [64]) = ($3 + [80])
	CALL $53(($3 + [64]), $0)
	$2 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$4 = CALL db_store_i64(*((($3 + [16]) + [8])), (int_64)4152997948076064768, $1, $2), ($3 + [80]), [16]
	*($0 + [20]) = $4)
	$5 = (($3 + [16]) + [16])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$2 }
	*($5) = ((int_64)$2 + (int_64)1)
	
.LABEL $label$2
	*($3 + [64]) = $0
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($3 + [80]) = $1)
	*($3 + [60]) = $4
	$6 = ($3 + [44])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($3 + [48]))) ){ goto $label$4 }
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($3 + [64]) = [0]
	*($5) = $0
	*($6) = ($5 + [24])
	goto $label$3 
	
.LABEL $label$4
	CALL $305(($3 + [40]), ($3 + [64]), ($3 + [80]), ($3 + [60]))
	
.LABEL $label$3
	$0 = *($3 + [64])
	*($3 + [64]) = [0]
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $11($0)
	
.LABEL $label$1
	CALL $54(($3 + [40]))
	$global$0 = ($3 + [96])
}

void .FUNC $309 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$7 = *($4 + [4])
	$6 = ($1 + [8])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$1 }
	CALL $928($6, *($7), *($7 + [4]))
	$7 = *(($4 + [4]))
	
.LABEL $label$1
	$4 = *($7)
	$7 = *($7 + [4])
	*($1 + [20]) = ((uint_32)CALL $96() % (uint_32)int_32(($7 - $4) >> [3]))
	$4 = CALL $477($1)
	if ( ($4 <= [513]) ){ goto $label$3 }
	$7 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$2
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($7 + $4)
	CALL $478($3, $1)
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($5 + [8]), (int_64)-2507753063930920960, *(*($0 + [8])), $8, $7, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL $4($7)
	
.LABEL $label$4
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

int_32 .FUNC $410 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = $1
	*(($0 + [24])) = (int_64)0
	CALL $412($2, $0)
	return $0
}

void .FUNC $926 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$3 = [16]
	$4 = ($0 + [16])
	CALL $924($0, ($0 + [8]), $4, $2)
	$5 = ($0 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$1 }
	$7 = *($4)
	$6 = *($5)
	if ( ((uint_64)$6 >= (uint_64)$7) ){ goto $label$3 }
	$4 = $3
	
.LOOP $label$6:
	*((($2 = ($0 + $4)) + [8])) = $7
	if ( ($4 == 0) ){ goto $label$5 }
	$4 = ($4 + [-8])
	$7 = *(($2 + [-8]))
	if ( (uint_64)($6 <= $7) ){ goto $label$6 }
	$4 = (($0 + $4) + [8])
	goto $label$4 
	
.LABEL $label$5
	$4 = $0
	
.LABEL $label$4
	*($4) = $6
	
.LABEL $label$3
	$3 = ($3 + [8])
	$4 = $5
	$5 = ($5 + [8])
	goto $label$2 
	
.LABEL $label$1
}

void .FUNC $435 (int_32 $0)
{
	CALL $11($0)
}

void .FUNC $434 (int_32 $0)
{
}

void .FUNC $437 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $438($0, *($1), *($2))
}

void .FUNC $436 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $437(($0 + [4]), $1, $2)
}

void .FUNC $431 (int_32 $0)
{
	CALL $11($0)
}

int_32 .FUNC $430 (int_32 $0)
{
	return $0
}

void .FUNC $433 (int_32 $0, int_32 $1)
{
	*($1) = [12240]
	*(($1 + [12])) = *(($0 + [12]))
	*($1 + [4 align=4]) = *($0 + [4 align=4])
}

int_32 .FUNC $432 (int_32 $0)
{
	int_32 $1
	*(($1 = CALL $9([16]))) = [12240]
	*($1 + [4 align=4]) = *($0 + [4 align=4])
	*(($1 + [12])) = *(($0 + [12]))
	return $1
}

void .FUNC $439 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	$1 = *($1 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $441($0, $1, $2, $3)
}

void .FUNC $438 (int_32 $0, int_64 $1, float_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($3 + [144]) = $2
	*($3 + [152]) = $1
	$4 = *($0)
	$5 = ($4 + [528])
	CALL $100(($3 + [136]), $5, $1)
	$6 = *($3 + [140])
	if ( ($6 == 0) ){ goto $label$1 }
	$6 = CALL $207(($3 + [40]), $6)
	if ( (*($6 + [60]) == 0) ){ goto $label$2 }
	*($3 + [32]) = *($3 + [136])
	$7 = *($0 + [4])
	*($3 + [8]) = *($3 + [32])
	*($3 + [20]) = $7
	*($3 + [16]) = ($3 + [144])
	CALL $439($5, ($3 + [8]), (int_64)0, ($3 + [16]))
	$2 = CALL $39(((float_64)*($3 + [144]) * (float_64)(float_64)1e4))
	if ( ((float_64)(float_64)|$2| < (float_64)(float_64)9223372036854775808) ){ goto $label$4 }
	$1 = (int_64)-9223372036854775808
	goto $label$3 
	
.LABEL $label$4
	$1 = (Rounds 0)($2)
	
.LABEL $label$3
	$5 = CALL $132(($3 + [16]), $1, (int_64)92656475524612)
	CALL $440($4, ($3 + [152]), $5)
	CALL $52(*($0 + [8]), $5)
	
.LABEL $label$2
	CALL $26(($6 + [48]))
	
.LABEL $label$1
	$global$0 = ($3 + [160])
}

void .FUNC $282 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3)) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $844($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4149656565420222976, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $844($0, $1, CALL $845($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $283 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	$1 = *($1 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $846($0, $1, $2, $3)
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $757($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $128 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3)) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $193($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6716332327921008640, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $193($0, $1, CALL $194($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $286 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3)) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $878($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-5004454808576147456, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $878($0, $1, CALL $879($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $287 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	$1 = *($1 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $880($0, $1, $2, $3)
}

void .FUNC $284 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($1)), [12656])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL $9([40])
	CALL $847($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $848(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $11($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $285 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [48])
	$global$0 = $5
	if ( (CALL $265($0) == 0) ){ goto $label$1 }
	*($5 + [40]) = [0]
	*($5 + [32]) = (int_64)0
	CALL $849(($5 + [16]), $0)
	$6 = *($5 + [20])
	$7 = *($5 + [16])
	
.LOOP $label$3:
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL $282($5, $4, *($7))
	$8 = *($5 + [4])
	if ( ($8 == 0) ){ goto $label$4 }
	$9 = ($8 + [8])
	$8 = *($5 + [36])
	if ( ((int_32)$8 == (int_32)*((($5 + [32]) + [8]))) ){ goto $label$5 }
	*($8) = *($9)
	*($5 + [36]) = ($8 + [8])
	goto $label$4 
	
.LABEL $label$5
	CALL $850(($5 + [32]), $9)
	
.LABEL $label$4
	$7 = ($7 + [96])
	goto $label$3 
	
.LABEL $label$2
	$10 = CALL $132($5, CALL $69($5, ($5 + [32])), *($2 + [8]))
	$7 = ($7 & [1])
	$7 = *($0 + [28])
	$8 = ($6 & [1])
	$6 = *($3)
	$4 = uint_32($6 >> [1])
	$2 = *($3 + [4])
	$9 = ( $2 ? $4 : $8 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [32])) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$10 }
	$7 = ( *(($0 + [36])) ? (($0 + [28]) + [1]) : $7 )
	if ( $8 ){ goto $label$11 }
	$8 = ([0] - $4)
	$9 = ($3 + [1])
	
.LOOP $label$12:
	if ( ($8 == 0) ){ goto $label$9 }
	if ( ((int_32)*($9) != (int_32)*($7)) ){ goto $label$10 }
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	$9 = ($9 + [1])
	goto $label$12 
	
.LABEL $label$11
	if ( (CALL $277(*($3 + [8]), $7, $9) == 0) ){ goto $label$9 }
	$6 = *($3)
	$4 = uint_32($6 >> [1])
	$2 = *(($3 + [4]))
	
.LABEL $label$10
	$7 = ($7 & [1])
	$7 = *($0 + [40])
	$8 = ($6 & [1])
	$9 = ( $2 ? $4 : $8 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [44])) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$6 }
	$7 = ( *(($0 + [48])) ? (($0 + [40]) + [1]) : $7 )
	if ( $8 ){ goto $label$8 }
	$8 = ($3 + [1])
	
.LOOP $label$13:
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ((int_32)*($8) != (int_32)*($7)) ){ goto $label$6 }
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	$4 = ($4 + [-1])
	goto $label$13 
	
.LABEL $label$9
	CALL $292($0, $1, $10, ($0 + [608]))
	goto $label$6 
	
.LABEL $label$8
	if ( CALL $277(*($3 + [8]), $7, $9) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $291($0, $1, $10, ($0 + [568]))
	
.LABEL $label$6
	CALL $851(($5 + [16]))
	CALL $852(($5 + [32]))
	
.LABEL $label$1
	$global$0 = ($5 + [48])
}

void .FUNC $534 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $535 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $519($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($1)), [12656])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL $9([56])
	CALL $580($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)7235159537265672192
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $567(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $11($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $120 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	$1 = *($1 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $579($0, $1, $2, $3)
}

void .FUNC $530 (int_32 $0, int_32 $1)
{
	CALL $531($1, *($0))
	CALL $532($1, *($0 + [4]))
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $185(($2 + [8]), $1, (int_64)6761208822947119104)
	CALL $44(((int_32)*($2 + [12]) != (int_32)[0]), [12631])
	$1 = *($2 + [12])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $532 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

int_32 .FUNC $533 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $722 (int_32 $0, int_32 $1)
{
	CALL $320(*($0 + [4]), $1)
	*($1 + [20]) = *(*($0 + [8]))
}

void .FUNC $888 (int_32 $0, int_32 $1)
{
	CALL $889($1, *($0))
	CALL $890($1, *($0 + [4]))
}

void .FUNC $889 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $880 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$3 = *($3)
	*($1 + [8]) = *($3)
	*(($1 + [16])) = *(($3 + [8]))
	$5 = *($1)
	CALL $44([1], [12400])
	*($4 + [40]) = ($4 + [24])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	CALL $894(($4 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $682 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [20])
	CALL $683($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $882 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $891(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $892($0, $9)
	CALL $893($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $883 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $884($2, $0)
	return $0
}

void .FUNC $884 (int_32 $0, int_32 $1)
{
	CALL $885(*($0 + [4]), $1)
	*($1 + [28]) = *(*($0 + [8]))
}

int_32 .FUNC $885 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $886($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $886 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $887($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $683 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [8])
	CALL $684($1, *($0 + [4]))
	*(($1 = *($1))) = (*($1) + [4])
}

int_32 .FUNC $479 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $481($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $529 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $530(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $478 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $480($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $528 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $529($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $876 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	$4 = (*($1 + [4]) - $3)
	*($1 + [4]) = $4
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $2, $3)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$3 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $3
	$3 = ($0 + [4])
	$2 = *($3)
	*($3) = *($1 + [8])
	*($1 + [8]) = $2
	$3 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $3
	*($1) = *($4)
}

void .FUNC $758 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [24])
	CALL $759($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $295 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	$1 = *($1 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $904($0, $1, $2, $3)
}

void .FUNC $573 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $294 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($1)), [12656])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL $9([32])
	CALL $902($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $601(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $11($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $750 (int_32 $0, int_32 $1)
{
	CALL $751($1, *($0))
	CALL $752($1, *($0 + [4]))
	CALL $753($1, *($0 + [8]))
}

void .FUNC $751 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $752 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

void .FUNC $753 (int_32 $0, int_32 $1)
{
	CALL $321(*($0), $1)
}

int_32 .FUNC $754 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $297 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [8]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [648])
	CALL $204(($3 + [64]), $4, (uint_64)$1 >> (uint_64)(int_64)8))
	$5 = *($3 + [68])
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	CALL $25(($3 + [16]), [10790], CALL $2([10790]))
	CALL $142(($5 == 0), ($3 + [16]), ($3 + [8]))
	CALL $26(($3 + [16]))
	$6 = *($0)
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0 + [648])), [12656])
	*(($5 = CALL $9([32])) + [16]) = $4
	*($5 + [8]) = $2
	*($5) = *($3 + [8])
	*($3 + [72]) = (($3 + [16]) + [16])
	*($3 + [68]) = ($3 + [16])
	*($3 + [64]) = ($3 + [16])
	CALL $298(($3 + [64]), $5)
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*(($0 + [656])), (int_64)5093418677392769024, $6, $1), ($3 + [16]), [16]
	*($5 + [20]) = $7)
	$4 = ($0 + [664])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$1 }
	*($4) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$1
	*($3 + [64]) = $5
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($3 + [16]) = $1)
	*($3 + [60]) = $7
	$8 = ($0 + [676])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [680]))) ){ goto $label$3 }
	*($4 + [8]) = $1
	*($4 + [16]) = $7
	*($3 + [64]) = [0]
	*($4) = $5
	*($8) = ($4 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $299(($0 + [672]), ($3 + [64]), ($3 + [16]), ($3 + [60]))
	
.LABEL $label$2
	$5 = *($3 + [64])
	*($3 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL $11($5)
	
.LABEL $label$4
	$4 = ($0 + [288])
	CALL $74(($3 + [16]), $4, (uint_64)*($3 + [8]) >> (uint_64)(int_64)8))
	CALL $44((*($3 + [20]) == 0), [10827])
	$2 = *($0)
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0 + [288])), [12656])
	*(($5 = CALL $9([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $4
	CALL $132(($3 + [64]), (int_64)0, *($3 + [8]))
	$4 = (($3 + [64]) + [8])
	*($5 + [8]) = *($4)
	*($5) = *($3 + [64])
	CALL $132(($3 + [64]), (int_64)0, *($3 + [8]))
	*($5 + [24]) = *($4)
	*($5 + [16]) = *($3 + [64])
	$8 = (($3 + [16]) + [32])
	*($3 + [72]) = $8
	*($3 + [68]) = ($3 + [16])
	*($3 + [64]) = ($3 + [16])
	CALL $76(($3 + [64]), $5)
	$1 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*(($0 + [296])), (int_64)6526968495861661696, $2, $1), ($3 + [16]), [32]
	*($5 + [36]) = $7)
	$4 = ($0 + [304])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$5 }
	*($4) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$5
	*($3 + [64]) = $5
	$1 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $1)
	*($3 + [60]) = $7
	$9 = ($0 + [316])
	$4 = *($9)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [320]))) ){ goto $label$7 }
	*($4 + [8]) = $1
	*($4 + [16]) = $7
	*($3 + [64]) = [0]
	*($4) = $5
	*($9) = ($4 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $300(($0 + [312]), ($3 + [64]), ($3 + [16]), ($3 + [60]))
	
.LABEL $label$6
	$5 = *($3 + [64])
	*($3 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $11($5)
	
.LABEL $label$8
	$2 = *($0)
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0 + [368])), [12656])
	*(($5 = CALL $9([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = ($0 + [368])
	CALL $132(($3 + [64]), (int_64)0, *($3 + [8]))
	$4 = (($3 + [64]) + [8])
	*($5 + [8]) = *($4)
	*($5) = *($3 + [64])
	CALL $132(($3 + [64]), (int_64)0, *($3 + [8]))
	*($5 + [24]) = *($4)
	*($5 + [16]) = *($3 + [64])
	*($3 + [72]) = $8
	*($3 + [68]) = ($3 + [16])
	*($3 + [64]) = ($3 + [16])
	CALL $212(($3 + [64]), $5)
	$1 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*(($0 + [376])), (int_64)-7128455377816911872, $2, $1), ($3 + [16]), [32]
	*($5 + [36]) = $7)
	$4 = ($0 + [384])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$9 }
	*($4) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$9
	*($3 + [64]) = $5
	$1 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $1)
	*($3 + [60]) = $7
	$8 = ($0 + [396])
	$4 = *($8)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [400]))) ){ goto $label$11 }
	*($4 + [8]) = $1
	*($4 + [16]) = $7
	*($3 + [64]) = [0]
	*($4) = $5
	*($8) = ($4 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $301(($0 + [392]), ($3 + [64]), ($3 + [16]), ($3 + [60]))
	
.LABEL $label$10
	$0 = *($3 + [64])
	*($3 + [64]) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL $11($0)
	
.LABEL $label$12
	$global$0 = ($3 + [80])
}

int_32 .FUNC $756 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $196($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $757 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $758($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $9(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $11($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $9($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $11($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $296 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($1)), [12656])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL $9([32])
	CALL $905($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $592(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $11($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $23 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $18([2], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($2 << [1])
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	*(($3 + $2)) = [0]
	return 
	
.LABEL $label$3
	$4 = (($2 + [16]) & [-16])
	$3 = CALL $9($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $2
	
.LABEL $label$2
	CALL memcpy($3, $1, $2)
	*(($3 + $2)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $9($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $28($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $26 (int_32 $0)
{
	if ( ((*($0) & [1]) == 0) ){ goto $label$1 }
	CALL $11(*($0 + [8]))
	
.LABEL $label$1
	return $0
}

void .FUNC $471 (int_32 $0, int_32 $1)
{
	*($1) = *(*($0))
	CALL $52(($1 + [8]), *($0 + [4]))
}

int_32 .FUNC $232 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([48])
	$2 = CALL $823($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1 + [24])
	*($3 + [8]) = $8
	$9 = *($1 + [36])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $220($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $293 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	$1 = *($1 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $901($0, $1, $2, $3)
}

void .FUNC $470 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$5 = *($1)
	CALL $471($3, $1)
	CALL $44(((int_64)$5 == (int_64)*($1)), [12400])
	*($4 + [40]) = ($4 + [24])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	CALL $260(($4 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $292 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL $44(((int_64)*($2) > (int_64)-1), [13018])
	CALL $44(CALL $276($2), [10675])
	CALL $43(($4 + [40]), $3, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8))
	if ( (*($4 + [44]) == 0) ){ goto $label$2 }
	*($4 + [32]) = *($4 + [40])
	$5 = *($1)
	*($4 + [16]) = $2
	*($4 + [8]) = *($4 + [32])
	CALL $295($3, ($4 + [8]), $5, ($4 + [16]))
	goto $label$1 
	
.LABEL $label$2
	$5 = *($1)
	*($4 + [24]) = $2
	CALL $296(($4 + [16]), $3, $5, ($4 + [24]))
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

int_32 .FUNC $727 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $728($2, $0)
	return $0
}

void .FUNC $929 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0 + [4]) = $1
	CALL $11($1)
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LABEL $label$1
}

int_32 .FUNC $881 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $900($2, $0)
	return $0
}

int_32 .FUNC $620 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $378 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [820]) = $2
	*($3 + [816]) = $2
	*($3 + [824]) = ($2 + $4)
	*($3 + [808]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [808]))
	*($3 + [800]) = (int_64)0
	CALL $325(($3 + [816]), ($3 + [800]))
	$2 = *($3 + [824])
	*((($3 + [16]) + [8])) = $2
	*(($3 + [8])) = $2
	$5 = *($3 + [816])
	*($3) = $5
	*($3 + [16]) = $5
	$2 = CALL $322(($3 + [32]), $0, $1, $3)
	CALL $314($2, *($3 + [808]), *($3 + [800]))
	CALL $323($2)
	$global$0 = ($3 + [832])
}

void .FUNC $379 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [912])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [900]) = $4
	*($3 + [896]) = $4
	*($3 + [904]) = ($4 + $5)
	*($3 + [888]) = (int_64)0
	CALL $319(($3 + [896]), ($3 + [888]))
	*($3 + [880]) = (int_64)0
	CALL $319(($3 + [896]), ($3 + [880]))
	*($3 + [872]) = (int_64)0
	*($3 + [864]) = (int_64)0
	CALL $320(($3 + [896]), ($3 + [864]))
	*(($3 + [856])) = [0]
	*($3 + [848]) = (int_64)0
	$4 = [0]
	
.LOOP $label$5:
	if ( ((int_32)$4 == (int_32)[12]) ){ goto $label$4 }
	*((($3 + [848]) + $4)) = [0]
	$4 = ($4 + [4])
	goto $label$5 
	
.LABEL $label$4
	CALL $351(($3 + [896]), ($3 + [848]))
	$4 = *((($3 + [896]) + [8]))
	*((($3 + [64]) + [8])) = $4
	*((($3 + [16]) + [8])) = $4
	$6 = *($3 + [896])
	*($3 + [16]) = $6
	*($3 + [64]) = $6
	$4 = CALL $322(($3 + [80]), $0, $1, ($3 + [16]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [864]) + [8]))
	*($3 + [48]) = *($3 + [864])
	$0 = *($3 + [880])
	$1 = *($3 + [888])
	$5 = CALL $24(($3 + [32]), ($3 + [848]))
	*(($3 + [8])) = *($2)
	*($3) = *($3 + [48])
	CALL $315($4, $1, $0, $3, $5)
	CALL $26($5)
	CALL $323($4)
	CALL $26(($3 + [848]))
	$global$0 = ($3 + [912])
}

int_32 .FUNC $548 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $257($0)
	*($0 + [92]) = $1
	CALL $549($2, $0)
	return $0
}

int_32 .FUNC $372 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = [0]
	CALL $358($0, ($2 + [8]))
	CALL $374($1, *($2 + [8]))
	$3 = *($1 + [4])
	$1 = *($1)
	
.LOOP $label$2:
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	CALL $319($0, $1)
	$1 = ($1 + [8])
	goto $label$2 
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $373 (int_32 $0, int_32 $1)
{
	int_32 $2
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	if ( ($2 == 0) ){ goto $label$1 }
	$2 = int_32($2 >> [3])
	CALL $375($0, $2)
	CALL $376($0, *($1), *(($1 + [4])), $2)
	
.LABEL $label$1
	return $0
}

void .FUNC $370 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [820]) = $2
	*($3 + [816]) = $2
	*($3 + [824]) = ($2 + $4)
	*($3 + [808]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [808]))
	*($3 + [800]) = (int_64)0
	CALL $325(($3 + [816]), ($3 + [800]))
	$2 = *($3 + [824])
	*((($3 + [16]) + [8])) = $2
	*(($3 + [8])) = $2
	$5 = *($3 + [816])
	*($3) = $5
	*($3 + [16]) = $5
	$2 = CALL $322(($3 + [32]), $0, $1, $3)
	CALL $304($2, *($3 + [808]), *($3 + [800]))
	CALL $323($2)
	$global$0 = ($3 + [832])
}

void .FUNC $371 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [864])
	$3 = $2
	$global$0 = $2
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [512]) ){ goto $label$3 }
	$4 = CALL $3($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*($3 + [852]) = $4
	*($3 + [848]) = $4
	*($3 + [856]) = ($4 + $5)
	*($3 + [840]) = (int_64)0
	CALL $319(($3 + [848]), ($3 + [840]))
	*($3 + [832]) = [0]
	*($3 + [824]) = (int_64)0
	CALL $372(($3 + [848]), ($3 + [824]))
	$4 = *($3 + [856])
	*((($3 + [40]) + [8])) = $4
	*((($3 + [8]) + [8])) = $4
	$6 = *($3 + [848])
	*($3 + [8]) = $6
	*($3 + [40]) = $6
	$5 = CALL $373(($3 + [24]), ($3 + [824]))
	$4 = CALL $322(($3 + [56]), $0, $1, ($3 + [8]))
	CALL $306($4, *($3 + [840]), $5)
	CALL $250($5)
	CALL $323($4)
	CALL $250(($3 + [824]))
	$global$0 = ($3 + [864])
}

void .FUNC $376 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	$2 = ($2 - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$1 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $1, $2)
	*($0) = (*($0) + $2)
	
.LABEL $label$1
}

void .FUNC $377 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [832])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [820]) = $2
	*($3 + [816]) = $2
	*($3 + [824]) = ($2 + $4)
	*($3 + [808]) = (int_64)0
	CALL $319(($3 + [816]), ($3 + [808]))
	*($3 + [800]) = (int_64)0
	CALL $325(($3 + [816]), ($3 + [800]))
	$2 = *($3 + [824])
	*((($3 + [16]) + [8])) = $2
	*(($3 + [8])) = $2
	$5 = *($3 + [816])
	*($3) = $5
	*($3 + [16]) = $5
	$2 = CALL $322(($3 + [32]), $0, $1, $3)
	CALL $313($2, *($3 + [808]), *($3 + [800]))
	CALL $323($2)
	$global$0 = ($3 + [832])
}

void .FUNC $374 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = int_32((*($0 + [4]) - $2) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$1 }
	CALL $930($0, ($1 - $3))
	return 
	
.LABEL $label$1
	if ( ((uint_32)$3 <= (uint_32)$1) ){ goto $label$2 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	
.LABEL $label$2
}

void .FUNC $375 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( ((uint_32)$1 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = ($1 << [3])
	$1 = CALL $9($2)
	*($0) = $1
	*($0 + [4]) = $1
	*($0 + [8]) = ($1 + $2)
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $839 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

void .FUNC $838 (int_32 $0, int_32 $1)
{
	CALL $468(*($0), $1)
}

void .FUNC $932 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = (*($0 + [4]) - $2)
	$4 = (*($1 + [4]) - $3)
	*($1 + [4]) = $4
	if ( ((int_32)$3 <= (int_32)[0]) ){ goto $label$1 }
	CALL memcpy($4, $2, $3)
	$4 = *(($1 + [4]))
	
.LABEL $label$1
	$3 = *($0)
	*($0) = $4
	*(($4 = ($1 + [4]))) = $3
	$3 = ($0 + [4])
	$2 = *($3)
	*($3) = *($1 + [8])
	*($1 + [8]) = $2
	$3 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $3
	*($1) = *($4)
}

int_32 .FUNC $933 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [8])
	$2 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$2:
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$1 = ($1 + [-8])
	*($3) = $1
	goto $label$2 
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $11($1)
	
.LABEL $label$3
	return $0
}

void .FUNC $831 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $830 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

void .FUNC $833 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $832 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $835 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $836($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $834 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $424($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $837 (int_32 $0, int_32 $1)
{
	CALL $838($1, *($0))
	CALL $839($1, *($0 + [4]))
	CALL $840($1, *($0 + [8]))
}

void .FUNC $836 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [24])
	CALL $837($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $867 (int_32 $0, int_32 $1)
{
	CALL $868($1, *($0))
	CALL $869($1, *($0 + [4]))
}

void .FUNC $626 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

void .FUNC $290 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL $44(((int_32)CALL $265($0) ^ (int_32)[1]), [10602])
	CALL $44(CALL $276($1), [10675])
	CALL $44(((int_64)*($1) > (int_64)-1), [10698])
	CALL $153(($0 + [648]), (uint_64)*($1 + [8]) >> (uint_64)(int_64)8), [10751])
	$9 = ($9 & [1])
	$9 = *($0 + [40])
	$7 = ($5 & [1])
	$5 = *($2)
	$6 = uint_32($5 >> [1])
	$4 = *($2 + [4])
	$8 = ( $4 ? $6 : $7 )
	if ( ((int_32)$8 != (int_32)( *(($0 + [44])) ? uint_32($9 >> [1]) : $9 )) ){ goto $label$6 }
	$9 = ( *(($0 + [48])) ? (($0 + [40]) + [1]) : $9 )
	if ( $7 ){ goto $label$7 }
	$7 = ([0] - $6)
	$8 = ($2 + [1])
	
.LOOP $label$8:
	if ( ($7 == 0) ){ goto $label$5 }
	if ( ((int_32)*($8) != (int_32)*($9)) ){ goto $label$6 }
	$7 = ($7 + [1])
	$9 = ($9 + [1])
	$8 = ($8 + [1])
	goto $label$8 
	
.LABEL $label$7
	if ( (CALL $277(*($2 + [8]), $9, $8) == 0) ){ goto $label$5 }
	$5 = *($2)
	$6 = uint_32($5 >> [1])
	$4 = *(($2 + [4]))
	
.LABEL $label$6
	$9 = ($9 & [1])
	$9 = *($0 + [28])
	$7 = ($5 & [1])
	$8 = ( $4 ? $6 : $7 )
	if ( ((int_32)$8 != (int_32)( *(($0 + [32])) ? uint_32($9 >> [1]) : $9 )) ){ goto $label$3 }
	$9 = ( *(($0 + [36])) ? (($0 + [28]) + [1]) : $9 )
	if ( $7 ){ goto $label$4 }
	$7 = ($2 + [1])
	
.LOOP $label$9:
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((int_32)*($7) != (int_32)*($9)) ){ goto $label$3 }
	$9 = ($9 + [1])
	$7 = ($7 + [1])
	$6 = ($6 + [-1])
	goto $label$9 
	
.LABEL $label$5
	*($3 + [8]) = *($0)
	CALL $291($0, ($3 + [8]), $1, ($0 + [568]))
	goto $label$1 
	
.LABEL $label$4
	if ( (CALL $277(*($2 + [8]), $9, $8) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [10770])
	goto $label$1 
	
.LABEL $label$2
	*($3 + [8]) = *($0)
	CALL $292($0, ($3 + [8]), $1, ($0 + [608]))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $627 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0) = (int_64)0
	*($0 + [24]) = $1
	*(($1 = ($0 + [12]))) = (int_64)0
	*($0 + [8]) = $1
	CALL $628($2, $0)
	return $0
}

void .FUNC $628 (int_32 $0, int_32 $1)
{
	CALL $629(*($0 + [4]), $1)
	*($1 + [28]) = *(*($0 + [8]))
}

void .FUNC $540 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [20])
	CALL $541($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $543 (int_32 $0, int_32 $1)
{
	CALL $372(*($0), $1)
}

void .FUNC $570 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $571($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $571 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	*($2 + [16]) = ($0 + [16])
	*($2 + [20]) = ($0 + [24])
	*($2 + [24]) = ($0 + [32])
	CALL $572(($2 + [8]), $1)
	$global$0 = ($2 + [32])
}

void .FUNC $572 (int_32 $0, int_32 $1)
{
	CALL $573($1, *($0))
	CALL $574($1, *($0 + [4]))
	CALL $573($1, *($0 + [8]))
	CALL $573($1, *($0 + [12]))
	CALL $575($1, *($0 + [16]))
}

void .FUNC $542 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $574 (int_32 $0, int_32 $1)
{
	CALL $560(*($0), $1)
}

void .FUNC $575 (int_32 $0, int_32 $1)
{
	CALL $352(*($0), $1)
}

int_32 .FUNC $576 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $577 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $578 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $518($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $545 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $473 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $474(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $472 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $473($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $475 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $474 (int_32 $0, int_32 $1)
{
	CALL $475($1, *($0))
	CALL $476($1, *($0 + [4]))
}

int_32 .FUNC $477 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = [0]
	CALL $479(($1 + [8]), $0)
	$0 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $476 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

void .FUNC $231 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [32]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $679 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $681($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $551 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $552($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $677 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = [0]
	CALL $679(($1 + [8]), $0)
	$0 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $676 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $510($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $675 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $674 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $673 (int_32 $0, int_32 $1)
{
	CALL $321(*($0), $1)
}

void .FUNC $672 (int_32 $0, int_32 $1)
{
	CALL $636(*($0), $1)
}

void .FUNC $671 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $670 (int_32 $0, int_32 $1)
{
	CALL $671($1, *($0))
	CALL $672($1, *($0 + [4]))
	CALL $673($1, *($0 + [8]))
}

void .FUNC $848 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $861(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $862($0, $9)
	CALL $863($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $849 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2 + [8]) = ($1 + [528])
	CALL $505($2, ($2 + [8]))
	$4 = ($0 + [8])
	$1 = ($0 + [4])
	
.LOOP $label$2:
	if ( ((uint_32)$3 > (uint_32)[29]) ){ goto $label$1 }
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)*($4)) ){ goto $label$4 }
	CALL $207($6, $5)
	*($1) = (*($1) + [96])
	goto $label$3 
	
.LABEL $label$4
	CALL $871($0, $5)
	
.LABEL $label$3
	$3 = ($3 + [1])
	CALL $506($2)
	goto $label$2 
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $874 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	*($2) = ($3 + [-96])
	CALL $26(($3 + [-48]))
	goto $label$2 
	
.LABEL $label$1
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $11($3)
	
.LABEL $label$3
	return $0
}

void .FUNC $844 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [24]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $845 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([40])
	$2 = CALL $853($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1)
	*($3 + [8]) = $8
	$9 = *($1 + [28])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $848($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $846 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$3 = *($3)
	*($1 + [8]) = *($3)
	*(($1 + [16])) = *(($3 + [8]))
	$5 = *($1)
	CALL $44([1], [12400])
	*($4 + [40]) = ($4 + [24])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	CALL $864(($4 + [32]), $1)
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

int_32 .FUNC $847 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $870($2, $0)
	return $0
}

void .FUNC $840 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $841 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL $44(((int_32)*($1 + [16]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [8])) = *(($3 + [8]))
	CALL $44([1], [12400])
	*($4 + [24]) = ($4 + [16])
	*($4 + [20]) = $4
	*($4 + [16]) = $4
	CALL $53(($4 + [16]), $1)
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-7128454209411632640) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-7128454209411632639
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $842 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $843($2, $0)
	return $0
}

void .FUNC $843 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($1 + [8])) = *(($4 + [8]))
	*($2 + [24]) = ($2 + [16])
	*($2 + [20]) = $2
	*($2 + [16]) = $2
	CALL $53(($2 + [16]), $1)
	*($1 + [20]) = CALL db_store_i64(*($3 + [8]), (int_64)-7128454209411632640, *(*($0 + [8])), (int_64)-7128454209411632640, $2, [16])
	if ( ((uint_64)*($3 + [16]) > (uint_64)(int_64)-7128454209411632640) ){ goto $label$1 }
	*(($3 + [16])) = (int_64)-7128454209411632639
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $273 (int_32 $0, int_64 $1)
{
	CALL require_auth((int_64)-4301715438727466848)
	CALL $44(((int_32)CALL $265($0) ^ (int_32)[1]), [10602])
	CALL $93($0, CALL $206(($0 + [528]), $1, [10659]))
}

void .FUNC $272 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	float_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	CALL $44(((int_32)*(($1 + [92])) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	*($1 + [89]) = [1]
	$4 = *($1 + [64])
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$5 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($4)
	
.LABEL $label$1
	*($3 + [24]) = ((int_64)$5 ^ (int_64)-1)
	$5 = *($1)
	CALL $44([1], [12400])
	$6 = CALL $444($1)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$2 = CALL $3($6)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $6)
	CALL $445(($3 + [8]), $1)
	CALL db_update_i64(*($1 + [96]), (int_64)0, $2, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL $4($2)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$4 = *(($1 + [64]))
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$7 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$7 = (Rounds 0)($4)
	
.LABEL $label$7
	*($3 + [40]) = ((int_64)$7 ^ (int_64)-1)
	if ( (CALL $17(($3 + [24]), ($3 + [40]), [8]) == 0) ){ goto $label$9 }
	$2 = *($1 + [100])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$10 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7128446144174096384, ($3 + [32]), $5)
	*(($1 + [100])) = $2
	
.LABEL $label$10
	CALL db_idx64_update($2, (int_64)0, ($3 + [40]))
	
.LABEL $label$9
	$global$0 = ($3 + [48])
}

void .FUNC $271 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [128])
	$global$0 = $2
	*($2 + [120]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [528])
	CALL $100(($2 + [112]), $3, $1)
	$0 = *($2 + [116])
	*((($2 + [16]) + [8])) = [0]
	*($2 + [16]) = (int_64)0
	CALL $25(($2 + [16]), [10424], CALL $2([10424]))
	CALL $51(((int_32)$0 != (int_32)[0]), ($2 + [16]), ($2 + [120]))
	CALL $26(($2 + [16]))
	$0 = CALL $207(($2 + [16]), *($2 + [116]))
	$4 = *($0 + [88])
	*(($5 = ($2 + [8]))) = [0]
	*($2) = (int_64)0
	CALL $25($2, [10561], CALL $2([10561]))
	CALL $51($4, $2, $0)
	CALL $26($2)
	$4 = *($0 + [89])
	*($5) = [0]
	*($2) = (int_64)0
	CALL $25($2, [10512], CALL $2([10512]))
	CALL $51(($4 == 0), $2, $0)
	CALL $26($2)
	$4 = *($2 + [116])
	CALL $44(((int_32)$4 != (int_32)[0]), [12268])
	CALL $272($3, $4)
	CALL $26(($0 + [48]))
	$global$0 = ($2 + [128])
}

void .FUNC $270 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	float_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	CALL $44(((int_32)*(($1 + [92])) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	*($1 + [88]) = [1]
	$4 = *($1 + [64])
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$5 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($4)
	
.LABEL $label$1
	*($3 + [24]) = ((int_64)$5 ^ (int_64)-1)
	$5 = *($1)
	CALL $44([1], [12400])
	$6 = CALL $444($1)
	if ( ($6 <= [513]) ){ goto $label$4 }
	$2 = CALL $3($6)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $6)
	CALL $445(($3 + [8]), $1)
	CALL db_update_i64(*($1 + [96]), (int_64)0, $2, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL $4($2)
	
.LABEL $label$5
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$4 = *(($1 + [64]))
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$8 }
	$7 = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$7 = (Rounds 0)($4)
	
.LABEL $label$7
	*($3 + [40]) = ((int_64)$7 ^ (int_64)-1)
	if ( (CALL $17(($3 + [24]), ($3 + [40]), [8]) == 0) ){ goto $label$9 }
	$2 = *($1 + [100])
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$10 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-7128446144174096384, ($3 + [32]), $5)
	*(($1 + [100])) = $2
	
.LABEL $label$10
	CALL db_idx64_update($2, (int_64)0, ($3 + [40]))
	
.LABEL $label$9
	$global$0 = ($3 + [48])
}

int_32 .FUNC $277 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ($2 == 0) ){ goto $label$1 }
	return CALL $17($0, $1, $2)
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $276 (int_32 $0)
{
	int_32 $1
	$1 = [0]
	if ( ((uint_64)((int_64)*($0) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = CALL $186(($0 + [8]))
	
.LABEL $label$1
	return $1
}

void .FUNC $275 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $1
	CALL require_auth($1)
	CALL $44(CALL $276($2), [10675])
	CALL $44(((int_64)*($2) > (int_64)-1), [10698])
	CALL $206(($0 + [528]), $1, [10726])
	CALL $153(($0 + [648]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [10751])
	$10 = ($10 & [1])
	$10 = *($0 + [40])
	$8 = ($6 & [1])
	$6 = *($3)
	$7 = uint_32($6 >> [1])
	$5 = *($3 + [4])
	$9 = ( $5 ? $7 : $8 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [44])) ? uint_32($10 >> [1]) : $10 )) ){ goto $label$6 }
	$10 = ( *(($0 + [48])) ? (($0 + [40]) + [1]) : $10 )
	if ( $8 ){ goto $label$7 }
	$8 = ([0] - $7)
	$9 = ($3 + [1])
	
.LOOP $label$8:
	if ( ($8 == 0) ){ goto $label$5 }
	if ( ((int_32)*($9) != (int_32)*($10)) ){ goto $label$6 }
	$8 = ($8 + [1])
	$10 = ($10 + [1])
	$9 = ($9 + [1])
	goto $label$8 
	
.LABEL $label$7
	if ( (CALL $277(*($3 + [8]), $10, $9) == 0) ){ goto $label$5 }
	$6 = *($3)
	$7 = uint_32($6 >> [1])
	$5 = *(($3 + [4]))
	
.LABEL $label$6
	$10 = ($10 & [1])
	$10 = *($0 + [28])
	$8 = ($6 & [1])
	$9 = ( $5 ? $7 : $8 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [32])) ? uint_32($10 >> [1]) : $10 )) ){ goto $label$3 }
	$10 = ( *(($0 + [36])) ? (($0 + [28]) + [1]) : $10 )
	if ( $8 ){ goto $label$4 }
	$8 = ($3 + [1])
	
.LOOP $label$9:
	if ( ($7 == 0) ){ goto $label$2 }
	if ( ((int_32)*($8) != (int_32)*($10)) ){ goto $label$3 }
	$10 = ($10 + [1])
	$8 = ($8 + [1])
	$7 = ($7 + [-1])
	goto $label$9 
	
.LABEL $label$5
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	*($4) = *($0)
	*($4 + [8]) = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	CALL $278($0, ($4 + [40]), $2, $3, $4)
	CALL $279(($4 + [24]))
	goto $label$1 
	
.LABEL $label$4
	if ( (CALL $277(*($3 + [8]), $10, $9) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [10770])
	goto $label$1 
	
.LABEL $label$2
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	*($4) = *($0)
	*($4 + [8]) = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	CALL $280($0, ($4 + [40]), $2, $3, $4)
	CALL $281(($4 + [24]))
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $274 (int_32 $0, int_64 $1)
{
	CALL require_auth((int_64)-4301715438727466848)
	CALL $44(((int_32)CALL $265($0) ^ (int_32)[1]), [10602])
	CALL $111($0, CALL $206(($0 + [528]), $1, [10659]))
}

int_32 .FUNC $279 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $508($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $278 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [48])
	$global$0 = $5
	CALL $282(($5 + [40]), $4, *($1))
	if ( (*($5 + [44]) == 0) ){ goto $label$2 }
	*($5 + [32]) = *($5 + [40])
	$6 = *($1)
	*($5 + [24]) = $2
	*($5 + [8]) = *($5 + [32])
	CALL $283($4, ($5 + [8]), $6, ($5 + [24]))
	goto $label$1 
	
.LABEL $label$2
	$6 = *($1)
	*($5 + [28]) = $2
	*($5 + [24]) = $1
	CALL $284(($5 + [16]), $4, $6, ($5 + [24]))
	
.LABEL $label$1
	CALL $285($0, $1, $2, $3, $4)
	$global$0 = ($5 + [48])
}

int_32 .FUNC $798 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $800($2, $0)
	return $0
}

void .FUNC $799 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $801(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $802($0, $9)
	CALL $803($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $794 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $795 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $521($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $796 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [16]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $797 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([32])
	$2 = CALL $798($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	*($3 + [8]) = (int_64)-7128454209411632640
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$7 = *($9)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-7128454209411632640
	*($7 + [16]) = $8
	*($3 + [24]) = [0]
	*($7) = $1
	*($9) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $799($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $790 (int_32 $0, int_32 $1)
{
	CALL $791($1, *($0))
	CALL $792($1, *($0 + [4]))
}

void .FUNC $791 (int_32 $0, int_32 $1)
{
	CALL $324(*($0), $1)
}

void .FUNC $792 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

int_32 .FUNC $793 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $775(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $776($0, $9)
	CALL $777($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $153 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $204(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	*($1) = CALL $37()
	$2 = *($0)
	*($1 + [8]) = *($2)
	*(($1 + [16])) = *(($2 + [8]))
	*($1 + [24]) = *(*($0 + [4]))
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $779($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $408 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [40]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $409 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([56])
	$2 = CALL $410($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $8)
	$9 = *($1 + [44])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $411($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

int_32 .FUNC $154 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	*($0 + [8]) = $3
	*($0) = $2
	CALL $166(($0 + [16]), [1], $1)
	CALL $167(($0 + [28]), $4)
	return $0
}

void .FUNC $155 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $168($1, $0)
	$0 = *($1)
	CALL send_inline($0, (*($1 + [4]) - $0))
	CALL $169($1)
	$global$0 = ($1 + [16])
}

void .FUNC $404 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $405 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $406($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $740($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $737(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $738($0, $9)
	CALL $739($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $400 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $402($2, $0)
	return $0
}

void .FUNC $401 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $403(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $404($0, $9)
	CALL $405($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $402 (int_32 $0, int_32 $1)
{
	CALL $320(*($0 + [4]), $1)
	*($1 + [20]) = *(*($0 + [8]))
}

int_32 .FUNC $403 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $343 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $524($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $878 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [24]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

void .FUNC $347 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [880])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [868]) = $2
	*($3 + [864]) = $2
	*($3 + [872]) = ($2 + $4)
	*($3 + [856]) = (int_64)0
	CALL $319(($3 + [864]), ($3 + [856]))
	*($3 + [848]) = (int_64)0
	*($3 + [840]) = (int_64)0
	CALL $320(($3 + [864]), ($3 + [840]))
	$2 = *($3 + [872])
	*((($3 + [56]) + [8])) = $2
	*((($3 + [24]) + [8])) = $2
	$5 = *($3 + [864])
	*($3 + [24]) = $5
	*($3 + [56]) = $5
	$2 = CALL $322(($3 + [72]), $0, $1, ($3 + [24]))
	$0 = *($3 + [848])
	*((($3 + [40]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [840])
	*($3 + [40]) = $0
	*($3 + [8]) = $0
	CALL $175($2, *($3 + [856]), ($3 + [8]))
	CALL $323($2)
	$global$0 = ($3 + [880])
}

void .FUNC $346 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [880])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [868]) = $2
	*($3 + [864]) = $2
	*($3 + [872]) = ($2 + $4)
	*($3 + [856]) = (int_64)0
	CALL $319(($3 + [864]), ($3 + [856]))
	*($3 + [848]) = (int_64)0
	*($3 + [840]) = (int_64)0
	CALL $320(($3 + [864]), ($3 + [840]))
	$2 = *($3 + [872])
	*((($3 + [56]) + [8])) = $2
	*((($3 + [24]) + [8])) = $2
	$5 = *($3 + [864])
	*($3 + [24]) = $5
	*($3 + [56]) = $5
	$2 = CALL $322(($3 + [72]), $0, $1, ($3 + [24]))
	$0 = *($3 + [848])
	*((($3 + [40]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [840])
	*($3 + [40]) = $0
	*($3 + [8]) = $0
	CALL $171($2, *($3 + [856]), ($3 + [8]))
	CALL $323($2)
	$global$0 = ($3 + [880])
}

void .FUNC $345 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [880])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [868]) = $2
	*($3 + [864]) = $2
	*($3 + [872]) = ($2 + $4)
	*($3 + [856]) = (int_64)0
	CALL $319(($3 + [864]), ($3 + [856]))
	*($3 + [848]) = (int_64)0
	*($3 + [840]) = (int_64)0
	CALL $320(($3 + [864]), ($3 + [840]))
	$2 = *($3 + [872])
	*((($3 + [56]) + [8])) = $2
	*((($3 + [24]) + [8])) = $2
	$5 = *($3 + [864])
	*($3 + [24]) = $5
	*($3 + [56]) = $5
	$2 = CALL $322(($3 + [72]), $0, $1, ($3 + [24]))
	$0 = *($3 + [848])
	*((($3 + [40]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [840])
	*($3 + [40]) = $0
	*($3 + [8]) = $0
	CALL $160($2, *($3 + [856]), ($3 + [8]))
	CALL $323($2)
	$global$0 = ($3 + [880])
}

void .FUNC $344 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [880])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $3($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [868]) = $2
	*($3 + [864]) = $2
	*($3 + [872]) = ($2 + $4)
	*($3 + [856]) = (int_64)0
	CALL $319(($3 + [864]), ($3 + [856]))
	*($3 + [848]) = (int_64)0
	*($3 + [840]) = (int_64)0
	CALL $320(($3 + [864]), ($3 + [840]))
	$2 = *($3 + [872])
	*((($3 + [56]) + [8])) = $2
	*((($3 + [24]) + [8])) = $2
	$5 = *($3 + [864])
	*($3 + [24]) = $5
	*($3 + [56]) = $5
	$2 = CALL $322(($3 + [72]), $0, $1, ($3 + [24]))
	$0 = *($3 + [848])
	*((($3 + [40]) + [8])) = $0
	*((($3 + [8]) + [8])) = $0
	$0 = *($3 + [840])
	*($3 + [40]) = $0
	*($3 + [8]) = $0
	CALL $139($2, *($3 + [856]), ($3 + [8]))
	CALL $323($2)
	$global$0 = ($3 + [880])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $645(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $646($0, $9)
	CALL $647($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	$5 = $2
	CALL $648($5, ($1 + [8]), $3, $3)
	*($1 + [20]) = CALL $96()
	$3 = CALL $649($1)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$2 = CALL $3($3)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = ($2 + $3)
	CALL $650($5, $1)
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-6154886499446371056, *(*($0 + [8])), $6, $2, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $4($2)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	$5 = $2
	CALL $648($5, ($1 + [8]), $3, $3)
	*($1 + [20]) = CALL $96()
	$3 = CALL $649($1)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$2 = CALL $3($3)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = ($2 + $3)
	CALL $650($5, $1)
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-6154886499446371056, *(*($0 + [8])), $6, $2, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $4($2)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($2 + [4])
	CALL $44(((int_32)$3 != (int_32)[0]), [12911])
	CALL $97($2)
	CALL $98($1, $3)
	*($0) = *($2)
}

int_32 .FUNC $85 (int_32 $0)
{
	return ((uint_32)(CALL $96() - *($0 + [20])) > (uint_32)[305])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)*(*($3)) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $94($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6154886499446371056, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $94($0, $1, CALL $95($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	if ( *($2 + [60]) ){ goto $label$1 }
	$4 = ($0 + [688])
	CALL $84(($3 + [48]), $4, *($2))
	$5 = *($3 + [52])
	if ( ($5 == 0) ){ goto $label$5 }
	if ( (CALL $85($5) == 0) ){ goto $label$2 }
	*($3 + [32]) = *($3 + [48])
	*($3 + [16]) = *($3 + [32])
	CALL $86(($3 + [64]), $4, ($3 + [16]))
	$6 = *($1)
	*($3 + [44]) = $1
	*($3 + [40]) = $2
	*($3 + [88]) = $6
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*(($0 + [688]))), [12656])
	*($3 + [64]) = $4
	*($3 + [68]) = ($3 + [40])
	*($3 + [72]) = ($3 + [88])
	*(($5 = CALL $9([40]))) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [24]) = $4
	*($5 + [8]) = ($5 + [12])
	CALL $87(($3 + [64]), $5)
	*($3 + [80]) = $5
	$6 = *($5)
	*($3 + [64]) = $6
	$7 = *($5 + [28])
	*($3 + [60]) = $7
	$8 = ($0 + [716])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [720]))) ){ goto $label$4 }
	*($9 + [8]) = $6
	*($9 + [16]) = $7
	*($3 + [80]) = [0]
	*($9) = $5
	*($8) = ($9 + [24])
	goto $label$3 
	
.LABEL $label$5
	$6 = *($1)
	*($3 + [44]) = $1
	*($3 + [40]) = $2
	*($3 + [88]) = $6
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($4)), [12656])
	*($3 + [64]) = $4
	*($3 + [68]) = ($3 + [40])
	*($3 + [72]) = ($3 + [88])
	*(($5 = CALL $9([40]))) = (int_64)0
	*($5 + [12 align=4]) = (int_64)0
	*($5 + [24]) = $4
	*($5 + [8]) = ($5 + [12])
	CALL $88(($3 + [64]), $5)
	*($3 + [80]) = $5
	$6 = *($5)
	*($3 + [64]) = $6
	$7 = *($5 + [28])
	*($3 + [60]) = $7
	$8 = ($0 + [716])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [720]))) ){ goto $label$7 }
	*($9 + [8]) = $6
	*($9 + [16]) = $7
	*($3 + [80]) = [0]
	*($9) = $5
	*($8) = ($9 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $89(($0 + [712]), ($3 + [80]), ($3 + [64]), ($3 + [60]))
	
.LABEL $label$6
	$5 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	CALL $90(($5 + [8]))
	CALL $11($5)
	goto $label$2 
	
.LABEL $label$4
	CALL $89(($0 + [712]), ($3 + [80]), ($3 + [64]), ($3 + [60]))
	
.LABEL $label$3
	$5 = *($3 + [80])
	*($3 + [80]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	CALL $90(($5 + [8]))
	CALL $11($5)
	
.LABEL $label$2
	CALL $84(($3 + [64]), $4, *($2))
	$6 = *($3 + [64])
	*($3 + [48]) = $6
	CALL $44(((uint_64)$6 > (uint_64)(int_64)4294967295), [8680])
	$6 = *($1)
	$5 = *($3 + [52])
	*($3 + [64]) = $1
	CALL $44(((int_32)$5 != (int_32)[0]), [12268])
	CALL $91($4, $5, $6, ($3 + [64]))
	CALL $84(($3 + [64]), $4, *($2))
	$6 = *($3 + [64])
	*($3 + [48]) = $6
	CALL $44(((uint_64)$6 > (uint_64)(int_64)4294967295), [8680])
	if ( (*((*($3 + [52]) + [16])) <= CALL $92($0)) ){ goto $label$1 }
	*($3 + [24]) = *($3 + [48])
	*($3 + [8]) = *($3 + [24])
	CALL $86(($3 + [64]), $4, ($3 + [8]))
	CALL $93($0, $2)
	
.LABEL $label$1
	$global$0 = ($3 + [96])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [560])
	$global$0 = $4
	$5 = *($1 + [8])
	$6 = *($1)
	CALL $612(($4 + [32]), $2)
	$2 = *($4 + [40])
	$7 = *($4 + [32])
	CALL $612(($4 + [16]), $3)
	*($4) = ( $2 ? (($4 + [32]) | [1]) : ($7 & [1]) )
	*($4 + [4]) = ( *($4 + [24]) ? (($4 + [16]) | [1]) : (*($4 + [16]) & [1]) )
	CALL $22(($4 + [48]), [512], ( $5 ? ($1 + [1]) : ($6 & [1]) ), $4)
	CALL $26(($4 + [16]))
	CALL $26(($4 + [32]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	CALL $25($0, ($4 + [48]), CALL $2(($4 + [48])))
	$global$0 = ($4 + [560])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( $0 ){ goto $label$1 }
	CALL $82($4, $1, $2, $3)
	CALL $44([0], ( *($4 + [8]) ? ($4 | [1]) : (*($4) & [1]) ))
	CALL $26($4)
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	if ( (int_64)(*($1) == 0) ){ goto $label$1 }
	$3 = ($0 + [288])
	CALL $74(($2 + [8]), $3, (uint_64)*($1 + [8]) >> (uint_64)(int_64)8))
	$4 = *($2 + [12])
	*(($5 = ($2 + [24]))) = [0]
	*($2 + [16]) = (int_64)0
	CALL $25(($2 + [16]), [8550], CALL $2([8550]))
	CALL $75(((int_32)$4 != (int_32)[0]), ($2 + [16]), $1)
	CALL $26(($2 + [16]))
	$4 = CALL $60(*($2 + [12]), $1)
	*($5) = [0]
	*($2 + [16]) = (int_64)0
	CALL $25(($2 + [16]), [8611], CALL $2([8611]))
	CALL $81($4, ($2 + [16]), $1, *($2 + [12]))
	CALL $26(($2 + [16]))
	$4 = *($2 + [12])
	CALL $44(((int_32)$4 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($4 + [32]) == (int_32)$3), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0 + [288])), [12349])
	$6 = *($4 + [8])
	CALL $64($4, $1)
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL $44(((int_64)$6) == (int_64)(uint_64)*($4 + [8]) >> (uint_64)(int_64)8)), [12400])
	*($2 + [56]) = (($2 + [16]) + [32])
	*($2 + [52]) = ($2 + [16])
	*($2 + [48]) = ($2 + [16])
	CALL $76(($2 + [48]), $4)
	CALL db_update_i64(*($4 + [36]), (int_64)0, ($2 + [16]), [32])
	$1 = ($0 + [304])
	if ( (uint_64)($6 <= *($1)) ){ goto $label$1 }
	*($1) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $707 (int_32 $0, int_32 $1)
{
	CALL $708($1, *($0))
	CALL $709($1, *($0 + [4]))
}

void .FUNC $706 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $707(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $705 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $706($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $704 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $705($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $703 (int_32 $0, int_32 $1)
{
	CALL $704(*($0 + [4]), $1)
	*($1 + [28]) = *(*($0 + [8]))
}

int_32 .FUNC $341 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $196($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $701 (int_32 $0, int_32 $1)
{
	CALL $464(*($0), $1)
}

void .FUNC $700 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

int_32 .FUNC $340 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $192($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $709 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

void .FUNC $708 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $497 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $501(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $496 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $498($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $495 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $497($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	if ( (int_64)(*($3) == 0) ){ goto $label$1 }
	*($5 + [8]) = *(( $2 ? $1 : $4 ))
	CALL $58($0, ($5 + [8]), $3)
	CALL $72($0, $3)
	
.LABEL $label$1
	$global$0 = ($5 + [16])
}

void .FUNC $493 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( ((uint_32)$1 >= (uint_32)[268435456]) ){ goto $label$1 }
	$2 = ($1 << [4])
	$1 = CALL $9($2)
	*($0) = $1
	*($0 + [4]) = $1
	*($0 + [8]) = ($1 + $2)
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $492 (int_32 $0, int_32 $1)
{
	CALL $394($0, $1, [4])
	return $0
}

int_32 .FUNC $491 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = int_32((*($1 + [4]) - *($1)) >> [3])
	CALL $393($0, ($2 + [8]))
	$3 = *($1 + [4])
	$1 = *($1)
	
.LOOP $label$2:
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	CALL $385($0, $1)
	$1 = ($1 + [8])
	goto $label$2 
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $490 (int_32 $0, int_32 $1)
{
	CALL $492(*($0), $1)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([48])
	$2 = CALL $613($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $8)
	$9 = *($1 + [36])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $300($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [544])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1)
	CALL $612(($3 + [16]), $2)
	*($3) = ( *($3 + [24]) ? (($3 + [16]) | [1]) : (*($3 + [16]) & [1]) )
	CALL $22(($3 + [32]), [512], ( $4 ? ($1 + [1]) : ($5 & [1]) ), $3)
	CALL $26(($3 + [16]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	CALL $25($0, ($3 + [32]), CALL $2(($3 + [32])))
	$global$0 = ($3 + [544])
}

void .FUNC $499 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [24])
	CALL $500($1, (*($0) + [24]))
}

void .FUNC $498 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $499(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((int_64)$7 >= (int_64)$8) ){ goto $label$9 }
	if ( ((int_64)$6 >= (int_64)$7) ){ goto $label$8 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$7 
	
.LABEL $label$9
	$9 = [0]
	if ( ((int_64)$6 >= (int_64)$7) ){ goto $label$5 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((int_64)$6 >= (int_64)$8) ){ goto $label$6 }
	*($0) = $6
	*($1) = $8
	$9 = [2]
	$7 = *($2)
	$8 = *($3)
	if ( ((int_64)$8 < (int_64)$7) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$8
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((int_64)$7 >= (int_64)$8) ){ goto $label$6 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$7
	$7 = $8
	
.LABEL $label$6
	$8 = *($3)
	if ( ((int_64)$8 >= (int_64)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = $6
	$8 = *($3)
	if ( ((int_64)$8 < (int_64)$7) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = *($3)
	$7 = *($4)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($2) = $8
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$11 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$10 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_64)$7 < (int_64)$6) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$11
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_64)$7 < (int_64)$6) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$10
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_64)$7 < (int_64)$6) ){ goto $label$1 }
	
.LABEL $label$2
	return $9
	
.LABEL $label$1
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$14 }
	*($2) = $7
	*($3) = $6
	$6 = *($1)
	$7 = *($2)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$13 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((int_64)$7 >= (int_64)$6) ){ goto $label$12 }
	*($0) = $7
	*($1) = $6
	return ($9 + [4])
	
.LABEL $label$14
	return ($9 + [1])
	
.LABEL $label$13
	return ($9 + [2])
	
.LABEL $label$12
	return ($9 + [3])
}

void .FUNC $280 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	$5 = ($global$0 - [48])
	$global$0 = $5
	CALL $286(($5 + [40]), $4, *($1))
	if ( (*($5 + [44]) == 0) ){ goto $label$2 }
	*($5 + [32]) = *($5 + [40])
	$6 = *($1)
	*($5 + [24]) = $2
	*($5 + [8]) = *($5 + [32])
	CALL $287($4, ($5 + [8]), $6, ($5 + [24]))
	goto $label$1 
	
.LABEL $label$2
	$6 = *($1)
	*($5 + [28]) = $2
	*($5 + [24]) = $1
	CALL $288(($5 + [16]), $4, $6, ($5 + [24]))
	
.LABEL $label$1
	CALL $289($0, $1, $2, $3, $4)
	$global$0 = ($5 + [48])
}

int_32 .FUNC $692 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $694($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = int_32(($1 - $0) >> [3])
	if ( ((uint_32)$3 > (uint_32)[5]) ){ goto $label$21 }
	goto $label$3 
	
.LABEL $label$22
	$5 = *($0)
	$3 = ($1 + [-8])
	$4 = *($3)
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$3 }
	*($0) = $4
	*($3) = $5
	return [1]
	
.LABEL $label$21
	$5 = *($0 + [16])
	$6 = *($0)
	$4 = *($0 + [8])
	if ( ((int_64)$4 >= (int_64)$6) ){ goto $label$17 }
	if ( ((int_64)$5 >= (int_64)$4) ){ goto $label$14 }
	*($0) = $5
	*(($0 + [16])) = $6
	goto $label$13 
	
.LABEL $label$20
	$3 = ($1 + [-8])
	$4 = *($3)
	$6 = *($0)
	$5 = *($0 + [8])
	if ( ((int_64)$5 >= (int_64)$6) ){ goto $label$16 }
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$9 }
	*($0) = $4
	*($3) = $6
	return [1]
	
.LABEL $label$19
	CALL $34($0, ($0 + [8]), ($0 + [16]), ($0 + [24]), ($1 + [-8]), $2)
	return [1]
	
.LABEL $label$18
	$3 = ($1 + [-8])
	$5 = *($0 + [16])
	$6 = *($0)
	$4 = *($0 + [8])
	if ( ((int_64)$4 >= (int_64)$6) ){ goto $label$15 }
	if ( ((int_64)$5 >= (int_64)$4) ){ goto $label$8 }
	*($0) = $5
	*(($0 + [16])) = $6
	goto $label$7 
	
.LABEL $label$17
	if ( ((int_64)$5 >= (int_64)$4) ){ goto $label$11 }
	*(($0 + [16])) = $4
	*(($3 = ($0 + [8]))) = $5
	if ( ((int_64)$5 >= (int_64)$6) ){ goto $label$12 }
	*($0) = $5
	*($3) = $6
	$7 = ($0 + [24])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$16
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$3 }
	*(($2 = ($0 + [8]))) = $4
	*($3) = $5
	$5 = *($0)
	$4 = *($2)
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$3 }
	*($0) = $4
	*($2) = $5
	return [1]
	
.LABEL $label$15
	if ( ((int_64)$5 >= (int_64)$4) ){ goto $label$5 }
	*(($0 + [16])) = $4
	*(($2 = ($0 + [8]))) = $5
	if ( ((int_64)$5 >= (int_64)$6) ){ goto $label$6 }
	*($0) = $5
	*($2) = $6
	$6 = *($3)
	if ( ((int_64)$6 < (int_64)$4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$14
	*($0) = $4
	*(($3 = ($0 + [8]))) = $6
	if ( ((int_64)$5 >= (int_64)$6) ){ goto $label$11 }
	*(($0 + [16])) = $6
	*($3) = $5
	
.LABEL $label$13
	$4 = $6
	
.LABEL $label$12
	$7 = ($0 + [24])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	$4 = $5
	$7 = ($0 + [24])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$10
	$8 = [0]
	$9 = [16]
	$5 = *($7)
	if ( ((int_64)$5 >= (int_64)$4) ){ goto $label$2 }
	$10 = [2]
	goto $label$1 
	
.LABEL $label$9
	*($0) = $5
	*(($2 = ($0 + [8]))) = $6
	$4 = *($3)
	if ( ((int_64)$4 >= (int_64)$6) ){ goto $label$3 }
	*($2) = $4
	*($3) = $6
	return [1]
	
.LABEL $label$8
	*($0) = $4
	*(($2 = ($0 + [8]))) = $6
	if ( ((int_64)$5 >= (int_64)$6) ){ goto $label$5 }
	*(($0 + [16])) = $6
	*($2) = $5
	
.LABEL $label$7
	$4 = $6
	
.LABEL $label$6
	$6 = *($3)
	if ( ((int_64)$6 >= (int_64)$4) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$4 = $5
	$6 = *($3)
	if ( ((int_64)$6 >= (int_64)$4) ){ goto $label$3 }
	
.LABEL $label$4
	*(($2 = ($0 + [16]))) = $6
	*($3) = $4
	$3 = ($0 + [8])
	$5 = *($3)
	$4 = *($2)
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$3 }
	*($2) = $5
	*($3) = $4
	$5 = *($0)
	if ( ((int_64)$4 >= (int_64)$5) ){ goto $label$3 }
	*($0) = $4
	*(($0 + [8])) = $5
	return [1]
	
.LABEL $label$3
	return [1]
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	
.LOOP $label$23:
	goto $label$34 
	
.LABEL $label$40
	$3 = $9
	$10 = [3]
	goto $label$23 
	
.LABEL $label$39
	*((($2 = ($0 + $3)) + [8])) = $4
	if ( ($3 == 0) ){ goto $label$24 }
	$10 = [4]
	goto $label$23 
	
.LABEL $label$38
	$3 = ($3 + [-8])
	$4 = *(($2 + [-8]))
	if ( ((int_64)$5 < (int_64)$4) ){ goto $label$25 }
	$10 = [5]
	goto $label$23 
	
.LABEL $label$37
	*((($0 + $3) + [8])) = $5
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[8]) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$36
	*($0) = $5
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)[8]) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$35
	$9 = ($9 + [8])
	$4 = *($7)
	$7 = $3
	$5 = *($7)
	if ( ((int_64)$5 < (int_64)$4) ){ goto $label$30 }
	$10 = [0]
	goto $label$23 
	
.LABEL $label$34
	$3 = ($7 + [8])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$31 }
	$10 = [8]
	goto $label$23 
	
.LABEL $label$33
	return [1]
	
.LABEL $label$32
	return ((int_32)($7 + [8]) == (int_32)$1)
	
.LABEL $label$31
	$10 = [1]
	goto $label$23 
	
.LABEL $label$30
	$10 = [2]
	goto $label$23 
	
.LABEL $label$29
	$10 = [6]
	goto $label$23 
	
.LABEL $label$28
	$10 = [0]
	goto $label$23 
	
.LABEL $label$27
	$10 = [6]
	goto $label$23 
	
.LABEL $label$26
	$10 = [0]
	goto $label$23 
	
.LABEL $label$25
	$10 = [3]
	goto $label$23 
	
.LABEL $label$24
	$10 = [7]
	goto $label$23 
	$3
	return $10
}

void .FUNC $228 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [32]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $342 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $523($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $306 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [16]) = $1
	CALL require_auth($1)
	CALL $267((int_32((*($2 + [4]) - *($2)) >> [3]) <= [31]), [10898], [30])
	CALL $267(((uint_32)int_32((*($2 + [4]) - *($2)) >> [3]) > (uint_32)[2]), [10947], [3])
	$4 = ($0 + [528])
	$5 = *($2 + [4])
	$6 = *($2)
	
.LOOP $label$2:
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$1 }
	CALL $100(($3 + [56]), $4, *($6))
	$7 = *($3 + [60])
	*((($3 + [32]) + [8])) = [0]
	*($3 + [32]) = (int_64)0
	CALL $25(($3 + [32]), [10996], CALL $2([10996]))
	CALL $51(((int_32)$7 != (int_32)[0]), ($3 + [32]), $6)
	$6 = ($6 + [8])
	CALL $26(($3 + [32]))
	goto $label$2 
	
.LABEL $label$1
	CALL $307(*($2), *(($2 + [4])), ($3 + [32]))
	$1 = *($3 + [16])
	$7 = ($0 + [488])
	CALL $243(($3 + [8]), $7, $1)
	if ( (*($3 + [12]) == 0) ){ goto $label$4 }
	$6 = *($3 + [12])
	*($3 + [36]) = $2
	*($3 + [32]) = ($3 + [16])
	CALL $44(((int_32)$6 != (int_32)[0]), [12268])
	CALL $308($7, $6, $1, ($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = ($3 + [16])
	*($3 + [56]) = $1
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($7)), [12656])
	*($3 + [32]) = $7
	*($3 + [36]) = $3
	*($3 + [40]) = ($3 + [56])
	*(($6 = CALL $9([40]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24]) = $7
	CALL $309(($3 + [32]), $6)
	*($3 + [48]) = $6
	$1 = *($6)
	*($3 + [32]) = $1
	$5 = *($6 + [28])
	*($3 + [28]) = $5
	$4 = ($0 + [516])
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [520]))) ){ goto $label$6 }
	*($7 + [8]) = $1
	*($7 + [16]) = $5
	*($3 + [48]) = [0]
	*($7) = $6
	*($4) = ($7 + [24])
	goto $label$5 
	
.LABEL $label$6
	CALL $310(($0 + [512]), ($3 + [48]), ($3 + [32]), ($3 + [28]))
	
.LABEL $label$5
	$6 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $250(($6 + [8]))
	CALL $11($6)
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $633 (int_32 $0, int_32 $1)
{
	CALL $319(*($0), $1)
}

void .FUNC $632 (int_32 $0, int_32 $1)
{
	CALL $633($1, *($0))
	CALL $634($1, *($0 + [4]))
	CALL $635($1, *($0 + [8]))
}

void .FUNC $208 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	if ( $0 ){ goto $label$1 }
	CALL $224($4, $1, $2, $3)
	CALL $44([0], ( *($4 + [8]) ? ($4 | [1]) : (*($4) & [1]) ))
	CALL $26($4)
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $209 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)(uint_64)*((*($3) + [16])) >> (uint_64)(int_64)8) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $225($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-7128447674256195584, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $225($0, $1, CALL $226($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $637 (int_32 $0)
{
	CALL $511($0, *($0 + [4]))
	*($0) = ($0 + [4])
	*($0 + [4 align=4]) = (int_64)0
}

int_32 .FUNC $636 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL $637($1)
	$3 = [0]
	*($2 + [16]) = [0]
	CALL $358($0, ($2 + [16]))
	
.LOOP $label$2:
	if ( ((uint_32)$3 >= (uint_32)*($2 + [16])) ){ goto $label$1 }
	*($2 + [8]) = (int_64)0
	CALL $319($0, ($2 + [8]))
	CALL $638(($2 + [24]), $1, ($2 + [8]), ($2 + [8]))
	$3 = ($3 + [1])
	goto $label$2 
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $635 (int_32 $0, int_32 $1)
{
	CALL $321(*($0), $1)
}

void .FUNC $634 (int_32 $0, int_32 $1)
{
	CALL $636(*($0), $1)
}

int_32 .FUNC $202 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $407(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $203 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $422($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([48])
	$2 = CALL $766($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1 + [24])
	*($3 + [8]) = $8
	$9 = *($1 + [36])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $152($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $201 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $612($1, $0)
	CALL $778($1)
	CALL $26($1)
	$global$0 = ($1 + [16])
}

int_32 .FUNC $206 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL $100(($3 + [8]), $0, $1)
	CALL $44(((int_32)*($3 + [12]) != (int_32)[0]), $2)
	$2 = *($3 + [12])
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $207 (int_32 $0, int_32 $1)
{
	$0 = CALL memcpy($0, $1, [45])
	CALL $24(($0 + [48]), ($1 + [48]))
	*(($0 + [82])) = *(($1 + [82]))
	*(($0 + [76])) = *(($1 + [76]))
	*(($0 + [68])) = *(($1 + [68]))
	*($0 + [60 align=4]) = *($1 + [60 align=4])
	return $0
}

void .FUNC $204 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)(uint_64)*(*($3)) >> (uint_64)(int_64)8) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $302($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)5093418677392769024, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $302($0, $1, CALL $303($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $205 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	float_64 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [512])
	$global$0 = $4
	*($4 + [504]) = $1
	*($4 + [496]) = $2
	CALL require_auth($1)
	$8 = ($0 + [56])
	$5 = ($0 + [528])
	$6 = CALL $207(($4 + [400]), CALL $206($5, $1, [9498]))
	$7 = ($6 + [72])
	$9 = CALL $60($7, $8)
	$1 = (int_64)1397703940
	if ( ((int_64)$2 == (int_64)1397703940) ){ goto $label$1 }
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	CALL $25(($4 + [16]), [9552], CALL $2([9552]))
	CALL $208($9, ($4 + [16]), ($4 + [496]), $8)
	CALL $26(($4 + [16]))
	$1 = *($4 + [496])
	
.LABEL $label$1
	CALL $74(($4 + [392]), ($0 + [288]), (uint_64)$1 >> (uint_64)(int_64)8))
	$9 = *($4 + [396])
	if ( $9 ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$2 }
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	CALL $25(($4 + [16]), [9149], CALL $2([9149]))
	CALL $142([0], ($4 + [16]), ($4 + [496]))
	CALL $26(($4 + [16]))
	$9 = *($4 + [396])
	
.LABEL $label$3
	*(($10 = (($4 + [376]) + [8]))) = *(($9 + [24]))
	*($4 + [376]) = *($9 + [16])
	$9 = CALL $132(($4 + [360]), (int_64)0, *($4 + [496]))
	$11 = ($0 + [328])
	CALL $209(($4 + [352]), $11, (uint_64)*($4 + [496]) >> (uint_64)(int_64)8))
	$3 = *($4 + [356])
	if ( ($3 == 0) ){ goto $label$4 }
	*((($4 + [360]) + [8])) = *(($3 + [16]))
	*($4 + [360]) = *($3 + [8])
	
.LABEL $label$4
	CALL $44(CALL $60(($4 + [376]), $9), [9615])
	*((($4 + [336]) + [8])) = *($10)
	*($4 + [336]) = *($4 + [376])
	CALL $64(($4 + [336]), $9)
	CALL $210(($4 + [16]), ($0 + [128]))
	$1 = *($4 + [16])
	*($4 + [16]) = (int_64)23449582285967952
	CALL $149(($4 + [320]), [8784], ($4 + [16]))
	$2 = *($4 + [320])
	$3 = CALL $132(($4 + [304]), (int_64)0, *($4 + [496]))
	$12 = ((float_64)((float_64)(CASTING float_64)(int_64 $1) / (float_64)(CASTING float_64)(int_64 $2)) * (float_64)(CASTING float_64)(int_64 *($4 + [336])))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$6 }
	$1 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$1 = (Rounds 0)($12)
	
.LABEL $label$5
	*($3) = $1
	CALL $44(((int_64)$1 > (int_64)-1), [9402])
	CALL $80($0, $3)
	$10 = ($0 + [368])
	CALL $211(($4 + [296]), $10, (uint_64)*($4 + [496]) >> (uint_64)(int_64)8))
	$9 = *($4 + [300])
	CALL $44(((int_32)$9 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($9 + [32]) == (int_32)$10), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0 + [368])), [12349])
	$1 = *($9 + [8])
	CALL $52($9, $3)
	CALL $52(($9 + [16]), $3)
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL $44(((int_64)$1) == (int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8)), [12400])
	$13 = (($4 + [16]) + [32])
	*($4 + [216]) = $13
	*($4 + [212]) = ($4 + [16])
	*($4 + [208]) = ($4 + [16])
	CALL $212(($4 + [208]), $9)
	CALL db_update_i64(*($9 + [36]), (int_64)0, ($4 + [16]), [32])
	$9 = ($0 + [384])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$7 }
	*($9) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$7
	if ( (*($4 + [356]) == 0) ){ goto $label$9 }
	$2 = *($4 + [504])
	$9 = *($4 + [356])
	CALL $44(((int_32)$9 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($9 + [24]) == (int_32)$11), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*(($0 + [328]))), [12349])
	$3 = ($9 + [16])
	$1 = *($3)
	*($9) = CALL $37()
	*($9 + [8]) = *($4 + [376])
	$14 = *(($4 + [384]))
	*($3) = $14
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL $44(((int_64)$1) == (int_64)(uint_64)$14 >> (uint_64)(int_64)8)), [12400])
	*($4 + [216]) = (($4 + [16]) + [24])
	*($4 + [212]) = ($4 + [16])
	*($4 + [208]) = ($4 + [16])
	CALL $213(($4 + [208]), $9)
	CALL db_update_i64(*($9 + [28]), $2, ($4 + [16]), [24])
	$9 = ($0 + [344])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$8 }
	*($9) = ((int_64)$1 + (int_64)1)
	goto $label$8 
	
.LABEL $label$9
	$2 = *($4 + [504])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*(($0 + [328]))), [12656])
	*(($9 = CALL $9([40])) + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	*($9 + [24]) = $11
	*($9) = CALL $37()
	*($9 + [8]) = *($4 + [376])
	*($9 + [16]) = *(($4 + [384]))
	*($4 + [216]) = (($4 + [16]) + [24])
	*($4 + [212]) = ($4 + [16])
	*($4 + [208]) = ($4 + [16])
	CALL $213(($4 + [208]), $9)
	$1 = (uint_64)*($9 + [16]) >> (uint_64)(int_64)8
	$11 = CALL db_store_i64(*(($0 + [336])), (int_64)-7128447674256195584, $2, $1), ($4 + [16]), [24]
	*($9 + [28]) = $11)
	$3 = ($0 + [344])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$10 }
	*($3) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$10
	*($4 + [208]) = $9
	$1 = (uint_64)*(($9 + [16])) >> (uint_64)(int_64)8
	*($4 + [16]) = $1)
	*($4 + [80]) = $11
	$15 = ($0 + [356])
	$3 = *($15)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [360]))) ){ goto $label$12 }
	*($3 + [8]) = $1
	*($3 + [16]) = $11
	*($4 + [208]) = [0]
	*($3) = $9
	*($15) = ($3 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $214(($0 + [352]), ($4 + [208]), ($4 + [16]), ($4 + [80]))
	
.LABEL $label$11
	$9 = *($4 + [208])
	*($4 + [208]) = [0]
	if ( ($9 == 0) ){ goto $label$8 }
	CALL $11($9)
	
.LABEL $label$8
	$2 = *($4 + [504])
	$1 = *(CALL $215(($0 + [408]), $2, [9467]) + [8])
	*($4 + [16]) = (int_64)361939357518
	CALL $149(($4 + [280]), [8784], ($4 + [16]))
	$12 = ((float_64)(CASTING float_64)(int_64 $1) / (float_64)(CASTING float_64)(int_64 *($4 + [280])))
	CALL $44(((float_64)$12 <= (float_64)(float_64)1), [9640])
	$9 = CALL $216($10, (uint_64)*($4 + [496]) >> (uint_64)(int_64)8), [9467]
	*(($3 = (($4 + [264]) + [8]))) = *(($9) + [24]))
	*($4 + [264]) = *($9 + [16])
	$11 = CALL $132(($4 + [248]), (int_64)0, *($4 + [496]))
	*(($4 + [240])) = [0]
	*($4 + [224]) = (int_64)-1
	*($4 + [232]) = (int_64)0
	*($4 + [208]) = *($0)
	*($4 + [216]) = (uint_64)*($4 + [496]) >> (uint_64)(int_64)8)
	CALL $217(($4 + [200]), ($4 + [208]), $2)
	$9 = *($4 + [204])
	if ( ($9 == 0) ){ goto $label$13 }
	*((($4 + [248]) + [8])) = *(($9 + [16]))
	*($4 + [248]) = *($9 + [8])
	
.LABEL $label$13
	*((($4 + [184]) + [8])) = *($3)
	*($4 + [184]) = *($4 + [264])
	CALL $64(($4 + [184]), $11)
	$3 = CALL $132(($4 + [168]), (int_64)0, *($4 + [496]))
	$12 = ((float_64)$12 * (float_64)(CASTING float_64)(int_64 *($4 + [184])))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$15 }
	$1 = (int_64)-9223372036854775808
	goto $label$14 
	
.LABEL $label$15
	$1 = (Rounds 0)($12)
	
.LABEL $label$14
	*($3) = $1
	*((($4 + [16]) + [8])) = [0]
	*($4 + [16]) = (int_64)0
	CALL $25(($4 + [16]), [9653], CALL $2([9653]))
	CALL $75(((int_64)$1 > (int_64)0), ($4 + [16]), $3)
	CALL $26(($4 + [16]))
	*($4 + [164]) = ($4 + [504])
	*($4 + [160]) = ($4 + [264])
	if ( (*($4 + [204]) == 0) ){ goto $label$17 }
	$9 = *($4 + [204])
	CALL $44(((int_32)$9 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($9 + [32]) == (int_32)($4 + [208])), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($4 + [208])), [12349])
	$1 = *($9 + [24])
	CALL $218(($4 + [160]), $9)
	CALL $44(((int_64)$1 == (int_64)*($9 + [24])), [12400])
	*($4 + [88]) = $13
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	CALL $219(($4 + [80]), $9)
	CALL db_update_i64(*($9 + [36]), $2, ($4 + [16]), [32])
	$9 = ($4 + [224])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$16 }
	*($9) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$16 
	
.LABEL $label$17
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($4 + [208])), [12656])
	*(($9 = CALL $9([48])) + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [32]) = ($4 + [208])
	CALL $218(($4 + [160]), $9)
	*($4 + [88]) = $13
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	CALL $219(($4 + [80]), $9)
	$1 = *($9 + [24])
	$15 = CALL db_store_i64(*(($4 + [216])), (int_64)-7128443690987696704, $2, $1, ($4 + [16]), [32])
	*($9 + [36]) = $15
	$11 = ($4 + [224])
	if ( (uint_64)($1 <= *($11)) ){ goto $label$18 }
	*($11) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$18
	*($4 + [80]) = $9
	$1 = *(($9 + [24]))
	*($4 + [16]) = $1
	*($4 + [136]) = $15
	$16 = ($4 + [236])
	$11 = *($16)
	if ( ((uint_32)$11 >= (uint_32)*((($4 + [208]) + [32]))) ){ goto $label$20 }
	*($11 + [8]) = $1
	*($11 + [16]) = $15
	*($4 + [80]) = [0]
	*($11) = $9
	*($16) = ($11 + [24])
	goto $label$19 
	
.LABEL $label$20
	CALL $220((($4 + [208]) + [24]), ($4 + [80]), ($4 + [16]), ($4 + [136]))
	
.LABEL $label$19
	$9 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($9 == 0) ){ goto $label$16 }
	CALL $11($9)
	
.LABEL $label$16
	$9 = *($4 + [300])
	CALL $44(((int_32)$9 != (int_32)[0]), [12268])
	CALL $44(((int_32)*($9 + [32]) == (int_32)$10), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*(($0 + [368]))), [12349])
	$1 = *($9 + [8])
	CALL $64($9, $3)
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL $44(((int_64)$1) == (int_64)(uint_64)*($9 + [8]) >> (uint_64)(int_64)8)), [12400])
	*($4 + [88]) = $13
	*($4 + [84]) = ($4 + [16])
	*($4 + [80]) = ($4 + [16])
	CALL $212(($4 + [80]), $9)
	CALL db_update_i64(*($9 + [36]), (int_64)0, ($4 + [16]), [32])
	$9 = ($0 + [384])
	if ( (uint_64)($1 <= *($9)) ){ goto $label$21 }
	*($9) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$21
	$1 = *(CALL $153(($0 + [648]), (uint_64)*($4 + [496]) >> (uint_64)(int_64)8), [9467]) + [8])
	if ( ((int_64)*($4 + [496]) != (int_64)1397703940) ){ goto $label$23 }
	CALL $100(($4 + [152]), $5, *($4 + [504]))
	$9 = *($4 + [156])
	*($4 + [16]) = $3
	CALL $44(((int_32)$9 != (int_32)[0]), [12268])
	CALL $221($5, $9, ($4 + [16]))
	$3 = CALL $206($5, *($4 + [504]), [9467])
	*(($9 = (($4 + [136]) + [8]))) = *(($3 + [80]))
	*($4 + [136]) = *($3 + [72])
	*(($3 = (($4 + [120]) + [8]))) = *($9)
	*($4 + [120]) = *($4 + [136])
	CALL $64(($4 + [120]), $8)
	if ( ((int_64)*($4 + [120]) < (int_64)1) ){ goto $label$22 }
	*($4 + [72]) = (int_64)3617214756542218240
	$2 = *($0)
	*($4 + [64]) = $2
	*(($9 = ($4 + [8]))) = [0]
	*($4) = (int_64)0
	CALL $25($4, [9726], [12])
	*(($4 + [40])) = *($3)
	*(($4 + [56])) = *($9)
	*($4 + [16]) = $2
	*($4 + [24]) = *($4 + [504])
	*($4 + [32]) = *($4 + [120])
	*($4 + [48]) = *($4)
	$9 = [0]
	
.LOOP $label$25:
	if ( ((int_32)$9 == (int_32)[12]) ){ goto $label$24 }
	*(($4 + $9)) = [0]
	$9 = ($9 + [4])
	goto $label$25 
	
.LABEL $label$24
	$9 = CALL $154(($4 + [80]), ($4 + [64]), $1, (int_64)-3617168760277827584, ($4 + [16]))
	CALL $155($9)
	CALL $156($9)
	CALL $26(($4 + [48]))
	CALL $26($4)
	$9 = *($4 + [156])
	*($4 + [20]) = $0
	*($4 + [16]) = ($4 + [120])
	CALL $44(((int_32)$9 != (int_32)[0]), [12268])
	CALL $222($5, $9, ($4 + [16]))
	goto $label$22 
	
.LABEL $label$23
	CALL $44(CALL $60($7, $8), [9739])
	*($4 + [144]) = (int_64)3617214756542218240
	$2 = *($0)
	*($4 + [136]) = $2
	*(($9 = (($4 + [120]) + [8]))) = [0]
	*($4 + [120]) = (int_64)0
	CALL $25(($4 + [120]), [9726], [12])
	*(($4 + [40])) = *((($4 + [168]) + [8]))
	*(($4 + [56])) = *($9)
	*($4 + [16]) = $2
	*($4 + [24]) = *($4 + [504])
	*($4 + [32]) = *($4 + [168])
	*($4 + [48]) = *($4 + [120])
	$9 = [0]
	
.LOOP $label$27:
	if ( ((int_32)$9 == (int_32)[12]) ){ goto $label$26 }
	*((($4 + [120]) + $9)) = [0]
	$9 = ($9 + [4])
	goto $label$27 
	
.LABEL $label$26
	$9 = CALL $154(($4 + [80]), ($4 + [136]), $1, (int_64)-3617168760277827584, ($4 + [16]))
	CALL $155($9)
	CALL $156($9)
	CALL $26(($4 + [48]))
	CALL $26(($4 + [120]))
	
.LABEL $label$22
	CALL $223(($4 + [232]))
	
.LABEL $label$2
	CALL $26(($6 + [48]))
	$global$0 = ($4 + [512])
}

void .FUNC $800 (int_32 $0, int_32 $1)
{
	CALL $320(*($0 + [4]), $1)
	*($1 + [20]) = *(*($0 + [8]))
}

int_32 .FUNC $801 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $802 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $803 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $523($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $804 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [32]) = $1
	*(($0 + [24])) = (int_64)0
	CALL $805($2, $0)
	return $0
}

void .FUNC $805 (int_32 $0, int_32 $1)
{
	CALL $806(*($0 + [4]), $1)
	*($1 + [36]) = *(*($0 + [8]))
}

int_32 .FUNC $806 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $807($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $807 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $808($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $808 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [16])
	CALL $809(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $809 (int_32 $0, int_32 $1)
{
	CALL $810($1, *($0))
	CALL $810($1, *($0 + [4]))
}

void .FUNC $308 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL $44(((int_32)*($1 + [24]) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$6 = *($1)
	*($1) = *(*($3))
	$8 = *($3 + [4])
	$7 = ($1 + [8])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	CALL $928($7, *($8), *($8 + [4]))
	$8 = *(($3 + [4]))
	
.LABEL $label$1
	$3 = *($8)
	$8 = *($8 + [4])
	*($1 + [20]) = ((uint_32)CALL $96() % (uint_32)int_32(($8 - $3) >> [3]))
	CALL $44(((int_64)$6 == (int_64)*($1)), [12400])
	$3 = CALL $477($1)
	if ( ($3 <= [513]) ){ goto $label$3 }
	$8 = CALL $3($3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$2
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($8 + $3)
	CALL $478($5, $1)
	CALL db_update_i64(*($1 + [28]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $4($8)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $38 (int_32 $0)
{
}

int_64 .FUNC $39 (float_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	float_64 $4
	float_64 $5
	$1 = ($global$0 - [16])
	$2 = (CASTING int_64)(float_64 $0)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$3) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ( !(float_64)$0 ? $0 : ((int_64)$2 < (int_64)0) )
	if ( ((uint_32)$3 > (uint_32)[1021]) ){ goto $label$2 }
	*($1 + [8]) = ((float_64)$4 + (float_64)(float_64)4503599627370496)
	return ((float_64)$0 * (float_64)(float_64)0)
	
.LABEL $label$2
	$5 = (float_64)
	if ( ((int_32)((float_64)$5(((float_64)((float_64)$4 + (float_64)(float_64)4503599627370496) + (float_64)(float_64)-4503599627370496) - $4)) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$4 }
	$0 = ((float_64)((float_64)$4 + (float_64)$5) + (float_64)(float_64)-1)
	goto $label$3 
	
.LABEL $label$4
	$0 = ((float_64)$4 + (float_64)$5)
	if ( ((int_32)((float_64)$5 <= (float_64)(float_64)-0.5) ^ (int_32)[1]) ){ goto $label$3 }
	$0 = ((float_64)$0 + (float_64)(float_64)1)
	
.LABEL $label$3
	$0 = ( !(float_64)$0 ? $0 : ((int_64)$2 < (int_64)0) )
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $338 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $522($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $339 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $184($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $336 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $520($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $156 (int_32 $0)
{
	CALL $169(($0 + [28]))
	CALL $170(($0 + [16]))
	return $0
}

int_32 .FUNC $334 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $518($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $335 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $519($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $332 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $516($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $333 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $517($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $330 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $514($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $157 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $423($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

void .FUNC $440 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [48])
	$global$0 = $3
	$0 = ($0 + [408])
	CALL $230(($3 + [40]), $0, *($1))
	CALL $44(((int_64)*($2) > (int_64)-1), [12459])
	$4 = *($3 + [44])
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	CALL $25(($3 + [24]), [12518], CALL $2([12518]))
	CALL $51(((int_32)$4 != (int_32)[0]), ($3 + [24]), $1)
	CALL $26(($3 + [24]))
	*($3 + [16]) = *($3 + [40])
	*($3 + [28]) = $2
	*($3 + [24]) = $1
	*($3 + [8]) = *($3 + [16])
	CALL $442($0, ($3 + [8]), (int_64)0, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $441 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	float_64 $6
	int_64 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($5 = $4) + [56]) = $2
	CALL $44(((int_32)*(($1 + [92])) == (int_32)$0), [12303])
	CALL $44(((int_64)CALL $fimport$23() == (int_64)*($0)), [12349])
	$6 = *($1 + [64])
	if ( (((float_64)$6 < (float_64)(float_64)18446744073709551615) & ((float_64)$6 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$7 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$7 = (Rounds 0)($6)
	
.LABEL $label$1
	*($5 + [48]) = ((int_64)$7 ^ (int_64)-1)
	$7 = *($1)
	*($5 + [40]) = $7
	CALL $443($3, $1)
	CALL $44(((int_64)$7 == (int_64)*($1)), [12400])
	$3 = CALL $444($1)
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $3($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [28]) = $4
	*($5 + [24]) = $4
	*($5 + [32]) = ($4 + $3)
	CALL $445(($5 + [24]), $1)
	CALL db_update_i64(*($1 + [96]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL $4($4)
	$7 = *($5 + [40])
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [4]) = $1
	*($5 + [12]) = $1
	*($5) = $0
	*($5 + [8]) = ($5 + [48])
	*($5 + [16]) = ($5 + [40])
	*($5 + [20]) = ($5 + [56])
	CALL $446($5, ($0 + [36]))
	$global$0 = ($5 + [64])
}

void .FUNC $442 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	$1 = *($1 + [4])
	CALL $44(((int_32)$1 != (int_32)[0]), [12268])
	CALL $470($0, $1, $2, $3)
}

void .FUNC $443 (int_32 $0, int_32 $1)
{
	float_64 $2
	$2 = CALL $39(((float_64)*(*($0)) * (float_64)(float_64)1e4))
	$2 = ((float_64)$2 / (float_64)(float_64)1e4)
	*($1 + [64]) = ((float_64)*($1 + [64]) + (float_64)$2)
	*(($1 = *($0 + [4]))) = ((float_64)$2 + (float_64)*($1))
}

int_32 .FUNC $444 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = [0]
	CALL $447(($1 + [8]), $0)
	$0 = *($1 + [8])
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $445 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $448($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $446 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	float_64 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]) + [64])
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$5 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$5 = (Rounds 0)($4)
	
.LABEL $label$1
	*($2 + [8]) = ((int_64)$5 ^ (int_64)-1)
	if ( (CALL $17(*($0 + [8]), ($2 + [8]), [8]) == 0) ){ goto $label$3 }
	$6 = *(*($0 + [12]) + [100])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-7128446144174096384, $2, *(*($0 + [16])))
	*(*(($0 + [12])) + [100]) = $6
	
.LABEL $label$4
	CALL db_idx64_update($6, *(*($0 + [20])), ($2 + [8]))
	
.LABEL $label$3
	$global$0 = ($2 + [16])
}

int_32 .FUNC $447 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $449($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $448 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $455($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $449 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $450($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $919 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $920(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([104])
	$2 = CALL $548($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = *($1)
	*($3 + [8]) = $8
	$9 = *($1 + [96])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $259($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $26(($5 + [48]))
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	$5 = $3
	$3 = ($5 + [-24])
	if ( ((int_64)$2 == (int_64)7235159537265672192) ){ goto $label$1 }
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL $564($0, $1, *($3))
	return 
	
.LABEL $label$3
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)7235159537265672192, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$4 }
	CALL $564($0, $1, CALL $565($1, $3))
	return 
	
.LABEL $label$4
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $686 (int_32 $0, int_32 $1)
{
	CALL $687($1, *($0))
	CALL $688($1, *($0 + [4]))
	CALL $689($1, *($0 + [8]))
}

void .FUNC $687 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $684 (int_32 $0, int_32 $1)
{
	CALL $657(*($0), $1)
}

void .FUNC $685 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [20])
	CALL $686($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $299 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $915(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $916($0, $9)
	CALL $917($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

int_32 .FUNC $298 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $918($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $680 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $685($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $681 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $682($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $527 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $528($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $526 (int_32 $0, int_32 $1)
{
	CALL $527(*($0 + [4]), $1)
	*($1 + [28]) = *(*($0 + [8]))
}

int_32 .FUNC $525 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [24]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $526($2, $0)
	return $0
}

int_32 .FUNC $524 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $291 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL $44(((int_64)*($2) > (int_64)-1), [13018])
	CALL $44(CALL $276($2), [10675])
	CALL $48(($4 + [40]), $3, (uint_64)*($2 + [8]) >> (uint_64)(int_64)8))
	if ( (*($4 + [44]) == 0) ){ goto $label$2 }
	*($4 + [32]) = *($4 + [40])
	$5 = *($1)
	*($4 + [16]) = $2
	*($4 + [8]) = *($4 + [32])
	CALL $293($3, ($4 + [8]), $5, ($4 + [16]))
	goto $label$1 
	
.LABEL $label$2
	$5 = *($1)
	*($4 + [24]) = $2
	CALL $294(($4 + [16]), $3, $5, ($4 + [24]))
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

int_32 .FUNC $522 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $521 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $520 (int_32 $0)
{
	int_32 $1
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $11($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $407 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = *(($1 + [28]))
	$4 = *($1 + [24])
	
.LOOP $label$2:
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$3 = ($3 + [-24])
	if ( ((int_64)(uint_64)*(*($3) + [8]) >> (uint_64)(int_64)8) != (int_64)$2) ){ goto $label$2 }
	if ( ((int_32)($4 + [-24]) == (int_32)$3) ){ goto $label$1 }
	CALL $408($0, $1, *($3))
	return 
	
.LABEL $label$1
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4157508551318700032, $2)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $408($0, $1, CALL $409($1, $3))
	return 
	
.LABEL $label$3
	*($0 + [4]) = [0]
	*($0) = $1
}

void .FUNC $699 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $546 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

void .FUNC $913 (int_32 $0, int_32 $1)
{
	CALL $325(*($0), $1)
}

void .FUNC $899 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

void .FUNC $898 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

int_32 .FUNC $893 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $509($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $892 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

int_32 .FUNC $891 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $890 (int_32 $0, int_32 $1)
{
	CALL $320(*($0), $1)
}

void .FUNC $897 (int_32 $0, int_32 $1)
{
	CALL $898($1, *($0))
	CALL $899($1, *($0 + [4]))
}

void .FUNC $896 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $897(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $895 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $896($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $894 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $895($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $749 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = $0
	*($2 + [4]) = ($0 + [8])
	*($2 + [8]) = ($0 + [24])
	CALL $750($2, $1)
	$global$0 = ($2 + [16])
}

void .FUNC $748 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $749($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $743 (int_32 $0, int_32 $1)
{
	CALL $385(*($0), $1)
}

void .FUNC $742 (int_32 $0, int_32 $1)
{
	CALL $743($1, *($0))
	CALL $744($1, *($0 + [4]))
}

void .FUNC $741 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	*($2 + [12]) = ($0 + [8])
	CALL $742(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $740 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $741($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $747 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $748($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $746 (int_32 $0, int_32 $1)
{
	CALL $747(*($0 + [4]), $1)
	*($1 + [32]) = *(*($0 + [8]))
}

int_32 .FUNC $745 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [28]) = $1
	*(($0 + [16])) = (int_64)0
	CALL $746($2, $0)
	return $0
}

void .FUNC $744 (int_32 $0, int_32 $1)
{
	CALL $53(*($0), $1)
}

void .FUNC $592 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$8 = ($0 + [8])
	$9 = [178956970]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 > (uint_32)[89478484]) ){ goto $label$2 }
	$9 = ($5 << [1])
	$9 = ( $7 ? $9 : ($9 <= $7) )
	
.LABEL $label$2
	$9 = CALL $594(($4 + [8]), $9, $6, $8)
	$5 = *($1)
	*($1) = [0]
	*(($1 = *($9 + [8])) + [8]) = *($2)
	*($1 + [16]) = *($3)
	*($1) = $5
	*($9 + [8]) = ($1 + [24])
	CALL $595($0, $9)
	CALL $596($9)
	$global$0 = ($4 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $36($0)
}

void .FUNC $593 (int_32 $0, int_32 $1)
{
	CALL $320(*($0 + [4]), $1)
	*($1 + [20]) = *(*($0 + [8]))
}

int_32 .FUNC $590 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([32])
	$2 = CALL $591($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $8)
	$9 = *($1 + [20])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $592($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

int_32 .FUNC $591 (int_32 $0, int_32 $1, int_32 $2)
{
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	CALL $593($2, $0)
	return $0
}

int_32 .FUNC $596 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$2:
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$1 }
	$3 = ($3 + [-24])
	*($2) = $3
	CALL $514($3)
	goto $label$2 
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $11($2)
	
.LABEL $label$3
	return $0
}

void .FUNC $597 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$1 = [0]
	
.LOOP $label$2:
	$4 = (($2 + [9]) + $1)
	if ( (int_64)($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[6]) ){ goto $label$1 }
	*($4) = $3
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$1 = ($1 + [1])
	goto $label$2 
	
.LABEL $label$1
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	CALL $354($0, ($2 + [9]), $4)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $594 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = [0]
	*($0 + [12]) = [0]
	*(($0 + [16])) = $3
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[178956971]) ){ goto $label$1 }
	$4 = CALL $9(((int_32)$1 * (int_32)[24]))
	
.LABEL $label$2
	*($0) = $4
	$2 = ($4 + ((int_32)$2 * (int_32)[24]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	*(($0 + [12])) = ($4 + ((int_32)$1 * (int_32)[24]))
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $595 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (*($0) - $2)
	$4 = ($1 + [4])
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($2 + [-24])
	$6 = *($5)
	$7 = *($4)
	*($5) = [0]
	*(($7 + [-24])) = $6
	*(($7 + [-8])) = *(($2 + [-8]))
	*(($7 + [-16])) = *(($2 + [-16]))
	*($4) = (*($4) + [-24])
	$3 = ($3 + [24])
	$2 = $5
	goto $label$2 
	
.LABEL $label$1
	$7 = *($0)
	$2 = ($1 + [4])
	*($0) = *($2)
	*($2) = $7
	$7 = ($0 + [4])
	$3 = *($7)
	*($7) = *($1 + [8])
	*($1 + [8]) = $3
	$7 = *($0 + [8])
	*($0 + [8]) = *($1 + [12])
	*($1 + [12]) = $7
	*($1) = *($2)
}

void .FUNC $36 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $37 ()
{
	int_64 $0
	if ( (*([0] + [8220]) == 0) ){ goto $label$1 }
	return *([0] + [8224])
	
.LABEL $label$1
	$0 = CALL current_time()
	*([0] + [8220]) = [1]
	*([0] + [8224]) = $0
	return $0
}

void .FUNC $598 (int_32 $0, int_32 $1, int_32 $2)
{
	CALL $44(((int_32)*($2 + [16]) == (int_32)$1), [11845])
	*($0 + [4]) = $2
	*($0) = $1
}

int_32 .FUNC $599 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$4 = ($0 + [24])
	$5 = *(($0 + [28]))
	$6 = *($0 + [24])
	
.LOOP $label$3:
	$7 = ((int_32)$6 == (int_32)$5)
	if ( $7 ){ goto $label$2 }
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$4 }
	$5 = ($5 + [-24])
	goto $label$3 
	
.LABEL $label$4
	if ( $7 ){ goto $label$2 }
	$2 = *(($5 + [-24]))
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL db_get_i64($1, [0], [0])
	CALL $44(((int_32)$5 > (int_32)[-1]), [11896])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$6 = CALL $3($5)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$5
	CALL db_get_i64($1, $6, $5)
	*($3 + [36]) = $6
	*($3 + [32]) = $6
	*($3 + [40]) = ($6 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $9([32])
	$2 = CALL $600($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $8)
	$9 = *($1 + [20])
	*($3 + [4]) = $9
	$10 = ($0 + [28])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = $8
	*($7 + [16]) = $9
	*($3 + [24]) = [0]
	*($7) = $1
	*($10) = ($7 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $601($4, ($3 + [24]), ($3 + [8]), ($3 + [4]))
	
.LABEL $label$7
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $4($6)
	
.LABEL $label$9
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $11($5)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
	return $2
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $30(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $22(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8368], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $30(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $30(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	
.LOOP $label$1:
	$5 = ($1 + [-16])
	$6 = ($1 + [-8])
	
.LOOP $label$6:
	$4 = $0
	$0 = ($1 - $4)
	$7 = int_32($0 >> [3])
	if ( ((uint_32)$7 <= (uint_32)[5]) ){ goto $label$45 }
	if ( ((int_32)$0 <= (int_32)[247]) ){ goto $label$44 }
	$8 = ($4 + (((int_32)$7 / (int_32)[2]) << [3]))
	if ( ((int_32)$0 < (int_32)[7993]) ){ goto $label$46 }
	$0 = (((int_32)$7 / (int_32)[4]) << [3])
	$9 = CALL $34($4, ($4 + $0), $8, ($8 + $0), $6, $2)
	goto $label$16 
	
.LABEL $label$46
	$12 = *($6)
	$10 = *($4)
	$11 = *($8)
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$49 }
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$48 }
	*($4) = $12
	*($6) = $10
	$9 = [1]
	$11 = *($8)
	$10 = *($4)
	if ( ((int_64)$10 < (int_64)$11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$49
	$9 = [0]
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$16 }
	*($8) = $12
	*($6) = $11
	$9 = [1]
	$11 = *($4)
	$12 = *($8)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$16 }
	*($4) = $12
	*($8) = $11
	goto $label$47 
	
.LABEL $label$48
	*($4) = $11
	*($8) = $10
	$9 = [1]
	$12 = *($6)
	if ( ((int_64)$12 >= (int_64)$10) ){ goto $label$16 }
	*($8) = $12
	*($6) = $10
	
.LABEL $label$47
	$9 = [2]
	$11 = *($8)
	$10 = *($4)
	if ( ((int_64)$10 < (int_64)$11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$45
	goto $label$30 
	
.LABEL $label$50
	$11 = *($4)
	$0 = ($1 + [-8])
	$12 = *($0)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$23 }
	*($4) = $12
	*($0) = $11
	return 
	
.LABEL $label$44
	$11 = *($4 + [16])
	$10 = *($4)
	$12 = *($4 + [8])
	if ( ((int_64)$12 >= (int_64)$10) ){ goto $label$56 }
	if ( ((int_64)$11 >= (int_64)$12) ){ goto $label$55 }
	*($4) = $11
	*(($4 + [16])) = $10
	goto $label$54 
	
.LABEL $label$56
	if ( ((int_64)$11 >= (int_64)$12) ){ goto $label$52 }
	*(($4 + [16])) = $12
	*(($0 = ($4 + [8]))) = $11
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$53 }
	*($4) = $11
	*($0) = $10
	$6 = ($4 + [24])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$51 }
	goto $label$21 
	
.LABEL $label$55
	*($4) = $12
	*(($0 = ($4 + [8]))) = $10
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$52 }
	*(($4 + [16])) = $10
	*($0) = $11
	
.LABEL $label$54
	$12 = $10
	
.LABEL $label$53
	$6 = ($4 + [24])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$51 }
	goto $label$22 
	
.LABEL $label$52
	$12 = $11
	$6 = ($4 + [24])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$20 }
	
.LABEL $label$51
	$8 = [16]
	$11 = *($6)
	if ( ((int_64)$11 >= (int_64)$12) ){ goto $label$31 }
	$13 = [2]
	goto $label$3 
	
.LABEL $label$43
	$0 = ($1 + [-8])
	$12 = *($0)
	$10 = *($4)
	$11 = *($4 + [8])
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$40 }
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$38 }
	*($4) = $12
	*($0) = $10
	return 
	
.LABEL $label$42
	CALL $34($4, ($4 + [8]), ($4 + [16]), ($4 + [24]), ($1 + [-8]), $2)
	return 
	
.LABEL $label$41
	$0 = ($1 + [-8])
	$11 = *($4 + [16])
	$10 = *($4)
	$12 = *($4 + [8])
	if ( ((int_64)$12 >= (int_64)$10) ){ goto $label$39 }
	if ( ((int_64)$11 >= (int_64)$12) ){ goto $label$37 }
	*($4) = $11
	*(($4 + [16])) = $10
	goto $label$36 
	
.LABEL $label$40
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$26 }
	*(($7 = ($4 + [8]))) = $12
	*($0) = $11
	$11 = *($4)
	$12 = *($7)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$25 }
	*($4) = $12
	*($7) = $11
	return 
	
.LABEL $label$39
	if ( ((int_64)$11 >= (int_64)$12) ){ goto $label$35 }
	*(($4 + [16])) = $12
	*(($7 = ($4 + [8]))) = $11
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$33 }
	*($4) = $11
	*($7) = $10
	$14 = *($0)
	if ( ((int_64)$14 >= (int_64)$12) ){ goto $label$19 }
	goto $label$32 
	
.LABEL $label$38
	*($4) = $11
	*(($7 = ($4 + [8]))) = $10
	$12 = *($0)
	if ( ((int_64)$12 >= (int_64)$10) ){ goto $label$24 }
	*($7) = $12
	*($0) = $10
	return 
	
.LABEL $label$37
	*($4) = $12
	*(($7 = ($4 + [8]))) = $10
	if ( ((int_64)$11 >= (int_64)$10) ){ goto $label$34 }
	*(($4 + [16])) = $10
	*($7) = $11
	
.LABEL $label$36
	$12 = $10
	$14 = *($0)
	if ( ((int_64)$14 >= (int_64)$12) ){ goto $label$17 }
	goto $label$32 
	
.LABEL $label$35
	$12 = $11
	$14 = *($0)
	if ( ((int_64)$14 >= (int_64)$12) ){ goto $label$18 }
	goto $label$32 
	
.LABEL $label$34
	$12 = $11
	
.LABEL $label$33
	$14 = *($0)
	if ( ((int_64)$14 >= (int_64)$12) ){ goto $label$29 }
	
.LABEL $label$32
	*(($7 = ($4 + [16]))) = $14
	*($0) = $12
	$0 = ($4 + [8])
	$11 = *($0)
	$12 = *($7)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$28 }
	*($7) = $11
	*($0) = $12
	$11 = *($4)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$27 }
	*($4) = $12
	*(($4 + [8])) = $11
	return $13
	
.LABEL $label$31
	$13 = [0]
	goto $label$3 
	
.LABEL $label$30
	$13 = [7]
	goto $label$3 
	
.LABEL $label$29
	$13 = [7]
	goto $label$3 
	
.LABEL $label$28
	$13 = [7]
	goto $label$3 
	
.LABEL $label$27
	$13 = [7]
	goto $label$3 
	
.LABEL $label$26
	$13 = [7]
	goto $label$3 
	
.LABEL $label$25
	$13 = [7]
	goto $label$3 
	
.LABEL $label$24
	$13 = [7]
	goto $label$3 
	
.LABEL $label$23
	$13 = [7]
	goto $label$3 
	
.LABEL $label$22
	$13 = [7]
	goto $label$3 
	
.LABEL $label$21
	$13 = [7]
	goto $label$3 
	
.LABEL $label$20
	$13 = [7]
	goto $label$3 
	
.LABEL $label$19
	$13 = [7]
	goto $label$3 
	
.LABEL $label$18
	$13 = [7]
	goto $label$3 
	
.LABEL $label$17
	$13 = [7]
	goto $label$3 
	
.LABEL $label$16
	$11 = *($8)
	$10 = *($4)
	if ( ((int_64)$10 >= (int_64)$11) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = $6
	$3 = ($4 + [8])
	if ( ($3 <= $7) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$0 = $5
	
.LOOP $label$57:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$12 }
	$12 = *($0)
	$7 = ($0 + [-8])
	$0 = $7
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$57 }
	*($4) = $12
	*(($7 = ($7 + [8]))) = $10
	$9 = ($9 + [1])
	$3 = ($4 + [8])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$11 }
	
.LABEL $label$13
	
.LOOP $label$58:
	$0 = ($3 + [-8])
	$12 = *($8)
	
.LOOP $label$59:
	$0 = ($0 + [8])
	$11 = *($0)
	if ( ((int_64)$11 < (int_64)$12) ){ goto $label$59 }
	$3 = ($0 + [8])
	
.LOOP $label$60:
	$7 = ($7 + [-8])
	$10 = *($7)
	if ( ((int_64)$10 >= (int_64)$12) ){ goto $label$60 }
	if ( ((uint_32)$0 > (uint_32)$7) ){ goto $label$61 }
	*($0) = $10
	*($7) = $11
	$8 = ( $7 ? $8 : ((int_32)$8 == (int_32)$0) )
	$9 = ($9 + [1])
	goto $label$58 
	
.LABEL $label$61
	$3 = $0
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$7 = ($4 + [8])
	$11 = *($6)
	if ( ((int_64)$10 < (int_64)$11) ){ goto $label$66 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$65 }
	$7 = ($4 + [16])
	
.LOOP $label$68:
	$0 = ($7 + [-8])
	$12 = *($0)
	if ( ((int_64)$10 < (int_64)$12) ){ goto $label$67 }
	$7 = ($7 + [8])
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$68 }
	goto $label$64 
	
.LABEL $label$67
	*($0) = $11
	*($6) = $12
	
.LABEL $label$66
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$63 }
	
.LOOP $label$69:
	$0 = ($7 + [-8])
	$12 = *($4)
	
.LOOP $label$70:
	$0 = ($0 + [8])
	$11 = *($0)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$70 }
	$7 = ($0 + [8])
	
.LOOP $label$71:
	$6 = ($6 + [-8])
	$10 = *($6)
	if ( ((int_64)$12 < (int_64)$10) ){ goto $label$71 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$72 }
	*($0) = $10
	*($6) = $11
	goto $label$69 
	
.LABEL $label$72
	$7 = ([4] & [7])
	if ( ((uint_32)$7 > (uint_32)[4]) ){ goto $label$62 }
	goto $label$4 
	
.LABEL $label$65
	$13 = [7]
	goto $label$3 
	
.LABEL $label$64
	$13 = [7]
	goto $label$3 
	
.LABEL $label$63
	$13 = [7]
	goto $label$3 
	
.LABEL $label$62
	$13 = [7]
	goto $label$3 
	
.LABEL $label$11
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$10
	$11 = *($3)
	$12 = *($8)
	if ( ((int_64)$12 >= (int_64)$11) ){ goto $label$9 }
	*($3) = $12
	*($8) = $11
	if ( ($9 + [1]) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( $9 ){ goto $label$7 }
	
.LABEL $label$8
	$7 = CALL $35($4, $3, $2)
	$0 = ($3 + [8])
	if ( CALL $35($0, $1, $2) ){ goto $label$5 }
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$7
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $33($4, $3, $2)
	$0 = ($3 + [8])
	goto $label$6 
	
.LABEL $label$5
	$1 = ( $1 ? $3 : $7 )
	$0 = $4
	$7 = (( [1] ? [2] : $7 ) & [7])
	if ( ((uint_32)$7 <= (uint_32)[4]) ){ goto $label$4 }
	$13 = [7]
	goto $label$3 
	
.LABEL $label$4
	if ( (([1] << $7) & [21]) ){ goto $label$1 }
	$13 = [7]
	
.LABEL $label$3
	
.LOOP $label$73:
	goto $label$81 
	
.LABEL $label$88
	$0 = $8
	$13 = [3]
	goto $label$73 
	
.LABEL $label$87
	*((($7 = ($4 + $0)) + [8])) = $12
	if ( ($0 == 0) ){ goto $label$75 }
	$13 = [4]
	goto $label$73 
	
.LABEL $label$86
	$0 = ($0 + [-8])
	$12 = *(($7 + [-8]))
	if ( ((int_64)$11 < (int_64)$12) ){ goto $label$76 }
	$13 = [5]
	goto $label$73 
	
.LABEL $label$85
	$0 = (($4 + $0) + [8])
	goto $label$74 
	
.LABEL $label$84
	$0 = $4
	$13 = [6]
	goto $label$73 
	
.LABEL $label$83
	*($0) = $11
	$0 = ($6 + [8])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$77 }
	$13 = [1]
	goto $label$73 
	
.LABEL $label$82
	$8 = ($8 + [8])
	$12 = *($6)
	$6 = $0
	$11 = *($6)
	if ( ((int_64)$11 < (int_64)$12) ){ goto $label$79 }
	$13 = [0]
	goto $label$73 
	
.LABEL $label$81
	$0 = ($6 + [8])
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$78 }
	$13 = [7]
	goto $label$73 
	
.LABEL $label$80
	return 
	
.LABEL $label$79
	$13 = [2]
	goto $label$73 
	
.LABEL $label$78
	$13 = [1]
	goto $label$73 
	
.LABEL $label$77
	$13 = [7]
	goto $label$73 
	
.LABEL $label$76
	$13 = [3]
	goto $label$73 
	
.LABEL $label$75
	$13 = [8]
	goto $label$73 
	
.LABEL $label$74
	$13 = [6]
	goto $label$73 
	
.LABEL $label$2
	CALL $33(($3 + [8]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$7
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $31($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $9($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $11($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $281 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	
.LOOP $label$3:
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$2 = ($2 + [-24])
	CALL $509($2)
	goto $label$3 
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $11(*($0))
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $538 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $0
	CALL $539($1, ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $539 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = *($1)
	CALL $540($0, ($2 + [8]))
	$global$0 = ($2 + [16])
}