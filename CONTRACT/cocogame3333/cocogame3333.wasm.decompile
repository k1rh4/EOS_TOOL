(data (i32.const 8192) "active\00")
(data (i32.const 8199) "cocogame2222\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8298) "updatetimer\00")
(data (i32.const 8310) "cocogame3333\00")
(data (i32.const 8323) "opentokenaa\00")
(data (i32.const 8335) "opentokenbb\00")
(data (i32.const 8347) "opentokencc\00")
(data (i32.const 8359) "opentokenee\00")
(data (i32.const 8371) "string is too long to be a valid name\00")
(data (i32.const 8409) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8476) "character is not in allowed character set for names\00")
(data (i32.const 8528) "write\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memcpy" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$2 (param i32 i32)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "send_deferred" (func $fimport$4 (param i32 i64 i32 i32 i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "cancel_deferred" (func $fimport$6 (param i32) (result i32)))
(import "env" "action_data_size" (func $fimport$7 (result i32)))
(import "env" "read_action_data" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$9))
(import "env" "set_blockchain_parameters_packed" (func $fimport$10 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$12 (param i32 i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $14))
(export "_Znwj" (func $22))
(export "_ZdlPv" (func $24))
(export "_Znaj" (func $23))
(export "_ZdaPv" (func $25))
(export "_ZnwjSt11align_val_t" (func $26))
(export "_ZnajSt11align_val_t" (func $27))
(export "_ZdlPvSt11align_val_t" (func $28))
(export "_ZdaPvSt11align_val_t" (func $29))
(table $0 7 7 anyfunc)
(elem (i32.const 1) $10 $12 $8 $9 $11 $13)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 16952))
(global $global$2 i32 (i32.const 16952))


void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $36($1)
	
.LABEL $label$2
	*(CALL $33()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $36(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $39($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $39($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $33 ()
{
	return [8540]
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $39($0)
	
.LABEL $label$1
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $30 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [240])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = *($0)
	*($1 + [208]) = [8192]
	*($1 + [212]) = CALL $32([8192])
	*($1 + [40]) = *($1 + [208])
	$3 = *(CALL $2(($1 + [216]), ($1 + [40])))
	*($1 + [192]) = [8199]
	*($1 + [196]) = CALL $32([8199])
	*($1 + [32]) = *($1 + [192])
	$4 = CALL $2(($1 + [200]), ($1 + [32]))
	*($1 + [176]) = [8298]
	*($1 + [180]) = CALL $32([8298])
	*($1 + [24]) = *($1 + [176])
	$5 = CALL $2(($1 + [184]), ($1 + [24]))
	*($1 + [224]) = [0]
	*($1 + [112]) = *($4)
	*($1 + [120]) = *($5)
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $3
	*(($1 + [148])) = [0]
	$5 = ($4 + [16])
	*(($1 + [136])) = $5
	*(($1 + [132])) = $5
	*($1 + [128]) = $4
	*($1 + [140 align=4]) = (int_64)0
	CALL $3(($1 + [140]), [4])
	$4 = *($1 + [140])
	CALL eosio_assert(((int_32)(*(($1 + [144])) - $4) > (int_32)[3]), [8528])
	CALL memcpy($4, ($1 + [224]), [4])
	CALL $4(($1 + [96]), ($1 + [112]))
	$4 = *($1 + [96])
	CALL send_inline($4, (*($1 + [100]) - $4))
	$4 = *($1 + [96])
	if ( ($4 == 0) ){ goto $label$1 }
	*($1 + [100]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *($1 + [140])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($1 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($1 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$2 = CALL current_time()
	*(($1 + [140])) = (int_64)0
	*(($1 + [156])) = (int_64)0
	*(($1 + [164])) = (int_64)0
	*($1 + [124]) = [0]
	*($1 + [128]) = [0]
	*($1 + [132 align=4]) = (int_64)0
	*($1 + [148 align=4]) = (int_64)0
	*($1 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$2 = *($0)
	*($1 + [80]) = [8192]
	*($1 + [84]) = CALL $32([8192])
	*($1 + [16]) = *($1 + [80])
	$4 = CALL $2(($1 + [88]), ($1 + [16]))
	*($1 + [96]) = $2
	*($1 + [104]) = *($4)
	*($1 + [72]) = [8310]
	*($1 + [76]) = CALL $32([8310])
	*($1 + [8]) = *($1 + [72])
	$4 = CALL $2(($1 + [224]), ($1 + [8]))
	*($1 + [56]) = [8323]
	*($1 + [60]) = CALL $32([8323])
	*($1) = *($1 + [56])
	CALL $5(($1 + [148]), ($1 + [96]), $4, CALL $2(($1 + [64]), $1), ($1 + [48]))
	$2 = *($0)
	*($1 + [132]) = [20]
	*($1 + [104]) = (int_64)0
	*($1 + [96]) = $2
	CALL $6(($1 + [224]), ($1 + [112]))
	$0 = *($1 + [224])
	CALL send_deferred(($1 + [96]), $2, $0, (*($1 + [228]) - $0), [1])
	$0 = *($1 + [224])
	if ( ($0 == 0) ){ goto $label$4 }
	*($1 + [228]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	CALL $7(($1 + [112]))
	$global$0 = ($1 + [240])
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [240])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = *($0)
	*($1 + [208]) = [8192]
	*($1 + [212]) = CALL $32([8192])
	*($1 + [40]) = *($1 + [208])
	$3 = *(CALL $2(($1 + [216]), ($1 + [40])))
	*($1 + [192]) = [8199]
	*($1 + [196]) = CALL $32([8199])
	*($1 + [32]) = *($1 + [192])
	$4 = CALL $2(($1 + [200]), ($1 + [32]))
	*($1 + [176]) = [8298]
	*($1 + [180]) = CALL $32([8298])
	*($1 + [24]) = *($1 + [176])
	$5 = CALL $2(($1 + [184]), ($1 + [24]))
	*($1 + [224]) = [1]
	*($1 + [112]) = *($4)
	*($1 + [120]) = *($5)
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $3
	*(($1 + [148])) = [0]
	$5 = ($4 + [16])
	*(($1 + [136])) = $5
	*(($1 + [132])) = $5
	*($1 + [128]) = $4
	*($1 + [140 align=4]) = (int_64)0
	CALL $3(($1 + [140]), [4])
	$4 = *($1 + [140])
	CALL eosio_assert(((int_32)(*(($1 + [144])) - $4) > (int_32)[3]), [8528])
	CALL memcpy($4, ($1 + [224]), [4])
	CALL $4(($1 + [96]), ($1 + [112]))
	$4 = *($1 + [96])
	CALL send_inline($4, (*($1 + [100]) - $4))
	$4 = *($1 + [96])
	if ( ($4 == 0) ){ goto $label$1 }
	*($1 + [100]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *($1 + [140])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($1 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($1 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$2 = CALL current_time()
	*(($1 + [140])) = (int_64)0
	*(($1 + [156])) = (int_64)0
	*(($1 + [164])) = (int_64)0
	*($1 + [124]) = [0]
	*($1 + [128]) = [0]
	*($1 + [132 align=4]) = (int_64)0
	*($1 + [148 align=4]) = (int_64)0
	*($1 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$2 = *($0)
	*($1 + [80]) = [8192]
	*($1 + [84]) = CALL $32([8192])
	*($1 + [16]) = *($1 + [80])
	$4 = CALL $2(($1 + [88]), ($1 + [16]))
	*($1 + [96]) = $2
	*($1 + [104]) = *($4)
	*($1 + [72]) = [8310]
	*($1 + [76]) = CALL $32([8310])
	*($1 + [8]) = *($1 + [72])
	$4 = CALL $2(($1 + [224]), ($1 + [8]))
	*($1 + [56]) = [8335]
	*($1 + [60]) = CALL $32([8335])
	*($1) = *($1 + [56])
	CALL $5(($1 + [148]), ($1 + [96]), $4, CALL $2(($1 + [64]), $1), ($1 + [48]))
	$2 = *($0)
	*($1 + [132]) = [7]
	*($1 + [104]) = (int_64)0
	*($1 + [96]) = ((int_64)$2 + (int_64)1)
	CALL $6(($1 + [224]), ($1 + [112]))
	$0 = *($1 + [224])
	CALL send_deferred(($1 + [96]), $2, $0, (*($1 + [228]) - $0), [1])
	$0 = *($1 + [224])
	if ( ($0 == 0) ){ goto $label$4 }
	*($1 + [228]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	CALL $7(($1 + [112]))
	$global$0 = ($1 + [240])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $18($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $3($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $19($2, $1)
	CALL $21(CALL $20(CALL $20($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $3($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8528])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8528])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $17(CALL $16($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $30($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$6 = ($2 + [16])
	*($3) = $6
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $6
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($7 + [40])
	$2 = *($0)
	$11 = *(($0 + [4]))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $11)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($11 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$6 = ($8 + [-24])
	*($5) = *($6)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($6) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8371])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8476])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8409])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8476])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $30($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [608])
	$global$0 = $1
	$2 = *($0)
	*($1 + [576]) = [8192]
	*($1 + [580]) = CALL $32([8192])
	*($1 + [120]) = *($1 + [576])
	$3 = *(CALL $2(($1 + [584]), ($1 + [120])))
	*($1 + [560]) = [8199]
	*($1 + [564]) = CALL $32([8199])
	*($1 + [112]) = *($1 + [560])
	$4 = CALL $2(($1 + [568]), ($1 + [112]))
	*($1 + [544]) = [8298]
	*($1 + [548]) = CALL $32([8298])
	*($1 + [104]) = *($1 + [544])
	$5 = CALL $2(($1 + [552]), ($1 + [104]))
	*($1 + [288]) = [0]
	*($1 + [480]) = *($4)
	*($1 + [488]) = *($5)
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $3
	*(($1 + [516])) = [0]
	$5 = ($4 + [16])
	*(($1 + [504])) = $5
	*(($1 + [500])) = $5
	*($1 + [496]) = $4
	*($1 + [508 align=4]) = (int_64)0
	CALL $3(($1 + [508]), [4])
	$4 = *($1 + [508])
	CALL eosio_assert(((int_32)(*(($1 + [512])) - $4) > (int_32)[3]), [8528])
	CALL memcpy($4, ($1 + [288]), [4])
	CALL $4(($1 + [384]), ($1 + [480]))
	$4 = *($1 + [384])
	CALL send_inline($4, (*($1 + [388]) - $4))
	$4 = *($1 + [384])
	if ( ($4 == 0) ){ goto $label$1 }
	*($1 + [388]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *($1 + [508])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($1 + [512])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$4 = *($1 + [496])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($1 + [500])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$2 = CALL current_time()
	*((($1 + [480]) + [28])) = (int_64)0
	*((($1 + [480]) + [44])) = (int_64)0
	*((($1 + [480]) + [52])) = (int_64)0
	*($1 + [492]) = [0]
	*($1 + [496]) = [0]
	*($1 + [500 align=4]) = (int_64)0
	*($1 + [516 align=4]) = (int_64)0
	*($1 + [480]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$2 = *($0)
	*($1 + [464]) = [8192]
	*($1 + [468]) = CALL $32([8192])
	*($1 + [96]) = *($1 + [464])
	$4 = CALL $2(($1 + [472]), ($1 + [96]))
	*($1 + [384]) = $2
	*($1 + [392]) = *($4)
	*($1 + [456]) = [8310]
	*($1 + [460]) = CALL $32([8310])
	*($1 + [88]) = *($1 + [456])
	$4 = CALL $2(($1 + [288]), ($1 + [88]))
	*($1 + [448]) = [8323]
	*($1 + [452]) = CALL $32([8323])
	*($1 + [80]) = *($1 + [448])
	CALL $5((($1 + [480]) + [36]), ($1 + [384]), $4, CALL $2(($1 + [192]), ($1 + [80])), ($1 + [176]))
	$2 = *($0)
	*($1 + [500]) = [20]
	*($1 + [392]) = (int_64)0
	*($1 + [384]) = $2
	CALL $6(($1 + [288]), ($1 + [480]))
	$4 = *($1 + [288])
	CALL send_deferred(($1 + [384]), $2, $4, (*($1 + [292]) - $4), [1])
	$4 = *($1 + [288])
	if ( ($4 == 0) ){ goto $label$4 }
	*($1 + [292]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$2 = CALL current_time()
	*((($1 + [384]) + [28])) = (int_64)0
	*((($1 + [384]) + [44])) = (int_64)0
	*((($1 + [384]) + [52])) = (int_64)0
	*($1 + [396]) = [0]
	*($1 + [400]) = [0]
	*($1 + [404 align=4]) = (int_64)0
	*($1 + [420 align=4]) = (int_64)0
	*($1 + [384]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$2 = *($0)
	*($1 + [368]) = [8192]
	*($1 + [372]) = CALL $32([8192])
	*($1 + [72]) = *($1 + [368])
	$4 = CALL $2(($1 + [376]), ($1 + [72]))
	*($1 + [288]) = $2
	*($1 + [296]) = *($4)
	*($1 + [360]) = [8310]
	*($1 + [364]) = CALL $32([8310])
	*($1 + [64]) = *($1 + [360])
	$4 = CALL $2(($1 + [192]), ($1 + [64]))
	*($1 + [352]) = [8335]
	*($1 + [356]) = CALL $32([8335])
	*($1 + [56]) = *($1 + [352])
	CALL $5((($1 + [384]) + [36]), ($1 + [288]), $4, CALL $2(($1 + [176]), ($1 + [56])), ($1 + [592]))
	$2 = *($0)
	*($1 + [404]) = [7]
	*($1 + [296]) = (int_64)0
	*($1 + [288]) = ((int_64)$2 + (int_64)1)
	CALL $6(($1 + [192]), ($1 + [384]))
	$4 = *($1 + [192])
	CALL send_deferred(($1 + [288]), $2, $4, (*($1 + [196]) - $4), [1])
	$4 = *($1 + [192])
	if ( ($4 == 0) ){ goto $label$5 }
	*($1 + [196]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$2 = CALL current_time()
	*((($1 + [288]) + [28])) = (int_64)0
	*((($1 + [288]) + [44])) = (int_64)0
	*((($1 + [288]) + [52])) = (int_64)0
	*($1 + [300]) = [0]
	*($1 + [304]) = [0]
	*($1 + [308 align=4]) = (int_64)0
	*($1 + [324 align=4]) = (int_64)0
	*($1 + [288]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$2 = *($0)
	*($1 + [272]) = [8192]
	*($1 + [276]) = CALL $32([8192])
	*($1 + [48]) = *($1 + [272])
	$4 = CALL $2(($1 + [280]), ($1 + [48]))
	*($1 + [192]) = $2
	*($1 + [200]) = *($4)
	*($1 + [264]) = [8310]
	*($1 + [268]) = CALL $32([8310])
	*($1 + [40]) = *($1 + [264])
	$4 = CALL $2(($1 + [176]), ($1 + [40]))
	*($1 + [256]) = [8347]
	*($1 + [260]) = CALL $32([8347])
	*($1 + [32]) = *($1 + [256])
	CALL $5((($1 + [288]) + [36]), ($1 + [192]), $4, CALL $2(($1 + [592]), ($1 + [32])), ($1 + [144]))
	$2 = *($0)
	*($1 + [308]) = [10]
	*($1 + [200]) = (int_64)0
	*($1 + [192]) = ((int_64)$2 + (int_64)2)
	CALL $6(($1 + [176]), ($1 + [288]))
	$4 = *($1 + [176])
	CALL send_deferred(($1 + [192]), $2, $4, (*($1 + [180]) - $4), [1])
	$4 = *($1 + [176])
	if ( ($4 == 0) ){ goto $label$6 }
	*($1 + [180]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$2 = CALL current_time()
	*((($1 + [192]) + [28])) = (int_64)0
	*((($1 + [192]) + [44])) = (int_64)0
	*((($1 + [192]) + [52])) = (int_64)0
	*($1 + [204]) = [0]
	*($1 + [208]) = [0]
	*($1 + [212 align=4]) = (int_64)0
	*($1 + [228 align=4]) = (int_64)0
	*($1 + [192]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$2 = *($0)
	*($1 + [160]) = [8192]
	*($1 + [164]) = CALL $32([8192])
	*($1 + [24]) = *($1 + [160])
	$4 = CALL $2(($1 + [168]), ($1 + [24]))
	*($1 + [176]) = $2
	*($1 + [184]) = *($4)
	*($1 + [152]) = [8310]
	*($1 + [156]) = CALL $32([8310])
	*($1 + [16]) = *($1 + [152])
	$4 = CALL $2(($1 + [592]), ($1 + [16]))
	*($1 + [136]) = [8359]
	*($1 + [140]) = CALL $32([8359])
	*($1 + [8]) = *($1 + [136])
	CALL $5((($1 + [192]) + [36]), ($1 + [176]), $4, CALL $2(($1 + [144]), ($1 + [8])), ($1 + [128]))
	$2 = *($0)
	*($1 + [212]) = [60]
	*($1 + [184]) = (int_64)0
	*($1 + [176]) = ((int_64)$2 + (int_64)3)
	CALL $6(($1 + [592]), ($1 + [192]))
	$0 = *($1 + [592])
	CALL send_deferred(($1 + [176]), $2, $0, (*($1 + [596]) - $0), [1])
	$0 = *($1 + [592])
	if ( ($0 == 0) ){ goto $label$7 }
	*($1 + [596]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$7
	CALL $7(($1 + [192]))
	CALL $7(($1 + [288]))
	CALL $7(($1 + [384]))
	CALL $7(($1 + [480]))
	$global$0 = ($1 + [608])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [96])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)-6533248811612335105) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-6533248811612402688) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)-6533248811612385792) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-6533248811612368896) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3 + [16]) = *($3 + [72])
	CALL $15($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)-6533248811612335104) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)-6425099438091403264) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4157529782108553216) ){ goto $label$1 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [2]
	*($3 + [32]) = *($3 + [56])
	CALL $15($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [92]) = [0]
	*($3 + [88]) = [3]
	*($3) = *($3 + [88])
	CALL $15($1, $1, $3)
	goto $label$1 
	
.LABEL $label$4
	*($3 + [84]) = [0]
	*($3 + [80]) = [4]
	*($3 + [8]) = *($3 + [80])
	CALL $15($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [68]) = [0]
	*($3 + [64]) = [5]
	*($3 + [24]) = *($3 + [64])
	CALL $15($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [52]) = [0]
	*($3 + [48]) = [6]
	*($3 + [40]) = *($3 + [48])
	CALL $15($1, $1, ($3 + [40]))
	
.LABEL $label$1
	CALL $31([0])
	$global$0 = ($3 + [96])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $36($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $39($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8528])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8528])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8528])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8528])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [240])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = *($0)
	*($1 + [208]) = [8192]
	*($1 + [212]) = CALL $32([8192])
	*($1 + [40]) = *($1 + [208])
	$3 = *(CALL $2(($1 + [216]), ($1 + [40])))
	*($1 + [192]) = [8199]
	*($1 + [196]) = CALL $32([8199])
	*($1 + [32]) = *($1 + [192])
	$4 = CALL $2(($1 + [200]), ($1 + [32]))
	*($1 + [176]) = [8298]
	*($1 + [180]) = CALL $32([8298])
	*($1 + [24]) = *($1 + [176])
	$5 = CALL $2(($1 + [184]), ($1 + [24]))
	*($1 + [224]) = [2]
	*($1 + [112]) = *($4)
	*($1 + [120]) = *($5)
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $3
	*(($1 + [148])) = [0]
	$5 = ($4 + [16])
	*(($1 + [136])) = $5
	*(($1 + [132])) = $5
	*($1 + [128]) = $4
	*($1 + [140 align=4]) = (int_64)0
	CALL $3(($1 + [140]), [4])
	$4 = *($1 + [140])
	CALL eosio_assert(((int_32)(*(($1 + [144])) - $4) > (int_32)[3]), [8528])
	CALL memcpy($4, ($1 + [224]), [4])
	CALL $4(($1 + [96]), ($1 + [112]))
	$4 = *($1 + [96])
	CALL send_inline($4, (*($1 + [100]) - $4))
	$4 = *($1 + [96])
	if ( ($4 == 0) ){ goto $label$1 }
	*($1 + [100]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *($1 + [140])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($1 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($1 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$2 = CALL current_time()
	*(($1 + [140])) = (int_64)0
	*(($1 + [156])) = (int_64)0
	*(($1 + [164])) = (int_64)0
	*($1 + [124]) = [0]
	*($1 + [128]) = [0]
	*($1 + [132 align=4]) = (int_64)0
	*($1 + [148 align=4]) = (int_64)0
	*($1 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$2 = *($0)
	*($1 + [80]) = [8192]
	*($1 + [84]) = CALL $32([8192])
	*($1 + [16]) = *($1 + [80])
	$4 = CALL $2(($1 + [88]), ($1 + [16]))
	*($1 + [96]) = $2
	*($1 + [104]) = *($4)
	*($1 + [72]) = [8310]
	*($1 + [76]) = CALL $32([8310])
	*($1 + [8]) = *($1 + [72])
	$4 = CALL $2(($1 + [224]), ($1 + [8]))
	*($1 + [56]) = [8347]
	*($1 + [60]) = CALL $32([8347])
	*($1) = *($1 + [56])
	CALL $5(($1 + [148]), ($1 + [96]), $4, CALL $2(($1 + [64]), $1), ($1 + [48]))
	$2 = *($0)
	*($1 + [132]) = [10]
	*($1 + [104]) = (int_64)0
	*($1 + [96]) = ((int_64)$2 + (int_64)2)
	CALL $6(($1 + [224]), ($1 + [112]))
	$0 = *($1 + [224])
	CALL send_deferred(($1 + [96]), $2, $0, (*($1 + [228]) - $0), [1])
	$0 = *($1 + [224])
	if ( ($0 == 0) ){ goto $label$4 }
	*($1 + [228]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	CALL $7(($1 + [112]))
	$global$0 = ($1 + [240])
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [240])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = *($0)
	*($1 + [208]) = [8192]
	*($1 + [212]) = CALL $32([8192])
	*($1 + [40]) = *($1 + [208])
	$3 = *(CALL $2(($1 + [216]), ($1 + [40])))
	*($1 + [192]) = [8199]
	*($1 + [196]) = CALL $32([8199])
	*($1 + [32]) = *($1 + [192])
	$4 = CALL $2(($1 + [200]), ($1 + [32]))
	*($1 + [176]) = [8298]
	*($1 + [180]) = CALL $32([8298])
	*($1 + [24]) = *($1 + [176])
	$5 = CALL $2(($1 + [184]), ($1 + [24]))
	*($1 + [112]) = *($4)
	*($1 + [120]) = *($5)
	*($1 + [224]) = [3]
	*(($4 = CALL _Znwj([16]))) = $2
	*($4 + [8]) = $3
	*(($1 + [148])) = [0]
	$5 = ($4 + [16])
	*(($1 + [136])) = $5
	*(($1 + [132])) = $5
	*($1 + [128]) = $4
	*($1 + [140 align=4]) = (int_64)0
	CALL $3(($1 + [140]), [4])
	$4 = *($1 + [140])
	CALL eosio_assert(((int_32)(*(($1 + [144])) - $4) > (int_32)[3]), [8528])
	CALL memcpy($4, ($1 + [224]), [4])
	CALL $4(($1 + [96]), ($1 + [112]))
	$4 = *($1 + [96])
	CALL send_inline($4, (*($1 + [100]) - $4))
	$4 = *($1 + [96])
	if ( ($4 == 0) ){ goto $label$1 }
	*($1 + [100]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *($1 + [140])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($1 + [144])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$4 = *($1 + [128])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($1 + [132])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$2 = CALL current_time()
	*(($1 + [140])) = (int_64)0
	*(($1 + [156])) = (int_64)0
	*(($1 + [164])) = (int_64)0
	*($1 + [124]) = [0]
	*($1 + [128]) = [0]
	*($1 + [132 align=4]) = (int_64)0
	*($1 + [148 align=4]) = (int_64)0
	*($1 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	$2 = *($0)
	*($1 + [80]) = [8192]
	*($1 + [84]) = CALL $32([8192])
	*($1 + [16]) = *($1 + [80])
	$4 = CALL $2(($1 + [88]), ($1 + [16]))
	*($1 + [96]) = $2
	*($1 + [104]) = *($4)
	*($1 + [72]) = [8310]
	*($1 + [76]) = CALL $32([8310])
	*($1 + [8]) = *($1 + [72])
	$4 = CALL $2(($1 + [224]), ($1 + [8]))
	*($1 + [56]) = [8359]
	*($1 + [60]) = CALL $32([8359])
	*($1) = *($1 + [56])
	CALL $5(($1 + [148]), ($1 + [96]), $4, CALL $2(($1 + [64]), $1), ($1 + [48]))
	$2 = *($0)
	*($1 + [132]) = [60]
	*($1 + [104]) = (int_64)0
	*($1 + [96]) = ((int_64)$2 + (int_64)3)
	CALL $6(($1 + [224]), ($1 + [112]))
	$0 = *($1 + [224])
	CALL send_deferred(($1 + [96]), $2, $0, (*($1 + [228]) - $0), [1])
	$0 = *($1 + [224])
	if ( ($0 == 0) ){ goto $label$4 }
	*($1 + [228]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	CALL $7(($1 + [112]))
	$global$0 = ($1 + [240])
}

void .FUNC $12 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [16]) = [8199]
	*($1 + [20]) = CALL $32([8199])
	*($1 + [8]) = *($1 + [16])
	CALL require_auth(*(CALL $2(($1 + [24]), ($1 + [8]))))
	CALL $1($0)
	$global$0 = ($1 + [32])
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [48])
	$global$0 = $1
	*($1 + [32]) = [8199]
	*($1 + [36]) = CALL $32([8199])
	*($1 + [8]) = *($1 + [32])
	CALL require_auth(*(CALL $2(($1 + [40]), ($1 + [8]))))
	*($1 + [24]) = (int_64)0
	*($1 + [16]) = *($0)
	CALL cancel_deferred(($1 + [16]))
	*($1 + [24]) = (int_64)0
	*($1 + [16]) = ((int_64)*($0) + (int_64)1)
	CALL cancel_deferred(($1 + [16]))
	*($1 + [24]) = (int_64)0
	*($1 + [16]) = ((int_64)*($0) + (int_64)2)
	CALL cancel_deferred(($1 + [16]))
	*($1 + [24]) = (int_64)0
	*($1 + [16]) = ((int_64)*($0) + (int_64)3)
	CALL cancel_deferred(($1 + [16]))
	$global$0 = ($1 + [48])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8528])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8528])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $17($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8528])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8528])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8528])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $17(CALL $16($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $36($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8536])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $36($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8528])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8528])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8528])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8528])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8528])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8528])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $34(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8536])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $34(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0)
{
	return CALL $37([8556], $0)
}

void .FUNC $31 (int_32 $0)
{
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $38($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8212])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8548]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8552])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8548]) = [1]
	$2 = ($2 << [16])
	*([0] + [8552]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8552])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8552]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8548]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8548]) = [1]
	$3 = ($3 << [16])
	*([0] + [8552]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8552])
	
.LABEL $label$10
	*([0] + [8552]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $33())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $35($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16940])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16748]
	$3 = (((int_32)$1 * (int_32)[12]) + [16748])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}