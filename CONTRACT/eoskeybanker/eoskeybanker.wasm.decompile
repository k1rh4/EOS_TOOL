(data (i32.const 4) "\90i\00\00")
(data (i32.const 16) "0123456789abcdef\00")
(data (i32.const 48) "the amount for bet should be no less then 1.0\00")
(data (i32.const 96) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 160) "token amount received from buying key is too low\00")
(data (i32.const 224) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 288) "invalid symbol name\00")
(data (i32.const 320) "cannot create objects in table of another contract\00")
(data (i32.const 384) "write\00")
(data (i32.const 400) "cannot pass end iterator to modify\00")
(data (i32.const 448) "object passed to modify is not in multi_index\00")
(data (i32.const 496) "cannot modify objects in table of another contract\00")
(data (i32.const 560) "attempt to add asset with different symbol\00")
(data (i32.const 608) "addition underflow\00")
(data (i32.const 640) "addition overflow\00")
(data (i32.const 672) "updater cannot change primary key when modifying an object\00")
(data (i32.const 736) "error reading iterator\00")
(data (i32.const 768) "read\00")
(data (i32.const 784) "no such dapp\00")
(data (i32.const 800) "attempt to subtract asset with different symbol\00")
(data (i32.const 848) "subtraction underflow\00")
(data (i32.const 880) "subtraction overflow\00")
(data (i32.const 912) "you should buy with EOS\00")
(data (i32.const 944) "cannot buy with nothing\00")
(data (i32.const 976) "no such _dapps\00")
(data (i32.const 992) "payouts is empty\00")
(data (i32.const 1024) "see above\00")
(data (i32.const 1040) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1104) "out of quota\00")
(data (i32.const 1120) "active\00")
(data (i32.const 1136) "airdrop\00")
(data (i32.const 1152) "eosio.token\00")
(data (i32.const 1168) "transfer\00")
(data (i32.const 1184) "token amount received from selling key is too low\00")
(data (i32.const 1248) " selled \00")
(data (i32.const 1264) "world\00")
(data (i32.const 1280) ", and \00")
(data (i32.const 1296) "got \00")
(data (i32.const 1312) "you can only sell key here, we have nothing else to sell\00")
(data (i32.const 1376) "cannot sell from nothing\00")
(data (i32.const 1408) "you are selling over the quota\00")
(data (i32.const 1440) "\b0\05\00\00")
(data (i32.const 1456) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1504) "bancorinvest::assert_enough_eos no resource row\00")
(data (i32.const 1552) "no enough eos out\00")
(data (i32.const 1584) "bancorinvest::sellkey no resource row\00")
(data (i32.const 1632) "insufficient quota\00")
(data (i32.const 1664) "cannot pass end iterator to erase\00")
(data (i32.const 1712) "cannot increment end iterator\00")
(data (i32.const 1744) ", and got \00")
(data (i32.const 1760) "object passed to erase is not in multi_index\00")
(data (i32.const 1808) "cannot erase objects in table of another contract\00")
(data (i32.const 1872) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1936) "eoswinnerio1\00")
(data (i32.const 1952) "the quota_rate should be >= 1 and < 50\00")
(data (i32.const 2000) "onerror\00")
(data (i32.const 2016) "eosio\00")
(data (i32.const 2032) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 2096) "get\00")
(data (i32.const 10496) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10592) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 10608) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 10624) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "require_auth2" (func $fimport$16 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$17 (param i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(export "memory" (memory $0))
(export "now" (func $0))
(export "_ZeqRK11checksum256S1_" (func $1))
(export "_ZeqRK11checksum160S1_" (func $2))
(export "_ZneRK11checksum160S1_" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN4comm6to_hexEPKcm" (func $5))
(export "_ZN4comm7to_hex2EPKcm" (func $6))
(export "_ZN12bancorinvest8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $7))
(export "_ZN12bancorinvest10dappbuykeyEyN5eosio5assetE" (func $9))
(export "_ZN12bancorinvest6buykeyEyN5eosio5assetE" (func $10))
(export "_ZN12bancorinvest15calc_dapp_quotaEy" (func $24))
(export "_ZN12bancorinvest11payfordapp2EyRKNSt3__16vectorI7payloadNS0_9allocatorIS2_EEEE" (func $25))
(export "_ZN12bancorinvest15withdraw_eos_toEN5eosio11multi_indexILy5308427987334787584ENS_11dappaccountEJEE14const_iteratorEyNS0_5assetENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE" (func $26))
(export "_ZN12bancorinvest15withdraw_key_toEN5eosio11multi_indexILy5308427987334787584ENS_11dappaccountEJEE14const_iteratorEyNS0_5assetENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE" (func $27))
(export "_ZN12bancorinvest7airdropEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $36))
(export "_ZN12bancorinvest11dappsellkeyEyN5eosio5assetEy" (func $37))
(export "_ZN12bancorinvest17assert_enough_eosEN5eosio5assetE" (func $38))
(export "_ZN12bancorinvest7sellkeyEyN5eosio5assetE" (func $43))
(export "_ZN12bancorinvest7setdappEyx" (func $45))
(export "_ZN12bancorinvest6rmdappEy" (func $47))
(export "_ZN12bancorinvest14erase_accountsEv" (func $49))
(export "_ZN12bancorinvest8eraseallEv" (func $50))
(export "apply" (func $51))
(export "malloc" (func $70))
(export "free" (func $73))
(export "pow" (func $83))
(export "sqrt" (func $84))
(export "fabs" (func $85))
(export "scalbn" (func $86))
(export "memcmp" (func $87))
(export "strlen" (func $88))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $89 $47 $36 $45 $50 $25 $7 $43 $37)



void .FUNC _ZN12bancorinvest17assert_enough_eosEN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [1152]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$6 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$5 = *($0)
	*($8 + [16]) = $5
	*($8 + [8]) = $6
	$3 = [0]
	$7 = *($1 + [8])
	$2 = CALL db_find_i64($6, $5, (int_64)3607749779137757184, $7)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $40(($8 + [8]), $2)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($8 + [8])), [96])
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1504])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$7), [1040])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($1)), [1552])
	$1 = *($8 + [32])
	if ( ($1 == 0) ){ goto $label$8 }
	$0 = ($8 + [36])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $75($2)
	
.LABEL $label$12
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$11 }
	$3 = *(($8 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $1
	
.LABEL $label$9
	*($0) = $1
	CALL $75($3)
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [48])
}

void .FUNC _ZN12bancorinvest14erase_accountsEv (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	$1 = *($0)
	*($5) = $1
	*($5 + [8]) = $1
	*($5 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($1, $1, (int_64)-9025913900073946624, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $13($5, $0)
	
.LOOP $label$2:
	CALL eosio_assert([1], [1712])
	$4 = [0]
	$2 = CALL db_next_i64(*($0 + [28]), ($5 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $13($5, $2)
	
.LABEL $label$3
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [1664])
	CALL eosio_assert($2, [1712])
	$2 = CALL db_next_i64(*(($0 + [28])), ($5 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	CALL $13($5, $2)
	
.LABEL $label$4
	CALL $44($5, $0)
	$0 = $4
	if ( $4 ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($5 + [24])
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = ($5 + [28])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $75($4)
	
.LABEL $label$9
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($5 + [24]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $2
	
.LABEL $label$6
	*($3) = $2
	CALL $75($0)
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [1760])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1808])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1872])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $75($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $75($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC _ZN12bancorinvest7sellkeyEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	float_64 $8
	float_64 $9
	float_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [416])
	*([0] + [4]) = $17
	CALL require_auth($1)
	$15 = *($2)
	CALL eosio_assert(((int_64)$15 > (int_64)0), [1376])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1497713412), [1312])
	$3 = *(($0 + [104]))
	$7 = *(($0 + [108]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$11 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$1) ){ goto $label$1 }
	$7 = $11
	$6 = ($11 + [-24])
	$11 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [80])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$11 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$6), [96])
	goto $label$3 
	
.LABEL $label$4
	$11 = [0]
	$7 = CALL db_find_i64(*(($0 + [80])), *(($0 + [88])), (int_64)-9025913900073946624, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$11 = CALL $13($6, $7)
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$6), [96])
	
.LABEL $label$3
	$4 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($4, [1584])
	$3 = ($2 + [8])
	$7 = ($11 + [16])
	CALL eosio_assert(((int_64)*($7) == (int_64)*($3)), [1040])
	CALL eosio_assert(((int_64)*($11 + [8]) >= (int_64)*($2)), [1632])
	CALL eosio_assert(((int_64)*($7) == (int_64)*($3)), [1040])
	if ( ((int_64)*($11 + [8]) != (int_64)*($2)) ){ goto $label$6 }
	CALL eosio_assert($4, [1664])
	CALL eosio_assert($4, [1712])
	$7 = CALL db_next_i64(*($11 + [28]), ($17 + [144]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	CALL $13($6, $7)
	
.LABEL $label$7
	CALL $44($6, $11)
	goto $label$5 
	
.LABEL $label$6
	$12 = *($0)
	CALL eosio_assert($4, [400])
	CALL eosio_assert(((int_32)*($11 + [24]) == (int_32)$6), [448])
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)CALL $fimport$2()), [496])
	$13 = *($11)
	CALL eosio_assert(((int_64)*($3) == (int_64)*($7)), [800])
	$14 = (int_64)
	*($11 + [8]) = $14(*($11 + [8]) - *($2)))
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($11 + [8]) < (int_64)4611686018427387904), [880])
	CALL eosio_assert(((int_64)$13 == (int_64)*($11)), [672])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [144]), $11, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy((($17 + [144]) | [8]), ($11 + [8]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy((($17 + [144]) + [16]), $7, [8])
	CALL db_update_i64(*($11 + [28]), $12, ($17 + [144]), [24])
	$11 = ($0 + [96])
	if ( (uint_64)($13 <= *($11)) ){ goto $label$5 }
	*($11) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$11 = [0]
	*(($17 + [392])) = [0]
	*($17 + [376]) = (int_64)-1
	*($17 + [384]) = (int_64)0
	$13 = *($0)
	*($17 + [360]) = $13
	*($17 + [368]) = $13
	$6 = CALL db_find_i64($13, $13, (int_64)-7949128876922874880, (int_64)-7949128876922874880)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	$6 = CALL $11(($17 + [360]), $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($17 + [360])), [96])
	goto $label$8 
	
.LABEL $label$9
	$6 = ($0 + [48])
	
.LABEL $label$8
	*(($7 = (($17 + [328]) + [24]))) = *(($6 + [24]))
	*(($4 = (($17 + [328]) + [16]))) = *(($6 + [16]))
	*(($3 = (($17 + [328]) + [8]))) = *(($6 + [8]))
	*($17 + [328]) = *($6)
	$9 = *($3)
	$8 = (float_64)
	$10 = CALL pow(((float_64)((float_64)$8(*($4) - ((float_64)(CASTING float_64)(int_64 $15) / (float_64)(float_64)1e4))) / (float_64)*($17 + [328])) + (float_64)(float_64)1), (float_64)2)
	*($4) = $8
	$8 = *($7)
	$9 = ((float_64)$9 * (float_64)((float_64)$10 + (float_64)(float_64)-1))
	*($7) = $9
	$13 = (Rounds 0)(((float_64)(float_64))($8 - $9) * (float_64)(float_64)1e4)
	CALL eosio_assert(((int_64)$13) > (int_64)0), [1184])
	CALL $12(($17 + [360]), ($17 + [328]), *($0))
	*($17 + [320]) = (int_64)1397703940
	*($17 + [312]) = $13
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [224])
	$13 = (uint_64)*($17 + [320]) >> (uint_64)(int_64)8)
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	
.LOOP $label$14:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	$6 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$6 = [0]
	
.LABEL $label$10
	CALL eosio_assert($6, [288])
	$13 = *((($17 + [312]) + [8]))
	*((($17 + [296]) + [8])) = $13
	*((($17 + [8]) + [8])) = $13
	$13 = *($17 + [312])
	*($17 + [296]) = $13
	*($17 + [8]) = $13
	CALL _ZN12bancorinvest17assert_enough_eosEN5eosio5assetE($0, ($17 + [8]))
	*($17 + [24]) = $1
	CALL $39(($17 + [144]), ($17 + [24]))
	*(($17 + [164])) = [0]
	*($17 + [156 align=4]) = (int_64)0
	$6 = ($17 + [156])
	$11 = CALL strlen([1248])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$20 }
	*(($17 + [156])) = ($11 << [1])
	$6 = ($6 + [1])
	if ( $11 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$7 = (($11 + [16]) & [-16])
	$6 = CALL $74($7)
	*(($17 + [156])) = ($7 | [1])
	*(($17 + [164])) = $6
	*((($17 + [144]) + [16])) = $11
	
.LABEL $label$19
	CALL memcpy($6, [1248], $11)
	
.LABEL $label$18
	*(($6 + $11)) = [0]
	*(($17 + [176])) = [0]
	*($17 + [168]) = (int_64)0
	$6 = ($17 + [168])
	$11 = CALL strlen([1264])
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$23 }
	*(($17 + [168])) = ($11 << [1])
	$6 = ($6 + [1])
	if ( $11 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$7 = (($11 + [16]) & [-16])
	$6 = CALL $74($7)
	*(($17 + [168])) = ($7 | [1])
	*(($17 + [176])) = $6
	*(($17 + [172])) = $11
	
.LABEL $label$22
	CALL memcpy($6, [1264], $11)
	
.LABEL $label$21
	*(($6 + $11)) = [0]
	$11 = CALL $74([36])
	*($17 + [280]) = $11
	$6 = ($11 + [36])
	*($17 + [288]) = $6
	CALL $81($11, ($17 + [144]))
	CALL $81(($11 + [12]), (($17 + [144]) + [12]))
	CALL $81(($11 + [24]), (($17 + [144]) + [24]))
	*($17 + [284]) = $6
	if ( ((*($17 + [168]) & [1]) == 0) ){ goto $label$24 }
	CALL $75(*(($17 + [176])))
	
.LABEL $label$24
	if ( ((*($17 + [156]) & [1]) == 0) ){ goto $label$25 }
	CALL $75(*(($17 + [164])))
	
.LABEL $label$25
	if ( ((*($17 + [144]) & [1]) == 0) ){ goto $label$26 }
	CALL $75(*($17 + [152]))
	
.LABEL $label$26
	*($17 + [24]) = $1
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [144]), ($17 + [24]), [8])
	*($17 + [88]) = [9]
	CALL eosio_assert([1], [384])
	CALL memcpy((($17 + [144]) | [8]), ($17 + [88]), [1])
	CALL eosio_assert([1], [384])
	CALL memcpy((($17 + [144]) | [9]), [1248], [9])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [162]), $2, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [170]), ($2 + [8]), [8])
	*($17 + [88]) = [11]
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [178]), ($17 + [88]), [1])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [179]), [1744], [11])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [190]), ($17 + [312]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [198]), (($17 + [312]) + [8]), [8])
	*($17 + [88]) = [0]
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [206]), ($17 + [88]), [1])
	*((($17 + [128]) + [8])) = [0]
	*($17 + [128]) = (int_64)0
	$11 = CALL strlen(($17 + [144]))
	if ( ((uint_32)$11 > (uint_32)[-17]) ){ goto $label$15 }
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$29 }
	*($17 + [128]) = ($11 << [1])
	$6 = (($17 + [128]) | [1])
	if ( $11 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$7 = (($11 + [16]) & [-16])
	$6 = CALL $74($7)
	*($17 + [128]) = ($7 | [1])
	*($17 + [136]) = $6
	*($17 + [132]) = $11
	
.LABEL $label$28
	CALL memcpy($6, ($17 + [144]), $11)
	
.LABEL $label$27
	*(($6 + $11)) = [0]
	$5 = *($0)
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [1120]
	$14 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$13 > (uint_64)(int_64)5) ){ goto $label$35 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$6 = ($6 + [165])
	goto $label$33 
	
.LABEL $label$35
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$31
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$30 }
	*($17 + [80]) = $14
	*($17 + [72]) = $5
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [1152]
	$14 = (int_64)0
	
.LOOP $label$36:
	if ( ((uint_64)$13 > (uint_64)(int_64)10) ){ goto $label$41 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$6 = ($6 + [165])
	goto $label$39 
	
.LABEL $label$41
	$15 = (int_64)0
	if ( ((int_64)$13 == (int_64)11) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$40
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$38
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$37
	$11 = ($11 + [1])
	$12 = ((int_64)$12 + (int_64)-5)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)1)
	if ( ((int_64)$13 != (int_64)13) ){ goto $label$36 }
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [1168]
	$16 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$13 > (uint_64)(int_64)7) ){ goto $label$47 }
	$6 = *($11)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$6 = ($6 + [165])
	goto $label$45 
	
.LABEL $label$47
	$15 = (int_64)0
	if ( ((uint_64)$13 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$43
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$42 }
	*(($17 + [44])) = *($17 + [316])
	*($17 + [32]) = $1
	*(($17 + [52])) = *(($17 + [324]))
	*(($17 + [48])) = *(($17 + [320]))
	*($17 + [24]) = $5
	*($17 + [40]) = *($17 + [312])
	CALL $81(($17 + [56]), ($17 + [128]))
	$11 = CALL $34(($17 + [88]), ($17 + [72]), $14, $16, ($17 + [24]))
	CALL $29(($17 + [400]), $11)
	$6 = *($17 + [400])
	CALL send_inline($6, (*($17 + [404]) - $6))
	$6 = *($17 + [400])
	if ( ($6 == 0) ){ goto $label$48 }
	*($17 + [404]) = $6
	CALL $75($6)
	
.LABEL $label$48
	$6 = *($11 + [28])
	if ( ($6 == 0) ){ goto $label$49 }
	*(($11 + [32])) = $6
	CALL $75($6)
	
.LABEL $label$49
	$6 = *($11 + [16])
	if ( ($6 == 0) ){ goto $label$50 }
	*(($11 + [20])) = $6
	CALL $75($6)
	
.LABEL $label$50
	if ( ((*($17 + [56]) & [1]) == 0) ){ goto $label$51 }
	CALL $75(*(($17 + [64])))
	
.LABEL $label$51
	if ( ((*($17 + [128]) & [1]) == 0) ){ goto $label$52 }
	CALL $75(*($17 + [136]))
	
.LABEL $label$52
	$7 = *($17 + [280])
	if ( ($7 == 0) ){ goto $label$53 }
	$11 = *($17 + [284])
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$54 }
	$6 = ([0] - $7)
	$11 = ($11 + [-12])
	
.LOOP $label$55:
	if ( ((*($11) & [1]) == 0) ){ goto $label$56 }
	CALL $75(*(($11 + [8])))
	
.LABEL $label$56
	$11 = ($11 + [-12])
	if ( ((int_32)($11 + $6) != (int_32)[-12]) ){ goto $label$55 }
	
.LABEL $label$54
	*($17 + [284]) = $7
	CALL $75($7)
	
.LABEL $label$53
	$7 = *($17 + [384])
	if ( ($7 == 0) ){ goto $label$57 }
	$0 = ($17 + [388])
	$11 = *($0)
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$59 }
	
.LOOP $label$60:
	$11 = ($11 + [-24])
	$6 = *($11)
	*($11) = [0]
	if ( ($6 == 0) ){ goto $label$61 }
	CALL $75($6)
	
.LABEL $label$61
	if ( ((int_32)$7 != (int_32)$11) ){ goto $label$60 }
	$11 = *(($17 + [384]))
	goto $label$58 
	
.LABEL $label$59
	$11 = $7
	
.LABEL $label$58
	*($0) = $7
	CALL $75($11)
	
.LABEL $label$57
	*([0] + [4]) = ($17 + [416])
	return (unreachable)
	
.LABEL $label$17
	CALL $76($6)
	
.LABEL $label$16
	CALL $76($6)
	
.LABEL $label$15
	CALL $76(($17 + [128]))
	(unreachable)
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $75($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [224])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [288])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [768])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [768])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [736])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $74([32])
	$6 = CALL $41($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $42(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $75($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC _ZN12bancorinvest6rmdappEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1936]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($4)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	*(($9 + [32])) = [0]
	*($9 + [16]) = (int_64)-1
	*($9 + [24]) = (int_64)0
	$6 = *($0)
	*($9) = $6
	*($9 + [8]) = $6
	$4 = CALL db_find_i64($6, $6, (int_64)5308427987334787584, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $8($9, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$9), [96])
	CALL eosio_assert([1], [1664])
	CALL eosio_assert([1], [1712])
	$2 = CALL db_next_i64(*($4 + [36]), ($9 + [40]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$6 }
	CALL $8($9, $2)
	
.LABEL $label$6
	CALL $48($9, $4)
	
.LABEL $label$5
	$0 = *($9 + [24])
	if ( ($0 == 0) ){ goto $label$7 }
	$3 = ($9 + [28])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $75($2)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($9 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $0
	
.LABEL $label$8
	*($3) = $0
	CALL $75($4)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$3 = *($0 + [4])
	$2 = *($0)
	CALL eosio_assert([1], [224])
	$4 = (int_64)5850443
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [288])
	*(($1 + [16])) = (int_64)1497713412
	*($1 + [8]) = (int_64)0
	*($1) = *(*($3))
	*($1 + [24]) = *(*($3 + [4]))
	$6 = $8
	$5 = ($6 + [-32])
	*([0] + [4]) = $5
	*($7 + [12]) = $5
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($7 + [24]) = ($7 + [8])
	*($7 + [36]) = ($1 + [8])
	*($7 + [32]) = $1
	*($7 + [40]) = ($1 + [24])
	CALL $21(($7 + [32]), ($7 + [24]))
	$4 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)5308427987334787584, *(*($0 + [8])), $4, $5, [32])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($7 + [48])
}

void .FUNC _ZN12bancorinvest7setdappEyx (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [144])
	*([0] + [4]) = $10
	*($10 + [48]) = $1
	*($10 + [40]) = $2
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1936]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)-1) <= (int_64)49), [1952])
	$5 = [0]
	*(($10 + [32])) = [0]
	*($10 + [16]) = (int_64)-1
	*($10 + [24]) = (int_64)0
	$7 = *($0)
	*($10) = $7
	*($10 + [8]) = $7
	$3 = CALL db_find_i64($7, $7, (int_64)5308427987334787584, $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$8 }
	$5 = CALL $8($10, $3)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$10), [96])
	$6 = *($0)
	CALL eosio_assert([1], [400])
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$10), [448])
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$2()), [496])
	*($5 + [24]) = *($10 + [40])
	$7 = *($5)
	CALL eosio_assert([1], [672])
	*($10 + [112]) = (($10 + [64]) + [32])
	*($10 + [108]) = ($10 + [64])
	*($10 + [104]) = ($10 + [64])
	*($10 + [120]) = ($10 + [104])
	*($10 + [132]) = ($5 + [8])
	*($10 + [128]) = $5
	*($10 + [136]) = ($5 + [24])
	CALL $21(($10 + [128]), ($10 + [120]))
	CALL db_update_i64(*($5 + [36]), $6, ($10 + [64]), [32])
	$5 = ($10 + [16])
	if ( (uint_64)($7 <= *($5)) ){ goto $label$7 }
	*($5) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$0 = *($10 + [24])
	if ( $0 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$7 = *($0)
	*($10 + [108]) = ($10 + [40])
	*($10 + [104]) = ($10 + [48])
	*($10 + [128]) = $7
	CALL eosio_assert(((int_64)*($10) == (int_64)CALL $fimport$2()), [320])
	*($10 + [68]) = ($10 + [104])
	*($10 + [64]) = $10
	*($10 + [72]) = ($10 + [128])
	*(($0 = CALL $74([48])) + [16]) = (int_64)1398362884
	*($0 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$7 = (int_64)5462355
	
.LOOP $label$10:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	CALL eosio_assert($3, [288])
	*($0 + [32]) = $10
	CALL $46(($10 + [64]), $0)
	*($10 + [120]) = $0
	$7 = *($0)
	*($10 + [64]) = $7
	$3 = *($0 + [36])
	*($10 + [60]) = $3
	$4 = ($10 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($10 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $3
	*($10 + [120]) = [0]
	*($5) = $0
	*($4) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $23(($10 + [24]), ($10 + [120]), ($10 + [64]), ($10 + [60]))
	
.LABEL $label$13
	$5 = *($10 + [120])
	*($10 + [120]) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $75($5)
	
.LABEL $label$7
	$0 = *($10 + [24])
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = ($10 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $75($3)
	
.LABEL $label$18
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$17 }
	$5 = *(($10 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$5 = $0
	
.LABEL $label$15
	*($4) = $0
	CALL $75($5)
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [144])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [1760])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1808])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1872])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $75($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $75($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [736])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [12]) = $4
	*($8 + [8]) = $4
	*($8 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$2 = ($0 + [24])
	*(($4 = CALL $74([48])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$3 = ($4 + [8])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [288])
	*($4 + [32]) = $0
	*($8 + [24]) = ($8 + [8])
	*($8 + [36]) = $3
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + [24])
	CALL $22(($8 + [32]), ($8 + [24]))
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [32]) = $7
	$6 = *($4 + [36])
	*($8 + [4]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $23($2, ($8 + [24]), ($8 + [32]), ($8 + [4]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $75($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC _ZN12bancorinvest10dappbuykeyEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	float_64 $9
	float_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [160])
	*([0] + [4]) = $14
	CALL require_auth($1)
	*((($14 + [40]) + [32])) = [0]
	*($14 + [56]) = (int_64)-1
	*($14 + [64]) = (int_64)0
	$12 = *($0)
	*($14 + [40]) = $12
	*($14 + [48]) = $12
	$3 = [0]
	$13 = CALL db_find_i64($12, $12, (int_64)5308427987334787584, $1)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $8(($14 + [40]), $13)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($14 + [40])), [96])
	
.LABEL $label$1
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [784])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [912])
	$12 = *($2)
	CALL eosio_assert(((int_64)$12 > (int_64)0), [944])
	$2 = ($0 + [48])
	$13 = ($0 + [8])
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)*(($0 + [32]))) ){ goto $label$4 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$13), [96])
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*($13), *(($0 + [16])), (int_64)-7949128876922874880, (int_64)-7949128876922874880)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $11($13, $5)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$13), [96])
	
.LABEL $label$3
	$2 = $5
	
.LABEL $label$2
	*(($5 = (($14 + [8]) + [24]))) = *(($2 + [24]))
	*(($6 = (($14 + [8]) + [16]))) = *(($2 + [16]))
	*(($7 = (($14 + [8]) + [8]))) = *(($2 + [8]))
	*($14 + [8]) = *($2)
	$9 = *($14 + [8])
	$8 = ((float_64)((float_64)(CASTING float_64)(int_64 $12) / (float_64)(float_64)1e4) + (float_64)*($5))
	$10 = CALL pow(((float_64)((float_64)$8 / (float_64)*($7)) + (float_64)(float_64)1), (float_64)0.5)
	*($5) = $8
	$8 = *($6)
	$9 = ((float_64)$9 * (float_64)((float_64)$10 + (float_64)(float_64)-1))
	*($6) = $9
	CALL $12($13, ($14 + [8]), *($0))
	$1 = (Rounds 0)(((float_64)(float_64))($9 - $8) * (float_64)(float_64)1e4)
	CALL eosio_assert((uint_64)(((int_64)$1) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [224])
	$12 = (int_64)5850443
	$2 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$13 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LABEL $label$5
	CALL eosio_assert($13, [288])
	$11 = *($0)
	CALL eosio_assert($4, [400])
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)($14 + [40])), [448])
	CALL eosio_assert(((int_64)*($14 + [40]) == (int_64)CALL $fimport$2()), [496])
	$12 = *($3)
	CALL eosio_assert(((int_64)1497713412 == (int_64)*(($3 + [16]))), [800])
	$1 = (int_64)
	*($3 + [8]) = $1(*($3 + [8]) - $1))
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [848])
	CALL eosio_assert(((int_64)*($3 + [8]) < (int_64)4611686018427387904), [880])
	CALL eosio_assert(((int_64)$12 == (int_64)*($3)), [672])
	*($14 + [128]) = (($14 + [80]) + [32])
	*($14 + [124]) = ($14 + [80])
	*($14 + [120]) = ($14 + [80])
	*($14 + [136]) = ($14 + [120])
	*($14 + [148]) = ($3 + [8])
	*($14 + [144]) = $3
	*($14 + [152]) = ($3 + [24])
	CALL $21(($14 + [144]), ($14 + [136]))
	CALL db_update_i64(*($3 + [36]), $11, ($14 + [80]), [32])
	$2 = (($14 + [40]) + [16])
	if ( (uint_64)($12 <= *($2)) ){ goto $label$10 }
	*($2) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$0 = *($14 + [64])
	if ( ($0 == 0) ){ goto $label$11 }
	$13 = ($14 + [68])
	$2 = *($13)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	CALL $75($3)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$14 }
	$2 = *(($14 + [64]))
	goto $label$12 
	
.LABEL $label$13
	$2 = $0
	
.LABEL $label$12
	*($13) = $0
	CALL $75($2)
	
.LABEL $label$11
	*([0] + [4]) = ($14 + [160])
}

void .FUNC _ZN4comm7to_hex2EPKcm (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *([0] + [4])
	$7 = $6
	$3 = ($2 << [1])
	$4 = ($6 - ((($3 | [1]) + [15]) & [-16]))
	*([0] + [4]) = $4
	if ( ($2 == 0) ){ goto $label$1 }
	$6 = $4
	
.LOOP $label$2:
	$5 = *($1)
	*($6) = *((uint_32($5 >> [4]) + [16]))
	*(($6 + [1])) = *((($5 & [15]) + [16]))
	$6 = ($6 + [2])
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
	*($0) = [0]
	*(($0 + [4])) = (int_64)0
	*(($4 + $3)) = [0]
	$6 = CALL strlen($4)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$6 }
	*($0) = ($6 << [1])
	$1 = ($0 + [1])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = (($6 + [16]) & [-16])
	$1 = CALL $74($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $6
	
.LABEL $label$5
	CALL memcpy($1, $4, $6)
	
.LABEL $label$4
	*(($1 + $6)) = [0]
	*([0] + [4]) = $7
	return (unreachable)
	
.LABEL $label$3
	CALL $76($0)
}

void .FUNC _ZN12bancorinvest8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL require_auth($1)
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($3) > (int_64)9999), [48])
	*(($8 + [104])) = [0]
	*($8 + [88]) = (int_64)-1
	*($8 + [96]) = (int_64)0
	$2 = *($0)
	*($8 + [72]) = $2
	*($8 + [80]) = $2
	$5 = CALL db_find_i64($2, $2, (int_64)5308427987334787584, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $8(($8 + [72]), $5) + [32]) == (int_32)($8 + [72])), [96])
	*(($5 = (($8 + [40]) + [8]))) = *(($3 + [8]))
	$2 = *($3)
	*((($8 + [24]) + [12])) = *((($8 + [40]) + [12]))
	*((($8 + [24]) + [8])) = *($5)
	*($8 + [40]) = $2
	*($8 + [28]) = *($8 + [44])
	*($8 + [24]) = *($8 + [40])
	CALL _ZN12bancorinvest10dappbuykeyEyN5eosio5assetE($0, $1, ($8 + [24]))
	$5 = *($8 + [96])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = *(($3 + [8]))
	*((($8 + [56]) + [8])) = $2
	$6 = *($3)
	*((($8 + [8]) + [8])) = $2
	*($8 + [56]) = $6
	*($8 + [12]) = *($8 + [60])
	*($8 + [8]) = *($8 + [56])
	CALL _ZN12bancorinvest6buykeyEyN5eosio5assetE($0, $1, ($8 + [8]))
	$5 = *($8 + [96])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($8 + [100])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $75($3)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($8 + [96]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($7) = $5
	CALL $75($0)
	
.LABEL $label$1
	*([0] + [4]) = ($8 + [112])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN4comm6to_hexEPKcm (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	$3 = *($1)
	CALL $78($0, *((uint_32($3 >> [4]) + [16])))
	CALL $78($0, *((($3 & [15]) + [16])))
	$1 = ($1 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$2 }
	
.LABEL $label$1
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC memory ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC _ZeqRK11checksum256S1_ (int_32 $0, int_32 _ZeqRK11checksum256S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $75($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [224])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [288])
	*($0 + [24]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [768])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [768])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [768])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	$3 = *($3)
	*($1) = *($3)
	*(($4 = ($1 + [24]))) = *(($3 + [24]))
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [672])
	CALL eosio_assert([1], [384])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($7 | [8]), $6, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($7 + [16]), $5, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($7 + [24]), $4, [8])
	CALL db_update_i64(*($1 + [36]), $2, $7, [32])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-7949128876922874880) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-7949128876922874879
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [320])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $74([48])) + [32]) = $1
	CALL $18(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)-7949128876922874880
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)-7949128876922874880
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $19(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $75($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC _ZN12bancorinvest6buykeyEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	float_64 $9
	float_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [160])
	*([0] + [4]) = $13
	$3 = *($2)
	$2 = [0]
	*((($13 + [72]) + [32])) = [0]
	*($13 + [88]) = (int_64)-1
	*($13 + [96]) = (int_64)0
	$11 = *($0)
	*($13 + [72]) = $11
	*($13 + [80]) = $11
	$6 = CALL db_find_i64($11, $11, (int_64)-7949128876922874880, (int_64)-7949128876922874880)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $11(($13 + [72]), $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)($13 + [72])), [96])
	goto $label$1 
	
.LABEL $label$2
	$6 = ($0 + [48])
	
.LABEL $label$1
	*(($7 = (($13 + [40]) + [24]))) = *(($6 + [24]))
	*(($5 = (($13 + [40]) + [16]))) = *(($6 + [16]))
	*(($4 = (($13 + [40]) + [8]))) = *(($6 + [8]))
	*($13 + [40]) = *($6)
	$9 = *($13 + [40])
	$8 = ((float_64)((float_64)(CASTING float_64)(int_64 $3) / (float_64)(float_64)1e4) + (float_64)*($7))
	$10 = CALL pow(((float_64)((float_64)$8 / (float_64)*($4)) + (float_64)(float_64)1), (float_64)0.5)
	*($7) = $8
	$8 = *($5)
	$9 = ((float_64)$9 * (float_64)((float_64)$10 + (float_64)(float_64)-1))
	*($5) = $9
	$3 = (Rounds 0)(((float_64)(float_64))($9 - $8) * (float_64)(float_64)1e4)
	CALL eosio_assert(((int_64)$3) > (int_64)1), [160])
	CALL $12(($13 + [72]), ($13 + [40]), *($0))
	*(($13 + [32])) = [0]
	*($13 + [16]) = (int_64)-1
	*($13 + [24]) = (int_64)0
	$11 = *($0)
	*($13) = $11
	*($13 + [8]) = $11
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [224])
	$11 = (uint_64)(int_64)1497713408 >> (uint_64)(int_64)8)
	
.LOOP $label$4:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$4 }
	
.LABEL $label$3
	CALL eosio_assert($6, [288])
	$4 = *(($13 + [24]))
	$7 = *(($13 + [28]))
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$7 }
	$2 = ($7 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$8:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$7 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$15 }
	$2 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$13), [96])
	$12 = *($0)
	if ( $2 ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$2 = CALL db_find_i64(*($13), *(($13 + [8])), (int_64)-9025913900073946624, $1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$13 }
	$2 = CALL $13($13, $2)
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$13), [96])
	$12 = *($0)
	
.LABEL $label$14
	CALL eosio_assert([1], [400])
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$13), [448])
	CALL eosio_assert(((int_64)*($13) == (int_64)CALL $fimport$2()), [496])
	$11 = *($2)
	$6 = ($2 + [16])
	CALL eosio_assert(((int_64)1497713412 == (int_64)*($6)), [560])
	$1 = ((int_64)*($2 + [8]) + (int_64)$3)
	*($2 + [8]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [608])
	CALL eosio_assert(((int_64)*($2 + [8]) < (int_64)4611686018427387904), [640])
	CALL eosio_assert(((int_64)$11 == (int_64)*($2)), [672])
	CALL eosio_assert([1], [384])
	CALL memcpy(($13 + [128]), $2, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy((($13 + [128]) | [8]), ($2 + [8]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy((($13 + [128]) + [16]), $6, [8])
	CALL db_update_i64(*($2 + [28]), $12, ($13 + [128]), [24])
	$2 = ($13 + [16])
	if ( (uint_64)($11 <= *($2)) ){ goto $label$11 }
	*($2) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$7 = *($13 + [24])
	if ( $7 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$13
	$12 = *($0)
	
.LABEL $label$12
	CALL eosio_assert(((int_64)*($13) == (int_64)CALL $fimport$2()), [320])
	*(($6 = CALL $74([40])) + [16]) = (int_64)1398362884
	*($6 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$5 = ($6 + [16])
	$0 = ($6 + [8])
	$11 = (int_64)5462355
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$7 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$7 = [0]
	
.LABEL $label$16
	CALL eosio_assert($7, [288])
	*($6 + [24]) = $13
	*(($6 + [16])) = (int_64)1497713412
	*(($6 + [8])) = $3
	*($6) = $1
	CALL eosio_assert([1], [384])
	CALL memcpy(($13 + [128]), $6, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy((($13 + [128]) | [8]), $0, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy((($13 + [128]) + [16]), $5, [8])
	$11 = *($6)
	$7 = CALL db_store_i64(*(($13 + [8])), (int_64)-9025913900073946624, $12, $11, ($13 + [128]), [24])
	*($6 + [28]) = $7
	$2 = ($13 + [16])
	if ( (uint_64)($11 <= *($2)) ){ goto $label$21 }
	*($2) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	*($13 + [120]) = $6
	$11 = *($6)
	*($13 + [128]) = $11
	*($13 + [116]) = $7
	$5 = ($13 + [28])
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*(($13 + [32]))) ){ goto $label$23 }
	*($2 + [8]) = $11
	*($2 + [16]) = $7
	*($13 + [120]) = [0]
	*($2) = $6
	*($5) = ($2 + [24])
	goto $label$22 
	
.LABEL $label$23
	CALL $14(($13 + [24]), ($13 + [120]), ($13 + [128]), ($13 + [116]))
	
.LABEL $label$22
	$2 = *($13 + [120])
	*($13 + [120]) = [0]
	if ( ($2 == 0) ){ goto $label$24 }
	CALL $75($2)
	
.LABEL $label$24
	$0 = *(($13 + [24]))
	$7 = *(($13 + [28]))
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$25 }
	$2 = ($7 + [-24])
	$5 = ([0] - $0)
	
.LOOP $label$26:
	if ( ((int_64)*(*($2)) == (int_64)$1) ){ goto $label$25 }
	$7 = $2
	$6 = ($2 + [-24])
	$2 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$26 }
	
.LABEL $label$25
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$27 }
	CALL eosio_assert(((int_32)*(*(($7 + [-24])) + [24]) == (int_32)$13), [96])
	$7 = *($13 + [24])
	if ( $7 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$27
	$2 = CALL db_find_i64(*($13), *(($13 + [8])), (int_64)-9025913900073946624, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $13($13, $2) + [24]) == (int_32)$13), [96])
	
.LABEL $label$11
	$7 = *($13 + [24])
	if ( ($7 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$5 = ($13 + [28])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$29 }
	
.LOOP $label$30:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$31 }
	CALL $75($6)
	
.LABEL $label$31
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$30 }
	$2 = *(($13 + [24]))
	goto $label$28 
	
.LABEL $label$29
	$2 = $7
	
.LABEL $label$28
	*($5) = $7
	CALL $75($2)
	
.LABEL $label$9
	$7 = *($13 + [96])
	if ( ($7 == 0) ){ goto $label$32 }
	$5 = ($13 + [100])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$34 }
	
.LOOP $label$35:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$36 }
	CALL $75($6)
	
.LABEL $label$36
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$35 }
	$2 = *(($13 + [96]))
	goto $label$33 
	
.LABEL $label$34
	$2 = $7
	
.LABEL $label$33
	*($5) = $7
	CALL $75($2)
	
.LABEL $label$32
	*([0] + [4]) = ($13 + [160])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [736])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	*($7 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $74([48])) + [32]) = $0
	CALL $20(($7 + [32]), $5)
	*($5 + [36]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)-7949128876922874880
	$6 = *($5 + [36])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)-7949128876922874880
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $19(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $75($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC $12 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)*($0 + [24])) ){ goto $label$4 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$0), [96])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-7949128876922874880, (int_64)-7949128876922874880)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $11($0, $3)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$0), [96])
	
.LABEL $label$3
	*($4) = $1
	CALL eosio_assert([1], [400])
	CALL $16($0, $3, $2, $4)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [8]) = $1
	CALL $17($4, $0, $2, ($4 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [736])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $74([40])
	$6 = CALL $15($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [8]) = $5
	$1 = *($4 + [28])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $14(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $75($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $75 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$2 = *($0)
	$3 = *(*($0 + [4]))
	*($1) = *($3)
	*(($4 = ($1 + [24]))) = *(($3 + [24]))
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($6 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [384])
	CALL memcpy($7, $1, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($7 | [8]), $6, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($7 + [16]), $5, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($7 + [24]), $4, [8])
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)-7949128876922874880, *(*($0 + [8])), (int_64)-7949128876922874880, $7, [32])
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)-7949128876922874880) ){ goto $label$1 }
	*(($2 + [16])) = (int_64)-7949128876922874879
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $75($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [64])
	*([0] + [4]) = $2
	*(($4 = $2) + [44]) = $0
	*($4 + [32]) = *($1)
	*($4 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($4 + [24])) = [0]
	*($4 + [8]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [56]) = ($1 + $0)
	*($4 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [768])
	CALL memcpy(($4 + [8]), $1, [8])
	*($4 + [52]) = ($1 + [8])
	CALL $64(($4 + [48]), (($4 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($4 + [52]) = ($4 + [32])
	*($4 + [48]) = ($4 + [44])
	CALL $65(($4 + [48]), ($4 + [8]))
	$2 = *($4 + [16])
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = ($4 + [20])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	$0 = ([0] - $2)
	$1 = ($1 + [-16])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $75(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $0) != (int_32)[-16]) ){ goto $label$8 }
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($3) = $2
	CALL $75($1)
	
.LABEL $label$5
	*([0] + [4]) = ($4 + [64])
	return [1]
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [288])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [64]) = $0
	$1 = ($0 + $2)
	*($5 + [72]) = $1
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [768])
	CALL memcpy(($5 + [8]), $0, [8])
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [768])
	CALL memcpy((($5 + [8]) + [8]), $4, [8])
	$4 = ($0 + [16])
	CALL eosio_assert(((uint_32)($1 - $4) > (uint_32)[7]), [768])
	CALL memcpy((($5 + [8]) + [16]), $4, [8])
	*($5 + [68]) = ($0 + [24])
	CALL $61(($5 + [64]), (($5 + [8]) + [24]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $62(($5 + [64]), ($5 + [8]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $75(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [80])
	return [1]
}

void .FUNC _ZN12bancorinvest8eraseallEv (int_32 $0)
{
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [288])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2000]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2016]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [2032])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1168]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1152]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2000]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$29 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($9 + [144])) = $0
	*(($9 + [152])) = (int_64)-1
	*(($9 + [160])) = (int_64)0
	*(($9 + [168])) = [0]
	*($9 + [136]) = $0
	*($9 + [128]) = $0
	*($9 + [176]) = (int_64)4721979696256909312
	*(($9 + [184])) = (int_64)4672601161629433856
	*(($9 + [192])) = (int_64)0
	*(($9 + [200])) = (int_64)0
	*($9 + [208]) = $0
	*(($9 + [216])) = $0
	*(($9 + [224])) = (int_64)-1
	*(($9 + [232])) = [0]
	*(($9 + [236])) = [0]
	*(($9 + [240])) = [0]
	*($9 + [248]) = $0
	*(($9 + [256])) = $0
	*(($9 + [264])) = (int_64)-1
	*(($9 + [272])) = [0]
	*(($9 + [276])) = [0]
	*(($9 + [280])) = [0]
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$42 }
	if ( ((int_64)$2 > (int_64)-4421663832963809281) ){ goto $label$41 }
	if ( ((int_64)$2 == (int_64)-6215888476434512896) ){ goto $label$39 }
	if ( ((int_64)$2 != (int_64)-4858703589213732864) ){ goto $label$35 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [1]
	*($9 + [32 align=4]) = *($9 + [88])
	CALL $56(($9 + [128]), ($9 + [32]))
	goto $label$35 
	
.LABEL $label$42
	if ( ((int_64)$2 > (int_64)5308437922075294719) ){ goto $label$40 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$38 }
	if ( ((int_64)$2 != (int_64)3724085270811770880) ){ goto $label$35 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [2]
	*($9 + [56 align=4]) = *($9 + [64])
	CALL $59(($9 + [128]), ($9 + [56]))
	goto $label$35 
	
.LABEL $label$41
	if ( ((int_64)$2 == (int_64)-4421663832963809280) ){ goto $label$37 }
	if ( ((int_64)$2 != (int_64)-4417306284236210176) ){ goto $label$35 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [3]
	*($9 + [24 align=4]) = *($9 + [96])
	CALL $55(($9 + [128]), ($9 + [24]))
	goto $label$35 
	
.LABEL $label$40
	if ( ((int_64)$2 == (int_64)5308437922075294720) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)6182744210987286528) ){ goto $label$35 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [4]
	*($9 + [16 align=4]) = *($9 + [104])
	CALL $54(($9 + [128]), ($9 + [16]))
	goto $label$35 
	
.LABEL $label$39
	*($9 + [76]) = [0]
	*($9 + [72]) = [5]
	*($9 + [48 align=4]) = *($9 + [72])
	CALL $58(($9 + [128]), ($9 + [48]))
	goto $label$35 
	
.LABEL $label$38
	*($9 + [124]) = [0]
	*($9 + [120]) = [6]
	*($9) = *($9 + [120])
	CALL $52(($9 + [128]), $9)
	goto $label$35 
	
.LABEL $label$37
	*($9 + [116]) = [0]
	*($9 + [112]) = [7]
	*($9 + [8 align=4]) = *($9 + [112])
	CALL $53(($9 + [128]), ($9 + [8]))
	goto $label$35 
	
.LABEL $label$36
	*($9 + [84]) = [0]
	*($9 + [80]) = [8]
	*($9 + [40 align=4]) = *($9 + [80])
	CALL $57(($9 + [128]), ($9 + [40]))
	
.LABEL $label$35
	CALL $60(($9 + [128]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [288])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [224])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [288])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $68(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $69(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $75(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [224])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [288])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [768])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [768])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [768])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $74([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $30($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = $1
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	CALL $35(($9 + [24]), ($9 + [16]))
	*([0] + [4]) = ($9 + [32])
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [768])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*(($10 + [32])) = (int_64)1398362884
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	CALL eosio_assert([1], [224])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [288])
	*($10 + [40]) = (int_64)0
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $67(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [32]))
	$7 = *($10 + [16])
	*($10 + [48]) = *($10 + [24])
	$4 = *(($10 + [40]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $7), (int_64 $10), (int_32 $4), (int_64 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [384])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $33(*($1), ($0 + [32]))
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $30($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [384])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [384])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $32(CALL $31($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($5 = ($0 + [24]))) = [0]
	$8 = CALL $74([16])
	*($0 + [16]) = $8
	*(($6 = ($0 + [20]))) = $8
	$7 = ($8 + [16])
	*($5) = $7
	*(($8 + [8])) = *(($1 + [8]))
	*($8) = *($1)
	*($6) = $7
	*($0 + [28]) = [0]
	*(($0 + [32])) = [0]
	*(($0 + [36])) = [0]
	$8 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$5 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $30($1, $8)
	$1 = *(($0 + [32]))
	$8 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$8 = [0]
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = $1
	CALL eosio_assert(((int_32)($1 - $8) > (int_32)[7]), [384])
	CALL memcpy($8, $4, [8])
	$6 = ($8 + [8])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [384])
	CALL memcpy($6, ($4 + [8]), [8])
	$6 = ($8 + [16])
	CALL eosio_assert(((int_32)($1 - $6) > (int_32)[7]), [384])
	CALL memcpy($6, ($4 + [16]), [8])
	*($9 + [4]) = ($8 + [24])
	CALL $33($9, $5)
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [768])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [768])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [384])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [384])
	CALL memcpy(*($2 + [4]), $0, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [768])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [768])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [768])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [768])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $74(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $80($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $75($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $75($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [768])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [768])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [768])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [768])
	CALL memcpy($0, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

void .FUNC _ZN12bancorinvest11payfordapp2EyRKNSt3__16vectorI7payloadNS0_9allocatorIS2_EEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [176])
	*([0] + [4]) = $10
	CALL require_auth($1)
	$8 = *(($0 + [144]))
	$5 = *(($0 + [148]))
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$1 }
	$9 = ($5 + [-24])
	$6 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$5 = $9
	$4 = ($9 + [-24])
	$9 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$3 = ($0 + [120])
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$4 }
	$8 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [96])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [120])), *(($0 + [128])), (int_64)5308427987334787584, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $8($3, $9)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [96])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [976])
	CALL eosio_assert(((int_32)*($2 + [4]) != (int_32)*($2)), [992])
	$9 = *($2)
	if ( ((int_32)$9 == (int_32)*($2 + [4])) ){ goto $label$5 }
	$5 = (($10 + [136]) + [8])
	$4 = (($10 + [136]) + [24])
	$2 = ($2 + [4])
	$7 = ($10 + [168])
	
.LOOP $label$6:
	*(($6 = (($10 + [136]) + [16]))) = *(($9 + [16]))
	*($5) = *(($9 + [8]))
	*($10 + [136]) = *($9)
	$9 = ($9 + [24])
	CALL $81($4, $9)
	$1 = *($6)
	if ( ((int_64)$1 == (int_64)1397703940) ){ goto $label$9 }
	if ( ((int_64)$1 != (int_64)1497713412) ){ goto $label$8 }
	*(($6 = (($10 + [72]) + [8]))) = *(($5 + [8]))
	*($10 + [88]) = $3
	*($10 + [92]) = $8
	$1 = *($10 + [136])
	*($10 + [72]) = *($5)
	CALL $81(($10 + [56]), $4)
	*((($10 + [32]) + [12])) = *((($10 + [72]) + [12]))
	*((($10 + [32]) + [8])) = *($6)
	*($10 + [48 align=4]) = *($10 + [88])
	*($10 + [36]) = *($10 + [76])
	*($10 + [32]) = *($10 + [72])
	CALL _ZN12bancorinvest15withdraw_key_toEN5eosio11multi_indexILy5308427987334787584ENS_11dappaccountEJEE14const_iteratorEyNS0_5assetENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE($0, ($10 + [48]), $1, ($10 + [32]), ($10 + [56]))
	if ( ((*($10 + [56]) & [1]) == 0) ){ goto $label$7 }
	CALL $75(*((($10 + [56]) + [8])))
	goto $label$7 
	
.LABEL $label$9
	*(($6 = (($10 + [112]) + [8]))) = *(($5 + [8]))
	*($10 + [128]) = $3
	*($10 + [132]) = $8
	$1 = *($10 + [136])
	*($10 + [112]) = *($5)
	CALL $81(($10 + [96]), $4)
	*((($10 + [8]) + [12])) = *((($10 + [112]) + [12]))
	*((($10 + [8]) + [8])) = *($6)
	*($10 + [24 align=4]) = *($10 + [128])
	*($10 + [12]) = *($10 + [116])
	*($10 + [8]) = *($10 + [112])
	CALL _ZN12bancorinvest15withdraw_eos_toEN5eosio11multi_indexILy5308427987334787584ENS_11dappaccountEJEE14const_iteratorEyNS0_5assetENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE($0, ($10 + [24]), $1, ($10 + [8]), ($10 + [96]))
	if ( ((*($10 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $75(*((($10 + [96]) + [8])))
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [1024])
	
.LABEL $label$7
	if ( ((*($4) & [1]) == 0) ){ goto $label$10 }
	CALL $75(*($7))
	
.LABEL $label$10
	$9 = ($9 + [16])
	if ( ((int_32)$9 != (int_32)*($2)) ){ goto $label$6 }
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [176])
}

void .FUNC _ZN12bancorinvest15calc_dapp_quotaEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = ($1 + [48])
	$3 = ($1 + [8])
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)*(($1 + [32]))) ){ goto $label$3 }
	$1 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$3), [96])
	if ( $1 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = CALL db_find_i64(*($3), *(($1 + [16])), (int_64)-7949128876922874880, (int_64)-7949128876922874880)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $11($3, $1)
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$3), [96])
	
.LABEL $label$2
	$5 = $1
	
.LABEL $label$1
	*($0 + [8]) = (int_64)1497713412
	$2 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(uint_64 $2) * (float_64)*($5 + [16])) * (float_64)(float_64)100))
	*($0) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [224])
	$2 = (int_64)5850443
	$1 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$0 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	CALL eosio_assert($0, [288])
}

void .FUNC _ZN12bancorinvest15withdraw_key_toEN5eosio11multi_indexILy5308427987334787584ENS_11dappaccountEJEE14const_iteratorEyNS0_5assetENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	float_64 $9
	float_64 $10
	float_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [160])
	*([0] + [4]) = $17
	$1 = *($1 + [4])
	$14 = *($1 + [8])
	$15 = *(($1 + [16]))
	$13 = *($3 + [8])
	CALL eosio_assert(((int_64)$13 == (int_64)$15), [560])
	$16 = *($3)
	$14 = ((int_64)$14 + (int_64)$16)
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [608])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [640])
	CALL _ZN12bancorinvest15calc_dapp_quotaEy(($17 + [64]), $0, *($1 + [24]))
	CALL eosio_assert(((int_64)$15 == (int_64)*($17 + [72])), [1040])
	CALL eosio_assert(((int_64)$14 < (int_64)*($17 + [64])), [1104])
	$12 = ($0 + [48])
	$5 = ($0 + [8])
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)*(($0 + [32]))) ){ goto $label$3 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$5), [96])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($5), *(($0 + [16])), (int_64)-7949128876922874880, (int_64)-7949128876922874880)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $11($5, $7)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$5), [96])
	
.LABEL $label$2
	$12 = $7
	
.LABEL $label$1
	*(($7 = (($17 + [112]) + [16]))) = *(($12 + [16]))
	*(($8 = (($17 + [112]) + [8]))) = *(($12 + [8]))
	*($17 + [112]) = *($12)
	$10 = *($8)
	$9 = ((float_64)*($7) + (float_64)((float_64)(CASTING float_64)(int_64 $16) / (float_64)(float_64)-1e4))
	$11 = CALL pow(((float_64)((float_64)$9 / (float_64)*($17 + [112])) + (float_64)(float_64)1), (float_64)2)
	*($7) = $9
	*($17 + [136]) = ((float_64)$10 * (float_64)((float_64)$11 + (float_64)(float_64)-1))
	CALL $12($5, ($17 + [112]), *($0))
	$15 = *($0)
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)($0 + [120])), [448])
	CALL eosio_assert(((int_64)*($0 + [120]) == (int_64)CALL $fimport$2()), [496])
	$14 = *($1)
	CALL eosio_assert(((int_64)$13 == (int_64)*(($1 + [16]))), [560])
	$16 = ((int_64)*($1 + [8]) + (int_64)$16)
	*($1 + [8]) = $16
	CALL eosio_assert(((int_64)$16 > (int_64)-4611686018427387904), [608])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [640])
	CALL eosio_assert(((int_64)$14 == (int_64)*($1)), [672])
	*($17 + [56]) = (($17 + [64]) + [32])
	*($17 + [52]) = ($17 + [64])
	*($17 + [48]) = ($17 + [64])
	*($17 + [144]) = ($17 + [48])
	*($17 + [12]) = ($1 + [8])
	*($17 + [8]) = $1
	*($17 + [16]) = ($1 + [24])
	CALL $21(($17 + [8]), ($17 + [144]))
	CALL db_update_i64(*($1 + [36]), $15, ($17 + [64]), [32])
	$1 = ($0 + [136])
	if ( (uint_64)($14 <= *($1)) ){ goto $label$4 }
	*($1) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$6 = *($0)
	$14 = (int_64)0
	$13 = (int_64)59
	$1 = [1120]
	$15 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$10 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$0 = ($0 + [165])
	goto $label$8 
	
.LABEL $label$10
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$6
	$1 = ($1 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$5 }
	*($17 + [56]) = $15
	*($17 + [48]) = $6
	$14 = (int_64)0
	$13 = (int_64)59
	$1 = [1136]
	$15 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$14 > (uint_64)(int_64)6) ){ goto $label$16 }
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$0 = ($0 + [165])
	goto $label$14 
	
.LABEL $label$16
	$16 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$12
	$1 = ($1 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$11 }
	*(($17 + [28])) = *(($3 + [12]))
	*(($17 + [24])) = *(($3 + [8]))
	*((($17 + [8]) + [12])) = *(($3 + [4]))
	*($17 + [8]) = $2
	*($17 + [16]) = *($3)
	CALL $81(($17 + [32]), $4)
	$1 = CALL $28(($17 + [64]), ($17 + [48]), $6, $15, ($17 + [8]))
	CALL $29(($17 + [144]), $1)
	$0 = *($17 + [144])
	CALL send_inline($0, (*($17 + [148]) - $0))
	$0 = *($17 + [144])
	if ( ($0 == 0) ){ goto $label$17 }
	*($17 + [148]) = $0
	CALL $75($0)
	
.LABEL $label$17
	$0 = *($1 + [28])
	if ( ($0 == 0) ){ goto $label$18 }
	*(($1 + [32])) = $0
	CALL $75($0)
	
.LABEL $label$18
	$0 = *($1 + [16])
	if ( ($0 == 0) ){ goto $label$19 }
	*(($1 + [20])) = $0
	CALL $75($0)
	
.LABEL $label$19
	if ( ((*($17 + [32]) & [1]) == 0) ){ goto $label$20 }
	CALL $75(*(($17 + [40])))
	
.LABEL $label$20
	*([0] + [4]) = ($17 + [160])
}

void .FUNC _ZN12bancorinvest15withdraw_eos_toEN5eosio11multi_indexILy5308427987334787584ENS_11dappaccountEJEE14const_iteratorEyNS0_5assetENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEE (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	float_64 $9
	float_64 $10
	float_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [160])
	*([0] + [4]) = $19
	$15 = *($3)
	$13 = ($0 + [48])
	$5 = ($0 + [8])
	$12 = *(($0 + [36]))
	if ( ((int_32)$12 == (int_32)*(($0 + [32]))) ){ goto $label$3 }
	$12 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [32]) == (int_32)$5), [96])
	if ( $12 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$12 = CALL db_find_i64(*($5), *(($0 + [16])), (int_64)-7949128876922874880, (int_64)-7949128876922874880)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $11($5, $12)
	CALL eosio_assert(((int_32)*($12 + [32]) == (int_32)$5), [96])
	
.LABEL $label$2
	$13 = $12
	
.LABEL $label$1
	*(($12 = (($19 + [112]) + [24]))) = *(($13 + [24]))
	*(($7 = (($19 + [112]) + [16]))) = *(($13 + [16]))
	*(($8 = (($19 + [112]) + [8]))) = *(($13 + [8]))
	*($19 + [112]) = *($13)
	$10 = *($19 + [112])
	$9 = ((float_64)*($12) + (float_64)((float_64)(CASTING float_64)(int_64 $15) / (float_64)(float_64)-1e4))
	$11 = CALL pow(((float_64)((float_64)$9 / (float_64)*($8)) + (float_64)(float_64)1), (float_64)0.5)
	*($12) = $9
	$9 = *($7)
	$10 = ((float_64)$10 * (float_64)((float_64)$11 + (float_64)(float_64)-1))
	*($7) = $10
	$17 = (Rounds 0)(((float_64)(float_64))($10 - $9) * (float_64)(float_64)-1e4)
	CALL eosio_assert((uint_64)(((int_64)$17) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [224])
	$15 = (int_64)5850443
	$13 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$12 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$12 = [0]
	
.LABEL $label$4
	CALL eosio_assert($12, [288])
	$13 = *($1 + [4])
	$15 = *($13 + [8])
	$12 = ($13 + [16])
	$14 = *($12)
	CALL eosio_assert(((int_64)1497713412 == (int_64)$14), [560])
	$15 = ((int_64)$15 + (int_64)$17)
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [608])
	CALL eosio_assert(((int_64)$15 < (int_64)4611686018427387904), [640])
	CALL _ZN12bancorinvest15calc_dapp_quotaEy($19, $0, *($13 + [24]))
	CALL eosio_assert(((int_64)$14 == (int_64)*($19 + [8])), [1040])
	CALL eosio_assert(((int_64)$15 < (int_64)*($19)), [1104])
	CALL $12($5, ($19 + [112]), *($0))
	$14 = *($0)
	CALL eosio_assert(((int_32)$13 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($13 + [32]) == (int_32)($0 + [120])), [448])
	CALL eosio_assert(((int_64)*($0 + [120]) == (int_64)CALL $fimport$2()), [496])
	$15 = *($13)
	CALL eosio_assert(((int_64)1497713412 == (int_64)*($12)), [560])
	$17 = ((int_64)*($13 + [8]) + (int_64)$17)
	*($13 + [8]) = $17
	CALL eosio_assert(((int_64)$17 > (int_64)-4611686018427387904), [608])
	CALL eosio_assert(((int_64)*($13 + [8]) < (int_64)4611686018427387904), [640])
	CALL eosio_assert(((int_64)$15 == (int_64)*($13)), [672])
	*($19 + [64]) = ($19 + [32])
	*($19 + [60]) = $19
	*($19 + [56]) = $19
	*($19 + [144]) = ($19 + [56])
	*($19 + [76]) = ($13 + [8])
	*($19 + [72]) = $13
	*($19 + [80]) = ($13 + [24])
	CALL $21(($19 + [72]), ($19 + [144]))
	CALL db_update_i64(*($13 + [36]), $14, $19, [32])
	$13 = ($0 + [136])
	if ( (uint_64)($15 <= *($13)) ){ goto $label$9 }
	*($13) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	$6 = *($0)
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [1120]
	$16 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$15 }
	$0 = *($13)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$0 = ($0 + [165])
	goto $label$13 
	
.LABEL $label$15
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$11
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$10 }
	*($19 + [64]) = $16
	*($19 + [56]) = $6
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [1152]
	$16 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$15 > (uint_64)(int_64)10) ){ goto $label$21 }
	$0 = *($13)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$0 = ($0 + [165])
	goto $label$19 
	
.LABEL $label$21
	$17 = (int_64)0
	if ( ((int_64)$15 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$17
	$13 = ($13 + [1])
	$14 = ((int_64)$14 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)1)
	if ( ((int_64)$15 != (int_64)13) ){ goto $label$16 }
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [1168]
	$18 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$15 > (uint_64)(int_64)7) ){ goto $label$27 }
	$0 = *($13)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$0 = ($0 + [165])
	goto $label$25 
	
.LABEL $label$27
	$17 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$23
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$18 = ((int_64)$17 | (int_64)$18)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$22 }
	*(($19 + [28])) = *(($3 + [12]))
	*(($19 + [24])) = *(($3 + [8]))
	*(($19 + [20])) = *(($3 + [4]))
	*($19 + [8]) = $2
	*($19) = $6
	*($19 + [16]) = *($3)
	CALL $81(($19 + [32]), $4)
	$13 = CALL $34(($19 + [72]), ($19 + [56]), $16, $18, $19)
	CALL $29(($19 + [144]), $13)
	$0 = *($19 + [144])
	CALL send_inline($0, (*($19 + [148]) - $0))
	$0 = *($19 + [144])
	if ( ($0 == 0) ){ goto $label$28 }
	*($19 + [148]) = $0
	CALL $75($0)
	
.LABEL $label$28
	$0 = *($13 + [28])
	if ( ($0 == 0) ){ goto $label$29 }
	*(($13 + [32])) = $0
	CALL $75($0)
	
.LABEL $label$29
	$0 = *($13 + [16])
	if ( ($0 == 0) ){ goto $label$30 }
	*(($13 + [20])) = $0
	CALL $75($0)
	
.LABEL $label$30
	if ( ((*($19 + [32]) & [1]) == 0) ){ goto $label$31 }
	CALL $75(*(($19 + [40])))
	
.LABEL $label$31
	*([0] + [4]) = ($19 + [160])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $81(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $81(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $75(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $75(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [768])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [768])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [768])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [768])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $61(*($1), ($0 + [32]))
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($5) = (int_64)0
	*($5 + [8]) = [0]
	$3 = (*(($1 + [12])) - *($1 + [8]))
	$4 = ((int_32)$3 / (int_32)[40])
	$2 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$1 }
	$3 = CALL $74($3)
	*(($5 + [8])) = ($3 + ((int_32)$4 * (int_32)[40]))
	*($5) = $3
	*($5 + [4]) = $3
	$1 = *(($1 + [12]))
	$4 = *(($1 + [8]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	*($3) = *($4)
	*(($3 + [16])) = *(($4 + [16]))
	*(($3 + [8])) = *(($4 + [8]))
	CALL $81(($3 + [24]), ($4 + [24]))
	$3 = ($3 + [40])
	$4 = ($4 + [40])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$3 }
	*($5 + [4]) = $3
	
.LABEL $label$2
	$3 = *($0 + [4])
	$1 = *($3 + [4])
	$4 = (*(*($0)) + int_32($1 >> [1]))
	$3 = *($3)
	if ( (($1 & [1]) == 0) ){ goto $label$4 }
	$3 = *((*($4) + $3))
	
.LABEL $label$4
	CALL void $4((int_32 $2), (int_64 $5), (int_32 $3))
	$1 = *($5)
	if ( ($1 == 0) ){ goto $label$5 }
	$3 = *($5 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$7 }
	$4 = ([0] - $1)
	$3 = ($3 + [-16])
	
.LOOP $label$8:
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL $75(*(($3 + [8])))
	
.LABEL $label$9
	$3 = ($3 + [-40])
	if ( ((int_32)($3 + $4) != (int_32)[-16]) ){ goto $label$8 }
	$3 = *($5)
	goto $label$6 
	
.LABEL $label$7
	$3 = $1
	
.LABEL $label$6
	*($5 + [4]) = $1
	CALL $75($3)
	
.LABEL $label$5
	*([0] + [4]) = ($5 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $80($5)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [2096])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = ((int_32)($2 - $6) / (int_32)[40])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $66($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[40])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$7 = (([0] - $6) - $4)
	$4 = ($2 + [-16])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $75(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $7) != (int_32)[-16]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$7 }
	$4 = ($0 + [4])
	
.LOOP $label$8:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [768])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [768])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [768])
	CALL memcpy(($7 + [16]), *($4), [8])
	*($4) = (*($4) + [8])
	CALL $61($0, ($7 + [24]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [768])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [768])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [768])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [768])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$2 = *($0)
	$7 = ((int_32)($5 - $2) / (int_32)[40])
	$3 = ($7 + $1)
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$3 }
	$5 = [107374182]
	$6 = ((int_32)($6 - $2) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$6 }
	$5 = ($6 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$6 = CALL $74(((int_32)$5 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$7 = ($0 + [4])
	
.LOOP $label$7:
	*(($5 = (($2 = CALL memset($5, [0], [40])) + [16]))) = (int_64)1398362884
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$4 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($6, [288])
	*(($2 + [32])) = [0]
	*($2 + [24 align=4]) = (int_64)0
	$5 = (*($7) + [40])
	*($7) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$6 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $80($0)
	
.LABEL $label$2
	$3 = ($6 + ((int_32)$5 * (int_32)[40]))
	$7 = ($6 + ((int_32)$7 * (int_32)[40]))
	$6 = $7
	
.LOOP $label$12:
	*(($5 = (($2 = CALL memset($6, [0], [40])) + [16]))) = (int_64)1398362884
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$4 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$14:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$4) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($6, [288])
	*(($2 + [32])) = [0]
	*($2 + [24 align=4]) = (int_64)0
	$6 = ($2 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$12 }
	$5 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$18 }
	$1 = ([0] - $5)
	$5 = ($2 + [-16])
	
.LOOP $label$19:
	*(($7 + [-24])) = *(($5 + [-8]))
	*(($7 + [-32])) = *(($5 + [-16]))
	*(($7 + [-40])) = *(($5 + [-24]))
	$2 = ($5 + [8])
	*(($7 + [-8])) = *($2)
	*(($7 + [-16])) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($2) = [0]
	$7 = ($7 + [-40])
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $1) != (int_32)[-16]) ){ goto $label$19 }
	$5 = *(($0 + [4]))
	$2 = *($0)
	goto $label$17 
	
.LABEL $label$18
	$2 = $5
	
.LABEL $label$17
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $3
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$20 }
	$6 = ([0] - $2)
	$5 = ($5 + [-16])
	
.LOOP $label$21:
	if ( ((*($5) & [1]) == 0) ){ goto $label$22 }
	CALL $75(*(($5 + [8])))
	
.LABEL $label$22
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $6) != (int_32)[-16]) ){ goto $label$21 }
	
.LABEL $label$20
	if ( ($2 == 0) ){ goto $label$1 }
	CALL $75($2)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $63($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $77($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $74($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $77($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $75($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $76($7)
	return (unreachable)
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [144]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [148])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $75($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$4 = *(($0 + [144]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $75($4)
	
.LABEL $label$1
	$1 = *(($0 + [104]))
	if ( ($1 == 0) ){ goto $label$6 }
	$3 = ($0 + [108])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $75($2)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($0 + [104]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $1
	
.LABEL $label$7
	*($3) = $1
	CALL $75($4)
	
.LABEL $label$6
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$11 }
	$3 = ($0 + [36])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $75($2)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($0 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $1
	
.LABEL $label$12
	*($3) = $1
	CALL $75($4)
	
.LABEL $label$11
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [2096])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $30($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [768])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*((($4 + [32]) + [12])) = *(($1 + [20]))
	*(($3 = (($4 + [32]) + [8]))) = *(($1 + [16]))
	*($4 + [32]) = *($1 + [8])
	*($4 + [36]) = *(($1 + [12]))
	$2 = *($1)
	CALL $81(($4 + [16]), ($1 + [24]))
	*((($4 + [48]) + [8])) = *($3)
	*($4 + [48]) = *($4 + [32])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($3 = (($4 + [80]) + [8]))) = *((($4 + [48]) + [8]))
	*($4 + [80]) = *($4 + [48])
	CALL $81(($4 + [64]), ($4 + [16]))
	*(($4 + [8])) = *($3)
	*($4) = *($4 + [80])
	CALL void $0((int_32 $2), (int_64 $4), (int_32 ($4 + [64])), (int_32 $1))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $75(*($4 + [72]))
	
.LABEL $label$2
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $75(*($4 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [96])
}

void .FUNC $89 ()
{
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_64 .FUNC scalbn (float_64 $0, int_32 $1)
{
	int_32 $2
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	$2 = ($1 + [-1023])
	if ( ((int_32)$2 < (int_32)[1024]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	$2 = ($1 + [969])
	if ( ((int_32)$2 > (int_32)[-1023]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = $2
	goto $label$1 
	
.LABEL $label$2
	$1 = $2
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

int_64 .FUNC fabs (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC sqrt (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($7) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$2 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$7 <= (int_32)[0]) ){ goto $label$6 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $8) ){ goto $label$4 }
	$8 = [1]
	$9 = $2
	goto $label$5 
	
.LABEL $label$6
	if ( ((($7 & [2147483647]) | $2) == 0) ){ goto $label$3 }
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$8 = [1]
	
.LOOP $label$7:
	$8 = ($8 + [-21])
	$7 = uint_32($2 >> [11])
	$9 = ($2 << [21])
	$2 = $9
	if ( ($7 == 0) ){ goto $label$7 }
	
.LABEL $label$5
	$5 = [0]
	if ( ($7 & [1048576]) ){ goto $label$8 }
	$5 = [0]
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = ($7 << [1])
	if ( (($7 & [1048576]) == 0) ){ goto $label$9 }
	
.LABEL $label$8
	$2 = ($9 << $5)
	$8 = ($8 - $5)
	$7 = (uint_32($9 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$7 = (($7 & [1048575]) | [1048576])
	$10 = ($8 + [-1023])
	if ( (($10 & [1]) == 0) ){ goto $label$10 }
	$7 = (($7 << [1]) | uint_32($2 >> [31]))
	$2 = ($2 << [1])
	
.LABEL $label$10
	$7 = (uint_32($2 >> [31]) | ($7 << [1]))
	$5 = ($2 << [1])
	$4 = [0]
	$9 = [2097152]
	$8 = [0]
	
.LOOP $label$11:
	$6 = $5
	$5 = ($9 + $8)
	if ( ((int_32)$7 < (int_32)$5) ){ goto $label$12 }
	$4 = ($9 + $4)
	$7 = ($7 - $5)
	$8 = ($5 + $9)
	
.LABEL $label$12
	$7 = (($7 << [1]) | (uint_32($2 >> [30]) & [1]))
	$5 = ($6 << [1])
	$2 = $6
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$11 }
	$3 = uint_32($10 >> [1])
	$9 = [-2147483648]
	$10 = [0]
	$2 = [0]
	
.LOOP $label$13:
	$6 = ($2 + $9)
	if ( ((int_32)$7 > (int_32)$8) ){ goto $label$15 }
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	if ( ($5 <= $6) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (($7 - $8) + ( [-1] ? [0] : ($5 <= $6) ))
	$2 = ($6 + $9)
	$8 = ((((int_32)$6 < (int_32)[0]) & ((int_32)$2 > (int_32)[-1])) + $8)
	$10 = ($10 + $9)
	$5 = ($5 - $6)
	
.LABEL $label$14
	$7 = (uint_32($5 >> [31]) | ($7 << [1]))
	$5 = ($5 << [1])
	$9 = uint_32($9 >> [1])
	if ( $9 ){ goto $label$13 }
	if ( (($5 | $7) == 0) ){ goto $label$16 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$17 }
	$10 = (($10 & [1]) + $10)
	goto $label$16 
	
.LABEL $label$17
	$4 = ($4 + [1])
	$10 = [0]
	
.LABEL $label$16
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($3 << [20]) + int_32($4 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($4 << [31])))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
}

int_64 .FUNC pow (float_64 $0, float_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	int_32 $19
	float_64 $20
	float_64 $21
	$21 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (CASTING int_64)(float_64 $1)
	$5 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$8 = ($5) & [2147483647]
	if ( (($8) | $6) == 0) ){ goto $label$1 }
	$11 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$11 >> (uint_64)(int_64)32))
	$3 = (CASTING uint_32)(uint_64 $11)
	if ( $3 ){ goto $label$2 }
	if ( ((int_32)$2 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($2 & [2147483647])
	if ( ((uint_32)$7 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$3 != (int_32)[0]) & ((int_32)$7 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$8 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$19 = [0]
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$8 }
	$19 = [2]
	if ( ((uint_32)$8 > (uint_32)[1128267775]) ){ goto $label$8 }
	$19 = [0]
	if ( ($8 <= [1072693248]) ){ goto $label$8 }
	$9 = uint_32($8 >> [20])
	if ( ((int_32)($9 + [-1023]) < (int_32)[21]) ){ goto $label$7 }
	$19 = ([1075] - $9)
	$9 = uint_32($6 >> $19)
	$19 = ( ([2] - ($9 & [1])) ? [0] : ((int_32)($9 << $19) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$19 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $9)
	$19 = uint_32($8 >> $6)
	$19 = ( ([2] - ($19 & [1])) ? [0] : ((int_32)($19 << $6) == (int_32)$8) )
	
.LABEL $label$6
	if ( ((int_32)$8 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($7 + [-1072693248]) | $3) == 0) ){ goto $label$1 }
	if ( ($7 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$5 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$5 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL sqrt($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$21 = CALL fabs($0)
	if ( $3 ){ goto $label$18 }
	if ( ($7 == 0) ){ goto $label$17 }
	if ( ((int_32)($7 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$17 }
	
.LABEL $label$18
	$10 = (float_64)1
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$14 }
	if ( ((int_32)$19 == (int_32)[1]) ){ goto $label$16 }
	if ( $19 ){ goto $label$14 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$17
	$21 = ( ((float_64)(float_64)1 / (float_64)$21) ? $21 : ((int_32)$5 < (int_32)[0]) )
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($19 | ($7 + [-1072693248])) == 0) ){ goto $label$15 }
	return ( !(float_64)$21 ? $21 : ((int_32)$19 == (int_32)[1]) )
	
.LABEL $label$16
	$10 = (float_64)-1
	goto $label$14 
	
.LABEL $label$15
	$1 = (float_64)
	return ((float_64)$1($21 - $21)) / (float_64)$1)
	
.LABEL $label$14
	if ( ($8 <= [1105199105]) ){ goto $label$28 }
	if ( ($8 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$7 > (uint_32)[1072693247]) ){ goto $label$24 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 < (int_32)[0]) )
	
.LABEL $label$28
	$8 = [0]
	if ( ((uint_32)$7 > (uint_32)[1048575]) ){ goto $label$26 }
	$21 = ((float_64)$21 * (float_64)(float_64)9007199254740992)
	$7 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $21) >> (uint_64)(int_64)32))
	$5 = [-53]
	goto $label$25 
	
.LABEL $label$27
	if ( ((uint_32)$7 > (uint_32)[1072693246]) ){ goto $label$23 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 < (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$26
	$5 = [0]
	
.LABEL $label$25
	$6 = ($7 & [1048575])
	$2 = ($6 | [1072693248])
	$5 = ((int_32($7 >> [20]) + $5) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$21 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$22 }
	$8 = [1]
	goto $label$21 
	
.LABEL $label$24
	return ( (float_64)inf ? (float_64)0 : ((int_32)$5 > (int_32)[0]) )
	
.LABEL $label$23
	if ( ($7 <= [1072693249]) ){ goto $label$20 }
	$1 = ( (float_64)1.e+300 ? (float_64)1e-300 : ((int_32)$5 > (int_32)[0]) )
	return ((float_64)$1 * (float_64)((float_64)$1 * (float_64)$10))
	
.LABEL $label$22
	$2 = ($2 + [-1048576])
	$5 = ($5 + [1])
	
.LABEL $label$21
	$13 = ((float_64)*(($6 + [10608])) + (float_64)((float_64)((float_64)(float_64))($21 - (float_64))($0 - $14)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$21 = ((float_64)((float_64)$12 * (float_64)$0) + (float_64)((float_64)$21 * (float_64)(float_64))($13 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $17))
	$0 = ((float_64)$21 * (float_64)$21)
	$16 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($2 >> [1]) | [536870912]) + ($8 << [18])) + [524288])) << (int_64)32))
	$12 = ((float_64)$15 * (float_64)(float_64))((float_64))($14 - ((float_64)$0 * (float_64)$16)) - ((float_64)$0 * (float_64)(float_64))($12 - (float_64))($16 - $13)
	$13 = ((float_64)((float_64)((float_64)$21 + (float_64)$0) * (float_64)$12))
	$17 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$17 + (float_64)(float_64)3) + (float_64)$13)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$15 = ((float_64)(float_64)1 / (float_64)((float_64)$13 + (float_64)$12))
	$13 = *(($6 + [10592]))
	$12 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $21) & (int_64)4294967295)))
	$14 = (float_64)
	$21 = ((float_64)$14($12 - $13)) * (float_64)$15
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $21)) & (int_64)-4294967296)
	$14 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$14 & (int_64)-4294967296))))
	$12 = ((float_64)$0 + (float_64)$21)
	$6 = ($8 << [3])
	$18 = *(($6 + [10624]))
	$20 = (CASTING float_64)(int_32 $5)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$20 + (float_64)((float_64)$18 + (float_64)((float_64)$12)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$20 = (float_64))((float_64))((float_64))($0 + (float_64)$13)))))) & (int_64)-4294967296))) - $20) - $18) - $12)
	goto $label$19 
	
.LABEL $label$20
	$13 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$21 + (float_64)(float_64)-1)
	$21 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$21 + (float_64)$13))) & (int_64)-4294967296)
	$20 = (float_64))($0) - $21)
	
.LABEL $label$19
	$1 = ((float_64)((float_64)(float_64))($1 - $12) * (float_64)$0) + (float_64)((float_64)(float_64))($13 - $20) * (float_64)$1
	$12 = (CASTING float_64)(int_64 ((int_64)$4 & (int_64)-4294967296))
	$21 = ((float_64)$12 * (float_64)$0)
	$0 = ((float_64)$21 + (float_64)$1)
	$4 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 $4)))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	if ( ((int_32)$2) < (int_32)[1083179008]) ){ goto $label$33 }
	if ( ((($2 + [-1083179008]) | $8) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$33
	if ( (($2 & [2147482624]) <= [1083231232]) ){ goto $label$30 }
	if ( ((($2 + [1064252416]) | $8) == 0) ){ goto $label$31 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$32
	$0 = (float_64)
	$12 = ((float_64)$1 + (float_64)(float_64)8.008566259537294e-17)
	if ( (((float_64)$12 <= (float_64)$0($0 - $21))) | (((float_64)$12 != (float_64)$12) | ((float_64)$0 != (float_64)$0))) ){ goto $label$30 }
	return ((float_64)((float_64)$10 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$31
	$0 = (float_64)
	if ( ((((float_64)$1 > (float_64)$0($0 - $21))) | (((float_64)$1 != (float_64)$1) | ((float_64)$0 != (float_64)$0))) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	$8 = ($2 & [2147483647])
	if ( ($8 <= [1071644673]) ){ goto $label$35 }
	$6 = (uint_32($8 >> [20]) & [2047])
	$8 = (uint_32([1048576] >> (uint_32($8 >> [20]) + [-1022])) + $2)
	$5 = uint_32((($8 & [1048575]) | [1048576]) >> ([1043] - $6))
	$2 = ( ([0] - $5) ? $5 : ((int_32)$2 < (int_32)[0]) )
	$21 = (float_64))($21 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($8 & ((int_32)uint_32([1048575] >> ($6 + [-1023])) ^ (int_32)[-1]))) << (int_64)32)))
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	
.LABEL $label$34
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$21 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $21)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$1 + (float_64)$21)) & (int_64)-4294967296))
	$12 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$12 + (float_64)$21 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = (float_64)
	$4 = (CASTING int_64)(float_64 $1((float_64)1 - (float_64))((float_64))(((float_64)((float_64)$1)) * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)
	$8 = ((CASTING uint_32)(uint_64 (uint_64)$4 - ((float_64)$0($21 - (float_64))($1 - $12))) + (float_64)((float_64)$1 * (float_64)$0))
	if ( ((int_32)int_32($8 - $1))))) >> (uint_64)(int_64)32)) + ($2 << [20]))) >> [20]) <= (int_32)[0]) ){ goto $label$36 }
	return ((float_64)$10 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$4 & (int_64)4294967295))))
	
.LABEL $label$36
	return ((float_64)$10 * (float_64)CALL scalbn($1, $2))
	
.LABEL $label$29
	return ((float_64)((float_64)$10 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $21
}

int_32 .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $74($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $74($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $80 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10582]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10584])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10582]) = [1]
	$7 = ($7 << [16])
	*([0] + [10584]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10584])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10584]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10582]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10582]) = [1]
	$3 = ($3 << [16])
	*([0] + [10584]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10584])
	
.LABEL $label$8
	*([0] + [10584]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10484])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10292]
	$1 = (((int_32)$2 * (int_32)[12]) + [10292])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $71([2100], $0)
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $72($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10496])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $76 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $74(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $75($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $74 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10588])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $74([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1440]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $82($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $77($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN12bancorinvest7airdropEyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	CALL require_auth(*($0))
	CALL require_recipient($1)
	$4 = *(($0 + [104]))
	$9 = *(($0 + [108]))
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$9 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [80])
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$7 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$5), [96])
	$10 = *($0)
	if ( $8 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = CALL db_find_i64(*(($0 + [80])), *(($0 + [88])), (int_64)-9025913900073946624, $1)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$5 }
	$8 = CALL $13($5, $8)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$5), [96])
	$10 = *($0)
	
.LABEL $label$6
	CALL eosio_assert([1], [400])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$5), [448])
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)CALL $fimport$2()), [496])
	$11 = *($8)
	$6 = ($8 + [16])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($6)), [560])
	$1 = ((int_64)*($8 + [8]) + (int_64)*($2))
	*($8 + [8]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [608])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [640])
	CALL eosio_assert(((int_64)$11 == (int_64)*($8)), [672])
	CALL eosio_assert([1], [384])
	CALL memcpy($12, $8, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($12 | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($12 + [16]), $6, [8])
	CALL db_update_i64(*($8 + [28]), $10, $12, [24])
	$8 = ($0 + [96])
	if ( (uint_64)($11 <= *($8)) ){ goto $label$3 }
	*($8) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$5
	$10 = *($0)
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$2()), [320])
	*(($6 = CALL $74([40])) + [16]) = (int_64)1398362884
	*($6 + [8]) = (int_64)0
	CALL eosio_assert([1], [224])
	$7 = ($6 + [16])
	$4 = ($6 + [8])
	$11 = (int_64)5462355
	$8 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$9 = [0]
	
.LABEL $label$8
	CALL eosio_assert($9, [288])
	*($6 + [24]) = $5
	*($6) = $1
	*(($4 + [8])) = *(($2 + [8]))
	*($4) = *($2)
	CALL eosio_assert([1], [384])
	CALL memcpy($12, $6, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($12 | [8]), $4, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($12 + [16]), $7, [8])
	$11 = *($6)
	$9 = CALL db_store_i64(*(($0 + [88])), (int_64)-9025913900073946624, $10, $11, $12, [24])
	*($6 + [28]) = $9
	$8 = ($0 + [96])
	if ( (uint_64)($11 <= *($8)) ){ goto $label$13 }
	*($8) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($12 + [40]) = $6
	$11 = *($6)
	*($12) = $11
	*($12 + [36]) = $9
	$5 = ($0 + [108])
	$8 = *($5)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [112]))) ){ goto $label$15 }
	*($8 + [8]) = $11
	*($8 + [16]) = $9
	*($12 + [40]) = [0]
	*($8) = $6
	*($5) = ($8 + [24])
	goto $label$14 
	
.LABEL $label$15
	CALL $14(($0 + [104]), ($12 + [40]), $12, ($12 + [36]))
	
.LABEL $label$14
	$8 = *($12 + [40])
	*($12 + [40]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	CALL $75($8)
	
.LABEL $label$3
	*([0] + [4]) = ($12 + [48])
}

void .FUNC _ZN12bancorinvest11dappsellkeyEyN5eosio5assetEy (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	float_64 $9
	float_64 $10
	float_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [432])
	*([0] + [4]) = $17
	CALL require_auth($1)
	*((($17 + [376]) + [32])) = [0]
	*($17 + [392]) = (int_64)-1
	*($17 + [400]) = (int_64)0
	$14 = *($0)
	*($17 + [376]) = $14
	*($17 + [384]) = $14
	$12 = [0]
	$7 = CALL db_find_i64($14, $14, (int_64)5308427987334787584, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $8(($17 + [376]), $7)
	CALL eosio_assert(((int_32)*($12 + [32]) == (int_32)($17 + [376])), [96])
	
.LABEL $label$1
	$5 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($5, [976])
	CALL _ZN12bancorinvest15calc_dapp_quotaEy(($17 + [360]), $0, *($12 + [24]))
	$13 = *($17 + [368])
	$6 = ($12 + [16])
	CALL eosio_assert(((int_64)*($6) == (int_64)$13), [1040])
	$15 = *($17 + [360])
	$7 = ($12 + [8])
	CALL eosio_assert(((int_64)*($7) < (int_64)$15), [1104])
	$8 = ($2 + [8])
	CALL eosio_assert(((int_64)*($8) == (int_64)1497713412), [1312])
	$16 = *($2)
	CALL eosio_assert(((int_64)$16 > (int_64)0), [1376])
	$14 = *($7)
	$4 = *($6)
	CALL eosio_assert(((int_64)*($8) == (int_64)$4), [560])
	$14 = ((int_64)$14 + (int_64)*($2))
	CALL eosio_assert(((int_64)$14 > (int_64)-4611686018427387904), [608])
	CALL eosio_assert(((int_64)$14 < (int_64)4611686018427387904), [640])
	CALL eosio_assert(((int_64)$4 == (int_64)$13), [1040])
	CALL eosio_assert(((int_64)$14 > (int_64)$15), [1408])
	$13 = *($0)
	CALL eosio_assert($5, [400])
	CALL eosio_assert(((int_32)*($12 + [32]) == (int_32)($17 + [376])), [448])
	CALL eosio_assert(((int_64)*($17 + [376]) == (int_64)CALL $fimport$2()), [496])
	$14 = *($12)
	CALL eosio_assert(((int_64)*($8) == (int_64)*($6)), [560])
	$15 = ((int_64)*($7) + (int_64)*($2))
	*($7) = $15
	CALL eosio_assert(((int_64)$15 > (int_64)-4611686018427387904), [608])
	CALL eosio_assert(((int_64)*($7) < (int_64)4611686018427387904), [640])
	CALL eosio_assert(((int_64)$14 == (int_64)*($12)), [672])
	*($17 + [96]) = (($17 + [144]) + [32])
	*($17 + [92]) = ($17 + [144])
	*($17 + [88]) = ($17 + [144])
	*($17 + [328]) = ($17 + [88])
	*($17 + [28]) = $7
	*($17 + [24]) = $12
	*($17 + [32]) = ($12 + [24])
	CALL $21(($17 + [24]), ($17 + [328]))
	CALL db_update_i64(*($12 + [36]), $13, ($17 + [144]), [32])
	$12 = (($17 + [376]) + [16])
	if ( (uint_64)($14 <= *($12)) ){ goto $label$2 }
	*($12) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$12 = ($0 + [48])
	$7 = ($0 + [8])
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)*(($0 + [32]))) ){ goto $label$5 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$7), [96])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)-7949128876922874880, (int_64)-7949128876922874880)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $11($7, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$7), [96])
	
.LABEL $label$4
	$12 = $6
	
.LABEL $label$3
	*(($6 = (($17 + [328]) + [24]))) = *(($12 + [24]))
	*(($8 = (($17 + [328]) + [16]))) = *(($12 + [16]))
	*(($5 = (($17 + [328]) + [8]))) = *(($12 + [8]))
	*($17 + [328]) = *($12)
	$10 = *($5)
	$9 = (float_64)
	$11 = CALL pow(((float_64)((float_64)$9(*($8) - ((float_64)(CASTING float_64)(int_64 $16) / (float_64)(float_64)1e4))) / (float_64)*($17 + [328])) + (float_64)(float_64)1), (float_64)2)
	*($8) = $9
	$9 = *($6)
	$10 = ((float_64)$10 * (float_64)((float_64)$11 + (float_64)(float_64)-1))
	*($6) = $10
	$14 = (Rounds 0)(((float_64)(float_64))($9 - $10) * (float_64)(float_64)1e4)
	CALL eosio_assert(((int_64)$14) > (int_64)0), [1184])
	CALL $12($7, ($17 + [328]), *($0))
	*($17 + [320]) = (int_64)1397703940
	*($17 + [312]) = $14
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [224])
	$14 = (uint_64)*($17 + [320]) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$7 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [288])
	$14 = *((($17 + [312]) + [8]))
	*((($17 + [296]) + [8])) = $14
	*((($17 + [8]) + [8])) = $14
	$14 = *($17 + [312])
	*($17 + [296]) = $14
	*($17 + [8]) = $14
	CALL _ZN12bancorinvest17assert_enough_eosEN5eosio5assetE($0, ($17 + [8]))
	*($17 + [24]) = $1
	CALL $39(($17 + [144]), ($17 + [24]))
	*(($17 + [164])) = [0]
	*($17 + [156 align=4]) = (int_64)0
	$7 = ($17 + [156])
	$12 = CALL strlen([1248])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$16 }
	*(($17 + [156])) = ($12 << [1])
	$7 = ($7 + [1])
	if ( $12 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = (($12 + [16]) & [-16])
	$7 = CALL $74($6)
	*(($17 + [156])) = ($6 | [1])
	*(($17 + [164])) = $7
	*((($17 + [144]) + [16])) = $12
	
.LABEL $label$15
	CALL memcpy($7, [1248], $12)
	
.LABEL $label$14
	*(($7 + $12)) = [0]
	*(($17 + [176])) = [0]
	*($17 + [168]) = (int_64)0
	$7 = ($17 + [168])
	$12 = CALL strlen([1264])
	if ( ((uint_32)$12 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$19 }
	*(($17 + [168])) = ($12 << [1])
	$7 = ($7 + [1])
	if ( $12 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$6 = (($12 + [16]) & [-16])
	$7 = CALL $74($6)
	*(($17 + [168])) = ($6 | [1])
	*(($17 + [176])) = $7
	*(($17 + [172])) = $12
	
.LABEL $label$18
	CALL memcpy($7, [1264], $12)
	
.LABEL $label$17
	*(($7 + $12)) = [0]
	$12 = CALL $74([36])
	*($17 + [280]) = $12
	$7 = ($12 + [36])
	*($17 + [288]) = $7
	CALL $81($12, ($17 + [144]))
	CALL $81(($12 + [12]), (($17 + [144]) + [12]))
	CALL $81(($12 + [24]), (($17 + [144]) + [24]))
	*($17 + [284]) = $7
	if ( ((*($17 + [168]) & [1]) == 0) ){ goto $label$20 }
	CALL $75(*(($17 + [176])))
	
.LABEL $label$20
	if ( ((*($17 + [156]) & [1]) == 0) ){ goto $label$21 }
	CALL $75(*(($17 + [164])))
	
.LABEL $label$21
	if ( ((*($17 + [144]) & [1]) == 0) ){ goto $label$22 }
	CALL $75(*($17 + [152]))
	
.LABEL $label$22
	*($17 + [24]) = $1
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [144]), ($17 + [24]), [8])
	*($17 + [88]) = [9]
	CALL eosio_assert([1], [384])
	CALL memcpy((($17 + [144]) | [8]), ($17 + [88]), [1])
	CALL eosio_assert([1], [384])
	CALL memcpy((($17 + [144]) | [9]), [1248], [9])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [162]), $2, [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [170]), ($2 + [8]), [8])
	*($17 + [88]) = [7]
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [178]), ($17 + [88]), [1])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [179]), [1280], [7])
	*($17 + [88]) = $3
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [186]), ($17 + [88]), [8])
	*($17 + [72]) = [5]
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [194]), ($17 + [72]), [1])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [195]), [1296], [5])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [200]), ($17 + [312]), [8])
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [208]), (($17 + [312]) + [8]), [8])
	*($17 + [72]) = [0]
	CALL eosio_assert([1], [384])
	CALL memcpy(($17 + [216]), ($17 + [72]), [1])
	*((($17 + [128]) + [8])) = [0]
	*($17 + [128]) = (int_64)0
	$12 = CALL strlen(($17 + [144]))
	if ( ((uint_32)$12 > (uint_32)[-17]) ){ goto $label$11 }
	if ( ((uint_32)$12 >= (uint_32)[11]) ){ goto $label$25 }
	*($17 + [128]) = ($12 << [1])
	$2 = (($17 + [128]) | [1])
	if ( $12 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$7 = (($12 + [16]) & [-16])
	$2 = CALL $74($7)
	*($17 + [128]) = ($7 | [1])
	*($17 + [136]) = $2
	*($17 + [132]) = $12
	
.LABEL $label$24
	CALL memcpy($2, ($17 + [144]), $12)
	
.LABEL $label$23
	*(($2 + $12)) = [0]
	$4 = *($0)
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1120]
	$15 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$31 }
	$0 = *($12)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$0 = ($0 + [165])
	goto $label$29 
	
.LABEL $label$31
	$1 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$27
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$1 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$26 }
	*($17 + [80]) = $15
	*($17 + [72]) = $4
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1152]
	$15 = (int_64)0
	
.LOOP $label$32:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$37 }
	$0 = *($12)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$0 = ($0 + [165])
	goto $label$35 
	
.LABEL $label$37
	$1 = (int_64)0
	if ( ((int_64)$14 == (int_64)11) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$36
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$34
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$33
	$12 = ($12 + [1])
	$13 = ((int_64)$13 + (int_64)-5)
	$15 = ((int_64)$1 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)1)
	if ( ((int_64)$14 != (int_64)13) ){ goto $label$32 }
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [1168]
	$16 = (int_64)0
	
.LOOP $label$38:
	if ( ((uint_64)$14 > (uint_64)(int_64)7) ){ goto $label$43 }
	$0 = *($12)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$0 = ($0 + [165])
	goto $label$41 
	
.LABEL $label$43
	$1 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$42
	$0 = ( ($0 + [208]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$39
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$16 = ((int_64)$1 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$38 }
	*(($17 + [44])) = *($17 + [316])
	*($17 + [32]) = $3
	*(($17 + [52])) = *(($17 + [324]))
	*(($17 + [48])) = *(($17 + [320]))
	*($17 + [24]) = $4
	*($17 + [40]) = *($17 + [312])
	CALL $81(($17 + [56]), ($17 + [128]))
	$12 = CALL $34(($17 + [88]), ($17 + [72]), $15, $16, ($17 + [24]))
	CALL $29(($17 + [416]), $12)
	$0 = *($17 + [416])
	CALL send_inline($0, (*($17 + [420]) - $0))
	$0 = *($17 + [416])
	if ( ($0 == 0) ){ goto $label$44 }
	*($17 + [420]) = $0
	CALL $75($0)
	
.LABEL $label$44
	$0 = *($12 + [28])
	if ( ($0 == 0) ){ goto $label$45 }
	*(($12 + [32])) = $0
	CALL $75($0)
	
.LABEL $label$45
	$0 = *($12 + [16])
	if ( ($0 == 0) ){ goto $label$46 }
	*(($12 + [20])) = $0
	CALL $75($0)
	
.LABEL $label$46
	if ( ((*($17 + [56]) & [1]) == 0) ){ goto $label$47 }
	CALL $75(*(($17 + [64])))
	
.LABEL $label$47
	if ( ((*($17 + [128]) & [1]) == 0) ){ goto $label$48 }
	CALL $75(*($17 + [136]))
	
.LABEL $label$48
	$2 = *($17 + [280])
	if ( ($2 == 0) ){ goto $label$49 }
	$12 = *($17 + [284])
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$50 }
	$0 = ([0] - $2)
	$12 = ($12 + [-12])
	
.LOOP $label$51:
	if ( ((*($12) & [1]) == 0) ){ goto $label$52 }
	CALL $75(*(($12 + [8])))
	
.LABEL $label$52
	$12 = ($12 + [-12])
	if ( ((int_32)($12 + $0) != (int_32)[-12]) ){ goto $label$51 }
	
.LABEL $label$50
	*($17 + [284]) = $2
	CALL $75($2)
	
.LABEL $label$49
	$2 = *($17 + [400])
	if ( ($2 == 0) ){ goto $label$53 }
	$7 = ($17 + [404])
	$12 = *($7)
	if ( ((int_32)$12 == (int_32)$2) ){ goto $label$55 }
	
.LOOP $label$56:
	$12 = ($12 + [-24])
	$0 = *($12)
	*($12) = [0]
	if ( ($0 == 0) ){ goto $label$57 }
	CALL $75($0)
	
.LABEL $label$57
	if ( ((int_32)$2 != (int_32)$12) ){ goto $label$56 }
	$12 = *(($17 + [400]))
	goto $label$54 
	
.LABEL $label$55
	$12 = $2
	
.LABEL $label$54
	*($7) = $2
	CALL $75($12)
	
.LABEL $label$53
	*([0] + [4]) = ($17 + [432])
	return (unreachable)
	
.LABEL $label$13
	CALL $76($7)
	
.LABEL $label$12
	CALL $76($7)
	
.LABEL $label$11
	CALL $76(($17 + [128]))
	(unreachable)
	(unreachable)
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $79($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $74($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $75($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [384])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [384])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [384])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [384])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $74($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $80($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $75($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [384])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [384])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [384])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}