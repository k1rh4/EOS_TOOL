(data (i32.const 4) "\90g\00\00")
(data (i32.const 16) "\10\'\00\00\00\00\00\00d\00\00\00\00\00\00\00\a0\86\01\00\00\00\00\00\c8\00\00\00\00\00\00\00@\0d\03\00\00\00\00\00\90\01\00\00\00\00\00\00\80\1a\06\00\00\00\00\00 \03\00\00\00\00\00\00\005\0c\00\00\00\00\00@\06\00\00\00\00\00\00\00j\18\00\00\00\00\00\80\0c\00\00\00\00\00\00\00\d40\00\00\00\00\00\00\19\00\00\00\00\00\00\00\a8a\00\00\00\00\00\002\00\00\00\00\00\00\00P\c3\00\00\00\00\00\00d\00\00\00\00\00\00@]\c6\00\00\00\00\00\00\c8\00\00\00\00\00\00\00\ca\9a;\00\00\00\00\00\90\01\00\00\00\00\00")
(data (i32.const 192) "price must be great than 0\00")
(data (i32.const 224) "max keys must be great than 0\00")
(data (i32.const 256) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 320) "user does not exist\00")
(data (i32.const 352) "integer overflow adding withdraw balance\00")
(data (i32.const 400) "cannot pass end iterator to modify\00")
(data (i32.const 448) "object passed to modify is not in multi_index\00")
(data (i32.const 496) "cannot modify objects in table of another contract\00")
(data (i32.const 560) "updater cannot change primary key when modifying an object\00")
(data (i32.const 624) "write\00")
(data (i32.const 640) "active\00")
(data (i32.const 656) "eosio.token\00")
(data (i32.const 672) "transfer\00")
(data (i32.const 688) "from gt.io\00")
(data (i32.const 704) "error reading iterator\00")
(data (i32.const 736) "read\00")
(data (i32.const 752) "transfer not from eosio.token\00")
(data (i32.const 784) "transfer not made to this contract\00")
(data (i32.const 832) "invalid quantity\00")
(data (i32.const 864) "new keys must be one or more\00")
(data (i32.const 896) "cannot create objects in table of another contract\00")
(data (i32.const 960) "integer overflow adding user balance total\00")
(data (i32.const 1008) "integer overflow adding user balance balance\00")
(data (i32.const 1056) "cannot increment end iterator\00")
(data (i32.const 1088) "integer overflow adding team reward total\00")
(data (i32.const 1136) "integer overflow adding team reward balance\00")
(data (i32.const 1184) "integer overflow adding new keys\00")
(data (i32.const 1232) "integer overflow adding player amount\00")
(data (i32.const 1280) "asset must be EOS\00")
(data (i32.const 1312) "integer overflow adding counter balance\00")
(data (i32.const 1360) "integer overflow adding pot\00")
(data (i32.const 1392) "integer overflow adding sold_keys\00")
(data (i32.const 1440) "integer overflow adding winner total\00")
(data (i32.const 1488) "integer overflow adding winner balance\00")
(data (i32.const 1536) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1600) "invalid symbol name\00")
(data (i32.const 1632) "get\00")
(data (i32.const 10032) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$11 (param i32)))
(import "env" "memcpy" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$14 (param i64)))
(import "env" "require_auth2" (func $fimport$15 (param i64 i64)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z13get_new_pricey" (func $5))
(export "_Z23get_same_level_max_keysy" (func $6))
(export "_Z15get_new_key_numyy" (func $7))
(export "_ZN6win_gt8withdrawEyN5eosio5assetE" (func $8))
(export "_ZN6win_gt2onERKN5eosio8currency8transferEy" (func $17))
(export "_ZN6win_gt4pingEv" (func $18))
(export "_ZN6win_gt2hiEy" (func $26))
(export "_ZN6win_gt8maintainEv" (func $27))
(export "_ZN6win_gt5applyEyy" (func $28))
(export "apply" (func $35))
(export "malloc" (func $39))
(export "free" (func $42))
(export "memcmp" (func $48))
(export "strlen" (func $49))
(table $0 4 4 anyfunc)
(elem (i32.const 0) $50 $18 $27 $26)



void .FUNC _ZN6win_gt4pingEv (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [96])
	*([0] + [4]) = $15
	$1 = ($0 + [96])
	$11 = [0]
	$12 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $19($1, $12)
	
.LABEL $label$1
	if ( ((uint_64)*($11 + [24]) > (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$2 }
	$2 = *($11 + [8])
	$3 = *(($0 + [40]))
	$13 = *(($0 + [44]))
	if ( ((int_32)$13 == (int_32)$3) ){ goto $label$3 }
	$12 = ($13 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$4:
	if ( ((int_64)*(*($12)) == (int_64)$2) ){ goto $label$3 }
	$13 = $12
	$5 = ($12 + [-24])
	$12 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	$5 = ($0 + [16])
	if ( ((int_32)$13 == (int_32)$3) ){ goto $label$8 }
	$12 = *(($13 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$5), [256])
	if ( $12 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$12 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020380869172259840, $2)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$6 }
	$12 = CALL $9($5, $12)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$5), [256])
	
.LABEL $label$7
	$13 = ($0 + [32])
	$4 = ($0 + [8])
	$3 = ($15 + [16])
	$14 = ($15 | [8])
	goto $label$5 
	
.LABEL $label$6
	$8 = *($0 + [8])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [896])
	*(($12 = CALL $43([40])) + [16]) = (int_64)0
	*($12 + [8]) = (int_64)0
	*($12 + [24]) = $5
	*($12) = $2
	CALL eosio_assert([1], [624])
	CALL memcpy($15, $12, [8])
	CALL eosio_assert([1], [624])
	$14 = ($15 | [8])
	CALL memcpy($14, ($12 + [8]), [8])
	CALL eosio_assert([1], [624])
	$3 = ($15 + [16])
	CALL memcpy($3, ($12 + [16]), [8])
	$2 = *($12)
	$6 = CALL db_store_i64(*(($0 + [24])), (int_64)-3020380869172259840, $8, $2, $15, [24])
	*($12 + [28]) = $6
	$13 = ($0 + [32])
	if ( (uint_64)($2 <= *($13)) ){ goto $label$9 }
	*($13) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($15 + [80]) = $12
	$2 = *($12)
	*($15) = $2
	*($15 + [92]) = $6
	$7 = ($0 + [44])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [48]))) ){ goto $label$11 }
	*($4 + [8]) = $2
	*($4 + [16]) = $6
	*($15 + [80]) = [0]
	*($4) = $12
	*($7) = ($4 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $16(($0 + [40]), ($15 + [80]), $15, ($15 + [92]))
	
.LABEL $label$10
	$4 = *($15 + [80])
	*($15 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $44($4)
	
.LABEL $label$12
	$4 = ($0 + [8])
	
.LABEL $label$5
	$8 = *($4)
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)$5), [448])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$2()), [496])
	$2 = *($12)
	$9 = *($12 + [8])
	CALL eosio_assert(((uint_64)((int_64)*($11 + [40]) + (int_64)$9) > (uint_64)$9), [1440])
	$9 = *($11 + [40])
	*($12 + [8]) = ((int_64)*($12 + [8]) + (int_64)$9)
	$10 = *($12 + [16])
	CALL eosio_assert(((uint_64)((int_64)$9 + (int_64)$10) > (uint_64)$10), [1488])
	*($12 + [16]) = ((int_64)*($12 + [16]) + (int_64)*($11 + [40]))
	CALL eosio_assert(((int_64)$2 == (int_64)*($12)), [560])
	CALL eosio_assert([1], [624])
	$5 = $15
	CALL memcpy($5, $12, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($14, ($12 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($3, ($12 + [16]), [8])
	CALL db_update_i64(*($12 + [28]), $8, $5, [24])
	if ( (uint_64)($2 <= *($13)) ){ goto $label$13 }
	*($13) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$8 = *(($0 + [8]))
	CALL eosio_assert([1], [400])
	CALL eosio_assert(((int_32)*($11 + [72]) == (int_32)$1), [448])
	CALL eosio_assert(((int_64)*(($0 + [96])) == (int_64)CALL $fimport$2()), [496])
	*(($11 + [40])) = (int_64)0
	*($11 + [64]) = ((int_64)*($11 + [64]) + (int_64)1)
	$2 = *($11)
	CALL eosio_assert([1], [560])
	*($15 + [88]) = ($15 + [72])
	*($15 + [84]) = $15
	*($15 + [80]) = $15
	CALL $23(($15 + [80]), $11)
	CALL db_update_i64(*($11 + [76]), $8, $15, [72])
	$12 = ($0 + [112])
	if ( (uint_64)($2 <= *($12)) ){ goto $label$2 }
	*($12) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*([0] + [4]) = ($15 + [96])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [704])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $43([88])
	$5 = CALL current_time()
	*($6 + [32]) = (int_64)0
	*($6 + [40]) = (int_64)0
	*($6 + [48]) = (int_64)0
	*($6 + [56]) = (int_64)100
	*($6 + [64]) = (int_64)1
	$5 = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($6 + [16]) = $5
	*($6 + [24]) = ((int_64)$5 + (int_64)86400)
	*($6 + [72]) = $0
	CALL $24(($8 + [32]), $6)
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $25(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $44($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $40([1636], $0)
}

void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1536])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1600])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $32($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN6win_gt5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [672]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $29(($9 + [48]))
	CALL _ZN6win_gt2onERKN5eosio8currency8transferEy($0, ($9 + [48]), $1)
	if ( ((*($9 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $44(*(($9 + [88])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-7954134735498772480) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)7746191359077253120) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-6077959540857372672) ){ goto $label$7 }
	*($9 + [44]) = [0]
	*($9 + [40]) = [1]
	*($9) = *($9 + [40])
	CALL $30($0, $9)
	goto $label$7 
	
.LABEL $label$10
	*($9 + [28]) = [0]
	*($9 + [24]) = [2]
	*($9 + [16 align=4]) = *($9 + [24])
	CALL $30($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [36]) = [0]
	*($9 + [32]) = [3]
	*($9 + [8 align=4]) = *($9 + [32])
	CALL $31($0, ($9 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $43(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $44($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $44($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [704])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $43([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [736])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [736])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [736])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $21(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $44($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [496])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	*($1 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	if ( ((uint_64)*(*(*($3 + [4]) + [4]) + [24]) <= (uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$2 }
	$5 = ((int_64)*($1 + [24]) + (int_64)3600)
	$6 = ((int_64)*(($1 + [16])) + (int_64)86400)
	*($1 + [24]) = ( $6 ? $5 : (uint_64)($6 <= $5) )
	goto $label$1 
	
.LABEL $label$2
	*($1 + [24]) = ((int_64)*(($1 + [16])) + (int_64)86400)
	
.LABEL $label$1
	$6 = *($1 + [32])
	CALL eosio_assert(((uint_64)((int_64)*(*($3 + [8]) + [16]) + (int_64)$6) > (uint_64)$6), [1312])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($3 + [8]) + [16]))
	$6 = *($1 + [40])
	CALL eosio_assert(((uint_64)(int_64))((int_64))(((int_64)*(*($3 + [8]) + [16]) + (int_64)$6) - *(*($3 + [12]))) - *(*($3 + [16]))) > (uint_64)$6), [1360])
	*($1 + [40]) = ((int_64))((int_64))(*(*($3 + [8]) + [16]) - *(*($3 + [12]))) - *(*($3 + [16]))) + (int_64)*($1 + [40]))
	$6 = *($1 + [48])
	CALL eosio_assert(((uint_64)((int_64)*(*($3 + [20])) + (int_64)$6) > (uint_64)$6), [1392])
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)*(*($3 + [20])))
	*($1 + [56]) = *(*($3 + [24]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [560])
	$8 = $8
	$3 = ($8 + [-80])
	*([0] + [4]) = $3
	*($7 + [4]) = $3
	*($7) = $3
	*($7 + [8]) = ($8 + [-8])
	CALL $23($7, $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $43(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $44($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $44($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZN6win_gt8maintainEv (int_32 $0)
{
	CALL require_auth(*($0 + [8]))
}

void .FUNC _ZN6win_gt2hiEy (int_32 $0, int_64 $1)
{
	CALL require_auth($1)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10124])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10020])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9828]
	$1 = (((int_32)$2 * (int_32)[12]) + [9828])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10118]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10120])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10118]) = [1]
	$7 = ($7 << [16])
	*([0] + [10120]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10120])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10120]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10118]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10118]) = [1]
	$3 = ($3 << [16])
	*([0] + [10120]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10120])
	
.LABEL $label$8
	*([0] + [10120]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $41($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10032])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $47 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $43(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $44($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $45 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $44 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC _ZN6win_gt8withdrawEyN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	$3 = *(($0 + [40]))
	$7 = *(($0 + [44]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$8 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$7 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [16])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [256])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3020380869172259840, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $9($6, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [256])
	
.LABEL $label$3
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [320])
	$10 = *($2)
	CALL eosio_assert(((uint_64)((int_64)*($8 + [16]) + (int_64)$10) > (uint_64)$10), [352])
	*($2) = ((int_64)$10 + (int_64)*($8 + [16]))
	$9 = *($0 + [8])
	CALL eosio_assert($7, [400])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [448])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [496])
	$10 = (int_64)0
	*($8 + [16]) = (int_64)0
	$12 = *($8)
	CALL eosio_assert([1], [560])
	CALL eosio_assert([1], [624])
	CALL memcpy(($15 + [16]), $8, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy((($15 + [16]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy((($15 + [16]) + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), $9, ($15 + [16]), [24])
	$8 = ($0 + [32])
	if ( (uint_64)($12 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = *(($0 + [8]))
	$9 = (int_64)59
	$8 = [640]
	$11 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$11 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$6 = ($6 + [165])
	goto $label$9 
	
.LABEL $label$11
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$7
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$6 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [656]
	$13 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$17 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$6 = ($6 + [165])
	goto $label$15 
	
.LABEL $label$17
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$13
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$13 = ((int_64)$12 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$12 }
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [672]
	$14 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$23 }
	$6 = *($8)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$6 = ($6 + [165])
	goto $label$21 
	
.LABEL $label$23
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$19
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$12 | (int_64)$14)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$18 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$8 = CALL strlen([688])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$27 }
	*($15) = ($8 << [1])
	$6 = ($15 | [1])
	if ( $8 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$7 = (($8 + [16]) & [-16])
	$6 = CALL $43($7)
	*($15) = ($7 | [1])
	*($15 + [8]) = $6
	*($15 + [4]) = $8
	
.LABEL $label$26
	CALL memcpy($6, [688], $8)
	
.LABEL $label$25
	*(($6 + $8)) = [0]
	*((($15 + [16]) + [28])) = *(($2 + [12]))
	*((($15 + [16]) + [24])) = *(($2 + [8]))
	*((($15 + [16]) + [20])) = *(($2 + [4]))
	*($15 + [24]) = $1
	*($15 + [16]) = *(($0 + [8]))
	*($15 + [32]) = *($2)
	$8 = ($15 + [8])
	*(($15 + [56])) = *($8)
	*($15 + [48]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($8) = [0]
	*($15 + [72]) = $13
	*($15 + [80]) = $14
	*(($8 = CALL $43([16]))) = $5
	*($8 + [8]) = $11
	*((($15 + [72]) + [32])) = [0]
	$6 = ($8 + [16])
	*((($15 + [72]) + [24])) = $6
	*((($15 + [72]) + [20])) = $6
	*($15 + [88]) = $8
	*($15 + [100]) = [0]
	*((($15 + [72]) + [36])) = [0]
	$8 = *($15 + [48])
	$6 = ( *((($15 + [16]) + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($6 + [32])
	$10 = (CASTING uint_64)(uint_32 $6)
	$6 = (($15 + [72]) + [28])
	
.LOOP $label$28:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$28 }
	if ( ($8 == 0) ){ goto $label$30 }
	CALL $10($6, $8)
	$6 = *(($15 + [104]))
	$8 = *(($15 + [100]))
	goto $label$29 
	
.LABEL $label$30
	$6 = [0]
	$8 = [0]
	
.LABEL $label$29
	*($15 + [132]) = $8
	*($15 + [128]) = $8
	*($15 + [136]) = $6
	*($15 + [112]) = ($15 + [128])
	*($15 + [120]) = ($15 + [16])
	CALL $11(($15 + [120]), ($15 + [112]))
	CALL $12(($15 + [128]), ($15 + [72]))
	$8 = *($15 + [128])
	CALL send_inline($8, (*($15 + [132]) - $8))
	$8 = *($15 + [128])
	if ( ($8 == 0) ){ goto $label$31 }
	*($15 + [132]) = $8
	CALL $44($8)
	
.LABEL $label$31
	$8 = *($15 + [100])
	if ( ($8 == 0) ){ goto $label$32 }
	*(($15 + [104])) = $8
	CALL $44($8)
	
.LABEL $label$32
	$8 = *($15 + [88])
	if ( ($8 == 0) ){ goto $label$33 }
	*(($15 + [92])) = $8
	CALL $44($8)
	
.LABEL $label$33
	if ( ((*(($15 + [48])) & [1]) == 0) ){ goto $label$34 }
	CALL $44(*(($15 + [56])))
	
.LABEL $label$34
	if ( ((*($15) & [1]) == 0) ){ goto $label$35 }
	CALL $44(*(($15 + [8])))
	
.LABEL $label$35
	*([0] + [4]) = ($15 + [144])
	return (unreachable)
	
.LABEL $label$24
	CALL $45($15)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [704])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $43([40])) + [16]) = (int_64)0
	*($6 + [8]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [736])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [736])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [736])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $16(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $44($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_64 .FUNC _Z23get_same_level_max_keysy (int_64 $0)
{
	int_64 $1
	int_64 $2
	$1 = *([0] + [16])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [32])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [48])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [64])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [80])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [96])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [112])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$1 = *([0] + [128])
	if ( ((uint_64)$1 > (uint_64)$0) ){ goto $label$2 }
	$2 = (int_64)0
	$1 = *([0] + [144])
	if ( ((uint_64)$1 <= (uint_64)$0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = (int_64))($1 - $0)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC _Z15get_new_key_numyy (int_64 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	$2 = [0]
	if ( ((uint_64)*([0] + [16]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [1]
	if ( ((uint_64)*([0] + [32]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [2]
	if ( ((uint_64)*([0] + [48]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [3]
	if ( ((uint_64)*([0] + [64]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [4]
	if ( ((uint_64)*([0] + [80]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [5]
	if ( ((uint_64)*([0] + [96]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [6]
	if ( ((uint_64)*([0] + [112]) > (uint_64)$1) ){ goto $label$2 }
	$2 = [7]
	if ( ((uint_64)*([0] + [128]) > (uint_64)$1) ){ goto $label$2 }
	$3 = (int_64)0
	$2 = [8]
	if ( ((uint_64)*([0] + [144]) <= (uint_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = *((($2 << [4]) + [24]))
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 != (int_64)0), [192])
	$4 = *([0] + [16])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [32])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [48])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [64])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [80])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [96])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [112])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$4 = *([0] + [128])
	if ( ((uint_64)$4 > (uint_64)$1) ){ goto $label$4 }
	$5 = (int_64)0
	$4 = *([0] + [144])
	if ( ((uint_64)$4 <= (uint_64)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = (int_64))($4 - $1)
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$5 != (int_64)0), [224])
	$4 = ((int_64)$5 * (int_64)$3)
	if ( ((uint_64)$4 >= (uint_64)$0) ){ goto $label$5 }
	return ((int_64)CALL _Z15get_new_key_numyy((int_64))($0 - $4), ((int_64)$5 + (int_64)$1)) + (int_64)$5)
	
.LABEL $label$5
	return ((uint_64)$0 / (uint_64)$3)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_64 .FUNC _Z13get_new_pricey (int_64 $0)
{
	int_32 $1
	int_64 $2
	$1 = [0]
	if ( ((uint_64)*([0] + [16]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [1]
	if ( ((uint_64)*([0] + [32]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [2]
	if ( ((uint_64)*([0] + [48]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [3]
	if ( ((uint_64)*([0] + [64]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [4]
	if ( ((uint_64)*([0] + [80]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [5]
	if ( ((uint_64)*([0] + [96]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [6]
	if ( ((uint_64)*([0] + [112]) > (uint_64)$0) ){ goto $label$2 }
	$1 = [7]
	if ( ((uint_64)*([0] + [128]) > (uint_64)$0) ){ goto $label$2 }
	$2 = (int_64)0
	$1 = [8]
	if ( ((uint_64)*([0] + [144]) <= (uint_64)$0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = *((($1 << [4]) + [24]))
	
.LABEL $label$1
	return $2
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [624])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [624])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $43(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $47($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $44($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $44($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN6win_gt2onERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	$25 = (*([0] + [4]) - [128])
	*([0] + [4]) = $25
	CALL _ZN6win_gt4pingEv($0)
	if ( ((int_64)*($1) == (int_64)*($0 + [8])) ){ goto $label$1 }
	$9 = (int_64)0
	$17 = (int_64)59
	$23 = [656]
	$18 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$9 > (uint_64)(int_64)10) ){ goto $label$7 }
	$12 = *($23)
	if ( ((uint_32)(($12 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$12 = ($12 + [165])
	goto $label$5 
	
.LABEL $label$7
	$19 = (int_64)0
	if ( ((int_64)$9 == (int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$12 = ( ($12 + [208]) ? [0] : ((($12 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $12) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$3
	$23 = ($23 + [1])
	$17 = ((int_64)$17 + (int_64)-5)
	$18 = ((int_64)$19 | (int_64)$18)
	$9 = ((int_64)$9 + (int_64)1)
	if ( ((int_64)$9 != (int_64)13) ){ goto $label$2 }
	CALL eosio_assert(((int_64)$18 == (int_64)$2), [752])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*(($0 + [8]))), [784])
	$23 = ($1 + [24])
	CALL eosio_assert(((int_64)*($23) == (int_64)1397703940), [1280])
	$24 = ($1 + [16])
	$12 = [0]
	if ( ((uint_64)((int_64)*($1 + [16]) + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$8 }
	$9 = (uint_64)*($23) >> (uint_64)(int_64)8)
	$23 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$12 = [1]
	$23 = ($23 + [1])
	if ( ((int_32)$23 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$12 = [0]
	
.LABEL $label$8
	CALL eosio_assert($12, [832])
	$17 = *($24)
	if ( ((int_64)$17 != (int_64)1) ){ goto $label$13 }
	*(($23 = (($25 + [96]) + [12]))) = *(($24 + [12]))
	*(($12 = (($25 + [96]) + [8]))) = *(($24 + [8]))
	*($25 + [96]) = *($24)
	*($25 + [100]) = *(($24 + [4]))
	$9 = *($1)
	*(($25 + [12])) = *($23)
	*(($25 + [8])) = *($12)
	*($25 + [4]) = *($25 + [100])
	*($25) = *($25 + [96])
	CALL _ZN6win_gt8withdrawEyN5eosio5assetE($0, $9, $25)
	goto $label$1 
	
.LABEL $label$13
	*($25 + [88]) = *($1)
	$3 = ($0 + [96])
	$12 = [0]
	$23 = [0]
	$24 = CALL db_lowerbound_i64(*($0 + [96]), *(($0 + [104])), (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$14 }
	$23 = CALL $19($3, $24)
	
.LABEL $label$14
	*($25 + [80]) = $3
	*($25 + [84]) = $23
	$19 = *($23 + [48])
	$9 = CALL _Z15get_new_key_numyy($17, $19)
	*($25 + [72]) = $9
	CALL eosio_assert(((int_64)$9 != (int_64)0), [864])
	$19 = ((int_64)$9 + (int_64)$19)
	if ( ((uint_64)*([0] + [16]) > (uint_64)$19) ){ goto $label$16 }
	$12 = [1]
	if ( ((uint_64)*([0] + [32]) > (uint_64)$19) ){ goto $label$16 }
	$12 = [2]
	if ( ((uint_64)*([0] + [48]) > (uint_64)$19) ){ goto $label$16 }
	$12 = [3]
	if ( ((uint_64)*([0] + [64]) > (uint_64)$19) ){ goto $label$16 }
	$12 = [4]
	if ( ((uint_64)*([0] + [80]) > (uint_64)$19) ){ goto $label$16 }
	$12 = [5]
	if ( ((uint_64)*([0] + [96]) > (uint_64)$19) ){ goto $label$16 }
	$12 = [6]
	if ( ((uint_64)*([0] + [112]) > (uint_64)$19) ){ goto $label$16 }
	$12 = [7]
	if ( ((uint_64)*([0] + [128]) > (uint_64)$19) ){ goto $label$16 }
	$9 = (int_64)0
	$12 = [8]
	if ( ((uint_64)*([0] + [144]) <= (uint_64)$19) ){ goto $label$15 }
	
.LABEL $label$16
	$9 = *((($12 << [4]) + [24]))
	
.LABEL $label$15
	*($25 + [64]) = $9
	CALL eosio_assert(((int_64)$9 != (int_64)0), [192])
	$4 = ($0 + [56])
	$9 = (int_64)0
	$12 = ($0 + [64])
	$24 = CALL db_lowerbound_i64(*($0 + [56]), *($12), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$24 < (int_32)[0]) ){ goto $label$17 }
	CALL $20($4, $24)
	$9 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $17) * (float_64)(float_64)0.7))
	
.LABEL $label$17
	*($25 + [56]) = $9
	$12 = CALL db_lowerbound_i64(*($4), *($12), (int_64)-6030912129153084416, (int_64)0)
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$19 }
	$20 = ($0 + [40])
	$7 = ($0 + [44])
	$21 = ($0 + [16])
	$22 = CALL $20($4, $12)
	$6 = (($25 + [16]) + [16])
	$5 = (($25 + [16]) | [8])
	$14 = ($0 + [24])
	$15 = ($0 + [32])
	$16 = ($0 + [48])
	
.LOOP $label$20:
	$8 = ((float_64)(CASTING float_64)(uint_64 *($22 + [8])) / (float_64)(CASTING float_64)(uint_64 *($23 + [48])))
	$13 = (CASTING float_64)(uint_64 $9)
	$9 = *($22)
	$10 = *($20)
	$24 = *($7)
	if ( ((int_32)$24 == (int_32)$10) ){ goto $label$21 }
	$23 = ($24 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$22:
	if ( ((int_64)*(*($23)) == (int_64)$9) ){ goto $label$21 }
	$24 = $23
	$12 = ($23 + [-24])
	$23 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	$8 = ((float_64)$13 * (float_64)$8)
	if ( ((int_32)$24 == (int_32)$10) ){ goto $label$25 }
	$23 = *(($24 + [-24]))
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)$21), [256])
	if ( $23 ){ goto $label$23 }
	goto $label$24 
	
.LABEL $label$25
	$23 = CALL db_find_i64(*(($0 + [16])), *($14), (int_64)-3020380869172259840, $9)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$24 }
	$23 = CALL $9($21, $23)
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)$21), [256])
	goto $label$23 
	
.LABEL $label$24
	$19 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*($21) == (int_64)CALL $fimport$2()), [896])
	*(($23 = CALL $43([40])) + [16]) = (int_64)0
	*($23 + [8]) = (int_64)0
	*($23 + [24]) = $21
	*($23) = *($22)
	CALL eosio_assert([1], [624])
	CALL memcpy(($25 + [16]), $23, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($5, ($23 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($6, ($23 + [16]), [8])
	$9 = *($23)
	$24 = CALL db_store_i64(*($14), (int_64)-3020380869172259840, $19, $9, ($25 + [16]), [24])
	*($23 + [28]) = $24
	if ( (uint_64)($9 <= *($15)) ){ goto $label$26 }
	*($15) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$26
	*($25 + [48]) = $23
	$9 = *($23)
	*($25 + [16]) = $9
	*($25 + [120]) = $24
	$12 = *(($0 + [44]))
	if ( ((uint_32)$12 >= (uint_32)*($16)) ){ goto $label$28 }
	*($12 + [8]) = $9
	*($12 + [16]) = $24
	*($25 + [48]) = [0]
	*($12) = $23
	*($7) = ($12 + [24])
	goto $label$27 
	
.LABEL $label$28
	CALL $16($20, ($25 + [48]), ($25 + [16]), ($25 + [120]))
	
.LABEL $label$27
	$12 = *($25 + [48])
	*($25 + [48]) = [0]
	if ( ($12 == 0) ){ goto $label$23 }
	CALL $44($12)
	
.LABEL $label$23
	$19 = *(($0 + [8]))
	CALL eosio_assert(((int_32)$23 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)$21), [448])
	CALL eosio_assert(((int_64)*($21) == (int_64)CALL $fimport$2()), [496])
	$9 = *($23)
	$13 = (CASTING float_64)(uint_64 *($23 + [8]))
	CALL eosio_assert(((float_64)((float_64)$8 + (float_64)$13) > (float_64)$13), [960])
	*($23 + [8]) = (Rounds 0)(((float_64)$8 + (float_64)(CASTING float_64)(uint_64 *($23 + [8]))))
	$13 = (CASTING float_64)(uint_64 *($23 + [16]))
	CALL eosio_assert(((float_64)((float_64)$8 + (float_64)$13) > (float_64)$13), [1008])
	*($23 + [16]) = (Rounds 0)(((float_64)$8 + (float_64)(CASTING float_64)(uint_64 *($23 + [16]))))
	CALL eosio_assert(((int_64)$9 == (int_64)*($23)), [560])
	CALL eosio_assert([1], [624])
	CALL memcpy(($25 + [16]), $23, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($5, ($23 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($6, ($23 + [16]), [8])
	CALL db_update_i64(*($23 + [28]), $19, ($25 + [16]), [24])
	if ( (uint_64)($9 <= *($15)) ){ goto $label$29 }
	*($15) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$29
	CALL eosio_assert([1], [1056])
	$23 = CALL db_next_i64(*($22 + [28]), ($25 + [16]))
	if ( ((int_32)$23 <= (int_32)[-1]) ){ goto $label$18 }
	$22 = CALL $20($4, $23)
	$23 = *($25 + [84])
	$9 = *($25 + [56])
	goto $label$20 
	
.LABEL $label$19
	$20 = ($0 + [40])
	$7 = ($0 + [44])
	$21 = ($0 + [16])
	
.LABEL $label$18
	*($25 + [48]) = (Rounds 0)(((float_64)(CASTING float_64)(int_64 $17) * (float_64)(float_64)0.1))
	$22 = *($20)
	$24 = *($7)
	if ( ((int_32)$24 == (int_32)$22) ){ goto $label$30 }
	$23 = ($24 + [-24])
	$11 = ([0] - $22)
	
.LOOP $label$31:
	if ( ((int_64)*(*($23)) == (int_64)595056490759864848) ){ goto $label$30 }
	$24 = $23
	$12 = ($23 + [-24])
	$23 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$31 }
	
.LABEL $label$30
	if ( ((int_32)$24 == (int_32)$22) ){ goto $label$35 }
	$23 = *(($24 + [-24]))
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)$21), [256])
	if ( $23 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$23 = CALL db_find_i64(*($0 + [16]), *(($0 + [24])), (int_64)-3020380869172259840, (int_64)595056490759864848)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$33 }
	$23 = CALL $9($21, $23)
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)$21), [256])
	
.LABEL $label$34
	$12 = ($0 + [32])
	$10 = ($25 + [32])
	$15 = (($25 + [16]) | [8])
	$22 = ($25 + [16])
	goto $label$32 
	
.LABEL $label$33
	$19 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*($0 + [16]) == (int_64)CALL $fimport$2()), [896])
	*(($23 = CALL $43([40])) + [16]) = (int_64)0
	*($23 + [8]) = (int_64)0
	*($23 + [24]) = $21
	*($23) = (int_64)595056490759864848
	CALL eosio_assert([1], [624])
	CALL memcpy(($25 + [16]), $23, [8])
	CALL eosio_assert([1], [624])
	$15 = (($25 + [16]) | [8])
	CALL memcpy($15, ($23 + [8]), [8])
	CALL eosio_assert([1], [624])
	$10 = (($25 + [16]) + [16])
	CALL memcpy($10, ($23 + [16]), [8])
	$9 = *($23)
	$11 = CALL db_store_i64(*(($0 + [24])), (int_64)-3020380869172259840, $19, $9, ($25 + [16]), [24])
	*($23 + [28]) = $11
	$12 = ($0 + [32])
	if ( (uint_64)($9 <= *($12)) ){ goto $label$36 }
	*($12) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$36
	*($25 + [120]) = $23
	$9 = *($23)
	*($25 + [16]) = $9
	*($25 + [116]) = $11
	$24 = *(($0 + [44]))
	if ( ((uint_32)$24 >= (uint_32)*(($0 + [48]))) ){ goto $label$38 }
	*($24 + [8]) = $9
	*($24 + [16]) = $11
	*($25 + [120]) = [0]
	*($24) = $23
	*($7) = ($24 + [24])
	goto $label$37 
	
.LABEL $label$38
	CALL $16(($0 + [40]), ($25 + [120]), ($25 + [16]), ($25 + [116]))
	
.LABEL $label$37
	$24 = *($25 + [120])
	*($25 + [120]) = [0]
	if ( ($24 == 0) ){ goto $label$39 }
	CALL $44($24)
	
.LABEL $label$39
	$22 = ($25 + [16])
	
.LABEL $label$32
	$17 = *(($0 + [8]))
	CALL eosio_assert(((int_32)$23 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)$21), [448])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [496])
	$9 = *($23)
	$18 = *($23 + [8])
	$19 = *($25 + [48])
	CALL eosio_assert(((uint_64)((int_64)$19 + (int_64)$18) > (uint_64)$18), [1088])
	*($23 + [8]) = ((int_64)$19 + (int_64)*($23 + [8]))
	$18 = *($23 + [16])
	CALL eosio_assert(((uint_64)((int_64)$19 + (int_64)$18) > (uint_64)$18), [1136])
	*($23 + [16]) = ((int_64)$19 + (int_64)*($23 + [16]))
	CALL eosio_assert(((int_64)$9 == (int_64)*($23)), [560])
	CALL eosio_assert([1], [624])
	CALL memcpy($22, $23, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($15, ($23 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($10, ($23 + [16]), [8])
	CALL db_update_i64(*($23 + [28]), $17, $22, [24])
	if ( (uint_64)($9 <= *(($0 + [32]))) ){ goto $label$40 }
	*($12) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$40
	$9 = *($25 + [88])
	$21 = *(($0 + [80]))
	$24 = *(($0 + [84]))
	if ( ((int_32)$24 == (int_32)$21) ){ goto $label$41 }
	$23 = ($24 + [-24])
	$11 = ([0] - $21)
	
.LOOP $label$42:
	if ( ((int_64)*(*($23)) == (int_64)$9) ){ goto $label$41 }
	$24 = $23
	$12 = ($23 + [-24])
	$23 = $12
	if ( ((int_32)($12 + $11) != (int_32)[-24]) ){ goto $label$42 }
	
.LABEL $label$41
	if ( ((int_32)$24 == (int_32)$21) ){ goto $label$46 }
	$23 = *(($24 + [-24]))
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)$4), [256])
	if ( $23 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$23 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)-6030912129153084416, $9)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$44 }
	$23 = CALL $20($4, $23)
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)$4), [256])
	
.LABEL $label$45
	$24 = ($0 + [72])
	goto $label$43 
	
.LABEL $label$44
	$19 = *(($0 + [8]))
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [896])
	*(($23 = CALL $43([40])) + [16]) = (int_64)0
	*($23 + [8]) = (int_64)0
	*($23 + [24]) = $4
	*($23) = *($25 + [88])
	CALL eosio_assert([1], [624])
	CALL memcpy($22, $23, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($15, ($23 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($10, ($23 + [16]), [8])
	$9 = *($23)
	$11 = CALL db_store_i64(*(($0 + [64])), (int_64)-6030912129153084416, $19, $9, $22, [24])
	*($23 + [28]) = $11
	$24 = ($0 + [72])
	if ( (uint_64)($9 <= *($24)) ){ goto $label$47 }
	*($24) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$47
	*($25 + [120]) = $23
	$9 = *($23)
	*($25 + [16]) = $9
	*($25 + [116]) = $11
	$21 = ($0 + [84])
	$12 = *($21)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [88]))) ){ goto $label$49 }
	*($12 + [8]) = $9
	*($12 + [16]) = $11
	*($25 + [120]) = [0]
	*($12) = $23
	*($21) = ($12 + [24])
	goto $label$48 
	
.LABEL $label$49
	CALL $21(($0 + [80]), ($25 + [120]), ($25 + [16]), ($25 + [116]))
	
.LABEL $label$48
	$12 = *($25 + [120])
	*($25 + [120]) = [0]
	if ( ($12 == 0) ){ goto $label$43 }
	CALL $44($12)
	
.LABEL $label$43
	$12 = ($0 + [8])
	$19 = *($12)
	CALL eosio_assert(((int_32)$23 != (int_32)[0]), [400])
	CALL eosio_assert(((int_32)*($23 + [24]) == (int_32)$4), [448])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [496])
	$9 = *($23)
	$18 = *($23 + [8])
	$17 = *($25 + [72])
	CALL eosio_assert(((uint_64)((int_64)$17 + (int_64)$18) > (uint_64)$18), [1184])
	*($23 + [8]) = ((int_64)$17 + (int_64)*($23 + [8]))
	$17 = *($23 + [16])
	CALL eosio_assert(((uint_64)((int_64)*($1 + [16]) + (int_64)$17) > (uint_64)$17), [1232])
	*($23 + [16]) = ((int_64)*($23 + [16]) + (int_64)*($1 + [16]))
	CALL eosio_assert(((int_64)$9 == (int_64)*($23)), [560])
	CALL eosio_assert([1], [624])
	CALL memcpy($22, $23, [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($15, ($23 + [8]), [8])
	CALL eosio_assert([1], [624])
	CALL memcpy($10, ($23 + [16]), [8])
	CALL db_update_i64(*($23 + [28]), $19, $22, [24])
	if ( (uint_64)($9 <= *(($0 + [72]))) ){ goto $label$50 }
	*($24) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$50
	$9 = *($12)
	$23 = *($25 + [84])
	*($25 + [24]) = $1
	*($25 + [20]) = ($25 + [80])
	*($25 + [16]) = ($25 + [88])
	*($25 + [28]) = ($25 + [56])
	*($25 + [32]) = ($25 + [48])
	*($25 + [36]) = ($25 + [72])
	*($25 + [40]) = ($25 + [64])
	CALL eosio_assert(((int_32)$23 != (int_32)[0]), [400])
	CALL $22($3, $23, $9, ($25 + [16]))
	
.LABEL $label$1
	*([0] + [4]) = ($25 + [128])
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $43($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $47($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $44($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [624])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $15(*($1), ($0 + [32]))
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $10($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [624])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [624])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $14(CALL $13($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [624])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [624])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [624])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	*($0) = $1
	*($0 + [8]) = $1
	*($0 + [16]) = $1
	*(($0 + [24])) = $1
	*(($0 + [32])) = (int_64)-1
	*(($0 + [40])) = [0]
	*($4 + [24]) = $1
	*(($0 + [44])) = [0]
	*(($0 + [48])) = [0]
	*($0 + [56]) = $1
	*(($0 + [64])) = $1
	*(($0 + [72])) = (int_64)-1
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [88])) = [0]
	*($0 + [96]) = $1
	*(($0 + [104])) = $1
	*(($0 + [112])) = (int_64)-1
	*(($0 + [120])) = [0]
	*(($0 + [124])) = [0]
	*(($0 + [128])) = [0]
	$2 = ($0 + [96])
	$3 = CALL db_lowerbound_i64($1, $1, (int_64)4986958866982895616, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $19($2, $3)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [16]) = ($4 + [24])
	CALL $37(($4 + [8]), $2, $1, ($4 + [16]))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [896])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $43([88])
	CALL $38($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [76])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $25(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $44($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1632])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $10($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [736])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	CALL _ZN6win_gt5applyEyy(CALL $36(($3 + [8]), $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $33($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [736])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [736])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $34($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $46($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $43($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $46($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $44($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $45($7)
	return (unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [736])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $50 ()
{
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	$3 = CALL current_time()
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)100
	*($0 + [64]) = (int_64)1
	$3 = ((int_64)((uint_64)$3 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($0 + [16]) = $3
	*($0 + [24]) = ((int_64)$3 + (int_64)86400)
	*($0 + [72]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1))
	$1 = *($2)
	*($4 + [88]) = ($4 + [72])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $23(($4 + [80]), $0)
	$3 = *($0)
	*($0 + [76]) = CALL db_store_i64(*($1 + [8]), (int_64)4986958866982895616, *(*($2 + [8])), $3, $4, [72])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [96])
	return $0
}