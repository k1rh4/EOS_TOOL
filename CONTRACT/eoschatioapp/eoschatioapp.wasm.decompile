(data (i32.const 8192) "cannot sendmessage to self\00")
(data (i32.const 8219) "from account does not exist\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8333) "to account does not exist\00")
(data (i32.const 8359) "must transfer positive quantity\00")
(data (i32.const 8391) "invalid quantity\00")
(data (i32.const 8408) "event\00")
(data (i32.const 8414) "er:1001\00")
(data (i32.const 8422) "er:1004\00")
(data (i32.const 8430) "withdraw\00")
(data (i32.const 8440) "must addpacket positive quantity\00")
(data (i32.const 8473) "only support EOS/DCHAT symbol\00")
(data (i32.const 8503) "currently only support maxwaitsec\00")
(data (i32.const 8537) "maxplayer must be >0 && <=5\00")
(data (i32.const 8565) "er:1005\00")
(data (i32.const 8573) "er:1007\00")
(data (i32.const 8581) "er:1008\00")
(data (i32.const 8589) "pktid invalid\00")
(data (i32.const 8603) "not enough player\00")
(data (i32.const 8621) "too many or less users\00")
(data (i32.const 8644) "randomsum zero\00")
(data (i32.const 8659) "{\"pktid\":%d, \"round\":%d, \"precision\":%d, \"symbol\":\"%s\", \"result\":[\00")
(data (i32.const 8726) ", \00")
(data (i32.const 8729) "{\"user\":\"%s\", \"amount\":%d}\00")
(data (i32.const 8756) " no such user from fantgrebinfo\00")
(data (i32.const 8788) "]}\00")
(data (i32.const 8791) "fantopen\00")
(data (i32.const 8800) "er:1012\00")
(data (i32.const 8808) "grpgreb\00")
(data (i32.const 8816) "grpreturn\00")
(data (i32.const 8826) "to\00")
(data (i32.const 8829) "type\00")
(data (i32.const 8834) "num\00")
(data (i32.const 8838) "memo\00")
(data (i32.const 8843) "no zero iterm?\00")
(data (i32.const 8858) "not find\00")
(data (i32.const 8867) "can`t del the last\00")
(data (i32.const 8886) "write\00")
(data (i32.const 8892) "\c0\"\00\00")
(data (i32.const 8896) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8929) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8980) "error reading iterator\00")
(data (i32.const 9003) "read\00")
(data (i32.const 9008) "cannot pass end iterator to modify\00")
(data (i32.const 9043) "object passed to modify is not in multi_index\00")
(data (i32.const 9089) "cannot modify objects in table of another contract\00")
(data (i32.const 9140) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9199) "cannot create objects in table of another contract\00")
(data (i32.const 9250) "get\00")
(data (i32.const 9254) "cannot pass end iterator to erase\00")
(data (i32.const 9288) "cannot increment end iterator\00")
(data (i32.const 9318) "object passed to erase is not in multi_index\00")
(data (i32.const 9363) "cannot erase objects in table of another contract\00")
(data (i32.const 9413) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9466) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9518) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9572) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18048) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "check_transaction_authorization" (func $fimport$0 (param i32 i32 i32 i32 i32 i32) (result i32)))
(import "env" "check_permission_authorization" (func $fimport$1 (param i64 i64 i32 i32 i32 i32 i64) (result i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "is_account" (func $fimport$4 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$5 (param i64)))
(import "env" "memcpy" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "send_inline" (func $fimport$9 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "require_auth2" (func $fimport$11 (param i64 i64)))
(import "env" "read_transaction" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$13 (param i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "action_data_size" (func $fimport$16 (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$20 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$21))
(import "env" "db_remove_i64" (func $fimport$22 (param i32)))
(import "env" "db_previous_i64" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$24 (param i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$27 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$38 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$39 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$42 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$44 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$45 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$46 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $57))
(export "_ZdlPv" (func $98))
(export "_Znwj" (func $96))
(export "_Znaj" (func $97))
(export "_ZdaPv" (func $99))
(export "_ZnwjSt11align_val_t" (func $100))
(export "_ZnajSt11align_val_t" (func $101))
(export "_ZdlPvSt11align_val_t" (func $102))
(export "_ZdaPvSt11align_val_t" (func $103))
(table $0 16 16 anyfunc)
(elem (i32.const 1) $3 $4 $60 $30 $63 $53 $23 $34 $68 $2 $27 $47 $44 $114 $117)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18128))
(global $global$2 i32 (i32.const 18128))


void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $126($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8886])
	CALL memcpy(*($4 + [4]), ($3 + [32]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8886])
	CALL memcpy(*($4 + [4]), ($0 + [36]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), ($0 + [40]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [48]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), ($0 + [56]))
	$global$0 = ($2 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy(($3 + [32]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy(($0 + [36]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9003])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [48])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $73(*($1), ($0 + [56]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $123($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9620])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $123($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $110($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $73(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9003])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $88(*($1), *($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9250])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $1($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9003])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8886])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8886])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	CALL $38(*($1), *($0 + [20]))
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8886])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $86(*($1), *($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $123 (int_32 $0)
{
	return CALL $124([9640], $0)
}

int_32 .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

int_32 .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $123($1)
	
.LABEL $label$2
	*(CALL $111()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $123(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $126($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $111())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $122($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $120 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8886])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8886])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18024])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17832]
	$3 = (((int_32)$1 * (int_32)[12]) + [17832])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8886])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($1 + [4]), ($4 + [24]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = *(($4 + [32]))
	CALL eosio_assert(((int_32)(*($1 + [8]) - $0) > (int_32)[7]), [8886])
	CALL memcpy(*($1 + [4]), ($2 + [8]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_64 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($0 + [112])
	$3 = *(($0 + [140]))
	$2 = *(($0 + [136]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$4:
	$4 = ($3 + [-24])
	$5 = *($4)
	if ( (int_64)(*($5) == 0) ){ goto $label$3 }
	$3 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($5 + [84]) == (int_32)$1), [8929])
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = CALL db_find_i64(*($1), *(($0 + [120])), (int_64)7343939078062080000, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $45($1, $4)
	CALL eosio_assert(((int_32)*($5 + [84]) == (int_32)$1), [8929])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8843])
	return *($5 + [24])
}

int_32 .FUNC $125 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9632]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9636])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9632]) = [1]
	$2 = ($2 << [16])
	*([0] + [9636]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9636])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9636]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9632]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9632]) = [1]
	$3 = ($3 << [16])
	*([0] + [9636]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9636])
	
.LABEL $label$10
	*([0] + [9636]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1 + [32]) = (int_64)1
	*(($1 + [16])) = (int_64)1397703940
	*($1 + [24]) = [0]
	*($1 + [28]) = [0]
	*($1 + [52]) = [0]
	*(*(*($0 + [4]))) = (int_64)1
	$4 = ($1 + [40])
	$5 = ($1 + [52])
	$6 = ($1 + [32])
	$7 = ($1 + [28])
	$8 = ($1 + [24])
	$10 = *($1 + [40])
	$9 = *(($1 + [44]))
	$11 = ($9 - $10)
	$12 = (CASTING uint_64)(uint_32 int_32($11 >> [3]))
	$13 = *($0)
	$14 = [38]
	
.LOOP $label$1:
	$14 = ($14 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	$14 = (($11 & [-8]) + $14)
	
.LABEL $label$2
	$9 = ($14 + [4])
	if ( ($9 <= [513]) ){ goto $label$4 }
	$14 = CALL $123($9)
	goto $label$3 
	
.LABEL $label$4
	$14 = ($2 - (($9 + [15]) & [-16]))
	$global$0 = $14
	
.LABEL $label$3
	*($3 + [12]) = $14
	*($3 + [8]) = $14
	*($3 + [16]) = ($14 + $9)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = $8
	*($3 + [44]) = $7
	*($3 + [48]) = $6
	*($3 + [52]) = $4
	*($3 + [56]) = $5
	CALL $85(($3 + [32]), ($3 + [24]))
	$12 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($13 + [8]), (int_64)6460298549400698880, *(*($0 + [8])), $12, $14, $9)
	if ( ((uint_32)$9 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$12 >= (uint_64)*($13 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $126($14)
	if ( (uint_64)($12 <= *($13 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($13 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [64])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9089])
	$6 = ((int_64)*($1 + [32]) + (int_64)1)
	*($1 + [32]) = $6
	$7 = *($1)
	*(*($3)) = $6
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9140])
	$8 = ($1 + [40])
	$9 = ($1 + [32])
	$11 = *($1 + [40])
	$10 = *(($1 + [44]))
	$12 = ($10 - $11)
	$6 = (CASTING uint_64)(uint_32 int_32($12 >> [3]))
	$3 = [38]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$3 = (($12 & [-8]) + $3)
	
.LABEL $label$2
	$10 = ($3 + [4])
	if ( ($10 <= [513]) ){ goto $label$4 }
	$3 = CALL $123($10)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $10)
	*($5 + [24]) = ($5 + [8])
	*($5 + [48]) = $9
	*($5 + [52]) = $8
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [24])
	*($5 + [44]) = ($1 + [28])
	*($5 + [56]) = ($1 + [52])
	CALL $85(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [60]), $2, $3, $10)
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $126($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [64])
}

int_64 .FUNC $41 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$1 = ($global$0 - [64])
	$global$0 = $1
	$2 = ($0 + [72])
	$4 = *(($0 + [100]))
	$3 = *(($0 + [96]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( (int_64)(*($6) == 0) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$2), [8929])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)6460298549400698880, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $31($2, $5)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$2), [8929])
	
.LABEL $label$3
	$7 = *($0)
	*($1 + [32]) = ($1 + [16])
	CALL eosio_assert([1], [9008])
	CALL $42($2, $6, $7, ($1 + [32]))
	goto $label$1 
	
.LABEL $label$2
	$7 = *($0)
	*($1 + [8]) = ($1 + [16])
	*($1 + [56]) = $7
	CALL eosio_assert(((int_64)*(($0 + [72])) == (int_64)CALL $fimport$8()), [9199])
	*($1 + [32]) = $2
	*($1 + [36]) = ($1 + [8])
	*($1 + [40]) = ($1 + [56])
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [56]) = $2
	CALL $43(($1 + [32]), $5)
	*($1 + [48]) = $5
	$7 = *($5)
	*($1 + [32]) = $7
	$6 = *($5 + [60])
	*($1 + [28]) = $6
	$3 = ($0 + [100])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [104]))) ){ goto $label$8 }
	*($4 + [8]) = $7
	*($4 + [16]) = $6
	*($1 + [48]) = [0]
	*($4) = $5
	*($3) = ($4 + [24])
	$5 = *($1 + [48])
	*($1 + [48]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$7 
	
.LABEL $label$8
	CALL $29(($0 + [96]), ($1 + [48]), ($1 + [32]), ($1 + [28]))
	$5 = *($1 + [48])
	*($1 + [48]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$4 = *($5 + [40])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($5 + [44])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$7 = *($1 + [16])
	$global$0 = ($1 + [64])
	return $7
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $110($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth2(*($0), (int_64)-4418113302685548544)
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [84]) == (int_32)$4), [8929])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)7343939078062080000, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $45($4, $7)
	CALL eosio_assert(((int_32)*($8 + [84]) == (int_32)$4), [8929])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$1 != (int_64)0), [8565])
	if ( ($8 == 0) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($8 + [8]) == (int_32)$2), [8565])
	if ( ((int_32)*($8 + [48]) < (int_32)[1]) ){ goto $label$6 }
	*((($3 + [96]) + [8])) = [0]
	*((($3 + [112]) + [8])) = *(($8 + [64]))
	*($3 + [96]) = (int_64)0
	*($3 + [112]) = *($8 + [56])
	$9 = *($8 + [16])
	$7 = CALL $120([8816])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$9 }
	*($3 + [96]) = ($7 << [1])
	$6 = (($3 + [96]) | [1])
	if ( $7 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	CALL eosio_assert(((uint_64)CALL $48($0) >= (uint_64)$1), [8565])
	$global$0 = ($3 + [160])
	return 
	
.LABEL $label$9
	$5 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [96]) = ($5 | [1])
	*($3 + [104]) = $6
	*($3 + [100]) = $7
	
.LABEL $label$8
	CALL memcpy($6, [8816], $7)
	
.LABEL $label$7
	$5 = ($8 + [56])
	*(($6 + $7)) = [0]
	*(($3 + [8])) = *((($3 + [112]) + [8]))
	*($3) = *($3 + [112])
	CALL $25($0, $9, $3, ($3 + [96]))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($3 + [104]))
	
.LABEL $label$11
	$9 = *($0)
	$10 = *(($8 + [16]))
	*((($3 + [16]) + [32])) = *(($5 + [8]))
	*($3 + [24]) = $2
	*($3 + [16]) = $1
	*($3 + [40]) = *($5)
	*($3 + [56]) = $9
	*($3 + [64]) = (int_64)7344092704069386240
	*($3 + [32]) = $10
	*(($7 = CALL _Znwj([16]))) = $9
	*($7 + [8]) = (int_64)3617214756542218240
	*((($3 + [56]) + [36])) = [0]
	$6 = ($7 + [16])
	*(($3 + [80])) = $6
	*(($3 + [76])) = $6
	*($3 + [72]) = $7
	*($3 + [84 align=4]) = (int_64)0
	CALL $1(($3 + [84]), [36])
	$7 = *((($3 + [56]) + [32]))
	$6 = *($3 + [84])
	*($3 + [132]) = $6
	*($3 + [128]) = $6
	*($3 + [136]) = $7
	*($3 + [144]) = ($3 + [128])
	*($3 + [152]) = ($3 + [16])
	CALL $49(($3 + [152]), ($3 + [144]))
	CALL $18(($3 + [128]), ($3 + [56]))
	$7 = *($3 + [128])
	CALL send_inline($7, (*($3 + [132]) - $7))
	$7 = *($3 + [128])
	if ( ($7 == 0) ){ goto $label$12 }
	*($3 + [132]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$12
	$7 = *($3 + [84])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($3 + [88])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$7 = *($3 + [72])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($3 + [76])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	CALL eosio_assert([1], [9254])
	CALL eosio_assert([1], [9288])
	$7 = CALL db_next_i64(*($8 + [88]), ($3 + [56]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	CALL $45($4, $7)
	
.LABEL $label$14
	CALL $50($4, $8)
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$5
	CALL $104(($3 + [96]))
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9089])
	*($1 + [48]) = (*($1 + [48]) + [-1])
	*($1 + [56]) = (int_64))(*($1 + [56]) - *(*($3)))
	$6 = *(($3 + [4]))
	$7 = *($1)
	$8 = ($1 + [76])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($1 + [80]))) ){ goto $label$2 }
	*($8) = ($3 + [8])
	*($3) = *($6)
	goto $label$1 
	
.LABEL $label$2
	CALL $90(($1 + [72]), $6)
	
.LABEL $label$1
	$6 = ($1 + [48])
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9140])
	$3 = *($1 + [36])
	$8 = ( *(($1 + [40])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [52])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [36])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	$10 = ($1 + [72])
	$12 = *($1 + [72])
	$11 = *(($1 + [76]))
	$13 = ($11 - $12)
	$9 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$5 }
	$3 = (($13 & [-8]) + $3)
	
.LABEL $label$5
	if ( ($3 <= [513]) ){ goto $label$7 }
	$4 = CALL $123($3)
	goto $label$6 
	
.LABEL $label$7
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$6
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [44]) = $8
	*($5 + [48]) = $6
	*($5 + [56]) = $10
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [16])
	*($5 + [36]) = ($1 + [24])
	*($5 + [40]) = ($1 + [32])
	*($5 + [52]) = ($1 + [56])
	CALL $93(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $126($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [64])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8980])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $123($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [44]) = [0]
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80]) = [0]
	*($5 + [84]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [36])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [72])
	CALL $91(($3 + [40]), ($3 + [32]))
	*($5 + [88]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $16(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $126($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [72])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $44 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($5 + [56]) = $3
	CALL require_auth2(*($0), (int_64)-4418113302685548544)
	CALL eosio_assert(CALL $fimport$4($3), [8800])
	$6 = ($0 + [112])
	$8 = *(($0 + [140]))
	$7 = *(($0 + [136]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	
.LOOP $label$6:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$5 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($10 + [84]) == (int_32)$6), [8929])
	if ( ((int_64)($1 == 0) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$10 = [0]
	$9 = CALL db_find_i64(*($6), *(($0 + [120])), (int_64)7343939078062080000, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $45($6, $9)
	CALL eosio_assert(((int_32)*($10 + [84]) == (int_32)$6), [8929])
	
.LABEL $label$7
	if ( (int_64)($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [8565])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8565])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($10 + [8]) == (int_32)$2), [8565])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*(($10 + [64]))), [8565])
	$8 = *(($10 + [76]))
	$9 = *($10 + [72])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$11:
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$9 }
	$9 = ($9 + [8])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$11 }
	
.LABEL $label$10
	$3 = *($4)
	CALL eosio_assert(((int_64)((int_64)$3 + (int_64)(CASTING int_64)(int_32 (*($10 + [48]) + [-1]))) <= (int_64)*($10 + [56])), [8565])
	if ( ((int_32)*($10 + [48]) > (int_32)[1]) ){ goto $label$12 }
	CALL eosio_assert(((int_64)$3 == (int_64)*(($10 + [56]))), [8565])
	
.LABEL $label$12
	$3 = *($0)
	*($5 + [52]) = ($5 + [56])
	*($5 + [48]) = $4
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9008])
	CALL $46($6, $10, $3, ($5 + [48]))
	$3 = *(($10 + [64]))
	*(($5 + [24])) = [0]
	*($5 + [32]) = *($4)
	*($5 + [40]) = $3
	*($5 + [16]) = (int_64)0
	$3 = *($5 + [56])
	$9 = CALL $120([8808])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$15 }
	*($5 + [16]) = ($9 << [1])
	$8 = (($5 + [16]) | [1])
	if ( $9 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$10 = (($9 + [16]) & [-16])
	$8 = CALL _Znwj($10)
	*($5 + [16]) = ($10 | [1])
	*($5 + [24]) = $8
	*($5 + [20]) = $9
	
.LABEL $label$14
	CALL memcpy($8, [8808], $9)
	
.LABEL $label$13
	*(($8 + $9)) = [0]
	*(($5 + [8])) = *((($5 + [32]) + [8]))
	*($5) = *($5 + [32])
	CALL $25($0, $3, $5, ($5 + [16]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($5 + [24]))
	
.LABEL $label$9
	$global$0 = ($5 + [64])
	return (unreachable)
	
.LABEL $label$8
	CALL $104(($5 + [16]))
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $125($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8247])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [16]) = $1
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [8929])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)-3020376800539705344, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $19($4, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [8929])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [32]) = $2
	CALL eosio_assert([1], [9008])
	CALL $20($4, $8, $1, ($3 + [32]))
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [12]) = $2
	*($3 + [8]) = ($3 + [16])
	*($3 + [56]) = $1
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$8()), [9199])
	*($3 + [32]) = $4
	*($3 + [36]) = ($3 + [8])
	*($3 + [40]) = ($3 + [56])
	*(($7 = CALL _Znwj([40])) + [24]) = $4
	*($7) = (int_64)0
	CALL $21(($3 + [32]), $7)
	*($3 + [48]) = $7
	$1 = *($7)
	*($3 + [32]) = $1
	$8 = *($7 + [28])
	*($3 + [28]) = $8
	$5 = ($0 + [60])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [64]))) ){ goto $label$8 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [48]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $22(($0 + [56]), ($3 + [48]), ($3 + [32]), ($3 + [28]))
	$7 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$global$0 = ($3 + [64])
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($0, *($1))
	CALL $9($0, *($1 + [4]))
	if ( ((*(($1 + [28])) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($1 + [36])))
	
.LABEL $label$2
	if ( ((*(($1 + [16])) & [1]) == 0) ){ goto $label$3 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$3
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

int_32 .FUNC $6 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $120($2)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, $2, $4)
	
.LABEL $label$2
	$2 = [0]
	*(($5 + $4)) = [0]
	$4 = CALL $12($1, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)($1 + [4])) ){ goto $label$6 }
	if ( (*($4 + [28]) & [1]) ){ goto $label$8 }
	$4 = (($4 + [28]) + [1])
	goto $label$7 
	
.LABEL $label$8
	$4 = *($4 + [36])
	
.LABEL $label$7
	$2 = CALL $118($4)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
	return $2
	
.LABEL $label$1
	CALL $104($3)
	return (unreachable)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [208])
	$global$0 = $5
	*($5 + [168]) = $1
	*($5 + [160]) = (CASTING int_64)(int_32 CALL $6($5, $4, [8826]))
	*($5 + [156]) = CALL $6($5, $4, [8829])
	$6 = CALL $6($5, $4, [8834])
	*($5 + [152]) = $6
	CALL $13(($5 + [136]), $5, $4, [8838])
	CALL eosio_assert((($6 + [-1]) <= [100]), [8565])
	CALL eosio_assert(((int_64)*($3) >= (int_64)(CASTING int_64)(int_32 $6)), [8565])
	*($5 + [128]) = CALL $14($0)
	*($5 + [124]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$1 = *($0)
	*($5 + [36]) = $3
	*($5 + [12]) = ($5 + [124])
	*($5 + [8]) = ($5 + [128])
	*($5 + [16]) = ($5 + [168])
	*($5 + [20]) = ($5 + [160])
	*($5 + [24]) = ($5 + [156])
	*($5 + [28]) = ($5 + [136])
	*($5 + [32]) = ($5 + [152])
	*($5 + [192]) = $1
	CALL eosio_assert(((int_64)*($0 + [112]) == (int_64)CALL $fimport$8()), [9199])
	$6 = ($0 + [112])
	*($5 + [80]) = $6
	*($5 + [84]) = ($5 + [8])
	*($5 + [88]) = ($5 + [192])
	*(($4 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($4 + [36 align=4]) = (int_64)0
	*($4 + [44]) = [0]
	*($4 + [56]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [72 align=4]) = (int_64)0
	*($4 + [80]) = [0]
	*($4 + [84]) = $6
	CALL $15(($5 + [80]), $4)
	*($5 + [184]) = $4
	$1 = *($4)
	*($5 + [80]) = $1
	$7 = *($4 + [88])
	*($5 + [176]) = $7
	$8 = ($0 + [140])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [144]))) ){ goto $label$3 }
	*($6 + [8]) = $1
	*($6 + [16]) = $7
	*($5 + [184]) = [0]
	*($6) = $4
	*($8) = ($6 + [24])
	$4 = *($5 + [184])
	$6 = [0]
	*($5 + [184]) = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL $16(($0 + [136]), ($5 + [184]), ($5 + [80]), ($5 + [176]))
	$4 = *($5 + [184])
	$6 = [0]
	*($5 + [184]) = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = *($4 + [72])
	if ( ($7 == 0) ){ goto $label$4 }
	*(($4 + [76])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [44])))
	
.LABEL $label$5
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$1 = *($0)
	*(($5 + [56])) = *(($3 + [8]))
	*($5 + [8]) = *($5 + [128])
	*($5 + [16]) = *($5 + [124])
	*($5 + [24]) = *($5 + [168])
	*($5 + [32]) = *($5 + [160])
	*($5 + [40]) = *($5 + [156])
	*($5 + [44]) = *($5 + [152])
	*($5 + [48]) = *($3)
	$0 = CALL $105(($5 + [64]), ($5 + [136]))
	*($5 + [88]) = (int_64)7343835699697680384
	*($5 + [80]) = $1
	*(($4 = CALL _Znwj([16]))) = $1
	*($4 + [8]) = (int_64)3617214756542218240
	*(($5 + [116])) = $6
	$3 = ($4 + [16])
	*(($5 + [104])) = $3
	*(($5 + [100])) = $3
	*($5 + [96]) = $4
	*($5 + [108 align=4]) = (int_64)0
	$4 = *($0)
	$0 = ( *(($5 + [68])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($0 + [52])
	$1 = (CASTING uint_64)(uint_32 $0)
	$0 = ($5 + [108])
	
.LOOP $label$6:
	$4 = ($4 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$6 }
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $1($0, $4)
	$0 = *(($5 + [112]))
	$4 = *(($5 + [108]))
	goto $label$7 
	
.LABEL $label$8
	$0 = [0]
	$4 = [0]
	
.LABEL $label$7
	*($5 + [196]) = $4
	*($5 + [192]) = $4
	*($5 + [200]) = $0
	*($5 + [176]) = ($5 + [192])
	*($5 + [184]) = ($5 + [8])
	CALL $17(($5 + [184]), ($5 + [176]))
	CALL $18(($5 + [192]), ($5 + [80]))
	$4 = *($5 + [192])
	CALL send_inline($4, (*($5 + [196]) - $4))
	$4 = *($5 + [192])
	if ( ($4 == 0) ){ goto $label$9 }
	*($5 + [196]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$4 = *($5 + [108])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($5 + [112])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($5 + [96])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($5 + [100])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( (*($5 + [64]) & [1]) ){ goto $label$14 }
	if ( (*($5 + [136]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($5 + [72])))
	if ( ((*($5 + [136]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($5 + [144]))
	$global$0 = ($5 + [208])
	return 
	
.LABEL $label$12
	$global$0 = ($5 + [208])
}

void .FUNC $4 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	CALL require_auth($1)
	$2 = *($3)
	CALL eosio_assert(((int_64)$2 > (int_64)0), [8359])
	$7 = [0]
	if ( ((uint_64)((int_64)$2 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$2 = $6
	$7 = [1]
	$9 = $8
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$2 = $6
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$6 }
	$7 = [1]
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	
.LABEL $label$2
	CALL eosio_assert($7, [8391])
	$8 = CALL $105(($5 + [64]), $4)
	CALL $5(($5 + [80]), $8, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$7
	$8 = CALL $6($8, ($5 + [80]), [8408])
	if ( ($8 == 0) ){ goto $label$8 }
	$2 = *($3 + [8])
	if ( ((int_64)( (int_64)6138663591592764928 ? ( (int_64)6463110915767967024 ? (int_64)0 : ((int_64)$2 == (int_64)362174039556) ) : ((int_64)$2 == (int_64)1397703940) ) != (int_64)*($0 + [8])) ){ goto $label$8 }
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$9 }
	if ( ((int_32)$8 != (int_32)[1]) ){ goto $label$8 }
	$6 = *(($3 + [8]))
	*((($5 + [48]) + [8])) = $6
	$2 = *($3)
	*(($5 + [8])) = $6
	*($5 + [48]) = $2
	*($5) = $2
	CALL $7($0, $1, $2, $5, ($5 + [80]))
	goto $label$8 
	
.LABEL $label$9
	$6 = *(($3 + [8]))
	*((($5 + [32]) + [8])) = $6
	$2 = *($3)
	*((($5 + [16]) + [8])) = $6
	*($5 + [32]) = $2
	*($5 + [16]) = $2
	CALL $8($0, $1, ($5 + [16]))
	
.LABEL $label$8
	CALL $9(($5 + [80]), *($5 + [84]))
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [4 align=4]) = (int_64)0
	$4 = ($0 + [4])
	*($0) = $4
	$5 = *($2)
	if ( ($5 & [1]) ){ goto $label$5 }
	$6 = ($2 + [1])
	$7 = uint_32($5 >> [1])
	if ( ((int_32)$7 < (int_32)[9]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$6 = *($2 + [8])
	$7 = *($2 + [4])
	if ( ((int_32)$7 < (int_32)[9]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ((int_32)*($6) != (int_32)[123]) ){ goto $label$3 }
	$8 = ($7 + [-1])
	if ( ((int_32)*(($6 + $8)) != (int_32)[125]) ){ goto $label$3 }
	$9 = ($6 + [2])
	$10 = ($6 + [1])
	$11 = ($3 | [1])
	$12 = (($3 + [16]) | [1])
	$13 = ($3 | [1])
	$14 = (($3 + [16]) | [1])
	$15 = (($3 + [16]) + [8])
	$16 = ($0 + [4])
	$2 = [0]
	$17 = [0]
	$18 = [0]
	$5 = [0]
	
.LOOP $label$7:
	if ( $5 ){ goto $label$9 }
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$9 }
	if ( ($2 == 0) ){ goto $label$10 }
	$5 = [0]
	if ( ((int_32)*(($6 + $2)) != (int_32)[32]) ){ goto $label$8 }
	
.LABEL $label$10
	$5 = ($2 + [1])
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$7) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$15 }
	if ( $18 ){ goto $label$15 }
	$18 = [0]
	if ( ((int_32)*(($6 + $2)) != (int_32)[58]) ){ goto $label$8 }
	$19 = ($2 + [1])
	if ( ((int_32)$19 >= (int_32)$7) ){ goto $label$14 }
	$20 = ((int_32)*(($6 + $19)) == (int_32)[34])
	$17 = ($17 | $20)
	$18 = $2
	$2 = (( $19 ? $2 : $20 ) + [1])
	if ( ((int_32)$2 < (int_32)$7) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$15
	$19 = (((int_32)$18 > (int_32)[0]) & ((int_32)$5 > (int_32)[0]))
	if ( (($17 | ((int_32)$19 ^ (int_32)[-1])) & [1]) ){ goto $label$12 }
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$16 }
	if ( ((int_32)*(($6 + $2)) != (int_32)[32]) ){ goto $label$12 }
	
.LABEL $label$16
	*($15) = [0]
	*($3 + [16]) = (int_64)0
	$19 = ($2 - $18)
	$17 = ($19 + [-1])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ($17 <= [11]) ){ goto $label$19 }
	$20 = (($19 + [15]) & [-16])
	$19 = CALL _Znwj($20)
	*($15) = $19
	*($3 + [16]) = ($20 | [1])
	*($3 + [20]) = $17
	goto $label$18 
	
.LABEL $label$19
	*($3 + [16]) = ($17 << [1])
	$19 = $14
	if ( ($17 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL memcpy($19, ($10 + $18), $17)
	
.LABEL $label$17
	*(($19 + $17)) = [0]
	*(($19 = ($3 + [8]))) = [0]
	*($3) = (int_64)0
	$18 = ($18 - $5)
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$22 }
	*($3) = ($18 << [1])
	$17 = $13
	if ( $18 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$20 = (($18 + [16]) & [-16])
	$17 = CALL _Znwj($20)
	*($19) = $17
	*($3) = ($20 | [1])
	*($3 + [4]) = $18
	
.LABEL $label$21
	CALL memcpy($17, ($6 + $5), $18)
	
.LABEL $label$20
	*(($17 + $18)) = [0]
	$18 = CALL $10($0, ($3 + [28]), $3)
	$5 = *($18)
	if ( ($5 == 0) ){ goto $label$26 }
	$18 = ($5 + [28])
	if ( (*($18) & [1]) ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$26
	*(($5 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($5) = (int_64)0
	*(($5 + [24])) = *($19)
	*($5 + [16 align=4]) = *($3)
	*($5 + [8]) = *($3 + [28])
	*($18) = $5
	*($5 + [36]) = [0]
	*($19) = [0]
	*($3) = (int_64)0
	$17 = $5
	$20 = *(*($0))
	if ( ($20 == 0) ){ goto $label$27 }
	*($0) = $20
	$17 = *($18)
	
.LABEL $label$27
	CALL $11(*($16), $17)
	*(($18 = ($0 + [8]))) = (*($18) + [1])
	$18 = ($5 + [28])
	if ( (*($18) & [1]) ){ goto $label$24 }
	
.LABEL $label$25
	*($18) = [0]
	goto $label$23 
	
.LABEL $label$24
	*(*(($5 + [36]))) = [0]
	*(($5 + [32])) = [0]
	
.LABEL $label$23
	CALL $108($18, [0])
	*(($18 + [8])) = *($15)
	*($18) = *($3 + [16])
	*($15) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((*($3) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*($19))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$28
	$2 = ($2 + [-1])
	goto $label$11 
	
.LABEL $label$14
	$18 = $2
	goto $label$8 
	
.LABEL $label$13
	CALL $104(($3 + [16]))
	
.LABEL $label$12
	if ( ($19 == 0) ){ goto $label$8 }
	$19 = ($17 & [1])
	$17 = [0]
	if ( ($19 == 0) ){ goto $label$8 }
	$17 = [1]
	if ( ((int_32)*(($6 + $2)) != (int_32)[34]) ){ goto $label$8 }
	$19 = ($2 + [1])
	if ( ((int_32)$19 >= (int_32)$8) ){ goto $label$29 }
	if ( ((int_32)*(($6 + $19)) != (int_32)[32]) ){ goto $label$8 }
	
.LABEL $label$29
	*($15) = [0]
	*($3 + [16]) = (int_64)0
	$19 = ($2 - $18)
	$17 = ($19 + [-2])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ($17 <= [11]) ){ goto $label$32 }
	$20 = (($19 + [14]) & [-16])
	$19 = CALL _Znwj($20)
	*($15) = $19
	*($3 + [16]) = ($20 | [1])
	*($3 + [20]) = $17
	goto $label$31 
	
.LABEL $label$32
	*($3 + [16]) = ($17 << [1])
	$19 = $12
	if ( ($17 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL memcpy($19, ($9 + $18), $17)
	
.LABEL $label$30
	*(($19 + $17)) = [0]
	*(($19 = ($3 + [8]))) = [0]
	*($3) = (int_64)0
	$18 = ($18 - $5)
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$35 }
	*($3) = ($18 << [1])
	$17 = $11
	if ( $18 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$20 = (($18 + [16]) & [-16])
	$17 = CALL _Znwj($20)
	*($19) = $17
	*($3) = ($20 | [1])
	*($3 + [4]) = $18
	
.LABEL $label$34
	CALL memcpy($17, ($6 + $5), $18)
	
.LABEL $label$33
	*(($17 + $18)) = [0]
	$18 = CALL $10($0, ($3 + [28]), $3)
	$5 = *($18)
	if ( $5 ){ goto $label$36 }
	*(($5 = CALL _Znwj([40])) + [28 align=4]) = (int_64)0
	*($5) = (int_64)0
	*(($5 + [24])) = *($19)
	*($5 + [16 align=4]) = *($3)
	*($5 + [8]) = *($3 + [28])
	*($18) = $5
	*($5 + [36]) = [0]
	*($19) = [0]
	*($3) = (int_64)0
	$17 = $5
	$20 = *(*($0))
	if ( ($20 == 0) ){ goto $label$37 }
	*($0) = $20
	$17 = *($18)
	
.LABEL $label$37
	CALL $11(*($16), $17)
	*(($18 = ($0 + [8]))) = (*($18) + [1])
	
.LABEL $label$36
	$18 = ($5 + [28])
	if ( (*($18) & [1]) ){ goto $label$39 }
	*($18) = [0]
	goto $label$38 
	
.LABEL $label$39
	*(*(($5 + [36]))) = [0]
	*(($5 + [32])) = [0]
	
.LABEL $label$38
	CALL $108($18, [0])
	*(($18 + [8])) = *($15)
	*($18) = *($3 + [16])
	*($15) = [0]
	*($3 + [16]) = (int_64)0
	if ( ((*($3) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($19))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($15))
	
.LABEL $label$11
	$5 = [0]
	$18 = [0]
	$17 = [0]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$7) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	if ( (($18 | $5) == 0) ){ goto $label$3 }
	$2 = ($0 + [4])
	CALL $9($0, *($2))
	*($0) = $4
	*($2) = (int_64)0
	
.LABEL $label$3
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $104($3)
	
.LABEL $label$1
	CALL $104(($3 + [16]))
	(unreachable)
	(unreachable)
}

void .FUNC $2 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	CALL require_auth($2)
	CALL eosio_assert(((int_64)$2 != (int_64)$3), [8192])
	CALL eosio_assert(CALL $fimport$4($2), [8219])
	CALL eosio_assert(CALL $fimport$4($3), [8333])
	if ( ((int_64)*($0) == (int_64)$3) ){ goto $label$1 }
	CALL require_recipient($3)
	
.LABEL $label$1
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$2 }
	if ( ((int_64)$1 == (int_64)$3) ){ goto $label$2 }
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$2 }
	if ( (CALL is_account($1) == 0) ){ goto $label$2 }
	CALL require_recipient($1)
	
.LABEL $label$2
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	CALL require_auth($2)
	if ( ((int_64)$1 == (int_64)$2) ){ goto $label$1 }
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$1 }
	if ( (CALL is_account($1) == 0) ){ goto $label$1 }
	CALL require_recipient($1)
	
.LABEL $label$1
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $110($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_64 .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$1 = ($global$0 - [64])
	$global$0 = $1
	$2 = ($0 + [112])
	$4 = *(($0 + [140]))
	$3 = *(($0 + [136]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( (int_64)(*($6) == 0) ){ goto $label$5 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$2), [8929])
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = CALL db_find_i64(*($2), *(($0 + [120])), (int_64)7343939078062080000, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $45($2, $5)
	CALL eosio_assert(((int_32)*($6 + [84]) == (int_32)$2), [8929])
	
.LABEL $label$3
	$7 = *($0)
	*($1 + [32]) = ($1 + [16])
	CALL eosio_assert([1], [9008])
	CALL $51($2, $6, $7, ($1 + [32]))
	goto $label$1 
	
.LABEL $label$2
	$7 = *($0)
	*($1 + [8]) = ($1 + [16])
	*($1 + [56]) = $7
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$8()), [9199])
	*($1 + [32]) = $2
	*($1 + [36]) = ($1 + [8])
	*($1 + [40]) = ($1 + [56])
	*(($5 = CALL _Znwj([96])) + [16]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5 + [44]) = [0]
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80]) = [0]
	*($5 + [84]) = $2
	CALL $52(($1 + [32]), $5)
	*($1 + [48]) = $5
	$7 = *($5)
	*($1 + [32]) = $7
	$6 = *($5 + [88])
	*($1 + [28]) = $6
	$3 = ($0 + [140])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [144]))) ){ goto $label$8 }
	*($4 + [8]) = $7
	*($4 + [16]) = $6
	*($1 + [48]) = [0]
	*($4) = $5
	*($3) = ($4 + [24])
	$5 = *($1 + [48])
	*($1 + [48]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$7 
	
.LABEL $label$8
	CALL $16(($0 + [136]), ($1 + [48]), ($1 + [32]), ($1 + [28]))
	$5 = *($1 + [48])
	*($1 + [48]) = [0]
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	$4 = *($5 + [72])
	if ( ($4 == 0) ){ goto $label$9 }
	*(($5 + [76])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($5 + [44])))
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$7 = *($1 + [16])
	$global$0 = ($1 + [64])
	return $7
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1 + [16]) = *(*($4 + [8]))
	*($1 + [32]) = *(*($4 + [16]))
	*($1 + [24]) = *(*($4 + [12]))
	$5 = *($0)
	$6 = ($1 + [36])
	CALL $106($6, *($4 + [20]))
	*($1 + [48]) = *(*($4 + [24]))
	$4 = *($4 + [28])
	*(($1 + [64])) = *(($4 + [8]))
	*($1 + [56]) = *($4)
	$4 = *($1 + [36])
	$7 = ( *(($1 + [40])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [52])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [56])
	$9 = ($1 + [48])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$13 = ($1 + [72])
	$15 = *($1 + [72])
	$14 = *(($1 + [76]))
	$16 = ($14 - $15)
	$8 = (CASTING uint_64)(uint_32 int_32($16 >> [3]))
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$15 == (int_32)$14) ){ goto $label$3 }
	$4 = (($16 & [-8]) + $4)
	
.LABEL $label$3
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $123($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $12
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = $11
	*($3 + [40]) = $10
	*($3 + [44]) = $6
	*($3 + [48]) = $9
	*($3 + [52]) = $7
	*($3 + [56]) = $13
	CALL $93(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($5 + [8]), (int_64)7343939078062080000, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $126($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [64])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $110($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [72])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [76])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [44])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8886])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($0 + [4]), ($4 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($0 + [4]), ($4 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $94(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	$4 = ($2 + [1])
	$5 = ($2 + [8])
	
.LOOP $label$3:
	$7 = ($0 + [16])
	$12 = ($11 & [1])
	$11 = *($2)
	$10 = ($2 + [4])
	$11 = ( *($10) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($0 + [16])
	$8 = ($0 + [20])
	$6 = ( *($8) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$7 }
	$9 = CALL $119(( *($5) ? $4 : $12 ), ( *(($0 + [24])) ? ($7 + [1]) : $9 ), $13)
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = *($0)
	if ( $6 ){ goto $label$4 }
	*($1) = $0
	return $0
	
.LABEL $label$5
	$12 = ($11 & [1])
	$11 = *($7)
	$11 = ( *($8) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$9 }
	$7 = CALL $119(( *(($0 + [24])) ? ($7 + [1]) : $12 ), ( *($5) ? $4 : $9 ), $13)
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$2 }
	
.LABEL $label$8
	$3 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$2 }
	$0 = $3
	
.LABEL $label$4
	$3 = $0
	$0 = $6
	goto $label$3 
	
.LABEL $label$2
	*($1) = $0
	return $3
	
.LABEL $label$1
	*($1) = $3
	return $3
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$2 }
	$3 = ($1 + [1])
	$4 = ($1 + [4])
	$5 = ($1 + [8])
	$6 = $2
	
.LOOP $label$3:
	$11 = ($9 <= $10)
	$7 = ($7 & [1])
	$7 = *($0 + [16])
	$10 = ( *(($0 + [20])) ? uint_32($7 >> [1]) : $7 )
	$8 = ($7 & [1])
	$7 = *($1)
	$9 = ( *($4) ? uint_32($7 >> [1]) : $8 )
	$12 = ( $9 ? $10 : $11 )
	if ( ($12 == 0) ){ goto $label$5 }
	$7 = CALL $119(( *(($0 + [24])) ? (($0 + [16]) + [1]) : $7 ), ( *($5) ? $3 : $8 ), $12)
	if ( $7 ){ goto $label$4 }
	
.LABEL $label$5
	$7 = ( [-1] ? $11 : ($10 <= $9) )
	
.LABEL $label$4
	$6 = ( $6 ? $0 : ((int_32)$7 < (int_32)[0]) )
	$0 = *(($0 + (uint_32($7 >> [29]) & [4])))
	if ( $0 ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$10 = ($7 & [1])
	$7 = *($1)
	$7 = ( *(($1 + [4])) ? uint_32($7 >> [1]) : $10 )
	$9 = ($0 & [1])
	$0 = *($6 + [16])
	$0 = ( *($6 + [20]) ? uint_32($0 >> [1]) : $9 )
	$8 = ( $0 ? $7 : ($0 <= $7) )
	if ( ($8 == 0) ){ goto $label$6 }
	$9 = CALL $119(( *(($1 + [8])) ? $3 : $10 ), ( *($6 + [24]) ? (($6 + [16]) + [1]) : $9 ), $8)
	if ( ($9 == 0) ){ goto $label$6 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$6
	if ( ((uint_32)$7 >= (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = $2
	
.LABEL $label$1
	return $6
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	$5 = CALL $120($3)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($4) = ($5 << [1])
	$6 = ($4 | [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($4) = ($7 | [1])
	*($4 + [8]) = $6
	*($4 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, $3, $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	$5 = CALL $12($2, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$6
	if ( ((int_32)$5 == (int_32)($2 + [4])) ){ goto $label$7 }
	CALL $105($0, ($5 + [28]))
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$7
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL $120([8439])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($5 << [1])
	$6 = ($0 + [1])
	if ( $5 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = (($5 + [16]) & [-16])
	$6 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $6
	*($0 + [4]) = $5
	
.LABEL $label$9
	CALL memcpy($6, [8439], $5)
	
.LABEL $label$8
	*(($6 + $5)) = [0]
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $104($4)
	
.LABEL $label$1
	CALL $104($0)
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [180])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$6
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$4 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$4 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$2 = *(($0 + [136]))
	if ( ($2 == 0) ){ goto $label$8 }
	$5 = ($0 + [140])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	$1 = *($4 + [72])
	if ( ($1 == 0) ){ goto $label$13 }
	*(($4 + [76])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [44])))
	
.LABEL $label$14
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$11 }
	$4 = *(($0 + [136]))
	goto $label$9 
	
.LABEL $label$10
	$4 = $2
	
.LABEL $label$9
	*($5) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$2 = *(($0 + [96]))
	if ( ($2 == 0) ){ goto $label$15 }
	$5 = ($0 + [100])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$19 }
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$20 }
	*(($3 + [44])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$20
	CALL _ZdlPv($3)
	
.LABEL $label$19
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($0 + [96]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $2
	
.LABEL $label$16
	*($5) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [60])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$25 }
	CALL _ZdlPv($3)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($0 + [56]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$21
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $1($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8886])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8886])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $84(CALL $83($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8980])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $123($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9003])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9003])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9003])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $22(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $126($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [320])
	$global$0 = $3
	*(($4 = $3) + [264]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [232]) + [24])) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [224]) = ($2 + $5)
	*($4 + [216]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [232]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9003])
	CALL memcpy((($4 + [232]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($5 & [-4]) != (int_32)[16]), [9003])
	CALL memcpy((($4 + [232]) + [16]), ($2 + [16]), [4])
	*($4 + [220]) = ($2 + [20])
	CALL $73(($4 + [216]), (($4 + [232]) + [20]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [272]) + [8])) = $3
	*(($6 = (($4 + [288]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [288]) = $7
	*($4 + [272]) = $7
	$3 = *($6)
	*((($4 + [304]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [288])
	*($4 + [40]) = $1
	*($4 + [304]) = $1
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*($4 + [308]) = ($4 + [264])
	*($4 + [304]) = ($4 + [24])
	CALL $76(($4 + [304]), ($4 + [232]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $126($2)
	
.LABEL $label$4
	CALL $75(($4 + [24]))
	if ( ((*($4 + [252]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [260])))
	
.LABEL $label$5
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [336])
	$global$0 = $3
	*(($4 = $3) + [280]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [232]) + [24])) = (int_64)0
	*((($4 + [232]) + [40])) = [0]
	*($4 + [240]) = (int_64)0
	*($4 + [232]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [220]) = $2
	*($4 + [216]) = $2
	*($4 + [224]) = ($2 + $5)
	*($4 + [320]) = ($4 + [216])
	*($4 + [24]) = ($4 + [232])
	CALL $77(($4 + [24]), ($4 + [320]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [224])
	*($4 + [8]) = *($4 + [216])
	$3 = *($3)
	*((($4 + [288]) + [8])) = $3
	*(($6 = (($4 + [304]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [304]) = $7
	*($4 + [288]) = $7
	$3 = *($6)
	*((($4 + [320]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$1 = *($4 + [304])
	*($4 + [40]) = $1
	*($4 + [320]) = $1
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*($4 + [324]) = ($4 + [280])
	*($4 + [320]) = ($4 + [24])
	CALL $78(($4 + [320]), ($4 + [232]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $126($2)
	
.LABEL $label$4
	CALL $75(($4 + [24]))
	if ( ((*($4 + [264]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [272])))
	
.LABEL $label$5
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [9318])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9363])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9413])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [72])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [44])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$14 }
	*(($5 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((*($5 + [36]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [44])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [88]))
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [84]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9089])
	$6 = ((int_64)*($1 + [24]) + (int_64)1)
	*($1 + [24]) = $6
	$7 = *($1)
	*(*($3)) = $6
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9140])
	$3 = *($1 + [36])
	$8 = ( *(($1 + [40])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [52])
	$6 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [36])
	$9 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$10 = ($1 + [72])
	$12 = *($1 + [72])
	$11 = *(($1 + [76]))
	$13 = ($11 - $12)
	$6 = (CASTING uint_64)(uint_32 int_32($13 >> [3]))
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$3 }
	$3 = (($13 & [-8]) + $3)
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $123($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [36]) = $9
	*($5 + [44]) = $8
	*($5 + [56]) = $10
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [8])
	*($5 + [32]) = ($1 + [16])
	*($5 + [40]) = ($1 + [32])
	*($5 + [48]) = ($1 + [48])
	*($5 + [52]) = ($1 + [56])
	CALL $93(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [88]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $126($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [64])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	*($1) = (int_64)0
	*($1 + [24]) = (int_64)1
	*(*(*($0 + [4]))) = (int_64)1
	$4 = *($1 + [36])
	$5 = ( *(($1 + [40])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($5 + [52])
	$6 = (CASTING uint_64)(uint_32 $5)
	$7 = ($1 + [36])
	$8 = ($1 + [24])
	$5 = *($0)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$9 = ($1 + [72])
	$11 = *($1 + [72])
	$10 = *(($1 + [76]))
	$12 = ($10 - $11)
	$6 = (CASTING uint_64)(uint_32 int_32($12 >> [3]))
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$3 }
	$4 = (($12 & [-8]) + $4)
	
.LABEL $label$3
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $123($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = $8
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = $7
	*($3 + [48]) = ($1 + [48])
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = $9
	CALL $93(($3 + [24]), ($3 + [16]))
	$6 = *($1)
	*($1 + [88]) = CALL db_store_i64(*($5 + [8]), (int_64)7343939078062080000, *(*($0 + [8])), $6, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($5 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $126($2)
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [64])
}

void .FUNC $53 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth2(*($0), (int_64)-4418113302685548544)
	$3 = ($0 + [152])
	$4 = ($0 + [168])
	$5 = *($4)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($3), *(($0 + [160])), (int_64)-8279610979239591936, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $54($3, $6)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$5 = *(*(CALL $55(($2 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($0 + [168])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [9466])
	$5 = *($4)
	$6 = *(($0 + [180]))
	$7 = *(($0 + [176]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-24])
	$8 = *($4)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$6 }
	$6 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [8929])
	goto $label$4 
	
.LABEL $label$5
	$4 = CALL db_find_i64(*(($0 + [152])), *(($0 + [160])), (int_64)-8279610979239591936, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $54($3, $4)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$3), [8929])
	
.LABEL $label$4
	CALL eosio_assert(((int_64)((int_64)*($8) + (int_64)1) != (int_64)$5), [8867])
	CALL eosio_assert([1], [9254])
	CALL eosio_assert([1], [9288])
	$4 = CALL db_next_i64(*($8 + [36]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	CALL $54($3, $4)
	
.LABEL $label$8
	CALL $56($3, $8)
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$3
	CALL eosio_assert(((uint_64)$5 > (uint_64)$1), [8858])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8980])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $123($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9003])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $73(($3 + [32]), ($5 + [8]))
	CALL $73(($3 + [32]), ($5 + [20]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $40(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $126($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	$3 = ($global$0 - [480])
	$4 = $3
	$global$0 = $3
	CALL require_auth2(*($0), (int_64)-4418113302685548544)
	$5 = ($0 + [72])
	$7 = *(($0 + [100]))
	$6 = *(($0 + [96]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$7:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$6 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$5), [8929])
	if ( ((int_64)($1 == 0) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [80])), (int_64)6460298549400698880, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$9 = CALL $31($5, $8)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$5), [8929])
	
.LABEL $label$8
	if ( (int_64)($1 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [8589])
	if ( ((uint_64)*($9 + [32]) <= (uint_64)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [8589])
	if ( ((uint_64)*($9 + [32]) > (uint_64)$2) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($9 + [44])
	CALL eosio_assert(((uint_32)int_32((*($8) - *($9 + [40])) >> [3]) > (uint_32)[1]), [8603])
	*((($4 + [448]) + [8])) = *(($9 + [16]))
	$10 = *($9 + [8])
	*($4 + [448]) = $10
	$11 = (*($8) - *($9 + [40]))
	$12 = int_32($11 >> [3])
	$8 = ($12 + [-1])
	CALL eosio_assert(($8 <= [5]), [8621])
	$13 = $3
	$14 = ($3 - (($11 + [15]) & [-16]))
	$global$0 = $14
	$3 = [0]
	$7 = CALL read_transaction([0], [0])
	$6 = CALL $123($7)
	CALL read_transaction($6, $7)
	CALL sha256($6, $7, ($4 + [416]))
	CALL $126($6)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$11 }
	$7 = (($4 + [416]) | [4])
	$2 = (int_64)0
	$6 = $14
	
.LOOP $label$12:
	$15 = (CASTING uint_64)(uint_32 (((uint_32)*($7) % (uint_32)[100]) + [1]))
	*($6) = $15
	$7 = ($7 + [5])
	$6 = ($6 + [8])
	$2 = ((int_64)$2 + (int_64)$15)
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)$12) ){ goto $label$12 }
	CALL eosio_assert([1], [8644])
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$10 }
	$6 = [0]
	$7 = $14
	$15 = $10
	
.LOOP $label$13:
	$16 = ((int_64)((int_64)*($7) * (int_64)$10) / (int_64)$2)
	*($7) = $16
	$7 = ($7 + [8])
	$15 = (int_64))($15 - $16)
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)$12) ){ goto $label$13 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert([0], [8644])
	
.LABEL $label$10
	$15 = $10
	
.LABEL $label$9
	*($14) = ((int_64)*($14) + (int_64)$15)
	$2 = *(($14 + ($8 << [3])))
	*($4 + [412]) = $8
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$15 }
	$7 = (($14 + ($12 << [3])) + [-16])
	$15 = $2
	if ( ((int_64)$15 <= (int_64)$2) ){ goto $label$16 }
	$17 = [104]
	goto $label$14 
	
.LABEL $label$16
	$17 = [0]
	goto $label$14 
	
.LABEL $label$15
	$17 = [1]
	
.LABEL $label$14
	
.LOOP $label$17:
	goto $label$187 
	
.LABEL $label$189
	$8 = ($8 + [-1])
	$2 = *($7)
	$7 = ($7 + [-8])
	if ( ((int_64)$15 <= (int_64)$2) ){ goto $label$83 }
	$17 = [104]
	goto $label$17 
	
.LABEL $label$188
	*($4 + [412]) = $8
	$15 = $2
	$17 = [0]
	goto $label$17 
	
.LABEL $label$187
	if ( ((int_32)$8 >= (int_32)[1]) ){ goto $label$84 }
	$17 = [1]
	goto $label$17 
	
.LABEL $label$186
	$2 = *($4 + [456])
	$11 = ((CASTING uint_32)(uint_64 $2) & [255])
	$18 = *(($9 + [32]))
	$19 = (CASTING uint_32)(uint_64 $1)
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( (int_64)($2) == 0) ){ goto $label$82 }
	$17 = [2]
	goto $label$17 
	
.LABEL $label$185
	$7 = [0]
	$17 = [3]
	goto $label$17 
	
.LABEL $label$184
	*((($4 + [144]) + ($8 = $7))) = $2
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$80 }
	$17 = [4]
	goto $label$17 
	
.LABEL $label$183
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$81 }
	$17 = [5]
	goto $label$17 
	
.LABEL $label$182
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$79 }
	$17 = [101]
	goto $label$17 
	
.LABEL $label$181
	*($4 + [56]) = ($7 << [1])
	$6 = (($4 + [56]) | [1])
	goto $label$78 
	
.LABEL $label$180
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	*($4 + [56]) = [0]
	$8 = (($4 + [56]) | [1])
	$7 = $8
	goto $label$76 
	
.LABEL $label$179
	$3 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($3)
	*($4 + [56]) = ($3 | [1])
	*($4 + [64]) = $6
	*($4 + [60]) = $7
	$17 = [7]
	goto $label$17 
	
.LABEL $label$178
	$3 = ($8 + [1])
	$8 = [0]
	$17 = [8]
	goto $label$17 
	
.LABEL $label$177
	*(($6 + $8)) = *((($4 + [144]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$77 }
	$17 = [9]
	goto $label$17 
	
.LABEL $label$176
	$7 = ($6 + $7)
	$8 = (($4 + [56]) | [1])
	$17 = [10]
	goto $label$17 
	
.LABEL $label$175
	*($7) = [0]
	*($4 + [24]) = $11
	*($4 + [20]) = $18
	*($4 + [16]) = $19
	*($4 + [28]) = ( *($4 + [64]) ? $8 : (*($4 + [56]) & [1]) )
	CALL $116(($4 + [144]), [8659], ($4 + [16]))
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$75 }
	$17 = [11]
	goto $label$17 
	
.LABEL $label$174
	CALL _ZdlPv(*(($4 + [64])))
	$17 = [12]
	goto $label$17 
	
.LABEL $label$173
	*(($4 + [136])) = [0]
	*($4 + [128]) = (int_64)0
	$8 = CALL $120(($4 + [144]))
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$74 }
	$17 = [13]
	goto $label$17 
	
.LABEL $label$172
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$73 }
	$17 = [99]
	goto $label$17 
	
.LABEL $label$171
	*($4 + [128]) = ($8 << [1])
	$7 = (($4 + [128]) | [1])
	if ( $8 ){ goto $label$71 }
	goto $label$72 
	
.LABEL $label$170
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($4 + [128]) = ($6 | [1])
	*($4 + [136]) = $7
	*($4 + [132]) = $8
	$17 = [15]
	goto $label$17 
	
.LABEL $label$169
	CALL memcpy($7, ($4 + [144]), $8)
	$17 = [16]
	goto $label$17 
	
.LABEL $label$168
	*(($7 + $8)) = [0]
	*($4 + [124]) = [0]
	$20 = ($9 + [44])
	$18 = *(($9 + [40]))
	if ( ((int_32)$18 == (int_32)*($20)) ){ goto $label$70 }
	$17 = [17]
	goto $label$17 
	
.LABEL $label$167
	$19 = ($0 + [32])
	$21 = (($4 + [56]) | [1])
	$22 = (($4 + [128]) | [1])
	$23 = (($4 + [56]) | [1])
	$24 = (($4 + [464]) | [1])
	$11 = (($4 + [56]) + [8])
	$25 = ($0 + [60])
	$26 = ($0 + [56])
	$27 = ($0 + [40])
	$28 = (($4 + [56]) + [12])
	$8 = [0]
	$17 = [18]
	goto $label$17 
	
.LABEL $label$166
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$68 }
	$17 = [88]
	goto $label$17 
	
.LABEL $label$165
	*($11) = [0]
	*($4 + [56]) = (int_64)0
	$8 = CALL $120([8726])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$23 }
	$17 = [89]
	goto $label$17 
	
.LABEL $label$164
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$22 }
	$17 = [97]
	goto $label$17 
	
.LABEL $label$163
	*($4 + [56]) = ($8 << [1])
	$7 = $23
	if ( $8 ){ goto $label$20 }
	goto $label$21 
	
.LABEL $label$162
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($11) = $7
	*($4 + [56]) = ($6 | [1])
	*($4 + [60]) = $8
	$17 = [91]
	goto $label$17 
	
.LABEL $label$161
	CALL memcpy($7, [8726], $8)
	$17 = [92]
	goto $label$17 
	
.LABEL $label$160
	*(($7 + $8)) = [0]
	$8 = *($4 + [128])
	$6 = ($8 & [1])
	$7 = (($4 + [128]) + [8])
	$8 = CALL $109(($4 + [56]), [0], ( *($7) ? $22 : $6 ), ( *($4 + [132]) ? uint_32($8 >> [1]) : $6 ))
	$6 = *($8 + [4])
	$3 = *($8)
	*($8) = (int_64)0
	$29 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( (*($4 + [128]) & [1]) ){ goto $label$19 }
	$17 = [96]
	goto $label$17 
	
.LABEL $label$159
	*($4 + [128]) = [0]
	goto $label$18 
	
.LABEL $label$158
	*(*($7)) = [0]
	*($4 + [132]) = [0]
	$17 = [94]
	goto $label$17 
	
.LABEL $label$157
	CALL $108(($4 + [128]), [0])
	*($7) = $29
	*($4 + [132]) = $6
	*($4 + [128]) = $3
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$67 }
	$17 = [95]
	goto $label$17 
	
.LABEL $label$156
	CALL _ZdlPv(*($11))
	$17 = [19]
	goto $label$17 
	
.LABEL $label$155
	$2 = *($18)
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$66 }
	$17 = [20]
	goto $label$17 
	
.LABEL $label$154
	$7 = [0]
	$6 = *([0] + [8892])
	$17 = [21]
	goto $label$17 
	
.LABEL $label$153
	*((($4 + [56]) + ($8 = $7))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$2 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$7 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$64 }
	$17 = [22]
	goto $label$17 
	
.LABEL $label$152
	$2 = ((int_64)$2 << (int_64)5)
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$65 }
	$17 = [23]
	goto $label$17 
	
.LABEL $label$151
	*(($3 = (($4 + [464]) + [8]))) = [0]
	*($4 + [464]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$63 }
	$17 = [86]
	goto $label$17 
	
.LABEL $label$150
	*($4 + [464]) = ($7 << [1])
	$6 = $24
	goto $label$62 
	
.LABEL $label$149
	*((($4 + [464]) + [8])) = [0]
	*($4 + [464]) = (int_64)0
	*($4 + [464]) = [0]
	$8 = $24
	goto $label$60 
	
.LABEL $label$148
	$29 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($29)
	*($3) = $6
	*($4 + [464]) = ($29 | [1])
	*($4 + [468]) = $7
	$17 = [25]
	goto $label$17 
	
.LABEL $label$147
	$3 = ($8 + [1])
	$8 = [0]
	$17 = [26]
	goto $label$17 
	
.LABEL $label$146
	*(($6 + $8)) = *((($4 + [56]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$61 }
	$17 = [27]
	goto $label$17 
	
.LABEL $label$145
	$8 = ($6 + $7)
	$17 = [28]
	goto $label$17 
	
.LABEL $label$144
	*($8) = [0]
	*($4 + [4]) = *(($14 + (*($4 + [124]) << [3])))
	$8 = (($4 + [464]) + [8])
	*($4) = ( *($8) ? $24 : (*($4 + [464]) & [1]) )
	CALL $116(($4 + [144]), [8729], $4)
	if ( ((*($4 + [464]) & [1]) == 0) ){ goto $label$59 }
	$17 = [29]
	goto $label$17 
	
.LABEL $label$143
	CALL _ZdlPv(*($8))
	$17 = [30]
	goto $label$17 
	
.LABEL $label$142
	*($11) = [0]
	*($4 + [56]) = (int_64)0
	$8 = CALL $120(($4 + [144]))
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$58 }
	$17 = [31]
	goto $label$17 
	
.LABEL $label$141
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$57 }
	$17 = [84]
	goto $label$17 
	
.LABEL $label$140
	*($4 + [56]) = ($8 << [1])
	$7 = $21
	if ( $8 ){ goto $label$55 }
	goto $label$56 
	
.LABEL $label$139
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($11) = $7
	*($4 + [56]) = ($6 | [1])
	*($4 + [60]) = $8
	$17 = [33]
	goto $label$17 
	
.LABEL $label$138
	CALL memcpy($7, ($4 + [144]), $8)
	$17 = [34]
	goto $label$17 
	
.LABEL $label$137
	*(($7 + $8)) = [0]
	$8 = *($4 + [128])
	$6 = ($8 & [1])
	$7 = (($4 + [128]) + [8])
	$8 = CALL $109(($4 + [56]), [0], ( *($7) ? $22 : $6 ), ( *($4 + [132]) ? uint_32($8 >> [1]) : $6 ))
	$6 = *($8 + [4])
	$3 = *($8)
	*($8) = (int_64)0
	$29 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( (*($4 + [128]) & [1]) ){ goto $label$54 }
	$17 = [83]
	goto $label$17 
	
.LABEL $label$136
	*($4 + [128]) = [0]
	goto $label$53 
	
.LABEL $label$135
	*(*($7)) = [0]
	*($4 + [132]) = [0]
	$17 = [36]
	goto $label$17 
	
.LABEL $label$134
	CALL $108(($4 + [128]), [0])
	*($7) = $29
	*($4 + [132]) = $6
	*($4 + [128]) = $3
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$52 }
	$17 = [37]
	goto $label$17 
	
.LABEL $label$133
	CALL _ZdlPv(*($11))
	$17 = [38]
	goto $label$17 
	
.LABEL $label$132
	$2 = *($18)
	$7 = *($25)
	$3 = *($26)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$49 }
	$17 = [39]
	goto $label$17 
	
.LABEL $label$131
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$48 }
	$17 = [40]
	goto $label$17 
	
.LABEL $label$130
	$7 = $8
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$50 }
	goto $label$51 
	
.LABEL $label$129
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$47 }
	$17 = [82]
	goto $label$17 
	
.LABEL $label$128
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$19), [8929])
	goto $label$45 
	
.LABEL $label$127
	$6 = [0]
	$8 = CALL db_find_i64(*($19), *($27), (int_64)-3020376800539705344, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$46 }
	$17 = [42]
	goto $label$17 
	
.LABEL $label$126
	$6 = CALL $19($19, $8)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$19), [8929])
	$17 = [43]
	goto $label$17 
	
.LABEL $label$125
	$8 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($8, [8756])
	$2 = *($0)
	*($11) = $14
	*($4 + [60]) = $12
	*($28) = ($4 + [124])
	*((($4 + [56]) + [16])) = ($4 + [412])
	*($4 + [56]) = ($4 + [448])
	CALL eosio_assert($8, [9008])
	CALL $35($19, $6, $2, ($4 + [56]))
	$8 = (*($4 + [124]) + [1])
	*($4 + [124]) = $8
	$18 = ($18 + [8])
	if ( ((int_32)$18 != (int_32)*($20)) ){ goto $label$69 }
	$17 = [44]
	goto $label$17 
	
.LABEL $label$124
	*(($4 + [64])) = [0]
	*($4 + [56]) = (int_64)0
	$8 = CALL $120([8788])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$44 }
	$17 = [45]
	goto $label$17 
	
.LABEL $label$123
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$43 }
	$17 = [79]
	goto $label$17 
	
.LABEL $label$122
	*($4 + [56]) = ($8 << [1])
	$7 = (($4 + [56]) | [1])
	if ( $8 ){ goto $label$41 }
	goto $label$42 
	
.LABEL $label$121
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($4 + [56]) = ($6 | [1])
	*($4 + [64]) = $7
	*($4 + [60]) = $8
	$17 = [47]
	goto $label$17 
	
.LABEL $label$120
	CALL memcpy($7, [8788], $8)
	$17 = [48]
	goto $label$17 
	
.LABEL $label$119
	*(($7 + $8)) = [0]
	$8 = *($4 + [128])
	$7 = ($8 & [1])
	$8 = CALL $109(($4 + [56]), [0], ( *($4 + [136]) ? (($4 + [128]) | [1]) : $7 ), ( *($4 + [132]) ? uint_32($8 >> [1]) : $7 ))
	$7 = *($8 + [4])
	$6 = *($8)
	*($8) = (int_64)0
	$3 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( (*($4 + [128]) & [1]) ){ goto $label$40 }
	$17 = [78]
	goto $label$17 
	
.LABEL $label$118
	*($4 + [128]) = [0]
	goto $label$39 
	
.LABEL $label$117
	*(*(($4 + [136]))) = [0]
	*($4 + [132]) = [0]
	$17 = [50]
	goto $label$17 
	
.LABEL $label$116
	CALL $108(($4 + [128]), [0])
	*((($4 + [128]) + [8])) = $3
	*($4 + [132]) = $7
	*($4 + [128]) = $6
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$38 }
	$17 = [51]
	goto $label$17 
	
.LABEL $label$115
	CALL _ZdlPv(*($4 + [64]))
	$17 = [52]
	goto $label$17 
	
.LABEL $label$114
	$2 = *($0)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9008])
	CALL $36($5, $9, $2)
	*((($4 + [112]) + [8])) = [0]
	*($4 + [112]) = (int_64)0
	$8 = CALL $120([8791])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$37 }
	$17 = [53]
	goto $label$17 
	
.LABEL $label$113
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$36 }
	$17 = [76]
	goto $label$17 
	
.LABEL $label$112
	*($4 + [112]) = ($8 << [1])
	$7 = (($4 + [112]) | [1])
	if ( $8 ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$111
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($4 + [112]) = ($6 | [1])
	*($4 + [120]) = $7
	*($4 + [116]) = $8
	$17 = [55]
	goto $label$17 
	
.LABEL $label$110
	CALL memcpy($7, [8791], $8)
	$17 = [56]
	goto $label$17 
	
.LABEL $label$109
	*(($7 + $8)) = [0]
	$8 = CALL $105(($4 + [96]), ($4 + [128]))
	CALL $37($0, ($4 + [112]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$33 }
	$17 = [57]
	goto $label$17 
	
.LABEL $label$108
	CALL _ZdlPv(*($8 + [8]))
	$17 = [58]
	goto $label$17 
	
.LABEL $label$107
	if ( ((*($4 + [112]) & [1]) == 0) ){ goto $label$32 }
	$17 = [59]
	goto $label$17 
	
.LABEL $label$106
	CALL _ZdlPv(*($4 + [120]))
	$17 = [60]
	goto $label$17 
	
.LABEL $label$105
	$2 = *($0)
	$7 = CALL $105(($4 + [40]), ($4 + [128]))
	*($4 + [64]) = (int_64)6460303349673508864
	*($4 + [56]) = $2
	*(($8 = CALL _Znwj([16]))) = $2
	*($8 + [8]) = (int_64)3617214756542218240
	*(($4 + [92])) = [0]
	$6 = ($8 + [16])
	*(($4 + [80])) = $6
	*(($4 + [76])) = $6
	*($4 + [72]) = $8
	*($4 + [84 align=4]) = (int_64)0
	$8 = *($4 + [40])
	$8 = ( *($4 + [44]) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$2 = (CASTING uint_64)(uint_32 $8)
	$6 = ($4 + [84])
	$17 = [61]
	goto $label$17 
	
.LABEL $label$104
	$8 = ($8 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$31 }
	$17 = [62]
	goto $label$17 
	
.LABEL $label$103
	if ( ($8 == 0) ){ goto $label$30 }
	$17 = [63]
	goto $label$17 
	
.LABEL $label$102
	CALL $1($6, $8)
	$6 = *(($4 + [88]))
	$8 = *(($4 + [84]))
	goto $label$29 
	
.LABEL $label$101
	$6 = [0]
	$8 = [0]
	$17 = [64]
	goto $label$17 
	
.LABEL $label$100
	*($4 + [468]) = $8
	*($4 + [464]) = $8
	*($4 + [472]) = $6
	CALL $38(($4 + [464]), $7)
	CALL $18(($4 + [464]), ($4 + [56]))
	$8 = *($4 + [464])
	CALL send_inline($8, (*($4 + [468]) - $8))
	$8 = *($4 + [464])
	if ( ($8 == 0) ){ goto $label$28 }
	$17 = [65]
	goto $label$17 
	
.LABEL $label$99
	*($4 + [468]) = $8
	CALL _ZdlPv($8)
	$17 = [66]
	goto $label$17 
	
.LABEL $label$98
	$8 = *($4 + [84])
	if ( ($8 == 0) ){ goto $label$27 }
	$17 = [67]
	goto $label$17 
	
.LABEL $label$97
	*(($4 + [88])) = $8
	CALL _ZdlPv($8)
	$17 = [68]
	goto $label$17 
	
.LABEL $label$96
	$8 = *($4 + [72])
	if ( ($8 == 0) ){ goto $label$26 }
	$17 = [69]
	goto $label$17 
	
.LABEL $label$95
	*(($4 + [76])) = $8
	CALL _ZdlPv($8)
	$17 = [70]
	goto $label$17 
	
.LABEL $label$94
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$25 }
	$17 = [71]
	goto $label$17 
	
.LABEL $label$93
	CALL _ZdlPv(*($4 + [48]))
	$17 = [72]
	goto $label$17 
	
.LABEL $label$92
	if ( ((*($4 + [128]) & [1]) == 0) ){ goto $label$24 }
	$17 = [73]
	goto $label$17 
	
.LABEL $label$91
	CALL _ZdlPv(*(($4 + [136])))
	$17 = [74]
	goto $label$17 
	
.LABEL $label$90
	$13
	$global$0 = ($4 + [480])
	return (unreachable)
	
.LABEL $label$89
	CALL $104(($4 + [56]))
	
.LABEL $label$88
	CALL $104(($4 + [56]))
	
.LABEL $label$87
	CALL $104(($4 + [128]))
	
.LABEL $label$86
	CALL $104(($4 + [56]))
	
.LABEL $label$85
	CALL $104(($4 + [112]))
	
.LABEL $label$84
	$17 = [103]
	goto $label$17 
	
.LABEL $label$83
	$17 = [0]
	goto $label$17 
	
.LABEL $label$82
	$17 = [102]
	goto $label$17 
	
.LABEL $label$81
	$17 = [3]
	goto $label$17 
	
.LABEL $label$80
	$17 = [5]
	goto $label$17 
	
.LABEL $label$79
	$17 = [6]
	goto $label$17 
	
.LABEL $label$78
	$17 = [7]
	goto $label$17 
	
.LABEL $label$77
	$17 = [8]
	goto $label$17 
	
.LABEL $label$76
	$17 = [10]
	goto $label$17 
	
.LABEL $label$75
	$17 = [12]
	goto $label$17 
	
.LABEL $label$74
	$17 = [100]
	goto $label$17 
	
.LABEL $label$73
	$17 = [14]
	goto $label$17 
	
.LABEL $label$72
	$17 = [16]
	goto $label$17 
	
.LABEL $label$71
	$17 = [15]
	goto $label$17 
	
.LABEL $label$70
	$17 = [44]
	goto $label$17 
	
.LABEL $label$69
	$17 = [18]
	goto $label$17 
	
.LABEL $label$68
	$17 = [19]
	goto $label$17 
	
.LABEL $label$67
	$17 = [19]
	goto $label$17 
	
.LABEL $label$66
	$17 = [87]
	goto $label$17 
	
.LABEL $label$65
	$17 = [21]
	goto $label$17 
	
.LABEL $label$64
	$17 = [23]
	goto $label$17 
	
.LABEL $label$63
	$17 = [24]
	goto $label$17 
	
.LABEL $label$62
	$17 = [25]
	goto $label$17 
	
.LABEL $label$61
	$17 = [26]
	goto $label$17 
	
.LABEL $label$60
	$17 = [28]
	goto $label$17 
	
.LABEL $label$59
	$17 = [30]
	goto $label$17 
	
.LABEL $label$58
	$17 = [85]
	goto $label$17 
	
.LABEL $label$57
	$17 = [32]
	goto $label$17 
	
.LABEL $label$56
	$17 = [34]
	goto $label$17 
	
.LABEL $label$55
	$17 = [33]
	goto $label$17 
	
.LABEL $label$54
	$17 = [35]
	goto $label$17 
	
.LABEL $label$53
	$17 = [36]
	goto $label$17 
	
.LABEL $label$52
	$17 = [38]
	goto $label$17 
	
.LABEL $label$51
	$17 = [41]
	goto $label$17 
	
.LABEL $label$50
	$17 = [39]
	goto $label$17 
	
.LABEL $label$49
	$17 = [41]
	goto $label$17 
	
.LABEL $label$48
	$17 = [81]
	goto $label$17 
	
.LABEL $label$47
	$17 = [41]
	goto $label$17 
	
.LABEL $label$46
	$17 = [43]
	goto $label$17 
	
.LABEL $label$45
	$17 = [43]
	goto $label$17 
	
.LABEL $label$44
	$17 = [80]
	goto $label$17 
	
.LABEL $label$43
	$17 = [46]
	goto $label$17 
	
.LABEL $label$42
	$17 = [48]
	goto $label$17 
	
.LABEL $label$41
	$17 = [47]
	goto $label$17 
	
.LABEL $label$40
	$17 = [49]
	goto $label$17 
	
.LABEL $label$39
	$17 = [50]
	goto $label$17 
	
.LABEL $label$38
	$17 = [52]
	goto $label$17 
	
.LABEL $label$37
	$17 = [77]
	goto $label$17 
	
.LABEL $label$36
	$17 = [54]
	goto $label$17 
	
.LABEL $label$35
	$17 = [56]
	goto $label$17 
	
.LABEL $label$34
	$17 = [55]
	goto $label$17 
	
.LABEL $label$33
	$17 = [58]
	goto $label$17 
	
.LABEL $label$32
	$17 = [60]
	goto $label$17 
	
.LABEL $label$31
	$17 = [61]
	goto $label$17 
	
.LABEL $label$30
	$17 = [75]
	goto $label$17 
	
.LABEL $label$29
	$17 = [64]
	goto $label$17 
	
.LABEL $label$28
	$17 = [66]
	goto $label$17 
	
.LABEL $label$27
	$17 = [68]
	goto $label$17 
	
.LABEL $label$26
	$17 = [70]
	goto $label$17 
	
.LABEL $label$25
	$17 = [72]
	goto $label$17 
	
.LABEL $label$24
	$17 = [74]
	goto $label$17 
	
.LABEL $label$23
	$17 = [98]
	goto $label$17 
	
.LABEL $label$22
	$17 = [90]
	goto $label$17 
	
.LABEL $label$21
	$17 = [92]
	goto $label$17 
	
.LABEL $label$20
	$17 = [91]
	goto $label$17 
	
.LABEL $label$19
	$17 = [93]
	goto $label$17 
	
.LABEL $label$18
	$17 = [94]
	goto $label$17 
	
.LABEL $label$1
	$global$0 = ($4 + [480])
	$17
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9318])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9363])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9413])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$10
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$14
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)6460301881741672447) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)6138554293278649855) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-8279703795630342144) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)6138554293134636368) ){ goto $label$1 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [1]
	*($3 + [16]) = *($3 + [192])
	CALL $58($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [2]
	*($3) = *($3 + [184])
	CALL $59($0, $1, $3)
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 > (int_64)7343846395700281343) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)6460301881741672448) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)6460303349673508864) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)7343835699697680384) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [3]
	*($3 + [72]) = *($3 + [136])
	CALL $61($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)6138554293278649856) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)6460295318826811392) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)6460297517853573120) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [4]
	*($3 + [48]) = *($3 + [160])
	CALL $62($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)7343846395700281344) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)7343906068554055680) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)7344092704069386240) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [5]
	*($3 + [96]) = *($3 + [112])
	CALL $64($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [108]) = [0]
	*($3 + [104]) = [6]
	*($3 + [24]) = *($3 + [104])
	CALL $65($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [180]) = [0]
	*($3 + [176]) = [7]
	*($3 + [32]) = *($3 + [176])
	CALL $66($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [156]) = [0]
	*($3 + [152]) = [8]
	*($3 + [56]) = *($3 + [152])
	CALL $67($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [148]) = [0]
	*($3 + [144]) = [9]
	*($3 + [64]) = *($3 + [144])
	CALL $69($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [204]) = [0]
	*($3 + [200]) = [10]
	*($3 + [8]) = *($3 + [200])
	CALL $70($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [172]) = [0]
	*($3 + [168]) = [11]
	*($3 + [40]) = *($3 + [168])
	CALL $71($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [124]) = [0]
	*($3 + [120]) = [12]
	*($3 + [88]) = *($3 + [120])
	CALL $72($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [132]) = [0]
	*($3 + [128]) = [13]
	*($3 + [80]) = *($3 + [128])
	CALL $64($1, $1, ($3 + [80]))
	
.LABEL $label$1
	CALL $112([0])
	$global$0 = ($3 + [208])
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $113([15], $0, [-1], $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $114 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$4 = $global$0
	$5 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9089])
	$6 = *($1)
	$7 = *($3)
	if ( ((int_64)*($7 + [8]) != (int_64)1397703940) ){ goto $label$2 }
	$8 = *(*($3 + [12]))
	$9 = *((*($3 + [8]) + ($8 << [3])))
	$10 = (int_64)0
	if ( ((int_32)$8 == (int_32)*(*($3 + [16]))) ){ goto $label$3 }
	$10 = *($7)
	
.LABEL $label$3
	*($1 + [8]) = ((int_64)((int_64)$10 + (int_64)$9) + (int_64)*($1 + [8]))
	$7 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [8])
	
.LABEL $label$1
	CALL eosio_assert([1], [9140])
	$3 = $4
	$4 = ($3 + [-32])
	$global$0 = $4
	CALL eosio_assert([1], [8886])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8886])
	CALL memcpy(($3 + [-24]), $7, [8])
	CALL eosio_assert([1], [8886])
	CALL memcpy(($3 + [-16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$global$0 = $5
}

void .FUNC $112 (int_32 $0)
{
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [14] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $115($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $115($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $115($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $115($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18048]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $115($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $115($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $115($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $110 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $111 ()
{
	return [9624]
}

int_32 .FUNC $118 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $110($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [40])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [44])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	*($1) = CALL $41(*($5))
	$6 = *($5 + [4])
	*($1 + [8]) = *($6)
	*(($1 + [16])) = *(($6 + [8]))
	*($1 + [32]) = (int_64)1
	$6 = *(*($5 + [8]))
	*($1 + [28]) = *(*($5 + [12]))
	*($1 + [52]) = [0]
	*($1 + [24]) = $6
	$7 = ($1 + [40])
	$8 = ($1 + [52])
	$9 = ($1 + [32])
	$10 = ($1 + [28])
	$11 = ($1 + [24])
	$12 = ($1 + [8])
	$13 = *($1 + [40])
	$6 = *(($1 + [44]))
	$14 = ($6 - $13)
	$15 = (CASTING uint_64)(uint_32 int_32($14 >> [3]))
	$5 = [38]
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$15 = (uint_64)$15 >> (uint_64)(int_64)7
	if ( ((int_64)$15) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$13 == (int_32)$6) ){ goto $label$2 }
	$5 = (($14 & [-8]) + $5)
	
.LABEL $label$2
	$6 = ($5 + [4])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$5 = CALL $123($6)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $6)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $12
	*($3 + [32]) = $1
	*($3 + [40]) = $11
	*($3 + [44]) = $10
	*($3 + [48]) = $9
	*($3 + [52]) = $7
	*($3 + [56]) = $8
	CALL $85(($3 + [32]), ($3 + [24]))
	$15 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)6460298549400698880, *(*($0 + [8])), $15, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$15 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $126($5)
	if ( (uint_64)($15 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [64])
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9572])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-8279610979239591936)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9518])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9518])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $54(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $107($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = $global$0
	$3 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64)0
	$5 = ($1 + [16])
	$6 = ($1 + [8])
	$7 = *($0)
	$4 = *($4 + [4])
	if ( ((int_64)*($4 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	$8 = *($4)
	*($6) = $8
	if ( ((int_64)$8 < (int_64)20000) ){ goto $label$1 }
	*($5) = (int_64)880000
	
.LABEL $label$1
	$2 = $2
	$4 = ($2 + [-32])
	$global$0 = $4
	CALL eosio_assert([1], [8886])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8886])
	CALL memcpy(($2 + [-24]), $6, [8])
	CALL eosio_assert([1], [8886])
	CALL memcpy(($2 + [-16]), $5, [8])
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($7 + [8]), (int_64)-3020376800539705344, *(*($0 + [8])), $8, $4, [24])
	if ( (uint_64)($8 <= *($7 + [16])) ){ goto $label$2 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = $3
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = $global$0
	$5 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9089])
	$6 = *($1)
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$2 }
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*($3))
	$7 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [8])
	
.LABEL $label$1
	CALL eosio_assert([1], [9140])
	$3 = $4
	$4 = ($3 + [-32])
	$global$0 = $4
	CALL eosio_assert([1], [8886])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8886])
	CALL memcpy(($3 + [-24]), $7, [8])
	CALL eosio_assert([1], [8886])
	CALL memcpy(($3 + [-16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $23 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($1)
	CALL eosio_assert(((int_64)*($2) > (int_64)99), [8414])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)1397703940), [8414])
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [8929])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)-3020376800539705344, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $19($4, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [8929])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8422])
	$9 = *($0)
	*($3 + [56]) = $2
	CALL eosio_assert($7, [9008])
	CALL $24($4, $8, $9, ($3 + [56]))
	*((($3 + [24]) + [8])) = [0]
	*((($3 + [40]) + [8])) = *(($2 + [8]))
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = *($2)
	$7 = CALL $120([8430])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$8 }
	*($3 + [24]) = ($7 << [1])
	$6 = (($3 + [24]) | [1])
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$8 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($3 + [24]) = ($8 | [1])
	*($3 + [32]) = $6
	*($3 + [28]) = $7
	
.LABEL $label$7
	CALL memcpy($6, [8430], $7)
	
.LABEL $label$6
	*(($6 + $7)) = [0]
	*((($3 + [8]) + [8])) = *((($3 + [40]) + [8]))
	*($3 + [8]) = *($3 + [40])
	CALL $25($0, $1, ($3 + [8]), ($3 + [24]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($3 + [32]))
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return (unreachable)
	
.LABEL $label$5
	CALL $104(($3 + [24]))
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $110($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [128])
	$global$0 = $4
	$5 = *($2 + [8])
	$6 = *($0)
	*((($4 + [8]) + [24])) = *($2 + [8])
	*($4 + [16]) = $1
	*($4 + [8]) = $6
	*($4 + [24]) = *($2)
	$3 = CALL $105((($4 + [8]) + [32]), $3)
	*($4 + [64]) = (int_64)-3617168760277827584
	*($4 + [56]) = ( (int_64)6138663591592764928 ? ( (int_64)6463110915767967024 ? (int_64)0 : ((int_64)$5 == (int_64)362174039556) ) : ((int_64)$5 == (int_64)1397703940) )
	*(($2 = CALL _Znwj([16]))) = $6
	*($2 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$0 = ($2 + [16])
	*((($4 + [56]) + [24])) = $0
	*(($4 + [76])) = $0
	*($4 + [72]) = $2
	*($4 + [84 align=4]) = (int_64)0
	$2 = *($3)
	$3 = ( *((($4 + [8]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($3 + [32])
	$5 = (CASTING uint_64)(uint_32 $3)
	$3 = ($4 + [84])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($2 == 0) ){ goto $label$3 }
	CALL $1($3, $2)
	$3 = *(($4 + [88]))
	$2 = *(($4 + [84]))
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	$2 = [0]
	
.LABEL $label$2
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = $3
	*($4 + [112]) = ($4 + [96])
	*($4 + [120]) = ($4 + [8])
	CALL $26(($4 + [120]), ($4 + [112]))
	CALL $18(($4 + [96]), ($4 + [56]))
	$2 = *($4 + [96])
	CALL send_inline($2, (*($4 + [100]) - $2))
	$2 = *($4 + [96])
	if ( ($2 == 0) ){ goto $label$4 }
	*($4 + [100]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$2 = *($4 + [84])
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [88])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *($4 + [72])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [76])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$7
	$global$0 = ($4 + [128])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$4 = $global$0
	$5 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9089])
	$6 = ($1 + [8])
	$7 = *($1)
	$8 = $7
	$9 = *($3)
	if ( ((int_64)*($9 + [8]) != (int_64)1397703940) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($6) >= (int_64)*($9)), [8422])
	*($6) = (int_64))(*($6) - *(*($3)))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [9140])
	$3 = $4
	$4 = ($3 + [-32])
	$global$0 = $4
	CALL eosio_assert([1], [8886])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8886])
	CALL memcpy(($3 + [-24]), $6, [8])
	CALL eosio_assert([1], [8886])
	CALL memcpy(($3 + [-16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = $5
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [20]) = $3
	*($4 + [24]) = $2
	CALL require_auth(*($0))
	$5 = *($1 + [8])
	$6 = [0]
	$7 = *($1)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$6 = [1]
	$10 = $3
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$10 = ($3 + [1])
	$3 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8391])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [8440])
	CALL eosio_assert(((int_64)$5 == (int_64)1397703940), [8473])
	CALL eosio_assert([1], [8503])
	CALL eosio_assert((($2 + [-1]) <= [5]), [8537])
	$8 = *($0)
	*($4 + [4]) = $1
	*($4) = $0
	*($4 + [8]) = ($4 + [24])
	*($4 + [12]) = ($4 + [20])
	*($4 + [56]) = $8
	CALL eosio_assert(((int_64)*($0 + [72]) == (int_64)CALL $fimport$8()), [9199])
	$6 = ($0 + [72])
	*($4 + [32]) = $6
	*($4 + [36]) = $4
	*($4 + [40]) = ($4 + [56])
	*(($3 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [56]) = $6
	CALL $28(($4 + [32]), $3)
	*($4 + [48]) = $3
	$8 = *($3)
	*($4 + [32]) = $8
	$10 = *($3 + [60])
	*($4 + [28]) = $10
	$1 = ($0 + [100])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$8 }
	*($6 + [8]) = $8
	*($6 + [16]) = $10
	*($4 + [48]) = [0]
	*($6) = $3
	*($1) = ($6 + [24])
	$3 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $29(($0 + [96]), ($4 + [48]), ($4 + [32]), ($4 + [28]))
	$3 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( $3 ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$6
	$6 = *($3 + [40])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($3 + [44])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	CALL _ZdlPv($3)
	$global$0 = ($4 + [64])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $107($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $69 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [232]) = [0]
	*($4 + [224]) = (int_64)0
	*($4 + [212]) = $2
	*($4 + [208]) = $2
	*($4 + [216]) = ($2 + $7)
	CALL $73(($4 + [208]), ($4 + [224]))
	*(($3 = ($4 + [8]))) = *($4 + [216])
	*($4) = *($4 + [208])
	$3 = *($3)
	*((($4 + [240]) + [8])) = $3
	*(($8 = (($4 + [256]) + [8]))) = $3
	$9 = *($4)
	*($4 + [256]) = $9
	*($4 + [240]) = $9
	$3 = *($8)
	*((($4 + [272]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [256])
	*($4 + [32]) = $1
	*($4 + [272]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	$8 = CALL $105(($4 + [256]), ($4 + [224]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $105(($4 + [272]), $8)
	CALL void $3((int_32 $5), (int_32 $6))
	if ( (*($4 + [272]) & [1]) ){ goto $label$9 }
	if ( (*($4 + [256]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $126($2)
	
.LABEL $label$5
	CALL $75(($4 + [16]))
	if ( ((*($4 + [224]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [232])))
	
.LABEL $label$10
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $65 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [200]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [200])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $126($2)
	
.LABEL $label$5
	CALL $75(($4 + [8]))
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [280]))) = (int_64)0
	*($4 + [256]) = [0]
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [272]) = (int_64)0
	*($4 + [236]) = $2
	*($4 + [232]) = $2
	*($4 + [240]) = ($2 + $7)
	*($4 + [320]) = ($4 + [232])
	*($4 + [40]) = ($4 + [248])
	CALL $82(($4 + [40]), ($4 + [320]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [240])
	*($4 + [24]) = *($4 + [232])
	$10 = *($9)
	*(($3 = (($4 + [288]) + [8]))) = $10
	*(($9 = (($4 + [304]) + [8]))) = $10
	$11 = *($4 + [24])
	*($4 + [304]) = $11
	*($4 + [288]) = $11
	$10 = *($9)
	*((($4 + [320]) + [8])) = $10
	*(($4 + [64])) = $10
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [304])
	*($4 + [56]) = $1
	*($4 + [320]) = $1
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*(($4 + [224])) = [0]
	*(($4 + [216])) = (int_64)0
	*($3) = *($8)
	*($4 + [288]) = *($4 + [272])
	$0 = *($4 + [264])
	$8 = *($4 + [256])
	$1 = *($4 + [248])
	*($9) = *($3)
	*($4 + [304]) = *($4 + [288])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$11 = *((($4 + [304]) + [8]))
	*((($4 + [320]) + [8])) = $11
	*((($4 + [8]) + [8])) = $11
	$11 = *($4 + [304])
	*($4 + [8]) = $11
	*($4 + [320]) = $11
	CALL void $3((int_32 $1), (int_64 $8), (int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $126($2)
	
.LABEL $label$5
	CALL $75(($4 + [40]))
	$global$0 = ($4 + [336])
	return [1]
}

int_32 .FUNC $67 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = (int_64)0
	*($4 + [192]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [192]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9003])
	CALL memcpy((($4 + [192]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [200])
	$1 = *($4 + [192])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $126($2)
	
.LABEL $label$5
	CALL $75($4)
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $66 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [216]) + [16]))) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [216]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [216]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9003])
	CALL memcpy((($4 + [216]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [9003])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*($4 + [176]) = $0
	*(($8 = (($4 + [240]) + [8]))) = *($3)
	*($4 + [240]) = *($4 + [224])
	$0 = *($4 + [216])
	*((($4 + [256]) + [8])) = *($8)
	*($4 + [256]) = *($4 + [240])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [256]) + [8]))
	*((($4 + [272]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [256])
	*($4 + [8]) = $1
	*($4 + [272]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $126($2)
	
.LABEL $label$5
	CALL $75(($4 + [24]))
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [352])
	$global$0 = $3
	*(($4 = $3) + [296]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [224]) + [48])) = (int_64)0
	*((($4 + [224]) + [64])) = [0]
	*($4 + [232]) = [0]
	*($4 + [224]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [256]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [212]) = $2
	*($4 + [208]) = $2
	*($4 + [216]) = ($2 + $5)
	*($4 + [336]) = ($4 + [208])
	*($4 + [16]) = ($4 + [224])
	CALL $80(($4 + [16]), ($4 + [336]))
	*(($3 = ($4 + [8]))) = *($4 + [216])
	*($4) = *($4 + [208])
	$3 = *($3)
	*((($4 + [304]) + [8])) = $3
	*(($6 = (($4 + [320]) + [8]))) = $3
	$7 = *($4)
	*($4 + [320]) = $7
	*($4 + [304]) = $7
	$3 = *($6)
	*((($4 + [336]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [320])
	*($4 + [32]) = $1
	*($4 + [336]) = $1
	*(($4 + [56])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*($4 + [340]) = ($4 + [296])
	*($4 + [336]) = ($4 + [16])
	CALL $81(($4 + [336]), ($4 + [224]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $126($2)
	
.LABEL $label$4
	CALL $75(($4 + [16]))
	if ( ((*($4 + [280]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [288])))
	
.LABEL $label$5
	$global$0 = ($4 + [352])
	return [1]
}

void .FUNC $60 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	CALL require_auth(*($0))
}

void .FUNC $63 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [208]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [216]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [200]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9003])
	CALL memcpy((($4 + [200]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9003])
	CALL memcpy((($4 + [200]) + [16]), ($2 + [16]), [8])
	*(($4 + [28])) = ($2 + [24])
	*((($4 + [8]) + [24])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = $0
	*(($4 + [176])) = (int_64)-1
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*($4 + [160]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [216])
	$1 = *($4 + [208])
	$8 = *($4 + [200])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $126($2)
	
.LABEL $label$5
	CALL $75(($4 + [8]))
	$global$0 = ($4 + [224])
	return [1]
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $121(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9620])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $121(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $126($0)
	
.LABEL $label$1
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $104 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $110($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9250])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $89($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [9003])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9003])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[1]), [9003])
	CALL memcpy($3, *($4 + [4]), [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $88(*($1), *($0 + [20]))
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8886])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [8886])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[1]), [8886])
	CALL memcpy(*($4 + [4]), $3, [2])
	*($4 + [4]) = (*($4 + [4]) + [2])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8886])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8886])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $86(*($1), *($0 + [20]))
	$0 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8886])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8886])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8886])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8886])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8886])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8886])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy(($4 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [24]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [9003])
	CALL memcpy(($2 + [8]), *($1 + [4]), [8])
	*(($4 + [32])) = *($2 + [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [48]))
	*($2 + [32]) = *($1 + [40])
	$4 = *($1 + [36])
	$5 = *($1 + [32])
	$6 = *($1 + [24])
	$7 = *($1 + [16])
	$8 = *($1 + [8])
	$9 = *($1)
	$1 = CALL $105(($2 + [16]), ($1 + [56]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$10 = *($0 + [4])
	$3 = (*($0) + int_32($10 >> [1]))
	$0 = *($0)
	if ( (($10 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($11 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$10 = CALL $105(($2 + [64]), $1)
	*(($2 + [8])) = *($11)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $9), (int_64 $8), (int_32 $7), (int_64 $6), (int_64 $5), (int_32 $4), (int_32 $2), (int_32 $10), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy(($4 + [8]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $95(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $72 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [208])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [200]) = [0]
	*($4 + [192]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [192]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[8]), [9003])
	CALL memcpy((($4 + [192]) + [8]), ($2 + [8]), [4])
	*(($4 + [20])) = ($2 + [12])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [152]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	$8 = *($4 + [200])
	$0 = *($4 + [192])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $126($2)
	
.LABEL $label$5
	CALL $75($4)
	$global$0 = ($4 + [208])
	return [1]
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $92($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $108($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $108($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $104($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $70 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [320])
	$global$0 = $3
	*(($4 = $3) + [264]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [256])) = [0]
	*($4 + [232]) = (int_64)0
	*($4 + [224]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [216]) = ($2 + $5)
	*($4 + [208]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9003])
	CALL memcpy(($4 + [224]), $2, [8])
	$3 = ($5 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [9003])
	CALL memcpy((($4 + [224]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [9003])
	CALL memcpy((($4 + [224]) + [16]), ($2 + [16]), [8])
	*($4 + [212]) = ($2 + [24])
	CALL $73(($4 + [208]), (($4 + [224]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [216])
	*($4) = *($4 + [208])
	$3 = *($3)
	*((($4 + [272]) + [8])) = $3
	*(($6 = (($4 + [288]) + [8]))) = $3
	$7 = *($4)
	*($4 + [288]) = $7
	*($4 + [272]) = $7
	$3 = *($6)
	*((($4 + [304]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [288])
	*($4 + [32]) = $1
	*($4 + [304]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = $0
	*(($4 + [184])) = (int_64)-1
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*($4 + [168]) = $0
	*(($4 + [200])) = [0]
	*(($4 + [192])) = (int_64)0
	*($4 + [308]) = ($4 + [264])
	*($4 + [304]) = ($4 + [16])
	CALL $74(($4 + [304]), ($4 + [224]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $126($2)
	
.LABEL $label$4
	CALL $75(($4 + [16]))
	if ( ((*($4 + [248]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [256])))
	
.LABEL $label$5
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $71 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $123($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [256]) = (int_64)0
	*($4 + [248]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [236]) = $2
	*($4 + [232]) = $2
	*($4 + [240]) = ($2 + $7)
	*($4 + [304]) = ($4 + [232])
	*($4 + [40]) = ($4 + [248])
	CALL $79(($4 + [40]), ($4 + [304]))
	*(($8 = (($4 + [24]) + [8]))) = *($4 + [240])
	*($4 + [24]) = *($4 + [232])
	$9 = *($8)
	*(($3 = (($4 + [272]) + [8]))) = $9
	*(($8 = (($4 + [288]) + [8]))) = $9
	$10 = *($4 + [24])
	*($4 + [288]) = $10
	*($4 + [272]) = $10
	$9 = *($8)
	*((($4 + [304]) + [8])) = $9
	*(($4 + [64])) = $9
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$1 = *($4 + [288])
	*($4 + [56]) = $1
	*($4 + [304]) = $1
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*(($4 + [224])) = [0]
	*(($4 + [216])) = (int_64)0
	*($3) = *($4 + [256])
	*($4 + [272]) = *($4 + [248])
	$9 = *($4 + [264])
	$11 = *($4 + [268])
	*($8) = *($3)
	*($4 + [288]) = *($4 + [272])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$0 = *((($4 + [288]) + [8]))
	*((($4 + [304]) + [8])) = $0
	*((($4 + [8]) + [8])) = $0
	$0 = *($4 + [288])
	*($4 + [8]) = $0
	*($4 + [304]) = $0
	CALL void $3((int_32 ($4 + [8])), (int_32 $9), (int_32 $11), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $126($2)
	
.LABEL $label$5
	CALL $75(($4 + [40]))
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $105($2, ($1 + [20]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$6 = CALL $105(($2 + [16]), $1)
	CALL void $7((int_32 $5), (int_64 $4), (int_64 $3), (int_32 $6), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9003])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $73(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $105($2, ($1 + [24]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$6 = CALL $105(($2 + [16]), $1)
	CALL void $7((int_32 $5), (int_64 $4), (int_64 $3), (int_64 $6), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [168])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [152])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [160])), (int_64)-8279610979239591936, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $54($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $55($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [168])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9466])
	*($1) = *($7)
	$6 = ($1 + [8])
	CALL $106($6, *($5 + [4]))
	$7 = ($1 + [20])
	CALL $106($7, *($5 + [8]))
	$5 = *($1 + [8])
	$9 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($9 + [8])
	$8 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$9 = *(($1 + [20]))
	$9 = ( *(($1 + [24])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$5 = ($9 + $5)
	$8 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ($5 <= [513]) ){ goto $label$6 }
	$2 = CALL $123($5)
	goto $label$5 
	
.LABEL $label$6
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$5
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [8886])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $38($3, $6)
	CALL $38($3, $7)
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-8279610979239591936, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $126($2)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9089])
	*($1 + [52]) = [0]
	*(($5 = ($1 + [44]))) = *($1 + [40])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$6 = *($1)
	CALL eosio_assert([1], [9140])
	$7 = ($1 + [52])
	$8 = ($1 + [40])
	$9 = ($1 + [32])
	$11 = *($1 + [40])
	$10 = *($5)
	$12 = ($10 - $11)
	$13 = (CASTING uint_64)(uint_32 int_32($12 >> [3]))
	$5 = [38]
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$13 = (uint_64)$13 >> (uint_64)(int_64)7
	if ( ((int_64)$13) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$2 }
	$5 = (($12 & [-8]) + $5)
	
.LABEL $label$2
	$10 = ($5 + [4])
	if ( ($10 <= [513]) ){ goto $label$4 }
	$5 = CALL $123($10)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($3 - (($10 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$3
	*($4 + [12]) = $5
	*($4 + [8]) = $5
	*($4 + [16]) = ($5 + $10)
	*($4 + [24]) = ($4 + [8])
	*($4 + [48]) = $9
	*($4 + [52]) = $8
	*($4 + [56]) = $7
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [8])
	*($4 + [40]) = ($1 + [24])
	*($4 + [44]) = ($1 + [28])
	CALL $85(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [60]), $2, $5, $10)
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $126($5)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$5
	$global$0 = ($4 + [64])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$4 }
	if ( uint_32($4 >> [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($2 + [4]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = *($0)
	*($3 + [4]) = $1
	*($3) = $0
	*($3 + [8]) = $2
	*($3 + [40]) = $5
	CALL eosio_assert(((int_64)*($0 + [152]) == (int_64)CALL $fimport$8()), [9199])
	$1 = ($0 + [152])
	*($3 + [16]) = $1
	*($3 + [20]) = $3
	*($3 + [24]) = ($3 + [40])
	*(($2 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($2 + [16 align=4]) = (int_64)0
	*($2 + [24 align=4]) = (int_64)0
	*($2 + [32]) = $1
	CALL $39(($3 + [16]), $2)
	*($3 + [32]) = $2
	$5 = *($2)
	*($3 + [16]) = $5
	$4 = *($2 + [36])
	*($3 + [12]) = $4
	$6 = ($0 + [180])
	$1 = *($6)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [184]))) ){ goto $label$5 }
	*($1 + [8]) = $5
	*($1 + [16]) = $4
	*($3 + [32]) = [0]
	*($1) = $2
	*($6) = ($1 + [24])
	$2 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($2 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $40(($0 + [176]), ($3 + [32]), ($3 + [16]), ($3 + [12]))
	$2 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( $2 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [28])))
	
.LABEL $label$6
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($2)
	$global$0 = ($3 + [48])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $105(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $105(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9003])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9003])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy(($0 + [16]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [9003])
	CALL memcpy(($0 + [20]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = $global$0
	$5 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9089])
	$6 = *($1)
	$3 = *(*($3) + [4])
	if ( ((int_64)*(($3 + [16])) != (int_64)1397703940) ){ goto $label$2 }
	*($1 + [8]) = (int_64))(*($1 + [8]) - *($3 + [8]))
	$7 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [8])
	
.LABEL $label$1
	CALL eosio_assert([1], [9140])
	$3 = $4
	$4 = ($3 + [-32])
	$global$0 = $4
	CALL eosio_assert([1], [8886])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [8886])
	CALL memcpy(($3 + [-24]), $7, [8])
	CALL eosio_assert([1], [8886])
	CALL memcpy(($3 + [-16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $33 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9043])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$8()), [9089])
	$6 = ($1 + [40])
	$7 = *($3)
	$8 = *($1)
	$9 = ($1 + [44])
	$10 = *($9)
	if ( ((int_32)$10 == (int_32)*(($1 + [48]))) ){ goto $label$2 }
	$11 = ($10 + [8])
	*($9) = $11
	*($10) = *($7)
	goto $label$1 
	
.LABEL $label$2
	CALL $90($6, $7)
	$11 = *($9)
	
.LABEL $label$1
	if ( ((int_32)($11 - *($6)) != (int_32)[16]) ){ goto $label$3 }
	$12 = CALL current_time()
	*($1 + [52]) = (*(*(*($3 + [4]) + [4]) + [28]) + (CASTING uint_32)(uint_64 ((uint_64)$12 / (uint_64)(int_64)1000000)))
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$8 == (int_64)*($1)), [9140])
	$7 = *(($1 + [40]))
	$10 = *(($1 + [44]))
	$9 = ($10 - $7)
	$12 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$3 = [38]
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$5 }
	$3 = (($9 & [-8]) + $3)
	
.LABEL $label$5
	$10 = ($3 + [4])
	if ( ($10 <= [513]) ){ goto $label$7 }
	$3 = CALL $123($10)
	goto $label$6 
	
.LABEL $label$7
	$3 = ($4 - (($10 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$6
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $10)
	*($5 + [24]) = ($5 + [8])
	*($5 + [52]) = $6
	*($5 + [32]) = $1
	*($5 + [36]) = ($1 + [8])
	*($5 + [40]) = ($1 + [24])
	*($5 + [44]) = ($1 + [28])
	*($5 + [48]) = ($1 + [32])
	*($5 + [56]) = ($1 + [52])
	CALL $85(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [60]), $2, $3, $10)
	if ( ((uint_32)$10 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$8 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $126($3)
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [64])
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [24]) = $1
	CALL require_auth($1)
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [8929])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)-3020376800539705344, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $19($5, $8)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$5), [8929])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [8422])
	$11 = ($0 + [72])
	$7 = *(($0 + [100]))
	$12 = *(($0 + [96]))
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$10:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( ((int_64)*($6) == (int_64)$2) ){ goto $label$9 }
	$7 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$11), [8929])
	*($4 + [20]) = $6
	*($4 + [16]) = $11
	if ( ((int_64)($2 == 0) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$8 = CALL db_find_i64(*($11), *(($0 + [80])), (int_64)6460298549400698880, $2)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$11 }
	$6 = CALL $31($11, $8)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$11), [8929])
	*($4 + [20]) = $6
	*($4 + [16]) = $11
	if ( (int_64)($2 == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$11
	$6 = [0]
	*($4 + [20]) = [0]
	*($4 + [16]) = $11
	if ( ((int_64)($2 == 0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [8565])
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [8565])
	
.LABEL $label$5
	CALL eosio_assert(((int_64)*($6 + [32]) == (int_64)$3), [8565])
	$7 = ($6 + [44])
	CALL eosio_assert((int_32((*($7) - *($6 + [40])) >> [3]) <= *($6 + [24])), [8573])
	$8 = *($6 + [40])
	if ( ((int_32)$8 == (int_32)*($7)) ){ goto $label$12 }
	
.LOOP $label$13:
	CALL eosio_assert(((int_64)*($8) != (int_64)$1), [8581])
	$8 = ($8 + [8])
	if ( ((int_32)$8 != (int_32)*($7)) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_64)*(($6 + [16])) != (int_64)1397703940) ){ goto $label$14 }
	CALL eosio_assert(((int_64)*($9 + [8]) > (int_64)*($6 + [8])), [8422])
	
.LABEL $label$14
	$1 = *($0)
	*($4 + [8]) = ($4 + [16])
	CALL eosio_assert($10, [9008])
	CALL $32($5, $9, $1, ($4 + [8]))
	$8 = *($4 + [20])
	$1 = *($0)
	*($4 + [12]) = ($4 + [16])
	*($4 + [8]) = ($4 + [24])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9008])
	CALL $33($11, $8, $1, ($4 + [8]))
	$global$0 = ($4 + [32])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8980])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $123($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [56]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [28])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [52])
	CALL $87(($3 + [32]), ($3 + [24]))
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $29(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $126($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [44])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}