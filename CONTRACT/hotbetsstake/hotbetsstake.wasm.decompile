(data (i32.const 8192) "onerror action\'s are only valid from the \"EOS\" system account\00")
(data (i32.const 8254) "hotbetstoken\00")
(data (i32.const 8267) "transfer\00")
(data (i32.const 8276) "hotbetsadmin\00")
(data (i32.const 8289) "init start\00")
(data (i32.const 8300) "\n\00")
(data (i32.const 8302) "init 1\00")
(data (i32.const 8309) "init 2\00")
(data (i32.const 8316) "init 3\00")
(data (i32.const 8323) "init end\00")
(data (i32.const 8332) "stake setstatus\00")
(data (i32.const 8348) "hotbetsstake\00")
(data (i32.const 8361) "Cannot set the same lock state.\00")
(data (i32.const 8393) "start dividend,time: \00")
(data (i32.const 8415) "Current period has completed dividends\00")
(data (i32.const 8454) "eosio.token\00")
(data (i32.const 8466) "EOS\00")
(data (i32.const 8470) "hotbetspools\00")
(data (i32.const 8483) "quantity invalid\00")
(data (i32.const 8500) "total_dividend: \00")
(data (i32.const 8517) "total_dividend.amount: \00")
(data (i32.const 8541) "b: \00")
(data (i32.const 8545) "b.amount: \00: no conversion\00")
(data (i32.const 8572) "q: \00: out of range\00")
(data (i32.const 8591) "dividend\00")
(data (i32.const 8600) "stake_total: \00")
(data (i32.const 8614) "ontransfer\n\00")
(data (i32.const 8626) "stake start\00")
(data (i32.const 8638) "stake 2\00")
(data (i32.const 8646) "stake end\00")
(data (i32.const 8656) "restake start\00")
(data (i32.const 8670) "unknown account\00")
(data (i32.const 8686) "restake end\00")
(data (i32.const 8698) "unstake quantity must less than stake quantity\00")
(data (i32.const 8745) "unstake erase\00")
(data (i32.const 8759) "unreleased time\00")
(data (i32.const 8775) "release\00")
(data (i32.const 8783) "stake setclosed\00")
(data (i32.const 8799) "Cannot set the same close state\00")
(data (i32.const 8831) "No dividend time\00")
(data (i32.const 8848) "hotidce dwithdraw \00")
(data (i32.const 8867) "Current user has no dividends available\00")
(data (i32.const 8907) "The current user dividend amount is 0\00")
(data (i32.const 8945) "start dwithdraw quantity: \00")
(data (i32.const 8972) "Dividend withdrawal\00")
(data (i32.const 8992) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9041) "invalid symbol name\00")
(data (i32.const 9061) "Contract is upgrading.Please try again later.\00")
(data (i32.const 9107) "unable to find key\00")
(data (i32.const 9126) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9177) "error reading iterator\00")
(data (i32.const 9200) "read\00")
(data (i32.const 9205) "attempt to subtract asset with different symbol\00")
(data (i32.const 9253) "subtraction underflow\00")
(data (i32.const 9275) "subtraction overflow\00")
(data (i32.const 9296) "write\00")
(data (i32.const 9302) "read_transaction failed\00")
(data (i32.const 9326) "action_name: \00")
(data (i32.const 9340) "_account_name: \00")
(data (i32.const 9356) "wrong transaction\00")
(data (i32.const 9374) "get\00")
(data (i32.const 9380) "\a8$\00\00")
(data (i32.const 9384) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9417) "only HOT token allowed\00")
(data (i32.const 9440) "quantity must be a positive\00")
(data (i32.const 9468) "Dividends are paying at the moment.Please try again later.\00")
(data (i32.const 9527) "updateStake quantity: \00")
(data (i32.const 9550) "stakeIt emplace \00")
(data (i32.const 9567) "stakeIt modify \00")
(data (i32.const 9583) ".\00")
(data (i32.const 9585) " \00")
(data (i32.const 9587) ",\00")
(data (i32.const 9589) "cannot create objects in table of another contract\00")
(data (i32.const 9640) "cannot pass end iterator to modify\00")
(data (i32.const 9675) "object passed to modify is not in multi_index\00")
(data (i32.const 9721) "cannot modify objects in table of another contract\00")
(data (i32.const 9772) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9831) "attempt to add asset with different symbol\00")
(data (i32.const 9874) "addition underflow\00")
(data (i32.const 9893) "addition overflow\00")
(data (i32.const 9911) "start addTotalStake stake_total: \00")
(data (i32.const 9945) "start addTotalStake unstake_total: \00")
(data (i32.const 9981) "end addTotalStake stake_total: \00")
(data (i32.const 10013) "end addTotalStake unstake_total: \00")
(data (i32.const 10047) "start subTotalUnStake stake_total: \00")
(data (i32.const 10083) "start subTotalUnStake unstake_total: \00")
(data (i32.const 10121) "end subTotalUnStake stake_total: \00")
(data (i32.const 10155) "end subTotalUnStake unstake_total: \00")
(data (i32.const 10191) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10250) "updateUnstake quantity: \00")
(data (i32.const 10275) "unstakeIt emplace \00")
(data (i32.const 10294) "unstakeIt modify \00")
(data (i32.const 10312) "start subTotalStake stake_total: \00")
(data (i32.const 10346) "start subTotalStake unstake_total: \00")
(data (i32.const 10382) "end subTotalStake stake_total: \00")
(data (i32.const 10414) "end subTotalStake unstake_total: \00")
(data (i32.const 10448) "start addTotalUnStake stake_total: \00")
(data (i32.const 10484) "start addTotalUnStake unstake_total: \00")
(data (i32.const 10522) "end addTotalUnStake stake_total: \00")
(data (i32.const 10556) "end addTotalUnStake unstake_total: \00")
(data (i32.const 10592) "dividends: \00")
(data (i32.const 10604) "|\00")
(data (i32.const 10606) "account name must not be null\00")
(data (i32.const 10636) "quantity must not be null\00")
(data (i32.const 10662) "This is an invalid account\00")
(data (i32.const 10689) "only EOS token allowed\00")
(data (i32.const 10712) "must insert a positive quantity\00")
(data (i32.const 10744) "user: \00")
(data (i32.const 10751) "quantity: \00")
(data (i32.const 10762) "_user_dividends emplace \00")
(data (i32.const 10787) "_user_dividends modify \00")
(data (i32.const 10812) "\0c\00\00\00\0d\00\00\00")
(data (i32.const 10820) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> > >::n() [T = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]\00")
(data (i32.const 11042) "T = \00")
(data (i32.const 11047) "cannot pass end iterator to erase\00")
(data (i32.const 11081) "cannot increment end iterator\00")
(data (i32.const 11111) "object passed to erase is not in multi_index\00")
(data (i32.const 11156) "cannot erase objects in table of another contract\00")
(data (i32.const 11206) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19676) "stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 19776) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 20033) "\00\01\02\04\07\03\06\05\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$1 (param i32)))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$4 (param i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "printui" (func $fimport$10 (param i64)))
(import "env" "printi" (func $fimport$11 (param i64)))
(import "env" "current_receiver" (func $fimport$12 (result i64)))
(import "env" "db_store_i64" (func $fimport$13 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$14 (param i32 i32)))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$16 (result i64)))
(import "env" "transaction_size" (func $fimport$17 (result i32)))
(import "env" "read_transaction" (func $fimport$18 (param i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$19 (param i32 i32)))
(import "env" "memmove" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$21 (param i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$24))
(import "env" "db_remove_i64" (func $fimport$25 (param i32)))
(import "env" "__lttf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__unordtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$33 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$34 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$37 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$38 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$40 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$41 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$43 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$44 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$45 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $115))
(export "_Znwj" (func $113))
(export "_Znaj" (func $114))
(export "_ZdaPv" (func $116))
(table $0 14 14 anyfunc)
(elem (i32.const 1) $2 $5 $7 $9 $11 $13 $15 $17 $18 $19 $20 $97 $99)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20042))
(global $global$2 i32 (i32.const 20042))


void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$15
	$3 = *($0)
	$2 = CALL _Znwj([16])
	$4 = *($3 + [8])
	*($2) = [0]
	*($2 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$10 }
	$0 = $3
	$5 = $2
	goto $label$9 
	
.LABEL $label$14
	$4 = [0]
	
.LOOP $label$16:
	$2 = [0]
	
.LOOP $label$18:
	if ( ((int_32)*((($4 + $2) + [10859])) != (int_32)*(($2 + [11042]))) ){ goto $label$17 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)($4 + $2) != (int_32)[183]) ){ goto $label$18 }
	goto $label$7 
	
.LABEL $label$17
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$16 }
	goto $label$7 
	
.LABEL $label$13
	*($1) = *($0)
	*($0) = [0]
	return 
	
.LABEL $label$12
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$19 }
	if ( (*($2 + [8]) <= [9]) ){ goto $label$20 }
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdaPv($4)
	
.LABEL $label$20
	CALL _ZdlPv($2)
	
.LABEL $label$19
	*($1) = [0]
	return 
	
.LABEL $label$11
	$3 = *($1)
	$4 = [0]
	
.LOOP $label$21:
	$2 = [0]
	
.LOOP $label$23:
	if ( ((int_32)*((($4 + $2) + [10859])) != (int_32)*(($2 + [11042]))) ){ goto $label$22 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)($4 + $2) != (int_32)[183]) ){ goto $label$23 }
	goto $label$5 
	
.LABEL $label$22
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$21 }
	goto $label$5 
	
.LABEL $label$10
	$5 = CALL _Znaj($4)
	*($2) = $5
	$4 = *(($2 + [8]))
	$0 = *($3)
	
.LABEL $label$9
	CALL memcpy($5, $0, $4)
	$4 = *($3 + [12])
	*($1) = $2
	*($2 + [12]) = $4
	return 
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$4 }
	
.LABEL $label$7
	*($1) = [10859]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = [10859]
	$5 = [0]
	$4 = *($3)
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($1) = ($4 + [10863])
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$3
	$2 = ($4 + [10863])
	$5 = [0]
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($3 + [1])
	
.LOOP $label$25:
	if ( ((int_32)($4 & [255]) != (int_32)*($2)) ){ goto $label$24 }
	$2 = ($2 + [1])
	$4 = *($3)
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$25 }
	goto $label$1 
	
.LABEL $label$24
	$5 = $4
	
.LABEL $label$1
	if ( ((int_32)($5 & [255]) != (int_32)*($2)) ){ goto $label$26 }
	*($1) = *($0)
	return 
	
.LABEL $label$26
	*($1) = [0]
	$2
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $100($0, *($1), $2, $3)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = [0]
	$3 = *($1 + [8])
	*($2 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $2
	$5 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL _Znaj($3)
	*($2) = $4
	$5 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $5, $3)
	*($2 + [12]) = *($1 + [12])
	*($2 + [16]) = [0]
	$1 = *(($2 + [8]))
	*($2 + [24]) = $1
	$3 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $2
	$5 = ($2 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($2 + [16]) = $5
	$4 = *($2)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($2 + [28]) = *(($2 + [12]))
	$1 = CALL $96([10812], ($2 + [16]), $3)
	if ( (*((($2 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdaPv($3)
	
.LABEL $label$5
	if ( (*(($2 + [8])) <= [9]) ){ goto $label$6 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdaPv($3)
	
.LABEL $label$6
	*($0) = ( [10812] ? [0] : $1 )
	$global$0 = ($2 + [32])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*(($1 = CALL _Znwj([16]))) = [0]
	$4 = *(($3 + [8]))
	*($1 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $3
	$6 = $1
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($4)
	*($1) = $6
	$4 = *(($1 + [8]))
	$5 = *($3)
	
.LABEL $label$3
	CALL memcpy($6, $5, $4)
	*($2) = $1
	*($1 + [12]) = *(($3 + [12]))
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$5:
	$2 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*((($0 + $2) + [10859])) != (int_32)*(($2 + [11042]))) ){ goto $label$6 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)($0 + $2) != (int_32)[183]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	CALL $98($0, $1, $2)
	return 
	
.LABEL $label$3
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$1 }
	
.LABEL $label$2
	*($1) = [10859]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$1
	*($1) = ($0 + [10863])
	*($1 + [4]) = [0]
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [8]) = [0]
	$5 = *($3 + [8])
	*($4 + [16]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($4 + [8])
	$7 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4 + [8]) = $6
	$7 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	*($4 + [20]) = *($3 + [12])
	CALL $93($0, ($4 + [8]), [0])
	if ( (*(($4 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdaPv($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($4 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$2 = *($4 + [24])
	if ( ((int_32)$2 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$1 = *($4 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$1 = *($4 + [28])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$1) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $2
	$2 = ($0 + [24])
	*(($0 + [16])) = *($2)
	*($2) = $1
	
.LABEL $label$4
	$global$0 = ($4 + [32])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$5 = ($3 | [1])
	$6 = ($1 + [16])
	$7 = ($1 + [20])
	$8 = ($3 + [8])
	$9 = ($1 + [28])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = [1]
	if ( *($1) ){ goto $label$2 }
	$14 = [1]
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$64 
	
.LABEL $label$65
	*($7) = $13
	*($6) = *($11)
	*($11) = $12
	$12 = [1]
	if ( (*($1) == 0) ){ goto $label$31 }
	$14 = [0]
	goto $label$3 
	
.LABEL $label$64
	$12 = ((int_32)*($10) != (int_32)[0])
	$14 = [1]
	goto $label$3 
	
.LABEL $label$63
	if ( (*($2) == 0) ){ goto $label$30 }
	$14 = [2]
	goto $label$3 
	
.LABEL $label$62
	$13 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($12 | $13) == (int_32)[1]) ){ goto $label$29 }
	$14 = [3]
	goto $label$3 
	
.LABEL $label$61
	$13 = *(($2 + [16]))
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	if ( ((int_32)$16 != (int_32)(*(($2 + [20])) - $13)) ){ goto $label$27 }
	$14 = [24]
	goto $label$3 
	
.LABEL $label$60
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$8 }
	$14 = [25]
	goto $label$3 
	
.LABEL $label$59
	$17 = $12
	$14 = [26]
	goto $label$3 
	
.LABEL $label$58
	if ( ((int_32)*($17) != (int_32)*($13)) ){ goto $label$26 }
	$14 = [27]
	goto $label$3 
	
.LABEL $label$57
	$13 = ($13 + [1])
	$17 = ($17 + [1])
	if ( ((int_32)$15 != (int_32)$17) ){ goto $label$7 }
	$14 = [28]
	goto $label$3 
	
.LABEL $label$56
	if ( ((int_32)*($11) != (int_32)*(($2 + [24]))) ){ goto $label$28 }
	$14 = [29]
	goto $label$3 
	
.LABEL $label$55
	if ( ((int_32)*($9) != (int_32)*(($2 + [28]))) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$54
	$13 = [1]
	$14 = [32]
	goto $label$3 
	
.LABEL $label$53
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$4 }
	$14 = [30]
	goto $label$3 
	
.LABEL $label$52
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	$14 = [4]
	goto $label$3 
	
.LABEL $label$51
	*($8) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$25 }
	$14 = [5]
	goto $label$3 
	
.LABEL $label$50
	if ( ((uint_32)$16 > (uint_32)[10]) ){ goto $label$24 }
	$14 = [22]
	goto $label$3 
	
.LABEL $label$49
	*($3) = ($16 << [1])
	$17 = $5
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$48
	$13 = (($16 + [16]) & [-16])
	$17 = CALL _Znwj($13)
	*($8) = $17
	*($3) = ($13 | [1])
	*($3 + [4]) = $16
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$23 }
	$14 = [7]
	goto $label$3 
	
.LABEL $label$47
	$13 = $17
	$14 = [8]
	goto $label$3 
	
.LABEL $label$46
	*($13) = *($12)
	$13 = ($13 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$20 }
	$14 = [9]
	goto $label$3 
	
.LABEL $label$45
	$17 = ($17 + $16)
	$14 = [10]
	goto $label$3 
	
.LABEL $label$44
	*($17) = [0]
	$12 = ($0 + [4])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [8]))) ){ goto $label$19 }
	$14 = [21]
	goto $label$3 
	
.LABEL $label$43
	*($13) = *($3)
	*(($13 + [8])) = *($8)
	*($8) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	$12 = *($9)
	$13 = *($1)
	if ( $13 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$42
	CALL $94($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	$14 = [12]
	goto $label$3 
	
.LABEL $label$41
	CALL _ZdlPv(*($8))
	$14 = [13]
	goto $label$3 
	
.LABEL $label$40
	$12 = *($9)
	$13 = *($1)
	if ( ($13 == 0) ){ goto $label$17 }
	$14 = [14]
	goto $label$3 
	
.LABEL $label$39
	CALL void $3((int_32 $4), (int_32 *($11)), (int_32 $12), (int_32 *(($13 & [-2]) + [4])))
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)*($9)) ){ goto $label$14 }
	$14 = [15]
	goto $label$3 
	
.LABEL $label$38
	$12 = *($3 + [4])
	goto $label$13 
	
.LABEL $label$37
	*($3 + [4]) = $12
	*($3) = $12
	$13 = $12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$36
	if ( ((int_32)*($7) != (int_32)$13) ){ goto $label$9 }
	$14 = [19]
	goto $label$3 
	
.LABEL $label$35
	*($10) = [1]
	goto $label$10 
	
.LABEL $label$34
	$12 = *($3 + [4])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$33
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$32
	CALL $117($3)
	
.LABEL $label$31
	$14 = [1]
	goto $label$3 
	
.LABEL $label$30
	$14 = [33]
	goto $label$3 
	
.LABEL $label$29
	$14 = [32]
	goto $label$3 
	
.LABEL $label$28
	$14 = [4]
	goto $label$3 
	
.LABEL $label$27
	$14 = [4]
	goto $label$3 
	
.LABEL $label$26
	$14 = [4]
	goto $label$3 
	
.LABEL $label$25
	$14 = [23]
	goto $label$3 
	
.LABEL $label$24
	$14 = [6]
	goto $label$3 
	
.LABEL $label$23
	$14 = [10]
	goto $label$3 
	
.LABEL $label$22
	$14 = [10]
	goto $label$3 
	
.LABEL $label$21
	$14 = [7]
	goto $label$3 
	
.LABEL $label$20
	$14 = [8]
	goto $label$3 
	
.LABEL $label$19
	$14 = [11]
	goto $label$3 
	
.LABEL $label$18
	$14 = [13]
	goto $label$3 
	
.LABEL $label$17
	$14 = [20]
	goto $label$3 
	
.LABEL $label$16
	$14 = [20]
	goto $label$3 
	
.LABEL $label$15
	$14 = [14]
	goto $label$3 
	
.LABEL $label$14
	$14 = [17]
	goto $label$3 
	
.LABEL $label$13
	$14 = [16]
	goto $label$3 
	
.LABEL $label$12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$11
	$14 = [16]
	goto $label$3 
	
.LABEL $label$10
	$14 = [16]
	goto $label$3 
	
.LABEL $label$9
	$14 = [16]
	goto $label$3 
	
.LABEL $label$8
	$14 = [28]
	goto $label$3 
	
.LABEL $label$7
	$14 = [26]
	goto $label$3 
	
.LABEL $label$6
	$14 = [31]
	goto $label$3 
	
.LABEL $label$5
	$14 = [30]
	goto $label$3 
	
.LABEL $label$4
	$14 = [31]
	goto $label$3 
	$14
	return (unreachable)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*($0) = [0]
	*($3 + [16]) = [0]
	$1 = *(($3 + [8]))
	*($3 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $3
	$5 = ($3 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($3 + [16]) = $5
	$4 = *($3)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($3 + [28]) = *(($3 + [12]))
	CALL $95($0, ($3 + [16]))
	if ( (*((($3 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdaPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $135($3, (int_64)0)
	$4 = CALL $137($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $123 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $139([19676])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [19676], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $131())
	*(CALL $131()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $138($4, ($3 + [12]), $2)
	$5 = CALL $131()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $124($3)
	
.LABEL $label$1
	CALL $125($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $143($0)
	
.LABEL $label$1
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $130 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $131 ()
{
	return [11264]
}

void .FUNC $132 (int_32 $0)
{
}

int_32 .FUNC $133 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $134 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $133($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $136 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $134($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_64 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $136($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $131()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $136($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [19777]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $135($0, (int_64)0)
	*(CALL $131()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $136($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $136($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $136($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $136($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [19777])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $136($0)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $136($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [20033]))
	$8 = (int_64)0
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $136($0)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $136($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [19777]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $135($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [19777]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [19777]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $136($0) + [19777]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $131()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $131()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $131()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [11111])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [11156])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [16])
	if ( ((int_32)*(*(($5 + [-24])) + [16]) != (int_32)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_32)*(*($8) + [16]) != (int_32)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11206])
	$7 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$6 = ($5 + [-24])
	$3 = *($6)
	*($6) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $139($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $120($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $78($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $121($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $121($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $117($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL $23($0, $1)
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*(($2 + [8])) = (int_64)0
	*($2) = (int_64)0
	CALL $28($2)
	$3 = ($0 + [128])
	$4 = *(($0 + [156]))
	if ( ((int_32)$4 == (int_32)*(($0 + [152]))) ){ goto $label$3 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$3), [9126])
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [136])), (int_64)-3660748648133689344, (int_64)-3660748648133689344)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $29($3, $4)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$3), [9126])
	goto $label$1 
	
.LABEL $label$2
	$5 = $2
	
.LABEL $label$1
	*(($6 = (($2 + [32]) + [24]))) = *(($5 + [24]))
	*(($4 = (($2 + [32]) + [16]))) = *(($5 + [16]))
	*((($2 + [32]) + [8])) = *(($5 + [8]))
	*($2 + [32]) = *($5)
	CALL prints([10448])
	CALL $40(($2 + [32]))
	CALL prints([8300])
	CALL prints([10484])
	CALL $40($4)
	CALL prints([8300])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($6)), [9831])
	$7 = ((int_64)*($4) + (int_64)*($1))
	*($4) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9874])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [9893])
	CALL $30($3, ($2 + [32]), *($0))
	CALL prints([10522])
	CALL $40(($2 + [32]))
	CALL prints([8300])
	CALL prints([10556])
	CALL $40($4)
	CALL prints([8300])
	$global$0 = ($2 + [64])
}

void .FUNC $125 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $126($1, $0, [8556])
	CALL $128()
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $57($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $58(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = $global$0
	$3 = $2
	$4 = *($0 + [4])
	$5 = *($0)
	CALL eosio_assert([1], [8992])
	$6 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [9041])
	*($1 + [8]) = (int_64)1397703940
	*($1) = (int_64)0
	*($1 + [16]) = *(*($4))
	$7 = $2
	$9 = ($7 + [-32])
	$global$0 = $9
	CALL eosio_assert([1], [9296])
	CALL memcpy($9, $1, [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($7 + [-24]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($7 + [-16]), ($1 + [16]), [4])
	$7 = *($1 + [16])
	$6 = (CASTING uint_64)(uint_32 $7)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)5455799419175698432, *(*($0 + [8])), $6, $9, [20])
	if ( ((uint_64)*($5 + [16]) > (uint_64)$6) ){ goto $label$6 }
	*(($5 + [16])) = (CASTING uint_64)(uint_32 ($7 + [1]))
	
.LABEL $label$6
	$global$0 = $3
}

void .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$1 = $global$0
	$2 = $1
	$3 = *($0 + [8])
	$4 = (int_64)($3 == 0)
	if ( $4 ){ goto $label$2 }
	$5 = ((int_64)$3 + (int_64)1)
	$6 = (int_64)1
	
.LOOP $label$3:
	$6 = ((int_64)$6 * (int_64)10)
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)1
	
.LABEL $label$1
	$7 = ($0 + [8])
	$8 = (CASTING uint_32)(uint_64 $3)
	$1 = ($1 - (($8 + [16]) & [496]))
	$global$0 = $1
	*(($9 = ($1 + $8))) = [0]
	$10 = *($0)
	if ( $4 ){ goto $label$4 }
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$10 % (int_64)$6)
	$0 = ($9 + [-1])
	
.LOOP $label$5:
	$11 = ((int_64)$5 / (int_64)10)
	*($0) = ((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$11 * (int_64)10))) + [48])
	$0 = ($0 + [-1])
	$5 = $11
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$10 / (int_64)$6))
	CALL prints([9583])
	CALL prints_l($1, $8)
	CALL prints([9585])
	CALL $84($7, [0])
	$global$0 = $2
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL $23($0, $1)
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*(($2 + [8])) = (int_64)0
	*($2) = (int_64)0
	CALL $28($2)
	$3 = ($0 + [128])
	$4 = *(($0 + [156]))
	if ( ((int_32)$4 == (int_32)*(($0 + [152]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$3), [9126])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [136])), (int_64)-3660748648133689344, (int_64)-3660748648133689344)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $29($3, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$3), [9126])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*((($2 + [32]) + [24])) = *(($4 + [24]))
	*(($5 = (($2 + [32]) + [16]))) = *(($4 + [16]))
	*(($6 = (($2 + [32]) + [8]))) = *(($4 + [8]))
	*($2 + [32]) = *($4)
	CALL prints([10312])
	CALL $40(($2 + [32]))
	CALL prints([8300])
	CALL prints([10346])
	CALL $40($5)
	CALL prints([8300])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($6)), [9205])
	$7 = (int_64)
	*($2 + [32]) = $7(*($2 + [32]) - *($1)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9253])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [9275])
	CALL $30($3, ($2 + [32]), *($0))
	CALL prints([10382])
	CALL $40(($2 + [32]))
	CALL prints([8300])
	CALL prints([10414])
	CALL $40($5)
	CALL prints([8300])
	$global$0 = ($2 + [64])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL prints([10250])
	CALL $40($2)
	CALL prints([8300])
	CALL $23($0, $2)
	$4 = ($0 + [48])
	$5 = *($1)
	$7 = *(($0 + [76]))
	$6 = *(($0 + [72]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [28]) == (int_32)$4), [9126])
	if ( $9 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$8 = CALL db_find_i64(*($4), *(($0 + [56])), (int_64)-3102536759423008768, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $35($4, $8)
	CALL eosio_assert(((int_32)*($9 + [28]) == (int_32)$4), [9126])
	
.LABEL $label$2
	CALL prints([10294])
	CALL prints([8300])
	$5 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert([1], [9640])
	CALL $67($4, $9, $5, ($3 + [8]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	CALL prints([10275])
	CALL prints([8300])
	$5 = *($0)
	*($3 + [12]) = $2
	*($3 + [8]) = $1
	CALL $68($3, $4, $5, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL $23($0, $1)
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*(($2 + [8])) = (int_64)0
	*($2) = (int_64)0
	CALL $28($2)
	$3 = ($0 + [128])
	$4 = *(($0 + [156]))
	if ( ((int_32)$4 == (int_32)*(($0 + [152]))) ){ goto $label$3 }
	$5 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$3), [9126])
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [136])), (int_64)-3660748648133689344, (int_64)-3660748648133689344)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $29($3, $4)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$3), [9126])
	goto $label$1 
	
.LABEL $label$2
	$5 = $2
	
.LABEL $label$1
	*(($6 = (($2 + [32]) + [24]))) = *(($5 + [24]))
	*(($4 = (($2 + [32]) + [16]))) = *(($5 + [16]))
	*((($2 + [32]) + [8])) = *(($5 + [8]))
	*($2 + [32]) = *($5)
	CALL prints([10047])
	CALL $40(($2 + [32]))
	CALL prints([8300])
	CALL prints([10083])
	CALL $40($4)
	CALL prints([8300])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($6)), [9205])
	$7 = (int_64)
	*($4) = $7(*($4) - *($1)))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9253])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [9275])
	CALL $30($3, ($2 + [32]), *($0))
	CALL prints([10121])
	CALL $40(($2 + [32]))
	CALL prints([8300])
	CALL prints([10155])
	CALL $40($4)
	CALL prints([8300])
	$global$0 = ($2 + [64])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $57($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9296])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9296])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $76(CALL $75($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $124 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $126($1, $0, [8576])
	CALL $127()
	(unreachable)
}

void .FUNC $128 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $140($5)
	CALL read_action_data($2, $5)
	CALL $143($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL prints([8656])
	CALL prints([8300])
	CALL require_auth(*($1))
	CALL $24($0)
	CALL $25($0)
	$3 = ($0 + [48])
	$4 = *($1)
	$6 = *(($0 + [76]))
	$5 = *(($0 + [72]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)$3), [9126])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [56])), (int_64)-3102536759423008768, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $35($3, $7)
	CALL eosio_assert(((int_32)*($8 + [28]) == (int_32)$3), [9126])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8670])
	*(($2 + [16])) = *(($8 + [16]))
	*($2 + [8]) = *($8 + [8])
	CALL $23($0, ($2 + [8]))
	CALL eosio_assert($7, [11047])
	CALL eosio_assert($7, [11081])
	$7 = CALL db_next_i64(*($8 + [32]), ($2 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	CALL $35($3, $7)
	
.LABEL $label$5
	CALL $36($3, $8)
	CALL $26($0, $1, ($2 + [8]))
	CALL $45($0, ($2 + [8]))
	CALL $27($0, ($2 + [8]))
	CALL prints([8686])
	CALL prints([8300])
	$global$0 = ($2 + [32])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $140($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [16])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert([1], [8992])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [9041])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9200])
	CALL memcpy($3, $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [9200])
	$1 = ($3 + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [9200])
	CALL memcpy(($3 + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $143($6)
	
.LABEL $label$8
	*(($2 = (($3 + [24]) + [8]))) = *(($1 + [8]))
	*($3 + [24]) = *($1)
	$8 = *($3)
	*((($3 + [40]) + [8])) = *($2)
	*($3 + [56]) = $8
	*($3 + [40]) = *($3 + [24])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	CALL void $1((int_32 ($3 + [56])), (int_32 ($3 + [40])), (int_32 $5))
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [8276]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($5)
	CALL prints([8289])
	CALL prints([8300])
	*(($1 + [40])) = (int_64)0
	*(($1 + [32])) = (int_64)0
	*(($1 + [24])) = (int_64)0
	*($1 + [16]) = (int_64)0
	CALL $28(($1 + [16]))
	$8 = ($0 + [128])
	$4 = *(($0 + [156]))
	if ( ((int_32)$4 == (int_32)*(($0 + [152]))) ){ goto $label$6 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$8), [9126])
	if ( $4 ){ goto $label$5 }
	$4 = ($1 + [16])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL db_find_i64(*($8), *(($0 + [136])), (int_64)-3660748648133689344, (int_64)-3660748648133689344)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $29($8, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$8), [9126])
	goto $label$5 
	
.LABEL $label$7
	$4 = ($1 + [16])
	
.LABEL $label$5
	*((($1 + [48]) + [24])) = *(($4 + [24]))
	*((($1 + [48]) + [16])) = *(($4 + [16]))
	*((($1 + [48]) + [8])) = *(($4 + [8]))
	*($1 + [48]) = *($4)
	CALL eosio_assert([1], [8992])
	$2 = (int_64)5525320
	$4 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$2 = $3
	$7 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$2 = $3
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [9041])
	*($1 + [56]) = (int_64)1414481924
	*($1 + [48]) = (int_64)0
	CALL eosio_assert([1], [8992])
	$2 = (int_64)5525320
	$4 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$2 = $3
	$7 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$2 = $3
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $7 ){ goto $label$17 }
	$7 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	
.LABEL $label$13
	CALL eosio_assert($7, [9041])
	*(($1 + [72])) = (int_64)1414481924
	*($1 + [64]) = (int_64)0
	CALL $30($8, ($1 + [48]), *($0))
	$4 = ($0 + [88])
	$7 = *(($0 + [116]))
	if ( ((int_32)$7 == (int_32)*(($0 + [112]))) ){ goto $label$19 }
	CALL eosio_assert(((int_32)*(*(($7 + [-24])) + [4]) == (int_32)$4), [9126])
	goto $label$18 
	
.LABEL $label$19
	$7 = CALL db_find_i64(*($4), *(($0 + [96])), (int_64)-4157493845350678528, (int_64)-4157493845350678528)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$18 }
	CALL eosio_assert(((int_32)*(CALL $31($4, $7) + [4]) == (int_32)$4), [9126])
	
.LABEL $label$18
	*($1 + [14]) = [0]
	CALL $32($4, ($1 + [14]), *($0))
	CALL prints([8302])
	CALL prints([8300])
	$4 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)-4157660971118100480, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$20 }
	$10 = ($0 + [8])
	$4 = CALL $33($10, $4)
	$8 = [99]
	
.LOOP $label$21:
	$9 = $8
	$7 = [0]
	$8 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($8, [11047])
	CALL eosio_assert($8, [11081])
	$8 = CALL db_next_i64(*($4 + [28]), ($1 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$22 }
	$7 = CALL $33($10, $8)
	
.LABEL $label$22
	CALL $34($10, $4)
	if ( ($7 == 0) ){ goto $label$20 }
	$8 = ($9 + [-1])
	$4 = $7
	if ( $9 ){ goto $label$21 }
	
.LABEL $label$20
	CALL prints([8309])
	CALL prints([8300])
	$4 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-3102536759423008768, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$23 }
	$10 = ($0 + [48])
	$4 = CALL $35($10, $4)
	$8 = [99]
	
.LOOP $label$24:
	$9 = $8
	$7 = [0]
	$8 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($8, [11047])
	CALL eosio_assert($8, [11081])
	$8 = CALL db_next_i64(*($4 + [32]), ($1 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$25 }
	$7 = CALL $35($10, $8)
	
.LABEL $label$25
	CALL $36($10, $4)
	if ( ($7 == 0) ){ goto $label$23 }
	$8 = ($9 + [-1])
	$4 = $7
	if ( $9 ){ goto $label$24 }
	
.LABEL $label$23
	CALL prints([8316])
	CALL prints([8300])
	$4 = CALL db_lowerbound_i64(*($0 + [168]), *(($0 + [176])), (int_64)5455799419175698432, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$26 }
	$10 = ($0 + [168])
	$4 = CALL $37($10, $4)
	$8 = [99]
	
.LOOP $label$27:
	$9 = $8
	$7 = [0]
	$8 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($8, [11047])
	CALL eosio_assert($8, [11081])
	$8 = CALL db_next_i64(*($4 + [24]), ($1 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$28 }
	$7 = CALL $37($10, $8)
	
.LABEL $label$28
	CALL $38($10, $4)
	if ( ($7 == 0) ){ goto $label$26 }
	$8 = ($9 + [-1])
	$4 = $7
	if ( $9 ){ goto $label$27 }
	
.LABEL $label$26
	CALL prints([8323])
	CALL prints([8300])
	$global$0 = ($1 + [80])
}

int_32 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [236])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [232]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [196])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [192]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [152]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [112]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [72]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [32]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	return $0
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($1))
	CALL $24($0)
	CALL $25($0)
	CALL $23($0, $2)
	$4 = ($0 + [8])
	$5 = *($1)
	$7 = *(($0 + [36]))
	$6 = *(($0 + [32]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$4), [9126])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)-4157660971118100480, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $33($4, $8)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$4), [9126])
	
.LABEL $label$1
	$7 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($7, [8670])
	$8 = ($9 + [16])
	CALL eosio_assert(((int_64)*($8) == (int_64)*($2 + [8])), [10191])
	CALL eosio_assert(((int_64)*($9 + [8]) >= (int_64)*($2)), [8698])
	$10 = *($0)
	CALL eosio_assert($7, [9640])
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$4), [9675])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$12()), [9721])
	$5 = *($9)
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($8)), [9205])
	$11 = (int_64)
	*($9 + [8]) = $11(*($9 + [8]) - *($2)))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [9253])
	CALL eosio_assert(((int_64)*($9 + [8]) < (int_64)4611686018427387904), [9275])
	CALL eosio_assert(((int_64)$5 == (int_64)*($9)), [9772])
	CALL eosio_assert([1], [9296])
	CALL memcpy($3, $9, [8])
	CALL eosio_assert([1], [9296])
	$6 = ($9 + [8])
	CALL memcpy(($3 | [8]), $6, [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($3 + [16]), $8, [8])
	CALL db_update_i64(*($9 + [28]), $10, $3, [24])
	$8 = ($0 + [24])
	if ( (uint_64)($5 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	if ( ((int_64)*($6) != (int_64)0) ){ goto $label$6 }
	CALL eosio_assert($7, [11047])
	CALL eosio_assert($7, [11081])
	$8 = CALL db_next_i64(*(($9 + [28])), $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	CALL $33($4, $8)
	
.LABEL $label$7
	CALL $34($4, $9)
	CALL prints([8745])
	
.LABEL $label$6
	CALL $46($0, $1, $2)
	CALL $47($0, $2)
	CALL $48($0, $2)
	$global$0 = ($3 + [32])
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	CALL prints([8614])
	$5 = *($0)
	if ( ((int_64)*($1) == (int_64)$5) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$5) ){ goto $label$1 }
	CALL $22($0)
	CALL $23($0, $3)
	CALL prints([8626])
	CALL prints([8300])
	CALL $24($0)
	CALL $25($0)
	CALL $23($0, $3)
	CALL prints([8638])
	CALL prints([8300])
	CALL $26($0, $1, $3)
	CALL $27($0, $3)
	CALL prints([8646])
	CALL prints([8300])
	
.LABEL $label$1
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $140($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [8992])
	$8 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$8 = $9
	$2 = [1]
	$10 = $1
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$8 = $9
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$10 = ($1 + [1])
	$1 = $10
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9041])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = $3
	CALL $21(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL $143($6)
	
.LABEL $label$9
	*(($2 = (($3 + [64]) + [8]))) = *(($3 + [24]))
	*($3 + [64]) = *($3 + [16])
	$8 = *(($3 + [8]))
	$9 = *($3)
	$1 = CALL $118(($3 + [48]), ($3 + [32]))
	*((($3 + [80]) + [8])) = *($2)
	*($3 + [104]) = $9
	*($3 + [96]) = $8
	*($3 + [80]) = *($3 + [64])
	$2 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$10 }
	$5 = *((*($2) + $5))
	
.LABEL $label$10
	CALL void $2((int_32 ($3 + [104])), (int_32 ($3 + [96])), (int_32 ($3 + [80])), (int_32 $1), (int_32 $5))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$11
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$12
	$global$0 = ($3 + [112])
	return [1]
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [432])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)5
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)6138663577826885632 != (int_64)$1) ){ goto $label$2 }
	$4 = (int_64)7
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$4:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$4 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8192])
	
.LABEL $label$2
	*(($3 + [192])) = $0
	*(($3 + [200])) = (int_64)-1
	$4 = (int_64)0
	*(($3 + [208])) = (int_64)0
	*(($3 + [216])) = [0]
	*(($3 + [232])) = $0
	*(($3 + [240])) = (int_64)-1
	*(($3 + [248])) = (int_64)0
	*(($3 + [256])) = [0]
	*(($3 + [272])) = $0
	*(($3 + [280])) = (int_64)-1
	*(($3 + [288])) = (int_64)0
	*(($3 + [296])) = [0]
	*(($3 + [312])) = $0
	*($3 + [184]) = $0
	*($3 + [176]) = $0
	*($3 + [224]) = $0
	*($3 + [264]) = $0
	*($3 + [304]) = $0
	*(($3 + [320])) = (int_64)-1
	*(($3 + [328])) = (int_64)0
	*(($3 + [336])) = [0]
	*(($3 + [352])) = $0
	*(($3 + [360])) = (int_64)-1
	*(($3 + [368])) = (int_64)0
	*(($3 + [376])) = [0]
	*(($3 + [392])) = $0
	*(($3 + [400])) = (int_64)-1
	*(($3 + [408])) = (int_64)0
	*(($3 + [416])) = [0]
	*($3 + [344]) = $0
	*($3 + [384]) = $0
	*($3 + [424]) = (int_64)15461882352000
	$5 = (int_64)59
	$6 = [8254]
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$6 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$9 = ($9 + [-91])
	goto $label$7 
	
.LABEL $label$8
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$6
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$5 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$11 }
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8267]
	$7 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$17 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$9 = ($9 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$12 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$11 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [1]
	*($3) = *($3 + [168])
	CALL $3(($3 + [176]), $3)
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $4(($3 + [176]))
	CALL $132([0])
	$global$0 = ($3 + [432])
	return (unreachable)
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)-3075276113204215809) ){ goto $label$27 }
	if ( ((int_64)$2 <= (int_64)-4417317844505067521) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-4417317844505067520) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)-4417032211186843648) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)-3102536759825661952) ){ goto $label$18 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [2]
	*($3 + [32]) = *($3 + [136])
	CALL $6(($3 + [176]), ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$27
	if ( ((int_64)$2 <= (int_64)-3075276112612893681) ){ goto $label$25 }
	if ( ((int_64)$2 == (int_64)-3075276112612893680) ){ goto $label$22 }
	if ( ((int_64)$2 == (int_64)5700878346903093248) ){ goto $label$21 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$18 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [3]
	*($3 + [8]) = *($3 + [160])
	CALL $8(($3 + [176]), ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)-4998252998346932224) ){ goto $label$20 }
	if ( ((int_64)$2 != (int_64)-4994048603321270272) ){ goto $label$18 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [4]
	*($3 + [24]) = *($3 + [144])
	CALL $10(($3 + [176]), ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$25
	if ( ((int_64)$2 == (int_64)-3075276113204215808) ){ goto $label$19 }
	if ( ((int_64)$2 != (int_64)-3075276112612893696) ){ goto $label$18 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [64]) = *($3 + [104])
	CALL $12(($3 + [176]), ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$24
	*($3 + [124]) = [0]
	*($3 + [120]) = [6]
	*($3 + [48]) = *($3 + [120])
	CALL $14(($3 + [176]), ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$23
	*($3 + [156]) = [0]
	*($3 + [152]) = [7]
	*($3 + [16]) = *($3 + [152])
	CALL $16(($3 + [176]), ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$22
	*($3 + [100]) = [0]
	*($3 + [96]) = [8]
	*($3 + [72]) = *($3 + [96])
	CALL $12(($3 + [176]), ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$21
	*($3 + [92]) = [0]
	*($3 + [88]) = [9]
	*($3 + [80]) = *($3 + [88])
	CALL $10(($3 + [176]), ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$20
	*($3 + [132]) = [0]
	*($3 + [128]) = [10]
	*($3 + [40]) = *($3 + [128])
	CALL $10(($3 + [176]), ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$19
	*($3 + [116]) = [0]
	*($3 + [112]) = [11]
	*($3 + [56]) = *($3 + [112])
	CALL $8(($3 + [176]), ($3 + [56]))
	
.LABEL $label$18
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $140($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9200])
	CALL memcpy(($3 + [8]), $6, [1])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $143($6)
	
.LABEL $label$4
	*($3 + [15]) = $2
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($3 + [15])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL prints([8332])
	CALL prints([8300])
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8348]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($7)
	CALL $24($0)
	*($3 + [16]) = [0]
	$6 = ($0 + [88])
	$9 = *(($0 + [116]))
	if ( ((int_32)$9 == (int_32)*(($0 + [112]))) ){ goto $label$6 }
	$9 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [4]) == (int_32)$6), [9126])
	if ( $9 ){ goto $label$5 }
	$9 = ($3 + [16])
	goto $label$5 
	
.LABEL $label$6
	$9 = CALL db_find_i64(*($6), *(($0 + [96])), (int_64)-4157493845350678528, (int_64)-4157493845350678528)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $31($6, $9)
	CALL eosio_assert(((int_32)*($9 + [4]) == (int_32)$6), [9126])
	goto $label$5 
	
.LABEL $label$7
	$9 = ($3 + [16])
	
.LABEL $label$5
	$9 = *($9)
	*($3 + [174]) = $9
	CALL eosio_assert(((int_32)*($2) != (int_32)($9 & [255])), [8361])
	*($3 + [174]) = *($2)
	CALL $32($6, ($3 + [174]), *($0))
	if ( ((int_32)*($2) != (int_32)[1]) ){ goto $label$9 }
	CALL prints([8393])
	CALL printui(*($1))
	CALL prints([8300])
	$10 = ($0 + [168])
	$11 = *($1)
	$9 = *(($0 + [196]))
	$12 = *(($0 + [192]))
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$11 }
	
.LOOP $label$13:
	$6 = ($9 + [-24])
	$2 = *($6)
	if ( ((int_32)*($2 + [16]) == (int_32)$11) ){ goto $label$12 }
	$9 = $6
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$12 == (int_32)$9) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$10), [9126])
	goto $label$10 
	
.LABEL $label$11
	$2 = [0]
	$6 = CALL db_find_i64(*($10), *(($0 + [176])), (int_64)5455799419175698432, (CASTING uint_64)(uint_32 $11))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$10 }
	$2 = CALL $37($10, $6)
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$10), [9126])
	
.LABEL $label$10
	CALL eosio_assert(($2 == 0), [8415])
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8454]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$19 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$9 = ($9 + [-91])
	goto $label$17 
	
.LABEL $label$19
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$15
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$7 = ((int_64)$5 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$14 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8470]
	$13 = (int_64)0
	
.LOOP $label$20:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$21 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$9 = ($9 + [-91])
	goto $label$22 
	
.LABEL $label$23
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$13 = ((int_64)$8 | (int_64)$13)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$20 }
	$11 = [0]
	*(($3 + [48])) = [0]
	*($3 + [24]) = $13
	*($3 + [16]) = $7
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$6 = CALL $39(($3 + [16]), (int_64)5459781, [9107])
	*((($3 + [152]) + [8])) = *(($6 + [8]))
	*($3 + [152]) = *($6)
	$2 = *($3 + [40])
	if ( ($2 == 0) ){ goto $label$24 }
	$12 = ($3 + [44])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$26 }
	
.LOOP $label$27:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$28 }
	CALL _ZdlPv($9)
	
.LABEL $label$28
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$27 }
	$6 = *(($3 + [40]))
	goto $label$25 
	
.LABEL $label$26
	$6 = $2
	
.LABEL $label$25
	*($12) = $2
	CALL _ZdlPv($6)
	
.LABEL $label$24
	if ( ((uint_64)((int_64)*($3 + [152]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$29 }
	$4 = (uint_64)*($3 + [160]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$4 = $5
	$11 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$4 = $5
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$2 = ($6 + [1])
	$6 = $2
	if ( $9 ){ goto $label$33 }
	$11 = [1]
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$11 = [0]
	
.LABEL $label$29
	CALL eosio_assert($11, [8483])
	CALL prints([8500])
	CALL $40(($3 + [152]))
	CALL prints([8300])
	CALL prints([8517])
	CALL printi(*($3 + [152]))
	CALL prints([8300])
	if ( ((int_64)*($3 + [152]) < (int_64)2) ){ goto $label$46 }
	*($3 + [144]) = (int_64)1397703940
	*($3 + [136]) = (int_64)1
	CALL eosio_assert([1], [8992])
	$4 = (uint_64)*($3 + [144]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$48 }
	$4 = $5
	$9 = [1]
	$2 = $6
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$47 }
	goto $label$44 
	
.LABEL $label$48
	$4 = $5
	
.LOOP $label$49:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$45 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$2 = ($6 + [1])
	$6 = $2
	if ( $9 ){ goto $label$49 }
	$9 = [1]
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$47 }
	goto $label$44 
	
.LABEL $label$46
	$4 = *($0)
	*($3 + [64]) = $1
	*($3 + [80]) = $4
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$12()), [9589])
	*($3 + [16]) = $10
	*($3 + [20]) = ($3 + [64])
	*($3 + [24]) = ($3 + [80])
	*(($11 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($11) = (int_64)0
	CALL eosio_assert([1], [8992])
	$4 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$43 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$51 }
	$4 = $5
	$9 = [1]
	$2 = $6
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$50 }
	goto $label$42 
	
.LABEL $label$51
	$4 = $5
	
.LOOP $label$52:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$43 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$2 = ($6 + [1])
	$6 = $2
	if ( $9 ){ goto $label$52 }
	$9 = [1]
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$50 }
	goto $label$42 
	
.LABEL $label$45
	$9 = [0]
	
.LABEL $label$44
	CALL eosio_assert($9, [9041])
	$4 = *((($3 + [152]) + [8]))
	*((($3 + [120]) + [8])) = $4
	*($3 + [120]) = *($3 + [152])
	CALL eosio_assert(((int_64)$4 == (int_64)*((($3 + [136]) + [8]))), [9205])
	$4 = (int_64)
	*($3 + [120]) = $4(*($3 + [120]) - *($3 + [136])))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9253])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [9275])
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [168])) == (int_64)CALL $fimport$12()), [9589])
	*(($11 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($11) = (int_64)0
	CALL eosio_assert([1], [8992])
	$12 = ($11 + [8])
	$4 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$54 }
	$4 = $5
	$9 = [1]
	$2 = $6
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$53 }
	goto $label$40 
	
.LABEL $label$54
	$4 = $5
	
.LOOP $label$55:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$2 = ($6 + [1])
	$6 = $2
	if ( $9 ){ goto $label$55 }
	$9 = [1]
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$53 }
	goto $label$40 
	
.LABEL $label$43
	$9 = [0]
	
.LABEL $label$42
	CALL eosio_assert($9, [9041])
	*($11 + [20]) = $10
	CALL $41(($3 + [16]), $11)
	*($3 + [136]) = $11
	$9 = *($11 + [16])
	*($3 + [16]) = $9
	$2 = *($11 + [24])
	*($3 + [120]) = $2
	$12 = ($0 + [196])
	$6 = *($12)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [200]))) ){ goto $label$39 }
	*($6 + [16]) = $2
	*($6 + [8]) = (CASTING uint_64)(uint_32 $9)
	*($3 + [136]) = [0]
	*($6) = $11
	*($12) = ($6 + [24])
	$6 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( $6 ){ goto $label$38 }
	goto $label$34 
	
.LABEL $label$41
	$9 = [0]
	
.LABEL $label$40
	CALL eosio_assert($9, [9041])
	*($11 + [20]) = $10
	*(($11 + [8])) = *((($3 + [120]) + [8]))
	*($11) = *($3 + [120])
	*($11 + [16]) = *($1)
	CALL eosio_assert([1], [9296])
	CALL memcpy(($3 + [16]), $11, [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy((($3 + [16]) | [8]), $12, [8])
	CALL eosio_assert([1], [9296])
	$6 = ($11 + [16])
	CALL memcpy((($3 + [16]) + [16]), $6, [4])
	$2 = *($11 + [16])
	$4 = (CASTING uint_64)(uint_32 $2)
	$9 = CALL db_store_i64(*(($0 + [176])), (int_64)5455799419175698432, $8, $4, ($3 + [16]), [20])
	*($11 + [24]) = $9
	$12 = ($0 + [184])
	if ( ((uint_64)*($12) > (uint_64)$4) ){ goto $label$56 }
	*($12) = (CASTING uint_64)(uint_32 ($2 + [1]))
	
.LABEL $label$56
	*($3 + [16]) = $11
	$2 = *($6)
	*($3 + [80]) = $2
	*($3 + [64]) = $9
	$12 = ($0 + [196])
	$6 = *($12)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [200]))) ){ goto $label$37 }
	*($6 + [16]) = $9
	*($6 + [8]) = (CASTING uint_64)(uint_32 $2)
	*($3 + [16]) = [0]
	*($6) = $11
	*($12) = ($6 + [24])
	$6 = *($3 + [16])
	$2 = [0]
	*($3 + [16]) = [0]
	if ( $6 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$39
	CALL $42(($0 + [192]), ($3 + [136]), ($3 + [16]), ($3 + [120]))
	$6 = *($3 + [136])
	*($3 + [136]) = [0]
	if ( ($6 == 0) ){ goto $label$34 }
	
.LABEL $label$38
	CALL _ZdlPv($6)
	goto $label$34 
	
.LABEL $label$37
	CALL $42(($0 + [192]), ($3 + [16]), ($3 + [80]), ($3 + [64]))
	$6 = *($3 + [16])
	$2 = [0]
	*($3 + [16]) = [0]
	if ( ($6 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	CALL _ZdlPv($6)
	
.LABEL $label$35
	CALL prints([8541])
	CALL $40(($3 + [136]))
	CALL prints([8300])
	CALL prints([8545])
	CALL printi(*($3 + [136]))
	CALL prints([8300])
	CALL prints([8572])
	CALL $40(($3 + [120]))
	CALL prints([8300])
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8470]
	$7 = (int_64)0
	
.LOOP $label$57:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$58 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$9 = ($9 + [-91])
	goto $label$59 
	
.LABEL $label$60
	$9 = ( ($9 + [-48]) ? $2 : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$58
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$57 }
	$4 = (int_64)6
	
.LOOP $label$61:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$61 }
	*($3 + [72]) = (int_64)3617214756542218240
	*($3 + [64]) = $7
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8454]
	$7 = (int_64)0
	
.LOOP $label$62:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$67 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$9 = ($9 + [-91])
	goto $label$65 
	
.LABEL $label$67
	$5 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$64
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$63
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)4294967291)
	$7 = ((int_64)$5 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$62 }
	$4 = (int_64)0
	$8 = (int_64)59
	$6 = [8267]
	$13 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$73 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$9 = ($9 + [-91])
	goto $label$71 
	
.LABEL $label$73
	$5 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$69
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$13 = ((int_64)$5 | (int_64)$13)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$68 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8470]
	$14 = (int_64)0
	
.LOOP $label$74:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$75 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$9 = ($9 + [-91])
	goto $label$76 
	
.LABEL $label$77
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$75
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$14 = ((int_64)$8 | (int_64)$14)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$74 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8348]
	$15 = (int_64)0
	
.LOOP $label$78:
	$8 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$79 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$9 = ($9 + [-91])
	goto $label$80 
	
.LABEL $label$81
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$79
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$15 = ((int_64)$8 | (int_64)$15)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$78 }
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$6 = CALL $139([8591])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$84 }
	*($3) = ($6 << [1])
	$9 = ($3 | [1])
	if ( $6 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$2 = (($6 + [16]) & [-16])
	$9 = CALL _Znwj($2)
	*($3) = ($2 | [1])
	*($3 + [8]) = $9
	*($3 + [4]) = $6
	
.LABEL $label$83
	CALL memcpy($9, [8591], $6)
	
.LABEL $label$82
	*(($9 + $6)) = [0]
	*(($3 + [40])) = *((($3 + [120]) + [8]))
	$6 = ($3 + [8])
	*(($3 + [56])) = *($6)
	*($6) = [0]
	*($3 + [24]) = $15
	*($3 + [16]) = $14
	*($3 + [32]) = *($3 + [120])
	*($3 + [48]) = *($3)
	*($3) = (int_64)0
	$6 = CALL $43(($3 + [80]), ($3 + [64]), $7, $13, ($3 + [16]))
	CALL $44(($3 + [176]), $6)
	$9 = *($3 + [176])
	CALL send_inline($9, (*($3 + [180]) - $9))
	$9 = *($3 + [176])
	if ( ($9 == 0) ){ goto $label$85 }
	*($3 + [180]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$85
	$9 = *($6 + [28])
	if ( ($9 == 0) ){ goto $label$86 }
	*(($6 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$86
	$9 = *($6 + [16])
	if ( ($9 == 0) ){ goto $label$87 }
	*(($6 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$87
	if ( ((*(($3 + [48])) & [1]) == 0) ){ goto $label$88 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$88
	if ( ((*($3) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$34
	*(($3 + [104])) = (int_64)0
	*(($3 + [96])) = (int_64)0
	*(($3 + [88])) = (int_64)0
	*($3 + [80]) = (int_64)0
	CALL $28(($3 + [80]))
	$9 = ($0 + [128])
	$6 = *(($0 + [156]))
	if ( ((int_32)$6 == (int_32)*(($0 + [152]))) ){ goto $label$90 }
	$6 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$9), [9126])
	if ( $6 ){ goto $label$89 }
	$6 = ($3 + [80])
	goto $label$89 
	
.LABEL $label$90
	$6 = CALL db_find_i64(*($9), *(($0 + [136])), (int_64)-3660748648133689344, (int_64)-3660748648133689344)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$91 }
	$6 = CALL $29($9, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$9), [9126])
	goto $label$89 
	
.LABEL $label$91
	$6 = ($3 + [80])
	
.LABEL $label$89
	*((($3 + [16]) + [24])) = *(($6 + [24]))
	*((($3 + [16]) + [16])) = *(($6 + [16]))
	*(($9 = (($3 + [16]) + [8]))) = *(($6 + [8]))
	*($3 + [16]) = *($6)
	*((($3 + [80]) + [8])) = *($9)
	$4 = *($3 + [16])
	*($3 + [80]) = $4
	$9 = [0]
	if ( ((uint_64)((int_64)$4 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$92 }
	$4 = (uint_64)*($3 + [88]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$94:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$93 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$95 }
	$4 = $5
	$9 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$94 }
	goto $label$92 
	
.LABEL $label$95
	$4 = $5
	
.LOOP $label$96:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$93 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$9 = ((int_32)$6 < (int_32)[6])
	$0 = ($6 + [1])
	$6 = $0
	if ( $9 ){ goto $label$96 }
	$9 = [1]
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$94 }
	goto $label$92 
	
.LABEL $label$93
	$9 = [0]
	
.LABEL $label$92
	CALL eosio_assert($9, [8483])
	CALL prints([8600])
	CALL $40(($3 + [80]))
	CALL prints([8300])
	
.LABEL $label$9
	$global$0 = ($3 + [192])
	return (unreachable)
	
.LABEL $label$8
	CALL $117($3)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $140($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [4]) = [0]
	*($3) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [9200])
	CALL memcpy($3, $6, [4])
	CALL eosio_assert(((int_32)$1 != (int_32)[4]), [9200])
	CALL memcpy(($3 | [4]), ($6 + [4]), [1])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $143($6)
	
.LABEL $label$4
	$1 = *($3)
	*($3 + [11]) = *($3 + [4])
	*($3 + [12]) = $1
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($3 + [12])), (int_32 ($3 + [11])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8348]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	$5 = CALL $118($2, $1)
	CALL $50($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$5
	$global$0 = ($2 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $140($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9200])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $143($2)
	
.LABEL $label$5
	*($3 + [8]) = $6
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8348]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	CALL $24($0)
	*($2 + [14]) = [0]
	$8 = ($0 + [88])
	$5 = *(($0 + [116]))
	if ( ((int_32)$5 == (int_32)*(($0 + [112]))) ){ goto $label$6 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [4]) == (int_32)$8), [9126])
	if ( $5 ){ goto $label$5 }
	$5 = ($2 + [14])
	goto $label$5 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*($8), *(($0 + [96])), (int_64)-4157493845350678528, (int_64)-4157493845350678528)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $31($8, $5)
	CALL eosio_assert(((int_32)*($5 + [4]) == (int_32)$8), [9126])
	goto $label$5 
	
.LABEL $label$7
	$5 = ($2 + [14])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)*($5) == (int_32)[1]), [8831])
	$5 = CALL $118($2, $1)
	CALL $50($0, $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($5 + [8]))
	
.LABEL $label$8
	$global$0 = ($2 + [16])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $140($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [20]) = $1
	*($3 + [16]) = $1
	*($3 + [24]) = ($1 + $6)
	CALL $49(($3 + [16]), $3)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $143($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$6 = CALL $118(($3 + [16]), $3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $5))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($6 + [8]))
	
.LABEL $label$6
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$7
	$global$0 = ($3 + [32])
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL prints([8783])
	CALL prints([8300])
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8276]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	*($2 + [12]) = [0]
	$5 = ($0 + [88])
	$8 = *(($0 + [116]))
	if ( ((int_32)$8 == (int_32)*(($0 + [112]))) ){ goto $label$6 }
	$8 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [4]) == (int_32)$5), [9126])
	if ( $8 ){ goto $label$5 }
	$8 = ($2 + [12])
	goto $label$5 
	
.LABEL $label$6
	$8 = CALL db_find_i64(*($5), *(($0 + [96])), (int_64)-4157493845350678528, (int_64)-4157493845350678528)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $31($5, $8)
	CALL eosio_assert(((int_32)*($8 + [4]) == (int_32)$5), [9126])
	goto $label$5 
	
.LABEL $label$7
	$8 = ($2 + [12])
	
.LABEL $label$5
	$8 = *($8)
	*($2 + [14]) = $8
	CALL eosio_assert(((int_32)*($1) != (int_32)uint_32($8 >> [8])), [8799])
	*($2 + [15]) = *($1)
	CALL $32($5, ($2 + [14]), *($0))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9296])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9296])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9296])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL prints([8848])
	CALL prints([8300])
	CALL require_auth(*($1))
	CALL $24($0)
	CALL $25($0)
	$3 = ($0 + [208])
	$4 = *($1)
	$6 = *(($0 + [236]))
	$5 = *(($0 + [232]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$3), [9126])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [216])), (int_64)-3020379626716266496, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $51($3, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$3), [9126])
	
.LABEL $label$1
	$6 = [0]
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [8867])
	$10 = ($8 + [8])
	if ( ((uint_64)((int_64)*($8 + [8]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$4 = (uint_64)*(($8 + [16])) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$11 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$4 = $11
	$6 = [1]
	$5 = $7
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$4 = $11
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$9 }
	$6 = [1]
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	
.LABEL $label$5
	CALL eosio_assert($6, [8483])
	CALL eosio_assert(((int_64)*($8 + [8]) > (int_64)0), [8907])
	*((($2 + [128]) + [8])) = *(($10 + [8]))
	*($2 + [128]) = *($10)
	CALL prints([8945])
	CALL $40(($2 + [128]))
	CALL prints([8300])
	$11 = *($0)
	$4 = (int_64)6
	
.LOOP $label$10:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$10 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $11
	$4 = (int_64)0
	$12 = (int_64)59
	$7 = [8454]
	$13 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$16 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$6 = ($6 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$11 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$12 = ((int_64)$12 + (int_64)4294967291)
	$13 = ((int_64)$11 | (int_64)$13)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$11 }
	$4 = (int_64)0
	$12 = (int_64)59
	$7 = [8267]
	$14 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$22 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [-91])
	goto $label$20 
	
.LABEL $label$22
	$11 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$18
	$7 = ($7 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$14 = ((int_64)$11 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)4294967291)
	if ( ((int_64)$12 != (int_64)55834574842) ){ goto $label$17 }
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$7 = CALL $139([8972])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$26 }
	*($2 + [8]) = ($7 << [1])
	$6 = (($2 + [8]) | [1])
	if ( $7 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$5 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($2 + [8]) = ($5 | [1])
	*($2 + [16]) = $6
	*($2 + [12]) = $7
	
.LABEL $label$25
	CALL memcpy($6, [8972], $7)
	
.LABEL $label$24
	*(($6 + $7)) = [0]
	*($2 + [32]) = *($1)
	$4 = *(($10 + [8]))
	$11 = *($10)
	$7 = (($2 + [8]) + [8])
	*(($2 + [64])) = *($7)
	*($7) = [0]
	*(($2 + [48])) = $4
	*($2 + [24]) = *($0)
	$4 = *($2 + [8])
	*($2 + [8]) = (int_64)0
	*($2 + [56]) = $4
	*($2 + [40]) = $11
	$7 = CALL $43(($2 + [88]), ($2 + [72]), $13, $14, ($2 + [24]))
	CALL $44(($2 + [144]), $7)
	$6 = *($2 + [144])
	CALL send_inline($6, (*($2 + [148]) - $6))
	$6 = *($2 + [144])
	if ( ($6 == 0) ){ goto $label$27 }
	*($2 + [148]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$27
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$28 }
	*(($7 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$28
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$29 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$29
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$30
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$31
	CALL eosio_assert($9, [11047])
	CALL eosio_assert($9, [11081])
	$7 = CALL db_next_i64(*($8 + [28]), ($2 + [24]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$32 }
	CALL $51($3, $7)
	
.LABEL $label$32
	CALL $52($3, $8)
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$23
	CALL $117(($2 + [8]))
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8276]
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($6)
	CALL $24($0)
	CALL $25($0)
	$9 = ($0 + [48])
	$3 = *($1)
	$8 = *(($0 + [76]))
	$10 = *(($0 + [72]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$8:
	$5 = ($8 + [-24])
	$11 = *($5)
	if ( ((int_64)*($11) == (int_64)$3) ){ goto $label$7 }
	$8 = $5
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($11 + [28]) == (int_32)$9), [9126])
	goto $label$5 
	
.LABEL $label$6
	$11 = [0]
	$5 = CALL db_find_i64(*($9), *(($0 + [56])), (int_64)-3102536759423008768, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$11 = CALL $35($9, $5)
	CALL eosio_assert(((int_32)*($11 + [28]) == (int_32)$9), [9126])
	
.LABEL $label$5
	$12 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($12, [8670])
	$10 = ($11 + [8])
	CALL $23($0, $10)
	$5 = *($11 + [24])
	CALL eosio_assert(((uint_32)((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$16() / (uint_64)(int_64)1000000)) - *($0 + [248])) > (uint_32)$5), [8759])
	$4 = *($0)
	$3 = (int_64)6
	
.LOOP $label$9:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$9 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $4
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8254]
	$6 = (int_64)0
	
.LOOP $label$10:
	$7 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$11 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$8 = ($8 + [-91])
	goto $label$12 
	
.LABEL $label$13
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$11
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$10 }
	$3 = (int_64)0
	$7 = (int_64)59
	$5 = [8267]
	$13 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$19 }
	$8 = *($5)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$8 = ($8 + [-91])
	goto $label$17 
	
.LABEL $label$19
	$4 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$13 = ((int_64)$4 | (int_64)$13)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$14 }
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$5 = CALL $139([8775])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$23 }
	*($2 + [8]) = ($5 << [1])
	$8 = (($2 + [8]) | [1])
	if ( $5 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$14 = (($5 + [16]) & [-16])
	$8 = CALL _Znwj($14)
	*($2 + [8]) = ($14 | [1])
	*($2 + [16]) = $8
	*($2 + [12]) = $5
	
.LABEL $label$22
	CALL memcpy($8, [8775], $5)
	
.LABEL $label$21
	*(($8 + $5)) = [0]
	*($2 + [32]) = *($1)
	$3 = *(($10 + [8]))
	$4 = *($10)
	$5 = (($2 + [8]) + [8])
	*(($2 + [64])) = *($5)
	*($5) = [0]
	*(($2 + [48])) = $3
	*($2 + [24]) = *($0)
	$3 = *($2 + [8])
	*($2 + [8]) = (int_64)0
	*($2 + [56]) = $3
	*($2 + [40]) = $4
	$5 = CALL $43(($2 + [88]), ($2 + [72]), $6, $13, ($2 + [24]))
	CALL $44(($2 + [128]), $5)
	$8 = *($2 + [128])
	CALL send_inline($8, (*($2 + [132]) - $8))
	$8 = *($2 + [128])
	if ( ($8 == 0) ){ goto $label$24 }
	*($2 + [132]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$24
	$8 = *($5 + [28])
	if ( ($8 == 0) ){ goto $label$25 }
	*(($5 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$25
	$8 = *($5 + [16])
	if ( ($8 == 0) ){ goto $label$26 }
	*(($5 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$26
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$27
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$28
	CALL $45($0, $10)
	CALL eosio_assert($12, [11047])
	CALL eosio_assert($12, [11081])
	$5 = CALL db_next_i64(*($11 + [32]), ($2 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$29 }
	CALL $35($9, $5)
	
.LABEL $label$29
	CALL $36($9, $11)
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$20
	CALL $117(($2 + [8]))
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $109(*($1), ($0 + [32]))
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9200])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [9200])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9200])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [9374])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)*($7) != (int_32)$3), [9200])
	$3 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($3), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($4 <= *($7)), [9374])
	$4 = *($3)
	$2 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($2 & [128]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$2 = ($global$0 - [128])
	$global$0 = $2
	CALL prints([10592])
	$4 = *($1)
	$5 = ($4 & [1])
	$3 = ($1 + [1])
	CALL prints_l(( *($1 + [8]) ? $3 : $5 ), ( *($1 + [4]) ? uint_32($4 >> [1]) : $5 ))
	CALL prints([8300])
	$5 = *($1)
	if ( ($5 & [1]) ){ goto $label$6 }
	$5 = uint_32($5 >> [1])
	$4 = $3
	$6 = ($4 + $5)
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = *(($1 + [4]))
	$4 = *(($1 + [8]))
	$6 = ($4 + $5)
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$7:
	if ( CALL $130(*($4)) ){ goto $label$4 }
	$4 = ($4 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$4 = $6
	$5 = [1]
	$6 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$8 }
	$5 = ($4 + [1])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	if ( (CALL $130(*($5)) == 0) ){ goto $label$10 }
	$5 = ($5 + [1])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	*($4) = *($5)
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	$5 = [1]
	$6 = *($1)
	if ( ($6 & [1]) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (($1 + uint_32($6 >> $5)) + $5)
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($1 + [8]))
	$5 = ($3 + *(($1 + [4])))
	
.LABEL $label$1
	CALL $122($1, ($4 - $3), ($5 - $4))
	$6 = [0]
	*($2 + [120]) = [0]
	*($2 + [112]) = (int_64)0
	$4 = CALL $139([10604])
	*($2 + [104]) = $4
	*($2 + [96]) = [0]
	if ( ((uint_32)$4 >= (uint_32)[9]) ){ goto $label$13 }
	$5 = ($2 + [96])
	if ( $4 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$5 = CALL _Znaj($4)
	*($2 + [96]) = $5
	
.LABEL $label$12
	CALL memmove($5, [10604], $4)
	$6 = *(($2 + [104]))
	
.LABEL $label$11
	CALL $110($5, ($5 + $6), ($2 + [24]))
	CALL $69(($2 + [112]), $1, ($2 + [96]), [1])
	if ( (*(($2 + [104])) <= [9]) ){ goto $label$14 }
	$4 = *($2 + [96])
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdaPv($4)
	
.LABEL $label$14
	$5 = *($2 + [112])
	$4 = *($2 + [116])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$15 }
	$3 = ($0 + [208])
	$7 = (($2 + [40]) | [1])
	$8 = ($0 + [236])
	$9 = ($0 + [232])
	$10 = ($0 + [216])
	$11 = [0]
	
.LOOP $label$16:
	*((($2 + [80]) + [8])) = [0]
	*($2 + [80]) = (int_64)0
	$4 = CALL $139([9587])
	*(($1 = (($2 + [64]) + [8]))) = $4
	*($2 + [64]) = [0]
	$6 = ($5 + ((int_32)$11 * (int_32)[12]))
	if ( ((uint_32)$4 >= (uint_32)[9]) ){ goto $label$19 }
	$5 = ($2 + [64])
	if ( $4 ){ goto $label$18 }
	$4 = [0]
	goto $label$17 
	
.LABEL $label$19
	$5 = CALL _Znaj($4)
	*($2 + [64]) = $5
	
.LABEL $label$18
	CALL memmove($5, [9587], $4)
	$4 = *($1)
	
.LABEL $label$17
	CALL $110($5, ($5 + $4), ($2 + [24]))
	CALL $69(($2 + [80]), $6, ($2 + [64]), [1])
	if ( (*($1) <= [9]) ){ goto $label$20 }
	$4 = *($2 + [64])
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdaPv($4)
	
.LABEL $label$20
	$4 = *($2 + [80])
	$5 = *($4)
	if ( ($5 & [1]) ){ goto $label$22 }
	$4 = uint_32($5 >> [1])
	goto $label$21 
	
.LABEL $label$22
	$4 = *($4 + [4])
	
.LABEL $label$21
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [10606])
	$4 = *($2 + [80])
	$5 = *($4 + [12])
	if ( ($5 & [1]) ){ goto $label$24 }
	$4 = uint_32($5 >> [1])
	goto $label$23 
	
.LABEL $label$24
	$4 = *(($4 + [16]))
	
.LABEL $label$23
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [10636])
	$4 = *($2 + [80])
	if ( (*($4) & [1]) ){ goto $label$26 }
	$4 = ($4 + [1])
	goto $label$25 
	
.LABEL $label$26
	$4 = *($4 + [8])
	
.LABEL $label$25
	$5 = [0]
	
.LOOP $label$27:
	$1 = ($4 + $5)
	$6 = ($5 + [1])
	$5 = $6
	if ( *($1) ){ goto $label$27 }
	$12 = (CASTING uint_64)(uint_32 ($6 + [-1]))
	$13 = (int_64)0
	$14 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$28:
	$16 = (int_64)0
	if ( ((uint_64)$13 >= (uint_64)$12) ){ goto $label$29 }
	$5 = *($4)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$5 = ($5 + [-91])
	goto $label$30 
	
.LABEL $label$31
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$33 }
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	goto $label$32 
	
.LABEL $label$33
	$16 = ((int_64)$16 & (int_64)15)
	
.LABEL $label$32
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$14 = ((int_64)$14 + (int_64)4294967291)
	if ( ((int_64)$14 != (int_64)55834574842) ){ goto $label$28 }
	*($2 + [56]) = $15
	CALL eosio_assert(CALL $fimport$21($15), [10662])
	*(($17 = (($2 + [40]) + [8]))) = [0]
	*($2 + [40]) = (int_64)0
	$4 = CALL $139([8466])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$39 }
	*($2 + [40]) = ($4 << [1])
	$1 = $7
	if ( $4 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$5 = (($4 + [16]) & [-16])
	$1 = CALL _Znwj($5)
	*($17) = $1
	*($2 + [40]) = ($5 | [1])
	*($2 + [44]) = $4
	
.LABEL $label$38
	CALL memcpy($1, [8466], $4)
	
.LABEL $label$37
	$5 = [0]
	*(($1 + $4)) = [0]
	$4 = ( *($17) ? $7 : (*($2 + [40]) & [1]) )
	
.LOOP $label$40:
	$1 = $5
	$5 = ($1 + [1])
	if ( *(($4 + $1)) ){ goto $label$40 }
	$14 = (int_64)0
	if ( ((int_32)$5 == (int_32)[1]) ){ goto $label$41 }
	$16 = ((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)3)
	$13 = (int_64)0
	$14 = (int_64)0
	
.LOOP $label$42:
	$5 = *($4)
	if ( ((uint_32)(($5 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$14 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56) << (int_64)((int_64)((int_64)$13 + (int_64)8) & (int_64)4294967288)) | (int_64)$14)
	
.LABEL $label$43
	$4 = ($4 + [1])
	$13 = ((int_64)$13 + (int_64)8)
	if ( ((int_64)$16 != (int_64)$13) ){ goto $label$42 }
	
.LABEL $label$41
	*(($6 = (($2 + [24]) + [8]))) = (int_64)1398362884
	*($2 + [24]) = (int_64)0
	CALL eosio_assert([1], [8992])
	$16 = ((int_64)$14 | (int_64)4)
	$13 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$47 }
	$13 = $14
	$5 = [1]
	$1 = $4
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$47
	$13 = $14
	
.LOOP $label$48:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$45 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $5 ){ goto $label$48 }
	$5 = [1]
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$5 = [0]
	
.LABEL $label$44
	CALL eosio_assert($5, [9041])
	$5 = [0]
	$4 = CALL $123((*($2 + [80]) + [12]), [0], [10])
	*($6) = $16
	*($2 + [24]) = (CASTING int_64)(int_32 $4)
	CALL eosio_assert(((int_64)$16 == (int_64)1397703940), [10689])
	if ( ((uint_64)((int_64)*($2 + [24]) + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$49 }
	$13 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$14 = (uint_64)$13 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$13 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$13 = $14
	$5 = [1]
	$1 = $4
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$52
	$13 = $14
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$13 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = ((int_32)$4 < (int_32)[6])
	$1 = ($4 + [1])
	$4 = $1
	if ( $5 ){ goto $label$53 }
	$5 = [1]
	$4 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$5 = [0]
	
.LABEL $label$49
	CALL eosio_assert($5, [8483])
	CALL eosio_assert(((int_64)*($2 + [24]) > (int_64)0), [10712])
	$4 = *($2 + [80])
	CALL prints([10744])
	$5 = *($4)
	$1 = ($5 & [1])
	CALL prints_l(( *($4 + [8]) ? ($4 + [1]) : $1 ), ( *($4 + [4]) ? uint_32($5 >> [1]) : $1 ))
	CALL prints([8300])
	CALL prints([10751])
	CALL $40(($2 + [24]))
	CALL prints([8300])
	$13 = *($2 + [56])
	$5 = *($8)
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$56 }
	
.LOOP $label$58:
	$4 = ($5 + [-24])
	$1 = *($4)
	if ( ((int_64)*($1) == (int_64)$13) ){ goto $label$57 }
	$5 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$56 }
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$3), [9126])
	goto $label$55 
	
.LABEL $label$56
	$4 = CALL db_find_i64(*($3), *($10), (int_64)-3020379626716266496, $13)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$54 }
	$1 = CALL $51($3, $4)
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$3), [9126])
	
.LABEL $label$55
	CALL prints([10787])
	CALL prints([8300])
	$13 = *($0)
	*($2 + [16]) = ($2 + [24])
	CALL eosio_assert([1], [9640])
	CALL $70($3, $1, $13, ($2 + [16]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$54
	CALL prints([10762])
	CALL prints([8300])
	$13 = *($0)
	*($2 + [20]) = ($2 + [24])
	*($2 + [16]) = ($2 + [56])
	CALL $71(($2 + [8]), $3, $13, ($2 + [16]))
	if ( (*($2 + [40]) & [1]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	CALL $117(($2 + [40]))
	
.LABEL $label$35
	CALL _ZdlPv(*($17))
	
.LABEL $label$34
	$1 = *($2 + [80])
	if ( ($1 == 0) ){ goto $label$59 }
	$5 = *($2 + [84])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$61 }
	
.LOOP $label$62:
	$4 = ($5 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$63
	$5 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$62 }
	$4 = *($2 + [80])
	goto $label$60 
	
.LABEL $label$61
	$4 = $1
	
.LABEL $label$60
	*($2 + [84]) = $1
	CALL _ZdlPv($4)
	
.LABEL $label$59
	$5 = *($2 + [112])
	$4 = *($2 + [116])
	$11 = ($11 + [1])
	if ( ($11 <= ((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ($5 == 0) ){ goto $label$64 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$66 }
	
.LOOP $label$67:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$68
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$67 }
	$4 = *($2 + [112])
	goto $label$65 
	
.LABEL $label$66
	$4 = $5
	
.LABEL $label$65
	*($2 + [116]) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$64
	$global$0 = ($2 + [128])
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9177])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $140($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([40])
	$6 = CALL $107($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [28])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $90(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [11111])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [11156])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11206])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9675])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9721])
	$3 = *($3)
	*($1) = *($3)
	*(($1 + [24])) = *(($3 + [24]))
	*(($5 = ($1 + [16]))) = *(($3 + [16]))
	*(($1 + [8])) = *(($3 + [8]))
	CALL eosio_assert([1], [9772])
	*($4 + [40]) = ($4 + [32])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = $5
	*($4 + [56]) = $1
	CALL $103(($4 + [56]), ($4 + [48]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-3660748648133689344) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-3660748648133689343
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [9589])
	$5 = CALL _Znwj([48])
	CALL $28($5)
	*($5 + [32]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($5 + [8])) = *(($3 + [8]))
	*(($6 = ($5 + [16]))) = *(($3 + [16]))
	*(($5 + [24])) = *(($3 + [24]))
	*($4 + [40]) = ($4 + [32])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	*($4 + [48]) = ($4 + [32])
	*($4 + [60]) = $6
	*($4 + [56]) = $5
	CALL $103(($4 + [56]), ($4 + [48]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-3660748648133689344, $2, (int_64)-3660748648133689344, $4, [32])
	*($5 + [36]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-3660748648133689344) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-3660748648133689343
	
.LABEL $label$1
	*($4 + [32]) = $5
	*($4) = (int_64)-3660748648133689344
	*($4 + [56]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-3660748648133689344
	*($3 + [16]) = $6
	*($4 + [32]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $102(($1 + [24]), ($4 + [32]), $4, ($4 + [56]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [64])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [11111])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [11156])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11206])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [9589])
	*(($5 = CALL _Znwj([16])) + [4]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9296])
	CALL memcpy(($4 + [16]), $5, [1])
	CALL eosio_assert([1], [9296])
	CALL memcpy((($4 + [16]) | [1]), ($5 + [1]), [1])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157493845350678528, $2, (int_64)-4157493845350678528, ($4 + [16]), [2])
	*($5 + [8]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)-4157493845350678528) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)-4157493845350678527
	
.LABEL $label$1
	*($4 + [24]) = $5
	*($4 + [16]) = (int_64)-4157493845350678528
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)-4157493845350678528
	*($3 + [16]) = $6
	*($4 + [24]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $106(($1 + [24]), ($4 + [24]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [24])
	*($4 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $117 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9177])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $140($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($7 + $6)
	*(($9 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [8992])
	$10 = ($9 + [8])
	$11 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9041])
	*($9 + [28]) = $0
	*($9 + [24]) = [0]
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $10
	*($3 + [32]) = $9
	*($3 + [40]) = ($9 + [24])
	CALL $105(($3 + [32]), ($3 + [24]))
	*($9 + [32]) = $1
	*($3 + [24]) = $9
	$11 = *($9)
	*($3 + [32]) = $11
	*($3 + [4]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $86($8, ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $143($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = [1]
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$20 }
	goto $label$2 
	
.LABEL $label$21
	$5 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$2 }
	*($0) = $2
	*($4) = $5
	return [1]
	
.LABEL $label$20
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$16 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$13 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$12 
	
.LABEL $label$19
	$5 = ($1 + [-1])
	$4 = *($5)
	$6 = *($0)
	$2 = *($0 + [1])
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$8 }
	*($0) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$18
	CALL $111($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	return [1]
	
.LABEL $label$17
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$14 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$7 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$6 
	
.LABEL $label$16
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$10 }
	*(($0 + [2])) = $4
	*(($6 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$11 }
	*($0) = $2
	*($6) = $5
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	$3 = [1]
	*(($6 = ($0 + [1]))) = $4
	*($5) = $2
	$2 = *($0)
	$4 = *($6)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$14
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$4 }
	*(($0 + [2])) = $4
	*(($7 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$5 }
	*($0) = $2
	*($7) = $5
	$5 = *($6)
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$13
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$10 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$12
	$4 = $5
	
.LABEL $label$11
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$10
	$4 = $2
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$9
	$8 = [0]
	$9 = [0]
	
.LOOP $label$22:
	$5 = *($7)
	if ( ((int_32)$5 >= (int_32)int_32(($4 << [24]) >> [24])) ){ goto $label$23 }
	$3 = $8
	
.LOOP $label$25:
	*((($2 = ($0 + $3)) + $6)) = $4
	if ( ((int_32)$3 == (int_32)[-2]) ){ goto $label$24 }
	$3 = ($3 + [-1])
	$4 = *(($2 + [1]))
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$25 }
	*((($0 + $3) + $6)) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[8]) ){ goto $label$23 }
	goto $label$1 
	
.LABEL $label$24
	*($0) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 == (int_32)[8]) ){ goto $label$1 }
	
.LABEL $label$23
	$3 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	$8 = ($8 + [1])
	$4 = *($7)
	$7 = $2
	goto $label$22 
	
.LABEL $label$8
	*($0) = $2
	$3 = [1]
	*(($0 + [1])) = $6
	$4 = *($5)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$2 }
	*(($0 + [1])) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$7
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$4 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	$5 = *($6)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$4 = $2
	$5 = *($6)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	*(($2 = ($0 + [2]))) = $5
	*($6) = $4
	$3 = [1]
	$5 = *(($0 + [1]))
	$4 = *($2)
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$2 }
	*($2) = $5
	$3 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$2
	return $3
	
.LABEL $label$1
	$4
	return ((int_32)($7 + [1]) == (int_32)$1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $140($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11260])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $140($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$5 = ($1 + [-2])
	$6 = ($1 + [-1])
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	
.LOOP $label$7:
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$19 }
	$7 = ($4 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$20 }
	$0 = uint_32($0 >> [2])
	$8 = CALL $111($4, ($4 + $0), $7, ($7 + $0), $6, $2)
	goto $label$18 
	
.LABEL $label$20
	$0 = *($6)
	$9 = *($4)
	$10 = *($7)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$23 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$22 }
	*($4) = $0
	*($6) = $9
	$8 = [1]
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$23
	$8 = [0]
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$18 }
	*($7) = $0
	*($6) = $10
	$8 = [1]
	$10 = *($4)
	$0 = *($7)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$18 }
	*($4) = $0
	*($7) = $10
	goto $label$21 
	
.LABEL $label$22
	*($4) = $10
	*($7) = $9
	$8 = [1]
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$18 }
	*($7) = $0
	*($6) = $9
	
.LABEL $label$21
	$8 = [2]
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$0 = *($4 + [2])
	$9 = *($4)
	$10 = *($4 + [1])
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$29 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$28 }
	*($4) = $0
	*(($4 + [2])) = $9
	goto $label$27 
	
.LABEL $label$29
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$25 }
	*(($4 + [2])) = $10
	*(($11 = ($4 + [1]))) = $0
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$26 }
	*($4) = $0
	*($11) = $9
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$28
	*($4) = $10
	*(($10 = ($4 + [1]))) = $9
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$25 }
	*(($4 + [2])) = $9
	*($10) = $0
	
.LABEL $label$27
	$10 = $9
	
.LABEL $label$26
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$25
	$10 = $0
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$24
	$7 = [0]
	
.LOOP $label$30:
	$11 = *($6)
	if ( ((int_32)$11 >= (int_32)int_32(($10 << [24]) >> [24])) ){ goto $label$31 }
	$0 = $7
	
.LOOP $label$34:
	*((($9 = ($4 + $0)) + $12)) = $10
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$33 }
	$0 = ($0 + [-1])
	$10 = *(($9 + [1]))
	if ( ((int_32)$11 < (int_32)$10) ){ goto $label$34 }
	$0 = (($4 + $0) + $12)
	goto $label$32 
	
.LABEL $label$33
	$0 = $4
	
.LABEL $label$32
	*($0) = $11
	
.LABEL $label$31
	$0 = ($6 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	$7 = ($7 + [1])
	$10 = *($6)
	$6 = $0
	goto $label$30 
	
.LABEL $label$18
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 >= (int_32)$9) ){ goto $label$16 }
	
.LABEL $label$17
	$10 = $6
	$3 = ($4 + [1])
	if ( ($3 <= $10) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$0 = $5
	
.LOOP $label$35:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$14 }
	$10 = *($0)
	$11 = ($0 + [-1])
	$0 = $11
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$35 }
	*($4) = $10
	*(($10 = ($11 + [1]))) = $3
	$8 = ($8 + [1])
	$3 = ($4 + [1])
	if ( ((uint_32)$3 >= (uint_32)$10) ){ goto $label$13 }
	
.LABEL $label$15
	
.LOOP $label$36:
	$0 = ($3 + [-1])
	$9 = *($7)
	
.LOOP $label$37:
	$0 = ($0 + [1])
	$11 = *($0)
	if ( ((int_32)$11 < (int_32)$9) ){ goto $label$37 }
	$3 = ($0 + [1])
	
.LOOP $label$38:
	$10 = ($10 + [-1])
	$12 = *($10)
	if ( ((int_32)$12 >= (int_32)$9) ){ goto $label$38 }
	if ( ((uint_32)$0 > (uint_32)$10) ){ goto $label$39 }
	*($0) = $12
	*($10) = $11
	$7 = ( $10 ? $7 : ((int_32)$7 == (int_32)$0) )
	$8 = ($8 + [1])
	goto $label$36 
	
.LABEL $label$39
	$3 = $0
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$12 = ($4 + [1])
	$9 = *($6)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$40 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$3 }
	$12 = ($4 + [2])
	
.LOOP $label$42:
	$0 = ($12 + [-1])
	$10 = *($0)
	if ( ((int_32)$3 < (int_32)$10) ){ goto $label$41 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$42 }
	goto $label$3 
	
.LABEL $label$41
	*($0) = $9
	*($6) = $10
	
.LABEL $label$40
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$43:
	$0 = ($12 + [-1])
	$10 = *($4)
	
.LOOP $label$44:
	$0 = ($0 + [1])
	$9 = *($0)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$44 }
	$12 = ($0 + [1])
	
.LOOP $label$45:
	$6 = ($6 + [-1])
	$11 = *($6)
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$45 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$46 }
	*($0) = $11
	*($6) = $9
	goto $label$43 
	
.LABEL $label$46
	$10 = ([4] & [7])
	if ( ((uint_32)$10 > (uint_32)[4]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$13
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = *($3)
	$0 = *($7)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$11 }
	*($3) = $0
	*($7) = $10
	if ( ($8 + [1]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( $8 ){ goto $label$9 }
	
.LABEL $label$10
	$10 = CALL $112($4, $3, $2)
	$0 = ($3 + [1])
	if ( CALL $112($0, $1, $2) ){ goto $label$6 }
	if ( $10 ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $110($4, $3, $2)
	$0 = ($3 + [1])
	
.LABEL $label$8
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	goto $label$7 
	
.LABEL $label$6
	$1 = ( $1 ? $3 : $10 )
	$0 = $4
	$10 = (( [1] ? [2] : $10 ) & [7])
	if ( ((uint_32)$10 <= (uint_32)[4]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	goto $label$3 
	
.LABEL $label$59
	$9 = *($4)
	$0 = ($1 + [-1])
	$10 = *($0)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$3 }
	*($4) = $10
	*($0) = $9
	return 
	
.LABEL $label$58
	$9 = ($1 + [-1])
	$0 = *($9)
	$11 = *($4)
	$10 = *($4 + [1])
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$55 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$53 }
	*($4) = $0
	*($9) = $11
	return 
	
.LABEL $label$57
	CALL $111($4, ($4 + [1]), ($4 + [2]), ($4 + [3]), ($1 + [-1]), $2)
	return 
	
.LABEL $label$56
	$11 = ($1 + [-1])
	$10 = *($4 + [2])
	$9 = *($4)
	$0 = *($4 + [1])
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$54 }
	if ( ((int_32)$10 >= (int_32)$0) ){ goto $label$52 }
	*($4) = $10
	*(($4 + [2])) = $9
	goto $label$51 
	
.LABEL $label$55
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*(($11 = ($4 + [1]))) = $0
	*($9) = $10
	$10 = *($4)
	$0 = *($11)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*($4) = $0
	*($11) = $10
	return 
	
.LABEL $label$54
	if ( ((int_32)$10 >= (int_32)$0) ){ goto $label$50 }
	*(($4 + [2])) = $0
	*(($12 = ($4 + [1]))) = $10
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$48 }
	*($4) = $10
	*($12) = $9
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$53
	*($4) = $10
	*(($0 = ($4 + [1]))) = $11
	$10 = *($9)
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$3 }
	*($0) = $10
	*($9) = $11
	return 
	
.LABEL $label$52
	*($4) = $0
	*(($0 = ($4 + [1]))) = $9
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$49 }
	*(($4 + [2])) = $9
	*($0) = $10
	
.LABEL $label$51
	$0 = $9
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$50
	$0 = $10
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$49
	$0 = $10
	
.LABEL $label$48
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$47
	*(($10 = ($4 + [2]))) = $12
	*($11) = $0
	$9 = ($4 + [1])
	$11 = *($9)
	$0 = *($10)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$3 }
	*($10) = $11
	*($9) = $0
	$10 = *($4)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*($4) = $0
	*(($4 + [1])) = $10
	return 
	
.LABEL $label$4
	if ( (([1] << $10) & [21]) ){ goto $label$1 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	CALL $110(($3 + [1]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$5 }
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$4 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$2 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((int_32)$6 >= (int_32)$8) ){ goto $label$1 }
	*($0) = $6
	*($1) = $8
	$7 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$1 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$3
	$7 = $8
	goto $label$1 
	
.LABEL $label$2
	$7 = $6
	
.LABEL $label$1
	$6 = *($3)
	if ( ((int_32)$6 >= (int_32)int_32(($7 << [24]) >> [24])) ){ goto $label$10 }
	*($2) = $6
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$9 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$8 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	
.LABEL $label$10
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$7
	return $9
	
.LABEL $label$6
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$13 }
	*($2) = $7
	*($3) = $6
	$3 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$3) ){ goto $label$12 }
	*($1) = $7
	*($2) = $3
	$7 = *($0)
	$2 = *($1)
	if ( ((int_32)$2 >= (int_32)$7) ){ goto $label$11 }
	*($0) = $2
	*($1) = $7
	return ($9 + [4])
	
.LABEL $label$13
	return ($9 + [1])
	
.LABEL $label$12
	return ($9 + [2])
	
.LABEL $label$11
	return ($9 + [3])
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9177])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $140($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([48])
	CALL $28($5)
	*($5 + [32]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	CALL $101(($3 + [40]), ($3 + [32]))
	*($5 + [36]) = $1
	*($3 + [32]) = $5
	*($3 + [40]) = (int_64)-3660748648133689344
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-3660748648133689344
	*($7 + [16]) = $1
	*($3 + [32]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $102(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $28 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [8992])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9041])
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [8992])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9041])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9041])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9041])
	return $0
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [4]) == (int_32)$0), [9675])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9721])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9772])
	CALL eosio_assert([1], [9296])
	CALL memcpy($4, $1, [1])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($4 | [1]), ($1 + [1]), [1])
	CALL db_update_i64(*($1 + [8]), $2, $4, [2])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)-4157493845350678528) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)-4157493845350678527
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)0
	*(($3 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [8992])
	$4 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9041])
	*($0 + [24]) = $1
	$3 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy($0, *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [9200])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [9200])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9200])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $49(*($1), ($0 + [32]))
}

void .FUNC $20 (int_32 $0)
{
	int_64 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	$1 = (int_64)0
	$2 = (int_64)59
	$3 = [8276]
	$4 = (int_64)0
	
.LOOP $label$1:
	$5 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($3)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$4 = ((int_64)$5 | (int_64)$4)
	$2 = ((int_64)$2 + (int_64)4294967291)
	if ( ((int_64)$2 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($4)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)1414481924), [9417])
	$2 = [0]
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$3 = (uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$2 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [8483])
	CALL eosio_assert(((int_64)*($1) > (int_64)0), [9440])
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$1 = ($global$0 - [144])
	$global$0 = $1
	$2 = CALL transaction_size()
	$3 = ($1 - (($2 + [15]) & [-16]))
	$global$0 = $3
	$4 = CALL read_transaction($3, $2)
	CALL eosio_assert(((int_32)$2 == (int_32)$4), [9302])
	$5 = CALL current_time()
	$6 = (int_64)0
	*((($2 = $1) + [108])) = (int_64)0
	*(($2 + [124])) = (int_64)0
	*(($2 + [132])) = (int_64)0
	*($2 + [92]) = [0]
	*($2 + [96]) = [0]
	*($2 + [100 align=4]) = (int_64)0
	*($2 + [116 align=4]) = (int_64)0
	*($2 + [80]) = ((CASTING uint_32)(uint_64 ((uint_64)$5 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [44]) = $3
	*($2 + [40]) = $3
	*($2 + [48]) = ($3 + $4)
	CALL $59(($2 + [40]), ($2 + [80]))
	CALL $61(CALL $60(CALL $60(($2 + [40]), ($2 + [104])), ($2 + [116])), ($2 + [128]))
	$4 = CALL $62(($2 + [40]), *($2 + [116]))
	*($2 + [8]) = *($4 + [8])
	CALL $63(($2 + [24]), ($2 + [8]))
	*($2) = *($4)
	CALL $63(($2 + [8]), $2)
	CALL prints([9326])
	$3 = *($2 + [24])
	$1 = ($3 & [1])
	CALL prints_l(( *($2 + [32]) ? (($2 + [24]) | [1]) : $1 ), ( *($2 + [28]) ? uint_32($3 >> [1]) : $1 ))
	CALL prints([8300])
	CALL prints([9340])
	$3 = *($2 + [8])
	$1 = ($3 & [1])
	CALL prints_l(( *($2 + [16]) ? (($2 + [8]) | [1]) : $1 ), ( *($2 + [12]) ? uint_32($3 >> [1]) : $1 ))
	CALL prints([8300])
	$7 = *($4 + [8])
	$8 = (int_64)59
	$3 = [8267]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$1 = ($1 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$5 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$1 = ( ($1 + [-48]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$5 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$1 }
	$3 = [0]
	if ( ((int_64)$7 != (int_64)$9) ){ goto $label$7 }
	$7 = *($4)
	$6 = (int_64)0
	$5 = (int_64)59
	$3 = [8254]
	$9 = (int_64)0
	
.LOOP $label$8:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$9 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$1 = ($1 + [-91])
	goto $label$10 
	
.LABEL $label$11
	$1 = ( ($1 + [-48]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $1) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$3 = ($3 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$8 }
	$3 = ((int_64)$7 == (int_64)$9)
	
.LABEL $label$7
	CALL eosio_assert($3, [9356])
	if ( (*($2 + [8]) & [1]) ){ goto $label$16 }
	if ( (*($2 + [24]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*(($2 + [16])))
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($2 + [32])))
	$3 = *($4 + [28])
	if ( $3 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$3 = *($4 + [28])
	if ( ($3 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	*(($4 + [32])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$3 = *($4 + [16])
	if ( ($3 == 0) ){ goto $label$17 }
	*(($4 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$17
	CALL $64(($2 + [80]))
	$global$0 = ($2 + [144])
}

void .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [14]) = [0]
	$2 = ($0 + [88])
	$3 = *(($0 + [116]))
	if ( ((int_32)$3 == (int_32)*(($0 + [112]))) ){ goto $label$2 }
	$0 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [4]) == (int_32)$2), [9126])
	if ( $0 ){ goto $label$1 }
	$0 = ($1 + [14])
	goto $label$1 
	
.LABEL $label$2
	$0 = CALL db_find_i64(*($2), *(($0 + [96])), (int_64)-4157493845350678528, (int_64)-4157493845350678528)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $31($2, $0)
	CALL eosio_assert(((int_32)*($0 + [4]) == (int_32)$2), [9126])
	goto $label$1 
	
.LABEL $label$3
	$0 = ($1 + [14])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)*($0) != (int_32)[1]), [9468])
	$global$0 = ($1 + [16])
}

void .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [14]) = [0]
	$2 = ($0 + [88])
	$3 = *(($0 + [116]))
	if ( ((int_32)$3 == (int_32)*(($0 + [112]))) ){ goto $label$2 }
	$0 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($0 + [4]) == (int_32)$2), [9126])
	if ( $0 ){ goto $label$1 }
	$0 = ($1 + [14])
	goto $label$1 
	
.LABEL $label$2
	$0 = CALL db_find_i64(*($2), *(($0 + [96])), (int_64)-4157493845350678528, (int_64)-4157493845350678528)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $31($2, $0)
	CALL eosio_assert(((int_32)*($0 + [4]) == (int_32)$2), [9126])
	goto $label$1 
	
.LABEL $label$3
	$0 = ($1 + [14])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)(*($0) & [65280]) != (int_32)[256]), [9061])
	$global$0 = ($1 + [16])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL $23($0, $1)
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*(($2 + [8])) = (int_64)0
	*($2) = (int_64)0
	CALL $28($2)
	$3 = ($0 + [128])
	$4 = *(($0 + [156]))
	if ( ((int_32)$4 == (int_32)*(($0 + [152]))) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$3), [9126])
	if ( $4 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($3), *(($0 + [136])), (int_64)-3660748648133689344, (int_64)-3660748648133689344)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $29($3, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$3), [9126])
	goto $label$1 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*((($2 + [32]) + [24])) = *(($4 + [24]))
	*(($5 = (($2 + [32]) + [16]))) = *(($4 + [16]))
	*(($6 = (($2 + [32]) + [8]))) = *(($4 + [8]))
	*($2 + [32]) = *($4)
	CALL prints([9911])
	CALL $40(($2 + [32]))
	CALL prints([8300])
	CALL prints([9945])
	CALL $40($5)
	CALL prints([8300])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($6)), [9831])
	$7 = ((int_64)*($2 + [32]) + (int_64)*($1))
	*($2 + [32]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9874])
	CALL eosio_assert(((int_64)*($2 + [32]) < (int_64)4611686018427387904), [9893])
	CALL $30($3, ($2 + [32]), *($0))
	CALL prints([9981])
	CALL $40(($2 + [32]))
	CALL prints([8300])
	CALL prints([10013])
	CALL $40($5)
	CALL prints([8300])
	$global$0 = ($2 + [64])
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	CALL prints([9527])
	CALL $40($2)
	CALL prints([8300])
	$4 = ($0 + [8])
	$5 = *($1)
	$7 = *(($0 + [36]))
	$6 = *(($0 + [32]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$4), [9126])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL db_find_i64(*($4), *(($0 + [16])), (int_64)-4157660971118100480, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $33($4, $8)
	CALL eosio_assert(((int_32)*($9 + [24]) == (int_32)$4), [9126])
	
.LABEL $label$2
	CALL prints([9567])
	CALL prints([8300])
	$5 = *($0)
	*($3 + [8]) = $2
	CALL eosio_assert([1], [9640])
	CALL $65($4, $9, $5, ($3 + [8]))
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	CALL prints([9550])
	CALL prints([8300])
	$5 = *($0)
	*($3 + [12]) = $2
	*($3 + [8]) = $1
	CALL $66($3, $4, $5, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9296])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9296])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $135 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4) = [0]
	$5 = *($2 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $2, $5)
	*($4 + [32]) = [0]
	$2 = *(($4 + [8]))
	*($4 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $4
	$6 = ($4 + [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($2)
	*($4 + [32]) = $6
	$5 = *($4)
	
.LABEL $label$3
	CALL memcpy($6, $5, $2)
	*($4 + [16]) = [0]
	$2 = *((($4 + [32]) + [8]))
	*($4 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$5 = ($4 + [16])
	$6 = ($4 + [32])
	goto $label$5 
	
.LABEL $label$6
	$5 = CALL _Znaj($2)
	*($4 + [16]) = $5
	$2 = *((($4 + [16]) + [8]))
	$6 = *($4 + [32])
	
.LABEL $label$5
	CALL memcpy($5, $6, $2)
	*($4 + [28]) = $3
	if ( (*((($4 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdaPv($2)
	
.LABEL $label$7
	$2 = CALL $88($0, $1, ($4 + [16]))
	if ( (*((($4 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	
.LABEL $label$8
	if ( (*(($4 + [8])) <= [9]) ){ goto $label$9 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdaPv($5)
	
.LABEL $label$9
	$global$0 = ($4 + [48])
	return $2
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [9589])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([40])
	CALL $85($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [32])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $86(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [8992])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9041])
	*($0 + [20]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9200])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[3]), [9200])
	CALL memcpy(($0 + [16]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	*($0 + [24]) = *(*($2 + [8]))
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9675])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9721])
	$5 = *($1)
	$6 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [9831])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9874])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9893])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9772])
	CALL eosio_assert([1], [9296])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($4 + [16]), $6, [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $64 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [9675])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9721])
	$5 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [9831])
	$6 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9874])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9893])
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9772])
	*($4 + [48]) = ($4 + [28])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [8])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [24])
	CALL $87(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [32]), $2, $4, [28])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [9589])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [8992])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9041])
	*($5 + [24]) = $1
	CALL $82(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [28])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $83(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9374])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $77($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [9200])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $78($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9374])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $79($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *(($3 + [-12]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$10:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [9200])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [9200])
	CALL memcpy(($2 + [8]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $78(CALL $80($0, ($2 + [16])), ($2 + [28]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$2
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [9380])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $119($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $121($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $129(($0 + [16]))
	
.LABEL $label$1
	CALL $129(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9200])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [9200])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4) = [0]
	$5 = *($1 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	$7 = $1
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$7 = *($1)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	$8 = *(($4 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$10 }
	if ( ((uint_32)$8 >= (uint_32)[9]) ){ goto $label$12 }
	$9 = ($4 + $8)
	if ( ($8 == 0) ){ goto $label$9 }
	
.LOOP $label$13:
	$10 = *($2)
	$5 = $4
	$6 = $8
	
.LOOP $label$14:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$14 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$15 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = *($4)
	$12 = ($9 + $8)
	
.LOOP $label$16:
	$10 = *($2)
	$5 = $9
	$6 = $8
	
.LOOP $label$17:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$17 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$18 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$18
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$11
	$2 = $3
	
.LABEL $label$10
	if ( ($8 <= [9]) ){ goto $label$8 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$7 }
	$5 = *($4)
	
.LOOP $label$19:
	if ( ((int_32)$5 <= (int_32)*($2)) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$19 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	if ( (*($1 + [12]) == 0) ){ goto $label$20 }
	$8 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$20
	$9 = *(($1 + [8]))
	if ( ((uint_32)$9 >= (uint_32)[9]) ){ goto $label$6 }
	$12 = ($1 + $9)
	if ( ($9 == 0) ){ goto $label$5 }
	$8 = $2
	
.LOOP $label$21:
	$10 = *($8)
	$5 = $1
	$6 = $9
	
.LOOP $label$22:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$22 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$21 }
	goto $label$4 
	
.LABEL $label$7
	$2 = $3
	goto $label$4 
	
.LABEL $label$6
	$12 = *($1)
	$1 = ($12 + $9)
	$8 = $2
	
.LOOP $label$23:
	$10 = *($8)
	$5 = $12
	$6 = $9
	
.LOOP $label$24:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$24 }
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$23 }
	goto $label$4 
	
.LABEL $label$5
	$6 = ((int_32)$12 == (int_32)$1)
	if ( $6 ){ goto $label$25 }
	$7 = ($3 + [-1])
	$5 = *($1)
	$8 = $2
	
.LOOP $label$26:
	if ( ((int_32)$5 > (int_32)*($8)) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ($6 == 0) ){ goto $label$26 }
	goto $label$3 
	
.LABEL $label$25
	$8 = $2
	goto $label$3 
	
.LABEL $label$4
	$8 = $3
	
.LABEL $label$3
	*($0 + [4]) = $8
	*($0) = $2
	$global$0 = ($4 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9200])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9200])
	CALL memcpy($0, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

int_32 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)0
	*(($3 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [8992])
	$4 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $5
	$6 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9041])
	*($0 + [24]) = $1
	$3 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy($0, *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [9200])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$6 = (*($3 + [4]) + [8])
	*($3 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $6) > (uint_32)[7]), [9200])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	CALL eosio_assert([1], [9296])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($2 + [16]), $5, [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-3020379626716266496, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [272])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1 + [4])
	$6 = *($1)
	*($3 + [176]) = [0]
	$7 = *($2 + [8])
	*($3 + [184]) = $7
	$1 = ($6 & [1])
	$4 = ( $4 ? ($1 + [1]) : $1 )
	$1 = ($4 + ( $5 ? uint_32($6 >> [1]) : $1 ))
	if ( ((uint_32)$7 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($3 + [176])
	$5 = $2
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($7)
	*($3 + [176]) = $6
	$5 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $5, $7)
	*($3 + [188]) = *($2 + [12])
	$1 = CALL $91(($3 + [192]), $4, $1, ($3 + [176]))
	$2 = [0]
	*($3 + [232]) = [0]
	$7 = *($1)
	if ( ($7 == 0) ){ goto $label$3 }
	*($3 + [232]) = $7
	if ( ($7 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($3 + [232]) | [4])), (int_32 [0]), (int_32 *(($7 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($3 + [232]) + [12])) = *(($1 + [12]))
	*($3 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $7
	
.LABEL $label$3
	*($3 + [248]) = *($1 + [16 align=4])
	*($3 + [256]) = *($1 + [24 align=4])
	*($3 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$7 = ($1 + [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($3 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($3 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdaPv($1)
	
.LABEL $label$7
	*(($3 + [116])) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [96]) = [0]
	*($3 + [124]) = [0]
	*($3 + [128]) = [1]
	*($3 + [136]) = [0]
	*($3 + [160]) = (int_64)0
	*($3 + [168]) = [1]
	*($3 + [152]) = *($3 + [112])
	*($3 + [40]) = [0]
	$1 = [0]
	$2 = *($3 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($3 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($3 + [232]) | [4])((int_32 (($3 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($3 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($3 + [40]) + [12])) = *((($3 + [232]) + [12]))
	*($3 + [44 align=4]) = *($3 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($3) = [0]
	*($3 + [56]) = *((($3 + [232]) + [16]))
	*($3 + [64]) = *((($3 + [232]) + [24]))
	*($3 + [72]) = *((($3 + [232]) + [32]))
	if ( ($1 == 0) ){ goto $label$10 }
	*($3) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($3 + [136]) | [4])((int_32 ($3 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($3 + [12])) = *((($3 + [136]) + [12]))
	*($3 + [4 align=4]) = *($3 + [140 align=4])
	
.LABEL $label$10
	*($3 + [16]) = *((($3 + [136]) + [16]))
	*($3 + [24]) = *((($3 + [136]) + [24]))
	*($3 + [32]) = *((($3 + [136]) + [32]))
	$6 = CALL $92(($3 + [80]), ($3 + [40]), $3)
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($3 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($3) = [0]
	
.LABEL $label$12
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($3 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($3 + [40]) = [0]
	
.LABEL $label$14
	$7 = *($0)
	*($0) = *($6)
	*($6) = $7
	$8 = *($6 + [4 align=4])
	$2 = *($0 + [4])
	*($6 + [4]) = $2
	$1 = *($0 + [8])
	*($0 + [4 align=4]) = $8
	*($6 + [8]) = $1
	if ( ($7 == 0) ){ goto $label$16 }
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$1 = ($2 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$20
	$2 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	$1 = *($6)
	goto $label$17 
	
.LABEL $label$18
	$1 = $7
	
.LABEL $label$17
	*(($6 + [4])) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($3 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($3 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($3 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($3 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($3 + [232]) = [0]
	
.LABEL $label$23
	$global$0 = ($3 + [272])
	return $0
}

void .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9296])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9296])
	CALL memcpy(*($3 + [4]), $0, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*(($4 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [8992])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9041])
	*($0 + [28]) = $1
	*($0 + [24]) = [0]
	$7 = *($2 + [4])
	*($0) = *(*($7))
	$4 = *($2)
	$7 = *($7 + [4])
	*(($0 + [16])) = *(($7 + [8]))
	*($0 + [8]) = *($7)
	*($0 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($3 + [48]) = ($3 + [28])
	*($3 + [44]) = $3
	*($3 + [40]) = $3
	*($3 + [56]) = ($3 + [40])
	*($3 + [68]) = ($0 + [8])
	*($3 + [64]) = $0
	*($3 + [72]) = ($0 + [24])
	CALL $87(($3 + [64]), ($3 + [56]))
	$5 = *($0)
	*($0 + [32]) = CALL db_store_i64(*($4 + [8]), (int_64)-3102536759423008768, *(*($2 + [8])), $5, $3, [28])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$6 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($3 + [80])
	return $0
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([9587])
	
.LABEL $label$1
	$3 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)8)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)16)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)24)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)56)
	*($2 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	CALL eosio_assert([1], [9296])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($2 + [16]), $5, [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-4157660971118100480, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [4])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	$7 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$7 = int_32($2 >> [3])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($7 << [4]))
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($3 - $4)
	$6 = ($2 + ($5 << [4]))
	$5 = ($6 - $3)
	$1 = ($6 + ($1 << [4]))
	$7 = ($2 + ($7 << [4]))
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($5, $4, $3)
	$4 = *($0)
	
.LABEL $label$7
	*($0) = $5
	*(($0 + [4])) = $1
	*(($0 + [8])) = $7
	if ( ($4 == 0) ){ goto $label$8 }
	CALL _ZdlPv($4)
	
.LABEL $label$8
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9374])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $81($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9200])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9200])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $142($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [19681])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $140 (int_32 $0)
{
	return CALL $141([11280], $0)
}

void .FUNC $143 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19664])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [19472]
	$3 = (((int_32)$1 * (int_32)[12]) + [19472])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $142 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11272]) == 0) ){ goto $label$2 }
	$2 = *([0] + [11276])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [11272]) = [1]
	$2 = ($2 << [16])
	*([0] + [11276]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11276])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [11276]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [11272]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [11272]) = [1]
	$3 = ($3 << [16])
	*([0] + [11276]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11276])
	
.LABEL $label$10
	*([0] + [11276]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9177])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $140($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $73($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $74(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [8992])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9041])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9200])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9200])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9675])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [9721])
	$5 = *($1)
	$6 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [9831])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9874])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9893])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9772])
	CALL eosio_assert([1], [9296])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9296])
	CALL memcpy(($4 + [16]), $6, [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [9589])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [8992])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9041])
	*($5 + [24]) = $1
	CALL $89(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [28])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $90(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9296])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9296])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $129($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $39 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9126])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $72($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9126])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [11111])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [11156])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [11206])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9177])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $140($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $108($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1 + [16])
	*($3 + [8]) = $7
	$8 = *($1 + [24])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [16]) = $8
	*($2 + [8]) = (CASTING uint_64)(uint_32 $7)
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9374])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $57($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9200])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	$3 = (*($2) + [40])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $129($0)
	
.LABEL $label$2
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$8 = ($2 + ((int_32)$5 * (int_32)[40]))
	$3 = $8
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$9 = ($2 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$10 }
	$11 = ($3 - $10)
	$2 = [0]
	
.LOOP $label$11:
	$1 = ($10 + $2)
	*((($3 = ($8 + $2)) + [-32])) = *(($1 + [-32]))
	*(($3 + [-40])) = *(($1 + [-40]))
	*(($6 = ($3 + [-24]))) = (int_64)0
	*(($4 = ($3 + [-16]))) = [0]
	$5 = ($1 + [-24])
	*($6) = *($5)
	$6 = ($1 + [-16])
	*($4) = *($6)
	*($6) = [0]
	*(($6 = ($3 + [-12]))) = (int_64)0
	*(($3 = ($3 + [-4]))) = [0]
	$4 = ($1 + [-12])
	*($6) = *($4)
	*($5) = (int_64)0
	$1 = ($1 + [-4])
	*($3) = *($1)
	*($1) = [0]
	*($4) = (int_64)0
	$2 = ($2 + [-40])
	if ( ((int_32)$11 != (int_32)$2) ){ goto $label$11 }
	$8 = ($8 + $2)
	$3 = *(($0 + [4]))
	$6 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$6 = $3
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = *(($3 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($3 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$1 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$15 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$15
	$3 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($6 == 0) ){ goto $label$1 }
	CALL _ZdlPv($6)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)$0), [9126])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157493845350678528, (int_64)-4157493845350678528)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $31($0, $4)
	CALL eosio_assert(((int_32)*($4 + [4]) == (int_32)$0), [9126])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9640])
	CALL $55($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $56($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9177])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $140($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([40])
	$6 = CALL $104($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1)
	*($3 + [8]) = $7
	$8 = *($1 + [28])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $83(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [9126])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3660748648133689344, (int_64)-3660748648133689344)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $29($0, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [9126])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9640])
	CALL $53($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $54($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9177])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $140($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([16])) + [4]) = $0
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9200])
	CALL memcpy($4, $2, [1])
	CALL eosio_assert(((int_32)$5 != (int_32)[1]), [9200])
	CALL memcpy(($4 + [1]), ($2 + [1]), [1])
	*($4 + [8]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)-4157493845350678528
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)-4157493845350678528
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

void .FUNC $129 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $127 ()
{
	CALL abort()
	(unreachable)
}