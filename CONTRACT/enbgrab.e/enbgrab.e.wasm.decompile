(data (i32.const 4) " x\00\00")
(data (i32.const 16) "dealbill\00")
(data (i32.const 32) "enbank.x\00")
(data (i32.const 48) "error\00")
(data (i32.const 64) "onerror\00")
(data (i32.const 80) "eosio\00")
(data (i32.const 96) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 160) "eosio.token\00")
(data (i32.const 176) "transfer\00")
(data (i32.const 192) "read\00")
(data (i32.const 208) "unable to find key\00")
(data (i32.const 240) "First set stats to \00")
(data (i32.const 272) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 336) "cannot pass end iterator to modify\00")
(data (i32.const 384) "Change stats to \00")
(data (i32.const 416) "object passed to modify is not in multi_index\00")
(data (i32.const 464) "cannot modify objects in table of another contract\00")
(data (i32.const 528) "updater cannot change primary key when modifying an object\00")
(data (i32.const 592) "write\00")
(data (i32.const 608) "error reading iterator\00")
(data (i32.const 640) "cannot create objects in table of another contract\00")
(data (i32.const 704) "Havn\'t start yet!\00")
(data (i32.const 736) "Temporarily out of service!\00")
(data (i32.const 768) "Order Error\00")
(data (i32.const 784) "cannot pass end iterator to erase\00")
(data (i32.const 832) "cannot increment end iterator\00")
(data (i32.const 864) "object passed to erase is not in multi_index\00")
(data (i32.const 912) "cannot erase objects in table of another contract\00")
(data (i32.const 976) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1040) "get\00")
(data (i32.const 1056) "invalid symbol name\00")
(data (i32.const 1088) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1152) "Order for package already exists\00")
(data (i32.const 1200) "-\00")
(data (i32.const 1216) ".\00")
(data (i32.const 1232) "Memo format error\00")
(data (i32.const 1264) "First set price to \00")
(data (i32.const 1296) "Change price to \00")
(data (i32.const 1328) "We don\'t have a price!\00")
(data (i32.const 1360) "Invalid token transfer\00")
(data (i32.const 1392) "Quantity must be enough\00")
(data (i32.const 1424) "Havn\'t record this creator\00")
(data (i32.const 1456) "Havn\'t record this token\00")
(data (i32.const 1488) "You have already got this token\00")
(data (i32.const 1520) "active\00")
(data (i32.const 1536) "Congratulations!\00")
(data (i32.const 1568) "We only accepts EOS\00")
(data (i32.const 1600) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 1856) "carry == 0\00")
(data (i32.const 1872) "./eosioairdrop.hpp\00")
(data (i32.const 1904) "DecodeBase58\00")
(data (i32.const 10320) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10416) "\887\00\00")
(data (i32.const 10432) "Assertion failed: %s (%s: %s: %d)\n\00")
(data (i32.const 10468) "\f8(\00\00")
(data (i32.const 10488) "\05\00\00\00\00\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\08\00\00\00\t\00\00\00\98)\00\00\00\04\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 11680) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 12144) "0123456789ABCDEF")
(data (i32.const 12160) "-+   0X0x\00")
(data (i32.const 12176) "(null)\00")
(data (i32.const 12192) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 12224) "inf\00")
(data (i32.const 12240) "INF\00")
(data (i32.const 12256) "nan\00")
(data (i32.const 12272) "NAN\00")
(data (i32.const 12288) ".\00")
(data (i32.const 12304) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 12400) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 14216) "\05\00\00\00\00\00\00\00\00\00\00\00\07\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\n\00\00\00\t\00\00\00 8\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "current_receiver" (func $fimport$13 (result i64)))
(import "env" "current_time" (func $fimport$14 (result i64)))
(import "env" "db_find_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "db_store_i64" (func $fimport$19 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$20 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$21 (param i32 i32)))
(import "env" "memcpy" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$25 (param i32)))
(import "env" "prints_l" (func $fimport$26 (param i32 i32)))
(import "env" "printui" (func $fimport$27 (param i64)))
(import "env" "read_action_data" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$29 (param i64)))
(import "env" "require_auth2" (func $fimport$30 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$31 (param i64)))
(import "env" "send_inline" (func $fimport$32 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN12eosnamedapp18dealbillEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $6))
(export "_ZN12eosnamedapp17addbillEyyRNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_S7_" (func $10))
(export "_ZN12eosnamedapp110deletebillEy" (func $13))
(export "_Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE" (func $67))
(export "_Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE" (func $70))
(export "malloc" (func $71))
(export "free" (func $74))
(export "isspace" (func $84))
(export "tolower" (func $85))
(export "__assert_fail" (func $86))
(export "fprintf" (func $87))
(export "fflush" (func $88))
(export "__ofl_lock" (func $89))
(export "__lockfile" (func $90))
(export "__unlockfile" (func $91))
(export "__ofl_unlock" (func $92))
(export "__unlock" (func $93))
(export "__lock" (func $94))
(export "__stdio_close" (func $95))
(export "__stdout_write" (func $96))
(export "__stdio_seek" (func $97))
(export "__stdio_write" (func $98))
(export "vfprintf" (func $99))
(export "__fwritex" (func $101))
(export "__errno_location" (func $103))
(export "strerror" (func $104))
(export "strnlen" (func $105))
(export "wctomb" (func $106))
(export "__signbitl" (func $107))
(export "__fpclassifyl" (func $108))
(export "frexpl" (func $109))
(export "wcrtomb" (func $110))
(export "memchr" (func $111))
(export "__lctrans" (func $112))
(export "__lctrans_impl" (func $113))
(export "__mo_lookup" (func $114))
(export "strcmp" (func $115))
(export "__towrite" (func $116))
(export "memcmp" (func $117))
(export "strlen" (func $118))
(table $0 11 11 anyfunc)
(elem (i32.const 0) $119 $6 $13 $14 $12 $10 $8 $95 $96 $97 $98)



int_32 .FUNC __stdio_write (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $100([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $100($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $100($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

void .FUNC __lock (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC __stdio_close (int_32 $0)
{
	return [0]
}

int_32 .FUNC __stdout_write (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL __stdio_write($0, $1, $2)
}

int_64 .FUNC __stdio_seek (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC __unlockfile (int_32 $0)
{
}

void .FUNC __ofl_unlock ()
{
	CALL __unlock([10472])
}

void .FUNC __unlock (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = *([0] + [4])
	$13 = $14
	$2 = *($0)
	$3 = *($0 + [4])
	$8 = (*($3) + ((int_32)*(*($3 + [4])) * (int_32)[12]))
	if ( (*($8) & [1]) ){ goto $label$2 }
	$8 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$2
	$8 = *($8 + [8])
	
.LABEL $label$1
	$7 = [-1]
	
.LOOP $label$3:
	$6 = ($8 + $7)
	$4 = ($7 + [1])
	$7 = $4
	if ( *(($6 + [1])) ){ goto $label$3 }
	$5 = (CASTING uint_64)(uint_32 $4)
	$10 = (int_64)0
	$9 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$4:
	$12 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$5) ){ goto $label$5 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [165])
	goto $label$6 
	
.LABEL $label$7
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$4 }
	*($1) = $11
	*($1 + [8]) = *(*($3 + [8]))
	$7 = $14
	$8 = ($7 + [-16])
	*([0] + [4]) = $8
	CALL eosio_assert([1], [592])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy(($7 + [-8]), ($1 + [8]), [8])
	$10 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)5031766160157179904, *(*($0 + [8])), $10, $8, [16])
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = $13
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [592])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [592])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49(CALL $49($0, ($1 + [496])), ($1 + [508])), ($1 + [520])), ($1 + [532])), ($1 + [544])), ($1 + [556])), ($1 + [568])), ($1 + [580])), ($1 + [592])), ($1 + [604])), ($1 + [616])), ($1 + [628])), ($1 + [640])), ($1 + [652])), ($1 + [664])), ($1 + [676])), ($1 + [688])), ($1 + [700])), ($1 + [712])), ($1 + [724])), ($1 + [736])), ($1 + [748])), ($1 + [760])), ($1 + [772])), ($1 + [784])), ($1 + [796])), ($1 + [808])), ($1 + [820])), ($1 + [832])), ($1 + [844]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [168]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [176]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [184]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [192]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [200]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [208]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [216]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [224]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [232]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [240]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [248]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [256]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [264]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [272]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [280]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [288]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [296]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [304]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [312]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [320]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [328]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [336]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [344]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [352]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [360]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [368]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [376]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [384]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [392]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [400]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [408]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [416]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [424]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [432]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [440]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [448]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [456]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [464]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [472]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [480]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($0 + [4]), ($1 + [488]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [608])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $75([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [192])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [192])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $76($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [608])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $75([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [192])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [192])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $39(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $76($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $40 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5031766160157179904, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $41($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*($0) + [496])
	*($0) = $4
	$2 = *($1 + [496])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [500])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $4
	$2 = *(($1 + [496]))
	$2 = ( *(($1 + [500])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$2
	$2 = *($1 + [508])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [512])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *(($1 + [508]))
	$2 = ( *(($1 + [512])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$4
	$2 = *($1 + [520])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [524])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	*($0) = $4
	$2 = *(($1 + [520]))
	$2 = ( *(($1 + [524])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$6
	$2 = *($1 + [532])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [536])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$7 }
	*($0) = $4
	$2 = *(($1 + [532]))
	$2 = ( *(($1 + [536])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$8
	$2 = *($1 + [544])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [548])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$9:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $4
	$2 = *(($1 + [544]))
	$2 = ( *(($1 + [548])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$10 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$10
	$2 = *($1 + [556])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [560])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$11:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$11 }
	*($0) = $4
	$2 = *(($1 + [556]))
	$2 = ( *(($1 + [560])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$12 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$12
	$2 = *($1 + [568])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [572])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$13:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$13 }
	*($0) = $4
	$2 = *(($1 + [568]))
	$2 = ( *(($1 + [572])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$14 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$14
	$2 = *($1 + [580])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [584])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$15:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $4
	$2 = *(($1 + [580]))
	$2 = ( *(($1 + [584])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$16 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$16
	$2 = *($1 + [592])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [596])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$17:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$17 }
	*($0) = $4
	$2 = *(($1 + [592]))
	$2 = ( *(($1 + [596])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$18 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$18
	$2 = *($1 + [604])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [608])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$19:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$19 }
	*($0) = $4
	$2 = *(($1 + [604]))
	$2 = ( *(($1 + [608])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$20 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$20
	$2 = *($1 + [616])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [620])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$21:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$21 }
	*($0) = $4
	$2 = *(($1 + [616]))
	$2 = ( *(($1 + [620])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$22 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$22
	$2 = *($1 + [628])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [632])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$23:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$23 }
	*($0) = $4
	$2 = *(($1 + [628]))
	$2 = ( *(($1 + [632])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$24 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$24
	$2 = *($1 + [640])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [644])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$25:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$25 }
	*($0) = $4
	$2 = *(($1 + [640]))
	$2 = ( *(($1 + [644])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$26 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$26
	$2 = *($1 + [652])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [656])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$27:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$27 }
	*($0) = $4
	$2 = *(($1 + [652]))
	$2 = ( *(($1 + [656])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$28 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$28
	$2 = *($1 + [664])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [668])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$29:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$29 }
	*($0) = $4
	$2 = *(($1 + [664]))
	$2 = ( *(($1 + [668])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$30 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$30
	$2 = *($1 + [676])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [680])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$31:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$31 }
	*($0) = $4
	$2 = *(($1 + [676]))
	$2 = ( *(($1 + [680])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$32 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$32
	$2 = *($1 + [688])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [692])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$33:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$33 }
	*($0) = $4
	$2 = *(($1 + [688]))
	$2 = ( *(($1 + [692])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$34 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$34
	$2 = *($1 + [700])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [704])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$35:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$35 }
	*($0) = $4
	$2 = *(($1 + [700]))
	$2 = ( *(($1 + [704])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$36 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$36
	$2 = *($1 + [712])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [716])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$37:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$37 }
	*($0) = $4
	$2 = *(($1 + [712]))
	$2 = ( *(($1 + [716])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$38 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$38
	$2 = *($1 + [724])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [728])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$39:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$39 }
	*($0) = $4
	$2 = *(($1 + [724]))
	$2 = ( *(($1 + [728])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$40 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$40
	$2 = *($1 + [736])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [740])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$41:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$41 }
	*($0) = $4
	$2 = *(($1 + [736]))
	$2 = ( *(($1 + [740])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$42 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$42
	$2 = *($1 + [748])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [752])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$43:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$43 }
	*($0) = $4
	$2 = *(($1 + [748]))
	$2 = ( *(($1 + [752])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$44 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$44
	$2 = *($1 + [760])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [764])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$45:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$45 }
	*($0) = $4
	$2 = *(($1 + [760]))
	$2 = ( *(($1 + [764])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$46 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$46
	$2 = *($1 + [772])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [776])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$47:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$47 }
	*($0) = $4
	$2 = *(($1 + [772]))
	$2 = ( *(($1 + [776])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$48 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$48
	$2 = *($1 + [784])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [788])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$49:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$49 }
	*($0) = $4
	$2 = *(($1 + [784]))
	$2 = ( *(($1 + [788])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$50 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$50
	$2 = *($1 + [796])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [800])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$51:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$51 }
	*($0) = $4
	$2 = *(($1 + [796]))
	$2 = ( *(($1 + [800])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$52 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$52
	$2 = *($1 + [808])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [812])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$53:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$53 }
	*($0) = $4
	$2 = *(($1 + [808]))
	$2 = ( *(($1 + [812])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$54 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$54
	$2 = *($1 + [820])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [824])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$55:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$55 }
	*($0) = $4
	$2 = *(($1 + [820]))
	$2 = ( *(($1 + [824])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$56 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$56
	$2 = *($1 + [832])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [836])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$57:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$57 }
	*($0) = $4
	$2 = *(($1 + [832]))
	$2 = ( *(($1 + [836])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$58 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$58
	$2 = *($1 + [844])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [848])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$59:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$59 }
	*($0) = $4
	$1 = *(($1 + [844]))
	$1 = ( *(($1 + [848])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$60 }
	*($0) = ($1 + $4)
	
.LABEL $label$60
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	$5 = *($0 + [4])
	*($1) = *(*($5))
	*($1 + [8]) = *(*($5 + [4]))
	$2 = *($0)
	$3 = *($5 + [8])
	*($1 + [16]) = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	$3 = *($5 + [8])
	*($1 + [32]) = *($3 + [16])
	*(($1 + [40])) = *(($3 + [24]))
	$3 = *($5 + [8])
	*($1 + [48]) = *($3 + [32])
	*(($1 + [56])) = *(($3 + [40]))
	$3 = *($5 + [8])
	*($1 + [64]) = *($3 + [48])
	*(($1 + [72])) = *(($3 + [56]))
	$3 = *($5 + [8])
	*($1 + [80]) = *($3 + [64])
	*(($1 + [88])) = *(($3 + [72]))
	$3 = *($5 + [8])
	*($1 + [96]) = *($3 + [80])
	*(($1 + [104])) = *(($3 + [88]))
	$3 = *($5 + [8])
	*($1 + [112]) = *($3 + [96])
	*(($1 + [120])) = *(($3 + [104]))
	$3 = *($5 + [8])
	*($1 + [128]) = *($3 + [112])
	*(($1 + [136])) = *(($3 + [120]))
	$3 = *($5 + [8])
	*($1 + [144]) = *($3 + [128])
	*(($1 + [152])) = *(($3 + [136]))
	$3 = *($5 + [8])
	*($1 + [160]) = *($3 + [144])
	*(($1 + [168])) = *(($3 + [152]))
	$3 = *($5 + [8])
	*($1 + [176]) = *($3 + [160])
	*(($1 + [184])) = *(($3 + [168]))
	$3 = *($5 + [8])
	*($1 + [192]) = *($3 + [176])
	*(($1 + [200])) = *(($3 + [184]))
	$3 = *($5 + [8])
	*($1 + [208]) = *($3 + [192])
	*(($1 + [216])) = *(($3 + [200]))
	$3 = *($5 + [8])
	*($1 + [224]) = *($3 + [208])
	*(($1 + [232])) = *(($3 + [216]))
	$3 = *($5 + [8])
	*($1 + [240]) = *($3 + [224])
	*(($1 + [248])) = *(($3 + [232]))
	$3 = *($5 + [8])
	*($1 + [256]) = *($3 + [240])
	*(($1 + [264])) = *(($3 + [248]))
	$3 = *($5 + [8])
	*($1 + [272]) = *($3 + [256])
	*(($1 + [280])) = *(($3 + [264]))
	$3 = *($5 + [8])
	*($1 + [288]) = *($3 + [272])
	*(($1 + [296])) = *(($3 + [280]))
	$3 = *($5 + [8])
	*($1 + [304]) = *($3 + [288])
	*(($1 + [312])) = *(($3 + [296]))
	$3 = *($5 + [8])
	*($1 + [320]) = *($3 + [304])
	*(($1 + [328])) = *(($3 + [312]))
	$3 = *($5 + [8])
	*($1 + [336]) = *($3 + [320])
	*(($1 + [344])) = *(($3 + [328]))
	$3 = *($5 + [8])
	*($1 + [352]) = *($3 + [336])
	*(($1 + [360])) = *(($3 + [344]))
	$3 = *($5 + [8])
	*($1 + [368]) = *($3 + [352])
	*(($1 + [376])) = *(($3 + [360]))
	$3 = *($5 + [8])
	*($1 + [384]) = *($3 + [368])
	*(($1 + [392])) = *(($3 + [376]))
	$3 = *($5 + [8])
	*($1 + [400]) = *($3 + [384])
	*(($1 + [408])) = *(($3 + [392]))
	$3 = *($5 + [8])
	*($1 + [416]) = *($3 + [400])
	*(($1 + [424])) = *(($3 + [408]))
	$3 = *($5 + [8])
	*($1 + [432]) = *($3 + [416])
	*(($1 + [440])) = *(($3 + [424]))
	$3 = *($5 + [8])
	*($1 + [448]) = *($3 + [432])
	*(($1 + [456])) = *(($3 + [440]))
	$3 = *($5 + [8])
	*($1 + [464]) = *($3 + [448])
	*(($1 + [472])) = *(($3 + [456]))
	$3 = *($5 + [8])
	*($1 + [480]) = *($3 + [464])
	*(($1 + [488])) = *(($3 + [472]))
	CALL $78(($1 + [496]), *($5 + [12]))
	CALL $78(($1 + [508]), (*($5 + [12]) + [12]))
	CALL $78(($1 + [520]), (*($5 + [12]) + [24]))
	CALL $78(($1 + [532]), (*($5 + [12]) + [36]))
	CALL $78(($1 + [544]), (*($5 + [12]) + [48]))
	CALL $78(($1 + [556]), (*($5 + [12]) + [60]))
	CALL $78(($1 + [568]), (*($5 + [12]) + [72]))
	CALL $78(($1 + [580]), (*($5 + [12]) + [84]))
	CALL $78(($1 + [592]), (*($5 + [12]) + [96]))
	CALL $78(($1 + [604]), (*($5 + [12]) + [108]))
	CALL $78(($1 + [616]), (*($5 + [12]) + [120]))
	CALL $78(($1 + [628]), (*($5 + [12]) + [132]))
	CALL $78(($1 + [640]), (*($5 + [12]) + [144]))
	CALL $78(($1 + [652]), (*($5 + [12]) + [156]))
	CALL $78(($1 + [664]), (*($5 + [12]) + [168]))
	CALL $78(($1 + [676]), (*($5 + [12]) + [180]))
	CALL $78(($1 + [688]), (*($5 + [12]) + [192]))
	CALL $78(($1 + [700]), (*($5 + [12]) + [204]))
	CALL $78(($1 + [712]), (*($5 + [12]) + [216]))
	CALL $78(($1 + [724]), (*($5 + [12]) + [228]))
	CALL $78(($1 + [736]), (*($5 + [12]) + [240]))
	CALL $78(($1 + [748]), (*($5 + [12]) + [252]))
	CALL $78(($1 + [760]), (*($5 + [12]) + [264]))
	CALL $78(($1 + [772]), (*($5 + [12]) + [276]))
	CALL $78(($1 + [784]), (*($5 + [12]) + [288]))
	CALL $78(($1 + [796]), (*($5 + [12]) + [300]))
	CALL $78(($1 + [808]), (*($5 + [12]) + [312]))
	CALL $78(($1 + [820]), (*($5 + [12]) + [324]))
	CALL $78(($1 + [832]), (*($5 + [12]) + [336]))
	CALL $78(($1 + [844]), (*($5 + [12]) + [348]))
	*(($5 = $6)) = [0]
	CALL $47($5, $1)
	$3 = *($5)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($5 + [4]) = $6
	*($5) = $6
	*($5 + [8]) = ($6 + $3)
	CALL $48($5, $1)
	$4 = *($1)
	*($1 + [860]) = CALL db_store_i64(*($2 + [8]), (int_64)-6228193299614662656, *(*($0 + [8])), $4, $6, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = *([0] + [4])
	$13 = $14
	$2 = *($0)
	$3 = *($0 + [4])
	$8 = (*($3) + ((int_32)*(*($3 + [4])) * (int_32)[12]))
	if ( (*($8) & [1]) ){ goto $label$2 }
	$8 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$2
	$8 = *($8 + [8])
	
.LABEL $label$1
	$7 = [-1]
	
.LOOP $label$3:
	$6 = ($8 + $7)
	$4 = ($7 + [1])
	$7 = $4
	if ( *(($6 + [1])) ){ goto $label$3 }
	$5 = (CASTING uint_64)(uint_32 $4)
	$10 = (int_64)0
	$9 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$4:
	$12 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$5) ){ goto $label$5 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [165])
	goto $label$6 
	
.LABEL $label$7
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$4 }
	*($1) = $11
	*($1 + [8]) = *(*($3 + [8]))
	$7 = $14
	$8 = ($7 + [-16])
	*([0] + [4]) = $8
	CALL eosio_assert([1], [592])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy(($7 + [-8]), ($1 + [8]), [8])
	$10 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)5031766160157179904, *(*($0 + [8])), $10, $8, [16])
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = $13
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = *([0] + [4])
	$13 = $14
	$2 = *($0)
	$3 = *($0 + [4])
	$8 = (*($3) + ((int_32)*(*($3 + [4])) * (int_32)[12]))
	if ( (*($8) & [1]) ){ goto $label$2 }
	$8 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$2
	$8 = *($8 + [8])
	
.LABEL $label$1
	$7 = [-1]
	
.LOOP $label$3:
	$6 = ($8 + $7)
	$4 = ($7 + [1])
	$7 = $4
	if ( *(($6 + [1])) ){ goto $label$3 }
	$5 = (CASTING uint_64)(uint_32 $4)
	$10 = (int_64)0
	$9 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$4:
	$12 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$5) ){ goto $label$5 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [165])
	goto $label$6 
	
.LABEL $label$7
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$12 = ((int_64)$12 & (int_64)15)
	
.LABEL $label$8
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$4 }
	*($1) = $11
	*($1 + [8]) = *(*($3 + [8]))
	$7 = $14
	$8 = ($7 + [-16])
	*([0] + [4]) = $8
	CALL eosio_assert([1], [592])
	CALL memcpy($8, $1, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy(($7 + [-8]), ($1 + [8]), [8])
	$10 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($2 + [8]), (int_64)5031766160157179904, *(*($0 + [8])), $10, $8, [16])
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = $13
}

void .FUNC $8 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($5 + [56]) = $1
	CALL require_auth(*($0))
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$1 = *($0)
	*($5 + [16]) = $1
	*($5 + [24]) = $1
	$3 = CALL db_find_i64($1, $1, (int_64)-3665743356094152704, $1)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL $52(($5 + [16]), $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($5 + [16])), [272])
	$1 = *($0)
	*($5 + [8]) = ($5 + [56])
	CALL eosio_assert([1], [336])
	CALL $53(($5 + [16]), $3, $1, ($5 + [8]))
	$1 = *(CALL $51(($5 + [16]), *($0), [208]) + [8])
	CALL prints([1296])
	CALL printui($1)
	$2 = *($5 + [40])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($5 + [8]) = $0
	*($5 + [12]) = ($5 + [56])
	CALL $50($5, ($5 + [16]), $1, ($5 + [8]))
	$1 = *(CALL $51(($5 + [16]), *($0), [208]) + [8])
	CALL prints([1264])
	CALL printui($1)
	$2 = *($5 + [40])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $76($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $76($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [192])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN12eosnamedapp18dealbillEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_32 $30
	int_32 $31
	$31 = (*([0] + [4]) - [2080])
	*([0] + [4]) = $31
	$26 = *($0)
	if ( ((int_64)$26 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$26 != (int_64)$2) ){ goto $label$2 }
	CALL require_auth($1)
	CALL require_recipient($1)
	$14 = [0]
	*((($31 + [2008]) + [32])) = [0]
	*($31 + [2024]) = (int_64)-1
	*($31 + [2032]) = (int_64)0
	$2 = *($0)
	*($31 + [2008]) = $2
	*($31 + [2016]) = $2
	$25 = [0]
	$5 = CALL db_find_i64($2, $2, (int_64)3607749779150975488, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$25 = CALL $18(($31 + [2008]), $5)
	CALL eosio_assert(((int_32)*($25 + [16]) == (int_32)($31 + [2008])), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$25 != (int_32)[0]), [704])
	CALL eosio_assert(((int_32)*(CALL $17(($31 + [2008]), *($0), [208]) + [8]) == (int_32)[1]), [736])
	*((($31 + [1968]) + [32])) = [0]
	*($31 + [1984]) = (int_64)-1
	*($31 + [1992]) = (int_64)0
	$2 = *($0)
	*($31 + [1968]) = $2
	*($31 + [1976]) = $2
	$25 = CALL db_find_i64($2, $2, (int_64)-3665743356094152704, $2)
	if ( ((int_32)$25 < (int_32)[0]) ){ goto $label$4 }
	$14 = CALL $52(($31 + [1968]), $25)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)($31 + [1968])), [272])
	
.LABEL $label$4
	$25 = [0]
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [1328])
	$26 = *(CALL $51(($31 + [1968]), *($0), [208]) + [8])
	$2 = *(($3 + [8]))
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [1568])
	$28 = *($3)
	if ( ((uint_64)((int_64)$28 + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$25 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$25 = [0]
	
.LABEL $label$5
	CALL eosio_assert($25, [1360])
	CALL eosio_assert(((uint_64)$28 >= (uint_64)$26), [1392])
	$3 = *($4)
	if ( ($3 & [1]) ){ goto $label$12 }
	$25 = uint_32($3 >> [1])
	if ( ($25 == 0) ){ goto $label$11 }
	$3 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$13:
	$14 = *($3)
	if ( ((uint_32)(($14 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$14 }
	$4 = ((((int_32)$4 * (int_32)[10]) + $14) + [-48])
	
.LABEL $label$14
	$3 = ($3 + [1])
	$25 = ($25 + [-1])
	if ( $25 ){ goto $label$13 }
	goto $label$10 
	
.LABEL $label$12
	$25 = *($4 + [4])
	if ( ($25 == 0) ){ goto $label$11 }
	$5 = ($4 + [8])
	$14 = *($5)
	$4 = [0]
	$3 = [0]
	
.LOOP $label$15:
	if ( ((int_32)*(($14 + $3)) < (int_32)[48]) ){ goto $label$16 }
	if ( ((int_32)*((*($5) + $3)) > (int_32)[57]) ){ goto $label$16 }
	$4 = ((((int_32)$4 * (int_32)[10]) + *((*($5) + $3))) + [-48])
	
.LABEL $label$16
	$3 = ($3 + [1])
	if ( ($3 <= $25) ){ goto $label$15 }
	goto $label$10 
	
.LABEL $label$11
	$4 = [0]
	
.LABEL $label$10
	*((($31 + [1928]) + [32])) = [0]
	*($31 + [1944]) = (int_64)-1
	*($31 + [1952]) = (int_64)0
	$2 = *($0)
	*($31 + [1928]) = $2
	*($31 + [1936]) = $2
	$3 = [0]
	$26 = (CASTING int_64)(int_32 $4)
	$25 = CALL db_find_i64($2, $2, (int_64)-6228193299614662656, $26)
	if ( ((int_32)$25 < (int_32)[0]) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*(CALL $22(($31 + [1928]), $25) + [856]) == (int_32)($31 + [1928])), [272])
	$3 = [1]
	
.LABEL $label$17
	CALL eosio_assert($3, [768])
	$5 = CALL $59(($31 + [1072]), CALL $58(($31 + [1928]), $26, [208]))
	*((($31 + [704]) + [16])) = (int_64)0
	*((($31 + [704]) + [32])) = (int_64)0
	*(($31 + [744])) = [0]
	*($31 + [704]) = (int_64)0
	*($31 + [712]) = (int_64)0
	*($31 + [728]) = (int_64)0
	*(($31 + [748])) = [0]
	*($31 + [752]) = [0]
	*(($31 + [756])) = [0]
	*(($31 + [760])) = [0]
	*($31 + [764]) = [0]
	*(($31 + [768])) = [0]
	*(($31 + [772])) = [0]
	*($31 + [776]) = [0]
	*(($31 + [780])) = [0]
	*(($31 + [784])) = [0]
	*($31 + [788]) = [0]
	*(($31 + [792])) = [0]
	*(($31 + [796])) = [0]
	*($31 + [800]) = [0]
	*(($31 + [804])) = [0]
	*(($31 + [808])) = [0]
	*($31 + [812]) = [0]
	*(($31 + [816])) = [0]
	*(($31 + [820])) = [0]
	*($31 + [824]) = [0]
	*(($31 + [828])) = [0]
	*(($31 + [832])) = [0]
	*($31 + [836]) = [0]
	*(($31 + [840])) = [0]
	*(($31 + [844])) = [0]
	*($31 + [848]) = [0]
	*(($31 + [852])) = [0]
	*(($31 + [856])) = [0]
	*($31 + [860]) = [0]
	*(($31 + [864])) = [0]
	*(($31 + [868])) = [0]
	*($31 + [872]) = [0]
	*(($31 + [876])) = [0]
	*(($31 + [880])) = [0]
	*($31 + [884]) = [0]
	*(($31 + [888])) = [0]
	*(($31 + [892])) = [0]
	*($31 + [896]) = [0]
	*(($31 + [900])) = [0]
	*(($31 + [904])) = [0]
	*($31 + [908]) = [0]
	*(($31 + [912])) = [0]
	*(($31 + [916])) = [0]
	*($31 + [920]) = [0]
	*(($31 + [924])) = [0]
	*(($31 + [928])) = [0]
	*($31 + [932]) = [0]
	*(($31 + [936])) = [0]
	*(($31 + [940])) = [0]
	*($31 + [944]) = [0]
	*(($31 + [948])) = [0]
	*(($31 + [952])) = [0]
	*($31 + [956]) = [0]
	*(($31 + [960])) = [0]
	*(($31 + [964])) = [0]
	*($31 + [968]) = [0]
	*(($31 + [972])) = [0]
	*(($31 + [976])) = [0]
	*($31 + [980]) = [0]
	*(($31 + [984])) = [0]
	*(($31 + [988])) = [0]
	*($31 + [992]) = [0]
	*(($31 + [996])) = [0]
	*(($31 + [1000])) = [0]
	*($31 + [1004]) = [0]
	*(($31 + [1008])) = [0]
	*(($31 + [1012])) = [0]
	*($31 + [1016]) = [0]
	*(($31 + [1020])) = [0]
	*(($31 + [1024])) = [0]
	*($31 + [1028]) = [0]
	*(($31 + [1032])) = [0]
	*(($31 + [1036])) = [0]
	*($31 + [1040]) = [0]
	*(($31 + [1044])) = [0]
	*(($31 + [1048])) = [0]
	*($31 + [1052]) = [0]
	*(($31 + [1056])) = [0]
	*(($31 + [1060])) = [0]
	$14 = ($31 + [704])
	$4 = ($31 + [224])
	
.LOOP $label$18:
	*($4 + [8]) = (int_64)1398362884
	*($4) = (int_64)0
	CALL eosio_assert([1], [1088])
	$2 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$25 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$25 = [0]
	
.LABEL $label$19
	CALL eosio_assert($25, [1056])
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$14) ){ goto $label$18 }
	*((($31 + [224]) + [24])) = *(($5 + [40]))
	*($31 + [224]) = *($5 + [16])
	*($31 + [240]) = *($5 + [32])
	*($31 + [232]) = *(($5 + [24]))
	*((($31 + [224]) + [40])) = *(($5 + [56]))
	*($31 + [256]) = *($5 + [48])
	*((($31 + [224]) + [56])) = *(($5 + [72]))
	*($31 + [272]) = *($5 + [64])
	*((($31 + [224]) + [72])) = *(($5 + [88]))
	*($31 + [288]) = *($5 + [80])
	*((($31 + [224]) + [88])) = *(($5 + [104]))
	*($31 + [304]) = *($5 + [96])
	*((($31 + [224]) + [104])) = *(($5 + [120]))
	*($31 + [320]) = *($5 + [112])
	*((($31 + [224]) + [120])) = *(($5 + [136]))
	*($31 + [336]) = *($5 + [128])
	*((($31 + [224]) + [136])) = *(($5 + [152]))
	*($31 + [352]) = *($5 + [144])
	*((($31 + [224]) + [152])) = *(($5 + [168]))
	*($31 + [368]) = *($5 + [160])
	*((($31 + [224]) + [168])) = *(($5 + [184]))
	*($31 + [384]) = *($5 + [176])
	*((($31 + [224]) + [184])) = *(($5 + [200]))
	*($31 + [400]) = *($5 + [192])
	*((($31 + [224]) + [200])) = *(($5 + [216]))
	*($31 + [416]) = *($5 + [208])
	*((($31 + [224]) + [216])) = *(($5 + [232]))
	*($31 + [432]) = *($5 + [224])
	*((($31 + [224]) + [232])) = *(($5 + [248]))
	*($31 + [448]) = *($5 + [240])
	*((($31 + [224]) + [248])) = *(($5 + [264]))
	*($31 + [464]) = *($5 + [256])
	*((($31 + [224]) + [264])) = *(($5 + [280]))
	*($31 + [480]) = *($5 + [272])
	*((($31 + [224]) + [280])) = *(($5 + [296]))
	*($31 + [496]) = *($5 + [288])
	*((($31 + [224]) + [296])) = *(($5 + [312]))
	*($31 + [512]) = *($5 + [304])
	*((($31 + [224]) + [312])) = *(($5 + [328]))
	*($31 + [528]) = *($5 + [320])
	*((($31 + [224]) + [328])) = *(($5 + [344]))
	*($31 + [544]) = *($5 + [336])
	$30 = [360]
	*((($31 + [224]) + [344])) = *(($5 + [360]))
	*($31 + [560]) = *($5 + [352])
	*((($31 + [224]) + [360])) = *(($5 + [376]))
	*($31 + [576]) = *($5 + [368])
	*((($31 + [224]) + [376])) = *(($5 + [392]))
	*($31 + [592]) = *($5 + [384])
	*((($31 + [224]) + [392])) = *(($5 + [408]))
	*($31 + [608]) = *($5 + [400])
	*((($31 + [224]) + [408])) = *(($5 + [424]))
	*($31 + [624]) = *($5 + [416])
	*((($31 + [224]) + [424])) = *(($5 + [440]))
	*($31 + [640]) = *($5 + [432])
	*((($31 + [224]) + [440])) = *(($5 + [456]))
	*($31 + [656]) = *($5 + [448])
	*((($31 + [224]) + [456])) = *(($5 + [472]))
	*($31 + [672]) = *($5 + [464])
	*((($31 + [224]) + [472])) = *(($5 + [488]))
	*($31 + [688]) = *($5 + [480])
	CALL $78(($31 + [704]), ($5 + [496]))
	CALL $78((($31 + [704]) | [12]), ($5 + [508]))
	CALL $78((($31 + [704]) + [24]), ($5 + [520]))
	CALL $78((($31 + [704]) + [36]), ($5 + [532]))
	CALL $78(($31 + [752]), ($5 + [544]))
	CALL $78(($31 + [764]), ($5 + [556]))
	CALL $78((($31 + [704]) + [72]), ($5 + [568]))
	CALL $78(($31 + [788]), ($5 + [580]))
	CALL $78(($31 + [800]), ($5 + [592]))
	CALL $78(($31 + [812]), ($5 + [604]))
	CALL $78((($31 + [704]) + [120]), ($5 + [616]))
	CALL $78(($31 + [836]), ($5 + [628]))
	CALL $78(($31 + [848]), ($5 + [640]))
	CALL $78(($31 + [860]), ($5 + [652]))
	CALL $78((($31 + [704]) + [168]), ($5 + [664]))
	CALL $78(($31 + [884]), ($5 + [676]))
	CALL $78(($31 + [896]), ($5 + [688]))
	CALL $78(($31 + [908]), ($5 + [700]))
	CALL $78((($31 + [704]) + [216]), ($5 + [712]))
	CALL $78(($31 + [932]), ($5 + [724]))
	CALL $78(($31 + [944]), ($5 + [736]))
	CALL $78(($31 + [956]), ($5 + [748]))
	CALL $78((($31 + [704]) + [264]), ($5 + [760]))
	CALL $78(($31 + [980]), ($5 + [772]))
	CALL $78(($31 + [992]), ($5 + [784]))
	CALL $78(($31 + [1004]), ($5 + [796]))
	CALL $78((($31 + [704]) + [312]), ($5 + [808]))
	CALL $78(($31 + [1028]), ($5 + [820]))
	CALL $78(($31 + [1040]), ($5 + [832]))
	CALL $78(($31 + [1052]), ($5 + [844]))
	if ( (int_64)(*($5 + [8]) == 0) ){ goto $label$24 }
	$11 = (($31 + [104]) + [24])
	$10 = (($31 + [64]) + [28])
	$9 = (($31 + [16]) + [32])
	$8 = (($31 + [16]) + [16])
	$7 = ($31 | [1])
	$6 = (($31 + [16]) | [8])
	$21 = ($31 + [84])
	$22 = (($31 + [16]) + [40])
	$23 = (int_64)1
	$24 = [1]
	
.LOOP $label$25:
	$29 = *($0)
	*((($31 + [184]) + [8])) = $29
	*((($31 + [184]) + [16])) = (int_64)-1
	*(($17 = (($31 + [184]) + [24]))) = (int_64)0
	*((($31 + [184]) + [32])) = [0]
	*($31 + [184]) = $29
	$12 = ((int_64)$23 + (int_64)-1)
	$19 = ($24 + [-1])
	$13 = (($31 + [704]) + ((int_32)$19 * (int_32)[12]))
	if ( (*($13) & [1]) ){ goto $label$27 }
	$3 = ($13 + [1])
	goto $label$26 
	
.LABEL $label$27
	$3 = *((($31 + [704]) + ((int_32)(CASTING uint_32)(uint_64 $12) * (int_32)[12])) + [8])
	
.LABEL $label$26
	$25 = [-1]
	
.LOOP $label$28:
	$4 = ($3 + $25)
	$14 = ($25 + [1])
	$25 = $14
	if ( *(($4 + [1])) ){ goto $label$28 }
	$15 = (CASTING uint_64)(uint_32 $14)
	$2 = (int_64)0
	$26 = (int_64)59
	$27 = (int_64)0
	
.LOOP $label$29:
	$28 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$15) ){ goto $label$30 }
	$25 = *($3)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$25 = ($25 + [165])
	goto $label$31 
	
.LABEL $label$32
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$28 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$34 }
	$28 = ((int_64)((int_64)$28 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	goto $label$33 
	
.LABEL $label$34
	$28 = ((int_64)$28 & (int_64)15)
	
.LABEL $label$33
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$27 = ((int_64)$28 | (int_64)$27)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$29 }
	$3 = [0]
	$25 = CALL db_find_i64($29, $29, (int_64)5031766160157179904, $27)
	if ( ((int_32)$25 < (int_32)[0]) ){ goto $label$35 }
	$3 = CALL $41(($31 + [184]), $25)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($31 + [184])), [272])
	
.LABEL $label$35
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1424])
	if ( (*($13) & [1]) ){ goto $label$37 }
	$3 = ($13 + [1])
	goto $label$36 
	
.LABEL $label$37
	$3 = *((($31 + [704]) + ((int_32)(CASTING uint_32)(uint_64 $12) * (int_32)[12])) + [8])
	
.LABEL $label$36
	$25 = [-1]
	
.LOOP $label$38:
	$4 = ($3 + $25)
	$14 = ($25 + [1])
	$25 = $14
	if ( *(($4 + [1])) ){ goto $label$38 }
	$15 = (CASTING uint_64)(uint_32 $14)
	$2 = (int_64)0
	$26 = (int_64)59
	$27 = (int_64)0
	
.LOOP $label$39:
	$28 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$15) ){ goto $label$40 }
	$25 = *($3)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$25 = ($25 + [165])
	goto $label$41 
	
.LABEL $label$42
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$28 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$40
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$44 }
	$28 = ((int_64)((int_64)$28 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	goto $label$43 
	
.LABEL $label$44
	$28 = ((int_64)$28 & (int_64)15)
	
.LABEL $label$43
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$27 = ((int_64)$28 | (int_64)$27)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$39 }
	$2 = *(CALL $40(($31 + [184]), $27, [208]) + [8])
	*((($31 + [144]) + [8])) = $2
	*((($31 + [144]) + [16])) = (int_64)-1
	*(($18 = (($31 + [144]) + [24]))) = (int_64)0
	$3 = [0]
	*((($31 + [144]) + [32])) = [0]
	$26 = *($0)
	*($31 + [144]) = $26
	$19 = (($31 + [224]) + ($19 << [4]))
	$25 = ($19 | [8])
	$4 = CALL db_find_i64($26, $2, (int_64)-3665743484108668928, *($19 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$45 }
	$3 = CALL $42(($31 + [144]), $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($31 + [144])), [272])
	
.LABEL $label$45
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1456])
	$2 = *(CALL $60(($31 + [144]), *($25), [208]) + [8])
	*(($4 = (($31 + [104]) + [8]))) = $1
	*(($25 = (($31 + [104]) + [16]))) = (int_64)-1
	*($11) = (int_64)0
	*(($14 = (($31 + [104]) + [32]))) = [0]
	$26 = *($0)
	*($31 + [104]) = $26
	$3 = CALL db_find_i64($26, $1, (int_64)-3665743328818757632, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$48 }
	CALL eosio_assert(((int_32)*(CALL $61(($31 + [104]), $3) + [16]) == (int_32)($31 + [104])), [272])
	CALL eosio_assert([0], [1488])
	$4 = *($11)
	if ( $4 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$26 = *($0)
	CALL eosio_assert(((int_64)*($31 + [104]) == (int_64)CALL $fimport$13()), [640])
	*(($3 = CALL $75([32])) + [16]) = ($31 + [104])
	*($3 + [8]) = [0]
	*($3) = $2
	CALL eosio_assert([1], [592])
	CALL memcpy(($31 + [16]), $3, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($6, ($3 + [8]), [1])
	$2 = *($3)
	$4 = CALL db_store_i64(*($4), (int_64)-3665743328818757632, $26, $2, ($31 + [16]), [9])
	*($3 + [20]) = $4
	if ( (uint_64)($2 <= *($25)) ){ goto $label$49 }
	*($25) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$49
	*($31 + [64]) = $3
	$2 = *($3)
	*($31 + [16]) = $2
	*($31 + [2064]) = $4
	$20 = (($31 + [104]) + [28])
	$25 = *($20)
	if ( ((uint_32)$25 >= (uint_32)*($14)) ){ goto $label$51 }
	*($25 + [8]) = $2
	*($25 + [16]) = $4
	*($31 + [64]) = [0]
	*($25) = $3
	*($20) = ($25 + [24])
	goto $label$50 
	
.LABEL $label$51
	CALL $62($11, ($31 + [64]), ($31 + [16]), ($31 + [2064]))
	
.LABEL $label$50
	$3 = *($31 + [64])
	*($31 + [64]) = [0]
	if ( ($3 == 0) ){ goto $label$52 }
	CALL $76($3)
	
.LABEL $label$52
	$16 = *($0)
	$2 = (int_64)0
	$28 = (int_64)59
	$3 = [1520]
	$27 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$58 }
	$25 = *($3)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$25 = ($25 + [165])
	goto $label$56 
	
.LABEL $label$58
	$26 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$26 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$26 = ((int_64)((int_64)$26 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	
.LABEL $label$54
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$27 = ((int_64)$26 | (int_64)$27)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$53 }
	if ( (*($13) & [1]) ){ goto $label$60 }
	$3 = ($13 + [1])
	goto $label$59 
	
.LABEL $label$60
	$3 = *((($31 + [704]) + ((int_32)(CASTING uint_32)(uint_64 $12) * (int_32)[12])) + [8])
	
.LABEL $label$59
	$25 = [-1]
	
.LOOP $label$61:
	$4 = ($3 + $25)
	$14 = ($25 + [1])
	$25 = $14
	if ( *(($4 + [1])) ){ goto $label$61 }
	$29 = (CASTING uint_64)(uint_32 $14)
	$2 = (int_64)0
	$26 = (int_64)59
	$15 = (int_64)0
	
.LOOP $label$62:
	$28 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$29) ){ goto $label$63 }
	$25 = *($3)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$25 = ($25 + [165])
	goto $label$64 
	
.LABEL $label$65
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$28 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$63
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$67 }
	$28 = ((int_64)((int_64)$28 & (int_64)31) << (int_64)((int_64)$26 & (int_64)4294967295))
	goto $label$66 
	
.LABEL $label$67
	$28 = ((int_64)$28 & (int_64)15)
	
.LABEL $label$66
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$15 = ((int_64)$28 | (int_64)$15)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$62 }
	$2 = (int_64)0
	$28 = (int_64)59
	$3 = [176]
	$29 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$73 }
	$25 = *($3)
	if ( ((uint_32)(($25 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$25 = ($25 + [165])
	goto $label$71 
	
.LABEL $label$73
	$26 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$25 = ( ($25 + [208]) ? [0] : ((($25 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$26 = (int_64)((int_64)(CASTING uint_64)(uint_32 $25) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$26 = ((int_64)((int_64)$26 & (int_64)31) << (int_64)((int_64)$28 & (int_64)4294967295))
	
.LABEL $label$69
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$29 = ((int_64)$26 | (int_64)$29)
	$28 = ((int_64)$28 + (int_64)-5)
	if ( ((int_64)$28 != (int_64)-6) ){ goto $label$68 }
	*(($25 = ($31 + [8]))) = [0]
	*($31) = (int_64)0
	$3 = CALL strlen([1536])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$76 }
	*($31) = ($3 << [1])
	$4 = $7
	if ( $3 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$14 = (($3 + [16]) & [-16])
	$4 = CALL $75($14)
	*($25) = $4
	*($31) = ($14 | [1])
	*($31 + [4]) = $3
	
.LABEL $label$75
	CALL memcpy($4, [1536], $3)
	
.LABEL $label$74
	*(($4 + $3)) = [0]
	*((($31 + [16]) + [8])) = $1
	*(($8 + [12])) = *(($19 + [12]))
	*(($8 + [8])) = *(($19 + [8]))
	*(($8 + [4])) = *(($19 + [4]))
	*($8) = *($19)
	*($31 + [16]) = *($0)
	*(($9 + [8])) = *($25)
	*($9) = *($31)
	*($31) = [0]
	*($31 + [4]) = [0]
	*($25) = [0]
	*((($31 + [64]) + [8])) = $29
	*($31 + [64]) = $15
	*(($4 = (($31 + [64]) + [16]))) = [0]
	*($21) = [0]
	*(($13 = (($31 + [64]) + [24]))) = [0]
	$3 = CALL $75([16])
	*($4) = $3
	*($3) = $16
	*($3 + [8]) = $27
	*($10) = [0]
	*(($14 = (($31 + [64]) + [32]))) = [0]
	$3 = ($3 + [16])
	*($13) = $3
	*($21) = $3
	*((($31 + [64]) + [36])) = [0]
	$3 = *($9)
	$13 = ( *((($31 + [16]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($13 + [32])
	$2 = (CASTING uint_64)(uint_32 $13)
	
.LOOP $label$77:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$77 }
	if ( ($3 == 0) ){ goto $label$79 }
	CALL $30($10, $3)
	$13 = *($14)
	$3 = *($10)
	goto $label$78 
	
.LABEL $label$79
	$13 = [0]
	$3 = [0]
	
.LABEL $label$78
	*((($31 + [2064]) + [8])) = $13
	*($31 + [2068]) = $3
	*($31 + [2064]) = $3
	*($31 + [2048]) = ($31 + [2064])
	*($31 + [2056]) = ($31 + [16])
	CALL $63(($31 + [2056]), ($31 + [2048]))
	CALL $64(($31 + [2064]), ($31 + [64]))
	$3 = *($31 + [2064])
	CALL send_inline($3, (*($31 + [2068]) - $3))
	$3 = *($31 + [2064])
	if ( ($3 == 0) ){ goto $label$80 }
	*($31 + [2068]) = $3
	CALL $76($3)
	
.LABEL $label$80
	$3 = *($10)
	if ( ($3 == 0) ){ goto $label$81 }
	*($14) = $3
	CALL $76($3)
	
.LABEL $label$81
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$82 }
	*($21) = $3
	CALL $76($3)
	
.LABEL $label$82
	if ( ((*($9) & [1]) == 0) ){ goto $label$83 }
	CALL $76(*($22))
	
.LABEL $label$83
	if ( ((*($31) & [1]) == 0) ){ goto $label$84 }
	CALL $76(*($25))
	
.LABEL $label$84
	$4 = *($11)
	if ( ($4 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	$14 = (($31 + [104]) + [28])
	$3 = *($14)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$86 }
	
.LOOP $label$87:
	$3 = ($3 + [-24])
	$25 = *($3)
	*($3) = [0]
	if ( ($25 == 0) ){ goto $label$88 }
	CALL $76($25)
	
.LABEL $label$88
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$87 }
	$3 = *($11)
	goto $label$85 
	
.LABEL $label$86
	$3 = $4
	
.LABEL $label$85
	*($14) = $4
	CALL $76($3)
	
.LABEL $label$46
	$4 = *($18)
	if ( ($4 == 0) ){ goto $label$89 }
	$14 = (($31 + [144]) + [28])
	$3 = *($14)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$91 }
	
.LOOP $label$92:
	$3 = ($3 + [-24])
	$25 = *($3)
	*($3) = [0]
	if ( ($25 == 0) ){ goto $label$93 }
	CALL $76($25)
	
.LABEL $label$93
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$92 }
	$3 = *($18)
	goto $label$90 
	
.LABEL $label$91
	$3 = $4
	
.LABEL $label$90
	*($14) = $4
	CALL $76($3)
	
.LABEL $label$89
	$4 = *($17)
	if ( ($4 == 0) ){ goto $label$94 }
	$14 = (($31 + [184]) + [28])
	$3 = *($14)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$96 }
	
.LOOP $label$97:
	$3 = ($3 + [-24])
	$25 = *($3)
	*($3) = [0]
	if ( ($25 == 0) ){ goto $label$98 }
	CALL $76($25)
	
.LABEL $label$98
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$97 }
	$3 = *($17)
	goto $label$95 
	
.LABEL $label$96
	$3 = $4
	
.LABEL $label$95
	*($14) = $4
	CALL $76($3)
	
.LABEL $label$94
	$24 = ($24 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	if ( ((uint_64)$23 <= (uint_64)*(($5 + [8]))) ){ goto $label$25 }
	
.LABEL $label$24
	
.LOOP $label$99:
	$3 = (($31 + [704]) + $30)
	if ( ((*(($3 + [-12])) & [1]) == 0) ){ goto $label$100 }
	CALL $76(*(($3 + [-4])))
	
.LABEL $label$100
	$30 = ($30 + [-12])
	if ( $30 ){ goto $label$99 }
	CALL $24($5)
	$4 = *($31 + [1952])
	if ( ($4 == 0) ){ goto $label$101 }
	$14 = ($31 + [1956])
	$3 = *($14)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$103 }
	
.LOOP $label$104:
	$3 = ($3 + [-24])
	$25 = *($3)
	*($3) = [0]
	if ( ($25 == 0) ){ goto $label$105 }
	CALL $24($25)
	CALL $76($25)
	
.LABEL $label$105
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$104 }
	$3 = *(($31 + [1952]))
	goto $label$102 
	
.LABEL $label$103
	$3 = $4
	
.LABEL $label$102
	*($14) = $4
	CALL $76($3)
	
.LABEL $label$101
	$4 = *($31 + [1992])
	if ( ($4 == 0) ){ goto $label$106 }
	$14 = ($31 + [1996])
	$3 = *($14)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$108 }
	
.LOOP $label$109:
	$3 = ($3 + [-24])
	$25 = *($3)
	*($3) = [0]
	if ( ($25 == 0) ){ goto $label$110 }
	CALL $76($25)
	
.LABEL $label$110
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$109 }
	$3 = *(($31 + [1992]))
	goto $label$107 
	
.LABEL $label$108
	$3 = $4
	
.LABEL $label$107
	*($14) = $4
	CALL $76($3)
	
.LABEL $label$106
	$4 = *($31 + [2032])
	if ( ($4 == 0) ){ goto $label$2 }
	$14 = ($31 + [2036])
	$3 = *($14)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$112 }
	
.LOOP $label$113:
	$3 = ($3 + [-24])
	$25 = *($3)
	*($3) = [0]
	if ( ($25 == 0) ){ goto $label$114 }
	CALL $76($25)
	
.LABEL $label$114
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$113 }
	$3 = *(($31 + [2032]))
	goto $label$111 
	
.LABEL $label$112
	$3 = $4
	
.LABEL $label$111
	*($14) = $4
	CALL $76($3)
	
.LABEL $label$2
	*([0] + [4]) = ($31 + [2080])
	return (unreachable)
	
.LABEL $label$1
	CALL $77($31)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [1056])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $56(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $57(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $76(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [112])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [64]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$14 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$20 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [80]
	$7 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$26 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$3 = ($3 + [165])
	goto $label$24 
	
.LABEL $label$26
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$22
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$21 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [96])
	
.LABEL $label$20
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [160]
	$7 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$32 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$3 = ($3 + [165])
	goto $label$30 
	
.LABEL $label$32
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$28
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$27 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$34 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$34 }
	*($9 + [104]) = $0
	*($9 + [100]) = [0]
	*($9 + [96]) = [1]
	*($9 + [8 align=4]) = *($9 + [96])
	CALL $7(($9 + [104]), ($9 + [8]))
	goto $label$33 
	
.LABEL $label$34
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$42 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [176]
	$7 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$48 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$3 = ($3 + [165])
	goto $label$46 
	
.LABEL $label$48
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$44
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$43 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$41 }
	
.LABEL $label$42
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [64]
	$7 = (int_64)0
	
.LOOP $label$49:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$54 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$53 }
	$3 = ($3 + [165])
	goto $label$52 
	
.LABEL $label$54
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$52
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$51
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$50
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$49 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$33 }
	
.LABEL $label$41
	*($9 + [104]) = $0
	if ( ((int_64)$2 <= (int_64)-3075276122728153089) ){ goto $label$58 }
	if ( ((int_64)$2 == (int_64)-3075276122728153088) ){ goto $label$57 }
	if ( ((int_64)$2 == (int_64)3626091793054957568) ){ goto $label$56 }
	if ( ((int_64)$2 != (int_64)5378050746590445568) ){ goto $label$33 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [2]
	*($9 + [40 align=4]) = *($9 + [64])
	CALL $9(($9 + [104]), ($9 + [40]))
	goto $label$33 
	
.LABEL $label$58
	if ( ((int_64)$2 == (int_64)-4417085959225475072) ){ goto $label$55 }
	if ( ((int_64)$2 != (int_64)-4417032211232980992) ){ goto $label$33 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [3]
	*($9 + [48 align=4]) = *($9 + [56])
	CALL $15(($9 + [104]), ($9 + [48]))
	goto $label$33 
	
.LABEL $label$57
	*($9 + [76]) = [0]
	*($9 + [72]) = [4]
	*($9 + [32 align=4]) = *($9 + [72])
	CALL $11(($9 + [104]), ($9 + [32]))
	goto $label$33 
	
.LABEL $label$56
	*($9 + [84]) = [0]
	*($9 + [80]) = [5]
	*($9 + [24 align=4]) = *($9 + [80])
	CALL $11(($9 + [104]), ($9 + [24]))
	goto $label$33 
	
.LABEL $label$55
	*($9 + [92]) = [0]
	*($9 + [88]) = [6]
	*($9 + [16 align=4]) = *($9 + [88])
	CALL $9(($9 + [104]), ($9 + [16]))
	
.LABEL $label$33
	*([0] + [4]) = ($9 + [112])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($5 + [63]) = $1
	CALL require_auth(*($0))
	*(($5 + [48])) = [0]
	*($5 + [32]) = (int_64)-1
	*($5 + [40]) = (int_64)0
	$3 = *($0)
	*($5 + [16]) = $3
	*($5 + [24]) = $3
	$1 = CALL db_find_i64($3, $3, (int_64)3607749779150975488, $3)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL $18(($5 + [16]), $1)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)($5 + [16])), [272])
	$3 = *($0)
	*($5 + [8]) = ($5 + [63])
	CALL eosio_assert([1], [336])
	CALL $19(($5 + [16]), $1, $3, ($5 + [8]))
	$0 = *(CALL $17(($5 + [16]), *($0), [208]) + [8])
	CALL prints([384])
	*($5 + [8]) = $0
	CALL prints_l(($5 + [8]), [1])
	$2 = *($5 + [40])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$3 = *($0)
	*($5 + [8]) = $0
	*($5 + [12]) = ($5 + [63])
	CALL $16($5, ($5 + [16]), $3, ($5 + [8]))
	$0 = *(CALL $17(($5 + [16]), *($0), [208]) + [8])
	CALL prints([240])
	*($5 + [8]) = $0
	CALL prints_l(($5 + [8]), [1])
	$2 = *($5 + [40])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($5 + [44])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $76($1)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($5 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $76($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [192])
	CALL memcpy(($5 + [8]), $3, [1])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 int_32(($6 << [24]) >> [24])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $75([32])
	CALL $21($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $20(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $76($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779150975488, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $18($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC _ZN12eosnamedapp17addbillEyyRNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_S7_ (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_64 $31
	int_64 $32
	int_32 $33
	int_32 $34
	$34 = (*([0] + [4]) - [1680])
	*([0] + [4]) = $34
	*($34 + [1640]) = $1
	*($34 + [1632]) = $2
	CALL require_auth(*($0))
	$30 = [0]
	*((($34 + [1592]) + [32])) = [0]
	*($34 + [1608]) = (int_64)-1
	*($34 + [1616]) = (int_64)0
	$2 = *($0)
	*($34 + [1592]) = $2
	*($34 + [1600]) = $2
	$29 = [0]
	$28 = CALL db_find_i64($2, $2, (int_64)3607749779150975488, $2)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$1 }
	$29 = CALL $18(($34 + [1592]), $28)
	CALL eosio_assert(((int_32)*($29 + [16]) == (int_32)($34 + [1592])), [272])
	$1 = *($34 + [1640])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$29 != (int_32)[0]), [704])
	CALL eosio_assert(((int_32)*(CALL $17(($34 + [1592]), *($0), [208]) + [8]) == (int_32)[1]), [736])
	*((($34 + [1552]) + [32])) = [0]
	*($34 + [1568]) = (int_64)-1
	*($34 + [1576]) = (int_64)0
	$2 = *($0)
	*($34 + [1552]) = $2
	*($34 + [1560]) = $2
	$29 = CALL db_find_i64($2, $2, (int_64)-6228193299614662656, $1)
	if ( ((int_32)$29 < (int_32)[0]) ){ goto $label$2 }
	$30 = CALL $22(($34 + [1552]), $29)
	CALL eosio_assert(((int_32)*($30 + [856]) == (int_32)($34 + [1552])), [272])
	
.LABEL $label$2
	CALL eosio_assert(($30 == 0), [1152])
	$24 = ($34 + [1552])
	$28 = ($34 + [1072])
	
.LOOP $label$3:
	*($28 + [8]) = (int_64)1398362884
	*($28) = (int_64)0
	CALL eosio_assert([1], [1088])
	$2 = (uint_64)*($28 + [8]) >> (uint_64)(int_64)8)
	$30 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$29 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$29 = [0]
	
.LABEL $label$4
	CALL eosio_assert($29, [1056])
	$28 = ($28 + [16])
	if ( ((int_32)$28 != (int_32)$24) ){ goto $label$3 }
	*((($34 + [704]) + [16])) = (int_64)0
	*((($34 + [704]) + [32])) = (int_64)0
	*((($34 + [704]) + [40])) = [0]
	*($34 + [704]) = (int_64)0
	*($34 + [712]) = (int_64)0
	*($34 + [728]) = (int_64)0
	*((($34 + [704]) + [44])) = [0]
	*($34 + [752]) = [0]
	*((($34 + [704]) + [52])) = [0]
	*((($34 + [704]) + [56])) = [0]
	*($34 + [764]) = [0]
	*((($34 + [704]) + [64])) = [0]
	*((($34 + [704]) + [68])) = [0]
	*($34 + [776]) = [0]
	*((($34 + [704]) + [76])) = [0]
	*((($34 + [704]) + [80])) = [0]
	*($34 + [788]) = [0]
	*((($34 + [704]) + [88])) = [0]
	*((($34 + [704]) + [92])) = [0]
	*($34 + [800]) = [0]
	*((($34 + [704]) + [100])) = [0]
	*((($34 + [704]) + [104])) = [0]
	*($34 + [812]) = [0]
	*((($34 + [704]) + [112])) = [0]
	*((($34 + [704]) + [116])) = [0]
	*($34 + [824]) = [0]
	*((($34 + [704]) + [124])) = [0]
	*((($34 + [704]) + [128])) = [0]
	*($34 + [836]) = [0]
	*((($34 + [704]) + [136])) = [0]
	*((($34 + [704]) + [140])) = [0]
	*($34 + [848]) = [0]
	*((($34 + [704]) + [148])) = [0]
	*((($34 + [704]) + [152])) = [0]
	*($34 + [860]) = [0]
	*((($34 + [704]) + [160])) = [0]
	*((($34 + [704]) + [164])) = [0]
	*($34 + [872]) = [0]
	*((($34 + [704]) + [172])) = [0]
	*((($34 + [704]) + [176])) = [0]
	*($34 + [884]) = [0]
	*((($34 + [704]) + [184])) = [0]
	*((($34 + [704]) + [188])) = [0]
	*($34 + [896]) = [0]
	*((($34 + [704]) + [196])) = [0]
	*((($34 + [704]) + [200])) = [0]
	*($34 + [908]) = [0]
	*((($34 + [704]) + [208])) = [0]
	*((($34 + [704]) + [212])) = [0]
	*($34 + [920]) = [0]
	*((($34 + [704]) + [220])) = [0]
	*((($34 + [704]) + [224])) = [0]
	*($34 + [932]) = [0]
	*((($34 + [704]) + [232])) = [0]
	*((($34 + [704]) + [236])) = [0]
	*($34 + [944]) = [0]
	*((($34 + [704]) + [244])) = [0]
	*((($34 + [704]) + [248])) = [0]
	*($34 + [956]) = [0]
	*((($34 + [704]) + [256])) = [0]
	*((($34 + [704]) + [260])) = [0]
	*($34 + [968]) = [0]
	*((($34 + [704]) + [268])) = [0]
	*((($34 + [704]) + [272])) = [0]
	*($34 + [980]) = [0]
	*((($34 + [704]) + [280])) = [0]
	*((($34 + [704]) + [284])) = [0]
	*($34 + [992]) = [0]
	*((($34 + [704]) + [292])) = [0]
	*((($34 + [704]) + [296])) = [0]
	*($34 + [1004]) = [0]
	*((($34 + [704]) + [304])) = [0]
	*((($34 + [704]) + [308])) = [0]
	*($34 + [1016]) = [0]
	*((($34 + [704]) + [316])) = [0]
	*((($34 + [704]) + [320])) = [0]
	*($34 + [1028]) = [0]
	*((($34 + [704]) + [328])) = [0]
	*((($34 + [704]) + [332])) = [0]
	*($34 + [1040]) = [0]
	*((($34 + [704]) + [340])) = [0]
	*((($34 + [704]) + [344])) = [0]
	*($34 + [1052]) = [0]
	*((($34 + [704]) + [352])) = [0]
	*((($34 + [704]) + [356])) = [0]
	*((($34 + [224]) + [16])) = (int_64)0
	*((($34 + [224]) + [32])) = (int_64)0
	*((($34 + [224]) + [40])) = [0]
	*($34 + [224]) = (int_64)0
	*($34 + [232]) = (int_64)0
	*($34 + [248]) = (int_64)0
	*((($34 + [224]) + [44])) = [0]
	*($34 + [272]) = [0]
	*((($34 + [224]) + [52])) = [0]
	*((($34 + [224]) + [56])) = [0]
	*($34 + [284]) = [0]
	*((($34 + [224]) + [64])) = [0]
	*((($34 + [224]) + [68])) = [0]
	*($34 + [296]) = [0]
	*((($34 + [224]) + [76])) = [0]
	*((($34 + [224]) + [80])) = [0]
	*($34 + [308]) = [0]
	*((($34 + [224]) + [88])) = [0]
	*((($34 + [224]) + [92])) = [0]
	*($34 + [320]) = [0]
	*((($34 + [224]) + [100])) = [0]
	*((($34 + [224]) + [104])) = [0]
	*($34 + [332]) = [0]
	*((($34 + [224]) + [112])) = [0]
	*((($34 + [224]) + [116])) = [0]
	*($34 + [344]) = [0]
	*((($34 + [224]) + [124])) = [0]
	*((($34 + [224]) + [128])) = [0]
	*($34 + [356]) = [0]
	*((($34 + [224]) + [136])) = [0]
	*((($34 + [224]) + [140])) = [0]
	*($34 + [368]) = [0]
	*((($34 + [224]) + [148])) = [0]
	*((($34 + [224]) + [152])) = [0]
	*($34 + [380]) = [0]
	*((($34 + [224]) + [160])) = [0]
	*((($34 + [224]) + [164])) = [0]
	*($34 + [392]) = [0]
	*((($34 + [224]) + [172])) = [0]
	*((($34 + [224]) + [176])) = [0]
	*($34 + [404]) = [0]
	*((($34 + [224]) + [184])) = [0]
	*((($34 + [224]) + [188])) = [0]
	*($34 + [416]) = [0]
	*((($34 + [224]) + [196])) = [0]
	*((($34 + [224]) + [200])) = [0]
	*($34 + [428]) = [0]
	*((($34 + [224]) + [208])) = [0]
	*((($34 + [224]) + [212])) = [0]
	*($34 + [440]) = [0]
	*((($34 + [224]) + [220])) = [0]
	*((($34 + [224]) + [224])) = [0]
	*($34 + [452]) = [0]
	*((($34 + [224]) + [232])) = [0]
	*((($34 + [224]) + [236])) = [0]
	*($34 + [464]) = [0]
	*((($34 + [224]) + [244])) = [0]
	*((($34 + [224]) + [248])) = [0]
	*($34 + [476]) = [0]
	*((($34 + [224]) + [256])) = [0]
	*((($34 + [224]) + [260])) = [0]
	*($34 + [488]) = [0]
	*((($34 + [224]) + [268])) = [0]
	*((($34 + [224]) + [272])) = [0]
	*($34 + [500]) = [0]
	*((($34 + [224]) + [280])) = [0]
	*((($34 + [224]) + [284])) = [0]
	*($34 + [512]) = [0]
	*((($34 + [224]) + [292])) = [0]
	*((($34 + [224]) + [296])) = [0]
	*($34 + [524]) = [0]
	*((($34 + [224]) + [304])) = [0]
	*((($34 + [224]) + [308])) = [0]
	*($34 + [536]) = [0]
	*((($34 + [224]) + [316])) = [0]
	*((($34 + [224]) + [320])) = [0]
	*($34 + [548]) = [0]
	*((($34 + [224]) + [328])) = [0]
	*((($34 + [224]) + [332])) = [0]
	*($34 + [560]) = [0]
	*((($34 + [224]) + [340])) = [0]
	*((($34 + [224]) + [344])) = [0]
	*($34 + [572]) = [0]
	*((($34 + [224]) + [352])) = [0]
	*((($34 + [224]) + [356])) = [0]
	*($34 + [584]) = [0]
	*(($34 + [588])) = [0]
	*(($34 + [592])) = [0]
	*($34 + [596]) = [0]
	*(($34 + [600])) = [0]
	*(($34 + [604])) = [0]
	*($34 + [608]) = [0]
	*(($34 + [612])) = [0]
	*(($34 + [616])) = [0]
	*($34 + [620]) = [0]
	*(($34 + [624])) = [0]
	*(($34 + [628])) = [0]
	*($34 + [632]) = [0]
	*(($34 + [636])) = [0]
	*(($34 + [640])) = [0]
	*($34 + [644]) = [0]
	*(($34 + [648])) = [0]
	*(($34 + [652])) = [0]
	*($34 + [656]) = [0]
	*(($34 + [660])) = [0]
	*(($34 + [664])) = [0]
	*($34 + [668]) = [0]
	*(($34 + [672])) = [0]
	*(($34 + [676])) = [0]
	*($34 + [680]) = [0]
	*(($34 + [684])) = [0]
	*(($34 + [688])) = [0]
	*($34 + [692]) = [0]
	*(($34 + [696])) = [0]
	*(($34 + [700])) = [0]
	*($34 + [220]) = [0]
	$6 = ($3 + [1])
	$30 = *($3)
	$28 = *($3 + [8])
	$24 = *($3 + [4])
	$16 = [0]
	$29 = CALL strlen([1200])
	if ( ($29 == 0) ){ goto $label$9 }
	$28 = ( $24 ? uint_32($30 >> [1]) : $15 )
	$15 = ($30 & [1])
	$16 = ( $28 ? $6 : $15 )
	$24 = ($16 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$10 }
	$30 = $16
	
.LOOP $label$12:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$11 }
	$30 = CALL memchr($30, [45], $28)
	if ( ($30 == 0) ){ goto $label$11 }
	if ( (CALL memcmp($30, [1200], $29) == 0) ){ goto $label$10 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$12 }
	
.LABEL $label$11
	$30 = $24
	
.LABEL $label$10
	$16 = ( [-1] ? ($30 - $16) : ((int_32)$30 == (int_32)$24) )
	
.LABEL $label$9
	$13 = (($34 + [224]) | [1])
	$12 = (($34 + [40]) + [24])
	$11 = (($34 + [80]) + [24])
	$10 = (($34 + [120]) + [24])
	$9 = (($34 + [168]) + [24])
	$8 = (($34 + [1648]) | [8])
	$7 = (($34 + [208]) | [1])
	$22 = ($3 + [4])
	$25 = (($34 + [168]) + [16])
	$26 = (($34 + [168]) + [32])
	$27 = (($34 + [168]) + [28])
	
.LOOP $label$14:
	if ( ((uint_32)($16 + [-1]) > (uint_32)[498]) ){ goto $label$13 }
	CALL $83(($34 + [168]), $3, [0], $16, $3)
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$16 }
	*($30) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*($30 + [8])) = [0]
	*($30 + [4]) = [0]
	
.LABEL $label$15
	CALL $80($30, [0])
	$21 = (($34 + [168]) + [8])
	*(($30 + [8])) = *($21)
	*($30) = *($34 + [168])
	$30 = *($3)
	CALL $83(($34 + [168]), $3, ($16 + [1]), (( *($22) ? uint_32($30 >> [1]) : ($30 & [1]) ) + ((int_32)$16 ^ (int_32)[-1])), $3)
	if ( (*($3) & [1]) ){ goto $label$18 }
	*($3) = [0]
	goto $label$17 
	
.LABEL $label$18
	*(*(($3 + [8]))) = [0]
	*($22) = [0]
	
.LABEL $label$17
	$16 = [0]
	CALL $80($3, [0])
	*($3) = *($34 + [168])
	$28 = *($34 + [172])
	*($22) = $28
	$24 = *($21)
	*(($23 = ($3 + [8]))) = $24
	$30 = *($3)
	$29 = CALL strlen([1200])
	if ( ($29 == 0) ){ goto $label$19 }
	$28 = ( $28 ? uint_32($30 >> [1]) : $15 )
	$15 = ($30 & [1])
	$16 = ( $24 ? $6 : $15 )
	$24 = ($16 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$20 }
	$30 = $16
	
.LOOP $label$22:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$21 }
	$30 = CALL memchr($30, [45], $28)
	if ( ($30 == 0) ){ goto $label$21 }
	if ( (CALL memcmp($30, [1200], $29) == 0) ){ goto $label$20 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$22 }
	
.LABEL $label$21
	$30 = $24
	
.LABEL $label$20
	$16 = ( [-1] ? ($30 - $16) : ((int_32)$30 == (int_32)$24) )
	
.LABEL $label$19
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	$29 = *($30)
	if ( ($29 & [1]) ){ goto $label$26 }
	$28 = uint_32($29 >> [1])
	$15 = ($30 + [1])
	$29 = CALL strlen([1216])
	if ( $29 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$28 = *($30 + [4])
	$15 = *($30 + [8])
	$29 = CALL strlen([1216])
	if ( ($29 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$24 = ($15 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$27 }
	$30 = $15
	
.LOOP $label$29:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$28 }
	$30 = CALL memchr($30, [46], $28)
	if ( ($30 == 0) ){ goto $label$28 }
	if ( (CALL memcmp($30, [1216], $29) == 0) ){ goto $label$27 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$29 }
	
.LABEL $label$28
	$30 = $24
	
.LABEL $label$27
	$30 = ( [-1] ? ($30 - $15) : ((int_32)$30 == (int_32)$24) )
	goto $label$23 
	
.LABEL $label$24
	$30 = [0]
	
.LABEL $label$23
	$29 = ($30 + [1])
	$28 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	$24 = *($28)
	if ( ($24 & [1]) ){ goto $label$31 }
	$28 = uint_32($24 >> [1])
	goto $label$30 
	
.LABEL $label$31
	$28 = *($28 + [4])
	
.LABEL $label$30
	CALL eosio_assert(($29 <= $28), [1232])
	$24 = ((int_32)*($34 + [220]) * (int_32)[12])
	$28 = (($34 + [224]) + $24)
	$29 = *($28)
	$20 = (int_64)0
	if ( ((uint_32)$30 > (uint_32)[100]) ){ goto $label$32 }
	if ( ($29 & [1]) ){ goto $label$34 }
	$15 = uint_32($29 >> [1])
	goto $label$33 
	
.LABEL $label$34
	$15 = *($28 + [4])
	
.LABEL $label$33
	$20 = (CASTING uint_64)(uint_32 (([255] - $30) + $15))
	
.LABEL $label$32
	if ( ($29 & [1]) ){ goto $label$37 }
	$29 = uint_32($29 >> [1])
	if ( ($29 == 0) ){ goto $label$36 }
	$30 = ($13 + $24)
	$31 = (int_64)0
	
.LOOP $label$38:
	$28 = *($30)
	if ( ((uint_32)(($28 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$39 }
	$31 = ((int_64)((int_64)((int_64)$31 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$39
	$30 = ($30 + [1])
	$29 = ($29 + [-1])
	if ( $29 ){ goto $label$38 }
	goto $label$35 
	
.LABEL $label$37
	$29 = *($28 + [4])
	if ( ($29 == 0) ){ goto $label$36 }
	$24 = ($28 + [8])
	$28 = *($24)
	$30 = [0]
	$31 = (int_64)0
	
.LOOP $label$40:
	if ( ((int_32)*(($28 + $30)) < (int_32)[48]) ){ goto $label$41 }
	if ( ((int_32)*((*($24) + $30)) > (int_32)[57]) ){ goto $label$41 }
	$31 = ((int_64)((int_64)((int_64)$31 * (int_64)10) + (int_64)*((*($24) + $30))) + (int_64)-48)
	
.LABEL $label$41
	$30 = ($30 + [1])
	if ( ($30 <= $29) ){ goto $label$40 }
	goto $label$35 
	
.LABEL $label$36
	$31 = (int_64)0
	
.LABEL $label$35
	CALL $83(($34 + [168]), $3, [0], $16, $3)
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$43 }
	*($30) = [0]
	goto $label$42 
	
.LABEL $label$43
	*(*($30 + [8])) = [0]
	*($30 + [4]) = [0]
	
.LABEL $label$42
	CALL $80($30, [0])
	*(($30 + [8])) = *($21)
	*($30) = *($34 + [168])
	$30 = *($3)
	CALL $83(($34 + [168]), $3, ($16 + [1]), (( *($22) ? uint_32($30 >> [1]) : ($30 & [1]) ) + ((int_32)$16 ^ (int_32)[-1])), $3)
	if ( (*($3) & [1]) ){ goto $label$45 }
	*($3) = [0]
	goto $label$44 
	
.LABEL $label$45
	*(*($23)) = [0]
	*($22) = [0]
	
.LABEL $label$44
	$30 = [0]
	CALL $80($3, [0])
	*($3) = *($34 + [168])
	$24 = *($34 + [172])
	*($22) = $24
	$16 = *($21)
	*($23) = $16
	$29 = *($3)
	$33 = [0]
	$28 = CALL strlen([1200])
	if ( ($28 == 0) ){ goto $label$46 }
	$24 = ( $24 ? uint_32($29 >> [1]) : $33 )
	$33 = ($29 & [1])
	$15 = ( $16 ? $6 : $33 )
	$16 = ($15 + $24)
	$29 = $16
	if ( ((int_32)$24 < (int_32)$28) ){ goto $label$47 }
	$29 = $15
	
.LOOP $label$49:
	$24 = (($24 - $28) + [1])
	if ( ($24 == 0) ){ goto $label$48 }
	$29 = CALL memchr($29, [45], $24)
	if ( ($29 == 0) ){ goto $label$48 }
	if ( (CALL memcmp($29, [1200], $28) == 0) ){ goto $label$47 }
	$29 = ($29 + [1])
	$24 = ($16 - $29)
	if ( ((int_32)$24 >= (int_32)$28) ){ goto $label$49 }
	
.LABEL $label$48
	$29 = $16
	
.LABEL $label$47
	$33 = ( [-1] ? ($29 - $15) : ((int_32)$29 == (int_32)$16) )
	
.LABEL $label$46
	CALL eosio_assert([1], [1088])
	$2 = (int_64)5462355
	
.LOOP $label$51:
	$29 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	
.LOOP $label$53:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$50 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$53 }
	
.LABEL $label$52
	$29 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$51 }
	
.LABEL $label$50
	CALL eosio_assert($29, [1056])
	$14 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($14) & [1]) ){ goto $label$55 }
	$29 = ($14 + [1])
	goto $label$54 
	
.LABEL $label$55
	$29 = *($14 + [8])
	
.LABEL $label$54
	$30 = [-1]
	$28 = [0]
	
.LOOP $label$56:
	$15 = $28
	$28 = ($15 + [1])
	$24 = ($29 + $30)
	$16 = ($30 + [1])
	$30 = $16
	if ( *(($24 + [1])) ){ goto $label$56 }
	if ( ($16 == 0) ){ goto $label$58 }
	$1 = (CASTING uint_64)(uint_32 $15)
	$32 = (int_64)0
	$2 = (int_64)8
	
.LOOP $label$59:
	$30 = *($29)
	if ( ((uint_32)(($30 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$32 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$2 & (int_64)4294967288)) | (int_64)$32)
	
.LABEL $label$60
	$29 = ($29 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	$1 = ((int_64)$1 + (int_64)-1)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	$32 = (int_64)0
	
.LABEL $label$57
	CALL $82(($34 + [208]), $14)
	$15 = (($34 + [208]) + [8])
	$17 = ((int_64)$32 | (int_64)((int_64)$20 & (int_64)255))
	$30 = ($30 & [1])
	$30 = *($34 + [208])
	$29 = ( *($34 + [212]) ? uint_32($30 >> [1]) : $30 )
	if ( ($29 == 0) ){ goto $label$61 }
	$30 = ( *($15) ? $7 : $30 )
	
.LOOP $label$62:
	*($30) = CALL tolower(*($30))
	$30 = ($30 + [1])
	$29 = ($29 + [-1])
	if ( $29 ){ goto $label$62 }
	
.LABEL $label$61
	*(($30 = (($34 + [1072]) + (*($34 + [220]) << [4])))) = $31
	*($30 + [8]) = $17
	CALL $83(($34 + [168]), $3, [0], $33, $3)
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$64 }
	*($30) = [0]
	goto $label$63 
	
.LABEL $label$64
	*(*($30 + [8])) = [0]
	*($30 + [4]) = [0]
	
.LABEL $label$63
	CALL $80($30, [0])
	*(($30 + [8])) = *($21)
	*($30) = *($34 + [168])
	$30 = *($3)
	CALL $83(($34 + [168]), $3, ($33 + [1]), (( *($22) ? uint_32($30 >> [1]) : ($30 & [1]) ) + ((int_32)$33 ^ (int_32)[-1])), $3)
	if ( (*($3) & [1]) ){ goto $label$66 }
	*($3) = [0]
	goto $label$65 
	
.LABEL $label$66
	*(*($23)) = [0]
	*($22) = [0]
	
.LABEL $label$65
	$16 = [0]
	CALL $80($3, [0])
	*($3) = *($34 + [168])
	$28 = *($34 + [172])
	*($22) = $28
	$24 = *($21)
	*($23) = $24
	$30 = *($3)
	$29 = CALL strlen([1200])
	if ( ($29 == 0) ){ goto $label$67 }
	$28 = ( $28 ? uint_32($30 >> [1]) : $33 )
	$33 = ($30 & [1])
	$16 = ( $24 ? $6 : $33 )
	$24 = ($16 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$68 }
	$30 = $16
	
.LOOP $label$70:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$69 }
	$30 = CALL memchr($30, [45], $28)
	if ( ($30 == 0) ){ goto $label$69 }
	if ( (CALL memcmp($30, [1200], $29) == 0) ){ goto $label$68 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$70 }
	
.LABEL $label$69
	$30 = $24
	
.LABEL $label$68
	$16 = ( [-1] ? ($30 - $16) : ((int_32)$30 == (int_32)$24) )
	
.LABEL $label$67
	$30 = ((int_32)*($34 + [220]) * (int_32)[12])
	CALL $78((($34 + [704]) + $30), (($34 + [224]) + $30))
	*($25) = (int_64)-1
	*($9) = (int_64)0
	*($26) = [0]
	$2 = *($0)
	*($21) = $2
	*($34 + [168]) = $2
	$30 = CALL db_find_i64($2, $2, (int_64)-3665743388780527616, $2)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$72 }
	CALL eosio_assert(((int_32)*(CALL $32(($34 + [168]), $30) + [16]) == (int_32)($34 + [168])), [272])
	goto $label$71 
	
.LABEL $label$72
	$1 = *($0)
	CALL eosio_assert(((int_64)*($34 + [168]) == (int_64)CALL $fimport$13()), [640])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [168])
	*($30 + [8]) = (int_64)0
	*($30) = *($0)
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	$2 = *($30)
	$28 = CALL db_store_i64(*($21), (int_64)-3665743388780527616, $1, $2, ($34 + [1648]), [16])
	*($30 + [20]) = $28
	if ( (uint_64)($2 <= *($25)) ){ goto $label$73 }
	*($25) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$73
	*($34 + [80]) = $30
	$2 = *($30)
	*($34 + [120]) = $2
	*($34 + [40]) = $28
	$29 = *($27)
	if ( ((uint_32)$29 >= (uint_32)*($26)) ){ goto $label$75 }
	*($29 + [8]) = $2
	*($29 + [16]) = $28
	*($34 + [80]) = [0]
	*($29) = $30
	*($27) = ($29 + [24])
	goto $label$74 
	
.LABEL $label$75
	CALL $33($9, ($34 + [80]), ($34 + [120]), ($34 + [40]))
	
.LABEL $label$74
	$30 = *($34 + [80])
	*($34 + [80]) = [0]
	if ( ($30 == 0) ){ goto $label$71 }
	CALL $76($30)
	
.LABEL $label$71
	$18 = *(CALL $34(($34 + [168]), *($0), [208]) + [8])
	*($34 + [160]) = (int_64)0
	*(($29 = (($34 + [120]) + [16]))) = (int_64)-1
	*($10) = (int_64)0
	*(($28 = (($34 + [120]) + [32]))) = [0]
	$2 = *($0)
	*(($24 = (($34 + [120]) + [8]))) = $2
	*($34 + [120]) = $2
	$30 = CALL db_find_i64($2, $2, (int_64)5031766321369448448, $2)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$77 }
	CALL eosio_assert(((int_32)*(CALL $35(($34 + [120]), $30) + [16]) == (int_32)($34 + [120])), [272])
	goto $label$76 
	
.LABEL $label$77
	$1 = *($0)
	CALL eosio_assert(((int_64)*($34 + [120]) == (int_64)CALL $fimport$13()), [640])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [120])
	*($30 + [8]) = (int_64)0
	*($30) = *($0)
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	$2 = *($30)
	$24 = CALL db_store_i64(*($24), (int_64)5031766321369448448, $1, $2, ($34 + [1648]), [16])
	*($30 + [20]) = $24
	if ( (uint_64)($2 <= *($29)) ){ goto $label$78 }
	*($29) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$78
	*($34 + [40]) = $30
	$2 = *($30)
	*($34 + [80]) = $2
	*($34) = $24
	$21 = (($34 + [120]) + [28])
	$29 = *($21)
	if ( ((uint_32)$29 >= (uint_32)*($28)) ){ goto $label$80 }
	*($29 + [8]) = $2
	*($29 + [16]) = $24
	*($34 + [40]) = [0]
	*($29) = $30
	*($21) = ($29 + [24])
	goto $label$79 
	
.LABEL $label$80
	CALL $36($10, ($34 + [40]), ($34 + [80]), $34)
	
.LABEL $label$79
	$30 = *($34 + [40])
	*($34 + [40]) = [0]
	if ( ($30 == 0) ){ goto $label$81 }
	CALL $76($30)
	
.LABEL $label$81
	*($34 + [160]) = (int_64)0
	
.LABEL $label$76
	*($34 + [160]) = *(CALL $37(($34 + [120]), *($0), [208]) + [8])
	*((($34 + [80]) + [16])) = (int_64)-1
	*($11) = (int_64)0
	*(($21 = (($34 + [80]) + [32]))) = [0]
	$19 = *($0)
	*((($34 + [80]) + [8])) = $19
	*($34 + [80]) = $19
	$30 = (($34 + [704]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$83 }
	$30 = ($30 + [1])
	goto $label$82 
	
.LABEL $label$83
	$30 = *($30 + [8])
	
.LABEL $label$82
	$29 = [-1]
	
.LOOP $label$84:
	$28 = ($30 + $29)
	$24 = ($29 + [1])
	$29 = $24
	if ( *(($28 + [1])) ){ goto $label$84 }
	$20 = (CASTING uint_64)(uint_32 $24)
	$2 = (int_64)0
	$1 = (int_64)59
	$31 = (int_64)0
	
.LOOP $label$85:
	$32 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$20) ){ goto $label$86 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$88 }
	$29 = ($29 + [165])
	goto $label$87 
	
.LABEL $label$88
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$87
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$86
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$90 }
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$89 
	
.LABEL $label$90
	$32 = ((int_64)$32 & (int_64)15)
	
.LABEL $label$89
	$30 = ($30 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$31 = ((int_64)$32 | (int_64)$31)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$85 }
	$30 = CALL db_find_i64($19, $19, (int_64)5031766160157179904, $31)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$96 }
	CALL eosio_assert(((int_32)*(CALL $41(($34 + [80]), $30) + [16]) == (int_32)($34 + [80])), [272])
	$30 = (($34 + [704]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$95 }
	$30 = ($30 | [1])
	goto $label$94 
	
.LABEL $label$96
	$2 = *($34 + [80])
	*($34 + [160]) = ((int_64)*($34 + [160]) + (int_64)1)
	$1 = *($0)
	*(($34 + [8])) = ($34 + [160])
	*($34 + [4]) = ($34 + [220])
	*($34) = ($34 + [704])
	*($34 + [1648]) = $1
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$13()), [640])
	*(($28 = (($34 + [40]) + [8]))) = ($34 + [1648])
	*($34 + [44]) = $34
	*($34 + [40]) = ($34 + [80])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [80])
	CALL $38(($34 + [40]), $30)
	*($34 + [1672]) = $30
	$2 = *($30)
	*($34 + [40]) = $2
	$24 = *($30 + [20])
	*($34 + [1668]) = $24
	$33 = (($34 + [80]) + [28])
	$29 = *($33)
	if ( ((uint_32)$29 >= (uint_32)*($21)) ){ goto $label$93 }
	*($29 + [8]) = $2
	*($29 + [16]) = $24
	*($34 + [1672]) = [0]
	*($29) = $30
	*($33) = ($29 + [24])
	goto $label$92 
	
.LABEL $label$95
	$30 = *($30 + [8])
	
.LABEL $label$94
	$29 = [-1]
	
.LOOP $label$97:
	$28 = ($30 + $29)
	$24 = ($29 + [1])
	$29 = $24
	if ( *(($28 + [1])) ){ goto $label$97 }
	$20 = (CASTING uint_64)(uint_32 $24)
	$2 = (int_64)0
	$1 = (int_64)59
	$31 = (int_64)0
	
.LOOP $label$98:
	$32 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$20) ){ goto $label$99 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$101 }
	$29 = ($29 + [165])
	goto $label$100 
	
.LABEL $label$101
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$100
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$99
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$103 }
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$102 
	
.LABEL $label$103
	$32 = ((int_64)$32 & (int_64)15)
	
.LABEL $label$102
	$30 = ($30 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$31 = ((int_64)$32 | (int_64)$31)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$98 }
	$2 = *(CALL $40(($34 + [80]), $31, [208]) + [8])
	goto $label$91 
	
.LABEL $label$93
	CALL $39($11, ($34 + [1672]), ($34 + [40]), ($34 + [1668]))
	
.LABEL $label$92
	$30 = *($34 + [1672])
	*($34 + [1672]) = [0]
	if ( ($30 == 0) ){ goto $label$104 }
	CALL $76($30)
	
.LABEL $label$104
	*(($29 = (($34 + [40]) + [16]))) = (int_64)-1
	*($12) = (int_64)0
	$30 = [0]
	*((($34 + [40]) + [32])) = [0]
	$2 = *($0)
	*($28) = $2
	*($34 + [40]) = $2
	$28 = CALL db_find_i64($2, $2, (int_64)5031766321369448448, $2)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$105 }
	$30 = CALL $35(($34 + [40]), $28)
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)($34 + [40])), [272])
	
.LABEL $label$105
	$1 = *($0)
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [336])
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)($34 + [40])), [416])
	CALL eosio_assert(((int_64)*($34 + [40]) == (int_64)CALL $fimport$13()), [464])
	*($30 + [8]) = *($34 + [160])
	$2 = *($30)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	CALL db_update_i64(*($30 + [20]), $1, ($34 + [1648]), [16])
	if ( (uint_64)($2 <= *($29)) ){ goto $label$106 }
	*($29) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$106
	$30 = (($34 + [704]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$108 }
	$30 = ($30 + [1])
	goto $label$107 
	
.LABEL $label$108
	$30 = *($30 + [8])
	
.LABEL $label$107
	$29 = [-1]
	
.LOOP $label$109:
	$28 = ($30 + $29)
	$24 = ($29 + [1])
	$29 = $24
	if ( *(($28 + [1])) ){ goto $label$109 }
	$20 = (CASTING uint_64)(uint_32 $24)
	$2 = (int_64)0
	$1 = (int_64)59
	$31 = (int_64)0
	
.LOOP $label$110:
	$32 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$20) ){ goto $label$111 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$113 }
	$29 = ($29 + [165])
	goto $label$112 
	
.LABEL $label$113
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$112
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$111
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$115 }
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$114 
	
.LABEL $label$115
	$32 = ((int_64)$32 & (int_64)15)
	
.LABEL $label$114
	$30 = ($30 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$31 = ((int_64)$32 | (int_64)$31)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$110 }
	$2 = *(CALL $40(($34 + [80]), $31, [208]) + [8])
	$28 = *($12)
	if ( ($28 == 0) ){ goto $label$91 }
	$24 = (($34 + [40]) + [28])
	$30 = *($24)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$117 }
	
.LOOP $label$118:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$119 }
	CALL $76($29)
	
.LABEL $label$119
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$118 }
	$30 = *($12)
	goto $label$116 
	
.LABEL $label$117
	$30 = $28
	
.LABEL $label$116
	*($24) = $28
	CALL $76($30)
	
.LABEL $label$91
	*(($28 = (($34 + [40]) + [8]))) = $2
	*(($29 = (($34 + [40]) + [16]))) = (int_64)-1
	*($12) = (int_64)0
	*(($24 = (($34 + [40]) + [32]))) = [0]
	$1 = *($0)
	*($34 + [40]) = $1
	$30 = CALL db_find_i64($1, $2, (int_64)-3665743484108668928, $17)
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$121 }
	CALL eosio_assert(((int_32)*(CALL $42(($34 + [40]), $30) + [16]) == (int_32)($34 + [40])), [272])
	goto $label$120 
	
.LABEL $label$121
	$2 = *($0)
	*(($34 + [8])) = $2
	*(($21 = ($34 + [16]))) = (int_64)-1
	*(($33 = ($34 + [24]))) = (int_64)0
	$30 = [0]
	*(($34 + [32])) = [0]
	*($34) = $2
	$1 = ((int_64)$18 + (int_64)1)
	$23 = CALL db_find_i64($2, $2, (int_64)-3665743388780527616, $2)
	if ( ((int_32)$23 < (int_32)[0]) ){ goto $label$122 }
	$30 = CALL $32($34, $23)
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)$34), [272])
	
.LABEL $label$122
	$32 = *($0)
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [336])
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)$34), [416])
	CALL eosio_assert(((int_64)*($34) == (int_64)CALL $fimport$13()), [464])
	*($30 + [8]) = $1
	$2 = *($30)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	CALL db_update_i64(*($30 + [20]), $32, ($34 + [1648]), [16])
	if ( (uint_64)($2 <= *($21)) ){ goto $label$123 }
	*($21) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$123
	$32 = *($0)
	CALL eosio_assert(((int_64)*($34 + [40]) == (int_64)CALL $fimport$13()), [640])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [40])
	*($30 + [8]) = $1
	*($30) = $17
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	$2 = *($30)
	$28 = CALL db_store_i64(*($28), (int_64)-3665743484108668928, $32, $2, ($34 + [1648]), [16])
	*($30 + [20]) = $28
	if ( (uint_64)($2 <= *($29)) ){ goto $label$124 }
	*($29) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$124
	*($34 + [1672]) = $30
	$2 = *($30)
	*($34 + [1648]) = $2
	*($34 + [1668]) = $28
	$21 = (($34 + [40]) + [28])
	$29 = *($21)
	if ( ((uint_32)$29 >= (uint_32)*($24)) ){ goto $label$126 }
	*($29 + [8]) = $2
	*($29 + [16]) = $28
	*($34 + [1672]) = [0]
	*($29) = $30
	*($21) = ($29 + [24])
	goto $label$125 
	
.LABEL $label$126
	CALL $43($12, ($34 + [1672]), ($34 + [1648]), ($34 + [1668]))
	
.LABEL $label$125
	$30 = *($34 + [1672])
	*($34 + [1672]) = [0]
	if ( ($30 == 0) ){ goto $label$127 }
	CALL $76($30)
	
.LABEL $label$127
	$28 = *($33)
	if ( ($28 == 0) ){ goto $label$120 }
	$24 = ($34 + [28])
	$30 = *($24)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$129 }
	
.LOOP $label$130:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$131 }
	CALL $76($29)
	
.LABEL $label$131
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$130 }
	$30 = *($33)
	goto $label$128 
	
.LABEL $label$129
	$30 = $28
	
.LABEL $label$128
	*($24) = $28
	CALL $76($30)
	
.LABEL $label$120
	$24 = (*($34 + [220]) + [1])
	*($34 + [220]) = $24
	$2 = *($34 + [1632])
	$28 = *($12)
	if ( ($28 == 0) ){ goto $label$132 }
	$21 = (($34 + [40]) + [28])
	$30 = *($21)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$134 }
	
.LOOP $label$135:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$136 }
	CALL $76($29)
	
.LABEL $label$136
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$135 }
	$30 = *($12)
	goto $label$133 
	
.LABEL $label$134
	$30 = $28
	
.LABEL $label$133
	*($21) = $28
	CALL $76($30)
	
.LABEL $label$132
	$28 = *($11)
	if ( ($28 == 0) ){ goto $label$137 }
	$21 = (($34 + [80]) + [28])
	$30 = *($21)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$139 }
	
.LOOP $label$140:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$141 }
	CALL $76($29)
	
.LABEL $label$141
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$140 }
	$30 = *($11)
	goto $label$138 
	
.LABEL $label$139
	$30 = $28
	
.LABEL $label$138
	*($21) = $28
	CALL $76($30)
	
.LABEL $label$137
	$28 = *($10)
	if ( ($28 == 0) ){ goto $label$142 }
	$21 = (($34 + [120]) + [28])
	$30 = *($21)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$144 }
	
.LOOP $label$145:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$146 }
	CALL $76($29)
	
.LABEL $label$146
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$145 }
	$30 = *($10)
	goto $label$143 
	
.LABEL $label$144
	$30 = $28
	
.LABEL $label$143
	*($21) = $28
	CALL $76($30)
	
.LABEL $label$142
	$28 = *($9)
	if ( ($28 == 0) ){ goto $label$147 }
	$30 = *($27)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$149 }
	
.LOOP $label$150:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$151 }
	CALL $76($29)
	
.LABEL $label$151
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$150 }
	$30 = *($9)
	goto $label$148 
	
.LABEL $label$149
	$30 = $28
	
.LABEL $label$148
	*($27) = $28
	CALL $76($30)
	
.LABEL $label$147
	$1 = (CASTING int_64)(int_32 $24)
	if ( ((*($34 + [208]) & [1]) == 0) ){ goto $label$152 }
	CALL $76(*($15))
	
.LABEL $label$152
	if ( (uint_64)($1 <= $2) ){ goto $label$14 }
	
.LABEL $label$13
	$9 = ($4 + [1])
	$30 = *($4)
	$28 = *($4 + [8])
	$24 = *($4 + [4])
	$16 = [0]
	$29 = CALL strlen([1200])
	if ( ($29 == 0) ){ goto $label$153 }
	$28 = ( $24 ? uint_32($30 >> [1]) : $15 )
	$15 = ($30 & [1])
	$16 = ( $28 ? $9 : $15 )
	$24 = ($16 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$154 }
	$30 = $16
	
.LOOP $label$156:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$155 }
	$30 = CALL memchr($30, [45], $28)
	if ( ($30 == 0) ){ goto $label$155 }
	if ( (CALL memcmp($30, [1200], $29) == 0) ){ goto $label$154 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$156 }
	
.LABEL $label$155
	$30 = $24
	
.LABEL $label$154
	$16 = ( [-1] ? ($30 - $16) : ((int_32)$30 == (int_32)$24) )
	
.LABEL $label$153
	$7 = (($34 + [224]) | [1])
	$23 = (($34 + [40]) + [24])
	$14 = (($34 + [80]) + [24])
	$11 = (($34 + [120]) + [24])
	$10 = (($34 + [168]) + [24])
	$26 = (($34 + [208]) | [1])
	$3 = ($4 + [4])
	$27 = (($34 + [168]) + [16])
	$25 = (($34 + [168]) + [32])
	$6 = (($34 + [168]) + [28])
	
.LOOP $label$158:
	if ( ((uint_32)($16 + [-1]) > (uint_32)[498]) ){ goto $label$157 }
	if ( ((uint_64)*($34 + [220]) >= (uint_64)*($34 + [1632])) ){ goto $label$157 }
	CALL $83(($34 + [168]), $4, [0], $16, $4)
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$160 }
	*($30) = [0]
	goto $label$159 
	
.LABEL $label$160
	*(*($30 + [8])) = [0]
	*($30 + [4]) = [0]
	
.LABEL $label$159
	CALL $80($30, [0])
	$22 = (($34 + [168]) + [8])
	*(($30 + [8])) = *($22)
	*($30) = *($34 + [168])
	$30 = *($4)
	CALL $83(($34 + [168]), $4, ($16 + [1]), (( *($3) ? uint_32($30 >> [1]) : ($30 & [1]) ) + ((int_32)$16 ^ (int_32)[-1])), $4)
	if ( (*($4) & [1]) ){ goto $label$162 }
	*($4) = [0]
	goto $label$161 
	
.LABEL $label$162
	*(*(($4 + [8]))) = [0]
	*($3) = [0]
	
.LABEL $label$161
	$16 = [0]
	CALL $80($4, [0])
	*($4) = *($34 + [168])
	$28 = *($34 + [172])
	*($3) = $28
	$24 = *($22)
	*(($33 = ($4 + [8]))) = $24
	$30 = *($4)
	$29 = CALL strlen([1200])
	if ( ($29 == 0) ){ goto $label$163 }
	$28 = ( $28 ? uint_32($30 >> [1]) : $15 )
	$15 = ($30 & [1])
	$16 = ( $24 ? $9 : $15 )
	$24 = ($16 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$164 }
	$30 = $16
	
.LOOP $label$166:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$165 }
	$30 = CALL memchr($30, [45], $28)
	if ( ($30 == 0) ){ goto $label$165 }
	if ( (CALL memcmp($30, [1200], $29) == 0) ){ goto $label$164 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$166 }
	
.LABEL $label$165
	$30 = $24
	
.LABEL $label$164
	$16 = ( [-1] ? ($30 - $16) : ((int_32)$30 == (int_32)$24) )
	
.LABEL $label$163
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	$29 = *($30)
	if ( ($29 & [1]) ){ goto $label$170 }
	$28 = uint_32($29 >> [1])
	$15 = ($30 + [1])
	$29 = CALL strlen([1216])
	if ( $29 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$28 = *($30 + [4])
	$15 = *($30 + [8])
	$29 = CALL strlen([1216])
	if ( ($29 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$24 = ($15 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$171 }
	$30 = $15
	
.LOOP $label$173:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$172 }
	$30 = CALL memchr($30, [46], $28)
	if ( ($30 == 0) ){ goto $label$172 }
	if ( (CALL memcmp($30, [1216], $29) == 0) ){ goto $label$171 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$173 }
	
.LABEL $label$172
	$30 = $24
	
.LABEL $label$171
	$30 = ( [-1] ? ($30 - $15) : ((int_32)$30 == (int_32)$24) )
	goto $label$167 
	
.LABEL $label$168
	$30 = [0]
	
.LABEL $label$167
	$29 = ($30 + [1])
	$28 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	$24 = *($28)
	if ( ($24 & [1]) ){ goto $label$175 }
	$28 = uint_32($24 >> [1])
	goto $label$174 
	
.LABEL $label$175
	$28 = *($28 + [4])
	
.LABEL $label$174
	CALL eosio_assert(($29 <= $28), [1232])
	$24 = ((int_32)*($34 + [220]) * (int_32)[12])
	$28 = (($34 + [224]) + $24)
	$29 = *($28)
	$20 = (int_64)0
	if ( ((uint_32)$30 > (uint_32)[100]) ){ goto $label$176 }
	if ( ($29 & [1]) ){ goto $label$178 }
	$15 = uint_32($29 >> [1])
	goto $label$177 
	
.LABEL $label$178
	$15 = *($28 + [4])
	
.LABEL $label$177
	$20 = (CASTING uint_64)(uint_32 (([255] - $30) + $15))
	
.LABEL $label$176
	if ( ($29 & [1]) ){ goto $label$181 }
	$29 = uint_32($29 >> [1])
	if ( ($29 == 0) ){ goto $label$180 }
	$30 = ($7 + $24)
	$31 = (int_64)0
	
.LOOP $label$182:
	$28 = *($30)
	if ( ((uint_32)(($28 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$183 }
	$31 = ((int_64)((int_64)((int_64)$31 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$183
	$30 = ($30 + [1])
	$29 = ($29 + [-1])
	if ( $29 ){ goto $label$182 }
	goto $label$179 
	
.LABEL $label$181
	$29 = *($28 + [4])
	if ( ($29 == 0) ){ goto $label$180 }
	$24 = ($28 + [8])
	$28 = *($24)
	$30 = [0]
	$31 = (int_64)0
	
.LOOP $label$184:
	if ( ((int_32)*(($28 + $30)) < (int_32)[48]) ){ goto $label$185 }
	if ( ((int_32)*((*($24) + $30)) > (int_32)[57]) ){ goto $label$185 }
	$31 = ((int_64)((int_64)((int_64)$31 * (int_64)10) + (int_64)*((*($24) + $30))) + (int_64)-48)
	
.LABEL $label$185
	$30 = ($30 + [1])
	if ( ($30 <= $29) ){ goto $label$184 }
	goto $label$179 
	
.LABEL $label$180
	$31 = (int_64)0
	
.LABEL $label$179
	CALL $83(($34 + [168]), $4, [0], $16, $4)
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$187 }
	*($30) = [0]
	goto $label$186 
	
.LABEL $label$187
	*(*($30 + [8])) = [0]
	*($30 + [4]) = [0]
	
.LABEL $label$186
	CALL $80($30, [0])
	*(($30 + [8])) = *($22)
	*($30) = *($34 + [168])
	$30 = *($4)
	CALL $83(($34 + [168]), $4, ($16 + [1]), (( *($3) ? uint_32($30 >> [1]) : ($30 & [1]) ) + ((int_32)$16 ^ (int_32)[-1])), $4)
	if ( (*($4) & [1]) ){ goto $label$189 }
	*($4) = [0]
	goto $label$188 
	
.LABEL $label$189
	*(*($33)) = [0]
	*($3) = [0]
	
.LABEL $label$188
	$30 = [0]
	CALL $80($4, [0])
	*($4) = *($34 + [168])
	$24 = *($34 + [172])
	*($3) = $24
	$16 = *($22)
	*($33) = $16
	$29 = *($4)
	$21 = [0]
	$28 = CALL strlen([1200])
	if ( ($28 == 0) ){ goto $label$190 }
	$24 = ( $24 ? uint_32($29 >> [1]) : $21 )
	$21 = ($29 & [1])
	$15 = ( $16 ? $9 : $21 )
	$16 = ($15 + $24)
	$29 = $16
	if ( ((int_32)$24 < (int_32)$28) ){ goto $label$191 }
	$29 = $15
	
.LOOP $label$193:
	$24 = (($24 - $28) + [1])
	if ( ($24 == 0) ){ goto $label$192 }
	$29 = CALL memchr($29, [45], $24)
	if ( ($29 == 0) ){ goto $label$192 }
	if ( (CALL memcmp($29, [1200], $28) == 0) ){ goto $label$191 }
	$29 = ($29 + [1])
	$24 = ($16 - $29)
	if ( ((int_32)$24 >= (int_32)$28) ){ goto $label$193 }
	
.LABEL $label$192
	$29 = $16
	
.LABEL $label$191
	$21 = ( [-1] ? ($29 - $15) : ((int_32)$29 == (int_32)$16) )
	
.LABEL $label$190
	CALL eosio_assert([1], [1088])
	$2 = (int_64)5462355
	
.LOOP $label$195:
	$29 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$194 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$196 }
	
.LOOP $label$197:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$194 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$197 }
	
.LABEL $label$196
	$29 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$195 }
	
.LABEL $label$194
	CALL eosio_assert($29, [1056])
	$12 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($12) & [1]) ){ goto $label$199 }
	$29 = ($12 + [1])
	goto $label$198 
	
.LABEL $label$199
	$29 = *($12 + [8])
	
.LABEL $label$198
	$30 = [-1]
	$28 = [0]
	
.LOOP $label$200:
	$15 = $28
	$28 = ($15 + [1])
	$24 = ($29 + $30)
	$16 = ($30 + [1])
	$30 = $16
	if ( *(($24 + [1])) ){ goto $label$200 }
	if ( ($16 == 0) ){ goto $label$202 }
	$1 = (CASTING uint_64)(uint_32 $15)
	$32 = (int_64)0
	$2 = (int_64)8
	
.LOOP $label$203:
	$30 = *($29)
	if ( ((uint_32)(($30 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$204 }
	$32 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$2 & (int_64)4294967288)) | (int_64)$32)
	
.LABEL $label$204
	$29 = ($29 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	$1 = ((int_64)$1 + (int_64)-1)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$203 }
	goto $label$201 
	
.LABEL $label$202
	$32 = (int_64)0
	
.LABEL $label$201
	CALL $82(($34 + [208]), $12)
	$15 = (($34 + [208]) + [8])
	$17 = ((int_64)$32 | (int_64)((int_64)$20 & (int_64)255))
	$30 = ($30 & [1])
	$30 = *($34 + [208])
	$29 = ( *($34 + [212]) ? uint_32($30 >> [1]) : $30 )
	if ( ($29 == 0) ){ goto $label$205 }
	$30 = ( *($15) ? $26 : $30 )
	
.LOOP $label$206:
	*($30) = CALL tolower(*($30))
	$30 = ($30 + [1])
	$29 = ($29 + [-1])
	if ( $29 ){ goto $label$206 }
	
.LABEL $label$205
	*(($30 = (($34 + [1072]) + (*($34 + [220]) << [4])))) = $31
	*($30 + [8]) = $17
	CALL $83(($34 + [168]), $4, [0], $21, $4)
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$208 }
	*($30) = [0]
	goto $label$207 
	
.LABEL $label$208
	*(*($30 + [8])) = [0]
	*($30 + [4]) = [0]
	
.LABEL $label$207
	CALL $80($30, [0])
	*(($30 + [8])) = *($22)
	*($30) = *($34 + [168])
	$30 = *($4)
	CALL $83(($34 + [168]), $4, ($21 + [1]), (( *($3) ? uint_32($30 >> [1]) : ($30 & [1]) ) + ((int_32)$21 ^ (int_32)[-1])), $4)
	if ( (*($4) & [1]) ){ goto $label$210 }
	*($4) = [0]
	goto $label$209 
	
.LABEL $label$210
	*(*($33)) = [0]
	*($3) = [0]
	
.LABEL $label$209
	$16 = [0]
	CALL $80($4, [0])
	*($4) = *($34 + [168])
	$28 = *($34 + [172])
	*($3) = $28
	$24 = *($22)
	*($33) = $24
	$30 = *($4)
	$29 = CALL strlen([1200])
	if ( ($29 == 0) ){ goto $label$211 }
	$28 = ( $28 ? uint_32($30 >> [1]) : $21 )
	$21 = ($30 & [1])
	$16 = ( $24 ? $9 : $21 )
	$24 = ($16 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$212 }
	$30 = $16
	
.LOOP $label$214:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$213 }
	$30 = CALL memchr($30, [45], $28)
	if ( ($30 == 0) ){ goto $label$213 }
	if ( (CALL memcmp($30, [1200], $29) == 0) ){ goto $label$212 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$214 }
	
.LABEL $label$213
	$30 = $24
	
.LABEL $label$212
	$16 = ( [-1] ? ($30 - $16) : ((int_32)$30 == (int_32)$24) )
	
.LABEL $label$211
	$30 = ((int_32)*($34 + [220]) * (int_32)[12])
	CALL $78((($34 + [704]) + $30), (($34 + [224]) + $30))
	*($27) = (int_64)-1
	*($10) = (int_64)0
	*($25) = [0]
	$2 = *($0)
	*($22) = $2
	*($34 + [168]) = $2
	$30 = CALL db_find_i64($2, $2, (int_64)-3665743388780527616, $2)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$216 }
	CALL eosio_assert(((int_32)*(CALL $32(($34 + [168]), $30) + [16]) == (int_32)($34 + [168])), [272])
	goto $label$215 
	
.LABEL $label$216
	$1 = *($0)
	CALL eosio_assert(((int_64)*($34 + [168]) == (int_64)CALL $fimport$13()), [640])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [168])
	*($30 + [8]) = (int_64)0
	*($30) = *($0)
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	$2 = *($30)
	$28 = CALL db_store_i64(*($22), (int_64)-3665743388780527616, $1, $2, ($34 + [1648]), [16])
	*($30 + [20]) = $28
	if ( (uint_64)($2 <= *($27)) ){ goto $label$217 }
	*($27) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$217
	*($34 + [80]) = $30
	$2 = *($30)
	*($34 + [120]) = $2
	*($34 + [40]) = $28
	$29 = *($6)
	if ( ((uint_32)$29 >= (uint_32)*($25)) ){ goto $label$219 }
	*($29 + [8]) = $2
	*($29 + [16]) = $28
	*($34 + [80]) = [0]
	*($29) = $30
	*($6) = ($29 + [24])
	goto $label$218 
	
.LABEL $label$219
	CALL $33($10, ($34 + [80]), ($34 + [120]), ($34 + [40]))
	
.LABEL $label$218
	$30 = *($34 + [80])
	*($34 + [80]) = [0]
	if ( ($30 == 0) ){ goto $label$215 }
	CALL $76($30)
	
.LABEL $label$215
	$18 = *(CALL $34(($34 + [168]), *($0), [208]) + [8])
	*($34 + [160]) = (int_64)0
	*(($29 = (($34 + [120]) + [16]))) = (int_64)-1
	*($11) = (int_64)0
	*(($28 = (($34 + [120]) + [32]))) = [0]
	$2 = *($0)
	*(($24 = (($34 + [120]) + [8]))) = $2
	*($34 + [120]) = $2
	$30 = CALL db_find_i64($2, $2, (int_64)5031766321369448448, $2)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$221 }
	CALL eosio_assert(((int_32)*(CALL $35(($34 + [120]), $30) + [16]) == (int_32)($34 + [120])), [272])
	goto $label$220 
	
.LABEL $label$221
	$1 = *($0)
	CALL eosio_assert(((int_64)*($34 + [120]) == (int_64)CALL $fimport$13()), [640])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [120])
	*($30 + [8]) = (int_64)0
	*($30) = *($0)
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	$2 = *($30)
	$24 = CALL db_store_i64(*($24), (int_64)5031766321369448448, $1, $2, ($34 + [1648]), [16])
	*($30 + [20]) = $24
	if ( (uint_64)($2 <= *($29)) ){ goto $label$222 }
	*($29) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$222
	*($34 + [40]) = $30
	$2 = *($30)
	*($34 + [80]) = $2
	*($34) = $24
	$22 = (($34 + [120]) + [28])
	$29 = *($22)
	if ( ((uint_32)$29 >= (uint_32)*($28)) ){ goto $label$224 }
	*($29 + [8]) = $2
	*($29 + [16]) = $24
	*($34 + [40]) = [0]
	*($29) = $30
	*($22) = ($29 + [24])
	goto $label$223 
	
.LABEL $label$224
	CALL $36($11, ($34 + [40]), ($34 + [80]), $34)
	
.LABEL $label$223
	$30 = *($34 + [40])
	*($34 + [40]) = [0]
	if ( ($30 == 0) ){ goto $label$225 }
	CALL $76($30)
	
.LABEL $label$225
	*($34 + [160]) = (int_64)0
	
.LABEL $label$220
	*($34 + [160]) = *(CALL $37(($34 + [120]), *($0), [208]) + [8])
	*((($34 + [80]) + [16])) = (int_64)-1
	*($14) = (int_64)0
	*(($22 = (($34 + [80]) + [32]))) = [0]
	$19 = *($0)
	*((($34 + [80]) + [8])) = $19
	*($34 + [80]) = $19
	$30 = (($34 + [704]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$227 }
	$30 = ($30 + [1])
	goto $label$226 
	
.LABEL $label$227
	$30 = *($30 + [8])
	
.LABEL $label$226
	$29 = [-1]
	
.LOOP $label$228:
	$28 = ($30 + $29)
	$24 = ($29 + [1])
	$29 = $24
	if ( *(($28 + [1])) ){ goto $label$228 }
	$20 = (CASTING uint_64)(uint_32 $24)
	$2 = (int_64)0
	$1 = (int_64)59
	$31 = (int_64)0
	
.LOOP $label$229:
	$32 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$20) ){ goto $label$230 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$232 }
	$29 = ($29 + [165])
	goto $label$231 
	
.LABEL $label$232
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$231
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$230
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$234 }
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$233 
	
.LABEL $label$234
	$32 = ((int_64)$32 & (int_64)15)
	
.LABEL $label$233
	$30 = ($30 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$31 = ((int_64)$32 | (int_64)$31)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$229 }
	$30 = CALL db_find_i64($19, $19, (int_64)5031766160157179904, $31)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$240 }
	CALL eosio_assert(((int_32)*(CALL $41(($34 + [80]), $30) + [16]) == (int_32)($34 + [80])), [272])
	$30 = (($34 + [704]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$239 }
	$30 = ($30 | [1])
	goto $label$238 
	
.LABEL $label$240
	$2 = *($34 + [80])
	*($34 + [160]) = ((int_64)*($34 + [160]) + (int_64)1)
	$1 = *($0)
	*(($34 + [8])) = ($34 + [160])
	*($34 + [4]) = ($34 + [220])
	*($34) = ($34 + [704])
	*($34 + [1648]) = $1
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$13()), [640])
	*(($28 = (($34 + [40]) + [8]))) = ($34 + [1648])
	*($34 + [44]) = $34
	*($34 + [40]) = ($34 + [80])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [80])
	CALL $44(($34 + [40]), $30)
	*($34 + [1672]) = $30
	$2 = *($30)
	*($34 + [40]) = $2
	$24 = *($30 + [20])
	*($34 + [1668]) = $24
	$21 = (($34 + [80]) + [28])
	$29 = *($21)
	if ( ((uint_32)$29 >= (uint_32)*($22)) ){ goto $label$237 }
	*($29 + [8]) = $2
	*($29 + [16]) = $24
	*($34 + [1672]) = [0]
	*($29) = $30
	*($21) = ($29 + [24])
	goto $label$236 
	
.LABEL $label$239
	$30 = *($30 + [8])
	
.LABEL $label$238
	$29 = [-1]
	
.LOOP $label$241:
	$28 = ($30 + $29)
	$24 = ($29 + [1])
	$29 = $24
	if ( *(($28 + [1])) ){ goto $label$241 }
	$20 = (CASTING uint_64)(uint_32 $24)
	$2 = (int_64)0
	$1 = (int_64)59
	$31 = (int_64)0
	
.LOOP $label$242:
	$32 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$20) ){ goto $label$243 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$245 }
	$29 = ($29 + [165])
	goto $label$244 
	
.LABEL $label$245
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$244
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$243
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$247 }
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$246 
	
.LABEL $label$247
	$32 = ((int_64)$32 & (int_64)15)
	
.LABEL $label$246
	$30 = ($30 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$31 = ((int_64)$32 | (int_64)$31)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$242 }
	$2 = *(CALL $40(($34 + [80]), $31, [208]) + [8])
	goto $label$235 
	
.LABEL $label$237
	CALL $39($14, ($34 + [1672]), ($34 + [40]), ($34 + [1668]))
	
.LABEL $label$236
	$30 = *($34 + [1672])
	*($34 + [1672]) = [0]
	if ( ($30 == 0) ){ goto $label$248 }
	CALL $76($30)
	
.LABEL $label$248
	*(($29 = (($34 + [40]) + [16]))) = (int_64)-1
	*($23) = (int_64)0
	$30 = [0]
	*((($34 + [40]) + [32])) = [0]
	$2 = *($0)
	*($28) = $2
	*($34 + [40]) = $2
	$28 = CALL db_find_i64($2, $2, (int_64)5031766321369448448, $2)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$249 }
	$30 = CALL $35(($34 + [40]), $28)
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)($34 + [40])), [272])
	
.LABEL $label$249
	$1 = *($0)
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [336])
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)($34 + [40])), [416])
	CALL eosio_assert(((int_64)*($34 + [40]) == (int_64)CALL $fimport$13()), [464])
	*($30 + [8]) = *($34 + [160])
	$2 = *($30)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	CALL db_update_i64(*($30 + [20]), $1, ($34 + [1648]), [16])
	if ( (uint_64)($2 <= *($29)) ){ goto $label$250 }
	*($29) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$250
	$30 = (($34 + [704]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$252 }
	$30 = ($30 + [1])
	goto $label$251 
	
.LABEL $label$252
	$30 = *($30 + [8])
	
.LABEL $label$251
	$29 = [-1]
	
.LOOP $label$253:
	$28 = ($30 + $29)
	$24 = ($29 + [1])
	$29 = $24
	if ( *(($28 + [1])) ){ goto $label$253 }
	$20 = (CASTING uint_64)(uint_32 $24)
	$2 = (int_64)0
	$1 = (int_64)59
	$31 = (int_64)0
	
.LOOP $label$254:
	$32 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$20) ){ goto $label$255 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$257 }
	$29 = ($29 + [165])
	goto $label$256 
	
.LABEL $label$257
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$256
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$255
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$259 }
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$258 
	
.LABEL $label$259
	$32 = ((int_64)$32 & (int_64)15)
	
.LABEL $label$258
	$30 = ($30 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$31 = ((int_64)$32 | (int_64)$31)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$254 }
	$2 = *(CALL $40(($34 + [80]), $31, [208]) + [8])
	$28 = *($23)
	if ( ($28 == 0) ){ goto $label$235 }
	$24 = (($34 + [40]) + [28])
	$30 = *($24)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$261 }
	
.LOOP $label$262:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$263 }
	CALL $76($29)
	
.LABEL $label$263
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$262 }
	$30 = *($23)
	goto $label$260 
	
.LABEL $label$261
	$30 = $28
	
.LABEL $label$260
	*($24) = $28
	CALL $76($30)
	
.LABEL $label$235
	*(($28 = (($34 + [40]) + [8]))) = $2
	*(($29 = (($34 + [40]) + [16]))) = (int_64)-1
	*($23) = (int_64)0
	*(($24 = (($34 + [40]) + [32]))) = [0]
	$1 = *($0)
	*($34 + [40]) = $1
	$30 = CALL db_find_i64($1, $2, (int_64)-3665743484108668928, $17)
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$265 }
	CALL eosio_assert(((int_32)*(CALL $42(($34 + [40]), $30) + [16]) == (int_32)($34 + [40])), [272])
	goto $label$264 
	
.LABEL $label$265
	$2 = *($0)
	*(($34 + [8])) = $2
	*(($22 = ($34 + [16]))) = (int_64)-1
	*(($21 = ($34 + [24]))) = (int_64)0
	$30 = [0]
	*(($34 + [32])) = [0]
	*($34) = $2
	$1 = ((int_64)$18 + (int_64)1)
	$33 = CALL db_find_i64($2, $2, (int_64)-3665743388780527616, $2)
	if ( ((int_32)$33 < (int_32)[0]) ){ goto $label$266 }
	$30 = CALL $32($34, $33)
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)$34), [272])
	
.LABEL $label$266
	$32 = *($0)
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [336])
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)$34), [416])
	CALL eosio_assert(((int_64)*($34) == (int_64)CALL $fimport$13()), [464])
	*($30 + [8]) = $1
	$2 = *($30)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	CALL db_update_i64(*($30 + [20]), $32, ($34 + [1648]), [16])
	if ( (uint_64)($2 <= *($22)) ){ goto $label$267 }
	*($22) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$267
	$32 = *($0)
	CALL eosio_assert(((int_64)*($34 + [40]) == (int_64)CALL $fimport$13()), [640])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [40])
	*($30 + [8]) = $1
	*($30) = $17
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	$2 = *($30)
	$28 = CALL db_store_i64(*($28), (int_64)-3665743484108668928, $32, $2, ($34 + [1648]), [16])
	*($30 + [20]) = $28
	if ( (uint_64)($2 <= *($29)) ){ goto $label$268 }
	*($29) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$268
	*($34 + [1672]) = $30
	$2 = *($30)
	*($34 + [1648]) = $2
	*($34 + [1668]) = $28
	$22 = (($34 + [40]) + [28])
	$29 = *($22)
	if ( ((uint_32)$29 >= (uint_32)*($24)) ){ goto $label$270 }
	*($29 + [8]) = $2
	*($29 + [16]) = $28
	*($34 + [1672]) = [0]
	*($29) = $30
	*($22) = ($29 + [24])
	goto $label$269 
	
.LABEL $label$270
	CALL $43($23, ($34 + [1672]), ($34 + [1648]), ($34 + [1668]))
	
.LABEL $label$269
	$30 = *($34 + [1672])
	*($34 + [1672]) = [0]
	if ( ($30 == 0) ){ goto $label$271 }
	CALL $76($30)
	
.LABEL $label$271
	$28 = *($21)
	if ( ($28 == 0) ){ goto $label$264 }
	$24 = ($34 + [28])
	$30 = *($24)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$273 }
	
.LOOP $label$274:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$275 }
	CALL $76($29)
	
.LABEL $label$275
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$274 }
	$30 = *($21)
	goto $label$272 
	
.LABEL $label$273
	$30 = $28
	
.LABEL $label$272
	*($24) = $28
	CALL $76($30)
	
.LABEL $label$264
	$24 = (*($34 + [220]) + [1])
	*($34 + [220]) = $24
	$2 = *($34 + [1632])
	$28 = *($23)
	if ( ($28 == 0) ){ goto $label$276 }
	$22 = (($34 + [40]) + [28])
	$30 = *($22)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$278 }
	
.LOOP $label$279:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$280 }
	CALL $76($29)
	
.LABEL $label$280
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$279 }
	$30 = *($23)
	goto $label$277 
	
.LABEL $label$278
	$30 = $28
	
.LABEL $label$277
	*($22) = $28
	CALL $76($30)
	
.LABEL $label$276
	$28 = *($14)
	if ( ($28 == 0) ){ goto $label$281 }
	$22 = (($34 + [80]) + [28])
	$30 = *($22)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$283 }
	
.LOOP $label$284:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$285 }
	CALL $76($29)
	
.LABEL $label$285
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$284 }
	$30 = *($14)
	goto $label$282 
	
.LABEL $label$283
	$30 = $28
	
.LABEL $label$282
	*($22) = $28
	CALL $76($30)
	
.LABEL $label$281
	$28 = *($11)
	if ( ($28 == 0) ){ goto $label$286 }
	$22 = (($34 + [120]) + [28])
	$30 = *($22)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$288 }
	
.LOOP $label$289:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$290 }
	CALL $76($29)
	
.LABEL $label$290
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$289 }
	$30 = *($11)
	goto $label$287 
	
.LABEL $label$288
	$30 = $28
	
.LABEL $label$287
	*($22) = $28
	CALL $76($30)
	
.LABEL $label$286
	$28 = *($10)
	if ( ($28 == 0) ){ goto $label$291 }
	$30 = *($6)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$293 }
	
.LOOP $label$294:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$295 }
	CALL $76($29)
	
.LABEL $label$295
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$294 }
	$30 = *($10)
	goto $label$292 
	
.LABEL $label$293
	$30 = $28
	
.LABEL $label$292
	*($6) = $28
	CALL $76($30)
	
.LABEL $label$291
	$1 = (CASTING int_64)(int_32 $24)
	if ( ((*($34 + [208]) & [1]) == 0) ){ goto $label$296 }
	CALL $76(*($15))
	
.LABEL $label$296
	if ( (uint_64)($1 <= $2) ){ goto $label$158 }
	
.LABEL $label$157
	$10 = ($5 + [1])
	$30 = *($5)
	$28 = *($5 + [8])
	$24 = *($5 + [4])
	$16 = [0]
	$29 = CALL strlen([1200])
	if ( ($29 == 0) ){ goto $label$297 }
	$28 = ( $24 ? uint_32($30 >> [1]) : $15 )
	$15 = ($30 & [1])
	$16 = ( $28 ? $10 : $15 )
	$24 = ($16 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$298 }
	$30 = $16
	
.LOOP $label$300:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$299 }
	$30 = CALL memchr($30, [45], $28)
	if ( ($30 == 0) ){ goto $label$299 }
	if ( (CALL memcmp($30, [1200], $29) == 0) ){ goto $label$298 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$300 }
	
.LABEL $label$299
	$30 = $24
	
.LABEL $label$298
	$16 = ( [-1] ? ($30 - $16) : ((int_32)$30 == (int_32)$24) )
	
.LABEL $label$297
	$26 = (($34 + [224]) | [1])
	$33 = (($34 + [40]) + [24])
	$12 = (($34 + [80]) + [24])
	$14 = (($34 + [120]) + [24])
	$11 = (($34 + [168]) + [24])
	$25 = (($34 + [208]) | [1])
	$3 = ($5 + [4])
	$6 = (($34 + [168]) + [16])
	$27 = (($34 + [168]) + [32])
	$9 = (($34 + [168]) + [28])
	
.LOOP $label$302:
	if ( ((uint_32)($16 + [-1]) > (uint_32)[498]) ){ goto $label$301 }
	if ( ((uint_64)*($34 + [220]) >= (uint_64)*($34 + [1632])) ){ goto $label$301 }
	CALL $83(($34 + [168]), $5, [0], $16, $5)
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$304 }
	*($30) = [0]
	goto $label$303 
	
.LABEL $label$304
	*(*($30 + [8])) = [0]
	*($30 + [4]) = [0]
	
.LABEL $label$303
	CALL $80($30, [0])
	$4 = (($34 + [168]) + [8])
	*(($30 + [8])) = *($4)
	*($30) = *($34 + [168])
	$30 = *($5)
	CALL $83(($34 + [168]), $5, ($16 + [1]), (( *($3) ? uint_32($30 >> [1]) : ($30 & [1]) ) + ((int_32)$16 ^ (int_32)[-1])), $5)
	if ( (*($5) & [1]) ){ goto $label$306 }
	*($5) = [0]
	goto $label$305 
	
.LABEL $label$306
	*(*(($5 + [8]))) = [0]
	*($3) = [0]
	
.LABEL $label$305
	$16 = [0]
	CALL $80($5, [0])
	*($5) = *($34 + [168])
	$28 = *($34 + [172])
	*($3) = $28
	$24 = *($4)
	*(($21 = ($5 + [8]))) = $24
	$30 = *($5)
	$29 = CALL strlen([1200])
	if ( ($29 == 0) ){ goto $label$307 }
	$28 = ( $28 ? uint_32($30 >> [1]) : $15 )
	$15 = ($30 & [1])
	$16 = ( $24 ? $10 : $15 )
	$24 = ($16 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$308 }
	$30 = $16
	
.LOOP $label$310:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$309 }
	$30 = CALL memchr($30, [45], $28)
	if ( ($30 == 0) ){ goto $label$309 }
	if ( (CALL memcmp($30, [1200], $29) == 0) ){ goto $label$308 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$310 }
	
.LABEL $label$309
	$30 = $24
	
.LABEL $label$308
	$16 = ( [-1] ? ($30 - $16) : ((int_32)$30 == (int_32)$24) )
	
.LABEL $label$307
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	$29 = *($30)
	if ( ($29 & [1]) ){ goto $label$314 }
	$28 = uint_32($29 >> [1])
	$15 = ($30 + [1])
	$29 = CALL strlen([1216])
	if ( $29 ){ goto $label$313 }
	goto $label$312 
	
.LABEL $label$314
	$28 = *($30 + [4])
	$15 = *($30 + [8])
	$29 = CALL strlen([1216])
	if ( ($29 == 0) ){ goto $label$312 }
	
.LABEL $label$313
	$24 = ($15 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$315 }
	$30 = $15
	
.LOOP $label$317:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$316 }
	$30 = CALL memchr($30, [46], $28)
	if ( ($30 == 0) ){ goto $label$316 }
	if ( (CALL memcmp($30, [1216], $29) == 0) ){ goto $label$315 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$317 }
	
.LABEL $label$316
	$30 = $24
	
.LABEL $label$315
	$30 = ( [-1] ? ($30 - $15) : ((int_32)$30 == (int_32)$24) )
	goto $label$311 
	
.LABEL $label$312
	$30 = [0]
	
.LABEL $label$311
	$29 = ($30 + [1])
	$28 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	$24 = *($28)
	if ( ($24 & [1]) ){ goto $label$319 }
	$28 = uint_32($24 >> [1])
	goto $label$318 
	
.LABEL $label$319
	$28 = *($28 + [4])
	
.LABEL $label$318
	CALL eosio_assert(($29 <= $28), [1232])
	$24 = ((int_32)*($34 + [220]) * (int_32)[12])
	$28 = (($34 + [224]) + $24)
	$29 = *($28)
	$20 = (int_64)0
	if ( ((uint_32)$30 > (uint_32)[100]) ){ goto $label$320 }
	if ( ($29 & [1]) ){ goto $label$322 }
	$15 = uint_32($29 >> [1])
	goto $label$321 
	
.LABEL $label$322
	$15 = *($28 + [4])
	
.LABEL $label$321
	$20 = (CASTING uint_64)(uint_32 (([255] - $30) + $15))
	
.LABEL $label$320
	if ( ($29 & [1]) ){ goto $label$325 }
	$29 = uint_32($29 >> [1])
	if ( ($29 == 0) ){ goto $label$324 }
	$30 = ($26 + $24)
	$31 = (int_64)0
	
.LOOP $label$326:
	$28 = *($30)
	if ( ((uint_32)(($28 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$327 }
	$31 = ((int_64)((int_64)((int_64)$31 * (int_64)10) + (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)) + (int_64)-48)
	
.LABEL $label$327
	$30 = ($30 + [1])
	$29 = ($29 + [-1])
	if ( $29 ){ goto $label$326 }
	goto $label$323 
	
.LABEL $label$325
	$29 = *($28 + [4])
	if ( ($29 == 0) ){ goto $label$324 }
	$24 = ($28 + [8])
	$28 = *($24)
	$30 = [0]
	$31 = (int_64)0
	
.LOOP $label$328:
	if ( ((int_32)*(($28 + $30)) < (int_32)[48]) ){ goto $label$329 }
	if ( ((int_32)*((*($24) + $30)) > (int_32)[57]) ){ goto $label$329 }
	$31 = ((int_64)((int_64)((int_64)$31 * (int_64)10) + (int_64)*((*($24) + $30))) + (int_64)-48)
	
.LABEL $label$329
	$30 = ($30 + [1])
	if ( ($30 <= $29) ){ goto $label$328 }
	goto $label$323 
	
.LABEL $label$324
	$31 = (int_64)0
	
.LABEL $label$323
	CALL $83(($34 + [168]), $5, [0], $16, $5)
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$331 }
	*($30) = [0]
	goto $label$330 
	
.LABEL $label$331
	*(*($30 + [8])) = [0]
	*($30 + [4]) = [0]
	
.LABEL $label$330
	CALL $80($30, [0])
	*(($30 + [8])) = *($4)
	*($30) = *($34 + [168])
	$30 = *($5)
	CALL $83(($34 + [168]), $5, ($16 + [1]), (( *($3) ? uint_32($30 >> [1]) : ($30 & [1]) ) + ((int_32)$16 ^ (int_32)[-1])), $5)
	if ( (*($5) & [1]) ){ goto $label$333 }
	*($5) = [0]
	goto $label$332 
	
.LABEL $label$333
	*(*($21)) = [0]
	*($3) = [0]
	
.LABEL $label$332
	$30 = [0]
	CALL $80($5, [0])
	*($5) = *($34 + [168])
	$24 = *($34 + [172])
	*($3) = $24
	$16 = *($4)
	*($21) = $16
	$29 = *($5)
	$22 = [0]
	$28 = CALL strlen([1200])
	if ( ($28 == 0) ){ goto $label$334 }
	$24 = ( $24 ? uint_32($29 >> [1]) : $22 )
	$22 = ($29 & [1])
	$15 = ( $16 ? $10 : $22 )
	$16 = ($15 + $24)
	$29 = $16
	if ( ((int_32)$24 < (int_32)$28) ){ goto $label$335 }
	$29 = $15
	
.LOOP $label$337:
	$24 = (($24 - $28) + [1])
	if ( ($24 == 0) ){ goto $label$336 }
	$29 = CALL memchr($29, [45], $24)
	if ( ($29 == 0) ){ goto $label$336 }
	if ( (CALL memcmp($29, [1200], $28) == 0) ){ goto $label$335 }
	$29 = ($29 + [1])
	$24 = ($16 - $29)
	if ( ((int_32)$24 >= (int_32)$28) ){ goto $label$337 }
	
.LABEL $label$336
	$29 = $16
	
.LABEL $label$335
	$22 = ( [-1] ? ($29 - $15) : ((int_32)$29 == (int_32)$16) )
	
.LABEL $label$334
	CALL eosio_assert([1], [1088])
	$2 = (int_64)5462355
	
.LOOP $label$339:
	$29 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$338 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$340 }
	
.LOOP $label$341:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$338 }
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$341 }
	
.LABEL $label$340
	$29 = [1]
	$30 = ($30 + [1])
	if ( ((int_32)$30 < (int_32)[7]) ){ goto $label$339 }
	
.LABEL $label$338
	CALL eosio_assert($29, [1056])
	$23 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($23) & [1]) ){ goto $label$343 }
	$29 = ($23 + [1])
	goto $label$342 
	
.LABEL $label$343
	$29 = *($23 + [8])
	
.LABEL $label$342
	$30 = [-1]
	$28 = [0]
	
.LOOP $label$344:
	$15 = $28
	$28 = ($15 + [1])
	$24 = ($29 + $30)
	$16 = ($30 + [1])
	$30 = $16
	if ( *(($24 + [1])) ){ goto $label$344 }
	if ( ($16 == 0) ){ goto $label$346 }
	$1 = (CASTING uint_64)(uint_32 $15)
	$32 = (int_64)0
	$2 = (int_64)8
	
.LOOP $label$347:
	$30 = *($29)
	if ( ((uint_32)(($30 + [-65]) & [255]) > (uint_32)[25]) ){ goto $label$348 }
	$32 = ((int_64)((int_64)((int_64)(CASTING uint_64)(uint_32 $30) << (int_64)56) >> (int_64)56) << (int_64)((int_64)$2 & (int_64)4294967288)) | (int_64)$32)
	
.LABEL $label$348
	$29 = ($29 + [1])
	$2 = ((int_64)$2 + (int_64)8)
	$1 = ((int_64)$1 + (int_64)-1)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$347 }
	goto $label$345 
	
.LABEL $label$346
	$32 = (int_64)0
	
.LABEL $label$345
	CALL $82(($34 + [208]), $23)
	$15 = (($34 + [208]) + [8])
	$17 = ((int_64)$32 | (int_64)((int_64)$20 & (int_64)255))
	$30 = ($30 & [1])
	$30 = *($34 + [208])
	$29 = ( *($34 + [212]) ? uint_32($30 >> [1]) : $30 )
	if ( ($29 == 0) ){ goto $label$349 }
	$30 = ( *($15) ? $25 : $30 )
	
.LOOP $label$350:
	*($30) = CALL tolower(*($30))
	$30 = ($30 + [1])
	$29 = ($29 + [-1])
	if ( $29 ){ goto $label$350 }
	
.LABEL $label$349
	*(($30 = (($34 + [1072]) + (*($34 + [220]) << [4])))) = $31
	*($30 + [8]) = $17
	CALL $83(($34 + [168]), $5, [0], $22, $5)
	$30 = (($34 + [224]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$352 }
	*($30) = [0]
	goto $label$351 
	
.LABEL $label$352
	*(*($30 + [8])) = [0]
	*($30 + [4]) = [0]
	
.LABEL $label$351
	CALL $80($30, [0])
	*(($30 + [8])) = *($4)
	*($30) = *($34 + [168])
	$30 = *($5)
	CALL $83(($34 + [168]), $5, ($22 + [1]), (( *($3) ? uint_32($30 >> [1]) : ($30 & [1]) ) + ((int_32)$22 ^ (int_32)[-1])), $5)
	if ( (*($5) & [1]) ){ goto $label$354 }
	*($5) = [0]
	goto $label$353 
	
.LABEL $label$354
	*(*($21)) = [0]
	*($3) = [0]
	
.LABEL $label$353
	$16 = [0]
	CALL $80($5, [0])
	*($5) = *($34 + [168])
	$28 = *($34 + [172])
	*($3) = $28
	$24 = *($4)
	*($21) = $24
	$30 = *($5)
	$29 = CALL strlen([1200])
	if ( ($29 == 0) ){ goto $label$355 }
	$28 = ( $28 ? uint_32($30 >> [1]) : $22 )
	$22 = ($30 & [1])
	$16 = ( $24 ? $10 : $22 )
	$24 = ($16 + $28)
	$30 = $24
	if ( ((int_32)$28 < (int_32)$29) ){ goto $label$356 }
	$30 = $16
	
.LOOP $label$358:
	$28 = (($28 - $29) + [1])
	if ( ($28 == 0) ){ goto $label$357 }
	$30 = CALL memchr($30, [45], $28)
	if ( ($30 == 0) ){ goto $label$357 }
	if ( (CALL memcmp($30, [1200], $29) == 0) ){ goto $label$356 }
	$30 = ($30 + [1])
	$28 = ($24 - $30)
	if ( ((int_32)$28 >= (int_32)$29) ){ goto $label$358 }
	
.LABEL $label$357
	$30 = $24
	
.LABEL $label$356
	$16 = ( [-1] ? ($30 - $16) : ((int_32)$30 == (int_32)$24) )
	
.LABEL $label$355
	$30 = ((int_32)*($34 + [220]) * (int_32)[12])
	CALL $78((($34 + [704]) + $30), (($34 + [224]) + $30))
	*($6) = (int_64)-1
	*($11) = (int_64)0
	*($27) = [0]
	$2 = *($0)
	*($4) = $2
	*($34 + [168]) = $2
	$30 = CALL db_find_i64($2, $2, (int_64)-3665743388780527616, $2)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$360 }
	CALL eosio_assert(((int_32)*(CALL $32(($34 + [168]), $30) + [16]) == (int_32)($34 + [168])), [272])
	goto $label$359 
	
.LABEL $label$360
	$1 = *($0)
	CALL eosio_assert(((int_64)*($34 + [168]) == (int_64)CALL $fimport$13()), [640])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [168])
	*($30 + [8]) = (int_64)0
	*($30) = *($0)
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	$2 = *($30)
	$28 = CALL db_store_i64(*($4), (int_64)-3665743388780527616, $1, $2, ($34 + [1648]), [16])
	*($30 + [20]) = $28
	if ( (uint_64)($2 <= *($6)) ){ goto $label$361 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$361
	*($34 + [80]) = $30
	$2 = *($30)
	*($34 + [120]) = $2
	*($34 + [40]) = $28
	$29 = *($9)
	if ( ((uint_32)$29 >= (uint_32)*($27)) ){ goto $label$363 }
	*($29 + [8]) = $2
	*($29 + [16]) = $28
	*($34 + [80]) = [0]
	*($29) = $30
	*($9) = ($29 + [24])
	goto $label$362 
	
.LABEL $label$363
	CALL $33($11, ($34 + [80]), ($34 + [120]), ($34 + [40]))
	
.LABEL $label$362
	$30 = *($34 + [80])
	*($34 + [80]) = [0]
	if ( ($30 == 0) ){ goto $label$359 }
	CALL $76($30)
	
.LABEL $label$359
	$18 = *(CALL $34(($34 + [168]), *($0), [208]) + [8])
	*($34 + [160]) = (int_64)0
	*(($29 = (($34 + [120]) + [16]))) = (int_64)-1
	*($14) = (int_64)0
	*(($28 = (($34 + [120]) + [32]))) = [0]
	$2 = *($0)
	*(($24 = (($34 + [120]) + [8]))) = $2
	*($34 + [120]) = $2
	$30 = CALL db_find_i64($2, $2, (int_64)5031766321369448448, $2)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$365 }
	CALL eosio_assert(((int_32)*(CALL $35(($34 + [120]), $30) + [16]) == (int_32)($34 + [120])), [272])
	goto $label$364 
	
.LABEL $label$365
	$1 = *($0)
	CALL eosio_assert(((int_64)*($34 + [120]) == (int_64)CALL $fimport$13()), [640])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [120])
	*($30 + [8]) = (int_64)0
	*($30) = *($0)
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	$2 = *($30)
	$24 = CALL db_store_i64(*($24), (int_64)5031766321369448448, $1, $2, ($34 + [1648]), [16])
	*($30 + [20]) = $24
	if ( (uint_64)($2 <= *($29)) ){ goto $label$366 }
	*($29) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$366
	*($34 + [40]) = $30
	$2 = *($30)
	*($34 + [80]) = $2
	*($34) = $24
	$4 = (($34 + [120]) + [28])
	$29 = *($4)
	if ( ((uint_32)$29 >= (uint_32)*($28)) ){ goto $label$368 }
	*($29 + [8]) = $2
	*($29 + [16]) = $24
	*($34 + [40]) = [0]
	*($29) = $30
	*($4) = ($29 + [24])
	goto $label$367 
	
.LABEL $label$368
	CALL $36($14, ($34 + [40]), ($34 + [80]), $34)
	
.LABEL $label$367
	$30 = *($34 + [40])
	*($34 + [40]) = [0]
	if ( ($30 == 0) ){ goto $label$369 }
	CALL $76($30)
	
.LABEL $label$369
	*($34 + [160]) = (int_64)0
	
.LABEL $label$364
	*($34 + [160]) = *(CALL $37(($34 + [120]), *($0), [208]) + [8])
	*((($34 + [80]) + [16])) = (int_64)-1
	*($12) = (int_64)0
	*(($4 = (($34 + [80]) + [32]))) = [0]
	$19 = *($0)
	*((($34 + [80]) + [8])) = $19
	*($34 + [80]) = $19
	$30 = (($34 + [704]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$371 }
	$30 = ($30 + [1])
	goto $label$370 
	
.LABEL $label$371
	$30 = *($30 + [8])
	
.LABEL $label$370
	$29 = [-1]
	
.LOOP $label$372:
	$28 = ($30 + $29)
	$24 = ($29 + [1])
	$29 = $24
	if ( *(($28 + [1])) ){ goto $label$372 }
	$20 = (CASTING uint_64)(uint_32 $24)
	$2 = (int_64)0
	$1 = (int_64)59
	$31 = (int_64)0
	
.LOOP $label$373:
	$32 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$20) ){ goto $label$374 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$376 }
	$29 = ($29 + [165])
	goto $label$375 
	
.LABEL $label$376
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$375
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$374
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$378 }
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$377 
	
.LABEL $label$378
	$32 = ((int_64)$32 & (int_64)15)
	
.LABEL $label$377
	$30 = ($30 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$31 = ((int_64)$32 | (int_64)$31)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$373 }
	$30 = CALL db_find_i64($19, $19, (int_64)5031766160157179904, $31)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$384 }
	CALL eosio_assert(((int_32)*(CALL $41(($34 + [80]), $30) + [16]) == (int_32)($34 + [80])), [272])
	$30 = (($34 + [704]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$383 }
	$30 = ($30 | [1])
	goto $label$382 
	
.LABEL $label$384
	$2 = *($34 + [80])
	*($34 + [160]) = ((int_64)*($34 + [160]) + (int_64)1)
	$1 = *($0)
	*(($34 + [8])) = ($34 + [160])
	*($34 + [4]) = ($34 + [220])
	*($34) = ($34 + [704])
	*($34 + [1648]) = $1
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$13()), [640])
	*(($28 = (($34 + [40]) + [8]))) = ($34 + [1648])
	*($34 + [44]) = $34
	*($34 + [40]) = ($34 + [80])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [80])
	CALL $45(($34 + [40]), $30)
	*($34 + [1672]) = $30
	$2 = *($30)
	*($34 + [40]) = $2
	$24 = *($30 + [20])
	*($34 + [1668]) = $24
	$22 = (($34 + [80]) + [28])
	$29 = *($22)
	if ( ((uint_32)$29 >= (uint_32)*($4)) ){ goto $label$381 }
	*($29 + [8]) = $2
	*($29 + [16]) = $24
	*($34 + [1672]) = [0]
	*($29) = $30
	*($22) = ($29 + [24])
	goto $label$380 
	
.LABEL $label$383
	$30 = *($30 + [8])
	
.LABEL $label$382
	$29 = [-1]
	
.LOOP $label$385:
	$28 = ($30 + $29)
	$24 = ($29 + [1])
	$29 = $24
	if ( *(($28 + [1])) ){ goto $label$385 }
	$20 = (CASTING uint_64)(uint_32 $24)
	$2 = (int_64)0
	$1 = (int_64)59
	$31 = (int_64)0
	
.LOOP $label$386:
	$32 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$20) ){ goto $label$387 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$389 }
	$29 = ($29 + [165])
	goto $label$388 
	
.LABEL $label$389
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$388
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$387
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$391 }
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$390 
	
.LABEL $label$391
	$32 = ((int_64)$32 & (int_64)15)
	
.LABEL $label$390
	$30 = ($30 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$31 = ((int_64)$32 | (int_64)$31)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$386 }
	$2 = *(CALL $40(($34 + [80]), $31, [208]) + [8])
	goto $label$379 
	
.LABEL $label$381
	CALL $39($12, ($34 + [1672]), ($34 + [40]), ($34 + [1668]))
	
.LABEL $label$380
	$30 = *($34 + [1672])
	*($34 + [1672]) = [0]
	if ( ($30 == 0) ){ goto $label$392 }
	CALL $76($30)
	
.LABEL $label$392
	*(($29 = (($34 + [40]) + [16]))) = (int_64)-1
	*($33) = (int_64)0
	$30 = [0]
	*((($34 + [40]) + [32])) = [0]
	$2 = *($0)
	*($28) = $2
	*($34 + [40]) = $2
	$28 = CALL db_find_i64($2, $2, (int_64)5031766321369448448, $2)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$393 }
	$30 = CALL $35(($34 + [40]), $28)
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)($34 + [40])), [272])
	
.LABEL $label$393
	$1 = *($0)
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [336])
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)($34 + [40])), [416])
	CALL eosio_assert(((int_64)*($34 + [40]) == (int_64)CALL $fimport$13()), [464])
	*($30 + [8]) = *($34 + [160])
	$2 = *($30)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	CALL db_update_i64(*($30 + [20]), $1, ($34 + [1648]), [16])
	if ( (uint_64)($2 <= *($29)) ){ goto $label$394 }
	*($29) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$394
	$30 = (($34 + [704]) + ((int_32)*($34 + [220]) * (int_32)[12]))
	if ( (*($30) & [1]) ){ goto $label$396 }
	$30 = ($30 + [1])
	goto $label$395 
	
.LABEL $label$396
	$30 = *($30 + [8])
	
.LABEL $label$395
	$29 = [-1]
	
.LOOP $label$397:
	$28 = ($30 + $29)
	$24 = ($29 + [1])
	$29 = $24
	if ( *(($28 + [1])) ){ goto $label$397 }
	$20 = (CASTING uint_64)(uint_32 $24)
	$2 = (int_64)0
	$1 = (int_64)59
	$31 = (int_64)0
	
.LOOP $label$398:
	$32 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$20) ){ goto $label$399 }
	$29 = *($30)
	if ( ((uint_32)(($29 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$401 }
	$29 = ($29 + [165])
	goto $label$400 
	
.LABEL $label$401
	$29 = ( ($29 + [208]) ? [0] : ((($29 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$400
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $29) << (int_64)56) >> (int_64)56)
	
.LABEL $label$399
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$403 }
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	goto $label$402 
	
.LABEL $label$403
	$32 = ((int_64)$32 & (int_64)15)
	
.LABEL $label$402
	$30 = ($30 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$31 = ((int_64)$32 | (int_64)$31)
	$1 = ((int_64)$1 + (int_64)-5)
	if ( ((int_64)$1 != (int_64)-6) ){ goto $label$398 }
	$2 = *(CALL $40(($34 + [80]), $31, [208]) + [8])
	$28 = *($33)
	if ( ($28 == 0) ){ goto $label$379 }
	$24 = (($34 + [40]) + [28])
	$30 = *($24)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$405 }
	
.LOOP $label$406:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$407 }
	CALL $76($29)
	
.LABEL $label$407
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$406 }
	$30 = *($33)
	goto $label$404 
	
.LABEL $label$405
	$30 = $28
	
.LABEL $label$404
	*($24) = $28
	CALL $76($30)
	
.LABEL $label$379
	*(($28 = (($34 + [40]) + [8]))) = $2
	*(($29 = (($34 + [40]) + [16]))) = (int_64)-1
	*($33) = (int_64)0
	*(($24 = (($34 + [40]) + [32]))) = [0]
	$1 = *($0)
	*($34 + [40]) = $1
	$30 = CALL db_find_i64($1, $2, (int_64)-3665743484108668928, $17)
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$409 }
	CALL eosio_assert(((int_32)*(CALL $42(($34 + [40]), $30) + [16]) == (int_32)($34 + [40])), [272])
	goto $label$408 
	
.LABEL $label$409
	$2 = *($0)
	*(($34 + [8])) = $2
	*(($4 = ($34 + [16]))) = (int_64)-1
	*(($22 = ($34 + [24]))) = (int_64)0
	$30 = [0]
	*(($34 + [32])) = [0]
	*($34) = $2
	$1 = ((int_64)$18 + (int_64)1)
	$21 = CALL db_find_i64($2, $2, (int_64)-3665743388780527616, $2)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$410 }
	$30 = CALL $32($34, $21)
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)$34), [272])
	
.LABEL $label$410
	$32 = *($0)
	CALL eosio_assert(((int_32)$30 != (int_32)[0]), [336])
	CALL eosio_assert(((int_32)*($30 + [16]) == (int_32)$34), [416])
	CALL eosio_assert(((int_64)*($34) == (int_64)CALL $fimport$13()), [464])
	*($30 + [8]) = $1
	$2 = *($30)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	CALL db_update_i64(*($30 + [20]), $32, ($34 + [1648]), [16])
	if ( (uint_64)($2 <= *($4)) ){ goto $label$411 }
	*($4) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$411
	$32 = *($0)
	CALL eosio_assert(((int_64)*($34 + [40]) == (int_64)CALL $fimport$13()), [640])
	*(($30 = CALL $75([32])) + [16]) = ($34 + [40])
	*($30 + [8]) = $1
	*($30) = $17
	CALL eosio_assert([1], [592])
	CALL memcpy(($34 + [1648]), $30, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy($8, ($30 + [8]), [8])
	$2 = *($30)
	$28 = CALL db_store_i64(*($28), (int_64)-3665743484108668928, $32, $2, ($34 + [1648]), [16])
	*($30 + [20]) = $28
	if ( (uint_64)($2 <= *($29)) ){ goto $label$412 }
	*($29) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$412
	*($34 + [1672]) = $30
	$2 = *($30)
	*($34 + [1648]) = $2
	*($34 + [1668]) = $28
	$4 = (($34 + [40]) + [28])
	$29 = *($4)
	if ( ((uint_32)$29 >= (uint_32)*($24)) ){ goto $label$414 }
	*($29 + [8]) = $2
	*($29 + [16]) = $28
	*($34 + [1672]) = [0]
	*($29) = $30
	*($4) = ($29 + [24])
	goto $label$413 
	
.LABEL $label$414
	CALL $43($33, ($34 + [1672]), ($34 + [1648]), ($34 + [1668]))
	
.LABEL $label$413
	$30 = *($34 + [1672])
	*($34 + [1672]) = [0]
	if ( ($30 == 0) ){ goto $label$415 }
	CALL $76($30)
	
.LABEL $label$415
	$28 = *($22)
	if ( ($28 == 0) ){ goto $label$408 }
	$24 = ($34 + [28])
	$30 = *($24)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$417 }
	
.LOOP $label$418:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$419 }
	CALL $76($29)
	
.LABEL $label$419
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$418 }
	$30 = *($22)
	goto $label$416 
	
.LABEL $label$417
	$30 = $28
	
.LABEL $label$416
	*($24) = $28
	CALL $76($30)
	
.LABEL $label$408
	$24 = (*($34 + [220]) + [1])
	*($34 + [220]) = $24
	$2 = *($34 + [1632])
	$28 = *($33)
	if ( ($28 == 0) ){ goto $label$420 }
	$4 = (($34 + [40]) + [28])
	$30 = *($4)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$422 }
	
.LOOP $label$423:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$424 }
	CALL $76($29)
	
.LABEL $label$424
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$423 }
	$30 = *($33)
	goto $label$421 
	
.LABEL $label$422
	$30 = $28
	
.LABEL $label$421
	*($4) = $28
	CALL $76($30)
	
.LABEL $label$420
	$28 = *($12)
	if ( ($28 == 0) ){ goto $label$425 }
	$4 = (($34 + [80]) + [28])
	$30 = *($4)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$427 }
	
.LOOP $label$428:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$429 }
	CALL $76($29)
	
.LABEL $label$429
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$428 }
	$30 = *($12)
	goto $label$426 
	
.LABEL $label$427
	$30 = $28
	
.LABEL $label$426
	*($4) = $28
	CALL $76($30)
	
.LABEL $label$425
	$28 = *($14)
	if ( ($28 == 0) ){ goto $label$430 }
	$4 = (($34 + [120]) + [28])
	$30 = *($4)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$432 }
	
.LOOP $label$433:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$434 }
	CALL $76($29)
	
.LABEL $label$434
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$433 }
	$30 = *($14)
	goto $label$431 
	
.LABEL $label$432
	$30 = $28
	
.LABEL $label$431
	*($4) = $28
	CALL $76($30)
	
.LABEL $label$430
	$28 = *($11)
	if ( ($28 == 0) ){ goto $label$435 }
	$30 = *($9)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$437 }
	
.LOOP $label$438:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$439 }
	CALL $76($29)
	
.LABEL $label$439
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$438 }
	$30 = *($11)
	goto $label$436 
	
.LABEL $label$437
	$30 = $28
	
.LABEL $label$436
	*($9) = $28
	CALL $76($30)
	
.LABEL $label$435
	$1 = (CASTING int_64)(int_32 $24)
	if ( ((*($34 + [208]) & [1]) == 0) ){ goto $label$440 }
	CALL $76(*($15))
	
.LABEL $label$440
	if ( (uint_64)($1 <= $2) ){ goto $label$302 }
	
.LABEL $label$301
	$2 = *($0)
	*($34 + [172]) = ($34 + [1632])
	*($34 + [168]) = ($34 + [1640])
	*($34 + [176]) = ($34 + [1072])
	*($34 + [180]) = ($34 + [704])
	*($34 + [80]) = $2
	CALL eosio_assert(((int_64)*($34 + [1552]) == (int_64)CALL $fimport$13()), [640])
	*($34 + [124]) = ($34 + [168])
	*($34 + [120]) = ($34 + [1552])
	*($34 + [128]) = ($34 + [80])
	$30 = CALL $75([872])
	CALL $25($30)
	*($30 + [856]) = ($34 + [1552])
	CALL $46(($34 + [120]), $30)
	*($34 + [40]) = $30
	$2 = *($30)
	*($34 + [120]) = $2
	$28 = *($30 + [860])
	*($34) = $28
	$24 = ($34 + [1580])
	$29 = *($24)
	if ( ((uint_32)$29 >= (uint_32)*(($34 + [1584]))) ){ goto $label$442 }
	*($29 + [8]) = $2
	*($29 + [16]) = $28
	*($34 + [40]) = [0]
	*($29) = $30
	*($24) = ($29 + [24])
	goto $label$441 
	
.LABEL $label$442
	CALL $27(($34 + [1576]), ($34 + [40]), ($34 + [120]), $34)
	
.LABEL $label$441
	$30 = *($34 + [40])
	*($34 + [40]) = [0]
	if ( ($30 == 0) ){ goto $label$443 }
	CALL $24($30)
	CALL $76($30)
	
.LABEL $label$443
	$30 = [480]
	
.LOOP $label$444:
	$29 = (($34 + [224]) + $30)
	if ( ((*(($29 + [-12])) & [1]) == 0) ){ goto $label$445 }
	CALL $76(*(($29 + [-4])))
	
.LABEL $label$445
	$30 = ($30 + [-12])
	if ( $30 ){ goto $label$444 }
	$30 = [360]
	
.LOOP $label$446:
	$29 = (($34 + [704]) + $30)
	if ( ((*(($29 + [-12])) & [1]) == 0) ){ goto $label$447 }
	CALL $76(*(($29 + [-4])))
	
.LABEL $label$447
	$30 = ($30 + [-12])
	if ( $30 ){ goto $label$446 }
	$28 = *($34 + [1576])
	if ( ($28 == 0) ){ goto $label$448 }
	$24 = ($34 + [1580])
	$30 = *($24)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$450 }
	
.LOOP $label$451:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$452 }
	CALL $24($29)
	CALL $76($29)
	
.LABEL $label$452
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$451 }
	$30 = *(($34 + [1576]))
	goto $label$449 
	
.LABEL $label$450
	$30 = $28
	
.LABEL $label$449
	*($24) = $28
	CALL $76($30)
	
.LABEL $label$448
	$28 = *($34 + [1616])
	if ( ($28 == 0) ){ goto $label$453 }
	$24 = ($34 + [1620])
	$30 = *($24)
	if ( ((int_32)$30 == (int_32)$28) ){ goto $label$455 }
	
.LOOP $label$456:
	$30 = ($30 + [-24])
	$29 = *($30)
	*($30) = [0]
	if ( ($29 == 0) ){ goto $label$457 }
	CALL $76($29)
	
.LABEL $label$457
	if ( ((int_32)$28 != (int_32)$30) ){ goto $label$456 }
	$30 = *(($34 + [1616]))
	goto $label$454 
	
.LABEL $label$455
	$30 = $28
	
.LABEL $label$454
	*($24) = $28
	CALL $76($30)
	
.LABEL $label$453
	*([0] + [4]) = ($34 + [1680])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($3 = $4) + [76]) = $0
	*($3 + [64]) = *($1)
	*($3 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [48]) = [0]
	*(($3 + [52])) = [0]
	*(($3 + [56])) = [0]
	*($3 + [80]) = $1
	$4 = ($1 + $0)
	*($3 + [88]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [192])
	CALL memcpy(($3 + [8]), $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [192])
	CALL memcpy((($3 + [8]) + [8]), $2, [8])
	*($3 + [84]) = ($1 + [16])
	CALL $28(($3 + [80]), (($3 + [8]) + [16]))
	CALL $28(($3 + [80]), ($3 + [36]))
	CALL $28(($3 + [80]), ($3 + [48]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [84]) = ($3 + [64])
	*($3 + [80]) = ($3 + [76])
	CALL $31(($3 + [80]), ($3 + [8]))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*(($3 + [56])))
	
.LABEL $label$5
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*(($3 + [44])))
	
.LABEL $label$6
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $76(*(($3 + [32])))
	
.LABEL $label$7
	*([0] + [4]) = ($3 + [96])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	$7 = [0]
	*(($9 + [40])) = [0]
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$8 = *($0)
	*($9 + [8]) = $8
	*($9 + [16]) = $8
	$6 = CALL db_find_i64($8, $8, (int_64)3607749779150975488, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $18(($9 + [8]), $6) + [16]) == (int_32)($9 + [8])), [272])
	$7 = [1]
	
.LABEL $label$1
	CALL eosio_assert($7, [704])
	CALL eosio_assert(((int_32)*(CALL $17(($9 + [8]), *($0), [208]) + [8]) == (int_32)[1]), [736])
	CALL _ZN12eosnamedapp110deletebillEy($0, $1)
	CALL _ZN12eosnamedapp17addbillEyyRNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES7_S7_($0, $1, $2, $3, $4, $5)
	$3 = *($9 + [32])
	if ( ($3 == 0) ){ goto $label$2 }
	$4 = ($9 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $76($7)
	
.LABEL $label$6
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($9 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $3
	
.LABEL $label$3
	*($4) = $3
	CALL $76($0)
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [48])
}

void .FUNC _ZN12eosnamedapp110deletebillEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	$4 = [0]
	*((($6 + [48]) + [32])) = [0]
	*($6 + [64]) = (int_64)-1
	*($6 + [72]) = (int_64)0
	$5 = *($0)
	*($6 + [48]) = $5
	*($6 + [56]) = $5
	$3 = [0]
	$2 = CALL db_find_i64($5, $5, (int_64)3607749779150975488, $5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $18(($6 + [48]), $2) + [16]) == (int_32)($6 + [48])), [272])
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [704])
	CALL eosio_assert(((int_32)*(CALL $17(($6 + [48]), *($0), [208]) + [8]) == (int_32)[1]), [736])
	CALL require_auth(*($0))
	*((($6 + [8]) + [32])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$5 = *($0)
	*($6 + [8]) = $5
	*($6 + [16]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-6228193299614662656, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $22(($6 + [8]), $0)
	CALL eosio_assert(((int_32)*($4 + [856]) == (int_32)($6 + [8])), [272])
	
.LABEL $label$2
	$0 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($0, [768])
	CALL eosio_assert($0, [784])
	CALL eosio_assert($0, [832])
	$0 = CALL db_next_i64(*($4 + [860]), ($6 + [88]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL $22(($6 + [8]), $0)
	
.LABEL $label$3
	CALL $23(($6 + [8]), $4)
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($6 + [36])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $24($4)
	CALL $76($4)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($6 + [32]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $3
	
.LABEL $label$5
	*($2) = $3
	CALL $76($0)
	
.LABEL $label$4
	$3 = *($6 + [72])
	if ( ($3 == 0) ){ goto $label$9 }
	$2 = ($6 + [76])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL $76($4)
	
.LABEL $label$13
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($6 + [72]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $3
	
.LABEL $label$10
	*($2) = $3
	CALL $76($0)
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10412])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [608])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $75([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [192])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [192])
	CALL memcpy(($6 + [8]), ($7 + [8]), [1])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $76($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [464])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [592])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy(($5 | [8]), ($1 + [8]), [1])
	CALL db_update_i64(*($1 + [20]), $2, $5, [9])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $58 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [856]) == (int_32)$0), [272])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6228193299614662656, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $22($0, $5)
	CALL eosio_assert(((int_32)*($6 + [856]) == (int_32)$0), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	$0 = CALL memcpy($0, $1, [496])
	CALL $82(($0 + [496]), ($1 + [496]))
	CALL $82(($0 + [508]), ($1 + [508]))
	CALL $82(($0 + [520]), ($1 + [520]))
	CALL $82(($0 + [532]), ($1 + [532]))
	CALL $82(($0 + [544]), ($1 + [544]))
	CALL $82(($0 + [556]), ($1 + [556]))
	CALL $82(($0 + [568]), ($1 + [568]))
	CALL $82(($0 + [580]), ($1 + [580]))
	CALL $82(($0 + [592]), ($1 + [592]))
	CALL $82(($0 + [604]), ($1 + [604]))
	CALL $82(($0 + [616]), ($1 + [616]))
	CALL $82(($0 + [628]), ($1 + [628]))
	CALL $82(($0 + [640]), ($1 + [640]))
	CALL $82(($0 + [652]), ($1 + [652]))
	CALL $82(($0 + [664]), ($1 + [664]))
	CALL $82(($0 + [676]), ($1 + [676]))
	CALL $82(($0 + [688]), ($1 + [688]))
	CALL $82(($0 + [700]), ($1 + [700]))
	CALL $82(($0 + [712]), ($1 + [712]))
	CALL $82(($0 + [724]), ($1 + [724]))
	CALL $82(($0 + [736]), ($1 + [736]))
	CALL $82(($0 + [748]), ($1 + [748]))
	CALL $82(($0 + [760]), ($1 + [760]))
	CALL $82(($0 + [772]), ($1 + [772]))
	CALL $82(($0 + [784]), ($1 + [784]))
	CALL $82(($0 + [796]), ($1 + [796]))
	CALL $82(($0 + [808]), ($1 + [808]))
	CALL $82(($0 + [820]), ($1 + [820]))
	CALL $82(($0 + [832]), ($1 + [832]))
	CALL $82(($0 + [844]), ($1 + [844]))
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [640])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $75([32])
	CALL $55($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $54(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $76($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $51 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3665743356094152704, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $52($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [608])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $75([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [192])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [192])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $54(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $76($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [416])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [464])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [528])
	CALL eosio_assert([1], [592])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3665743388780527616, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $32($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $28(*($1), ($0 + [32]))
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $82(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $82(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [608])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $75([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [192])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [192])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $36(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $76($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $119 ()
{
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1040])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $30($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [192])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $29($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $80($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $75($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $80($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $76($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $77($7)
	return (unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [592])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-3665743356094152704, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [592])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [592])
	CALL memcpy(($4 | [8]), ($0 + [8]), [1])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)3607749779150975488, *(*($2 + [8])), $3, $4, [9])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [856]) == (int_32)$0), [864])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [912])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [976])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $24($4)
	CALL $76($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $24($4)
	CALL $76($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [860]))
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [608])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $75([872])
	$4 = CALL $25($6)
	*($6 + [856]) = $0
	CALL $26(($8 + [32]), $4)
	*($6 + [860]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [860])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $24($4)
	CALL $76($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $25 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	*(($2 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	
.LOOP $label$25:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	
.LABEL $label$24
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$3 = [0]
	
.LABEL $label$21
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	
.LOOP $label$30:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$27 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$30 }
	
.LABEL $label$29
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$3 = [0]
	
.LABEL $label$26
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [120]))) = (int_64)1398362884
	*($0 + [112]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$34 }
	
.LOOP $label$35:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$35 }
	
.LABEL $label$34
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$3 = [0]
	
.LABEL $label$31
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [136]))) = (int_64)1398362884
	*($0 + [128]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$3 = [0]
	
.LABEL $label$36
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [152]))) = (int_64)1398362884
	*($0 + [144]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$44 }
	
.LOOP $label$45:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$42 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$45 }
	
.LABEL $label$44
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$3 = [0]
	
.LABEL $label$41
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [168]))) = (int_64)1398362884
	*($0 + [160]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	
.LOOP $label$50:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$50 }
	
.LABEL $label$49
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$3 = [0]
	
.LABEL $label$46
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [184]))) = (int_64)1398362884
	*($0 + [176]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$54 }
	
.LOOP $label$55:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$52 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$55 }
	
.LABEL $label$54
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	$3 = [0]
	
.LABEL $label$51
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [200]))) = (int_64)1398362884
	*($0 + [192]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$59 }
	
.LOOP $label$60:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$60 }
	
.LABEL $label$59
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$3 = [0]
	
.LABEL $label$56
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [216]))) = (int_64)1398362884
	*($0 + [208]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$63:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$64 }
	
.LOOP $label$65:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$62 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$65 }
	
.LABEL $label$64
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	$3 = [0]
	
.LABEL $label$61
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [232]))) = (int_64)1398362884
	*($0 + [224]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$68:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$67 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$69 }
	
.LOOP $label$70:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$67 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$70 }
	
.LABEL $label$69
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$68 }
	goto $label$66 
	
.LABEL $label$67
	$3 = [0]
	
.LABEL $label$66
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [248]))) = (int_64)1398362884
	*($0 + [240]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$74 }
	
.LOOP $label$75:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$72 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$75 }
	
.LABEL $label$74
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$3 = [0]
	
.LABEL $label$71
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [264]))) = (int_64)1398362884
	*($0 + [256]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$78:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$77 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$79 }
	
.LOOP $label$80:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$77 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$80 }
	
.LABEL $label$79
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$78 }
	goto $label$76 
	
.LABEL $label$77
	$3 = [0]
	
.LABEL $label$76
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [280]))) = (int_64)1398362884
	*($0 + [272]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$83:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$82 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$84 }
	
.LOOP $label$85:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$82 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$85 }
	
.LABEL $label$84
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$83 }
	goto $label$81 
	
.LABEL $label$82
	$3 = [0]
	
.LABEL $label$81
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [296]))) = (int_64)1398362884
	*($0 + [288]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$88:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$87 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$89 }
	
.LOOP $label$90:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$87 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$90 }
	
.LABEL $label$89
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$88 }
	goto $label$86 
	
.LABEL $label$87
	$3 = [0]
	
.LABEL $label$86
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [312]))) = (int_64)1398362884
	*($0 + [304]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$93:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$92 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$94 }
	
.LOOP $label$95:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$92 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$95 }
	
.LABEL $label$94
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$93 }
	goto $label$91 
	
.LABEL $label$92
	$3 = [0]
	
.LABEL $label$91
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [328]))) = (int_64)1398362884
	*($0 + [320]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$98:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$97 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$99 }
	
.LOOP $label$100:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$97 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$100 }
	
.LABEL $label$99
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$98 }
	goto $label$96 
	
.LABEL $label$97
	$3 = [0]
	
.LABEL $label$96
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [344]))) = (int_64)1398362884
	*($0 + [336]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$103:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$102 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$104 }
	
.LOOP $label$105:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$102 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$105 }
	
.LABEL $label$104
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$103 }
	goto $label$101 
	
.LABEL $label$102
	$3 = [0]
	
.LABEL $label$101
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [360]))) = (int_64)1398362884
	*($0 + [352]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$108:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$107 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$109 }
	
.LOOP $label$110:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$107 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$110 }
	
.LABEL $label$109
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$108 }
	goto $label$106 
	
.LABEL $label$107
	$3 = [0]
	
.LABEL $label$106
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [376]))) = (int_64)1398362884
	*($0 + [368]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$113:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$112 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$114 }
	
.LOOP $label$115:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$112 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$115 }
	
.LABEL $label$114
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$113 }
	goto $label$111 
	
.LABEL $label$112
	$3 = [0]
	
.LABEL $label$111
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [392]))) = (int_64)1398362884
	*($0 + [384]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$118:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$117 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$119 }
	
.LOOP $label$120:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$117 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$120 }
	
.LABEL $label$119
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$118 }
	goto $label$116 
	
.LABEL $label$117
	$3 = [0]
	
.LABEL $label$116
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [408]))) = (int_64)1398362884
	*($0 + [400]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$123:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$122 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$124 }
	
.LOOP $label$125:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$122 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$125 }
	
.LABEL $label$124
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$123 }
	goto $label$121 
	
.LABEL $label$122
	$3 = [0]
	
.LABEL $label$121
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [424]))) = (int_64)1398362884
	*($0 + [416]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$128:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$127 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$129 }
	
.LOOP $label$130:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$127 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$130 }
	
.LABEL $label$129
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$128 }
	goto $label$126 
	
.LABEL $label$127
	$3 = [0]
	
.LABEL $label$126
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [440]))) = (int_64)1398362884
	*($0 + [432]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$133:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$132 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$134 }
	
.LOOP $label$135:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$132 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$135 }
	
.LABEL $label$134
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$133 }
	goto $label$131 
	
.LABEL $label$132
	$3 = [0]
	
.LABEL $label$131
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [456]))) = (int_64)1398362884
	*($0 + [448]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$138:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$137 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$139 }
	
.LOOP $label$140:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$137 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$140 }
	
.LABEL $label$139
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$138 }
	goto $label$136 
	
.LABEL $label$137
	$3 = [0]
	
.LABEL $label$136
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [472]))) = (int_64)1398362884
	*($0 + [464]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$143:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$142 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$144 }
	
.LOOP $label$145:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$142 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$145 }
	
.LABEL $label$144
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$143 }
	goto $label$141 
	
.LABEL $label$142
	$3 = [0]
	
.LABEL $label$141
	CALL eosio_assert($3, [1056])
	*(($2 = ($0 + [488]))) = (int_64)1398362884
	*($0 + [480]) = (int_64)0
	CALL eosio_assert([1], [1088])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$148:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$147 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$149 }
	
.LOOP $label$150:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$147 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$150 }
	
.LABEL $label$149
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$148 }
	goto $label$146 
	
.LABEL $label$147
	$3 = [0]
	
.LABEL $label$146
	CALL eosio_assert($3, [1056])
	*($0 + [496 align=4]) = (int_64)0
	*(($0 + [504])) = (int_64)0
	*(($0 + [512])) = (int_64)0
	*($0 + [520 align=4]) = (int_64)0
	*(($0 + [528])) = (int_64)0
	*(($0 + [536])) = [0]
	*(($0 + [540])) = [0]
	*($0 + [544]) = [0]
	*(($0 + [548])) = [0]
	*(($0 + [552])) = [0]
	*($0 + [556]) = [0]
	*(($0 + [560])) = [0]
	*(($0 + [564])) = [0]
	*($0 + [568]) = [0]
	*(($0 + [572])) = [0]
	*(($0 + [576])) = [0]
	*($0 + [580]) = [0]
	*(($0 + [584])) = [0]
	*(($0 + [588])) = [0]
	*($0 + [592]) = [0]
	*(($0 + [596])) = [0]
	*(($0 + [600])) = [0]
	*($0 + [604]) = [0]
	*(($0 + [608])) = [0]
	*(($0 + [612])) = [0]
	*($0 + [616]) = [0]
	*(($0 + [620])) = [0]
	*(($0 + [624])) = [0]
	*($0 + [628]) = [0]
	*(($0 + [632])) = [0]
	*(($0 + [636])) = [0]
	*($0 + [640]) = [0]
	*(($0 + [644])) = [0]
	*(($0 + [648])) = [0]
	*($0 + [652]) = [0]
	*(($0 + [656])) = [0]
	*(($0 + [660])) = [0]
	*($0 + [664]) = [0]
	*(($0 + [668])) = [0]
	*(($0 + [672])) = [0]
	*($0 + [676]) = [0]
	*(($0 + [680])) = [0]
	*(($0 + [684])) = [0]
	*($0 + [688]) = [0]
	*(($0 + [692])) = [0]
	*(($0 + [696])) = [0]
	*($0 + [700]) = [0]
	*(($0 + [704])) = [0]
	*(($0 + [708])) = [0]
	*($0 + [712]) = [0]
	*(($0 + [716])) = [0]
	*(($0 + [720])) = [0]
	*($0 + [724]) = [0]
	*(($0 + [728])) = [0]
	*(($0 + [732])) = [0]
	*($0 + [736]) = [0]
	*(($0 + [740])) = [0]
	*(($0 + [744])) = [0]
	*($0 + [748]) = [0]
	*(($0 + [752])) = [0]
	*(($0 + [756])) = [0]
	*($0 + [760]) = [0]
	*(($0 + [764])) = [0]
	*(($0 + [768])) = [0]
	*($0 + [772]) = [0]
	*(($0 + [776])) = [0]
	*(($0 + [780])) = [0]
	*($0 + [784]) = [0]
	*(($0 + [788])) = [0]
	*(($0 + [792])) = [0]
	*($0 + [796]) = [0]
	*(($0 + [800])) = [0]
	*(($0 + [804])) = [0]
	*($0 + [808]) = [0]
	*(($0 + [812])) = [0]
	*(($0 + [816])) = [0]
	*($0 + [820]) = [0]
	*(($0 + [824])) = [0]
	*(($0 + [828])) = [0]
	*($0 + [832]) = [0]
	*(($0 + [836])) = [0]
	*(($0 + [840])) = [0]
	*($0 + [844]) = [0]
	*(($0 + [848])) = [0]
	*(($0 + [852])) = [0]
	return $0
}

int_32 .FUNC $24 (int_32 $0)
{
	if ( ((*($0 + [844]) & [1]) == 0) ){ goto $label$1 }
	CALL $76(*(($0 + [852])))
	
.LABEL $label$1
	if ( ((*($0 + [832]) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*(($0 + [840])))
	
.LABEL $label$2
	if ( ((*($0 + [820]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*(($0 + [828])))
	
.LABEL $label$3
	if ( ((*($0 + [808]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*(($0 + [816])))
	
.LABEL $label$4
	if ( ((*($0 + [796]) & [1]) == 0) ){ goto $label$5 }
	CALL $76(*(($0 + [804])))
	
.LABEL $label$5
	if ( ((*($0 + [784]) & [1]) == 0) ){ goto $label$6 }
	CALL $76(*(($0 + [792])))
	
.LABEL $label$6
	if ( ((*($0 + [772]) & [1]) == 0) ){ goto $label$7 }
	CALL $76(*(($0 + [780])))
	
.LABEL $label$7
	if ( ((*($0 + [760]) & [1]) == 0) ){ goto $label$8 }
	CALL $76(*(($0 + [768])))
	
.LABEL $label$8
	if ( ((*($0 + [748]) & [1]) == 0) ){ goto $label$9 }
	CALL $76(*(($0 + [756])))
	
.LABEL $label$9
	if ( ((*($0 + [736]) & [1]) == 0) ){ goto $label$10 }
	CALL $76(*(($0 + [744])))
	
.LABEL $label$10
	if ( ((*($0 + [724]) & [1]) == 0) ){ goto $label$11 }
	CALL $76(*(($0 + [732])))
	
.LABEL $label$11
	if ( ((*($0 + [712]) & [1]) == 0) ){ goto $label$12 }
	CALL $76(*(($0 + [720])))
	
.LABEL $label$12
	if ( ((*($0 + [700]) & [1]) == 0) ){ goto $label$13 }
	CALL $76(*(($0 + [708])))
	
.LABEL $label$13
	if ( ((*($0 + [688]) & [1]) == 0) ){ goto $label$14 }
	CALL $76(*(($0 + [696])))
	
.LABEL $label$14
	if ( ((*($0 + [676]) & [1]) == 0) ){ goto $label$15 }
	CALL $76(*(($0 + [684])))
	
.LABEL $label$15
	if ( ((*($0 + [664]) & [1]) == 0) ){ goto $label$16 }
	CALL $76(*(($0 + [672])))
	
.LABEL $label$16
	if ( ((*($0 + [652]) & [1]) == 0) ){ goto $label$17 }
	CALL $76(*(($0 + [660])))
	
.LABEL $label$17
	if ( ((*($0 + [640]) & [1]) == 0) ){ goto $label$18 }
	CALL $76(*(($0 + [648])))
	
.LABEL $label$18
	if ( ((*($0 + [628]) & [1]) == 0) ){ goto $label$19 }
	CALL $76(*(($0 + [636])))
	
.LABEL $label$19
	if ( ((*($0 + [616]) & [1]) == 0) ){ goto $label$20 }
	CALL $76(*(($0 + [624])))
	
.LABEL $label$20
	if ( ((*($0 + [604]) & [1]) == 0) ){ goto $label$21 }
	CALL $76(*(($0 + [612])))
	
.LABEL $label$21
	if ( ((*($0 + [592]) & [1]) == 0) ){ goto $label$22 }
	CALL $76(*(($0 + [600])))
	
.LABEL $label$22
	if ( ((*($0 + [580]) & [1]) == 0) ){ goto $label$23 }
	CALL $76(*(($0 + [588])))
	
.LABEL $label$23
	if ( ((*($0 + [568]) & [1]) == 0) ){ goto $label$24 }
	CALL $76(*(($0 + [576])))
	
.LABEL $label$24
	if ( ((*($0 + [556]) & [1]) == 0) ){ goto $label$25 }
	CALL $76(*(($0 + [564])))
	
.LABEL $label$25
	if ( ((*($0 + [544]) & [1]) == 0) ){ goto $label$26 }
	CALL $76(*(($0 + [552])))
	
.LABEL $label$26
	if ( ((*($0 + [532]) & [1]) == 0) ){ goto $label$27 }
	CALL $76(*(($0 + [540])))
	
.LABEL $label$27
	if ( ((*($0 + [520]) & [1]) == 0) ){ goto $label$28 }
	CALL $76(*(($0 + [528])))
	
.LABEL $label$28
	if ( ((*($0 + [508]) & [1]) == 0) ){ goto $label$29 }
	CALL $76(*(($0 + [516])))
	
.LABEL $label$29
	if ( ((*($0 + [496]) & [1]) == 0) ){ goto $label$30 }
	CALL $76(*(($0 + [504])))
	
.LABEL $label$30
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $24($1)
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28($0, ($1 + [496])), ($1 + [508])), ($1 + [520])), ($1 + [532])), ($1 + [544])), ($1 + [556])), ($1 + [568])), ($1 + [580])), ($1 + [592])), ($1 + [604])), ($1 + [616])), ($1 + [628])), ($1 + [640])), ($1 + [652])), ($1 + [664])), ($1 + [676])), ($1 + [688])), ($1 + [700])), ($1 + [712])), ($1 + [724])), ($1 + [736])), ($1 + [748])), ($1 + [760])), ($1 + [772])), ($1 + [784])), ($1 + [796])), ($1 + [808])), ($1 + [820])), ($1 + [832])), ($1 + [844]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [192])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [176]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [184]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [192]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [200]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [208]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [216]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [224]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [232]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [240]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [248]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [256]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [264]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [272]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [280]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [288]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [296]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [304]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [312]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [320]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [328]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [336]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [344]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [352]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [360]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [368]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [376]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [384]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [392]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [400]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [408]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [416]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [424]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [432]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [440]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [448]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [456]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [464]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [472]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [480]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [192])
	CALL memcpy(($1 + [488]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ($5 - $4)
	$7 = ($3 + [1])
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$2 = (*($0 + [8]) - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $75($6)
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	*(($3 = ($7 + $3))) = *($1)
	$5 = ($5 - $4)
	$1 = ($3 - $5)
	$6 = ($7 + $6)
	$7 = ($3 + [1])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $76($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $5) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $76($5)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($3 << [1])
	$4 = ( $1 ? $5 : ($5 <= $1) )
	
.LABEL $label$6
	$5 = CALL $75($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($5) = *($2)
	$5 = (*($0) + [1])
	*($0) = $5
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $5)
	$4 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($4 == 0) ){ goto $label$8 }
	CALL memset($5, *($2), $4)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$5 = ($0 + [4])
	$0 = *($5)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($5) + [1])
	*($5) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $81($0)
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [592])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [592])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [592])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $30($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [592])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [592])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $66(CALL $65($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL isspace(int_32(($10 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$10 = [0]
	
.LOOP $label$5:
	$11 = ($0 + $10)
	$8 = ($10 + [1])
	$10 = $8
	if ( ((int_32)*(($11 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$0 = ($0 + $8)
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	$11 = ((uint_32)((int_32)CALL strlen($0) * (int_32)[733]) / (uint_32)[1000])
	$10 = ((int_32)$11 ^ (int_32)[-1])
	$2 = ($11 + [1])
	$3 = CALL $75($2)
	$5 = $3
	
.LOOP $label$6:
	*($5) = [0]
	$4 = $5
	$5 = ($4 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$6 }
	$11 = [0]
	$10 = *($0)
	if ( ($10 == 0) ){ goto $label$16 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$17 }
	$6 = [0]
	
.LOOP $label$18:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$15 }
	$10 = *($0)
	$9 = *(($10 + [1600]))
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$13 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$20 }
	$11 = [0]
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$19 }
	
.LABEL $label$20
	$11 = [0]
	$10 = $5
	
.LOOP $label$21:
	$7 = (((int_32)*($10) * (int_32)[58]) + $9)
	*(($10 = ($10 + [-1]))) = $7
	$11 = ($11 + [1])
	$9 = ((int_32)$7 / (int_32)[256])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$19 }
	if ( (((uint_32)($7 + [255]) > (uint_32)[510]) | ((int_32)$11 < (int_32)$6)) ){ goto $label$21 }
	
.LABEL $label$19
	if ( $9 ){ goto $label$7 }
	$10 = *($0 + [1])
	$6 = $11
	$7 = ($0 + [1])
	$0 = $7
	if ( $10 ){ goto $label$18 }
	goto $label$14 
	
.LABEL $label$17
	
.LOOP $label$22:
	if ( CALL isspace(int_32(($10 << [24]) >> [24])) ){ goto $label$16 }
	$10 = *($0)
	if ( ((int_32)*(($10 + [1600])) == (int_32)[255]) ){ goto $label$10 }
	if ( ((int_32)$10 != (int_32)[49]) ){ goto $label$7 }
	$0 = ($0 + [1])
	$10 = *($0)
	if ( $10 ){ goto $label$22 }
	$11 = [0]
	
.LABEL $label$16
	$7 = $0
	goto $label$14 
	
.LABEL $label$15
	$7 = $0
	$11 = $6
	
.LABEL $label$14
	$10 = ($7 + [-1])
	
.LOOP $label$23:
	$10 = ($10 + [1])
	if ( CALL isspace(*($10)) ){ goto $label$23 }
	$7 = [0]
	if ( (*($10) == 0) ){ goto $label$24 }
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$24
	$11 = ($3 + ($2 - $11))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$12 }
	$9 = ([0] - $4)
	$7 = *($12 + [8])
	
.LOOP $label$26:
	$10 = $11
	if ( *($10) ){ goto $label$25 }
	$7 = $10
	$11 = ($10 + [1])
	if ( ((int_32)($11 + $9) != (int_32)[1]) ){ goto $label$26 }
	$10 = $11
	$7 = $4
	
.LABEL $label$25
	*($12 + [8]) = $7
	goto $label$11 
	
.LABEL $label$13
	$7 = [0]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$10 = $5
	
.LABEL $label$11
	$11 = (($5 - $11) + $8)
	$7 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $7) >= (uint_32)$11) ){ goto $label$27 }
	$9 = *($1 + [4])
	$7 = *($1)
	$9 = (*($1 + [4]) - $7)
	$0 = CALL $75($11)
	$2 = ($0 + ($9 - $7))
	$6 = ($2 - $9)
	$11 = ($0 + $11)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($6, $7, $9)
	$7 = *($1)
	
.LABEL $label$28
	*($1) = $6
	*(($1 + [4])) = $2
	*(($1 + [8])) = $11
	if ( ($7 == 0) ){ goto $label$27 }
	CALL $76($7)
	
.LABEL $label$27
	*($12 + [7]) = [0]
	CALL $68($1, $8, ($12 + [7]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$29 }
	$5 = ($4 + [1])
	$6 = ($1 + [8])
	$7 = ($1 + [4])
	
.LOOP $label$30:
	$11 = ($10 + [1])
	$9 = *($7)
	if ( ((int_32)$9 == (int_32)*($6)) ){ goto $label$32 }
	*($9) = *($10)
	*($7) = (*($7) + [1])
	goto $label$31 
	
.LABEL $label$32
	CALL $69($1, $10)
	
.LABEL $label$31
	$10 = $11
	if ( ((int_32)$5 != (int_32)$11) ){ goto $label$30 }
	
.LABEL $label$29
	$7 = [1]
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$7 = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $76($3)
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [16])
	return $7
	
.LABEL $label$7
	CALL __assert_fail([1856], [1872], [446], [1904])
	return (unreachable)
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [592])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [592])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [608])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $75([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [192])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [192])
	CALL memcpy(($6 + [8]), ($7 + [8]), [1])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $62(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $76($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $60 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3665743484108668928, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $42($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [592])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [592])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $49(*($1), ($0 + [32]))
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [11680]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $102(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [12160]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [12192]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [12198] ? [12193] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [12162] ? [12160] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [12195]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $103()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [12160]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [12160]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [12144])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [12160])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [12176] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [12160]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [12256] ? [12272] : $30 ) ? ( [12224] ? [12240] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [12160]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [12161]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [12160] ? [12165] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [12144])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [12144])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [12144])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([12288], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([12288], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([12288], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $102(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $102(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $102(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $102(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $102(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $102(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $102(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $102(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $102(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC __errno_location ()
{
	return [14204]
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [12304])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [12400]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [12400]
	return .LABEL $label$1
}

int_32 .FUNC __ofl_lock ()
{
	CALL __lock([10472])
	return [10480]
}

int_32 .FUNC fflush (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	if ( (*([0] + [10468]) == 0) ){ goto $label$8 }
	$5 = CALL fflush(*([0] + [10468]))
	
.LABEL $label$8
	$0 = *(CALL __ofl_lock())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL __lockfile($0)
	
.LABEL $label$11
	$2 = *($0 + [28])
	$3 = *($0 + [20])
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$12 }
	$4 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL __lockfile($0)
	$2 = *(($0 + [28]))
	$3 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$3 = [-1]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$2 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($3 - $2))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$3 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL __unlockfile($0)
	
.LABEL $label$14
	$5 = ($3 | $5)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL __unlockfile($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL __ofl_unlock()
	return $5
	
.LABEL $label$3
	$3 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL __unlockfile($0)
	
.LABEL $label$1
	return $3
}

int_32 .FUNC fprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vfprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

void .FUNC __assert_fail (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL fprintf(*([0] + [10416]), [10432], $4)
	CALL fflush([0])
	CALL abort()
	(unreachable)
}

int_32 .FUNC tolower (int_32 $0)
{
	return ( ($0 | [32]) ? $0 : (($0 + [-65]) <= [26]) )
}

int_32 .FUNC isspace (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $75($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $75($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $81 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $75(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $76($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $73($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10320])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10406]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10408])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10406]) = [1]
	$7 = ($7 << [16])
	*([0] + [10408]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10408])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10408]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10406]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10406]) = [1]
	$3 = ($3 << [16])
	*([0] + [10408]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10408])
	
.LABEL $label$8
	*([0] + [10408]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC _Z13decode_base58RKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_6vectorIhNS3_IhEEEE (int_32 $0, int_32 $1)
{
	return CALL _Z12DecodeBase58PKcRNSt3__16vectorIhNS1_9allocatorIhEEEE(( *($0 + [8]) ? ($0 + [1]) : (*($0) & [1]) ), $1)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $72([1920], $0)
}

void .FUNC $76 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $77 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10304])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10112]
	$1 = (((int_32)$2 * (int_32)[12]) + [10112])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5031766321369448448, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $35($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [272])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $79($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $75($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $76($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [608])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $75([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [192])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [192])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $33(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $76($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $75(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $76($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $76($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $75($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $81($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $76($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $82(($5 + [32]), ($1 + [16]))
	CALL $82(($5 + [16]), ($1 + [28]))
	CALL $82($5, ($1 + [40]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [32])), (int_32 ($5 + [16])), (int_32 $5), (int_32 $1))
	if ( ((*($5) & [1]) == 0) ){ goto $label$2 }
	CALL $76(*($5 + [8]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $76(*($5 + [24]))
	
.LABEL $label$3
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $76(*($5 + [40]))
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [48])
}