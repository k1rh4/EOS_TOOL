(data (i32.const 8192) "none\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8206) "draw\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8297) "error\00")
(data (i32.const 8303) "Invalid hex character\00")
(data (i32.const 8325) "invalid sha256\00")
(data (i32.const 8340) "0123456789abcdef\00stoull\00")
(data (i32.const 8365) "EOS\00")
(data (i32.const 8369) "eosio.token\00")
(data (i32.const 8381) "GROW\00")
(data (i32.const 8386) "groweostoken\00")
(data (i32.const 8399) "unknown asset\00")
(data (i32.const 8413) "active\00")
(data (i32.const 8420) "transfer\00")
(data (i32.const 8429) "challenged shouldn\'t be the same as host\00")
(data (i32.const 8470) "invalid symbol name\00")
(data (i32.const 8490) "move\00")
(data (i32.const 8495) "game doesn\'t exists!\00")
(data (i32.const 8516) "rejected\00")
(data (i32.const 8525) "this game was already rejected!\00")
(data (i32.const 8557) "this game was already error!\00")
(data (i32.const 8586) "this is not your gamme!\00")
(data (i32.const 8610) "challenged transfer does not match game requirements\00")
(data (i32.const 8663) "game doesn\'t exist\00")
(data (i32.const 8682) "only host or challenged can close this game\00")
(data (i32.const 8726) "you can\'t close this game, challenged already bet\00: no conversion\00")
(data (i32.const 8792) "Here is your bet money back! Play again\00: out of range\00")
(data (i32.const 8847) "game doesn\'t exist!\00")
(data (i32.const 8867) "the game has ended!\00")
(data (i32.const 8887) "this is not your game!\00")
(data (i32.const 8910) "game was not accepted\00")
(data (i32.const 8932) "game already finished\00")
(data (i32.const 8954) "1\00")
(data (i32.const 8956) "2\00")
(data (i32.const 8958) "3\00")
(data (i32.const 8960) "Well done. You win\00")
(data (i32.const 8979) "There was a draw.\00")
(data (i32.const 8997) "An error ocurred\00")
(data (i32.const 9014) "error. unknown how to handle winner\00")
(data (i32.const 9050) "onpayout\00")
(data (i32.const 9059) "type:payout\00")
(data (i32.const 9071) "onissue\00")
(data (i32.const 9079) "type:welcome\00")
(data (i32.const 9092) "invalid supply\00")
(data (i32.const 9107) "max-supply must be positive\00")
(data (i32.const 9135) "memo has more than 256 bytes\00")
(data (i32.const 9164) "action\00")
(data (i32.const 9171) "creategame\00")
(data (i32.const 9182) "invalid creategame memo\00")
(data (i32.const 9206) "challenged\00")
(data (i32.const 9217) "creategame challenged not found\00")
(data (i32.const 9249) "host\00")
(data (i32.const 9254) "creategame host not found\00")
(data (i32.const 9280) "hashmove\00")
(data (i32.const 9289) "move hash not found\00")
(data (i32.const 9309) "invalid host player\00")
(data (i32.const 9329) "acceptgame\00")
(data (i32.const 9340) "invalid acceptgame memo\00")
(data (i32.const 9364) "id\00")
(data (i32.const 9367) "acceptgame id not found\00")
(data (i32.const 9391) "acceptgame challenged not found\00")
(data (i32.const 9423) "invalid challenged player\00")
(data (i32.const 9449) "this game was already accepted\00")
(data (i32.const 9480) "invalid action\00")
(data (i32.const 9495) "close\00")
(data (i32.const 9501) "reveal\00")
(data (i32.const 9508) "erase\00")
(data (i32.const 9514) "string is too long to be a valid name\00")
(data (i32.const 9552) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9619) "character is not in allowed character set for names\00")
(data (i32.const 9671) "string is too long to be a valid symbol_code\00")
(data (i32.const 9716) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9769) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9818) "write\00")
(data (i32.const 9824) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9883) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9935) "error reading iterator\00")
(data (i32.const 9958) "read\00")
(data (i32.const 9963) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10017) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10065) "cannot create objects in table of another contract\00")
(data (i32.const 10116) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 10167) "cannot pass end iterator to modify\00")
(data (i32.const 10202) "object passed to modify is not in multi_index\00")
(data (i32.const 10248) "cannot modify objects in table of another contract\00")
(data (i32.const 10299) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10358) "cannot pass end iterator to erase\00")
(data (i32.const 10392) "cannot increment end iterator\00")
(data (i32.const 10422) "object passed to erase is not in multi_index\00")
(data (i32.const 10467) "cannot erase objects in table of another contract\00")
(data (i32.const 10517) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10570) "get\00")
(data (i32.const 18992) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memcpy" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$2 (param i32 i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$5 (result i64)))
(import "env" "current_time" (func $fimport$6 (result i64)))
(import "env" "db_store_i64" (func $fimport$7 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$8 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$11 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$12 (param i32 i64 i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$14 (param i32 i32 i32)))
(import "env" "action_data_size" (func $fimport$15 (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$18 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$21 (param i32)))
(import "env" "abort" (func $fimport$22))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$25 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$29 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$36 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$37 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$40 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$42 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$43 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$44 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $29))
(export "_ZdlPv" (func $48))
(export "_Znwj" (func $46))
(export "_Znaj" (func $47))
(export "_ZdaPv" (func $49))
(export "_ZnwjSt11align_val_t" (func $50))
(export "_ZnajSt11align_val_t" (func $51))
(export "_ZdlPvSt11align_val_t" (func $52))
(export "_ZdaPvSt11align_val_t" (func $53))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $12 $19 $23 $20 $24 $21 $27)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19249))
(global $global$2 i32 (i32.const 19249))


int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $45($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $57($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $57($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $54($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $85($0)
	
.LABEL $label$1
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9958])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [80])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [96])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [112])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9958])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy($2, *($0 + [4]), [8])
	*(($1 + [32])) = *($2)
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9958])
	CALL memcpy(($1 + [48]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[31]), [9958])
	CALL memcpy(($1 + [64]), *($0 + [4]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9958])
	CALL memcpy(($1 + [96]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[31]), [9958])
	CALL memcpy(($1 + [112]), *($0 + [4]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [9958])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [144]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9818])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9818])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9818])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9818])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9818])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $82($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10576])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $82($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10570])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $10($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9958])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $10($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $11(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $10($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9818])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9818])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $41(CALL $40($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$1 = CALL $55(($2 + [32]), $1)
	CALL $4(($2 + [48]), $1, [44])
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$1
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($2 + [48])
	if ( ((int_32)$3 == (int_32)*($2 + [52])) ){ goto $label$4 }
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$5:
	CALL $4(($2 + [16]), CALL $55($2, $3), [58])
	if ( ((*($2) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$6
	$1 = *($2 + [16])
	$6 = $1
	if ( ((int_32)$1 == (int_32)*($2 + [20])) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)*($4)) ){ goto $label$10 }
	CALL $55($7, $1)
	*($5) = (*($5) + [12])
	goto $label$9 
	
.LABEL $label$10
	CALL $5($0, $1)
	
.LABEL $label$9
	$1 = ($1 + [12])
	if ( ((int_32)$1 != (int_32)*($2 + [20])) ){ goto $label$8 }
	$6 = *($2 + [16])
	
.LABEL $label$7
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($1 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($1 + [-4])))
	
.LABEL $label$15
	$1 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$14 }
	$1 = *($2 + [16])
	goto $label$12 
	
.LABEL $label$13
	$1 = $6
	
.LABEL $label$12
	*($2 + [20]) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$3 = ($3 + [12])
	if ( ((int_32)$3 != (int_32)*($2 + [52])) ){ goto $label$5 }
	$5 = *($2 + [48])
	if ( ($5 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $3
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$1 = ($3 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$19
	$3 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$18 }
	$1 = *($2 + [48])
	goto $label$16 
	
.LABEL $label$17
	$1 = $5
	
.LABEL $label$16
	*($2 + [52]) = $5
	CALL _ZdlPv($1)
	$global$0 = ($2 + [64])
}

void .FUNC $7 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = *($2)
	$6 = *($2 + [8])
	*($4 + [168]) = [0]
	$7 = (int_64)0
	*($4 + [160]) = (int_64)0
	$2 = CALL $79([8365])
	if ( ($2 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [9671])
	goto $label$2 
	
.LABEL $label$3
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = (int_64)0
	
.LOOP $label$4:
	$8 = *(($2 + [8364]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [9716])
	
.LABEL $label$5
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$4 }
	$7 = ((int_64)$7 << (int_64)8)
	
.LABEL $label$1
	if ( ((int_64)$6 != (int_64)((int_64)$7 | (int_64)4)) ){ goto $label$7 }
	CALL $58(($4 + [160]), [8369])
	goto $label$6 
	
.LABEL $label$7
	$2 = CALL $79([8381])
	if ( ($2 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9671])
	goto $label$11 
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$7 = (int_64)0
	
.LOOP $label$13:
	$8 = *(($2 + [8380]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9716])
	
.LABEL $label$14
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$13 }
	if ( ((int_64)$6 != (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)4)) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((int_64)$6 == (int_64)4) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert([0], [8399])
	goto $label$6 
	
.LABEL $label$8
	CALL $58(($4 + [160]), [8386])
	
.LABEL $label$6
	*($4 + [120]) = [8413]
	*($4 + [124]) = CALL $79([8413])
	*($4 + [16]) = *($4 + [120])
	$7 = *(CALL $2(($4 + [40]), ($4 + [16])))
	$2 = *($4 + [160])
	$8 = ($2 & [1])
	*($4 + [88]) = ( *(($4 + [168])) ? (($4 + [160]) | [1]) : $8 )
	*($4 + [92]) = ( *($4 + [164]) ? uint_32($2 >> [1]) : $8 )
	*($4 + [112]) = $7
	*($4 + [104]) = $0
	*($4 + [8]) = *($4 + [88])
	$9 = CALL $2(($4 + [96]), ($4 + [8]))
	*($4 + [120]) = [8420]
	*($4 + [124]) = CALL $79([8420])
	*($4) = *($4 + [120])
	$10 = *(CALL $2(($4 + [40]), $4))
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9769])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$7 = $11
	$8 = [1]
	$12 = $2
	$2 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$7 = $11
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$2 < (int_32)[6])
	$12 = ($2 + [1])
	$2 = $12
	if ( $8 ){ goto $label$19 }
	$8 = [1]
	$2 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$8 = [0]
	
.LABEL $label$15
	CALL eosio_assert($8, [8470])
	*(($4 + [32])) = [0]
	*($4 + [24]) = (int_64)0
	$2 = CALL $79([8364])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$26 }
	*($4 + [24]) = ($2 << [1])
	$8 = (($4 + [24]) | [1])
	if ( $2 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$12 = (($2 + [16]) & [-16])
	$8 = CALL _Znwj($12)
	*($4 + [24]) = ($12 | [1])
	*($4 + [32]) = $8
	*($4 + [28]) = $2
	
.LABEL $label$25
	CALL memcpy($8, [8364], $2)
	
.LABEL $label$24
	*(($8 + $2)) = [0]
	*(($4 + [64])) = $6
	$2 = ($4 + [32])
	*(($4 + [80])) = *($2)
	*($2) = [0]
	*($4 + [48]) = $1
	*($4 + [40]) = $0
	*($4 + [56]) = $5
	*($4 + [72]) = *($4 + [24])
	*($4 + [24]) = (int_64)0
	$2 = CALL $8(($4 + [120]), ($4 + [104]), *($9), $10, ($4 + [40]))
	CALL $9(($4 + [176]), $2)
	$8 = *($4 + [176])
	CALL send_inline($8, (*($4 + [180]) - $8))
	$8 = *($4 + [176])
	if ( ($8 == 0) ){ goto $label$27 }
	*($4 + [180]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$27
	$8 = *($2 + [28])
	if ( ($8 == 0) ){ goto $label$28 }
	*(($2 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$28
	$8 = *($2 + [16])
	if ( ($8 == 0) ){ goto $label$29 }
	*(($2 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$29
	if ( (*(($4 + [72])) & [1]) ){ goto $label$31 }
	if ( (*($4 + [24]) & [1]) ){ goto $label$30 }
	goto $label$22 
	
.LABEL $label$31
	CALL _ZdlPv(*(($4 + [80])))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$22 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($4 + [32])))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	CALL $54(($4 + [24]))
	
.LABEL $label$22
	if ( (*($4 + [160]) & [1]) ){ goto $label$20 }
	
.LABEL $label$21
	$global$0 = ($4 + [192])
	return 
	
.LABEL $label$20
	CALL _ZdlPv(*(($4 + [168])))
	$global$0 = ($4 + [192])
	(unreachable)
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ($4 == 0) ){ goto $label$3 }
	$1 = ($1 + [1])
	goto $label$4 
	
.LABEL $label$5
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$3 }
	$1 = *($1 + [8])
	
.LABEL $label$4
	
.LOOP $label$6:
	$5 = *($1)
	if ( ((int_32)$5 != (int_32)($2 & [255])) ){ goto $label$10 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)*(($0 + [8]))) ){ goto $label$9 }
	CALL $55($6, $3)
	*($5) = (*($5) + [12])
	goto $label$8 
	
.LABEL $label$10
	CALL $60($3, int_32(($5 << [24]) >> [24]))
	goto $label$7 
	
.LABEL $label$9
	CALL $5($0, $3)
	
.LABEL $label$8
	CALL $58($3, [8364])
	
.LABEL $label$7
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$6 }
	$1 = ($0 + [4])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)*(($0 + [8]))) ){ goto $label$3 }
	CALL $55($4, $3)
	*($1) = (*($1) + [12])
	if ( (*($3) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $5($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$1
	$global$0 = ($3 + [16])
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[12])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$5 * (int_32)[12]))
	$1 = CALL $55(($2 + ((int_32)$3 * (int_32)[12])), $1)
	$6 = ($1 + [12])
	$2 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($5 + [-4])
	*(($1 + [-4])) = *($3)
	$5 = ($5 + [-12])
	*(($1 = ($1 + [-12]))) = *($5)
	*($5) = (int_64)0
	*($3) = [0]
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($2 + [-12])
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$10
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$11 }
	CALL _ZdlPv($3)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9514])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9619])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9552])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9619])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = $1
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = $1
	$4 = ($4 & [1])
	$4 = *($0)
	if ( (( *($0 + [4]) ? uint_32($4 >> [1]) : $4 ) == 0) ){ goto $label$1 }
	$6 = ($0 + [1])
	$5 = ($0 + [8])
	$4 = ( *($5) ? $6 : $4 )
	$7 = ($2 + [-1])
	$3 = $1
	
.LOOP $label$2:
	$8 = *($4)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$3 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$4 }
	$2 = ($8 + [-87])
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$5 }
	$2 = ($8 + [-55])
	goto $label$3 
	
.LABEL $label$5
	$2 = [0]
	CALL eosio_assert([0], [8303])
	
.LABEL $label$3
	$9 = ($2 << [4])
	*($3) = $9
	$11 = uint_32($11 >> [1])
	$12 = ($0 + [4])
	$13 = *($12)
	$11 = *($0)
	$2 = ($11 & [1])
	$8 = *($5)
	$10 = ($4 + [1])
	if ( ((int_32)$10 == (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$9 }
	$8 = *($10)
	$2 = ($8 + [-48])
	if ( (($2 & [255]) <= [10]) ){ goto $label$7 }
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[5]) ){ goto $label$8 }
	$2 = ($8 + [-87])
	goto $label$7 
	
.LABEL $label$9
	$4 = $10
	$3 = ($3 + [1])
	if ( $7 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$8
	if ( ((uint_32)(($8 + [-65]) & [255]) > (uint_32)[5]) ){ goto $label$10 }
	$2 = ($8 + [-55])
	goto $label$7 
	
.LABEL $label$10
	$2 = [0]
	CALL eosio_assert([0], [8303])
	$9 = *($3)
	
.LABEL $label$7
	*($3) = ($9 | $2)
	$4 = ($4 + [2])
	$2 = *($0)
	$11 = uint_32($2 >> [1])
	$2 = ($2 & [1])
	$13 = *($12)
	$8 = *($5)
	$3 = ($3 + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	$7 = ($7 + [-1])
	if ( ((int_32)$4 != (int_32)(( $8 ? $6 : $2 ) + ( $13 ? $11 : $2 ))) ){ goto $label$2 }
	
.LABEL $label$1
	return ($3 - $1)
}

void .FUNC memory ()
{
}

int_64 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	$1 = ($global$0 - [80])
	$global$0 = $1
	$2 = *($0 + [48])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($0 + [96])
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$2 }
	*($1 + [56]) = [8206]
	*($1 + [60]) = CALL $79([8206])
	*($1 + [16]) = *($1 + [56])
	CALL $2(($1 + [72]), ($1 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($1 + [64]) = [8192]
	*($1 + [68]) = CALL $79([8192])
	*($1 + [8]) = *($1 + [64])
	CALL $2(($1 + [72]), ($1 + [8]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$9 }
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$10 }
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$8 }
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$7 }
	*($1 + [72]) = *($0 + [16])
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_32)$3 == (int_32)[3]) ){ goto $label$5 }
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$7 }
	*($1 + [72]) = *($0 + [16])
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$4 }
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$7 }
	*($1 + [72]) = *($0 + [8])
	goto $label$1 
	
.LABEL $label$8
	*($1 + [48]) = [8297]
	*($1 + [52]) = CALL $79([8297])
	*($1 + [24]) = *($1 + [48])
	CALL $2(($1 + [72]), ($1 + [24]))
	goto $label$1 
	
.LABEL $label$7
	*($1 + [40]) = [8297]
	*($1 + [44]) = CALL $79([8297])
	*($1 + [32]) = *($1 + [40])
	CALL $2(($1 + [72]), ($1 + [32]))
	goto $label$1 
	
.LABEL $label$6
	*($1 + [72]) = *($0 + [8])
	goto $label$1 
	
.LABEL $label$5
	*($1 + [72]) = *($0 + [8])
	goto $label$1 
	
.LABEL $label$4
	*($1 + [72]) = *($0 + [16])
	
.LABEL $label$1
	$4 = *($1 + [72])
	$global$0 = ($1 + [80])
	return $4
}

int_32 .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [164]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10017])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7035937633859534848)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9963])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9963])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $13(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9818])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9818])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9818])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9818])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9818])
	CALL memcpy(*($0 + [4]), $2, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9818])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9818])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[31]), [9818])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9818])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[31]), [9818])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [32])
	$3 = (*($0 + [4]) + [32])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [144])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [9818])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9818])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $69($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [16])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [16])
	$1 = ( *(($4 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [16])
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = ($4 + [16])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $10($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5) = $7
	*($5 + [8]) = $1
	$1 = ($1 - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9818])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [9818])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [4]) = ($7 + [16])
	CALL $18($5, $6)
	$global$0 = ($5 + [16])
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $69($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9818])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9818])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9818])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9818])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $18(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$5 = ($global$0 - [272])
	$global$0 = $5
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)*($1) != (int_64)*($2)), [8429])
	$6 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8470])
	*(($5 + [120])) = [0]
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	*($5 + [124]) = [0]
	$6 = *($0)
	*($5 + [88]) = $6
	*($5 + [96]) = $6
	$7 = CALL db_lowerbound_i64($6, $6, (int_64)7035937633859534848, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$7 }
	CALL $13(($5 + [88]), $7)
	*($5 + [132]) = [0]
	*($5 + [128]) = ($5 + [88])
	$6 = *(*(CALL $14(($5 + [128])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$7 = (uint_64)($6 <= (int_64)-2)
	goto $label$6 
	
.LABEL $label$7
	$7 = [1]
	$6 = (int_64)0
	
.LABEL $label$6
	*(($9 = (($5 + [88]) + [16]))) = $6
	CALL eosio_assert($7, [9883])
	$8 = *($9)
	$6 = *($0)
	CALL eosio_assert(((int_64)*($5 + [88]) == (int_64)CALL $fimport$5()), [10065])
	*(($7 = CALL _Znwj([176])) + [16]) = (int_64)0
	*($7 + [8]) = (int_64)0
	*($7 + [24]) = (int_64)0
	*($7 + [32]) = (int_64)0
	*($5 + [72]) = [8192]
	*($5 + [76]) = CALL $79([8192])
	*($5 + [32]) = *($5 + [72])
	CALL $2(($7 + [40]), ($5 + [32]))
	*($7 + [96]) = [0]
	*($7 + [48]) = [0]
	*($5 + [40]) = [8192]
	*($5 + [44]) = CALL $79([8192])
	*($5 + [24]) = *($5 + [40])
	*($7 + [40]) = *(CALL $2(($5 + [128]), ($5 + [24])))
	*($7 + [144]) = [0]
	*($7 + [160]) = ($5 + [88])
	*($7) = $8
	*($7 + [16]) = *($2)
	*($7 + [8]) = *($1)
	*($7 + [24]) = *($3)
	*($7 + [32]) = *(($3 + [8]))
	*($7 + [152]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($5 + [48]) = (($5 + [128]) + [123])
	*($5 + [44]) = ($5 + [128])
	*($5 + [40]) = ($5 + [128])
	CALL $15(($5 + [40]), $7)
	$11 = *($7)
	$10 = (($5 + [88]) + [8])
	*($7 + [164]) = CALL db_store_i64(*($10), (int_64)7035937633859534848, $6, $11, ($5 + [128]), [123])
	if ( (uint_64)($11 <= *($9)) ){ goto $label$8 }
	*($9) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$11 = *($7)
	$12 = *($10)
	*($5 + [72]) = *(($7 + [16]))
	*($7 + [168]) = CALL db_idx64_store($12, (int_64)7035937633859534848, $6, $11, ($5 + [72]))
	$11 = *($7)
	$12 = *($10)
	*($5 + [72]) = *(($7 + [8]))
	*($7 + [172]) = CALL db_idx64_store($12, (int_64)7035937633859534849, $6, $11, ($5 + [72]))
	*($5 + [40]) = $7
	$6 = *($7)
	*($5 + [128]) = $6
	$10 = *(($7 + [164]))
	*($5 + [72]) = $10
	$3 = ($5 + [116])
	$9 = *($3)
	if ( ((uint_32)$9 >= (uint_32)*(($5 + [120]))) ){ goto $label$11 }
	*($9 + [8]) = $6
	*($9 + [16]) = $10
	*($5 + [40]) = [0]
	*($9) = $7
	*($3) = ($9 + [24])
	$7 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( $7 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $16(($5 + [112]), ($5 + [40]), ($5 + [128]), ($5 + [72]))
	$7 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$6 = *($0)
	*($5 + [40]) = [8413]
	*($5 + [44]) = CALL $79([8413])
	*($5 + [16]) = *($5 + [40])
	*($5 + [80]) = *(CALL $2(($5 + [128]), ($5 + [16])))
	*($5 + [72]) = $6
	$6 = *($0)
	*($5 + [40]) = [8490]
	*($5 + [44]) = CALL $79([8490])
	*($5 + [8]) = *($5 + [40])
	$11 = *(CALL $2(($5 + [128]), ($5 + [8])))
	*($5 + [40]) = $8
	*($5 + [48]) = *($2)
	CALL $55(($5 + [56]), $4)
	$7 = CALL $17(($5 + [128]), ($5 + [72]), $6, $11, ($5 + [40]))
	CALL $9(($5 + [256]), $7)
	$9 = *($5 + [256])
	CALL send_inline($9, (*($5 + [260]) - $9))
	$9 = *($5 + [256])
	if ( ($9 == 0) ){ goto $label$12 }
	*($5 + [260]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$12
	$9 = *($7 + [28])
	if ( ($9 == 0) ){ goto $label$13 }
	*(($7 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$13
	$9 = *($7 + [16])
	if ( ($9 == 0) ){ goto $label$14 }
	*(($7 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [64])))
	
.LABEL $label$15
	$10 = *($5 + [112])
	if ( ($10 == 0) ){ goto $label$16 }
	$0 = ($5 + [116])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$18 }
	
.LOOP $label$19:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$20 }
	CALL _ZdlPv($9)
	
.LABEL $label$20
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$19 }
	$7 = *(($5 + [112]))
	goto $label$17 
	
.LABEL $label$18
	$7 = $10
	
.LABEL $label$17
	*($0) = $10
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$global$0 = ($5 + [272])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9935])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $82($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [28]) = $2
	*($3 + [24]) = $2
	*($3 + [32]) = ($2 + $4)
	*(($5 = CALL _Znwj([176])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($3 + [40]) = [8192]
	*($3 + [44]) = CALL $79([8192])
	*($3 + [16]) = *($3 + [40])
	CALL $2(($5 + [40]), ($3 + [16]))
	*($5 + [96]) = [0]
	*($5 + [48]) = [0]
	*($3 + [48]) = [8192]
	*($3 + [52]) = CALL $79([8192])
	*($3 + [8]) = *($3 + [48])
	*($5 + [40]) = *(CALL $2(($3 + [56]), ($3 + [8])))
	*($5 + [144]) = [0]
	*($5 + [160]) = $0
	CALL $42(($3 + [24]), $5)
	*($5 + [164]) = $1
	*($5 + [168 align=4]) = (int_64)-1
	*($3 + [48]) = $5
	$6 = *($5)
	*($3 + [56]) = $6
	*($3 + [40]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [48]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $16(($0 + [24]), ($3 + [48]), ($3 + [56]), ($3 + [40]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $85($2)
	
.LABEL $label$6
	$1 = *($3 + [48])
	*($3 + [48]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $75 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $73($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9818])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9818])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$5 = ($global$0 - [320])
	$global$0 = $5
	CALL require_auth(*($0))
	*(($5 + [152])) = [0]
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	*($5 + [156]) = [0]
	$6 = *($0)
	*($5 + [120]) = $6
	*($5 + [128]) = $6
	$7 = [0]
	$8 = CALL db_find_i64($6, $6, (int_64)7035937633859534848, *($1))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $13(($5 + [120]), $8)
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)($5 + [120])), [10116])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8495])
	*($5 + [112]) = [8516]
	*($5 + [116]) = CALL $79([8516])
	*($5 + [40]) = *($5 + [112])
	$9 = CALL $2(($5 + [176]), ($5 + [40]))
	CALL eosio_assert(((int_64)*($7 + [40]) != (int_64)*($9)), [8525])
	*($5 + [104]) = [8297]
	*($5 + [108]) = CALL $79([8297])
	*($5 + [32]) = *($5 + [104])
	$9 = CALL $2(($5 + [176]), ($5 + [32]))
	CALL eosio_assert(((int_64)*($7 + [40]) != (int_64)*($9)), [8557])
	CALL eosio_assert(((int_64)*($2) != (int_64)*($7 + [16])), [8429])
	if ( ((int_64)*($7 + [8]) != (int_64)*($2)) ){ goto $label$3 }
	CALL eosio_assert([1], [8586])
	goto $label$2 
	
.LABEL $label$3
	*($5 + [96]) = [8192]
	*($5 + [100]) = CALL $79([8192])
	*($5 + [24]) = *($5 + [96])
	$9 = CALL $2(($5 + [176]), ($5 + [24]))
	CALL eosio_assert(((int_64)*(($7 + [8])) == (int_64)*($9)), [8586])
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($7 + [32]))), [9824])
	CALL eosio_assert(((int_64)*($3) == (int_64)*($7 + [24])), [8610])
	$10 = *($0)
	CALL eosio_assert($8, [10167])
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)($5 + [120])), [10202])
	CALL eosio_assert(((int_64)*($5 + [120]) == (int_64)CALL $fimport$5()), [10248])
	$3 = ($7 + [16])
	*($5 + [48]) = *($3)
	$8 = ($7 + [8])
	*($5 + [56]) = *($8)
	*($8) = *($2)
	$6 = *($7)
	*($7 + [96]) = [0]
	*($7 + [48]) = [0]
	*($5 + [80]) = [8192]
	*($5 + [84]) = CALL $79([8192])
	*($5 + [16]) = *($5 + [80])
	*($7 + [40]) = *(CALL $2(($5 + [176]), ($5 + [16])))
	*($7 + [144]) = [1]
	*($7 + [152]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($7)), [10299])
	*($5 + [88]) = (($5 + [176]) + [123])
	*($5 + [84]) = ($5 + [176])
	*($5 + [80]) = ($5 + [176])
	CALL $15(($5 + [80]), $7)
	CALL db_update_i64(*($7 + [164]), $10, ($5 + [176]), [123])
	$8 = (($5 + [120]) + [16])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$4 }
	*($8) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$8 = (($5 + [48]) + [8])
	*($5 + [160]) = *($3)
	if ( (CALL $78(($5 + [48]), ($5 + [160]), [8]) == 0) ){ goto $label$5 }
	$9 = ($7 + [168])
	$3 = *($9)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($5 + [120]), *(($5 + [128])), (int_64)7035937633859534848, ($5 + [312]), $6)
	*($9) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $10, ($5 + [160]))
	
.LABEL $label$5
	*($5 + [160]) = *(($7 + [8]))
	if ( (CALL $78($8, ($5 + [160]), [8]) == 0) ){ goto $label$7 }
	$3 = ($7 + [172])
	$7 = *($3)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$8 }
	$7 = CALL db_idx64_find_primary(*($5 + [120]), *(($5 + [128])), (int_64)7035937633859534849, ($5 + [312]), $6)
	*($3) = $7
	
.LABEL $label$8
	CALL db_idx64_update($7, $10, ($5 + [160]))
	
.LABEL $label$7
	$6 = *($0)
	*($5 + [48]) = [8413]
	*($5 + [52]) = CALL $79([8413])
	*($5 + [8]) = *($5 + [48])
	*($5 + [88]) = *(CALL $2(($5 + [176]), ($5 + [8])))
	*($5 + [80]) = $6
	$6 = *($0)
	*($5 + [48]) = [8490]
	*($5 + [52]) = CALL $79([8490])
	*($5) = *($5 + [48])
	$10 = *(CALL $2(($5 + [176]), $5))
	*($5 + [48]) = *($1)
	*($5 + [56]) = *($2)
	CALL $55(($5 + [64]), $4)
	$7 = CALL $17(($5 + [176]), ($5 + [80]), $6, $10, ($5 + [48]))
	CALL $9(($5 + [160]), $7)
	$0 = *($5 + [160])
	CALL send_inline($0, (*($5 + [164]) - $0))
	$0 = *($5 + [160])
	if ( ($0 == 0) ){ goto $label$9 }
	*($5 + [164]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$9
	$0 = *($7 + [28])
	if ( ($0 == 0) ){ goto $label$10 }
	*(($7 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$0 = *($7 + [16])
	if ( ($0 == 0) ){ goto $label$11 }
	*(($7 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($5 + [72])))
	
.LABEL $label$12
	$2 = *($5 + [144])
	if ( ($2 == 0) ){ goto $label$13 }
	$3 = ($5 + [148])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$15 }
	
.LOOP $label$16:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$17 }
	CALL _ZdlPv($0)
	
.LABEL $label$17
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$16 }
	$7 = *(($5 + [144]))
	goto $label$14 
	
.LABEL $label$15
	$7 = $2
	
.LABEL $label$14
	*($3) = $2
	CALL _ZdlPv($7)
	
.LABEL $label$13
	$global$0 = ($5 + [320])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $79($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $56($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $56($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $80(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10576])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $80(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $85($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $54 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $34 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $82($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*((($4 + [72]) + [24])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [64]) = ($3 + $2)
	*($4 + [56]) = $3
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [9958])
	CALL memcpy(($4 + [72]), $3, [8])
	*($4 + [60]) = ($3 + [8])
	CALL $38(($4 + [56]), (($4 + [72]) + [8]))
	CALL $38(($4 + [56]), ($4 + [92]))
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($5)
	*($4 + [112]) = *($4 + [8])
	$5 = *($6)
	*((($4 + [128]) + [8])) = $5
	*((($4 + [24]) + [24])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $39(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	$3 = [1]
	if ( (*($4 + [92]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $85($3)
	$3 = [1]
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [100])))
	if ( (*($4 + [80]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [80]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return [1]
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9958])
	CALL memcpy(($4 + [32]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [40]) = *($4 + [32])
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [40])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $85($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [304])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	*($3 + [288]) = [9171]
	*($3 + [292]) = CALL $79([9171])
	*($3 + [136]) = *($3 + [288])
	CALL $2(($3 + [296]), ($3 + [136]))
	if ( ((int_64)$2 != (int_64)5031766159042707456) ){ goto $label$3 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [1]
	*($3) = *($3 + [280])
	CALL $30($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [272]) = [9329]
	*($3 + [276]) = CALL $79([9329])
	*($3 + [128]) = *($3 + [272])
	CALL $2(($3 + [296]), ($3 + [128]))
	if ( ((int_64)$2 != (int_64)3607571204305747968) ){ goto $label$4 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [2]
	*($3 + [8]) = *($3 + [264])
	CALL $31($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [256]) = [8490]
	*($3 + [260]) = CALL $79([8490])
	*($3 + [120]) = *($3 + [256])
	CALL $2(($3 + [296]), ($3 + [120]))
	if ( ((int_64)$2 != (int_64)-7694786991455469568) ){ goto $label$5 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [3]
	*($3 + [16]) = *($3 + [248])
	CALL $32($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [240]) = [9495]
	*($3 + [244]) = CALL $79([9495])
	*($3 + [112]) = *($3 + [240])
	CALL $2(($3 + [296]), ($3 + [112]))
	if ( ((int_64)$2 != (int_64)4929617502180212736) ){ goto $label$6 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [4]
	*($3 + [24]) = *($3 + [232])
	CALL $33($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [224]) = [9501]
	*($3 + [228]) = CALL $79([9501])
	*($3 + [104]) = *($3 + [224])
	CALL $2(($3 + [296]), ($3 + [104]))
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$7 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [5]
	*($3 + [32]) = *($3 + [216])
	CALL $34($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [208]) = [9508]
	*($3 + [212]) = CALL $79([9508])
	*($3 + [96]) = *($3 + [208])
	CALL $2(($3 + [296]), ($3 + [96]))
	if ( ((int_64)$2 != (int_64)6182744098496053248) ){ goto $label$2 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [6]
	*($3 + [40]) = *($3 + [200])
	CALL $35($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [192]) = [8369]
	*($3 + [196]) = CALL $79([8369])
	*($3 + [88]) = *($3 + [192])
	CALL $2(($3 + [296]), ($3 + [88]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$8 }
	*($3 + [176]) = [8420]
	*($3 + [180]) = CALL $79([8420])
	*($3 + [80]) = *($3 + [176])
	CALL $2(($3 + [184]), ($3 + [80]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$8 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [7]
	*($3 + [48]) = *($3 + [168])
	CALL $30($0, (int_64)6138663591592764928, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [160]) = [8386]
	*($3 + [164]) = CALL $79([8386])
	*($3 + [72]) = *($3 + [160])
	CALL $2(($3 + [296]), ($3 + [72]))
	if ( ((int_64)$1 != (int_64)7343617628107445552) ){ goto $label$1 }
	*($3 + [152]) = [8420]
	*($3 + [156]) = CALL $79([8420])
	*($3 + [64]) = *($3 + [152])
	CALL $2(($3 + [184]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [7]
	*($3 + [56]) = *($3 + [144])
	CALL $30($0, (int_64)7343617628107445552, ($3 + [56]))
	
.LABEL $label$1
	CALL $71([0])
	$global$0 = ($3 + [304])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9818])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9818])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9818])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9818])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $18(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$1 = CALL db_find_i64($3, $3, (int_64)7035937633859534848, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $13($2, $1)
	CALL eosio_assert(((int_32)*($0 + [160]) == (int_32)$2), [10116])
	
.LABEL $label$1
	$1 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($1, [8663])
	CALL eosio_assert($1, [10358])
	CALL eosio_assert($1, [10392])
	$1 = CALL db_next_i64(*($0 + [164]), ($2 + [40]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	CALL $13($2, $1)
	
.LABEL $label$2
	CALL $22($2, $0)
	$4 = *($2 + [24])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($2 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [320])
	$global$0 = $3
	CALL require_auth(*($2))
	*(($3 + [136])) = [0]
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	*($3 + [140]) = [0]
	$4 = *($0)
	*($3 + [104]) = $4
	*($3 + [112]) = $4
	$5 = [0]
	$1 = CALL db_find_i64($4, $4, (int_64)7035937633859534848, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $13(($3 + [104]), $1)
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)($3 + [104])), [10116])
	
.LABEL $label$1
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [8663])
	$1 = [1]
	$4 = *($2)
	if ( ((int_64)$4 == (int_64)*($5 + [16])) ){ goto $label$2 }
	$1 = ((int_64)$4 == (int_64)*($5 + [8]))
	
.LABEL $label$2
	CALL eosio_assert($1, [8682])
	CALL eosio_assert(((int_32)*($5 + [144]) ^ (int_32)[1]), [8726])
	*($3 + [96]) = [8516]
	*($3 + [100]) = CALL $79([8516])
	*($3 + [32]) = *($3 + [96])
	$2 = CALL $2(($3 + [144]), ($3 + [32]))
	CALL eosio_assert(((int_64)*($5 + [40]) != (int_64)*($2)), [8525])
	*($3 + [88]) = [8297]
	*($3 + [92]) = CALL $79([8297])
	*($3 + [24]) = *($3 + [88])
	$2 = CALL $2(($3 + [144]), ($3 + [24]))
	CALL eosio_assert(((int_64)*($5 + [40]) != (int_64)*($2)), [8525])
	$4 = *(($5 + [32]))
	$7 = *($5 + [24])
	*(($3 + [80])) = [0]
	*($3 + [72]) = (int_64)0
	$2 = CALL $79([8792])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($3 + [72]) = ($2 << [1])
	$1 = (($3 + [72]) | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($8)
	*($3 + [72]) = ($8 | [1])
	*($3 + [80]) = $1
	*($3 + [76]) = $2
	
.LABEL $label$5
	CALL memcpy($1, [8792], $2)
	
.LABEL $label$4
	*(($1 + $2)) = [0]
	$9 = *(($5 + [16]))
	*($3 + [56]) = $7
	$10 = *($0)
	*($3 + [64]) = $4
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9769])
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $7
	$1 = [1]
	$8 = $2
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$1 = ((int_32)$2 < (int_32)[6])
	$8 = ($2 + [1])
	$2 = $8
	if ( $1 ){ goto $label$11 }
	$1 = [1]
	$2 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$1 = [0]
	
.LABEL $label$7
	CALL eosio_assert($1, [8470])
	$2 = CALL $55(($3 + [40]), ($3 + [72]))
	*((($3 + [8]) + [8])) = *((($3 + [56]) + [8]))
	*($3 + [8]) = *($3 + [56])
	CALL $7($10, $9, ($3 + [8]), $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$12
	$7 = *($0)
	CALL eosio_assert($6, [10167])
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)($3 + [104])), [10202])
	CALL eosio_assert(((int_64)*($3 + [104]) == (int_64)CALL $fimport$5()), [10248])
	$2 = ($5 + [16])
	*($3 + [288]) = *($2)
	*($3 + [296]) = *(($5 + [8]))
	$4 = *($5)
	*($3 + [272]) = [8516]
	*($3 + [276]) = CALL $79([8516])
	*($3) = *($3 + [272])
	*($5 + [40]) = *(CALL $2(($3 + [144]), $3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($5)), [10299])
	*($3 + [280]) = (($3 + [144]) + [123])
	*($3 + [276]) = ($3 + [144])
	*($3 + [272]) = ($3 + [144])
	CALL $15(($3 + [272]), $5)
	CALL db_update_i64(*($5 + [164]), $7, ($3 + [144]), [123])
	$1 = (($3 + [104]) + [16])
	if ( (uint_64)($4 <= *($1)) ){ goto $label$13 }
	*($1) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$1 = (($3 + [288]) + [8])
	*($3 + [312]) = *($2)
	if ( (CALL $78(($3 + [288]), ($3 + [312]), [8]) == 0) ){ goto $label$14 }
	$8 = ($5 + [168])
	$2 = *($8)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$15 }
	$2 = CALL db_idx64_find_primary(*($3 + [104]), *(($3 + [112])), (int_64)7035937633859534848, ($3 + [304]), $4)
	*($8) = $2
	
.LABEL $label$15
	CALL db_idx64_update($2, $7, ($3 + [312]))
	
.LABEL $label$14
	*($3 + [312]) = *(($5 + [8]))
	if ( (CALL $78($1, ($3 + [312]), [8]) == 0) ){ goto $label$16 }
	$1 = ($5 + [172])
	$2 = *($1)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$17 }
	$2 = CALL db_idx64_find_primary(*($3 + [104]), *(($3 + [112])), (int_64)7035937633859534849, ($3 + [304]), $4)
	*($1) = $2
	
.LABEL $label$17
	CALL db_idx64_update($2, $7, ($3 + [312]))
	
.LABEL $label$16
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($3 + [80]))
	
.LABEL $label$18
	$8 = *($3 + [128])
	if ( ($8 == 0) ){ goto $label$19 }
	$5 = ($3 + [132])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$21 }
	
.LOOP $label$22:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$23 }
	CALL _ZdlPv($1)
	
.LABEL $label$23
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$22 }
	$2 = *(($3 + [128]))
	goto $label$20 
	
.LABEL $label$21
	$2 = $8
	
.LABEL $label$20
	*($5) = $8
	CALL _ZdlPv($2)
	
.LABEL $label$19
	$global$0 = ($3 + [320])
	return (unreachable)
	
.LABEL $label$3
	CALL $54(($3 + [72]))
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$4 = ($global$0 - [288])
	$global$0 = $4
	CALL require_auth(*($0))
	*(($4 + [104])) = [0]
	*($4 + [88]) = (int_64)-1
	*($4 + [96]) = (int_64)0
	*($4 + [108]) = [0]
	$5 = *($0)
	*($4 + [72]) = $5
	*($4 + [80]) = $5
	$6 = [0]
	$1 = CALL db_find_i64($5, $5, (int_64)7035937633859534848, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $13(($4 + [72]), $1)
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)($4 + [72])), [10116])
	
.LABEL $label$1
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [8847])
	*($4 + [64]) = [8192]
	*($4 + [68]) = CALL $79([8192])
	*($4 + [8]) = *($4 + [64])
	$1 = CALL $2(($4 + [112]), ($4 + [8]))
	if ( ((int_64)*($6 + [40]) != (int_64)*($1)) ){ goto $label$3 }
	CALL eosio_assert([1], [8867])
	goto $label$2 
	
.LABEL $label$3
	*($4 + [56]) = [8206]
	*($4 + [60]) = CALL $79([8206])
	*($4) = *($4 + [56])
	$1 = CALL $2(($4 + [16]), $4)
	CALL eosio_assert(((int_64)*(($6 + [40])) == (int_64)*($1)), [8867])
	
.LABEL $label$2
	$1 = [1]
	$5 = *($2)
	if ( ((int_64)$5 == (int_64)*($6 + [16])) ){ goto $label$4 }
	$1 = ((int_64)$5 == (int_64)*(($6 + [8])))
	
.LABEL $label$4
	CALL eosio_assert($1, [8887])
	$1 = *($3)
	CALL eosio_assert(((int_32)( *($3 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == (int_32)[64]), [8325])
	CALL $3($3, ($4 + [16]), [32])
	$8 = *($0)
	CALL eosio_assert($7, [10167])
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)($4 + [72])), [10202])
	CALL eosio_assert(((int_64)*($4 + [72]) == (int_64)CALL $fimport$5()), [10248])
	$5 = *(($6 + [8]))
	$3 = ( ($4 + [16]) ? ($6 + [112]) : ((int_64)*($2) == (int_64)$5) )
	*($6 + [112]) = *($3)
	*(($6 + [136])) = *(($3 + [24]))
	*(($6 + [128])) = *(($3 + [16]))
	*(($6 + [120])) = *(($3 + [8]))
	$3 = ($6 + [16])
	$9 = *($3)
	$2 = ( ($4 + [16]) ? ($6 + [64]) : ((int_64)*($2) == (int_64)$9) )
	*($6 + [64]) = *($2)
	*(($6 + [80])) = *(($2 + [16]))
	*(($6 + [72])) = *(($2 + [8]))
	*(($6 + [88])) = *(($2 + [24]))
	*($4 + [256]) = $9
	*($4 + [264]) = $5
	$5 = *($6)
	CALL eosio_assert([1], [10299])
	*($4 + [248]) = (($4 + [112]) + [123])
	*($4 + [244]) = ($4 + [112])
	*($4 + [240]) = ($4 + [112])
	CALL $15(($4 + [240]), $6)
	CALL db_update_i64(*($6 + [164]), $8, ($4 + [112]), [123])
	$2 = (($4 + [72]) + [16])
	if ( (uint_64)($5 <= *($2)) ){ goto $label$5 }
	*($2) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$2 = (($4 + [256]) + [8])
	*($4 + [280]) = *($3)
	if ( (CALL $78(($4 + [256]), ($4 + [280]), [8]) == 0) ){ goto $label$6 }
	$0 = ($6 + [168])
	$3 = *($0)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$7 }
	$3 = CALL db_idx64_find_primary(*($4 + [72]), *(($4 + [80])), (int_64)7035937633859534848, ($4 + [272]), $5)
	*($0) = $3
	
.LABEL $label$7
	CALL db_idx64_update($3, $8, ($4 + [280]))
	
.LABEL $label$6
	*($4 + [280]) = *(($6 + [8]))
	if ( (CALL $78($2, ($4 + [280]), [8]) == 0) ){ goto $label$8 }
	$2 = ($6 + [172])
	$6 = *($2)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$9 }
	$6 = CALL db_idx64_find_primary(*($4 + [72]), *(($4 + [80])), (int_64)7035937633859534849, ($4 + [272]), $5)
	*($2) = $6
	
.LABEL $label$9
	CALL db_idx64_update($6, $8, ($4 + [280]))
	
.LABEL $label$8
	$3 = *($4 + [96])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($4 + [100])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	CALL _ZdlPv($2)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$13 }
	$6 = *(($4 + [96]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$10
	$global$0 = ($4 + [288])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [10422])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$5()), [10467])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10517])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [164]))
	$6 = *(($1 + [168]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534848, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [172]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)7035937633859534849, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [24])
	$1 = ( *(($4 + [28])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [24])
	$2 = (CASTING uint_64)(uint_32 $1)
	$6 = ($4 + [24])
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $10($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [8]) = $7
	*($5 + [16]) = $1
	$1 = ($1 - $7)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9818])
	CALL memcpy($7, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [9818])
	CALL memcpy(($7 + [8]), ($4 + [8]), [8])
	*($5 + [24]) = *(($4 + [16]))
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[7]), [9818])
	CALL memcpy(($7 + [16]), ($5 + [24]), [8])
	*($5 + [12]) = ($7 + [24])
	CALL $18(($5 + [8]), $6)
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_64 $12
	int_64 $13
	int_64 $14
	$4 = ($global$0 - [960])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = [0]
	*(($4 + [808])) = [0]
	*($4 + [792]) = (int_64)-1
	*($4 + [800]) = (int_64)0
	*($4 + [812]) = [0]
	$6 = *($0)
	*($4 + [776]) = $6
	*($4 + [784]) = $6
	$1 = CALL db_find_i64($6, $6, (int_64)7035937633859534848, *($1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $13(($4 + [776]), $1)
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)($4 + [776])), [10116])
	
.LABEL $label$1
	CALL eosio_assert(*($5 + [144]), [8910])
	$1 = [1]
	if ( (*($5 + [48]) == 0) ){ goto $label$2 }
	$1 = (*($5 + [96]) == 0)
	
.LABEL $label$2
	CALL eosio_assert($1, [8932])
	$1 = [0]
	*($4 + [768]) = [0]
	*($4 + [760]) = (int_64)0
	$7 = ($5 + [64])
	
.LOOP $label$3:
	$8 = *(($7 + $1))
	CALL $60(($4 + [760]), *((uint_32($8 >> [4]) + [8340])))
	CALL $60(($4 + [760]), *((($8 & [15]) + [8340])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$3 }
	$1 = [0]
	*($4 + [752]) = [0]
	*($4 + [744]) = (int_64)0
	$7 = ($5 + [112])
	
.LOOP $label$4:
	$8 = *(($7 + $1))
	CALL $60(($4 + [744]), *((uint_32($8 >> [4]) + [8340])))
	CALL $60(($4 + [744]), *((($8 & [15]) + [8340])))
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$4 }
	$9 = CALL $55(($4 + [360]), $2)
	*(($4 + [312])) = [0]
	*($4 + [304]) = (int_64)0
	$1 = CALL $79([8954])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$11 }
	*($4 + [304]) = ($1 << [1])
	$7 = (($4 + [304]) | [1])
	$8 = $7
	if ( $1 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$7 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [304]) = ($7 | [1])
	*($4 + [312]) = $8
	*($4 + [308]) = $1
	$7 = (($4 + [304]) | [1])
	
.LABEL $label$10
	CALL memcpy($8, [8954], $1)
	
.LABEL $label$9
	*(($8 + $1)) = [0]
	$1 = *($4 + [304])
	$8 = ($1 & [1])
	$1 = CALL $61($9, ( *($4 + [312]) ? $7 : $8 ), ( *($4 + [308]) ? uint_32($1 >> [1]) : $8 ))
	$8 = ($1 + [8])
	*((($4 + [816]) + [8])) = *($8)
	*($4 + [816]) = *($1)
	*($1) = (int_64)0
	*($8) = [0]
	$1 = *($4 + [816])
	CALL eosio_assert(((int_32)( *($4 + [820]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == (int_32)[64]), [8325])
	CALL $3(($4 + [816]), ($4 + [640]), [32])
	if ( (*($4 + [816]) & [1]) ){ goto $label$13 }
	if ( (*($4 + [304]) & [1]) ){ goto $label$12 }
	goto $label$7 
	
.LABEL $label$13
	CALL _ZdlPv(*($4 + [824]))
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [312])))
	$7 = [1]
	if ( (*($4 + [360]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	CALL $54(($4 + [304]))
	
.LABEL $label$7
	$7 = [1]
	if ( ((*($4 + [360]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$5
	CALL sha256(($4 + [640]), [32], ($4 + [704]))
	$1 = [0]
	*($4 + [824]) = [0]
	*($4 + [816]) = (int_64)0
	
.LOOP $label$14:
	$8 = *((($4 + [704]) + $1))
	CALL $60(($4 + [816]), *((uint_32($8 >> [4]) + [8340])))
	CALL $60(($4 + [816]), *((($8 & [15]) + [8340])))
	$1 = ($1 + $7)
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$14 }
	$8 = [0]
	$1 = ($1 & [1])
	$1 = *($4 + [760])
	$7 = ($1 & [1])
	$1 = *($4 + [816])
	$10 = uint_32($1 >> [1])
	$9 = ( *($4 + [820]) ? $10 : $7 )
	if ( ((int_32)$9 != (int_32)( *($4 + [764]) ? uint_32($1 >> [1]) : $1 )) ){ goto $label$22 }
	$1 = ( *((($4 + [760]) + [8])) ? (($4 + [760]) | [1]) : $1 )
	$8 = (($4 + [816]) | [1])
	if ( $7 ){ goto $label$23 }
	if ( ($9 == 0) ){ goto $label$24 }
	$7 = ([0] - $10)
	
.LOOP $label$25:
	if ( ((int_32)*($8) != (int_32)*($1)) ){ goto $label$21 }
	$1 = ($1 + [1])
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( $7 ){ goto $label$25 }
	
.LABEL $label$24
	$9 = [1]
	goto $label$15 
	
.LABEL $label$23
	if ( ($9 == 0) ){ goto $label$20 }
	$8 = (CALL $78(( *((($4 + [816]) + [8])) ? $8 : $7 ), $1, $9) == 0)
	$7 = (*($4 + [816]) & [1])
	
.LABEL $label$22
	if ( ($7 == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($4 + [824])))
	
.LABEL $label$26
	$9 = [1]
	if ( $8 ){ goto $label$15 }
	
.LABEL $label$21
	$9 = CALL $55(($4 + [304]), $2)
	*(($4 + [680])) = [0]
	*($4 + [672]) = (int_64)0
	$1 = CALL $79([8956])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$29 }
	*($4 + [672]) = ($1 << [1])
	$7 = (($4 + [672]) | [1])
	$8 = $7
	if ( $1 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$7 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [672]) = ($7 | [1])
	*($4 + [680]) = $8
	*($4 + [676]) = $1
	$7 = (($4 + [672]) | [1])
	
.LABEL $label$28
	CALL memcpy($8, [8956], $1)
	
.LABEL $label$27
	*(($8 + $1)) = [0]
	$1 = *($4 + [672])
	$8 = ($1 & [1])
	$1 = CALL $61($9, ( *($4 + [680]) ? $7 : $8 ), ( *($4 + [676]) ? uint_32($1 >> [1]) : $8 ))
	$8 = ($1 + [8])
	*((($4 + [360]) + [8])) = *($8)
	*($4 + [360]) = *($1)
	*($1) = (int_64)0
	*($8) = [0]
	$1 = *($4 + [360])
	CALL eosio_assert(((int_32)( *($4 + [364]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == (int_32)[64]), [8325])
	CALL $3(($4 + [360]), ($4 + [816]), [32])
	*((($4 + [640]) + [24])) = *((($4 + [816]) + [24]))
	*((($4 + [640]) + [16])) = *((($4 + [816]) + [16]))
	*($4 + [648]) = *($4 + [824])
	*($4 + [640]) = *($4 + [816])
	if ( (*($4 + [360]) & [1]) ){ goto $label$31 }
	if ( (*($4 + [672]) & [1]) ){ goto $label$30 }
	goto $label$18 
	
.LABEL $label$31
	CALL _ZdlPv(*($4 + [368]))
	if ( ((*($4 + [672]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($4 + [680])))
	$7 = [1]
	if ( (*($4 + [304]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$20
	CALL _ZdlPv(*(($4 + [824])))
	$9 = [1]
	goto $label$15 
	
.LABEL $label$19
	CALL $54(($4 + [672]))
	
.LABEL $label$18
	$7 = [1]
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($9 + [8]))
	
.LABEL $label$16
	CALL sha256(($4 + [640]), [32], ($4 + [704]))
	$1 = [0]
	*($4 + [824]) = [0]
	*($4 + [816]) = (int_64)0
	
.LOOP $label$32:
	$8 = *((($4 + [704]) + $1))
	CALL $60(($4 + [816]), *((uint_32($8 >> [4]) + [8340])))
	CALL $60(($4 + [816]), *((($8 & [15]) + [8340])))
	$1 = ($1 + $7)
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$32 }
	$8 = [0]
	$1 = ($1 & [1])
	$1 = *($4 + [760])
	$7 = ($1 & [1])
	$1 = *($4 + [816])
	$10 = uint_32($1 >> [1])
	$9 = ( *($4 + [820]) ? $10 : $7 )
	if ( ((int_32)$9 != (int_32)( *($4 + [764]) ? uint_32($1 >> [1]) : $1 )) ){ goto $label$40 }
	$1 = ( *((($4 + [760]) + [8])) ? (($4 + [760]) | [1]) : $1 )
	$8 = (($4 + [816]) | [1])
	if ( $7 ){ goto $label$41 }
	if ( ($9 == 0) ){ goto $label$37 }
	$7 = ([0] - $10)
	
.LOOP $label$42:
	if ( ((int_32)*($8) != (int_32)*($1)) ){ goto $label$39 }
	$1 = ($1 + [1])
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( $7 ){ goto $label$42 }
	goto $label$37 
	
.LABEL $label$41
	if ( ($9 == 0) ){ goto $label$38 }
	$8 = (CALL $78(( *((($4 + [816]) + [8])) ? $8 : $7 ), $1, $9) == 0)
	$7 = (*($4 + [816]) & [1])
	
.LABEL $label$40
	if ( ($7 == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($4 + [824])))
	
.LABEL $label$43
	$9 = [2]
	if ( $8 ){ goto $label$15 }
	
.LABEL $label$39
	$2 = CALL $55(($4 + [304]), $2)
	*(($4 + [680])) = [0]
	*($4 + [672]) = (int_64)0
	$1 = CALL $79([8958])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$46 }
	*($4 + [672]) = ($1 << [1])
	$7 = (($4 + [672]) | [1])
	$8 = $7
	if ( $1 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	$7 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [672]) = ($7 | [1])
	*($4 + [680]) = $8
	*($4 + [676]) = $1
	$7 = (($4 + [672]) | [1])
	
.LABEL $label$45
	CALL memcpy($8, [8958], $1)
	
.LABEL $label$44
	*(($8 + $1)) = [0]
	$1 = *($4 + [672])
	$8 = ($1 & [1])
	$1 = CALL $61($2, ( *($4 + [680]) ? $7 : $8 ), ( *($4 + [676]) ? uint_32($1 >> [1]) : $8 ))
	$8 = ($1 + [8])
	*((($4 + [360]) + [8])) = *($8)
	*($4 + [360]) = *($1)
	*($1) = (int_64)0
	*($8) = [0]
	$1 = *($4 + [360])
	CALL eosio_assert(((int_32)( *($4 + [364]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == (int_32)[64]), [8325])
	CALL $3(($4 + [360]), ($4 + [816]), [32])
	*((($4 + [640]) + [24])) = *((($4 + [816]) + [24]))
	*((($4 + [640]) + [16])) = *((($4 + [816]) + [16]))
	*($4 + [648]) = *($4 + [824])
	*($4 + [640]) = *($4 + [816])
	if ( (*($4 + [360]) & [1]) ){ goto $label$48 }
	if ( (*($4 + [672]) & [1]) ){ goto $label$47 }
	goto $label$35 
	
.LABEL $label$48
	CALL _ZdlPv(*($4 + [368]))
	if ( ((*($4 + [672]) & [1]) == 0) ){ goto $label$35 }
	
.LABEL $label$47
	CALL _ZdlPv(*(($4 + [680])))
	$7 = [1]
	if ( (*($4 + [304]) & [1]) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$38
	CALL _ZdlPv(*(($4 + [824])))
	
.LABEL $label$37
	$9 = [2]
	goto $label$15 
	
.LABEL $label$36
	CALL $54(($4 + [672]))
	
.LABEL $label$35
	$7 = [1]
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$33
	CALL sha256(($4 + [640]), [32], ($4 + [704]))
	$1 = [0]
	*($4 + [824]) = [0]
	*($4 + [816]) = (int_64)0
	
.LOOP $label$49:
	$8 = *((($4 + [704]) + $1))
	CALL $60(($4 + [816]), *((uint_32($8 >> [4]) + [8340])))
	CALL $60(($4 + [816]), *((($8 & [15]) + [8340])))
	$1 = ($1 + $7)
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$49 }
	$8 = [0]
	$1 = ($1 & [1])
	$1 = *($4 + [760])
	$7 = ($1 & [1])
	$1 = *($4 + [816])
	$9 = uint_32($1 >> [1])
	$2 = ( *($4 + [820]) ? $9 : $7 )
	if ( ((int_32)$2 != (int_32)( *($4 + [764]) ? uint_32($1 >> [1]) : $1 )) ){ goto $label$53 }
	$1 = ( *((($4 + [760]) + [8])) ? (($4 + [760]) | [1]) : $1 )
	$8 = (($4 + [816]) | [1])
	if ( $7 ){ goto $label$54 }
	if ( ($2 == 0) ){ goto $label$51 }
	$7 = ([0] - $9)
	
.LOOP $label$55:
	if ( ((int_32)*($8) != (int_32)*($1)) ){ goto $label$50 }
	$1 = ($1 + [1])
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( $7 ){ goto $label$55 }
	goto $label$51 
	
.LABEL $label$54
	if ( ($2 == 0) ){ goto $label$52 }
	$8 = (CALL $78(( *((($4 + [816]) + [8])) ? $8 : $7 ), $1, $2) == 0)
	$7 = (*($4 + [816]) & [1])
	
.LABEL $label$53
	if ( ($7 == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($4 + [824])))
	
.LABEL $label$56
	$9 = [255]
	if ( $8 ){ goto $label$51 }
	goto $label$15 
	
.LABEL $label$52
	CALL _ZdlPv(*(($4 + [824])))
	
.LABEL $label$51
	$9 = [3]
	goto $label$15 
	
.LABEL $label$50
	$9 = [255]
	
.LABEL $label$15
	$2 = CALL $55(($4 + [360]), $3)
	*(($4 + [312])) = [0]
	*($4 + [304]) = (int_64)0
	$1 = CALL $79([8954])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$60 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$63 }
	*($4 + [304]) = ($1 << [1])
	$7 = (($4 + [304]) | [1])
	$8 = $7
	if ( $1 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$7 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [304]) = ($7 | [1])
	*($4 + [312]) = $8
	*($4 + [308]) = $1
	$7 = (($4 + [304]) | [1])
	
.LABEL $label$62
	CALL memcpy($8, [8954], $1)
	
.LABEL $label$61
	*(($8 + $1)) = [0]
	$1 = *($4 + [304])
	$8 = ($1 & [1])
	$1 = CALL $61($2, ( *($4 + [312]) ? $7 : $8 ), ( *($4 + [308]) ? uint_32($1 >> [1]) : $8 ))
	$8 = ($1 + [8])
	*((($4 + [816]) + [8])) = *($8)
	*($4 + [816]) = *($1)
	*($1) = (int_64)0
	*($8) = [0]
	$1 = *($4 + [816])
	CALL eosio_assert(((int_32)( *($4 + [820]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == (int_32)[64]), [8325])
	CALL $3(($4 + [816]), ($4 + [608]), [32])
	if ( (*($4 + [816]) & [1]) ){ goto $label$65 }
	if ( (*($4 + [304]) & [1]) ){ goto $label$64 }
	goto $label$59 
	
.LABEL $label$65
	CALL _ZdlPv(*($4 + [824]))
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$59 }
	
.LABEL $label$64
	CALL _ZdlPv(*(($4 + [312])))
	$7 = [1]
	if ( (*($4 + [360]) & [1]) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$60
	CALL $54(($4 + [304]))
	
.LABEL $label$59
	$7 = [1]
	if ( ((*($4 + [360]) & [1]) == 0) ){ goto $label$57 }
	
.LABEL $label$58
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$57
	CALL sha256(($4 + [608]), [32], ($4 + [672]))
	$1 = [0]
	*($4 + [824]) = [0]
	*($4 + [816]) = (int_64)0
	
.LOOP $label$66:
	$8 = *((($4 + [672]) + $1))
	CALL $60(($4 + [816]), *((uint_32($8 >> [4]) + [8340])))
	CALL $60(($4 + [816]), *((($8 & [15]) + [8340])))
	$1 = ($1 + $7)
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$66 }
	$8 = [0]
	$1 = ($1 & [1])
	$1 = *($4 + [744])
	$7 = ($1 & [1])
	$1 = *($4 + [816])
	$10 = uint_32($1 >> [1])
	$2 = ( *($4 + [820]) ? $10 : $7 )
	if ( ((int_32)$2 != (int_32)( *($4 + [748]) ? uint_32($1 >> [1]) : $1 )) ){ goto $label$74 }
	$1 = ( *((($4 + [744]) + [8])) ? (($4 + [744]) | [1]) : $1 )
	$8 = (($4 + [816]) | [1])
	if ( $7 ){ goto $label$75 }
	if ( ($2 == 0) ){ goto $label$76 }
	$7 = ([0] - $10)
	
.LOOP $label$77:
	if ( ((int_32)*($8) != (int_32)*($1)) ){ goto $label$73 }
	$1 = ($1 + [1])
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( $7 ){ goto $label$77 }
	
.LABEL $label$76
	$1 = [1]
	goto $label$67 
	
.LABEL $label$75
	if ( ($2 == 0) ){ goto $label$72 }
	$8 = (CALL $78(( *((($4 + [816]) + [8])) ? $8 : $7 ), $1, $2) == 0)
	$7 = (*($4 + [816]) & [1])
	
.LABEL $label$74
	if ( ($7 == 0) ){ goto $label$78 }
	CALL _ZdlPv(*(($4 + [824])))
	
.LABEL $label$78
	$1 = [1]
	if ( $8 ){ goto $label$67 }
	
.LABEL $label$73
	$2 = CALL $55(($4 + [304]), $3)
	*(($4 + [296])) = [0]
	*($4 + [288]) = (int_64)0
	$1 = CALL $79([8956])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$71 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$81 }
	*($4 + [288]) = ($1 << [1])
	$7 = (($4 + [288]) | [1])
	$8 = $7
	if ( $1 ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	$7 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [288]) = ($7 | [1])
	*($4 + [296]) = $8
	*($4 + [292]) = $1
	$7 = (($4 + [288]) | [1])
	
.LABEL $label$80
	CALL memcpy($8, [8956], $1)
	
.LABEL $label$79
	*(($8 + $1)) = [0]
	$1 = *($4 + [288])
	$8 = ($1 & [1])
	$1 = CALL $61($2, ( *($4 + [296]) ? $7 : $8 ), ( *($4 + [292]) ? uint_32($1 >> [1]) : $8 ))
	$8 = ($1 + [8])
	*((($4 + [360]) + [8])) = *($8)
	*($4 + [360]) = *($1)
	*($1) = (int_64)0
	*($8) = [0]
	$1 = *($4 + [360])
	CALL eosio_assert(((int_32)( *($4 + [364]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == (int_32)[64]), [8325])
	CALL $3(($4 + [360]), ($4 + [816]), [32])
	*((($4 + [608]) + [24])) = *((($4 + [816]) + [24]))
	*((($4 + [608]) + [16])) = *((($4 + [816]) + [16]))
	*($4 + [616]) = *($4 + [824])
	*($4 + [608]) = *($4 + [816])
	if ( (*($4 + [360]) & [1]) ){ goto $label$83 }
	if ( (*($4 + [288]) & [1]) ){ goto $label$82 }
	goto $label$70 
	
.LABEL $label$83
	CALL _ZdlPv(*($4 + [368]))
	if ( ((*($4 + [288]) & [1]) == 0) ){ goto $label$70 }
	
.LABEL $label$82
	CALL _ZdlPv(*(($4 + [296])))
	$7 = [1]
	if ( (*($4 + [304]) & [1]) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$72
	CALL _ZdlPv(*(($4 + [824])))
	$1 = [1]
	goto $label$67 
	
.LABEL $label$71
	CALL $54(($4 + [288]))
	
.LABEL $label$70
	$7 = [1]
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$68 }
	
.LABEL $label$69
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$68
	CALL sha256(($4 + [608]), [32], ($4 + [672]))
	$1 = [0]
	*($4 + [824]) = [0]
	*($4 + [816]) = (int_64)0
	
.LOOP $label$84:
	$8 = *((($4 + [672]) + $1))
	CALL $60(($4 + [816]), *((uint_32($8 >> [4]) + [8340])))
	CALL $60(($4 + [816]), *((($8 & [15]) + [8340])))
	$1 = ($1 + $7)
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$84 }
	$8 = [0]
	$1 = ($1 & [1])
	$1 = *($4 + [744])
	$7 = ($1 & [1])
	$1 = *($4 + [816])
	$10 = uint_32($1 >> [1])
	$2 = ( *($4 + [820]) ? $10 : $7 )
	if ( ((int_32)$2 != (int_32)( *($4 + [748]) ? uint_32($1 >> [1]) : $1 )) ){ goto $label$92 }
	$1 = ( *((($4 + [744]) + [8])) ? (($4 + [744]) | [1]) : $1 )
	$8 = (($4 + [816]) | [1])
	if ( $7 ){ goto $label$93 }
	if ( ($2 == 0) ){ goto $label$89 }
	$7 = ([0] - $10)
	
.LOOP $label$94:
	if ( ((int_32)*($8) != (int_32)*($1)) ){ goto $label$91 }
	$1 = ($1 + [1])
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( $7 ){ goto $label$94 }
	goto $label$89 
	
.LABEL $label$93
	if ( ($2 == 0) ){ goto $label$90 }
	$8 = (CALL $78(( *((($4 + [816]) + [8])) ? $8 : $7 ), $1, $2) == 0)
	$7 = (*($4 + [816]) & [1])
	
.LABEL $label$92
	if ( ($7 == 0) ){ goto $label$95 }
	CALL _ZdlPv(*(($4 + [824])))
	
.LABEL $label$95
	$1 = [2]
	if ( $8 ){ goto $label$67 }
	
.LABEL $label$91
	$2 = CALL $55(($4 + [304]), $3)
	*(($4 + [296])) = [0]
	*($4 + [288]) = (int_64)0
	$1 = CALL $79([8958])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$88 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$98 }
	*($4 + [288]) = ($1 << [1])
	$7 = (($4 + [288]) | [1])
	$8 = $7
	if ( $1 ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$98
	$7 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [288]) = ($7 | [1])
	*($4 + [296]) = $8
	*($4 + [292]) = $1
	$7 = (($4 + [288]) | [1])
	
.LABEL $label$97
	CALL memcpy($8, [8958], $1)
	
.LABEL $label$96
	*(($8 + $1)) = [0]
	$1 = *($4 + [288])
	$8 = ($1 & [1])
	$1 = CALL $61($2, ( *($4 + [296]) ? $7 : $8 ), ( *($4 + [292]) ? uint_32($1 >> [1]) : $8 ))
	$8 = ($1 + [8])
	*((($4 + [360]) + [8])) = *($8)
	*($4 + [360]) = *($1)
	*($1) = (int_64)0
	*($8) = [0]
	$1 = *($4 + [360])
	CALL eosio_assert(((int_32)( *($4 + [364]) ? uint_32($1 >> [1]) : ($1 & [1]) ) == (int_32)[64]), [8325])
	CALL $3(($4 + [360]), ($4 + [816]), [32])
	*((($4 + [608]) + [24])) = *((($4 + [816]) + [24]))
	*((($4 + [608]) + [16])) = *((($4 + [816]) + [16]))
	*($4 + [616]) = *($4 + [824])
	*($4 + [608]) = *($4 + [816])
	if ( (*($4 + [360]) & [1]) ){ goto $label$100 }
	if ( (*($4 + [288]) & [1]) ){ goto $label$99 }
	goto $label$87 
	
.LABEL $label$100
	CALL _ZdlPv(*($4 + [368]))
	if ( ((*($4 + [288]) & [1]) == 0) ){ goto $label$87 }
	
.LABEL $label$99
	CALL _ZdlPv(*(($4 + [296])))
	$7 = [1]
	if ( (*($4 + [304]) & [1]) ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$90
	CALL _ZdlPv(*(($4 + [824])))
	
.LABEL $label$89
	$1 = [2]
	goto $label$67 
	
.LABEL $label$88
	CALL $54(($4 + [288]))
	
.LABEL $label$87
	$7 = [1]
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$85 }
	
.LABEL $label$86
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$85
	CALL sha256(($4 + [608]), [32], ($4 + [672]))
	$1 = [0]
	*($4 + [824]) = [0]
	*($4 + [816]) = (int_64)0
	
.LOOP $label$101:
	$8 = *((($4 + [672]) + $1))
	CALL $60(($4 + [816]), *((uint_32($8 >> [4]) + [8340])))
	CALL $60(($4 + [816]), *((($8 & [15]) + [8340])))
	$1 = ($1 + $7)
	if ( ((int_32)$1 != (int_32)[32]) ){ goto $label$101 }
	$8 = [0]
	$1 = ($1 & [1])
	$1 = *($4 + [744])
	$7 = ($1 & [1])
	$1 = *($4 + [816])
	$3 = uint_32($1 >> [1])
	$2 = ( *($4 + [820]) ? $3 : $7 )
	if ( ((int_32)$2 != (int_32)( *($4 + [748]) ? uint_32($1 >> [1]) : $1 )) ){ goto $label$105 }
	$1 = ( *((($4 + [744]) + [8])) ? (($4 + [744]) | [1]) : $1 )
	$8 = (($4 + [816]) | [1])
	if ( $7 ){ goto $label$106 }
	if ( ($2 == 0) ){ goto $label$103 }
	$7 = ([0] - $3)
	
.LOOP $label$107:
	if ( ((int_32)*($8) != (int_32)*($1)) ){ goto $label$102 }
	$1 = ($1 + [1])
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	if ( $7 ){ goto $label$107 }
	goto $label$103 
	
.LABEL $label$106
	if ( ($2 == 0) ){ goto $label$104 }
	$8 = (CALL $78(( *((($4 + [816]) + [8])) ? $8 : $7 ), $1, $2) == 0)
	$7 = (*($4 + [816]) & [1])
	
.LABEL $label$105
	if ( ($7 == 0) ){ goto $label$108 }
	CALL _ZdlPv(*(($4 + [824])))
	
.LABEL $label$108
	$1 = [255]
	if ( $8 ){ goto $label$103 }
	goto $label$67 
	
.LABEL $label$104
	CALL _ZdlPv(*(($4 + [824])))
	
.LABEL $label$103
	$1 = [3]
	goto $label$67 
	
.LABEL $label$102
	$1 = [255]
	
.LABEL $label$67
	$11 = *($0)
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [10167])
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)($4 + [776])), [10202])
	CALL eosio_assert(((int_64)*($4 + [776]) == (int_64)CALL $fimport$5()), [10248])
	*($5 + [96]) = $1
	*($5 + [48]) = $9
	$1 = ($5 + [16])
	*($4 + [360]) = *($1)
	*($4 + [368]) = *(($5 + [8]))
	$6 = *($5)
	*($5 + [40]) = CALL $1($5)
	*($5 + [152]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($5)), [10299])
	*($4 + [312]) = (($4 + [816]) + [123])
	*($4 + [308]) = ($4 + [816])
	*($4 + [304]) = ($4 + [816])
	CALL $15(($4 + [304]), $5)
	CALL db_update_i64(*($5 + [164]), $11, ($4 + [816]), [123])
	$8 = (($4 + [776]) + [16])
	if ( (uint_64)($6 <= *($8)) ){ goto $label$109 }
	*($8) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$109
	$8 = (($4 + [360]) + [8])
	*($4 + [288]) = *($1)
	if ( (CALL $78(($4 + [360]), ($4 + [288]), [8]) == 0) ){ goto $label$110 }
	$7 = ($5 + [168])
	$1 = *($7)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$111 }
	$1 = CALL db_idx64_find_primary(*($4 + [776]), *(($4 + [784])), (int_64)7035937633859534848, ($4 + [944]), $6)
	*($7) = $1
	
.LABEL $label$111
	CALL db_idx64_update($1, $11, ($4 + [288]))
	
.LABEL $label$110
	*($4 + [288]) = *(($5 + [8]))
	if ( (CALL $78($8, ($4 + [288]), [8]) == 0) ){ goto $label$112 }
	$8 = ($5 + [172])
	$1 = *($8)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$113 }
	$1 = CALL db_idx64_find_primary(*($4 + [776]), *(($4 + [784])), (int_64)7035937633859534849, ($4 + [944]), $6)
	*($8) = $1
	
.LABEL $label$113
	CALL db_idx64_update($1, $11, ($4 + [288]))
	
.LABEL $label$112
	$6 = *($5 + [40])
	if ( ((int_64)$6 != (int_64)*($5 + [16])) ){ goto $label$141 }
	$6 = *(($5 + [32]))
	$11 = *($5 + [24])
	*(($4 + [824])) = [0]
	*($4 + [816]) = (int_64)0
	$8 = CALL $79([8960])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$125 }
	$12 = ((float_64)(CASTING float_64)(int_64 $11) * (float_64)(float_64)1.99)
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$140 }
	*($4 + [816]) = ($8 << [1])
	$7 = (($4 + [816]) | [1])
	if ( $8 ){ goto $label$139 }
	goto $label$138 
	
.LABEL $label$141
	if ( ((int_64)$6 != (int_64)*($5 + [8])) ){ goto $label$142 }
	$6 = *(($5 + [32]))
	$11 = *($5 + [24])
	*(($4 + [824])) = [0]
	*($4 + [816]) = (int_64)0
	$8 = CALL $79([8960])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$124 }
	$12 = ((float_64)(CASTING float_64)(int_64 $11) * (float_64)(float_64)1.99)
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$136 }
	*($4 + [816]) = ($8 << [1])
	$7 = (($4 + [816]) | [1])
	if ( $8 ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$142
	*($4 + [360]) = [8206]
	*($4 + [364]) = CALL $79([8206])
	*($4 + [248]) = *($4 + [360])
	$1 = CALL $2(($4 + [816]), ($4 + [248]))
	$8 = ($5 + [40])
	if ( ((int_64)*($8) != (int_64)*($1)) ){ goto $label$137 }
	*(($4 + [824])) = [0]
	*($4 + [816]) = (int_64)0
	$1 = CALL $79([8979])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$123 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$132 }
	*($4 + [816]) = ($1 << [1])
	$8 = (($4 + [816]) | [1])
	if ( $1 ){ goto $label$131 }
	goto $label$130 
	
.LABEL $label$140
	$1 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($1)
	*($4 + [816]) = ($1 | [1])
	*($4 + [824]) = $7
	*($4 + [820]) = $8
	
.LABEL $label$139
	CALL memcpy($7, [8960], $8)
	
.LABEL $label$138
	$1 = [0]
	*(($7 + $8)) = [0]
	$13 = *(($5 + [16]))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$144 }
	$11 = (int_64)-9223372036854775808
	goto $label$143 
	
.LABEL $label$144
	$11 = (Rounds 0)($12)
	
.LABEL $label$143
	*($4 + [592]) = $11
	$14 = *($0)
	*($4 + [600]) = $6
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9769])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	
.LOOP $label$146:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$145 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$147 }
	$6 = $11
	$0 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$146 }
	goto $label$145 
	
.LABEL $label$147
	$6 = $11
	
.LOOP $label$148:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$145 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$7 = ($1 + [1])
	$1 = $7
	if ( $8 ){ goto $label$148 }
	$0 = [1]
	$1 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$146 }
	
.LABEL $label$145
	CALL eosio_assert($0, [8470])
	$1 = CALL $55(($4 + [576]), ($4 + [816]))
	*((($4 + [144]) + [8])) = *((($4 + [592]) + [8]))
	*($4 + [144]) = *($4 + [592])
	CALL $7($14, $13, ($4 + [144]), $4)
	if ( ((*($1) & [1]) == 0) ){ goto $label$149 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$149
	if ( ((*($4 + [816]) & [1]) == 0) ){ goto $label$126 }
	CALL _ZdlPv(*($4 + [824]))
	goto $label$126 
	
.LABEL $label$137
	*($4 + [360]) = [8297]
	*($4 + [364]) = CALL $79([8297])
	*($4 + [240]) = *($4 + [360])
	$1 = CALL $2(($4 + [816]), ($4 + [240]))
	if ( ((int_64)*($8) != (int_64)*($1)) ){ goto $label$133 }
	*(($4 + [824])) = [0]
	*($4 + [816]) = (int_64)0
	$1 = CALL $79([8997])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$122 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$129 }
	*($4 + [816]) = ($1 << [1])
	$8 = (($4 + [816]) | [1])
	if ( $1 ){ goto $label$128 }
	goto $label$127 
	
.LABEL $label$136
	$1 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($1)
	*($4 + [816]) = ($1 | [1])
	*($4 + [824]) = $7
	*($4 + [820]) = $8
	
.LABEL $label$135
	CALL memcpy($7, [8960], $8)
	
.LABEL $label$134
	$1 = [0]
	*(($7 + $8)) = [0]
	$13 = *(($5 + [8]))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$151 }
	$11 = (int_64)-9223372036854775808
	goto $label$150 
	
.LABEL $label$151
	$11 = (Rounds 0)($12)
	
.LABEL $label$150
	*($4 + [560]) = $11
	$14 = *($0)
	*($4 + [568]) = $6
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9769])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	
.LOOP $label$153:
	$0 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$152 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$154 }
	$6 = $11
	$0 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$153 }
	goto $label$152 
	
.LABEL $label$154
	$6 = $11
	
.LOOP $label$155:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$152 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$7 = ($1 + [1])
	$1 = $7
	if ( $8 ){ goto $label$155 }
	$0 = [1]
	$1 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$153 }
	
.LABEL $label$152
	CALL eosio_assert($0, [8470])
	$1 = CALL $55(($4 + [544]), ($4 + [816]))
	*((($4 + [160]) + [8])) = *((($4 + [560]) + [8]))
	*($4 + [160]) = *($4 + [560])
	CALL $7($14, $13, ($4 + [160]), $4)
	if ( ((*($1) & [1]) == 0) ){ goto $label$156 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$156
	if ( ((*($4 + [816]) & [1]) == 0) ){ goto $label$126 }
	CALL _ZdlPv(*($4 + [824]))
	goto $label$126 
	
.LABEL $label$133
	CALL eosio_assert([0], [9014])
	goto $label$126 
	
.LABEL $label$132
	$7 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [816]) = ($7 | [1])
	*($4 + [824]) = $8
	*($4 + [820]) = $1
	
.LABEL $label$131
	CALL memcpy($8, [8979], $1)
	
.LABEL $label$130
	*(($8 + $1)) = [0]
	$6 = *(($5 + [16]))
	*(($1 = (($4 + [528]) + [8]))) = *(($5 + [32]))
	*($4 + [528]) = *($5 + [24])
	$11 = *($0)
	$8 = CALL $55(($4 + [512]), ($4 + [816]))
	*((($4 + [192]) + [8])) = *($1)
	*($4 + [192]) = *($4 + [528])
	CALL $7($11, $6, ($4 + [192]), $4)
	$1 = ($5 + [24])
	if ( ((*($8) & [1]) == 0) ){ goto $label$157 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$157
	$6 = *(($5 + [8]))
	*(($8 = (($4 + [496]) + [8]))) = *(($1 + [8]))
	*($4 + [496]) = *($1)
	$11 = *($0)
	$1 = CALL $55(($4 + [480]), ($4 + [816]))
	*((($4 + [176]) + [8])) = *($8)
	*($4 + [176]) = *($4 + [496])
	CALL $7($11, $6, ($4 + [176]), $4)
	if ( ((*($1) & [1]) == 0) ){ goto $label$158 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$158
	if ( ((*($4 + [816]) & [1]) == 0) ){ goto $label$126 }
	CALL _ZdlPv(*($4 + [824]))
	goto $label$126 
	
.LABEL $label$129
	$7 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [816]) = ($7 | [1])
	*($4 + [824]) = $8
	*($4 + [820]) = $1
	
.LABEL $label$128
	CALL memcpy($8, [8997], $1)
	
.LABEL $label$127
	*(($8 + $1)) = [0]
	$6 = *(($5 + [16]))
	*(($1 = (($4 + [464]) + [8]))) = *(($5 + [32]))
	*($4 + [464]) = *($5 + [24])
	$11 = *($0)
	$8 = CALL $55(($4 + [448]), ($4 + [816]))
	*((($4 + [224]) + [8])) = *($1)
	*($4 + [224]) = *($4 + [464])
	CALL $7($11, $6, ($4 + [224]), $4)
	$1 = ($5 + [24])
	if ( ((*($8) & [1]) == 0) ){ goto $label$159 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$159
	$6 = *(($5 + [8]))
	*(($8 = (($4 + [432]) + [8]))) = *(($1 + [8]))
	*($4 + [432]) = *($1)
	$11 = *($0)
	$1 = CALL $55(($4 + [416]), ($4 + [816]))
	*((($4 + [208]) + [8])) = *($8)
	*($4 + [208]) = *($4 + [432])
	CALL $7($11, $6, ($4 + [208]), $4)
	if ( ((*($1) & [1]) == 0) ){ goto $label$160 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$160
	if ( ((*($4 + [816]) & [1]) == 0) ){ goto $label$126 }
	CALL _ZdlPv(*($4 + [824]))
	
.LABEL $label$126
	$11 = *(($5 + [32]))
	$1 = CALL $79([8365])
	if ( ($1 <= [8]) ){ goto $label$163 }
	CALL eosio_assert([0], [9671])
	goto $label$162 
	
.LABEL $label$163
	if ( ($1 == 0) ){ goto $label$161 }
	
.LABEL $label$162
	$6 = (int_64)0
	
.LOOP $label$164:
	$8 = *(($1 + [8364]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$165 }
	CALL eosio_assert([0], [9716])
	
.LABEL $label$165
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$164 }
	if ( ((int_64)$11 != (int_64)((int_64)((int_64)$6 << (int_64)8) | (int_64)4)) ){ goto $label$120 }
	goto $label$121 
	
.LABEL $label$161
	if ( ((int_64)$11 == (int_64)((int_64)0 | (int_64)4)) ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$125
	CALL $54(($4 + [816]))
	
.LABEL $label$124
	CALL $54(($4 + [816]))
	
.LABEL $label$123
	CALL $54(($4 + [816]))
	
.LABEL $label$122
	CALL $54(($4 + [816]))
	
.LABEL $label$121
	*($4 + [360]) = [8297]
	*($4 + [364]) = CALL $79([8297])
	*($4 + [136]) = *($4 + [360])
	$1 = CALL $2(($4 + [816]), ($4 + [136]))
	$8 = ($5 + [40])
	if ( ((int_64)*($8) == (int_64)*($1)) ){ goto $label$120 }
	*($4 + [360]) = [8206]
	*($4 + [364]) = CALL $79([8206])
	*($4 + [128]) = *($4 + [360])
	$1 = CALL $2(($4 + [816]), ($4 + [128]))
	if ( ((int_64)*($8) == (int_64)*($1)) ){ goto $label$120 }
	*($4 + [360]) = [8516]
	*($4 + [364]) = CALL $79([8516])
	*($4 + [120]) = *($4 + [360])
	$1 = CALL $2(($4 + [816]), ($4 + [120]))
	$6 = *(($5 + [40]))
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$120 }
	if ( ((int_64)$6 != (int_64)*(($5 + [16]))) ){ goto $label$171 }
	*($4 + [360]) = [8386]
	*($4 + [364]) = CALL $79([8386])
	*($4 + [112]) = *($4 + [360])
	$6 = *(CALL $2(($4 + [816]), ($4 + [112])))
	*($4 + [360]) = [8413]
	*($4 + [364]) = CALL $79([8413])
	*($4 + [104]) = *($4 + [360])
	*($4 + [312]) = *(CALL $2(($4 + [816]), ($4 + [104])))
	*($4 + [304]) = $6
	*($4 + [400]) = [8386]
	*($4 + [404]) = CALL $79([8386])
	*($4 + [96]) = *($4 + [400])
	$0 = CALL $2(($4 + [408]), ($4 + [96]))
	*($4 + [360]) = [9050]
	*($4 + [364]) = CALL $79([9050])
	*($4 + [88]) = *($4 + [360])
	$6 = *(CALL $2(($4 + [816]), ($4 + [88])))
	*(($4 + [952])) = [0]
	*($4 + [944]) = (int_64)0
	$1 = CALL $79([9059])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$170 }
	$7 = ($5 + [24])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$174 }
	*($4 + [944]) = ($1 << [1])
	$8 = (($4 + [944]) | [1])
	if ( $1 ){ goto $label$173 }
	goto $label$172 
	
.LABEL $label$174
	$2 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($2)
	*($4 + [944]) = ($2 | [1])
	*($4 + [952]) = $8
	*($4 + [948]) = $1
	
.LABEL $label$173
	CALL memcpy($8, [9059], $1)
	
.LABEL $label$172
	*(($8 + $1)) = [0]
	$11 = *(($5 + [16]))
	*((($4 + [360]) + [16])) = *(($7 + [8]))
	$13 = *($7)
	$1 = (($4 + [944]) + [8])
	*(($4 + [392])) = *($1)
	*($1) = [0]
	*($4 + [360]) = $11
	*($4 + [368]) = $13
	*($4 + [384]) = *($4 + [944])
	*($4 + [944]) = (int_64)0
	$1 = CALL $25(($4 + [816]), ($4 + [304]), *($0), $6, ($4 + [360]))
	CALL $9(($4 + [288]), $1)
	$8 = *($4 + [288])
	CALL send_inline($8, (*($4 + [292]) - $8))
	$8 = *($4 + [288])
	if ( ($8 == 0) ){ goto $label$175 }
	*($4 + [292]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$175
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$176 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$176
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$177 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$177
	if ( ((*(($4 + [384])) & [1]) == 0) ){ goto $label$178 }
	CALL _ZdlPv(*(($4 + [392])))
	
.LABEL $label$178
	if ( ((*($4 + [944]) & [1]) == 0) ){ goto $label$179 }
	CALL _ZdlPv(*(($4 + [952])))
	
.LABEL $label$179
	$6 = *(($5 + [40]))
	
.LABEL $label$171
	if ( ((int_64)$6 != (int_64)*($5 + [8])) ){ goto $label$180 }
	*($4 + [360]) = [8386]
	*($4 + [364]) = CALL $79([8386])
	*($4 + [80]) = *($4 + [360])
	$6 = *(CALL $2(($4 + [816]), ($4 + [80])))
	*($4 + [360]) = [8413]
	*($4 + [364]) = CALL $79([8413])
	*($4 + [72]) = *($4 + [360])
	*($4 + [312]) = *(CALL $2(($4 + [816]), ($4 + [72])))
	*($4 + [304]) = $6
	*($4 + [344]) = [8386]
	*($4 + [348]) = CALL $79([8386])
	*($4 + [64]) = *($4 + [344])
	$0 = CALL $2(($4 + [352]), ($4 + [64]))
	*($4 + [360]) = [9050]
	*($4 + [364]) = CALL $79([9050])
	*($4 + [56]) = *($4 + [360])
	$6 = *(CALL $2(($4 + [816]), ($4 + [56])))
	*(($4 + [952])) = [0]
	*($4 + [944]) = (int_64)0
	$1 = CALL $79([9059])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$169 }
	$7 = ($5 + [24])
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$183 }
	*($4 + [944]) = ($1 << [1])
	$8 = (($4 + [944]) | [1])
	if ( $1 ){ goto $label$182 }
	goto $label$181 
	
.LABEL $label$183
	$2 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($2)
	*($4 + [944]) = ($2 | [1])
	*($4 + [952]) = $8
	*($4 + [948]) = $1
	
.LABEL $label$182
	CALL memcpy($8, [9059], $1)
	
.LABEL $label$181
	*(($8 + $1)) = [0]
	$11 = *(($5 + [8]))
	*(($4 + [376])) = *(($7 + [8]))
	$13 = *($7)
	$1 = (($4 + [944]) + [8])
	*(($4 + [392])) = *($1)
	*($1) = [0]
	*($4 + [360]) = $11
	*($4 + [368]) = $13
	*($4 + [384]) = *($4 + [944])
	*($4 + [944]) = (int_64)0
	$1 = CALL $25(($4 + [816]), ($4 + [304]), *($0), $6, ($4 + [360]))
	CALL $9(($4 + [288]), $1)
	$8 = *($4 + [288])
	CALL send_inline($8, (*($4 + [292]) - $8))
	$8 = *($4 + [288])
	if ( ($8 == 0) ){ goto $label$184 }
	*($4 + [292]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$184
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$185 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$185
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$186 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$186
	if ( ((*(($4 + [384])) & [1]) == 0) ){ goto $label$187 }
	CALL _ZdlPv(*(($4 + [392])))
	
.LABEL $label$187
	if ( ((*($4 + [944]) & [1]) == 0) ){ goto $label$188 }
	CALL _ZdlPv(*(($4 + [952])))
	
.LABEL $label$188
	$6 = *(($5 + [40]))
	
.LABEL $label$180
	if ( ((int_64)$6 == (int_64)*(($5 + [16]))) ){ goto $label$189 }
	if ( ((int_64)$6 != (int_64)*(($5 + [8]))) ){ goto $label$120 }
	
.LABEL $label$189
	*($4 + [360]) = [8386]
	*($4 + [364]) = CALL $79([8386])
	*($4 + [48]) = *($4 + [360])
	$6 = *(CALL $2(($4 + [816]), ($4 + [48])))
	*($4 + [360]) = [8386]
	*($4 + [364]) = CALL $79([8386])
	*($4 + [40]) = *($4 + [360])
	CALL $2(($4 + [816]), ($4 + [40]))
	*(($4 + [392])) = [0]
	*($4 + [360]) = $6
	*($4 + [376]) = (int_64)-1
	*($4 + [368]) = (int_64)7343617628107445552
	*($4 + [384]) = (int_64)0
	$1 = CALL db_find_i64($6, (int_64)7343617628107445552, (int_64)-4373710607929573376, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$167 }
	$0 = CALL $26(($4 + [360]), $1)
	CALL eosio_assert(((int_32)*($0 + [120]) == (int_32)($4 + [360])), [10116])
	$1 = CALL $79([8381])
	if ( ($1 <= [8]) ){ goto $label$192 }
	CALL eosio_assert([0], [9671])
	goto $label$191 
	
.LABEL $label$192
	if ( ($1 == 0) ){ goto $label$190 }
	
.LABEL $label$191
	$6 = (int_64)0
	
.LOOP $label$193:
	$8 = *(($1 + [8380]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$194 }
	CALL eosio_assert([0], [9716])
	
.LABEL $label$194
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$193 }
	$11 = ((int_64)$6 << (int_64)8)
	goto $label$168 
	
.LABEL $label$190
	$11 = (int_64)0
	goto $label$168 
	
.LABEL $label$170
	CALL $54(($4 + [944]))
	
.LABEL $label$169
	CALL $54(($4 + [944]))
	
.LABEL $label$168
	CALL eosio_assert([1], [9769])
	$6 = (uint_64)$11 >> (uint_64)(int_64)8)
	$13 = ((int_64)$11 | (int_64)4)
	$1 = [0]
	
.LOOP $label$197:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$196 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$198 }
	$6 = $11
	$8 = [1]
	$7 = $1
	$1 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$197 }
	goto $label$195 
	
.LABEL $label$198
	$6 = $11
	
.LOOP $label$199:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$196 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$7 = ($1 + [1])
	$1 = $7
	if ( $8 ){ goto $label$199 }
	$8 = [1]
	$1 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$197 }
	goto $label$195 
	
.LABEL $label$196
	$8 = [0]
	
.LABEL $label$195
	CALL eosio_assert($8, [8470])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)$13), [9824])
	if ( ((int_64)*($0 + [8]) > (int_64)20000000000) ){ goto $label$166 }
	
.LABEL $label$167
	*($4 + [304]) = [8386]
	*($4 + [308]) = CALL $79([8386])
	*($4 + [32]) = *($4 + [304])
	$6 = *(CALL $2(($4 + [816]), ($4 + [32])))
	*($4 + [304]) = [8413]
	*($4 + [308]) = CALL $79([8413])
	*($4 + [24]) = *($4 + [304])
	*($4 + [296]) = *(CALL $2(($4 + [816]), ($4 + [24])))
	*($4 + [288]) = $6
	*($4 + [272]) = [8386]
	*($4 + [276]) = CALL $79([8386])
	*($4 + [16]) = *($4 + [272])
	$0 = CALL $2(($4 + [280]), ($4 + [16]))
	*($4 + [304]) = [9071]
	*($4 + [308]) = CALL $79([9071])
	*($4 + [8]) = *($4 + [304])
	$13 = *(CALL $2(($4 + [816]), ($4 + [8])))
	$1 = CALL $79([8381])
	if ( ($1 <= [8]) ){ goto $label$203 }
	CALL eosio_assert([0], [9671])
	goto $label$202 
	
.LABEL $label$203
	if ( ($1 == 0) ){ goto $label$201 }
	
.LABEL $label$202
	$6 = (int_64)0
	
.LOOP $label$204:
	$8 = *(($1 + [8380]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$205 }
	CALL eosio_assert([0], [9716])
	
.LABEL $label$205
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$204 }
	$11 = ((int_64)$6 << (int_64)8)
	goto $label$200 
	
.LABEL $label$201
	$11 = (int_64)0
	
.LABEL $label$200
	CALL eosio_assert([1], [9769])
	$6 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = ((int_64)$11 | (int_64)4)
	$1 = [0]
	
.LOOP $label$208:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$207 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$209 }
	$6 = $11
	$8 = [1]
	$7 = $1
	$1 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$208 }
	goto $label$206 
	
.LABEL $label$209
	$6 = $11
	
.LOOP $label$210:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$207 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$1 < (int_32)[6])
	$7 = ($1 + [1])
	$1 = $7
	if ( $8 ){ goto $label$210 }
	$8 = [1]
	$1 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$208 }
	goto $label$206 
	
.LABEL $label$207
	$8 = [0]
	
.LABEL $label$206
	CALL eosio_assert($8, [8470])
	*(($4 + [264])) = [0]
	*($4 + [256]) = (int_64)0
	$1 = CALL $79([9079])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$119 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$213 }
	*($4 + [256]) = ($1 << [1])
	$8 = (($4 + [256]) | [1])
	if ( $1 ){ goto $label$212 }
	goto $label$211 
	
.LABEL $label$213
	$7 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($7)
	*($4 + [256]) = ($7 | [1])
	*($4 + [264]) = $8
	*($4 + [260]) = $1
	
.LABEL $label$212
	CALL memcpy($8, [9079], $1)
	
.LABEL $label$211
	*(($8 + $1)) = [0]
	$6 = *(($5 + [40]))
	*(($4 + [840])) = $14
	$1 = ($4 + [264])
	*((($4 + [816]) + [40])) = *($1)
	*($1) = [0]
	*($4 + [816]) = $6
	*($4 + [824]) = $6
	*($4 + [832]) = (int_64)10000000
	*($4 + [848]) = *($4 + [256])
	*($4 + [256]) = (int_64)0
	$1 = CALL $8(($4 + [304]), ($4 + [288]), *($0), $13, ($4 + [816]))
	CALL $9(($4 + [944]), $1)
	$8 = *($4 + [944])
	CALL send_inline($8, (*($4 + [948]) - $8))
	$8 = *($4 + [944])
	if ( ($8 == 0) ){ goto $label$214 }
	*($4 + [948]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$214
	$8 = *($1 + [28])
	if ( ($8 == 0) ){ goto $label$215 }
	*(($1 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$215
	$8 = *($1 + [16])
	if ( ($8 == 0) ){ goto $label$216 }
	*(($1 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$216
	if ( ((*(($4 + [848])) & [1]) == 0) ){ goto $label$217 }
	CALL _ZdlPv(*(($4 + [856])))
	
.LABEL $label$217
	if ( ((*($4 + [256]) & [1]) == 0) ){ goto $label$166 }
	CALL _ZdlPv(*(($4 + [264])))
	
.LABEL $label$166
	$7 = *($4 + [384])
	if ( ($7 == 0) ){ goto $label$120 }
	$5 = ($4 + [388])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$219 }
	
.LOOP $label$220:
	$1 = ($1 + [-24])
	$8 = *($1)
	*($1) = [0]
	if ( ($8 == 0) ){ goto $label$221 }
	CALL _ZdlPv($8)
	
.LABEL $label$221
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$220 }
	$1 = *(($4 + [384]))
	goto $label$218 
	
.LABEL $label$219
	$1 = $7
	
.LABEL $label$218
	*($5) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$120
	if ( (*($4 + [744]) & [1]) ){ goto $label$223 }
	if ( (*($4 + [760]) & [1]) ){ goto $label$222 }
	goto $label$118 
	
.LABEL $label$223
	CALL _ZdlPv(*(($4 + [752])))
	if ( ((*($4 + [760]) & [1]) == 0) ){ goto $label$118 }
	
.LABEL $label$222
	CALL _ZdlPv(*(($4 + [768])))
	$7 = *($4 + [800])
	if ( $7 ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	CALL $54(($4 + [256]))
	
.LABEL $label$118
	$7 = *($4 + [800])
	if ( ($7 == 0) ){ goto $label$116 }
	
.LABEL $label$117
	$5 = ($4 + [804])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$115 }
	
.LOOP $label$224:
	$1 = ($1 + [-24])
	$8 = *($1)
	*($1) = [0]
	if ( ($8 == 0) ){ goto $label$225 }
	CALL _ZdlPv($8)
	
.LABEL $label$225
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$224 }
	$1 = *(($4 + [800]))
	goto $label$114 
	
.LABEL $label$116
	$global$0 = ($4 + [960])
	return 
	
.LABEL $label$115
	$1 = $7
	
.LABEL $label$114
	*($5) = $7
	CALL _ZdlPv($1)
	$global$0 = ($4 + [960])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	$5 = ($global$0 - [368])
	$global$0 = $5
	$6 = [0]
	*(($5 + [344])) = [0]
	*($5 + [328]) = (int_64)-1
	*($5 + [336]) = (int_64)0
	*($5 + [348]) = [0]
	$7 = *($0)
	*($5 + [312]) = $7
	*($5 + [320]) = $7
	$8 = CALL $55(($5 + [280]), $4)
	CALL $6(($5 + [296]), $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$1
	$9 = *($3)
	$10 = *($3 + [8])
	$11 = (uint_64)$10 >> (uint_64)(int_64)8
	$7 = $11)
	
.LOOP $label$4:
	$12 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$13 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$7 = $13
	$8 = [1]
	$14 = $6
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$7 = $13
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $8 ){ goto $label$6 }
	$8 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [8470])
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$7 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $13
	$12 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $13
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $8 ){ goto $label$11 }
	$12 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$12 = [0]
	
.LABEL $label$7
	CALL eosio_assert($12, [9092])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [9107])
	$6 = *($4)
	CALL eosio_assert((( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ) <= [257]), [9135])
	$14 = *($5 + [296])
	if ( ((int_32)*($5 + [300]) == (int_32)$14) ){ goto $label$12 }
	$6 = *($14)
	$8 = CALL $79([9164])
	if ( ((int_32)$8 != (int_32)( *($14 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$13 }
	if ( CALL $62($14, [0], [-1], [9164], $8) ){ goto $label$13 }
	$6 = *($5 + [296])
	$8 = *($6 + [12])
	$14 = CALL $79([9171])
	if ( ((int_32)$14 != (int_32)( *(($6 + [16])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$24 }
	$8 = [0]
	if ( (CALL $62(($6 + [12]), [0], [-1], [9171], $14) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$6 = *($5 + [296])
	$8 = *($6 + [12])
	$14 = CALL $79([9329])
	if ( ((int_32)$14 != (int_32)( *(($6 + [16])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$25 }
	$8 = [0]
	if ( (CALL $62(($6 + [12]), [0], [-1], [9329], $14) == 0) ){ goto $label$22 }
	
.LABEL $label$25
	CALL eosio_assert([0], [9480])
	goto $label$13 
	
.LABEL $label$23
	CALL eosio_assert(((int_32)(*($5 + [300]) - *($5 + [296])) == (int_32)[96]), [9182])
	$6 = *($5 + [296])
	$14 = *($6 + [24])
	$12 = CALL $79([9206])
	if ( ((int_32)$12 != (int_32)( *(($6 + [28])) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$26 }
	$8 = (CALL $62(($6 + [24]), [0], [-1], [9206], $12) == 0)
	
.LABEL $label$26
	CALL eosio_assert($8, [9217])
	$6 = *($5 + [296])
	$8 = [0]
	$14 = [0]
	$12 = *($6 + [48])
	$3 = CALL $79([9249])
	if ( ((int_32)$3 != (int_32)( *(($6 + [52])) ? uint_32($12 >> [1]) : ($12 & [1]) )) ){ goto $label$27 }
	$14 = (CALL $62(($6 + [48]), [0], [-1], [9249], $3) == 0)
	
.LABEL $label$27
	CALL eosio_assert($14, [9254])
	$6 = *($5 + [296])
	$14 = *($6 + [72])
	$12 = CALL $79([9280])
	if ( ((int_32)$12 != (int_32)( *(($6 + [76])) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$28 }
	$8 = (CALL $62(($6 + [72]), [0], [-1], [9280], $12) == 0)
	
.LABEL $label$28
	CALL eosio_assert($8, [9289])
	$6 = *($5 + [296])
	$8 = *($6 + [60])
	if ( ($8 & [1]) ){ goto $label$21 }
	$8 = uint_32($8 >> [1])
	$6 = (($6 + [60]) + [1])
	goto $label$20 
	
.LABEL $label$22
	CALL eosio_assert(((int_32)(*($5 + [300]) - *($5 + [296])) == (int_32)[96]), [9340])
	$6 = *($5 + [296])
	$14 = *($6 + [24])
	$12 = CALL $79([9364])
	if ( ((int_32)$12 != (int_32)( *(($6 + [28])) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$29 }
	$8 = (CALL $62(($6 + [24]), [0], [-1], [9364], $12) == 0)
	
.LABEL $label$29
	CALL eosio_assert($8, [9367])
	$6 = *($5 + [296])
	$8 = [0]
	$14 = [0]
	$12 = *($6 + [48])
	$3 = CALL $79([9206])
	if ( ((int_32)$3 != (int_32)( *(($6 + [52])) ? uint_32($12 >> [1]) : ($12 & [1]) )) ){ goto $label$30 }
	$14 = (CALL $62(($6 + [48]), [0], [-1], [9206], $3) == 0)
	
.LABEL $label$30
	CALL eosio_assert($14, [9391])
	$6 = *($5 + [296])
	$14 = *($6 + [72])
	$12 = CALL $79([9280])
	if ( ((int_32)$12 != (int_32)( *(($6 + [76])) ? uint_32($14 >> [1]) : ($14 & [1]) )) ){ goto $label$31 }
	$8 = (CALL $62(($6 + [72]), [0], [-1], [9280], $12) == 0)
	
.LABEL $label$31
	CALL eosio_assert($8, [9289])
	$6 = *($5 + [296])
	$8 = *($6 + [60])
	if ( ($8 & [1]) ){ goto $label$19 }
	$8 = uint_32($8 >> [1])
	$6 = (($6 + [60]) + [1])
	goto $label$18 
	
.LABEL $label$21
	$8 = *(($6 + [64]))
	$6 = *(($6 + [68]))
	
.LABEL $label$20
	*($5 + [276]) = $8
	*($5 + [272]) = $6
	*($5 + [32]) = *($5 + [272])
	CALL eosio_assert(((int_64)*(CALL $2(($5 + [120]), ($5 + [32]))) == (int_64)*($1)), [9309])
	$12 = CALL $55(($5 + [256]), (*($5 + [296]) + [36]))
	$3 = CALL $55(($5 + [240]), (*($5 + [296]) + [60]))
	$4 = CALL $55(($5 + [224]), (*($5 + [296]) + [84]))
	$7 = *($0)
	*($5 + [184]) = [8413]
	*($5 + [188]) = CALL $79([8413])
	*($5 + [24]) = *($5 + [184])
	*($5 + [176]) = *(CALL $2(($5 + [120]), ($5 + [24])))
	*($5 + [168]) = $7
	$13 = *($0)
	*($5 + [184]) = [9171]
	*($5 + [188]) = CALL $79([9171])
	*($5 + [16]) = *($5 + [184])
	$15 = *(CALL $2(($5 + [120]), ($5 + [16])))
	$6 = *($5 + [256])
	$8 = ($6 & [1])
	*($5 + [104]) = ( *($12 + [8]) ? ($12 + [1]) : $8 )
	*($5 + [108]) = ( *($12 + [4]) ? uint_32($6 >> [1]) : $8 )
	*($5 + [8]) = *($5 + [104])
	$0 = CALL $2(($5 + [112]), ($5 + [8]))
	$6 = *($5 + [240])
	$8 = ($6 & [1])
	*($5 + [88]) = ( *($3 + [8]) ? ($3 + [1]) : $8 )
	*($5 + [92]) = ( *($3 + [4]) ? uint_32($6 >> [1]) : $8 )
	*($5) = *($5 + [88])
	$1 = CALL $2(($5 + [96]), $5)
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9769])
	$6 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$7 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$11 = $7
	$8 = [1]
	$14 = $6
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$11 = $7
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $8 ){ goto $label$36 }
	$8 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$8 = [0]
	
.LABEL $label$32
	CALL eosio_assert($8, [8470])
	*(($5 + [144])) = $10
	*($5 + [136]) = $9
	*($5 + [120]) = *($0)
	*($5 + [128]) = *($1)
	CALL $55(($5 + [152]), $4)
	$6 = CALL $8(($5 + [184]), ($5 + [168]), $13, $15, ($5 + [120]))
	CALL $9(($5 + [352]), $6)
	$8 = *($5 + [352])
	CALL send_inline($8, (*($5 + [356]) - $8))
	$8 = *($5 + [352])
	if ( ($8 == 0) ){ goto $label$37 }
	*($5 + [356]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$37
	$8 = *($6 + [28])
	if ( ($8 == 0) ){ goto $label$38 }
	*(($6 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$38
	$8 = *($6 + [16])
	if ( ($8 == 0) ){ goto $label$39 }
	*(($6 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$39
	if ( (*($5 + [152]) & [1]) ){ goto $label$41 }
	if ( (*($5 + [224]) & [1]) ){ goto $label$40 }
	goto $label$17 
	
.LABEL $label$41
	CALL _ZdlPv(*(($5 + [160])))
	if ( ((*($5 + [224]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$40
	CALL _ZdlPv(*($4 + [8]))
	$6 = [1]
	if ( ((*($5 + [240]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$19
	$8 = *(($6 + [64]))
	$6 = *(($6 + [68]))
	
.LABEL $label$18
	*($5 + [84]) = $8
	*($5 + [80]) = $6
	*($5 + [64]) = *($5 + [80])
	CALL eosio_assert(((int_64)*(CALL $2(($5 + [120]), ($5 + [64]))) == (int_64)*($1)), [9423])
	$7 = CALL $65((*($5 + [296]) + [36]), [0], [10])
	$3 = CALL $55(($5 + [352]), (*($5 + [296]) + [60]))
	$4 = CALL $55(($5 + [256]), (*($5 + [296]) + [84]))
	$8 = *(($5 + [340]))
	$12 = *(($5 + [336]))
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$43 }
	
.LOOP $label$45:
	$6 = ($8 + [-24])
	$14 = *($6)
	if ( ((int_64)*($14) == (int_64)$7) ){ goto $label$44 }
	$8 = $6
	if ( ((int_32)$12 != (int_32)$6) ){ goto $label$45 }
	goto $label$43 
	
.LABEL $label$44
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$43 }
	CALL eosio_assert(((int_32)*($14 + [160]) == (int_32)($5 + [312])), [10116])
	goto $label$42 
	
.LABEL $label$43
	$14 = CALL $13(($5 + [312]), CALL $fimport$9(*($5 + [312]), *(($5 + [320])), (int_64)7035937633859534848, $7))
	CALL eosio_assert(((int_32)*($14 + [160]) == (int_32)($5 + [312])), [10116])
	
.LABEL $label$42
	CALL eosio_assert(((int_32)*($14 + [144]) ^ (int_32)[1]), [9449])
	$15 = *($0)
	*($5 + [184]) = [8413]
	*($5 + [188]) = CALL $79([8413])
	*($5 + [56]) = *($5 + [184])
	$16 = *(CALL $2(($5 + [120]), ($5 + [56])))
	$17 = *($0)
	*($5 + [184]) = [9329]
	*($5 + [188]) = CALL $79([9329])
	*($5 + [48]) = *($5 + [184])
	$18 = *(CALL $2(($5 + [120]), ($5 + [48])))
	$6 = *($5 + [352])
	$8 = ($6 & [1])
	*($5 + [72]) = ( *($3 + [8]) ? ($3 + [1]) : $8 )
	*($5 + [76]) = ( *($3 + [4]) ? uint_32($6 >> [1]) : $8 )
	*($5 + [40]) = *($5 + [72])
	$12 = CALL $2(($5 + [240]), ($5 + [40]))
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9769])
	$6 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$11 = $13
	$8 = [1]
	$14 = $6
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$11 = $13
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$14 = ($6 + [1])
	$6 = $14
	if ( $8 ){ goto $label$50 }
	$8 = [1]
	$6 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$8 = [0]
	
.LABEL $label$46
	CALL eosio_assert($8, [8470])
	*((($5 + [120]) + [24])) = $10
	*($5 + [120]) = $7
	*($5 + [136]) = $9
	*($5 + [128]) = *($12)
	$8 = CALL $55((($5 + [120]) + [32]), $4)
	*(($14 = (($5 + [184]) + [24]))) = [0]
	*($5 + [192]) = $18
	*($5 + [184]) = $17
	*($5 + [200]) = (int_64)0
	*(($6 = CALL _Znwj([16]))) = $15
	*($6 + [8]) = $16
	*((($5 + [184]) + [36])) = [0]
	$12 = ($6 + [16])
	*($14) = $12
	*(($5 + [204])) = $12
	*($5 + [200]) = $6
	*($5 + [212 align=4]) = (int_64)0
	$6 = *($8)
	$8 = ( *((($5 + [120]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [32])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($5 + [212])
	
.LOOP $label$51:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$51 }
	if ( ($6 == 0) ){ goto $label$53 }
	CALL $10($8, $6)
	$8 = *(($5 + [216]))
	$6 = *(($5 + [212]))
	goto $label$52 
	
.LABEL $label$53
	$8 = [0]
	$6 = [0]
	
.LABEL $label$52
	*($5 + [172]) = $6
	*($5 + [168]) = $6
	*($5 + [176]) = $8
	*($5 + [112]) = ($5 + [168])
	*($5 + [224]) = ($5 + [120])
	CALL $28(($5 + [224]), ($5 + [112]))
	CALL $9(($5 + [168]), ($5 + [184]))
	$6 = *($5 + [168])
	CALL send_inline($6, (*($5 + [172]) - $6))
	$6 = *($5 + [168])
	if ( ($6 == 0) ){ goto $label$54 }
	*($5 + [172]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$54
	$6 = *($5 + [212])
	if ( ($6 == 0) ){ goto $label$55 }
	*(($5 + [216])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$55
	$6 = *($5 + [200])
	if ( ($6 == 0) ){ goto $label$56 }
	*(($5 + [204])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$56
	if ( (*($5 + [152]) & [1]) ){ goto $label$60 }
	if ( (*($5 + [256]) & [1]) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	CALL _ZdlPv(*(($5 + [160])))
	if ( ((*($5 + [256]) & [1]) == 0) ){ goto $label$58 }
	
.LABEL $label$59
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($5 + [352]) & [1]) == 0) ){ goto $label$13 }
	goto $label$57 
	
.LABEL $label$58
	if ( ((*($5 + [352]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$57
	CALL _ZdlPv(*(($3 + [8])))
	goto $label$13 
	
.LABEL $label$17
	$6 = [1]
	if ( (*($5 + [240]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( ((*($5 + [256]) & $6) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	CALL _ZdlPv(*(($3 + [8])))
	if ( ((*($5 + [256]) & $6) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($12 + [8])))
	
.LABEL $label$13
	$14 = *($5 + [296])
	
.LABEL $label$12
	if ( ($14 == 0) ){ goto $label$61 }
	$8 = *($5 + [300])
	if ( ((int_32)$8 == (int_32)$14) ){ goto $label$63 }
	
.LOOP $label$64:
	$6 = ($8 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$65
	$8 = $6
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$64 }
	$6 = *($5 + [296])
	goto $label$62 
	
.LABEL $label$63
	$6 = $14
	
.LABEL $label$62
	*($5 + [300]) = $14
	CALL _ZdlPv($6)
	
.LABEL $label$61
	$14 = *($5 + [336])
	if ( ($14 == 0) ){ goto $label$66 }
	$12 = ($5 + [340])
	$6 = *($12)
	if ( ((int_32)$6 == (int_32)$14) ){ goto $label$68 }
	
.LOOP $label$69:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$70 }
	CALL _ZdlPv($8)
	
.LABEL $label$70
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$69 }
	$6 = *(($5 + [336]))
	goto $label$67 
	
.LABEL $label$68
	$6 = $14
	
.LABEL $label$67
	*($12) = $14
	CALL _ZdlPv($6)
	
.LABEL $label$66
	$global$0 = ($5 + [368])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9935])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $82($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([136])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [112]) = (int_64)0
	*($5 + [120]) = $0
	CALL $43(($3 + [32]), $5)
	*($5 + [124]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $85($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $69 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $68 ()
{
	CALL abort()
	(unreachable)
}

int_64 .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $79([8357])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8357], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $70())
	*(CALL $70()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$7 = CALL $77($4, ($3 + [12]), $2)
	$0 = CALL $70()
	$5 = *($0)
	*($0) = $6
	if ( ((int_32)$5 == (int_32)[34]) ){ goto $label$2 }
	$0 = *($3 + [12])
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($0 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $7
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $63($3)
	
.LABEL $label$1
	CALL $64($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $64 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $66($1, $0, [8776])
	CALL $68()
	(unreachable)
}

void .FUNC $67 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $79($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $56($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $56($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $59($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $63 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $66($1, $0, [8832])
	CALL $67()
	(unreachable)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $78(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18980])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18788]
	$3 = (((int_32)$1 * (int_32)[12]) + [18788])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10588]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10592])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10588]) = [1]
	$2 = ($2 << [16])
	*([0] + [10592]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10592])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10592]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10588]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10588]) = [1]
	$3 = ($3 << [16])
	*([0] + [10592]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10592])
	
.LABEL $label$10
	*([0] + [10592]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $84($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8211])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $82 (int_32 $0)
{
	return CALL $83([10596], $0)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $82($1)
	
.LABEL $label$2
	*(CALL $70()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $82(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $85($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $70())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $81($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $73 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $72($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $70 ()
{
	return [10580]
}

void .FUNC $71 (int_32 $0)
{
}

int_64 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $75($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $70()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $75($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18993]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $74($0, (int_64)0)
	*(CALL $70()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $75($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $75($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $75($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $75($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18993])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $75($0)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $75($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8197]))
	$8 = (int_64)0
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $75($0)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $75($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18993]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $74($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18993]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18993]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $75($0) + [18993]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $70()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $70()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $70()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $74($3, (int_64)0)
	$4 = CALL $76($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

void .FUNC $74 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $55(($2 + [24]), ($1 + [8]))
	$1 = CALL $55(($2 + [8]), ($1 + [20]))
	*($2 + [40]) = $3
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	CALL void $6((int_32 ($2 + [40])), (int_32 $4), (int_32 $1), (int_32 $0))
	if ( (*($1) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9958])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9958])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9958])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9958])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9958])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9958])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9958])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $38(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [144])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($2 + $7)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9958])
	CALL memcpy(($4 + [72]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9958])
	CALL memcpy((($4 + [72]) + [8]), ($2 + [8]), [8])
	*($4 + [60]) = ($2 + [16])
	$3 = (($4 + [72]) + [16])
	CALL $38(($4 + [56]), $3)
	*(($8 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($9 = (($4 + [112]) + [8]))) = *($8)
	*($4 + [112]) = *($4 + [8])
	$8 = *($9)
	*((($4 + [128]) + [8])) = $8
	*((($4 + [24]) + [24])) = $8
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	$0 = *($4 + [80])
	$1 = *($4 + [72])
	$3 = CALL $55(($4 + [128]), $3)
	*($4 + [104]) = $1
	*($4 + [112]) = $0
	$8 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [104])), (int_32 ($4 + [112])), (int_32 $3), (int_32 $6))
	if ( (*($4 + [128]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($3 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $85($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9958])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9958])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$0 = *($4 + [40])
	*($4 + [48]) = *($4 + [32])
	*($4 + [56]) = $0
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [48])), (int_32 ($4 + [56])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $85($2)
	
.LABEL $label$6
	$global$0 = ($4 + [64])
	return [1]
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $36(($4 + [16]), ($4 + [144]))
	*(($9 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4)
	$10 = *($3)
	*(($9 = (($4 + [144]) + [8]))) = $10
	*((($4 + [16]) + [24])) = $10
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [80])
	$0 = *($4 + [72])
	$1 = *($4 + [64])
	$8 = CALL $55(($4 + [112]), ($4 + [96]))
	*($9) = *($3)
	*($4 + [168]) = $1
	*($4 + [160]) = $0
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [168])), (int_32 ($4 + [160])), (int_32 ($4 + [144])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $85($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
}

int_32 .FUNC $31 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $82($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [64]) + [24]))) = (int_64)0
	*(($4 + [104])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	*($4 + [144]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $37(($4 + [16]), ($4 + [144]))
	*(($9 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4)
	$10 = *($3)
	*(($9 = (($4 + [144]) + [8]))) = $10
	*((($4 + [16]) + [24])) = $10
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [80])
	$0 = *($4 + [64])
	$1 = *($4 + [72])
	$8 = CALL $55(($4 + [112]), ($4 + [96]))
	*($9) = *($3)
	*($4 + [168]) = $1
	*($4 + [160]) = $0
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [160])), (int_32 ($4 + [168])), (int_32 ($4 + [144])), (int_32 $8), (int_32 $6))
	if ( (*($4 + [112]) & [1]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $85($2)
	$2 = [1]
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = [1]
	if ( (*($4 + [96]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [104])))
	$global$0 = ($4 + [176])
	return $2
}