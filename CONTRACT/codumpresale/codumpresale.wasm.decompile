(data (i32.const 4) "Pj\00\00")
(data (i32.const 16) "cannot create objects in table of another contract\00")
(data (i32.const 80) "write\00")
(data (i32.const 96) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 160) "cannot pass end iterator to modify\00")
(data (i32.const 208) "object passed to modify is not in multi_index\00")
(data (i32.const 256) "cannot modify objects in table of another contract\00")
(data (i32.const 320) "updater cannot change primary key when modifying an object\00")
(data (i32.const 384) "error reading iterator\00")
(data (i32.const 416) "read\00")
(data (i32.const 432) "contributor account does not exist\00")
(data (i32.const 480) "there is no such contributor in whitelist\00")
(data (i32.const 528) "contributor has not accepted terms\00")
(data (i32.const 576) "hard cap reached\00")
(data (i32.const 608) "please wait while we approve your participation\00")
(data (i32.const 656) "fundraising round A has ended\00")
(data (i32.const 688) "contributor cannot have more than 3 unverified transactions\00")
(data (i32.const 752) "cannot increment end iterator\00")
(data (i32.const 784) "get\00")
(data (i32.const 800) "next primary key in table is at autoincrement limit\00")
(data (i32.const 864) "invalid symbol name\00")
(data (i32.const 896) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 960) "no such network in codum.token exrates table\00")
(data (i32.const 1008) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1072) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1120) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1184) "attempt to subtract asset with different symbol\00")
(data (i32.const 1232) "subtraction underflow\00")
(data (i32.const 1264) "subtraction overflow\00")
(data (i32.const 1296) "there is no contribution with this id\00")
(data (i32.const 1344) "transaction memo mismatch\00")
(data (i32.const 1376) "date of the transaction outside sale date and time bounds\00")
(data (i32.const 1440) "cannot delete validated contribution\00")
(data (i32.const 1488) "cannot pass end iterator to erase\00")
(data (i32.const 1536) "contribution not deleted properly\00")
(data (i32.const 1584) "object passed to erase is not in multi_index\00")
(data (i32.const 1632) "cannot erase objects in table of another contract\00")
(data (i32.const 1696) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1760) "cannot distribute tokens before reaching soft cap\00")
(data (i32.const 1824) "contribution is not validated\00")
(data (i32.const 1856) "contribution is already distributed\00")
(data (i32.const 1904) "contribution is refunded\00")
(data (i32.const 1936) "attempt to add asset with different symbol\00")
(data (i32.const 1984) "addition underflow\00")
(data (i32.const 2016) "addition overflow\00")
(data (i32.const 2048) "active\00")
(data (i32.const 2064) "distribsale\00")
(data (i32.const 2096) "contribution is already refunded\00")
(data (i32.const 2144) "presale is not ended yet\00")
(data (i32.const 2176) "there is pending validated contribution\00")
(data (i32.const 2224) "onerror\00")
(data (i32.const 2240) "eosio\00")
(data (i32.const 2256) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 2320) "codumreserve\00")
(data (i32.const 10736) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$10 (param i32)))
(import "env" "db_idx64_store" (func $fimport$11 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$12 (param i32 i64 i32)))
(import "env" "db_idx64_upperbound" (func $fimport$13 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$17 (param i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$20 (param i32 i32)))
(import "env" "is_account" (func $fimport$21 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$25 (param i64)))
(import "env" "require_auth2" (func $fimport$26 (param i64 i64)))
(import "env" "send_inline" (func $fimport$27 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN12codumpresale5applyEyb" (func $5))
(export "_ZN12codumpresale7approveEy" (func $8))
(export "_ZN12codumpresale8buycodumEyhRKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE" (func $9))
(export "_ZN12codumpresale8validateEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_" (func $30))
(export "_ZN12codumpresale8deletetxEy" (func $33))
(export "_ZN12codumpresale10distributeEy" (func $35))
(export "_ZN12codumpresale10refundsaleEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $41))
(export "_ZN12codumpresale6finishEv" (func $43))
(export "apply" (func $45))
(export "malloc" (func $56))
(export "free" (func $59))
(export "memcmp" (func $70))
(export "strlen" (func $71))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $72 $30 $33 $8 $43 $41 $9 $5 $35)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [384])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $60([168])
	$4 = CALL $13($6)
	*($6 + [152]) = $0
	CALL $19(($8 + [32]), $4)
	*($6 + [160]) = [-1]
	*($6 + [156]) = $1
	*($6 + [164]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [156])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $15(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [140]) & [1]) == 0) ){ goto $label$10 }
	CALL $61(*(($4 + [148])))
	
.LABEL $label$10
	if ( ((*($4 + [108]) & [1]) == 0) ){ goto $label$11 }
	CALL $61(*(($4 + [116])))
	
.LABEL $label$11
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$12 }
	CALL $61(*(($4 + [60])))
	
.LABEL $label$12
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL $61(*(($4 + [48])))
	
.LABEL $label$13
	CALL $61($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $62 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $20($0, ($1 + [140]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [416])
	CALL memcpy(($1 + [16]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [416])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $20(CALL $20($0, ($1 + [40])), ($1 + [52]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [416])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [416])
	CALL memcpy(($1 + [68]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [416])
	CALL memcpy(($1 + [104]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $20($0, ($1 + [108]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [416])
	CALL memcpy(($1 + [136]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $64($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $60(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $61($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [80])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [80])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [80])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $7) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = [178956970]
	$7 = ((int_32)(*($0 + [8]) - $7) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$4 }
	$8 = ($7 << [1])
	$8 = ( $5 ? $8 : ($8 <= $5) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $60(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$6 = *($2)
	$2 = *($1)
	*($1) = [0]
	*(($1 = ($7 + ((int_32)$4 * (int_32)[24])))) = $2
	*($1 + [8]) = $6
	*($1 + [16]) = *($3)
	$4 = ($7 + ((int_32)$8 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($7 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($7 + [-8]))
	*(($1 + [-12])) = *(($7 + [-12]))
	*(($1 + [-16])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$1 = *($8)
	*($8) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $61($1)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$11 }
	CALL $61($7)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [80])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [80])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [784])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $22($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [416])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $21($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $65($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $60($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $65($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $61($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $62($7)
	return (unreachable)
}

int_32 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*($2 + [140]) & [1]) == 0) ){ goto $label$4 }
	CALL $61(*(($2 + [148])))
	
.LABEL $label$4
	if ( ((*($2 + [108]) & [1]) == 0) ){ goto $label$5 }
	CALL $61(*(($2 + [116])))
	
.LABEL $label$5
	if ( ((*($2 + [52]) & [1]) == 0) ){ goto $label$6 }
	CALL $61(*(($2 + [60])))
	
.LABEL $label$6
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL $61(*(($2 + [48])))
	
.LABEL $label$7
	CALL $61($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $61($2)
	
.LABEL $label$8
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $60($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $68($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $61($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$6 = CALL malloc($4)
	CALL db_get_i64($1, $6, $4)
	CALL free($6)
	goto $label$5 
	
.LABEL $label$6
	$6 = ($8 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	CALL db_get_i64($1, $6, $4)
	
.LABEL $label$5
	*(($5 = CALL $60([32])) + [16]) = $0
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [416])
	CALL memcpy($5, $6, [1])
	CALL eosio_assert(((uint_32)($4 + [-1]) > (uint_32)[3]), [416])
	CALL memcpy(($5 + [4]), ($6 + [1]), [4])
	CALL eosio_assert(((uint_32)($4 + [-5]) > (uint_32)[7]), [416])
	CALL memcpy(($5 + [8]), ($6 + [5]), [8])
	*($5 + [20]) = $1
	*($7 + [8]) = $5
	$6 = *($5)
	*($7 + [7]) = $6
	$1 = *($5 + [20])
	*($7) = $1
	$3 = ($0 + [28])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	*($4 + [16]) = $1
	*($7 + [8]) = [0]
	*($4) = $5
	*($3) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $29(($0 + [24]), ($7 + [8]), ($7 + [7]), $7)
	
.LABEL $label$7
	$4 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $61($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
	return $5
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [156]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1072])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4983122731492682032)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1008])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1008])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $18(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $28($0, ($1 + [140]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $28(CALL $28($0, ($1 + [40])), ($1 + [52]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [68]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $28($0, ($1 + [108]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [80])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*($0) + [37])
	*($0) = $4
	$2 = *($1 + [40])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [44])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $4
	$2 = *(($1 + [40]))
	$2 = ( *(($1 + [44])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$2
	$2 = *($1 + [52])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [56])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$3:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $4
	$2 = *(($1 + [52]))
	$2 = ( *(($1 + [56])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$4
	$4 = ($4 + [44])
	*($0) = $4
	$2 = *($1 + [108])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [112])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$5:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$5 }
	*($0) = $4
	$2 = *(($1 + [108]))
	$2 = ( *(($1 + [112])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	$4 = ($2 + $4)
	*($0) = $4
	
.LABEL $label$6
	$4 = ($4 + [20])
	*($0) = $4
	$2 = *($1 + [140])
	$3 = (CASTING uint_64)(uint_32 ( *(($1 + [144])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$7:
	$4 = ($4 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$7 }
	*($0) = $4
	$1 = *(($1 + [140]))
	$1 = ( *(($1 + [144])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$8 }
	*($0) = ($1 + $4)
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [96])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*(($8 + [24])) = (int_64)1398362884
	*($8 + [8]) = [0]
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	CALL eosio_assert([1], [896])
	$5 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	CALL eosio_assert($6, [864])
	*(($8 + [40])) = [0]
	*($8 + [32]) = (int_64)0
	*($8 + [84]) = $4
	*($8 + [80]) = $4
	*($8 + [88]) = ($4 + $3)
	*($8 + [48]) = ($8 + [80])
	*($8 + [64]) = $8
	CALL $55(($8 + [64]), ($8 + [48]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($4)
	
.LABEL $label$9
	*(($8 + [76])) = *(($8 + [28]))
	$4 = *(($8 + [8]))
	*(($1 = (($8 + [64]) + [8]))) = *(($8 + [24]))
	*($8 + [68]) = *(($8 + [20]))
	$5 = *($8)
	*($8 + [64]) = *($8 + [16])
	CALL $69(($8 + [48]), ($8 + [32]))
	*((($8 + [80]) + [8])) = *($1)
	*($8 + [80]) = *($8 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$7 = *((*($1) + $7))
	
.LABEL $label$10
	CALL void $1((int_32 $5), (int_64 ($4 & [255])), (int_32 ($8 + [80])), (int_32 ($8 + [48])), (int_32 $7))
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $61(*($8 + [56]))
	
.LABEL $label$11
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$12 }
	CALL $61(*(($8 + [40])))
	
.LABEL $label$12
	*([0] + [4]) = ($8 + [96])
	return [1]
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [416])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $60($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $68 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZN12codumpresale6finishEv (int_32 $0)
{
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [48])
	*([0] + [4]) = $4
	CALL require_auth(*($0))
	$3 = [1]
	if ( (*($0 + [12]) <= (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$1 }
	$3 = ((int_64)CALL $10($0, ($0 + [48])) < (int_64)1)
	
.LABEL $label$1
	CALL eosio_assert($3, [2144])
	*(($4 + [32])) = [0]
	*($4 + [16]) = (int_64)-1
	$2 = *($0)
	*($4) = $2
	*($4 + [8]) = $2
	*($4 + [24]) = (int_64)0
	*($4 + [36]) = [0]
	$1 = CALL $10($0, ($0 + [32]))
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)4983122731492682032, (int_64)0)
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$6 }
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $18($4, $3)
	if ( *($3 + [68]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$3 = CALL $18($4, $3)
	if ( *($3 + [68]) ){ goto $label$8 }
	$5 = [1]
	goto $label$2 
	
.LABEL $label$8
	$5 = [0]
	goto $label$2 
	
.LABEL $label$7
	$5 = [3]
	goto $label$2 
	
.LABEL $label$5
	$5 = [3]
	goto $label$2 
	
.LABEL $label$4
	$5 = [5]
	goto $label$2 
	
.LABEL $label$3
	$5 = [4]
	
.LABEL $label$2
	
.LOOP $label$9:
	goto $label$17 
	
.LABEL $label$21
	$3 = CALL $18($4, $3)
	if ( (*($3 + [68]) == 0) ){ goto $label$10 }
	$5 = [4]
	goto $label$9 
	
.LABEL $label$20
	$2 = *($0)
	CALL eosio_assert([1], [160])
	CALL $44($4, $3, $2)
	$5 = [5]
	goto $label$9 
	
.LABEL $label$19
	CALL eosio_assert([1], [752])
	$3 = CALL db_next_i64(*($3 + [156]), ($4 + [40]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$18
	$3 = CALL $18($4, $3)
	if ( (*($3 + [68]) == 0) ){ goto $label$14 }
	$5 = [0]
	goto $label$9 
	
.LABEL $label$17
	CALL eosio_assert(((int_32)(*($3 + [136]) | *($3 + [104])) != (int_32)[0]), [2176])
	$5 = [1]
	goto $label$9 
	
.LABEL $label$16
	CALL eosio_assert([1], [752])
	$3 = CALL db_next_i64(*($3 + [156]), ($4 + [40]))
	if ( ((int_32)$3 >= (int_32)[0]) ){ goto $label$13 }
	$5 = [3]
	goto $label$9 
	
.LABEL $label$15
	CALL $16(($4 + [24]))
	*([0] + [4]) = ($4 + [48])
	return 
	
.LABEL $label$14
	$5 = [1]
	goto $label$9 
	
.LABEL $label$13
	$5 = [2]
	goto $label$9 
	
.LABEL $label$12
	$5 = [3]
	goto $label$9 
	
.LABEL $label$11
	$5 = [6]
	goto $label$9 
	
.LABEL $label$10
	$5 = [5]
	goto $label$9 
	$5
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [256])
	*(($7 = $6) + [16]) = *(($1 + [8]))
	*($7 + [24]) = *(($1 + [64]))
	$4 = *($1)
	*($1 + [136]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL $63(($1 + [140]), *($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [320])
	*($7) = [0]
	CALL $26($7, $1)
	$3 = *($7)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$6 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$6 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$1
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $3)
	CALL $27($7, $1)
	CALL db_update_i64(*($1 + [156]), $2, $6, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($6)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$6 = (($7 + [16]) + [8])
	*($7 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($7 + [16]), ($7 + [40]), [8]) == 0) ){ goto $label$5 }
	$5 = ($1 + [160])
	$3 = *($5)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4983122731492682032, ($7 + [32]), $4)
	*($5) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($7 + [40]))
	
.LABEL $label$5
	*($7 + [40]) = *(($1 + [64]))
	if ( (CALL memcmp($6, ($7 + [40]), [8]) == 0) ){ goto $label$7 }
	$6 = ($1 + [164])
	$1 = *($6)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4983122731492682033, ($7 + [32]), $4)
	*($6) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($7 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($7 + [48])
}

void .FUNC _ZN12codumpresale10refundsaleEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL require_auth(*($0))
	*(($8 + [40])) = [0]
	*($8 + [24]) = (int_64)-1
	*($8 + [32]) = (int_64)0
	$5 = *($0)
	*($8 + [8]) = $5
	*($8 + [16]) = $5
	*($8 + [44]) = [0]
	$7 = [0]
	$3 = CALL db_find_i64($5, $5, (int_64)4983122731492682032, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $18(($8 + [8]), $3)
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)($8 + [8])), [96])
	
.LABEL $label$1
	$3 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($3, [1296])
	CALL eosio_assert((*($7 + [136]) == 0), [2096])
	if ( (*($7 + [68]) == 0) ){ goto $label$2 }
	if ( ((int_64)*($7 + [120]) < (int_64)1) ){ goto $label$2 }
	$6 = *($2)
	$4 = CALL strlen([2080])
	if ( ((int_32)$4 != (int_32)( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$3 }
	if ( (CALL $67($2, [0], [-1], [2080], $4) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = *($0)
	*($8) = $2
	CALL eosio_assert($3, [160])
	CALL $42(($8 + [8]), $7, $5, $8)
	
.LABEL $label$2
	CALL $16(($8 + [32]))
	*([0] + [4]) = ($8 + [48])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [80])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [80])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [32])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$4 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($7 + [8]) = (int_64)0
	*($7 + [16]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [416])
	CALL memcpy(($7 + [8]), $4, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [416])
	CALL memcpy(($7 + [31]), ($4 + [8]), [1])
	$5 = ((int_32)*($7 + [31]) != (int_32)[0])
	*($7 + [16]) = $5
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($4)
	$5 = *((($7 + [8]) + [8]))
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	$3 = *($7 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($1) + $6))
	
.LABEL $label$5
	CALL void $1((int_32 $3), (int_64 ((int_32)($5 & [255]) != (int_32)[0])), (int_32 $6))
	*([0] + [4]) = ($7 + [32])
	return [1]
}

int_32 .FUNC $46 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	*($0) = $1
	*($0 + [8]) = (int_64)6604759477635192000
	*($0 + [16]) = (int_64)38400000000
	*($0 + [24]) = (int_64)192000000000
	*($0 + [32]) = (int_64)38400000000
	*(($3 = ($0 + [40]))) = (int_64)85028613604100
	CALL eosio_assert([1], [896])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [864])
	*(($3 = ($0 + [56]))) = (int_64)85028613604100
	$1 = *(($0 + [24]))
	*($0 + [48]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [896])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	
.LABEL $label$6
	CALL eosio_assert($2, [864])
	*($0 + [72]) = (int_64)19200000000
	*($0 + [64 align=1]) = [6450]
	*(($3 = ($0 + [80]))) = (int_64)85028613604100
	CALL eosio_assert([1], [896])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$2 = [0]
	
.LABEL $label$11
	CALL eosio_assert($2, [864])
	*(($3 = ($0 + [96]))) = (int_64)85028613604100
	*(($0 + [88])) = (int_64)38400000000
	CALL eosio_assert([1], [896])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$2 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$2 = [0]
	
.LABEL $label$16
	CALL eosio_assert($2, [864])
	$1 = (int_64)0
	$4 = (int_64)59
	$3 = [2320]
	$5 = (int_64)0
	
.LOOP $label$21:
	$6 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$22 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$2 = ($2 + [165])
	goto $label$23 
	
.LABEL $label$24
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$22
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$21 }
	*(($0 + [104])) = $5
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [240])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2224]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2240]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [2256])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [2224]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = CALL $46(($9 + [128]), $0)
	if ( ((int_64)$2 > (int_64)4520640027457224703) ){ goto $label$28 }
	if ( ((int_64)$2 > (int_64)3849204391378681855) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-5001342326337273856) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)-2764395866176356352) ){ goto $label$14 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [1]
	*($9 + [24 align=4]) = *($9 + [96])
	CALL $50($4, ($9 + [24]))
	goto $label$14 
	
.LABEL $label$28
	if ( ((int_64)$2 > (int_64)5454311842506244095) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)4520640027457224704) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)5378050756496588800) ){ goto $label$14 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [2]
	*($9 + [32 align=4]) = *($9 + [88])
	CALL $48($4, ($9 + [32]))
	goto $label$14 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)3849204391378681856) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)3849304916161986560) ){ goto $label$14 }
	*($9 + [116]) = [0]
	*($9 + [112]) = [3]
	*($9 + [8 align=4]) = *($9 + [112])
	CALL $48($4, ($9 + [8]))
	goto $label$14 
	
.LABEL $label$26
	if ( ((int_64)$2 == (int_64)5454311842506244096) ){ goto $label$22 }
	if ( ((int_64)$2 != (int_64)6604225611667865600) ){ goto $label$14 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [4]
	*($9 + [56 align=4]) = *($9 + [64])
	CALL $52($4, ($9 + [56]))
	goto $label$14 
	
.LABEL $label$25
	*($9 + [76]) = [0]
	*($9 + [72]) = [5]
	*($9 + [48 align=4]) = *($9 + [72])
	CALL $51($4, ($9 + [48]))
	goto $label$14 
	
.LABEL $label$24
	*($9 + [108]) = [0]
	*($9 + [104]) = [6]
	*($9 + [16 align=4]) = *($9 + [104])
	CALL $49($4, ($9 + [16]))
	goto $label$14 
	
.LABEL $label$23
	*($9 + [124]) = [0]
	*($9 + [120]) = [7]
	*($9) = *($9 + [120])
	CALL $47($4, $9)
	goto $label$14 
	
.LABEL $label$22
	*($9 + [84]) = [0]
	*($9 + [80]) = [8]
	*($9 + [40 align=4]) = *($9 + [80])
	CALL $48($4, ($9 + [40]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [240])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [256])
	*(($10 = $11) + [16]) = *(($1 + [8]))
	*($10 + [24]) = *(($1 + [64]))
	$6 = *(($1 + [32]))
	$4 = *($1)
	$5 = ((int_64)((int_64)*($1 + [72]) * (int_64)10000) / (int_64)*($1 + [20]))
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [896])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$3 = (($10 + [16]) + [8])
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [864])
	*(($1 + [128])) = $6
	*($1 + [120]) = $5
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [320])
	*($10) = [0]
	CALL $26($10, $1)
	$9 = *($10)
	if ( ($9 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($9)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($11 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($10 + [4]) = $8
	*($10) = $8
	*($10 + [8]) = ($8 + $9)
	CALL $27($10, $1)
	CALL db_update_i64(*($1 + [156]), $2, $8, $9)
	if ( ($9 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($10 + [40]) = *(($1 + [8]))
	if ( (CALL memcmp(($10 + [16]), ($10 + [40]), [8]) == 0) ){ goto $label$10 }
	$9 = ($1 + [160])
	$8 = *($9)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$11 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4983122731492682032, ($10 + [32]), $4)
	*($9) = $8
	
.LABEL $label$11
	CALL db_idx64_update($8, $2, ($10 + [40]))
	
.LABEL $label$10
	*($10 + [40]) = *(($1 + [64]))
	if ( (CALL memcmp($3, ($10 + [40]), [8]) == 0) ){ goto $label$12 }
	$1 = ($1 + [164])
	$8 = *($1)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$13 }
	$8 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4983122731492682033, ($10 + [32]), $4)
	*($1) = $8
	
.LABEL $label$13
	CALL db_idx64_update($8, $2, ($10 + [40]))
	
.LABEL $label$12
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $72 ()
{
	(unreachable)
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [416])
	CALL memcpy(($2 + [8]), $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $20(($2 + [48]), (($2 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $53(($2 + [48]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $61(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [64])
	return [1]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10828])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC _ZN12codumpresale7approveEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$21($1), [432])
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$3 = *($0)
	*($6 + [8]) = $3
	*($6 + [16]) = $3
	$5 = [0]
	$2 = CALL db_find_i64($3, $3, (int_64)-2063328927043551232, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $6(($6 + [8]), $2)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($6 + [8])), [96])
	
.LABEL $label$1
	$2 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($2, [480])
	CALL eosio_assert(*($5 + [8]), [528])
	$1 = *($0)
	CALL eosio_assert($2, [160])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($6 + [8])), [208])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$2()), [256])
	$3 = *($5)
	*($5 + [12]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$3 == (int_64)*($5)), [320])
	CALL eosio_assert([1], [80])
	CALL memcpy(($6 + [48]), $5, [8])
	*($6 + [63]) = *($5 + [8])
	CALL eosio_assert([1], [80])
	CALL memcpy((($6 + [48]) | [8]), ($6 + [63]), [1])
	CALL eosio_assert([1], [80])
	CALL memcpy((($6 + [48]) | [9]), ($5 + [12]), [4])
	CALL db_update_i64(*($5 + [20]), $1, ($6 + [48]), [13])
	$5 = ($6 + [24])
	if ( (uint_64)($3 <= *($5)) ){ goto $label$2 }
	*($5) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$3 }
	$4 = ($6 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL $61($0)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	$5 = *(($6 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	*($4) = $2
	CALL $61($5)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [64])
}

void .FUNC _ZN12codumpresale8buycodumEyhRKN5eosio5assetERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [144])
	*([0] + [4]) = $10
	*($10 + [56]) = $1
	*($10 + [55]) = $2
	CALL require_auth($1)
	CALL eosio_assert(((int_64)CALL $10($0, ($0 + [48])) > (int_64)1), [576])
	*(($10 + [96])) = [0]
	*($10 + [80]) = (int_64)-1
	*($10 + [88]) = (int_64)0
	$6 = *($0)
	*($10 + [64]) = $6
	*($10 + [72]) = $6
	$2 = CALL db_find_i64($6, $6, (int_64)-2063328927043551232, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	$2 = CALL $6(($10 + [64]), $2)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)($10 + [64])), [96])
	if ( (*($2 + [8]) == 0) ){ goto $label$2 }
	$8 = [1]
	if ( *($2 + [12]) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	$5 = *($10 + [88])
	if ( ($5 == 0) ){ goto $label$3 }
	$7 = ($10 + [92])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$9 = *($2)
	*($2) = [0]
	if ( ($9 == 0) ){ goto $label$7 }
	CALL $61($9)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($10 + [88]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $5
	
.LABEL $label$4
	*($7) = $5
	CALL $61($2)
	
.LABEL $label$3
	CALL eosio_assert($8, [608])
	CALL eosio_assert(((uint_32)*($0 + [12]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$3() / (uint_64)(int_64)1000000))), [656])
	$2 = [0]
	*(($5 = ($10 + [96]))) = [0]
	*($10 + [80]) = (int_64)-1
	*($10 + [88]) = (int_64)0
	$1 = *($0)
	*($10 + [64]) = $1
	*($10 + [72]) = $1
	*($10 + [100]) = [0]
	*($10 + [48]) = ($10 + [64])
	CALL $11(($10 + [40]), ($10 + [48]), ($10 + [56]))
	CALL $12(($10 + [32]), ($10 + [48]), ($10 + [56]))
	$1 = *($10 + [40])
	*($10 + [8]) = $1
	$9 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)$9) == (int_32)*($10 + [36])) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ((*($9 + [68]) == 0) + $2)
	CALL $17(($10 + [8]))
	$9 = *($10 + [12])
	if ( ((int_32)$9 != (int_32)*($10 + [36])) ){ goto $label$10 }
	$2 = (($2 & [255]) <= [3])
	goto $label$8 
	
.LABEL $label$9
	$2 = [1]
	
.LABEL $label$8
	CALL eosio_assert($2, [688])
	$1 = *($0)
	*($10 + [20]) = $3
	*($10 + [24]) = $4
	*($10 + [28]) = $0
	*($10 + [12]) = ($10 + [56])
	*($10 + [8]) = ($10 + [64])
	*($10 + [16]) = ($10 + [55])
	*($10 + [136]) = $1
	CALL eosio_assert(((int_64)*($10 + [64]) == (int_64)CALL $fimport$2()), [16])
	*($10 + [116]) = ($10 + [8])
	*($10 + [112]) = ($10 + [64])
	*($10 + [120]) = ($10 + [136])
	$2 = CALL $60([168])
	CALL $13($2)
	*($2 + [152]) = ($10 + [64])
	CALL $14(($10 + [112]), $2)
	*($10 + [128]) = $2
	$1 = *($2)
	*($10 + [112]) = $1
	$0 = *($2 + [156])
	*($10 + [108]) = $0
	$8 = ($10 + [92])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*($5)) ){ goto $label$12 }
	*($9 + [8]) = $1
	*($9 + [16]) = $0
	*($10 + [128]) = [0]
	*($9) = $2
	*($8) = ($9 + [24])
	goto $label$11 
	
.LABEL $label$12
	CALL $15(($10 + [88]), ($10 + [128]), ($10 + [112]), ($10 + [108]))
	
.LABEL $label$11
	$2 = *($10 + [128])
	*($10 + [128]) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	if ( ((*($2 + [140]) & [1]) == 0) ){ goto $label$14 }
	CALL $61(*(($2 + [148])))
	
.LABEL $label$14
	if ( ((*($2 + [108]) & [1]) == 0) ){ goto $label$15 }
	CALL $61(*(($2 + [116])))
	
.LABEL $label$15
	if ( ((*($2 + [52]) & [1]) == 0) ){ goto $label$16 }
	CALL $61(*(($2 + [60])))
	
.LABEL $label$16
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$17 }
	CALL $61(*(($2 + [48])))
	
.LABEL $label$17
	CALL $61($2)
	
.LABEL $label$13
	CALL $16(($10 + [88]))
	*([0] + [4]) = ($10 + [144])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [384])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $60([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [416])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [416])
	CALL memcpy(($8 + [16]), ($7 + [8]), [1])
	*($6 + [8]) = ((int_32)*($8 + [16]) != (int_32)[0])
	CALL eosio_assert(((uint_32)($4 + [-9]) > (uint_32)[3]), [416])
	CALL memcpy(($6 + [12]), ($7 + [9]), [4])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $7(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $61($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $60(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $61($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $61($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _ZN12codumpresale5applyEyb (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [80])
	*([0] + [4]) = $7
	CALL require_auth($1)
	*((($7 + [8]) + [32])) = [0]
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	$3 = *($0)
	*($7 + [8]) = $3
	*($7 + [16]) = $3
	$6 = CALL db_find_i64($3, $3, (int_64)-2063328927043551232, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $6(($7 + [8]), $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($7 + [8])), [96])
	$4 = *($0)
	CALL eosio_assert([1], [160])
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($7 + [8])), [208])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$2()), [256])
	*($6 + [8]) = $2
	$3 = *($6)
	*($6) = $1
	CALL eosio_assert(((int_64)$3 == (int_64)$1), [320])
	CALL eosio_assert([1], [80])
	CALL memcpy(($7 + [64]), $6, [8])
	*($7 + [56]) = *($6 + [8])
	CALL eosio_assert([1], [80])
	CALL memcpy((($7 + [64]) | [8]), ($7 + [56]), [1])
	CALL eosio_assert([1], [80])
	CALL memcpy((($7 + [64]) | [9]), ($6 + [12]), [4])
	CALL db_update_i64(*($6 + [20]), $4, ($7 + [64]), [13])
	$6 = ($7 + [24])
	if ( (uint_64)($3 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	$2 = *($7 + [32])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$3 = *($0)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)CALL $fimport$2()), [16])
	*(($6 = CALL $60([32])) + [16]) = ($7 + [8])
	*($6 + [8]) = $2
	*($6) = $1
	*($6 + [12]) = [0]
	CALL eosio_assert([1], [80])
	CALL memcpy(($7 + [64]), $6, [8])
	*($7 + [56]) = *($6 + [8])
	CALL eosio_assert([1], [80])
	CALL memcpy((($7 + [64]) | [8]), ($7 + [56]), [1])
	CALL eosio_assert([1], [80])
	CALL memcpy((($7 + [64]) | [9]), ($6 + [12]), [4])
	$1 = *($6)
	$2 = CALL db_store_i64(*((($7 + [8]) + [8])), (int_64)-2063328927043551232, $3, $1, ($7 + [64]), [13])
	*($6 + [20]) = $2
	$0 = ($7 + [24])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($7 + [56]) = $6
	$1 = *($6)
	*($7 + [64]) = $1
	*($7 + [52]) = $2
	$5 = ($7 + [36])
	$0 = *($5)
	if ( ((uint_32)$0 >= (uint_32)*(($7 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $1
	*($0 + [16]) = $2
	*($7 + [56]) = [0]
	*($0) = $6
	*($5) = ($0 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $7(($7 + [32]), ($7 + [56]), ($7 + [64]), ($7 + [52]))
	
.LABEL $label$6
	$6 = *($7 + [56])
	*($7 + [56]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $61($6)
	
.LABEL $label$3
	$2 = *($7 + [32])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($7 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $61($0)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($7 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $2
	
.LABEL $label$8
	*($5) = $2
	CALL $61($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [80])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	$9 = *($0 + [4])
	$3 = *($9 + [20])
	$8 = *($9)
	$7 = *($8 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($8), *($8 + [8]), (int_64)4983122731492682032, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $18($8, $5)
	*($10 + [4]) = [0]
	*($10) = $8
	$7 = *(*(CALL $24($10) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($8 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [800])
	*($1) = *(($8 + [16]))
	*($1 + [8]) = *(*($9 + [4]))
	*($1 + [16]) = *(*($9 + [8]))
	$8 = *($9 + [12])
	*($1 + [24]) = *($8)
	*(($1 + [32])) = *(($8 + [8]))
	*($1 + [64]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL $63(($1 + [40]), *($9 + [16]))
	$8 = [0]
	*($1 + [136]) = [0]
	*($1 + [104]) = [0]
	*(($10 + [32])) = [0]
	*($10 + [16]) = (int_64)-1
	*($10 + [24]) = (int_64)0
	$7 = *($3 + [104])
	*($10 + [8]) = $7
	*($10) = $7
	$3 = [0]
	$9 = CALL db_find_i64($7, $7, (int_64)6300092397548208128, *(*($9 + [8])))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $25($10, $9)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$10), [96])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [960])
	$9 = *($3 + [4])
	*($1 + [20]) = $9
	$4 = ((int_64)((int_64)*(($1 + [24])) * (int_64)(CASTING uint_64)(uint_32 $9)) / (int_64)10000)
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [896])
	$7 = (int_64)332143021891
	
.LOOP $label$6:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$3 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	CALL eosio_assert($3, [864])
	*(($1 + [80])) = (int_64)85028613604100
	*($1 + [72]) = $4
	CALL eosio_assert([1], [896])
	$7 = (int_64)332143021891
	
.LOOP $label$10:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	CALL eosio_assert($8, [864])
	*(($1 + [96])) = (int_64)85028613604100
	*($1 + [88]) = (int_64)0
	$3 = *($10 + [24])
	if ( ($3 == 0) ){ goto $label$13 }
	$5 = ($10 + [28])
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$9 = ($9 + [-24])
	$8 = *($9)
	*($9) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	CALL $61($8)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$16 }
	$9 = *(($10 + [24]))
	goto $label$14 
	
.LABEL $label$15
	$9 = $3
	
.LABEL $label$14
	*($5) = $3
	CALL $61($9)
	
.LABEL $label$13
	*($10) = [0]
	CALL $26($10, $1)
	$8 = *($10)
	if ( ($8 <= [513]) ){ goto $label$19 }
	$9 = CALL malloc($8)
	goto $label$18 
	
.LABEL $label$19
	$9 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$18
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $8)
	CALL $27($10, $1)
	$7 = *($1)
	*($1 + [156]) = CALL db_store_i64(*($2 + [8]), (int_64)4983122731492682032, *(*($0 + [8])), $7, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$20 }
	CALL free($9)
	
.LABEL $label$20
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$21 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$21
	$9 = ($2 + [8])
	$7 = *($9)
	$8 = *(($0 + [8]))
	$4 = *($8)
	$6 = *($1)
	*($10 + [40]) = *(($1 + [8]))
	*($1 + [160]) = CALL db_idx64_store($7, (int_64)4983122731492682032, $4, $6, ($10 + [40]))
	$7 = *($8)
	$4 = *($9)
	$6 = *($1)
	*($10 + [40]) = *(($1 + [64]))
	*(($1 + [164])) = CALL db_idx64_store($4, (int_64)4983122731492682033, $7, $6, ($10 + [40]))
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $60(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $68($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $23(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = *($0 + [4])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [140]) & [1]) == 0) ){ goto $label$6 }
	CALL $61(*(($2 + [148])))
	
.LABEL $label$6
	if ( ((*($2 + [108]) & [1]) == 0) ){ goto $label$7 }
	CALL $61(*(($2 + [116])))
	
.LABEL $label$7
	if ( ((*($2 + [52]) & [1]) == 0) ){ goto $label$8 }
	CALL $61(*(($2 + [60])))
	
.LABEL $label$8
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$9 }
	CALL $61(*(($2 + [48])))
	
.LABEL $label$9
	CALL $61($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$2 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $61($2)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [752])
	$6 = *($0 + [4])
	$7 = *($6 + [160])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)4983122731492682032, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [160]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$2), [96])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $18($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)4983122731492682032, $3))
	CALL eosio_assert(((int_32)*($7 + [152]) == (int_32)$2), [96])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [160])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_64 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	$6 = *($1)
	$2 = *($1 + [8])
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	$3 = *($0)
	*($7) = $3
	*($7 + [8]) = $3
	*($7 + [24]) = (int_64)0
	*($7 + [36]) = [0]
	CALL eosio_assert(((int_64)$2 == (int_64)*(($0 + [40]))), [1120])
	$4 = *($0 + [32])
	$5 = *($1)
	$0 = CALL db_lowerbound_i64($3, $3, (int_64)4983122731492682032, (int_64)0)
	if ( ((int_64)$5 != (int_64)$4) ){ goto $label$6 }
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	$0 = CALL $18($7, $0)
	if ( *($0 + [68]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$6
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $18($7, $0)
	if ( *($0 + [104]) ){ goto $label$7 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$7
	$8 = [0]
	goto $label$1 
	
.LABEL $label$5
	$8 = [3]
	goto $label$1 
	
.LABEL $label$4
	$8 = [3]
	goto $label$1 
	
.LABEL $label$3
	$8 = [5]
	goto $label$1 
	
.LABEL $label$2
	$8 = [4]
	
.LABEL $label$1
	
.LOOP $label$8:
	goto $label$16 
	
.LABEL $label$20
	$0 = CALL $18($7, $0)
	if ( (*($0 + [68]) == 0) ){ goto $label$9 }
	$8 = [4]
	goto $label$8 
	
.LABEL $label$19
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)$2), [1184])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($0 + [72]))) > (int_64)-4611686018427387904), [1232])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [1264])
	$8 = [5]
	goto $label$8 
	
.LABEL $label$18
	CALL eosio_assert([1], [752])
	$0 = CALL db_next_i64(*($0 + [156]), ($7 + [40]))
	if ( ((int_32)$0 >= (int_32)[0]) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$17
	$0 = CALL $18($7, $0)
	if ( (*($0 + [104]) == 0) ){ goto $label$13 }
	$8 = [0]
	goto $label$8 
	
.LABEL $label$16
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)$2), [1184])
	$6 = (int_64)
	CALL eosio_assert(((int_64)$6($6 - *($0 + [72]))) > (int_64)-4611686018427387904), [1232])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [1264])
	$8 = [1]
	goto $label$8 
	
.LABEL $label$15
	CALL eosio_assert([1], [752])
	$0 = CALL db_next_i64(*($0 + [156]), ($7 + [40]))
	if ( ((int_32)$0 >= (int_32)[0]) ){ goto $label$12 }
	$8 = [3]
	goto $label$8 
	
.LABEL $label$14
	CALL $16(($7 + [24]))
	*([0] + [4]) = ($7 + [48])
	return $6
	
.LABEL $label$13
	$8 = [1]
	goto $label$8 
	
.LABEL $label$12
	$8 = [2]
	goto $label$8 
	
.LABEL $label$11
	$8 = [3]
	goto $label$8 
	
.LABEL $label$10
	$8 = [6]
	goto $label$8 
	
.LABEL $label$9
	$8 = [5]
	goto $label$8 
	return $8
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)4983122731492682032, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [152]) == (int_32)$4), [96])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $18($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)4983122731492682032, $5))
	CALL eosio_assert(((int_32)*($2 + [152]) == (int_32)$4), [96])
	
.LABEL $label$4
	*(($2 + [160])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_upperbound(*($8), *($8 + [8]), (int_64)4983122731492682032, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [152]) == (int_32)$4), [96])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $18($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)4983122731492682032, $5))
	CALL eosio_assert(((int_32)*($2 + [152]) == (int_32)$4), [96])
	
.LABEL $label$4
	*(($2 + [160])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $13 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [24]) = (int_64)0
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [896])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [864])
	*($0 + [40 align=4]) = (int_64)0
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*($0 + [72]) = (int_64)0
	*(($2 = ($0 + [80]))) = (int_64)1398362884
	CALL eosio_assert([1], [896])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [864])
	*(($2 = ($0 + [96]))) = (int_64)1398362884
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [896])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [864])
	*(($0 + [116])) = [0]
	*($0 + [108 align=4]) = (int_64)0
	*($0 + [120]) = (int_64)0
	*(($2 = ($0 + [128]))) = (int_64)1398362884
	CALL eosio_assert([1], [896])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$20 }
	
.LABEL $label$19
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$3 = [0]
	
.LABEL $label$16
	CALL eosio_assert($3, [864])
	*(($0 + [148])) = [0]
	*($0 + [140 align=4]) = (int_64)0
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [144])
	*([0] + [4]) = $17
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [256])
	*(($16 = $17) + [8]) = *(($1 + [8]))
	*($16 + [16]) = *(($1 + [64]))
	$10 = [0]
	$4 = *($1)
	$5 = *($3)
	CALL eosio_assert(((int_32)*($1 + [68]) != (int_32)[0]), [1824])
	CALL eosio_assert((*($1 + [104]) == 0), [1856])
	CALL eosio_assert((*($1 + [136]) == 0), [1904])
	$8 = CALL $10($5, ($5 + [48]))
	if ( ((int_64)$8 <= (int_64)1) ){ goto $label$4 }
	CALL eosio_assert([1], [896])
	$12 = (int_64)332143021891
	$10 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$3 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	$14 = *(($1 + [32]))
	$11 = ((int_64)((int_64)*($1 + [72]) * (int_64)10000) / (int_64)*($1 + [20]))
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [896])
	$12 = (uint_64)$14 >> (uint_64)(int_64)8)
	
.LOOP $label$9:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$3 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($3, [864])
	*(($1 + [128])) = $14
	*($1 + [120]) = $11
	CALL $66(($1 + [108]), [2080])
	goto $label$1 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	CALL eosio_assert($3, [864])
	$12 = *($1 + [72])
	if ( ((int_64)$12 <= (int_64)$8) ){ goto $label$15 }
	$14 = *(($1 + [32]))
	$11 = ((int_64)((int_64))($12 - $8) * (int_64)10000) / (int_64)*($1 + [20])
	CALL eosio_assert((uint_64)(((int_64)$11) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [896])
	$12 = (uint_64)$14 >> (uint_64)(int_64)8)
	$10 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$3 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$16 }
	goto $label$13 
	
.LABEL $label$15
	$9 = *(($1 + [80]))
	CALL eosio_assert(((int_64)*(($1 + [96])) == (int_64)$9), [1936])
	$8 = ((int_64)*($1 + [88]) + (int_64)$12)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1984])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [2016])
	goto $label$12 
	
.LABEL $label$14
	$3 = [0]
	
.LABEL $label$13
	CALL eosio_assert($3, [864])
	*(($1 + [128])) = $14
	*($1 + [120]) = $11
	$9 = (int_64)85028613604100
	
.LABEL $label$12
	$6 = *($5)
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [2048]
	$13 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$24 }
	$3 = *($10)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$3 = ($3 + [165])
	goto $label$22 
	
.LABEL $label$24
	$14 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$20
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$19 }
	$7 = *($5 + [104])
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [2064]
	$15 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$30 }
	$3 = *($10)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$3 = ($3 + [165])
	goto $label$28 
	
.LABEL $label$30
	$14 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$26
	$10 = ($10 + [1])
	$11 = ((int_64)$11 + (int_64)-5)
	$15 = ((int_64)$14 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$25 }
	*((($16 + [24]) + [24])) = $9
	*($16 + [24]) = $6
	*($16 + [40]) = $8
	*($16 + [32]) = *(($1 + [8]))
	CALL $69((($16 + [24]) + [32]), ($1 + [40]))
	*($16 + [80]) = $15
	*($16 + [72]) = $7
	*(($10 = CALL $60([16]))) = $6
	*($10 + [8]) = $13
	*((($16 + [72]) + [32])) = [0]
	$3 = ($10 + [16])
	*((($16 + [72]) + [24])) = $3
	*(($16 + [92])) = $3
	*($16 + [88]) = $10
	*($16 + [100]) = [0]
	*((($16 + [72]) + [36])) = [0]
	$10 = *($16 + [56])
	$3 = ( *((($16 + [24]) + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$10 = ($3 + [32])
	$12 = (CASTING uint_64)(uint_32 $3)
	$3 = ($16 + [100])
	
.LOOP $label$31:
	$10 = ($10 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$31 }
	if ( ($10 == 0) ){ goto $label$33 }
	CALL $22($3, $10)
	$3 = *(($16 + [104]))
	$10 = *(($16 + [100]))
	goto $label$32 
	
.LABEL $label$33
	$3 = [0]
	$10 = [0]
	
.LABEL $label$32
	*($16 + [132]) = $10
	*($16 + [128]) = $10
	*($16 + [136]) = $3
	*($16 + [112]) = ($16 + [128])
	*($16 + [120]) = ($16 + [24])
	CALL $37(($16 + [120]), ($16 + [112]))
	CALL $38(($16 + [128]), ($16 + [72]))
	$10 = *($16 + [128])
	CALL send_inline($10, (*($16 + [132]) - $10))
	$10 = *($16 + [128])
	if ( ($10 == 0) ){ goto $label$34 }
	*($16 + [132]) = $10
	CALL $61($10)
	
.LABEL $label$34
	$10 = *($16 + [100])
	if ( ($10 == 0) ){ goto $label$35 }
	*(($16 + [104])) = $10
	CALL $61($10)
	
.LABEL $label$35
	$10 = *($16 + [88])
	if ( ($10 == 0) ){ goto $label$36 }
	*(($16 + [92])) = $10
	CALL $61($10)
	
.LABEL $label$36
	if ( ((*($16 + [56]) & [1]) == 0) ){ goto $label$37 }
	CALL $61(*(($16 + [64])))
	
.LABEL $label$37
	*(($1 + [104])) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [320])
	*($16 + [24]) = [0]
	CALL $26(($16 + [24]), $1)
	$3 = *($16 + [24])
	if ( ($3 <= [513]) ){ goto $label$39 }
	$10 = CALL malloc($3)
	goto $label$38 
	
.LABEL $label$39
	$10 = ($17 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$38
	*($16 + [28]) = $10
	*($16 + [24]) = $10
	*($16 + [32]) = ($10 + $3)
	CALL $27(($16 + [24]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$40 }
	CALL free($10)
	
.LABEL $label$40
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$41 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$41
	$10 = (($16 + [8]) + [8])
	*($16 + [72]) = *(($1 + [8]))
	if ( (CALL memcmp(($16 + [8]), ($16 + [72]), [8]) == 0) ){ goto $label$42 }
	$5 = ($1 + [160])
	$3 = *($5)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$43 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4983122731492682032, ($16 + [128]), $4)
	*($5) = $3
	
.LABEL $label$43
	CALL db_idx64_update($3, $2, ($16 + [72]))
	
.LABEL $label$42
	*($16 + [72]) = *(($1 + [64]))
	if ( (CALL memcmp($10, ($16 + [72]), [8]) == 0) ){ goto $label$44 }
	$1 = ($1 + [164])
	$10 = *($1)
	if ( ((int_32)$10 > (int_32)[-1]) ){ goto $label$45 }
	$10 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4983122731492682033, ($16 + [128]), $4)
	*($1) = $10
	
.LABEL $label$45
	CALL db_idx64_update($10, $2, ($16 + [72]))
	
.LABEL $label$44
	*([0] + [4]) = ($16 + [144])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [80])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $28(*($1), ($0 + [32]))
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [1584])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1632])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$7 = ($4 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$4 = $7
	$8 = ($7 + [-24])
	$7 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [1696])
	$8 = ($4 + [-24])
	$7 = *($5)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$4 }
	$3 = ([0] - $7)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [140]) & [1]) == 0) ){ goto $label$7 }
	CALL $61(*(($4 + [148])))
	
.LABEL $label$7
	if ( ((*($4 + [108]) & [1]) == 0) ){ goto $label$8 }
	CALL $61(*(($4 + [116])))
	
.LABEL $label$8
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$9 }
	CALL $61(*(($4 + [60])))
	
.LABEL $label$9
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL $61(*(($4 + [48])))
	
.LABEL $label$10
	CALL $61($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	if ( ((*($7 + [140]) & [1]) == 0) ){ goto $label$13 }
	CALL $61(*(($7 + [148])))
	
.LABEL $label$13
	if ( ((*($7 + [108]) & [1]) == 0) ){ goto $label$14 }
	CALL $61(*(($7 + [116])))
	
.LABEL $label$14
	if ( ((*($7 + [52]) & [1]) == 0) ){ goto $label$15 }
	CALL $61(*(($7 + [60])))
	
.LABEL $label$15
	if ( ((*($7 + [40]) & [1]) == 0) ){ goto $label$16 }
	CALL $61(*(($7 + [48])))
	
.LABEL $label$16
	CALL $61($7)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [156]))
	$7 = *(($1 + [160]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$18 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4983122731492682032, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx64_remove($7)
	
.LABEL $label$17
	$7 = *(($1 + [164]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$20 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4983122731492682033, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$19 }
	
.LABEL $label$20
	CALL db_idx64_remove($7)
	
.LABEL $label$19
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN12codumpresale10distributeEy (int_32 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL eosio_assert((CASTING uint_32)(uint_64 (uint_64)CALL $10($0, ($0 + [32])) >> (uint_64)(int_64)63)), [1760])
	*((($5 + [8]) + [32])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$2 = *($0)
	*($5 + [8]) = $2
	*($5 + [16]) = $2
	*($5 + [44]) = [0]
	$4 = [0]
	$3 = CALL db_find_i64($2, $2, (int_64)4983122731492682032, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $18(($5 + [8]), $3)
	CALL eosio_assert(((int_32)*($4 + [152]) == (int_32)($5 + [8])), [96])
	
.LABEL $label$1
	$3 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($3, [1296])
	$2 = *($0)
	*($5) = $0
	CALL eosio_assert($3, [160])
	CALL $36(($5 + [8]), $4, $2, $5)
	CALL $16(($5 + [32]))
	*([0] + [4]) = ($5 + [48])
}

int_64 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$1 = ($0 + ($1 << [4]))
	$2 = *(($1 + [80]))
	$4 = *(($1 + [72]))
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	$3 = *($0)
	*($5) = $3
	*($5 + [8]) = $3
	*($5 + [24]) = (int_64)0
	*($5 + [36]) = [0]
	$0 = CALL db_lowerbound_i64($3, $3, (int_64)4983122731492682032, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $18($5, $0)
	if ( *($0 + [68]) ){ goto $label$3 }
	$6 = [1]
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	$6 = [3]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$9 
	
.LABEL $label$10
	$0 = CALL $18($5, $0)
	if ( (*($0 + [68]) == 0) ){ goto $label$6 }
	$6 = [0]
	goto $label$4 
	
.LABEL $label$9
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)$2), [1184])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($4 - *($0 + [72]))) > (int_64)-4611686018427387904), [1232])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [1264])
	$6 = [1]
	goto $label$4 
	
.LABEL $label$8
	CALL eosio_assert([1], [752])
	$0 = CALL db_next_i64(*($0 + [156]), ($5 + [40]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$5 }
	$6 = [3]
	goto $label$4 
	
.LABEL $label$7
	CALL $16(($5 + [24]))
	*([0] + [4]) = ($5 + [48])
	return $4
	
.LABEL $label$6
	$6 = [1]
	goto $label$4 
	
.LABEL $label$5
	$6 = [2]
	goto $label$4 
	return $6
}

void .FUNC _ZN12codumpresale8deletetxEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$4 = *($0)
	*($5) = $4
	*($5 + [8]) = $4
	*($5 + [36]) = [0]
	$0 = [0]
	$2 = CALL db_find_i64($4, $4, (int_64)4983122731492682032, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $18($5, $2)
	CALL eosio_assert(((int_32)*($0 + [152]) == (int_32)$5), [96])
	
.LABEL $label$1
	$2 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($2, [1296])
	CALL eosio_assert(((int_32)*($0 + [68]) != (int_32)[0]), [1440])
	CALL eosio_assert($2, [1488])
	CALL eosio_assert($2, [752])
	$3 = CALL db_next_i64(*($0 + [156]), ($5 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $18($5, $3)
	
.LABEL $label$2
	CALL $34($5, $0)
	CALL eosio_assert($2, [1536])
	CALL $16(($5 + [24]))
	*([0] + [4]) = ($5 + [48])
}

void .FUNC _ZN12codumpresale8validateEyRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_ (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	*(($7 + [56])) = [0]
	*($7 + [40]) = (int_64)-1
	*($7 + [48]) = (int_64)0
	$4 = *($0)
	*($7 + [24]) = $4
	*($7 + [32]) = $4
	*($7 + [60]) = [0]
	$6 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)4983122731492682032, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $18(($7 + [24]), $5)
	CALL eosio_assert(((int_32)*($6 + [152]) == (int_32)($7 + [24])), [96])
	
.LABEL $label$1
	$5 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($5, [1296])
	$4 = *($0)
	*($7 + [12]) = $2
	*($7 + [8]) = $0
	*($7 + [16]) = $3
	CALL eosio_assert($5, [160])
	CALL $31(($7 + [24]), $6, $4, ($7 + [8]))
	CALL $16(($7 + [48]))
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [80])
	*([0] + [4]) = $19
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [208])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [256])
	$16 = *(($1 + [8]))
	*(($18 = $19) + [8]) = $16
	*($18 + [16]) = *(($1 + [64]))
	$4 = *($1)
	$5 = *($3)
	*(($18 + [72])) = [0]
	*($18 + [64]) = (int_64)0
	$14 = *($5)
	*($18 + [48]) = $14
	*($18 + [40]) = $14
	*($18 + [56]) = (int_64)-1
	$15 = CALL db_find_i64($14, $14, (int_64)-2063328927043551232, $16)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$2 }
	$15 = CALL $6(($18 + [40]), $15)
	CALL eosio_assert(((int_32)*($15 + [16]) == (int_32)($18 + [40])), [96])
	if ( (*($15 + [8]) == 0) ){ goto $label$2 }
	$12 = [1]
	if ( *($15 + [12]) ){ goto $label$1 }
	
.LABEL $label$2
	$12 = [0]
	
.LABEL $label$1
	$6 = *($18 + [64])
	if ( ($6 == 0) ){ goto $label$3 }
	$13 = ($18 + [68])
	$15 = *($13)
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$15 = ($15 + [-24])
	$7 = *($15)
	*($15) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	CALL $61($7)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$15) ){ goto $label$6 }
	$15 = *(($18 + [64]))
	goto $label$4 
	
.LABEL $label$5
	$15 = $6
	
.LABEL $label$4
	*($13) = $6
	CALL $61($15)
	
.LABEL $label$3
	CALL eosio_assert($12, [608])
	$13 = [0]
	$12 = [0]
	$15 = ($15 & [1])
	$15 = *($1 + [40])
	$8 = ($15 & [1])
	$15 = *($6)
	$9 = uint_32($15 >> [1])
	$6 = *($3 + [4])
	$10 = ( *($6 + [4]) ? $9 : $8 )
	if ( ((int_32)$10 != (int_32)( *(($1 + [44])) ? uint_32($15 >> [1]) : $15 )) ){ goto $label$8 }
	$15 = ( *(($1 + [48])) ? (($1 + [40]) + [1]) : $15 )
	$7 = ($6 + [1])
	if ( $8 ){ goto $label$11 }
	if ( ($10 == 0) ){ goto $label$10 }
	$6 = ([0] - $9)
	
.LOOP $label$12:
	if ( ((int_32)*($7) != (int_32)*($15)) ){ goto $label$9 }
	$12 = [1]
	$15 = ($15 + [1])
	$7 = ($7 + [1])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$12 }
	goto $label$8 
	
.LABEL $label$11
	if ( ($10 == 0) ){ goto $label$10 }
	$12 = (CALL memcmp(( *($6 + [8]) ? $7 : $8 ), $15, $10) == 0)
	goto $label$8 
	
.LABEL $label$10
	$12 = [1]
	goto $label$8 
	
.LABEL $label$9
	$12 = [0]
	
.LABEL $label$8
	CALL eosio_assert($12, [1344])
	$15 = *(($1 + [64]))
	if ( ((uint_32)*($5 + [8]) >= (uint_32)$15) ){ goto $label$13 }
	$13 = ((uint_32)*($5 + [12]) > (uint_32)$15)
	
.LABEL $label$13
	CALL eosio_assert($13, [1376])
	$15 = [0]
	*(($18 + [72])) = [0]
	*($18 + [56]) = (int_64)-1
	*($18 + [64]) = (int_64)0
	$14 = *($5 + [104])
	*($18 + [40]) = $14
	*($18 + [48]) = $14
	$7 = [0]
	$6 = CALL db_find_i64($14, $14, (int_64)6300092397548208128, *($1 + [16]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	$7 = CALL $25(($18 + [40]), $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)($18 + [40])), [96])
	
.LABEL $label$14
	$12 = (($18 + [8]) + [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [960])
	$7 = *($7 + [4])
	*($1 + [20]) = $7
	$16 = ((int_64)((int_64)*($1 + [24]) * (int_64)(CASTING uint_64)(uint_32 $7)) / (int_64)10000)
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [896])
	$14 = (int_64)332143021891
	
.LOOP $label$16:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$16 }
	
.LABEL $label$15
	CALL eosio_assert($7, [864])
	*(($1 + [80])) = (int_64)85028613604100
	*($1 + [72]) = $16
	*($1 + [68]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL $63(($1 + [52]), *($3 + [8]))
	*($1 + [88]) = (int_64)0
	$16 = *($1 + [72])
	if ( ((int_64)$16 < (int_64)1) ){ goto $label$19 }
	$15 = [0]
	$7 = ($1 + [88])
	$17 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_32)$15 > (uint_32)[1]) ){ goto $label$19 }
	
.LOOP $label$22:
	$11 = CALL $32($5, ($15 & [255]))
	$14 = (int_64)
	if ( ((int_64)$16 <= (int_64)$14($11 - $17))) ){ goto $label$21 }
	if ( ((int_64)$14 > (int_64)0) ){ goto $label$23 }
	$15 = ($15 + [1])
	if ( ($15 <= [2]) ){ goto $label$22 }
	goto $label$19 
	
.LABEL $label$23
	*($7) = ((int_64)((int_64)((int_64)*((($5 + $15) + [64])) * (int_64)$14) / (int_64)100) + (int_64)*($7))
	$15 = ($15 + [1])
	$17 = $11
	$16 = (int_64)
	if ( ((int_64)$16($16 - $14)) > (int_64)0) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	*(($7 = ($1 + [88]))) = ((int_64)((int_64)((int_64)*((($5 + $15) + [64])) * (int_64)$16) / (int_64)100) + (int_64)*($7))
	
.LABEL $label$19
	$6 = *($18 + [64])
	if ( ($6 == 0) ){ goto $label$24 }
	$5 = ($18 + [68])
	$15 = *($5)
	if ( ((int_32)$15 == (int_32)$6) ){ goto $label$26 }
	
.LOOP $label$27:
	$15 = ($15 + [-24])
	$7 = *($15)
	*($15) = [0]
	if ( ($7 == 0) ){ goto $label$28 }
	CALL $61($7)
	
.LABEL $label$28
	if ( ((int_32)$6 != (int_32)$15) ){ goto $label$27 }
	$15 = *(($18 + [64]))
	goto $label$25 
	
.LABEL $label$26
	$15 = $6
	
.LABEL $label$25
	*($5) = $6
	CALL $61($15)
	
.LABEL $label$24
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [320])
	*($18 + [40]) = [0]
	CALL $26(($18 + [40]), $1)
	$7 = *($18 + [40])
	if ( ($7 <= [513]) ){ goto $label$30 }
	$15 = CALL malloc($7)
	goto $label$29 
	
.LABEL $label$30
	$15 = ($19 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $15
	
.LABEL $label$29
	*($18 + [44]) = $15
	*($18 + [40]) = $15
	*($18 + [48]) = ($15 + $7)
	CALL $27(($18 + [40]), $1)
	CALL db_update_i64(*($1 + [156]), $2, $15, $7)
	if ( ($7 <= [513]) ){ goto $label$31 }
	CALL free($15)
	
.LABEL $label$31
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$32 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$32
	*($18 + [32]) = *(($1 + [8]))
	if ( (CALL memcmp(($18 + [8]), ($18 + [32]), [8]) == 0) ){ goto $label$33 }
	$7 = ($1 + [160])
	$15 = *($7)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$34 }
	$15 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4983122731492682032, ($18 + [24]), $4)
	*($7) = $15
	
.LABEL $label$34
	CALL db_idx64_update($15, $2, ($18 + [32]))
	
.LABEL $label$33
	*($18 + [32]) = *(($1 + [64]))
	if ( (CALL memcmp($12, ($18 + [32]), [8]) == 0) ){ goto $label$35 }
	$7 = ($1 + [164])
	$15 = *($7)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$36 }
	$15 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4983122731492682033, ($18 + [24]), $4)
	*($7) = $15
	
.LABEL $label$36
	CALL db_idx64_update($15, $2, ($18 + [32]))
	
.LABEL $label$35
	*([0] + [4]) = ($18 + [80])
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10822]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10824])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10822]) = [1]
	$7 = ($7 << [16])
	*([0] + [10824]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10824])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10824]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10822]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10822]) = [1]
	$3 = ($3 << [16])
	*([0] + [10824]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10824])
	
.LABEL $label$8
	*([0] + [10824]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10720])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10528]
	$1 = (((int_32)$2 * (int_32)[12]) + [10528])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $61 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $64($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $60($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $61($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($2 = $3) + [44]) = $0
	*($2 + [32]) = *($1)
	*($2 + [36]) = *($1 + [4])
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [16])) = (int_64)0
	*(($2 + [24])) = (int_64)0
	*($2) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [56]) = ($1 + $0)
	*($2 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [416])
	CALL memcpy($2, $1, [8])
	*($2 + [52]) = ($1 + [8])
	CALL $20(($2 + [48]), ($2 + [8]))
	CALL $20(($2 + [48]), ($2 + [20]))
	if ( ($0 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	*($2 + [52]) = ($2 + [32])
	*($2 + [48]) = ($2 + [44])
	CALL $54(($2 + [48]), $2)
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL $61(*(($2 + [28])))
	
.LABEL $label$6
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $61(*(($2 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [64])
	return [1]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $22($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [80])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [80])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $40(CALL $39($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $69($4, ($1 + [8]))
	$0 = *($0 + [4])
	$3 = *($0 + [4])
	$1 = (*(*($0)) + int_32($3 >> [1]))
	$0 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	CALL $69(($4 + [16]), $4)
	CALL void $1((int_32 $2), (int_64 ($4 + [16])), (int_32 $0))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $61(*($4 + [24]))
	
.LABEL $label$2
	if ( ((*($4) & [1]) == 0) ){ goto $label$3 }
	CALL $61(*($4 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($1)
	CALL $69(($4 + [16]), ($1 + [8]))
	CALL $69($4, ($1 + [20]))
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL void $0((int_32 $2), (int_64 ($4 + [16])), (int_32 $4), (int_32 $1))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	CALL $61(*($4 + [8]))
	
.LABEL $label$2
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $61(*($4 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [416])
	CALL memcpy(($0 + [8]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [416])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $20(*($1), ($0 + [32]))
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $57([2336], $0)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $58($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10736])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}