(data (i32.const 8192) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 8448) "EOS\00stoul\00")
(data (i32.const 17176) "five_little\00")
(data (i32.const 17188) "bomb\00")
(data (i32.const 17193) "five_jqk\00")
(data (i32.const 17202) "bull\00")
(data (i32.const 17207) "bull_9\00")
(data (i32.const 17214) "bull_8\00")
(data (i32.const 17221) "bull_7\00")
(data (i32.const 17228) "bull_6\00")
(data (i32.const 17235) "bull_5\00")
(data (i32.const 17242) "bull_4\00")
(data (i32.const 17249) "bull_3\00")
(data (i32.const 17256) "bull_2\00")
(data (i32.const 17263) "bull_1\00")
(data (i32.const 17270) "none\00")
(data (i32.const 17275) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 17339) "transfer\00")
(data (i32.const 17348) "eosio.token\00")
(data (i32.const 17360) "eosmax1token\00: no conversion\00")
(data (i32.const 17389) "createroom\00")
(data (i32.const 17400) "our game is being maintained. please try again later.\00")
(data (i32.const 17454) "referral can not be self\00")
(data (i32.const 17479) "dealer cannot bet\00")
(data (i32.const 17497) "the game end\00")
(data (i32.const 17510) "game status not correct\00")
(data (i32.const 17534) "bullround not found\00")
(data (i32.const 17554) "impossable!\00")
(data (i32.const 17566) "MAX token for player\00")
(data (i32.const 17587) "eosmaxiocost\00")
(data (i32.const 17600) "eosmaxiodivi\00")
(data (i32.const 17613) "eosmaxioback\00")
(data (i32.const 17627) "symbol must be 1 or 2\00")
(data (i32.const 17649) "room is not exist!\00")
(data (i32.const 17668) "board game is not over\00")
(data (i32.const 17691) "game not found\00")
(data (i32.const 17706) "game status error\00")
(data (i32.const 17724) ":0:\00")
(data (i32.const 17728) ":\00")
(data (i32.const 17730) ":1:\00")
(data (i32.const 17734) ":2:\00")
(data (i32.const 17738) ":3:\00")
(data (i32.const 17742) ":4:\00")
(data (i32.const 17746) "deposit|\00")
(data (i32.const 17755) "quantity invalid\00")
(data (i32.const 17772) "quantity must be positive\00")
(data (i32.const 17798) "amount invalid\00")
(data (i32.const 17813) "amount must be positive\00")
(data (i32.const 17837) "deposit not enough\00")
(data (i32.const 17856) "withdraw\00")
(data (i32.const 17865) "no user deposit\00")
(data (i32.const 17881) "user applyed\00")
(data (i32.const 17894) "multi-banker mode unsupported!\00")
(data (i32.const 17925) "round not found\00")
(data (i32.const 17941) "not get round time\00")
(data (i32.const 17960) "applybank first\00")
(data (i32.const 17976) "_\00")
(data (i32.const 17978) "passwd hash length wrong!\00")
(data (i32.const 18004) "passwd length wrong!\00")
(data (i32.const 18025) "bulletin can not large than 128 Byte!\00")
(data (i32.const 18063) "dealer type must be 1 or 2!\00")
(data (i32.const 18091) "fee must be large than 1000 MAX\00")
(data (i32.const 18123) "Room quantity reaches the upper limit.\00")
(data (i32.const 18162) "You can only own one room!\00")
(data (i32.const 18189) "Your balance must be large than 100!\00")
(data (i32.const 18226) "eosmaxioroom\00")
(data (i32.const 18239) "room fee.\00")
(data (i32.const 18249) "password wrong!\00")
(data (i32.const 18265) "dealer_type wrong!\00")
(data (i32.const 18284) "symbol wrong!\00")
(data (i32.const 18298) "Only creator can destroy the room!\00")
(data (i32.const 18333) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18384) "error reading iterator\00")
(data (i32.const 18407) "read\00")
(data (i32.const 18412) "cannot create objects in table of another contract\00")
(data (i32.const 18463) "EOS5pKRrJxtdqF6MaNP4i4VHY5HATVe2tNQRA7KzQUChyovHaqsf1\00")
(data (i32.const 18517) "write\00")
(data (i32.const 18523) "bet stake not correct\00")
(data (i32.const 18545) "game room can not find!\00")
(data (i32.const 18569) "you did not enter the room!\00")
(data (i32.const 18597) "You can not do it in two games!\00")
(data (i32.const 18629) "cannot increment end iterator\00")
(data (i32.const 18659) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18708) "invalid symbol name\00")
(data (i32.const 18728) "quantity must be EOS symbol or MAX symbol\00")
(data (i32.const 18770) "total bet over dealer balance\00")
(data (i32.const 18800) "bet amount is too small\00")
(data (i32.const 18824) "user deposit not enough\00")
(data (i32.const 18848) "eosmaxiodraw\00")
(data (i32.const 18861) "onaddpoint\00")
(data (i32.const 18872) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18924) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 18978) "cannot decrement iterator at beginning of table\00")
(data (i32.const 19026) "cannot pass end iterator to modify\00")
(data (i32.const 19061) "object passed to modify is not in multi_index\00")
(data (i32.const 19107) "cannot modify objects in table of another contract\00")
(data (i32.const 19158) "updater cannot change primary key when modifying an object\00")
(data (i32.const 19217) "get\00")
(data (i32.const 19221) "cannot pass end iterator to erase\00")
(data (i32.const 19255) "object passed to erase is not in multi_index\00")
(data (i32.const 19300) "cannot erase objects in table of another contract\00")
(data (i32.const 19350) "attempt to remove object that was not in multi_index\00")
(data (i32.const 19408) "\06\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00")
(data (i32.const 19428) "|\00")
(data (i32.const 19430) "cannot find detail\00")
(data (i32.const 19449) "attempt to add asset with different symbol\00")
(data (i32.const 19492) "addition underflow\00")
(data (i32.const 19511) "addition overflow\00")
(data (i32.const 19529) "attempt to subtract asset with different symbol\00")
(data (i32.const 19577) "subtraction underflow\00")
(data (i32.const 19599) "subtraction overflow\00")
(data (i32.const 19620) "private room symbol error!\00")
(data (i32.const 19647) "result not found\00")
(data (i32.const 19664) "Cost,Game:eosmaxiobull gameid:\00")
(data (i32.const 19695) "Dividend,Game:eosmaxiobull gameid:\00")
(data (i32.const 19730) "Buyback,Game:eosmaxiobull gameid:\00")
(data (i32.const 19764) "eosmaxioteam\00")
(data (i32.const 19777) "banker\00")
(data (i32.const 19784) ".\00")
(data (i32.const 19786) " \00")
(data (i32.const 19788) "in the game,cannot do this\00")
(data (i32.const 19815) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 19874) "stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 19965) "stol\00")
(data (i32.const 19970) ": out of range\00")
(data (i32.const 20000) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 20257) "\00\01\02\04\07\03\06\05\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "eosio_exit" (func $fimport$3 (param i32)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "read_action_data" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$7 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$10 (result i64)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "require_recipient" (func $fimport$12 (param i64)))
(import "env" "assert_sha256" (func $fimport$13 (param i32 i32 i32)))
(import "env" "assert_recover_key" (func $fimport$14 (param i32 i32 i32 i32 i32)))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$16 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$17 (param i32 i64 i32)))
(import "env" "is_account" (func $fimport$18 (param i64) (result i32)))
(import "env" "cancel_deferred" (func $fimport$19 (param i32) (result i32)))
(import "env" "send_inline" (func $fimport$20 (param i32 i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$22 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$24 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$25 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$26))
(import "env" "db_idx64_store" (func $fimport$27 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$29 (param i64 i64 i64) (result i32)))
(import "env" "db_remove_i64" (func $fimport$30 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$31 (param i32)))
(import "env" "__unordtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$42 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$43 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$46 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$48 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$49 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$50 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $11))
(export "_Znwj" (func $317))
(export "_ZdlPv" (func $319))
(export "_Znaj" (func $318))
(export "_ZdaPv" (func $320))
(table $0 27 27 anyfunc)
(elem (i32.const 1) $14 $16 $17 $19 $21 $23 $25 $27 $28 $29 $31 $33 $35 $36 $38 $39 $41 $42 $44 $45 $47 $48 $50 $52 $8 $10)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20266))
(global $global$2 i32 (i32.const 20266))


void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $288(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [8]))
	*($1 + [248]) = *(*($3 + [4]))
	*($1 + [16]) = (int_64)1
	$4 = *($0)
	$5 = *(*($3 + [12]) + [4])
	*(($1 + [56])) = *(($5 + [80]))
	*($1 + [48]) = *($5 + [72])
	*($1 + [24]) = *(*($3 + [16]))
	$5 = *($3 + [20])
	*(($1 + [72])) = *(($5 + [8]))
	*($1 + [64]) = *($5)
	$5 = *($3 + [20])
	*($1 + [80]) = *($5)
	*(($1 + [88])) = *(($5 + [8]))
	$5 = *($3 + [20])
	*($1 + [96]) = *($5)
	*(($1 + [104])) = *(($5 + [8]))
	$5 = *($3 + [20])
	*($1 + [112]) = *($5)
	*(($1 + [120])) = *(($5 + [8]))
	$5 = *($3 + [20])
	*($1 + [128]) = *($5)
	*(($1 + [136])) = *(($5 + [8]))
	$6 = *(*($3 + [24]))
	*($1 + [144]) = $6
	*($1 + [152]) = $6
	*($1 + [160]) = $6
	*($1 + [168]) = $6
	*($1 + [176]) = $6
	$3 = *(*($3 + [12]) + [4])
	*($1 + [264]) = *($3 + [104])
	*($1 + [256]) = *($3)
	*(($3 = $2) + [8]) = [0]
	CALL $305(($3 + [8]), $1)
	$5 = *($3 + [8])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $358($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL $306(($3 + [8]), $1)
	$6 = *($1)
	*($1 + [272]) = CALL db_store_i64(*($4 + [8]), (int_64)4513475553721843712, *(*($0 + [8])), $6, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL $362($2)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$6 = *(($4 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($3 + [24]) = *(($1 + [248]))
	*($1 + [276]) = CALL db_idx64_store($6, (int_64)4513475553721843712, $7, $8, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $126 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$3 = *($0 + [4])
	$4 = *($3 + [288])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4513473976872484864, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [288]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [280]) == (int_32)$7), [18333])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$4 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)4513473976872484864, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $187($7, $4)
	CALL eosio_assert(((int_32)*($2 + [280]) == (int_32)$7), [18333])
	
.LABEL $label$3
	*($2 + [288]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [280]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $151($4)
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $151($6)
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [284])))
	$6 = *($1 + [288])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513473976872484864, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $188 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [284]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18978])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4513473976872484864)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18924])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18924])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $187(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $358($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [18407])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 & [-8]) != (int_32)[8]), [18407])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($3 + [52]) = ($1 + [16])
	CALL $74(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $362($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $173(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [8]) = $1
	CALL require_auth($1)
	$5 = ($0 + [640])
	$7 = *(($0 + [668]))
	$6 = *(($0 + [664]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$2) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)$5), [18333])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [648])), (int_64)4513481842761924608, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $65($5, $8)
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)$5), [18333])
	
.LABEL $label$1
	$0 = [0]
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [17649])
	$7 = ($8 & [1])
	$8 = *($3)
	$6 = ($8 & [1])
	$8 = *($9 + [40])
	$11 = uint_32($8 >> [1])
	$12 = ( *(($9 + [44])) ? $11 : $6 )
	if ( ((int_32)$12 != (int_32)( *($3 + [4]) ? uint_32($8 >> [1]) : $7 )) ){ goto $label$5 }
	$8 = (($9 + [40]) + [1])
	$7 = ( *($3 + [8]) ? ($3 + [1]) : $7 )
	if ( $6 ){ goto $label$8 }
	if ( ($12 == 0) ){ goto $label$7 }
	$6 = ([0] - $11)
	
.LOOP $label$9:
	if ( ((int_32)*($8) != (int_32)*($7)) ){ goto $label$6 }
	$0 = [1]
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	$6 = ($6 + [1])
	if ( $6 ){ goto $label$9 }
	goto $label$5 
	
.LABEL $label$8
	if ( ($12 == 0) ){ goto $label$7 }
	$0 = (CALL $354(( *(($9 + [48])) ? $8 : $6 ), $7, $12) == 0)
	goto $label$5 
	
.LABEL $label$7
	$0 = [1]
	goto $label$5 
	
.LABEL $label$6
	$0 = [0]
	
.LABEL $label$5
	CALL eosio_assert($0, [18249])
	*($4) = ($4 + [8])
	CALL eosio_assert($10, [19026])
	CALL $174($5, $9, $1, $4)
	$global$0 = ($4 + [16])
}

int_32 .FUNC $264 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	*($0 + [56]) = (int_64)0
	$1 = [0]
	*($0 + [48]) = [0]
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [80]))) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$10 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	
.LABEL $label$6
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [96]))) = (int_64)1398362884
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$3 = $4
	$6 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$3 = $4
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$16 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert($6, [18708])
	return $0
	
.LABEL $label$12
	CALL eosio_assert([0], [18708])
	return $0
	
.LABEL $label$11
	CALL eosio_assert([0], [18708])
	return $0
}

void .FUNC $265 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = *($0)
	$3 = ($2 + [680])
	$5 = *(($2 + [708]))
	$4 = *(($2 + [704]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)2) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [18333])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($2 + [688])), (int_64)-6219918586631159808, (int_64)2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $57($3, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [18333])
	
.LABEL $label$1
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)10
	*($1 + [40]) = (int_64)0
	*($1) = *($7 + [8])
	*($1 + [16]) = *(*($0 + [4]))
	$8 = *(*($0 + [8]))
	CALL eosio_assert([1], [18659])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$8 }
	$9 = $10
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$9 = $10
	
.LOOP $label$9:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$6 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$9 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$5 = [0]
	
.LABEL $label$5
	CALL eosio_assert($5, [18708])
	*(($1 + [64])) = $8
	*($1 + [56]) = (int_64)0
	$8 = *(*(($0 + [8])))
	CALL eosio_assert([1], [18659])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$9 = $10
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$9 = $10
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$14 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$5 = [0]
	
.LABEL $label$10
	CALL eosio_assert($5, [18708])
	*(($1 + [80])) = $8
	*($1 + [72]) = (int_64)0
	*($1 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [40])
	$8 = *(*(($0 + [8])))
	CALL eosio_assert([1], [18659])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$9 = $10
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$9 = $10
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$19 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$5 = [0]
	
.LABEL $label$15
	CALL eosio_assert($5, [18708])
	*(($1 + [96])) = $8
	*($1 + [88]) = (int_64)0
	*($1 + [8]) = *(*($0 + [12]))
}

int_32 .FUNC $266 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $267 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $358($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [18407])
	CALL memcpy($3, $6, [4])
	CALL eosio_assert(((uint_32)($1 + [-4]) > (uint_32)[7]), [18407])
	$2 = ($3 + [8])
	CALL memcpy($2, ($6 + [4]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $362($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($2)
	$6 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($3 + [112]) = $2
	*($3 + [120]) = $1
	CALL require_auth(*($0))
	CALL eosio_assert((($1 + [-1]) <= [2]), [17627])
	if ( ((int_64)$2 == (int_64)9999999999) ){ goto $label$1 }
	$4 = ($0 + [640])
	$6 = *(($0 + [668]))
	$5 = *(($0 + [664]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$4 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$4), [18333])
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	$1 = CALL db_find_i64(*($4), *(($0 + [648])), (int_64)4513481842761924608, $2)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $65($4, $1)
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$4), [18333])
	
.LABEL $label$2
	$1 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($1, [17649])
	if ( ((int_64)*($7 + [8]) != (int_64)1) ){ goto $label$1 }
	$2 = *($0)
	CALL eosio_assert($1, [19026])
	CALL $112($4, $7, $2)
	
.LABEL $label$1
	$5 = ($0 + [240])
	*($3 + [104]) = $5
	CALL $113(($3 + [96]), ($3 + [104]), ($3 + [112]))
	*($3) = (int_64)0
	CALL $113(($3 + [48]), ($3 + [104]), $3)
	$1 = *($3 + [52])
	if ( ($1 == 0) ){ goto $label$6 }
	
.LOOP $label$7:
	if ( ((int_64)*($1 + [248]) != (int_64)*($3 + [112])) ){ goto $label$8 }
	if ( ((int_32)*($1 + [8]) != (int_32)*($3 + [120])) ){ goto $label$8 }
	CALL eosio_assert(((int_64)*($1 + [16]) == (int_64)5), [17668])
	$2 = *($3 + [48])
	*($3) = $2
	$1 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$1) != (int_32)[0]), [19221])
	CALL $114($3)
	CALL $115(*($3 + [104]), $1)
	$2 = *($3)
	*($3 + [48]) = $2
	$1 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	if ( $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $114(($3 + [48]))
	$1 = *($3 + [52])
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_64)(*(($0 + [152])) == 0) == 0) ){ goto $label$9 }
	*($3 + [88]) = ($0 + [400])
	CALL $116(($3 + [80]), ($3 + [88]), ($3 + [112]))
	*($3 + [72]) = ( (int_64)1397703940 ? (int_64)1480674564 : ((int_32)*($3 + [120]) == (int_32)[1]) )
	*($3 + [68]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$1 = *($3 + [84])
	if ( ($1 == 0) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = *($1 + [8])
	if ( ((int_64)$2 != (int_64)*($3 + [112])) ){ goto $label$12 }
	$6 = *($1 + [16])
	if ( ((int_64)$2 != (int_64)9999999999) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)*($3 + [120])) ){ goto $label$10 }
	CALL $117(($3 + [80]))
	$1 = *($3 + [84])
	if ( $1 ){ goto $label$13 }
	
.LABEL $label$12
	CALL $118($0, ($3 + [112]), ($3 + [72]))
	goto $label$9 
	
.LABEL $label$11
	*($3 + [120]) = $6
	
.LABEL $label$10
	if ( ((int_64)*($1 + [24]) != (int_64)1) ){ goto $label$9 }
	*($3 + [48]) = (int_64)0
	$2 = *($3 + [72])
	*($3 + [56]) = $2
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$2 = $8
	$6 = [1]
	$7 = $1
	$1 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$2 = $8
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$6 = ((int_32)$1 < (int_32)[6])
	$7 = ($1 + [1])
	$1 = $7
	if ( $6 ){ goto $label$18 }
	$6 = [1]
	$1 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	
.LABEL $label$14
	CALL eosio_assert($6, [18708])
	*($3 + [40]) = (*($3 + [68]) + [40])
	$2 = ((int_64)*($1) + (int_64)1)
	*(($1 = ($0 + [96]))) = $2
	*($3 + [32]) = $2
	CALL $87($0)
	$2 = *($0)
	*($3 + [4]) = ($3 + [112])
	*($3) = ($3 + [32])
	*($3 + [8]) = ($3 + [120])
	*($3 + [12]) = ($3 + [80])
	*($3 + [16]) = ($3 + [40])
	*($3 + [20]) = ($3 + [48])
	*($3 + [24]) = ($3 + [68])
	*($3 + [152]) = $2
	CALL eosio_assert(((int_64)*(($0 + [240])) == (int_64)CALL eosio_assert0()), [18412])
	*($3 + [128]) = $5
	*($3 + [132]) = $3
	*($3 + [136]) = ($3 + [152])
	$1 = CALL _Znwj([280])
	CALL $119($1)
	*($1 + [268]) = $5
	CALL $120(($3 + [128]), $1)
	*($3 + [144]) = $1
	$2 = *($1)
	*($3 + [128]) = $2
	$7 = *($1 + [272])
	*($3 + [124]) = $7
	$5 = ($0 + [268])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [272]))) ){ goto $label$20 }
	*($6 + [8]) = $2
	*($6 + [16]) = $7
	*($3 + [144]) = [0]
	*($6) = $1
	*($5) = ($6 + [24])
	$1 = *($3 + [144])
	*($3 + [144]) = [0]
	if ( $1 ){ goto $label$19 }
	goto $label$9 
	
.LABEL $label$20
	CALL $121(($0 + [264]), ($3 + [144]), ($3 + [128]), ($3 + [124]))
	$1 = *($3 + [144])
	*($3 + [144]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	
.LABEL $label$19
	if ( (*($1 + [232]) & [1]) ){ goto $label$29 }
	if ( (*($1 + [220]) & [1]) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	CALL _ZdlPv(*(($1 + [240])))
	if ( ((*($1 + [220]) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*(($1 + [228])))
	$6 = [1]
	if ( ((*($1 + [208]) & [1]) == 0) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$6 = [1]
	if ( (*($1 + [208]) & [1]) ){ goto $label$25 }
	
.LABEL $label$26
	if ( (*($1 + [196]) & $6) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL _ZdlPv(*(($1 + [216])))
	if ( ((*($1 + [196]) & $6) == 0) ){ goto $label$23 }
	
.LABEL $label$24
	CALL _ZdlPv(*(($1 + [204])))
	if ( (*($1 + [184]) & [1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	if ( ((*($1 + [184]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($1 + [192])))
	
.LABEL $label$21
	CALL _ZdlPv($1)
	$global$0 = ($3 + [160])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [160])
}

void .FUNC $41 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [32]) = $3
	*($4 + [40]) = $1
	CALL require_auth($1)
	$5 = ( [1] ? [2] : ((int_64)*($2 + [8]) == (int_64)1397703940) )
	*($4 + [28]) = $5
	CALL eosio_assert((($5 + [-1]) <= [2]), [17627])
	CALL $78($0, $1, $3)
	if ( ((int_64)$3 == (int_64)9999999999) ){ goto $label$1 }
	$6 = ($0 + [640])
	$8 = *(($0 + [668]))
	$7 = *(($0 + [664]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($8 + [-24])
	$9 = *($5)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$4 }
	$8 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)$6), [18333])
	if ( ((int_32)*($9 + [20]) != (int_32)[2]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$5 = CALL $65($6, CALL $fimport$4(*($6), *(($0 + [648])), (int_64)4513481842761924608, $3))
	CALL eosio_assert(((int_32)*($5 + [88]) == (int_32)$6), [18333])
	if ( ((int_32)*($5 + [20]) != (int_32)[2]) ){ goto $label$1 }
	
.LABEL $label$2
	*($4 + [136]) = ($0 + [200])
	CALL $105(($4 + [48]), ($4 + [136]), ($4 + [32]))
	$5 = *($4 + [52])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	if ( ((int_64)*($5 + [40]) != (int_64)*($4 + [32])) ){ goto $label$1 }
	if ( ((int_64)*($5 + [8]) != (int_64)*($4 + [40])) ){ goto $label$7 }
	CALL eosio_assert([0], [17881])
	$5 = *($4 + [52])
	if ( $5 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	CALL eosio_assert([0], [17894])
	$5 = *($4 + [52])
	if ( $5 ){ goto $label$6 }
	
.LABEL $label$1
	$6 = ($0 + [200])
	*($4 + [24]) = $6
	CALL $106(($4 + [16]), ($4 + [24]), ($4 + [40]))
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$10 }
	
.LOOP $label$11:
	if ( ((int_64)*($5 + [8]) != (int_64)*($4 + [40])) ){ goto $label$10 }
	if ( ((int_32)*($5 + [32]) != (int_32)*($4 + [28])) ){ goto $label$12 }
	if ( ((int_64)*($5 + [40]) != (int_64)*($4 + [32])) ){ goto $label$12 }
	if ( ((int_64)*($5 + [24]) == (int_64)2) ){ goto $label$9 }
	CALL eosio_assert([0], [17881])
	
.LABEL $label$12
	CALL $107(($4 + [16]))
	$5 = *($4 + [20])
	if ( $5 ){ goto $label$11 }
	
.LABEL $label$10
	CALL $63(($4 + [152]), $0, ($2 + [8]))
	$3 = *($2 + [8])
	*($4 + [48]) = *($4 + [40])
	$10 = ($0 + [160])
	*($4 + [136]) = $10
	CALL $68(($4 + [8]), ($4 + [136]), ($4 + [48]))
	$5 = *($4 + [12])
	if ( ($5 == 0) ){ goto $label$14 }
	
.LOOP $label$15:
	if ( ((int_64)*($5 + [8]) != (int_64)*($4 + [48])) ){ goto $label$14 }
	if ( ((int_64)*(($5 + [24])) == (int_64)$3) ){ goto $label$13 }
	CALL $69(($4 + [8]))
	$5 = *($4 + [12])
	if ( $5 ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert([0], [17865])
	$5 = *($4 + [12])
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($5 + [16]) >= (int_64)*($2)), [17837])
	CALL eosio_assert(((int_64)*($2) >= (int_64)*(*($4 + [156]) + [56])), [17837])
	$3 = *($0)
	*($4 + [48]) = $0
	*($4 + [64]) = $2
	*($4 + [52]) = ($4 + [40])
	*($4 + [56]) = ($4 + [28])
	*($4 + [60]) = ($4 + [32])
	*($4 + [120]) = $3
	CALL eosio_assert(((int_64)*(($0 + [200])) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [136]) = $6
	*($4 + [140]) = ($4 + [48])
	*($4 + [144]) = ($4 + [120])
	*(($9 = CALL _Znwj([88])) + [48]) = (int_64)0
	*($9 + [36]) = [0]
	*($9 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$3 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$1 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$3 = $1
	$8 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$3 = $1
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$5 < (int_32)[6])
	$7 = ($5 + [1])
	$5 = $7
	if ( $8 ){ goto $label$20 }
	$8 = [1]
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$8 = [0]
	
.LABEL $label$16
	CALL eosio_assert($8, [18708])
	*($9 + [72]) = $6
	CALL $108(($4 + [136]), $9)
	*($4 + [160]) = $9
	$3 = *($9)
	*($4 + [136]) = $3
	$8 = *($9 + [76])
	*($4 + [172]) = $8
	$7 = ($0 + [228])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [232]))) ){ goto $label$23 }
	*($5 + [8]) = $3
	*($5 + [16]) = $8
	*($4 + [160]) = [0]
	*($5) = $9
	*($7) = ($5 + [24])
	$5 = *($4 + [160])
	$8 = [0]
	*($4 + [160]) = [0]
	if ( $5 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL $109(($0 + [224]), ($4 + [160]), ($4 + [136]), ($4 + [172]))
	$5 = *($4 + [160])
	$8 = [0]
	*($4 + [160]) = [0]
	if ( ($5 == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv($5)
	
.LABEL $label$21
	$1 = *($0)
	$5 = *($4 + [12])
	CALL eosio_assert(((int_32)$5 != (int_32)$8), [19026])
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$10), [19061])
	CALL eosio_assert(((int_64)*(($0 + [160])) == (int_64)CALL eosio_assert0()), [19107])
	$8 = ($5 + [8])
	*($4 + [160]) = *($8)
	$3 = *($5)
	$7 = ($5 + [24])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*($7)), [19529])
	$11 = (int_64)
	*($5 + [16]) = $11(*($5 + [16]) - *($2)))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [19577])
	CALL eosio_assert(((int_64)*($5 + [16]) < (int_64)4611686018427387904), [19599])
	CALL eosio_assert(((int_64)$3 == (int_64)*($5)), [19158])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 + [48]), $5, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy((($4 + [48]) | [8]), $8, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy((($4 + [48]) + [16]), ($5 + [16]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy((($4 + [48]) + [24]), $7, [8])
	CALL db_update_i64(*($5 + [36]), $1, ($4 + [48]), [32])
	$7 = ($0 + [176])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$24 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$24
	*($4 + [136]) = *($8)
	if ( (CALL $354(($4 + [160]), ($4 + [136]), [8]) == 0) ){ goto $label$8 }
	$8 = ($5 + [40])
	$5 = *($8)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$25 }
	$5 = CALL db_idx64_find_primary(*(($0 + [160])), *(($0 + [168])), (int_64)-3020379698556063232, ($4 + [120]), $3)
	*($8) = $5
	
.LABEL $label$25
	CALL db_idx64_update($5, $1, ($4 + [136]))
	goto $label$8 
	
.LABEL $label$9
	$1 = *($0)
	CALL eosio_assert([1], [19026])
	$8 = *($4 + [24])
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$8), [19061])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL eosio_assert0()), [19107])
	*($5 + [24]) = (int_64)1
	$7 = ($5 + [40])
	*($4 + [136]) = *($7)
	*($4 + [144]) = *(($5 + [8]))
	$3 = *($5)
	CALL eosio_assert([1], [19158])
	*($4 + [128]) = (($4 + [48]) + [72])
	*($4 + [124]) = ($4 + [48])
	*($4 + [120]) = ($4 + [48])
	CALL $110(($4 + [120]), $5)
	CALL db_update_i64(*($5 + [76]), $1, ($4 + [48]), [72])
	if ( (uint_64)($3 <= *($8 + [16])) ){ goto $label$26 }
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$26
	$0 = (($4 + [136]) + [8])
	*($4 + [160]) = *($7)
	if ( (CALL $354(($4 + [136]), ($4 + [160]), [8]) == 0) ){ goto $label$27 }
	$2 = ($5 + [80])
	$7 = *($2)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$28 }
	$7 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)5371973418988895232, ($4 + [152]), $3)
	*($2) = $7
	
.LABEL $label$28
	CALL db_idx64_update($7, $1, ($4 + [160]))
	
.LABEL $label$27
	*($4 + [160]) = *(($5 + [8]))
	if ( (CALL $354($0, ($4 + [160]), [8]) == 0) ){ goto $label$8 }
	$7 = ($5 + [84])
	$5 = *($7)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$29 }
	$5 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)5371973418988895233, ($4 + [152]), $3)
	*($7) = $5
	
.LABEL $label$29
	CALL db_idx64_update($5, $1, ($4 + [160]))
	$global$0 = ($4 + [176])
	return 
	
.LABEL $label$8
	$global$0 = ($4 + [176])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $358($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [18407])
	CALL memcpy(($3 + [8]), $6, [1])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $362($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 ($2 & [255])), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $47 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [352])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [240])
	$5 = *(($0 + [268]))
	$4 = *(($0 + [264]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [268]) == (int_32)$3), [18333])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [248])), (int_64)4513475553721843712, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $77($3, $6)
	CALL eosio_assert(((int_32)*($7 + [268]) == (int_32)$3), [18333])
	
.LABEL $label$1
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [17691])
	$1 = CALL current_time()
	if ( ((uint_32)*($7 + [24]) > (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))) ){ goto $label$5 }
	CALL eosio_assert(((int_64)*($7 + [16]) == (int_64)1), [17706])
	*($2 + [288]) = (int_64)0
	*($2 + [296]) = [0]
	$1 = *($7)
	
.LOOP $label$6:
	$8 = ((uint_64)$1 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$8 * (int_64)10))
	CALL $3(($2 + [88]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($2 + [288]))
	if ( (*($2 + [288]) & [1]) ){ goto $label$8 }
	*($2 + [288]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($2 + [288]) + [8]))) = [0]
	*($2 + [292]) = [0]
	
.LABEL $label$7
	CALL $326(($2 + [288]), [0])
	*((($2 + [288]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [288]) = *($2 + [88])
	$6 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $8
	if ( $6 ){ goto $label$6 }
	$6 = CALL $328(($2 + [288]), [17724])
	$4 = ($6 + [8])
	*((($2 + [304]) + [8])) = *($4)
	*($2 + [304]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	*($2 + [272]) = (int_64)0
	*($2 + [280]) = [0]
	$4 = (($2 + [272]) | [1])
	$1 = *($7 + [144])
	
.LOOP $label$9:
	$8 = ((uint_64)$1 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$8 * (int_64)10))
	CALL $3(($2 + [88]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($2 + [272]))
	if ( (*($2 + [272]) & [1]) ){ goto $label$11 }
	*($2 + [272]) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*((($2 + [272]) + [8]))) = [0]
	*($2 + [276]) = [0]
	
.LABEL $label$10
	CALL $326(($2 + [272]), [0])
	*((($2 + [272]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [272]) = *($2 + [88])
	$6 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $8
	if ( $6 ){ goto $label$9 }
	$6 = *($2 + [272])
	$9 = ($6 & [1])
	$6 = CALL $330(($2 + [304]), ( *((($2 + [272]) + [8])) ? $4 : $9 ), ( *($2 + [276]) ? uint_32($6 >> [1]) : $9 ))
	$4 = ($6 + [8])
	*((($2 + [320]) + [8])) = *($4)
	*($2 + [320]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$6 = CALL $328(($2 + [320]), [17728])
	$4 = ($6 + [8])
	*((($2 + [88]) + [8])) = *($4)
	*($2 + [88]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$8 = *(($7 + [72]))
	*((($2 + [240]) + [8])) = $8
	$1 = *($7 + [64])
	*((($2 + [72]) + [8])) = $8
	*($2 + [72]) = $1
	*($2 + [240]) = $1
	CALL $122(($2 + [256]), $0, ($2 + [72]))
	$6 = *($2 + [256])
	$4 = ($6 & [1])
	$6 = CALL $330(($2 + [88]), ( *($2 + [264]) ? (($2 + [256]) | [1]) : $4 ), ( *($2 + [260]) ? uint_32($6 >> [1]) : $4 ))
	$4 = ($6 + [8])
	*((($2 + [336]) + [8])) = *($4)
	*($2 + [336]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	if ( (*($2 + [256]) & [1]) ){ goto $label$22 }
	if ( (*($2 + [88]) & [1]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL _ZdlPv(*((($2 + [256]) + [8])))
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv(*($2 + [96]))
	$6 = [1]
	if ( ((*($2 + [320]) & [1]) == 0) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$6 = [1]
	if ( (*($2 + [320]) & [1]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( (*($2 + [272]) & $6) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*($2 + [328]))
	if ( ((*($2 + [272]) & $6) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($2 + [280])))
	$6 = [1]
	if ( ((*($2 + [304]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = [1]
	if ( (*($2 + [304]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( ((*($2 + [288]) & $6) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	CALL _ZdlPv(*($2 + [312]))
	if ( ((*($2 + [288]) & $6) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($2 + [296])))
	
.LABEL $label$12
	*($2 + [272]) = (int_64)0
	*($2 + [280]) = [0]
	$1 = *($7)
	
.LOOP $label$23:
	$8 = ((uint_64)$1 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$8 * (int_64)10))
	CALL $3(($2 + [88]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($2 + [272]))
	if ( (*($2 + [272]) & [1]) ){ goto $label$25 }
	*($2 + [272]) = [0]
	goto $label$24 
	
.LABEL $label$25
	*(*((($2 + [272]) + [8]))) = [0]
	*($2 + [276]) = [0]
	
.LABEL $label$24
	CALL $326(($2 + [272]), [0])
	*((($2 + [272]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [272]) = *($2 + [88])
	$6 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $8
	if ( $6 ){ goto $label$23 }
	$6 = CALL $328(($2 + [272]), [17730])
	$4 = ($6 + [8])
	*((($2 + [288]) + [8])) = *($4)
	*($2 + [288]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	*($2 + [256]) = (int_64)0
	*($2 + [264]) = [0]
	$4 = (($2 + [256]) | [1])
	$1 = *($7 + [152])
	
.LOOP $label$26:
	$8 = ((uint_64)$1 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$8 * (int_64)10))
	CALL $3(($2 + [88]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($2 + [256]))
	if ( (*($2 + [256]) & [1]) ){ goto $label$28 }
	*($2 + [256]) = [0]
	goto $label$27 
	
.LABEL $label$28
	*(*((($2 + [256]) + [8]))) = [0]
	*($2 + [260]) = [0]
	
.LABEL $label$27
	CALL $326(($2 + [256]), [0])
	*((($2 + [256]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [256]) = *($2 + [88])
	$6 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $8
	if ( $6 ){ goto $label$26 }
	$6 = *($2 + [256])
	$9 = ($6 & [1])
	$6 = CALL $330(($2 + [288]), ( *((($2 + [256]) + [8])) ? $4 : $9 ), ( *($2 + [260]) ? uint_32($6 >> [1]) : $9 ))
	$4 = ($6 + [8])
	*((($2 + [304]) + [8])) = *($4)
	*($2 + [304]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$6 = CALL $328(($2 + [304]), [17728])
	$4 = ($6 + [8])
	*((($2 + [88]) + [8])) = *($4)
	*($2 + [88]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$8 = *(($7 + [88]))
	*((($2 + [208]) + [8])) = $8
	$1 = *($7 + [80])
	*((($2 + [56]) + [8])) = $8
	*($2 + [56]) = $1
	*($2 + [208]) = $1
	CALL $122(($2 + [224]), $0, ($2 + [56]))
	$6 = *($2 + [224])
	$4 = ($6 & [1])
	$6 = CALL $330(($2 + [88]), ( *($2 + [232]) ? (($2 + [224]) | [1]) : $4 ), ( *($2 + [228]) ? uint_32($6 >> [1]) : $4 ))
	$4 = ($6 + [8])
	*((($2 + [320]) + [8])) = *($4)
	*($2 + [320]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	if ( (*($2 + [224]) & [1]) ){ goto $label$39 }
	if ( (*($2 + [88]) & [1]) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	CALL _ZdlPv(*((($2 + [224]) + [8])))
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$37 }
	
.LABEL $label$38
	CALL _ZdlPv(*($2 + [96]))
	$6 = [1]
	if ( ((*($2 + [304]) & [1]) == 0) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$6 = [1]
	if ( (*($2 + [304]) & [1]) ){ goto $label$35 }
	
.LABEL $label$36
	if ( (*($2 + [256]) & $6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	CALL _ZdlPv(*($2 + [312]))
	if ( ((*($2 + [256]) & $6) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	CALL _ZdlPv(*(($2 + [264])))
	$6 = [1]
	if ( ((*($2 + [288]) & [1]) == 0) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$6 = [1]
	if ( (*($2 + [288]) & [1]) ){ goto $label$31 }
	
.LABEL $label$32
	if ( ((*($2 + [272]) & $6) == 0) ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$31
	CALL _ZdlPv(*($2 + [296]))
	if ( ((*($2 + [272]) & $6) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL _ZdlPv(*(($2 + [280])))
	
.LABEL $label$29
	*($2 + [256]) = (int_64)0
	*($2 + [264]) = [0]
	$1 = *($7)
	
.LOOP $label$40:
	$8 = ((uint_64)$1 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$8 * (int_64)10))
	CALL $3(($2 + [88]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($2 + [256]))
	if ( (*($2 + [256]) & [1]) ){ goto $label$42 }
	*($2 + [256]) = [0]
	goto $label$41 
	
.LABEL $label$42
	*(*((($2 + [256]) + [8]))) = [0]
	*($2 + [260]) = [0]
	
.LABEL $label$41
	CALL $326(($2 + [256]), [0])
	*((($2 + [256]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [256]) = *($2 + [88])
	$6 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $8
	if ( $6 ){ goto $label$40 }
	$6 = CALL $328(($2 + [256]), [17734])
	$4 = ($6 + [8])
	*((($2 + [272]) + [8])) = *($4)
	*($2 + [272]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	*($2 + [224]) = (int_64)0
	*($2 + [232]) = [0]
	$4 = (($2 + [224]) | [1])
	$1 = *($7 + [160])
	
.LOOP $label$43:
	$8 = ((uint_64)$1 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$8 * (int_64)10))
	CALL $3(($2 + [88]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($2 + [224]))
	if ( (*($2 + [224]) & [1]) ){ goto $label$45 }
	*($2 + [224]) = [0]
	goto $label$44 
	
.LABEL $label$45
	*(*((($2 + [224]) + [8]))) = [0]
	*($2 + [228]) = [0]
	
.LABEL $label$44
	CALL $326(($2 + [224]), [0])
	*((($2 + [224]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [224]) = *($2 + [88])
	$6 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $8
	if ( $6 ){ goto $label$43 }
	$6 = *($2 + [224])
	$9 = ($6 & [1])
	$6 = CALL $330(($2 + [272]), ( *((($2 + [224]) + [8])) ? $4 : $9 ), ( *($2 + [228]) ? uint_32($6 >> [1]) : $9 ))
	$4 = ($6 + [8])
	*((($2 + [288]) + [8])) = *($4)
	*($2 + [288]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$6 = CALL $328(($2 + [288]), [17728])
	$4 = ($6 + [8])
	*((($2 + [88]) + [8])) = *($4)
	*($2 + [88]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$8 = *(($7 + [104]))
	*((($2 + [176]) + [8])) = $8
	$1 = *($7 + [96])
	*((($2 + [40]) + [8])) = $8
	*($2 + [40]) = $1
	*($2 + [176]) = $1
	CALL $122(($2 + [192]), $0, ($2 + [40]))
	$6 = *($2 + [192])
	$4 = ($6 & [1])
	$6 = CALL $330(($2 + [88]), ( *($2 + [200]) ? (($2 + [192]) | [1]) : $4 ), ( *($2 + [196]) ? uint_32($6 >> [1]) : $4 ))
	$4 = ($6 + [8])
	*((($2 + [304]) + [8])) = *($4)
	*($2 + [304]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	if ( (*($2 + [192]) & [1]) ){ goto $label$56 }
	if ( (*($2 + [88]) & [1]) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$56
	CALL _ZdlPv(*((($2 + [192]) + [8])))
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$54 }
	
.LABEL $label$55
	CALL _ZdlPv(*($2 + [96]))
	$6 = [1]
	if ( ((*($2 + [288]) & [1]) == 0) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$6 = [1]
	if ( (*($2 + [288]) & [1]) ){ goto $label$52 }
	
.LABEL $label$53
	if ( (*($2 + [224]) & $6) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$52
	CALL _ZdlPv(*($2 + [296]))
	if ( ((*($2 + [224]) & $6) == 0) ){ goto $label$50 }
	
.LABEL $label$51
	CALL _ZdlPv(*(($2 + [232])))
	$6 = [1]
	if ( ((*($2 + [272]) & [1]) == 0) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	$6 = [1]
	if ( (*($2 + [272]) & [1]) ){ goto $label$48 }
	
.LABEL $label$49
	if ( ((*($2 + [256]) & $6) == 0) ){ goto $label$46 }
	goto $label$47 
	
.LABEL $label$48
	CALL _ZdlPv(*($2 + [280]))
	if ( ((*($2 + [256]) & $6) == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv(*(($2 + [264])))
	
.LABEL $label$46
	*($2 + [224]) = (int_64)0
	*($2 + [232]) = [0]
	$1 = *($7)
	
.LOOP $label$57:
	$8 = ((uint_64)$1 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$8 * (int_64)10))
	CALL $3(($2 + [88]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($2 + [224]))
	if ( (*($2 + [224]) & [1]) ){ goto $label$59 }
	*($2 + [224]) = [0]
	goto $label$58 
	
.LABEL $label$59
	*(*((($2 + [224]) + [8]))) = [0]
	*($2 + [228]) = [0]
	
.LABEL $label$58
	CALL $326(($2 + [224]), [0])
	*((($2 + [224]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [224]) = *($2 + [88])
	$6 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $8
	if ( $6 ){ goto $label$57 }
	$6 = CALL $328(($2 + [224]), [17738])
	$4 = ($6 + [8])
	*((($2 + [256]) + [8])) = *($4)
	*($2 + [256]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	*($2 + [192]) = (int_64)0
	*($2 + [200]) = [0]
	$4 = (($2 + [192]) | [1])
	$1 = *($7 + [168])
	
.LOOP $label$60:
	$8 = ((uint_64)$1 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$8 * (int_64)10))
	CALL $3(($2 + [88]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($2 + [192]))
	if ( (*($2 + [192]) & [1]) ){ goto $label$62 }
	*($2 + [192]) = [0]
	goto $label$61 
	
.LABEL $label$62
	*(*((($2 + [192]) + [8]))) = [0]
	*($2 + [196]) = [0]
	
.LABEL $label$61
	CALL $326(($2 + [192]), [0])
	*((($2 + [192]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [192]) = *($2 + [88])
	$6 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $8
	if ( $6 ){ goto $label$60 }
	$6 = *($2 + [192])
	$9 = ($6 & [1])
	$6 = CALL $330(($2 + [256]), ( *((($2 + [192]) + [8])) ? $4 : $9 ), ( *($2 + [196]) ? uint_32($6 >> [1]) : $9 ))
	$4 = ($6 + [8])
	*((($2 + [272]) + [8])) = *($4)
	*($2 + [272]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$6 = CALL $328(($2 + [272]), [17728])
	$4 = ($6 + [8])
	*((($2 + [88]) + [8])) = *($4)
	*($2 + [88]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$8 = *(($7 + [120]))
	*((($2 + [144]) + [8])) = $8
	$1 = *($7 + [112])
	*((($2 + [24]) + [8])) = $8
	*($2 + [24]) = $1
	*($2 + [144]) = $1
	CALL $122(($2 + [160]), $0, ($2 + [24]))
	$6 = *($2 + [160])
	$4 = ($6 & [1])
	$6 = CALL $330(($2 + [88]), ( *($2 + [168]) ? (($2 + [160]) | [1]) : $4 ), ( *($2 + [164]) ? uint_32($6 >> [1]) : $4 ))
	$4 = ($6 + [8])
	*((($2 + [288]) + [8])) = *($4)
	*($2 + [288]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	if ( (*($2 + [160]) & [1]) ){ goto $label$73 }
	if ( (*($2 + [88]) & [1]) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	CALL _ZdlPv(*((($2 + [160]) + [8])))
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$71 }
	
.LABEL $label$72
	CALL _ZdlPv(*($2 + [96]))
	$6 = [1]
	if ( ((*($2 + [272]) & [1]) == 0) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$71
	$6 = [1]
	if ( (*($2 + [272]) & [1]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( (*($2 + [192]) & $6) ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	CALL _ZdlPv(*($2 + [280]))
	if ( ((*($2 + [192]) & $6) == 0) ){ goto $label$67 }
	
.LABEL $label$68
	CALL _ZdlPv(*(($2 + [200])))
	$6 = [1]
	if ( ((*($2 + [256]) & [1]) == 0) ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$6 = [1]
	if ( (*($2 + [256]) & [1]) ){ goto $label$65 }
	
.LABEL $label$66
	if ( ((*($2 + [224]) & $6) == 0) ){ goto $label$63 }
	goto $label$64 
	
.LABEL $label$65
	CALL _ZdlPv(*($2 + [264]))
	if ( ((*($2 + [224]) & $6) == 0) ){ goto $label$63 }
	
.LABEL $label$64
	CALL _ZdlPv(*(($2 + [232])))
	
.LABEL $label$63
	*($2 + [192]) = (int_64)0
	*($2 + [200]) = [0]
	$1 = *($7)
	
.LOOP $label$74:
	$8 = ((uint_64)$1 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$8 * (int_64)10))
	CALL $3(($2 + [88]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($2 + [192]))
	if ( (*($2 + [192]) & [1]) ){ goto $label$76 }
	*($2 + [192]) = [0]
	goto $label$75 
	
.LABEL $label$76
	*(*((($2 + [192]) + [8]))) = [0]
	*($2 + [196]) = [0]
	
.LABEL $label$75
	CALL $326(($2 + [192]), [0])
	*((($2 + [192]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [192]) = *($2 + [88])
	$6 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $8
	if ( $6 ){ goto $label$74 }
	$6 = CALL $328(($2 + [192]), [17742])
	$4 = ($6 + [8])
	*((($2 + [224]) + [8])) = *($4)
	*($2 + [224]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	*($2 + [160]) = (int_64)0
	*($2 + [168]) = [0]
	$4 = (($2 + [160]) | [1])
	$1 = *($7 + [176])
	
.LOOP $label$77:
	$8 = ((uint_64)$1 / (uint_64)(int_64)10)
	$6 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$8 * (int_64)10))
	CALL $3(($2 + [88]), int_32((( ($6) | [48]) ? ($6 + [55]) : ($6 <= [10]) ) << [24]) >> [24]), ($2 + [160]))
	if ( (*($2 + [160]) & [1]) ){ goto $label$79 }
	*($2 + [160]) = [0]
	goto $label$78 
	
.LABEL $label$79
	*(*((($2 + [160]) + [8]))) = [0]
	*($2 + [164]) = [0]
	
.LABEL $label$78
	CALL $326(($2 + [160]), [0])
	*((($2 + [160]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [160]) = *($2 + [88])
	$6 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $8
	if ( $6 ){ goto $label$77 }
	$6 = *($2 + [160])
	$9 = ($6 & [1])
	$6 = CALL $330(($2 + [224]), ( *((($2 + [160]) + [8])) ? $4 : $9 ), ( *($2 + [164]) ? uint_32($6 >> [1]) : $9 ))
	$4 = ($6 + [8])
	*((($2 + [256]) + [8])) = *($4)
	*($2 + [256]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$6 = CALL $328(($2 + [256]), [17728])
	$4 = ($6 + [8])
	*((($2 + [88]) + [8])) = *($4)
	*($2 + [88]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$8 = *(($7 + [136]))
	*((($2 + [112]) + [8])) = $8
	$1 = *($7 + [128])
	*((($2 + [8]) + [8])) = $8
	*($2 + [8]) = $1
	*($2 + [112]) = $1
	CALL $122(($2 + [128]), $0, ($2 + [8]))
	$6 = *($2 + [128])
	$4 = ($6 & [1])
	$6 = CALL $330(($2 + [88]), ( *($2 + [136]) ? (($2 + [128]) | [1]) : $4 ), ( *($2 + [132]) ? uint_32($6 >> [1]) : $4 ))
	$4 = ($6 + [8])
	*((($2 + [272]) + [8])) = *($4)
	*($2 + [272]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	if ( (*($2 + [128]) & [1]) ){ goto $label$90 }
	if ( (*($2 + [88]) & [1]) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$90
	CALL _ZdlPv(*((($2 + [128]) + [8])))
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$88 }
	
.LABEL $label$89
	CALL _ZdlPv(*($2 + [96]))
	$6 = [1]
	if ( ((*($2 + [256]) & [1]) == 0) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$88
	$6 = [1]
	if ( (*($2 + [256]) & [1]) ){ goto $label$86 }
	
.LABEL $label$87
	if ( (*($2 + [160]) & $6) ){ goto $label$85 }
	goto $label$84 
	
.LABEL $label$86
	CALL _ZdlPv(*($2 + [264]))
	if ( ((*($2 + [160]) & $6) == 0) ){ goto $label$84 }
	
.LABEL $label$85
	CALL _ZdlPv(*(($2 + [168])))
	$6 = [1]
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$6 = [1]
	if ( (*($2 + [224]) & [1]) ){ goto $label$82 }
	
.LABEL $label$83
	if ( ((*($2 + [192]) & $6) == 0) ){ goto $label$80 }
	goto $label$81 
	
.LABEL $label$82
	CALL _ZdlPv(*($2 + [232]))
	if ( ((*($2 + [192]) & $6) == 0) ){ goto $label$80 }
	
.LABEL $label$81
	CALL _ZdlPv(*(($2 + [200])))
	
.LABEL $label$80
	$1 = *($0)
	*($2 + [92]) = ($2 + [320])
	*($2 + [88]) = ($2 + [336])
	*($2 + [96]) = ($2 + [304])
	*($2 + [100]) = ($2 + [288])
	*($2 + [104]) = ($2 + [272])
	CALL eosio_assert($5, [19026])
	CALL $123($3, $7, $1, ($2 + [88]))
	if ( (*($2 + [272]) & [1]) ){ goto $label$98 }
	if ( (*($2 + [288]) & [1]) ){ goto $label$97 }
	goto $label$96 
	
.LABEL $label$98
	CALL _ZdlPv(*($2 + [280]))
	if ( ((*($2 + [288]) & [1]) == 0) ){ goto $label$96 }
	
.LABEL $label$97
	CALL _ZdlPv(*($2 + [296]))
	$6 = [1]
	if ( ((*($2 + [304]) & [1]) == 0) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$96
	$6 = [1]
	if ( (*($2 + [304]) & [1]) ){ goto $label$94 }
	
.LABEL $label$95
	if ( (*($2 + [320]) & $6) ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$94
	CALL _ZdlPv(*($2 + [312]))
	if ( ((*($2 + [320]) & $6) == 0) ){ goto $label$92 }
	
.LABEL $label$93
	CALL _ZdlPv(*($2 + [328]))
	if ( (*($2 + [336]) & [1]) ){ goto $label$91 }
	goto $label$5 
	
.LABEL $label$92
	if ( ((*($2 + [336]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$91
	CALL _ZdlPv(*($2 + [344]))
	
.LABEL $label$5
	$global$0 = ($2 + [352])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $358($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*(($2 = (($3 + [48]) + [32]))) = [0]
	*(($7 = (($3 + [48]) + [24]))) = (int_64)0
	*(($8 = (($3 + [48]) + [16]))) = (int_64)0
	*(($9 = (($3 + [48]) + [8]))) = (int_64)0
	*($3 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[33]), [18407])
	CALL memcpy(($3 + [48]), $6, [34])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $362($6)
	
.LABEL $label$4
	*(($1 = (($3 + [88]) + [32]))) = *($2)
	*(($6 = (($3 + [88]) + [24]))) = *($7)
	*(($2 = (($3 + [88]) + [16]))) = *($8)
	*(($7 = (($3 + [88]) + [8]))) = *($9)
	*($3 + [88]) = *($3 + [48])
	*((($3 + [128]) + [32])) = *($1)
	*((($3 + [128]) + [24])) = *($6)
	*((($3 + [128]) + [16])) = *($2)
	*((($3 + [128]) + [8])) = *($7)
	*($3 + [128]) = *($3 + [88])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	*(($6 = (($3 + [168]) + [32]))) = *((($3 + [128]) + [32]))
	$10 = *((($3 + [128]) + [24]))
	*((($3 + [168]) + [24])) = $10
	$11 = *((($3 + [128]) + [16]))
	*((($3 + [168]) + [16])) = $11
	$12 = *((($3 + [128]) + [8]))
	*((($3 + [168]) + [8])) = $12
	*((($3 + [8]) + [8])) = $12
	*((($3 + [8]) + [16])) = $11
	*((($3 + [8]) + [24])) = $10
	*((($3 + [8]) + [32])) = *($6)
	$10 = *($3 + [128])
	*($3 + [8]) = $10
	*($3 + [168]) = $10
	CALL void $1((int_32 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [208])
	return [1]
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	*(($0 + [136])) = *(($1 + [32]))
	*(($0 + [128])) = *(($1 + [24]))
	*(($0 + [120])) = *(($1 + [16]))
	*(($0 + [112])) = *(($1 + [8]))
	*(($0 + [104])) = *($1)
	CALL $87($0)
}

void .FUNC $44 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
	*(($0 + [144])) = $1
	CALL $87($0)
}

void .FUNC $362 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17164])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16972]
	$3 = (((int_32)$1 * (int_32)[12]) + [16972])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $167 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$2 = *($0 + [4])
	$3 = *(($2 + [52]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-5920943410927747071, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [52])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [18333])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $220($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-5920943410927747072, $5))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [18333])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [52])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-5920943410927747071, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $220($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-5920943410927747072, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*(($4 + [52])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $165 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*($2 + [64]) = $1
	*($2 + [56]) = ($0 + [240])
	CALL $113(($2 + [48]), ($2 + [56]), ($2 + [64]))
	$3 = *($2 + [52])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	if ( ((int_64)*($3 + [248]) != (int_64)*($2 + [64])) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)5), [17668])
	$1 = *($2 + [48])
	*($2 + [72]) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$3) != (int_32)[0]), [19221])
	CALL $114(($2 + [72]))
	CALL $115(*($2 + [56]), $3)
	$1 = *($2 + [72])
	*($2 + [48]) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $3) ){ goto $label$2 }
	
.LABEL $label$1
	*($2 + [40]) = ($0 + [200])
	CALL $105(($2 + [32]), ($2 + [40]), ($2 + [64]))
	$3 = *($2 + [36])
	if ( ($3 == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	if ( ((int_64)*($3 + [40]) != (int_64)*($2 + [64])) ){ goto $label$3 }
	CALL $64($0, ($3 + [8]), ($3 + [48]))
	$1 = *($2 + [32])
	*($2 + [72]) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$3) != (int_32)[0]), [19221])
	CALL $132(($2 + [72]))
	CALL $111(*($2 + [40]), $3)
	$1 = *($2 + [72])
	*($2 + [32]) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $3) ){ goto $label$4 }
	
.LABEL $label$3
	*($2 + [24]) = ($0 + [560])
	CALL $166(($2 + [16]), ($2 + [24]), ($2 + [64]))
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	if ( ((int_64)*($3 + [8]) != (int_64)*($2 + [64])) ){ goto $label$5 }
	CALL $64($0, ($3 + [16]), ($3 + [24]))
	$1 = *($2 + [16])
	*($2 + [72]) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$3) != (int_32)[0]), [19221])
	CALL $167(($2 + [72]))
	CALL $168(*($2 + [24]), $3)
	$1 = *($2 + [72])
	*($2 + [16]) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $3) ){ goto $label$6 }
	
.LABEL $label$5
	*($2 + [8]) = ($0 + [400])
	CALL $116($2, ($2 + [8]), ($2 + [64]))
	$3 = *($2 + [4])
	if ( ($3 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	if ( ((int_64)*($3 + [8]) != (int_64)*($2 + [64])) ){ goto $label$7 }
	$1 = *($2)
	*($2 + [72]) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$3) != (int_32)[0]), [19221])
	CALL $117(($2 + [72]))
	CALL $134(*($2 + [8]), $3)
	$1 = *($2 + [72])
	*($2) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $3) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = ($0 + [640])
	$1 = *($2 + [64])
	$6 = *(($0 + [668]))
	$5 = *(($0 + [664]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$12:
	$3 = ($6 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$11 }
	$6 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$4), [18333])
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	$3 = CALL db_find_i64(*($4), *(($0 + [648])), (int_64)4513481842761924608, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$7 = CALL $65($4, $3)
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$4), [18333])
	
.LABEL $label$9
	$3 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($3, [19221])
	CALL eosio_assert($3, [18629])
	$3 = CALL db_next_i64(*($7 + [92]), ($2 + [72]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	CALL $65($4, $3)
	
.LABEL $label$13
	CALL $219($4, $7)
	$global$0 = ($2 + [80])
}

int_32 .FUNC $164 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $163 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [268]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [16]) = (int_64)5
	*(($4 = $3) + [24]) = *(($1 + [248]))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	*($4 + [8]) = [0]
	CALL $305(($4 + [8]), $1)
	$6 = *($4 + [8])
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	CALL $306(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [272]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [40]) = *(($1 + [248]))
	if ( (CALL $354(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = *($1 + [276])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513475553721843712, ($4 + [32]), $5)
	*(($1 + [276])) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($4 + [40]))
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $162 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$6 = ($global$0 - [144])
	$global$0 = $6
	*(($6 + [48])) = [0]
	*($6 + [40]) = (int_64)0
	$7 = CALL $355([19777])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$5 }
	*($6 + [40]) = ($7 << [1])
	$8 = (($6 + [40]) | [1])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [40]) = ($9 | [1])
	*($6 + [48]) = $8
	*($6 + [44]) = $7
	
.LABEL $label$4
	CALL memcpy($8, [19777], $7)
	
.LABEL $label$3
	*(($8 + $7)) = [0]
	*(($6 + [80])) = *(($2 + [8]))
	*(($6 + [96])) = *(($3 + [8]))
	*($6 + [64]) = $1
	*($6 + [104]) = $4
	*($6 + [56]) = *($0)
	*($6 + [72]) = *($2)
	*($6 + [88]) = *($3)
	$2 = CALL $322(($6 + [112]), $5)
	$1 = (int_64)0
	$4 = (int_64)59
	$7 = [19764]
	$10 = (int_64)0
	
.LOOP $label$6:
	$11 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$7 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$8 = ($8 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$7
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$6 }
	$1 = (int_64)5
	
.LOOP $label$10:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$10 }
	$1 = (int_64)0
	$4 = (int_64)59
	$7 = [19764]
	$12 = (int_64)0
	
.LOOP $label$11:
	$11 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$12 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$8 = ($8 + [-91])
	goto $label$13 
	
.LABEL $label$14
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$11 }
	$1 = (int_64)5
	
.LOOP $label$15:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$15 }
	*($6 + [8]) = (int_64)-6571125140531183616
	*($6) = $12
	*(($7 = CALL _Znwj([16]))) = $10
	*($7 + [8]) = (int_64)-6571125140531183616
	$8 = ($7 + [16])
	*(($6 + [24])) = $8
	*(($6 + [20])) = $8
	*($6 + [16]) = $7
	CALL $216(($6 + [28]), ($6 + [40]))
	CALL $185(($6 + [128]), $6)
	$7 = *($6 + [128])
	CALL send_inline($7, (*($6 + [132]) - $7))
	$7 = *($6 + [128])
	if ( ($7 == 0) ){ goto $label$16 }
	*($6 + [132]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$17 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$18 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( (*($2) & [1]) ){ goto $label$20 }
	if ( (*($6 + [40]) & [1]) ){ goto $label$19 }
	goto $label$1 
	
.LABEL $label$20
	CALL _ZdlPv(*(($6 + [120])))
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$19
	CALL _ZdlPv(*($6 + [48]))
	$global$0 = ($6 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $321(($6 + [40]))
	
.LABEL $label$1
	$global$0 = ($6 + [144])
}

void .FUNC $161 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$6 = ($global$0 - [144])
	$global$0 = $6
	*(($6 + [48])) = [0]
	*($6 + [40]) = (int_64)0
	$7 = CALL $355([17202])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$5 }
	*($6 + [40]) = ($7 << [1])
	$8 = (($6 + [40]) | [1])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [40]) = ($9 | [1])
	*($6 + [48]) = $8
	*($6 + [44]) = $7
	
.LABEL $label$4
	CALL memcpy($8, [17202], $7)
	
.LABEL $label$3
	*(($8 + $7)) = [0]
	*(($6 + [80])) = *(($2 + [8]))
	*(($6 + [96])) = *(($3 + [8]))
	*($6 + [64]) = $1
	*($6 + [104]) = $4
	*($6 + [56]) = *($0)
	*($6 + [72]) = *($2)
	*($6 + [88]) = *($3)
	$2 = CALL $322(($6 + [112]), $5)
	$1 = (int_64)0
	$4 = (int_64)59
	$7 = [19764]
	$10 = (int_64)0
	
.LOOP $label$6:
	$11 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$7 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$8 = ($8 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$7
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$6 }
	$1 = (int_64)5
	
.LOOP $label$10:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$10 }
	$1 = (int_64)0
	$4 = (int_64)59
	$7 = [19764]
	$12 = (int_64)0
	
.LOOP $label$11:
	$11 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$12 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$8 = ($8 + [-91])
	goto $label$13 
	
.LABEL $label$14
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$11 }
	$1 = (int_64)5
	
.LOOP $label$15:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$15 }
	*($6 + [8]) = (int_64)-6571125140531183616
	*($6) = $12
	*(($7 = CALL _Znwj([16]))) = $10
	*($7 + [8]) = (int_64)-6571125140531183616
	$8 = ($7 + [16])
	*(($6 + [24])) = $8
	*(($6 + [20])) = $8
	*($6 + [16]) = $7
	CALL $216(($6 + [28]), ($6 + [40]))
	CALL $185(($6 + [128]), $6)
	$7 = *($6 + [128])
	CALL send_inline($7, (*($6 + [132]) - $7))
	$7 = *($6 + [128])
	if ( ($7 == 0) ){ goto $label$16 }
	*($6 + [132]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$7 = *($6 + [28])
	if ( ($7 == 0) ){ goto $label$17 }
	*(($6 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	$7 = *($6 + [16])
	if ( ($7 == 0) ){ goto $label$18 }
	*(($6 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$18
	if ( (*($2) & [1]) ){ goto $label$20 }
	if ( (*($6 + [40]) & [1]) ){ goto $label$19 }
	goto $label$1 
	
.LABEL $label$20
	CALL _ZdlPv(*(($6 + [120])))
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$19
	CALL _ZdlPv(*($6 + [48]))
	$global$0 = ($6 + [144])
	return (unreachable)
	
.LABEL $label$2
	CALL $321(($6 + [40]))
	
.LABEL $label$1
	$global$0 = ($6 + [144])
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *(($0 + [508]))
	$4 = *(($0 + [504]))
	$5 = ($0 + [480])
	$6 = ( [1] ? [2] : ((int_64)*($1 + [8]) == (int_64)1397703940) )
	*($2 + [28]) = $6
	$7 = (CASTING uint_64)(uint_32 $6)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($3 + [-24])
	$8 = *($6)
	if ( ((int_64)*($8) == (int_64)$7) ){ goto $label$4 }
	$3 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$5), [18333])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($5), *(($0 + [488])), (int_64)4513480743233519616, $7)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $204($5, $6)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$5), [18333])
	
.LABEL $label$2
	$7 = *($0)
	*($2 + [16]) = $1
	CALL eosio_assert([1], [19026])
	CALL $214($5, $8, $7, ($2 + [16]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$1
	$7 = *($0)
	*($2 + [20]) = $1
	*($2 + [16]) = ($2 + [28])
	CALL $215(($2 + [8]), $5, $7, ($2 + [16]))
	$global$0 = ($2 + [32])
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$2 = *($0 + [4])
	$3 = *($2 + [96])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)4513481842761924608, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [96]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$6), [18333])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $65($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)4513481842761924608, $5))
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$6), [18333])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [96])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-5920943410927747072, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $220($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-5920943410927747072, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [44]))
	$6 = *(($1 + [48]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5920943410927747072, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [52]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5920943410927747071, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4513481842761924608, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $65($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4513481842761924608, $6))
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*(($4 + [96])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $74(*($1), ($0 + [32]))
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18708])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($3 + [12]) = $1
	*($3 + [8]) = $1
	*($3 + [16]) = ($1 + $2)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($0 + [8])
	*($3 + [32]) = $0
	*($3 + [40]) = ($0 + [16])
	*($3 + [44]) = ($0 + [32])
	CALL $296(($3 + [32]), ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($2)
	if ( ((int_64)$4 != (int_64)1397703940) ){ goto $label$2 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17348]
	$7 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$8 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$8 = ($8 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$4
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	*($3 + [8]) = $7
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$4 != (int_64)1480674564) ){ goto $label$1 }
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [17360]
	$7 = (int_64)0
	
.LOOP $label$9:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$10 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$8 = ($8 + [-91])
	goto $label$11 
	
.LABEL $label$12
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$10
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$9 }
	*($3 + [8]) = $7
	
.LABEL $label$1
	*($3) = ($1 + [48])
	CALL $94($0, $3, ($3 + [8]))
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$13 }
	$8 = ($0 + [4])
	
.LOOP $label$14:
	if ( ((int_64)*(($6 + [32])) == (int_64)*($2)) ){ goto $label$13 }
	CALL $95($0)
	$6 = *($8)
	if ( $6 ){ goto $label$14 }
	
.LABEL $label$13
	$global$0 = ($3 + [16])
}

int_32 .FUNC $241 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [120]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18978])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4513472877252575232)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18924])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18924])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $206(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ($0 + [8])
	$4 = *(($0 + [36]))
	$3 = *(($0 + [32]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$2), [18333])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($2), *(($0 + [16])), (int_64)7235159537265672192, (int_64)1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $55($2, $5)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$2), [18333])
	
.LABEL $label$1
	$7 = *($0)
	*($1 + [8]) = $0
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19026])
	CALL $186($2, $6, $7, ($1 + [8]))
	$global$0 = ($1 + [16])
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$2 = *($0 + [4])
	$3 = *($2 + [40])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3020379698556063232, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [40]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [18333])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $217($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-3020379698556063232, $5))
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [18333])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [40])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3020379698556063232, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $217($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-3020379698556063232, $6))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*(($4 + [40])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $248 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [20])
	*($0) = $2
	$3 = *($1 + [20])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [24])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [20]))
	$3 = ( *(($1 + [24])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$2 = ($2 + [98])
	*($0) = $2
	$3 = *($1 + [132])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [136])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [132]))
	$3 = ( *(($1 + [136])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [144])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [148])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$3 = *(($1 + [144]))
	$3 = ( *(($1 + [148])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$6
	$3 = *($1 + [156])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [160])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	*($0) = $2
	$3 = *(($1 + [156]))
	$3 = ( *(($1 + [160])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$8
	$3 = *($1 + [168])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [172])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	$3 = *(($1 + [168]))
	$3 = ( *(($1 + [172])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$10 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$10
	$3 = *($1 + [180])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [184])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$11:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$11 }
	*($0) = $2
	$3 = *(($1 + [180]))
	$3 = ( *(($1 + [184])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$12 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$12
	$3 = *($1 + [192])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [196])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$13:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$13 }
	*($0) = $2
	$3 = *(($1 + [192]))
	$3 = ( *(($1 + [196])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$14 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$14
	$2 = ($2 + [40])
	*($0) = $2
	$3 = *($1 + [248])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [252])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	$3 = *(($1 + [248]))
	$3 = ( *(($1 + [252])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$16 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$16
	$3 = *($1 + [260])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [264])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$17:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$17 }
	*($0) = $2
	$1 = *(($1 + [260]))
	$1 = ( *(($1 + [264])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$18 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$18
	*($0) = ($2 + [8])
	return $0
}

int_32 .FUNC $249 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [272])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $212($0, ($1 + [20]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = $0
	*($2 + [12]) = ($1 + [65])
	*($2 + [8]) = ($1 + [64])
	*($2 + [16]) = ($1 + [66])
	*($2 + [20]) = ($1 + [67])
	*($2 + [24]) = ($1 + [68])
	*($2 + [28]) = ($1 + [69])
	*($2 + [32]) = ($1 + [70])
	*($2 + [36]) = ($1 + [71])
	*($2 + [40]) = ($1 + [72])
	*($2 + [44]) = ($1 + [73])
	*($2 + [48]) = ($1 + [74])
	*($2 + [52]) = ($1 + [75])
	*($2 + [56]) = ($1 + [76])
	*($2 + [60]) = ($1 + [77])
	*($2 + [64]) = ($1 + [78])
	*($2 + [68]) = ($1 + [79])
	*($2 + [72]) = ($1 + [80])
	*($2 + [76]) = ($1 + [81])
	*($2 + [80]) = ($1 + [82])
	*($2 + [88]) = ($1 + [84])
	*($2 + [84]) = ($1 + [83])
	*($2 + [92]) = ($1 + [85])
	*($2 + [96]) = ($1 + [86])
	*($2 + [100]) = ($1 + [87])
	*($2 + [104]) = ($1 + [88])
	*($2 + [108]) = ($1 + [89])
	*($2 + [112]) = ($1 + [90])
	*($2 + [116]) = ($1 + [91])
	*($2 + [120]) = ($1 + [92])
	*($2 + [124]) = ($1 + [93])
	*($2 + [128]) = ($1 + [94])
	*($2 + [132]) = ($1 + [95])
	*($2 + [136]) = ($1 + [96])
	*($2 + [140]) = ($1 + [97])
	*($2 + [144]) = ($1 + [98])
	*($2 + [148]) = ($1 + [99])
	*($2 + [152]) = ($1 + [100])
	*($2 + [156]) = ($1 + [101])
	*($2 + [164]) = ($1 + [103])
	*($2 + [160]) = ($1 + [102])
	*($2 + [168]) = ($1 + [104])
	*($2 + [172]) = ($1 + [105])
	*($2 + [176]) = ($1 + [106])
	*($2 + [180]) = ($1 + [107])
	*($2 + [184]) = ($1 + [108])
	*($2 + [188]) = ($1 + [109])
	*($2 + [192]) = ($1 + [110])
	*($2 + [196]) = ($1 + [111])
	*($2 + [200]) = ($1 + [112])
	*($2 + [204]) = ($1 + [113])
	*($2 + [208]) = ($1 + [114])
	*($2 + [212]) = ($1 + [115])
	*($2 + [216]) = ($1 + [116])
	*($2 + [220]) = ($1 + [117])
	*($2 + [224]) = ($1 + [118])
	*($2 + [228]) = ($1 + [119])
	*($2 + [232]) = ($1 + [120])
	*($2 + [240]) = ($1 + [122])
	*($2 + [236]) = ($1 + [121])
	*($2 + [244]) = ($1 + [123])
	*($2 + [248]) = ($1 + [124])
	*($2 + [252]) = ($1 + [125])
	*($2 + [256]) = ($1 + [126])
	*($2 + [260]) = ($1 + [127])
	*($2 + [264]) = ($1 + [128])
	*($2 + [268]) = ($1 + [129])
	CALL $250(($2 + [8]), $2)
	$0 = CALL $212(CALL $212(CALL $212(CALL $212(CALL $212(CALL $212($0, ($1 + [132])), ($1 + [144])), ($1 + [156])), ($1 + [168])), ($1 + [180])), ($1 + [192]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [208]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [216]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [224]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [232]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [240]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $212(CALL $212($0, ($1 + [248])), ($1 + [260]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [272]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [272])
	return $0
}

int_32 .FUNC $246 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19217])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $184($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [18407])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $247 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [336])
	$5 = *($4)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = ($3 + [320])
	$7 = CALL db_lowerbound_i64(*($6), *(($3 + [328])), (int_64)4513473976872484864, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $187($6, $7)
	*($2 + [12]) = [0]
	*($2 + [8]) = $6
	$5 = *(*(CALL $188(($2 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [336])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [18872])
	*($1) = *($4)
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	CALL $324(($1 + [20]), *($0 + [12]))
	$3 = *($0 + [16])
	*($1 + [32]) = *($3)
	*(($1 + [56])) = *(($3 + [24]))
	*(($1 + [48])) = *(($3 + [16]))
	*(($1 + [40])) = *(($3 + [8]))
	CALL memcpy(($1 + [64]), *($0 + [20]), [66])
	CALL $324(($1 + [132]), *($0 + [24]))
	CALL $324(($1 + [144]), *($0 + [28]))
	CALL $324(($1 + [156]), *($0 + [32]))
	CALL $324(($1 + [168]), *($0 + [36]))
	CALL $324(($1 + [180]), *($0 + [40]))
	CALL $324(($1 + [192]), *($0 + [44]))
	*($1 + [208]) = *(*($0 + [48]))
	*($1 + [216]) = *(*($0 + [52]))
	*($1 + [224]) = *(*($0 + [56]))
	*($1 + [232]) = *(*($0 + [60]))
	*($1 + [240]) = *(*($0 + [64]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $244 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [272])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = CALL $74($0, ($1 + [20]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = $0
	*($2 + [12]) = ($1 + [65])
	*($2 + [8]) = ($1 + [64])
	*($2 + [16]) = ($1 + [66])
	*($2 + [20]) = ($1 + [67])
	*($2 + [24]) = ($1 + [68])
	*($2 + [28]) = ($1 + [69])
	*($2 + [32]) = ($1 + [70])
	*($2 + [36]) = ($1 + [71])
	*($2 + [40]) = ($1 + [72])
	*($2 + [44]) = ($1 + [73])
	*($2 + [48]) = ($1 + [74])
	*($2 + [52]) = ($1 + [75])
	*($2 + [56]) = ($1 + [76])
	*($2 + [60]) = ($1 + [77])
	*($2 + [64]) = ($1 + [78])
	*($2 + [68]) = ($1 + [79])
	*($2 + [72]) = ($1 + [80])
	*($2 + [76]) = ($1 + [81])
	*($2 + [80]) = ($1 + [82])
	*($2 + [88]) = ($1 + [84])
	*($2 + [84]) = ($1 + [83])
	*($2 + [92]) = ($1 + [85])
	*($2 + [96]) = ($1 + [86])
	*($2 + [100]) = ($1 + [87])
	*($2 + [104]) = ($1 + [88])
	*($2 + [108]) = ($1 + [89])
	*($2 + [112]) = ($1 + [90])
	*($2 + [116]) = ($1 + [91])
	*($2 + [120]) = ($1 + [92])
	*($2 + [124]) = ($1 + [93])
	*($2 + [128]) = ($1 + [94])
	*($2 + [132]) = ($1 + [95])
	*($2 + [136]) = ($1 + [96])
	*($2 + [140]) = ($1 + [97])
	*($2 + [144]) = ($1 + [98])
	*($2 + [148]) = ($1 + [99])
	*($2 + [152]) = ($1 + [100])
	*($2 + [156]) = ($1 + [101])
	*($2 + [164]) = ($1 + [103])
	*($2 + [160]) = ($1 + [102])
	*($2 + [168]) = ($1 + [104])
	*($2 + [172]) = ($1 + [105])
	*($2 + [176]) = ($1 + [106])
	*($2 + [180]) = ($1 + [107])
	*($2 + [184]) = ($1 + [108])
	*($2 + [188]) = ($1 + [109])
	*($2 + [192]) = ($1 + [110])
	*($2 + [196]) = ($1 + [111])
	*($2 + [200]) = ($1 + [112])
	*($2 + [204]) = ($1 + [113])
	*($2 + [208]) = ($1 + [114])
	*($2 + [212]) = ($1 + [115])
	*($2 + [216]) = ($1 + [116])
	*($2 + [220]) = ($1 + [117])
	*($2 + [224]) = ($1 + [118])
	*($2 + [228]) = ($1 + [119])
	*($2 + [232]) = ($1 + [120])
	*($2 + [240]) = ($1 + [122])
	*($2 + [236]) = ($1 + [121])
	*($2 + [244]) = ($1 + [123])
	*($2 + [248]) = ($1 + [124])
	*($2 + [252]) = ($1 + [125])
	*($2 + [256]) = ($1 + [126])
	*($2 + [260]) = ($1 + [127])
	*($2 + [264]) = ($1 + [128])
	*($2 + [268]) = ($1 + [129])
	CALL $245(($2 + [8]), $2)
	$0 = CALL $74(CALL $74(CALL $74(CALL $74(CALL $74(CALL $74($0, ($1 + [132])), ($1 + [144])), ($1 + [156])), ($1 + [168])), ($1 + [180])), ($1 + [192]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [208]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [216]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [224]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [232]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [240]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $74(CALL $74($0, ($1 + [248])), ($1 + [260]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [272]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [272])
	return $0
}

void .FUNC $245 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [18407])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [18407])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $242 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	CALL $247(*($0 + [4]), $1)
	*(($4 = $2) + [8]) = [0]
	CALL $248(($4 + [8]), $1)
	$5 = *($4 + [8])
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $358($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($2 + $5)
	CALL $249(($4 + [8]), $1)
	$6 = *($1)
	*($1 + [284]) = CALL db_store_i64(*($3 + [8]), (int_64)4513473976872484864, *(*($0 + [8])), $6, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$3 }
	CALL $362($2)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$4 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$6 = *(($3 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($4 + [24]) = *($1 + [8])
	*($1 + [288]) = CALL db_idx64_store($6, (int_64)4513473976872484864, $7, $8, ($4 + [24]))
	$global$0 = ($4 + [32])
}

void .FUNC $243 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $151($1)
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $240 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $322(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $322(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([136])
	CALL $233($3)
	*($3 + [116]) = $1
	CALL $238(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [120])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $235(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([128])
	$6 = CALL $258($5)
	*($5 + [116]) = $0
	CALL $259(($3 + [32]), $6)
	*($5 + [124]) = [-1]
	*($5 + [120]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $257(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $83 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [40]) = $1
	$1 = (int_64)0
	$3 = (int_64)59
	$4 = [18848]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$1 }
	$1 = (int_64)0
	$6 = (int_64)59
	$4 = [18861]
	$8 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$10 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$8 
	
.LABEL $label$10
	$3 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$6
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$8 = ((int_64)$3 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$5 }
	$1 = (int_64)0
	$3 = (int_64)59
	$4 = [18848]
	$9 = (int_64)0
	
.LOOP $label$11:
	$6 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$12 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$7 = ($7 + [-91])
	goto $label$13 
	
.LABEL $label$14
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$9 = ((int_64)$6 | (int_64)$9)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$11 }
	$1 = (int_64)0
	$6 = (int_64)59
	$4 = [18861]
	$10 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$1 > (uint_64)(int_64)9) ){ goto $label$20 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$7 = ($7 + [-91])
	goto $label$18 
	
.LABEL $label$20
	$3 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$10 = ((int_64)$3 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$15 }
	*($2 + [8]) = $10
	*($2) = $9
	*(($4 = CALL _Znwj([16]))) = $5
	*($4 + [8]) = $8
	*(($2 + [36])) = [0]
	$7 = ($4 + [16])
	*(($2 + [24])) = $7
	*(($2 + [20])) = $7
	*($2 + [16]) = $4
	*($2 + [28 align=4]) = (int_64)0
	CALL $184(($2 + [28]), [8])
	$4 = *($2 + [28])
	CALL eosio_assert(((int_32)(*(($2 + [32])) - $4) > (int_32)[7]), [18517])
	CALL memcpy($4, ($2 + [40]), [8])
	CALL $185(($2 + [48]), $2)
	$4 = *($2 + [48])
	CALL send_inline($4, (*($2 + [52]) - $4))
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$21 }
	*($2 + [52]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$21
	$4 = *($2 + [28])
	if ( ($4 == 0) ){ goto $label$22 }
	*(($2 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$4 = *($2 + [16])
	if ( ($4 == 0) ){ goto $label$23 }
	*(($2 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$global$0 = ($2 + [64])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [268]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*(($5 = $4) + [24]) = *(($1 + [248]))
	$6 = *($1)
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [72]))), [19449])
	$8 = ((int_64)*($1 + [64]) + (int_64)*($7))
	*($1 + [64]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($1 + [64]) < (int_64)4611686018427387904), [19511])
	*($1 + [144]) = *(*($3 + [4]))
	$7 = *(*($3 + [8]))
	$9 = *($7)
	if ( ($9 == 0) ){ goto $label$1 }
	$10 = *(*($3 + [12]))
	$11 = (CASTING int_64)(int_32 $9)
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$8 = $12
	$9 = [1]
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$8 = $12
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$13 = ($7 + [1])
	$7 = $13
	if ( $9 ){ goto $label$6 }
	$9 = [1]
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [18708])
	CALL eosio_assert(((int_64)$10 == (int_64)*(($1 + [88]))), [19449])
	$8 = ((int_64)*($1 + [80]) + (int_64)$11)
	*($1 + [80]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($1 + [80]) < (int_64)4611686018427387904), [19511])
	*($1 + [152]) = *(*(($3 + [4])))
	$7 = *(*(($3 + [8])))
	
.LABEL $label$1
	$9 = *($7 + [4])
	if ( ($9 == 0) ){ goto $label$7 }
	$10 = *(*($3 + [12]))
	$11 = (CASTING int_64)(int_32 $9)
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$8 = $12
	$9 = [1]
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$8 = $12
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$13 = ($7 + [1])
	$7 = $13
	if ( $9 ){ goto $label$12 }
	$9 = [1]
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$9 = [0]
	
.LABEL $label$8
	CALL eosio_assert($9, [18708])
	CALL eosio_assert(((int_64)$10 == (int_64)*(($1 + [104]))), [19449])
	$8 = ((int_64)*($1 + [96]) + (int_64)$11)
	*($1 + [96]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($1 + [96]) < (int_64)4611686018427387904), [19511])
	*($1 + [160]) = *(*(($3 + [4])))
	$7 = *(*(($3 + [8])))
	
.LABEL $label$7
	$9 = *($7 + [8])
	if ( ($9 == 0) ){ goto $label$13 }
	$10 = *(*($3 + [12]))
	$11 = (CASTING int_64)(int_32 $9)
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$8 = $12
	$9 = [1]
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$8 = $12
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$13 = ($7 + [1])
	$7 = $13
	if ( $9 ){ goto $label$18 }
	$9 = [1]
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$9 = [0]
	
.LABEL $label$14
	CALL eosio_assert($9, [18708])
	CALL eosio_assert(((int_64)$10 == (int_64)*(($1 + [120]))), [19449])
	$8 = ((int_64)*($1 + [112]) + (int_64)$11)
	*($1 + [112]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($1 + [112]) < (int_64)4611686018427387904), [19511])
	*($1 + [168]) = *(*(($3 + [4])))
	$7 = *(*(($3 + [8])))
	
.LABEL $label$13
	$7 = *($7 + [12])
	if ( ($7 == 0) ){ goto $label$19 }
	$10 = *(*($3 + [12]))
	$11 = (CASTING int_64)(int_32 $7)
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$8 = $12
	$9 = [1]
	$13 = $7
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$8 = $12
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$13 = ($7 + [1])
	$7 = $13
	if ( $9 ){ goto $label$24 }
	$9 = [1]
	$7 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$9 = [0]
	
.LABEL $label$20
	CALL eosio_assert($9, [18708])
	CALL eosio_assert(((int_64)$10 == (int_64)*(($1 + [136]))), [19449])
	$8 = ((int_64)*($1 + [128]) + (int_64)$11)
	*($1 + [128]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($1 + [128]) < (int_64)4611686018427387904), [19511])
	*($1 + [176]) = *(*(($3 + [4])))
	
.LABEL $label$19
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [19158])
	*($5 + [8]) = [0]
	CALL $305(($5 + [8]), $1)
	$9 = *($5 + [8])
	if ( ($9 <= [513]) ){ goto $label$26 }
	$7 = CALL $358($9)
	goto $label$25 
	
.LABEL $label$26
	$7 = ($4 - (($9 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$25
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = ($7 + $9)
	CALL $306(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [272]), $2, $7, $9)
	if ( ($9 <= [513]) ){ goto $label$27 }
	CALL $362($7)
	
.LABEL $label$27
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$28 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$28
	*($5 + [40]) = *(($1 + [248]))
	if ( (CALL $354(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$29 }
	$7 = *($1 + [276])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$30 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513475553721843712, ($5 + [32]), $6)
	*(($1 + [276])) = $7
	
.LABEL $label$30
	CALL db_idx64_update($7, $2, ($5 + [40]))
	
.LABEL $label$29
	$global$0 = ($5 + [48])
}

void .FUNC $149 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [268]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [16]) = (int_64)4
	*(($4 = $3) + [24]) = *(($1 + [248]))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	*($4 + [8]) = [0]
	CALL $305(($4 + [8]), $1)
	$6 = *($4 + [8])
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	CALL $306(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [272]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [40]) = *(($1 + [248]))
	if ( (CALL $354(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = *($1 + [276])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513475553721843712, ($4 + [32]), $5)
	*(($1 + [276])) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($4 + [40]))
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$5 = ($global$0 - [64])
	$global$0 = $5
	$6 = *($3 + [8])
	if ( ((int_64)$6 != (int_64)1397703940) ){ goto $label$2 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [17348]
	$9 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$8 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$10 = ($10 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$11 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$8 = ($8 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$9 = ((int_64)$11 | (int_64)$9)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$3 }
	*($5 + [40]) = $9
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$6 != (int_64)1480674564) ){ goto $label$1 }
	$6 = (int_64)0
	$11 = (int_64)59
	$8 = [17360]
	$9 = (int_64)0
	
.LOOP $label$9:
	$7 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$10 }
	$10 = *($8)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$10 = ($10 + [-91])
	goto $label$11 
	
.LABEL $label$12
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$10
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$7 | (int_64)$9)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$9 }
	*($5 + [40]) = $9
	
.LABEL $label$1
	*($5 + [32]) = ($0 + [48])
	CALL $94(($5 + [24]), ($5 + [32]), ($5 + [40]))
	CALL eosio_assert(((int_32)*($5 + [28]) != (int_32)[0]), [18728])
	CALL eosio_assert(((float_64)(float_64))(((float_64)(CASTING float_64)(int_64 *($1 + [48])) * (float_64)(float_64)0.1) - (CASTING float_64)(int_64 *($1 + [64]))) >= (float_64)(CASTING float_64)(int_64 *($3))), [18770])
	$8 = *($5 + [28])
	if ( ($8 == 0) ){ goto $label$14 }
	$10 = ($3 + [8])
	
.LOOP $label$15:
	if ( ((int_64)*(($8 + [32])) == (int_64)*($10)) ){ goto $label$13 }
	CALL $95(($5 + [24]))
	$8 = *($5 + [28])
	if ( $8 ){ goto $label$15 }
	
.LABEL $label$14
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($8 + [24])), [18800])
	CALL $183(($5 + [8]), $0, $1, $2, $10)
	$6 = *($5 + [8])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($5 + [16])), [19449])
	$11 = ((int_64)$6 + (int_64)*($3))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [19511])
	$6 = *($3 + [8])
	*($5 + [56]) = *($2)
	*($5 + [48]) = ($0 + [160])
	CALL $68($5, ($5 + [48]), ($5 + [56]))
	$8 = *($5 + [4])
	if ( ($8 == 0) ){ goto $label$17 }
	
.LOOP $label$18:
	if ( ((int_64)*($8 + [8]) != (int_64)*($5 + [56])) ){ goto $label$17 }
	if ( ((int_64)*(($8 + [24])) == (int_64)$6) ){ goto $label$16 }
	CALL $69($5)
	$8 = *($5 + [4])
	if ( $8 ){ goto $label$18 }
	
.LABEL $label$17
	CALL eosio_assert([0], [17865])
	$8 = *($5 + [4])
	
.LABEL $label$16
	CALL eosio_assert(((int_64)*($8 + [16]) >= (int_64)((int_64)$11 * (int_64)5)), [18824])
	$global$0 = ($5 + [64])
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [360])
	$4 = ($0 + [368])
	$5 = CALL db_lowerbound_i64(*($0 + [360]), *($4), (int_64)4513481673254256640, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $152($3, $5)
	$4 = CALL db_lowerbound_i64(*($3), *($4), (int_64)4513481673254256640, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL $152($3, $4)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	if ( (uint_64)((int_64))(*(*(CALL $209(($2 + [8])) + [4])) - *($5)) <= (int_64)150) ){ goto $label$1 }
	CALL eosio_assert([1], [19221])
	CALL eosio_assert([1], [18629])
	$4 = CALL db_next_i64(*($5 + [380]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $152($3, $4)
	
.LABEL $label$2
	CALL $210($3, $5)
	
.LABEL $label$1
	$6 = *($0)
	*($2) = $1
	CALL $211(($2 + [8]), $3, $6, $2)
	$global$0 = ($2 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = ($0 + [160])
	*($3 + [40]) = $4
	CALL $68(($3 + [32]), ($3 + [40]), $1)
	$5 = *($3 + [36])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($2 + [8])
	
.LOOP $label$3:
	if ( ((int_64)*($5 + [8]) != (int_64)*($1)) ){ goto $label$2 }
	if ( ((int_64)*(($5 + [24])) == (int_64)*($6)) ){ goto $label$1 }
	CALL $69(($3 + [32]))
	$5 = *($3 + [36])
	if ( $5 ){ goto $label$3 }
	
.LABEL $label$2
	$7 = *($0)
	*($3 + [20]) = $1
	*($3 + [16]) = $0
	*($3 + [24]) = $2
	CALL $207(($3 + [8]), $4, $7, ($3 + [16]))
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	$7 = *($0)
	$5 = *($3 + [36])
	*($3 + [16]) = $2
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [19026])
	CALL $208(*($3 + [40]), $5, $7, ($3 + [16]))
	$global$0 = ($3 + [48])
}

void .FUNC $147 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [24]) = (*($1 + [24]) + [1])
	*(($4 = $3) + [24]) = *(($1 + [32]))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	*($4 + [8]) = [0]
	CALL $310(($4 + [8]), $1)
	$6 = *($4 + [8])
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	CALL $311(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [40]) = *(($1 + [32]))
	if ( (CALL $354(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [96])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513481842761924608, ($4 + [32]), $5)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($4 + [40]))
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $146 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [8]) = (int_64)3
	*($1 + [24]) = (*($1 + [24]) + [1])
	*(($4 = $3) + [24]) = *(($1 + [32]))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	*($4 + [8]) = [0]
	CALL $310(($4 + [8]), $1)
	$6 = *($4 + [8])
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	CALL $311(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [40]) = *(($1 + [32]))
	if ( (CALL $354(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [96])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513481842761924608, ($4 + [32]), $5)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($4 + [40]))
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [536])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [520])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [528])), (int_64)-5969212543028166656, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $137($9, $10)
	*($3 + [4]) = [0]
	*($3) = $9
	$8 = *(*(CALL $138($3) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [536])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18872])
	*($1) = *($7)
	$6 = *($5 + [4])
	*($1 + [8]) = *($6)
	*(($1 + [16])) = *(($6 + [8]))
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [32]) = *(*($5 + [8]))
	$5 = *(*($5 + [12]) + [4])
	*($1 + [40]) = *($5 + [64])
	*(($1 + [48])) = *(($5 + [72]))
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($2 + [-12])
	CALL $309($3, $1)
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-5969212543028166656, *(*($0 + [8])), $8, $5, [52])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $140 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18708])
	*($0 + [40]) = (int_64)0
	*($0 + [24]) = [0]
	*(($1 = ($0 + [48]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [18708])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [18708])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [18708])
	return $0
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4513472877252575233, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [116]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $206($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4513472877252575232, $6))
	CALL eosio_assert(((int_32)*($4 + [116]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*(($4 + [128])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $278 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1 + [8]) = (int_64)1
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [24]))) = *(($3 + [8]))
	*($1 + [16]) = *($3)
	CALL eosio_assert([1], [18517])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($2 + [24]), $5, [8])
	$6 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)4513480743233519616, *(*($0 + [8])), $6, $2, [32])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $148 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [24]) = [0]
	*(($4 = $3) + [24]) = *(($1 + [32]))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	*($4 + [8]) = [0]
	CALL $310(($4 + [8]), $1)
	$6 = *($4 + [8])
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	CALL $311(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [40]) = *(($1 + [32]))
	if ( (CALL $354(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [96])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513481842761924608, ($4 + [32]), $5)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($4 + [40]))
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $239 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [296])
	$5 = *($4)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = ($3 + [280])
	$7 = CALL db_lowerbound_i64(*($6), *(($3 + [288])), (int_64)4513472877252575232, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $206($6, $7)
	*($2 + [12]) = [0]
	*($2 + [8]) = $6
	$5 = *(*(CALL $241(($2 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [296])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [18872])
	*($1) = *($4)
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	*($1 + [24]) = *(*($0 + [12]) + [24])
	$3 = *($0 + [16])
	*(($1 + [40])) = *(($3 + [8]))
	*($1 + [32]) = *($3)
	$8 = *(*($0 + [16]) + [8])
	$9 = *(*(*($0 + [20])))
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$5 = (uint_64)$8 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$5 = $10
	$4 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$5 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $4 ){ goto $label$7 }
	$4 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$4 = [0]
	
.LABEL $label$3
	CALL eosio_assert($4, [18708])
	*(($1 + [56])) = $8
	*($1 + [48]) = $9
	$8 = *(*(($0 + [16])) + [8])
	$9 = *(*(*(($0 + [20]))) + [4])
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$5 = (uint_64)$8 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$5 = $10
	$4 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$5 = $10
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $4 ){ goto $label$12 }
	$4 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$4 = [0]
	
.LABEL $label$8
	CALL eosio_assert($4, [18708])
	*(($1 + [72])) = $8
	*($1 + [64]) = $9
	$8 = *(*(($0 + [16])) + [8])
	$9 = *(*(*(($0 + [20]))) + [8])
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$5 = (uint_64)$8 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$5 = $10
	$4 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$5 = $10
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $4 ){ goto $label$17 }
	$4 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$4 = [0]
	
.LABEL $label$13
	CALL eosio_assert($4, [18708])
	*(($1 + [88])) = $8
	*($1 + [80]) = $9
	$8 = *(*(($0 + [16])) + [8])
	$9 = *(*(*(($0 + [20]))) + [12])
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$5 = (uint_64)$8 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$10 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$5 = $10
	$4 = [1]
	$6 = $3
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$5 = $10
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$3 < (int_32)[6])
	$6 = ($3 + [1])
	$3 = $6
	if ( $4 ){ goto $label$22 }
	$4 = [1]
	$3 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$4 = [0]
	
.LABEL $label$18
	CALL eosio_assert($4, [18708])
	*(($1 + [104])) = $8
	*($1 + [96]) = $9
	*($1 + [112]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$global$0 = ($2 + [16])
}

void .FUNC $238 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = *($0)
	CALL $239(*($0 + [4]), $1)
	*($2 + [128]) = ($2 + [116])
	*($2 + [124]) = $2
	*($2 + [120]) = $2
	CALL $240(($2 + [120]), $1)
	$4 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($3 + [8]), (int_64)4513472877252575232, *(*($0 + [8])), $4, $2, [116])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = ($3 + [8])
	$4 = *($3)
	$0 = *(($0 + [8]))
	$5 = *($0)
	$6 = *($1)
	*($2 + [136]) = *($1 + [16])
	*($1 + [124]) = CALL db_idx64_store($4, (int_64)4513472877252575232, $5, $6, ($2 + [136]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [136]) = *($1 + [8])
	*(($1 + [128])) = CALL db_idx64_store($5, (int_64)4513472877252575233, $4, $6, ($2 + [136]))
	$global$0 = ($2 + [144])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-4060986516896743424, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $218($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)-4060986516896743424, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*(($4 + [80])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $236 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18517])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18517])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [18517])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [24]) = (int_64)0
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18708])
	*(($1 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18708])
	*(($1 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$2 = $3
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$16 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert($6, [18708])
	return $0
	
.LABEL $label$12
	CALL eosio_assert([0], [18708])
	return $0
	
.LABEL $label$11
	CALL eosio_assert([0], [18708])
	return $0
}

int_32 .FUNC $234 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [112]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $233 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [32]) = (int_64)0
	*(($1 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [18708])
	*(($1 = ($0 + [56]))) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18708])
	*(($1 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$2 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [18708])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$2 = $3
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [18708])
	*(($1 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$2 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$25 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [18708])
	*($0 + [112]) = [0]
	return $0
}

void .FUNC $91 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	$2 = ($global$0 - [304])
	$global$0 = $2
	*($2 + [296]) = $1
	*(($3 = CALL _Znwj([208]))) = (int_64)8589934593
	*($3 + [8 align=4]) = (int_64)17179869187
	*($3 + [16 align=4]) = (int_64)25769803781
	*($3 + [24 align=4]) = (int_64)34359738375
	*($3 + [32 align=4]) = (int_64)42949672969
	*($3 + [40 align=4]) = (int_64)51539607563
	*($3 + [48 align=4]) = (int_64)73014444045
	*($3 + [56 align=4]) = (int_64)81604378642
	*($3 + [64 align=4]) = (int_64)90194313236
	*($3 + [72 align=4]) = (int_64)98784247830
	*($3 + [80 align=4]) = (int_64)107374182424
	*($3 + [88 align=4]) = (int_64)115964117018
	*($3 + [96 align=4]) = (int_64)124554051612
	*($3 + [104 align=4]) = (int_64)146028888097
	*($3 + [112]) = [35]
	*($2 + [280]) = $3
	*($2 + [284]) = $3
	$4 = ($3 + [208])
	*($2 + [288]) = $4
	*($3 + [116 align=4]) = (int_64)158913789988
	*($3 + [124 align=4]) = (int_64)167503724582
	*($3 + [132 align=4]) = (int_64)176093659176
	*($3 + [140 align=4]) = (int_64)184683593770
	*($3 + [148 align=4]) = (int_64)193273528364
	*($3 + [156 align=4]) = (int_64)214748364849
	*($3 + [164 align=4]) = (int_64)223338299443
	*($3 + [172 align=4]) = (int_64)231928234037
	*($3 + [180 align=4]) = (int_64)240518168631
	*($3 + [188 align=4]) = (int_64)249108103225
	*($3 + [196 align=4]) = (int_64)257698037819
	*($3 + [204]) = [61]
	*($2 + [284]) = $4
	*($2 + [272]) = ($0 + [320])
	*((($2 + [240]) + [16])) = *([0] + [19424])
	*($2 + [248]) = *([0] + [19416])
	*($2 + [240]) = *([0] + [19408])
	$5 = (($2 + [24]) | [1])
	$6 = (($2 + [40]) | [1])
	$7 = (($2 + [56]) | [1])
	$8 = (($2 + [72]) | [1])
	$9 = *($2 + [284])
	$10 = *($2 + [280])
	$11 = (($2 + [88]) + [8])
	$12 = [0]
	
.LOOP $label$2:
	CALL $125(($2 + [232]), ($2 + [272]), ($2 + [296]))
	$3 = *($2 + [236])
	if ( ($3 == 0) ){ goto $label$4 }
	
.LOOP $label$5:
	if ( ((int_64)*($3 + [8]) != (int_64)*($2 + [296])) ){ goto $label$4 }
	if ( ((int_32)$12 == (int_32)*($3 + [16])) ){ goto $label$3 }
	CALL $126(($2 + [232]))
	$3 = *($2 + [236])
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)[5]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$13 = ($10 + (*($3 + [208]) << [2]))
	$14 = ($13 + [4])
	$4 = ($4 - $14)
	$15 = int_32($4 >> [2])
	$16 = *($13)
	if ( ($4 == 0) ){ goto $label$6 }
	CALL memmove($13, $14, $4)
	$3 = *($2 + [236])
	
.LABEL $label$6
	$13 = ($10 + (*($3 + [216]) << [2]))
	$14 = ($13 + [4])
	$4 = (($13 + ($15 << [2])) - $14)
	$15 = int_32($4 >> [2])
	$17 = *($13)
	if ( ($4 == 0) ){ goto $label$7 }
	CALL memmove($13, $14, $4)
	$3 = *($2 + [236])
	
.LABEL $label$7
	$13 = ($10 + (*($3 + [224]) << [2]))
	$14 = ($13 + [4])
	$4 = (($13 + ($15 << [2])) - $14)
	$15 = int_32($4 >> [2])
	$18 = *($13)
	if ( ($4 == 0) ){ goto $label$8 }
	CALL memmove($13, $14, $4)
	$3 = *($2 + [236])
	
.LABEL $label$8
	$13 = ($10 + (*($3 + [232]) << [2]))
	$14 = ($13 + [4])
	$4 = (($13 + ($15 << [2])) - $14)
	$15 = int_32($4 >> [2])
	$19 = *($13)
	if ( ($4 == 0) ){ goto $label$9 }
	CALL memmove($13, $14, $4)
	$3 = *($2 + [236])
	
.LABEL $label$9
	$3 = ($10 + (*($3 + [240]) << [2]))
	$15 = ($3 + [4])
	$13 = (($13 + ($15 << [2])) - $15)
	$4 = int_32($13 >> [2])
	$20 = *($3)
	if ( ($13 == 0) ){ goto $label$10 }
	CALL memmove($3, $15, $13)
	
.LABEL $label$10
	*($11) = [0]
	*($2 + [88]) = (int_64)0
	$9 = ($3 + ($4 << [2]))
	$1 = (CASTING int_64)(int_32 $16)
	
.LOOP $label$11:
	$21 = ((uint_64)$1 / (uint_64)(int_64)10)
	$3 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$21 * (int_64)10))
	CALL $3($2, int_32((( ($3) | [48]) ? ($3 + [55]) : ($3 <= [10]) ) << [24]) >> [24]), ($2 + [88]))
	if ( (*($2 + [88]) & [1]) ){ goto $label$13 }
	*($2 + [88]) = [0]
	goto $label$12 
	
.LABEL $label$13
	*(*($11)) = [0]
	*($2 + [92]) = [0]
	
.LABEL $label$12
	CALL $326(($2 + [88]), [0])
	$3 = ($2 + [8])
	*($11) = *($3)
	*($2 + [88]) = *($2)
	$13 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $21
	if ( $13 ){ goto $label$11 }
	$13 = CALL $328(($2 + [88]), [19428])
	$4 = ($13 + [8])
	*(($22 = (($2 + [104]) + [8]))) = *($4)
	*($2 + [104]) = *($13)
	*($13) = (int_64)0
	*($4) = [0]
	*(($4 = (($2 + [72]) + [8]))) = [0]
	*($2 + [72]) = (int_64)0
	$1 = (CASTING int_64)(int_32 $17)
	
.LOOP $label$14:
	$21 = ((uint_64)$1 / (uint_64)(int_64)10)
	$13 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$21 * (int_64)10))
	CALL $3($2, int_32((( ($13) | [48]) ? ($13 + [55]) : ($13 <= [10]) ) << [24]) >> [24]), ($2 + [72]))
	if ( (*($2 + [72]) & [1]) ){ goto $label$16 }
	*($2 + [72]) = [0]
	goto $label$15 
	
.LABEL $label$16
	*(*($4)) = [0]
	*($2 + [76]) = [0]
	
.LABEL $label$15
	CALL $326(($2 + [72]), [0])
	*($4) = *($3)
	*($2 + [72]) = *($2)
	$13 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $21
	if ( $13 ){ goto $label$14 }
	$13 = *($2 + [72])
	$15 = ($13 & [1])
	$13 = CALL $330(($2 + [104]), ( *($4) ? $8 : $15 ), ( *($2 + [76]) ? uint_32($13 >> [1]) : $15 ))
	$15 = ($13 + [8])
	*(($23 = (($2 + [120]) + [8]))) = *($15)
	*($2 + [120]) = *($13)
	*($13) = (int_64)0
	*($15) = [0]
	$13 = CALL $328(($2 + [120]), [19428])
	$15 = ($13 + [8])
	*(($24 = (($2 + [136]) + [8]))) = *($15)
	*($2 + [136]) = *($13)
	*($13) = (int_64)0
	*($15) = [0]
	*(($15 = (($2 + [56]) + [8]))) = [0]
	*($2 + [56]) = (int_64)0
	$1 = (CASTING int_64)(int_32 $18)
	
.LOOP $label$17:
	$21 = ((uint_64)$1 / (uint_64)(int_64)10)
	$13 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$21 * (int_64)10))
	CALL $3($2, int_32((( ($13) | [48]) ? ($13 + [55]) : ($13 <= [10]) ) << [24]) >> [24]), ($2 + [56]))
	if ( (*($2 + [56]) & [1]) ){ goto $label$19 }
	*($2 + [56]) = [0]
	goto $label$18 
	
.LABEL $label$19
	*(*($15)) = [0]
	*($2 + [60]) = [0]
	
.LABEL $label$18
	CALL $326(($2 + [56]), [0])
	*($15) = *($3)
	*($2 + [56]) = *($2)
	$13 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $21
	if ( $13 ){ goto $label$17 }
	$13 = *($2 + [56])
	$14 = ($13 & [1])
	$13 = CALL $330(($2 + [136]), ( *($15) ? $7 : $14 ), ( *($2 + [60]) ? uint_32($13 >> [1]) : $14 ))
	$14 = ($13 + [8])
	*(($25 = (($2 + [152]) + [8]))) = *($14)
	*($2 + [152]) = *($13)
	*($13) = (int_64)0
	*($14) = [0]
	$13 = CALL $328(($2 + [152]), [19428])
	$14 = ($13 + [8])
	*(($26 = (($2 + [168]) + [8]))) = *($14)
	*($2 + [168]) = *($13)
	*($13) = (int_64)0
	*($14) = [0]
	*(($14 = (($2 + [40]) + [8]))) = [0]
	*($2 + [40]) = (int_64)0
	$1 = (CASTING int_64)(int_32 $19)
	
.LOOP $label$20:
	$21 = ((uint_64)$1 / (uint_64)(int_64)10)
	$13 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$21 * (int_64)10))
	CALL $3($2, int_32((( ($13) | [48]) ? ($13 + [55]) : ($13 <= [10]) ) << [24]) >> [24]), ($2 + [40]))
	if ( (*($2 + [40]) & [1]) ){ goto $label$22 }
	*($2 + [40]) = [0]
	goto $label$21 
	
.LABEL $label$22
	*(*($14)) = [0]
	*($2 + [44]) = [0]
	
.LABEL $label$21
	CALL $326(($2 + [40]), [0])
	*($14) = *($3)
	*($2 + [40]) = *($2)
	$13 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $21
	if ( $13 ){ goto $label$20 }
	$13 = *($2 + [40])
	$28 = ($13 & [1])
	$13 = CALL $330(($2 + [168]), ( *($14) ? $6 : $28 ), ( *($2 + [44]) ? uint_32($13 >> [1]) : $28 ))
	$28 = ($13 + [8])
	*(($27 = (($2 + [184]) + [8]))) = *($28)
	*($2 + [184]) = *($13)
	*($13) = (int_64)0
	*($28) = [0]
	$13 = CALL $328(($2 + [184]), [19428])
	$28 = ($13 + [8])
	*(($29 = (($2 + [200]) + [8]))) = *($28)
	*($2 + [200]) = *($13)
	*($13) = (int_64)0
	*($28) = [0]
	*(($28 = (($2 + [24]) + [8]))) = [0]
	*($2 + [24]) = (int_64)0
	$1 = (CASTING int_64)(int_32 $20)
	
.LOOP $label$23:
	$21 = ((uint_64)$1 / (uint_64)(int_64)10)
	$13 = (CASTING uint_32)(uint_64 (int_64))($1 - ((int_64)$21 * (int_64)10))
	CALL $3($2, int_32((( ($13) | [48]) ? ($13 + [55]) : ($13 <= [10]) ) << [24]) >> [24]), ($2 + [24]))
	if ( (*($2 + [24]) & [1]) ){ goto $label$25 }
	*($2 + [24]) = [0]
	goto $label$24 
	
.LABEL $label$25
	*(*($28)) = [0]
	*($2 + [28]) = [0]
	
.LABEL $label$24
	CALL $326(($2 + [24]), [0])
	*($28) = *($3)
	*($2 + [24]) = *($2)
	$13 = ((uint_64)$1 > (uint_64)(int_64)9)
	$1 = $21
	if ( $13 ){ goto $label$23 }
	$3 = *($2 + [24])
	$13 = ($3 & [1])
	$3 = CALL $330(($2 + [200]), ( *($28) ? $5 : $13 ), ( *($2 + [28]) ? uint_32($3 >> [1]) : $13 ))
	$13 = ($3 + [8])
	*(($30 = (($2 + [216]) + [8]))) = *($13)
	*($2 + [216]) = *($3)
	*($3) = (int_64)0
	*($13) = [0]
	if ( (*($2 + [24]) & [1]) ){ goto $label$48 }
	if ( (*($2 + [200]) & [1]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	CALL _ZdlPv(*($28))
	if ( ((*($2 + [200]) & [1]) == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv(*($29))
	if ( ((*($2 + [184]) & [1]) == 0) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	if ( (*($2 + [184]) & [1]) ){ goto $label$44 }
	
.LABEL $label$45
	if ( (*($2 + [40]) & [1]) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	CALL _ZdlPv(*($27))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$42 }
	
.LABEL $label$43
	CALL _ZdlPv(*($14))
	if ( ((*($2 + [168]) & [1]) == 0) ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	if ( (*($2 + [168]) & [1]) ){ goto $label$40 }
	
.LABEL $label$41
	if ( (*($2 + [152]) & [1]) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	CALL _ZdlPv(*($26))
	if ( ((*($2 + [152]) & [1]) == 0) ){ goto $label$38 }
	
.LABEL $label$39
	CALL _ZdlPv(*($25))
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$38
	if ( (*($2 + [56]) & [1]) ){ goto $label$36 }
	
.LABEL $label$37
	if ( (*($2 + [136]) & [1]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	CALL _ZdlPv(*($15))
	if ( ((*($2 + [136]) & [1]) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv(*($24))
	if ( ((*($2 + [120]) & [1]) == 0) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	if ( (*($2 + [120]) & [1]) ){ goto $label$32 }
	
.LABEL $label$33
	if ( (*($2 + [72]) & [1]) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL _ZdlPv(*($23))
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*($4))
	if ( ((*($2 + [104]) & [1]) == 0) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	if ( (*($2 + [104]) & [1]) ){ goto $label$28 }
	
.LABEL $label$29
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$28
	CALL _ZdlPv(*($22))
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*($11))
	
.LABEL $label$26
	*(($28 = ($2 + [16]))) = $20
	*($2 + [8]) = $18
	*($2 + [12]) = $19
	*($2) = $16
	*($2 + [4]) = $17
	$13 = ($16 & [15])
	$4 = ($17 & [15])
	if ( ((uint_32)$4 > (uint_32)$13) ){ goto $label$69 }
	if ( ($4 <= $13) ){ goto $label$68 }
	if ( ((uint_32)($17 & [240]) <= (uint_32)($16 & [240])) ){ goto $label$68 }
	
.LABEL $label$69
	*($2 + [4]) = $16
	*($2) = $17
	$3 = $17
	$14 = ($18 & [15])
	if ( ((uint_32)$14 > (uint_32)$13) ){ goto $label$66 }
	goto $label$67 
	
.LABEL $label$68
	$3 = $16
	$16 = $17
	$13 = $4
	$14 = ($18 & [15])
	if ( ((uint_32)$14 > (uint_32)$13) ){ goto $label$66 }
	
.LABEL $label$67
	if ( ($14 <= $13) ){ goto $label$70 }
	if ( ((uint_32)($18 & [240]) > (uint_32)($16 & [240])) ){ goto $label$66 }
	
.LABEL $label$70
	$15 = $16
	$16 = $18
	$13 = $14
	$4 = ($19 & [15])
	if ( ((uint_32)$4 > (uint_32)$13) ){ goto $label$64 }
	goto $label$65 
	
.LABEL $label$66
	*($2 + [8]) = $16
	*($2 + [4]) = $18
	$15 = $18
	$4 = ($19 & [15])
	if ( ((uint_32)$4 > (uint_32)$13) ){ goto $label$64 }
	
.LABEL $label$65
	if ( ($4 <= $13) ){ goto $label$71 }
	if ( ((uint_32)($19 & [240]) > (uint_32)($16 & [240])) ){ goto $label$64 }
	
.LABEL $label$71
	$14 = $16
	$16 = $19
	$13 = $4
	$18 = ($20 & [15])
	if ( ((uint_32)$18 > (uint_32)$13) ){ goto $label$62 }
	goto $label$63 
	
.LABEL $label$64
	*($2 + [12]) = $16
	*($2 + [8]) = $19
	$14 = $19
	$18 = ($20 & [15])
	if ( ((uint_32)$18 > (uint_32)$13) ){ goto $label$62 }
	
.LABEL $label$63
	if ( ($18 <= $13) ){ goto $label$72 }
	if ( ((uint_32)($20 & [240]) > (uint_32)($16 & [240])) ){ goto $label$62 }
	
.LABEL $label$72
	$20 = $16
	$4 = ($3 & [15])
	$28 = ($15 & [15])
	if ( ((uint_32)$28 > (uint_32)$4) ){ goto $label$60 }
	goto $label$61 
	
.LABEL $label$62
	*($28) = $16
	*($2 + [12]) = $20
	$4 = ($3 & [15])
	$28 = ($15 & [15])
	if ( ((uint_32)$28 > (uint_32)$4) ){ goto $label$60 }
	
.LABEL $label$61
	if ( ($28 <= $4) ){ goto $label$73 }
	if ( ((uint_32)($15 & [240]) > (uint_32)($3 & [240])) ){ goto $label$60 }
	
.LABEL $label$73
	$13 = $3
	$3 = $15
	$4 = $28
	$16 = ($14 & [15])
	if ( ((uint_32)$16 > (uint_32)$4) ){ goto $label$58 }
	goto $label$59 
	
.LABEL $label$60
	*($2 + [4]) = $3
	*($2) = $15
	$13 = $15
	$16 = ($14 & [15])
	if ( ((uint_32)$16 > (uint_32)$4) ){ goto $label$58 }
	
.LABEL $label$59
	if ( ($16 <= $4) ){ goto $label$74 }
	if ( ((uint_32)($14 & [240]) > (uint_32)($3 & [240])) ){ goto $label$58 }
	
.LABEL $label$74
	$15 = $3
	$3 = $14
	$4 = $16
	$14 = ($20 & [15])
	if ( ((uint_32)$14 > (uint_32)$4) ){ goto $label$56 }
	goto $label$57 
	
.LABEL $label$58
	*($2 + [8]) = $3
	*($2 + [4]) = $14
	$15 = $14
	$14 = ($20 & [15])
	if ( ((uint_32)$14 > (uint_32)$4) ){ goto $label$56 }
	
.LABEL $label$57
	if ( ($14 <= $4) ){ goto $label$75 }
	if ( ((uint_32)($20 & [240]) > (uint_32)($3 & [240])) ){ goto $label$56 }
	
.LABEL $label$75
	$20 = $3
	$3 = ($13 & [15])
	$28 = ($15 & [15])
	if ( ((uint_32)$28 > (uint_32)$3) ){ goto $label$54 }
	goto $label$55 
	
.LABEL $label$56
	*($2 + [12]) = $3
	*($2 + [8]) = $20
	$3 = ($13 & [15])
	$28 = ($15 & [15])
	if ( ((uint_32)$28 > (uint_32)$3) ){ goto $label$54 }
	
.LABEL $label$55
	if ( ($28 <= $3) ){ goto $label$76 }
	if ( ((uint_32)($15 & [240]) > (uint_32)($13 & [240])) ){ goto $label$54 }
	
.LABEL $label$76
	$14 = $13
	$13 = $15
	$3 = $28
	$4 = ($20 & [15])
	if ( ((uint_32)$4 > (uint_32)$3) ){ goto $label$52 }
	goto $label$53 
	
.LABEL $label$54
	*($2 + [4]) = $13
	*($2) = $15
	$14 = $15
	$4 = ($20 & [15])
	if ( ((uint_32)$4 > (uint_32)$3) ){ goto $label$52 }
	
.LABEL $label$53
	if ( ($4 <= $3) ){ goto $label$77 }
	if ( ((uint_32)($20 & [240]) > (uint_32)($13 & [240])) ){ goto $label$52 }
	
.LABEL $label$77
	$20 = $13
	$3 = ($14 & [15])
	$4 = $3
	if ( ((uint_32)$4 > (uint_32)$3) ){ goto $label$50 }
	goto $label$51 
	
.LABEL $label$52
	*($2 + [8]) = $13
	*($2 + [4]) = $20
	$3 = ($14 & [15])
	if ( ((uint_32)$4 > (uint_32)$3) ){ goto $label$50 }
	
.LABEL $label$51
	if ( ($4 <= $3) ){ goto $label$49 }
	if ( ((uint_32)($20 & [240]) <= (uint_32)($14 & [240])) ){ goto $label$49 }
	
.LABEL $label$50
	*($2 + [4]) = $14
	*($2) = $20
	
.LABEL $label$49
	CALL $191(($2 + [200]), $2)
	*((($2 + [240]) + ($12 << [2]))) = CALL $192($2)
	$1 = *($0)
	$3 = *($2 + [236])
	*($27) = $2
	*($2 + [188]) = ($2 + [200])
	*($2 + [184]) = ($2 + [216])
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [19026])
	CALL $193(*($2 + [272]), $3, $1, ($2 + [184]))
	if ( ((*($2 + [200]) & [1]) == 0) ){ goto $label$78 }
	CALL _ZdlPv(*($29))
	
.LABEL $label$78
	if ( ((*($2 + [216]) & [1]) == 0) ){ goto $label$79 }
	CALL _ZdlPv(*($30))
	
.LABEL $label$79
	$4 = $9
	$12 = ($12 + [1])
	if ( ((int_32)$12 != (int_32)[5]) ){ goto $label$2 }
	
.LABEL $label$1
	*($2 + [284]) = $9
	$3 = ($0 + [720])
	$13 = ($0 + [728])
	$4 = CALL db_lowerbound_i64(*($0 + [720]), *($13), (int_64)4732892228187340800, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$80 }
	$4 = CALL $194($3, $4)
	$13 = CALL db_lowerbound_i64(*($3), *($13), (int_64)4732892228187340800, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$80 }
	CALL $194($3, $13)
	*($2 + [4]) = [0]
	*($2) = $3
	if ( (uint_64)((int_64))(*(*(CALL $195($2) + [4])) - *($4)) <= (int_64)31) ){ goto $label$80 }
	CALL eosio_assert([1], [19221])
	CALL eosio_assert([1], [18629])
	$13 = CALL db_next_i64(*($4 + [44]), $2)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$81 }
	CALL $194($3, $13)
	
.LABEL $label$81
	CALL $196($3, $4)
	
.LABEL $label$80
	$1 = *($0)
	*($2) = $0
	*($2 + [4]) = ($2 + [296])
	*($2 + [8]) = ($2 + [240])
	CALL $197(($2 + [216]), $3, $1, $2)
	if ( ($10 == 0) ){ goto $label$82 }
	*($2 + [284]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$82
	$global$0 = ($2 + [304])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [268]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [16]) = (int_64)3
	*(($4 = $3) + [24]) = *(($1 + [248]))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	*($4 + [8]) = [0]
	CALL $305(($4 + [8]), $1)
	$6 = *($4 + [8])
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	CALL $306(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [272]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [40]) = *(($1 + [248]))
	if ( (CALL $354(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = *($1 + [276])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513475553721843712, ($4 + [32]), $5)
	*(($1 + [276])) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($4 + [40]))
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $230 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$3 = *($0 + [4])
	$4 = *(($3 + [128]))
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4513472877252575233, ($1 + [8]), *($3))
	*((*(($0 + [4])) + [128])) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$7), [18333])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$4 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)4513472877252575232, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $206($7, $4)
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$7), [18333])
	
.LABEL $label$3
	*(($2 + [128])) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $192 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$1 = *($0)
	$2 = ($1 & [15])
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$4 }
	$3 = *($0 + [4])
	if ( ((int_32)($3 & [15]) != (int_32)[10]) ){ goto $label$4 }
	$4 = *($0 + [8])
	if ( ((int_32)($4 & [15]) != (int_32)[11]) ){ goto $label$4 }
	$5 = *($0 + [12])
	if ( ((int_32)($5 & [15]) != (int_32)[12]) ){ goto $label$4 }
	$6 = *($0 + [16])
	if ( ((int_32)($6 & [15]) == (int_32)[13]) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = *($0 + [12])
	$7 = ($5 & [15])
	$6 = *($0 + [16])
	if ( ((int_32)(($6 & [15]) - $7) != (int_32)[1]) ){ goto $label$2 }
	$4 = *($0 + [8])
	$8 = ($4 & [15])
	if ( ((int_32)($7 - $8) != (int_32)[1]) ){ goto $label$2 }
	$3 = *($0 + [4])
	$7 = ($3 & [15])
	if ( ((int_32)($8 - $7) != (int_32)[1]) ){ goto $label$2 }
	if ( ((int_32)($7 - $2) != (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($1 & [240])
	if ( ((int_32)$8 != (int_32)($6 & [240])) ){ goto $label$2 }
	if ( ((int_32)$8 != (int_32)($5 & [240])) ){ goto $label$2 }
	if ( ((int_32)$8 != (int_32)($4 & [240])) ){ goto $label$2 }
	$7 = [0]
	if ( ((int_32)$8 == (int_32)($3 & [240])) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((uint_32)$2 > (uint_32)[5]) ){ goto $label$5 }
	$4 = (*($0 + [4]) & [15])
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$5 }
	$3 = (*($0 + [8]) & [15])
	if ( ((uint_32)$3 > (uint_32)[5]) ){ goto $label$5 }
	$8 = ($5 & [15])
	if ( ((uint_32)$8 > (uint_32)[5]) ){ goto $label$5 }
	$9 = ($6 & [15])
	if ( ((uint_32)$9 > (uint_32)[5]) ){ goto $label$5 }
	$7 = [1]
	if ( ((((($4 + $2) + $3) + $8) + $9) <= [11]) ){ goto $label$1 }
	
.LABEL $label$5
	$7 = [2]
	if ( ((((int_32)$5 ^ (int_32)$1) & [15]) == 0) ){ goto $label$1 }
	$4 = *($0 + [4])
	if ( ((((int_32)$6 ^ (int_32)$4) & [15]) == 0) ){ goto $label$1 }
	if ( ($2 <= [11]) ){ goto $label$6 }
	if ( (($4 & [15]) <= [11]) ){ goto $label$6 }
	if ( (($5 & [15]) <= [11]) ){ goto $label$6 }
	if ( ((*($0 + [8]) & [15]) <= [11]) ){ goto $label$6 }
	$7 = [3]
	if ( ((uint_32)($6 & [15]) > (uint_32)[10]) ){ goto $label$1 }
	
.LABEL $label$6
	$3 = *($0 + [8])
	$0 = ($3 & [15])
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$8 }
	if ( ((((int_32)$6 ^ (int_32)$5) & [15]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)($6 & [15])) ){ goto $label$9 }
	$7 = [4]
	if ( ((int_32)$2 == (int_32)($4 & [15])) ){ goto $label$1 }
	
.LABEL $label$9
	$7 = [6]
	$0 = ($1 & [240])
	if ( ((int_32)$0 != (int_32)($5 & [240])) ){ goto $label$1 }
	if ( ((int_32)$0 != (int_32)($3 & [240])) ){ goto $label$1 }
	if ( ((int_32)$0 != (int_32)($4 & [240])) ){ goto $label$1 }
	return ( [5] ? [6] : ((int_32)$0 == (int_32)($6 & [240])) )
	
.LABEL $label$7
	$7 = [4]
	
.LABEL $label$1
	return $7
}

void .FUNC $260 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = ($3 + [456])
	$5 = *($4)
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = ($3 + [440])
	$7 = CALL db_lowerbound_i64(*($6), *(($3 + [448])), (int_64)4513481846004934848, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $199($6, $7)
	*($2 + [12]) = [0]
	*($2 + [8]) = $6
	$5 = *(*(CALL $200(($2 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [456])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [18872])
	*($1) = *($4)
	$3 = *($0 + [4])
	*($1 + [48]) = *($3 + [40])
	*($1 + [40]) = *($3 + [32])
	*($1 + [32]) = *($3 + [24])
	*($1 + [24]) = *($3 + [16])
	*($1 + [16]) = *($3 + [8])
	*($1 + [8]) = *($3)
	*(($1 + [72])) = *(($3 + [64]))
	*($1 + [64]) = *($3 + [56])
	$3 = *($0 + [4])
	*($1 + [80]) = *($3 + [72])
	*(($1 + [88])) = *(($3 + [80]))
	*($1 + [56]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$3 = *($0 + [4])
	*(($1 + [104])) = *(($3 + [96]))
	*($1 + [96]) = *($3 + [88])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $261 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $262 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = CALL $264($0)
	*($0 + [108]) = $1
	$1 = *($2)
	CALL $265(*($2 + [4]), $4)
	*($3 + [112]) = ($3 + [100])
	*($3 + [108]) = $3
	*($3 + [104]) = $3
	CALL $130(($3 + [104]), $4)
	$5 = *($0)
	*($0 + [112]) = CALL db_store_i64(*($1 + [8]), (int_64)4513481846004645888, *(*($2 + [8])), $5, $3, [100])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($1 + [8]))
	$6 = *(*(($2 + [8])))
	$7 = *($0)
	*($3 + [120]) = *($0 + [8])
	*($0 + [116]) = CALL db_idx64_store($5, (int_64)4513481846004645888, $6, $7, ($3 + [120]))
	$global$0 = ($3 + [128])
	return $0
}

void .FUNC $303 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($3 + [273])
	*($2 + [8]) = ($3 + [272])
	*($2 + [16]) = ($3 + [274])
	*($2 + [20]) = ($3 + [275])
	*($2 + [24]) = ($3 + [276])
	*($2 + [28]) = ($3 + [277])
	*($2 + [32]) = ($3 + [278])
	*($2 + [36]) = ($3 + [279])
	*($2 + [40]) = ($3 + [280])
	*($2 + [44]) = ($3 + [281])
	*($2 + [48]) = ($3 + [282])
	*($2 + [52]) = ($3 + [283])
	*($2 + [56]) = ($3 + [284])
	*($2 + [60]) = ($3 + [285])
	*($2 + [64]) = ($3 + [286])
	*($2 + [68]) = ($3 + [287])
	*($2 + [72]) = ($3 + [288])
	*($2 + [76]) = ($3 + [289])
	*($2 + [80]) = ($3 + [290])
	*($2 + [88]) = ($3 + [292])
	*($2 + [84]) = ($3 + [291])
	*($2 + [92]) = ($3 + [293])
	*($2 + [96]) = ($3 + [294])
	*($2 + [100]) = ($3 + [295])
	*($2 + [104]) = ($3 + [296])
	*($2 + [108]) = ($3 + [297])
	*($2 + [112]) = ($3 + [298])
	*($2 + [116]) = ($3 + [299])
	*($2 + [120]) = ($3 + [300])
	*($2 + [124]) = ($3 + [301])
	*($2 + [128]) = ($3 + [302])
	*($2 + [132]) = ($3 + [303])
	*($2 + [136]) = ($3 + [304])
	*($2 + [140]) = ($3 + [305])
	*($2 + [144]) = ($3 + [306])
	*($2 + [148]) = ($3 + [307])
	*($2 + [152]) = ($3 + [308])
	*($2 + [156]) = ($3 + [309])
	*($2 + [164]) = ($3 + [311])
	*($2 + [160]) = ($3 + [310])
	*($2 + [168]) = ($3 + [312])
	*($2 + [172]) = ($3 + [313])
	*($2 + [176]) = ($3 + [314])
	*($2 + [180]) = ($3 + [315])
	*($2 + [184]) = ($3 + [316])
	*($2 + [188]) = ($3 + [317])
	*($2 + [192]) = ($3 + [318])
	*($2 + [196]) = ($3 + [319])
	*($2 + [200]) = ($3 + [320])
	*($2 + [204]) = ($3 + [321])
	*($2 + [208]) = ($3 + [322])
	*($2 + [212]) = ($3 + [323])
	*($2 + [216]) = ($3 + [324])
	*($2 + [220]) = ($3 + [325])
	*($2 + [224]) = ($3 + [326])
	*($2 + [228]) = ($3 + [327])
	*($2 + [232]) = ($3 + [328])
	*($2 + [240]) = ($3 + [330])
	*($2 + [236]) = ($3 + [329])
	*($2 + [244]) = ($3 + [331])
	*($2 + [248]) = ($3 + [332])
	*($2 + [252]) = ($3 + [333])
	*($2 + [256]) = ($3 + [334])
	*($2 + [260]) = ($3 + [335])
	*($2 + [264]) = ($3 + [336])
	*($2 + [268]) = ($3 + [337])
	CALL $245(($2 + [8]), $2)
	$3 = *($0)
	CALL $74(*($1), ($3 + [340]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [18407])
	CALL memcpy(($3 + [352]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [385])
	*($2 + [8]) = ($3 + [384])
	*($2 + [16]) = ($3 + [386])
	*($2 + [20]) = ($3 + [387])
	*($2 + [24]) = ($3 + [388])
	*($2 + [28]) = ($3 + [389])
	*($2 + [32]) = ($3 + [390])
	*($2 + [36]) = ($3 + [391])
	*($2 + [40]) = ($3 + [392])
	*($2 + [44]) = ($3 + [393])
	*($2 + [48]) = ($3 + [394])
	*($2 + [52]) = ($3 + [395])
	*($2 + [56]) = ($3 + [396])
	*($2 + [60]) = ($3 + [397])
	*($2 + [64]) = ($3 + [398])
	*($2 + [68]) = ($3 + [399])
	*($2 + [72]) = ($3 + [400])
	*($2 + [76]) = ($3 + [401])
	*($2 + [80]) = ($3 + [402])
	*($2 + [88]) = ($3 + [404])
	*($2 + [84]) = ($3 + [403])
	*($2 + [92]) = ($3 + [405])
	*($2 + [96]) = ($3 + [406])
	*($2 + [100]) = ($3 + [407])
	*($2 + [104]) = ($3 + [408])
	*($2 + [108]) = ($3 + [409])
	*($2 + [112]) = ($3 + [410])
	*($2 + [116]) = ($3 + [411])
	*($2 + [120]) = ($3 + [412])
	*($2 + [124]) = ($3 + [413])
	*($2 + [128]) = ($3 + [414])
	*($2 + [132]) = ($3 + [415])
	*($2 + [136]) = ($3 + [416])
	*($2 + [140]) = ($3 + [417])
	*($2 + [144]) = ($3 + [418])
	*($2 + [148]) = ($3 + [419])
	*($2 + [152]) = ($3 + [420])
	*($2 + [156]) = ($3 + [421])
	*($2 + [164]) = ($3 + [423])
	*($2 + [160]) = ($3 + [422])
	*($2 + [168]) = ($3 + [424])
	*($2 + [172]) = ($3 + [425])
	*($2 + [176]) = ($3 + [426])
	*($2 + [180]) = ($3 + [427])
	*($2 + [184]) = ($3 + [428])
	*($2 + [188]) = ($3 + [429])
	*($2 + [192]) = ($3 + [430])
	*($2 + [196]) = ($3 + [431])
	*($2 + [200]) = ($3 + [432])
	*($2 + [204]) = ($3 + [433])
	*($2 + [208]) = ($3 + [434])
	*($2 + [212]) = ($3 + [435])
	*($2 + [216]) = ($3 + [436])
	*($2 + [220]) = ($3 + [437])
	*($2 + [224]) = ($3 + [438])
	*($2 + [228]) = ($3 + [439])
	*($2 + [232]) = ($3 + [440])
	*($2 + [240]) = ($3 + [442])
	*($2 + [236]) = ($3 + [441])
	*($2 + [244]) = ($3 + [443])
	*($2 + [248]) = ($3 + [444])
	*($2 + [252]) = ($3 + [445])
	*($2 + [256]) = ($3 + [446])
	*($2 + [260]) = ($3 + [447])
	*($2 + [264]) = ($3 + [448])
	*($2 + [268]) = ($3 + [449])
	CALL $245(($2 + [8]), $2)
	CALL $74(*($1), ($3 + [452]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [18407])
	CALL memcpy(($3 + [464]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($3 + [497])
	*($2 + [8]) = ($3 + [496])
	*($2 + [16]) = ($3 + [498])
	*($2 + [20]) = ($3 + [499])
	*($2 + [24]) = ($3 + [500])
	*($2 + [28]) = ($3 + [501])
	*($2 + [32]) = ($3 + [502])
	*($2 + [36]) = ($3 + [503])
	*($2 + [40]) = ($3 + [504])
	*($2 + [44]) = ($3 + [505])
	*($2 + [48]) = ($3 + [506])
	*($2 + [52]) = ($3 + [507])
	*($2 + [56]) = ($3 + [508])
	*($2 + [60]) = ($3 + [509])
	*($2 + [64]) = ($3 + [510])
	*($2 + [68]) = ($3 + [511])
	*($2 + [72]) = ($3 + [512])
	*($2 + [76]) = ($3 + [513])
	*($2 + [80]) = ($3 + [514])
	*($2 + [88]) = ($3 + [516])
	*($2 + [84]) = ($3 + [515])
	*($2 + [92]) = ($3 + [517])
	*($2 + [96]) = ($3 + [518])
	*($2 + [100]) = ($3 + [519])
	*($2 + [104]) = ($3 + [520])
	*($2 + [108]) = ($3 + [521])
	*($2 + [112]) = ($3 + [522])
	*($2 + [116]) = ($3 + [523])
	*($2 + [120]) = ($3 + [524])
	*($2 + [124]) = ($3 + [525])
	*($2 + [128]) = ($3 + [526])
	*($2 + [132]) = ($3 + [527])
	*($2 + [136]) = ($3 + [528])
	*($2 + [140]) = ($3 + [529])
	*($2 + [144]) = ($3 + [530])
	*($2 + [148]) = ($3 + [531])
	*($2 + [152]) = ($3 + [532])
	*($2 + [156]) = ($3 + [533])
	*($2 + [164]) = ($3 + [535])
	*($2 + [160]) = ($3 + [534])
	*($2 + [168]) = ($3 + [536])
	*($2 + [172]) = ($3 + [537])
	*($2 + [176]) = ($3 + [538])
	*($2 + [180]) = ($3 + [539])
	*($2 + [184]) = ($3 + [540])
	*($2 + [188]) = ($3 + [541])
	*($2 + [192]) = ($3 + [542])
	*($2 + [196]) = ($3 + [543])
	*($2 + [200]) = ($3 + [544])
	*($2 + [204]) = ($3 + [545])
	*($2 + [208]) = ($3 + [546])
	*($2 + [212]) = ($3 + [547])
	*($2 + [216]) = ($3 + [548])
	*($2 + [220]) = ($3 + [549])
	*($2 + [224]) = ($3 + [550])
	*($2 + [228]) = ($3 + [551])
	*($2 + [232]) = ($3 + [552])
	*($2 + [240]) = ($3 + [554])
	*($2 + [236]) = ($3 + [553])
	*($2 + [244]) = ($3 + [555])
	*($2 + [248]) = ($3 + [556])
	*($2 + [252]) = ($3 + [557])
	*($2 + [256]) = ($3 + [558])
	*($2 + [260]) = ($3 + [559])
	*($2 + [264]) = ($3 + [560])
	*($2 + [268]) = ($3 + [561])
	CALL $245(($2 + [8]), $2)
	CALL $74(*($1), ($3 + [564]))
	$global$0 = ($2 + [272])
}

void .FUNC $302 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[31]), [18407])
	CALL memcpy(($3 + [128]), *($4 + [4]), [32])
	*($4 + [4]) = (*($4 + [4]) + [32])
	$4 = *($0)
	*($2) = *($1)
	*($2 + [12]) = ($4 + [161])
	*($2 + [8]) = ($4 + [160])
	*($2 + [16]) = ($4 + [162])
	*($2 + [20]) = ($4 + [163])
	*($2 + [24]) = ($4 + [164])
	*($2 + [28]) = ($4 + [165])
	*($2 + [32]) = ($4 + [166])
	*($2 + [36]) = ($4 + [167])
	*($2 + [40]) = ($4 + [168])
	*($2 + [44]) = ($4 + [169])
	*($2 + [48]) = ($4 + [170])
	*($2 + [52]) = ($4 + [171])
	*($2 + [56]) = ($4 + [172])
	*($2 + [60]) = ($4 + [173])
	*($2 + [64]) = ($4 + [174])
	*($2 + [68]) = ($4 + [175])
	*($2 + [72]) = ($4 + [176])
	*($2 + [76]) = ($4 + [177])
	*($2 + [80]) = ($4 + [178])
	*($2 + [88]) = ($4 + [180])
	*($2 + [84]) = ($4 + [179])
	*($2 + [92]) = ($4 + [181])
	*($2 + [96]) = ($4 + [182])
	*($2 + [100]) = ($4 + [183])
	*($2 + [104]) = ($4 + [184])
	*($2 + [108]) = ($4 + [185])
	*($2 + [112]) = ($4 + [186])
	*($2 + [116]) = ($4 + [187])
	*($2 + [120]) = ($4 + [188])
	*($2 + [124]) = ($4 + [189])
	*($2 + [128]) = ($4 + [190])
	*($2 + [132]) = ($4 + [191])
	*($2 + [136]) = ($4 + [192])
	*($2 + [140]) = ($4 + [193])
	*($2 + [144]) = ($4 + [194])
	*($2 + [148]) = ($4 + [195])
	*($2 + [152]) = ($4 + [196])
	*($2 + [156]) = ($4 + [197])
	*($2 + [164]) = ($4 + [199])
	*($2 + [160]) = ($4 + [198])
	*($2 + [168]) = ($4 + [200])
	*($2 + [172]) = ($4 + [201])
	*($2 + [176]) = ($4 + [202])
	*($2 + [180]) = ($4 + [203])
	*($2 + [184]) = ($4 + [204])
	*($2 + [188]) = ($4 + [205])
	*($2 + [192]) = ($4 + [206])
	*($2 + [196]) = ($4 + [207])
	*($2 + [200]) = ($4 + [208])
	*($2 + [204]) = ($4 + [209])
	*($2 + [208]) = ($4 + [210])
	*($2 + [212]) = ($4 + [211])
	*($2 + [216]) = ($4 + [212])
	*($2 + [220]) = ($4 + [213])
	*($2 + [224]) = ($4 + [214])
	*($2 + [228]) = ($4 + [215])
	*($2 + [232]) = ($4 + [216])
	*($2 + [240]) = ($4 + [218])
	*($2 + [236]) = ($4 + [217])
	*($2 + [244]) = ($4 + [219])
	*($2 + [248]) = ($4 + [220])
	*($2 + [252]) = ($4 + [221])
	*($2 + [256]) = ($4 + [222])
	*($2 + [260]) = ($4 + [223])
	*($2 + [264]) = ($4 + [224])
	*($2 + [268]) = ($4 + [225])
	CALL $245(($2 + [8]), $2)
	CALL $74(*($1), ($4 + [228]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [18407])
	CALL memcpy(($4 + [240]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2 + [8]) = $4
	CALL $303(($2 + [8]), $1)
	$global$0 = ($2 + [272])
}

void .FUNC $301 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $74(*($1), (*($0) + [292]))
	$0 = *($0)
	CALL $74(*($1), ($0 + [304]))
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [320]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $74(*($1), ($0 + [328]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [344]), *($1 + [4]), [8])
	$2 = (*($1 + [4]) + [8])
	*($1 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [352]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $263 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $307 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [48]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [104]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $306 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [168]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [176]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $212(CALL $212(CALL $212(CALL $212(CALL $212($0, ($1 + [184])), ($1 + [196])), ($1 + [208])), ($1 + [220])), ($1 + [232]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [248]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [256]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [264]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $305 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [176])
	*($0) = $2
	$3 = *($1 + [184])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [188])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [184]))
	$3 = ( *(($1 + [188])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [196])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [200])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [196]))
	$3 = ( *(($1 + [200])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [208])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [212])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$3 = *(($1 + [208]))
	$3 = ( *(($1 + [212])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$6
	$3 = *($1 + [220])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [224])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	*($0) = $2
	$3 = *(($1 + [220]))
	$3 = ( *(($1 + [224])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$8
	$3 = *($1 + [232])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [236])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	$1 = *(($1 + [232]))
	$1 = ( *(($1 + [236])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$10
	*($0) = ($2 + [20])
	return $0
}

void .FUNC $304 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $309 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $308 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $282 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $268 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [176])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [160])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [168])), (int_64)-3020379698556063232, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $217($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $270(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [176])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18872])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	$5 = *($5 + [8])
	*(($6 = ($1 + [24]))) = *(($5 + [8]))
	*($1 + [16]) = *($5)
	$2 = $2
	$5 = ($2 + [-32])
	$global$0 = $5
	CALL eosio_assert([1], [18517])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [18517])
	$7 = ($1 + [8])
	CALL memcpy(($2 + [-24]), $7, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($2 + [-16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($2 + [-8]), $6, [8])
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-3020379698556063232, *(*($0 + [8])), $8, $5, [32])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [8]) = *($7)
	*($1 + [40]) = CALL db_idx64_store($8, (int_64)-3020379698556063232, $11, $12, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	float_64 $9
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = CALL $127([8460], ($4 + [8]), $0)
	$6 = *($5)
	if ( $6 ){ goto $label$1 }
	$6 = CALL _Znwj([40])
	CALL $322(($6 + [16]), $0)
	*($6) = (int_64)0
	*($6 + [8]) = *($4 + [8])
	*($5) = $6
	*($6 + [32]) = (int_64)0
	$0 = $6
	$7 = *(*([0] + [8460]))
	if ( ($7 == 0) ){ goto $label$2 }
	*([0] + [8460]) = $7
	$0 = *($5)
	
.LABEL $label$2
	CALL $128(*([0] + [8464]), $0)
	*([0] + [8468]) = (*([0] + [8468]) + [1])
	
.LABEL $label$1
	$8 = *(($6 + [32]))
	$0 = CALL $127([8460], ($4 + [12]), $2)
	$6 = *($0)
	if ( $6 ){ goto $label$3 }
	$6 = CALL _Znwj([40])
	CALL $322(($6 + [16]), $2)
	*($6) = (int_64)0
	*($6 + [8]) = *($4 + [12])
	*($0) = $6
	*($6 + [32]) = (int_64)0
	$2 = $6
	$5 = *(*([0] + [8460]))
	if ( ($5 == 0) ){ goto $label$4 }
	*([0] + [8460]) = $5
	$2 = *($0)
	
.LABEL $label$4
	CALL $128(*([0] + [8464]), $2)
	*([0] + [8468]) = (*([0] + [8468]) + [1])
	
.LABEL $label$3
	$2 = [1]
	$9 = *(($6 + [32]))
	if ( ((float_64)$8 > (float_64)$9) ){ goto $label$6 }
	if ( ((float_64)$8 != (float_64)$9) ){ goto $label$5 }
	$1 = *($3)
	$0 = ($1 & [15])
	$5 = *($1)
	$6 = ($5 & [15])
	if ( ((uint_32)$6 > (uint_32)$0) ){ goto $label$6 }
	$2 = [0]
	if ( ($6 <= $0) ){ goto $label$6 }
	$2 = ((uint_32)($5 & [240]) > (uint_32)($1 & [240]))
	
.LABEL $label$6
	$global$0 = ($4 + [16])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [16])
	return [0]
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC $286 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($0 + [4])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$2 }
	$6 = ($1 + [16])
	$10 = ($9 & [1])
	$9 = *($4)
	$9 = ( *($4 + [4]) ? uint_32($9 >> [1]) : $10 )
	$8 = ($7 & [1])
	$7 = *($1 + [16])
	$7 = ( *($1 + [20]) ? uint_32($7 >> [1]) : $8 )
	$11 = ( $7 ? $9 : ($7 <= $9) )
	if ( ($11 == 0) ){ goto $label$3 }
	$8 = CALL $354(( *($4 + [8]) ? ($4 + [1]) : $10 ), ( *($1 + [24]) ? ($6 + [1]) : $8 ), $11)
	if ( ($8 == 0) ){ goto $label$3 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_32)$9 >= (uint_32)$7) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)$1) ){ goto $label$9 }
	$9 = *($1)
	if ( ($9 == 0) ){ goto $label$8 }
	
.LOOP $label$10:
	$7 = $9
	$9 = *($7 + [4])
	if ( $9 ){ goto $label$10 }
	goto $label$7 
	
.LABEL $label$9
	$7 = $1
	if ( *($1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$9 = $1
	
.LOOP $label$11:
	$7 = *($9 + [8])
	$3 = ((int_32)*($7) == (int_32)$9)
	$9 = $7
	if ( $3 ){ goto $label$11 }
	
.LABEL $label$7
	$5 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *(($7 + [20])) ? uint_32($3 >> [1]) : $5 )
	$6 = ($9 & [1])
	$9 = *($4)
	$9 = ( *($4 + [4]) ? uint_32($9 >> [1]) : $6 )
	$8 = ( $9 ? $3 : ($9 <= $3) )
	if ( ($8 == 0) ){ goto $label$13 }
	$6 = CALL $354(( *(($7 + [24])) ? (($7 + [16]) + [1]) : $5 ), ( *($4 + [8]) ? ($4 + [1]) : $6 ), $8)
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$12 }
	goto $label$4 
	
.LABEL $label$13
	if ( ((uint_32)$3 >= (uint_32)$9) ){ goto $label$4 }
	
.LABEL $label$12
	if ( (*($1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	*($2) = $7
	return ($7 + [4])
	
.LABEL $label$5
	*($2) = $1
	return $1
	
.LABEL $label$4
	return CALL $127($0, $2, $4)
	
.LABEL $label$1
	$10 = ($9 & [1])
	$9 = *(($1 + [16]))
	$9 = ( *(($1 + [20])) ? uint_32($9 >> [1]) : $10 )
	$8 = ($7 & [1])
	$7 = *($4)
	$7 = ( *(($4 + [4])) ? uint_32($7 >> [1]) : $8 )
	$11 = ( $7 ? $9 : ($7 <= $9) )
	if ( ($11 == 0) ){ goto $label$16 }
	$6 = CALL $354(( *($1 + [24]) ? ($6 + [1]) : $10 ), ( *($4 + [8]) ? ($4 + [1]) : $8 ), $11)
	if ( ($6 == 0) ){ goto $label$16 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	if ( ((uint_32)$9 >= (uint_32)$7) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = *($1 + [4])
	if ( ($7 == 0) ){ goto $label$18 }
	
.LOOP $label$19:
	$9 = $7
	$7 = *($9)
	if ( $7 ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$9 = *($1 + [8])
	if ( ((int_32)*($9) == (int_32)$1) ){ goto $label$17 }
	$3 = ($1 + [8])
	
.LOOP $label$20:
	$7 = *($3)
	$3 = ($7 + [8])
	$9 = *($7 + [8])
	if ( ((int_32)$7 != (int_32)*($9)) ){ goto $label$20 }
	
.LABEL $label$17
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$22 }
	$5 = ($3 & [1])
	$3 = *($4)
	$3 = ( *(($4 + [4])) ? uint_32($3 >> [1]) : $5 )
	$6 = ($7 & [1])
	$7 = *($9 + [16])
	$7 = ( *($9 + [20]) ? uint_32($7 >> [1]) : $6 )
	$8 = ( $7 ? $3 : ($7 <= $3) )
	if ( ($8 == 0) ){ goto $label$23 }
	$6 = CALL $354(( *($4 + [8]) ? ($4 + [1]) : $5 ), ( *($9 + [24]) ? (($9 + [16]) + [1]) : $6 ), $8)
	if ( ($6 == 0) ){ goto $label$23 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$21 }
	
.LABEL $label$22
	$7 = ($1 + [4])
	if ( (*($7) == 0) ){ goto $label$24 }
	*($2) = $9
	return $9
	
.LABEL $label$24
	*($2) = $1
	return $7
	
.LABEL $label$21
	return CALL $127($0, $2, $4)
	
.LABEL $label$14
	*($2) = $1
	*($3) = $1
	return $3
}

int_32 .FUNC $287 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [176]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $74(CALL $74(CALL $74(CALL $74(CALL $74($0, ($1 + [184])), ($1 + [196])), ($1 + [208])), ($1 + [220])), ($1 + [232]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [248]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [256]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [264]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $284 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18978])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5920943410927747072)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18924])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18924])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $220(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $285 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [268]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [16]) = (int_64)2
	*(($5 = $4) + [24]) = *(($1 + [248]))
	$6 = *($1)
	CALL $324(($1 + [184]), *($3))
	CALL $324(($1 + [196]), *($3 + [4]))
	CALL $324(($1 + [208]), *($3 + [8]))
	CALL $324(($1 + [220]), *($3 + [12]))
	CALL $324(($1 + [232]), *($3 + [16]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [19158])
	*($5 + [8]) = [0]
	CALL $305(($5 + [8]), $1)
	$7 = *($5 + [8])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($7)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $7)
	CALL $306(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [272]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [40]) = *(($1 + [248]))
	if ( (CALL $354(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = *($1 + [276])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513475553721843712, ($5 + [32]), $6)
	*(($1 + [276])) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [8])
	$6 = ((int_64)$5 & (int_64)255)
	$7 = (int_64)($6 == 0)
	if ( $7 ){ goto $label$2 }
	$8 = (int_64))((int_64)0 - $6)
	$9 = (int_64)1
	
.LOOP $label$3:
	$9 = ((int_64)$9 * (int_64)10)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)0) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = (int_64)1
	
.LABEL $label$1
	$10 = (CASTING uint_32)(uint_64 $6)
	$3 = ($3 - (($10 + [16]) & [496]))
	$global$0 = $3
	*(($3 + $10)) = [0]
	$11 = *($2)
	if ( $7 ){ goto $label$4 }
	$8 = ((int_64)$11 % (int_64)$9)
	$6 = ((int_64)$6 + (int_64)-1)
	$2 = (($3 + ((CASTING uint_32)(uint_64 $5) & [255])) + [-1])
	
.LOOP $label$5:
	$12 = ((int_64)$8 / (int_64)10)
	*($2) = ((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$12 * (int_64)10))) + [48])
	$2 = ($2 + [-1])
	$8 = $12
	$6 = ((int_64)$6 + (int_64)-1)
	if ( ((int_64)$6 > (int_64)-1) ){ goto $label$5 }
	
.LABEL $label$4
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$8 = ((int_64)$11 / (int_64)$9)
	
.LOOP $label$6:
	$9 = ((uint_64)$8 / (uint_64)(int_64)10)
	$2 = (CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$9 * (int_64)10))
	CALL $3(($4 + [64]), int_32((( ($2) | [48]) ? ($2 + [55]) : ($2 <= [10]) ) << [24]) >> [24]), ($4 + [16]))
	if ( (*($4 + [16]) & [1]) ){ goto $label$8 }
	*($4 + [16]) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*((($4 + [16]) + [8]))) = [0]
	*($4 + [20]) = [0]
	
.LABEL $label$7
	CALL $326(($4 + [16]), [0])
	*((($4 + [16]) + [8])) = *((($4 + [64]) + [8]))
	*($4 + [16]) = *($4 + [64])
	$2 = ((uint_64)$8 > (uint_64)(int_64)9)
	$8 = $9
	if ( $2 ){ goto $label$6 }
	$2 = CALL $328(($4 + [16]), [19784])
	$7 = ($2 + [8])
	*((($4 + [32]) + [8])) = *($7)
	*($4 + [32]) = *($2)
	*($2) = (int_64)0
	*($7) = [0]
	$2 = CALL $328(($4 + [32]), $3)
	$3 = ($2 + [8])
	*((($4 + [48]) + [8])) = *($3)
	*($4 + [48]) = *($2)
	*($2) = (int_64)0
	*($3) = [0]
	$2 = CALL $328(($4 + [48]), [19786])
	$3 = ($2 + [8])
	*((($4 + [64]) + [8])) = *($3)
	*($4 + [64]) = *($2)
	*($2) = (int_64)0
	*($3) = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$8 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( (int_64)($8) == 0) ){ goto $label$10 }
	
.LOOP $label$11:
	CALL $329($4, int_32(((CASTING uint_32)(uint_64 $8) << [24]) >> [24]))
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$11 }
	$3 = *(($4 + [8]))
	$7 = *($4 + [4])
	$2 = *($4)
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	$3 = [0]
	$2 = [0]
	
.LABEL $label$9
	$10 = ($2 & [1])
	$2 = CALL $330(($4 + [64]), ( $3 ? ($4 | [1]) : $10 ), ( $7 ? uint_32(($2 & [254]) >> [1]) : $10 ))
	$8 = *($2)
	*($2) = (int_64)0
	*($0) = $8
	$2 = ($2 + [8])
	*(($0 + [8])) = *($2)
	*($2) = [0]
	if ( (*($4) & [1]) ){ goto $label$20 }
	if ( (*($4 + [64]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($4 + [72]))
	$2 = [1]
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$2 = [1]
	if ( (*($4 + [48]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($4 + [32]) & $2) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($4 + [56]))
	if ( ((*($4 + [32]) & $2) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($4 + [40]))
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( (*($4 + [16]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [24])))
	$global$0 = ($4 + [80])
}

int_32 .FUNC $288 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [232]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [240])))
	if ( ((*($1 + [220]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($1 + [220]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [228])))
	if ( ((*($1 + [208]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($1 + [208]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($1 + [216])))
	if ( ((*($1 + [196]) & [1]) == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((*($1 + [196]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($1 + [204])))
	if ( (*($1 + [184]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($1 + [184]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($1 + [192])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$13 }
	CALL _ZdlPv($1)
	
.LABEL $label$13
	return $0
}

int_32 .FUNC $289 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$1 }
	$4 = ($2 + [1])
	$5 = ($2 + [8])
	
.LOOP $label$3:
	$7 = ($0 + [16])
	$12 = ($11 & [1])
	$11 = *($2)
	$10 = ($2 + [4])
	$11 = ( *($10) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($0 + [16])
	$8 = ($0 + [20])
	$6 = ( *($8) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$7 }
	$9 = CALL $354(( *($5) ? $4 : $12 ), ( *(($0 + [24])) ? ($7 + [1]) : $9 ), $13)
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = *($0)
	if ( $6 ){ goto $label$4 }
	*($1) = $0
	return $0
	
.LABEL $label$5
	$12 = ($11 & [1])
	$11 = *($7)
	$11 = ( *($8) ? uint_32($11 >> [1]) : $12 )
	$9 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $9 )
	$13 = ( $6 ? $11 : ($6 <= $11) )
	if ( ($13 == 0) ){ goto $label$9 }
	$7 = CALL $354(( *(($0 + [24])) ? ($7 + [1]) : $12 ), ( *($5) ? $4 : $9 ), $13)
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$2 }
	
.LABEL $label$8
	$3 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$2 }
	$0 = $3
	
.LABEL $label$4
	$3 = $0
	$0 = $6
	goto $label$3 
	
.LABEL $label$2
	*($1) = $0
	return $3
	
.LABEL $label$1
	*($1) = $3
	return $3
}

void .FUNC $183 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [16])
	$global$0 = $5
	*($0) = (int_64)0
	$6 = *($4)
	*($0 + [8]) = $6
	CALL eosio_assert([1], [18659])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [18708])
	*($5 + [8]) = ($1 + [280])
	CALL $101($5, ($5 + [8]), $3)
	$4 = *($5 + [4])
	if ( ($4 == 0) ){ goto $label$6 }
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((int_64)*($4 + [16]) != (int_64)*($3)) ){ goto $label$6 }
	if ( ((int_64)*($4 + [8]) != (int_64)*($2)) ){ goto $label$8 }
	CALL eosio_assert(((int_64)*(($4 + [40])) == (int_64)$6), [19449])
	$7 = ((int_64)$7 + (int_64)*($4 + [32]))
	*($0) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [19511])
	
.LABEL $label$8
	CALL $102($5)
	$4 = *($5 + [4])
	if ( $4 ){ goto $label$7 }
	
.LABEL $label$6
	$global$0 = ($5 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4513473976872484864, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [280]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $187($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4513473976872484864, $6))
	CALL eosio_assert(((int_32)*($4 + [280]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*($4 + [288]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([120])
	$6 = CALL $264($5)
	*($5 + [108]) = $0
	CALL $307(($3 + [32]), $6)
	*($5 + [116]) = [-1]
	*($5 + [112]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $263(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $340($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $184($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [18517])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [18517])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $237(CALL $236($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $340($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([304])) + [28]) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [132 align=4]) = (int_64)0
	*($5 + [140 align=4]) = (int_64)0
	*($5 + [148 align=4]) = (int_64)0
	*($5 + [156 align=4]) = (int_64)0
	*($5 + [164 align=4]) = (int_64)0
	*($5 + [172 align=4]) = (int_64)0
	*($5 + [180 align=4]) = (int_64)0
	*($5 + [188 align=4]) = (int_64)0
	*($5 + [196 align=4]) = (int_64)0
	*($5 + [248 align=4]) = (int_64)0
	*($5 + [256 align=4]) = (int_64)0
	*($5 + [264 align=4]) = (int_64)0
	*($5 + [280]) = $0
	CALL $244(($3 + [32]), $5)
	*($5 + [288]) = [-1]
	*($5 + [284]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $243(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $151($1)
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $186 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	$1 = CALL memcpy($1, (*($3) + [88]), [72])
	$5 = *($1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [19158])
	*($4 + [88]) = ($4 + [66])
	*($4 + [84]) = $4
	*($4 + [80]) = $4
	CALL $227(($4 + [80]), $1)
	CALL db_update_i64(*($1 + [76]), $2, $4, [66])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $358 (int_32 $0)
{
	return CALL $359([8780], $0)
}

int_32 .FUNC $359 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $360($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [19879])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $354 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $355 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $356 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $357 (int_32 $0)
{
	*($0) = [0]
}

int_64 .FUNC $350 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $349($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $342()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $349($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [20001]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $348($0, (int_64)0)
	*(CALL $342()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $349($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $349($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $349($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $349($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [20001])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [20001]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20001]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $349($0)
	$5 = *(($6 + [20001]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $349($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [20001]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [20257]))
	$8 = (int_64)0
	$5 = *(($6 + [20001]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20001]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $349($0)
	$5 = *(($6 + [20001]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $349($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [20001]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $348($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [20001]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [20001]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $349($0) + [20001]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $342()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $342()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $342()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $351 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $348($3, (int_64)0)
	$4 = CALL $350($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $352 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $348($3, (int_64)0)
	$4 = CALL $350($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $353 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL $160($0, $1)
}

int_32 .FUNC $310 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = (*($0) + [36])
	*($0) = $2
	$3 = *($1 + [40])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [40]))
	$3 = ( *(($1 + [44])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [52])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [56])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [52]))
	$3 = ( *(($1 + [56])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [64])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$3 = *(($1 + [64]))
	$3 = ( *(($1 + [68])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$6
	$1 = *($1 + [76])
	$3 = *(($1 + [80]))
	$5 = ($3 - $1)
	$4 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$8 }
	$2 = (($5 & [-8]) + $2)
	
.LABEL $label$8
	*($0) = $2
	return $0
}

int_32 .FUNC $311 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $312(CALL $212(CALL $212(CALL $212($0, ($1 + [40])), ($1 + [52])), ($1 + [64])), ($1 + [76]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $21 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_32 $15, int_32 $16, int_32 $17, int_32 $18, int_64 $19, int_32 $20, int_32 $21)
{
	CALL require_auth(*($0))
	CALL require_recipient($2)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $358($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18407])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [18407])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $362($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	float_64 $22
	$2 = ($global$0 - [208])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [400])
	$5 = *(($0 + [428]))
	$4 = *(($0 + [424]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [108]) == (int_32)$3), [18333])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [408])), (int_64)4513481846004645888, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $124($3, $6)
	CALL eosio_assert(((int_32)*($7 + [108]) == (int_32)$3), [18333])
	
.LABEL $label$1
	$5 = [0]
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [17925])
	$1 = CALL current_time()
	CALL eosio_assert(((uint_32)*($7 + [48]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))), [17941])
	CALL eosio_assert((int_64)(*($7 + [24]) == 0), [17706])
	$9 = ( (int_64)1397703940 ? (int_64)1480674564 : ((int_32)*($7 + [16]) == (int_32)[1]) )
	$10 = ($7 + [8])
	$1 = *($7 + [8])
	if ( ((int_64)$1 == (int_64)9999999999) ){ goto $label$5 }
	$14 = ($0 + [640])
	$4 = *(($0 + [668]))
	$15 = *(($0 + [664]))
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$10:
	$6 = ($4 + [-24])
	$13 = *($6)
	if ( ((int_64)*($13) == (int_64)$1) ){ goto $label$9 }
	$4 = $6
	if ( ((int_32)$15 != (int_32)$6) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$15 == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($13 + [88]) == (int_32)$14), [18333])
	if ( ((int_64)*($13 + [8]) == (int_64)3) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$13 = [0]
	$6 = CALL db_find_i64(*($14), *(($0 + [648])), (int_64)4513481842761924608, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$13 = CALL $65($14, $6)
	CALL eosio_assert(((int_32)*($13 + [88]) == (int_32)$14), [18333])
	
.LABEL $label$11
	if ( ((int_64)*($13 + [8]) != (int_64)3) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $165($0, *($10))
	$global$0 = ($2 + [208])
	return 
	
.LABEL $label$6
	if ( ((int_32)*(($7 + [16])) == (int_32)*($13 + [16])) ){ goto $label$12 }
	$11 = *($0)
	CALL eosio_assert($8, [19026])
	CALL eosio_assert(((int_32)*($7 + [108]) == (int_32)$3), [19061])
	CALL eosio_assert(((int_64)*(($0 + [400])) == (int_64)CALL eosio_assert0()), [19107])
	$6 = ($7 + [8])
	*($2 + [200]) = *($6)
	*($7 + [16]) = *(($13 + [16]))
	$1 = *($7)
	CALL eosio_assert([1], [19158])
	*($2 + [184]) = (($2 + [48]) + [100])
	*($2 + [180]) = ($2 + [48])
	*($2 + [176]) = ($2 + [48])
	CALL $130(($2 + [176]), $7)
	CALL db_update_i64(*($7 + [112]), $11, ($2 + [48]), [100])
	$4 = ($0 + [416])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$13 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($2) = *($6)
	if ( (CALL $354(($2 + [200]), $2, [8]) == 0) ){ goto $label$14 }
	$6 = *($7 + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*(($0 + [400])), *(($0 + [408])), (int_64)4513481846004645888, ($2 + [160]), $1)
	*(($7 + [116])) = $6
	
.LABEL $label$15
	CALL db_idx64_update($6, $11, $2)
	
.LABEL $label$14
	$9 = ( (int_64)1397703940 ? (int_64)1480674564 : ((int_32)*(($13 + [16])) == (int_32)[1]) )
	
.LABEL $label$12
	*($2 + [160]) = ($0 + [200])
	CALL $105(($2 + [176]), ($2 + [160]), $10)
	$6 = *($2 + [180])
	if ( ($6 == 0) ){ goto $label$16 }
	$4 = ($13 + [16])
	
.LOOP $label$17:
	if ( ((int_64)*($6 + [40]) != (int_64)*($10)) ){ goto $label$16 }
	if ( ((int_32)*($6 + [32]) != (int_32)*($4)) ){ goto $label$18 }
	CALL $132(($2 + [176]))
	$6 = *($2 + [180])
	if ( $6 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $64($0, ($6 + [8]), ($6 + [48]))
	$1 = *($2 + [176])
	*($2 + [48]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [19221])
	CALL $132(($2 + [48]))
	CALL $111(*($2 + [160]), $6)
	$1 = *($2 + [48])
	*($2 + [176]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$17 }
	
.LABEL $label$16
	*($2 + [200]) = ($0 + [560])
	CALL $166($2, ($2 + [200]), $10)
	$6 = *($2 + [4])
	if ( ($6 == 0) ){ goto $label$5 }
	$4 = ($13 + [16])
	
.LOOP $label$19:
	if ( ((int_64)*($6 + [8]) != (int_64)*($10)) ){ goto $label$5 }
	if ( ((int_32)*(*($2 + [180]) + [32]) != (int_32)*($4)) ){ goto $label$20 }
	CALL $167($2)
	$6 = *($2 + [4])
	if ( $6 ){ goto $label$19 }
	goto $label$5 
	
.LABEL $label$20
	CALL $64($0, ($6 + [16]), ($6 + [24]))
	$1 = *($2)
	*($2 + [48]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [19221])
	CALL $167(($2 + [48]))
	CALL $168(*($2 + [200]), $6)
	$1 = *($2 + [48])
	*($2) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( $6) ){ goto $label$19 }
	
.LABEL $label$5
	CALL eosio_assert([1], [18659])
	$11 = (uint_64)$9 >> (uint_64)(int_64)8
	$1 = $11)
	
.LOOP $label$23:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$12 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$1 = $12
	$4 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$1 = $12
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $4 ){ goto $label$25 }
	$4 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [18708])
	CALL eosio_assert([1], [18659])
	$1 = $11
	
.LOOP $label$27:
	$13 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$12 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$1 = $12
	$13 = [1]
	$5 = $6
	$6 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$1 = $12
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$29 }
	$13 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$27 }
	
.LABEL $label$26
	CALL eosio_assert($13, [18708])
	CALL eosio_assert([1], [18659])
	if ( ((int_64)$9 != (int_64)1397703940) ){ goto $label$35 }
	$6 = [0]
	$1 = $11
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$12 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$37 }
	$1 = $12
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$36 }
	goto $label$33 
	
.LABEL $label$37
	$1 = $12
	
.LOOP $label$38:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$38 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$36 }
	goto $label$33 
	
.LABEL $label$35
	$6 = [0]
	$1 = $11
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$12 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$1 = $12
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$39 }
	goto $label$31 
	
.LABEL $label$40
	$1 = $12
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$41 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$39 }
	goto $label$31 
	
.LABEL $label$34
	$5 = [0]
	
.LABEL $label$33
	CALL eosio_assert($5, [18708])
	$16 = (int_64)50000
	goto $label$30 
	
.LABEL $label$32
	$5 = [0]
	
.LABEL $label$31
	CALL eosio_assert($5, [18708])
	$16 = (int_64)100000000
	
.LABEL $label$30
	*($2 + [40]) = ($0 + [560])
	*($2 + [32]) = ($0 + [200])
	CALL $105(($2 + [24]), ($2 + [32]), $10)
	$6 = *($2 + [28])
	if ( ($6 == 0) ){ goto $label$43 }
	$17 = (($2 + [48]) + [72])
	$14 = (($2 + [176]) + [8])
	$1 = (int_64)0
	$4 = ($7 + [16])
	$15 = [0]
	
.LOOP $label$45:
	if ( ((int_64)*($6 + [40]) != (int_64)*($10)) ){ goto $label$44 }
	if ( ((int_32)*($6 + [32]) != (int_32)*($4)) ){ goto $label$49 }
	CALL $169(($2 + [16]), ($2 + [40]), ($6 + [8]))
	$5 = *($2 + [28])
	*(($13 = ($2 + [8]))) = *(($5 + [56]))
	*($2) = *($5 + [48])
	$6 = *($2 + [20])
	if ( ($6 == 0) ){ goto $label$50 }
	if ( ((int_64)*($6 + [16]) != (int_64)*($5 + [8])) ){ goto $label$50 }
	
.LOOP $label$51:
	if ( ((int_64)*($6 + [8]) != (int_64)*($10)) ){ goto $label$52 }
	if ( ((int_64)*(($6 + [32])) == (int_64)$9) ){ goto $label$48 }
	
.LABEL $label$52
	CALL $170(($2 + [16]))
	$6 = *($2 + [20])
	if ( ($6 == 0) ){ goto $label$50 }
	if ( ((int_64)*($6 + [16]) == (int_64)*(*($2 + [28]) + [8])) ){ goto $label$51 }
	
.LABEL $label$50
	$6 = *($2 + [28])
	$12 = *($6 + [24])
	if ( ((int_64)$12 == (int_64)2) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	CALL $132(($2 + [24]))
	$6 = *($2 + [28])
	if ( $6 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$48
	CALL eosio_assert(((int_64)$9 == (int_64)*($13)), [19449])
	$12 = ((int_64)*($2) + (int_64)*($6 + [24]))
	*($2) = $12
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($2) < (int_64)4611686018427387904), [19511])
	$12 = *($2 + [16])
	*($2 + [48]) = $12
	$6 = (CASTING uint_32)(uint_64 (uint_64)$12 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [19221])
	CALL $170(($2 + [48]))
	CALL $168(*($2 + [40]), $6)
	$6 = *($2 + [28])
	$12 = *($6 + [24])
	if ( ((int_64)$12 != (int_64)2) ){ goto $label$46 }
	
.LABEL $label$47
	CALL $64($0, ($6 + [8]), $2)
	$12 = *($2 + [24])
	*($2 + [48]) = $12
	$6 = (CASTING uint_32)(uint_64 (uint_64)$12 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [19221])
	CALL $132(($2 + [48]))
	CALL $111(*($2 + [32]), $6)
	*($2 + [24]) = *($2 + [48])
	$6 = *($2 + [28])
	if ( $6 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$46
	if ( ((int_64)$12 != (int_64)1) ){ goto $label$54 }
	CALL eosio_assert(((int_64)*($13) == (int_64)$9), [19815])
	if ( ((int_64)*($2) >= (int_64)$16) ){ goto $label$53 }
	CALL $64($0, (*($2 + [28]) + [8]), $2)
	$12 = *($2 + [24])
	*($2 + [48]) = $12
	$6 = (CASTING uint_32)(uint_64 (uint_64)$12 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [19221])
	CALL $132(($2 + [48]))
	CALL $111(*($2 + [32]), $6)
	*($2 + [24]) = *($2 + [48])
	$6 = *($2 + [28])
	if ( $6 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$54
	CALL eosio_assert(((int_64)*($13) == (int_64)$9), [19449])
	$1 = ((int_64)*($2) + (int_64)$1)
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [19511])
	$15 = ($15 + [1])
	CALL $132(($2 + [24]))
	$6 = *($2 + [28])
	if ( $6 ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$53
	$18 = *($0)
	$6 = *($2 + [28])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19026])
	$5 = *($2 + [32])
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$5), [19061])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL eosio_assert0()), [19107])
	$19 = ($6 + [8])
	*($14) = *($19)
	*($6 + [48]) = *($2)
	*(($6 + [56])) = *($13)
	$20 = ($6 + [40])
	*($2 + [176]) = *($20)
	$12 = *($6)
	CALL eosio_assert([1], [19158])
	*((($2 + [160]) + [8])) = $17
	*($2 + [164]) = ($2 + [48])
	*($2 + [160]) = ($2 + [48])
	CALL $110(($2 + [160]), $6)
	CALL db_update_i64(*($6 + [76]), $18, ($2 + [48]), [72])
	if ( (uint_64)($12 <= *($5 + [16])) ){ goto $label$55 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$55
	*($2 + [200]) = *($20)
	if ( (CALL $354(($2 + [176]), ($2 + [200]), [8]) == 0) ){ goto $label$56 }
	$21 = ($6 + [80])
	$20 = *($21)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$57 }
	$20 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5371973418988895232, ($2 + [192]), $12)
	*($21) = $20
	
.LABEL $label$57
	CALL db_idx64_update($20, $18, ($2 + [200]))
	
.LABEL $label$56
	*($2 + [200]) = *($19)
	if ( (CALL $354($14, ($2 + [200]), [8]) == 0) ){ goto $label$58 }
	$19 = ($6 + [84])
	$6 = *($19)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$59 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5371973418988895233, ($2 + [192]), $12)
	*($19) = $6
	
.LABEL $label$59
	CALL db_idx64_update($6, $18, ($2 + [200]))
	
.LABEL $label$58
	CALL eosio_assert(((int_64)*($13) == (int_64)$9), [19449])
	$1 = ((int_64)*($2) + (int_64)$1)
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [19511])
	$15 = ($15 + [1])
	CALL $132(($2 + [24]))
	$6 = *($2 + [28])
	if ( $6 ){ goto $label$45 }
	
.LABEL $label$44
	if ( ($15 == 0) ){ goto $label$43 }
	CALL $105(($2 + [192]), ($2 + [32]), $10)
	$6 = *($2 + [196])
	if ( ($6 == 0) ){ goto $label$60 }
	$20 = (($2 + [48]) + [72])
	$22 = (CASTING float_64)(int_64 $1)
	$13 = (($2 + [176]) + [8])
	$4 = ($7 + [16])
	
.LOOP $label$61:
	if ( ((int_64)*($6 + [40]) != (int_64)*($10)) ){ goto $label$60 }
	if ( ((int_32)*($6 + [32]) != (int_32)*($4)) ){ goto $label$62 }
	$12 = *($0)
	CALL eosio_assert([1], [19026])
	$5 = *($2 + [32])
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$5), [19061])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL eosio_assert0()), [19107])
	*($6 + [24]) = (int_64)1
	$14 = ($6 + [8])
	*($13) = *($14)
	*($6 + [64]) = ((float_64)(CASTING float_64)(int_64 *(*($2 + [196]) + [48])) / (float_64)$22)
	$19 = ($6 + [40])
	*($2 + [176]) = *($19)
	$11 = *($6)
	CALL eosio_assert([1], [19158])
	*(($2 + [8])) = $20
	*($2 + [4]) = ($2 + [48])
	*($2) = ($2 + [48])
	CALL $110($2, $6)
	CALL db_update_i64(*($6 + [76]), $12, ($2 + [48]), [72])
	if ( (uint_64)($11 <= *($5 + [16])) ){ goto $label$63 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$63
	*($2 + [160]) = *($19)
	if ( (CALL $354(($2 + [176]), ($2 + [160]), [8]) == 0) ){ goto $label$64 }
	$17 = ($6 + [80])
	$19 = *($17)
	if ( ((int_32)$19 > (int_32)[-1]) ){ goto $label$65 }
	$19 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5371973418988895232, ($2 + [200]), $11)
	*($17) = $19
	
.LABEL $label$65
	CALL db_idx64_update($19, $12, ($2 + [160]))
	
.LABEL $label$64
	*($2 + [160]) = *($14)
	if ( (CALL $354($13, ($2 + [160]), [8]) == 0) ){ goto $label$62 }
	$14 = ($6 + [84])
	$6 = *($14)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$66 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5371973418988895233, ($2 + [200]), $11)
	*($14) = $6
	
.LABEL $label$66
	CALL db_idx64_update($6, $12, ($2 + [160]))
	
.LABEL $label$62
	CALL $132(($2 + [192]))
	$6 = *($2 + [196])
	if ( $6 ){ goto $label$61 }
	
.LABEL $label$60
	$6 = [0]
	goto $label$42 
	
.LABEL $label$43
	$6 = *(($7 + [16]))
	$1 = *(($7 + [8]))
	CALL eosio_assert([1], [18659])
	if ( ((int_64)$1 != (int_64)9999999999) ){ goto $label$78 }
	if ( ((int_32)$6 != (int_32)[1]) ){ goto $label$77 }
	$6 = [0]
	
.LOOP $label$79:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$75 }
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$80 }
	$11 = $1
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$79 }
	goto $label$74 
	
.LABEL $label$80
	$11 = $1
	
.LOOP $label$81:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$75 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$81 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$79 }
	goto $label$74 
	
.LABEL $label$78
	if ( ((int_32)$6 != (int_32)[1]) ){ goto $label$76 }
	$6 = [0]
	
.LOOP $label$82:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$73 }
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$83 }
	$11 = $1
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$82 }
	goto $label$72 
	
.LABEL $label$83
	$11 = $1
	
.LOOP $label$84:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$73 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$84 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$82 }
	goto $label$72 
	
.LABEL $label$77
	$6 = [0]
	
.LOOP $label$85:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$86 }
	$11 = $1
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$85 }
	goto $label$70 
	
.LABEL $label$86
	$11 = $1
	
.LOOP $label$87:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$71 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$87 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$85 }
	goto $label$70 
	
.LABEL $label$76
	$6 = [0]
	
.LOOP $label$88:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$69 }
	$1 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$89 }
	$11 = $1
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$88 }
	goto $label$68 
	
.LABEL $label$89
	$11 = $1
	
.LOOP $label$90:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$69 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$90 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$88 }
	goto $label$68 
	
.LABEL $label$75
	$5 = [0]
	
.LABEL $label$74
	CALL eosio_assert($5, [18708])
	$1 = (int_64)10000000
	goto $label$67 
	
.LABEL $label$73
	$5 = [0]
	
.LABEL $label$72
	CALL eosio_assert($5, [18708])
	$1 = (int_64)10000
	goto $label$67 
	
.LABEL $label$71
	$5 = [0]
	
.LABEL $label$70
	CALL eosio_assert($5, [18708])
	$1 = (int_64)20000000000
	goto $label$67 
	
.LABEL $label$69
	$5 = [0]
	
.LABEL $label$68
	CALL eosio_assert($5, [18708])
	$1 = (int_64)25000000
	
.LABEL $label$67
	$6 = [1]
	$15 = [1]
	
.LABEL $label$42
	$11 = *($0)
	CALL eosio_assert($8, [19026])
	CALL eosio_assert(((int_32)*($7 + [108]) == (int_32)$3), [19061])
	CALL eosio_assert(((int_64)*(($0 + [400])) == (int_64)CALL eosio_assert0()), [19107])
	*($7 + [24]) = (int_64)1
	*($7 + [104]) = $6
	*($7 + [40]) = (CASTING int_64)(int_32 $15)
	*($7 + [56]) = $1
	*(($7 + [64])) = $9
	*($7 + [72]) = $1
	*(($7 + [80])) = $9
	$6 = ($7 + [8])
	*($2 + [200]) = *($6)
	$1 = *($7)
	CALL eosio_assert([1], [19158])
	*($2 + [184]) = (($2 + [48]) + [100])
	*($2 + [180]) = ($2 + [48])
	*($2 + [176]) = ($2 + [48])
	CALL $130(($2 + [176]), $7)
	CALL db_update_i64(*($7 + [112]), $11, ($2 + [48]), [100])
	$5 = ($0 + [416])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$91 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$91
	*($2) = *($6)
	if ( (CALL $354(($2 + [200]), $2, [8]) == 0) ){ goto $label$92 }
	$6 = *($7 + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$93 }
	$6 = CALL db_idx64_find_primary(*(($0 + [400])), *(($0 + [408])), (int_64)4513481846004645888, ($2 + [160]), $1)
	*(($7 + [116])) = $6
	
.LABEL $label$93
	CALL db_idx64_update($6, $11, $2)
	
.LABEL $label$92
	CALL $42($0, *(($7 + [16])), *(($7 + [8])))
	$global$0 = ($2 + [208])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [400])
	$global$0 = $2
	*(($3 = $2) + [396]) = $0
	*($3 + [384]) = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $358($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $85(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $362($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [384])
	*($3 + [8]) = ($3 + [396])
	CALL $86(($3 + [8]), ($3 + [16]))
	if ( (*($3 + [344]) & [1]) ){ goto $label$14 }
	if ( (*($3 + [320]) & [1]) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($3 + [352])))
	if ( ((*($3 + [320]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [328])))
	$1 = [1]
	if ( ((*($3 + [308]) & [1]) == 0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$1 = [1]
	if ( (*($3 + [308]) & [1]) ){ goto $label$10 }
	
.LABEL $label$11
	if ( (*($3 + [184]) & $1) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [316])))
	if ( ((*($3 + [184]) & $1) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [192])))
	$1 = [1]
	if ( ((*($3 + [172]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$1 = [1]
	if ( (*($3 + [172]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($3 + [400])
	return $1
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [180])))
	$global$0 = ($3 + [400])
	return $1
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [24]) = $1
	CALL require_auth(*($0))
	$6 = ($0 + [48])
	*($5 + [16]) = $6
	CALL $94(($5 + [8]), ($5 + [16]), ($5 + [24]))
	$7 = *($5 + [12])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($2 + [8])
	
.LOOP $label$4:
	if ( ((int_64)*($7 + [8]) != (int_64)*($5 + [24])) ){ goto $label$3 }
	if ( ((int_64)*(($7 + [32])) == (int_64)*($8)) ){ goto $label$2 }
	CALL $95(($5 + [8]))
	$7 = *($5 + [12])
	if ( $7 ){ goto $label$4 }
	
.LABEL $label$3
	$1 = *($0)
	*($5 + [32]) = $0
	*($5 + [40]) = $2
	*($5 + [44]) = $3
	*($5 + [48]) = $4
	*($5 + [36]) = ($5 + [24])
	*($5 + [136]) = $1
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL eosio_assert0()), [18412])
	*($5 + [104]) = $6
	*($5 + [108]) = ($5 + [32])
	*($5 + [112]) = ($5 + [136])
	$7 = CALL _Znwj([88])
	CALL $96($7)
	*($7 + [72]) = $6
	CALL $97(($5 + [104]), $7)
	*($5 + [128]) = $7
	$1 = *($7)
	*($5 + [104]) = $1
	$6 = *($7 + [76])
	*($5 + [120]) = $6
	$2 = ($0 + [76])
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [80]))) ){ goto $label$6 }
	*($8 + [8]) = $1
	*($8 + [16]) = $6
	*($5 + [128]) = [0]
	*($8) = $7
	*($2) = ($8 + [24])
	$7 = *($5 + [128])
	*($5 + [128]) = [0]
	if ( $7 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	CALL $98(($0 + [72]), ($5 + [128]), ($5 + [104]), ($5 + [120]))
	$7 = *($5 + [128])
	*($5 + [128]) = [0]
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$5
	CALL _ZdlPv($7)
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)*($2) != (int_64)0) ){ goto $label$8 }
	if ( ((int_64)*($3) == (int_64)0) ){ goto $label$7 }
	
.LABEL $label$8
	$9 = *($0)
	CALL eosio_assert([1], [19026])
	$8 = *($5 + [16])
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$8), [19061])
	CALL eosio_assert(((int_64)*($8) == (int_64)CALL eosio_assert0()), [19107])
	$0 = ($2 + [8])
	*($7 + [16]) = *($0)
	*($7 + [24]) = *($2)
	*(($7 + [32])) = *($0)
	*($7 + [40]) = *($3)
	*(($7 + [48])) = *(($3 + [8]))
	*($7 + [56]) = *($4)
	*(($7 + [64])) = *(($4 + [8]))
	$0 = ($7 + [8])
	*($5 + [120]) = *($0)
	$1 = *($7)
	CALL eosio_assert([1], [19158])
	*($5 + [112]) = (($5 + [32]) + [72])
	*($5 + [108]) = ($5 + [32])
	*($5 + [104]) = ($5 + [32])
	CALL $99(($5 + [104]), $7)
	CALL db_update_i64(*($7 + [76]), $9, ($5 + [32]), [72])
	if ( (uint_64)($1 <= *($8 + [16])) ){ goto $label$9 }
	*(($8 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*($5 + [136]) = *($0)
	if ( (CALL $354(($5 + [120]), ($5 + [136]), [8]) == 0) ){ goto $label$1 }
	$0 = ($7 + [80])
	$7 = *($0)
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($8), *($8 + [8]), (int_64)-4060986516896743424, ($5 + [128]), $1)
	*($0) = $7
	
.LABEL $label$10
	CALL db_idx64_update($7, $9, ($5 + [136]))
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$7
	$1 = *($5 + [8])
	*($5 + [32]) = $1
	$7 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$7) != (int_32)[0]), [19221])
	CALL $95(($5 + [32]))
	CALL $100(*($5 + [16]), $7)
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [144])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $358($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18407])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $362($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [256])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $358($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $93(($3 + [56]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $362($2)
	
.LABEL $label$5
	*(($1 = (($3 + [144]) + [8]))) = *(($3 + [72]))
	*(($2 = (($3 + [128]) + [8]))) = *(($3 + [88]))
	*(($6 = (($3 + [112]) + [8]))) = *(($3 + [104]))
	*($3 + [144]) = *($3 + [64])
	*($3 + [128]) = *($3 + [80])
	*($3 + [112]) = *($3 + [96])
	$7 = *($3 + [56])
	*((($3 + [192]) + [8])) = *($6)
	*((($3 + [176]) + [8])) = *($2)
	*((($3 + [160]) + [8])) = *($1)
	*($3 + [192]) = *($3 + [112])
	*($3 + [176]) = *($3 + [128])
	*($3 + [160]) = *($3 + [144])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$8 = *((($3 + [160]) + [8]))
	*((($3 + [240]) + [8])) = $8
	$9 = *((($3 + [176]) + [8]))
	*((($3 + [224]) + [8])) = $9
	$10 = *((($3 + [192]) + [8]))
	*((($3 + [208]) + [8])) = $10
	*((($3 + [40]) + [8])) = $8
	*((($3 + [24]) + [8])) = $9
	*((($3 + [8]) + [8])) = $10
	$8 = *($3 + [160])
	*($3 + [240]) = $8
	$9 = *($3 + [176])
	*($3 + [224]) = $9
	$10 = *($3 + [192])
	*($3 + [208]) = $10
	*($3 + [40]) = $8
	*($3 + [24]) = $9
	*($3 + [8]) = $10
	CALL void $1((int_32 $7), (int_64 ($3 + [40])), (int_32 ($3 + [24])), (int_32 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [256])
	return [1]
}

void .FUNC $329 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $327($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $328 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $355($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $325($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $193 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [280]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*(($5 = $4) + [24]) = *($1 + [8])
	$6 = *($1)
	CALL $324(($1 + [248]), *($3))
	CALL $324(($1 + [260]), *($3 + [4]))
	*($1 + [272]) = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [19158])
	*($5 + [8]) = [0]
	CALL $248(($5 + [8]), $1)
	$7 = *($5 + [8])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($7)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $7)
	CALL $249(($5 + [8]), $1)
	CALL db_update_i64(*(($1 + [284])), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $354(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = *($1 + [288])
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513473976872484864, ($5 + [32]), $6)
	*(($1 + [288])) = $3
	
.LABEL $label$6
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

void .FUNC $321 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $323 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $322 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $325 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $324 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $325($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $327 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $326 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4513472877252575232, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [116]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $206($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4513472877252575232, $6))
	CALL eosio_assert(((int_32)*($4 + [116]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*($4 + [124]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [76]))
	$6 = *(($1 + [80]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4060986516896743424, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [36]))
	$6 = *(($1 + [40]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020379698556063232, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $102 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$3 = *($0 + [4])
	$4 = *($3 + [124])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4513472877252575232, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [124]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$7), [18333])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $206($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4513472877252575232, $6))
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$7), [18333])
	
.LABEL $label$3
	*($2 + [124]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)5371973418988895232, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $198($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)5371973418988895232, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*(($4 + [80])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$2 = *($0 + [4])
	$3 = *(($2 + [84]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)5371973418988895233, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [84])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [18333])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $198($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)5371973418988895232, $5))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [18333])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [84])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	float_64 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_32 $20
	float_64 $21
	int_64 $22
	int_32 $23
	int_64 $24
	float_64 $25
	float_64 $26
	float_64 $27
	float_32 $28
	$2 = ($global$0 - [2160])
	$global$0 = $2
	*($2 + [2104]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [240])
	$5 = *(($0 + [268]))
	$4 = *(($0 + [264]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [268]) == (int_32)$3), [18333])
	*($2 + [2100]) = $7
	*($2 + [2096]) = $3
	$8 = (($2 + [2096]) | [4])
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL db_find_i64(*($3), *(($0 + [248])), (int_64)4513475553721843712, $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $77($3, $6)
	CALL eosio_assert(((int_32)*($7 + [268]) == (int_32)$3), [18333])
	*($2 + [2100]) = $7
	*($2 + [2096]) = $3
	$8 = (($2 + [2096]) | [4])
	goto $label$1 
	
.LABEL $label$5
	$7 = [0]
	*($2 + [2100]) = [0]
	*($2 + [2096]) = $3
	$8 = (($2 + [2096]) | [4])
	
.LABEL $label$1
	$9 = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [17691])
	CALL eosio_assert(((int_64)*($7 + [16]) == (int_64)3), [17510])
	$10 = ($0 + [400])
	$1 = *($7 + [256])
	$5 = *(($0 + [428]))
	$7 = *(($0 + [424]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$8 }
	$5 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*($4 + [108]) == (int_32)$10), [18333])
	$9 = $4
	goto $label$6 
	
.LABEL $label$7
	$6 = CALL db_find_i64(*($10), *(($0 + [408])), (int_64)4513481846004645888, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$9 = CALL $124($10, $6)
	CALL eosio_assert(((int_32)*($9 + [108]) == (int_32)$10), [18333])
	
.LABEL $label$6
	$5 = [0]
	$11 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($11, [17534])
	$12 = ($0 + [320])
	*($2 + [432]) = $12
	CALL $125(($2 + [2088]), ($2 + [432]), ($2 + [2104]))
	$6 = *($2 + [2092])
	if ( ($6 == 0) ){ goto $label$11 }
	
.LOOP $label$13:
	if ( ((int_64)*($6 + [8]) != (int_64)*($2 + [2104])) ){ goto $label$12 }
	if ( (*($6 + [16]) == 0) ){ goto $label$10 }
	CALL $126(($2 + [2088]))
	$6 = *($2 + [2092])
	if ( $6 ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$5 = [1]
	
.LABEL $label$11
	CALL eosio_assert($5, [19430])
	
.LABEL $label$10
	*($2 + [2080]) = *((*($8) + [72]))
	*($2 + [2008]) = (int_64)1398362884
	*($2 + [2000]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$1 = $13
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$18 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$5 = [0]
	
.LABEL $label$14
	CALL eosio_assert($5, [18708])
	*((($2 + [2000]) + [24])) = (int_64)1398362884
	*($2 + [2016]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$1 = $13
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$23 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$5 = [0]
	
.LABEL $label$19
	CALL eosio_assert($5, [18708])
	*(($2 + [2040])) = (int_64)1398362884
	*($2 + [2032]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$1 = $13
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$28 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$5 = [0]
	
.LABEL $label$24
	CALL eosio_assert($5, [18708])
	*(($2 + [2056])) = (int_64)1398362884
	*($2 + [2048]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$1 = $13
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$33 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$5 = [0]
	
.LABEL $label$29
	CALL eosio_assert($5, [18708])
	*(($2 + [2072])) = (int_64)1398362884
	*($2 + [2064]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$37 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$1 = $13
	
.LOOP $label$38:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$35 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$38 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	$5 = [0]
	
.LABEL $label$34
	CALL eosio_assert($5, [18708])
	*($2 + [1928]) = (int_64)1398362884
	*($2 + [1920]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	$1 = $13
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$43 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$5 = [0]
	
.LABEL $label$39
	CALL eosio_assert($5, [18708])
	*((($2 + [1920]) + [24])) = (int_64)1398362884
	*($2 + [1936]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$47 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$47
	$1 = $13
	
.LOOP $label$48:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$45 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$48 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$46 }
	goto $label$44 
	
.LABEL $label$45
	$5 = [0]
	
.LABEL $label$44
	CALL eosio_assert($5, [18708])
	*(($2 + [1960])) = (int_64)1398362884
	*($2 + [1952]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$51:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$52 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$52
	$1 = $13
	
.LOOP $label$53:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$50 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$53 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$51 }
	goto $label$49 
	
.LABEL $label$50
	$5 = [0]
	
.LABEL $label$49
	CALL eosio_assert($5, [18708])
	*(($2 + [1976])) = (int_64)1398362884
	*($2 + [1968]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$57 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$57
	$1 = $13
	
.LOOP $label$58:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$55 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$58 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	$5 = [0]
	
.LABEL $label$54
	CALL eosio_assert($5, [18708])
	*(($2 + [1992])) = (int_64)1398362884
	*($2 + [1984]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$61:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$62 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$62
	$1 = $13
	
.LOOP $label$63:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$60 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$63 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$60
	$5 = [0]
	
.LABEL $label$59
	CALL eosio_assert($5, [18708])
	*((($2 + [1872]) + [32])) = (int_64)0
	*((($2 + [1872]) + [24])) = (int_64)0
	*((($2 + [1872]) + [16])) = (int_64)0
	*($2 + [1880]) = (int_64)0
	*($2 + [1872]) = (int_64)0
	CALL memset(($2 + [432]), [0], [1440])
	*(($2 + [460])) = [0]
	*(($2 + [572])) = (int_64)0
	*(($2 + [580])) = (int_64)0
	*(($2 + [596])) = (int_64)0
	*(($2 + [604])) = (int_64)0
	*(($2 + [620])) = (int_64)0
	*(($2 + [628])) = (int_64)0
	*(($2 + [688])) = (int_64)0
	*(($2 + [696])) = (int_64)0
	*(($2 + [740])) = (int_64)0
	*(($2 + [748])) = [0]
	*(($2 + [852])) = [0]
	*($2 + [452 align=4]) = (int_64)0
	*($2 + [564 align=4]) = (int_64)0
	*($2 + [588 align=4]) = (int_64)0
	*($2 + [612 align=4]) = (int_64)0
	*($2 + [680]) = (int_64)0
	*(($2 + [856])) = (int_64)0
	*(($2 + [864])) = (int_64)0
	*(($2 + [872])) = (int_64)0
	*(($2 + [880])) = (int_64)0
	*(($2 + [888])) = (int_64)0
	*(($2 + [896])) = (int_64)0
	*(($2 + [904])) = (int_64)0
	*(($2 + [912])) = (int_64)0
	*(($2 + [920])) = [0]
	*(($2 + [968])) = (int_64)0
	*(($2 + [976])) = (int_64)0
	*(($2 + [984])) = (int_64)0
	*(($2 + [1028])) = (int_64)0
	*(($2 + [1036])) = [0]
	*(($2 + [1140])) = (int_64)0
	*(($2 + [1148])) = (int_64)0
	*(($2 + [1156])) = (int_64)0
	*(($2 + [1164])) = (int_64)0
	*(($2 + [1172])) = (int_64)0
	*(($2 + [1180])) = (int_64)0
	*(($2 + [1188])) = (int_64)0
	*(($2 + [1196])) = (int_64)0
	*(($2 + [1204])) = (int_64)0
	*(($2 + [1256])) = (int_64)0
	*(($2 + [1264])) = (int_64)0
	*(($2 + [1272])) = (int_64)0
	*(($2 + [1316])) = (int_64)0
	*(($2 + [1324])) = [0]
	*(($2 + [1428])) = (int_64)0
	*(($2 + [1436])) = (int_64)0
	*(($2 + [1444])) = (int_64)0
	*(($2 + [1452])) = (int_64)0
	*(($2 + [1460])) = (int_64)0
	*(($2 + [1468])) = (int_64)0
	*(($2 + [1476])) = (int_64)0
	*(($2 + [1484])) = (int_64)0
	*(($2 + [1492])) = (int_64)0
	*(($2 + [1544])) = (int_64)0
	*(($2 + [1552])) = (int_64)0
	*(($2 + [1560])) = (int_64)0
	*(($2 + [1604])) = (int_64)0
	*(($2 + [1612])) = [0]
	*(($2 + [1716])) = (int_64)0
	*(($2 + [1724])) = (int_64)0
	*(($2 + [1732])) = (int_64)0
	*(($2 + [1740])) = (int_64)0
	*(($2 + [1748])) = (int_64)0
	*(($2 + [1756])) = (int_64)0
	*(($2 + [1764])) = (int_64)0
	*(($2 + [1772])) = (int_64)0
	*(($2 + [1780])) = (int_64)0
	*(($2 + [1832])) = (int_64)0
	*(($2 + [1840])) = (int_64)0
	*(($2 + [1848])) = (int_64)0
	$6 = *($2 + [2092])
	*((($2 + [432]) + [16])) = *(($6 + [16]))
	*($2 + [432]) = *($6)
	*($2 + [440]) = *(($6 + [8]))
	CALL $324((($2 + [432]) + [20]), ($6 + [20]))
	CALL memcpy((($2 + [432]) + [32]), ($6 + [32]), [98])
	CALL $324((($2 + [432]) + [132]), ($6 + [132]))
	CALL $324((($2 + [432]) + [144]), ($6 + [144]))
	CALL $324((($2 + [432]) + [156]), ($6 + [156]))
	CALL $324((($2 + [432]) + [168]), ($6 + [168]))
	CALL $324((($2 + [432]) + [180]), ($6 + [180]))
	CALL $324((($2 + [432]) + [192]), ($6 + [192]))
	*((($2 + [432]) + [240])) = *(($6 + [240]))
	*((($2 + [432]) + [232])) = *(($6 + [232]))
	*((($2 + [432]) + [224])) = *(($6 + [224]))
	*((($2 + [432]) + [216])) = *(($6 + [216]))
	*($2 + [640]) = *($6 + [208])
	CALL $324((($2 + [432]) + [248]), ($6 + [248]))
	CALL $324((($2 + [432]) + [260]), ($6 + [260]))
	*($2 + [704]) = *($6 + [272])
	$6 = *($8)
	*((($2 + [2000]) + [24])) = *(($6 + [88]))
	*(($2 + [2040])) = *(($6 + [104]))
	*(($2 + [2056])) = *(($6 + [120]))
	*(($2 + [2072])) = *(($6 + [136]))
	*($2 + [2016]) = *($6 + [80])
	*($2 + [2032]) = *($6 + [96])
	*($2 + [2048]) = *($6 + [112])
	*($2 + [2064]) = *($6 + [128])
	$14 = *($2 + [2080])
	CALL eosio_assert([1], [18659])
	$1 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$66:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$65 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$67 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$67
	$1 = $13
	
.LOOP $label$68:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$65 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$68 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$65
	$5 = [0]
	
.LABEL $label$64
	CALL eosio_assert($5, [18708])
	$15 = *($2 + [2080])
	CALL eosio_assert([1], [18659])
	$1 = (uint_64)$15 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$72 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$72
	$1 = $13
	
.LOOP $label$73:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$70 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$73 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$5 = [0]
	
.LABEL $label$69
	CALL eosio_assert($5, [18708])
	$7 = (*($2 + [2092]) + [260])
	$5 = CALL $127([8472], $2, $7)
	$6 = *($5)
	if ( $6 ){ goto $label$74 }
	$6 = CALL _Znwj([40])
	CALL $322(($6 + [16]), $7)
	*($6) = (int_64)0
	*($6 + [8]) = *($2)
	*($5) = $6
	*($6 + [32]) = (int_64)0
	$7 = $6
	$4 = *(*([0] + [8472]))
	if ( ($4 == 0) ){ goto $label$75 }
	*([0] + [8472]) = $4
	$7 = *($5)
	
.LABEL $label$75
	CALL $128(*([0] + [8476]), $7)
	*([0] + [8480]) = (*([0] + [8480]) + [1])
	
.LABEL $label$74
	$16 = (float_64))((float_64)0 - *(($6 + [32])))
	$17 = *(*($8) + [264])
	$4 = [1]
	$18 = (int_64)0
	$19 = (int_64)0
	
.LOOP $label$76:
	*($2 + [416]) = $12
	CALL $125($2, ($2 + [416]), ($2 + [2104]))
	$5 = [0]
	$6 = *($2 + [4])
	if ( ($6 == 0) ){ goto $label$78 }
	
.LOOP $label$80:
	if ( ((int_64)*($6 + [8]) != (int_64)*($2 + [2104])) ){ goto $label$79 }
	if ( ((int_32)*($6 + [16]) == (int_32)$4) ){ goto $label$77 }
	CALL $126($2)
	$6 = *($2 + [4])
	if ( $6 ){ goto $label$80 }
	$5 = [0]
	goto $label$78 
	
.LABEL $label$79
	$5 = [1]
	
.LABEL $label$78
	CALL eosio_assert($5, [19430])
	$6 = *($2 + [4])
	
.LABEL $label$77
	*(($5 = (($2 + [432]) + ((int_32)$4 * (int_32)[288]))) + [8]) = *(($6 + [8]))
	*($5) = *($6)
	*(($5 + [16])) = *(($6 + [16]))
	CALL $324(($5 + [20]), ($6 + [20]))
	CALL memcpy(($5 + [32]), ($6 + [32]), [98])
	CALL $324(($5 + [132]), ($6 + [132]))
	CALL $324(($5 + [144]), ($6 + [144]))
	CALL $324(($5 + [156]), ($6 + [156]))
	CALL $324(($5 + [168]), ($6 + [168]))
	CALL $324(($5 + [180]), ($6 + [180]))
	CALL $324(($5 + [192]), ($6 + [192]))
	*(($5 + [240])) = *(($6 + [240]))
	*(($5 + [232])) = *(($6 + [232]))
	*(($5 + [224])) = *(($6 + [224]))
	*(($5 + [216])) = *(($6 + [216]))
	*($5 + [208]) = *($6 + [208])
	CALL $324(($5 + [248]), ($6 + [248]))
	CALL $324(($5 + [260]), ($6 + [260]))
	*($5 + [272]) = *($6 + [272])
	$6 = *($2 + [2092])
	*($2 + [416]) = *($6 + [272])
	$5 = *($2 + [4])
	*($2 + [384]) = *($5 + [272])
	$6 = CALL $129(($6 + [260]), ($2 + [416]), ($5 + [260]), ($2 + [384]))
	$20 = ($4 << [4])
	$21 = (CASTING float_64)(int_64 *((($2 + [2000]) + $20)))
	if ( ($6 == 0) ){ goto $label$86 }
	$21 = ((float_64)$16 * (float_64)$21)
	if ( ((float_64)(float_64)|$21| < (float_64)(float_64)9223372036854775808) ){ goto $label$85 }
	$22 = (int_64)-9223372036854775808
	goto $label$84 
	
.LABEL $label$86
	$7 = (*($2 + [4]) + [260])
	$5 = CALL $127([8472], ($2 + [416]), $7)
	$6 = *($5)
	if ( $6 ){ goto $label$87 }
	$6 = CALL _Znwj([40])
	CALL $322(($6 + [16]), $7)
	*($6) = (int_64)0
	*($6 + [8]) = *($2 + [416])
	*($5) = $6
	*($6 + [32]) = (int_64)0
	$7 = $6
	$23 = *(*([0] + [8472]))
	if ( ($23 == 0) ){ goto $label$88 }
	*([0] + [8472]) = $23
	$7 = *($5)
	
.LABEL $label$88
	CALL $128(*([0] + [8476]), $7)
	*([0] + [8480]) = (*([0] + [8480]) + [1])
	
.LABEL $label$87
	$21 = ((float_64)*(($6 + [32])) * (float_64)$21)
	if ( ((float_64)(float_64)|$21| < (float_64)(float_64)9223372036854775808) ){ goto $label$83 }
	$22 = (int_64)-9223372036854775808
	goto $label$82 
	
.LABEL $label$85
	$22 = (Rounds 0)($21)
	
.LABEL $label$84
	$24 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$24 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$91:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$90 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$92 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$91 }
	goto $label$89 
	
.LABEL $label$92
	$1 = $13
	
.LOOP $label$93:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$90 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$93 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$91 }
	goto $label$89 
	
.LABEL $label$90
	$5 = [0]
	
.LABEL $label$89
	CALL eosio_assert($5, [18708])
	*(($6 = (($2 + [1920]) + $20)) + [8]) = $24
	*($6) = $22
	CALL eosio_assert(((int_64)$24 == (int_64)$14), [19529])
	$18 = (int_64)
	CALL eosio_assert(((int_64)$18($18 - $22)) > (int_64)-4611686018427387904), [19577])
	CALL eosio_assert(((int_64)$18 < (int_64)4611686018427387904), [19599])
	*((($2 + [1872]) + ($4 << [3]))) = $16
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[5]) ){ goto $label$76 }
	goto $label$81 
	
.LABEL $label$83
	$22 = (Rounds 0)($21)
	
.LABEL $label$82
	$24 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$24 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$96:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$95 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$97 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$96 }
	goto $label$94 
	
.LABEL $label$97
	$1 = $13
	
.LOOP $label$98:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$95 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$98 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$96 }
	goto $label$94 
	
.LABEL $label$95
	$5 = [0]
	
.LABEL $label$94
	CALL eosio_assert($5, [18708])
	*(($6 = (($2 + [1920]) + $20)) + [8]) = $24
	*($6) = $22
	CALL eosio_assert(((int_64)$24 == (int_64)$15), [19449])
	$19 = ((int_64)$19 + (int_64)$22)
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)$19 < (int_64)4611686018427387904), [19511])
	$7 = (*($2 + [4]) + [260])
	$5 = CALL $127([8472], ($2 + [416]), $7)
	$6 = *($5)
	if ( $6 ){ goto $label$99 }
	$6 = CALL _Znwj([40])
	CALL $322(($6 + [16]), $7)
	*($6) = (int_64)0
	*($6 + [8]) = *($2 + [416])
	*($5) = $6
	*($6 + [32]) = (int_64)0
	$7 = $6
	$20 = *(*([0] + [8472]))
	if ( ($20 == 0) ){ goto $label$100 }
	*([0] + [8472]) = $20
	$7 = *($5)
	
.LABEL $label$100
	CALL $128(*([0] + [8476]), $7)
	*([0] + [8480]) = (*([0] + [8480]) + [1])
	
.LABEL $label$99
	*((($2 + [1872]) + ($4 << [3]))) = *(($6 + [32]))
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[5]) ){ goto $label$76 }
	
.LABEL $label$81
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$103:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$102 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$104 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$103 }
	goto $label$101 
	
.LABEL $label$104
	$1 = $13
	
.LOOP $label$105:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$102 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$105 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$103 }
	goto $label$101 
	
.LABEL $label$102
	$5 = [0]
	
.LABEL $label$101
	CALL eosio_assert($5, [18708])
	*($2 + [424]) = (int_64)1398362884
	*($2 + [416]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (uint_64)*($2 + [424]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$108:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$107 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$109 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$108 }
	goto $label$106 
	
.LABEL $label$109
	$1 = $13
	
.LOOP $label$110:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$107 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$110 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$108 }
	goto $label$106 
	
.LABEL $label$107
	$5 = [0]
	
.LABEL $label$106
	CALL eosio_assert($5, [18708])
	$21 = (CASTING float_64)(int_64 $18)
	$6 = *($8)
	$16 = (CASTING float_64)(int_64 *($6 + [48]))
	if ( ((int_64)*($6 + [248]) != (int_64)9999999999) ){ goto $label$120 }
	$21 = ((float_64)$21 * (float_64)(float_64)0.99)
	$16 = ((float_64)$21 + (float_64)$16)
	if ( ((float_64)(float_64)|$16| < (float_64)(float_64)9223372036854775808) ){ goto $label$119 }
	$22 = (int_64)-9223372036854775808
	goto $label$118 
	
.LABEL $label$120
	$21 = ((float_64)$21 * (float_64)(float_64)0.98)
	$16 = ((float_64)$21 + (float_64)$16)
	if ( ((float_64)(float_64)|$16| < (float_64)(float_64)9223372036854775808) ){ goto $label$117 }
	$22 = (int_64)-9223372036854775808
	goto $label$116 
	
.LABEL $label$119
	$22 = (Rounds 0)($16)
	
.LABEL $label$118
	$1 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$123:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$122 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$124 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$123 }
	goto $label$121 
	
.LABEL $label$124
	$1 = $13
	
.LOOP $label$125:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$122 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$125 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$123 }
	goto $label$121 
	
.LABEL $label$122
	$5 = [0]
	
.LABEL $label$121
	CALL eosio_assert($5, [18708])
	$21 = (float_64)
	if ( ((float_64)(float_64)|$21(((float_64)(CASTING float_64)(int_64 $19) * (float_64)(float_64)0.99) - $21))| < (float_64)(float_64)9223372036854775808) ){ goto $label$115 }
	$18 = (int_64)-9223372036854775808
	goto $label$114 
	
.LABEL $label$117
	$22 = (Rounds 0)($16)
	
.LABEL $label$116
	$1 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$128:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$127 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$129 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$128 }
	goto $label$126 
	
.LABEL $label$129
	$1 = $13
	
.LOOP $label$130:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$127 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$130 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$128 }
	goto $label$126 
	
.LABEL $label$127
	$5 = [0]
	
.LABEL $label$126
	CALL eosio_assert($5, [18708])
	$21 = (float_64)
	if ( ((float_64)(float_64)|$21((CASTING float_64)(int_64 $19) - $21))| < (float_64)(float_64)9223372036854775808) ){ goto $label$113 }
	$18 = (int_64)-9223372036854775808
	goto $label$112 
	
.LABEL $label$115
	$18 = (Rounds 0)($21)
	
.LABEL $label$114
	$24 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$24 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$133:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$132 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$134 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$133 }
	goto $label$131 
	
.LABEL $label$134
	$1 = $13
	
.LOOP $label$135:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$132 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$135 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$133 }
	goto $label$131 
	
.LABEL $label$132
	$5 = [0]
	
.LABEL $label$131
	CALL eosio_assert($5, [18708])
	goto $label$111 
	
.LABEL $label$113
	$18 = (Rounds 0)($21)
	
.LABEL $label$112
	$24 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$24 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$138:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$137 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$139 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$138 }
	goto $label$136 
	
.LABEL $label$139
	$1 = $13
	
.LOOP $label$140:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$137 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$140 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$138 }
	goto $label$136 
	
.LABEL $label$137
	$5 = [0]
	
.LABEL $label$136
	CALL eosio_assert($5, [18708])
	
.LABEL $label$111
	*(($6 = ($2 + [424]))) = $24
	*($2 + [416]) = $18
	$21 = (float_64)1
	if ( ((int_64)$19 <= (int_64)$22) ){ goto $label$141 }
	$5 = *($8)
	*($6) = *(($5 + [56]))
	*($2 + [416]) = *($5 + [48])
	$21 = ((float_64)(CASTING float_64)(int_64 $22) / (float_64)(CASTING float_64)(int_64 $19))
	
.LABEL $label$141
	$16 = *($2 + [1880])
	if ( (((float_64)$16 > (float_64)(float_64)0) == 0) ){ goto $label$151 }
	$16 = ((float_64)$21 * (float_64)$16)
	*($2 + [1880]) = $16
	$25 = ((float_64)$21 * (float_64)(CASTING float_64)(int_64 *($2 + [1936])))
	if ( ((float_64)(float_64)|$25| < (float_64)(float_64)9223372036854775808) ){ goto $label$150 }
	$24 = (int_64)-9223372036854775808
	goto $label$149 
	
.LABEL $label$151
	$16 = CALL $345($16)
	$25 = *($2 + [1888])
	if ( ((float_64)$25 > (float_64)(float_64)0) ){ goto $label$148 }
	goto $label$147 
	
.LABEL $label$150
	$24 = (Rounds 0)($25)
	
.LABEL $label$149
	$22 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$22 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$154:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$153 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$155 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$154 }
	goto $label$152 
	
.LABEL $label$155
	$1 = $13
	
.LOOP $label$156:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$153 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$156 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$154 }
	goto $label$152 
	
.LABEL $label$153
	$5 = [0]
	
.LABEL $label$152
	CALL eosio_assert($5, [18708])
	*(($2 + [1944])) = $22
	*(($2 + [1936])) = $24
	$25 = *($2 + [1888])
	if ( (((float_64)$25 > (float_64)(float_64)0) == 0) ){ goto $label$147 }
	
.LABEL $label$148
	$25 = ((float_64)$21 * (float_64)$25)
	*(($2 + [1888])) = $25
	$26 = ((float_64)$21 * (float_64)(CASTING float_64)(int_64 *($2 + [1952])))
	if ( ((float_64)(float_64)|$26| < (float_64)(float_64)9223372036854775808) ){ goto $label$158 }
	$24 = (int_64)-9223372036854775808
	goto $label$157 
	
.LABEL $label$158
	$24 = (Rounds 0)($26)
	
.LABEL $label$157
	$22 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$22 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$161:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$160 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$162 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$161 }
	goto $label$159 
	
.LABEL $label$162
	$1 = $13
	
.LOOP $label$163:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$160 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$163 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$161 }
	goto $label$159 
	
.LABEL $label$160
	$5 = [0]
	
.LABEL $label$159
	CALL eosio_assert($5, [18708])
	*(($2 + [1960])) = $22
	*(($2 + [1952])) = $24
	$26 = *($2 + [1896])
	if ( (((float_64)$26 > (float_64)(float_64)0) == 0) ){ goto $label$146 }
	goto $label$145 
	
.LABEL $label$147
	$25 = CALL $345($25)
	$26 = *($2 + [1896])
	if ( ((float_64)$26 > (float_64)(float_64)0) ){ goto $label$145 }
	
.LABEL $label$146
	$26 = CALL $345($26)
	$27 = *($2 + [1904])
	if ( ((float_64)$27 > (float_64)(float_64)0) ){ goto $label$144 }
	goto $label$143 
	
.LABEL $label$145
	$26 = ((float_64)$21 * (float_64)$26)
	*(($2 + [1896])) = $26
	$27 = ((float_64)$21 * (float_64)(CASTING float_64)(int_64 *($2 + [1968])))
	if ( ((float_64)(float_64)|$27| < (float_64)(float_64)9223372036854775808) ){ goto $label$165 }
	$24 = (int_64)-9223372036854775808
	goto $label$164 
	
.LABEL $label$165
	$24 = (Rounds 0)($27)
	
.LABEL $label$164
	$22 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$22 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$168:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$167 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$169 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$168 }
	goto $label$166 
	
.LABEL $label$169
	$1 = $13
	
.LOOP $label$170:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$167 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$170 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$168 }
	goto $label$166 
	
.LABEL $label$167
	$5 = [0]
	
.LABEL $label$166
	CALL eosio_assert($5, [18708])
	*(($2 + [1976])) = $22
	*(($2 + [1968])) = $24
	$27 = *($2 + [1904])
	if ( (((float_64)$27 > (float_64)(float_64)0) == 0) ){ goto $label$143 }
	
.LABEL $label$144
	$27 = ((float_64)$21 * (float_64)$27)
	*(($2 + [1904])) = $27
	$21 = ((float_64)$21 * (float_64)(CASTING float_64)(int_64 *($2 + [1984])))
	if ( ((float_64)(float_64)|$21| < (float_64)(float_64)9223372036854775808) ){ goto $label$172 }
	$24 = (int_64)-9223372036854775808
	goto $label$171 
	
.LABEL $label$172
	$24 = (Rounds 0)($21)
	
.LABEL $label$171
	$22 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$22 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$175:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$174 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$176 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$175 }
	goto $label$173 
	
.LABEL $label$176
	$1 = $13
	
.LOOP $label$177:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$174 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$177 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$175 }
	goto $label$173 
	
.LABEL $label$174
	$5 = [0]
	
.LABEL $label$173
	CALL eosio_assert($5, [18708])
	*(($2 + [1992])) = $22
	*(($2 + [1984])) = $24
	goto $label$142 
	
.LABEL $label$143
	$27 = CALL $345($27)
	
.LABEL $label$142
	$6 = *($8)
	$21 = ((float_64)((float_64)((float_64)((float_64)$16 * (float_64)(CASTING float_64)(int_64 *($6 + [80]))) + (float_64)((float_64)$25 * (float_64)(CASTING float_64)(int_64 *($6 + [96])))) + (float_64)((float_64)$26 * (float_64)(CASTING float_64)(int_64 *($6 + [112])))) + (float_64)((float_64)$27 * (float_64)(CASTING float_64)(int_64 *($6 + [128]))))
	if ( ((float_64)(float_64)|$21| < (float_64)(float_64)9223372036854775808) ){ goto $label$179 }
	$13 = (int_64)-9223372036854775808
	goto $label$178 
	
.LABEL $label$179
	$13 = (Rounds 0)($21)
	
.LABEL $label$178
	$1 = *($2 + [2080])
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$182:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$181 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$183 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$182 }
	goto $label$180 
	
.LABEL $label$183
	$1 = $13
	
.LOOP $label$184:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$181 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$184 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$182 }
	goto $label$180 
	
.LABEL $label$181
	$5 = [0]
	
.LABEL $label$180
	CALL eosio_assert($5, [18708])
	$13 = *($0)
	CALL eosio_assert($11, [19026])
	CALL eosio_assert(((int_32)*($9 + [108]) == (int_32)$10), [19061])
	CALL eosio_assert(((int_64)*(($0 + [400])) == (int_64)CALL eosio_assert0()), [19107])
	$6 = ($9 + [8])
	*($2 + [2112]) = *($6)
	$1 = *($9)
	CALL eosio_assert(((int_64)*((($2 + [416]) + [8])) == (int_64)*(($9 + [80]))), [19529])
	$22 = (int_64)
	*($9 + [72]) = $22(*($9 + [72]) - *($2 + [416])))
	CALL eosio_assert(((int_64)$22 > (int_64)-4611686018427387904), [19577])
	CALL eosio_assert(((int_64)*($9 + [72]) < (int_64)4611686018427387904), [19599])
	*($9 + [32]) = ((int_64)*($9 + [32]) + (int_64)-1)
	CALL eosio_assert(((int_64)$1 == (int_64)*($9)), [19158])
	*($2 + [392]) = ($2 + [100])
	*($2 + [388]) = $2
	*($2 + [384]) = $2
	CALL $130(($2 + [384]), $9)
	CALL db_update_i64(*($9 + [112]), $13, $2, [100])
	$5 = ($0 + [416])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$185 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$185
	*($2 + [2128]) = *($6)
	if ( (CALL $354(($2 + [2112]), ($2 + [2128]), [8]) == 0) ){ goto $label$186 }
	$6 = *($9 + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$187 }
	$6 = CALL db_idx64_find_primary(*(($0 + [400])), *(($0 + [408])), (int_64)4513481846004645888, ($2 + [2152]), $1)
	*(($9 + [116])) = $6
	
.LABEL $label$187
	CALL db_idx64_update($6, $13, ($2 + [2128]))
	
.LABEL $label$186
	if ( ((int_32)$17 == (int_32)[1]) ){ goto $label$188 }
	$6 = *($8)
	if ( ((int_64)*($6 + [64]) < (int_64)1) ){ goto $label$188 }
	*($2 + [2128]) = ($0 + [200])
	CALL $105(($2 + [384]), ($2 + [2128]), ($6 + [248]))
	$6 = *($2 + [388])
	if ( ($6 == 0) ){ goto $label$188 }
	$7 = ($2 + [8])
	
.LOOP $label$189:
	$5 = *($8)
	if ( ((int_64)*($6 + [40]) != (int_64)*($5 + [248])) ){ goto $label$188 }
	if ( ((int_32)*($6 + [32]) != (int_32)*($5 + [8])) ){ goto $label$190 }
	$1 = *($0)
	*($7) = ($2 + [2080])
	*($2 + [4]) = ($2 + [416])
	*($2) = ($2 + [384])
	CALL eosio_assert([1], [19026])
	CALL $131(*($2 + [2128]), $6, $1, $2)
	
.LABEL $label$190
	CALL $132(($2 + [384]))
	$6 = *($2 + [388])
	if ( $6 ){ goto $label$189 }
	
.LABEL $label$188
	$1 = *($9)
	$5 = *(($0 + [428]))
	$4 = *(($0 + [424]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$192 }
	
.LOOP $label$194:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$193 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$194 }
	goto $label$192 
	
.LABEL $label$193
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$192 }
	CALL eosio_assert(((int_32)*($7 + [108]) == (int_32)$10), [18333])
	goto $label$191 
	
.LABEL $label$192
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [400])), *(($0 + [408])), (int_64)4513481846004645888, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$191 }
	$7 = CALL $124($10, $6)
	CALL eosio_assert(((int_32)*($7 + [108]) == (int_32)$10), [18333])
	
.LABEL $label$191
	CALL $63(($2 + [2112]), $0, ($2 + [2080]))
	if ( (int_64)(*($7 + [32]) == 0) ){ goto $label$196 }
	if ( ((int_64)*($7 + [72]) >= (int_64)*(*($2 + [2116]) + [56])) ){ goto $label$195 }
	
.LABEL $label$196
	CALL $133($0, $7)
	$1 = *(*($8) + [248])
	if ( ((int_64)$1 != (int_64)9999999999) ){ goto $label$198 }
	*($2) = (int_64)9999999999
	CALL $118($0, $2, ($2 + [2080]))
	goto $label$197 
	
.LABEL $label$198
	$12 = ($0 + [640])
	$5 = *(($0 + [668]))
	$20 = *(($0 + [664]))
	if ( ((int_32)$20 == (int_32)$5) ){ goto $label$200 }
	
.LOOP $label$202:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$201 }
	$5 = $6
	if ( ((int_32)$20 != (int_32)$6) ){ goto $label$202 }
	goto $label$200 
	
.LABEL $label$201
	if ( ((int_32)$20 == (int_32)$5) ){ goto $label$200 }
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$12), [18333])
	goto $label$199 
	
.LABEL $label$200
	$4 = [0]
	$6 = CALL db_find_i64(*($12), *(($0 + [648])), (int_64)4513481842761924608, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$199 }
	$4 = CALL $65($12, $6)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$12), [18333])
	
.LABEL $label$199
	$6 = *($8)
	*($2) = ( (int_64)1397703940 ? (int_64)1480674564 : ((int_32)*($4 + [16]) == (int_32)[1]) )
	CALL $118($0, ($6 + [248]), $2)
	
.LABEL $label$197
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [19221])
	CALL eosio_assert($6, [18629])
	$6 = CALL db_next_i64(*($7 + [112]), $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$203 }
	CALL $124($10, $6)
	
.LABEL $label$203
	CALL $134($10, $7)
	
.LABEL $label$195
	*($2 + [408]) = ($0 + [720])
	CALL $135(($2 + [400]), ($2 + [408]), ($2 + [2104]))
	$6 = *($2 + [404])
	if ( ($6 == 0) ){ goto $label$204 }
	if ( ((int_64)*($6 + [8]) != (int_64)*($2 + [2104])) ){ goto $label$204 }
	$5 = *($8)
	if ( ((int_64)*($5 + [64]) < (int_64)1) ){ goto $label$204 }
	if ( ((int_64)*($5 + [248]) != (int_64)9999999999) ){ goto $label$204 }
	$6 = *($6 + [16])
	$6 = ( $6 ? [6] : ($6 <= [6]) )
	$20 = *($6 + [20])
	$6 = ( $20 ? $6 : ($20 <= $6) )
	$4 = *($6 + [24])
	$6 = ( $4 ? $6 : ($4 <= $6) )
	$7 = *($6 + [28])
	$6 = ( $7 ? $6 : ($7 <= $6) )
	$5 = *($6 + [32])
	$6 = (( $5 ? $6 : ($5 <= $6) ) & [7])
	if ( ((int_32)$6 == (int_32)[7]) ){ goto $label$207 }
	$28 = (float_32)0.5
	goto $label$205 
	
.LABEL $label$209
	$28 = (float_32)0.05000000074505806
	goto $label$205 
	
.LABEL $label$208
	$28 = (float_32)0.004999999888241291
	goto $label$205 
	
.LABEL $label$207
	CALL eosio_assert([0], [17554])
	goto $label$205 
	
.LABEL $label$206
	$28 = (float_32)0.10000000149011612
	
.LABEL $label$205
	CALL $136($2, $0, ($2 + [2080]), $28)
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$204 }
	$5 = ($0 + [520])
	$6 = ($0 + [528])
	$7 = CALL db_lowerbound_i64(*($0 + [520]), *($6), (int_64)-5969212543028166656, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$210 }
	$7 = CALL $137($5, $7)
	$6 = CALL db_lowerbound_i64(*($5), *($6), (int_64)-5969212543028166656, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$210 }
	CALL $137($5, $6)
	*($2 + [388]) = [0]
	*($2 + [384]) = $5
	if ( ((uint_64)(int_64))(*(*(CALL $138(($2 + [384])) + [4])) - *($7)) <= (uint_64)(int_64)50) ){ goto $label$210 }
	CALL eosio_assert([1], [19221])
	CALL eosio_assert([1], [18629])
	$6 = CALL db_next_i64(*($7 + [60]), ($2 + [384]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$211 }
	CALL $137($5, $6)
	
.LABEL $label$211
	CALL $139($5, $7)
	
.LABEL $label$210
	$1 = *($0)
	*($2 + [384]) = $0
	*($2 + [388]) = $2
	*($2 + [392]) = ($2 + [2104])
	*($2 + [396]) = ($2 + [2096])
	*($2 + [2152]) = $1
	CALL eosio_assert(((int_64)*(($0 + [520])) == (int_64)CALL eosio_assert0()), [18412])
	*($2 + [2128]) = $5
	*($2 + [2132]) = ($2 + [384])
	*($2 + [2136]) = ($2 + [2152])
	$6 = CALL _Znwj([72])
	CALL $140($6)
	*($6 + [56]) = $5
	CALL $141(($2 + [2128]), $6)
	*($2 + [2144]) = $6
	$1 = *($6)
	*($2 + [2128]) = $1
	$7 = *($6 + [60])
	*($2 + [2124]) = $7
	$4 = ($0 + [548])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [552]))) ){ goto $label$214 }
	*($5 + [8]) = $1
	*($5 + [16]) = $7
	*($2 + [2144]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [2144])
	*($2 + [2144]) = [0]
	if ( ($6 == 0) ){ goto $label$212 }
	goto $label$213 
	
.LABEL $label$214
	CALL $142(($0 + [544]), ($2 + [2144]), ($2 + [2128]), ($2 + [2124]))
	$6 = *($2 + [2144])
	*($2 + [2144]) = [0]
	if ( ($6 == 0) ){ goto $label$212 }
	
.LABEL $label$213
	CALL _ZdlPv($6)
	
.LABEL $label$212
	*($2 + [2152]) = ($0 + [280])
	CALL $143(($2 + [2128]), ($2 + [2152]), ($2 + [2104]))
	$6 = *($2 + [2132])
	if ( ($6 == 0) ){ goto $label$204 }
	$4 = ($2 + [392])
	
.LOOP $label$215:
	if ( ((int_64)*($6 + [8]) != (int_64)*($2 + [2104])) ){ goto $label$216 }
	*($4) = *($2 + [2080])
	$21 = ((float_64)((float_64)(CASTING float_64)(int_64 *($6 + [32])) / (float_64)(CASTING float_64)(int_64 *(*($8) + [64]))) * (float_64)(CASTING float_64)(int_64 *($2)))
	if ( ((float_64)(float_64)|$21| < (float_64)(float_64)9223372036854775808) ){ goto $label$218 }
	$1 = (int_64)-9223372036854775808
	goto $label$217 
	
.LABEL $label$218
	$1 = (Rounds 0)($21)
	
.LABEL $label$217
	*($2 + [384]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$20 = ($6 + [16])
	$1 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$221:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$220 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$222 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$221 }
	goto $label$219 
	
.LABEL $label$222
	$1 = $13
	
.LOOP $label$223:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$220 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$223 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$221 }
	goto $label$219 
	
.LABEL $label$220
	$5 = [0]
	
.LABEL $label$219
	CALL eosio_assert($5, [18708])
	CALL $64($0, $20, ($2 + [384]))
	
.LABEL $label$216
	CALL $144(($2 + [2128]))
	$6 = *($2 + [2132])
	if ( $6 ){ goto $label$215 }
	
.LABEL $label$204
	$6 = *($8)
	$1 = *($6 + [40])
	$5 = *($6 + [24])
	$13 = *($6 + [32])
	$7 = *($6 + [8])
	$22 = *($6)
	*(($2 + [56])) = *(($6 + [72]))
	*($2) = $22
	*($2 + [8]) = *($6 + [248])
	*($2 + [16]) = $7
	*($2 + [24]) = $13
	*($2 + [40]) = $5
	*($2 + [32]) = $1
	*($2 + [48]) = *($6 + [64])
	*(($2 + [72])) = *(($2 + [424]))
	*($2 + [64]) = *($2 + [416])
	*(($2 + [88])) = *(($6 + [88]))
	*($2 + [80]) = *($6 + [80])
	*(($2 + [104])) = *((($2 + [1920]) + [24]))
	*($2 + [96]) = *($2 + [1936])
	*(($2 + [120])) = *(($6 + [104]))
	*($2 + [112]) = *($6 + [96])
	*(($2 + [136])) = *(($2 + [1960]))
	*($2 + [128]) = *($2 + [1952])
	*(($2 + [152])) = *(($6 + [120]))
	*($2 + [144]) = *($6 + [112])
	*(($2 + [168])) = *((($2 + [1920]) + [56]))
	*($2 + [160]) = *($2 + [1968])
	*(($2 + [184])) = *(($6 + [136]))
	*($2 + [176]) = *($6 + [128])
	*(($2 + [200])) = *((($2 + [1920]) + [72]))
	*($2 + [192]) = *($2 + [1984])
	CALL $322(($2 + [208]), (*($2 + [2092]) + [248]))
	CALL $322(($2 + [220]), (*($2 + [2092]) + [260]))
	CALL $322(($2 + [232]), ($2 + [968]))
	CALL $322(($2 + [244]), ($2 + [980]))
	CALL $322(($2 + [256]), ($2 + [1256]))
	CALL $322(($2 + [268]), ($2 + [1268]))
	CALL $322(($2 + [280]), ($2 + [1544]))
	CALL $322(($2 + [292]), ($2 + [1556]))
	CALL $322(($2 + [304]), ($2 + [1832]))
	CALL $322(($2 + [316]), ($2 + [1844]))
	*(($6 = ($2 + [368]))) = *($2 + [2080])
	*($2 + [360]) = (int_64)0
	*($2 + [328]) = *($2 + [1880])
	*($2 + [336]) = *(($2 + [1888]))
	*($2 + [344]) = *((($2 + [1872]) + [24]))
	*($2 + [352]) = *(($2 + [1904]))
	CALL eosio_assert([1], [18659])
	$1 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$226:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$225 }
	$13 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$227 }
	$1 = $13
	$5 = [1]
	$7 = $6
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$226 }
	goto $label$224 
	
.LABEL $label$227
	$1 = $13
	
.LOOP $label$228:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$225 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $5 ){ goto $label$228 }
	$5 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$226 }
	goto $label$224 
	
.LABEL $label$225
	$5 = [0]
	
.LABEL $label$224
	CALL eosio_assert($5, [18708])
	CALL $145($0, $2)
	$1 = *(($2 + [8]))
	if ( ((int_64)$1 == (int_64)9999999999) ){ goto $label$229 }
	$20 = ($0 + [640])
	$5 = *(($0 + [668]))
	$4 = *(($0 + [664]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$231 }
	
.LOOP $label$233:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$232 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$233 }
	goto $label$231 
	
.LABEL $label$232
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$231 }
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$20), [18333])
	goto $label$230 
	
.LABEL $label$231
	$7 = [0]
	$6 = CALL db_find_i64(*($20), *(($0 + [648])), (int_64)4513481842761924608, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$230 }
	$7 = CALL $65($20, $6)
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$20), [18333])
	
.LABEL $label$230
	if ( (int_64)(*(($2 + [48])) == 0) ){ goto $label$235 }
	if ( (*(*($8) + [264]) == 0) ){ goto $label$234 }
	
.LABEL $label$235
	$1 = *($0)
	$6 = *($7 + [24])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [19026])
	if ( ($6 <= [19]) ){ goto $label$236 }
	CALL $146($20, $7, $1)
	goto $label$229 
	
.LABEL $label$236
	CALL $147($20, $7, $1)
	goto $label$229 
	
.LABEL $label$234
	$1 = *($0)
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [19026])
	CALL $148($20, $7, $1)
	
.LABEL $label$229
	$1 = *($0)
	$6 = *($2 + [2100])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19026])
	CALL $149($3, $6, $1)
	CALL $150($2)
	CALL $151(($2 + [1584]))
	CALL $151(($2 + [1296]))
	CALL $151(($2 + [1008]))
	CALL $151(($2 + [720]))
	CALL $151(($2 + [432]))
	$global$0 = ($2 + [2160])
	$6
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [216])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [200])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [208])), (int_64)5371973418988895232, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $198($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $314(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [216])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18872])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = *(*($5 + [8]))
	*($1 + [36]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [40]) = *(*($5 + [12]))
	$5 = *($5 + [16])
	*($1 + [48]) = *($5)
	*(($1 + [56])) = *(($5 + [8]))
	$2 = $2
	$5 = ($2 + [-80])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-8])
	CALL $110(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)5371973418988895232, *(*($0 + [8])), $8, $5, [72])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = ($4 + [8])
	$8 = *($5)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [24]) = *(($1 + [40]))
	*($1 + [80]) = CALL db_idx64_store($8, (int_64)5371973418988895232, $11, $12, ($3 + [24]))
	$8 = *($0)
	$11 = *($5)
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*(($1 + [84])) = CALL db_idx64_store($11, (int_64)5371973418988895233, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $362($0)
	
.LABEL $label$1
}

void .FUNC $215 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([48])) + [24]) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18708])
	*($5 + [32]) = $1
	CALL $278(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [36])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $267(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $214 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$5 = *($1)
	$6 = ($1 + [24])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [19449])
	$7 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [19511])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [19158])
	CALL eosio_assert([1], [18517])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 + [24]), $6, [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $217 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $358($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [36]) = $7
	*($3 + [32]) = $7
	*($3 + [40]) = ($7 + $6)
	*(($9 = CALL _Znwj([48])) + [24]) = (int_64)1398362884
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$10 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18708])
	*($9 + [32]) = $0
	CALL $271(($3 + [32]), $9)
	*($9 + [40]) = [-1]
	*($9 + [36]) = $1
	*($3 + [24]) = $9
	$10 = *($9)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $10
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $269($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $362($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

void .FUNC $216 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-56] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [72])
	$4 = ( *(($1 + [76])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = ($3 - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [72])
	
.LOOP $label$2:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $184($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	
.LABEL $label$3
	*($2 + [12]) = $3
	*($2 + [8]) = $3
	*($2 + [16]) = $4
	*($2 + [24]) = ($2 + [8])
	*($2 + [56]) = $6
	*($2 + [32]) = $1
	*($2 + [36]) = ($1 + [16])
	*($2 + [40]) = ($1 + [24])
	*($2 + [44]) = ($1 + [32])
	*($2 + [48]) = ($1 + [48])
	*($2 + [52]) = ($1 + [64])
	CALL $279(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [64])
}

void .FUNC $211 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([392])
	CALL $272($3)
	*($3 + [376]) = $1
	CALL $273(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [380])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $274(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $150($1)
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $210 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [376]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19350])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL $150($3)
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $150($5)
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [380]))
}

void .FUNC $213 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $212(*($1), ($0 + [32]))
}

void .FUNC $223 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	CALL eosio_assert([1], [18517])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [44]))
	$6 = *(($1 + [48]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4732892228187340800, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $197 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [40]) = $1
	CALL $252(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $253(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $194 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	CALL $254(($3 + [32]), $5)
	*($5 + [48]) = [-1]
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $253(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $195 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [44]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18978])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4732892228187340800)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18924])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18924])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $194(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $219 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	$9 = *($4 + [76])
	if ( ($9 == 0) ){ goto $label$10 }
	*(($4 + [80])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [72])))
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*($4 + [52]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($4 + [60])))
	if ( (*($4 + [40]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$11
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$8 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$17 }
	$9 = *($6 + [76])
	if ( ($9 == 0) ){ goto $label$18 }
	*(($6 + [80])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$18
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($6 + [72])))
	if ( ((*($6 + [52]) & [1]) == 0) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$23
	if ( ((*($6 + [52]) & [1]) == 0) ){ goto $label$21 }
	
.LABEL $label$22
	CALL _ZdlPv(*(($6 + [60])))
	if ( (*($6 + [40]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*(($6 + [48])))
	
.LABEL $label$19
	CALL _ZdlPv($6)
	
.LABEL $label$17
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$16 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
	$6 = *(($1 + [96]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$25 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513481842761924608, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$24 }
	
.LABEL $label$25
	CALL db_idx64_remove($6)
	
.LABEL $label$24
	$global$0 = ($2 + [16])
}

int_32 .FUNC $218 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([88])
	$6 = CALL $96($5)
	*($5 + [72]) = $0
	CALL $289(($3 + [32]), $6)
	*($5 + [80]) = [-1]
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $98(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $190 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([304])) + [28]) = [0]
	*($3 + [20 align=4]) = (int_64)0
	*($3 + [132 align=4]) = (int_64)0
	*($3 + [140 align=4]) = (int_64)0
	*($3 + [148 align=4]) = (int_64)0
	*($3 + [156 align=4]) = (int_64)0
	*($3 + [164 align=4]) = (int_64)0
	*($3 + [172 align=4]) = (int_64)0
	*($3 + [180 align=4]) = (int_64)0
	*($3 + [188 align=4]) = (int_64)0
	*($3 + [196 align=4]) = (int_64)0
	*($3 + [248 align=4]) = (int_64)0
	*($3 + [256 align=4]) = (int_64)0
	*($3 + [264 align=4]) = (int_64)0
	*($3 + [280]) = $1
	CALL $242(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [284])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $243(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $151($3)
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = *($1)
	$3 = ($2 & [15])
	if ( ((uint_32)$3 > (uint_32)[5]) ){ goto $label$7 }
	$4 = (*($1 + [4]) & [15])
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$7 }
	$5 = (*($1 + [8]) & [15])
	if ( ((uint_32)$5 > (uint_32)[5]) ){ goto $label$7 }
	$6 = (*($1 + [12]) & [15])
	if ( ((uint_32)$6 > (uint_32)[5]) ){ goto $label$7 }
	$7 = (*($1 + [16]) & [15])
	if ( ((uint_32)$7 > (uint_32)[5]) ){ goto $label$7 }
	if ( ((uint_32)(((($4 + $3) + $5) + $6) + $7) > (uint_32)[10]) ){ goto $label$7 }
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17176])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$6 }
	*($0) = ($1 << [1])
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$4 = *($1 + [12])
	if ( ((((int_32)$4 ^ (int_32)$2) & [15]) == 0) ){ goto $label$12 }
	$2 = *($1 + [4])
	$5 = *($1 + [16])
	if ( ((((int_32)$5 ^ (int_32)$2) & [15]) == 0) ){ goto $label$12 }
	$2 = ($2 & [15])
	if ( ($3 <= [11]) ){ goto $label$11 }
	if ( ($2 <= [11]) ){ goto $label$11 }
	if ( (($4 & [15]) <= [11]) ){ goto $label$11 }
	if ( ((*($1 + [8]) & [15]) <= [11]) ){ goto $label$11 }
	if ( (($5 & [15]) <= [11]) ){ goto $label$11 }
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17193])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($1 << [1])
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17188])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$14 }
	*($0) = ($1 << [1])
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$13 }
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$14
	$2 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $1
	
.LABEL $label$13
	CALL memcpy($3, [17188], $1)
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	$2 = *($1 + [8])
	$3 = ($2 & [15])
	$6 = ( $3 ? [10] : ($3 <= [10]) )
	$5 = ( $2 ? [10] : ($2 <= [10]) )
	$4 = ( $3 ? [10] : ($3 <= [10]) )
	$4 = ($4 & [15])
	$7 = ( $4 ? [10] : ($4 <= [10]) )
	$5 = ($5 & [15])
	$8 = ( $5 ? [10] : ($5 <= [10]) )
	$9 = ($8 + $7)
	$3 = ((($9 + $4) + $5) + $6)
	if ( ((uint_32)($2 & [14]) > (uint_32)[9]) ){ goto $label$1 }
	$2 = ((uint_32)$3 % (uint_32)[10])
	if ( ((int_32)((uint_32)($5 + $4) % (uint_32)[10]) == (int_32)$2) ){ goto $label$1 }
	if ( ((int_32)((uint_32)($6 + $4) % (uint_32)[10]) == (int_32)$2) ){ goto $label$1 }
	if ( ((int_32)((uint_32)($7 + $4) % (uint_32)[10]) == (int_32)$2) ){ goto $label$1 }
	if ( ((int_32)((uint_32)($8 + $4) % (uint_32)[10]) == (int_32)$2) ){ goto $label$1 }
	if ( ((int_32)((uint_32)($6 + $5) % (uint_32)[10]) == (int_32)$2) ){ goto $label$1 }
	$1 = ($1 + [12])
	$4 = [1]
	
.LOOP $label$15:
	$4 = ($4 + [1])
	if ( ((uint_32)$4 >= (uint_32)[4]) ){ goto $label$3 }
	$10 = *($1)
	$1 = ($1 + [4])
	$10 = ($10 & [15])
	if ( ((int_32)((uint_32)(( $10 ? [10] : ($10 <= [10]) ) + $5) % (uint_32)[10]) != (int_32)$2) ){ goto $label$15 }
	goto $label$1 
	
.LABEL $label$10
	$2 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $1
	
.LABEL $label$9
	CALL memcpy($3, [17193], $1)
	
.LABEL $label$8
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$6
	$2 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $1
	
.LABEL $label$5
	CALL memcpy($3, [17176], $1)
	
.LABEL $label$4
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( ((int_32)((uint_32)($7 + $6) % (uint_32)[10]) == (int_32)$2) ){ goto $label$1 }
	$1 = ((uint_32)$9 % (uint_32)[10])
	if ( ((int_32)((uint_32)($8 + $6) % (uint_32)[10]) == (int_32)$2) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17270])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$18 }
	*($0) = ($1 << [1])
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$2 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($2)
	*($0) = ($2 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $1
	
.LABEL $label$17
	CALL memcpy($3, [17270], $1)
	
.LABEL $label$16
	*(($3 + $1)) = [0]
	return (unreachable)
	
.LABEL $label$2
	CALL $321($0)
	
.LABEL $label$1
	CALL $251($0, $3)
}

void .FUNC $174 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*(($5 = $4) + [24]) = *(($1 + [32]))
	$6 = *($3)
	$7 = *($1)
	$8 = ($1 + [80])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)*(($1 + [84]))) ){ goto $label$2 }
	*($8) = ($3 + [8])
	*($3) = *($6)
	goto $label$1 
	
.LABEL $label$2
	CALL $315(($1 + [76]), $6)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [19158])
	*($5 + [8]) = [0]
	CALL $310(($5 + [8]), $1)
	$3 = *($5 + [8])
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $358($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5 + [12]) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = ($4 + $3)
	CALL $311(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL $362($4)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [40]) = *(($1 + [32]))
	if ( (CALL $354(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$7 }
	$4 = ($1 + [96])
	$1 = *($4)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513481842761924608, ($5 + [32]), $7)
	*($4) = $1
	
.LABEL $label$8
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$7
	$global$0 = ($5 + [48])
}

void .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [18407])
	CALL memcpy(($3 + [16]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [18407])
	CALL memcpy(($3 + [20]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $74(*($1), ($3 + [24]))
}

void .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [20])
	$4 = *($1 + [16])
	$5 = *($1 + [8])
	$6 = *($1)
	$1 = CALL $322($2, ($1 + [24]))
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*(*($0)) + int_32($7 >> [1]))
	$0 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	$7 = CALL $322(($2 + [16]), $1)
	CALL void $8((int_32 $6), (int_64 $5), (int_64 $4), (int_32 $3), (int_32 $7), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($7 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $177 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*(($5 = $4) + [24]) = *(($1 + [32]))
	*($1 + [20]) = *(*($3))
	*($1 + [16]) = *(*(($3 + [4])))
	$6 = *($1)
	CALL $324(($1 + [64]), *(($3 + [8])))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [19158])
	*($5 + [8]) = [0]
	CALL $310(($5 + [8]), $1)
	$7 = *($5 + [8])
	if ( ($7 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($7)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($3 + $7)
	CALL $311(($5 + [8]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $3, $7)
	if ( ($7 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [40]) = *(($1 + [32]))
	if ( (CALL $354(($5 + [24]), ($5 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [96])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513481842761924608, ($5 + [32]), $6)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($5 + [40]))
	
.LABEL $label$5
	$global$0 = ($5 + [48])
}

int_32 .FUNC $170 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$2 = *($0 + [4])
	$3 = *($2 + [48])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-5920943410927747072, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [48]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [18333])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $220($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-5920943410927747072, $5))
	CALL eosio_assert(((int_32)*($8 + [40]) == (int_32)$6), [18333])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [48])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $171 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $3
	$5 = ($0 + [560])
	*($4 + [32]) = $5
	CALL $169(($4 + [24]), ($4 + [32]), $1)
	$6 = *($4 + [28])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($2 + [8])
	
.LOOP $label$3:
	if ( ((int_64)*($6 + [16]) != (int_64)*($1)) ){ goto $label$2 }
	if ( ((int_64)*($6 + [8]) != (int_64)*($4 + [40])) ){ goto $label$4 }
	if ( ((int_64)*(($6 + [32])) == (int_64)*($7)) ){ goto $label$1 }
	
.LABEL $label$4
	CALL $170(($4 + [24]))
	$6 = *($4 + [28])
	if ( $6 ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($0)
	*($4 + [12]) = $1
	*($4 + [8]) = $0
	*($4 + [16]) = $2
	*($4 + [20]) = ($4 + [40])
	CALL $221($4, $5, $3, ($4 + [8]))
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$1
	$3 = *($0)
	$6 = *($4 + [28])
	*($4 + [8]) = $2
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19026])
	CALL $222(*($4 + [32]), $6, $3, ($4 + [8]))
	$global$0 = ($4 + [48])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [18708])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [18407])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [18407])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $322($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $322(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $178 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [8]) = (int_64)3
	*(($4 = $3) + [24]) = *(($1 + [32]))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	*($4 + [8]) = [0]
	CALL $310(($4 + [8]), $1)
	$6 = *($4 + [8])
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	CALL $311(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [40]) = *(($1 + [32]))
	if ( (CALL $354(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [96])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513481842761924608, ($4 + [32]), $5)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($4 + [40]))
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

int_32 .FUNC $179 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [76])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($3 + [64]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((*($3 + [52]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [60])))
	if ( (*($3 + [40]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $361 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $359([8780], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $237 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18517])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [18517])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $95 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$2 = *($0 + [4])
	$3 = *($2 + [80])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-4060986516896743424, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [80]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [18333])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $218($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)-4060986516896743424, $5))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [18333])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [80])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $235 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $360 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8772]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8776])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8772]) = [1]
	$2 = ($2 << [16])
	*([0] + [8776]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8776])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8776]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8772]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8772]) = [1]
	$3 = ($3 << [16])
	*([0] + [8776]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8776])
	
.LABEL $label$10
	*([0] + [8776]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [64])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [48])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [56])), (int_64)-4060986516896743424, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $218($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $313(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [64])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18872])
	*($1) = *($7)
	$8 = *(*($5 + [4]))
	$6 = *($5 + [8])
	*($1 + [16]) = *($6 + [8])
	*($1 + [8]) = $8
	*(($1 + [32])) = *($6 + [8])
	*($1 + [24]) = *($6)
	$6 = *($5 + [12])
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	$5 = *($5 + [16])
	*($1 + [56]) = *($5)
	*(($1 + [64])) = *(($5 + [8]))
	$2 = $2
	$5 = ($2 + [-80])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-8])
	CALL $99(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($4 + [8]), (int_64)-4060986516896743424, *(*($0 + [8])), $8, $5, [72])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [80]) = CALL db_idx64_store($8, (int_64)-4060986516896743424, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$7 = ($global$0 - [208])
	$global$0 = $7
	$8 = *($4)
	$9 = CALL $323(($7 + [192]), $4, (( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) + [-6]), [6], $4)
	$8 = *($4)
	$10 = CALL $323(($7 + [176]), $4, (( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) + [-12]), [6], $4)
	$8 = *($4)
	$11 = CALL $323(($7 + [160]), $4, (( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) + [-18]), [6], $4)
	$8 = *($4)
	$12 = CALL $323(($7 + [144]), $4, (( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) + [-24]), [6], $4)
	$8 = *($4)
	$13 = CALL $323(($7 + [128]), $4, (( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) + [-30]), [6], $4)
	*($7 + [120]) = (CASTING uint_64)(uint_32 ((uint_32)CALL $332($9, [0], [16]) % (uint_32)(((int_32)*($5) * (int_32)[-5]) + [52])))
	*($7 + [112]) = (CASTING uint_64)(uint_32 ((uint_32)CALL $332($10, [0], [16]) % (uint_32)(((int_32)*($5) * (int_32)[-5]) + [51])))
	*($7 + [104]) = (CASTING uint_64)(uint_32 ((uint_32)CALL $332($11, [0], [16]) % (uint_32)(((int_32)*($5) * (int_32)[-5]) + [50])))
	*($7 + [96]) = (CASTING uint_64)(uint_32 ((uint_32)CALL $332($12, [0], [16]) % (uint_32)(((int_32)*($5) * (int_32)[-5]) + [49])))
	*($7 + [88]) = (CASTING uint_64)(uint_32 ((uint_32)CALL $332($13, [0], [16]) % (uint_32)(((int_32)*($5) * (int_32)[-5]) + [48])))
	$8 = ($0 + [320])
	$14 = ($0 + [328])
	$15 = CALL db_lowerbound_i64(*($0 + [320]), *($14), (int_64)4513473976872484864, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$1 }
	$15 = CALL $187($8, $15)
	$14 = CALL db_lowerbound_i64(*($8), *($14), (int_64)4513473976872484864, (int_64)0)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	CALL $187($8, $14)
	*($7 + [20]) = [0]
	*($7 + [16]) = $8
	if ( (uint_64)((int_64))(*(*(CALL $188(($7 + [16])) + [4])) - *($15)) <= (int_64)161) ){ goto $label$1 }
	CALL eosio_assert([1], [19221])
	CALL eosio_assert([1], [18629])
	$14 = CALL db_next_i64(*($15 + [284]), ($7 + [16]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$2 }
	CALL $187($8, $14)
	
.LABEL $label$2
	CALL $189($8, $15)
	
.LABEL $label$1
	$16 = *($0)
	*($7 + [20]) = $1
	*($7 + [16]) = $0
	*($7 + [24]) = $5
	*($7 + [28]) = $6
	*($7 + [32]) = $2
	*($7 + [36]) = $3
	*($7 + [40]) = $4
	*($7 + [44]) = $9
	*($7 + [48]) = $10
	*($7 + [52]) = $11
	*($7 + [56]) = $12
	*($7 + [60]) = $13
	*($7 + [64]) = ($7 + [120])
	*($7 + [68]) = ($7 + [112])
	*($7 + [72]) = ($7 + [104])
	*($7 + [76]) = ($7 + [96])
	*($7 + [80]) = ($7 + [88])
	CALL $190(($7 + [8]), $8, $16, ($7 + [16]))
	if ( (*($7 + [128]) & [1]) ){ goto $label$11 }
	$4 = [1]
	if ( (*($7 + [144]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($13 + [8]))
	$4 = [1]
	if ( ((*($7 + [144]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($12 + [8]))
	if ( ((*($7 + [160]) & $4) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($7 + [160]) & $4) ){ goto $label$7 }
	
.LABEL $label$8
	$4 = [1]
	if ( (*($7 + [176]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($11 + [8]))
	$4 = [1]
	if ( ((*($7 + [176]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($7 + [192]) & $4) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( (*($7 + [192]) & $4) ){ goto $label$3 }
	
.LABEL $label$4
	$global$0 = ($7 + [208])
	return 
	
.LABEL $label$3
	CALL _ZdlPv(*($9 + [8]))
	$global$0 = ($7 + [208])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_64 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$2 = ($global$0 - [1152])
	$global$0 = $2
	*(($3 = (($2 + [560]) + [8]))) = *(($1 + [32]))
	*(($4 = (($2 + [544]) + [8]))) = *(($1 + [48]))
	*(($5 = (($2 + [528]) + [8]))) = *(($1 + [64]))
	*(($6 = (($2 + [512]) + [8]))) = *(($1 + [80]))
	*($2 + [560]) = *($1 + [24])
	*($2 + [544]) = *($1 + [40])
	*($2 + [528]) = *($1 + [56])
	*($2 + [512]) = *($1 + [72])
	$7 = *($1 + [16])
	$8 = *($1 + [8])
	$9 = *($1)
	*(($10 = (($2 + [496]) + [8]))) = *(($1 + [96]))
	*(($11 = (($2 + [480]) + [8]))) = *(($1 + [112]))
	*(($12 = (($2 + [464]) + [8]))) = *(($1 + [128]))
	*(($13 = (($2 + [448]) + [8]))) = *(($1 + [144]))
	*($2 + [496]) = *($1 + [88])
	*($2 + [480]) = *($1 + [104])
	*($2 + [464]) = *($1 + [120])
	*($2 + [448]) = *($1 + [136])
	$14 = *($1 + [152])
	$15 = CALL $322(($2 + [432]), ($1 + [156]))
	$16 = CALL $322(($2 + [416]), ($1 + [168]))
	*(($17 = (($2 + [384]) + [24]))) = *(($1 + [216]))
	*(($18 = (($2 + [384]) + [16]))) = *(($1 + [208]))
	*($2 + [392]) = *(($1 + [200]))
	*($2 + [384]) = *($1 + [192])
	CALL memcpy(($2 + [318]), ($1 + [224]), [66])
	$19 = CALL $322(($2 + [304]), ($1 + [292]))
	$20 = CALL $322(($2 + [288]), ($1 + [304]))
	$21 = *($1 + [320])
	$22 = CALL $322(($2 + [272]), ($1 + [328]))
	*(($23 = (($2 + [256]) + [8]))) = *(($1 + [352]))
	*($2 + [256]) = *($1 + [344])
	*((($2 + [808]) + [8])) = *($23)
	*($2 + [808]) = *($2 + [256])
	CALL memcpy(($2 + [736]), ($2 + [318]), [66])
	*((($2 + [704]) + [24])) = *($17)
	*((($2 + [704]) + [16])) = *($18)
	*((($2 + [688]) + [8])) = *($13)
	*((($2 + [672]) + [8])) = *($12)
	*((($2 + [656]) + [8])) = *($11)
	*($2 + [712]) = *($2 + [392])
	*($2 + [704]) = *($2 + [384])
	*($2 + [688]) = *($2 + [448])
	*($2 + [672]) = *($2 + [464])
	*($2 + [656]) = *($2 + [480])
	*((($2 + [640]) + [8])) = *($10)
	*((($2 + [624]) + [8])) = *($6)
	*((($2 + [608]) + [8])) = *($5)
	*((($2 + [592]) + [8])) = *($4)
	*((($2 + [576]) + [8])) = *($3)
	*($2 + [640]) = *($2 + [496])
	*($2 + [624]) = *($2 + [512])
	*($2 + [608]) = *($2 + [528])
	*($2 + [592]) = *($2 + [544])
	*($2 + [576]) = *($2 + [560])
	$1 = *($0 + [4])
	$3 = *($1 + [4])
	$0 = (*(*($0)) + int_32($3 >> [1]))
	$1 = *($1)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($11 = (($2 + [1136]) + [8]))) = *((($2 + [576]) + [8]))
	*(($12 = (($2 + [1120]) + [8]))) = *((($2 + [592]) + [8]))
	*(($13 = (($2 + [1104]) + [8]))) = *((($2 + [608]) + [8]))
	*(($17 = (($2 + [1088]) + [8]))) = *((($2 + [624]) + [8]))
	*(($18 = (($2 + [1072]) + [8]))) = *((($2 + [640]) + [8]))
	*($2 + [1136]) = *($2 + [576])
	*($2 + [1120]) = *($2 + [592])
	*($2 + [1104]) = *($2 + [608])
	*($2 + [1088]) = *($2 + [624])
	*($2 + [1072]) = *($2 + [640])
	*(($23 = (($2 + [1056]) + [8]))) = *((($2 + [656]) + [8]))
	*(($24 = (($2 + [1040]) + [8]))) = *((($2 + [672]) + [8]))
	*(($25 = (($2 + [1024]) + [8]))) = *((($2 + [688]) + [8]))
	*($2 + [1056]) = *($2 + [656])
	*($2 + [1040]) = *($2 + [672])
	*($2 + [1024]) = *($2 + [688])
	$3 = CALL $322(($2 + [1008]), $15)
	$4 = CALL $322(($2 + [992]), $16)
	*(($26 = (($2 + [960]) + [24]))) = *((($2 + [704]) + [24]))
	*(($27 = (($2 + [960]) + [16]))) = *((($2 + [704]) + [16]))
	*($2 + [968]) = *($2 + [712])
	*($2 + [960]) = *($2 + [704])
	CALL memcpy(($2 + [888]), ($2 + [736]), [66])
	$5 = CALL $322(($2 + [872]), $19)
	$6 = CALL $322(($2 + [856]), $20)
	$10 = CALL $322(($2 + [840]), $22)
	*(($28 = (($2 + [824]) + [8]))) = *((($2 + [808]) + [8]))
	*((($2 + [240]) + [8])) = *($11)
	*((($2 + [224]) + [8])) = *($12)
	*((($2 + [208]) + [8])) = *($13)
	*((($2 + [192]) + [8])) = *($17)
	*($2 + [824]) = *($2 + [808])
	*($2 + [240]) = *($2 + [1136])
	*($2 + [224]) = *($2 + [1120])
	*($2 + [208]) = *($2 + [1104])
	*($2 + [192]) = *($2 + [1088])
	*((($2 + [176]) + [8])) = *($18)
	*((($2 + [160]) + [8])) = *($23)
	*((($2 + [144]) + [8])) = *($24)
	*((($2 + [128]) + [8])) = *($25)
	*((($2 + [96]) + [24])) = *($26)
	*((($2 + [96]) + [16])) = *($27)
	*($2 + [176]) = *($2 + [1072])
	*($2 + [160]) = *($2 + [1056])
	*($2 + [144]) = *($2 + [1040])
	*($2 + [128]) = *($2 + [1024])
	*($2 + [104]) = *($2 + [968])
	*($2 + [96]) = *($2 + [960])
	CALL memcpy(($2 + [30]), ($2 + [888]), [66])
	*((($2 + [8]) + [8])) = *($28)
	*($2 + [8]) = *($2 + [824])
	CALL void $0((int_32 $9), (int_64 $8), (int_64 $7), (int_64 ($2 + [240])), (int_32 ($2 + [224])), (int_32 ($2 + [208])), (int_32 ($2 + [192])), (int_32 ($2 + [176])), (int_32 ($2 + [160])), (int_32 ($2 + [144])), (int_32 ($2 + [128])), (int_32 $14), (int_32 $3), (int_32 $4), (int_32 ($2 + [96])), (int_32 ($2 + [30])), (int_32 $5), (int_32 $6), (int_32 $21), (int_64 $10), (int_32 ($2 + [8])), (int_32 $1))
	if ( (*($2 + [840]) & [1]) ){ goto $label$20 }
	if ( (*($2 + [856]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*($10 + [8]))
	if ( ((*($2 + [856]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($6 + [8]))
	$1 = [1]
	if ( ((*($2 + [872]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$1 = [1]
	if ( (*($2 + [872]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($2 + [992]) & $1) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($2 + [992]) & $1) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($4 + [8]))
	$1 = [1]
	if ( ((*($2 + [1008]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$1 = [1]
	if ( (*($2 + [1008]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($22) & $1) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($22) & $1) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($22 + [8]))
	$1 = [1]
	if ( ((*($20) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$1 = [1]
	if ( (*($20) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($19) & $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($20 + [8]))
	if ( ((*($19) & $1) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($19 + [8]))
	$1 = [1]
	if ( ((*($16) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($16) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($15) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($16 + [8]))
	if ( ((*($15) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($15 + [8]))
	$global$0 = ($2 + [1152])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [1152])
}

int_32 .FUNC $232 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[33]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [34])
	$2 = (*($0 + [4]) + [34])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $231 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)2
	*($0 + [8]) = (int_64)1000
	$1 = *($2)
	CALL eosio_assert([1], [18517])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-6219918586631159808, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [16])) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18708])
	*(($0 + [32])) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [18708])
	*(($0 + [48])) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$4 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$4 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [18708])
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $304(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([104])) + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72 align=4]) = (int_64)0
	*($5 + [80 align=4]) = (int_64)0
	*($5 + [88]) = $0
	CALL $291(($3 + [32]), $5)
	*($5 + [96]) = [-1]
	*($5 + [92]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $71(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [76])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( (*($1 + [64]) & [1]) ){ goto $label$15 }
	if ( (*($1 + [52]) & [1]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($1 + [72])))
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [60])))
	if ( (*($1 + [40]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18708])
	*(($4 = ($0 + [48]))) = (int_64)1398362884
	*($0 + [40]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$5 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [18708])
	*(($4 = ($0 + [64]))) = (int_64)1398362884
	*($0 + [56]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$5 = $6
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$15 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$7 = [0]
	
.LABEL $label$11
	CALL eosio_assert($7, [18708])
	*(($4 = ($0 + [80]))) = (int_64)1398362884
	*($0 + [72]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$5 = $6
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$20 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$7 = [0]
	
.LABEL $label$16
	CALL eosio_assert($7, [18708])
	*(($4 = ($0 + [96]))) = (int_64)1398362884
	*($0 + [88]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$5 = $6
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$25 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$7 = [0]
	
.LABEL $label$21
	CALL eosio_assert($7, [18708])
	*(($4 = ($0 + [112]))) = (int_64)1398362884
	*($0 + [104]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$5 = $6
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$30 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$7 = [0]
	
.LABEL $label$26
	CALL eosio_assert($7, [18708])
	*(($4 = ($0 + [128]))) = (int_64)1398362884
	*($0 + [120]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$5 = $6
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$35 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$7 = [0]
	
.LABEL $label$31
	CALL eosio_assert($7, [18708])
	*(($4 = ($0 + [144]))) = (int_64)1398362884
	*($0 + [136]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$39 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$5 = $6
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$37 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$40 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$7 = [0]
	
.LABEL $label$36
	CALL eosio_assert($7, [18708])
	*($0 + [152]) = (int_64)0
	*(($0 + [160])) = (int_64)0
	*($0 + [168]) = (int_64)0
	*(($0 + [176])) = [0]
	*(($0 + [216])) = (int_64)0
	*(($0 + [208])) = (int_64)0
	*(($0 + [200])) = (int_64)0
	*($0 + [192]) = (int_64)0
	CALL memset(($0 + [224]), [0], [66])
	*($0 + [292 align=4]) = (int_64)0
	*(($0 + [300])) = (int_64)0
	*(($0 + [308])) = (int_64)0
	*($0 + [320]) = (int_64)0
	*($0 + [328]) = (int_64)0
	*(($0 + [336])) = [0]
	*($0 + [344]) = (int_64)0
	*(($4 = ($0 + [352]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$5 = $6
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$45 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$7 = [0]
	
.LABEL $label$41
	CALL eosio_assert($7, [18708])
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $297(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $229($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $230(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $231($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $230(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $271 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $270 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18978])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3020379698556063232)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18924])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18924])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $217(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $277 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [136]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [160]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [168]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [176]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [184]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [192]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [200]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $212(CALL $212(CALL $212(CALL $212(CALL $212(CALL $212(CALL $212(CALL $212(CALL $212(CALL $212($0, ($1 + [208])), ($1 + [220])), ($1 + [232])), ($1 + [244])), ($1 + [256])), ($1 + [268])), ($1 + [280])), ($1 + [292])), ($1 + [304])), ($1 + [316]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [328]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [336]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [344]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [352]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [360]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [368]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $276 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = (*($0) + [200])
	*($0) = $2
	$3 = *($1 + [208])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [212])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *(($1 + [208]))
	$3 = ( *(($1 + [212])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$2
	$3 = *($1 + [220])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [224])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	$3 = *(($1 + [220]))
	$3 = ( *(($1 + [224])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$4
	$3 = *($1 + [232])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [236])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $2
	$3 = *(($1 + [232]))
	$3 = ( *(($1 + [236])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$6
	$3 = *($1 + [244])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [248])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$7:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	*($0) = $2
	$3 = *(($1 + [244]))
	$3 = ( *(($1 + [248])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$8
	$3 = *($1 + [256])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [260])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	$3 = *(($1 + [256]))
	$3 = ( *(($1 + [260])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$10 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$10
	$3 = *($1 + [268])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [272])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$11:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$11 }
	*($0) = $2
	$3 = *(($1 + [268]))
	$3 = ( *(($1 + [272])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$12 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$12
	$3 = *($1 + [280])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [284])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$13:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$13 }
	*($0) = $2
	$3 = *(($1 + [280]))
	$3 = ( *(($1 + [284])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$14 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$14
	$3 = *($1 + [292])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [296])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	$3 = *(($1 + [292]))
	$3 = ( *(($1 + [296])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$16 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$16
	$3 = *($1 + [304])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [308])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$17:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$17 }
	*($0) = $2
	$3 = *(($1 + [304]))
	$3 = ( *(($1 + [308])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$18 }
	$2 = ($3 + $2)
	*($0) = $2
	
.LABEL $label$18
	$3 = *($1 + [316])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [320])) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$19:
	$2 = ($2 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$19 }
	*($0) = $2
	$1 = *(($1 + [316]))
	$1 = ( *(($1 + [320])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	if ( ($1 == 0) ){ goto $label$20 }
	$2 = ($1 + $2)
	*($0) = $2
	
.LABEL $label$20
	*($0) = ($2 + [48])
	return $0
}

int_32 .FUNC $275 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [112]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [136]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [152]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [160]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [168]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [176]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [184]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [192]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [200]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $74(CALL $74(CALL $74(CALL $74(CALL $74(CALL $74(CALL $74(CALL $74(CALL $74(CALL $74($0, ($1 + [208])), ($1 + [220])), ($1 + [232])), ($1 + [244])), ($1 + [256])), ($1 + [268])), ($1 + [280])), ($1 + [292])), ($1 + [304])), ($1 + [316]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [328]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [336]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [344]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [352]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [360]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [368]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $274 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $150($1)
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $50 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [192])
	$global$0 = $3
	*($3 + [152]) = $1
	CALL require_auth($1)
	CALL eosio_assert((int_64)(*(($0 + [152])) == 0), [17400])
	$4 = CALL $76(($3 + [104]), $2)
	CALL eosio_assert(((int_64)*($4 + [24]) != (int_64)$1), [17454])
	$1 = *($4 + [16])
	*($3 + [96]) = $1
	$5 = ($0 + [240])
	$7 = *(($0 + [268]))
	$6 = *(($0 + [264]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($7 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$7 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [268]) == (int_32)$5), [18333])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$2 = CALL db_find_i64(*($5), *(($0 + [248])), (int_64)4513475553721843712, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $77($5, $2)
	CALL eosio_assert(((int_32)*($8 + [268]) == (int_32)$5), [18333])
	
.LABEL $label$1
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [17691])
	$1 = *($3 + [152])
	CALL eosio_assert(((int_64)*($8 + [32]) != (int_64)$1), [17479])
	CALL $78($0, $1, *($8 + [248]))
	CALL $79($0, $1, *($3 + [96]))
	$2 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	*($3 + [92]) = $2
	if ( ((int_64)*($8 + [16]) != (int_64)1) ){ goto $label$6 }
	CALL eosio_assert(((uint_32)*($8 + [24]) > (uint_32)$2), [17497])
	goto $label$5 
	
.LABEL $label$6
	CALL eosio_assert([0], [17497])
	
.LABEL $label$5
	$1 = *(($8 + [72]))
	*($3 + [80]) = $1
	$10 = ($4 + [32])
	$2 = CALL $322(($3 + [168]), $10)
	CALL $80(($3 + [64]), $0, $2)
	if ( ((*($3 + [168]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($2 + [8]))
	$1 = *($3 + [80])
	
.LABEL $label$7
	$11 = ($4 + [16])
	$12 = *(*($3 + [64]) + [16])
	*($3 + [48]) = $12
	*($3 + [56]) = $1
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$12 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$1 = $12
	$7 = [1]
	$6 = $2
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$1 = $12
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [18708])
	CALL $81($0, $8, ($3 + [152]), ($3 + [48]), $4)
	$1 = *($0)
	*($3 + [172]) = ($3 + [92])
	*($3 + [168]) = ($3 + [48])
	*($3 + [176]) = ($3 + [64])
	*($3 + [180]) = ($3 + [80])
	CALL eosio_assert($9, [19026])
	CALL $82($5, $8, $1, ($3 + [168]))
	if ( ((int_64)*((($3 + [48]) + [8])) != (int_64)1397703940) ){ goto $label$13 }
	if ( ((int_64)*($3 + [48]) < (int_64)10000) ){ goto $label$13 }
	CALL $83($0, *($3 + [152]))
	
.LABEL $label$13
	CALL $322($3, $4)
	*(($3 + [24])) = *(($11 + [8]))
	*($3 + [16]) = *($11)
	$2 = CALL $322(($3 + [32]), $10)
	$1 = *($0)
	*($3 + [168]) = $0
	*($3 + [172]) = ($3 + [96])
	*($3 + [176]) = ($3 + [152])
	*($3 + [180]) = $3
	*($3 + [184]) = ($3 + [48])
	*($3 + [188]) = ($3 + [64])
	CALL $84(($3 + [160]), ($0 + [280]), $1, ($3 + [168]))
	if ( (*($2) & [1]) ){ goto $label$18 }
	if ( (*($3) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($3 + [40])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*($3 + [8]))
	$2 = *($3 + [64])
	if ( $2 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$2 = *($3 + [64])
	if ( ($2 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	*($3 + [68]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$14
	if ( (*($10) & [1]) ){ goto $label$21 }
	if ( (*($3 + [104]) & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL _ZdlPv(*(($4 + [40])))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$19
	$global$0 = ($3 + [192])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $358($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [18407])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $74(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $362($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $75(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

void .FUNC $279 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $212(*($1), *($0))
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $212(*($1), *($0 + [24]))
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $358($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [18708])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [18407])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [18407])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [18407])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $362($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [744]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [748])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [744]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [704]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [708])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [704]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	CALL $179(($0 + [664]))
	$1 = *(($0 + [624]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [628])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [624]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [584]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [588])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [584]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [544]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [548])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [544]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	$1 = *(($0 + [504]))
	if ( ($1 == 0) ){ goto $label$26 }
	$2 = ($0 + [508])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$28 }
	
.LOOP $label$29:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$30 }
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$29 }
	$3 = *(($0 + [504]))
	goto $label$27 
	
.LABEL $label$28
	$3 = $1
	
.LABEL $label$27
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$26
	$1 = *(($0 + [464]))
	if ( ($1 == 0) ){ goto $label$31 }
	$2 = ($0 + [468])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$33 }
	
.LOOP $label$34:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$35 }
	CALL _ZdlPv($4)
	
.LABEL $label$35
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$34 }
	$3 = *(($0 + [464]))
	goto $label$32 
	
.LABEL $label$33
	$3 = $1
	
.LABEL $label$32
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$1 = *(($0 + [424]))
	if ( ($1 == 0) ){ goto $label$36 }
	$2 = ($0 + [428])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$38 }
	
.LOOP $label$39:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$40 }
	CALL _ZdlPv($4)
	
.LABEL $label$40
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$39 }
	$3 = *(($0 + [424]))
	goto $label$37 
	
.LABEL $label$38
	$3 = $1
	
.LABEL $label$37
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$36
	$1 = *(($0 + [384]))
	if ( ($1 == 0) ){ goto $label$41 }
	$2 = ($0 + [388])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$43 }
	
.LOOP $label$44:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$45 }
	CALL $150($4)
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$44 }
	$3 = *(($0 + [384]))
	goto $label$42 
	
.LABEL $label$43
	$3 = $1
	
.LABEL $label$42
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$41
	$1 = *(($0 + [344]))
	if ( ($1 == 0) ){ goto $label$46 }
	$2 = ($0 + [348])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$48 }
	
.LOOP $label$49:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$50 }
	CALL $151($4)
	CALL _ZdlPv($4)
	
.LABEL $label$50
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$49 }
	$3 = *(($0 + [344]))
	goto $label$47 
	
.LABEL $label$48
	$3 = $1
	
.LABEL $label$47
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$46
	$1 = *(($0 + [304]))
	if ( ($1 == 0) ){ goto $label$51 }
	$2 = ($0 + [308])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$53 }
	
.LOOP $label$54:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$55 }
	CALL _ZdlPv($4)
	
.LABEL $label$55
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$54 }
	$3 = *(($0 + [304]))
	goto $label$52 
	
.LABEL $label$53
	$3 = $1
	
.LABEL $label$52
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$51
	CALL $180(($0 + [264]))
	$1 = *(($0 + [224]))
	if ( ($1 == 0) ){ goto $label$56 }
	$2 = ($0 + [228])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$58 }
	
.LOOP $label$59:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$60 }
	CALL _ZdlPv($4)
	
.LABEL $label$60
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$59 }
	$3 = *(($0 + [224]))
	goto $label$57 
	
.LABEL $label$58
	$3 = $1
	
.LABEL $label$57
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$56
	$1 = *(($0 + [184]))
	if ( ($1 == 0) ){ goto $label$61 }
	$2 = ($0 + [188])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$63 }
	
.LOOP $label$64:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$65 }
	CALL _ZdlPv($4)
	
.LABEL $label$65
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$64 }
	$3 = *(($0 + [184]))
	goto $label$62 
	
.LABEL $label$63
	$3 = $1
	
.LABEL $label$62
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$61
	$1 = *(($0 + [72]))
	if ( ($1 == 0) ){ goto $label$66 }
	$2 = ($0 + [76])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$68 }
	
.LOOP $label$69:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$70 }
	CALL _ZdlPv($4)
	
.LABEL $label$70
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$69 }
	$3 = *(($0 + [72]))
	goto $label$67 
	
.LABEL $label$68
	$3 = $1
	
.LABEL $label$67
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$66
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$71 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$73 }
	
.LOOP $label$74:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$75 }
	CALL _ZdlPv($4)
	
.LABEL $label$75
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$74 }
	$3 = *(($0 + [32]))
	goto $label$72 
	
.LABEL $label$73
	$3 = $1
	
.LABEL $label$72
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$71
	return $0
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([88])) + [72]) = $0
	CALL $232(($3 + [32]), $5)
	*($5 + [76]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $228(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*(($5 = CALL _Znwj([88])) + [72]) = $1
	CALL $226($3, $5)
	*($4 + [104]) = (($4 + [16]) + [66])
	*($4 + [100]) = ($4 + [16])
	*($4 + [96]) = ($4 + [16])
	CALL $227(($4 + [96]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, $6, ($4 + [16]), [66])
	*($5 + [76]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [96]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [96]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $228(($1 + [24]), ($4 + [96]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [96])
	*($4 + [96]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [18407])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [18407])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $230(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([392])
	$6 = CALL $272($5)
	*($5 + [376]) = $0
	CALL $275(($3 + [32]), $6)
	*($5 + [380]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $274(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $150($1)
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$4 = ($global$0 - [96])
	$global$0 = $4
	if ( ((int_64)*($2 + [8]) != (int_64)1480674564) ){ goto $label$1 }
	$5 = *($2)
	if ( ((int_64)$5 < (int_64)1) ){ goto $label$1 }
	$6 = (int_64)0
	$7 = (int_64)59
	$2 = [17360]
	$8 = (int_64)0
	
.LOOP $label$2:
	$9 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$3 }
	$10 = *($2)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$10 = ($10 + [-91])
	goto $label$4 
	
.LABEL $label$5
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$3
	$2 = ($2 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$2 }
	$6 = (int_64)6
	
.LOOP $label$6:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$6 }
	$6 = (int_64)0
	$7 = (int_64)59
	$2 = [17360]
	$11 = (int_64)0
	
.LOOP $label$7:
	$9 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$8 }
	$10 = *($2)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$10 = ($10 + [-91])
	goto $label$9 
	
.LABEL $label$10
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$2 = ($2 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$9 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$7 }
	$6 = (int_64)5
	
.LOOP $label$11:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$11 }
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = (int_64)5783885
	$2 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$6 = $7
	$10 = [1]
	$12 = $2
	$2 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$6 = $7
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = ((int_32)$2 < (int_32)[6])
	$12 = ($2 + [1])
	$2 = $12
	if ( $10 ){ goto $label$16 }
	$10 = [1]
	$2 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$10 = [0]
	
.LABEL $label$12
	CALL eosio_assert($10, [18708])
	*(($4 + [16])) = (int_64)1480674564
	*($4 + [8]) = $5
	*($4) = *($1)
	$10 = CALL $322(($4 + [24]), $3)
	*($4 + [48]) = (int_64)8516769789752901632
	*($4 + [40]) = $11
	*(($2 = CALL _Znwj([16]))) = $8
	*($2 + [8]) = (int_64)3617214756542218240
	*(($4 + [76])) = [0]
	$12 = ($2 + [16])
	*((($4 + [40]) + [24])) = $12
	*(($4 + [60])) = $12
	*($4 + [56]) = $2
	*($4 + [68 align=4]) = (int_64)0
	$2 = *($10)
	$12 = ( *(($4 + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($12 + [24])
	$6 = (CASTING uint_64)(uint_32 $12)
	$12 = (($4 + [40]) + [28])
	
.LOOP $label$17:
	$2 = ($2 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$17 }
	if ( ($2 == 0) ){ goto $label$19 }
	CALL $184($12, $2)
	$12 = *(($4 + [72]))
	$2 = *(($4 + [68]))
	goto $label$18 
	
.LABEL $label$19
	$12 = [0]
	$2 = [0]
	
.LABEL $label$18
	*($4 + [80]) = $2
	*($4 + [88]) = $12
	$12 = ($12 - $2)
	CALL eosio_assert(((int_32)$12 > (int_32)[7]), [18517])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($12 + [-8]) > (int_32)[7]), [18517])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($12 + [-16]) > (int_32)[7]), [18517])
	CALL memcpy(($2 + [16]), ($4 + [16]), [8])
	*($4 + [84]) = ($2 + [24])
	CALL $212(($4 + [80]), $10)
	CALL $185(($4 + [80]), ($4 + [40]))
	$2 = *($4 + [80])
	CALL send_inline($2, (*($4 + [84]) - $2))
	$2 = *($4 + [80])
	if ( ($2 == 0) ){ goto $label$20 }
	*($4 + [84]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$20
	$2 = *($4 + [68])
	if ( ($2 == 0) ){ goto $label$21 }
	*(($4 + [72])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$21
	$2 = *($4 + [56])
	if ( ($2 == 0) ){ goto $label$22 }
	*(($4 + [60])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$22
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $150 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [316]) & [1]) ){ goto $label$19 }
	if ( (*($0 + [304]) & [1]) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL _ZdlPv(*(($0 + [324])))
	if ( ((*($0 + [304]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($0 + [312])))
	$1 = [1]
	if ( ((*($0 + [292]) & [1]) == 0) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$1 = [1]
	if ( (*($0 + [292]) & [1]) ){ goto $label$15 }
	
.LABEL $label$16
	if ( (*($0 + [280]) & $1) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL _ZdlPv(*(($0 + [300])))
	if ( ((*($0 + [280]) & $1) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($0 + [288])))
	$1 = [1]
	if ( ((*($0 + [268]) & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$1 = [1]
	if ( (*($0 + [268]) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	if ( (*($0 + [256]) & $1) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*(($0 + [276])))
	if ( ((*($0 + [256]) & $1) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*(($0 + [264])))
	$1 = [1]
	if ( ((*($0 + [244]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($0 + [244]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($0 + [232]) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*(($0 + [252])))
	if ( ((*($0 + [232]) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($0 + [240])))
	$1 = [1]
	if ( ((*($0 + [220]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($0 + [220]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($0 + [208]) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*(($0 + [228])))
	if ( ((*($0 + [208]) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*(($0 + [216])))
	return $0
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $151 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [260]) & [1]) ){ goto $label$17 }
	if ( (*($0 + [248]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($0 + [268])))
	if ( ((*($0 + [248]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($0 + [256])))
	$1 = [1]
	if ( ((*($0 + [192]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = [1]
	if ( (*($0 + [192]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($0 + [180]) & $1) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($0 + [200])))
	if ( ((*($0 + [180]) & $1) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($0 + [188])))
	$1 = [1]
	if ( ((*($0 + [168]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($0 + [168]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($0 + [156]) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($0 + [176])))
	if ( ((*($0 + [156]) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($0 + [164])))
	$1 = [1]
	if ( ((*($0 + [144]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($0 + [144]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($0 + [132]) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($0 + [152])))
	if ( ((*($0 + [132]) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($0 + [140])))
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($0 + [20]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	CALL _ZdlPv(*(($0 + [28])))
	return $0
}

void .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $355([19664])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [19664], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	*($3) = (int_64)0
	*($3 + [8]) = [0]
	$5 = ($3 | [1])
	$7 = *($2)
	
.LOOP $label$5:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $3(($3 + [16]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), $3)
	if ( (*($3) & [1]) ){ goto $label$7 }
	*($3) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$6
	CALL $326($3, [0])
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$5 }
	$4 = *($3)
	$2 = ($4 & [1])
	$6 = ($3 + [8])
	CALL $330($0, ( *($6) ? $5 : $2 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $2 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$8
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $321($0)
}

void .FUNC $157 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $355([19695])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [19695], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	*($3) = (int_64)0
	*($3 + [8]) = [0]
	$5 = ($3 | [1])
	$7 = *($2)
	
.LOOP $label$5:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $3(($3 + [16]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), $3)
	if ( (*($3) & [1]) ){ goto $label$7 }
	*($3) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$6
	CALL $326($3, [0])
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$5 }
	$4 = *($3)
	$2 = ($4 & [1])
	$6 = ($3 + [8])
	CALL $330($0, ( *($6) ? $5 : $2 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $2 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$8
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $321($0)
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [120]))
	$6 = *($1 + [124])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513472877252575232, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [128]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513472877252575233, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $155 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [376]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	$3 = *($3)
	*($1 + [360]) = *($3)
	*(($1 + [368])) = *(($3 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	*(($3 = $4)) = [0]
	CALL $276($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $358($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $277($3, $1)
	CALL db_update_i64(*($1 + [380]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $362($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$4 = CALL $355([19730])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($4 << [1])
	$5 = ($0 + [1])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $4
	
.LABEL $label$3
	CALL memcpy($5, [19730], $4)
	
.LABEL $label$2
	*(($5 + $4)) = [0]
	*($3) = (int_64)0
	*($3 + [8]) = [0]
	$5 = ($3 | [1])
	$7 = *($2)
	
.LOOP $label$5:
	$8 = ((uint_64)$7 / (uint_64)(int_64)10)
	$4 = (CASTING uint_32)(uint_64 (int_64))($7 - ((int_64)$8 * (int_64)10))
	CALL $3(($3 + [16]), int_32((( ($4) | [48]) ? ($4 + [55]) : ($4 <= [10]) ) << [24]) >> [24]), $3)
	if ( (*($3) & [1]) ){ goto $label$7 }
	*($3) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($3 + [8]))) = [0]
	*($3 + [4]) = [0]
	
.LABEL $label$6
	CALL $326($3, [0])
	*(($3 + [8])) = *((($3 + [16]) + [8]))
	*($3) = *($3 + [16])
	$4 = ((uint_64)$7 > (uint_64)(int_64)9)
	$7 = $8
	if ( $4 ){ goto $label$5 }
	$4 = *($3)
	$2 = ($4 & [1])
	$6 = ($3 + [8])
	CALL $330($0, ( *($6) ? $5 : $2 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $2 ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6))
	
.LABEL $label$8
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $321($0)
}

void .FUNC $159 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [376]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	$3 = *($3)
	*($1 + [360]) = *($3)
	*(($1 + [368])) = *(($3 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	*(($3 = $4)) = [0]
	CALL $276($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $358($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $277($3, $1)
	CALL db_update_i64(*($1 + [380]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $362($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $273 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	$1 = CALL memcpy($1, $4, [208])
	CALL $324(($1 + [208]), ($4 + [208]))
	CALL $324(($1 + [220]), ($4 + [220]))
	CALL $324(($1 + [232]), ($4 + [232]))
	CALL $324(($1 + [244]), ($4 + [244]))
	CALL $324(($1 + [256]), ($4 + [256]))
	CALL $324(($1 + [268]), ($4 + [268]))
	CALL $324(($1 + [280]), ($4 + [280]))
	CALL $324(($1 + [292]), ($4 + [292]))
	CALL $324(($1 + [304]), ($4 + [304]))
	CALL $324(($1 + [316]), ($4 + [316]))
	*(($1 + [368])) = *(($4 + [368]))
	*(($1 + [360])) = *(($4 + [360]))
	*(($1 + [352])) = *(($4 + [352]))
	*(($1 + [344])) = *(($4 + [344]))
	*(($1 + [336])) = *(($4 + [336]))
	*($1 + [328]) = *($4 + [328])
	*(($4 = $2)) = [0]
	CALL $276($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $358($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL $277($4, $1)
	$6 = *($1)
	*($1 + [380]) = CALL db_store_i64(*($3 + [8]), (int_64)4513481673254256640, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $362($2)
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

int_32 .FUNC $272 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	*($0 + [48]) = (int_64)0
	$1 = [0]
	*($0 + [40]) = [0]
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$10 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	
.LABEL $label$6
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$3 = $4
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$15 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$2 = [0]
	
.LABEL $label$11
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$3 = $4
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$20 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$2 = [0]
	
.LABEL $label$16
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [120]))) = (int_64)1398362884
	*($0 + [112]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$3 = $4
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$25 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$2 = [0]
	
.LABEL $label$21
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [136]))) = (int_64)1398362884
	*($0 + [128]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$3 = $4
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$30 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$2 = [0]
	
.LABEL $label$26
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [152]))) = (int_64)1398362884
	*($0 + [144]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$32 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$3 = $4
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$32 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$35 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$32
	$2 = [0]
	
.LABEL $label$31
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [168]))) = (int_64)1398362884
	*($0 + [160]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$39 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$39
	$3 = $4
	
.LOOP $label$40:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$37 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$40 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$2 = [0]
	
.LABEL $label$36
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [184]))) = (int_64)1398362884
	*($0 + [176]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$43:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$42 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$44 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$44
	$3 = $4
	
.LOOP $label$45:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$42 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$45 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$43 }
	goto $label$41 
	
.LABEL $label$42
	$2 = [0]
	
.LABEL $label$41
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [200]))) = (int_64)1398362884
	*($0 + [192]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$3 = $4
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$50 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$2 = [0]
	
.LABEL $label$46
	CALL eosio_assert($2, [18708])
	*($0 + [208 align=4]) = (int_64)0
	*(($0 + [216])) = (int_64)0
	*(($0 + [224])) = (int_64)0
	*($0 + [232 align=4]) = (int_64)0
	*(($0 + [240])) = (int_64)0
	*(($0 + [248])) = (int_64)0
	*($0 + [256 align=4]) = (int_64)0
	*(($0 + [264])) = (int_64)0
	*(($0 + [272])) = (int_64)0
	*($0 + [280 align=4]) = (int_64)0
	*(($0 + [288])) = (int_64)0
	*(($0 + [296])) = (int_64)0
	*($0 + [304 align=4]) = (int_64)0
	*(($0 + [312])) = (int_64)0
	*(($0 + [320])) = (int_64)0
	*($0 + [360]) = (int_64)0
	*(($1 = ($0 + [368]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$3 = $4
	$6 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$53 }
	goto $label$54 
	
.LABEL $label$55
	$3 = $4
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$52 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$56 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$53 }
	
.LABEL $label$54
	CALL eosio_assert($6, [18708])
	return $0
	
.LABEL $label$52
	CALL eosio_assert([0], [18708])
	return $0
	
.LABEL $label$51
	CALL eosio_assert([0], [18708])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)5371973418988895233, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $198($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)5371973418988895232, $6))
	CALL eosio_assert(((int_32)*($4 + [72]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*(($4 + [84])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $344 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $356([8496])
	$3 = *([0] + [8504])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8508])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8512]
	*([0] + [8504]) = [8512]
	$4 = *([0] + [8508])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $361([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8504])
	*([0] + [8504]) = $3
	*([0] + [8508]) = [0]
	
.LABEL $label$2
	*([0] + [8508]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $357([8496])
	return [0]
	
.LABEL $label$1
	CALL $357([8496])
	return [-1]
}

void .FUNC $228 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $229 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)1
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [18517])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-6219918586631159808, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	$2 = ($global$0 - [2304])
	$global$0 = $2
	*(($3 = (($2 + [1088]) + [16]))) = *(($1 + [32]))
	*(($4 = (($2 + [1088]) + [24]))) = *(($1 + [40]))
	*($2 + [1088]) = *($1 + [16])
	*($2 + [1096]) = *(($1 + [24]))
	$5 = *($1)
	CALL memcpy(($2 + [1022]), ($1 + [48]), [66])
	$6 = CALL $322(($2 + [1008]), ($1 + [116]))
	*(($7 = (($2 + [976]) + [24]))) = *(($1 + [152]))
	*(($8 = (($2 + [976]) + [16]))) = *(($1 + [144]))
	*($2 + [984]) = *(($1 + [136]))
	*($2 + [976]) = *($1 + [128])
	CALL memcpy(($2 + [910]), ($1 + [160]), [66])
	$9 = CALL $322(($2 + [896]), ($1 + [228]))
	*(($10 = (($2 + [864]) + [24]))) = *(($1 + [264]))
	*(($11 = (($2 + [864]) + [16]))) = *(($1 + [256]))
	*($2 + [872]) = *(($1 + [248]))
	*($2 + [864]) = *($1 + [240])
	CALL memcpy(($2 + [798]), ($1 + [272]), [66])
	$12 = CALL $322(($2 + [784]), ($1 + [340]))
	*(($13 = (($2 + [752]) + [24]))) = *(($1 + [376]))
	*(($14 = (($2 + [752]) + [16]))) = *(($1 + [368]))
	*($2 + [760]) = *(($1 + [360]))
	*($2 + [752]) = *($1 + [352])
	CALL memcpy(($2 + [686]), ($1 + [384]), [66])
	$15 = CALL $322(($2 + [672]), ($1 + [452]))
	*(($16 = (($2 + [640]) + [24]))) = *(($1 + [488]))
	*(($17 = (($2 + [640]) + [16]))) = *(($1 + [480]))
	*($2 + [648]) = *(($1 + [472]))
	*($2 + [640]) = *($1 + [464])
	CALL memcpy(($2 + [574]), ($1 + [496]), [66])
	$1 = CALL $322(($2 + [560]), ($1 + [564]))
	CALL memcpy(($2 + [1600]), ($2 + [574]), [66])
	*((($2 + [1568]) + [24])) = *($16)
	*((($2 + [1568]) + [16])) = *($17)
	*($2 + [1576]) = *($2 + [648])
	*($2 + [1568]) = *($2 + [640])
	CALL memcpy(($2 + [1496]), ($2 + [686]), [66])
	*((($2 + [1456]) + [24])) = *($13)
	*((($2 + [1456]) + [16])) = *($14)
	*($2 + [1464]) = *($2 + [760])
	*($2 + [1456]) = *($2 + [752])
	CALL memcpy(($2 + [1384]), ($2 + [798]), [66])
	*((($2 + [1344]) + [24])) = *($10)
	*((($2 + [1344]) + [16])) = *($11)
	*($2 + [1352]) = *($2 + [872])
	*($2 + [1344]) = *($2 + [864])
	CALL memcpy(($2 + [1272]), ($2 + [910]), [66])
	*((($2 + [1232]) + [24])) = *($7)
	*((($2 + [1232]) + [16])) = *($8)
	*($2 + [1240]) = *($2 + [984])
	*($2 + [1232]) = *($2 + [976])
	CALL memcpy(($2 + [1160]), ($2 + [1022]), [66])
	*((($2 + [1120]) + [24])) = *($4)
	*((($2 + [1120]) + [16])) = *($3)
	*($2 + [1128]) = *($2 + [1096])
	*($2 + [1120]) = *($2 + [1088])
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$3 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($13 = (($2 + [2272]) + [24]))) = *((($2 + [1120]) + [24]))
	*(($14 = (($2 + [2272]) + [16]))) = *((($2 + [1120]) + [16]))
	*($2 + [2280]) = *($2 + [1128])
	*($2 + [2272]) = *($2 + [1120])
	CALL memcpy(($2 + [2200]), ($2 + [1160]), [66])
	$4 = CALL $322(($2 + [2184]), $6)
	*(($16 = (($2 + [2144]) + [24]))) = *((($2 + [1232]) + [24]))
	*(($17 = (($2 + [2144]) + [16]))) = *((($2 + [1232]) + [16]))
	*($2 + [2152]) = *($2 + [1240])
	*($2 + [2144]) = *($2 + [1232])
	CALL memcpy(($2 + [2072]), ($2 + [1272]), [66])
	$7 = CALL $322(($2 + [2056]), $9)
	*(($18 = (($2 + [2016]) + [24]))) = *((($2 + [1344]) + [24]))
	*(($19 = (($2 + [2016]) + [16]))) = *((($2 + [1344]) + [16]))
	*($2 + [2024]) = *($2 + [1352])
	*($2 + [2016]) = *($2 + [1344])
	CALL memcpy(($2 + [1944]), ($2 + [1384]), [66])
	$8 = CALL $322(($2 + [1928]), $12)
	*(($20 = (($2 + [1888]) + [24]))) = *((($2 + [1456]) + [24]))
	*(($21 = (($2 + [1888]) + [16]))) = *((($2 + [1456]) + [16]))
	*($2 + [1896]) = *($2 + [1464])
	*($2 + [1888]) = *($2 + [1456])
	CALL memcpy(($2 + [1816]), ($2 + [1496]), [66])
	$10 = CALL $322(($2 + [1800]), $15)
	*(($22 = (($2 + [1760]) + [24]))) = *((($2 + [1568]) + [24]))
	*(($23 = (($2 + [1760]) + [16]))) = *((($2 + [1568]) + [16]))
	*($2 + [1768]) = *($2 + [1576])
	*($2 + [1760]) = *($2 + [1568])
	CALL memcpy(($2 + [1688]), ($2 + [1600]), [66])
	$11 = CALL $322(($2 + [1672]), $1)
	*((($2 + [528]) + [24])) = *($13)
	*((($2 + [528]) + [16])) = *($14)
	*($2 + [536]) = *($2 + [2280])
	*($2 + [528]) = *($2 + [2272])
	CALL memcpy(($2 + [462]), ($2 + [2200]), [66])
	*((($2 + [416]) + [24])) = *($16)
	*((($2 + [416]) + [16])) = *($17)
	*($2 + [424]) = *($2 + [2152])
	*($2 + [416]) = *($2 + [2144])
	CALL memcpy(($2 + [350]), ($2 + [2072]), [66])
	*((($2 + [304]) + [24])) = *($18)
	*((($2 + [304]) + [16])) = *($19)
	*($2 + [312]) = *($2 + [2024])
	*($2 + [304]) = *($2 + [2016])
	CALL memcpy(($2 + [238]), ($2 + [1944]), [66])
	*((($2 + [192]) + [24])) = *($20)
	*((($2 + [192]) + [16])) = *($21)
	*($2 + [200]) = *($2 + [1896])
	*($2 + [192]) = *($2 + [1888])
	CALL memcpy(($2 + [126]), ($2 + [1816]), [66])
	*((($2 + [80]) + [24])) = *($22)
	*((($2 + [80]) + [16])) = *($23)
	*($2 + [88]) = *($2 + [1768])
	*($2 + [80]) = *($2 + [1760])
	CALL memcpy(($2 + [14]), ($2 + [1688]), [66])
	CALL void $3((int_32 $5), (int_64 ($2 + [528])), (int_32 ($2 + [462])), (int_32 $4), (int_32 ($2 + [416])), (int_32 ($2 + [350])), (int_32 $7), (int_32 ($2 + [304])), (int_32 ($2 + [238])), (int_32 $8), (int_32 ($2 + [192])), (int_32 ($2 + [126])), (int_32 $10), (int_32 ($2 + [80])), (int_32 ($2 + [14])), (int_32 $11), (int_32 $0))
	if ( (*($2 + [1672]) & [1]) ){ goto $label$20 }
	if ( (*($2 + [1800]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($2 + [1800]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($10 + [8]))
	$0 = [1]
	if ( ((*($2 + [1928]) & [1]) == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$0 = [1]
	if ( (*($2 + [1928]) & [1]) ){ goto $label$16 }
	
.LABEL $label$17
	if ( (*($2 + [2056]) & $0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [2056]) & $0) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*($7 + [8]))
	$0 = [1]
	if ( ((*($2 + [2184]) & [1]) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$0 = [1]
	if ( (*($2 + [2184]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($1) & $0) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & $0) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($1 + [8]))
	$1 = [1]
	if ( ((*($15) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$1 = [1]
	if ( (*($15) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($12) & $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($15 + [8]))
	if ( ((*($12) & $1) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($12 + [8]))
	$1 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($9) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($6) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($6) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [2304])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [2304])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [18407])
	CALL memcpy(($4 + [16]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($4 + [49])
	*($2 + [8]) = ($4 + [48])
	*($2 + [16]) = ($4 + [50])
	*($2 + [20]) = ($4 + [51])
	*($2 + [24]) = ($4 + [52])
	*($2 + [28]) = ($4 + [53])
	*($2 + [32]) = ($4 + [54])
	*($2 + [36]) = ($4 + [55])
	*($2 + [40]) = ($4 + [56])
	*($2 + [44]) = ($4 + [57])
	*($2 + [48]) = ($4 + [58])
	*($2 + [52]) = ($4 + [59])
	*($2 + [56]) = ($4 + [60])
	*($2 + [60]) = ($4 + [61])
	*($2 + [64]) = ($4 + [62])
	*($2 + [68]) = ($4 + [63])
	*($2 + [72]) = ($4 + [64])
	*($2 + [76]) = ($4 + [65])
	*($2 + [80]) = ($4 + [66])
	*($2 + [88]) = ($4 + [68])
	*($2 + [84]) = ($4 + [67])
	*($2 + [92]) = ($4 + [69])
	*($2 + [96]) = ($4 + [70])
	*($2 + [100]) = ($4 + [71])
	*($2 + [104]) = ($4 + [72])
	*($2 + [108]) = ($4 + [73])
	*($2 + [112]) = ($4 + [74])
	*($2 + [116]) = ($4 + [75])
	*($2 + [120]) = ($4 + [76])
	*($2 + [124]) = ($4 + [77])
	*($2 + [128]) = ($4 + [78])
	*($2 + [132]) = ($4 + [79])
	*($2 + [136]) = ($4 + [80])
	*($2 + [140]) = ($4 + [81])
	*($2 + [144]) = ($4 + [82])
	*($2 + [148]) = ($4 + [83])
	*($2 + [152]) = ($4 + [84])
	*($2 + [156]) = ($4 + [85])
	*($2 + [164]) = ($4 + [87])
	*($2 + [160]) = ($4 + [86])
	*($2 + [168]) = ($4 + [88])
	*($2 + [172]) = ($4 + [89])
	*($2 + [176]) = ($4 + [90])
	*($2 + [180]) = ($4 + [91])
	*($2 + [184]) = ($4 + [92])
	*($2 + [188]) = ($4 + [93])
	*($2 + [192]) = ($4 + [94])
	*($2 + [196]) = ($4 + [95])
	*($2 + [200]) = ($4 + [96])
	*($2 + [204]) = ($4 + [97])
	*($2 + [208]) = ($4 + [98])
	*($2 + [212]) = ($4 + [99])
	*($2 + [216]) = ($4 + [100])
	*($2 + [220]) = ($4 + [101])
	*($2 + [224]) = ($4 + [102])
	*($2 + [228]) = ($4 + [103])
	*($2 + [232]) = ($4 + [104])
	*($2 + [240]) = ($4 + [106])
	*($2 + [236]) = ($4 + [105])
	*($2 + [244]) = ($4 + [107])
	*($2 + [248]) = ($4 + [108])
	*($2 + [252]) = ($4 + [109])
	*($2 + [256]) = ($4 + [110])
	*($2 + [260]) = ($4 + [111])
	*($2 + [264]) = ($4 + [112])
	*($2 + [268]) = ($4 + [113])
	CALL $245(($2 + [8]), $2)
	CALL $74(*($1), ($4 + [116]))
	*($2 + [8]) = $4
	CALL $302(($2 + [8]), $1)
	$global$0 = ($2 + [272])
}

void .FUNC $224 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	CALL eosio_assert([1], [18517])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $225 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	CALL eosio_assert([1], [18517])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $226 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($1 + [8]) = (int_64)1
	*($1) = (int_64)1
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$3 = CALL $355([18463])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($2 + [8]) = ($3 << [1])
	$4 = (($2 + [8]) | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [8]) = ($5 | [1])
	*($2 + [16]) = $4
	*($2 + [12]) = $3
	
.LABEL $label$3
	CALL memcpy($4, [18463], $3)
	
.LABEL $label$2
	*(($4 + $3)) = [0]
	CALL $7(($2 + [24]), ($2 + [8]))
	*(($1 + [48])) = *((($2 + [24]) + [32]))
	*(($1 + [40])) = *((($2 + [24]) + [24]))
	*(($1 + [32])) = *(($2 + [40]))
	*(($1 + [24])) = *(($2 + [32]))
	*($1 + [16 align=1]) = *($2 + [24])
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($2 + [16]))
	
.LABEL $label$5
	*($1 + [64]) = (int_64)0
	*($1 + [56]) = (int_64)1000000
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $321(($2 + [8]))
}

int_32 .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*(($4 = ($2 + [32]))) = *(($1 + [48]))
	*(($5 = ($2 + [24]))) = *(($1 + [40]))
	*(($6 = ($2 + [16]))) = *(($1 + [32]))
	*(($7 = ($2 + [8]))) = *(($1 + [24]))
	*($2) = *($1 + [16 align=1])
	*((($2 + [40]) + [32])) = *($4)
	*((($2 + [40]) + [24])) = *($5)
	*((($2 + [40]) + [16])) = *($6)
	*((($2 + [40]) + [8])) = *($7)
	*($2 + [40]) = *($2)
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[33]), [18517])
	CALL memcpy(*($0 + [4]), ($2 + [40]), [34])
	$3 = (*($0 + [4]) + [34])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [80])
	return $0
}

int_32 .FUNC $220 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $358($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [36]) = $7
	*($3 + [32]) = $7
	*($3 + [40]) = ($7 + $6)
	*(($9 = CALL _Znwj([56])) + [32]) = (int_64)1398362884
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$10 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18708])
	*($9 + [40]) = $0
	CALL $285(($3 + [32]), $9)
	*($9 + [44]) = $1
	*($9 + [48 align=4]) = (int_64)-1
	*($3 + [24]) = $9
	$10 = *($9)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $10
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $281($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $362($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

void .FUNC $221 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)1398362884
	*($5 + [24]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18708])
	*($5 + [40]) = $1
	CALL $280(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [44])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $281(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $222 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [128])
	$global$0 = $4
	*($4 + [112]) = $2
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($4 + [96]) = *($1 + [16])
	*($4 + [104]) = *($1 + [8])
	$5 = *($1)
	*($4 + [88]) = $5
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [19449])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [19511])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [19158])
	*($4 + [80]) = ($4 + [40])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	CALL $282(($4 + [72]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	$3 = ($0 + [36])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [52]) = $1
	*($4 + [48]) = $0
	*($4 + [60]) = $1
	*($4 + [56]) = ($4 + [96])
	*($4 + [64]) = ($4 + [88])
	*($4 + [68]) = ($4 + [112])
	*($4 + [120]) = ($4 + [48])
	CALL $283(($4 + [120]), $3, ($3 + [1]))
	$global$0 = ($4 + [128])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [12]) = [44]
	CALL $1(($3 + [16]), $2, ($3 + [12]))
	CALL eosio_assert(((int_32)(*($3 + [20]) - *($3 + [16])) == (int_32)[48]), [18523])
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$2 = CALL $332(*($3 + [16]), [0], [10])
	*($3 + [8]) = $2
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18523])
	*($3 + [12]) = $2
	CALL $182($0, ($3 + [8]))
	$2 = *($3 + [12])
	$4 = CALL $332((*($3 + [16]) + [12]), [0], [10])
	*($3 + [8]) = $4
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18523])
	$4 = *($3 + [8])
	*($3 + [12]) = ($2 + $4)
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)*($0 + [8])) ){ goto $label$2 }
	*($2) = $4
	*(($0 + [4])) = ($2 + [4])
	goto $label$1 
	
.LABEL $label$2
	CALL $182($0, ($3 + [8]))
	
.LABEL $label$1
	$2 = CALL $332((*($3 + [16]) + [24]), [0], [10])
	*($3 + [8]) = $2
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18523])
	$4 = *($3 + [8])
	*($3 + [12]) = (*($3 + [12]) + $4)
	$5 = ($0 + [4])
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [8]))) ){ goto $label$4 }
	*($2) = $4
	*($5) = ($2 + [4])
	goto $label$3 
	
.LABEL $label$4
	CALL $182($0, ($3 + [8]))
	
.LABEL $label$3
	$2 = CALL $332((*($3 + [16]) + [36]), [0], [10])
	*($3 + [8]) = $2
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18523])
	$5 = *($3 + [8])
	*($3 + [12]) = (*($3 + [12]) + $5)
	$6 = ($0 + [8])
	$7 = *($6)
	$4 = ($0 + [4])
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$11 }
	*($2) = $5
	$2 = ($2 + [4])
	*($4) = $2
	if ( ($2 <= $7) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $182($0, ($3 + [8]))
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)*($6)) ){ goto $label$9 }
	
.LABEL $label$10
	*($2) = *($3 + [12])
	*(($0 + [4])) = ($2 + [4])
	$4 = *($3 + [16])
	if ( $4 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $182($0, ($3 + [12]))
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = *($3 + [20])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$12:
	$0 = ($2 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $0
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$12 }
	$0 = *($3 + [16])
	goto $label$5 
	
.LABEL $label$7
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($3 + [20]) = $4
	CALL _ZdlPv($0)
	$global$0 = ($3 + [32])
}

void .FUNC $52 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth($1)
	$4 = [0]
	$5 = *($2)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $7
	$4 = [1]
	$8 = $6
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$6 < (int_32)[6])
	$8 = ($6 + [1])
	$6 = $8
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$6 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [17798])
	CALL eosio_assert(((int_64)$5 > (int_64)0), [17813])
	$4 = ($2 + [8])
	CALL $63(($3 + [32]), $0, $4)
	CALL eosio_assert(((int_32)*($3 + [36]) != (int_32)[0]), [18728])
	*($3 + [88]) = ($0 + [280])
	CALL $101(($3 + [32]), ($3 + [88]), ($3 + [24]))
	$6 = *($3 + [36])
	if ( ($6 == 0) ){ goto $label$6 }
	
.LOOP $label$7:
	if ( ((int_64)*($6 + [16]) != (int_64)*($3 + [24])) ){ goto $label$6 }
	CALL eosio_assert(((int_64)*(($6 + [40])) != (int_64)*($4)), [19788])
	CALL $102(($3 + [32]))
	$6 = *($3 + [36])
	if ( $6 ){ goto $label$7 }
	
.LABEL $label$6
	*($3 + [16]) = ($0 + [160])
	CALL $68(($3 + [8]), ($3 + [16]), ($3 + [24]))
	$8 = [0]
	$6 = *($3 + [12])
	if ( ($6 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	if ( ((int_64)*($6 + [8]) != (int_64)*($3 + [24])) ){ goto $label$9 }
	if ( ((int_64)*(($6 + [24])) == (int_64)*($4)) ){ goto $label$11 }
	CALL $69(($3 + [8]))
	$6 = *($3 + [12])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL eosio_assert(((int_64)*($6 + [16]) >= (int_64)*($2)), [17837])
	$6 = *($3 + [12])
	if ( ((int_64)*($6 + [16]) != (int_64)*($2)) ){ goto $label$13 }
	$1 = *($3 + [8])
	*($3 + [32]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [19221])
	CALL $69(($3 + [32]))
	CALL $103(*($3 + [16]), $6)
	goto $label$12 
	
.LABEL $label$13
	$7 = *($0)
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19026])
	$4 = *($3 + [16])
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$4), [19061])
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL eosio_assert0()), [19107])
	$8 = ($6 + [8])
	*($3 + [72]) = *($8)
	$1 = *($6)
	$9 = ($6 + [24])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($9)), [19529])
	$5 = (int_64)
	*($6 + [16]) = $5(*($6 + [16]) - *($2)))
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [19577])
	CALL eosio_assert(((int_64)*($6 + [16]) < (int_64)4611686018427387904), [19599])
	CALL eosio_assert(((int_64)$1 == (int_64)*($6)), [19158])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($3 + [32]), $6, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy((($3 + [32]) | [8]), $8, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy((($3 + [32]) + [16]), ($6 + [16]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy((($3 + [32]) + [24]), $9, [8])
	CALL db_update_i64(*($6 + [36]), $7, ($3 + [32]), [32])
	if ( (uint_64)($1 <= *($4 + [16])) ){ goto $label$14 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($3 + [88]) = *($8)
	if ( (CALL $354(($3 + [72]), ($3 + [88]), [8]) == 0) ){ goto $label$12 }
	$8 = ($6 + [40])
	$6 = *($8)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-3020379698556063232, ($3 + [80]), $1)
	*($8) = $6
	
.LABEL $label$15
	CALL db_idx64_update($6, $7, ($3 + [88]))
	
.LABEL $label$12
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	$6 = CALL $355([17856])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$18 }
	*($3 + [32]) = ($6 << [1])
	$4 = (($3 + [32]) | [1])
	if ( $6 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$8 = (($6 + [16]) & [-16])
	$4 = CALL _Znwj($8)
	*($3 + [32]) = ($8 | [1])
	*($3 + [40]) = $4
	*($3 + [36]) = $6
	
.LABEL $label$17
	CALL memcpy($4, [17856], $6)
	
.LABEL $label$16
	*(($4 + $6)) = [0]
	CALL $73($0, ($3 + [24]), $2, ($3 + [32]))
	$8 = [1]
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*($3 + [40]))
	
.LABEL $label$9
	CALL eosio_assert($8, [17865])
	$global$0 = ($3 + [96])
	return (unreachable)
	
.LABEL $label$8
	CALL $321(($3 + [32]))
}

int_64 .FUNC $72 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [8]) = $3
	$5 = ($0 + [680])
	$7 = *(($0 + [708]))
	$6 = *(($0 + [704]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [18333])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [688])), (int_64)-6219918586631159808, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $57($5, $8)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [18333])
	
.LABEL $label$1
	$8 = ($2 + [-1])
	if ( ((uint_32)$8 > (uint_32)[3]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$9
	$1 = *($0)
	*($4) = ($4 + [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [19026])
	CALL $223($5, $9, $1, $4)
	
.LABEL $label$8
	$global$0 = ($4 + [16])
	return (int_64)0
	
.LABEL $label$7
	$1 = *($0)
	*($4) = ($4 + [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [19026])
	CALL $224($5, $9, $1, $4)
	$global$0 = ($4 + [16])
	return (int_64)0
	
.LABEL $label$6
	$1 = *($0)
	*($4) = ($4 + [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [19026])
	CALL $225($5, $9, $1, $4)
	$global$0 = ($4 + [16])
	return (int_64)0
	
.LABEL $label$5
	$1 = *($9 + [8])
	$global$0 = ($4 + [16])
	$8
	return $1
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	$5 = *($2 + [8])
	if ( ((int_64)$5 != (int_64)1397703940) ){ goto $label$6 }
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$6 }
	$6 = *($0)
	$5 = (int_64)6
	
.LOOP $label$7:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$7 }
	$5 = (int_64)0
	$7 = (int_64)59
	$0 = [17348]
	$8 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$13 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$9 = ($9 + [-91])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$8 }
	$5 = (int_64)0
	$7 = (int_64)59
	$0 = [17339]
	$11 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$19 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$9 = ($9 + [-91])
	goto $label$17 
	
.LABEL $label$19
	$10 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$15
	$0 = ($0 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$14 }
	*((($4 + [8]) + [24])) = *(($2 + [8]))
	*($4 + [8]) = $6
	*($4 + [16]) = *($1)
	*($4 + [24]) = *($2)
	$9 = CALL $322((($4 + [8]) + [32]), $3)
	*($4 + [64]) = $11
	*($4 + [56]) = $8
	*(($0 = CALL _Znwj([16]))) = $6
	*($0 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$2 = ($0 + [16])
	*((($4 + [56]) + [24])) = $2
	*(($4 + [76])) = $2
	*($4 + [72]) = $0
	*($4 + [84 align=4]) = (int_64)0
	$0 = *($9)
	$9 = ( *((($4 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($9 + [32])
	$5 = (CASTING uint_64)(uint_32 $9)
	$9 = ($4 + [84])
	
.LOOP $label$20:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$20 }
	if ( ($0 == 0) ){ goto $label$5 }
	CALL $184($9, $0)
	$9 = *(($4 + [88]))
	$0 = *(($4 + [84]))
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$5 != (int_64)1480674564) ){ goto $label$1 }
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	$6 = *($0)
	$5 = (int_64)6
	
.LOOP $label$21:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$21 }
	$5 = (int_64)0
	$10 = (int_64)59
	$0 = [17360]
	$8 = (int_64)0
	
.LOOP $label$22:
	$7 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$23 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$9 = ($9 + [-91])
	goto $label$24 
	
.LABEL $label$25
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$23
	$0 = ($0 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$7 | (int_64)$8)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$22 }
	$5 = (int_64)0
	$7 = (int_64)59
	$0 = [17339]
	$11 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$31 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$9 = ($9 + [-91])
	goto $label$29 
	
.LABEL $label$31
	$10 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$27
	$0 = ($0 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$26 }
	*((($4 + [8]) + [24])) = *(($2 + [8]))
	*($4 + [8]) = $6
	*($4 + [16]) = *($1)
	*($4 + [24]) = *($2)
	$9 = CALL $322((($4 + [8]) + [32]), $3)
	*($4 + [64]) = $11
	*($4 + [56]) = $8
	*(($0 = CALL _Znwj([16]))) = $6
	*($0 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$2 = ($0 + [16])
	*((($4 + [56]) + [24])) = $2
	*(($4 + [76])) = $2
	*($4 + [72]) = $0
	*($4 + [84 align=4]) = (int_64)0
	$0 = *($9)
	$9 = ( *((($4 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($9 + [32])
	$5 = (CASTING uint_64)(uint_32 $9)
	$9 = ($4 + [84])
	
.LOOP $label$32:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$32 }
	if ( ($0 == 0) ){ goto $label$3 }
	CALL $184($9, $0)
	$9 = *(($4 + [88]))
	$0 = *(($4 + [84]))
	goto $label$2 
	
.LABEL $label$5
	$9 = [0]
	$0 = [0]
	
.LABEL $label$4
	*($4 + [100]) = $0
	*($4 + [96]) = $0
	*($4 + [104]) = $9
	*($4 + [112]) = ($4 + [96])
	*($4 + [120]) = ($4 + [8])
	CALL $213(($4 + [120]), ($4 + [112]))
	CALL $185(($4 + [96]), ($4 + [56]))
	$0 = *($4 + [96])
	CALL send_inline($0, (*($4 + [100]) - $0))
	$0 = *($4 + [96])
	if ( ($0 == 0) ){ goto $label$33 }
	*($4 + [100]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$33
	$0 = *($4 + [84])
	if ( ($0 == 0) ){ goto $label$34 }
	*(($4 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$34
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$35 }
	*(($4 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$35
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [48])))
	$global$0 = ($4 + [128])
	return 
	
.LABEL $label$3
	$9 = [0]
	$0 = [0]
	
.LABEL $label$2
	*($4 + [100]) = $0
	*($4 + [96]) = $0
	*($4 + [104]) = $9
	*($4 + [112]) = ($4 + [96])
	*($4 + [120]) = ($4 + [8])
	CALL $213(($4 + [120]), ($4 + [112]))
	CALL $185(($4 + [96]), ($4 + [56]))
	$0 = *($4 + [96])
	CALL send_inline($0, (*($4 + [100]) - $0))
	$0 = *($4 + [96])
	if ( ($0 == 0) ){ goto $label$36 }
	*($4 + [100]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$36
	$0 = *($4 + [84])
	if ( ($0 == 0) ){ goto $label$37 }
	*(($4 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$37
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$38 }
	*(($4 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$38
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	$6 = ($5 + [680])
	$7 = *($0)
	$9 = *(($5 + [708]))
	$8 = *(($5 + [704]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)1) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$6), [18333])
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$10 = CALL db_find_i64(*($6), *(($5 + [688])), (int_64)-6219918586631159808, (int_64)1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $57($6, $10)
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$6), [18333])
	
.LABEL $label$1
	*($1 + [8]) = (int_64)1
	*($1) = *($11 + [8])
	*($1 + [24]) = [0]
	*($1 + [32]) = *(*($4 + [4]))
	CALL $324(($1 + [40]), *($4 + [8]))
	CALL $324(($1 + [52]), *($4 + [12]))
	$9 = *($4 + [4])
	$11 = ($1 + [80])
	$10 = *($11)
	if ( ((int_32)$10 == (int_32)*(($1 + [84]))) ){ goto $label$6 }
	*($11) = ($10 + [8])
	*($10) = *($9)
	goto $label$5 
	
.LABEL $label$6
	CALL $315(($1 + [76]), $9)
	
.LABEL $label$5
	*($1 + [16]) = [1]
	*($1 + [20]) = *(*($4 + [16]))
	CALL $324(($1 + [64]), *($4 + [20]))
	*($3 + [8]) = [0]
	CALL $310(($3 + [8]), $1)
	$9 = *($3 + [8])
	if ( ($9 <= [513]) ){ goto $label$8 }
	$10 = CALL $358($9)
	goto $label$7 
	
.LABEL $label$8
	$10 = ($2 - (($9 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$7
	*($3 + [12]) = $10
	*($3 + [8]) = $10
	*($3 + [16]) = ($10 + $9)
	CALL $311(($3 + [8]), $1)
	$12 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($7 + [8]), (int_64)4513481842761924608, *(*($0 + [8])), $12, $10, $9)
	if ( ($9 <= [513]) ){ goto $label$9 }
	CALL $362($10)
	
.LABEL $label$9
	if ( (uint_64)($12 <= *($7 + [16])) ){ goto $label$10 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$12 = *(($7 + [8]))
	$13 = *(*(($0 + [8])))
	$14 = *($1)
	*($3 + [24]) = *(($1 + [32]))
	*($1 + [96]) = CALL db_idx64_store($12, (int_64)4513481842761924608, $13, $14, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $294(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $322($0, $1)
	*($0 + [24]) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	$2 = ($0 + [32])
	$1 = CALL $355([0])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($2) = ($1 << [1])
	$2 = ($2 + [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0 + [32]) = ($3 | [1])
	*(($0 + [40])) = $2
	*(($0 + [36])) = $1
	
.LABEL $label$3
	CALL memcpy($2, [0], $1)
	
.LABEL $label$2
	*(($2 + $1)) = [0]
	CALL $181($0)
	return $0
	
.LABEL $label$1
	CALL $321($2)
	return (unreachable)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([280])
	$6 = CALL $119($5)
	*($5 + [268]) = $0
	CALL $287(($3 + [32]), $6)
	*($5 + [276]) = [-1]
	*($5 + [272]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $121(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( (*($1 + [232]) & [1]) ){ goto $label$18 }
	if ( (*($1 + [220]) & [1]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL _ZdlPv(*(($1 + [240])))
	if ( ((*($1 + [220]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL _ZdlPv(*(($1 + [228])))
	$4 = [1]
	if ( ((*($1 + [208]) & [1]) == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$4 = [1]
	if ( (*($1 + [208]) & [1]) ){ goto $label$14 }
	
.LABEL $label$15
	if ( (*($1 + [196]) & $4) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL _ZdlPv(*(($1 + [216])))
	if ( ((*($1 + [196]) & $4) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($1 + [204])))
	if ( (*($1 + [184]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	if ( ((*($1 + [184]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($1 + [192])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $246($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $326($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $326($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $321($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $322($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $322(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $78 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_64)$2 == (int_64)9999999999) ){ goto $label$1 }
	$3 = ($0 + [640])
	$5 = *(($0 + [668]))
	$4 = *(($0 + [664]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$3), [18333])
	goto $label$2 
	
.LABEL $label$3
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [648])), (int_64)4513481842761924608, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $65($3, $6)
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$3), [18333])
	
.LABEL $label$2
	$5 = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [18545])
	$7 = *(($7 + [80]))
	$6 = *($7 + [76])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	$5 = [0]
	
.LOOP $label$7:
	$5 = ($5 | ((int_64)*($6) == (int_64)$1))
	$6 = ($6 + [8])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$7 }
	$5 = ($5 & [1])
	
.LABEL $label$6
	CALL eosio_assert($5, [18569])
	
.LABEL $label$1
}

void .FUNC $79 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	$4 = ($0 + [240])
	$6 = *(($0 + [268]))
	$5 = *(($0 + [264]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [268]) == (int_32)$4), [18333])
	goto $label$1 
	
.LABEL $label$2
	$7 = CALL db_find_i64(*($4), *(($0 + [248])), (int_64)4513475553721843712, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $77($4, $7) + [268]) == (int_32)$4), [18333])
	
.LABEL $label$1
	*($3 + [16]) = ($0 + [280])
	CALL $101(($3 + [8]), ($3 + [16]), ($3 + [24]))
	$7 = *($3 + [12])
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	if ( ((int_64)*($7 + [16]) != (int_64)*($3 + [24])) ){ goto $label$5 }
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)$2), [18597])
	CALL $102(($3 + [8]))
	$7 = *($3 + [12])
	if ( $7 ){ goto $label$6 }
	
.LABEL $label$5
	$global$0 = ($3 + [32])
}

int_32 .FUNC $259 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [112]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $258 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	*($0 + [64]) = (int_64)0
	$1 = [0]
	*($0 + [56]) = [0]
	*(($2 = ($0 + [72]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$10 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	
.LABEL $label$6
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$3 = $4
	$6 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	$3 = $4
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$16 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	
.LABEL $label$14
	CALL eosio_assert($6, [18708])
	return $0
	
.LABEL $label$12
	CALL eosio_assert([0], [18708])
	return $0
	
.LABEL $label$11
	CALL eosio_assert([0], [18708])
	return $0
}

int_32 .FUNC $312 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [18517])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [18517])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $313 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [76]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18978])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4060986516896743424)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18924])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18924])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $218(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $314 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [76]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18978])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)5371973418988895232)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18924])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18924])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $198(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $315 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $340($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $316 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$0 = ($global$0 - [352])
	$global$0 = $0
	*(($0 + [16])) = [0]
	*($0 + [8]) = (int_64)0
	$1 = CALL $355([17176])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$5 }
	*($0 + [8]) = ($1 << [1])
	$2 = (($0 + [8]) | [1])
	if ( $1 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0 + [8]) = ($3 | [1])
	*($0 + [16]) = $2
	*($0 + [12]) = $1
	
.LABEL $label$4
	CALL memcpy($2, [17176], $1)
	
.LABEL $label$3
	*(($2 + $1)) = [0]
	*(($0 + [40])) = [0]
	*($0 + [32]) = (int_64)0
	*($0 + [24]) = (int_64)4636666922610458624
	$4 = ($0 + [32])
	$1 = CALL $355([17188])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$21 }
	*(($0 + [32])) = ($1 << [1])
	$2 = ($4 + [1])
	if ( $1 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [40])) = $2
	*(($0 + [36])) = $1
	*($0 + [32]) = ($3 | [1])
	
.LABEL $label$20
	CALL memcpy($2, [17188], $1)
	
.LABEL $label$19
	*(($2 + $1)) = [0]
	*(($0 + [64])) = [0]
	*(($0 + [48])) = (int_64)4636596553866280960
	*($0 + [56]) = (int_64)0
	$5 = ($0 + [56])
	$1 = CALL $355([17193])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$24 }
	*(($0 + [56])) = ($1 << [1])
	$2 = ($5 + [1])
	if ( $1 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [64])) = $2
	*(($0 + [60])) = $1
	*($0 + [56]) = ($3 | [1])
	
.LABEL $label$23
	CALL memcpy($2, [17193], $1)
	
.LABEL $label$22
	*(($2 + $1)) = [0]
	*(($0 + [88])) = [0]
	*(($0 + [72])) = (int_64)4636526185122103296
	*($0 + [80]) = (int_64)0
	$6 = ($0 + [80])
	$1 = CALL $355([17202])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$27 }
	*(($0 + [80])) = ($1 << [1])
	$2 = ($6 + [1])
	if ( $1 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [88])) = $2
	*(($0 + [84])) = $1
	*($0 + [80]) = ($3 | [1])
	
.LABEL $label$26
	CALL memcpy($2, [17202], $1)
	
.LABEL $label$25
	*(($2 + $1)) = [0]
	*(($0 + [112])) = [0]
	*(($0 + [96])) = (int_64)4621819117588971520
	*($0 + [104]) = (int_64)0
	$7 = ($0 + [104])
	$1 = CALL $355([17207])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$30 }
	*(($0 + [104])) = ($1 << [1])
	$2 = ($7 + [1])
	if ( $1 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [112])) = $2
	*(($0 + [108])) = $1
	*($0 + [104]) = ($3 | [1])
	
.LABEL $label$29
	CALL memcpy($2, [17207], $1)
	
.LABEL $label$28
	*(($2 + $1)) = [0]
	*(($0 + [136])) = [0]
	*(($0 + [120])) = (int_64)4621256167635550208
	*($0 + [128]) = (int_64)0
	$8 = ($0 + [128])
	$1 = CALL $355([17214])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$33 }
	*(($0 + [128])) = ($1 << [1])
	$2 = ($8 + [1])
	if ( $1 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [136])) = $2
	*(($0 + [132])) = $1
	*($0 + [128]) = ($3 | [1])
	
.LABEL $label$32
	CALL memcpy($2, [17214], $1)
	
.LABEL $label$31
	*(($2 + $1)) = [0]
	*(($0 + [160])) = [0]
	*(($0 + [144])) = (int_64)4620693217682128896
	*($0 + [152]) = (int_64)0
	$9 = ($0 + [152])
	$1 = CALL $355([17221])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$36 }
	*(($0 + [152])) = ($1 << [1])
	$2 = ($9 + [1])
	if ( $1 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [160])) = $2
	*(($0 + [156])) = $1
	*($0 + [152]) = ($3 | [1])
	
.LABEL $label$35
	CALL memcpy($2, [17221], $1)
	
.LABEL $label$34
	*(($2 + $1)) = [0]
	*(($0 + [184])) = [0]
	*(($0 + [168])) = (int_64)4619567317775286272
	*($0 + [176]) = (int_64)0
	$10 = ($0 + [176])
	$1 = CALL $355([17228])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$39 }
	*(($0 + [176])) = ($1 << [1])
	$2 = ($10 + [1])
	if ( $1 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [184])) = $2
	*(($0 + [180])) = $1
	*($0 + [176]) = ($3 | [1])
	
.LABEL $label$38
	CALL memcpy($2, [17228], $1)
	
.LABEL $label$37
	*(($2 + $1)) = [0]
	*(($0 + [208])) = [0]
	*(($0 + [192])) = (int_64)4618441417868443648
	*($0 + [200]) = (int_64)0
	$11 = ($0 + [200])
	$1 = CALL $355([17235])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$42 }
	*(($0 + [200])) = ($1 << [1])
	$2 = ($11 + [1])
	if ( $1 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [208])) = $2
	*(($0 + [204])) = $1
	*($0 + [200]) = ($3 | [1])
	
.LABEL $label$41
	CALL memcpy($2, [17235], $1)
	
.LABEL $label$40
	*(($2 + $1)) = [0]
	*(($0 + [232])) = [0]
	*(($0 + [216])) = (int_64)4617315517961601024
	*($0 + [224]) = (int_64)0
	$12 = ($0 + [224])
	$1 = CALL $355([17242])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$45 }
	*(($0 + [224])) = ($1 << [1])
	$2 = ($12 + [1])
	if ( $1 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [232])) = $2
	*(($0 + [228])) = $1
	*($0 + [224]) = ($3 | [1])
	
.LABEL $label$44
	CALL memcpy($2, [17242], $1)
	
.LABEL $label$43
	*(($2 + $1)) = [0]
	*(($0 + [256])) = [0]
	*(($0 + [240])) = (int_64)4616189618054758400
	*($0 + [248]) = (int_64)0
	$13 = ($0 + [248])
	$1 = CALL $355([17249])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$48 }
	*(($0 + [248])) = ($1 << [1])
	$2 = ($13 + [1])
	if ( $1 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [256])) = $2
	*(($0 + [252])) = $1
	*($0 + [248]) = ($3 | [1])
	
.LABEL $label$47
	CALL memcpy($2, [17249], $1)
	
.LABEL $label$46
	*(($2 + $1)) = [0]
	*(($0 + [280])) = [0]
	*(($0 + [264])) = (int_64)4613937818241073152
	*($0 + [272]) = (int_64)0
	$14 = ($0 + [272])
	$1 = CALL $355([17256])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$51 }
	*(($0 + [272])) = ($1 << [1])
	$2 = ($14 + [1])
	if ( $1 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [280])) = $2
	*(($0 + [276])) = $1
	*($0 + [272]) = ($3 | [1])
	
.LABEL $label$50
	CALL memcpy($2, [17256], $1)
	
.LABEL $label$49
	*(($2 + $1)) = [0]
	*(($0 + [304])) = [0]
	*(($0 + [288])) = (int_64)4611686018427387904
	*($0 + [296]) = (int_64)0
	$15 = ($0 + [296])
	$1 = CALL $355([17263])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$54 }
	*(($0 + [296])) = ($1 << [1])
	$2 = ($15 + [1])
	if ( $1 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [304])) = $2
	*(($0 + [300])) = $1
	*($0 + [296]) = ($3 | [1])
	
.LABEL $label$53
	CALL memcpy($2, [17263], $1)
	
.LABEL $label$52
	*(($2 + $1)) = [0]
	*(($0 + [328])) = [0]
	*(($0 + [312])) = (int_64)4607182418800017408
	*($0 + [320]) = (int_64)0
	$16 = ($0 + [320])
	$1 = CALL $355([17270])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$57 }
	*(($0 + [320])) = ($1 << [1])
	$2 = ($16 + [1])
	if ( $1 ){ goto $label$56 }
	goto $label$55 
	
.LABEL $label$57
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [328])) = $2
	*(($0 + [324])) = $1
	*($0 + [320]) = ($3 | [1])
	
.LABEL $label$56
	CALL memcpy($2, [17270], $1)
	
.LABEL $label$55
	*(($2 + $1)) = [0]
	*(($0 + [336])) = (int_64)0
	*([0] + [8464 align=4]) = (int_64)0
	*([0] + [8460]) = [8464]
	$1 = [0]
	
.LOOP $label$59:
	$3 = (($0 + [8]) + $1)
	$17 = CALL $286([8460], [8464], ($0 + [348]), ($0 + [344]), $3)
	if ( (*($17) == 0) ){ goto $label$60 }
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)[336]) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$60
	$2 = CALL _Znwj([40])
	CALL $322(($2 + [16]), $3)
	*($2) = (int_64)0
	*($2 + [8]) = *($0 + [348])
	*($17) = $2
	*($2 + [32]) = *(($3 + [16]))
	$3 = *(*([0] + [8460]))
	if ( ($3 == 0) ){ goto $label$61 }
	*([0] + [8460]) = $3
	$2 = *($17)
	
.LABEL $label$61
	CALL $128(*([0] + [8464]), $2)
	*([0] + [8468]) = (*([0] + [8468]) + [1])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)[336]) ){ goto $label$59 }
	
.LABEL $label$58
	if ( ((*(($0 + [320])) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*(($0 + [328])))
	
.LABEL $label$62
	if ( ((*(($0 + [296])) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($0 + [304])))
	
.LABEL $label$63
	if ( ((*(($0 + [272])) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*(($0 + [280])))
	
.LABEL $label$64
	if ( ((*(($0 + [248])) & [1]) == 0) ){ goto $label$65 }
	CALL _ZdlPv(*(($0 + [256])))
	
.LABEL $label$65
	if ( ((*(($0 + [224])) & [1]) == 0) ){ goto $label$66 }
	CALL _ZdlPv(*(($0 + [232])))
	
.LABEL $label$66
	if ( ((*(($0 + [200])) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*(($0 + [208])))
	
.LABEL $label$67
	if ( ((*(($0 + [176])) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($0 + [184])))
	
.LABEL $label$68
	if ( ((*(($0 + [152])) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*(($0 + [160])))
	
.LABEL $label$69
	if ( ((*(($0 + [128])) & [1]) == 0) ){ goto $label$70 }
	CALL _ZdlPv(*(($0 + [136])))
	
.LABEL $label$70
	if ( ((*(($0 + [104])) & [1]) == 0) ){ goto $label$71 }
	CALL _ZdlPv(*(($0 + [112])))
	
.LABEL $label$71
	if ( ((*(($0 + [80])) & [1]) == 0) ){ goto $label$72 }
	CALL _ZdlPv(*(($0 + [88])))
	
.LABEL $label$72
	if ( ((*(($0 + [56])) & [1]) == 0) ){ goto $label$73 }
	CALL _ZdlPv(*(($0 + [64])))
	
.LABEL $label$73
	if ( ((*(($0 + [32])) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*(($0 + [40])))
	
.LABEL $label$74
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*($0 + [16]))
	
.LABEL $label$75
	CALL $344([25], [0], [8192])
	*(($0 + [16])) = [0]
	*($0 + [8]) = (int_64)0
	$1 = CALL $355([17176])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$78 }
	*($0 + [8]) = ($1 << [1])
	$2 = (($0 + [8]) | [1])
	if ( $1 ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$78
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0 + [8]) = ($3 | [1])
	*($0 + [16]) = $2
	*($0 + [12]) = $1
	
.LABEL $label$77
	CALL memcpy($2, [17176], $1)
	
.LABEL $label$76
	*(($2 + $1)) = [0]
	*(($4 + [8])) = [0]
	*($4) = (int_64)0
	*(($0 + [24])) = (int_64)4617315517961601024
	$1 = CALL $355([17188])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$81 }
	*(($0 + [32])) = ($1 << [1])
	$2 = ($4 + [1])
	if ( $1 ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [40])) = $2
	*(($0 + [36])) = $1
	*($0 + [32]) = ($3 | [1])
	
.LABEL $label$80
	CALL memcpy($2, [17188], $1)
	
.LABEL $label$79
	*(($2 + $1)) = [0]
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	*(($0 + [48])) = (int_64)4616189618054758400
	$1 = CALL $355([17193])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$84 }
	*(($0 + [56])) = ($1 << [1])
	$2 = ($5 + [1])
	if ( $1 ){ goto $label$83 }
	goto $label$82 
	
.LABEL $label$84
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [64])) = $2
	*(($0 + [60])) = $1
	*($0 + [56]) = ($3 | [1])
	
.LABEL $label$83
	CALL memcpy($2, [17193], $1)
	
.LABEL $label$82
	*(($2 + $1)) = [0]
	*(($6 + [8])) = [0]
	*($6) = (int_64)0
	*(($0 + [72])) = (int_64)4616189618054758400
	$1 = CALL $355([17202])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$87 }
	*(($0 + [80])) = ($1 << [1])
	$2 = ($6 + [1])
	if ( $1 ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$87
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [88])) = $2
	*(($0 + [84])) = $1
	*($0 + [80]) = ($3 | [1])
	
.LABEL $label$86
	CALL memcpy($2, [17202], $1)
	
.LABEL $label$85
	*(($2 + $1)) = [0]
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	*(($0 + [96])) = (int_64)4613937818241073152
	$1 = CALL $355([17207])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$90 }
	*(($0 + [104])) = ($1 << [1])
	$2 = ($7 + [1])
	if ( $1 ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$90
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [112])) = $2
	*(($0 + [108])) = $1
	*($0 + [104]) = ($3 | [1])
	
.LABEL $label$89
	CALL memcpy($2, [17207], $1)
	
.LABEL $label$88
	*(($2 + $1)) = [0]
	*(($8 + [8])) = [0]
	*($8) = (int_64)0
	*(($0 + [120])) = (int_64)4611686018427387904
	$1 = CALL $355([17214])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$93 }
	*(($0 + [128])) = ($1 << [1])
	$2 = ($8 + [1])
	if ( $1 ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$93
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [136])) = $2
	*(($0 + [132])) = $1
	*($0 + [128]) = ($3 | [1])
	
.LABEL $label$92
	CALL memcpy($2, [17214], $1)
	
.LABEL $label$91
	*(($2 + $1)) = [0]
	*(($9 + [8])) = [0]
	*($9) = (int_64)0
	*(($0 + [144])) = (int_64)4611686018427387904
	$1 = CALL $355([17221])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$96 }
	*(($0 + [152])) = ($1 << [1])
	$2 = ($9 + [1])
	if ( $1 ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$96
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [160])) = $2
	*(($0 + [156])) = $1
	*($0 + [152]) = ($3 | [1])
	
.LABEL $label$95
	CALL memcpy($2, [17221], $1)
	
.LABEL $label$94
	*(($2 + $1)) = [0]
	*(($10 + [8])) = [0]
	*($10) = (int_64)0
	*(($0 + [168])) = (int_64)4611686018427387904
	$1 = CALL $355([17228])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$99 }
	*(($0 + [176])) = ($1 << [1])
	$2 = ($10 + [1])
	if ( $1 ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$99
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [184])) = $2
	*(($0 + [180])) = $1
	*($0 + [176]) = ($3 | [1])
	
.LABEL $label$98
	CALL memcpy($2, [17228], $1)
	
.LABEL $label$97
	*(($2 + $1)) = [0]
	*(($11 + [8])) = [0]
	*($11) = (int_64)0
	*(($0 + [192])) = (int_64)4607182418800017408
	$1 = CALL $355([17235])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$102 }
	*(($0 + [200])) = ($1 << [1])
	$2 = ($11 + [1])
	if ( $1 ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$102
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [208])) = $2
	*(($0 + [204])) = $1
	*($0 + [200]) = ($3 | [1])
	
.LABEL $label$101
	CALL memcpy($2, [17235], $1)
	
.LABEL $label$100
	*(($2 + $1)) = [0]
	*(($12 + [8])) = [0]
	*($12) = (int_64)0
	*(($0 + [216])) = (int_64)4607182418800017408
	$1 = CALL $355([17242])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$105 }
	*(($0 + [224])) = ($1 << [1])
	$2 = ($12 + [1])
	if ( $1 ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$105
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [232])) = $2
	*(($0 + [228])) = $1
	*($0 + [224]) = ($3 | [1])
	
.LABEL $label$104
	CALL memcpy($2, [17242], $1)
	
.LABEL $label$103
	*(($2 + $1)) = [0]
	*(($13 + [8])) = [0]
	*($13) = (int_64)0
	*(($0 + [240])) = (int_64)4607182418800017408
	$1 = CALL $355([17249])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$108 }
	*(($0 + [248])) = ($1 << [1])
	$2 = ($13 + [1])
	if ( $1 ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$108
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [256])) = $2
	*(($0 + [252])) = $1
	*($0 + [248]) = ($3 | [1])
	
.LABEL $label$107
	CALL memcpy($2, [17249], $1)
	
.LABEL $label$106
	*(($2 + $1)) = [0]
	*(($14 + [8])) = [0]
	*($14) = (int_64)0
	*(($0 + [264])) = (int_64)4607182418800017408
	$1 = CALL $355([17256])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$111 }
	*(($0 + [272])) = ($1 << [1])
	$2 = ($14 + [1])
	if ( $1 ){ goto $label$110 }
	goto $label$109 
	
.LABEL $label$111
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [280])) = $2
	*(($0 + [276])) = $1
	*($0 + [272]) = ($3 | [1])
	
.LABEL $label$110
	CALL memcpy($2, [17256], $1)
	
.LABEL $label$109
	*(($2 + $1)) = [0]
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	*(($0 + [288])) = (int_64)4607182418800017408
	$1 = CALL $355([17263])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$114 }
	*(($0 + [296])) = ($1 << [1])
	$2 = ($15 + [1])
	if ( $1 ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$114
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [304])) = $2
	*(($0 + [300])) = $1
	*($0 + [296]) = ($3 | [1])
	
.LABEL $label$113
	CALL memcpy($2, [17263], $1)
	
.LABEL $label$112
	*(($2 + $1)) = [0]
	*(($16 + [8])) = [0]
	*($16) = (int_64)0
	*(($0 + [312])) = (int_64)4607182418800017408
	$1 = CALL $355([17270])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$117 }
	*(($0 + [320])) = ($1 << [1])
	$2 = ($16 + [1])
	if ( $1 ){ goto $label$116 }
	goto $label$115 
	
.LABEL $label$117
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*(($0 + [328])) = $2
	*(($0 + [324])) = $1
	*($0 + [320]) = ($3 | [1])
	
.LABEL $label$116
	CALL memcpy($2, [17270], $1)
	
.LABEL $label$115
	*(($2 + $1)) = [0]
	*(($0 + [336])) = (int_64)4607182418800017408
	*([0] + [8476 align=4]) = (int_64)0
	*([0] + [8472]) = [8476]
	$1 = [0]
	
.LOOP $label$119:
	$3 = (($0 + [8]) + $1)
	$17 = CALL $286([8472], [8476], ($0 + [348]), ($0 + [344]), $3)
	if ( (*($17) == 0) ){ goto $label$120 }
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)[336]) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$120
	$2 = CALL _Znwj([40])
	CALL $322(($2 + [16]), $3)
	*($2) = (int_64)0
	*($2 + [8]) = *($0 + [348])
	*($17) = $2
	*($2 + [32]) = *(($3 + [16]))
	$3 = *(*([0] + [8472]))
	if ( ($3 == 0) ){ goto $label$121 }
	*([0] + [8472]) = $3
	$2 = *($17)
	
.LABEL $label$121
	CALL $128(*([0] + [8476]), $2)
	*([0] + [8480]) = (*([0] + [8480]) + [1])
	$1 = ($1 + [24])
	if ( ((int_32)$1 != (int_32)[336]) ){ goto $label$119 }
	
.LABEL $label$118
	if ( ((*(($0 + [320])) & [1]) == 0) ){ goto $label$122 }
	CALL _ZdlPv(*(($0 + [328])))
	
.LABEL $label$122
	if ( ((*(($0 + [296])) & [1]) == 0) ){ goto $label$123 }
	CALL _ZdlPv(*(($0 + [304])))
	
.LABEL $label$123
	if ( ((*(($0 + [272])) & [1]) == 0) ){ goto $label$124 }
	CALL _ZdlPv(*(($0 + [280])))
	
.LABEL $label$124
	if ( ((*(($0 + [248])) & [1]) == 0) ){ goto $label$125 }
	CALL _ZdlPv(*(($0 + [256])))
	
.LABEL $label$125
	if ( ((*(($0 + [224])) & [1]) == 0) ){ goto $label$126 }
	CALL _ZdlPv(*(($0 + [232])))
	
.LABEL $label$126
	if ( ((*(($0 + [200])) & [1]) == 0) ){ goto $label$127 }
	CALL _ZdlPv(*(($0 + [208])))
	
.LABEL $label$127
	if ( ((*(($0 + [176])) & [1]) == 0) ){ goto $label$128 }
	CALL _ZdlPv(*(($0 + [184])))
	
.LABEL $label$128
	if ( ((*(($0 + [152])) & [1]) == 0) ){ goto $label$129 }
	CALL _ZdlPv(*(($0 + [160])))
	
.LABEL $label$129
	if ( ((*(($0 + [128])) & [1]) == 0) ){ goto $label$130 }
	CALL _ZdlPv(*(($0 + [136])))
	
.LABEL $label$130
	if ( ((*(($0 + [104])) & [1]) == 0) ){ goto $label$131 }
	CALL _ZdlPv(*(($0 + [112])))
	
.LABEL $label$131
	if ( ((*(($0 + [80])) & [1]) == 0) ){ goto $label$132 }
	CALL _ZdlPv(*(($0 + [88])))
	
.LABEL $label$132
	if ( ((*(($0 + [56])) & [1]) == 0) ){ goto $label$133 }
	CALL _ZdlPv(*(($0 + [64])))
	
.LABEL $label$133
	if ( ((*(($0 + [32])) & [1]) == 0) ){ goto $label$134 }
	CALL _ZdlPv(*(($0 + [40])))
	
.LABEL $label$134
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$135 }
	CALL _ZdlPv(*($0 + [16]))
	
.LABEL $label$135
	CALL $344([26], [0], [8192])
	$global$0 = ($0 + [352])
	return (unreachable)
	
.LABEL $label$18
	CALL $321($4)
	
.LABEL $label$17
	CALL $321($5)
	
.LABEL $label$16
	CALL $321($6)
	
.LABEL $label$15
	CALL $321($7)
	
.LABEL $label$14
	CALL $321($8)
	
.LABEL $label$13
	CALL $321($9)
	
.LABEL $label$12
	CALL $321($10)
	
.LABEL $label$11
	CALL $321($11)
	
.LABEL $label$10
	CALL $321($12)
	
.LABEL $label$9
	CALL $321($13)
	
.LABEL $label$8
	CALL $321($14)
	
.LABEL $label$7
	CALL $321($15)
	
.LABEL $label$6
	CALL $321($16)
	
.LABEL $label$2
	CALL $321(($0 + [8]))
	
.LABEL $label$1
	CALL $321(($0 + [8]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $358($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8484])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $358($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $251 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$1 = ((int_32)$1 % (int_32)[10])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$38 }
	goto $label$45 
	
.LABEL $label$45
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17202])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$22 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$44
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17242])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$34 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$43
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17207])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$31 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$42
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17256])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$28 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$41
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17263])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$19 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$40
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17249])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$25 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$39
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17221])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$16 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$38
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17270])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$13 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$37
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17235])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$10 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$36
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17228])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$7 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$35
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$1 = CALL $355([17214])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($1 << [1])
	$2 = ($0 + [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$34
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$33
	CALL memcpy($2, [17242], $1)
	
.LABEL $label$32
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$31
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$30
	CALL memcpy($2, [17207], $1)
	
.LABEL $label$29
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$28
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$27
	CALL memcpy($2, [17256], $1)
	
.LABEL $label$26
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$25
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$24
	CALL memcpy($2, [17249], $1)
	
.LABEL $label$23
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$22
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$21
	CALL memcpy($2, [17202], $1)
	
.LABEL $label$20
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$19
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$18
	CALL memcpy($2, [17263], $1)
	
.LABEL $label$17
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$16
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$15
	CALL memcpy($2, [17221], $1)
	
.LABEL $label$14
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$13
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$12
	CALL memcpy($2, [17270], $1)
	
.LABEL $label$11
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$10
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$9
	CALL memcpy($2, [17235], $1)
	
.LABEL $label$8
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$7
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$6
	CALL memcpy($2, [17228], $1)
	
.LABEL $label$5
	*(($2 + $1)) = [0]
	return 
	
.LABEL $label$4
	$3 = (($1 + [16]) & [-16])
	$2 = CALL _Znwj($3)
	*($0) = ($3 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $1
	
.LABEL $label$3
	CALL memcpy($2, [17214], $1)
	
.LABEL $label$2
	*(($2 + $1)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL $321($0)
	$1
}

void .FUNC $250 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [18517])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $253 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $252 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [736])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [720])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [728])), (int_64)4732892228187340800, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $194($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $195(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [736])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18872])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	$5 = *($5 + [8])
	*($1 + [16]) = *($5)
	*($1 + [24]) = *($5 + [8 align=4])
	*($1 + [32]) = *($5 + [16])
	$5 = $2
	$2 = ($5 + [-48])
	$global$0 = $2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($5 + [-12])
	CALL $255(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)4732892228187340800, *(*($0 + [8])), $8, $2, [36])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$8 = *(($4 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [48]) = CALL db_idx64_store($8, (int_64)4732892228187340800, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $255 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [20]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $254 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $257 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $256 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = CALL $258($0)
	*($0 + [116]) = $1
	$1 = *($2)
	CALL $260(*($2 + [4]), $4)
	*($3 + [128]) = ($3 + [108])
	*($3 + [124]) = $3
	*($3 + [120]) = $3
	CALL $261(($3 + [120]), $4)
	$5 = *($0)
	*($0 + [120]) = CALL db_store_i64(*($1 + [8]), (int_64)4513481846004934848, *(*($2 + [8])), $5, $3, [108])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($1 + [8]))
	$6 = *(*(($2 + [8])))
	$7 = *($0)
	*($3 + [136]) = *($0 + [8])
	*($0 + [124]) = CALL db_idx64_store($5, (int_64)4513481846004934848, $6, $7, ($3 + [136]))
	$global$0 = ($3 + [144])
	return $0
}

void .FUNC $181 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [16]) = (int_64)0
	$2 = [0]
	*($1 + [24]) = [0]
	*($1) = [45]
	CALL $1(($1 + [16]), $0, $1)
	$3 = (*($1 + [20]) - *($1 + [16]))
	CALL eosio_assert((((int_32)$3 == (int_32)[24]) | ((int_32)$3 == (int_32)[36])), [18523])
	CALL $324(($0 + [32]), *($1 + [16]))
	*($0 + [16]) = (CASTING int_64)(int_32 CALL $335((*($1 + [16]) + [12]), [0], [10]))
	$4 = *($1 + [16])
	if ( ((int_32)(*($1 + [20]) - $4) != (int_32)[36]) ){ goto $label$1 }
	$6 = (*($1) & [1])
	$3 = CALL $322($1, ($4 + [24]))
	$5 = *($3 + [8])
	$3 = ( $5 ? ($3 + [1]) : $6 )
	
.LOOP $label$2:
	$4 = ($3 + $2)
	$7 = ($2 + [1])
	$2 = $7
	if ( *($4) ){ goto $label$2 }
	$8 = (CASTING uint_64)(uint_32 ($7 + [-1]))
	$9 = (int_64)0
	$10 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$3:
	$12 = (int_64)0
	if ( (uint_64)($9 <= $8) ){ goto $label$7 }
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$2 = ($2 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$2 = ( ($2 + [-48]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$5 }
	
.LABEL $label$6
	$12 = ((int_64)$12 & (int_64)15)
	goto $label$4 
	
.LABEL $label$5
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$4
	$3 = ($3 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$3 }
	*($0 + [24]) = $11
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$4 = *($1 + [16])
	
.LABEL $label$1
	if ( ($4 == 0) ){ goto $label$11 }
	$2 = *($1 + [20])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($2 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$15
	$2 = $3
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$14 }
	$3 = *($1 + [16])
	goto $label$12 
	
.LABEL $label$13
	$3 = $4
	
.LABEL $label$12
	*($1 + [20]) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$global$0 = ($1 + [32])
}

int_32 .FUNC $180 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [232]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [240])))
	if ( ((*($3 + [220]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((*($3 + [220]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [228])))
	if ( ((*($3 + [208]) & [1]) == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((*($3 + [208]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [216])))
	if ( ((*($3 + [196]) & [1]) == 0) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((*($3 + [196]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [204])))
	if ( (*($3 + [184]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((*($3 + [184]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($3 + [192])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18978])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5969212543028166656)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18924])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18924])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $137(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [19350])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $269 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	float_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*(($5 = $4) + [16]) = *(($1 + [40]))
	*($5 + [24]) = *(($1 + [8]))
	$6 = *(*(($3 + [8])))
	$7 = ((float_64)*(*(*($3) + [4]) + [64]) * (float_64)(CASTING float_64)(int_64 *(*(($3 + [4])))))
	if ( ((float_64)(float_64)|$7| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$8 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$8 = (Rounds 0)($7)
	
.LABEL $label$1
	$9 = *($1)
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$10 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = (($5 + [16]) + [8])
	$3 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$12 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$10 = $12
	$13 = [1]
	$14 = $3
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$10 = $12
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$13 = ((int_32)$3 < (int_32)[6])
	$14 = ($3 + [1])
	$3 = $14
	if ( $13 ){ goto $label$7 }
	$13 = [1]
	$3 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$13 = [0]
	
.LABEL $label$3
	CALL eosio_assert($13, [18708])
	CALL eosio_assert(((int_64)*(($1 + [56])) == (int_64)$6), [19529])
	$10 = (int_64)
	*($1 + [48]) = $10(*($1 + [48]) - $8))
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [19577])
	CALL eosio_assert(((int_64)*($1 + [48]) < (int_64)4611686018427387904), [19599])
	CALL eosio_assert(((int_64)$9 == (int_64)*($1)), [19158])
	$13 = $4
	$3 = ($13 + [-80])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($13 + [-8])
	CALL $110($5, $1)
	CALL db_update_i64(*($1 + [76]), $2, $3, [72])
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($5 + [40]) = *(($1 + [40]))
	if ( (CALL $354(($5 + [16]), ($5 + [40]), [8]) == 0) ){ goto $label$9 }
	$13 = ($1 + [80])
	$3 = *($13)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$10 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5371973418988895232, ($5 + [32]), $9)
	*($13) = $3
	
.LABEL $label$10
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$9
	*($5 + [40]) = *(($1 + [8]))
	if ( (CALL $354($11, ($5 + [40]), [8]) == 0) ){ goto $label$11 }
	$13 = ($1 + [84])
	$3 = *($13)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$12 }
	$3 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5371973418988895233, ($5 + [32]), $9)
	*($13) = $3
	
.LABEL $label$12
	CALL db_idx64_update($3, $2, ($5 + [40]))
	
.LABEL $label$11
	$global$0 = ($5 + [48])
}

int_32 .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$2 = *($0 + [4])
	$3 = *($2 + [80])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)5371973418988895232, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [80]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [18333])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $198($6, CALL $fimport$4(*($6), *($6 + [8]), (int_64)5371973418988895232, $5))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$6), [18333])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [80])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [440])
	$4 = ($0 + [448])
	$5 = CALL db_lowerbound_i64(*($0 + [440]), *($4), (int_64)4513481846004934848, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $199($3, $5)
	$4 = CALL db_lowerbound_i64(*($3), *($4), (int_64)4513481846004934848, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL $199($3, $4)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	if ( (uint_64)((int_64))(*(*(CALL $200(($2 + [8])) + [4])) - *($5)) <= (int_64)100) ){ goto $label$1 }
	CALL eosio_assert([1], [19221])
	CALL eosio_assert([1], [18629])
	$4 = CALL db_next_i64(*($5 + [120]), ($2 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $199($3, $4)
	
.LABEL $label$2
	CALL $201($3, $5)
	
.LABEL $label$1
	$6 = *($0)
	*($2 + [12]) = $1
	*($2 + [8]) = $0
	CALL $202($2, $3, $6, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [108]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [112]))
	$6 = *($1 + [116])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513481846004645888, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4732892228187340800, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $194($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4732892228187340800, $6))
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*(($4 + [48])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $136 (int_32 $0, int_32 $1, int_32 $2, float_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = ( (int_64)1 ? (int_64)2 : ((int_64)*($2) == (int_64)1397703940) )
	$6 = ($1 + [480])
	$8 = *(($1 + [508]))
	$7 = *(($1 + [504]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$5) ){ goto $label$4 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$6), [18333])
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	$8 = CALL db_find_i64(*($6), *(($1 + [488])), (int_64)4513480743233519616, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $204($6, $8)
	CALL eosio_assert(((int_32)*($10 + [32]) == (int_32)$6), [18333])
	
.LABEL $label$2
	$3 = ((float_32)(CASTING float_32)(int_64 *($10 + [16])) * (float_32)$3)
	if ( (((float_32)$3 < (float_32)(float_32)18446744073709551615) & ((float_32)$3 >= (float_32)(float_32)0)) ){ goto $label$7 }
	$5 = (int_64)0
	goto $label$6 
	
.LABEL $label$7
	$5 = (Rounds 0)($3)
	
.LABEL $label$6
	*($4 + [8]) = $5
	$5 = *($1)
	*($4) = ($4 + [8])
	CALL eosio_assert([1], [19026])
	CALL $205($6, $10, $5, $4)
	$5 = *($4 + [8])
	*($0) = $5
	$11 = *($2)
	*($0 + [8]) = $11
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$5 = (uint_64)$11 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$5 = $11
	$8 = [1]
	$10 = $9
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$5 = $11
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $8 ){ goto $label$12 }
	$8 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	
.LABEL $label$8
	CALL eosio_assert($8, [18708])
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($0) = (int_64)0
	$5 = *($2)
	*($0 + [8]) = $5
	CALL eosio_assert([1], [18659])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	
.LOOP $label$14:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$11 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$5 = $11
	$7 = [1]
	$8 = $9
	$9 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$5 = $11
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$9 < (int_32)[6])
	$10 = ($9 + [1])
	$9 = $10
	if ( $8 ){ goto $label$16 }
	$7 = [1]
	$9 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($7, [18708])
	$global$0 = ($4 + [16])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([72])
	$6 = CALL $140($5)
	*($5 + [56]) = $0
	CALL $308(($3 + [32]), $6)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $142(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13, int_32 $14, int_32 $15, int_32 $16)
{
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	$17 = ($global$0 - [64])
	$global$0 = $17
	*($17 + [56]) = $1
	CALL require_auth(*($0))
	$18 = ($0 + [240])
	$20 = *(($0 + [268]))
	$19 = *(($0 + [264]))
	if ( ((int_32)$19 == (int_32)$20) ){ goto $label$2 }
	
.LOOP $label$4:
	$21 = ($20 + [-24])
	$22 = *($21)
	if ( ((int_64)*($22) == (int_64)$1) ){ goto $label$3 }
	$20 = $21
	if ( ((int_32)$19 != (int_32)$21) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$19 == (int_32)$20) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($22 + [268]) == (int_32)$18), [18333])
	goto $label$1 
	
.LABEL $label$2
	$22 = [0]
	$21 = CALL db_find_i64(*($18), *(($0 + [248])), (int_64)4513475553721843712, $1)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$1 }
	$22 = CALL $77($18, $21)
	CALL eosio_assert(((int_32)*($22 + [268]) == (int_32)$18), [18333])
	
.LABEL $label$1
	$23 = ((int_32)$22 != (int_32)[0])
	CALL eosio_assert($23, [17691])
	CALL eosio_assert(((int_64)*($22 + [16]) == (int_64)2), [17510])
	$21 = ($22 + [184])
	$20 = *($22 + [184])
	if ( ($20 & [1]) ){ goto $label$6 }
	$20 = uint_32($20 >> [1])
	$19 = ($21 + [1])
	goto $label$5 
	
.LABEL $label$6
	$20 = *(($22 + [188]))
	$19 = *(($22 + [192]))
	
.LABEL $label$5
	CALL assert_sha256($19, $20, $2)
	$20 = ($22 + [196])
	$19 = *($22 + [196])
	if ( ($19 & [1]) ){ goto $label$8 }
	$19 = uint_32($19 >> [1])
	$24 = ($20 + [1])
	goto $label$7 
	
.LABEL $label$8
	$19 = *(($22 + [200]))
	$24 = *(($22 + [204]))
	
.LABEL $label$7
	CALL assert_sha256($24, $19, $5)
	$19 = ($22 + [208])
	$24 = *($22 + [208])
	if ( ($24 & [1]) ){ goto $label$10 }
	$24 = uint_32($24 >> [1])
	$25 = ($19 + [1])
	goto $label$9 
	
.LABEL $label$10
	$24 = *(($22 + [212]))
	$25 = *(($22 + [216]))
	
.LABEL $label$9
	CALL assert_sha256($25, $24, $8)
	$24 = ($22 + [220])
	$25 = *($22 + [220])
	if ( ($25 & [1]) ){ goto $label$12 }
	$25 = uint_32($25 >> [1])
	$26 = ($24 + [1])
	goto $label$11 
	
.LABEL $label$12
	$25 = *(($22 + [224]))
	$26 = *(($22 + [228]))
	
.LABEL $label$11
	CALL assert_sha256($26, $25, $11)
	$25 = ($22 + [232])
	$26 = *($22 + [232])
	if ( ($26 & [1]) ){ goto $label$14 }
	$26 = uint_32($26 >> [1])
	$27 = ($25 + [1])
	goto $label$13 
	
.LABEL $label$14
	$26 = *(($22 + [236]))
	$27 = *(($22 + [240]))
	
.LABEL $label$13
	CALL assert_sha256($27, $26, $14)
	*(($17 + [48])) = *(($0 + [136]))
	*(($17 + [40])) = *(($0 + [128]))
	*(($17 + [32])) = *(($0 + [120]))
	*(($17 + [24])) = *(($0 + [112]))
	*($17 + [16]) = *(($0 + [104]))
	CALL assert_recover_key($2, $3, [66], ($17 + [16]), [34])
	CALL assert_recover_key($5, $6, [66], ($17 + [16]), [34])
	CALL assert_recover_key($8, $9, [66], ($17 + [16]), [34])
	CALL assert_recover_key($11, $12, [66], ($17 + [16]), [34])
	CALL assert_recover_key($14, $15, [66], ($17 + [16]), [34])
	*($17 + [12]) = [0]
	CALL $90($0, ($17 + [56]), $2, $3, $4, ($17 + [12]), $21)
	*($17 + [12]) = [1]
	CALL $90($0, ($17 + [56]), $5, $6, $7, ($17 + [12]), $20)
	*($17 + [12]) = [2]
	CALL $90($0, ($17 + [56]), $8, $9, $10, ($17 + [12]), $19)
	*($17 + [12]) = [3]
	CALL $90($0, ($17 + [56]), $11, $12, $13, ($17 + [12]), $24)
	*($17 + [12]) = [4]
	CALL $90($0, ($17 + [56]), $14, $15, $16, ($17 + [12]), $25)
	CALL $91($0, *($17 + [56]))
	$1 = *($0)
	CALL eosio_assert($23, [19026])
	CALL $92($18, $22, $1)
	$global$0 = ($17 + [64])
}

void .FUNC $300 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [272])
	$global$0 = $2
	CALL $74(*($1), (*($0) + [156]))
	$0 = *($0)
	CALL $74(*($1), ($0 + [168]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [18407])
	CALL memcpy(($0 + [192]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	*($2) = *($1)
	*($2 + [12]) = ($0 + [225])
	*($2 + [8]) = ($0 + [224])
	*($2 + [16]) = ($0 + [226])
	*($2 + [20]) = ($0 + [227])
	*($2 + [24]) = ($0 + [228])
	*($2 + [28]) = ($0 + [229])
	*($2 + [32]) = ($0 + [230])
	*($2 + [36]) = ($0 + [231])
	*($2 + [40]) = ($0 + [232])
	*($2 + [44]) = ($0 + [233])
	*($2 + [48]) = ($0 + [234])
	*($2 + [52]) = ($0 + [235])
	*($2 + [56]) = ($0 + [236])
	*($2 + [60]) = ($0 + [237])
	*($2 + [64]) = ($0 + [238])
	*($2 + [68]) = ($0 + [239])
	*($2 + [72]) = ($0 + [240])
	*($2 + [76]) = ($0 + [241])
	*($2 + [80]) = ($0 + [242])
	*($2 + [88]) = ($0 + [244])
	*($2 + [84]) = ($0 + [243])
	*($2 + [92]) = ($0 + [245])
	*($2 + [96]) = ($0 + [246])
	*($2 + [100]) = ($0 + [247])
	*($2 + [104]) = ($0 + [248])
	*($2 + [108]) = ($0 + [249])
	*($2 + [112]) = ($0 + [250])
	*($2 + [116]) = ($0 + [251])
	*($2 + [120]) = ($0 + [252])
	*($2 + [124]) = ($0 + [253])
	*($2 + [128]) = ($0 + [254])
	*($2 + [132]) = ($0 + [255])
	*($2 + [136]) = ($0 + [256])
	*($2 + [140]) = ($0 + [257])
	*($2 + [144]) = ($0 + [258])
	*($2 + [148]) = ($0 + [259])
	*($2 + [152]) = ($0 + [260])
	*($2 + [156]) = ($0 + [261])
	*($2 + [164]) = ($0 + [263])
	*($2 + [160]) = ($0 + [262])
	*($2 + [168]) = ($0 + [264])
	*($2 + [172]) = ($0 + [265])
	*($2 + [176]) = ($0 + [266])
	*($2 + [180]) = ($0 + [267])
	*($2 + [184]) = ($0 + [268])
	*($2 + [188]) = ($0 + [269])
	*($2 + [192]) = ($0 + [270])
	*($2 + [196]) = ($0 + [271])
	*($2 + [200]) = ($0 + [272])
	*($2 + [204]) = ($0 + [273])
	*($2 + [208]) = ($0 + [274])
	*($2 + [212]) = ($0 + [275])
	*($2 + [216]) = ($0 + [276])
	*($2 + [220]) = ($0 + [277])
	*($2 + [224]) = ($0 + [278])
	*($2 + [228]) = ($0 + [279])
	*($2 + [232]) = ($0 + [280])
	*($2 + [240]) = ($0 + [282])
	*($2 + [236]) = ($0 + [281])
	*($2 + [244]) = ($0 + [283])
	*($2 + [248]) = ($0 + [284])
	*($2 + [252]) = ($0 + [285])
	*($2 + [256]) = ($0 + [286])
	*($2 + [260]) = ($0 + [287])
	*($2 + [264]) = ($0 + [288])
	*($2 + [268]) = ($0 + [289])
	CALL $245(($2 + [8]), $2)
	*($2 + [8]) = $0
	CALL $301(($2 + [8]), $1)
	$global$0 = ($2 + [272])
}

void .FUNC $208 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($4 + [40]) = *($1 + [8])
	$5 = *($1)
	$6 = ($1 + [24])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [19449])
	$7 = ((int_64)*($1 + [16]) + (int_64)*($3))
	*($1 + [16]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [19511])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [19158])
	CALL eosio_assert([1], [18517])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18517])
	$3 = ($1 + [8])
	CALL memcpy(($4 | [8]), $3, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 + [24]), $6, [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [56]) = *($3)
	if ( (CALL $354(($4 + [40]), ($4 + [56]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [40])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020379698556063232, ($4 + [48]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [56]))
	
.LABEL $label$2
	$global$0 = ($4 + [64])
}

int_32 .FUNC $209 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [380]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18978])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4513481673254256640)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18924])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18924])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $152(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $202 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([128])
	CALL $256($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [120])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $257(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $203 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([120])
	CALL $262($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [112])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $263(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $200 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [120]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18978])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4513481846004934848)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [18924])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [18924])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $199(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [120]))
	$6 = *($1 + [124])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513481846004934848, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $206 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $358($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([136])
	$6 = CALL $233($5)
	*($5 + [116]) = $0
	CALL $234(($3 + [32]), $6)
	*($5 + [120]) = $1
	*($5 + [124 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $235(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $362($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $207 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL eosio_assert0()), [18412])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([48])) + [24]) = (int_64)1398362884
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18708])
	*($5 + [32]) = $1
	CALL $268(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [36])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $269(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

int_32 .FUNC $204 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $358($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [36]) = $7
	*($3 + [32]) = $7
	*($3 + [40]) = ($7 + $6)
	*(($9 = CALL _Znwj([48])) + [24]) = (int_64)1398362884
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$10 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18708])
	*($9 + [32]) = $0
	CALL $266(($3 + [32]), $9)
	*($9 + [36]) = $1
	*($3 + [24]) = $9
	$10 = *($9)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $10
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $267($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $362($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

void .FUNC $205 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [8]) = (int_64)0
	*($1 + [16]) = (int_64))(*($1 + [16]) - *(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	CALL eosio_assert([1], [18517])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $8 (int_32 $0)
{
	CALL $9([8460], *([0] + [8464]))
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $9($0, *($1))
	CALL $9($0, *($1 + [4]))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$2
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$3 = CALL $355([8448])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [32]) = ($3 << [1])
	$4 = (($2 + [32]) | [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [32]) = ($5 | [1])
	*($2 + [40]) = $4
	*($2 + [36]) = $3
	
.LABEL $label$4
	CALL memcpy($4, [8448], $3)
	
.LABEL $label$3
	*(($4 + $3)) = [0]
	$3 = *($2 + [32])
	$4 = CALL $323(($2 + [16]), $1, ( *($2 + [36]) ? uint_32($3 >> [1]) : ($3 & [1]) ), [-1], $1)
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	CALL $4(( *($4 + [8]) ? ($4 + [1]) : (*($2 + [16]) & [1]) ), $2)
	*($0) = [0]
	$3 = *($2)
	*($0 + [1 align=1]) = *($3)
	*($0 + [9 align=1]) = *($3 + [8 align=1])
	*($0 + [13 align=1]) = *($3 + [12 align=1])
	*($0 + [21 align=1]) = *($3 + [20 align=1])
	*($0 + [29 align=1]) = *($3 + [28 align=1])
	*($0 + [33]) = *($3 + [32])
	if ( ($3 == 0) ){ goto $label$6 }
	*($2 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( (*($2 + [16]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [32]) & [1]) ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [8])))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$7
	CALL _ZdlPv(*($2 + [40]))
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $321(($2 + [32]))
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$2 }
	
.LOOP $label$4:
	if ( (CALL $341(int_32(($3 << [24]) >> [24])) == 0) ){ goto $label$3 }
	$3 = *($0 + [1])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$4 }
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)[49]) ){ goto $label$2 }
	$4 = [0]
	
.LOOP $label$5:
	$3 = ($0 + $4)
	$5 = ($4 + [1])
	$4 = $5
	if ( ((int_32)*(($3 + [1])) == (int_32)[49]) ){ goto $label$5 }
	$4 = ($0 + $5)
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	$4 = $0
	
.LABEL $label$1
	$6 = ((uint_32)((int_32)CALL $355($4) * (int_32)[733]) / (uint_32)[1000])
	$7 = ($6 + [1])
	$8 = CALL _Znwj($7)
	$9 = ($8 + $6)
	$0 = [0]
	
.LOOP $label$6:
	*(($8 + $0)) = [0]
	$0 = ($0 + [1])
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$6 }
	$10 = ($8 + $7)
	$11 = [0]
	$3 = *($4)
	if ( ($3 == 0) ){ goto $label$15 }
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$14 }
	$0 = [0]
	
.LOOP $label$16:
	$11 = $0
	$12 = $4
	if ( CALL $341(int_32(($3 << [24]) >> [24])) ){ goto $label$12 }
	$0 = *($12)
	$13 = *(($0 + [8192]))
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$13 }
	if ( ((int_32)$0 != (int_32)[49]) ){ goto $label$18 }
	$0 = [0]
	if ( ($11 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$4 = [0]
	$3 = $8
	
.LOOP $label$19:
	$14 = (((int_32)*($0) * (int_32)[58]) + $13)
	*(($0 = ($3 + $6))) = $14
	$0 = ($4 + [1])
	$13 = ((int_32)$14 / (int_32)[256])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$17 }
	$3 = ($3 + [-1])
	$4 = $0
	if ( (((uint_32)($14 + [255]) > (uint_32)[510]) | ($0 <= $11)) ){ goto $label$19 }
	
.LABEL $label$17
	$4 = ($12 + [1])
	$3 = *($12 + [1])
	if ( $3 ){ goto $label$16 }
	$13 = $10
	$11 = $0
	goto $label$10 
	
.LABEL $label$15
	$13 = $10
	goto $label$10 
	
.LABEL $label$14
	
.LOOP $label$20:
	if ( CALL $341(int_32(($3 << [24]) >> [24])) ){ goto $label$11 }
	if ( ((int_32)*((*($4) + [8192])) == (int_32)[255]) ){ goto $label$13 }
	$3 = *($4 + [1])
	$12 = ($4 + [1])
	$4 = $12
	if ( $3 ){ goto $label$20 }
	$11 = [0]
	$13 = $8
	goto $label$9 
	
.LABEL $label$13
	$4 = [0]
	if ( $8 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$12
	$13 = $10
	goto $label$9 
	
.LABEL $label$11
	$13 = $8
	
.LABEL $label$10
	$12 = $4
	
.LABEL $label$9
	$0 = ($12 + [-1])
	
.LOOP $label$21:
	$0 = ($0 + [1])
	if ( CALL $341(*($0)) ){ goto $label$21 }
	$4 = [0]
	if ( *($0) ){ goto $label$22 }
	$4 = ($8 + ($7 - $11))
	if ( ((int_32)$4 == (int_32)$13) ){ goto $label$25 }
	$0 = $4
	if ( *($4) ){ goto $label$23 }
	$14 = ([0] - $11)
	$0 = [-1]
	$3 = $9
	
.LOOP $label$26:
	$4 = $3
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$24 }
	$0 = ($0 + [-1])
	$3 = ($4 + [1])
	if ( (*((($4 + $14) + [2])) == 0) ){ goto $label$26 }
	$0 = (($4 - $11) + [2])
	$4 = (($3 - $11) + [1])
	goto $label$23 
	
.LABEL $label$25
	$0 = $13
	goto $label$23 
	
.LABEL $label$24
	$0 = (($4 - $11) + [2])
	$4 = $0
	
.LABEL $label$23
	$4 = (($10 - $4) + $5)
	$3 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) >= (uint_32)$4) ){ goto $label$27 }
	$14 = *($1 + [4])
	$3 = *($1)
	$14 = (*($1 + [4]) - $3)
	$11 = CALL _Znwj($4)
	$7 = ($11 + ($14 - $3))
	$6 = ($7 - $14)
	$4 = ($11 + $4)
	if ( ((int_32)$14 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($6, $3, $14)
	$3 = *($1)
	
.LABEL $label$28
	*($1) = $6
	*(($1 + [4])) = $7
	*(($1 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$27 }
	CALL _ZdlPv($3)
	
.LABEL $label$27
	*($2 + [15]) = [0]
	CALL $5($1, $5, ($2 + [15]))
	if ( ((int_32)$0 == (int_32)$13) ){ goto $label$29 }
	$6 = ($9 + [1])
	$13 = ($1 + [8])
	$3 = ($1 + [4])
	
.LOOP $label$30:
	$4 = ($0 + [1])
	$14 = *($3)
	if ( ((int_32)$14 == (int_32)*($13)) ){ goto $label$31 }
	*($14) = *($0)
	*($3) = (*($3) + [1])
	$0 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	CALL $6($1, $0)
	$0 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$30 }
	
.LABEL $label$29
	$4 = [1]
	
.LABEL $label$22
	if ( ($8 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($8)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	return $4
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL _ZdlPv($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL _Znwj($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $340($0)
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$4 * (int_32)[12])))) = (int_64)0
	*(($3 + [8])) = [0]
	$1 = *($1)
	$2 = *($2)
	$8 = ($2 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$8 }
	*($3) = ($8 << [1])
	$5 = ($3 + [1])
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*(($4 = ($7 + ((int_32)$4 * (int_32)[12]))) + [8]) = $5
	*($4 + [4]) = $8
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($1)
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$5 = ($5 + $8)
	
.LABEL $label$6
	$8 = ($7 + $4)
	*($5) = [0]
	$5 = ($3 + [12])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($1 + [-4])
	*(($3 + [-4])) = *($2)
	$1 = ($1 + [-12])
	*(($3 = ($3 + [-12]))) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	$2 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($6 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $321($3)
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	*($3 + [15]) = $1
	$1 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($4 + [1])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[10]) ){ goto $label$3 }
	*($0) = [2]
	$1 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = (($4 + [17]) & [-16])
	$1 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*(($0 + [8])) = $1
	*(($0 + [4])) = [1]
	
.LABEL $label$2
	CALL memcpy($1, ($3 + [15]), [1])
	*($1 + [1]) = [0]
	CALL $330($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $321($0)
}

void .FUNC memory ()
{
	CALL $316()
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$5 }
	$5 = ($1 + [1])
	*($3 + [24]) = $5
	$4 = uint_32($4 >> [1])
	$1 = ($5 + $4)
	*($3 + [16]) = $1
	*($3 + [8]) = $5
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($1 + [8])
	*($3 + [24]) = $5
	$4 = *($1 + [4])
	$1 = ($5 + $4)
	*($3 + [16]) = $1
	*($3 + [8]) = $5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	$4 = $5
	
.LOOP $label$6:
	if ( ((int_32)*($4) != (int_32)*($2)) ){ goto $label$12 }
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*($6)) ){ goto $label$11 }
	*($1) = (int_64)0
	*(($1 + [8])) = [0]
	$8 = ($4 - $5)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$10 }
	*($1) = ($8 << [1])
	$9 = ($1 + [1])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$4 = ($4 + [1])
	*($3 + [8]) = $4
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$11
	CALL $2($0, ($3 + [24]), ($3 + [8]))
	goto $label$7 
	
.LABEL $label$10
	$10 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($1) = ($10 | [1])
	*($1 + [8]) = $9
	*($1 + [4]) = $8
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = $9
	
.LOOP $label$13:
	*($1) = *($5)
	$1 = ($1 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$13 }
	$9 = ($9 + $8)
	
.LABEL $label$8
	*($9) = [0]
	*($7) = (*($7) + [12])
	
.LABEL $label$7
	$4 = (*($3 + [8]) + [1])
	*($3 + [24]) = $4
	$1 = *($3 + [16])
	$5 = $4
	*($3 + [8]) = $4
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$6 }
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$16 }
	$4 = *($0 + [4])
	if ( ((uint_32)$4 >= (uint_32)*($0 + [8])) ){ goto $label$17 }
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$9 = ($1 - $5)
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$9 > (uint_32)[10]) ){ goto $label$15 }
	*($4) = ($9 << [1])
	$2 = ($4 + [1])
	goto $label$14 
	
.LABEL $label$17
	CALL $2($0, ($3 + [24]), ($3 + [16]))
	
.LABEL $label$16
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$15
	$7 = (($9 + [16]) & [-16])
	$2 = CALL _Znwj($7)
	*($4) = ($7 | [1])
	*($4 + [8]) = $2
	*($4 + [4]) = $9
	
.LABEL $label$14
	$4 = $2
	
.LOOP $label$18:
	*($4) = *($5)
	$4 = ($4 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$18 }
	*(($2 + $9)) = [0]
	*(($5 = ($0 + [4]))) = (*($5) + [12])
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $321($1)
	
.LABEL $label$1
	CALL $321($4)
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$5 = ($global$0 - [16])
	$global$0 = $5
	*($5) = $1
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$2 }
	$7 = *($4)
	$6 = CALL $355([17746])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	$7 = [0]
	if ( (CALL $331($4, [0], [-1], [17746], $6) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$1
	$8 = *($3)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$3 }
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$2 = $1
	$7 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$2 = $1
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $7 ){ goto $label$7 }
	$7 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	
.LABEL $label$3
	CALL eosio_assert($7, [17755])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$8 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [17772])
	CALL $63(($5 + [8]), $0, ($3 + [8]))
	CALL eosio_assert(((int_32)*($5 + [12]) != (int_32)[0]), [18728])
	CALL $64($0, $5, $3)
	$global$0 = ($5 + [16])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $358($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [18708])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $61(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $362($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $62(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	$5 = ($global$0 - [224])
	$global$0 = $5
	*($5 + [176]) = $1
	CALL require_auth($1)
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$3 }
	$7 = ($4 + [1])
	$8 = CALL $355([17976])
	$9 = [-1]
	$6 = uint_32($6 >> [1])
	if ( ($6 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$6 = *($4 + [4])
	$7 = *($4 + [8])
	$8 = CALL $355([17976])
	$9 = [-1]
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($8 == 0) ){ goto $label$1 }
	$10 = ($7 + $6)
	$11 = $7
	
.LOOP $label$5:
	$6 = *($11)
	$9 = [0]
	
.LOOP $label$6:
	if ( ((int_32)($6 & [255]) == (int_32)*(($9 + [17976]))) ){ goto $label$4 }
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$6 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$5 }
	$11 = $10
	
.LABEL $label$4
	$9 = ( [-1] ? ($11 - $7) : ((int_32)$11 == (int_32)$10) )
	
.LABEL $label$1
	$11 = ($9 + [1])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$8 }
	$6 = uint_32($9 >> [1])
	$10 = ($4 + [1])
	goto $label$7 
	
.LABEL $label$8
	$6 = *($4 + [4])
	$10 = *($4 + [8])
	
.LABEL $label$7
	$8 = CALL $355([17976])
	$9 = [-1]
	if ( ((uint_32)$6 <= (uint_32)$11) ){ goto $label$9 }
	if ( ($8 == 0) ){ goto $label$9 }
	$12 = ($10 + $6)
	$7 = ($10 + $11)
	
.LOOP $label$11:
	$6 = *($7)
	$9 = [0]
	
.LOOP $label$12:
	if ( ((int_32)($6 & [255]) == (int_32)*(($9 + [17976]))) ){ goto $label$10 }
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$12 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)$12) ){ goto $label$11 }
	$7 = $12
	
.LABEL $label$10
	$9 = ( [-1] ? ($7 - $10) : ((int_32)$7 == (int_32)$12) )
	
.LABEL $label$9
	$13 = CALL $323(($5 + [160]), $4, $11, ($9 - $11), $4)
	$11 = ($9 + [1])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$14 }
	$6 = uint_32($9 >> [1])
	$10 = ($4 + [1])
	goto $label$13 
	
.LABEL $label$14
	$6 = *($4 + [4])
	$10 = *($4 + [8])
	
.LABEL $label$13
	$8 = CALL $355([17976])
	$9 = [-1]
	if ( ((uint_32)$6 <= (uint_32)$11) ){ goto $label$15 }
	if ( ($8 == 0) ){ goto $label$15 }
	$12 = ($10 + $6)
	$7 = ($10 + $11)
	
.LOOP $label$17:
	$6 = *($7)
	$9 = [0]
	
.LOOP $label$18:
	if ( ((int_32)($6 & [255]) == (int_32)*(($9 + [17976]))) ){ goto $label$16 }
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$18 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)$12) ){ goto $label$17 }
	$7 = $12
	
.LABEL $label$16
	$9 = ( [-1] ? ($7 - $10) : ((int_32)$7 == (int_32)$12) )
	
.LABEL $label$15
	$14 = CALL $323(($5 + [144]), $4, $11, ($9 - $11), $4)
	$11 = ($9 + [1])
	$9 = *($4)
	if ( ($9 & [1]) ){ goto $label$20 }
	$6 = uint_32($9 >> [1])
	$10 = ($4 + [1])
	goto $label$19 
	
.LABEL $label$20
	$6 = *($4 + [4])
	$10 = *($4 + [8])
	
.LABEL $label$19
	$8 = CALL $355([17976])
	$9 = [-1]
	if ( ((uint_32)$6 <= (uint_32)$11) ){ goto $label$21 }
	$9 = [-1]
	if ( ($8 == 0) ){ goto $label$21 }
	$12 = ($10 + $6)
	$7 = ($10 + $11)
	
.LOOP $label$23:
	$6 = *($7)
	$9 = [0]
	
.LOOP $label$24:
	if ( ((int_32)($6 & [255]) == (int_32)*(($9 + [17976]))) ){ goto $label$22 }
	$9 = ($9 + [1])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$24 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 != (int_32)$12) ){ goto $label$23 }
	$7 = $12
	
.LABEL $label$22
	$9 = ( [-1] ? ($7 - $10) : ((int_32)$7 == (int_32)$12) )
	
.LABEL $label$21
	$8 = [0]
	$15 = CALL $323(($5 + [128]), $4, $11, $9, $4)
	*($5 + [124]) = CALL $336($15, [0], [10])
	$16 = CALL $323(($5 + [112]), $4, ($9 + [1]), [-1], $4)
	$9 = *($5 + [160])
	CALL eosio_assert(((int_32)( *($13 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) ) == (int_32)[64]), [17978])
	$9 = *($5 + [144])
	CALL eosio_assert(((int_32)( *($14 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) ) == (int_32)[16]), [18004])
	$9 = *($5 + [112])
	CALL eosio_assert((( *($16 + [4]) ? uint_32($9 >> [1]) : ($9 & [1]) ) <= [129]), [18025])
	CALL eosio_assert(((*($5 + [124]) + [-1]) <= [2]), [18063])
	CALL eosio_assert(((int_64)*($3) > (int_64)9999999), [18091])
	$17 = ($0 + [640])
	$9 = CALL db_lowerbound_i64(*($0 + [640]), *(($0 + [648])), (int_64)4513481842761924608, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$25 }
	$9 = CALL $65($17, $9)
	$6 = (($5 + [24]) + [76])
	$11 = (($5 + [24]) + [64])
	$7 = (($5 + [24]) + [52])
	$10 = (($5 + [24]) + [40])
	$12 = ($5 + [108])
	$18 = ($5 + [72])
	$19 = ($5 + [84])
	$20 = ($5 + [96])
	$8 = [0]
	
.LOOP $label$26:
	*((($5 + [24]) + [32])) = *(($9 + [32]))
	*((($5 + [24]) + [24])) = *(($9 + [24]))
	*((($5 + [24]) + [16])) = *(($9 + [16]))
	*((($5 + [24]) + [8])) = *(($9 + [8]))
	*($5 + [24]) = *($9)
	CALL $322($10, ($9 + [40]))
	CALL $322($7, ($9 + [52]))
	CALL $322($11, ($9 + [64]))
	*($6) = (int_64)0
	*($12) = [0]
	$21 = ($9 + [80])
	$4 = (*($21) - *($9 + [76]))
	if ( ($4 == 0) ){ goto $label$34 }
	$3 = int_32($4 >> [3])
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$32 }
	$4 = CALL _Znwj($4)
	*($6) = $4
	*($12) = ($4 + ($3 << [3]))
	*(($3 = (($5 + [24]) + [80]))) = $4
	$22 = *(($9 + [76]))
	$21 = (*($21) - $22)
	if ( ((int_32)$21 < (int_32)[1]) ){ goto $label$35 }
	CALL memcpy($4, $22, $21)
	*($3) = (*($3) + $21)
	$4 = *($6)
	
.LABEL $label$35
	$8 = ($8 + [1])
	if ( ($4 == 0) ){ goto $label$36 }
	*($3) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$36
	if ( (*($11) & [1]) ){ goto $label$33 }
	goto $label$31 
	
.LABEL $label$34
	$8 = ($8 + [1])
	if ( ((*($11) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$33
	CALL _ZdlPv(*($20))
	if ( ((*($7) & [1]) == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	CALL $340($6)
	
.LABEL $label$31
	if ( (*($7) & [1]) ){ goto $label$29 }
	
.LABEL $label$30
	if ( ((*($10) & [1]) == 0) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$29
	CALL _ZdlPv(*($19))
	if ( ((*($10) & [1]) == 0) ){ goto $label$27 }
	
.LABEL $label$28
	CALL _ZdlPv(*($18))
	
.LABEL $label$27
	CALL eosio_assert([1], [18629])
	$9 = CALL db_next_i64(*($9 + [92]), ($5 + [24]))
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$25 }
	$9 = CALL $65($17, $9)
	goto $label$26 
	
.LABEL $label$25
	CALL eosio_assert(($8 <= [10]), [18123])
	*($5 + [16]) = $17
	CALL $66(($5 + [8]), ($5 + [16]), ($5 + [176]))
	$9 = *($5 + [12])
	if ( ($9 == 0) ){ goto $label$37 }
	
.LOOP $label$38:
	if ( ((int_64)*($9 + [32]) != (int_64)*($5 + [176])) ){ goto $label$37 }
	CALL eosio_assert([0], [18162])
	CALL $67(($5 + [8]))
	$9 = *($5 + [12])
	if ( $9 ){ goto $label$38 }
	
.LABEL $label$37
	*($5 + [24]) = *($5 + [176])
	*($5 + [192]) = ($0 + [160])
	CALL $68($5, ($5 + [192]), ($5 + [24]))
	$9 = *($5 + [4])
	if ( ($9 == 0) ){ goto $label$40 }
	
.LOOP $label$41:
	if ( ((int_64)*($9 + [8]) != (int_64)*($5 + [24])) ){ goto $label$40 }
	if ( ((int_64)*(($9 + [24])) == (int_64)1397703940) ){ goto $label$39 }
	CALL $69($5)
	$9 = *($5 + [4])
	if ( $9 ){ goto $label$41 }
	
.LABEL $label$40
	CALL eosio_assert([0], [17865])
	$9 = *($5 + [4])
	
.LABEL $label$39
	CALL eosio_assert(((int_64)*($9 + [16]) > (int_64)999999), [18189])
	$1 = *($0)
	*($5 + [24]) = $0
	*($5 + [32]) = $13
	*($5 + [36]) = $14
	*($5 + [44]) = $16
	*($5 + [28]) = ($5 + [176])
	*($5 + [40]) = ($5 + [124])
	*($5 + [216]) = $1
	CALL eosio_assert(((int_64)*(($0 + [640])) == (int_64)CALL eosio_assert0()), [18412])
	*($5 + [192]) = $17
	*($5 + [196]) = ($5 + [24])
	*($5 + [200]) = ($5 + [216])
	*(($9 = CALL _Znwj([104])) + [40 align=4]) = (int_64)0
	*($9 + [48 align=4]) = (int_64)0
	*($9 + [56 align=4]) = (int_64)0
	*($9 + [64 align=4]) = (int_64)0
	*($9 + [72 align=4]) = (int_64)0
	*($9 + [80 align=4]) = (int_64)0
	*($9 + [88]) = $17
	CALL $70(($5 + [192]), $9)
	*($5 + [208]) = $9
	$1 = *($9)
	*($5 + [192]) = $1
	$8 = *($9 + [92])
	*($5 + [188]) = $8
	$6 = ($0 + [668])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [672]))) ){ goto $label$44 }
	*($4 + [8]) = $1
	*($4 + [16]) = $8
	*($5 + [208]) = [0]
	*($4) = $9
	*($6) = ($4 + [24])
	$9 = *($5 + [208])
	$8 = [0]
	*($5 + [208]) = [0]
	if ( ($9 == 0) ){ goto $label$42 }
	goto $label$43 
	
.LABEL $label$44
	CALL $71(($0 + [664]), ($5 + [208]), ($5 + [192]), ($5 + [188]))
	$9 = *($5 + [208])
	$8 = [0]
	*($5 + [208]) = [0]
	if ( ($9 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$4 = *($9 + [76])
	if ( ($4 == 0) ){ goto $label$45 }
	*(($9 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$45
	if ( (*($9 + [64]) & [1]) ){ goto $label$50 }
	if ( (*($9 + [52]) & [1]) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$50
	CALL _ZdlPv(*(($9 + [72])))
	if ( ((*($9 + [52]) & [1]) == 0) ){ goto $label$48 }
	
.LABEL $label$49
	CALL _ZdlPv(*(($9 + [60])))
	if ( (*($9 + [40]) & [1]) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	if ( ((*($9 + [40]) & [1]) == 0) ){ goto $label$46 }
	
.LABEL $label$47
	CALL _ZdlPv(*(($9 + [48])))
	
.LABEL $label$46
	CALL _ZdlPv($9)
	
.LABEL $label$42
	CALL $72($0, (int_64)1, [1], (int_64)1)
	$1 = (int_64)0
	$23 = (int_64)59
	$9 = [18226]
	$24 = (int_64)0
	
.LOOP $label$51:
	$25 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$52 }
	$4 = *($9)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$4 = ($4 + [-91])
	goto $label$53 
	
.LABEL $label$54
	$4 = ( ($4 + [-48]) ? $8 : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$25 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$52
	$9 = ($9 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$24 = ((int_64)$25 | (int_64)$24)
	$23 = ((int_64)$23 + (int_64)4294967291)
	if ( ((int_64)$23 != (int_64)55834574842) ){ goto $label$51 }
	*($5 + [216]) = $24
	*($5 + [32]) = (int_64)1480674564
	*($5 + [24]) = (int_64)10000000
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5783885
	$9 = [0]
	
.LOOP $label$57:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$56 }
	$23 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$58 }
	$1 = $23
	$4 = [1]
	$8 = $9
	$9 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$58
	$1 = $23
	
.LOOP $label$59:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$56 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$9 < (int_32)[6])
	$8 = ($9 + [1])
	$9 = $8
	if ( $4 ){ goto $label$59 }
	$4 = [1]
	$9 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$57 }
	goto $label$55 
	
.LABEL $label$56
	$4 = [0]
	
.LABEL $label$55
	CALL eosio_assert($4, [18708])
	*(($5 + [200])) = [0]
	*($5 + [192]) = (int_64)0
	$9 = CALL $355([18239])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$67 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$70 }
	*($5 + [192]) = ($9 << [1])
	$4 = (($5 + [192]) | [1])
	if ( $9 ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$8 = (($9 + [16]) & [-16])
	$4 = CALL _Znwj($8)
	*($5 + [192]) = ($8 | [1])
	*($5 + [200]) = $4
	*($5 + [196]) = $9
	
.LABEL $label$69
	CALL memcpy($4, [18239], $9)
	
.LABEL $label$68
	*(($4 + $9)) = [0]
	CALL $73($0, ($5 + [216]), ($5 + [24]), ($5 + [192]))
	if ( (*($5 + [192]) & [1]) ){ goto $label$72 }
	if ( (*($5 + [112]) & [1]) ){ goto $label$71 }
	goto $label$66 
	
.LABEL $label$72
	CALL _ZdlPv(*($5 + [200]))
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$66 }
	
.LABEL $label$71
	CALL _ZdlPv(*($16 + [8]))
	$9 = [1]
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$67
	CALL $321(($5 + [192]))
	
.LABEL $label$66
	$9 = [1]
	if ( (*($5 + [128]) & [1]) ){ goto $label$64 }
	
.LABEL $label$65
	if ( (*($5 + [144]) & $9) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	CALL _ZdlPv(*($15 + [8]))
	if ( ((*($5 + [144]) & $9) == 0) ){ goto $label$62 }
	
.LABEL $label$63
	CALL _ZdlPv(*($14 + [8]))
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$62
	if ( (*($5 + [160]) & [1]) ){ goto $label$60 }
	
.LABEL $label$61
	$global$0 = ($5 + [224])
	return 
	
.LABEL $label$60
	CALL _ZdlPv(*($13 + [8]))
	$global$0 = ($5 + [224])
	(unreachable)
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [32])
	$global$0 = $6
	*($6 + [24]) = $4
	*($6 + [28]) = $3
	CALL require_auth($1)
	$7 = ($0 + [640])
	$9 = *(($0 + [668]))
	$8 = *(($0 + [664]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$4:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$3 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($11 + [88]) == (int_32)$7), [18333])
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	$10 = CALL db_find_i64(*($7), *(($0 + [648])), (int_64)4513481842761924608, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$1 }
	$11 = CALL $65($7, $10)
	CALL eosio_assert(((int_32)*($11 + [88]) == (int_32)$7), [18333])
	
.LABEL $label$1
	$10 = ((int_32)$11 != (int_32)[0])
	CALL eosio_assert($10, [17649])
	CALL eosio_assert((($3 + [-1]) <= [2]), [18265])
	CALL eosio_assert((($4 + [-1]) <= [2]), [18284])
	*($6 + [16]) = $5
	*($6 + [12]) = ($6 + [24])
	*($6 + [8]) = ($6 + [28])
	CALL eosio_assert($10, [19026])
	CALL $177($7, $11, $1, ($6 + [8]))
	$global$0 = ($6 + [32])
}

void .FUNC $10 (int_32 $0)
{
	CALL $9([8472], *([0] + [8476]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [1216])
	$global$0 = $3
	CALL memory()
	$4 = CALL $12(($3 + [456]), $0)
	$5 = (int_64)7
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$5 = (int_64)5
	
.LOOP $label$3:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [17275])
	
.LABEL $label$2
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17339]
	$8 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$5 > (uint_64)(int_64)7) ){ goto $label$9 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$9 = ($9 + [-91])
	goto $label$7 
	
.LABEL $label$9
	$10 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$5
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$10 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$4 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$15 }
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [17348]
	$8 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$21 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$9 = ($9 + [-91])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$17
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$16 }
	if ( ((int_64)$8 != (int_64)$1) ){ goto $label$24 }
	CALL $13(($3 + [408]))
	if ( ((int_64)*(($3 + [432])) != (int_64)1397703940) ){ goto $label$23 }
	*($3 + [404]) = [0]
	*($3 + [400]) = [1]
	*($3 + [8]) = *($3 + [400])
	CALL $15($4, ($3 + [8]))
	if ( ((*($3 + [440]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [448])))
	goto $label$10 
	
.LABEL $label$24
	$5 = (int_64)0
	$10 = (int_64)59
	$7 = [17360]
	$8 = (int_64)0
	
.LOOP $label$25:
	$6 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$26 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$9 = ($9 + [-91])
	goto $label$27 
	
.LABEL $label$28
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$26
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$6 | (int_64)$8)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$25 }
	if ( ((int_64)$8 != (int_64)$1) ){ goto $label$15 }
	CALL $13(($3 + [408]))
	$9 = *($3 + [440])
	$11 = ($9 & [1])
	if ( ((int_64)*(($3 + [432])) != (int_64)1480674564) ){ goto $label$22 }
	$12 = *(($3 + [448]))
	$13 = *(($3 + [444]))
	$7 = CALL $355([17389])
	if ( ($7 == 0) ){ goto $label$13 }
	$9 = ( $13 ? uint_32($9 >> [1]) : $11 )
	if ( ((int_32)$9 < (int_32)$7) ){ goto $label$12 }
	$12 = ( $12 ? (($3 + [440]) + [1]) : $11 )
	$13 = ($12 + $9)
	$11 = $12
	
.LOOP $label$29:
	$9 = (($9 - $7) + [1])
	if ( ($9 == 0) ){ goto $label$12 }
	$9 = CALL $353($11, [99], $9)
	if ( ($9 == 0) ){ goto $label$12 }
	if ( (CALL $354($9, [17389], $7) == 0) ){ goto $label$14 }
	$11 = ($9 + [1])
	$9 = ($13 - $11)
	if ( ((int_32)$9 >= (int_32)$7) ){ goto $label$29 }
	goto $label$12 
	
.LABEL $label$23
	if ( ((*($3 + [440]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [448])))
	goto $label$15 
	
.LABEL $label$22
	if ( ($11 == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($3 + [448])))
	
.LABEL $label$15
	$5 = (int_64)7
	
.LOOP $label$30:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$30 }
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$10 }
	if ( ((int_64)5380477996647841792 != (int_64)$2) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$14
	if ( ((int_32)$9 == (int_32)$13) ){ goto $label$12 }
	if ( ((int_32)($9 - $12) == (int_32)[-1]) ){ goto $label$12 }
	
.LABEL $label$13
	*($3 + [396]) = [0]
	*($3 + [392]) = [2]
	*($3 + [192]) = *($3 + [392])
	CALL $15($4, ($3 + [192]))
	if ( ((*(($3 + [440])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [448])))
	goto $label$10 
	
.LABEL $label$12
	*($3 + [388]) = [0]
	*($3 + [384]) = [1]
	*($3 + [200]) = *($3 + [384])
	CALL $15($4, ($3 + [200]))
	if ( ((*(($3 + [440])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [448])))
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_64)$2 > (int_64)-2039333636196532225) ){ goto $label$52 }
	if ( ((int_64)$2 <= (int_64)-5003266787307945985) ){ goto $label$51 }
	if ( ((int_64)$2 > (int_64)-4417143596391178945) ){ goto $label$49 }
	if ( ((int_64)$2 == (int_64)-5003266787307945984) ){ goto $label$45 }
	if ( ((int_64)$2 == (int_64)-4994130327835885568) ){ goto $label$44 }
	if ( ((int_64)$2 != (int_64)-4816269762336860160) ){ goto $label$31 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [3]
	*($3 + [176]) = *($3 + [216])
	CALL $18($4, ($3 + [176]))
	CALL eosio_exit([0])
	
.LABEL $label$52
	if ( ((int_64)$2 <= (int_64)4730614990709108223) ){ goto $label$50 }
	if ( ((int_64)$2 > (int_64)6112076716652363775) ){ goto $label$48 }
	if ( ((int_64)$2 == (int_64)4730614990709108224) ){ goto $label$43 }
	if ( ((int_64)$2 == (int_64)4730653850116030464) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)5382254363842782208) ){ goto $label$31 }
	*($3 + [212]) = [0]
	*($3 + [208]) = [4]
	*($3 + [184]) = *($3 + [208])
	CALL $20($4, ($3 + [184]))
	CALL eosio_exit([0])
	
.LABEL $label$51
	if ( ((int_64)$2 <= (int_64)-6533256197883221681) ){ goto $label$47 }
	if ( ((int_64)$2 == (int_64)-6533256197883221680) ){ goto $label$41 }
	if ( ((int_64)$2 == (int_64)-6217917475468607488) ){ goto $label$40 }
	if ( ((int_64)$2 != (int_64)-5003315193367756800) ){ goto $label$31 }
	*($3 + [372]) = [0]
	*($3 + [368]) = [5]
	*($3 + [24]) = *($3 + [368])
	CALL $22($4, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$50
	if ( ((int_64)$2 <= (int_64)3849204515186147327) ){ goto $label$46 }
	if ( ((int_64)$2 == (int_64)3849204515186147328) ){ goto $label$39 }
	if ( ((int_64)$2 == (int_64)4222381512672149504) ){ goto $label$38 }
	if ( ((int_64)$2 != (int_64)4222381792945651712) ){ goto $label$31 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [6]
	*($3 + [144]) = *($3 + [248])
	CALL $24($4, ($3 + [144]))
	CALL eosio_exit([0])
	
.LABEL $label$49
	if ( ((int_64)$2 == (int_64)-4417143596391178944) ){ goto $label$37 }
	if ( ((int_64)$2 == (int_64)-4417084425906421760) ){ goto $label$36 }
	if ( ((int_64)$2 != (int_64)-4417029266016907920) ){ goto $label$31 }
	*($3 + [340]) = [0]
	*($3 + [336]) = [7]
	*($3 + [56]) = *($3 + [336])
	CALL $26($4, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$48
	if ( ((int_64)$2 == (int_64)6112076716652363776) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)6121143816013479936) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)6609595403119624192) ){ goto $label$31 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [8]
	*($3 + [136]) = *($3 + [256])
	CALL $24($4, ($3 + [136]))
	CALL eosio_exit([0])
	
.LABEL $label$47
	if ( ((int_64)$2 == (int_64)-6712989502257758208) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)-6533256197892472832) ){ goto $label$31 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [9]
	*($3 + [112]) = *($3 + [280])
	CALL $24($4, ($3 + [112]))
	CALL eosio_exit([0])
	
.LABEL $label$46
	if ( ((int_64)$2 == (int_64)-2039333636196532224) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)3626341433734070272) ){ goto $label$31 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [10]
	*($3 + [160]) = *($3 + [232])
	CALL $30($4, ($3 + [160]))
	CALL eosio_exit([0])
	
.LABEL $label$45
	*($3 + [244]) = [0]
	*($3 + [240]) = [11]
	*($3 + [152]) = *($3 + [240])
	CALL $32($4, ($3 + [152]))
	CALL eosio_exit([0])
	
.LABEL $label$44
	*($3 + [356]) = [0]
	*($3 + [352]) = [12]
	*($3 + [40]) = *($3 + [352])
	CALL $34($4, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$43
	*($3 + [268]) = [0]
	*($3 + [264]) = [13]
	*($3 + [128]) = *($3 + [264])
	CALL $24($4, ($3 + [128]))
	CALL eosio_exit([0])
	
.LABEL $label$42
	*($3 + [308]) = [0]
	*($3 + [304]) = [14]
	*($3 + [88]) = *($3 + [304])
	CALL $37($4, ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$41
	*($3 + [276]) = [0]
	*($3 + [272]) = [15]
	*($3 + [120]) = *($3 + [272])
	CALL $24($4, ($3 + [120]))
	CALL eosio_exit([0])
	
.LABEL $label$40
	*($3 + [348]) = [0]
	*($3 + [344]) = [16]
	*($3 + [48]) = *($3 + [344])
	CALL $40($4, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$39
	*($3 + [316]) = [0]
	*($3 + [312]) = [17]
	*($3 + [80]) = *($3 + [312])
	CALL $32($4, ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$38
	*($3 + [300]) = [0]
	*($3 + [296]) = [18]
	*($3 + [96]) = *($3 + [296])
	CALL $43($4, ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$37
	*($3 + [332]) = [0]
	*($3 + [328]) = [19]
	*($3 + [64]) = *($3 + [328])
	CALL $24($4, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$36
	*($3 + [364]) = [0]
	*($3 + [360]) = [20]
	*($3 + [32]) = *($3 + [360])
	CALL $46($4, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$35
	*($3 + [292]) = [0]
	*($3 + [288]) = [21]
	*($3 + [104]) = *($3 + [288])
	CALL $24($4, ($3 + [104]))
	CALL eosio_exit([0])
	
.LABEL $label$34
	*($3 + [228]) = [0]
	*($3 + [224]) = [22]
	*($3 + [168]) = *($3 + [224])
	CALL $49($4, ($3 + [168]))
	CALL eosio_exit([0])
	
.LABEL $label$33
	*($3 + [380]) = [0]
	*($3 + [376]) = [23]
	*($3 + [16]) = *($3 + [376])
	CALL $51($4, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$32
	*($3 + [324]) = [0]
	*($3 + [320]) = [24]
	*($3 + [72]) = *($3 + [320])
	CALL $53($4, ($3 + [72]))
	
.LABEL $label$31
	CALL eosio_exit([0])
	
.LABEL $label$10
	CALL $54($4)
	CALL $343([0])
	$global$0 = ($3 + [1216])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = $1
	*($0) = $1
	*($0 + [48]) = $1
	*($0 + [160]) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($3 = ($0 + [32]))) = (int_64)0
	*(($0 + [40])) = [0]
	*(($0 + [56])) = $1
	*(($0 + [64])) = (int_64)-1
	*(($0 + [72])) = (int_64)0
	*(($0 + [80])) = [0]
	*(($0 + [84])) = [0]
	*(($0 + [168])) = $1
	*(($0 + [176])) = (int_64)-1
	*(($0 + [184])) = (int_64)0
	*(($0 + [192])) = [0]
	*(($0 + [196])) = [0]
	*(($0 + [208])) = $1
	*($0 + [200]) = $1
	*(($0 + [216])) = (int_64)-1
	*(($0 + [224])) = (int_64)0
	*(($0 + [232])) = [0]
	*(($0 + [236])) = [0]
	*($0 + [240]) = $1
	*(($0 + [248])) = $1
	*(($0 + [256])) = (int_64)-1
	*(($0 + [264])) = (int_64)0
	*(($0 + [272])) = [0]
	*(($0 + [276])) = [0]
	*($0 + [280]) = $1
	*(($0 + [288])) = $1
	*(($0 + [296])) = (int_64)-1
	*(($0 + [304])) = (int_64)0
	*(($0 + [312])) = [0]
	*(($0 + [316])) = [0]
	*(($0 + [328])) = $1
	*($0 + [320]) = $1
	*(($0 + [336])) = (int_64)-1
	*(($0 + [344])) = (int_64)0
	*(($0 + [352])) = [0]
	*(($0 + [356])) = [0]
	*($0 + [360]) = $1
	*(($0 + [368])) = $1
	*(($0 + [376])) = (int_64)-1
	*(($0 + [384])) = (int_64)0
	*(($0 + [392])) = [0]
	*($0 + [400]) = $1
	*(($0 + [408])) = $1
	*(($0 + [416])) = (int_64)-1
	*(($0 + [424])) = (int_64)0
	*(($0 + [432])) = [0]
	*(($0 + [436])) = [0]
	*($0 + [440]) = $1
	*(($0 + [456])) = (int_64)-1
	*(($0 + [448])) = $1
	*(($0 + [464])) = (int_64)0
	*(($0 + [472])) = [0]
	*(($0 + [476])) = [0]
	*($0 + [480]) = $1
	*(($0 + [488])) = $1
	*(($0 + [496])) = (int_64)-1
	*(($0 + [504])) = (int_64)0
	*(($0 + [512])) = [0]
	*($0 + [520]) = $1
	*(($0 + [528])) = $1
	*(($0 + [536])) = (int_64)-1
	*(($0 + [544])) = (int_64)0
	*(($0 + [552])) = [0]
	*($0 + [560]) = $1
	*(($0 + [568])) = $1
	*(($0 + [576])) = (int_64)-1
	*(($0 + [592])) = [0]
	*(($0 + [584])) = (int_64)0
	*(($0 + [596])) = [0]
	*($0 + [600]) = $1
	*(($0 + [608])) = $1
	*(($0 + [616])) = (int_64)-1
	*(($0 + [624])) = (int_64)0
	*(($0 + [632])) = [0]
	*(($0 + [636])) = [0]
	*($0 + [640]) = $1
	*(($0 + [648])) = $1
	*(($0 + [656])) = (int_64)-1
	*(($0 + [664])) = (int_64)0
	*(($0 + [672])) = [0]
	*(($0 + [676])) = [0]
	*($0 + [680]) = $1
	*(($0 + [688])) = $1
	*(($0 + [696])) = (int_64)-1
	*(($0 + [712])) = [0]
	*(($0 + [704])) = (int_64)0
	*($0 + [720]) = $1
	*(($0 + [728])) = $1
	*(($0 + [736])) = (int_64)-1
	*(($0 + [744])) = (int_64)0
	*(($0 + [752])) = [0]
	*(($0 + [756])) = [0]
	$4 = ($0 + [8])
	$5 = CALL db_find_i64($1, $1, (int_64)7235159537265672192, (int_64)1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $55($4, $5)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$4), [18333])
	goto $label$1 
	
.LABEL $label$2
	CALL $56($2, $4, *($0), ($2 + [8]))
	$3 = *(($0 + [36]))
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($3 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)1) ){ goto $label$4 }
	$3 = $5
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$4), [18333])
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159537265672192, (int_64)1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $55($4, $5)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$4), [18333])
	
.LABEL $label$1
	$4 = ($0 + [680])
	CALL memcpy(($0 + [88]), $6, [72])
	$3 = *(($0 + [708]))
	$6 = *(($0 + [704]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$10:
	$5 = ($3 + [-24])
	$7 = *($5)
	if ( ((int_64)*($7) == (int_64)1) ){ goto $label$9 }
	$3 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$4), [18333])
	if ( $7 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$5 = CALL db_find_i64(*(($0 + [680])), *(($0 + [688])), (int_64)-6219918586631159808, (int_64)1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $57($4, $5) + [16]) == (int_32)$4), [18333])
	goto $label$6 
	
.LABEL $label$7
	CALL $58($2, $4, *($0), ($2 + [8]))
	
.LABEL $label$6
	$3 = *(($0 + [708]))
	$6 = *(($0 + [704]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$14:
	$5 = ($3 + [-24])
	$7 = *($5)
	if ( ((int_64)*($7) == (int_64)2) ){ goto $label$13 }
	$3 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$4), [18333])
	if ( ($7 == 0) ){ goto $label$11 }
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$12
	$5 = CALL db_find_i64(*(($0 + [680])), *(($0 + [688])), (int_64)-6219918586631159808, (int_64)2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $57($4, $5) + [16]) == (int_32)$4), [18333])
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$11
	CALL $59($2, $4, *($0), ($2 + [8]))
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $global$0
	$2 = $1
	$3 = CALL action_data_size()
	if ( ($3 <= [513]) ){ goto $label$1 }
	$1 = CALL $358($3)
	CALL read_action_data($1, $3)
	CALL $60($0, $1, $3)
	$global$0 = $2
	return 
	
.LABEL $label$1
	$1 = ($1 - (($3 + [15]) & [-16]))
	$global$0 = $1
	CALL read_action_data($1, $3)
	CALL $60($0, $1, $3)
	$global$0 = $2
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	*(($0 + [152])) = (CASTING uint_64)(uint_32 $1)
	CALL $87($0)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $358($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [40])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $1
	*($3 + [64]) = $1
	*($3 + [72]) = ($1 + $0)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = ($3 + [8])
	CALL $175(($3 + [88]), ($3 + [80]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $362($1)
	
.LABEL $label$4
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $176(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$5
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	CALL require_auth($1)
	$3 = ($0 + [640])
	$5 = *(($0 + [668]))
	$4 = *(($0 + [664]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$2) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$3), [18333])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [648])), (int_64)4513481842761924608, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $65($3, $6)
	CALL eosio_assert(((int_32)*($7 + [88]) == (int_32)$3), [18333])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [17649])
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$5 }
	CALL eosio_assert(((int_64)*($7 + [32]) == (int_64)$1), [18298])
	
.LABEL $label$5
	CALL eosio_assert($6, [19026])
	CALL $178($3, $7, $1)
}

void .FUNC $338 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $339 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $336 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $355([8452])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8452], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $342())
	*(CALL $342()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $351($4, ($3 + [12]), $2)
	$5 = CALL $342()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $333($3)
	
.LABEL $label$1
	CALL $334($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $337 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $355($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $325($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $334 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $337($1, $0, [17373])
	CALL $339()
	(unreachable)
}

int_32 .FUNC $335 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $355([19965])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [19965], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $342())
	*(CALL $342()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $352($4, ($3 + [12]), $2)
	$5 = CALL $342()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $333($3)
	
.LABEL $label$1
	CALL $334($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $332 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $355([19874])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [19874], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $342())
	*(CALL $342()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $352($4, ($3 + [12]), $2)
	$5 = CALL $342()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $333($3)
	
.LABEL $label$1
	CALL $334($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $333 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $337($1, $0, [19970])
	CALL $338()
	(unreachable)
}

int_32 .FUNC $330 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $325($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $331 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $354(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4513481846004645888, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [108]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $124($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4513481846004645888, $6))
	CALL eosio_assert(((int_32)*($4 + [108]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*($4 + [116]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $117 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$3 = *($0 + [4])
	$4 = *($3 + [116])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4513481846004645888, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [116]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [108]) == (int_32)$7), [18333])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $124($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4513481846004645888, $6))
	CALL eosio_assert(((int_32)*($2 + [108]) == (int_32)$7), [18333])
	
.LABEL $label$3
	*($2 + [116]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [18629])
	$3 = *($0 + [4])
	$4 = *($3 + [276])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4513475553721843712, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [276]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [268]) == (int_32)$7), [18333])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $77($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4513475553721843712, $6))
	CALL eosio_assert(((int_32)*($2 + [268]) == (int_32)$7), [18333])
	
.LABEL $label$3
	*($2 + [276]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [268]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$6 = ($4 + [-24])
	$8 = *($5)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = ($6 + [24])
	CALL $295($6, $9)
	$4 = ($6 + [48])
	$6 = $9
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$8 }
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 != (int_32)$9) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = $6
	
.LABEL $label$6
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	if ( ((*($6 + [232]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($6 + [240])))
	if ( ((*($6 + [220]) & [1]) == 0) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((*($6 + [220]) & [1]) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($6 + [228])))
	if ( ((*($6 + [208]) & [1]) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((*($6 + [208]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($6 + [216])))
	if ( ((*($6 + [196]) & [1]) == 0) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((*($6 + [196]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv(*(($6 + [204])))
	if ( (*($6 + [184]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	if ( ((*($6 + [184]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($6 + [192])))
	
.LABEL $label$11
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [272]))
	$6 = *($1 + [276])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$21 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513475553721843712, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$20 }
	
.LABEL $label$21
	CALL db_idx64_remove($6)
	
.LABEL $label$20
	$global$0 = ($2 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [19061])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19107])
	*($1 + [8]) = (int_64)2
	*(($4 = $3) + [24]) = *(($1 + [32]))
	$5 = *($1)
	CALL eosio_assert([1], [19158])
	*($4 + [8]) = [0]
	CALL $310(($4 + [8]), $1)
	$6 = *($4 + [8])
	if ( ($6 <= [513]) ){ goto $label$2 }
	$3 = CALL $358($6)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($3 + $6)
	CALL $311(($4 + [8]), $1)
	CALL db_update_i64(*($1 + [92]), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$3 }
	CALL $362($3)
	
.LABEL $label$3
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($4 + [40]) = *(($1 + [32]))
	if ( (CALL $354(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$5 }
	$3 = ($1 + [96])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$6 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4513481842761924608, ($4 + [32]), $5)
	*($3) = $1
	
.LABEL $label$6
	CALL db_idx64_update($1, $2, ($4 + [40]))
	
.LABEL $label$5
	$global$0 = ($4 + [48])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4513475553721843712, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [268]) == (int_32)$7), [18333])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $77($7, CALL $fimport$4(*($7), *($7 + [8]), (int_64)4513475553721843712, $6))
	CALL eosio_assert(((int_32)*($4 + [268]) == (int_32)$7), [18333])
	
.LABEL $label$2
	*($4 + [276]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [36]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [18517])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [19255])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL eosio_assert0()), [19300])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [19350])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [76]))
	$6 = *(($1 + [80]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5371973418988895232, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [84]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5371973418988895233, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = ( [1] ? [2] : ((int_64)*($2) == (int_64)1397703940) )
	*($3 + [28]) = $4
	$5 = *($1)
	if ( ((int_64)$5 == (int_64)9999999999) ){ goto $label$1 }
	$6 = ($0 + [640])
	$8 = *(($0 + [668]))
	$7 = *(($0 + [664]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$5) ){ goto $label$4 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($10 + [88]) == (int_32)$6), [18333])
	goto $label$2 
	
.LABEL $label$3
	$10 = CALL $65($6, CALL $fimport$4(*($6), *(($0 + [648])), (int_64)4513481842761924608, $5))
	CALL eosio_assert(((int_32)*($10 + [88]) == (int_32)$6), [18333])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$4), [19620])
	
.LABEL $label$1
	$5 = *($0)
	*($3 + [8]) = $0
	*($3 + [16]) = $2
	*($3 + [20]) = $1
	*($3 + [12]) = ($3 + [28])
	CALL $203($3, ($0 + [400]), $5, ($3 + [8]))
	CALL $72($0, (int_64)2, [1], (int_64)1)
	$global$0 = ($3 + [32])
}

int_32 .FUNC $119 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	*($0 + [48]) = (int_64)0
	$1 = [0]
	*($0 + [24]) = [0]
	*(($2 = ($0 + [56]))) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [72]))) = (int_64)1398362884
	*($0 + [64]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$10 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	
.LABEL $label$6
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [88]))) = (int_64)1398362884
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$3 = $4
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$15 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$2 = [0]
	
.LABEL $label$11
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [104]))) = (int_64)1398362884
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$3 = $4
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$20 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$2 = [0]
	
.LABEL $label$16
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [120]))) = (int_64)1398362884
	*($0 + [112]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$3 = $4
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$25 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$2 = [0]
	
.LABEL $label$21
	CALL eosio_assert($2, [18708])
	*(($1 = ($0 + [136]))) = (int_64)1398362884
	*($0 + [128]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$3 = $4
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$30 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$2 = [0]
	
.LABEL $label$26
	CALL eosio_assert($2, [18708])
	*($0 + [184 align=4]) = (int_64)0
	*(($0 + [192])) = (int_64)0
	*(($0 + [200])) = (int_64)0
	*($0 + [208 align=4]) = (int_64)0
	*(($0 + [216])) = (int_64)0
	*(($0 + [224])) = (int_64)0
	*($0 + [232 align=4]) = (int_64)0
	*(($0 + [240])) = [0]
	return $0
}

void .FUNC $299 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($3 + [104]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18407])
	CALL memcpy(($3 + [112]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [120]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [128]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [136]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [144]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [18407])
	CALL memcpy(($0 + [152]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	*($2 + [8]) = $0
	CALL $300(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $298 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($3 + [40]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [18407])
	CALL memcpy(($3 + [48]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [56]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [64]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [72]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [80]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [88]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [96]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $299(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $295 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	if ( (*($3 + [232]) & [1]) ){ goto $label$10 }
	if ( (*($3 + [220]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($3 + [240])))
	if ( ((*($3 + [220]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [228])))
	$2 = [1]
	if ( ((*($3 + [208]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = [1]
	if ( (*($3 + [208]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( (*($3 + [196]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL _ZdlPv(*(($3 + [216])))
	if ( ((*($3 + [196]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [204])))
	if ( (*($3 + [184]) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((*($3 + [184]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*(($3 + [192])))
	
.LABEL $label$2
	CALL _ZdlPv($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

int_32 .FUNC $294 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [76])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [80])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [72])))
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((*($1 + [52]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($1 + [60])))
	if ( (*($1 + [40]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$5
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	return $0
}

void .FUNC $297 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [18407])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2 + [8]) = $0
	CALL $298(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $296 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [18407])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $74(*($1), *($0 + [12]))
}

int_32 .FUNC $291 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $292(CALL $74(CALL $74(CALL $74($0, ($1 + [40])), ($1 + [52])), ($1 + [64])), ($1 + [76]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [20]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $290 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [18407])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [18407])
	CALL memcpy(($1 + [36]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [18407])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $293 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $340($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $292 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19217])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $293($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [18407])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [18384])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $358($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [36]) = $7
	*($3 + [32]) = $7
	*($3 + [40]) = ($7 + $6)
	*(($9 = CALL _Znwj([88])) + [48]) = (int_64)0
	*($9 + [36]) = [0]
	*($9 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [18659])
	$10 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$10 = $11
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$10 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [18708])
	*($9 + [72]) = $0
	CALL $290(($3 + [32]), $9)
	*($9 + [76]) = $1
	*($9 + [80 align=4]) = (int_64)-1
	*($3 + [24]) = $9
	$10 = *($9)
	*($3 + [16]) = $10
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $10
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $109($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $362($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

int_32 .FUNC $349 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $347($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $348 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $347 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $346($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $346 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_64 .FUNC $345 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_32 .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [18517])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [18517])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $343 (int_32 $0)
{
}

int_32 .FUNC $342 ()
{
	return [8488]
}

int_32 .FUNC $341 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

void .FUNC $340 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_64 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	int_32 $20
	float_64 $21
	int_32 $22
	float_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_32 $35
	int_64 $36
	int_32 $37
	int_64 $38
	$2 = ($global$0 - [320])
	$global$0 = $2
	*($2 + [296]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [240])
	$5 = *(($0 + [268]))
	$4 = *(($0 + [264]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [268]) == (int_32)$3), [18333])
	if ( ((int_64)*($7 + [16]) != (int_64)5) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [248])), (int_64)4513475553721843712, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $77($3, $6)
	CALL eosio_assert(((int_32)*($7 + [268]) == (int_32)$3), [18333])
	
.LABEL $label$6
	if ( ((int_64)*($7 + [16]) == (int_64)5) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($0 + [360])
	$5 = *(($0 + [388]))
	$4 = *(($0 + [384]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$10:
	$6 = ($5 + [-24])
	$9 = *($6)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$9 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($9 + [376]) == (int_32)$8), [18333])
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	$6 = CALL db_find_i64(*($8), *(($0 + [368])), (int_64)4513481673254256640, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $152($8, $6)
	CALL eosio_assert(((int_32)*($9 + [376]) == (int_32)$8), [18333])
	
.LABEL $label$7
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [19647])
	$11 = *(($9 + [56]))
	$1 = *(($0 + [144]))
	$12 = *($9 + [336])
	$13 = *($9 + [344])
	$14 = *($9 + [352])
	$15 = *($9 + [328])
	$16 = CALL $345($15)
	$17 = CALL $345(*($9 + [336]))
	$18 = CALL $345(*($9 + [344]))
	$19 = CALL $345(*($9 + [352]))
	*(($20 = (($2 + [280]) + [8]))) = *(($9 + [368]))
	*($2 + [280]) = *($9 + [360])
	*($2 + [272]) = ($0 + [280])
	CALL $143(($2 + [264]), ($2 + [272]), ($2 + [296]))
	$6 = *($2 + [268])
	if ( ($6 == 0) ){ goto $label$11 }
	$14 = ( ((float_64)$14 * (float_64)(float_64)0.98) ? $14 : ((float_64)$14 > (float_64)(float_64)0) )
	$13 = ( ((float_64)$13 * (float_64)(float_64)0.98) ? $13 : ((float_64)$13 > (float_64)(float_64)0) )
	$21 = ( ((float_64)$12 * (float_64)(float_64)0.98) ? $12 : ((float_64)$12 > (float_64)(float_64)0) )
	$15 = ( ((float_64)$15 * (float_64)(float_64)0.98) ? $15 : ((float_64)$15 > (float_64)(float_64)0) )
	$22 = ($0 + [160])
	$23 = ((float_64)((float_64)(CASTING float_64)(uint_64 $1) * (float_64)(float_64)0.5) / (float_64)(float_64)1e4)
	$24 = (uint_64)$11 >> (uint_64)(int_64)8)
	$25 = (($2 + [224]) | [1])
	$26 = (($2 + [160]) + [24])
	$27 = (($2 + [160]) + [16])
	$28 = (($2 + [160]) | [8])
	$29 = ($0 + [176])
	$30 = ($0 + [168])
	$31 = [0]
	
.LOOP $label$12:
	if ( ((int_64)*($6 + [8]) != (int_64)*($2 + [296])) ){ goto $label$16 }
	*($2 + [160]) = *($6 + [16])
	*($2 + [240]) = $22
	CALL $68(($2 + [256]), ($2 + [240]), ($2 + [160]))
	$6 = *($2 + [260])
	if ( ($6 == 0) ){ goto $label$18 }
	
.LOOP $label$19:
	if ( ((int_64)*($6 + [8]) != (int_64)*($2 + [160])) ){ goto $label$18 }
	if ( ((int_64)*(($6 + [24])) == (int_64)$11) ){ goto $label$17 }
	CALL $69(($2 + [256]))
	$6 = *($2 + [260])
	if ( $6 ){ goto $label$19 }
	
.LABEL $label$18
	CALL eosio_assert([0], [17865])
	
.LABEL $label$17
	$6 = *($2 + [268])
	$12 = ((float_64)((float_64)((float_64)((float_64)$15 * (float_64)(CASTING float_64)(int_64 *($6 + [48]))) + (float_64)((float_64)$21 * (float_64)(CASTING float_64)(int_64 *($6 + [64])))) + (float_64)((float_64)$13 * (float_64)(CASTING float_64)(int_64 *($6 + [80])))) + (float_64)((float_64)$14 * (float_64)(CASTING float_64)(int_64 *($6 + [96]))))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$15 }
	$32 = (int_64)-9223372036854775808
	goto $label$14 
	
.LABEL $label$16
	CALL $144(($2 + [264]))
	$6 = *($2 + [268])
	if ( ((int_32)$31 > (int_32)[9]) ){ goto $label$11 }
	goto $label$13 
	
.LABEL $label$15
	$32 = (Rounds 0)($12)
	
.LABEL $label$14
	CALL eosio_assert((uint_64)(((int_64)$32 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	$1 = $24
	
.LOOP $label$22:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$33 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$23 }
	$1 = $33
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$23
	$1 = $33
	
.LOOP $label$24:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$21 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$24 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$22 }
	goto $label$20 
	
.LABEL $label$21
	$5 = [0]
	
.LABEL $label$20
	CALL eosio_assert($5, [18708])
	$6 = *($2 + [268])
	$12 = ((float_64)((float_64)((float_64)((float_64)$16 * (float_64)(CASTING float_64)(int_64 *($6 + [48]))) + (float_64)((float_64)$17 * (float_64)(CASTING float_64)(int_64 *($6 + [64])))) + (float_64)((float_64)$18 * (float_64)(CASTING float_64)(int_64 *($6 + [80])))) + (float_64)((float_64)$19 * (float_64)(CASTING float_64)(int_64 *($6 + [96]))))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$26 }
	$34 = (int_64)-9223372036854775808
	goto $label$25 
	
.LABEL $label$26
	$34 = (Rounds 0)($12)
	
.LABEL $label$25
	CALL eosio_assert((uint_64)(((int_64)$34 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	$1 = $24
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$33 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$30 }
	$1 = $33
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	$1 = $33
	
.LOOP $label$31:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$31 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$5 = [0]
	
.LABEL $label$27
	CALL eosio_assert($5, [18708])
	*(($35 = (($2 + [240]) + [8]))) = $11
	*($2 + [240]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$1 = (uint_64)*($35) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$33 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$1 = $33
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$1 = $33
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$36 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$5 = [0]
	
.LABEL $label$32
	CALL eosio_assert($5, [18708])
	if ( ((int_64)*(($9 + [8])) != (int_64)9999999999) ){ goto $label$44 }
	$12 = ((float_64)(CASTING float_64)(int_64 $34) * (float_64)(float_64)0.001)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$43 }
	$36 = (int_64)-9223372036854775808
	goto $label$42 
	
.LABEL $label$44
	if ( ((int_64)*($2 + [240]) < (int_64)1) ){ goto $label$40 }
	goto $label$41 
	
.LABEL $label$43
	$36 = (Rounds 0)($12)
	
.LABEL $label$42
	CALL eosio_assert((uint_64)(((int_64)$36 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	$1 = $24
	
.LOOP $label$47:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$46 }
	$33 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$48 }
	$1 = $33
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$48
	$1 = $33
	
.LOOP $label$49:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$46 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$49 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	$5 = [0]
	
.LABEL $label$45
	CALL eosio_assert($5, [18708])
	*($35) = $11
	*($2 + [240]) = $36
	if ( ((int_64)$36 < (int_64)1) ){ goto $label$40 }
	
.LABEL $label$41
	$1 = *(*($2 + [268]) + [24])
	if ( (int_64)($1 == 0) ){ goto $label$40 }
	if ( ((int_64)$1 == (int_64)*($0)) ){ goto $label$40 }
	if ( (CALL is_account($1) == 0) ){ goto $label$40 }
	CALL $64($0, (*($2 + [268]) + [24]), ($2 + [240]))
	CALL eosio_assert(((int_64)*($35) == (int_64)*($20)), [19449])
	$1 = ((int_64)*($2 + [280]) + (int_64)*($2 + [240]))
	*($2 + [280]) = $1
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($2 + [280]) < (int_64)4611686018427387904), [19511])
	if ( ((int_64)$11 == (int_64)1397703940) ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	if ( ((int_64)$11 != (int_64)1397703940) ){ goto $label$38 }
	
.LABEL $label$39
	*(($6 = (($2 + [160]) + [8]))) = (int_64)1480674564
	$12 = ((float_64)$23 * (float_64)(CASTING float_64)(int_64 $34))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$51 }
	$1 = (int_64)-9223372036854775808
	goto $label$50 
	
.LABEL $label$51
	$1 = (Rounds 0)($12)
	
.LABEL $label$50
	*($2 + [160]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$33 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$55 }
	$1 = $33
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$55
	$1 = $33
	
.LOOP $label$56:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$53 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$56 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$5 = [0]
	
.LABEL $label$52
	CALL eosio_assert($5, [18708])
	$5 = *($2 + [268])
	*(($4 = (($2 + [224]) + [8]))) = [0]
	*($2 + [224]) = (int_64)0
	$6 = CALL $355([17566])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$37 }
	$35 = ($5 + [16])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$59 }
	*($2 + [224]) = ($6 << [1])
	$5 = $25
	if ( $6 ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$59
	$37 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($37)
	*($4) = $5
	*($2 + [224]) = ($37 | [1])
	*($2 + [228]) = $6
	
.LABEL $label$58
	CALL memcpy($5, [17566], $6)
	
.LABEL $label$57
	*(($5 + $6)) = [0]
	CALL $153($0, $35, ($2 + [160]), ($2 + [224]))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$38
	$33 = *($0)
	$6 = *($2 + [260])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [19026])
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$22), [19061])
	CALL eosio_assert(((int_64)*($22) == (int_64)CALL eosio_assert0()), [19107])
	$5 = ($6 + [8])
	*($2 + [304]) = *($5)
	$1 = *($6)
	$4 = ($6 + [24])
	CALL eosio_assert(((int_64)$11 == (int_64)*($4)), [19449])
	$32 = ((int_64)*($6 + [16]) + (int_64)$32)
	*($6 + [16]) = $32
	CALL eosio_assert(((int_64)$32 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($6 + [16]) < (int_64)4611686018427387904), [19511])
	CALL eosio_assert(((int_64)$1 == (int_64)*($6)), [19158])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($2 + [160]), $6, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy($28, $5, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy($27, ($6 + [16]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy($26, $4, [8])
	CALL db_update_i64(*($6 + [36]), $33, ($2 + [160]), [32])
	if ( (uint_64)($1 <= *($29)) ){ goto $label$60 }
	*($29) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$60
	*($2 + [224]) = *($5)
	if ( (CALL $354(($2 + [304]), ($2 + [224]), [8]) == 0) ){ goto $label$61 }
	$5 = ($6 + [40])
	$6 = *($5)
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$62 }
	$6 = CALL db_idx64_find_primary(*($22), *($30), (int_64)-3020379698556063232, ($2 + [312]), $1)
	*($5) = $6
	
.LABEL $label$62
	CALL db_idx64_update($6, $33, ($2 + [224]))
	
.LABEL $label$61
	$1 = *($2 + [264])
	*($2 + [160]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$6) != (int_32)[0]), [19221])
	CALL $144(($2 + [160]))
	CALL $154(*($2 + [272]), $6)
	$1 = *($2 + [160])
	*($2 + [264]) = $1
	$6 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32))
	$31 = ($31 + [1])
	if ( ((int_32)$31 <= (int_32)[9]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$37
	CALL $321(($2 + [224]))
	
.LABEL $label$13
	if ( $6 ){ goto $label$12 }
	
.LABEL $label$11
	$1 = CALL current_time()
	*(($2 + [188])) = (int_64)0
	*(($2 + [204])) = (int_64)0
	*(($2 + [212])) = (int_64)0
	*($2 + [172]) = [0]
	*($2 + [176]) = [0]
	*($2 + [180 align=4]) = (int_64)0
	*($2 + [196 align=4]) = (int_64)0
	*($2 + [160]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	if ( (*($2 + [268]) == 0) ){ goto $label$66 }
	$1 = *($0)
	*($2 + [240]) = ($2 + [280])
	CALL eosio_assert($10, [19026])
	CALL $155($8, $9, $1, ($2 + [240]))
	goto $label$65 
	
.LABEL $label$66
	if ( ((int_64)*($9 + [48]) < (int_64)1) ){ goto $label$67 }
	$12 = ((float_64)((float_64)((float_64)((float_64)$16 * (float_64)(CASTING float_64)(int_64 *($9 + [80]))) + (float_64)((float_64)$17 * (float_64)(CASTING float_64)(int_64 *($9 + [112])))) + (float_64)((float_64)$18 * (float_64)(CASTING float_64)(int_64 *($9 + [144])))) + (float_64)((float_64)$19 * (float_64)(CASTING float_64)(int_64 *($9 + [176]))))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$69 }
	$36 = (int_64)-9223372036854775808
	goto $label$68 
	
.LABEL $label$69
	$36 = (Rounds 0)($12)
	
.LABEL $label$68
	CALL eosio_assert((uint_64)(((int_64)$36 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	$33 = (uint_64)$11 >> (uint_64)(int_64)8
	$1 = $33)
	
.LOOP $label$72:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$73 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$73
	$1 = $32
	
.LOOP $label$74:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$71 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$74 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$72 }
	goto $label$70 
	
.LABEL $label$71
	$5 = [0]
	
.LABEL $label$70
	CALL eosio_assert($5, [18708])
	CALL eosio_assert([1], [18659])
	$1 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$77:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$76 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$78 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$78
	$1 = $32
	
.LOOP $label$79:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$76 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$79 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$76
	$5 = [0]
	
.LABEL $label$75
	CALL eosio_assert($5, [18708])
	$1 = *($2 + [296])
	$5 = *(($0 + [268]))
	$22 = *(($0 + [264]))
	if ( ((int_32)$22 == (int_32)$5) ){ goto $label$81 }
	
.LOOP $label$83:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$82 }
	$5 = $6
	if ( ((int_32)$22 != (int_32)$6) ){ goto $label$83 }
	goto $label$81 
	
.LABEL $label$82
	if ( ((int_32)$22 == (int_32)$5) ){ goto $label$81 }
	CALL eosio_assert(((int_32)*($4 + [268]) == (int_32)$3), [18333])
	goto $label$80 
	
.LABEL $label$81
	$4 = [0]
	$6 = CALL db_find_i64(*(($0 + [240])), *(($0 + [248])), (int_64)4513475553721843712, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$80 }
	$4 = CALL $77($3, $6)
	CALL eosio_assert(((int_32)*($4 + [268]) == (int_32)$3), [18333])
	
.LABEL $label$80
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [17691])
	$22 = *($4 + [264])
	$1 = *($9 + [8])
	if ( ((int_64)$1 != (int_64)9999999999) ){ goto $label$96 }
	$12 = (CASTING float_64)(int_64 $36)
	if ( ((int_32)$22 != (int_32)[1]) ){ goto $label$95 }
	$12 = ((float_64)$12 * (float_64)(float_64)0.008)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$93 }
	$32 = (int_64)-9223372036854775808
	goto $label$92 
	
.LABEL $label$96
	if ( ((int_32)$22 != (int_32)[1]) ){ goto $label$94 }
	$12 = ((float_64)(CASTING float_64)(int_64 $36) * (float_64)(float_64)0.004)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$91 }
	$32 = (int_64)-9223372036854775808
	goto $label$90 
	
.LABEL $label$95
	$12 = ((float_64)$12 * (float_64)(float_64)0.006)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$89 }
	$32 = (int_64)-9223372036854775808
	goto $label$88 
	
.LABEL $label$94
	$35 = ($0 + [640])
	$5 = *(($0 + [668]))
	$31 = *(($0 + [664]))
	if ( ((int_32)$31 == (int_32)$5) ){ goto $label$86 }
	
.LOOP $label$97:
	$6 = ($5 + [-24])
	$4 = *($6)
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$87 }
	$5 = $6
	if ( ((int_32)$31 != (int_32)$6) ){ goto $label$97 }
	goto $label$86 
	
.LABEL $label$93
	$32 = (Rounds 0)($12)
	
.LABEL $label$92
	CALL eosio_assert((uint_64)(((int_64)$32 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	$1 = $33
	
.LOOP $label$100:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$99 }
	$34 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$101 }
	$1 = $34
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$100 }
	goto $label$98 
	
.LABEL $label$101
	$1 = $34
	
.LOOP $label$102:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$99 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$102 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$100 }
	goto $label$98 
	
.LABEL $label$99
	$5 = [0]
	
.LABEL $label$98
	CALL eosio_assert($5, [18708])
	goto $label$84 
	
.LABEL $label$91
	$32 = (Rounds 0)($12)
	
.LABEL $label$90
	CALL eosio_assert((uint_64)(((int_64)$32 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	$1 = $33
	
.LOOP $label$105:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$104 }
	$34 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$106 }
	$1 = $34
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$105 }
	goto $label$103 
	
.LABEL $label$106
	$1 = $34
	
.LOOP $label$107:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$104 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$107 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$105 }
	goto $label$103 
	
.LABEL $label$104
	$5 = [0]
	
.LABEL $label$103
	CALL eosio_assert($5, [18708])
	goto $label$84 
	
.LABEL $label$89
	$32 = (Rounds 0)($12)
	
.LABEL $label$88
	CALL eosio_assert((uint_64)(((int_64)$32 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	$1 = $33
	
.LOOP $label$110:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$109 }
	$34 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$111 }
	$1 = $34
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$110 }
	goto $label$108 
	
.LABEL $label$111
	$1 = $34
	
.LOOP $label$112:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$109 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$112 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$110 }
	goto $label$108 
	
.LABEL $label$109
	$5 = [0]
	
.LABEL $label$108
	CALL eosio_assert($5, [18708])
	goto $label$84 
	
.LABEL $label$87
	if ( ((int_32)$31 == (int_32)$5) ){ goto $label$86 }
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$35), [18333])
	goto $label$85 
	
.LABEL $label$86
	$4 = [0]
	$6 = CALL db_find_i64(*($35), *(($0 + [648])), (int_64)4513481842761924608, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$85 }
	$4 = CALL $65($35, $6)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)$35), [18333])
	
.LABEL $label$85
	*($2 + [248]) = $11
	$12 = (CASTING float_64)(int_64 $36)
	$16 = ((float_64)$12 * (float_64)(float_64)0.012)
	if ( ((float_64)(float_64)|$16| < (float_64)(float_64)9223372036854775808) ){ goto $label$114 }
	$1 = (int_64)-9223372036854775808
	goto $label$113 
	
.LABEL $label$114
	$1 = (Rounds 0)($16)
	
.LABEL $label$113
	*($2 + [240]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$31 = ($4 + [32])
	$1 = (uint_64)*($2 + [248]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$117:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$116 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$118 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$117 }
	goto $label$115 
	
.LABEL $label$118
	$1 = $32
	
.LOOP $label$119:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$116 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$119 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$117 }
	goto $label$115 
	
.LABEL $label$116
	$5 = [0]
	
.LABEL $label$115
	CALL eosio_assert($5, [18708])
	CALL $64($0, $31, ($2 + [240]))
	$12 = ((float_64)$12 * (float_64)(float_64)0.008)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$121 }
	$32 = (int_64)-9223372036854775808
	goto $label$120 
	
.LABEL $label$121
	$32 = (Rounds 0)($12)
	
.LABEL $label$120
	CALL eosio_assert((uint_64)(((int_64)$32 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	$1 = $33
	
.LOOP $label$124:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$123 }
	$34 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$125 }
	$1 = $34
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$124 }
	goto $label$122 
	
.LABEL $label$125
	$1 = $34
	
.LOOP $label$126:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$123 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$126 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$124 }
	goto $label$122 
	
.LABEL $label$123
	$5 = [0]
	
.LABEL $label$122
	CALL eosio_assert($5, [18708])
	
.LABEL $label$84
	CALL eosio_assert(((int_64)*($2 + [288]) == (int_64)$11), [19529])
	$38 = (int_64)
	CALL eosio_assert(((int_64)$38($32 - *($2 + [280]))) > (int_64)-4611686018427387904), [19577])
	CALL eosio_assert(((int_64)$38 < (int_64)4611686018427387904), [19599])
	if ( ((int_64)$11 != (int_64)1397703940) ){ goto $label$138 }
	$1 = (int_64)0
	$32 = (int_64)59
	$6 = [17587]
	$24 = (int_64)0
	
.LOOP $label$139:
	$34 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$140 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$142 }
	$5 = ($5 + [-91])
	goto $label$141 
	
.LABEL $label$142
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$141
	$34 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$32 & (int_64)4294967295))
	
.LABEL $label$140
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$24 = ((int_64)$34 | (int_64)$24)
	$32 = ((int_64)$32 + (int_64)4294967291)
	if ( ((int_64)$32 != (int_64)55834574842) ){ goto $label$139 }
	*($2 + [312]) = $24
	*($2 + [248]) = (int_64)1397703940
	$12 = (CASTING float_64)(int_64 $38)
	$16 = ((float_64)$12 * (float_64)(float_64)0.1)
	if ( ((float_64)(float_64)|$16| < (float_64)(float_64)9223372036854775808) ){ goto $label$137 }
	$1 = (int_64)-9223372036854775808
	goto $label$136 
	
.LABEL $label$138
	$1 = (int_64)0
	$32 = (int_64)59
	$6 = [17587]
	$24 = (int_64)0
	
.LOOP $label$143:
	$34 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$144 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$146 }
	$5 = ($5 + [-91])
	goto $label$145 
	
.LABEL $label$146
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$145
	$34 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$32 & (int_64)4294967295))
	
.LABEL $label$144
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$24 = ((int_64)$34 | (int_64)$24)
	$32 = ((int_64)$32 + (int_64)4294967291)
	if ( ((int_64)$32 != (int_64)55834574842) ){ goto $label$143 }
	*($2 + [312]) = $24
	*($2 + [248]) = (int_64)1480674564
	$12 = (CASTING float_64)(int_64 $38)
	$16 = ((float_64)$12 * (float_64)(float_64)0.1)
	if ( ((float_64)(float_64)|$16| < (float_64)(float_64)9223372036854775808) ){ goto $label$135 }
	$1 = (int_64)-9223372036854775808
	goto $label$134 
	
.LABEL $label$137
	$1 = (Rounds 0)($16)
	
.LABEL $label$136
	*($2 + [240]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)*($2 + [248]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$149:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$148 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$150 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$149 }
	goto $label$147 
	
.LABEL $label$150
	$1 = $32
	
.LOOP $label$151:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$148 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$151 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$149 }
	goto $label$147 
	
.LABEL $label$148
	$5 = [0]
	
.LABEL $label$147
	CALL eosio_assert($5, [18708])
	CALL $156(($2 + [224]), $0, $9)
	CALL $73($0, ($2 + [312]), ($2 + [240]), ($2 + [224]))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$152 }
	CALL _ZdlPv(*($2 + [232]))
	
.LABEL $label$152
	$1 = (int_64)0
	$32 = (int_64)59
	$6 = [17600]
	$24 = (int_64)0
	
.LOOP $label$153:
	$34 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$154 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$156 }
	$5 = ($5 + [-91])
	goto $label$155 
	
.LABEL $label$156
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$155
	$34 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$32 & (int_64)4294967295))
	
.LABEL $label$154
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$24 = ((int_64)$34 | (int_64)$24)
	$32 = ((int_64)$32 + (int_64)4294967291)
	if ( ((int_64)$32 != (int_64)55834574842) ){ goto $label$153 }
	*($2 + [312]) = $24
	*($2 + [248]) = (int_64)1397703940
	$16 = ((float_64)$12 * (float_64)(float_64)0.45)
	if ( ((float_64)(float_64)|$16| < (float_64)(float_64)9223372036854775808) ){ goto $label$133 }
	$1 = (int_64)-9223372036854775808
	goto $label$132 
	
.LABEL $label$135
	$1 = (Rounds 0)($16)
	
.LABEL $label$134
	*($2 + [240]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)*($2 + [248]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$159:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$158 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$160 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$159 }
	goto $label$157 
	
.LABEL $label$160
	$1 = $32
	
.LOOP $label$161:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$158 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$161 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$159 }
	goto $label$157 
	
.LABEL $label$158
	$5 = [0]
	
.LABEL $label$157
	CALL eosio_assert($5, [18708])
	CALL $156(($2 + [224]), $0, $9)
	CALL $73($0, ($2 + [312]), ($2 + [240]), ($2 + [224]))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$162 }
	CALL _ZdlPv(*($2 + [232]))
	
.LABEL $label$162
	$1 = (int_64)0
	$32 = (int_64)59
	$6 = [17600]
	$24 = (int_64)0
	
.LOOP $label$163:
	$34 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$164 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$166 }
	$5 = ($5 + [-91])
	goto $label$165 
	
.LABEL $label$166
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$165
	$34 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$32 & (int_64)4294967295))
	
.LABEL $label$164
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$24 = ((int_64)$34 | (int_64)$24)
	$32 = ((int_64)$32 + (int_64)4294967291)
	if ( ((int_64)$32 != (int_64)55834574842) ){ goto $label$163 }
	*($2 + [312]) = $24
	*($2 + [248]) = (int_64)1480674564
	$12 = ((float_64)$12 * (float_64)(float_64)0.5)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$131 }
	$1 = (int_64)-9223372036854775808
	goto $label$130 
	
.LABEL $label$133
	$1 = (Rounds 0)($16)
	
.LABEL $label$132
	*($2 + [240]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)*($2 + [248]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$169:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$168 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$170 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$169 }
	goto $label$167 
	
.LABEL $label$170
	$1 = $32
	
.LOOP $label$171:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$168 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$171 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$169 }
	goto $label$167 
	
.LABEL $label$168
	$5 = [0]
	
.LABEL $label$167
	CALL eosio_assert($5, [18708])
	CALL $157(($2 + [224]), $0, $9)
	CALL $73($0, ($2 + [312]), ($2 + [240]), ($2 + [224]))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$172 }
	CALL _ZdlPv(*($2 + [232]))
	
.LABEL $label$172
	*($2 + [248]) = (int_64)1397703940
	$12 = ((float_64)$12 * (float_64)(float_64)0.05)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$129 }
	$1 = (int_64)-9223372036854775808
	goto $label$128 
	
.LABEL $label$131
	$1 = (Rounds 0)($12)
	
.LABEL $label$130
	*($2 + [240]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)*($2 + [248]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$175:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$174 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$176 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$175 }
	goto $label$173 
	
.LABEL $label$176
	$1 = $32
	
.LOOP $label$177:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$174 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$177 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$175 }
	goto $label$173 
	
.LABEL $label$174
	$5 = [0]
	
.LABEL $label$173
	CALL eosio_assert($5, [18708])
	CALL $157(($2 + [224]), $0, $9)
	CALL $73($0, ($2 + [312]), ($2 + [240]), ($2 + [224]))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$127 }
	CALL _ZdlPv(*($2 + [232]))
	goto $label$127 
	
.LABEL $label$129
	$1 = (Rounds 0)($12)
	
.LABEL $label$128
	*($2 + [240]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)*($2 + [248]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$180:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$179 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$181 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$180 }
	goto $label$178 
	
.LABEL $label$181
	$1 = $32
	
.LOOP $label$182:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$179 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$182 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$180 }
	goto $label$178 
	
.LABEL $label$179
	$5 = [0]
	
.LABEL $label$178
	CALL eosio_assert($5, [18708])
	if ( ((int_64)*($2 + [240]) < (int_64)1) ){ goto $label$127 }
	$1 = (int_64)0
	$32 = (int_64)59
	$6 = [17613]
	$24 = (int_64)0
	
.LOOP $label$183:
	$34 = (int_64)0
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$184 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$186 }
	$5 = ($5 + [-91])
	goto $label$185 
	
.LABEL $label$186
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$185
	$34 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$32 & (int_64)4294967295))
	
.LABEL $label$184
	$6 = ($6 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$24 = ((int_64)$34 | (int_64)$24)
	$32 = ((int_64)$32 + (int_64)4294967291)
	if ( ((int_64)$32 != (int_64)55834574842) ){ goto $label$183 }
	*($2 + [312]) = $24
	CALL $158(($2 + [224]), $0, $9)
	CALL $73($0, ($2 + [312]), ($2 + [240]), ($2 + [224]))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$127 }
	CALL _ZdlPv(*($2 + [232]))
	
.LABEL $label$127
	$1 = *($0)
	*($2 + [240]) = ($2 + [280])
	CALL eosio_assert($10, [19026])
	CALL $159($8, $9, $1, ($2 + [240]))
	if ( ((int_32)$22 != (int_32)[1]) ){ goto $label$193 }
	$12 = *(($9 + [352]))
	$12 = ( ((float_64)$12 * (float_64)(float_64)1.98) ? (float_64)0 : ((float_64)$12 > (float_64)(float_64)0) )
	$16 = *(($9 + [344]))
	$16 = ( ((float_64)$16 * (float_64)(float_64)1.98) ? (float_64)0 : ((float_64)$16 > (float_64)(float_64)0) )
	$17 = *(($9 + [336]))
	$17 = ( ((float_64)$17 * (float_64)(float_64)1.98) ? (float_64)0 : ((float_64)$17 > (float_64)(float_64)0) )
	$18 = *(($9 + [328]))
	$18 = ( ((float_64)$18 * (float_64)(float_64)1.98) ? (float_64)0 : ((float_64)$18 > (float_64)(float_64)0) )
	if ( ((int_64)*(($9 + [8])) != (int_64)9999999999) ){ goto $label$192 }
	*($2 + [248]) = $11
	$19 = ((float_64)(CASTING float_64)(int_64 $36) * (float_64)(float_64)0.002)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$191 }
	$1 = (int_64)-9223372036854775808
	goto $label$190 
	
.LABEL $label$193
	$24 = ((int_64)$36 << (int_64)1)
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	$1 = $33
	
.LOOP $label$196:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$195 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$197 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$196 }
	goto $label$194 
	
.LABEL $label$197
	$1 = $32
	
.LOOP $label$198:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$195 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$198 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$196 }
	goto $label$194 
	
.LABEL $label$195
	$5 = [0]
	
.LABEL $label$194
	CALL eosio_assert($5, [18708])
	$18 = CALL $345(((float_64)*(($9 + [328])) * (float_64)(float_64)1.98))
	$17 = CALL $345(((float_64)*(($9 + [336])) * (float_64)(float_64)1.98))
	$16 = CALL $345(((float_64)*(($9 + [344])) * (float_64)(float_64)1.98))
	$12 = CALL $345(((float_64)*(($9 + [352])) * (float_64)(float_64)1.98))
	if ( ((int_64)*(($9 + [8])) != (int_64)9999999999) ){ goto $label$187 }
	*($2 + [248]) = $11
	$19 = ((float_64)(CASTING float_64)(int_64 $36) * (float_64)(float_64)0.004)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$189 }
	$1 = (int_64)-9223372036854775808
	goto $label$188 
	
.LABEL $label$192
	$24 = $36
	goto $label$187 
	
.LABEL $label$191
	$1 = (Rounds 0)($19)
	
.LABEL $label$190
	*($2 + [240]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)*($2 + [248]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$201:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$200 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$202 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$201 }
	goto $label$199 
	
.LABEL $label$202
	$1 = $32
	
.LOOP $label$203:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$200 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$203 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$201 }
	goto $label$199 
	
.LABEL $label$200
	$5 = [0]
	
.LABEL $label$199
	CALL eosio_assert($5, [18708])
	CALL $160($0, ($2 + [240]))
	$24 = $36
	goto $label$187 
	
.LABEL $label$189
	$1 = (Rounds 0)($19)
	
.LABEL $label$188
	*($2 + [240]) = $1
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$1 = (uint_64)*($2 + [248]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$206:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$205 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$207 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$206 }
	goto $label$204 
	
.LABEL $label$207
	$1 = $32
	
.LOOP $label$208:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$205 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$208 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$206 }
	goto $label$204 
	
.LABEL $label$205
	$5 = [0]
	
.LABEL $label$204
	CALL eosio_assert($5, [18708])
	CALL $160($0, ($2 + [240]))
	
.LABEL $label$187
	$12 = ((float_64)((float_64)((float_64)((float_64)$18 * (float_64)(CASTING float_64)(int_64 *(($9 + [80])))) + (float_64)((float_64)$17 * (float_64)(CASTING float_64)(int_64 *(($9 + [112]))))) + (float_64)((float_64)$16 * (float_64)(CASTING float_64)(int_64 *(($9 + [144]))))) + (float_64)((float_64)$12 * (float_64)(CASTING float_64)(int_64 *(($9 + [176])))))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$210 }
	$34 = (int_64)-9223372036854775808
	goto $label$209 
	
.LABEL $label$210
	$34 = (Rounds 0)($12)
	
.LABEL $label$209
	CALL eosio_assert((uint_64)(((int_64)$34 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	$1 = $33
	
.LOOP $label$213:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$212 }
	$32 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$214 }
	$1 = $32
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$213 }
	goto $label$211 
	
.LABEL $label$214
	$1 = $32
	
.LOOP $label$215:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$212 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$215 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$213 }
	goto $label$211 
	
.LABEL $label$212
	$5 = [0]
	
.LABEL $label$211
	CALL eosio_assert($5, [18708])
	*(($2 + [120])) = [0]
	*($2 + [144]) = $24
	*($2 + [152]) = $11
	*($2 + [128]) = $34
	*($2 + [136]) = $11
	*($2 + [112]) = (int_64)0
	$1 = *($9 + [24])
	$32 = *($9 + [32])
	$6 = CALL $355([17626])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$64 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$218 }
	*($2 + [112]) = ($6 << [1])
	$5 = (($2 + [112]) | [1])
	if ( $6 ){ goto $label$217 }
	goto $label$216 
	
.LABEL $label$218
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [112]) = ($4 | [1])
	*($2 + [120]) = $5
	*($2 + [116]) = $6
	
.LABEL $label$217
	CALL memcpy($5, [17626], $6)
	
.LABEL $label$216
	*(($5 + $6)) = [0]
	*((($2 + [48]) + [8])) = *((($2 + [144]) + [8]))
	*((($2 + [32]) + [8])) = *((($2 + [128]) + [8]))
	*($2 + [48]) = *($2 + [144])
	*($2 + [32]) = *($2 + [128])
	CALL $161($0, $1, ($2 + [48]), ($2 + [32]), $32, ($2 + [112]))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$219 }
	CALL _ZdlPv(*($2 + [120]))
	
.LABEL $label$219
	if ( ((int_64)$11 != (int_64)1397703940) ){ goto $label$67 }
	$12 = (CASTING float_64)(int_64 $36)
	if ( ((int_32)$22 != (int_32)[1]) ){ goto $label$225 }
	$12 = ((float_64)$12 * (float_64)(float_64)0.5)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$224 }
	$32 = (int_64)-9223372036854775808
	goto $label$223 
	
.LABEL $label$225
	$12 = ((float_64)$12 * (float_64)(float_64)1.5)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$222 }
	$32 = (int_64)-9223372036854775808
	goto $label$221 
	
.LABEL $label$224
	$32 = (Rounds 0)($12)
	
.LABEL $label$223
	CALL eosio_assert((uint_64)(((int_64)$32 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	
.LOOP $label$228:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $33) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$227 }
	$1 = (uint_64)$33 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$33 & (int_64)65280) == (int_64)0) ){ goto $label$229 }
	$33 = $1
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$228 }
	goto $label$226 
	
.LABEL $label$229
	$33 = $1
	
.LOOP $label$230:
	if ( ((int_64)((int_64)$33 & (int_64)65280) != (int_64)0) ){ goto $label$227 }
	$33 = (uint_64)$33 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$230 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$228 }
	goto $label$226 
	
.LABEL $label$227
	$5 = [0]
	
.LABEL $label$226
	CALL eosio_assert($5, [18708])
	goto $label$220 
	
.LABEL $label$222
	$32 = (Rounds 0)($12)
	
.LABEL $label$221
	CALL eosio_assert((uint_64)(((int_64)$32 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18659])
	$6 = [0]
	
.LOOP $label$233:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $33) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$232 }
	$1 = (uint_64)$33 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$33 & (int_64)65280) == (int_64)0) ){ goto $label$234 }
	$33 = $1
	$5 = [1]
	$4 = $6
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$233 }
	goto $label$231 
	
.LABEL $label$234
	$33 = $1
	
.LOOP $label$235:
	if ( ((int_64)((int_64)$33 & (int_64)65280) != (int_64)0) ){ goto $label$232 }
	$33 = (uint_64)$33 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$4 = ($6 + [1])
	$6 = $4
	if ( $5 ){ goto $label$235 }
	$5 = [1]
	$6 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$233 }
	goto $label$231 
	
.LABEL $label$232
	$5 = [0]
	
.LABEL $label$231
	CALL eosio_assert($5, [18708])
	
.LABEL $label$220
	$1 = *(($9 + [24]))
	*($2 + [104]) = $11
	*($2 + [96]) = $32
	*($2 + [80]) = $34
	*($2 + [88]) = $11
	$11 = *(($9 + [32]))
	*(($2 + [72])) = [0]
	*($2 + [64]) = (int_64)0
	$6 = CALL $355([17626])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$63 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$238 }
	*($2 + [64]) = ($6 << [1])
	$5 = (($2 + [64]) | [1])
	if ( $6 ){ goto $label$237 }
	goto $label$236 
	
.LABEL $label$238
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [64]) = ($4 | [1])
	*($2 + [72]) = $5
	*($2 + [68]) = $6
	
.LABEL $label$237
	CALL memcpy($5, [17626], $6)
	
.LABEL $label$236
	*(($5 + $6)) = [0]
	*((($2 + [16]) + [8])) = *((($2 + [96]) + [8]))
	*(($2 + [8])) = *((($2 + [80]) + [8]))
	*($2 + [16]) = *($2 + [96])
	*($2) = *($2 + [80])
	CALL $162($0, $1, ($2 + [16]), $2, $11, ($2 + [64]))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*($2 + [72]))
	
.LABEL $label$67
	if ( ($7 == 0) ){ goto $label$65 }
	$1 = *($0)
	CALL eosio_assert([1], [19026])
	CALL $163($3, $7, $1)
	
.LABEL $label$65
	CALL $164(($2 + [160]))
	$global$0 = ($2 + [320])
	return (unreachable)
	
.LABEL $label$64
	CALL $321(($2 + [112]))
	
.LABEL $label$63
	CALL $321(($2 + [64]))
	
.LABEL $label$1
	$global$0 = ($2 + [320])
	(unreachable)
	(unreachable)
}

void .FUNC $283 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [16])
	if ( (CALL $354(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [48])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-5920943410927747072, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [48]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $354((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [52]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-5920943410927747071, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [52])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [24]) = $1
	CALL require_auth($1)
	CALL eosio_assert((($2 + [-1]) <= [2]), [17627])
	*($4 + [16]) = ($0 + [200])
	CALL $106(($4 + [8]), ($4 + [16]), ($4 + [24]))
	$5 = *($4 + [12])
	if ( ($5 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_64)*($5 + [8]) != (int_64)*($4 + [24])) ){ goto $label$2 }
	if ( ((int_64)*($5 + [40]) != (int_64)$3) ){ goto $label$5 }
	if ( ((int_32)*($5 + [32]) == (int_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $107(($4 + [8]))
	$5 = *($4 + [12])
	if ( ($5 == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = *($5 + [24])
	if ( (int_64)($3 == 0) ){ goto $label$1 }
	if ( ((int_64)$3 != (int_64)1) ){ goto $label$2 }
	$1 = *($0)
	CALL eosio_assert([1], [19026])
	$2 = *($4 + [16])
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)$2), [19061])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL eosio_assert0()), [19107])
	*($5 + [24]) = (int_64)2
	$0 = ($5 + [40])
	*($4 + [128]) = *($0)
	*($4 + [136]) = *(($5 + [8]))
	$3 = *($5)
	CALL eosio_assert([1], [19158])
	*($4 + [120]) = (($4 + [32]) + [72])
	*($4 + [116]) = ($4 + [32])
	*($4 + [112]) = ($4 + [32])
	CALL $110(($4 + [112]), $5)
	CALL db_update_i64(*($5 + [76]), $1, ($4 + [32]), [72])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$6 = (($4 + [128]) + [8])
	*($4 + [152]) = *($0)
	if ( (CALL $354(($4 + [128]), ($4 + [152]), [8]) == 0) ){ goto $label$7 }
	$7 = ($5 + [80])
	$0 = *($7)
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$8 }
	$0 = CALL db_idx64_find_primary(*($2), *($2 + [8]), (int_64)5371973418988895232, ($4 + [144]), $3)
	*($7) = $0
	
.LABEL $label$8
	CALL db_idx64_update($0, $1, ($4 + [152]))
	
.LABEL $label$7
	*($4 + [152]) = *(($5 + [8]))
	if ( (CALL $354($6, ($4 + [152]), [8]) == 0) ){ goto $label$2 }
	$0 = ($5 + [84])
	$5 = *($0)
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$9 }
	$5 = CALL db_idx64_find_primary(*($2), *($2 + [8]), (int_64)5371973418988895233, ($4 + [144]), $3)
	*($0) = $5
	
.LABEL $label$9
	CALL db_idx64_update($5, $1, ($4 + [152]))
	
.LABEL $label$2
	$global$0 = ($4 + [160])
	return 
	
.LABEL $label$1
	$3 = *($4 + [8])
	*($4 + [32]) = $3
	$5 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$5) != (int_32)[0]), [19221])
	CALL $107(($4 + [32]))
	CALL $111(*($4 + [16]), $5)
	CALL $64($0, ($4 + [24]), (*($4 + [12]) + [48]))
	$global$0 = ($4 + [160])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $358($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [18407])
	CALL memcpy(($3 + [8]), $6, [8])
	CALL eosio_assert(((int_32)($1 & [-4]) != (int_32)[8]), [18407])
	$2 = (($3 + [8]) + [8])
	CALL memcpy($2, ($6 + [8]), [4])
	CALL eosio_assert(((uint_32)($1 + [-12]) > (uint_32)[7]), [18407])
	$7 = ($3 + [24])
	CALL memcpy($7, ($6 + [12]), [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $362($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	$8 = *($7)
	$6 = *($2)
	$9 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $9), (int_64 $6), (int_32 $8), (int_64 $5))
	$global$0 = ($3 + [32])
	return [1]
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [624])
	$global$0 = $2
	*(($3 = $2) + [588]) = $0
	*($3 + [576]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $358($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3) = (int_64)0
	CALL memset(($3 + [48]), [0], [66])
	*(($3 + [124])) = [0]
	*(($3 + [152])) = (int_64)0
	*(($3 + [144])) = (int_64)0
	*(($3 + [136])) = (int_64)0
	*($3 + [116 align=4]) = (int_64)0
	*($3 + [128]) = (int_64)0
	CALL memset(($3 + [160]), [0], [66])
	*(($3 + [236])) = [0]
	*(($3 + [264])) = (int_64)0
	*(($3 + [256])) = (int_64)0
	*(($3 + [248])) = (int_64)0
	*($3 + [228 align=4]) = (int_64)0
	*($3 + [240]) = (int_64)0
	CALL memset(($3 + [272]), [0], [66])
	*(($3 + [348])) = [0]
	*(($3 + [376])) = (int_64)0
	*(($3 + [368])) = (int_64)0
	*(($3 + [360])) = (int_64)0
	*($3 + [340 align=4]) = (int_64)0
	*($3 + [352]) = (int_64)0
	CALL memset(($3 + [384]), [0], [66])
	*(($3 + [460])) = [0]
	*(($3 + [488])) = (int_64)0
	*(($3 + [480])) = (int_64)0
	*(($3 + [472])) = (int_64)0
	*($3 + [452 align=4]) = (int_64)0
	*($3 + [464]) = (int_64)0
	CALL memset(($3 + [496]), [0], [66])
	*(($3 + [572])) = [0]
	*($3 + [564 align=4]) = (int_64)0
	*($3 + [596]) = $1
	*($3 + [592]) = $1
	*($3 + [600]) = ($1 + $0)
	*($3 + [608]) = ($3 + [592])
	*($3 + [616]) = $3
	CALL $88(($3 + [616]), ($3 + [608]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $362($1)
	
.LABEL $label$4
	*($3 + [596]) = ($3 + [576])
	*($3 + [592]) = ($3 + [588])
	CALL $89(($3 + [592]), $3)
	if ( (*($3 + [564]) & [1]) ){ goto $label$13 }
	if ( (*($3 + [452]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($3 + [572])))
	if ( ((*($3 + [452]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [460])))
	$1 = [1]
	if ( ((*($3 + [340]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($3 + [340]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($3 + [228]) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($3 + [348])))
	if ( ((*($3 + [228]) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($3 + [236])))
	$1 = [1]
	if ( ((*($3 + [116]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($3 + [116]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	$global$0 = ($3 + [624])
	return $1
	
.LABEL $label$5
	CALL _ZdlPv(*(($3 + [124])))
	$global$0 = ($3 + [624])
	return $1
}

void .FUNC $35 (int_32 $0, int_64 $1)
{
	int_32 $2
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = (int_64)0
	*($2) = $1
	CALL cancel_deferred($2)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $358($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [32])) = (int_64)1398362884
	*($3 + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [18659])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [18708])
	*($3 + [40]) = (int_64)0
	*($3 + [84]) = $6
	*($3 + [80]) = $6
	*($3 + [88]) = ($6 + $7)
	*($3 + [48]) = ($3 + [80])
	*($3 + [64]) = ($3 + [16])
	CALL $104(($3 + [64]), ($3 + [48]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $362($6)
	
.LABEL $label$8
	*(($1 = (($3 + [48]) + [8]))) = *(($3 + [32]))
	*($3 + [48]) = *($3 + [24])
	$8 = *(($3 + [40]))
	$10 = *($3 + [16])
	*((($3 + [64]) + [8])) = *($1)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$12 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $12
	*(($3 + [8])) = $12
	$12 = *($3 + [64])
	*($3) = $12
	*($3 + [80]) = $12
	CALL void $1((int_32 $10), (int_64 $3), (int_32 $8), (int_64 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $280 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [576])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [560])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [568])), (int_64)-5920943410927747072, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $220($9, $10)
	*($3 + [12]) = [0]
	*($3 + [8]) = $9
	$8 = *(*(CALL $284(($3 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [576])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [18872])
	*($1) = *($7)
	*($1 + [16]) = *(*($5 + [4]))
	$6 = *($5 + [8])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	*($1 + [8]) = *(*($5 + [12]))
	$2 = $2
	$5 = ($2 + [-48])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($2 + [-8])
	CALL $282(($3 + [8]), $1)
	$8 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-5920943410927747072, *(*($0 + [8])), $8, $5, [40])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = ($4 + [8])
	$8 = *($4)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [24]) = *(($1 + [16]))
	*($1 + [48]) = CALL db_idx64_store($8, (int_64)-5920943410927747072, $11, $12, ($3 + [24]))
	$8 = *($0)
	$11 = *($4)
	$12 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*(($1 + [52])) = CALL db_idx64_store($11, (int_64)-5920943410927747071, $8, $12, ($3 + [24]))
	$global$0 = ($3 + [32])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $358($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $172(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $362($2)
	
.LABEL $label$5
	*(($1 = (($3 + [32]) + [8]))) = *((($3 + [16]) + [8]))
	*($3 + [32]) = *($3 + [16])
	*((($3 + [48]) + [8])) = *($1)
	*($3 + [48]) = *($3 + [32])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$6 = *((($3 + [48]) + [8]))
	*((($3 + [64]) + [8])) = $6
	*(($3 + [8])) = $6
	$6 = *($3 + [48])
	*($3) = $6
	*($3 + [64]) = $6
	CALL void $1((int_32 $3), (int_32 $5))
	$global$0 = ($3 + [80])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [24]) = $1
	CALL require_auth($1)
	$5 = *($2 + [8])
	$6 = [0]
	$7 = *($2)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $10
	$6 = [1]
	$11 = $9
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$9 < (int_32)[6])
	$11 = ($9 + [1])
	$9 = $11
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$9 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [17798])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [17813])
	*($4 + [32]) = $1
	$11 = ($0 + [160])
	*($4 + [128]) = $11
	CALL $68(($4 + [16]), ($4 + [128]), ($4 + [32]))
	$9 = *($4 + [20])
	if ( ($9 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	if ( ((int_64)*($9 + [8]) != (int_64)*($4 + [32])) ){ goto $label$7 }
	if ( ((int_64)*(($9 + [24])) == (int_64)$5) ){ goto $label$6 }
	CALL $69(($4 + [16]))
	$9 = *($4 + [20])
	if ( $9 ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert([0], [17865])
	$9 = *($4 + [20])
	
.LABEL $label$6
	CALL eosio_assert(((int_64)*($9 + [16]) >= (int_64)*($2)), [17837])
	*($4 + [128]) = ($0 + [280])
	CALL $101(($4 + [32]), ($4 + [128]), ($4 + [24]))
	$9 = *($4 + [36])
	if ( ($9 == 0) ){ goto $label$9 }
	$6 = ($2 + [8])
	
.LOOP $label$10:
	if ( ((int_64)*($9 + [16]) != (int_64)*($4 + [24])) ){ goto $label$9 }
	CALL eosio_assert(((int_64)*(($9 + [40])) != (int_64)*($6)), [19788])
	CALL $102(($4 + [32]))
	$9 = *($4 + [36])
	if ( $9 ){ goto $label$10 }
	
.LABEL $label$9
	*($4 + [8]) = ($0 + [200])
	CALL $106($4, ($4 + [8]), ($4 + [24]))
	$9 = *($4 + [4])
	if ( ($9 == 0) ){ goto $label$13 }
	$6 = ($2 + [8])
	
.LOOP $label$14:
	if ( ((int_64)*($9 + [8]) != (int_64)*($4 + [24])) ){ goto $label$13 }
	if ( ((int_64)*($9 + [40]) != (int_64)$3) ){ goto $label$15 }
	$8 = *(($9 + [56]))
	if ( ((int_64)$8 == (int_64)*($6)) ){ goto $label$12 }
	
.LABEL $label$15
	CALL $107($4)
	$9 = *($4 + [4])
	if ( $9 ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert([0], [17960])
	goto $label$11 
	
.LABEL $label$12
	$10 = *($0)
	$9 = *($4 + [20])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [19026])
	CALL eosio_assert(((int_32)*($9 + [32]) == (int_32)$11), [19061])
	CALL eosio_assert(((int_64)*(($0 + [160])) == (int_64)CALL eosio_assert0()), [19107])
	$6 = ($9 + [8])
	*($4 + [152]) = *($6)
	$5 = *($9)
	$11 = ($9 + [24])
	CALL eosio_assert(((int_64)$8 == (int_64)*($11)), [19529])
	$8 = (int_64)
	*($9 + [16]) = $8(*($9 + [16]) - *($2)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [19577])
	CALL eosio_assert(((int_64)*($9 + [16]) < (int_64)4611686018427387904), [19599])
	CALL eosio_assert(((int_64)$5 == (int_64)*($9)), [19158])
	CALL eosio_assert([1], [18517])
	CALL memcpy(($4 + [32]), $9, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy((($4 + [32]) | [8]), $6, [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy((($4 + [32]) + [16]), ($9 + [16]), [8])
	CALL eosio_assert([1], [18517])
	CALL memcpy((($4 + [32]) + [24]), $11, [8])
	CALL db_update_i64(*($9 + [36]), $10, ($4 + [32]), [32])
	$11 = ($0 + [176])
	if ( (uint_64)($5 <= *($11)) ){ goto $label$16 }
	*($11) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$16
	*($4 + [128]) = *($6)
	if ( (CALL $354(($4 + [152]), ($4 + [128]), [8]) == 0) ){ goto $label$17 }
	$6 = ($9 + [40])
	$9 = *($6)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	$9 = CALL db_idx64_find_primary(*(($0 + [160])), *(($0 + [168])), (int_64)-3020379698556063232, ($4 + [112]), $5)
	*($6) = $9
	
.LABEL $label$18
	CALL db_idx64_update($9, $10, ($4 + [128]))
	
.LABEL $label$17
	$9 = *($4 + [4])
	if ( ((int_64)*($9 + [24]) == (int_64)0) ){ goto $label$19 }
	CALL $171($0, ($4 + [24]), $2, $3)
	$global$0 = ($4 + [160])
	return 
	
.LABEL $label$19
	$3 = *($0)
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [19026])
	$6 = *($4 + [8])
	CALL eosio_assert(((int_32)*($9 + [72]) == (int_32)$6), [19061])
	CALL eosio_assert(((int_64)*($6) == (int_64)CALL eosio_assert0()), [19107])
	$11 = ($9 + [40])
	*($4 + [128]) = *($11)
	*($4 + [136]) = *(($9 + [8]))
	$8 = *($9)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($9 + [56]))), [19449])
	$5 = ((int_64)*($9 + [48]) + (int_64)*($2))
	*($9 + [48]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [19492])
	CALL eosio_assert(((int_64)*($9 + [48]) < (int_64)4611686018427387904), [19511])
	CALL eosio_assert(((int_64)$8 == (int_64)*($9)), [19158])
	*($4 + [120]) = (($4 + [32]) + [72])
	*($4 + [116]) = ($4 + [32])
	*($4 + [112]) = ($4 + [32])
	CALL $110(($4 + [112]), $9)
	CALL db_update_i64(*($9 + [76]), $3, ($4 + [32]), [72])
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$20 }
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	$2 = (($4 + [128]) + [8])
	*($4 + [152]) = *($11)
	if ( (CALL $354(($4 + [128]), ($4 + [152]), [8]) == 0) ){ goto $label$21 }
	$0 = ($9 + [80])
	$11 = *($0)
	if ( ((int_32)$11 > (int_32)[-1]) ){ goto $label$22 }
	$11 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5371973418988895232, ($4 + [144]), $8)
	*($0) = $11
	
.LABEL $label$22
	CALL db_idx64_update($11, $3, ($4 + [152]))
	
.LABEL $label$21
	*($4 + [152]) = *(($9 + [8]))
	if ( (CALL $354($2, ($4 + [152]), [8]) == 0) ){ goto $label$11 }
	$11 = ($9 + [84])
	$9 = *($11)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$23 }
	$9 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5371973418988895233, ($4 + [144]), $8)
	*($11) = $9
	
.LABEL $label$23
	CALL db_idx64_update($9, $3, ($4 + [152]))
	$global$0 = ($4 + [160])
	return 
	
.LABEL $label$11
	$global$0 = ($4 + [160])
}

void .FUNC $281 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $340($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}