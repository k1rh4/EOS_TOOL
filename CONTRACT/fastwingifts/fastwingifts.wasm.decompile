(data (i32.const 4) "`h\00\00")
(data (i32.const 16) "fastwincpuem\00")
(data (i32.const 32) "active\00")
(data (i32.const 48) "fastwincpu11\00")
(data (i32.const 64) "zhaojingdong\00")
(data (i32.const 80) "fastwindice1\00")
(data (i32.const 96) "mediscui1234\00")
(data (i32.const 112) "wangkes12345\00")
(data (i32.const 128) "yuanbiao1234\00")
(data (i32.const 144) "puccahuan113\00")
(data (i32.const 160) "gnufoognufoo\00")
(data (i32.const 176) "4t5c5wyma12t\00")
(data (i32.const 192) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 256) "init\00")
(data (i32.const 272) "cannot create objects in table of another contract\00")
(data (i32.const 336) "Contract is not initialization\00")
(data (i32.const 368) "stop\00")
(data (i32.const 384) "cannot pass end iterator to modify\00")
(data (i32.const 432) "debug\00")
(data (i32.const 448) "start\00")
(data (i32.const 464) "Contract is not running\00")
(data (i32.const 496) "object passed to modify is not in multi_index\00")
(data (i32.const 544) "cannot modify objects in table of another contract\00")
(data (i32.const 608) "updater cannot change primary key when modifying an object\00")
(data (i32.const 672) "write\00")
(data (i32.const 688) "gifts\00")
(data (i32.const 704) "fastwin  gifts\00")
(data (i32.const 720) "error reading iterator\00")
(data (i32.const 752) "read\00")
(data (i32.const 768) "get\00")
(data (i32.const 784) "eosio.token\00")
(data (i32.const 800) "transfer\00")
(data (i32.const 816) "Must transfer EOS\00")
(data (i32.const 848) "assert\00")
(data (i32.const 864) "\10\'\00\00\00\00\00\00\a0\86\01\00\00\00\00\00@B\0f\00\00\00\00\00\80\96\98\00\00\00\00\00")
(data (i32.const 896) "Invalid amount\00")
(data (i32.const 912) "Invalid issue\00")
(data (i32.const 928) "cannot pass end iterator to erase\00")
(data (i32.const 976) "cannot increment end iterator\00")
(data (i32.const 1008) "Invalid room\00")
(data (i32.const 1024) "invalid symbol name\00")
(data (i32.const 1056) "fastwingfpot\00")
(data (i32.const 1072) "fastwin games gifts\00")
(data (i32.const 1104) "fastwinitems\00")
(data (i32.const 1120) "fastwin games gifts STAR\00")
(data (i32.const 1152) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1216) "object passed to erase is not in multi_index\00")
(data (i32.const 1264) "cannot erase objects in table of another contract\00")
(data (i32.const 1328) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1392) "fastwingifts\00")
(data (i32.const 1408) "fastwinadmin\00")
(data (i32.const 1424) "www.fastwin.io\00")
(data (i32.const 1440) "Invalid quantity\00")
(data (i32.const 1472) "Must bet greater than min\00")
(data (i32.const 1504) "Must bet greater than man\00")
(data (i32.const 9936) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 10032) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 10304) "\00\01\02\04\07\03\06\05\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$7 (param i32)))
(import "env" "db_store_i64" (func $fimport$8 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$9 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$10 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$11 (param i32)))
(import "env" "has_auth" (func $fimport$12 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "require_auth2" (func $fimport$18 (param i64 i64)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(import "env" "sha256" (func $fimport$20 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z15check_whitelisty" (func $5))
(export "_Z12safety_checkyyy" (func $6))
(export "apply" (func $17))
(export "malloc" (func $94))
(export "free" (func $97))
(export "strtoull" (func $109))
(export "__shlim" (func $110))
(export "__intscan" (func $111))
(export "__errno_location" (func $112))
(export "__shgetc" (func $113))
(export "__uflow" (func $114))
(export "__toread" (func $115))
(export "memchr" (func $116))
(export "memcmp" (func $117))
(export "strlen" (func $118))
(table $0 7 7 anyfunc)
(elem (i32.const 0) $119 $22 $19 $25 $23 $24 $21)



int_32 .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10028])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $99 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $95([1532], $0)
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $96($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9936])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $96 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10022]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10024])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10022]) = [1]
	$7 = ($7 << [16])
	*([0] + [10024]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10024])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10024]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10022]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10022]) = [1]
	$3 = ($3 << [16])
	*([0] + [10024]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10024])
	
.LABEL $label$8
	*([0] + [10024]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9916])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9724]
	$1 = (((int_32)$2 * (int_32)[12]) + [9724])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [272])
	*(($4 = CALL $98([40])) + [24]) = [0]
	*($4 + [16]) = [0]
	*($4 + [28]) = $1
	*($4 + [8]) = (int_64)1
	*($4 + [20]) = [0]
	*($4) = ((int_64)*(*($3) + [24]) + (int_64)1)
	*($7 + [56]) = (($7 + [16]) + [17])
	*($7 + [52]) = ($7 + [16])
	*($7 + [48]) = ($7 + [16])
	CALL $84(($7 + [48]), $4)
	*($4 + [32]) = CALL db_store_i64(*($1 + [8]), (int_64)7176370890153132032, $2, (int_64)1, ($7 + [16]), [17])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)2
	
.LABEL $label$1
	*($7 + [48]) = $4
	*($7 + [16]) = (int_64)1
	$5 = *($4 + [32])
	*($7 + [12]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)1
	*($3 + [16]) = $5
	*($7 + [48]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $87(($1 + [24]), ($7 + [48]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [48])
	*($7 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($4 + [20])) = $1
	CALL $99($1)
	
.LABEL $label$5
	CALL $99($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [272])
	*(($4 = CALL $98([40])) + [24]) = [0]
	*($4 + [16]) = [0]
	*($4 + [28]) = $1
	*($4 + [8]) = (int_64)2
	*($4 + [20]) = [0]
	*($4) = ((int_64)((int_64)*(*($3) + [24]) << (int_64)1) | (int_64)1)
	*($7 + [56]) = (($7 + [16]) + [17])
	*($7 + [52]) = ($7 + [16])
	*($7 + [48]) = ($7 + [16])
	CALL $80(($7 + [48]), $4)
	*($4 + [32]) = CALL db_store_i64(*($1 + [8]), (int_64)7176370890153656320, $2, (int_64)1, ($7 + [16]), [17])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)2
	
.LABEL $label$1
	*($7 + [48]) = $4
	*($7 + [16]) = (int_64)1
	$5 = *($4 + [32])
	*($7 + [12]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)1
	*($3 + [16]) = $5
	*($7 + [48]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $83(($1 + [24]), ($7 + [48]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [48])
	*($7 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($4 + [20])) = $1
	CALL $99($1)
	
.LABEL $label$5
	CALL $99($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [272])
	*(($4 = CALL $98([40])) + [24]) = [0]
	*($4 + [16]) = [0]
	*($4 + [28]) = $1
	*($4 + [8]) = (int_64)3
	*($4 + [20]) = [0]
	*($4) = ((int_64)((int_64)*(*($3) + [24]) * (int_64)3) + (int_64)1)
	*($7 + [56]) = (($7 + [16]) + [17])
	*($7 + [52]) = ($7 + [16])
	*($7 + [48]) = ($7 + [16])
	CALL $76(($7 + [48]), $4)
	*($4 + [32]) = CALL db_store_i64(*($1 + [8]), (int_64)7176370890154180608, $2, (int_64)1, ($7 + [16]), [17])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)2
	
.LABEL $label$1
	*($7 + [48]) = $4
	*($7 + [16]) = (int_64)1
	$5 = *($4 + [32])
	*($7 + [12]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)1
	*($3 + [16]) = $5
	*($7 + [48]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $79(($1 + [24]), ($7 + [48]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [48])
	*($7 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($4 + [20])) = $1
	CALL $99($1)
	
.LABEL $label$5
	CALL $99($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [272])
	*(($4 = CALL $98([40])) + [24]) = [0]
	*($4 + [16]) = [0]
	*($4 + [28]) = $1
	*($4 + [8]) = (int_64)4
	*($4 + [20]) = [0]
	*($4) = ((int_64)((int_64)*(*($3) + [24]) << (int_64)2) | (int_64)1)
	*($7 + [56]) = (($7 + [16]) + [17])
	*($7 + [52]) = ($7 + [16])
	*($7 + [48]) = ($7 + [16])
	CALL $69(($7 + [48]), $4)
	*($4 + [32]) = CALL db_store_i64(*($1 + [8]), (int_64)7176370890154704896, $2, (int_64)1, ($7 + [16]), [17])
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)1) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)2
	
.LABEL $label$1
	*($7 + [48]) = $4
	*($7 + [16]) = (int_64)1
	$5 = *($4 + [32])
	*($7 + [12]) = $5
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)1
	*($3 + [16]) = $5
	*($7 + [48]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $75(($1 + [24]), ($7 + [48]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($7 + [48])
	*($7 + [48]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($4 + [20])) = $1
	CALL $99($1)
	
.LABEL $label$5
	CALL $99($4)
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [64])
}

int_32 .FUNC __toread (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1216])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1264])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1328])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$7
	CALL $99($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $98(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$11
	CALL $99($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $99($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $98(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$11
	CALL $99($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $99($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [672])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [672])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [672])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [672])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [672])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $16($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [672])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [672])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $43(CALL $42($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $13($0, ($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [752])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [752])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [752])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [752])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [752])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $7) >> [6]) >= (uint_32)$1) ){ goto $label$6 }
	$2 = *($0)
	$3 = int_32(($7 - $2) >> [6])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[67108864]) ){ goto $label$4 }
	$7 = [67108863]
	$8 = ($8 - $2)
	if ( ((uint_32)int_32($8 >> [6]) > (uint_32)[33554430]) ){ goto $label$7 }
	$7 = int_32($8 >> [5])
	$7 = ( $4 ? $7 : ($7 <= $4) )
	if ( ($7 == 0) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[67108864]) ){ goto $label$3 }
	
.LABEL $label$7
	$8 = CALL $98(($7 << [6]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*(($7 = (($2 = CALL memset($7, [0], [64])) + [16]))) = (int_64)1398362884
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [1152])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$10:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	CALL eosio_assert($8, [1024])
	*($2 + [24]) = [0]
	$7 = (*($0) + [64])
	*($0) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $106($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($8 + ($7 << [6]))
	$3 = ($8 + ($3 << [6]))
	$7 = $3
	
.LOOP $label$13:
	*(($7 = (($2 = CALL memset($7, [0], [64])) + [16]))) = (int_64)1398362884
	*($2 + [8]) = (int_64)0
	CALL eosio_assert([1], [1152])
	$6 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$15:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	
.LOOP $label$17:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$17 }
	
.LABEL $label$16
	$8 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	CALL eosio_assert($8, [1024])
	*($2 + [24]) = [0]
	$7 = ($2 + [64])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$8 = *($0)
	$5 = ($0 + [4])
	$1 = (*($5) - $8)
	$2 = ($3 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($2, $8, $1)
	$8 = *($0)
	
.LABEL $label$18
	*($0) = $2
	*($5) = $7
	*(($0 + [8])) = $4
	if ( ($8 == 0) ){ goto $label$1 }
	CALL $99($8)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $98(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$11
	CALL $99($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $99($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [768])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $4) >> [6])
	$7 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$4 }
	CALL $46($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	$5 = ($4 + ($7 << [6]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $47($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	CALL $102($1, [688])
	$5 = ($1 + [12])
	CALL $102($5, [704])
	*($1 + [24]) = (int_64)0
	$7 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($3 + [8])
	$6 = (CASTING uint_64)(uint_32 $3)
	$3 = ($1 + [24])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	$4 = *(($1 + [12]))
	$4 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$7 = ($4 + $7)
	$6 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ($7 <= [513]) ){ goto $label$4 }
	$8 = CALL malloc($7)
	goto $label$3 
	
.LABEL $label$4
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$3
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	$5 = CALL $13(CALL $13($9, $1), $5)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($5 + [4]), $3, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)4983122594567055472, *(*($0 + [8])), (int_64)1, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)1) ){ goto $label$6 }
	*(($2 + [16])) = (int_64)2
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $98(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [12]) & [1]) == 0) ){ goto $label$11 }
	CALL $99(*(($1 + [20])))
	
.LABEL $label$11
	if ( ((*($1) & [1]) == 0) ){ goto $label$12 }
	CALL $99(*($1 + [8]))
	
.LABEL $label$12
	CALL $99($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $99($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC _Z12safety_checkyyy (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*(($11 + [48])) = [0]
	*($11 + [24]) = $0
	*($11 + [16]) = $0
	*($11 + [32]) = (int_64)-1
	$8 = (int_64)0
	*($11 + [40]) = (int_64)0
	$6 = CALL db_find_i64($0, $0, (int_64)4983122594567055472, (int_64)1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$4 = CALL $7(($11 + [16]), $6)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($11 + [16])), [192])
	$7 = (int_64)59
	$6 = [368]
	$9 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$8 > (uint_64)(int_64)3) ){ goto $label$17 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$3 = ($3 + [165])
	goto $label$15 
	
.LABEL $label$17
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$12 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$5 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [432]
	$9 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$23 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$3 = ($3 + [165])
	goto $label$21 
	
.LABEL $label$23
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$18 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$4 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [448]
	$9 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$29 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$3 = ($3 + [165])
	goto $label$27 
	
.LABEL $label$29
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$25
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$24 }
	if ( ((int_64)$9 == (int_64)$2) ){ goto $label$3 }
	$8 = *($4 + [24])
	if ( ((int_64)$8 == (int_64)1) ){ goto $label$30 }
	if ( ((int_64)$8 != (int_64)2) ){ goto $label$2 }
	CALL _Z15check_whitelisty($0)
	
.LABEL $label$30
	$4 = *($11 + [40])
	if ( ($4 == 0) ){ goto $label$8 }
	$5 = ($11 + [44])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$31:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$32 }
	if ( ((*($6 + [12]) & [1]) == 0) ){ goto $label$33 }
	CALL $99(*(($6 + [20])))
	
.LABEL $label$33
	if ( ((*($6) & [1]) == 0) ){ goto $label$34 }
	CALL $99(*($6 + [8]))
	
.LABEL $label$34
	CALL $99($6)
	
.LABEL $label$32
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$31 }
	$6 = *(($11 + [40]))
	goto $label$9 
	
.LABEL $label$11
	CALL _Z15check_whitelisty($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [256]
	$9 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$8 > (uint_64)(int_64)3) ){ goto $label$40 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$36
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$41 }
	*($11 + [88]) = $0
	CALL eosio_assert(((int_64)*($11 + [16]) == (int_64)CALL $fimport$2()), [272])
	*($11 + [68]) = ($11 + [8])
	*($11 + [64]) = ($11 + [16])
	*($11 + [72]) = ($11 + [88])
	*(($6 = CALL $98([48]))) = (int_64)0
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [32]) = ($11 + [16])
	CALL $8(($11 + [64]), $6)
	*($11 + [80]) = $6
	*($11 + [64]) = (int_64)1
	$4 = *($6 + [36])
	*($11 + [60]) = $4
	$5 = ($11 + [44])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($11 + [48]))) ){ goto $label$7 }
	*($3 + [8]) = (int_64)1
	*($3 + [16]) = $4
	*($11 + [80]) = [0]
	*($3) = $6
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$41
	CALL eosio_assert([0], [336])
	goto $label$1 
	
.LABEL $label$10
	$6 = $4
	
.LABEL $label$9
	*($5) = $4
	CALL $99($6)
	
.LABEL $label$8
	*([0] + [4]) = ($11 + [96])
	return (unreachable)
	
.LABEL $label$7
	CALL $9(($11 + [40]), ($11 + [80]), ($11 + [64]), ($11 + [60]))
	
.LABEL $label$6
	$6 = *($11 + [80])
	*($11 + [80]) = [0]
	if ( ($6 == 0) ){ goto $label$42 }
	if ( ((*($6 + [12]) & [1]) == 0) ){ goto $label$43 }
	CALL $99(*(($6 + [20])))
	
.LABEL $label$43
	if ( ((*($6) & [1]) == 0) ){ goto $label$44 }
	CALL $99(*($6 + [8]))
	
.LABEL $label$44
	CALL $99($6)
	
.LABEL $label$42
	CALL eosio_exit([0])
	
.LABEL $label$5
	CALL _Z15check_whitelisty($0)
	CALL eosio_assert([1], [384])
	CALL $10(($11 + [16]), $4, $0)
	CALL eosio_exit([0])
	
.LABEL $label$4
	CALL _Z15check_whitelisty($0)
	CALL eosio_assert([1], [384])
	CALL $11(($11 + [16]), $4, $0)
	CALL eosio_exit([0])
	
.LABEL $label$3
	CALL _Z15check_whitelisty($0)
	CALL eosio_assert([1], [384])
	CALL $12(($11 + [16]), $4, $0)
	CALL eosio_exit([0])
	
.LABEL $label$2
	CALL eosio_assert([0], [464])
	
.LABEL $label$1
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [720])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	*($7 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $98([48]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [32]) = $0
	$4 = CALL $14(CALL $14(($7 + [32]), $5), ($5 + [12]))
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [752])
	CALL memcpy(($5 + [24]), *($4 + [4]), [8])
	*($5 + [36]) = $1
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)1
	$6 = *($5 + [36])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)1
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $9(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [12]) & [1]) == 0) ){ goto $label$10 }
	CALL $99(*(($4 + [20])))
	
.LABEL $label$10
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL $99(*($4 + [8]))
	
.LABEL $label$11
	CALL $99($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z15check_whitelisty (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [16]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$1 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$5 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [16]
	$5 = (int_64)0
	
.LOOP $label$6:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$7 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$1 = ($1 + [165])
	goto $label$8 
	
.LABEL $label$9
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$7
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$6 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$15 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$1 = ($1 + [165])
	goto $label$13 
	
.LABEL $label$15
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$11
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$10 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$5
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [48]
	$5 = (int_64)0
	
.LOOP $label$16:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$17 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$1 = ($1 + [165])
	goto $label$18 
	
.LABEL $label$19
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$17
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$16 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$20 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [48]
	$5 = (int_64)0
	
.LOOP $label$21:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$22 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$1 = ($1 + [165])
	goto $label$23 
	
.LABEL $label$24
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$22
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$21 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$30 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$1 = ($1 + [165])
	goto $label$28 
	
.LABEL $label$30
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$26
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$25 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$20
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [64]
	$5 = (int_64)0
	
.LOOP $label$31:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$32 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$1 = ($1 + [165])
	goto $label$33 
	
.LABEL $label$34
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$32
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$31 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$35 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [64]
	$5 = (int_64)0
	
.LOOP $label$36:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$37 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$1 = ($1 + [165])
	goto $label$38 
	
.LABEL $label$39
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$37
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$36 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$40:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$45 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$44 }
	$1 = ($1 + [165])
	goto $label$43 
	
.LABEL $label$45
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$44
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$43
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$42
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$41
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$40 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$35
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [80]
	$5 = (int_64)0
	
.LOOP $label$46:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$47 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$1 = ($1 + [165])
	goto $label$48 
	
.LABEL $label$49
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$47
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$46 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$50 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [80]
	$5 = (int_64)0
	
.LOOP $label$51:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$52 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$1 = ($1 + [165])
	goto $label$53 
	
.LABEL $label$54
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$52
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$51 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$60 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$1 = ($1 + [165])
	goto $label$58 
	
.LABEL $label$60
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$56
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$55 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$50
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [96]
	$5 = (int_64)0
	
.LOOP $label$61:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$62 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$1 = ($1 + [165])
	goto $label$63 
	
.LABEL $label$64
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$62
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$61 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$65 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [96]
	$5 = (int_64)0
	
.LOOP $label$66:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$67 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$69 }
	$1 = ($1 + [165])
	goto $label$68 
	
.LABEL $label$69
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$68
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$67
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$66 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$70:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$75 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$74 }
	$1 = ($1 + [165])
	goto $label$73 
	
.LABEL $label$75
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$74
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$73
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$72
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$71
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$70 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$65
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [112]
	$5 = (int_64)0
	
.LOOP $label$76:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$77 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$1 = ($1 + [165])
	goto $label$78 
	
.LABEL $label$79
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$77
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$76 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$80 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [112]
	$5 = (int_64)0
	
.LOOP $label$81:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$82 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$1 = ($1 + [165])
	goto $label$83 
	
.LABEL $label$84
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$82
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$81 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$85:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$90 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$1 = ($1 + [165])
	goto $label$88 
	
.LABEL $label$90
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$89
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$87
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$86
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$85 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$80
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [128]
	$5 = (int_64)0
	
.LOOP $label$91:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$92 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$1 = ($1 + [165])
	goto $label$93 
	
.LABEL $label$94
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$92
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$91 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$95 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [128]
	$5 = (int_64)0
	
.LOOP $label$96:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$97 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$99 }
	$1 = ($1 + [165])
	goto $label$98 
	
.LABEL $label$99
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$98
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$97
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$96 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$100:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$105 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$104 }
	$1 = ($1 + [165])
	goto $label$103 
	
.LABEL $label$105
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$104
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$103
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$102
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$101
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$100 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$95
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [144]
	$5 = (int_64)0
	
.LOOP $label$106:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$107 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$109 }
	$1 = ($1 + [165])
	goto $label$108 
	
.LABEL $label$109
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$108
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$107
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$106 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$110 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [144]
	$5 = (int_64)0
	
.LOOP $label$111:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$112 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$114 }
	$1 = ($1 + [165])
	goto $label$113 
	
.LABEL $label$114
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$113
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$112
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$111 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$115:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$120 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$119 }
	$1 = ($1 + [165])
	goto $label$118 
	
.LABEL $label$120
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$119
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$118
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$117
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$116
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$115 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$110
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [160]
	$5 = (int_64)0
	
.LOOP $label$121:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$122 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$124 }
	$1 = ($1 + [165])
	goto $label$123 
	
.LABEL $label$124
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$123
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$122
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$121 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$125 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [160]
	$5 = (int_64)0
	
.LOOP $label$126:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$127 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$129 }
	$1 = ($1 + [165])
	goto $label$128 
	
.LABEL $label$129
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$128
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$127
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$126 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$130:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$135 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$134 }
	$1 = ($1 + [165])
	goto $label$133 
	
.LABEL $label$135
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$134
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$133
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$132
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$131
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$130 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$125
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [16]
	$5 = (int_64)0
	
.LOOP $label$136:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$137 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$139 }
	$1 = ($1 + [165])
	goto $label$138 
	
.LABEL $label$139
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$138
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$137
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$136 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$140 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [16]
	$5 = (int_64)0
	
.LOOP $label$141:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$142 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$144 }
	$1 = ($1 + [165])
	goto $label$143 
	
.LABEL $label$144
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$143
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$142
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$141 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$145:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$150 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$149 }
	$1 = ($1 + [165])
	goto $label$148 
	
.LABEL $label$150
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$147 }
	goto $label$146 
	
.LABEL $label$149
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$148
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$147
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$146
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$145 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$140
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [176]
	$5 = (int_64)0
	
.LOOP $label$151:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$152 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$154 }
	$1 = ($1 + [165])
	goto $label$153 
	
.LABEL $label$154
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$153
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$152
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$151 }
	if ( (CALL has_auth($5) == 0) ){ goto $label$155 }
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [176]
	$5 = (int_64)0
	
.LOOP $label$156:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$157 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$159 }
	$1 = ($1 + [165])
	goto $label$158 
	
.LABEL $label$159
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$158
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$157
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$156 }
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$0 = (int_64)0
	
.LOOP $label$160:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$165 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$164 }
	$1 = ($1 + [165])
	goto $label$163 
	
.LABEL $label$165
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$162 }
	goto $label$161 
	
.LABEL $label$164
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$163
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$162
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$161
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$0 = ((int_64)$3 | (int_64)$0)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$160 }
	CALL require_auth2($5, $0)
	return 
	
.LABEL $label$155
	$4 = (int_64)0
	$6 = (int_64)59
	$2 = [32]
	$5 = (int_64)0
	
.LOOP $label$166:
	if ( ((uint_64)$4 > (uint_64)(int_64)5) ){ goto $label$171 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$170 }
	$1 = ($1 + [165])
	goto $label$169 
	
.LABEL $label$171
	$3 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$168 }
	goto $label$167 
	
.LABEL $label$170
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$169
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$168
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$167
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$3 | (int_64)$5)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$166 }
	CALL require_auth2($0, $5)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $15($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $101($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $98($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $101($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $99($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $100($7)
	return (unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [768])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $16($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [752])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $98($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $99($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [512])
	*([0] + [4]) = $9
	CALL _Z12safety_checkyyy($0, _Z12safety_checkyyy, $2)
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$2 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [784]
	$7 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$8 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$3 = ($3 + [165])
	goto $label$6 
	
.LABEL $label$8
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$4
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$3 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [800]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [784]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$16 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [816])
	
.LABEL $label$15
	$4 = CALL $18(($9 + [104]), $0)
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-4994130327835885568) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)-4157529991795441664) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)-4149697620714979328) ){ goto $label$22 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [1]
	*($9 + [24 align=4]) = *($9 + [80])
	CALL $20($4, ($9 + [24]))
	goto $label$22 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$24 }
	if ( ((int_64)$2 == (int_64)5372695399406501888) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$22 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [2]
	*($9 + [8 align=4]) = *($9 + [96])
	CALL $20($4, ($9 + [8]))
	goto $label$22 
	
.LABEL $label$26
	*($9 + [60]) = [0]
	*($9 + [56]) = [3]
	*($9 + [48 align=4]) = *($9 + [56])
	CALL $26($4, ($9 + [48]))
	goto $label$22 
	
.LABEL $label$25
	*($9 + [76]) = [0]
	*($9 + [72]) = [4]
	*($9 + [32 align=4]) = *($9 + [72])
	CALL $20($4, ($9 + [32]))
	goto $label$22 
	
.LABEL $label$24
	*($9 + [68]) = [0]
	*($9 + [64]) = [5]
	*($9 + [40 align=4]) = *($9 + [64])
	CALL $20($4, ($9 + [40]))
	goto $label$22 
	
.LABEL $label$23
	*($9 + [92]) = [0]
	*($9 + [88]) = [6]
	*($9 + [16 align=4]) = *($9 + [88])
	CALL $20($4, ($9 + [16]))
	
.LABEL $label$22
	CALL $27($4)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [512])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [608])
	$6 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($4 + [8])
	$5 = (CASTING uint_64)(uint_32 $4)
	$3 = ($1 + [24])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [12])
	$4 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$6 = ($4 + $6)
	$5 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [12])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	if ( ($6 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $6)
	$4 = CALL $13(CALL $13($8, $1), $4)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL db_update_i64(*(($1 + [36])), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$6 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	*($1 + [24]) = (int_64)2
	CALL eosio_assert([1], [608])
	$6 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($4 + [8])
	$5 = (CASTING uint_64)(uint_32 $4)
	$3 = ($1 + [24])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [12])
	$4 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$6 = ($4 + $6)
	$5 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [12])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	if ( ($6 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $6)
	$4 = CALL $13(CALL $13($8, $1), $4)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL db_update_i64(*(($1 + [36])), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$6 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	*($1 + [24]) = (int_64)1
	CALL eosio_assert([1], [608])
	$6 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($4 + [8])
	$5 = (CASTING uint_64)(uint_32 $4)
	$3 = ($1 + [24])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [12])
	$4 = ( *(($1 + [16])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$6 = ($4 + $6)
	$5 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [12])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	if ( ($6 <= [513]) ){ goto $label$4 }
	$7 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$3
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $6)
	$4 = CALL $13(CALL $13($8, $1), $4)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL db_update_i64(*(($1 + [36])), $2, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($7)
	
.LABEL $label$5
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$6 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [672])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [672])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $98(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$11
	CALL $99($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $99($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	*($0 + [8]) = (int_64)10000
	*($0) = $1
	*($0 + [16]) = (int_64)10000000
	*($0 + [24]) = (int_64)10000000000
	*($0 + [32]) = (int_64)200
	*($0 + [40]) = (int_64)150
	*($0 + [48]) = (int_64)50
	*($0 + [56]) = (int_64)1
	*($0 + [64]) = (int_64)2
	*($0 + [72]) = (int_64)3
	*($0 + [80]) = (int_64)4
	*($0 + [88]) = $1
	*(($0 + [96])) = $1
	*(($0 + [104])) = (int_64)-1
	*(($0 + [112])) = [0]
	*(($0 + [116])) = [0]
	*(($0 + [120])) = [0]
	*($0 + [128]) = $1
	*(($0 + [136])) = $1
	*(($0 + [144])) = (int_64)-1
	*(($0 + [152])) = [0]
	*(($0 + [156])) = [0]
	*(($0 + [160])) = [0]
	*($0 + [168]) = $1
	*(($0 + [176])) = $1
	*(($0 + [184])) = (int_64)-1
	*(($0 + [192])) = [0]
	*(($0 + [196])) = [0]
	*(($0 + [200])) = [0]
	*($0 + [208]) = $1
	*(($0 + [216])) = $1
	*(($0 + [224])) = (int_64)-1
	*(($0 + [232])) = [0]
	*(($0 + [236])) = [0]
	*(($0 + [240])) = [0]
	*($0 + [248]) = $1
	*(($0 + [256])) = $1
	*(($0 + [264])) = (int_64)-1
	*(($0 + [272])) = [0]
	*(($0 + [276])) = [0]
	*(($0 + [280])) = [0]
	*($0 + [288]) = $1
	*(($0 + [296])) = $1
	*(($0 + [304])) = (int_64)-1
	*(($0 + [312])) = [0]
	*(($0 + [316])) = [0]
	*(($0 + [320])) = [0]
	*($0 + [328]) = $1
	*(($0 + [336])) = $1
	*(($0 + [344])) = (int_64)-1
	*(($0 + [352])) = [0]
	*(($0 + [356])) = [0]
	*(($0 + [360])) = [0]
	$4 = *($0)
	*($0 + [368]) = $4
	*(($0 + [376])) = $4
	*(($0 + [384])) = (int_64)-1
	*(($0 + [392])) = [0]
	*(($0 + [396])) = [0]
	*(($0 + [400])) = [0]
	$2 = ($0 + [248])
	$3 = CALL db_find_i64($1, $1, (int_64)7176370890153132032, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $53($2, $3) + [28]) == (int_32)$2), [192])
	goto $label$1 
	
.LABEL $label$2
	*($5 + [8]) = $0
	CALL $90($5, $2, $1, ($5 + [8]))
	
.LABEL $label$1
	$2 = ($0 + [288])
	$3 = *(($0 + [316]))
	if ( ((int_32)$3 == (int_32)*(($0 + [312]))) ){ goto $label$5 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$2), [192])
	if ( $3 ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL db_find_i64(*(($0 + [288])), *(($0 + [296])), (int_64)7176370890153656320, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $57($2, $3) + [28]) == (int_32)$2), [192])
	goto $label$3 
	
.LABEL $label$4
	*($5 + [8]) = $0
	CALL $91($5, $2, $1, ($5 + [8]))
	
.LABEL $label$3
	$2 = ($0 + [328])
	$3 = *(($0 + [356]))
	if ( ((int_32)$3 == (int_32)*(($0 + [352]))) ){ goto $label$8 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$2), [192])
	if ( $3 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$3 = CALL db_find_i64(*(($0 + [328])), *(($0 + [336])), (int_64)7176370890154180608, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $61($2, $3) + [28]) == (int_32)$2), [192])
	goto $label$6 
	
.LABEL $label$7
	*($5 + [8]) = $0
	CALL $92($5, $2, $1, ($5 + [8]))
	
.LABEL $label$6
	$2 = ($0 + [368])
	$3 = *(($0 + [396]))
	if ( ((int_32)$3 == (int_32)*(($0 + [392]))) ){ goto $label$11 }
	$3 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$2), [192])
	if ( $3 ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	$3 = CALL db_find_i64(*(($0 + [368])), *(($0 + [376])), (int_64)7176370890154704896, (int_64)1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*(CALL $65($2, $3) + [28]) == (int_32)$2), [192])
	goto $label$9 
	
.LABEL $label$10
	*($5 + [8]) = $0
	CALL $93($5, $2, $1, ($5 + [8]))
	
.LABEL $label$9
	*([0] + [4]) = ($5 + [16])
	return $0
}

void .FUNC $19 (int_32 $0)
{
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	$4 = *($3 + [4])
	$3 = *(*($3) + [4])
	$5 = ($3 + [20])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [24]))) ){ goto $label$2 }
	CALL memcpy($6, $4, [64])
	*($5) = (*($5) + [64])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($3 + [16]), $4)
	
.LABEL $label$1
	CALL eosio_assert([1], [608])
	$5 = *($1 + [16])
	$4 = *(($1 + [20]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [6]))
	$3 = [76]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	$3 = (((int_32)uint_32(($6 + [-64]) >> [6]) * (int_32)[60]) + $3)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 + [-60])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($3)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $3)
	CALL $80($9, $1)
	CALL db_update_i64(*($1 + [32]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$9 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [272])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $98([40])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $81(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $49(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [20])) = $1
	CALL $99($1)
	
.LABEL $label$4
	CALL $99($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $98(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$11
	CALL $99($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $99($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $98(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $99(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $99($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $88($0, $2, $1)
	if ( ($1 <= [513]) ){ goto $label$3 }
	CALL free($2)
	
.LABEL $label$3
	*([0] + [4]) = $3
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [720])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	$6 = ($4 + $5)
	*($7 + [40]) = $6
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$6 = *(($7 + [40]))
	$4 = *($7 + [36])
	
.LABEL $label$7
	*(($5 = CALL $98([40])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [28]) = $0
	CALL eosio_assert(((uint_32)($6 - $4) > (uint_32)[7]), [752])
	CALL memcpy($5, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($6 - $3) > (uint_32)[7]), [752])
	CALL memcpy(($5 + [8]), $3, [8])
	*($7 + [36]) = ($4 + [16])
	CALL $44(($7 + [32]), ($5 + [16]))
	*($5 + [32]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)1
	$6 = *($5 + [32])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)1
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $87(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	$4 = *($3 + [4])
	$3 = *(*($3) + [4])
	$5 = ($3 + [20])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [24]))) ){ goto $label$2 }
	CALL memcpy($6, $4, [64])
	*($5) = (*($5) + [64])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($3 + [16]), $4)
	
.LABEL $label$1
	CALL eosio_assert([1], [608])
	$5 = *($1 + [16])
	$4 = *(($1 + [20]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [6]))
	$3 = [76]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	$3 = (((int_32)uint_32(($6 + [-64]) >> [6]) * (int_32)[60]) + $3)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 + [-60])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($3)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $3)
	CALL $84($9, $1)
	CALL db_update_i64(*($1 + [32]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$9 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1216])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1264])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1328])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$7
	CALL $99($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	*(($7 = ($1 + [20]))) = *($1 + [16])
	*($1) = ((int_64)*($1) + (int_64)1)
	CALL eosio_assert([1], [608])
	$5 = *($1 + [16])
	$4 = *($7)
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [6]))
	$7 = [76]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($6 + [-64]) >> [6]) * (int_32)[60]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-60])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL $84($10, $1)
	CALL db_update_i64(*($1 + [32]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$7 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [720])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	$6 = ($4 + $5)
	*($7 + [40]) = $6
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$6 = *(($7 + [40]))
	$4 = *($7 + [36])
	
.LABEL $label$7
	*(($5 = CALL $98([40])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [28]) = $0
	CALL eosio_assert(((uint_32)($6 - $4) > (uint_32)[7]), [752])
	CALL memcpy($5, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($6 - $3) > (uint_32)[7]), [752])
	CALL memcpy(($5 + [8]), $3, [8])
	*($7 + [36]) = ($4 + [16])
	CALL $44(($7 + [32]), ($5 + [16]))
	*($5 + [32]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)1
	$6 = *($5 + [32])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)1
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $83(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC __uflow (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = [-1]
	if ( CALL __toread($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($2 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$1 = *($2 + [15])
	
.LABEL $label$1
	*([0] + [4]) = ($2 + [16])
	return $1
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [720])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $98([40])) + [24]) = [0]
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [28]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [752])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[7]), [752])
	CALL memcpy(($6 + [8]), $3, [8])
	*($8 + [36]) = ($4 + [16])
	CALL $44(($8 + [32]), ($6 + [16]))
	*($6 + [32]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [32])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $48(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $7
	CALL $99($7)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC __errno_location ()
{
	return [10316]
}

int_32 .FUNC __shgetc (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$7 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL __uflow($0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$5 }
	$1 = (int_64)
	$2 = *($0 + [4])
	$3 = *(($0 + [8]))
	if ( ((int_64)(CASTING int_64)(int_32 ($3 - $2)) < (int_64)$1($1 - *($0 + [120])))) ){ goto $label$4 }
	*($0 + [104]) = ($2 + (CASTING uint_32)(uint_64 ((int_64)$1 + (int_64)4294967295)))
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$5
	$3 = *(($0 + [8]))
	
.LABEL $label$4
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)) + (int_64)*($0 + [120]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)*($0) == (int_32)$4) ){ goto $label$8 }
	*($0) = $4
	
.LABEL $label$8
	return $4
}

void .FUNC __shlim (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$2 = *($0 + [4])
	$3 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($3 - $2))
	*($0 + [120]) = $4
	*($0 + [104]) = ( ( ($2 + (CASTING uint_32)(uint_64 $1)) ? $3 : ((int_64)$4 > (int_64)$1) ) ? $3 : ((int_64)$1 != (int_64)0) )
}

int_64 .FUNC __intscan (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_64 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$4 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$4 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$5:
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$7 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$6 
	
.LABEL $label$7
	$13 = CALL __shgetc($0)
	
.LABEL $label$6
	$10 = ($13 + [-9])
	if ( ((uint_32)$10 > (uint_32)[36]) ){ goto $label$3 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( [-1] ? [0] : ((int_32)$13 == (int_32)[45]) )
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$2 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$1 
	
.LABEL $label$4
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$3
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	$13 = CALL __shgetc($0)
	
.LABEL $label$1
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$20 }
	if ( ((int_32)$13 != (int_32)[48]) ){ goto $label$20 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$19 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$18 
	
.LABEL $label$20
	$1 = ( $1 ? [10] : $1 )
	if ( (*(($13 + [10033])) <= $1) ){ goto $label$17 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$21 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$21
	CALL __shlim($0, (int_64)0)
	*(CALL __errno_location()) = [22]
	return (int_64)0
	
.LABEL $label$19
	$13 = CALL __shgetc($0)
	
.LABEL $label$18
	if ( ((int_32)($13 | [32]) != (int_32)[120]) ){ goto $label$22 }
	$10 = ($0 + [4])
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [104]))) ){ goto $label$16 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$15 
	
.LABEL $label$22
	if ( ($1 == 0) ){ goto $label$14 }
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$13 }
	$14 = (int_64)0
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$23 }
	$10 = [0]
	$8 = ($0 + [104])
	$1 = ($0 + [4])
	
.LOOP $label$24:
	$10 = ((int_32)$10 * (int_32)[10])
	$13 = *($1)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$26 }
	*($1) = ($13 + [1])
	$13 = *($13)
	goto $label$25 
	
.LABEL $label$26
	$13 = CALL __shgetc($0)
	
.LABEL $label$25
	$10 = ($10 + $9)
	$9 = ($13 + [-48])
	if ( ((uint_32)$9 > (uint_32)[9]) ){ goto $label$27 }
	if ( ($10 <= [429496729]) ){ goto $label$24 }
	
.LABEL $label$27
	$14 = (CASTING uint_64)(uint_32 $10)
	
.LABEL $label$23
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$11 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$28:
	$1 = [10]
	$5 = (CASTING int_64)(int_32 $10)
	$12 = ((int_64)$14 * (int_64)10)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$30 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$29 
	
.LABEL $label$30
	$13 = CALL __shgetc($0)
	
.LABEL $label$29
	$14 = ((int_64)$12 + (int_64)$5)
	$10 = ($13 + [-48])
	if ( ((uint_32)$10 > (uint_32)[9]) ){ goto $label$31 }
	if ( (uint_64)($14 <= (int_64)1844674407370955162) ){ goto $label$28 }
	
.LABEL $label$31
	if ( ((uint_32)$10 <= (uint_32)[9]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$16
	$13 = CALL __shgetc($0)
	
.LABEL $label$15
	$1 = [16]
	if ( (*(($13 + [10033])) <= [16]) ){ goto $label$13 }
	$13 = *(($0 + [104]))
	if ( ($13 == 0) ){ goto $label$32 }
	*(($10 = ($0 + [4]))) = (*($10) + [-1])
	
.LABEL $label$32
	if ( ($2 == 0) ){ goto $label$9 }
	$14 = (int_64)0
	if ( ($13 == 0) ){ goto $label$10 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	return (int_64)0
	
.LABEL $label$14
	$1 = [8]
	
.LABEL $label$13
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$37 }
	$10 = *(($13 + [10033]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$36 }
	$9 = [0]
	$2 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$38:
	$9 = ($10 + ((int_32)$9 * (int_32)$1))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($2)) ){ goto $label$40 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$39 
	
.LABEL $label$40
	$13 = CALL __shgetc($0)
	
.LABEL $label$39
	$10 = *(($13 + [10033]))
	if ( ((uint_32)$9 > (uint_32)[119304646]) ){ goto $label$41 }
	if ( ($10 <= $1) ){ goto $label$38 }
	
.LABEL $label$41
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$35 }
	goto $label$12 
	
.LABEL $label$37
	$2 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [10304]))
	$10 = *(($13 + [10033]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$34 }
	$9 = [0]
	$11 = ($0 + [104])
	$8 = ($0 + [4])
	
.LOOP $label$42:
	$9 = ($10 | ($9 << $2))
	$13 = *($8)
	if ( ((uint_32)$13 >= (uint_32)*($11)) ){ goto $label$44 }
	*($8) = ($13 + [1])
	$13 = *($13)
	goto $label$43 
	
.LABEL $label$44
	$13 = CALL __shgetc($0)
	
.LABEL $label$43
	$10 = *(($13 + [10033]))
	if ( ((uint_32)$9 > (uint_32)[134217727]) ){ goto $label$45 }
	if ( ($10 <= $1) ){ goto $label$42 }
	
.LABEL $label$45
	$14 = (CASTING uint_64)(uint_32 $9)
	if ( ($10 <= $1) ){ goto $label$33 }
	goto $label$12 
	
.LABEL $label$36
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$35
	$7 = (CASTING uint_64)(uint_32 $1)
	$6 = ((uint_64)(int_64)-1 / (uint_64)$7)
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$46:
	if ( ((uint_64)$14 > (uint_64)$6) ){ goto $label$12 }
	$5 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$12 = ((int_64)$14 * (int_64)$7)
	if ( ((uint_64)$12 > (uint_64)((int_64)$5 ^ (int_64)-1)) ){ goto $label$12 }
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$48 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$47 
	
.LABEL $label$48
	$13 = CALL __shgetc($0)
	
.LABEL $label$47
	$14 = ((int_64)$5 + (int_64)$12)
	$10 = *(($13 + [10033]))
	if ( ($10 <= $1) ){ goto $label$46 }
	goto $label$12 
	
.LABEL $label$34
	$14 = (int_64)0
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	
.LABEL $label$33
	$5 = (CASTING uint_64)(uint_32 $2)
	$6 = (uint_64)(int_64)-1 >> (uint_64)$5
	if ( ((uint_64)$14 > (uint_64)$6)) ){ goto $label$12 }
	$8 = ($0 + [104])
	$9 = ($0 + [4])
	
.LOOP $label$49:
	$14 = ((int_64)$14 << (int_64)$5)
	$12 = (CASTING uint_64)(uint_32 ($10 & [255]))
	$13 = *($9)
	if ( ((uint_32)$13 >= (uint_32)*($8)) ){ goto $label$51 }
	*($9) = ($13 + [1])
	$13 = *($13)
	goto $label$50 
	
.LABEL $label$51
	$13 = CALL __shgetc($0)
	
.LABEL $label$50
	$14 = ((int_64)$12 | (int_64)$14)
	$10 = *(($13 + [10033]))
	if ( ((uint_32)$10 >= (uint_32)$1) ){ goto $label$12 }
	if ( ((uint_64)$14 <= (uint_64)$6) ){ goto $label$49 }
	
.LABEL $label$12
	if ( ((uint_32)*(($13 + [10033])) >= (uint_32)$1) ){ goto $label$11 }
	$9 = ($0 + [104])
	$10 = ($0 + [4])
	
.LOOP $label$52:
	$13 = *($10)
	if ( ((uint_32)$13 >= (uint_32)*($9)) ){ goto $label$54 }
	*($10) = ($13 + [1])
	$13 = *($13)
	goto $label$53 
	
.LABEL $label$54
	$13 = CALL __shgetc($0)
	
.LABEL $label$53
	if ( (*(($13 + [10033])) <= $1) ){ goto $label$52 }
	*(CALL __errno_location()) = [34]
	$4 = ( $4 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$14 = $3
	
.LABEL $label$11
	if ( (*(($0 + [104])) == 0) ){ goto $label$55 }
	*(($13 = ($0 + [4]))) = (*($13) + [-1])
	
.LABEL $label$55
	if ( (uint_64)($14 <= $3) ){ goto $label$56 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$57 }
	if ( $4 ){ goto $label$57 }
	*(CALL __errno_location()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$57
	if ( ((uint_64)$14 <= (uint_64)$3) ){ goto $label$56 }
	*(CALL __errno_location()) = [34]
	return $3
	
.LABEL $label$56
	$12 = (CASTING int_64)(int_32 $4)
	$14 = (int_64))(((int_64)$14 ^ (int_64)$12) - $12)
	
.LABEL $label$10
	return $14
	
.LABEL $label$9
	CALL __shlim($0, (int_64)0)
	$10
	return (int_64)0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $119 ()
{
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$6 = CALL $104($2, $3, [0])
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$2 }
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$7 = [0]
	
.LOOP $label$3:
	CALL $108($8, $2, $7, ($6 - $7), $2)
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*($4)) ){ goto $label$5 }
	*($7) = *($8)
	$7 = ($8 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($8) = [0]
	*($8 + [4]) = [0]
	*($5) = (*($5) + [12])
	goto $label$4 
	
.LABEL $label$5
	CALL $51($0, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$4 }
	CALL $99(*(($8 + [8])))
	
.LABEL $label$4
	$7 = ($6 + [1])
	$6 = CALL $104($2, $3, $7)
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL $108($8, $2, $7, [-1], $2)
	$2 = ($0 + [4])
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($7) = *($8)
	$7 = ($8 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($8) = [0]
	*($8 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $51($0, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$6 }
	CALL $99(*($8 + [8]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $107($5, ($1 + [16]))
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $107(($5 + [16]), $5)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($5 + [16])), (int_32 $1))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $99(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $99(*($5 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [272])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $98([40])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $85(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $50(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [20])) = $1
	CALL $99($1)
	
.LABEL $label$4
	CALL $99($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $98($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $106 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $21 (int_32 $0)
{
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $23 (int_32 $0)
{
}

void .FUNC $22 (int_32 $0)
{
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	$23 = (*([0] + [4]) - [288])
	*([0] + [4]) = $23
	CALL _Z15check_whitelisty(*($0))
	*($23 + [280]) = [0]
	$4 = (int_64)0
	*($23 + [272]) = (int_64)0
	CALL $107(($23 + [240]), $3)
	CALL $29(($23 + [256]), $0, ($23 + [240]), [44])
	if ( ((*($23 + [240]) & [1]) == 0) ){ goto $label$1 }
	CALL $99(*($23 + [248]))
	
.LABEL $label$1
	CALL eosio_assert(((int_32)(*($23 + [260]) - *($23 + [256])) == (int_32)[120]), [848])
	$19 = ((int_64)$1 + (int_64)-1)
	if ( ((uint_64)$19 > (uint_64)(int_64)3) ){ goto $label$2 }
	$4 = *((((CASTING uint_32)(uint_64 $19) << [3]) + [864]))
	
.LABEL $label$2
	$8 = (int_64)0
	$17 = [0]
	$9 = (int_64)0
	
.LOOP $label$3:
	CALL $107(($23 + [208]), (*($23 + [256]) + ((int_32)$17 * (int_32)[12])))
	CALL $29(($23 + [224]), $0, ($23 + [208]), [58])
	if ( ((*($23 + [208]) & [1]) == 0) ){ goto $label$4 }
	CALL $99(*((($23 + [208]) + [8])))
	
.LABEL $label$4
	$5 = *($23 + [224])
	if ( (*($5) & [1]) ){ goto $label$6 }
	$3 = ($5 + [1])
	goto $label$5 
	
.LABEL $label$6
	$3 = *($5 + [8])
	
.LABEL $label$5
	$18 = [-1]
	
.LOOP $label$7:
	$14 = ($3 + $18)
	$6 = ($18 + [1])
	$18 = $6
	if ( *(($14 + [1])) ){ goto $label$7 }
	$7 = (CASTING uint_64)(uint_32 $6)
	$19 = (int_64)0
	$22 = (int_64)59
	$20 = (int_64)0
	
.LOOP $label$8:
	$21 = (int_64)0
	if ( ((uint_64)$19 >= (uint_64)$7) ){ goto $label$9 }
	$18 = *($3)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$18 = ($18 + [165])
	goto $label$10 
	
.LABEL $label$11
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$13 }
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	goto $label$12 
	
.LABEL $label$13
	$21 = ((int_64)$21 & (int_64)15)
	
.LABEL $label$12
	$3 = ($3 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$8 }
	if ( (*($5 + [12]) & [1]) ){ goto $label$15 }
	$3 = (($5 + [12]) + [1])
	goto $label$14 
	
.LABEL $label$15
	$3 = *(($5 + [20]))
	
.LABEL $label$14
	$19 = CALL strtoull($3, [0], [10])
	$22 = $19
	if ( ((uint_64)$19 <= (uint_64)$4) ){ goto $label$16 }
	$22 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $19) * (float_64)(float_64)0.99))
	
.LABEL $label$16
	*(($18 = (($23 + [192]) + [8]))) = $22
	*($23 + [192]) = $20
	$3 = *($23 + [276])
	if ( ((uint_32)$3 >= (uint_32)*((($23 + [272]) + [8]))) ){ goto $label$19 }
	*($3) = *($23 + [192])
	*(($3 + [8])) = *($18)
	*($23 + [276]) = ($3 + [16])
	$14 = *($23 + [224])
	if ( $14 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $30(($23 + [272]), ($23 + [192]))
	$14 = *($23 + [224])
	if ( ($14 == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$3 = *($23 + [228])
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$21 }
	$18 = ([0] - $14)
	$3 = ($3 + [-12])
	
.LOOP $label$22:
	if ( ((*($3) & [1]) == 0) ){ goto $label$23 }
	CALL $99(*(($3 + [8])))
	
.LABEL $label$23
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $18) != (int_32)[-12]) ){ goto $label$22 }
	$3 = *($23 + [224])
	goto $label$20 
	
.LABEL $label$21
	$3 = $14
	
.LABEL $label$20
	*($23 + [228]) = $14
	CALL $99($3)
	
.LABEL $label$17
	$8 = ((int_64)$19 + (int_64)$8)
	$9 = ((int_64)$22 + (int_64)$9)
	$17 = ($17 + [1])
	if ( ((int_32)$17 != (int_32)[10]) ){ goto $label$3 }
	CALL eosio_assert((uint_64)($8 <= ((int_64)$4 * (int_64)10)), [896])
	$19 = ((int_64)$1 + (int_64)-1)
	if ( ((uint_64)$19 > (uint_64)(int_64)3) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$37
	$5 = *(($0 + [112]))
	$14 = *(($0 + [116]))
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$38 }
	$3 = ($14 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$39:
	if ( ((int_64)*(*($3)) == (int_64)$2) ){ goto $label$38 }
	$14 = $3
	$18 = ($3 + [-24])
	$3 = $18
	if ( ((int_32)($18 + $6) != (int_32)[-24]) ){ goto $label$39 }
	
.LABEL $label$38
	$18 = ($0 + [88])
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$32 }
	$3 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$18), [192])
	goto $label$31 
	
.LABEL $label$36
	CALL eosio_assert([0], [1008])
	goto $label$24 
	
.LABEL $label$35
	$5 = *(($0 + [152]))
	$14 = *(($0 + [156]))
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$40 }
	$3 = ($14 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$41:
	if ( ((int_64)*(*($3)) == (int_64)$2) ){ goto $label$40 }
	$14 = $3
	$18 = ($3 + [-24])
	$3 = $18
	if ( ((int_32)($18 + $6) != (int_32)[-24]) ){ goto $label$41 }
	
.LABEL $label$40
	$18 = ($0 + [128])
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$30 }
	$3 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$18), [192])
	goto $label$29 
	
.LABEL $label$34
	$5 = *(($0 + [192]))
	$14 = *(($0 + [196]))
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$42 }
	$3 = ($14 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$43:
	if ( ((int_64)*(*($3)) == (int_64)$2) ){ goto $label$42 }
	$14 = $3
	$18 = ($3 + [-24])
	$3 = $18
	if ( ((int_32)($18 + $6) != (int_32)[-24]) ){ goto $label$43 }
	
.LABEL $label$42
	$18 = ($0 + [168])
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$28 }
	$3 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$18), [192])
	goto $label$27 
	
.LABEL $label$33
	$5 = *(($0 + [232]))
	$14 = *(($0 + [236]))
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$44 }
	$3 = ($14 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$45:
	if ( ((int_64)*(*($3)) == (int_64)$2) ){ goto $label$44 }
	$14 = $3
	$18 = ($3 + [-24])
	$3 = $18
	if ( ((int_32)($18 + $6) != (int_32)[-24]) ){ goto $label$45 }
	
.LABEL $label$44
	$18 = ($0 + [208])
	if ( ((int_32)$14 == (int_32)$5) ){ goto $label$26 }
	$3 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$18), [192])
	goto $label$25 
	
.LABEL $label$32
	$3 = [0]
	$14 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7176372460584435712, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$31 }
	$3 = CALL $31($18, $14)
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$18), [192])
	
.LABEL $label$31
	$14 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($14, [912])
	CALL eosio_assert(((int_64)*($3) == (int_64)$2), [848])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)1), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272])) == (int_64)*(*($3 + [16]))), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [16]) == (int_64)*(*($3 + [16]) + [64])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [32]) == (int_64)*(*($3 + [16]) + [128])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [48]) == (int_64)*(*($3 + [16]) + [192])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [64]) == (int_64)*(*($3 + [16]) + [256])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [80]) == (int_64)*(*($3 + [16]) + [320])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [96]) == (int_64)*(*($3 + [16]) + [384])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [112]) == (int_64)*(*($3 + [16]) + [448])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [128]) == (int_64)*(*($3 + [16]) + [512])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [144]) == (int_64)*(*($3 + [16]) + [576])), [848])
	CALL eosio_assert($14, [928])
	CALL eosio_assert($14, [976])
	$14 = CALL db_next_i64(*($3 + [32]), ($23 + [192]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$46 }
	CALL $31($18, $14)
	
.LABEL $label$46
	CALL $32($18, $3)
	goto $label$24 
	
.LABEL $label$30
	$3 = [0]
	$14 = CALL db_find_i64(*(($0 + [128])), *(($0 + [136])), (int_64)7176372460584960000, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$29 }
	$3 = CALL $33($18, $14)
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$18), [192])
	
.LABEL $label$29
	$14 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($14, [912])
	CALL eosio_assert(((int_64)*($3) == (int_64)$2), [848])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)2), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272])) == (int_64)*(*($3 + [16]))), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [16]) == (int_64)*(*($3 + [16]) + [64])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [32]) == (int_64)*(*($3 + [16]) + [128])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [48]) == (int_64)*(*($3 + [16]) + [192])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [64]) == (int_64)*(*($3 + [16]) + [256])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [80]) == (int_64)*(*($3 + [16]) + [320])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [96]) == (int_64)*(*($3 + [16]) + [384])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [112]) == (int_64)*(*($3 + [16]) + [448])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [128]) == (int_64)*(*($3 + [16]) + [512])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [144]) == (int_64)*(*($3 + [16]) + [576])), [848])
	CALL eosio_assert($14, [928])
	CALL eosio_assert($14, [976])
	$14 = CALL db_next_i64(*($3 + [32]), ($23 + [192]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$47 }
	CALL $33($18, $14)
	
.LABEL $label$47
	CALL $34($18, $3)
	goto $label$24 
	
.LABEL $label$28
	$3 = [0]
	$14 = CALL db_find_i64(*(($0 + [168])), *(($0 + [176])), (int_64)7176372460585484288, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$27 }
	$3 = CALL $35($18, $14)
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$18), [192])
	
.LABEL $label$27
	$14 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($14, [912])
	CALL eosio_assert(((int_64)*($3) == (int_64)$2), [848])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)3), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272])) == (int_64)*(*($3 + [16]))), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [16]) == (int_64)*(*($3 + [16]) + [64])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [32]) == (int_64)*(*($3 + [16]) + [128])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [48]) == (int_64)*(*($3 + [16]) + [192])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [64]) == (int_64)*(*($3 + [16]) + [256])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [80]) == (int_64)*(*($3 + [16]) + [320])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [96]) == (int_64)*(*($3 + [16]) + [384])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [112]) == (int_64)*(*($3 + [16]) + [448])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [128]) == (int_64)*(*($3 + [16]) + [512])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [144]) == (int_64)*(*($3 + [16]) + [576])), [848])
	CALL eosio_assert($14, [928])
	CALL eosio_assert($14, [976])
	$14 = CALL db_next_i64(*($3 + [32]), ($23 + [192]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$48 }
	CALL $35($18, $14)
	
.LABEL $label$48
	CALL $36($18, $3)
	goto $label$24 
	
.LABEL $label$26
	$3 = [0]
	$14 = CALL db_find_i64(*(($0 + [208])), *(($0 + [216])), (int_64)7176372460586008576, $2)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$25 }
	$3 = CALL $37($18, $14)
	CALL eosio_assert(((int_32)*($3 + [28]) == (int_32)$18), [192])
	
.LABEL $label$25
	$14 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($14, [912])
	CALL eosio_assert(((int_64)*($3) == (int_64)$2), [848])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)4), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272])) == (int_64)*(*($3 + [16]))), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [16]) == (int_64)*(*($3 + [16]) + [64])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [32]) == (int_64)*(*($3 + [16]) + [128])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [48]) == (int_64)*(*($3 + [16]) + [192])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [64]) == (int_64)*(*($3 + [16]) + [256])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [80]) == (int_64)*(*($3 + [16]) + [320])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [96]) == (int_64)*(*($3 + [16]) + [384])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [112]) == (int_64)*(*($3 + [16]) + [448])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [128]) == (int_64)*(*($3 + [16]) + [512])), [848])
	CALL eosio_assert(((int_64)*(*($23 + [272]) + [144]) == (int_64)*(*($3 + [16]) + [576])), [848])
	CALL eosio_assert($14, [928])
	CALL eosio_assert($14, [976])
	$14 = CALL db_next_i64(*($3 + [32]), ($23 + [192]))
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$49 }
	CALL $37($18, $14)
	
.LABEL $label$49
	CALL $38($18, $3)
	
.LABEL $label$24
	CALL eosio_assert([1], [1152])
	$19 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$51 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	
.LOOP $label$54:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$54 }
	
.LABEL $label$53
	$18 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$52 }
	goto $label$50 
	
.LABEL $label$51
	$18 = [0]
	
.LABEL $label$50
	CALL eosio_assert($18, [1024])
	$19 = (int_64)0
	$21 = (int_64)59
	$3 = [784]
	$7 = (int_64)0
	
.LOOP $label$55:
	if ( ((uint_64)$19 > (uint_64)(int_64)10) ){ goto $label$60 }
	$18 = *($3)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$59 }
	$18 = ($18 + [165])
	goto $label$58 
	
.LABEL $label$60
	$22 = (int_64)0
	if ( ((int_64)$19 == (int_64)11) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$59
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$58
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$57
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$56
	$3 = ($3 + [1])
	$21 = ((int_64)$21 + (int_64)-5)
	$7 = ((int_64)$22 | (int_64)$7)
	$19 = ((int_64)$19 + (int_64)1)
	if ( ((int_64)$19 != (int_64)13) ){ goto $label$55 }
	$11 = ((uint_64)$4 / (uint_64)(int_64)10000)
	$12 = (($23 + [112]) | [1])
	$10 = (($23 + [152]) | [1])
	$6 = (($23 + [168]) + [16])
	$14 = [0]
	
.LOOP $label$64:
	$15 = ($14 << [4])
	$3 = (*($23 + [272]) + $15)
	$1 = *($3)
	$2 = *($3 + [8])
	*(($5 = (($23 + [168]) + [8]))) = (int_64)1397703940
	*($6) = $7
	*(($17 = (($23 + [152]) + [8]))) = [0]
	*($23 + [168]) = $2
	*($23 + [156]) = [0]
	*($23 + [152]) = [0]
	$13 = *($0)
	$3 = CALL strlen([1072])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$63 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$67 }
	*($23 + [152]) = ($3 << [1])
	$18 = $10
	if ( $3 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$16 = (($3 + [16]) & [-16])
	$18 = CALL $98($16)
	*($17) = $18
	*($23 + [152]) = ($16 | [1])
	*($23 + [156]) = $3
	
.LABEL $label$66
	CALL memcpy($18, [1072], $3)
	
.LABEL $label$65
	*(($18 + $3)) = [0]
	$19 = (int_64)0
	$21 = (int_64)59
	$3 = [32]
	$20 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$73 }
	$18 = *($3)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$18 = ($18 + [165])
	goto $label$71 
	
.LABEL $label$73
	$22 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$69
	$3 = ($3 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$22 | (int_64)$20)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$68 }
	*((($23 + [48]) + [16])) = *($6)
	*((($23 + [48]) + [8])) = *($5)
	*($23 + [48]) = *($23 + [168])
	CALL $39($13, $1, ($23 + [48]), ($23 + [152]), $20)
	if ( ((*($23 + [152]) & [1]) == 0) ){ goto $label$74 }
	CALL $99(*($17))
	
.LABEL $label$74
	if ( ((uint_64)$2 >= (uint_64)$4) ){ goto $label$75 }
	CALL eosio_assert([1], [1152])
	$19 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$78:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $19) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$77 }
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$79 }
	
.LOOP $label$80:
	$19 = (uint_64)$19 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$19) & (int_64)255) != (int_64)0) ){ goto $label$77 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$80 }
	
.LABEL $label$79
	$18 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$78 }
	goto $label$76 
	
.LABEL $label$77
	$18 = [0]
	
.LABEL $label$76
	CALL eosio_assert($18, [1024])
	$19 = (int_64)0
	$22 = (int_64)59
	$3 = [1104]
	$20 = (int_64)0
	
.LOOP $label$81:
	$21 = (int_64)0
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$82 }
	$18 = *($3)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$18 = ($18 + [165])
	goto $label$83 
	
.LABEL $label$84
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$82
	$3 = ($3 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$81 }
	$2 = *((*($23 + [272]) + $15))
	*(($5 = (($23 + [128]) + [8]))) = (int_64)353283363584
	*(($17 = (($23 + [128]) + [16]))) = $20
	*(($15 = (($23 + [112]) + [8]))) = [0]
	*($23 + [128]) = $11
	*($23 + [116]) = [0]
	*($23 + [112]) = [0]
	$1 = *($0)
	$3 = CALL strlen([1120])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$62 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$87 }
	*($23 + [112]) = ($3 << [1])
	$18 = $12
	if ( $3 ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$87
	$16 = (($3 + [16]) & [-16])
	$18 = CALL $98($16)
	*($15) = $18
	*($23 + [112]) = ($16 | [1])
	*($23 + [116]) = $3
	
.LABEL $label$86
	CALL memcpy($18, [1120], $3)
	
.LABEL $label$85
	*(($18 + $3)) = [0]
	$19 = (int_64)0
	$21 = (int_64)59
	$3 = [32]
	$20 = (int_64)0
	
.LOOP $label$88:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$93 }
	$18 = *($3)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$92 }
	$18 = ($18 + [165])
	goto $label$91 
	
.LABEL $label$93
	$22 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$92
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$91
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$90
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$89
	$3 = ($3 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$22 | (int_64)$20)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$88 }
	*((($23 + [24]) + [16])) = *($17)
	*((($23 + [24]) + [8])) = *($5)
	*($23 + [24]) = *($23 + [128])
	CALL $39($1, $2, ($23 + [24]), ($23 + [112]), $20)
	if ( ((*($23 + [112]) & [1]) == 0) ){ goto $label$75 }
	CALL $99(*($15))
	
.LABEL $label$75
	$14 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[10]) ){ goto $label$64 }
	CALL eosio_assert(((uint_64)$8 > (uint_64)$9), [848])
	$2 = (int_64))($8 - $9)
	$8 = *($0)
	$19 = (int_64)0
	$22 = (int_64)59
	$3 = [1056]
	$20 = (int_64)0
	
.LOOP $label$94:
	$21 = (int_64)0
	if ( ((uint_64)$19 > (uint_64)(int_64)11) ){ goto $label$95 }
	$18 = *($3)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$18 = ($18 + [165])
	goto $label$96 
	
.LABEL $label$97
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($18 & [31])) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$95
	$3 = ($3 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$94 }
	*($23 + [96]) = (int_64)1397703940
	*(($23 + [80])) = [0]
	*($23 + [88]) = $2
	*($23 + [104]) = $7
	*($23 + [76]) = [0]
	*($23 + [72]) = [0]
	$3 = CALL strlen([1072])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$61 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$100 }
	*($23 + [72]) = ($3 << [1])
	$18 = (($23 + [72]) | [1])
	if ( $3 ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$100
	$14 = (($3 + [16]) & [-16])
	$18 = CALL $98($14)
	*($23 + [72]) = ($14 | [1])
	*($23 + [80]) = $18
	*($23 + [76]) = $3
	
.LABEL $label$99
	CALL memcpy($18, [1072], $3)
	
.LABEL $label$98
	*(($18 + $3)) = [0]
	$19 = (int_64)0
	$21 = (int_64)59
	$3 = [32]
	$7 = (int_64)0
	
.LOOP $label$101:
	if ( ((uint_64)$19 > (uint_64)(int_64)5) ){ goto $label$106 }
	$18 = *($3)
	if ( ((uint_32)(($18 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$18 = ($18 + [165])
	goto $label$104 
	
.LABEL $label$106
	$22 = (int_64)0
	if ( ((uint_64)$19 <= (uint_64)(int_64)11) ){ goto $label$103 }
	goto $label$102 
	
.LABEL $label$105
	$18 = ( ($18 + [208]) ? [0] : ((($18 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $18) << (int_64)56) >> (int_64)56)
	
.LABEL $label$103
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$102
	$3 = ($3 + [1])
	$19 = ((int_64)$19 + (int_64)1)
	$7 = ((int_64)$22 | (int_64)$7)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$101 }
	*(($23 + [16])) = *((($23 + [88]) + [16]))
	*(($23 + [8])) = *((($23 + [88]) + [8]))
	*($23) = *($23 + [88])
	CALL $39($8, $20, $23, ($23 + [72]), $7)
	if ( ((*($23 + [72]) & [1]) == 0) ){ goto $label$107 }
	CALL $99(*($23 + [80]))
	
.LABEL $label$107
	$14 = *($23 + [256])
	if ( ($14 == 0) ){ goto $label$108 }
	$3 = *($23 + [260])
	if ( ((int_32)$3 == (int_32)$14) ){ goto $label$110 }
	$18 = ([0] - $14)
	$3 = ($3 + [-12])
	
.LOOP $label$111:
	if ( ((*($3) & [1]) == 0) ){ goto $label$112 }
	CALL $99(*(($3 + [8])))
	
.LABEL $label$112
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $18) != (int_32)[-12]) ){ goto $label$111 }
	$3 = *($23 + [256])
	goto $label$109 
	
.LABEL $label$110
	$3 = $14
	
.LABEL $label$109
	*($23 + [260]) = $14
	CALL $99($3)
	
.LABEL $label$108
	$3 = *($23 + [272])
	if ( ($3 == 0) ){ goto $label$113 }
	*($23 + [276]) = $3
	CALL $99($3)
	
.LABEL $label$113
	*([0] + [4]) = ($23 + [288])
	return (unreachable)
	
.LABEL $label$63
	CALL $100(($23 + [152]))
	
.LABEL $label$62
	CALL $100(($23 + [112]))
	
.LABEL $label$61
	CALL $100(($23 + [72]))
	(CASTING uint_32)(uint_64 $19)
	(unreachable)
	(unreachable)
}

void .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [208])
	*([0] + [4]) = $12
	CALL $52(($12 + [160]))
	$1 = ($12 + [192])
	if ( ((int_64)*($12 + [160]) == (int_64)*($0)) ){ goto $label$1 }
	$7 = *($1)
	$2 = CALL strlen([1392])
	if ( ((int_32)$2 != (int_32)( *(($12 + [196])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$2 }
	if ( (CALL $105($1, [0], [-1], [1392], $2) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($12 + [168]) == (int_64)*($0)), [848])
	CALL eosio_assert(((int_64)*((($12 + [160]) + [24])) == (int_64)1397703940), [848])
	$5 = ($12 + [176])
	CALL eosio_assert(((uint_64)*($5) >= (uint_64)*($0 + [8])), [1472])
	CALL eosio_assert(((uint_64)*($5) <= (uint_64)*($0 + [16])), [1504])
	CALL eosio_assert([1], [1152])
	$10 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$2 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	
.LABEL $label$3
	CALL eosio_assert($2, [1024])
	$4 = (Rounds 0)(((float_64)(CASTING float_64)(int_64 *(($12 + [176]))) * (float_64)(float_64)42.75))
	$10 = (int_64)0
	$11 = (int_64)59
	$7 = [1408]
	$8 = (int_64)0
	
.LOOP $label$8:
	$9 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$9 }
	$2 = *($7)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$2 = ($2 + [165])
	goto $label$10 
	
.LABEL $label$11
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$8 }
	*($12 + [144]) = (int_64)362174039556
	*(($12 + [128])) = [0]
	$3 = *($12 + [160])
	*($12 + [136]) = $4
	*($12 + [152]) = $8
	*($12 + [124]) = [0]
	*($12 + [120]) = [0]
	$4 = *($0)
	$7 = CALL strlen([1424])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$15 }
	*($12 + [120]) = ($7 << [1])
	$2 = (($12 + [120]) | [1])
	if ( $7 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = (($7 + [16]) & [-16])
	$2 = CALL $98($6)
	*($12 + [120]) = ($6 | [1])
	*($12 + [128]) = $2
	*($12 + [124]) = $7
	
.LABEL $label$14
	CALL memcpy($2, [1424], $7)
	
.LABEL $label$13
	*(($2 + $7)) = [0]
	$10 = (int_64)0
	$9 = (int_64)59
	$7 = [32]
	$8 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$21 }
	$2 = *($7)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$2 = ($2 + [165])
	goto $label$19 
	
.LABEL $label$21
	$11 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$17
	$7 = ($7 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$8 = ((int_64)$11 | (int_64)$8)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$16 }
	*(($12 + [16])) = *((($12 + [136]) + [16]))
	*(($12 + [8])) = *((($12 + [136]) + [8]))
	*($12) = *($12 + [136])
	CALL $39($4, $3, $12, ($12 + [120]), $8)
	if ( ((*($12 + [120]) & [1]) == 0) ){ goto $label$22 }
	CALL $99(*($12 + [128]))
	
.LABEL $label$22
	*(($7 = (($12 + [48]) + [16]))) = (int_64)1398362884
	*($12 + [56]) = (int_64)0
	CALL eosio_assert([1], [1152])
	$10 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$2 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$2 = [0]
	
.LABEL $label$23
	CALL eosio_assert($2, [1024])
	*(($12 + [68])) = *(($5 + [12]))
	*((($12 + [48]) + [16])) = *(($5 + [8]))
	*($12 + [48]) = *($12 + [160])
	*($12 + [60]) = *(($5 + [4]))
	*($12 + [56]) = *($5)
	*($12 + [72]) = [0]
	*($12 + [72]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = CALL read_transaction([0], [0])
	$2 = CALL malloc($7)
	CALL read_transaction($2, $7)
	CALL sha256($2, $7, ($12 + [80]))
	$10 = *((($12 + [160]) + [16]))
	if ( ((int_64)$10 > (int_64)999999) ){ goto $label$43 }
	if ( ((int_64)$10 == (int_64)10000) ){ goto $label$41 }
	if ( ((int_64)$10 != (int_64)100000) ){ goto $label$42 }
	$7 = ($0 + [288])
	$2 = *(($0 + [316]))
	if ( ((int_32)$2 == (int_32)*(($0 + [312]))) ){ goto $label$39 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [192])
	*($12 + [44]) = $2
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	goto $label$34 
	
.LABEL $label$43
	if ( ((int_64)$10 == (int_64)1000000) ){ goto $label$40 }
	if ( ((int_64)$10 != (int_64)10000000) ){ goto $label$42 }
	$7 = ($0 + [368])
	$2 = *(($0 + [396]))
	if ( ((int_32)$2 == (int_32)*(($0 + [392]))) ){ goto $label$38 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [192])
	*($12 + [44]) = $2
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	goto $label$32 
	
.LABEL $label$42
	CALL eosio_assert([0], [1440])
	goto $label$1 
	
.LABEL $label$41
	$7 = ($0 + [248])
	$2 = *(($0 + [276]))
	if ( ((int_32)$2 == (int_32)*(($0 + [272]))) ){ goto $label$37 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [192])
	*($12 + [44]) = $2
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	goto $label$30 
	
.LABEL $label$40
	$7 = ($0 + [328])
	$2 = *(($0 + [356]))
	if ( ((int_32)$2 == (int_32)*(($0 + [352]))) ){ goto $label$36 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [192])
	*($12 + [44]) = $2
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	goto $label$28 
	
.LABEL $label$39
	$2 = CALL db_find_i64(*($7), *(($0 + [296])), (int_64)7176370890153656320, (int_64)1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$35 }
	$2 = CALL $57($7, $2)
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [192])
	*($12 + [44]) = $2
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	goto $label$34 
	
.LABEL $label$38
	$2 = CALL db_find_i64(*($7), *(($0 + [376])), (int_64)7176370890154704896, (int_64)1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$33 }
	$2 = CALL $65($7, $2)
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [192])
	*($12 + [44]) = $2
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	goto $label$32 
	
.LABEL $label$37
	$2 = CALL db_find_i64(*($7), *(($0 + [256])), (int_64)7176370890153132032, (int_64)1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$31 }
	$2 = CALL $53($7, $2)
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [192])
	*($12 + [44]) = $2
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	goto $label$30 
	
.LABEL $label$36
	$2 = CALL db_find_i64(*($7), *(($0 + [336])), (int_64)7176370890154180608, (int_64)1)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$29 }
	$2 = CALL $61($7, $2)
	CALL eosio_assert(((int_32)*($2 + [28]) == (int_32)$7), [192])
	*($12 + [44]) = $2
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	goto $label$28 
	
.LABEL $label$35
	$2 = [0]
	*($12 + [44]) = [0]
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	
.LABEL $label$34
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [848])
	CALL eosio_assert((int_32((*(($2 + [20])) - *($2 + [16])) >> [6]) <= [10]), [848])
	$2 = *($12 + [44])
	$10 = *($0)
	*($12 + [36]) = ($12 + [48])
	*($12 + [32]) = ($12 + [40])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [384])
	CALL $58($7, $2, $10, ($12 + [32]))
	$2 = *($5)
	if ( ((int_32)(*(($2 + [20])) - *($2 + [16])) != (int_32)[640]) ){ goto $label$1 }
	$10 = *($0)
	*($12 + [24]) = ($12 + [40])
	CALL $59(($12 + [32]), ($0 + [128]), $10, ($12 + [24]))
	$10 = *($0)
	$2 = *($12 + [44])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [384])
	CALL $60($7, $2, $10, ($12 + [32]))
	goto $label$1 
	
.LABEL $label$33
	$2 = [0]
	*($12 + [44]) = [0]
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	
.LABEL $label$32
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [848])
	CALL eosio_assert((int_32((*(($2 + [20])) - *($2 + [16])) >> [6]) <= [10]), [848])
	$2 = *($12 + [44])
	$10 = *($0)
	*($12 + [36]) = ($12 + [48])
	*($12 + [32]) = ($12 + [40])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [384])
	CALL $66($7, $2, $10, ($12 + [32]))
	$2 = *($5)
	if ( ((int_32)(*(($2 + [20])) - *($2 + [16])) != (int_32)[640]) ){ goto $label$1 }
	$10 = *($0)
	*($12 + [24]) = ($12 + [40])
	CALL $67(($12 + [32]), ($0 + [208]), $10, ($12 + [24]))
	$10 = *($0)
	$2 = *($12 + [44])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [384])
	CALL $68($7, $2, $10, ($12 + [32]))
	goto $label$1 
	
.LABEL $label$31
	$2 = [0]
	*($12 + [44]) = [0]
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	
.LABEL $label$30
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [848])
	CALL eosio_assert((int_32((*(($2 + [20])) - *($2 + [16])) >> [6]) <= [10]), [848])
	$2 = *($12 + [44])
	$10 = *($0)
	*($12 + [36]) = ($12 + [48])
	*($12 + [32]) = ($12 + [40])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [384])
	CALL $54($7, $2, $10, ($12 + [32]))
	$2 = *($5)
	if ( ((int_32)(*(($2 + [20])) - *($2 + [16])) != (int_32)[640]) ){ goto $label$1 }
	$10 = *($0)
	*($12 + [24]) = ($12 + [40])
	CALL $55(($12 + [32]), ($0 + [88]), $10, ($12 + [24]))
	$10 = *($0)
	$2 = *($12 + [44])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [384])
	CALL $56($7, $2, $10, ($12 + [32]))
	goto $label$1 
	
.LABEL $label$29
	$2 = [0]
	*($12 + [44]) = [0]
	*($12 + [40]) = $7
	$5 = (($12 + [40]) | [4])
	
.LABEL $label$28
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [848])
	CALL eosio_assert((int_32((*(($2 + [20])) - *($2 + [16])) >> [6]) <= [10]), [848])
	$2 = *($12 + [44])
	$10 = *($0)
	*($12 + [36]) = ($12 + [48])
	*($12 + [32]) = ($12 + [40])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [384])
	CALL $62($7, $2, $10, ($12 + [32]))
	$2 = *($5)
	if ( ((int_32)(*(($2 + [20])) - *($2 + [16])) != (int_32)[640]) ){ goto $label$1 }
	$10 = *($0)
	*($12 + [24]) = ($12 + [40])
	CALL $63(($12 + [32]), ($0 + [168]), $10, ($12 + [24]))
	$10 = *($0)
	$2 = *($12 + [44])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [384])
	CALL $64($7, $2, $10, ($12 + [32]))
	goto $label$1 
	
.LABEL $label$12
	CALL $100(($12 + [120]))
	
.LABEL $label$1
	if ( ((*($1) & [1]) == 0) ){ goto $label$44 }
	CALL $99(*(($12 + [200])))
	
.LABEL $label$44
	*([0] + [4]) = ($12 + [208])
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [392]))
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [396])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [20])) = $3
	CALL $99($3)
	
.LABEL $label$6
	CALL $99($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($0 + [392]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $99($5)
	
.LABEL $label$1
	$1 = *(($0 + [352]))
	if ( ($1 == 0) ){ goto $label$7 }
	$4 = ($0 + [356])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$12 }
	*(($2 + [20])) = $3
	CALL $99($3)
	
.LABEL $label$12
	CALL $99($2)
	
.LABEL $label$11
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($0 + [352]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $1
	
.LABEL $label$8
	*($4) = $1
	CALL $99($5)
	
.LABEL $label$7
	$1 = *(($0 + [312]))
	if ( ($1 == 0) ){ goto $label$13 }
	$4 = ($0 + [316])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$15 }
	
.LOOP $label$16:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$17 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$18 }
	*(($2 + [20])) = $3
	CALL $99($3)
	
.LABEL $label$18
	CALL $99($2)
	
.LABEL $label$17
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$16 }
	$5 = *(($0 + [312]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $1
	
.LABEL $label$14
	*($4) = $1
	CALL $99($5)
	
.LABEL $label$13
	$1 = *(($0 + [272]))
	if ( ($1 == 0) ){ goto $label$19 }
	$4 = ($0 + [276])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$23 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$24 }
	*(($2 + [20])) = $3
	CALL $99($3)
	
.LABEL $label$24
	CALL $99($2)
	
.LABEL $label$23
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($0 + [272]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $1
	
.LABEL $label$20
	*($4) = $1
	CALL $99($5)
	
.LABEL $label$19
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$25 }
	$4 = ($0 + [236])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$27 }
	
.LOOP $label$28:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$29 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$30 }
	*(($2 + [20])) = $3
	CALL $99($3)
	
.LABEL $label$30
	CALL $99($2)
	
.LABEL $label$29
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$28 }
	$5 = *(($0 + [232]))
	goto $label$26 
	
.LABEL $label$27
	$5 = $1
	
.LABEL $label$26
	*($4) = $1
	CALL $99($5)
	
.LABEL $label$25
	$1 = *(($0 + [192]))
	if ( ($1 == 0) ){ goto $label$31 }
	$4 = ($0 + [196])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$33 }
	
.LOOP $label$34:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$35 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$36 }
	*(($2 + [20])) = $3
	CALL $99($3)
	
.LABEL $label$36
	CALL $99($2)
	
.LABEL $label$35
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$34 }
	$5 = *(($0 + [192]))
	goto $label$32 
	
.LABEL $label$33
	$5 = $1
	
.LABEL $label$32
	*($4) = $1
	CALL $99($5)
	
.LABEL $label$31
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$37 }
	$4 = ($0 + [156])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$39 }
	
.LOOP $label$40:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$41 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$42 }
	*(($2 + [20])) = $3
	CALL $99($3)
	
.LABEL $label$42
	CALL $99($2)
	
.LABEL $label$41
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$40 }
	$5 = *(($0 + [152]))
	goto $label$38 
	
.LABEL $label$39
	$5 = $1
	
.LABEL $label$38
	*($4) = $1
	CALL $99($5)
	
.LABEL $label$37
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$43 }
	$4 = ($0 + [116])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$45 }
	
.LOOP $label$46:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$47 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$48 }
	*(($2 + [20])) = $3
	CALL $99($3)
	
.LABEL $label$48
	CALL $99($2)
	
.LABEL $label$47
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$46 }
	$5 = *(($0 + [112]))
	goto $label$44 
	
.LABEL $label$45
	$5 = $1
	
.LABEL $label$44
	*($4) = $1
	CALL $99($5)
	
.LABEL $label$43
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($3 = $4) + [44]) = $0
	*($3 + [32]) = *($1)
	*($3 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = $1
	$4 = ($1 + $0)
	*($3 + [56]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [752])
	CALL memcpy($3, $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [752])
	CALL memcpy(($3 + [8]), $2, [8])
	*($3 + [52]) = ($1 + [16])
	CALL $14(($3 + [48]), ($3 + [16]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $28(($3 + [48]), $3)
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $99(*(($3 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [64])
	return [1]
}

int_64 .FUNC strtoull (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [144])
	*([0] + [4]) = $4
	*($4 + [4]) = $0
	*($4 + [44]) = $0
	*($4) = [0]
	*($4 + [76]) = [-1]
	*($4 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL __shlim($4, (int_64)0)
	$3 = CALL __intscan($4, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + (CASTING uint_32)(uint_64 ((int_64)(CASTING uint_64)(uint_32 (*($4 + [4]) - *(($4 + [8])))) + (int_64)*($4 + [120]))))
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [144])
	return $3
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *($1 + [16])) >> [6]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $70($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	*(($7 = ($1 + [20]))) = *($1 + [16])
	*($1) = ((int_64)*($1) + (int_64)1)
	CALL eosio_assert([1], [608])
	$5 = *($1 + [16])
	$4 = *($7)
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [6]))
	$7 = [76]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($6 + [-64]) >> [6]) * (int_32)[60]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-60])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL $69($10, $1)
	CALL db_update_i64(*($1 + [32]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$7 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $98($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [720])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	$6 = ($4 + $5)
	*($7 + [40]) = $6
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$6 = *(($7 + [40]))
	$4 = *($7 + [36])
	
.LABEL $label$7
	*(($5 = CALL $98([40])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [28]) = $0
	CALL eosio_assert(((uint_32)($6 - $4) > (uint_32)[7]), [752])
	CALL memcpy($5, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($6 - $3) > (uint_32)[7]), [752])
	CALL memcpy(($5 + [8]), $3, [8])
	*($7 + [36]) = ($4 + [16])
	CALL $44(($7 + [32]), ($5 + [16]))
	*($5 + [32]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)1
	$6 = *($5 + [32])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)1
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $75(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	*(($7 = ($1 + [20]))) = *($1 + [16])
	*($1) = ((int_64)*($1) + (int_64)1)
	CALL eosio_assert([1], [608])
	$5 = *($1 + [16])
	$4 = *($7)
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [6]))
	$7 = [76]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($6 + [-64]) >> [6]) * (int_32)[60]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-60])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL $76($10, $1)
	CALL db_update_i64(*($1 + [32]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$7 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [272])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $98([40])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $71(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $45(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [20])) = $1
	CALL $99($1)
	
.LABEL $label$4
	CALL $99($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	$4 = *($3 + [4])
	$3 = *(*($3) + [4])
	$5 = ($3 + [20])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [24]))) ){ goto $label$2 }
	CALL memcpy($6, $4, [64])
	*($5) = (*($5) + [64])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($3 + [16]), $4)
	
.LABEL $label$1
	CALL eosio_assert([1], [608])
	$5 = *($1 + [16])
	$4 = *(($1 + [20]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [6]))
	$3 = [76]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	$3 = (((int_32)uint_32(($6 + [-64]) >> [6]) * (int_32)[60]) + $3)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 + [-60])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($3)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $3)
	CALL $69($9, $1)
	CALL db_update_i64(*($1 + [32]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$9 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [720])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [36]) = $4
	*($7 + [32]) = $4
	$6 = ($4 + $5)
	*($7 + [40]) = $6
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$6 = *(($7 + [40]))
	$4 = *($7 + [36])
	
.LABEL $label$7
	*(($5 = CALL $98([40])) + [24]) = [0]
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [28]) = $0
	CALL eosio_assert(((uint_32)($6 - $4) > (uint_32)[7]), [752])
	CALL memcpy($5, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($6 - $3) > (uint_32)[7]), [752])
	CALL memcpy(($5 + [8]), $3, [8])
	*($7 + [36]) = ($4 + [16])
	CALL $44(($7 + [32]), ($5 + [16]))
	*($5 + [32]) = $1
	*($7 + [24]) = $5
	*($7 + [16]) = (int_64)1
	$6 = *($5 + [32])
	*($7 + [12]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)1
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $79(($0 + [24]), ($7 + [24]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
	return $5
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	*(($7 = ($1 + [20]))) = *($1 + [16])
	*($1) = ((int_64)*($1) + (int_64)1)
	CALL eosio_assert([1], [608])
	$5 = *($1 + [16])
	$4 = *($7)
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [6]))
	$7 = [76]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($6 + [-64]) >> [6]) * (int_32)[60]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-60])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL $80($10, $1)
	CALL db_update_i64(*($1 + [32]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$7 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [272])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $98([40])) + [24]) = [0]
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [28]) = $1
	CALL $77(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [32])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $48(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [20])) = $1
	CALL $99($1)
	
.LABEL $label$4
	CALL $99($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	$4 = *($3 + [4])
	$3 = *(*($3) + [4])
	$5 = ($3 + [20])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [24]))) ){ goto $label$2 }
	CALL memcpy($6, $4, [64])
	*($5) = (*($5) + [64])
	goto $label$1 
	
.LABEL $label$2
	CALL $74(($3 + [16]), $4)
	
.LABEL $label$1
	CALL eosio_assert([1], [608])
	$5 = *($1 + [16])
	$4 = *(($1 + [20]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [6]))
	$3 = [76]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	$3 = (((int_32)uint_32(($6 + [-64]) >> [6]) * (int_32)[60]) + $3)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 + [-60])
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($3)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $3)
	CALL $76($9, $1)
	CALL db_update_i64(*($1 + [32]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$9 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $98(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $99($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $100 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $98($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $99($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $103($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [752])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [752])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [752])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [752])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $14(*($1), *($0 + [12]))
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [1152])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1024])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $89(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $98(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$11
	CALL $99($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $99($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *($1 + [16])) >> [6]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $70($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$5 = *($0 + [4])
	*($1) = *(*(*($5) + [4]))
	$2 = *($0)
	*($1 + [8]) = *(*(*($5) + [4]) + [8])
	$7 = ($1 + [16])
	$5 = *(*($5) + [4])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $72($7, *(($5 + [16])), *(($5 + [20])))
	
.LABEL $label$1
	$7 = *($7)
	$3 = *(($1 + [20]))
	$4 = ($3 - $7)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [6]))
	$5 = [76]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = (((int_32)uint_32(($4 + [-64]) >> [6]) * (int_32)[60]) + $5)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($5 + [-60])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL $86($8, $1)
	$6 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)7176372460584435712, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($7)
	
.LABEL $label$7
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *($1 + [16])) >> [6]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $70($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $98(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$11
	CALL $99($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $99($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *($1 + [16])) >> [6]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $70($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$5 = *($0 + [4])
	*($1) = *(*(*($5) + [4]))
	$2 = *($0)
	*($1 + [8]) = *(*(*($5) + [4]) + [8])
	$7 = ($1 + [16])
	$5 = *(*($5) + [4])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $72($7, *(($5 + [16])), *(($5 + [20])))
	
.LABEL $label$1
	$7 = *($7)
	$3 = *(($1 + [20]))
	$4 = ($3 - $7)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [6]))
	$5 = [76]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = (((int_32)uint_32(($4 + [-64]) >> [6]) * (int_32)[60]) + $5)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($5 + [-60])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL $82($8, $1)
	$6 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)7176372460584960000, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($7)
	
.LABEL $label$7
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *($1 + [16])) >> [6]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $70($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [6])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [6])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $99($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[67108864]) ){ goto $label$1 }
	$5 = [67108863]
	if ( ((uint_32)int_32($8 >> [6]) > (uint_32)[33554430]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [5])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[67108864]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [6])
	$5 = CALL $98($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [6])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [6])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [6]))
	return (unreachable)
	
.LABEL $label$1
	CALL $106($0)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *($1 + [16])) >> [6]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $70($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$5 = *($0 + [4])
	*($1) = *(*(*($5) + [4]))
	$2 = *($0)
	*($1 + [8]) = *(*(*($5) + [4]) + [8])
	$7 = ($1 + [16])
	$5 = *(*($5) + [4])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $72($7, *(($5 + [16])), *(($5 + [20])))
	
.LABEL $label$1
	$7 = *($7)
	$3 = *(($1 + [20]))
	$4 = ($3 - $7)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [6]))
	$5 = [76]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = (((int_32)uint_32(($4 + [-64]) >> [6]) * (int_32)[60]) + $5)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($5 + [-60])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL $73($8, $1)
	$6 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)7176372460586008576, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($7)
	
.LABEL $label$7
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *($1 + [16])) >> [6]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $70($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$5 = *($0 + [4])
	*($1) = *(*(*($5) + [4]))
	$2 = *($0)
	*($1 + [8]) = *(*(*($5) + [4]) + [8])
	$7 = ($1 + [16])
	$5 = *(*($5) + [4])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $72($7, *(($5 + [16])), *(($5 + [20])))
	
.LABEL $label$1
	$7 = *($7)
	$3 = *(($1 + [20]))
	$4 = ($3 - $7)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [6]))
	$5 = [76]
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = (((int_32)uint_32(($4 + [-64]) >> [6]) * (int_32)[60]) + $5)
	goto $label$3 
	
.LABEL $label$4
	$5 = ($5 + [-60])
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($8 + [4]) = $7
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL $78($8, $1)
	$6 = *($1)
	*($1 + [32]) = CALL db_store_i64(*($2 + [8]), (int_64)7176372460585484288, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($7)
	
.LABEL $label$7
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [6])
	$7 = ($2 + [1])
	if ( ((uint_32)$7 >= (uint_32)[67108864]) ){ goto $label$3 }
	$4 = [67108863]
	$3 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($3 >> [6]) > (uint_32)[33554430]) ){ goto $label$5 }
	$4 = int_32($3 >> [5])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[67108864]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $98(($4 << [6]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$6 = ($6 - $5)
	$2 = CALL memcpy(($7 + ($2 << [6])), $1, [64])
	$1 = ($2 - $6)
	$4 = ($7 + ($4 << [6]))
	$7 = ($2 + [64])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $99($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $39 (int_64 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [112])
	*([0] + [4]) = $12
	$5 = *($2 + [16])
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [800]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$6 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	*((($12 + [8]) + [28])) = *(($2 + [12]))
	*((($12 + [8]) + [24])) = *(($2 + [8]))
	*((($12 + [8]) + [20])) = *(($2 + [4]))
	*($12 + [16]) = $1
	*($12 + [8]) = $0
	*($12 + [24]) = *($2)
	CALL $107((($12 + [8]) + [32]), $3)
	*($12 + [64]) = $10
	*($12 + [56]) = $5
	*(($7 = CALL $98([16]))) = $0
	*($7 + [8]) = $4
	*((($12 + [56]) + [32])) = [0]
	$6 = ($7 + [16])
	*((($12 + [56]) + [24])) = $6
	*((($12 + [56]) + [20])) = $6
	*($12 + [72]) = $7
	*($12 + [84]) = [0]
	*((($12 + [56]) + [36])) = [0]
	$7 = *($12 + [40])
	$6 = ( *((($12 + [8]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($6 + [32])
	$9 = (CASTING uint_64)(uint_32 $6)
	$6 = (($12 + [56]) + [28])
	
.LOOP $label$7:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$7 }
	if ( ($7 == 0) ){ goto $label$9 }
	CALL $16($6, $7)
	$6 = *(($12 + [88]))
	$7 = *(($12 + [84]))
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	$7 = [0]
	
.LABEL $label$8
	*($12 + [100]) = $7
	*($12 + [96]) = $7
	*($12 + [104]) = $6
	CALL $40(($12 + [96]), ($12 + [8]))
	if ( ((*(($12 + [40])) & [1]) == 0) ){ goto $label$10 }
	CALL $99(*(($12 + [48])))
	
.LABEL $label$10
	CALL $41(($12 + [8]), ($12 + [56]))
	$7 = *($12 + [8])
	CALL send_inline($7, (*($12 + [12]) - $7))
	$7 = *($12 + [8])
	if ( ($7 == 0) ){ goto $label$11 }
	*($12 + [12]) = $7
	CALL $99($7)
	
.LABEL $label$11
	$7 = *($12 + [84])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($12 + [88])) = $7
	CALL $99($7)
	
.LABEL $label$12
	$7 = *($12 + [72])
	if ( ($7 == 0) ){ goto $label$13 }
	*(($12 + [76])) = $7
	CALL $99($7)
	
.LABEL $label$13
	*([0] + [4]) = ($12 + [112])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1216])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1264])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1328])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$7
	CALL $99($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [720])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $98([40])) + [24]) = [0]
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [28]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [752])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[7]), [752])
	CALL memcpy(($6 + [8]), $3, [8])
	*($8 + [36]) = ($4 + [16])
	CALL $44(($8 + [32]), ($6 + [16]))
	*($6 + [32]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [32])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $45(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $7
	CALL $99($7)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), $1, [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [672])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$5 = (*($0 + [4]) + [8])
	*($0 + [4]) = $5
	$6 = (CASTING uint_64)(uint_32 int_32((*(($1 + [20])) - *($1 + [16])) >> [6]))
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [672])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $3 ){ goto $label$1 }
	$5 = *(($1 + [20]))
	$4 = *(($1 + [16]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $70($0, $4)
	$4 = ($4 + [64])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $98(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$11
	CALL $99($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $99($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [28]) == (int_32)$0), [1216])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1264])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1328])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$7
	CALL $99($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $6
	CALL $99($6)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [32]))
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [720])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $98([40])) + [24]) = [0]
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [28]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [752])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[7]), [752])
	CALL memcpy(($6 + [8]), $3, [8])
	*($8 + [36]) = ($4 + [16])
	CALL $44(($8 + [32]), ($6 + [16]))
	*($6 + [32]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [32])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $49(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $7
	CALL $99($7)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $98(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $99($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [720])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $98([40])) + [24]) = [0]
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [28]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [752])
	CALL memcpy($6, $4, [8])
	$3 = ($4 + [8])
	CALL eosio_assert(((uint_32)($7 - $3) > (uint_32)[7]), [752])
	CALL memcpy(($6 + [8]), $3, [8])
	*($8 + [36]) = ($4 + [16])
	CALL $44(($8 + [32]), ($6 + [16]))
	*($6 + [32]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [32])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $50(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [20])) = $7
	CALL $99($7)
	
.LABEL $label$10
	CALL $99($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}