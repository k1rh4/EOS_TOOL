(data (i32.const 4) "@h\00\00")
(data (i32.const 16) "write\00")
(data (i32.const 32) "transfer\00")
(data (i32.const 48) "address.bank\00")
(data (i32.const 64) "counter.bank\00")
(data (i32.const 80) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 144) "invalid symbol name\00")
(data (i32.const 176) "active\00")
(data (i32.const 192) "|\00")
(data (i32.const 208) "Invalid asset!\00")
(data (i32.const 224) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 288) "Account not exist!\00")
(data (i32.const 320) "token not support!\00")
(data (i32.const 352) "Insufficient Balance\00")
(data (i32.const 384) "Account(to) not exist!\00")
(data (i32.const 416) "Balance overflow!\00")
(data (i32.const 448) "object passed to modify is not in multi_index\00")
(data (i32.const 496) "cannot modify objects in table of another contract\00")
(data (i32.const 560) "updater cannot change primary key when modifying an object\00")
(data (i32.const 624) "error reading iterator\00")
(data (i32.const 656) "read\00")
(data (i32.const 672) "get\00")
(data (i32.const 688) ".\00")
(data (i32.const 704) " \00")
(data (i32.const 720) ",\00")
(data (i32.const 736) "Invalid data\00")
(data (i32.const 752) "Action has not been supported, please contact us!\00")
(data (i32.const 816) "for abi\00")
(data (i32.const 832) "cannot pass end iterator to erase\00")
(data (i32.const 880) "cannot increment end iterator\00")
(data (i32.const 912) "object passed to erase is not in multi_index\00")
(data (i32.const 960) "cannot erase objects in table of another contract\00")
(data (i32.const 1024) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1088) "action already added into white list!\00")
(data (i32.const 1136) "cannot create objects in table of another contract\00")
(data (i32.const 1200) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1264) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1328) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1376) "token already added!\00")
(data (i32.const 1408) "max length is 11\00")
(data (i32.const 1440) "Invalid account\00")
(data (i32.const 1456) "account already exists\00")
(data (i32.const 1480) "\d0\05\00\00")
(data (i32.const 1488) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1536) "hi\00")
(data (i32.const 1552) "transfer not made to this contract\00")
(data (i32.const 1600) "invalid quantity\00")
(data (i32.const 1632) "amount must be positive\00")
(data (i32.const 1664) "\t\n\0b\0c\0d. \00")
(data (i32.const 1680) "Invalid account.\00")
(data (i32.const 1712) "asset_type_id\00")
(data (i32.const 1728) "token not support!!\00")
(data (i32.const 1760) "Invalid account..\00")
(data (i32.const 1792) "eosio.token\00")
(data (i32.const 10208) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "check_permission_authorization" (func $fimport$2 (param i64 i64 i32 i32 i32 i32 i64) (result i32)))
(import "env" "check_transaction_authorization" (func $fimport$3 (param i32 i32 i32 i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "db_end_i64" (func $fimport$6 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$9 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$10 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$11 (param i32)))
(import "env" "db_idx128_store" (func $fimport$12 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$19 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$20 (param i32)))
(import "env" "memcpy" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "printhex" (func $fimport$24 (param i32 i32)))
(import "env" "printi" (func $fimport$25 (param i64)))
(import "env" "printn" (func $fimport$26 (param i64)))
(import "env" "prints" (func $fimport$27 (param i32)))
(import "env" "prints_l" (func $fimport$28 (param i32 i32)))
(import "env" "printui" (func $fimport$29 (param i64)))
(import "env" "read_action_data" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$31 (param i64)))
(import "env" "require_auth2" (func $fimport$32 (param i64 i64)))
(import "env" "send_inline" (func $fimport$33 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN5eosio31check_transaction_authorizationERKNS_11transactionERKNSt3__13setINS_16permission_levelENS3_4lessIS5_EENS3_9allocatorIS5_EEEERKNS4_I10public_keyNS6_ISD_EENS8_ISD_EEEE" (func $5))
(export "_ZN5eosio30check_permission_authorizationEyyRKNSt3__13setI10public_keyNS0_4lessIS2_EENS0_9allocatorIS2_EEEERKNS1_INS_16permission_levelENS3_ISA_EENS5_ISA_EEEEy" (func $16))
(export "apply" (func $17))
(export "malloc" (func $82))
(export "free" (func $85))
(export "memchr" (func $94))
(export "strlen" (func $95))
(export "memcmp" (func $96))
(table $0 8 8 anyfunc)
(elem (i32.const 0) $97 $26 $32 $22 $31 $29 $28 $24)



int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $97 ()
{
	(unreachable)
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $91 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $86($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $86($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $58($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [656])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [16])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[1]), [16])
	CALL memcpy(*($3), $6, [2])
	$5 = (*($3) + [2])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [16])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [496])
	$4 = *($1)
	$6 = ($1 + [12])
	$5 = *($6)
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$1 }
	$7 = (*(*($3)) & [65535])
	
.LOOP $label$2:
	if ( ((int_32)*($8) == (int_32)$7) ){ goto $label$1 }
	$8 = ($8 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$2 }
	$8 = $5
	
.LABEL $label$1
	*($8 + [8]) = (int_64))(*($8 + [8]) - *(*($3 + [4]) + [16]))
	CALL eosio_assert([1], [560])
	$7 = ($1 + [8])
	$3 = *($1 + [8])
	$5 = *($6)
	$6 = ($5 - $3)
	$9 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$8 = [18]
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$5 }
	$8 = (((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[10]) + $8)
	goto $label$4 
	
.LABEL $label$5
	$8 = ($8 + [-10])
	
.LABEL $label$4
	if ( ($8 <= [513]) ){ goto $label$7 }
	$5 = CALL malloc($8)
	goto $label$6 
	
.LABEL $label$7
	$5 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$6
	*($10) = $5
	*($10 + [8]) = ($5 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [16])
	CALL memcpy($5, $1, [8])
	*($10 + [4]) = ($5 + [8])
	CALL $49($10, $7)
	CALL db_update_i64(*($1 + [24]), $2, $5, $8)
	if ( ($8 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $43 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([688])
	CALL prints_l($2, $3)
	CALL prints([704])
	CALL $57($1, [0])
	*([0] + [4]) = $10
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $7($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [16])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [16])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $14(CALL $15($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$7 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($7 - $4)) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL $87($4)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($7 << [1])
	$2 = ( $3 ? $4 : ($4 <= $3) )
	
.LABEL $label$6
	$4 = CALL $86($2)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $2)
	CALL memcpy($4, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$7 = (*($0 + [4]) - $4)
	$5 = ( ($1 + $7) ? $2 : ((uint_32)$3 > (uint_32)$7) )
	$6 = ($5 - $1)
	if ( ($6 == 0) ){ goto $label$7 }
	CALL memmove($4, $1, $6)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$8 }
	$0 = ($2 - $5)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $5, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($4 + $6)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $91($0)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [4])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $87($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = [268435455]
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [4])
	$5 = CALL $86($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $91($0)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [16])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [16])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [16])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [16])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [496])
	$5 = ($1 + [8])
	$4 = *($1)
	if ( ((int_32)*(*($3)) == (int_32)*((*(*($3 + [4]) + [4]) + [12]))) ){ goto $label$2 }
	$8 = ($1 + [12])
	$6 = *($8)
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$3 }
	$7 = (*(*($3 + [8])) & [65535])
	
.LOOP $label$4:
	if ( ((int_32)*($9) == (int_32)$7) ){ goto $label$3 }
	$9 = ($9 + [16])
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$4 }
	$9 = $6
	
.LABEL $label$3
	*($9 + [8]) = ((int_64)*($9 + [8]) + (int_64)*(*($3 + [12]) + [16]))
	$10 = $4
	goto $label$1 
	
.LABEL $label$2
	*($11) = *(*($3 + [8]))
	*($11 + [8]) = *(*($3 + [12]) + [16])
	$8 = ($1 + [12])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [16]))) ){ goto $label$6 }
	*($9) = *($11)
	*(($9 + [8])) = *(($11 + [8]))
	*($8) = (*($8) + [16])
	goto $label$5 
	
.LABEL $label$6
	CALL $51($5, $11)
	
.LABEL $label$5
	$10 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [560])
	$7 = *($5)
	$6 = *($8)
	$3 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($3 >> [4]))
	$9 = [18]
	
.LOOP $label$7:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$9 }
	$9 = (((int_32)uint_32(($3 + [-16]) >> [4]) * (int_32)[10]) + $9)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($9 + [-10])
	
.LABEL $label$8
	if ( ($9 <= [513]) ){ goto $label$11 }
	$6 = CALL malloc($9)
	goto $label$10 
	
.LABEL $label$11
	$6 = ($12 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$10
	*($11) = $6
	*($11 + [8]) = ($6 + $9)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [16])
	CALL memcpy($6, $1, [8])
	*($11 + [4]) = ($6 + [8])
	CALL $49($11, $5)
	CALL db_update_i64(*($1 + [24]), $2, $6, $9)
	if ( ($9 <= [513]) ){ goto $label$12 }
	CALL free($6)
	
.LABEL $label$12
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx128_lowerbound(*($8), *($8 + [8]), (int_64)3904810988646432768, $10, ($10 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [24])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $52($4, CALL $fimport$7(*($4), *($4 + [8]), (int_64)3904810988646432768, $5))
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [40])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [32])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [624])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $86([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [656])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $54(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $55(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $87($7)
	
.LABEL $label$10
	CALL $87($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$5 = *($0 + [4])
	$4 = *($1 + [8])
	$3 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($9 + [40]) = (($8) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [16])
	CALL memcpy(*($7), ($9 + [40]), [1])
	$5 = (*($7) + [1])
	*($7) = $5
	if ( $8 ){ goto $label$1 }
	$1 = ($1 + [4])
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$8 = $6
	CALL memcpy(($9 + [6]), ($8 + [13]), [34])
	CALL memcpy(($9 + [40]), ($9 + [6]), [34])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[33]), [16])
	CALL memcpy(*($3), ($9 + [40]), [34])
	$5 = (*($3) + [34])
	*($3) = $5
	$7 = *($8 + [4])
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = $7
	$7 = *($6)
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = *($8 + [8])
	if ( ((int_32)*($6) == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [8])
	
.LOOP $label$7:
	$7 = *($8)
	$8 = ($7 + [8])
	$6 = *($7 + [8])
	if ( ((int_32)$7 != (int_32)*($6)) ){ goto $label$7 }
	
.LABEL $label$4
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [80])
	return $0
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$4 = *($0 + [4])
	$3 = *($1 + [8])
	$2 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$5 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($8 + [15]) = (($7) << [7]) | ($5 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $4) > (int_32)[0]), [16])
	CALL memcpy(*($6), ($8 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = ($1 + [4])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	$6 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($6) - $4) > (int_32)[7]), [16])
	$7 = $5
	CALL memcpy(*($2), ($7 + [16]), [8])
	$5 = (*($2) + [8])
	*($2) = $5
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[7]), [16])
	CALL memcpy(*($2), ($7 + [24]), [8])
	$4 = (*($2) + [8])
	*($2) = $4
	$6 = *($7 + [4])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = $6
	$6 = *($5)
	if ( $6 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = *($7 + [8])
	if ( ((int_32)*($5) == (int_32)$7) ){ goto $label$4 }
	$7 = ($7 + [8])
	
.LOOP $label$7:
	$6 = *($7)
	$7 = ($6 + [8])
	$5 = *($6 + [8])
	if ( ((int_32)$6 != (int_32)*($5)) ){ goto $label$7 }
	
.LABEL $label$4
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $10($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $7($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $11($4, $1)
	CALL $13(CALL $12(CALL $12($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $86($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $91($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $87($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN5eosio31check_transaction_authorizationERKNS_11transactionERKNSt3__13setINS_16permission_levelENS3_4lessIS5_EENS3_9allocatorIS5_EEEERKNS4_I10public_keyNS6_ISD_EENS8_ISD_EEEE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	CALL $6(($12 + [16]), $0)
	$11 = [0]
	$9 = [0]
	$10 = [0]
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$1 }
	$6 = [0]
	*($12 + [8]) = [0]
	*($12) = (int_64)0
	$5 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	$4 = ($2 + [4])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$8 = $7
	$0 = *($8 + [4])
	if ( ($0 == 0) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = $0
	$0 = *($7)
	if ( $0 ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = *($8 + [8])
	if ( ((int_32)*($7) == (int_32)$8) ){ goto $label$7 }
	$8 = ($8 + [8])
	
.LOOP $label$10:
	$0 = *($8)
	$8 = ($0 + [8])
	$7 = *($0 + [8])
	if ( ((int_32)$0 != (int_32)*($7)) ){ goto $label$10 }
	
.LABEL $label$7
	$6 = ($6 + [34])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $7($12, $6)
	$7 = *($12 + [4])
	$0 = *($12)
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$0 = [0]
	
.LABEL $label$3
	*($12 + [36]) = $0
	*($12 + [32]) = $0
	*($12 + [40]) = $7
	CALL $8(($12 + [32]), $2)
	$9 = *($12 + [4])
	$10 = *($12)
	
.LABEL $label$1
	$0 = [0]
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	$6 = [0]
	*($12 + [8]) = [0]
	*($12) = (int_64)0
	$5 = (CASTING uint_64)(uint_32 $2)
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$12 }
	$4 = ($1 + [4])
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	$8 = $7
	$0 = *($8 + [4])
	if ( ($0 == 0) ){ goto $label$18 }
	
.LOOP $label$19:
	$7 = $0
	$0 = *($7)
	if ( $0 ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$7 = *($8 + [8])
	if ( ((int_32)*($7) == (int_32)$8) ){ goto $label$17 }
	$8 = ($8 + [8])
	
.LOOP $label$20:
	$0 = *($8)
	$8 = ($0 + [8])
	$7 = *($0 + [8])
	if ( ((int_32)$0 != (int_32)*($7)) ){ goto $label$20 }
	
.LABEL $label$17
	$6 = ($6 + [16])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $7($12, $6)
	$7 = *($12 + [4])
	$0 = *($12)
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	$0 = [0]
	
.LABEL $label$13
	*($12 + [36]) = $0
	*($12 + [32]) = $0
	*($12 + [40]) = $7
	CALL $9(($12 + [32]), $1)
	$11 = *($12 + [4])
	$0 = *($12)
	
.LABEL $label$11
	$7 = *($12 + [16])
	$7 = CALL check_transaction_authorization($7, (*($12 + [20]) - $7), ( $10 ? [0] : $3 ), ( ($9 - $10) ? [0] : $3 ), ( $0 ? [0] : $2 ), ( ($11 - $0) ? [0] : $2 ))
	if ( ($0 == 0) ){ goto $label$21 }
	CALL $87($0)
	
.LABEL $label$21
	if ( ($10 == 0) ){ goto $label$22 }
	CALL $87($10)
	
.LABEL $label$22
	$0 = *($12 + [16])
	if ( ($0 == 0) ){ goto $label$23 }
	*($12 + [20]) = $0
	CALL $87($0)
	
.LABEL $label$23
	*([0] + [4]) = ($12 + [48])
	return ((int_32)$7 > (int_32)[0])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [16])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [16])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [16])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [16])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [16])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC _ZN5eosio30check_permission_authorizationEyyRKNSt3__13setI10public_keyNS0_4lessIS2_EENS0_9allocatorIS2_EEEERKNS1_INS_16permission_levelENS3_ISA_EENS5_ISA_EEEEy (int_64 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	*([0] + [4]) = $15
	$14 = [0]
	$12 = [0]
	$13 = [0]
	$5 = *($2 + [8])
	if ( ($5 == 0) ){ goto $label$1 }
	$8 = [0]
	*($15 + [8]) = [0]
	*($15) = (int_64)0
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$2:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$2 }
	$6 = ($2 + [4])
	$9 = *($2)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$11 = $9
	$10 = *($11 + [4])
	if ( ($10 == 0) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = $10
	$10 = *($9)
	if ( $10 ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = *($11 + [8])
	if ( ((int_32)*($9) == (int_32)$11) ){ goto $label$7 }
	$11 = ($11 + [8])
	
.LOOP $label$10:
	$10 = *($11)
	$11 = ($10 + [8])
	$9 = *($10 + [8])
	if ( ((int_32)$10 != (int_32)*($9)) ){ goto $label$10 }
	
.LABEL $label$7
	$8 = ($8 + [34])
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$6 }
	if ( ($8 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $7($15, $8)
	$9 = *($15 + [4])
	$10 = *($15)
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$10 = [0]
	
.LABEL $label$3
	*($15 + [20]) = $10
	*($15 + [16]) = $10
	*($15 + [24]) = $9
	CALL $8(($15 + [16]), $2)
	$12 = *($15 + [4])
	$13 = *($15)
	
.LABEL $label$1
	$10 = [0]
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	$8 = [0]
	*($15 + [8]) = [0]
	*($15) = (int_64)0
	$7 = (CASTING uint_64)(uint_32 $2)
	
.LOOP $label$12:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$12 }
	$6 = ($3 + [4])
	$9 = *($3)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$16:
	$11 = $9
	$10 = *($11 + [4])
	if ( ($10 == 0) ){ goto $label$18 }
	
.LOOP $label$19:
	$9 = $10
	$10 = *($9)
	if ( $10 ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$9 = *($11 + [8])
	if ( ((int_32)*($9) == (int_32)$11) ){ goto $label$17 }
	$11 = ($11 + [8])
	
.LOOP $label$20:
	$10 = *($11)
	$11 = ($10 + [8])
	$9 = *($10 + [8])
	if ( ((int_32)$10 != (int_32)*($9)) ){ goto $label$20 }
	
.LABEL $label$17
	$8 = ($8 + [16])
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$16 }
	if ( ($8 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $7($15, $8)
	$9 = *($15 + [4])
	$10 = *($15)
	goto $label$13 
	
.LABEL $label$14
	$9 = [0]
	$10 = [0]
	
.LABEL $label$13
	*($15 + [20]) = $10
	*($15 + [16]) = $10
	*($15 + [24]) = $9
	CALL $9(($15 + [16]), $3)
	$14 = *($15 + [4])
	$10 = *($15)
	
.LABEL $label$11
	$9 = CALL check_permission_authorization($0, $1, ( $13 ? [0] : $5 ), ( ($12 - $13) ? [0] : $5 ), ( $10 ? [0] : $2 ), ( ($14 - $10) ? [0] : $2 ), $4)
	if ( ($10 == 0) ){ goto $label$21 }
	CALL $87($10)
	
.LABEL $label$21
	if ( ($13 == 0) ){ goto $label$22 }
	CALL $87($13)
	
.LABEL $label$22
	*([0] + [4]) = ($15 + [32])
	return ((int_32)$9 > (int_32)[0])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	CALL $19(CALL $18(($3 + [8]), $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [16])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [16])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [16])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [16])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [16])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [16])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [16])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [16])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [16])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $14(CALL $15($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [16])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [16])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $14($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	*($1) = *(*(*($0 + [4])))
	$3 = ($1 + [8])
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$2 = *($0)
	$7 = [18]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[10]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-10])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [16])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $49($10, $3)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)3904810955002871808, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [32])
	*([0] + [4]) = $15
	*($0 + [8]) = $1
	*($0) = $1
	*(($0 + [16])) = $1
	*(($0 + [24])) = (int_64)-1
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	*(($0 + [44])) = [0]
	*($0 + [48]) = $1
	*(($9 = ($0 + [56]))) = $1
	*(($0 + [64])) = (int_64)-1
	*(($10 = ($0 + [72]))) = [0]
	*(($11 = ($0 + [76]))) = [0]
	*(($0 + [80])) = [0]
	$13 = ($0 + [8])
	$8 = CALL db_lowerbound_i64($1, $1, (int_64)3904810988646432768, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $52($13, $8)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($0 + [48])
	CALL $78(($15 + [24]), $13, $1, ($15 + [8]))
	*(($3 = CALL $86([48])) + [8]) = (int_64)-3617168760277827584
	*($3) = (int_64)-6150061882012073984
	*($3 + [16]) = (int_64)6301507086951235584
	*($3 + [24]) = (int_64)7746191359077253120
	*($3 + [32]) = (int_64)5029540019400867840
	*($3 + [40]) = (int_64)4301693180425797632
	$4 = ($3 + [48])
	$12 = $3
	
.LOOP $label$3:
	$5 = *($12)
	*($15 + [24]) = $5
	$6 = *($10)
	$14 = *($11)
	if ( ((int_32)$14 == (int_32)$6) ){ goto $label$4 }
	$13 = ($14 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$5:
	if ( ((int_64)*(*($13)) == (int_64)$5) ){ goto $label$4 }
	$14 = $13
	$8 = ($13 + [-24])
	$13 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ((int_32)$14 == (int_32)$6) ){ goto $label$8 }
	$13 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [20]) == (int_32)$2), [224])
	if ( $13 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$13 = CALL db_find_i64(*($2), *($9), (int_64)3904810955002871808, $5)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $44($2, $13) + [20]) == (int_32)$2), [224])
	goto $label$6 
	
.LABEL $label$7
	*($15 + [16]) = ($15 + [24])
	CALL $79(($15 + [8]), $2, $1, ($15 + [16]))
	
.LABEL $label$6
	$12 = ($12 + [8])
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$1 }
	CALL $87($3)
	
.LABEL $label$1
	*([0] + [4]) = ($15 + [32])
	return $0
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $20(($9 + [112]))
	CALL $21($0, ($9 + [112]), $1)
	if ( ((*($9 + [144]) & [1]) == 0) ){ goto $label$7 }
	CALL $87(*(($9 + [152])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 <= (int_64)3626071038508343807) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)5029540019400867839) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)3626071038508343808) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)3626411730319441920) ){ goto $label$9 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [1]
	*($9 + [16 align=4]) = *($9 + [88])
	CALL $27($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-4860355164866592768) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-4849453026911453184) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$9 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [2]
	*($9 + [48 align=4]) = *($9 + [56])
	CALL $33($0, ($9 + [48]))
	goto $label$7 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)5029540019400867840) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)7746191359077253120) ){ goto $label$9 }
	*($9 + [108]) = [0]
	*($9 + [104]) = [3]
	*($9) = *($9 + [104])
	CALL $23($0, $9)
	goto $label$7 
	
.LABEL $label$13
	*($9 + [68]) = [0]
	*($9 + [64]) = [4]
	*($9 + [40 align=4]) = *($9 + [64])
	CALL $25($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [76]) = [0]
	*($9 + [72]) = [5]
	*($9 + [32 align=4]) = *($9 + [72])
	CALL $30($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [84]) = [0]
	*($9 + [80]) = [6]
	*($9 + [24 align=4]) = *($9 + [80])
	CALL $25($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [100]) = [0]
	*($9 + [96]) = [7]
	*($9 + [8 align=4]) = *($9 + [96])
	CALL $25($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$9
	CALL $34(($9 + [112]))
	CALL $35($0, ($9 + [112]), $2, $1)
	if ( ((*($9 + [128]) & [1]) == 0) ){ goto $label$7 }
	CALL $87(*(($9 + [136])))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [160])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $59($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $89($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $86($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $89($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $87($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $88($7)
	return (unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [672])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $7($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [656])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [16])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [16])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $86(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $91($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $87($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	$3 = *($0 + [24])
	$8 = *(($0 + [28]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$7 = ($8 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($7 + [16])) == (int_32)$1) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($8 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$8 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($8 >> [31]) ^ (int_32)[1]), [624])
	if ( ((uint_32)$8 <= (uint_32)[512]) ){ goto $label$6 }
	$4 = CALL malloc($8)
	CALL db_get_i64($1, $4, $8)
	CALL free($4)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $4
	CALL db_get_i64($1, $4, $8)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $86([48])) + [16]) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [80])
	$11 = ($5 + [16])
	$6 = ($5 + [8])
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$3 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [144])
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$8 > (uint_32)[1]), [656])
	CALL memcpy($5, $4, [2])
	CALL eosio_assert(((uint_32)($8 + [-2]) > (uint_32)[7]), [656])
	CALL memcpy($6, ($4 + [2]), [8])
	CALL eosio_assert(((uint_32)($8 + [-10]) > (uint_32)[7]), [656])
	CALL memcpy($11, ($4 + [10]), [8])
	CALL eosio_assert(((uint_32)($8 + [-18]) > (uint_32)[7]), [656])
	CALL memcpy(($5 + [24]), ($4 + [18]), [8])
	*($5 + [40]) = [-1]
	*($5 + [36]) = $1
	*($10 + [24]) = $5
	$9 = *($5)
	*($10 + [16]) = $9
	$8 = *($5 + [36])
	*($10 + [12]) = $8
	$1 = ($0 + [28])
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($7 + [8]) = $9
	*($7 + [16]) = $8
	*($10 + [24]) = [0]
	*($7) = $5
	*($1) = ($7 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $53($2, ($10 + [24]), ($10 + [16]), ($10 + [12]))
	
.LABEL $label$12
	$7 = *($10 + [24])
	*($10 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $87($7)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [32])
	return $5
}

void .FUNC $53 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $86(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $87($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $87($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [672])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $56($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[1]), [656])
	CALL memcpy($7, *($4), [2])
	$6 = (*($4) + [2])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [656])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = (*([0] + [4]) - [16])
	$4 = $3
	*([0] + [4]) = $3
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$3 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($3 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$1
	CALL read_action_data($3, $1)
	*(($0 + [24])) = [0]
	*($0 + [16 align=4]) = (int_64)0
	*($4) = $3
	$2 = ($3 + $1)
	*($4 + [8]) = $2
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [656])
	CALL memcpy($0, $3, [8])
	$1 = ($3 + [8])
	CALL eosio_assert(((uint_32)($2 - $1) > (uint_32)[7]), [656])
	CALL memcpy(($0 + [8]), $1, [8])
	*($4 + [4]) = ($3 + [16])
	CALL $58($4, ($0 + [16]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$3 = int_32(($6 - $5) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$2 = ($2 - $5)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($2 >> [3])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL $86(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [16])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $91($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($6 << [4]))
	$5 = ($2 + ($3 << [4]))
	$6 = $5
	
.LOOP $label$9:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$10
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $87($1)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([720])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [80])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [48]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($10, $2)
	if ( (CALL $36($0, *($1), *($1 + [8])) == 0) ){ goto $label$5 }
	CALL $37(($12 + [48]), $0, ($1 + [16]))
	$7 = *($12 + [48])
	CALL printhex($7, (*($12 + [52]) - $7))
	$5 = *($1)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [64]
	$10 = (int_64)0
	
.LOOP $label$6:
	$11 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$7 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$4 = ($4 + [165])
	goto $label$8 
	
.LABEL $label$9
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$7
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$6 }
	if ( ((int_64)$5 != (int_64)$10) ){ goto $label$14 }
	$5 = *(($1 + [8]))
	$9 = (int_64)0
	$11 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$20 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$4 = ($4 + [165])
	goto $label$18 
	
.LABEL $label$20
	$8 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$16
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$15 }
	if ( ((int_64)$5 != (int_64)$10) ){ goto $label$14 }
	*(($12 + [24])) = (int_64)1397703940
	*($12 + [16]) = (int_64)0
	$7 = *($12 + [52])
	$1 = *($12 + [48])
	CALL eosio_assert([1], [80])
	$6 = ($7 - $1)
	$9 = (int_64)5459781
	$7 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$22 }
	
.LOOP $label$23:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$13 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$23 }
	
.LABEL $label$22
	$4 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$21 }
	goto $label$12 
	
.LABEL $label$14
	$9 = (int_64)0
	*(($12 + [24])) = (int_64)0
	*(($12 + [32])) = (int_64)0
	*($12 + [16]) = (int_64)0
	$2 = *($0)
	$11 = (int_64)59
	$7 = [176]
	$10 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$29 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$4 = ($4 + [165])
	goto $label$27 
	
.LABEL $label$29
	$8 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$25
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$8 | (int_64)$10)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$24 }
	*(($7 = CALL $86([16])) + [8]) = $10
	*($7) = $2
	CALL $40(($12 + [16]), $7, ($7 + [16]))
	*($12) = *($1)
	*($12 + [8]) = *(($1 + [8]))
	CALL $41(($12 + [28]), *($12 + [48]), *($12 + [52]))
	CALL $42(($12 + [64]), $12)
	$4 = *($12 + [64])
	CALL send_inline($4, (*($12 + [68]) - $4))
	$4 = *($12 + [64])
	if ( ($4 == 0) ){ goto $label$30 }
	*($12 + [68]) = $4
	CALL $87($4)
	
.LABEL $label$30
	if ( ($7 == 0) ){ goto $label$31 }
	CALL $87($7)
	
.LABEL $label$31
	$7 = *(($12 + [28]))
	if ( ($7 == 0) ){ goto $label$32 }
	*(($12 + [32])) = $7
	CALL $87($7)
	
.LABEL $label$32
	$7 = *(($12 + [16]))
	if ( ($7 == 0) ){ goto $label$11 }
	*(($12 + [20])) = $7
	CALL $87($7)
	$7 = *($12 + [48])
	if ( $7 ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$13
	$4 = [0]
	
.LABEL $label$12
	CALL eosio_assert($4, [144])
	*(($7 = ($12 + [40]))) = [0]
	*($12 + [32]) = (int_64)0
	*($12 + [68]) = $1
	*($12 + [64]) = $1
	*($12 + [72]) = ($1 + $6)
	CALL $38(($12 + [64]), $12)
	CALL $39($0, $12, $2, $3)
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $87(*($7))
	
.LABEL $label$11
	$7 = *($12 + [48])
	if ( ($7 == 0) ){ goto $label$5 }
	
.LABEL $label$10
	*($12 + [52]) = $7
	CALL $87($7)
	
.LABEL $label$5
	*([0] + [4]) = ($12 + [80])
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [112])
	*([0] + [4]) = $7
	*($7 + [104]) = $1
	*($7 + [96]) = $2
	CALL require_auth(*($0))
	*(($7 + [88])) = [0]
	*($7 + [72]) = (int_64)-1
	*($7 + [80]) = (int_64)0
	$5 = *($0)
	*($7 + [56]) = $5
	*($7 + [64]) = $5
	*($7 + [92]) = [0]
	*($7 + [40]) = $1
	*($7 + [32]) = $2
	*($7 + [24]) = ($7 + [56])
	CALL $60(($7 + [8]), ($7 + [24]), ($7 + [32]))
	$4 = *($7 + [12])
	if ( ($4 == 0) ){ goto $label$2 }
	$4 = ((int_64)((int_64)((int_64)*($7 + [32]) ^ (int_64)*($4 + [16])) | (int_64)((int_64)*($7 + [40]) ^ (int_64)*($4 + [8]))) != (int_64)0)
	goto $label$1 
	
.LABEL $label$2
	$4 = [1]
	
.LABEL $label$1
	CALL eosio_assert($4, [1088])
	$2 = *($0)
	*($7 + [12]) = ($7 + [104])
	*($7 + [8]) = ($7 + [56])
	*($7 + [16]) = ($7 + [96])
	CALL $66($7, ($7 + [56]), $2, ($7 + [8]))
	$3 = *($7 + [80])
	if ( ($3 == 0) ){ goto $label$3 }
	$6 = ($7 + [84])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $87($4)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($7 + [80]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $3
	
.LABEL $label$4
	*($6) = $3
	CALL $87($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [112])
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL require_auth(*($0))
	$2 = *(($0 + [32]))
	$6 = *(($0 + [36]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [8])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [224])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)3904810988646432768, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $52($4, $6)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$4), [224])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [832])
	CALL eosio_assert($6, [880])
	$6 = CALL db_next_i64(*($5 + [36]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $52($4, $6)
	
.LABEL $label$5
	CALL $69($4, $5)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $86(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $87($6)
	
.LABEL $label$11
	CALL $87($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $87($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	$14 = (*([0] + [4]) - [80])
	*([0] + [4]) = $14
	$10 = *($0)
	$11 = *($1)
	if ( ((int_64)$11 != (int_64)$10) ){ goto $label$3 }
	CALL require_auth($11)
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_64)*($1 + [8]) != (int_64)$10) ){ goto $label$2 }
	CALL eosio_assert([1], [1552])
	$8 = [0]
	if ( ((uint_64)((int_64)*($1 + [16]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$11 = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	CALL eosio_assert($8, [1600])
	CALL eosio_assert(((int_64)*(($1 + [16])) > (int_64)0), [1632])
	CALL $92(($14 + [56]), ($1 + [32]))
	*(($14 + [24])) = [0]
	*($14 + [16]) = (int_64)0
	$9 = CALL strlen([1664])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$11 }
	*($14 + [16]) = ($9 << [1])
	$8 = (($14 + [16]) | [1])
	if ( $9 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$7 = (($9 + [16]) & [-16])
	$8 = CALL $86($7)
	*($14 + [16]) = ($7 | [1])
	*($14 + [24]) = $8
	*($14 + [20]) = $9
	
.LABEL $label$10
	CALL memcpy($8, [1664], $9)
	
.LABEL $label$9
	*(($8 + $9)) = [0]
	CALL $76($0, ($14 + [56]), ($14 + [16]))
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $87(*($14 + [24]))
	
.LABEL $label$12
	$9 = *($14 + [56])
	CALL eosio_assert(((uint_32)( *($14 + [60]) ? uint_32($9 >> [1]) : ($9 & [1]) ) > (uint_32)[1]), [1440])
	$7 = CALL strlen([1488])
	$5 = ( *($14 + [64]) ? (($14 + [56]) | [1]) : $9 )
	$3 = ((int_32)*($5) == (int_32)[46])
	$9 = ($9 & [1])
	$9 = *($14 + [56])
	$8 = ( *($14 + [60]) ? uint_32($9 >> [1]) : $9 )
	if ( ((uint_32)$8 <= (uint_32)$3) ){ goto $label$14 }
	$9 = ($5 + $3)
	if ( ($7 == 0) ){ goto $label$15 }
	$8 = ($8 - $3)
	
.LOOP $label$16:
	if ( (CALL memchr([1488], *($9), $7) == 0) ){ goto $label$15 }
	$9 = ($9 + [1])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$9 = ($9 - $5)
	if ( ((int_32)$9 != (int_32)[-1]) ){ goto $label$13 }
	
.LABEL $label$14
	$9 = *($14 + [56])
	if ( ($9 & [1]) ){ goto $label$17 }
	$9 = uint_32($9 >> [1])
	goto $label$13 
	
.LABEL $label$17
	$9 = *($14 + [60])
	
.LABEL $label$13
	$9 = ($9 - $3)
	CALL eosio_assert((($9 + [-2]) <= [10]), [1680])
	CALL $93(($14 + [40]), ($14 + [56]), $3, $9, ($14 + [56]))
	$9 = ( *($14 + [48]) ? (($14 + [40]) | [1]) : (*($14 + [40]) & [1]) )
	$8 = [-1]
	
.LOOP $label$18:
	$7 = ($9 + $8)
	$3 = ($8 + [1])
	$8 = $3
	if ( *(($7 + [1])) ){ goto $label$18 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$11 = (int_64)0
	$10 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$19:
	$13 = (int_64)0
	if ( ((uint_64)$11 >= (uint_64)$4) ){ goto $label$20 }
	$8 = *($9)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$8 = ($8 + [165])
	goto $label$21 
	
.LABEL $label$22
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$24 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	goto $label$23 
	
.LABEL $label$24
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$23
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$10 = ((int_64)$10 + (int_64)-5)
	if ( ((int_64)$10 != (int_64)-6) ){ goto $label$19 }
	*($14 + [32]) = ($0 + [8])
	*($14 + [24]) = (int_64)0
	*($14 + [16]) = *(($1 + [24]))
	CALL $45(($14 + [72]), ($14 + [32]), ($14 + [16]))
	$9 = [0]
	$8 = *($14 + [76])
	if ( ($8 == 0) ){ goto $label$25 }
	$9 = ( $8 ? [0] : (int_64)(((int_64)((int_64)*($14 + [16]) ^ (int_64)*(($8 + [16]))) | (int_64)*($14 + [24])) == 0) )
	
.LABEL $label$25
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [320])
	$11 = *(($9 + [24]))
	$9 = *($9)
	*($14 + [14]) = $9
	CALL prints([1712])
	CALL printui(((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)65535))
	CALL eosio_assert(((int_64)$11 == (int_64)$2), [1728])
	$6 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$26 }
	$9 = ($7 + [-24])
	$3 = ([0] - $6)
	
.LOOP $label$27:
	if ( ((int_64)*(*($9)) == (int_64)$12) ){ goto $label$26 }
	$7 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$27 }
	
.LABEL $label$26
	$5 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$29 }
	$3 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [20]) == (int_32)$5), [224])
	goto $label$28 
	
.LABEL $label$29
	$9 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)3904810955002871808, $12)
	if ( ((int_32)$9 <= (int_32)[-1]) ){ goto $label$30 }
	$3 = CALL $44($5, $9)
	CALL eosio_assert(((int_32)*($3 + [20]) == (int_32)$5), [224])
	goto $label$28 
	
.LABEL $label$30
	$3 = [0]
	
.LABEL $label$28
	*($14 + [76]) = $3
	*($14 + [72]) = $5
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1760])
	$6 = ($3 + [12])
	$8 = *($6)
	$9 = *($3 + [8])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$31 }
	$7 = (*($14 + [14]) & [65535])
	
.LOOP $label$32:
	if ( ((int_32)*($9) == (int_32)$7) ){ goto $label$31 }
	$9 = ($9 + [16])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$32 }
	$9 = $8
	
.LABEL $label$31
	$7 = *($6)
	*($14 + [8]) = $9
	$8 = [1]
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$33 }
	$11 = *($9 + [8])
	$8 = ((uint_64)((int_64)*(($1 + [16])) + (int_64)$11) > (uint_64)$11)
	
.LABEL $label$33
	CALL eosio_assert($8, [416])
	$11 = *($0)
	*($14 + [28]) = $1
	*($14 + [20]) = ($14 + [72])
	*($14 + [16]) = ($14 + [8])
	*($14 + [24]) = ($14 + [14])
	CALL $77($5, $3, $11, ($14 + [16]))
	if ( ((*($14 + [40]) & [1]) == 0) ){ goto $label$34 }
	CALL $87(*(($14 + [48])))
	
.LABEL $label$34
	if ( ((*($14 + [56]) & [1]) == 0) ){ goto $label$2 }
	CALL $87(*(($14 + [64])))
	
.LABEL $label$2
	*([0] + [4]) = ($14 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $88(($14 + [16]))
}

void .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [80])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [144])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $38($6, $0)
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $22 (int_32 $0)
{
	CALL prints([1536])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [656])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $24 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	*($11 + [40]) = $1
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [48]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	*($11 + [16]) = $1
	CALL $73(($11 + [24]), ($11 + [16]))
	$5 = *($11 + [24])
	CALL eosio_assert((( *($11 + [28]) ? uint_32($5 >> [1]) : ($5 & [1]) ) <= [12]), [1408])
	CALL eosio_assert((((*(( *($11 + [32]) ? (($11 + [24]) | [1]) : (*($11 + [24]) & [1]) )) + [-97]) & [255]) <= [26]), [1440])
	$3 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$5 }
	$10 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [48])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$8 }
	$2 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$5), [224])
	goto $label$7 
	
.LABEL $label$8
	$2 = [0]
	$10 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)3904810955002871808, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $44($5, $10)
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$5), [224])
	
.LABEL $label$7
	CALL eosio_assert(($2 == 0), [1456])
	$7 = *($0)
	*($11 + [8]) = ($11 + [40])
	CALL $74(($11 + [16]), $5, $7, ($11 + [8]))
	if ( ((*($11 + [24]) & [1]) == 0) ){ goto $label$9 }
	CALL $87(*(($11 + [32])))
	
.LABEL $label$9
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*($9 + [32]) = (int_64)1397703940
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [80])
	$6 = (int_64)5459781
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [144])
	*($9 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [656])
	CALL memcpy(($9 + [24]), $5, [8])
	$1 = ($3 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [656])
	$7 = (($9 + [24]) + [8])
	CALL memcpy($7, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [656])
	$1 = (($9 + [24]) + [16])
	CALL memcpy($1, ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($3 = (($9 + [48]) + [8]))) = *($7)
	*($9 + [48]) = *($9 + [24])
	$6 = *($1)
	*((($9 + [64]) + [8])) = *($3)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 ($9 + [8])), (int_32 $6), (int_64 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $26 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	$3 = ($0 + [8])
	*($6 + [56]) = $3
	*($6 + [40]) = (int_64)0
	*($6 + [32]) = *($1 + [8])
	CALL $45(($6 + [64]), ($6 + [56]), ($6 + [32]))
	$5 = *($6 + [68])
	if ( ($5 == 0) ){ goto $label$2 }
	$5 = ((int_64)((int_64)((int_64)*($6 + [32]) ^ (int_64)*(($5 + [16]))) | (int_64)*($6 + [40])) != (int_64)0)
	goto $label$1 
	
.LABEL $label$2
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [1376])
	*(($5 = (($6 + [16]) + [8]))) = *(($1 + [8]))
	*($6 + [16]) = *($1)
	$4 = *($5)
	*((($6 + [64]) + [8])) = $4
	*((($6 + [32]) + [8])) = $4
	$4 = *($6 + [16])
	*($6 + [64]) = $4
	*($6 + [32]) = $4
	*($6 + [48]) = $2
	$2 = *($0)
	*($6 + [64]) = $0
	*($6 + [68]) = ($6 + [32])
	CALL $70(($6 + [8]), $3, $2, ($6 + [64]))
	*([0] + [4]) = ($6 + [80])
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [960])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	$6 = (*($1) & [65535])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [1024])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $87($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $87($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
	$7 = *(($1 + [40]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)3904810988646432768, $9, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx128_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [28]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1328])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)3617211078187941888)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1264])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1264])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $61(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [960])
	$2 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$8 = ($7 + [-24])
	$6 = (*($1) & [65535])
	
.LOOP $label$2:
	if ( ((int_32)*(*($8)) == (int_32)$6) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$2), [1024])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $87($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $87($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
	$7 = *(($1 + [32]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)3617211078187941888, $9, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx128_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $92(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $92(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $87(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $87(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$8 = *($4 + [16])
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)3617211078187941888, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $61($4, $5)
	*($9 + [4]) = [0]
	*($9) = $4
	$8 = ((int_64)*(*(CALL $68($9) + [4])) + (int_64)1)
	
.LABEL $label$2
	*(($4 + [16])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [1200])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$4 = $10
	$10 = ($4 + [-32])
	*([0] + [4]) = $10
	CALL eosio_assert([1], [16])
	CALL memcpy($10, $1, [2])
	CALL eosio_assert([1], [16])
	$3 = ($1 + [8])
	CALL memcpy(($4 + [-30]), $3, [8])
	CALL eosio_assert([1], [16])
	$4 = ($1 + [16])
	CALL memcpy(($4 + [-22]), $4, [8])
	$8 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)3617211078187941888, *(*($0 + [8])), $8, $10, [18])
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$3
	$8 = *(($2 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($9 + [8]) = *($3)
	*($9) = *($4)
	*($1 + [32]) = CALL db_idx128_store($8, (int_64)3617211078187941888, $6, $7, $9)
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [1136])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $86([40])) + [24]) = $1
	CALL $67(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $62(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $87($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [624])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $86([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[1]), [656])
	CALL memcpy($6, $7, [2])
	CALL eosio_assert(((uint_32)($4 + [-2]) > (uint_32)[7]), [656])
	CALL memcpy(($6 + [8]), ($7 + [2]), [8])
	CALL eosio_assert(((uint_32)($4 + [-10]) > (uint_32)[7]), [656])
	CALL memcpy(($6 + [16]), ($7 + [10]), [8])
	*($6 + [32]) = [-1]
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $62(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $87($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx128_lowerbound(*($8), *($8 + [8]), (int_64)3617211078187941888, $10, ($10 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [24])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $61($4, CALL $fimport$7(*($4), *($4 + [8]), (int_64)3617211078187941888, $5))
	CALL eosio_assert(((int_32)*($2 + [24]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [32])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [656])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [656])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [656])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $58(*($1), ($0 + [32]))
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $86(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $91($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $87($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $87($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $86(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $87($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $88 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $87 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10300])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10188])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9996]
	$1 = (((int_32)$2 * (int_32)[12]) + [9996])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $84 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10294]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10296])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10294]) = [1]
	$7 = ($7 << [16])
	*([0] + [10296]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10296])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10296]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10294]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10294]) = [1]
	$3 = ($3 << [16])
	*([0] + [10296]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10296])
	
.LABEL $label$8
	*([0] + [10296]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $84($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10208])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $83([1804], $0)
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	*($1) = [0]
	$2 = *($0)
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1792]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	CALL eosio_assert([1], [80])
	$7 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [144])
	*(($3 = ($1 + [16]))) = (int_64)1397703940
	*($1 + [8]) = (int_64)0
	*(($4 = ($1 + [24]))) = $8
	$5 = $11
	$11 = ($5 + [-32])
	*([0] + [4]) = $11
	CALL eosio_assert([1], [16])
	CALL memcpy($11, $1, [2])
	CALL eosio_assert([1], [16])
	CALL memcpy(($5 + [-30]), ($1 + [8]), [8])
	CALL eosio_assert([1], [16])
	CALL memcpy(($5 + [-22]), $3, [8])
	CALL eosio_assert([1], [16])
	CALL memcpy(($5 + [-14]), $4, [8])
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)3904810988646432768, *(*($0 + [8])), $7, $11, [26])
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$12 }
	*(($2 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$12
	$7 = *(($2 + [8]))
	$9 = *(*(($0 + [8])))
	$6 = *($1)
	*($10 + [8]) = (int_64)0
	*($10) = *($3)
	*($1 + [40]) = CALL db_idx128_store($7, (int_64)3904810988646432768, $9, $6, $10)
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	*($1) = *(*(*($0 + [4])))
	$3 = ($1 + [8])
	$5 = *($1 + [8])
	$4 = *(($1 + [12]))
	$6 = ($4 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($6 >> [4]))
	$2 = *($0)
	$7 = [18]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$3 }
	$7 = (((int_32)uint_32(($6 + [-16]) >> [4]) * (int_32)[10]) + $7)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 + [-10])
	
.LABEL $label$2
	if ( ($7 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($7)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL eosio_assert(((int_32)$7 > (int_32)[7]), [16])
	CALL memcpy($9, $1, [8])
	*($10 + [4]) = ($9 + [8])
	CALL $49($10, $3)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)3904810955002871808, *(*($0 + [8])), $8, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [36]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1328])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)3904810988646432768)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1264])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1264])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $52(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $86([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1480]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $93($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $89($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [1136])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $86([48])) + [16]) = (int_64)1397703940
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [80])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [144])
	*($4 + [32]) = $1
	CALL $71(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [36])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $53(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $87($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$8 = (*([0] + [4]) - [16])
	$12 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$7 = *($0 + [4])
	$6 = *($7)
	$5 = ($6 + [24])
	$11 = *($5)
	if ( ((int_64)$11 != (int_64)-1) ){ goto $label$1 }
	$11 = (int_64)0
	$3 = ($6 + [8])
	$4 = CALL db_lowerbound_i64(*($3), *(($6 + [16])), (int_64)3904810988646432768, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $52($3, $4)
	*($12 + [4]) = [0]
	*($12) = $3
	$11 = ((int_64)*(*(CALL $72($12) + [4])) + (int_64)1)
	
.LABEL $label$2
	*(($6 + [24])) = $11
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($11 <= (int_64)-2), [1200])
	*($1) = *($5)
	$6 = *($7 + [4])
	*($1 + [8]) = *($6)
	*(($5 = ($1 + [24]))) = *(($6 + [16]))
	*(($7 = ($1 + [16]))) = *(($6 + [8]))
	$8 = $8
	$6 = ($8 + [-32])
	*([0] + [4]) = $6
	CALL eosio_assert([1], [16])
	CALL memcpy($6, $1, [2])
	CALL eosio_assert([1], [16])
	CALL memcpy(($8 + [-30]), ($1 + [8]), [8])
	CALL eosio_assert([1], [16])
	CALL memcpy(($8 + [-22]), $7, [8])
	CALL eosio_assert([1], [16])
	CALL memcpy(($8 + [-14]), $5, [8])
	$11 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)3904810988646432768, *(*($0 + [8])), $11, $6, [26])
	if ( (uint_64)($11 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ((int_64)$11 + (int_64)1)
	
.LABEL $label$3
	$11 = *(($2 + [8]))
	$9 = *(*(($0 + [8])))
	$10 = *($1)
	*($12 + [8]) = (int_64)0
	*($12) = *($7)
	*($1 + [40]) = CALL db_idx128_store($11, (int_64)3904810988646432768, $9, $10, $12)
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($2 + [1])
	$3 = ($1 + [1])
	$10 = ($10 & [1])
	$10 = *($1)
	$9 = ( *($1 + [4]) ? uint_32($10 >> [1]) : $10 )
	if ( ($9 == 0) ){ goto $label$2 }
	$4 = ( *($1 + [8]) ? $3 : $10 )
	$10 = $4
	$6 = ($6 & [1])
	$6 = *($2)
	$8 = ( *($2 + [4]) ? uint_32($6 >> [1]) : $6 )
	if ( ($8 == 0) ){ goto $label$3 }
	$7 = ( *($2 + [8]) ? $5 : $6 )
	$10 = $4
	
.LOOP $label$4:
	if ( (CALL memchr($7, *($10), $8) == 0) ){ goto $label$3 }
	$6 = [-1]
	$10 = ($10 + [1])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$6 = ($10 - $4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [-1]
	
.LABEL $label$1
	$9 = [0]
	CALL $90($1, [0], $6)
	$6 = ($10 & [1])
	$10 = *($1)
	$10 = ( *(($1 + [4])) ? uint_32($10 >> [1]) : $6 )
	$6 = ( *(($1 + [8])) ? $3 : $6 )
	$7 = ($8 & [1])
	$8 = *($2)
	$8 = ( *(($2 + [4])) ? uint_32($8 >> [1]) : $7 )
	if ( ($8 == 0) ){ goto $label$8 }
	$7 = ( *(($2 + [8])) ? $5 : $7 )
	
.LOOP $label$9:
	if ( ($10 == 0) ){ goto $label$6 }
	$9 = ($6 + $10)
	$10 = ($10 + [-1])
	if ( CALL memchr($7, *(($9 + [-1])), $8) ){ goto $label$9 }
	$10 = ($6 + $10)
	goto $label$7 
	
.LABEL $label$8
	if ( ($10 == 0) ){ goto $label$5 }
	$10 = (($6 + $10) + [-1])
	
.LABEL $label$7
	$9 = (([1] - $6) + $10)
	goto $label$5 
	
.LABEL $label$6
	$9 = [0]
	
.LABEL $label$5
	CALL $90($1, $9, [-1])
	return $1
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [448])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [496])
	$5 = ($1 + [8])
	$4 = *($1)
	if ( ((int_32)*(*($3)) == (int_32)*((*(*($3 + [4]) + [4]) + [12]))) ){ goto $label$2 }
	$8 = ($1 + [12])
	$6 = *($8)
	$9 = *($5)
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$3 }
	$7 = (*(*($3 + [8])) & [65535])
	
.LOOP $label$4:
	if ( ((int_32)*($9) == (int_32)$7) ){ goto $label$3 }
	$9 = ($9 + [16])
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$4 }
	$9 = $6
	
.LABEL $label$3
	*($9 + [8]) = ((int_64)*($9 + [8]) + (int_64)*(*($3 + [12]) + [16]))
	$10 = $4
	goto $label$1 
	
.LABEL $label$2
	*($11) = *(*($3 + [8]))
	*($11 + [8]) = *(*($3 + [12]) + [16])
	$8 = ($1 + [12])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [16]))) ){ goto $label$6 }
	*($9) = *($11)
	*(($9 + [8])) = *(($11 + [8]))
	*($8) = (*($8) + [16])
	goto $label$5 
	
.LABEL $label$6
	CALL $51($5, $11)
	
.LABEL $label$5
	$10 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$10), [560])
	$7 = *($5)
	$6 = *($8)
	$3 = ($6 - $7)
	$10 = (CASTING uint_64)(uint_32 int_32($3 >> [4]))
	$9 = [18]
	
.LOOP $label$7:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$9 }
	$9 = (((int_32)uint_32(($3 + [-16]) >> [4]) * (int_32)[10]) + $9)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($9 + [-10])
	
.LABEL $label$8
	if ( ($9 <= [513]) ){ goto $label$11 }
	$6 = CALL malloc($9)
	goto $label$10 
	
.LABEL $label$11
	$6 = ($12 - (($9 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$10
	*($11) = $6
	*($11 + [8]) = ($6 + $9)
	CALL eosio_assert(((int_32)$9 > (int_32)[7]), [16])
	CALL memcpy($6, $1, [8])
	*($11 + [4]) = ($6 + [8])
	CALL $49($11, $5)
	CALL db_update_i64(*($1 + [24]), $2, $6, $9)
	if ( ($9 <= [513]) ){ goto $label$12 }
	CALL free($6)
	
.LABEL $label$12
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [1136])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $86([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $75(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $55(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL $87($1)
	
.LABEL $label$4
	CALL $87($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [144])
	*([0] + [4]) = $19
	$14 = (int_64)0
	$13 = (int_64)59
	$12 = [48]
	$15 = (int_64)0
	
.LOOP $label$1:
	$16 = (int_64)0
	if ( ((uint_64)$14 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($12)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth2($15, $2)
	$14 = *($1 + [8])
	CALL printn(*($1))
	CALL prints([192])
	CALL printn($14)
	CALL prints([192])
	$5 = ($1 + [16])
	CALL $43($5)
	CALL prints([192])
	$12 = *($1 + [32])
	$4 = ($12 & [1])
	CALL prints_l(( *(($1 + [40])) ? ($1 + [33]) : $4 ), ( *(($1 + [36])) ? uint_32($12 >> [1]) : $4 ))
	CALL prints([192])
	$4 = [0]
	if ( ((uint_64)((int_64)*($1 + [16]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$5 }
	$14 = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	$12 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$14 = (uint_64)$14 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$14) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$4 = [1]
	$12 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$4 = [0]
	
.LABEL $label$5
	CALL eosio_assert($4, [208])
	CALL eosio_assert(((int_64)*($5) > (int_64)0), [208])
	$18 = *(($0 + [72]))
	$17 = *(($0 + [76]))
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$10 }
	$12 = ($17 + [-24])
	$7 = ([0] - $18)
	
.LOOP $label$11:
	if ( ((int_64)*(*($12)) == (int_64)$2) ){ goto $label$10 }
	$17 = $12
	$4 = ($12 + [-24])
	$12 = $4
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = ($0 + [48])
	if ( ((int_32)$17 == (int_32)$18) ){ goto $label$13 }
	$18 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($18 + [20]) == (int_32)$6), [224])
	goto $label$12 
	
.LABEL $label$13
	$18 = [0]
	$12 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)3904810955002871808, $2)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$12 }
	$18 = CALL $44($6, $12)
	CALL eosio_assert(((int_32)*($18 + [20]) == (int_32)$6), [224])
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$18 != (int_32)[0]), [288])
	*($19 + [104]) = ($0 + [8])
	*($19 + [8]) = (int_64)0
	*($19) = *(($1 + [24]))
	CALL $45(($19 + [56]), ($19 + [104]), $19)
	$12 = [0]
	$4 = *($19 + [60])
	if ( ($4 == 0) ){ goto $label$14 }
	$12 = ( $4 ? [0] : (int_64)(((int_64)((int_64)*($19) ^ (int_64)*(($4 + [16]))) | (int_64)*($19 + [8])) == 0) )
	
.LABEL $label$14
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [320])
	$17 = *($12)
	*($19 + [102]) = $17
	$8 = *(($12 + [24]))
	$4 = *(($18 + [12]))
	$12 = *($18 + [8])
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$17 }
	$17 = ($17 & [65535])
	
.LOOP $label$18:
	if ( ((int_32)*($12) == (int_32)$17) ){ goto $label$17 }
	$12 = ($12 + [16])
	if ( ((int_32)$4 != (int_32)$12) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$16 }
	$12 = ((uint_64)*($12 + [8]) >= (uint_64)*($5))
	goto $label$15 
	
.LABEL $label$16
	$12 = [0]
	
.LABEL $label$15
	CALL eosio_assert($12, [352])
	$9 = *(($1 + [8]))
	if ( ((uint_64)((int_64)$9 + (int_64)-1) > (uint_64)(int_64)576460752303423486) ){ goto $label$25 }
	$14 = ((int_64)$9 << (int_64)5)
	$10 = *(($0 + [72]))
	$17 = *(($0 + [76]))
	if ( ((int_32)$17 == (int_32)$10) ){ goto $label$26 }
	$12 = ($17 + [-24])
	$7 = ([0] - $10)
	
.LOOP $label$27:
	if ( ((int_64)*(*($12)) == (int_64)$14) ){ goto $label$26 }
	$17 = $12
	$4 = ($12 + [-24])
	$12 = $4
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$17 == (int_32)$10) ){ goto $label$24 }
	$7 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$6), [224])
	goto $label$20 
	
.LABEL $label$25
	$17 = ($1 + [32])
	$11 = *($0)
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [176]
	$15 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$14 > (uint_64)(int_64)5) ){ goto $label$33 }
	$4 = *($12)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$4 = ($4 + [165])
	goto $label$31 
	
.LABEL $label$33
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$29
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = ((int_64)$13 | (int_64)$15)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$28 }
	$14 = (int_64)0
	$16 = (int_64)59
	$12 = [32]
	$2 = (int_64)0
	
.LOOP $label$34:
	if ( ((uint_64)$14 > (uint_64)(int_64)7) ){ goto $label$39 }
	$4 = *($12)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$4 = ($4 + [165])
	goto $label$37 
	
.LABEL $label$39
	$13 = (int_64)0
	if ( ((uint_64)$14 <= (uint_64)(int_64)11) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$36
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$35
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$2 = ((int_64)$13 | (int_64)$2)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$34 }
	*(($19 + [28])) = *(($5 + [12]))
	*(($19 + [24])) = *(($5 + [8]))
	*(($19 + [20])) = *(($5 + [4]))
	*($19 + [8]) = $9
	*($19) = $11
	*($19 + [16]) = *($5)
	CALL $92(($19 + [32]), $17)
	*($19 + [64]) = $2
	*($19 + [56]) = $8
	*(($12 = CALL $86([16]))) = $11
	*($12 + [8]) = $15
	*((($19 + [56]) + [32])) = [0]
	$4 = ($12 + [16])
	*((($19 + [56]) + [24])) = $4
	*((($19 + [56]) + [20])) = $4
	*($19 + [72]) = $12
	*($19 + [84]) = [0]
	*((($19 + [56]) + [36])) = [0]
	$12 = *($19 + [32])
	$4 = ( *(($19 + [36])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$12 = ($4 + [32])
	$14 = (CASTING uint_64)(uint_32 $4)
	$4 = (($19 + [56]) + [28])
	
.LOOP $label$40:
	$12 = ($12 + [1])
	$14 = (uint_64)$14 >> (uint_64)(int_64)7
	if ( ((int_64)$14) != (int_64)0) ){ goto $label$40 }
	if ( ($12 == 0) ){ goto $label$23 }
	CALL $7($4, $12)
	$4 = *(($19 + [88]))
	$12 = *(($19 + [84]))
	goto $label$22 
	
.LABEL $label$24
	$12 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)3904810955002871808, $14)
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$21 }
	$7 = CALL $44($6, $12)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$6), [224])
	goto $label$20 
	
.LABEL $label$23
	$4 = [0]
	$12 = [0]
	
.LABEL $label$22
	*($19 + [116]) = $12
	*($19 + [112]) = $12
	*($19 + [120]) = $4
	*($19 + [128]) = ($19 + [112])
	*($19 + [136]) = $19
	CALL $47(($19 + [136]), ($19 + [128]))
	CALL $42(($19 + [112]), ($19 + [56]))
	$12 = *($19 + [112])
	CALL send_inline($12, (*($19 + [116]) - $12))
	$12 = *($19 + [112])
	if ( ($12 == 0) ){ goto $label$41 }
	*($19 + [116]) = $12
	CALL $87($12)
	
.LABEL $label$41
	$12 = *($19 + [84])
	if ( ($12 == 0) ){ goto $label$42 }
	*(($19 + [88])) = $12
	CALL $87($12)
	
.LABEL $label$42
	$12 = *($19 + [72])
	if ( ($12 == 0) ){ goto $label$43 }
	*(($19 + [76])) = $12
	CALL $87($12)
	
.LABEL $label$43
	if ( ((*($19 + [32]) & [1]) == 0) ){ goto $label$19 }
	CALL $87(*(($19 + [40])))
	goto $label$19 
	
.LABEL $label$21
	$7 = [0]
	
.LABEL $label$20
	*($19 + [60]) = $7
	*($19 + [56]) = $6
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [384])
	$10 = ($7 + [12])
	$4 = *($10)
	$12 = *($7 + [8])
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$44 }
	$17 = (*($19 + [102]) & [65535])
	
.LOOP $label$45:
	if ( ((int_32)*($12) == (int_32)$17) ){ goto $label$44 }
	$12 = ($12 + [16])
	if ( ((int_32)$4 != (int_32)$12) ){ goto $label$45 }
	$12 = $4
	
.LABEL $label$44
	$4 = *($10)
	*($19 + [112]) = $12
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$47 }
	$14 = *($12 + [8])
	$12 = ((uint_64)((int_64)*($5) + (int_64)$14) > (uint_64)$14)
	goto $label$46 
	
.LABEL $label$47
	$12 = [1]
	
.LABEL $label$46
	CALL eosio_assert($12, [416])
	$14 = *($0)
	*($19 + [12]) = $1
	*($19 + [4]) = ($19 + [56])
	*($19) = ($19 + [112])
	*($19 + [8]) = ($19 + [102])
	CALL $46($6, $7, $14, $19)
	
.LABEL $label$19
	$14 = *($0)
	*($19 + [4]) = $1
	*($19) = ($19 + [102])
	CALL $48($6, $18, $14, $19)
	*([0] + [4]) = ($19 + [144])
}

int_32 .FUNC $36 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($6 + [56]) = $1
	*($6 + [48]) = $2
	$5 = [0]
	*(($6 + [40])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$2 = *($0)
	*($6 + [8]) = $2
	*($6 + [16]) = $2
	*($6 + [44]) = [0]
	*($6) = ($6 + [8])
	CALL $60(($6 + [72]), $6, ($6 + [48]))
	$0 = *($6 + [76])
	if ( ($0 == 0) ){ goto $label$1 }
	$5 = (int_64)(((int_64)((int_64)*($6 + [48]) ^ (int_64)*($0 + [16])) | (int_64)((int_64)*($6 + [56]) ^ (int_64)*($0 + [8]))) == 0)
	
.LABEL $label$1
	CALL eosio_assert($5, [752])
	$3 = *($6 + [32])
	if ( ($3 == 0) ){ goto $label$2 }
	$4 = ($6 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $87($0)
	
.LABEL $label$6
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$5 }
	$5 = *(($6 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$5 = $3
	
.LABEL $label$3
	*($4) = $3
	CALL $87($5)
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [80])
	return [1]
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$7 = *($2)
	CALL eosio_assert((((int_32)( *($2 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ) ^ (int_32)[-1]) & [1]), [736])
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$7 = *($2)
	$9 = uint_32(( *($2 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ) >> [1])
	if ( ($9 == 0) ){ goto $label$1 }
	$7 = CALL $86($9)
	*($0) = $7
	*(($0 + [4])) = $7
	$10 = ($7 + $9)
	*(($0 + [8])) = $10
	$8 = ([0] - $9)
	
.LOOP $label$2:
	*($7) = [0]
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$2 }
	*(($0 + [4])) = $10
	$3 = ($2 + [1])
	$7 = *($0)
	$8 = [0]
	$5 = ($2 + [8])
	
.LOOP $label$3:
	$10 = [-48]
	$6 = (( *($5) ? $3 : (*($2) & [1]) ) + $8)
	$0 = *($6)
	if ( ((($0 + [-48]) & [255]) <= [10]) ){ goto $label$6 }
	$10 = [-55]
	if ( ((uint_32)(($0 + [-65]) & [255]) >= (uint_32)[26]) ){ goto $label$5 }
	
.LABEL $label$6
	$0 = ($10 + $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = ( ($0 + [-87]) ? [-1] : ((($0 + [-97]) & [255]) <= [26]) )
	
.LABEL $label$4
	$4 = ($0 << [4])
	$10 = [-48]
	$0 = *(($6 + [1]))
	if ( ((($0 + [-48]) & [255]) <= [10]) ){ goto $label$9 }
	$10 = [-55]
	if ( ((uint_32)(($0 + [-65]) & [255]) >= (uint_32)[26]) ){ goto $label$8 }
	
.LABEL $label$9
	$0 = ($10 + $0)
	goto $label$7 
	
.LABEL $label$8
	$0 = ( ($0 + [-87]) ? [-1] : ((($0 + [-97]) & [255]) <= [26]) )
	
.LABEL $label$7
	*($7) = ($0 | $4)
	$7 = ($7 + [1])
	$8 = ($8 + [2])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$3 }
	
.LABEL $label$1
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [1136])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $86([48])) + [16]) = (int_64)1397703940
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [80])
	$2 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [144])
	*($4 + [32]) = $1
	CALL $81(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [36])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $53(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $87($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [1136])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $86([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $80(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $55(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [12])) = $1
	CALL $87($1)
	
.LABEL $label$4
	CALL $87($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $32 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	CALL prints([816])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [80])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [144])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $63(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $64(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $87(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [656])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [656])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$4 = *($0)
	*($6) = $4
	*($6 + [8]) = $4
	*($6 + [36]) = [0]
	$0 = [0]
	$3 = CALL db_find_i64($4, $4, (int_64)3617211078187941888, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $61($6, $3)
	CALL eosio_assert(((int_32)*($0 + [24]) == (int_32)$6), [224])
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [832])
	CALL eosio_assert($3, [880])
	$3 = CALL db_next_i64(*($0 + [28]), ($6 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $61($6, $3)
	
.LABEL $label$2
	CALL $65($6, $0)
	$2 = *($6 + [24])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL $87($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($6 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $87($0)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [48])
}