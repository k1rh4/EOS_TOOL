(data (i32.const 16620) "code doesn\'t exist!\00")
(data (i32.const 16640) "invalid token!\00")
(data (i32.const 16655) "play\00")
(data (i32.const 16660) "only accepts MORE token!\00")
(data (i32.const 16685) "issuer not eosiomoreone!\00")
(data (i32.const 16710) "no global table!\00")
(data (i32.const 16727) "quantity is not enough!\00")
(data (i32.const 16751) "time out!\00")
(data (i32.const 16761) "not time to transfer!\00")
(data (i32.const 16783) "no reward record!\00")
(data (i32.const 16801) "has reward!\00")
(data (i32.const 16813) "reward for \00")
(data (i32.const 16825) "add failed, (code, symbol.code) already exists!\00")
(data (i32.const 16873) "payer doesn\'t exist!\00")
(data (i32.const 16894) "supply amount must positive!\00")
(data (i32.const 16923) "max_getable mast greater than min_getable!\00")
(data (i32.const 16966) "payer must set eosjingxihez@eosio.code premission!\00")
(data (i32.const 17017) "addtoken\00")
(data (i32.const 17026) "edit token\00")
(data (i32.const 17037) "editing failed, (code, symbol) doesn\'t exist!\00")
(data (i32.const 17083) "global table doen\'t exist\00")
(data (i32.const 17109) "code doesn\'t exist\00")
(data (i32.const 17128) "deletion failed, (code, symbol) doesn\'t exist!\00")
(data (i32.const 17175) "no status record!\00")
(data (i32.const 17193) "no user record!\00")
(data (i32.const 17209) "rech max times\00")
(data (i32.const 17224) "no token record!\00")
(data (i32.const 17241) "reach the maximum supply!\00")
(data (i32.const 17267) "rewards for \00")
(data (i32.const 17280) "unable to find key\00")
(data (i32.const 17299) "symbol not issued by code!\00")
(data (i32.const 17326) "symbol precision mismatch!\00")
(data (i32.const 17353) "reward don\'t exist!\00")
(data (i32.const 17373) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 17440) "$D\00\00")
(data (i32.const 17444) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 17477) "write\00")
(data (i32.const 17483) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 17542) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17591) "invalid symbol name\00")
(data (i32.const 17611) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 17665) "cannot decrement iterator at beginning of table\00")
(data (i32.const 17713) "error reading iterator\00")
(data (i32.const 17736) "read\00")
(data (i32.const 17741) "attempt to add asset with different symbol\00")
(data (i32.const 17784) "addition underflow\00")
(data (i32.const 17803) "addition overflow\00")
(data (i32.const 17821) "attempt to subtract asset with different symbol\00")
(data (i32.const 17869) "subtraction underflow\00")
(data (i32.const 17891) "subtraction overflow\00")
(data (i32.const 17912) "cannot increment end iterator\00")
(data (i32.const 17942) "cannot pass end iterator to modify\00")
(data (i32.const 17977) "object passed to modify is not in multi_index\00")
(data (i32.const 18023) "cannot modify objects in table of another contract\00")
(data (i32.const 18074) "updater cannot change primary key when modifying an object\00")
(data (i32.const 18133) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18184) "cannot create objects in table of another contract\00")
(data (i32.const 18235) "next primary key in table is at autoincrement limit\00")
(data (i32.const 18287) "cannot pass end iterator to erase\00")
(data (i32.const 18321) "object passed to erase is not in multi_index\00")
(data (i32.const 18366) "cannot erase objects in table of another contract\00")
(data (i32.const 18416) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18469) "get\00")
(data (i32.const 18473) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "check_transaction_authorization" (func $fimport$0 (param i32 i32 i32 i32 i32 i32) (result i32)))
(import "env" "check_permission_authorization" (func $fimport$1 (param i64 i64 i32 i32 i32 i32 i64) (result i32)))
(import "env" "current_time" (func $fimport$2 (result i64)))
(import "env" "is_account" (func $fimport$3 (param i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$4 (param i32 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "db_update_i64" (func $fimport$8 (param i32 i64 i32 i32)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "memcpy" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$12 (result i32)))
(import "env" "tapos_block_num" (func $fimport$13 (result i32)))
(import "env" "sha256" (func $fimport$14 (param i32 i32 i32)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "cancel_deferred" (func $fimport$16 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$17 (param i32 i64 i32 i32 i32)))
(import "env" "require_auth" (func $fimport$18 (param i64)))
(import "env" "action_data_size" (func $fimport$19 (result i32)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$22 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$24 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$25 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "abort" (func $fimport$27))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$30 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$39 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$40 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$41 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$42 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$43 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$45 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$46 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$47 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$48 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$49 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $57))
(export "_ZdlPv" (func $87))
(export "_Znwj" (func $85))
(export "_Znaj" (func $86))
(export "_ZdaPv" (func $88))
(export "_ZnwjSt11align_val_t" (func $89))
(export "_ZnajSt11align_val_t" (func $90))
(export "_ZdlPvSt11align_val_t" (func $91))
(export "_ZdaPvSt11align_val_t" (func $92))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $28 $52 $7 $42 $48 $33 $50 $39 $54)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18559))
(global $global$2 i32 (i32.const 18559))


int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $95($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $98($0, $1, $2, CALL $105($2))
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $95($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $111($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $93 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$5 = *($0 + [24])
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	if ( ((int_32)*(($4 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$4 = ($4 + [-24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$4 = *(($4 + [-24]))
	$global$0 = ($3 + [16])
	return $4
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [17713])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $108($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	CALL db_get_i64($1, $7, $6)
	*(($8 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [17736])
	CALL memcpy($8, $7, [8])
	*($3 + [8]) = (int_64)0
	$4 = ($6 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [17736])
	CALL memcpy(($3 + [8]), ($7 + [8]), [8])
	*($8 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [17736])
	CALL memcpy(($8 + [16]), ($7 + [16]), [8])
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((int_32)$4 != (int_32)[24]), [17736])
	CALL memcpy(($3 + [8]), ($7 + [24]), [8])
	*($8 + [24]) = *($3 + [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[32]), [17736])
	CALL memcpy(($8 + [32]), ($7 + [32]), [8])
	*($8 + [44]) = $1
	$9 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$10 = *(($0 + [32]))
	$5 = ($0 + [28])
	$4 = *($5)
	if ( ((uint_32)$4 >= (uint_32)$10) ){ goto $label$8 }
	*($4 + [8]) = $9
	*($4) = $8
	*($4 + [16]) = $1
	*($5) = ($4 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$11 = ($0 + [24])
	$2 = *($11)
	$5 = ((int_32)($4 - $2) / (int_32)[24])
	$12 = ($5 + [1])
	if ( ((uint_32)$12 >= (uint_32)[178956971]) ){ goto $label$10 }
	$11 = [178956970]
	$10 = ((int_32)($10 - $2) / (int_32)[24])
	if ( ((uint_32)$10 > (uint_32)[89478484]) ){ goto $label$12 }
	$10 = ($10 << [1])
	$11 = ( $12 ? $10 : ($10 <= $12) )
	if ( ($11 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = CALL _Znwj(((int_32)$11 * (int_32)[24]))
	$4 = *(($0 + [28]))
	$2 = *(($0 + [24]))
	goto $label$9 
	
.LABEL $label$11
	$11 = [0]
	$10 = [0]
	goto $label$9 
	
.LABEL $label$10
	CALL $101($11)
	
.LABEL $label$9
	*(($5 = ($10 + ($13 = ((int_32)$5 * (int_32)[24])))) + [8]) = $9
	*($5) = $8
	*($5 + [16]) = $1
	$11 = ($10 + ((int_32)$11 * (int_32)[24]))
	$12 = ($5 + [24])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$13 }
	$1 = (($10 + $13) + [-24])
	
.LOOP $label$14:
	$5 = ($4 + [-24])
	$10 = *($5)
	*($5) = [0]
	*($1) = $10
	*(($1 + [16])) = *(($4 + [-8]))
	*(($1 + [8])) = *(($4 + [-16]))
	$1 = ($1 + [-24])
	$4 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$14 }
	$5 = ($1 + [24])
	$4 = *(($0 + [28]))
	$2 = *(($0 + [24]))
	
.LABEL $label$13
	*(($0 + [28])) = $12
	*(($0 + [24])) = $5
	*(($0 + [32])) = $11
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$17 }
	CALL _ZdlPv($1)
	
.LABEL $label$17
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$18 }
	CALL _ZdlPv($2)
	
.LABEL $label$18
	if ( ($6 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($7)
	
.LABEL $label$6
	$global$0 = ($3 + [16])
	(unreachable)
	return $8
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [17977])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18023])
	$6 = *($3)
	*($1 + [32]) = *($6)
	*(($1 + [40])) = *(($6 + [8]))
	$6 = ($1 + [32])
	$7 = *($1)
	if ( (*(*($3 + [4])) == 0) ){ goto $label$1 }
	*($1 + [24]) = *(*($3 + [8]))
	*($1 + [8]) = *(*($3 + [12]))
	
.LABEL $label$1
	*($1 + [56]) = *(*($3 + [16]))
	*($1 + [60]) = *(*($3 + [20]))
	CALL eosio_assert([1], [18074])
	$4 = $4
	$3 = ($4 + [-64])
	$global$0 = $3
	*($5 + [12]) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = ($4 + [-7])
	*($5 + [24]) = ($5 + [8])
	*($5 + [36]) = ($1 + [8])
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + [16])
	*($5 + [44]) = ($1 + [24])
	*($5 + [48]) = $6
	*($5 + [52]) = ($1 + [48])
	*($5 + [56]) = ($1 + [56])
	*($5 + [60]) = ($1 + [60])
	CALL $9(($5 + [32]), ($5 + [24]))
	CALL db_update_i64(*($1 + [68]), $2, $3, [57])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$2 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$global$0 = ($5 + [64])
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$6 = ($global$0 - [192])
	$global$0 = $6
	*($6 + [160]) = $2
	*($6 + [168]) = $1
	CALL require_auth(*($0))
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*($5 + [8])), [17483])
	CALL eosio_assert(((int_64)*($4) > (int_64)*($5)), [16923])
	$7 = ($3 + [8])
	CALL $34($8, ($6 + [168]), $7)
	*(($6 + [152])) = [0]
	*($6 + [136]) = (int_64)-1
	$2 = *($0)
	*($6 + [120]) = $2
	*($6 + [128]) = $2
	*($6 + [144]) = (int_64)0
	$8 = CALL db_lowerbound_i64($2, $2, (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$8 = CALL $8(($6 + [120]), $8)
	if ( ((int_64)*($8 + [16]) != (int_64)$1) ){ goto $label$3 }
	$9 = [2]
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	goto $label$1 
	
.LABEL $label$2
	$9 = [38]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$70 
	
.LABEL $label$72
	if ( ((int_64)*(($8 + [40])) != (int_64)*($7)) ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$71
	$8 = CALL $8(($6 + [120]), $8)
	if ( ((int_64)*($8 + [16]) == (int_64)$1) ){ goto $label$30 }
	$9 = [0]
	goto $label$4 
	
.LABEL $label$70
	CALL eosio_assert([1], [17912])
	$8 = CALL db_next_i64(*($8 + [68]), ($6 + [8]))
	if ( ((int_32)$8 >= (int_32)[0]) ){ goto $label$33 }
	$9 = [38]
	goto $label$4 
	
.LABEL $label$69
	CALL eosio_assert([0], [17037])
	$9 = [4]
	goto $label$4 
	
.LABEL $label$68
	$0 = *($6 + [144])
	if ( ($0 == 0) ){ goto $label$26 }
	$9 = [5]
	goto $label$4 
	
.LABEL $label$67
	$4 = ($6 + [148])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$0) ){ goto $label$23 }
	$9 = [6]
	goto $label$4 
	
.LABEL $label$66
	$9 = [7]
	goto $label$4 
	
.LABEL $label$65
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	$9 = [8]
	goto $label$4 
	
.LABEL $label$64
	CALL _ZdlPv($7)
	$9 = [9]
	goto $label$4 
	
.LABEL $label$63
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$22 }
	$9 = [10]
	goto $label$4 
	
.LABEL $label$62
	$8 = *(($6 + [144]))
	goto $label$20 
	
.LABEL $label$61
	$8 = $0
	$9 = [11]
	goto $label$4 
	
.LABEL $label$60
	*($4) = $0
	CALL _ZdlPv($8)
	$9 = [12]
	goto $label$4 
	
.LABEL $label$59
	$global$0 = ($6 + [192])
	return (unreachable)
	
.LABEL $label$58
	$2 = *($6 + [160])
	*($6 + [119]) = ((int_64)*($8 + [24]) != (int_64)$2)
	$10 = *($0)
	*($6 + [118]) = ((int_64)$2 == (int_64)$10)
	*($6 + [8]) = $3
	*($6 + [24]) = $4
	*($6 + [28]) = $5
	*($6 + [12]) = ($6 + [119])
	*($6 + [16]) = ($6 + [160])
	*($6 + [20]) = ($6 + [118])
	CALL eosio_assert([1], [17942])
	CALL $49(($6 + [120]), $8, $10, ($6 + [8]))
	if ( (*($6 + [119]) == 0) ){ goto $label$29 }
	$9 = [14]
	goto $label$4 
	
.LABEL $label$57
	if ( (*($6 + [118]) & [255]) ){ goto $label$28 }
	$9 = [15]
	goto $label$4 
	
.LABEL $label$56
	*($6 + [64]) = (int_64)3617214756542218240
	$2 = *($6 + [160])
	*($6 + [56]) = $2
	$10 = *($3 + [8])
	*((($6 + [8]) + [24])) = $10
	*($6 + [8]) = $2
	*($6 + [24]) = (int_64)1
	*($6 + [16]) = *($0)
	CALL eosio_assert([1], [17542])
	$2 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	$9 = [16]
	goto $label$4 
	
.LABEL $label$55
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$9 = [32]
	goto $label$4 
	
.LABEL $label$54
	$10 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$9 = [33]
	goto $label$4 
	
.LABEL $label$53
	$2 = $10
	$7 = [1]
	$0 = $8
	$8 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$52
	$2 = $10
	$9 = [35]
	goto $label$4 
	
.LABEL $label$51
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$9 = [36]
	goto $label$4 
	
.LABEL $label$50
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$0 = ($8 + [1])
	$8 = $0
	if ( $7 ){ goto $label$5 }
	$9 = [37]
	goto $label$4 
	
.LABEL $label$49
	$7 = [1]
	$8 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$48
	$7 = [0]
	$9 = [18]
	goto $label$4 
	
.LABEL $label$47
	CALL eosio_assert($7, [17591])
	*(($6 + [48])) = [0]
	*($6 + [40]) = (int_64)0
	$7 = ($6 + [40])
	$8 = CALL $105([17026])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$13 }
	$9 = [19]
	goto $label$4 
	
.LABEL $label$46
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$12 }
	$9 = [30]
	goto $label$4 
	
.LABEL $label$45
	*(($6 + [40])) = ($8 << [1])
	$7 = ($7 + [1])
	if ( $8 ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$44
	$0 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($0)
	*(($6 + [48])) = $7
	*(($6 + [44])) = $8
	*($6 + [40]) = ($0 | [1])
	$9 = [21]
	goto $label$4 
	
.LABEL $label$43
	CALL memcpy($7, [17026], $8)
	$9 = [22]
	goto $label$4 
	
.LABEL $label$42
	*(($7 + $8)) = [0]
	$8 = CALL $21(($6 + [72]), ($6 + [56]), $1, (int_64)-3617168760277827584, ($6 + [8]))
	CALL $22(($6 + [176]), $8)
	$7 = *($6 + [176])
	CALL send_inline($7, (*($6 + [180]) - $7))
	$7 = *($6 + [176])
	if ( ($7 == 0) ){ goto $label$9 }
	$9 = [23]
	goto $label$4 
	
.LABEL $label$41
	*($6 + [180]) = $7
	CALL _ZdlPv($7)
	$9 = [24]
	goto $label$4 
	
.LABEL $label$40
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$8 }
	$9 = [25]
	goto $label$4 
	
.LABEL $label$39
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	$9 = [26]
	goto $label$4 
	
.LABEL $label$38
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$7 }
	$9 = [27]
	goto $label$4 
	
.LABEL $label$37
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	$9 = [28]
	goto $label$4 
	
.LABEL $label$36
	if ( ((*(($6 + [40])) & [1]) == 0) ){ goto $label$27 }
	$9 = [29]
	goto $label$4 
	
.LABEL $label$35
	CALL _ZdlPv(*(($6 + [48])))
	$0 = *($6 + [144])
	if ( $0 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$34
	CALL $93($7)
	
.LABEL $label$33
	$9 = [1]
	goto $label$4 
	
.LABEL $label$32
	$9 = [3]
	goto $label$4 
	
.LABEL $label$31
	$9 = [0]
	goto $label$4 
	
.LABEL $label$30
	$9 = [2]
	goto $label$4 
	
.LABEL $label$29
	$9 = [4]
	goto $label$4 
	
.LABEL $label$28
	$9 = [4]
	goto $label$4 
	
.LABEL $label$27
	$9 = [4]
	goto $label$4 
	
.LABEL $label$26
	$9 = [12]
	goto $label$4 
	
.LABEL $label$25
	$9 = [12]
	goto $label$4 
	
.LABEL $label$24
	$9 = [5]
	goto $label$4 
	
.LABEL $label$23
	$9 = [13]
	goto $label$4 
	
.LABEL $label$22
	$9 = [7]
	goto $label$4 
	
.LABEL $label$21
	$9 = [9]
	goto $label$4 
	
.LABEL $label$20
	$9 = [11]
	goto $label$4 
	
.LABEL $label$19
	$9 = [16]
	goto $label$4 
	
.LABEL $label$18
	$9 = [18]
	goto $label$4 
	
.LABEL $label$17
	$9 = [16]
	goto $label$4 
	
.LABEL $label$16
	$9 = [18]
	goto $label$4 
	
.LABEL $label$15
	$9 = [17]
	goto $label$4 
	
.LABEL $label$14
	$9 = [17]
	goto $label$4 
	
.LABEL $label$13
	$9 = [31]
	goto $label$4 
	
.LABEL $label$12
	$9 = [20]
	goto $label$4 
	
.LABEL $label$11
	$9 = [22]
	goto $label$4 
	
.LABEL $label$10
	$9 = [21]
	goto $label$4 
	
.LABEL $label$9
	$9 = [24]
	goto $label$4 
	
.LABEL $label$8
	$9 = [26]
	goto $label$4 
	
.LABEL $label$7
	$9 = [28]
	goto $label$4 
	
.LABEL $label$6
	$9 = [34]
	goto $label$4 
	
.LABEL $label$5
	$9 = [35]
	goto $label$4 
	$9
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $8($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $79(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18235])
	*($1) = *(($6 + [16]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [24]) = *(*($5 + [12]))
	$6 = *($5 + [16])
	*($1 + [32]) = *($6)
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = *(*($5 + [20]))
	*($1 + [60]) = *(*($5 + [24]))
	$6 = $2
	$5 = ($6 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = ($6 + [-7])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = ($1 + [32])
	*($3 + [52]) = ($1 + [48])
	*($3 + [56]) = ($1 + [56])
	*($3 + [60]) = ($1 + [60])
	CALL $9(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-3665743729458675712, *(*($0 + [8])), $7, $5, [57])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $42 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$6 = ($global$0 - [192])
	$global$0 = $6
	*($6 + [160]) = $2
	*($6 + [168]) = $1
	CALL require_auth(*($0))
	*(($7 = ($6 + [152]))) = [0]
	*($6 + [136]) = (int_64)-1
	$1 = *($0)
	*($6 + [120]) = $1
	*($6 + [128]) = $1
	*($6 + [144]) = (int_64)0
	$8 = CALL db_lowerbound_i64($1, $1, (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$9 = ($3 + [8])
	$8 = CALL $8(($6 + [120]), $8)
	if ( ((int_64)*($8 + [16]) == (int_64)*($6 + [168])) ){ goto $label$3 }
	$10 = [0]
	goto $label$1 
	
.LABEL $label$3
	$10 = [3]
	goto $label$1 
	
.LABEL $label$2
	$10 = [4]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$100 
	
.LABEL $label$100
	CALL eosio_assert([1], [16825])
	goto $label$41 
	
.LABEL $label$99
	$8 = CALL $8(($6 + [120]), $8)
	if ( ((int_64)*($8 + [16]) != (int_64)*($6 + [168])) ){ goto $label$42 }
	$10 = [3]
	goto $label$4 
	
.LABEL $label$98
	CALL eosio_assert(((uint_64)((int_64)*($9) ^ (int_64)*(($8 + [40]))) > (uint_64)(int_64)255), [16825])
	$10 = [1]
	goto $label$4 
	
.LABEL $label$97
	CALL eosio_assert([1], [17912])
	$8 = CALL db_next_i64(*($8 + [68]), $6)
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$40 }
	$10 = [4]
	goto $label$4 
	
.LABEL $label$96
	CALL eosio_assert(CALL $fimport$3(*($6 + [160])), [16873])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [16894])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)*($5 + [8])), [17483])
	CALL eosio_assert(((int_64)*($4) > (int_64)*($5)), [16923])
	$1 = *($0)
	*($6 + [119]) = ((int_64)*($6 + [160]) == (int_64)$1)
	*($6 + [16]) = $3
	*($6 + [20]) = $4
	*($6 + [24]) = $5
	*($6 + [4]) = ($6 + [119])
	*($6) = ($6 + [120])
	*($6 + [8]) = ($6 + [168])
	*($6 + [12]) = ($6 + [160])
	*($6 + [48]) = $1
	CALL eosio_assert(((int_64)*($6 + [120]) == (int_64)CALL $fimport$7()), [18184])
	*($6 + [68]) = $6
	*($6 + [64]) = ($6 + [120])
	*($6 + [72]) = ($6 + [48])
	*(($8 = CALL _Znwj([80])) + [24]) = (int_64)0
	*($8 + [16]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [64]) = ($6 + [120])
	CALL $43(($6 + [64]), $8)
	*($6 + [176]) = $8
	$1 = *($8)
	*($6 + [64]) = $1
	$4 = *($8 + [68])
	*($6 + [104]) = $4
	$5 = ($6 + [148])
	$9 = *($5)
	if ( ((uint_32)$9 >= (uint_32)*($7)) ){ goto $label$39 }
	$10 = [57]
	goto $label$4 
	
.LABEL $label$95
	*($9 + [8]) = $1
	*($9 + [16]) = $4
	*($6 + [176]) = [0]
	*($9) = $8
	*($5) = ($9 + [24])
	$8 = *($6 + [176])
	*($6 + [176]) = [0]
	if ( $8 ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$94
	CALL $44(($6 + [144]), ($6 + [176]), ($6 + [64]), ($6 + [104]))
	$8 = *($6 + [176])
	*($6 + [176]) = [0]
	if ( ($8 == 0) ){ goto $label$38 }
	$10 = [6]
	goto $label$4 
	
.LABEL $label$93
	CALL _ZdlPv($8)
	$10 = [7]
	goto $label$4 
	
.LABEL $label$92
	if ( *($6 + [119]) ){ goto $label$35 }
	$10 = [30]
	goto $label$4 
	
.LABEL $label$91
	*($6 + [8]) = (int_64)6138663582462279680
	*($6 + [104]) = (int_64)0
	*($6 + [112]) = [0]
	*($6) = *($0)
	*(($8 = CALL _Znwj([16]))) = *($6)
	*(($8 + [8])) = *($6 + [8])
	*($6 + [104]) = $8
	$8 = ($8 + [16])
	*($6 + [112]) = $8
	*($6 + [108]) = $8
	*($6 + [72]) = [0]
	*($6 + [64]) = (int_64)0
	CALL $2(($6 + [64]), [17])
	$8 = *($6 + [68])
	$9 = *($6 + [64])
	*($6 + [4]) = $9
	*($6) = $9
	*($6 + [8]) = $8
	CALL $45($6, ($6 + [104]))
	$4 = *($6 + [64])
	CALL eosio_assert(((int_32)CALL $fimport$1(*($6 + [160]), (int_64)3617214756542218240, [0], [0], $4, (*($6 + [68]) - $4), (int_64)0) > (int_32)[0]), [16966])
	*($6 + [56]) = (int_64)3617214756542218240
	$1 = *($6 + [160])
	*($6 + [48]) = $1
	$11 = *($6 + [168])
	*(($8 = ($6 + [24]))) = *($3 + [8])
	*($6) = $1
	*($6 + [16]) = (int_64)1
	*($6 + [8]) = *($0)
	CALL eosio_assert([1], [17542])
	$1 = (uint_64)*($8) >> (uint_64)(int_64)8)
	$8 = [0]
	$10 = [31]
	goto $label$4 
	
.LABEL $label$90
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$10 = [51]
	goto $label$4 
	
.LABEL $label$89
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$10 = [52]
	goto $label$4 
	
.LABEL $label$88
	$1 = $2
	$9 = [1]
	$3 = $8
	$8 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$87
	$1 = $2
	$10 = [54]
	goto $label$4 
	
.LABEL $label$86
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$10 = [55]
	goto $label$4 
	
.LABEL $label$85
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$9 = ((int_32)$8 < (int_32)[6])
	$3 = ($8 + [1])
	$8 = $3
	if ( $9 ){ goto $label$5 }
	$10 = [56]
	goto $label$4 
	
.LABEL $label$84
	$9 = [1]
	$8 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$83
	$9 = [0]
	$10 = [33]
	goto $label$4 
	
.LABEL $label$82
	CALL eosio_assert($9, [17591])
	*(($6 + [40])) = [0]
	*($6 + [32]) = (int_64)0
	$9 = ($6 + [32])
	$8 = CALL $105([17017])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$15 }
	$10 = [34]
	goto $label$4 
	
.LABEL $label$81
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$14 }
	$10 = [49]
	goto $label$4 
	
.LABEL $label$80
	*(($6 + [32])) = ($8 << [1])
	$9 = ($9 + [1])
	if ( $8 ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$79
	$3 = (($8 + [16]) & [-16])
	$9 = CALL _Znwj($3)
	*(($6 + [40])) = $9
	*(($6 + [36])) = $8
	*($6 + [32]) = ($3 | [1])
	$10 = [36]
	goto $label$4 
	
.LABEL $label$78
	CALL memcpy($9, [17017], $8)
	$10 = [37]
	goto $label$4 
	
.LABEL $label$77
	*(($9 + $8)) = [0]
	$8 = CALL $21(($6 + [64]), ($6 + [48]), $11, (int_64)-3617168760277827584, $6)
	CALL $22(($6 + [176]), $8)
	$9 = *($6 + [176])
	CALL send_inline($9, (*($6 + [180]) - $9))
	$9 = *($6 + [176])
	if ( ($9 == 0) ){ goto $label$11 }
	$10 = [38]
	goto $label$4 
	
.LABEL $label$76
	*($6 + [180]) = $9
	CALL _ZdlPv($9)
	$10 = [39]
	goto $label$4 
	
.LABEL $label$75
	$9 = *($8 + [28])
	if ( ($9 == 0) ){ goto $label$10 }
	$10 = [40]
	goto $label$4 
	
.LABEL $label$74
	*(($8 + [32])) = $9
	CALL _ZdlPv($9)
	$10 = [41]
	goto $label$4 
	
.LABEL $label$73
	$9 = *($8 + [16])
	if ( ($9 == 0) ){ goto $label$9 }
	$10 = [42]
	goto $label$4 
	
.LABEL $label$72
	*(($8 + [20])) = $9
	CALL _ZdlPv($9)
	$10 = [43]
	goto $label$4 
	
.LABEL $label$71
	if ( ((*(($6 + [32])) & [1]) == 0) ){ goto $label$8 }
	$10 = [44]
	goto $label$4 
	
.LABEL $label$70
	CALL _ZdlPv(*(($6 + [40])))
	$10 = [45]
	goto $label$4 
	
.LABEL $label$69
	if ( ($4 == 0) ){ goto $label$7 }
	$10 = [46]
	goto $label$4 
	
.LABEL $label$68
	CALL _ZdlPv($4)
	$10 = [47]
	goto $label$4 
	
.LABEL $label$67
	$8 = *($6 + [104])
	if ( ($8 == 0) ){ goto $label$34 }
	$10 = [48]
	goto $label$4 
	
.LABEL $label$66
	*($6 + [108]) = $8
	CALL _ZdlPv($8)
	$10 = [8]
	goto $label$4 
	
.LABEL $label$65
	*(($6 + [32])) = [0]
	*($6 + [16]) = (int_64)-1
	*($6 + [24]) = (int_64)0
	$1 = *($0)
	*($6) = $1
	*($6 + [8]) = $1
	$8 = CALL db_find_i64($1, $1, (int_64)4982364043133370368, *($6 + [168]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$33 }
	$10 = [9]
	goto $label$4 
	
.LABEL $label$64
	$8 = CALL $46($6, $8)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$6), [18133])
	CALL eosio_assert([1], [18287])
	CALL eosio_assert([1], [17912])
	$9 = CALL db_next_i64(*($8 + [36]), ($6 + [64]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$32 }
	$10 = [10]
	goto $label$4 
	
.LABEL $label$63
	CALL $46($6, $9)
	$10 = [11]
	goto $label$4 
	
.LABEL $label$62
	CALL $47($6, $8)
	$3 = *($6 + [24])
	if ( ($3 == 0) ){ goto $label$31 }
	$10 = [12]
	goto $label$4 
	
.LABEL $label$61
	$0 = ($6 + [28])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$30 }
	$10 = [13]
	goto $label$4 
	
.LABEL $label$60
	$10 = [14]
	goto $label$4 
	
.LABEL $label$59
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$28 }
	$10 = [15]
	goto $label$4 
	
.LABEL $label$58
	CALL _ZdlPv($9)
	$10 = [16]
	goto $label$4 
	
.LABEL $label$57
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$29 }
	$10 = [17]
	goto $label$4 
	
.LABEL $label$56
	$8 = *(($6 + [24]))
	goto $label$27 
	
.LABEL $label$55
	$8 = $3
	$10 = [18]
	goto $label$4 
	
.LABEL $label$54
	*($0) = $3
	CALL _ZdlPv($8)
	$10 = [19]
	goto $label$4 
	
.LABEL $label$53
	$3 = *($6 + [144])
	if ( ($3 == 0) ){ goto $label$26 }
	$10 = [20]
	goto $label$4 
	
.LABEL $label$52
	$0 = ($6 + [148])
	$8 = *($0)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$25 }
	$10 = [21]
	goto $label$4 
	
.LABEL $label$51
	$10 = [22]
	goto $label$4 
	
.LABEL $label$50
	$8 = ($8 + [-24])
	$9 = *($8)
	*($8) = [0]
	if ( ($9 == 0) ){ goto $label$23 }
	$10 = [23]
	goto $label$4 
	
.LABEL $label$49
	CALL _ZdlPv($9)
	$10 = [24]
	goto $label$4 
	
.LABEL $label$48
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$24 }
	$10 = [25]
	goto $label$4 
	
.LABEL $label$47
	$8 = *(($6 + [144]))
	goto $label$22 
	
.LABEL $label$46
	$8 = $3
	$10 = [26]
	goto $label$4 
	
.LABEL $label$45
	*($0) = $3
	CALL _ZdlPv($8)
	$10 = [27]
	goto $label$4 
	
.LABEL $label$44
	$global$0 = ($6 + [192])
	return (unreachable)
	
.LABEL $label$43
	CALL $93($9)
	
.LABEL $label$42
	$10 = [0]
	goto $label$4 
	
.LABEL $label$41
	$10 = [1]
	goto $label$4 
	
.LABEL $label$40
	$10 = [2]
	goto $label$4 
	
.LABEL $label$39
	$10 = [5]
	goto $label$4 
	
.LABEL $label$38
	$10 = [7]
	goto $label$4 
	
.LABEL $label$37
	$10 = [7]
	goto $label$4 
	
.LABEL $label$36
	$10 = [6]
	goto $label$4 
	
.LABEL $label$35
	$10 = [8]
	goto $label$4 
	
.LABEL $label$34
	$10 = [8]
	goto $label$4 
	
.LABEL $label$33
	$10 = [19]
	goto $label$4 
	
.LABEL $label$32
	$10 = [11]
	goto $label$4 
	
.LABEL $label$31
	$10 = [19]
	goto $label$4 
	
.LABEL $label$30
	$10 = [29]
	goto $label$4 
	
.LABEL $label$29
	$10 = [14]
	goto $label$4 
	
.LABEL $label$28
	$10 = [16]
	goto $label$4 
	
.LABEL $label$27
	$10 = [18]
	goto $label$4 
	
.LABEL $label$26
	$10 = [27]
	goto $label$4 
	
.LABEL $label$25
	$10 = [28]
	goto $label$4 
	
.LABEL $label$24
	$10 = [22]
	goto $label$4 
	
.LABEL $label$23
	$10 = [24]
	goto $label$4 
	
.LABEL $label$22
	$10 = [26]
	goto $label$4 
	
.LABEL $label$21
	$10 = [31]
	goto $label$4 
	
.LABEL $label$20
	$10 = [33]
	goto $label$4 
	
.LABEL $label$19
	$10 = [31]
	goto $label$4 
	
.LABEL $label$18
	$10 = [33]
	goto $label$4 
	
.LABEL $label$17
	$10 = [32]
	goto $label$4 
	
.LABEL $label$16
	$10 = [32]
	goto $label$4 
	
.LABEL $label$15
	$10 = [50]
	goto $label$4 
	
.LABEL $label$14
	$10 = [35]
	goto $label$4 
	
.LABEL $label$13
	$10 = [37]
	goto $label$4 
	
.LABEL $label$12
	$10 = [36]
	goto $label$4 
	
.LABEL $label$11
	$10 = [39]
	goto $label$4 
	
.LABEL $label$10
	$10 = [41]
	goto $label$4 
	
.LABEL $label$9
	$10 = [43]
	goto $label$4 
	
.LABEL $label$8
	$10 = [45]
	goto $label$4 
	
.LABEL $label$7
	$10 = [47]
	goto $label$4 
	
.LABEL $label$6
	$10 = [53]
	goto $label$4 
	
.LABEL $label$5
	$10 = [54]
	goto $label$4 
	$10
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $10($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$7 = *(*(CALL $78(($3 + [24])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18235])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	*($1 + [16]) = *(*($5 + [8]))
	*($1 + [17]) = *(*($5 + [12]))
	$6 = *(*($5 + [16]))
	*($1 + [24]) = *(*($5 + [20]))
	*($1 + [18]) = $6
	*($1 + [32]) = *(*($5 + [24]))
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = *(*($5 + [28]))
	*($1 + [56]) = *(*($5 + [32]))
	*($1 + [64]) = *(*($5 + [36]))
	*($1 + [72]) = *(*($5 + [40]))
	*($1 + [80]) = *(*($5 + [44]))
	*($1 + [88]) = *(*($5 + [48]))
	$6 = $2
	$5 = ($6 + [-96])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($6 + [-5])
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [17])
	*($3 + [40]) = ($1 + [18])
	*($3 + [44]) = ($1 + [24])
	*($3 + [48]) = ($1 + [32])
	*($3 + [52]) = ($1 + [40])
	*($3 + [56]) = ($1 + [48])
	*($3 + [60]) = ($1 + [56])
	*($3 + [64]) = ($1 + [64])
	*($3 + [68]) = ($1 + [72])
	*($3 + [72]) = ($1 + [80])
	*($3 + [76]) = ($1 + [88])
	CALL $26(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [100]) = CALL db_store_i64(*($4 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), $7, $5, [91])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [80])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18321])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18366])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18416])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17713])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	CALL $80(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $37(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17477])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17477])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17477])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17713])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([80])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [64]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [48])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [60])
	CALL $72(($3 + [32]), ($3 + [24]))
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [7]) = *(*($0 + [4]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17477])
	CALL memcpy(*($4 + [4]), ($2 + [7]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [17477])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [17477])
	CALL memcpy(*($0 + [4]), $4, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17477])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [17477])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $70($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [256])
	$global$0 = $5
	*($5 + [136]) = $1
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$4 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$3 }
	CALL eosio_assert(CALL $fimport$3(*($0 + [8])), [16620])
	$7 = [0]
	*(($5 + [128])) = [0]
	*($5 + [112]) = (int_64)-1
	$1 = *($0)
	*($5 + [96]) = $1
	*($5 + [104]) = $1
	*($5 + [120]) = (int_64)0
	$8 = CALL db_lowerbound_i64($1, $1, (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $8(($5 + [96]), $8)
	$1 = *($3 + [8])
	$8 = ($0 + [8])
	if ( ((int_64)*($7 + [16]) != (int_64)*($8)) ){ goto $label$5 }
	$9 = [2]
	goto $label$1 
	
.LABEL $label$5
	$9 = [0]
	goto $label$1 
	
.LABEL $label$4
	$9 = [13]
	goto $label$1 
	
.LABEL $label$3
	$9 = [13]
	goto $label$1 
	
.LABEL $label$2
	$9 = [75]
	
.LABEL $label$1
	
.LOOP $label$6:
	goto $label$134 
	
.LABEL $label$136
	if ( ((int_64)*(($7 + [40])) != (int_64)$1) ){ goto $label$58 }
	goto $label$59 
	
.LABEL $label$135
	$7 = CALL $8(($5 + [96]), $7)
	if ( ((int_64)*($7 + [16]) == (int_64)*($8)) ){ goto $label$57 }
	$9 = [0]
	goto $label$6 
	
.LABEL $label$134
	CALL eosio_assert([1], [17912])
	$7 = CALL db_next_i64(*($7 + [68]), ($5 + [176]))
	if ( ((int_32)$7 >= (int_32)[0]) ){ goto $label$60 }
	$9 = [74]
	goto $label$6 
	
.LABEL $label$133
	$7 = [0]
	$9 = [75]
	goto $label$6 
	
.LABEL $label$132
	$8 = [0]
	if ( ((int_64)*($5 + [136]) != (int_64)*($7 + [24])) ){ goto $label$55 }
	$9 = [71]
	goto $label$6 
	
.LABEL $label$131
	if ( *($7 + [8]) ){ goto $label$53 }
	$9 = [72]
	goto $label$6 
	
.LABEL $label$130
	CALL eosio_assert($8, [16640])
	$2 = *($0)
	CALL eosio_assert($8, [17942])
	CALL eosio_assert(((int_32)*($7 + [64]) == (int_32)($5 + [96])), [17977])
	CALL eosio_assert(((int_64)*($5 + [96]) == (int_64)CALL $fimport$7()), [18023])
	*(($8 = ($7 + [8]))) = [1]
	*($7 + [48]) = ((int_64)*($7 + [48]) + (int_64)*($3))
	$1 = *($7)
	CALL eosio_assert([1], [18074])
	*($5 + [8]) = (($5 + [176]) + [57])
	*($5 + [4]) = ($5 + [176])
	*($5) = ($5 + [176])
	*($5 + [144]) = $5
	*($5 + [60]) = $8
	*($5 + [56]) = $7
	*($5 + [64]) = ($7 + [16])
	*($5 + [68]) = ($7 + [24])
	*($5 + [72]) = ($7 + [32])
	*($5 + [76]) = ($7 + [48])
	*($5 + [80]) = ($7 + [56])
	*($5 + [84]) = ($7 + [60])
	CALL $9(($5 + [56]), ($5 + [144]))
	CALL db_update_i64(*($7 + [68]), $2, ($5 + [176]), [57])
	$7 = (($5 + [96]) + [16])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$52 }
	$9 = [73]
	goto $label$6 
	
.LABEL $label$129
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$0 = *($5 + [120])
	if ( $0 ){ goto $label$48 }
	goto $label$49 
	
.LABEL $label$128
	$8 = [1]
	if ( ((int_64)*($5 + [136]) == (int_64)*($7 + [24])) ){ goto $label$56 }
	$9 = [4]
	goto $label$6 
	
.LABEL $label$127
	if ( CALL $100($4, [16655]) ){ goto $label$54 }
	$9 = [15]
	goto $label$6 
	
.LABEL $label$126
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)297733672196), [16660])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)6138663898193405600), [16685])
	*(($5 + [208])) = [0]
	*($5 + [192]) = (int_64)-1
	$1 = *($0)
	*($5 + [176]) = $1
	*($5 + [184]) = $1
	*($5 + [200]) = (int_64)0
	$7 = [0]
	$8 = CALL db_lowerbound_i64($1, $1, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$43 }
	$9 = [16]
	goto $label$6 
	
.LABEL $label$125
	$7 = CALL $10(($5 + [176]), $8)
	$9 = [17]
	goto $label$6 
	
.LABEL $label$124
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [16710])
	CALL eosio_assert(((uint_64)*($3) >= (uint_64)*($7 + [8])), [16727])
	if ( (*([0] + [8200]) == 0) ){ goto $label$42 }
	$9 = [70]
	goto $label$6 
	
.LABEL $label$123
	$2 = *([0] + [8192])
	$9 = [19]
	goto $label$6 
	
.LABEL $label$122
	CALL eosio_assert(((int_64)$2 < (int_64)*($7 + [32])), [16751])
	$1 = ((uint_64)$2 % (uint_64)(int_64)86400000000)
	if ( ((int_32)*($7 + [16]) != (int_32)[1]) ){ goto $label$40 }
	$9 = [69]
	goto $label$6 
	
.LABEL $label$121
	if ( ((int_64)$2 >= (int_64)*($7 + [24])) ){ goto $label$39 }
	$9 = [20]
	goto $label$6 
	
.LABEL $label$120
	if ( (uint_64)($1 <= *($7 + [48])) ){ goto $label$38 }
	$9 = [21]
	goto $label$6 
	
.LABEL $label$119
	$8 = [1]
	if ( ((uint_64)$1 <= (uint_64)*($7 + [56])) ){ goto $label$37 }
	$9 = [65]
	goto $label$6 
	
.LABEL $label$118
	if ( (uint_64)($1 <= *($7 + [64])) ){ goto $label$7 }
	$9 = [66]
	goto $label$6 
	
.LABEL $label$117
	$8 = [1]
	if ( ((uint_64)$1 <= (uint_64)*($7 + [72])) ){ goto $label$36 }
	$9 = [67]
	goto $label$6 
	
.LABEL $label$116
	$8 = [0]
	if ( (uint_64)($1 <= *($7 + [80])) ){ goto $label$35 }
	$9 = [68]
	goto $label$6 
	
.LABEL $label$115
	$8 = ((uint_64)$1 <= (uint_64)*($7 + [88]))
	$9 = [22]
	goto $label$6 
	
.LABEL $label$114
	CALL eosio_assert($8, [16761])
	$9 = [23]
	goto $label$6 
	
.LABEL $label$113
	*(($3 = (($5 + [56]) + [32]))) = [0]
	*($5 + [72]) = (int_64)-1
	*($5 + [80]) = (int_64)0
	*($5 + [92]) = [0]
	$1 = *($0)
	*($5 + [56]) = $1
	*($5 + [64]) = $1
	*($5 + [48]) = ($5 + [56])
	CALL $11($5, ($5 + [48]), ($5 + [136]))
	$7 = *($5 + [4])
	if ( ($7 == 0) ){ goto $label$34 }
	$9 = [24]
	goto $label$6 
	
.LABEL $label$112
	$1 = *($5 + [136])
	if ( ((int_64)$1 == (int_64)*($7 + [8])) ){ goto $label$33 }
	$9 = [25]
	goto $label$6 
	
.LABEL $label$111
	$1 = *($0)
	*($5 + [44]) = ($5 + [136])
	*($5 + [40]) = ($5 + [56])
	*($5 + [144]) = $1
	CALL eosio_assert(((int_64)*($5 + [56]) == (int_64)CALL $fimport$7()), [18184])
	*($5 + [4]) = ($5 + [40])
	*($5) = ($5 + [56])
	*($5 + [8]) = ($5 + [144])
	*(($7 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($7 + [16]) = ($5 + [56])
	CALL $12($5, $7)
	*($5 + [248]) = $7
	$1 = *($7)
	*($5) = $1
	$4 = *($7 + [20])
	*($5 + [244]) = $4
	$10 = ($5 + [84])
	$8 = *($10)
	if ( ((uint_32)$8 >= (uint_32)*($3)) ){ goto $label$32 }
	$9 = [64]
	goto $label$6 
	
.LABEL $label$110
	*($8 + [8]) = $1
	*($8 + [16]) = $4
	*($5 + [248]) = [0]
	*($8) = $7
	*($10) = ($8 + [24])
	$7 = *($5 + [248])
	*($5 + [248]) = [0]
	if ( ($7 == 0) ){ goto $label$31 }
	$9 = [27]
	goto $label$6 
	
.LABEL $label$109
	CALL _ZdlPv($7)
	$9 = [28]
	goto $label$6 
	
.LABEL $label$108
	$1 = *($5 + [136])
	$9 = [29]
	goto $label$6 
	
.LABEL $label$107
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$6 = *($0)
	*($5) = $6
	*($5 + [8]) = $1
	$7 = CALL db_find_i64($6, $1, (int_64)-4157493845350678528, $1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$28 }
	$9 = [30]
	goto $label$6 
	
.LABEL $label$106
	CALL eosio_assert(((int_32)*(CALL $13($5, $7) + [20]) == (int_32)$5), [18133])
	CALL $14($0, ($5 + [136]))
	goto $label$27 
	
.LABEL $label$105
	$6 = *($0)
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$7()), [18184])
	*(($7 = CALL _Znwj([32])) + [20]) = $5
	*($7 + [8]) = $2
	*($7 + [16]) = [0]
	*($7) = *($5 + [136])
	CALL eosio_assert([1], [17477])
	CALL memcpy(($5 + [144]), $7, [8])
	CALL eosio_assert([1], [17477])
	CALL memcpy((($5 + [144]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [17477])
	CALL memcpy((($5 + [144]) + [16]), ($7 + [16]), [1])
	$1 = *($7)
	$3 = CALL db_store_i64(*(($5 + [8])), (int_64)-4157493845350678528, $6, $1, ($5 + [144]), [17])
	*($7 + [24]) = $3
	$8 = ($5 + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$9 }
	$9 = [59]
	goto $label$6 
	
.LABEL $label$104
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$9 = [60]
	goto $label$6 
	
.LABEL $label$103
	*($5 + [40]) = $7
	$1 = *($7)
	*($5 + [144]) = $1
	*($5 + [248]) = $3
	$4 = ($5 + [28])
	$8 = *($4)
	if ( ((uint_32)$8 >= (uint_32)*(($5 + [32]))) ){ goto $label$8 }
	$9 = [63]
	goto $label$6 
	
.LABEL $label$102
	*($8 + [8]) = $1
	*($8 + [16]) = $3
	*($5 + [40]) = [0]
	*($8) = $7
	*($4) = ($8 + [24])
	$7 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( ($7 == 0) ){ goto $label$26 }
	$9 = [62]
	goto $label$6 
	
.LABEL $label$101
	CALL _ZdlPv($7)
	$9 = [31]
	goto $label$6 
	
.LABEL $label$100
	CALL $15($0, ($5 + [136]))
	$0 = *($5 + [24])
	if ( ($0 == 0) ){ goto $label$23 }
	$9 = [32]
	goto $label$6 
	
.LABEL $label$99
	$3 = ($5 + [28])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$22 }
	$9 = [33]
	goto $label$6 
	
.LABEL $label$98
	$9 = [34]
	goto $label$6 
	
.LABEL $label$97
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$20 }
	$9 = [35]
	goto $label$6 
	
.LABEL $label$96
	CALL _ZdlPv($8)
	$9 = [36]
	goto $label$6 
	
.LABEL $label$95
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$21 }
	$9 = [37]
	goto $label$6 
	
.LABEL $label$94
	$7 = *(($5 + [24]))
	goto $label$19 
	
.LABEL $label$93
	CALL $16(($5 + [80]), ($5 + [248]), $5, ($5 + [244]))
	$7 = *($5 + [248])
	*($5 + [248]) = [0]
	if ( $7 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$92
	$7 = $0
	$9 = [38]
	goto $label$6 
	
.LABEL $label$91
	*($3) = $0
	CALL _ZdlPv($7)
	$9 = [39]
	goto $label$6 
	
.LABEL $label$90
	$0 = *($5 + [80])
	if ( ($0 == 0) ){ goto $label$18 }
	$9 = [40]
	goto $label$6 
	
.LABEL $label$89
	$3 = ($5 + [84])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$17 }
	$9 = [41]
	goto $label$6 
	
.LABEL $label$88
	$9 = [42]
	goto $label$6 
	
.LABEL $label$87
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	$9 = [43]
	goto $label$6 
	
.LABEL $label$86
	CALL _ZdlPv($8)
	$9 = [44]
	goto $label$6 
	
.LABEL $label$85
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$16 }
	$9 = [45]
	goto $label$6 
	
.LABEL $label$84
	$7 = *(($5 + [80]))
	goto $label$14 
	
.LABEL $label$83
	$7 = $0
	$9 = [46]
	goto $label$6 
	
.LABEL $label$82
	*($3) = $0
	CALL _ZdlPv($7)
	$9 = [47]
	goto $label$6 
	
.LABEL $label$81
	$0 = *($5 + [200])
	if ( ($0 == 0) ){ goto $label$51 }
	$9 = [48]
	goto $label$6 
	
.LABEL $label$80
	$3 = ($5 + [204])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$13 }
	$9 = [49]
	goto $label$6 
	
.LABEL $label$79
	$9 = [50]
	goto $label$6 
	
.LABEL $label$78
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$11 }
	$9 = [51]
	goto $label$6 
	
.LABEL $label$77
	CALL _ZdlPv($8)
	$9 = [52]
	goto $label$6 
	
.LABEL $label$76
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$12 }
	$9 = [53]
	goto $label$6 
	
.LABEL $label$75
	$7 = *(($5 + [200]))
	goto $label$10 
	
.LABEL $label$74
	$7 = $0
	$9 = [54]
	goto $label$6 
	
.LABEL $label$73
	*($3) = $0
	CALL _ZdlPv($7)
	$9 = [5]
	goto $label$6 
	
.LABEL $label$72
	$0 = *($5 + [120])
	if ( ($0 == 0) ){ goto $label$50 }
	$9 = [6]
	goto $label$6 
	
.LABEL $label$71
	$3 = ($5 + [124])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$47 }
	$9 = [7]
	goto $label$6 
	
.LABEL $label$70
	$9 = [8]
	goto $label$6 
	
.LABEL $label$69
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$45 }
	$9 = [9]
	goto $label$6 
	
.LABEL $label$68
	CALL _ZdlPv($8)
	$9 = [10]
	goto $label$6 
	
.LABEL $label$67
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$46 }
	$9 = [11]
	goto $label$6 
	
.LABEL $label$66
	$7 = *(($5 + [120]))
	goto $label$44 
	
.LABEL $label$65
	$7 = $0
	$9 = [12]
	goto $label$6 
	
.LABEL $label$64
	*($3) = $0
	CALL _ZdlPv($7)
	$9 = [13]
	goto $label$6 
	
.LABEL $label$63
	$global$0 = ($5 + [256])
	return 
	
.LABEL $label$62
	CALL $17(($5 + [24]), ($5 + [40]), ($5 + [144]), ($5 + [248]))
	$7 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( $7 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$61
	$1 = CALL current_time()
	*([0] + [8200]) = [1]
	$2 = ((int_64)$1 + (int_64)28800000000)
	*([0] + [8192]) = $2
	goto $label$41 
	
.LABEL $label$60
	$9 = [1]
	goto $label$6 
	
.LABEL $label$59
	$9 = [3]
	goto $label$6 
	
.LABEL $label$58
	$9 = [0]
	goto $label$6 
	
.LABEL $label$57
	$9 = [2]
	goto $label$6 
	
.LABEL $label$56
	$9 = [71]
	goto $label$6 
	
.LABEL $label$55
	$9 = [4]
	goto $label$6 
	
.LABEL $label$54
	$9 = [5]
	goto $label$6 
	
.LABEL $label$53
	$9 = [5]
	goto $label$6 
	
.LABEL $label$52
	$9 = [5]
	goto $label$6 
	
.LABEL $label$51
	$9 = [5]
	goto $label$6 
	
.LABEL $label$50
	$9 = [13]
	goto $label$6 
	
.LABEL $label$49
	$9 = [13]
	goto $label$6 
	
.LABEL $label$48
	$9 = [6]
	goto $label$6 
	
.LABEL $label$47
	$9 = [14]
	goto $label$6 
	
.LABEL $label$46
	$9 = [8]
	goto $label$6 
	
.LABEL $label$45
	$9 = [10]
	goto $label$6 
	
.LABEL $label$44
	$9 = [12]
	goto $label$6 
	
.LABEL $label$43
	$9 = [17]
	goto $label$6 
	
.LABEL $label$42
	$9 = [18]
	goto $label$6 
	
.LABEL $label$41
	$9 = [19]
	goto $label$6 
	
.LABEL $label$40
	$9 = [20]
	goto $label$6 
	
.LABEL $label$39
	$9 = [23]
	goto $label$6 
	
.LABEL $label$38
	$9 = [65]
	goto $label$6 
	
.LABEL $label$37
	$9 = [22]
	goto $label$6 
	
.LABEL $label$36
	$9 = [22]
	goto $label$6 
	
.LABEL $label$35
	$9 = [22]
	goto $label$6 
	
.LABEL $label$34
	$9 = [25]
	goto $label$6 
	
.LABEL $label$33
	$9 = [29]
	goto $label$6 
	
.LABEL $label$32
	$9 = [26]
	goto $label$6 
	
.LABEL $label$31
	$9 = [28]
	goto $label$6 
	
.LABEL $label$30
	$9 = [28]
	goto $label$6 
	
.LABEL $label$29
	$9 = [27]
	goto $label$6 
	
.LABEL $label$28
	$9 = [58]
	goto $label$6 
	
.LABEL $label$27
	$9 = [31]
	goto $label$6 
	
.LABEL $label$26
	$9 = [31]
	goto $label$6 
	
.LABEL $label$25
	$9 = [31]
	goto $label$6 
	
.LABEL $label$24
	$9 = [62]
	goto $label$6 
	
.LABEL $label$23
	$9 = [39]
	goto $label$6 
	
.LABEL $label$22
	$9 = [57]
	goto $label$6 
	
.LABEL $label$21
	$9 = [34]
	goto $label$6 
	
.LABEL $label$20
	$9 = [36]
	goto $label$6 
	
.LABEL $label$19
	$9 = [38]
	goto $label$6 
	
.LABEL $label$18
	$9 = [47]
	goto $label$6 
	
.LABEL $label$17
	$9 = [56]
	goto $label$6 
	
.LABEL $label$16
	$9 = [42]
	goto $label$6 
	
.LABEL $label$15
	$9 = [44]
	goto $label$6 
	
.LABEL $label$14
	$9 = [46]
	goto $label$6 
	
.LABEL $label$13
	$9 = [55]
	goto $label$6 
	
.LABEL $label$12
	$9 = [50]
	goto $label$6 
	
.LABEL $label$11
	$9 = [52]
	goto $label$6 
	
.LABEL $label$10
	$9 = [54]
	goto $label$6 
	
.LABEL $label$9
	$9 = [60]
	goto $label$6 
	
.LABEL $label$8
	$9 = [61]
	goto $label$6 
	
.LABEL $label$7
	$9 = [67]
	goto $label$6 
	$9
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [17477])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [17477])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [17477])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [17477])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [17477])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [17477])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17477])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [17477])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [17477])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $70(CALL $45($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $101($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $3($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $2($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $4($2, $1)
	CALL $6(CALL $5(CALL $5($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [176])
	$global$0 = $2
	*((($2 + [104]) + [32])) = [0]
	*($2 + [120]) = (int_64)-1
	$3 = *($0)
	*($2 + [104]) = $3
	*($2 + [112]) = $3
	*($2 + [128]) = (int_64)0
	$4 = [0]
	$5 = CALL db_lowerbound_i64($3, $3, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $10(($2 + [104]), $5)
	
.LABEL $label$1
	*((($2 + [64]) + [32])) = [0]
	*($2 + [80]) = (int_64)-1
	*($2 + [88]) = (int_64)0
	*($2 + [64]) = *($0)
	$3 = *($1)
	*($2 + [72]) = $3
	CALL $18(($2 + [56]), ($2 + [64]), $3, [17193])
	if ( (*([0] + [8200]) == 0) ){ goto $label$3 }
	$3 = *([0] + [8192])
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL current_time()
	*([0] + [8200]) = [1]
	$3 = ((int_64)$3 + (int_64)28800000000)
	*([0] + [8192]) = $3
	
.LABEL $label$2
	$7 = *(*($2 + [60]) + [8])
	$8 = ((uint_64)$7 / (uint_64)(int_64)86400000000)
	$6 = ((uint_64)$3 / (uint_64)(int_64)86400000000)
	$5 = ((int_64)$6 != (int_64)$8)
	$9 = *($4 + [16])
	if ( ((int_32)$9 != (int_32)[1]) ){ goto $label$7 }
	if ( ((int_64)$7 >= (int_64)*($4 + [24])) ){ goto $label$6 }
	
.LABEL $label$7
	$10 = (int_64))($7 - ((int_64)$8 * (int_64)86400000000))
	$11 = *($4 + [48])
	$7 = (int_64)
	if ( ((uint_64)$7($3 - ((int_64)$6 * (int_64)86400000000))) <= (uint_64)$11) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [56])) ){ goto $label$8 }
	$5 = (((int_64)$6 != (int_64)$8) | (uint_64)($10 <= $11))
	
.LABEL $label$8
	$6 = *($4 + [64])
	if ( ((uint_64)$7 <= (uint_64)$6) ){ goto $label$9 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [72])) ){ goto $label$9 }
	$5 = ($5 | (uint_64)($10 <= $6))
	
.LABEL $label$9
	$6 = *($4 + [80])
	if ( ((uint_64)$7 <= (uint_64)$6) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [88])) ){ goto $label$6 }
	if ( ($5 | (uint_64)($10 <= $6)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	$7 = *($0)
	*($2 + [16]) = $7
	$6 = *($1)
	*($2 + [24]) = $6
	*($2 + [40]) = (int_64)0
	$5 = CALL db_lowerbound_i64($7, $6, (int_64)-4992121834821386240, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$10 }
	$5 = CALL $19(($2 + [16]), $5)
	
.LOOP $label$11:
	*($2 + [8]) = *($5)
	CALL eosio_assert([1], [17912])
	$9 = *($5 + [36])
	$5 = [0]
	$9 = CALL db_next_i64($9, ($2 + [144]))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$12 }
	$5 = CALL $19(($2 + [16]), $9)
	
.LABEL $label$12
	CALL $20($0, $1, ($2 + [8]))
	if ( $5 ){ goto $label$11 }
	
.LABEL $label$10
	$6 = *($0)
	$5 = *($2 + [60])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [17942])
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($2 + [64])), [17977])
	CALL eosio_assert(((int_64)*($2 + [64]) == (int_64)CALL $fimport$7()), [18023])
	*($5 + [8]) = $3
	*($5 + [16]) = [0]
	$7 = *($5)
	CALL eosio_assert([1], [18074])
	CALL eosio_assert([1], [17477])
	CALL memcpy(($2 + [144]), $5, [8])
	CALL eosio_assert([1], [17477])
	CALL memcpy((($2 + [144]) | [8]), ($5 + [8]), [8])
	CALL eosio_assert([1], [17477])
	CALL memcpy((($2 + [144]) + [16]), ($5 + [16]), [1])
	CALL db_update_i64(*($5 + [24]), $6, ($2 + [144]), [17])
	$5 = (($2 + [64]) + [16])
	if ( (uint_64)($7 <= *($5)) ){ goto $label$13 }
	*($5) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	$0 = *($2 + [40])
	if ( ($0 == 0) ){ goto $label$14 }
	$1 = ($2 + [44])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$16 }
	
.LOOP $label$17:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$18 }
	CALL _ZdlPv($9)
	
.LABEL $label$18
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$17 }
	$5 = *(($2 + [40]))
	goto $label$15 
	
.LABEL $label$16
	$5 = $0
	
.LABEL $label$15
	*($1) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$9 = *(($4 + [16]))
	
.LABEL $label$4
	if ( (($9 & [255]) == 0) ){ goto $label$21 }
	if ( ((int_64)$3 <= (int_64)*($4 + [24])) ){ goto $label$21 }
	CALL eosio_assert((*(*($2 + [60]) + [16]) <= *($4 + [18])), [17209])
	$0 = *($2 + [88])
	if ( $0 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	CALL eosio_assert((*(*($2 + [60]) + [16]) <= *($4 + [17])), [17209])
	$0 = *($2 + [88])
	if ( ($0 == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$4 = ($2 + [92])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$25 }
	CALL _ZdlPv($9)
	
.LABEL $label$25
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($2 + [88]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $0
	
.LABEL $label$22
	*($4) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$0 = *($2 + [128])
	if ( ($0 == 0) ){ goto $label$26 }
	$4 = ($2 + [132])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$28 }
	
.LOOP $label$29:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$30 }
	CALL _ZdlPv($9)
	
.LABEL $label$30
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$29 }
	$5 = *(($2 + [128]))
	goto $label$27 
	
.LABEL $label$28
	$5 = $0
	
.LABEL $label$27
	*($4) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$26
	$global$0 = ($2 + [176])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [512])
	$global$0 = $2
	$3 = [0]
	*((($2 + [256]) + [32])) = [0]
	*($2 + [272]) = (int_64)-1
	$4 = *($0)
	*($2 + [256]) = $4
	*($2 + [264]) = $4
	*($2 + [280]) = (int_64)0
	$5 = [0]
	$6 = CALL db_lowerbound_i64($4, $4, (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $8(($2 + [256]), $6)
	
.LABEL $label$1
	*($2 + [252]) = $5
	*($2 + [248]) = ($2 + [256])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [17224])
	*((($2 + [208]) + [32])) = [0]
	*($2 + [224]) = (int_64)-1
	$4 = *($0)
	*($2 + [208]) = $4
	*($2 + [216]) = $4
	*($2 + [232]) = (int_64)0
	$5 = CALL db_lowerbound_i64($4, $4, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $10(($2 + [208]), $5)
	
.LABEL $label$2
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($2 + [256]), *(($2 + [264])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $8(($2 + [256]), $5)
	CALL eosio_assert([1], [17912])
	$5 = CALL db_next_i64(*($5 + [68]), ($2 + [352]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$4 = (int_64)1
	
.LOOP $label$5:
	$5 = CALL $8(($2 + [256]), $5)
	CALL eosio_assert([1], [17912])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = CALL db_next_i64(*($5 + [68]), ($2 + [352]))
	if ( ((int_32)$5 >= (int_32)[0]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$4 = (int_64)1
	
.LABEL $label$3
	$5 = CALL tapos_block_prefix()
	$6 = CALL tapos_block_num()
	*($2 + [200]) = (int_64))(((int_64)((int_64)*($1) + (int_64)(CASTING int_64)(int_32 ((int_32)$6 * (int_32)$5))) + (int_64)*($3 + [40])) - CALL current_time())
	CALL sha256(($2 + [200]), [4], ($2 + [160]))
	$5 = *($2 + [252])
	$7 = ((int_64)((int_64)((int_64)*($2 + [168]) + (int_64)*($2 + [160])) + (int_64)*($2 + [176])) + (int_64)*($2 + [184]))
	$4 = ((uint_64)$7 % (uint_64)$4)
	if ( (int_64)($4 == 0) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((int_32)$5 != (int_32)[0])
	
.LOOP $label$7:
	CALL eosio_assert(($6 & [1]), [17912])
	$4 = ((int_64)$4 + (int_64)-1)
	$5 = [0]
	$6 = CALL db_next_i64(*(*($2 + [252]) + [68]), ($2 + [352]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $8(*($2 + [248]), $6)
	
.LABEL $label$8
	*($2 + [252]) = $5
	if ( (int_64)($4 == 0) ){ goto $label$6 }
	$6 = ((int_32)$5 != (int_32)[0])
	if ( $5 ){ goto $label$7 }
	
.LABEL $label$6
	$8 = ($3 + [40])
	$9 = *(($5 + [40]))
	$6 = *($5 + [60])
	$10 = *($5 + [56])
	$11 = *($5 + [48])
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17542])
	$4 = (uint_64)$9 >> (uint_64)(int_64)8)
	$12 = ((int_64)((uint_64)$7 % (uint_64)(CASTING uint_64)(uint_32 (($10 + [1]) - $6))) + (int_64)(CASTING uint_64)(uint_32 $6))
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$4 = $7
	$6 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$4 = $7
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $6 ){ goto $label$13 }
	$6 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$6 = [0]
	
.LABEL $label$9
	CALL eosio_assert($6, [17591])
	$5 = *($2 + [252])
	CALL eosio_assert(((int_64)$9 == (int_64)*(($5 + [40]))), [17483])
	CALL eosio_assert(((int_64)$11 < (int_64)*($5 + [32])), [17241])
	*($2 + [144]) = $12
	*($2 + [152]) = *((*($2 + [252]) + [40]))
	CALL eosio_assert([1], [17542])
	$4 = (uint_64)*($2 + [152]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$7 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$4 = $7
	$6 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$4 = $7
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $6 ){ goto $label$18 }
	$6 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	
.LABEL $label$14
	CALL eosio_assert($6, [17591])
	$4 = *($2 + [144])
	$6 = ($2 + [152])
	$7 = *($6)
	CALL eosio_assert(((int_64)$9 == (int_64)$7), [17741])
	$4 = ((int_64)$4 + (int_64)$11)
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [17784])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [17803])
	$5 = *($2 + [252])
	CALL eosio_assert(((int_64)$7 == (int_64)*(($5 + [40]))), [17483])
	if ( ((int_64)$4 <= (int_64)*($5 + [32])) ){ goto $label$19 }
	$5 = *($2 + [252])
	$4 = *($5 + [32])
	$7 = *(($5 + [40]))
	CALL eosio_assert(((int_64)$9 == (int_64)$7), [17821])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($4 - $11)) > (int_64)-4611686018427387904), [17869])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [17891])
	*($6) = $7
	*($2 + [144]) = $4
	
.LABEL $label$19
	$7 = *($0)
	$5 = *($2 + [252])
	$4 = *($5 + [24])
	if ( ((int_64)$4 == (int_64)$7) ){ goto $label$20 }
	*($2 + [464]) = (int_64)3617214756542218240
	*($2 + [456]) = $4
	$9 = *($5 + [16])
	*(($2 + [376])) = *((($2 + [144]) + [8]))
	*($2 + [360]) = $7
	*($2 + [352]) = $4
	*($2 + [368]) = *($2 + [144])
	$13 = ($2 + [384])
	$4 = *($1)
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$24 }
	$6 = [0]
	$10 = *([0] + [17440])
	
.LOOP $label$26:
	*((($2 + [32]) + ($5 = $6))) = *(($10 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$6 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$25 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$26 }
	
.LABEL $label$25
	*(($2 + [328])) = [0]
	*($2 + [320]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$23 }
	*($2 + [320]) = ($6 << [1])
	$10 = (($2 + [320]) | [1])
	goto $label$22 
	
.LABEL $label$24
	*((($2 + [320]) + [8])) = [0]
	*($2 + [320]) = (int_64)0
	*($2 + [320]) = [0]
	$5 = (($2 + [320]) | [1])
	goto $label$21 
	
.LABEL $label$23
	$14 = (($6 + [16]) & [-16])
	$10 = CALL _Znwj($14)
	*($2 + [320]) = ($14 | [1])
	*($2 + [328]) = $10
	*($2 + [324]) = $6
	
.LABEL $label$22
	$14 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$27:
	*(($10 + $5)) = *((($2 + [32]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$14 != (int_32)$5) ){ goto $label$27 }
	$5 = ($10 + $6)
	
.LABEL $label$21
	*($5) = [0]
	$5 = CALL $99(($2 + [320]), [0], [17267])
	*($13) = *($5)
	$6 = ($5 + [8])
	*(($13 + [8])) = *($6)
	*($5) = (int_64)0
	*($6) = [0]
	$5 = CALL $21(($2 + [32]), ($2 + [456]), $9, (int_64)-3617168760277827584, ($2 + [352]))
	CALL $22(($2 + [96]), $5)
	$6 = *($2 + [96])
	CALL send_inline($6, (*($2 + [100]) - $6))
	$6 = *($2 + [96])
	if ( ($6 == 0) ){ goto $label$28 }
	*($2 + [100]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$28
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$29 }
	*(($5 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$29
	$6 = *($5 + [16])
	if ( ($6 == 0) ){ goto $label$30 }
	*(($5 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$30
	if ( ((*(($2 + [384])) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($2 + [392])))
	
.LABEL $label$31
	if ( ((*($2 + [320]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($2 + [328]))
	
.LABEL $label$20
	if ( (*([0] + [8200]) == 0) ){ goto $label$33 }
	$7 = *([0] + [8192])
	goto $label$32 
	
.LABEL $label$33
	$4 = CALL current_time()
	*([0] + [8200]) = [1]
	$7 = ((int_64)$4 + (int_64)28800000000)
	*([0] + [8192]) = $7
	
.LABEL $label$32
	*(($10 = ($2 + [128]))) = [0]
	*($2 + [112]) = (int_64)-1
	*($2 + [120]) = (int_64)0
	$4 = *($0)
	*($2 + [96]) = $4
	*($2 + [104]) = *($1)
	*($2 + [356]) = ($2 + [136])
	*($2 + [352]) = ($2 + [96])
	*($2 + [360]) = ($2 + [248])
	*($2 + [364]) = ($2 + [144])
	*($2 + [456]) = $4
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$7()), [18184])
	*($2 + [36]) = ($2 + [352])
	*($2 + [32]) = ($2 + [96])
	*($2 + [40]) = ($2 + [456])
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = ($2 + [96])
	CALL $23(($2 + [32]), $5)
	*($2 + [320]) = $5
	$4 = *($5)
	*($2 + [32]) = $4
	$14 = *($5 + [36])
	*($2 + [16]) = $14
	$13 = ($2 + [124])
	$6 = *($13)
	if ( ((uint_32)$6 >= (uint_32)*($10)) ){ goto $label$36 }
	*($6 + [8]) = $4
	*($6 + [16]) = $14
	*($2 + [320]) = [0]
	*($6) = $5
	*($13) = ($6 + [24])
	$6 = *($2 + [320])
	$5 = [0]
	*($2 + [320]) = [0]
	if ( $6 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	CALL $24(($2 + [120]), ($2 + [320]), ($2 + [32]), ($2 + [16]))
	$6 = *($2 + [320])
	$5 = [0]
	*($2 + [320]) = [0]
	if ( ($6 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv($6)
	
.LABEL $label$34
	$4 = CALL current_time()
	*(($2 + [60])) = (int_64)0
	*(($2 + [76])) = (int_64)0
	*(($2 + [84])) = (int_64)0
	*($2 + [44]) = $5
	*($2 + [48]) = $5
	*($2 + [52 align=4]) = (int_64)0
	*($2 + [68 align=4]) = (int_64)0
	*($2 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [360]) = (int_64)3617214756542218240
	$4 = *($0)
	*($2 + [352]) = $4
	*($2 + [320]) = $4
	*($2 + [16]) = (int_64)-7951197863911211008
	*($2 + [456]) = *($1)
	*($2 + [464]) = *($2 + [136])
	CALL $25(($2 + [68]), ($2 + [352]), ($2 + [320]), ($2 + [16]), ($2 + [456]))
	$4 = *($1)
	$9 = *($2 + [136])
	*($2 + [52]) = [10]
	*($2 + [24]) = $4
	*($2 + [16]) = $9
	CALL cancel_deferred(($2 + [16]))
	$4 = *($1)
	$9 = *($0)
	CALL $1(($2 + [352]), ($2 + [32]))
	$5 = *($2 + [352])
	CALL send_deferred(($2 + [16]), $9, $5, (*($2 + [356]) - $5), ((int_64)$4 != (int_64)0))
	$5 = *($2 + [352])
	if ( ($5 == 0) ){ goto $label$37 }
	*($2 + [356]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$37
	$9 = *($0)
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [17942])
	CALL eosio_assert(((int_32)*($3 + [96]) == (int_32)($2 + [208])), [17977])
	CALL eosio_assert(((int_64)*($2 + [208]) == (int_64)CALL $fimport$7()), [18023])
	*(($5 = ($3 + [40]))) = ((int_64)*($5) + (int_64)1)
	$4 = *($3)
	CALL eosio_assert([1], [18074])
	*($2 + [328]) = (($2 + [352]) + [91])
	*($2 + [324]) = ($2 + [352])
	*($2 + [320]) = ($2 + [352])
	*($2 + [296]) = ($2 + [320])
	*($2 + [460]) = ($3 + [8])
	*($2 + [456]) = $3
	*($2 + [464]) = ($3 + [16])
	*($2 + [468]) = ($3 + [17])
	*($2 + [472]) = ($3 + [18])
	*($2 + [476]) = ($3 + [24])
	*($2 + [480]) = ($3 + [32])
	*($2 + [484]) = $8
	*($2 + [488]) = ($3 + [48])
	*($2 + [492]) = ($3 + [56])
	*($2 + [496]) = ($3 + [64])
	*($2 + [500]) = ($3 + [72])
	*($2 + [504]) = ($3 + [80])
	*($2 + [508]) = ($3 + [88])
	CALL $26(($2 + [456]), ($2 + [296]))
	CALL db_update_i64(*($3 + [100]), $9, ($2 + [352]), [91])
	$5 = (($2 + [208]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$38 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$38
	*((($2 + [456]) + [32])) = [0]
	*($2 + [472]) = (int_64)-1
	*($2 + [480]) = (int_64)0
	*($2 + [456]) = *($0)
	$4 = *($1)
	*($2 + [464]) = $4
	CALL $18(($2 + [8]), ($2 + [456]), $4, [17280])
	$9 = *($0)
	$5 = *($2 + [12])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [17942])
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)($2 + [456])), [17977])
	CALL eosio_assert(((int_64)*($2 + [456]) == (int_64)CALL $fimport$7()), [18023])
	*($5 + [8]) = $7
	*($5 + [16]) = (*($5 + [16]) + [1])
	$4 = *($5)
	CALL eosio_assert([1], [18074])
	CALL eosio_assert([1], [17477])
	CALL memcpy(($2 + [352]), $5, [8])
	CALL eosio_assert([1], [17477])
	CALL memcpy((($2 + [352]) | [8]), ($5 + [8]), [8])
	CALL eosio_assert([1], [17477])
	CALL memcpy((($2 + [352]) + [16]), ($5 + [16]), [1])
	CALL db_update_i64(*($5 + [24]), $9, ($2 + [352]), [17])
	if ( (uint_64)($4 <= *($2 + [472])) ){ goto $label$39 }
	*(($2 + [472])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$39
	$7 = *($0)
	$5 = *($2 + [252])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [17942])
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)($2 + [256])), [17977])
	CALL eosio_assert(((int_64)*($2 + [256]) == (int_64)CALL $fimport$7()), [18023])
	*($5 + [48]) = ((int_64)*($5 + [48]) + (int_64)*($2 + [144]))
	$4 = *($5)
	CALL eosio_assert([1], [18074])
	*($2 + [304]) = (($2 + [352]) + [57])
	*($2 + [300]) = ($2 + [352])
	*($2 + [296]) = ($2 + [352])
	*($2 + [312]) = ($2 + [296])
	*($2 + [324]) = ($5 + [8])
	*($2 + [320]) = $5
	*($2 + [328]) = ($5 + [16])
	*($2 + [332]) = ($5 + [24])
	*($2 + [336]) = ($5 + [32])
	*($2 + [340]) = ($5 + [48])
	*($2 + [344]) = ($5 + [56])
	*($2 + [348]) = ($5 + [60])
	CALL $9(($2 + [320]), ($2 + [312]))
	CALL db_update_i64(*($5 + [68]), $7, ($2 + [352]), [57])
	$5 = (($2 + [256]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$40 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$40
	$5 = *($2 + [252])
	if ( ((uint_64)(int_64))(*($5 + [32]) - *($5 + [48])) >= (uint_64)*($5 + [60])) ){ goto $label$41 }
	$4 = *($0)
	*(($6 = ($2 + [376]))) = [0]
	*($2 + [352]) = $4
	*($2 + [360]) = (int_64)5378050756354156032
	*($2 + [368]) = (int_64)0
	*($2 + [320]) = *($5 + [16])
	*($2 + [328]) = *(($5 + [40]))
	*(($5 = CALL _Znwj([16]))) = $4
	*($5 + [8]) = (int_64)3617214756542218240
	*(($2 + [388])) = [0]
	$10 = ($5 + [16])
	*($6) = $10
	*(($2 + [372])) = $10
	*($2 + [368]) = $5
	*($2 + [380 align=4]) = (int_64)0
	CALL $2(($2 + [380]), [16])
	$5 = *($2 + [380])
	$6 = (*(($2 + [384])) - $5)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [17477])
	CALL memcpy($5, ($2 + [320]), [8])
	*($2 + [296]) = *($2 + [328])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [17477])
	CALL memcpy(($5 + [8]), ($2 + [296]), [8])
	CALL $22(($2 + [296]), ($2 + [352]))
	$5 = *($2 + [296])
	CALL send_inline($5, (*($2 + [300]) - $5))
	$5 = *($2 + [296])
	if ( ($5 == 0) ){ goto $label$42 }
	*($2 + [300]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$42
	$5 = *($2 + [380])
	if ( ($5 == 0) ){ goto $label$43 }
	*(($2 + [384])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$43
	$5 = *($2 + [368])
	if ( ($5 == 0) ){ goto $label$41 }
	*(($2 + [372])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$41
	$10 = *($2 + [480])
	if ( ($10 == 0) ){ goto $label$44 }
	$3 = ($2 + [484])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$46 }
	
.LOOP $label$47:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$48 }
	CALL _ZdlPv($6)
	
.LABEL $label$48
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$47 }
	$5 = *(($2 + [480]))
	goto $label$45 
	
.LABEL $label$46
	$5 = $10
	
.LABEL $label$45
	*($3) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$44
	CALL $27(($2 + [32]))
	$10 = *($2 + [120])
	if ( ($10 == 0) ){ goto $label$49 }
	$3 = ($2 + [124])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$51 }
	
.LOOP $label$52:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$53 }
	CALL _ZdlPv($6)
	
.LABEL $label$53
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$52 }
	$5 = *(($2 + [120]))
	goto $label$50 
	
.LABEL $label$51
	$5 = $10
	
.LABEL $label$50
	*($3) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$49
	$10 = *($2 + [232])
	if ( ($10 == 0) ){ goto $label$54 }
	$3 = ($2 + [236])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$56 }
	
.LOOP $label$57:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$58 }
	CALL _ZdlPv($6)
	
.LABEL $label$58
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$57 }
	$5 = *(($2 + [232]))
	goto $label$55 
	
.LABEL $label$56
	$5 = $10
	
.LABEL $label$55
	*($3) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$54
	$10 = *($2 + [280])
	if ( ($10 == 0) ){ goto $label$59 }
	$3 = ($2 + [284])
	$5 = *($3)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$61 }
	
.LOOP $label$62:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$63 }
	CALL _ZdlPv($6)
	
.LABEL $label$63
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$62 }
	$5 = *(($2 + [280]))
	goto $label$60 
	
.LABEL $label$61
	$5 = $10
	
.LABEL $label$60
	*($3) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$59
	$global$0 = ($2 + [512])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17713])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([112])) + [32]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [96]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [17])
	*($3 + [56]) = ($5 + [18])
	*($3 + [60]) = ($5 + [24])
	*($3 + [64]) = ($5 + [32])
	*($3 + [68]) = ($5 + [40])
	*($3 + [72]) = ($5 + [48])
	*($3 + [76]) = ($5 + [56])
	*($3 + [80]) = ($5 + [64])
	*($3 + [84]) = ($5 + [72])
	*($3 + [88]) = ($5 + [80])
	*($3 + [92]) = ($5 + [88])
	CALL $73(($3 + [40]), ($3 + [32]))
	*($5 + [100]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $41(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3020371635640205312, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$7), [18133])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $74($7, CALL $fimport$9(*($7), *($7 + [8]), (int_64)-3020371635640205312, $6))
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)$7), [18133])
	
.LABEL $label$2
	*(($4 + [24])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-3020371635640205312, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $74($6, $8)
	*($3 + [12]) = [0]
	*($3 + [8]) = $6
	$7 = *(*(CALL $75(($3 + [8])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18235])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($5 + [4]))
	$2 = $2
	$6 = ($2 + [-16])
	$global$0 = $6
	CALL eosio_assert([1], [17477])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [17477])
	$2 = ($1 + [8])
	CALL memcpy(($2 + [-8]), $2, [8])
	$7 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)-3020371635640205312, *(*($0 + [8])), $7, $6, [16])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$7 = *(($4 + [8]))
	$9 = *(*(($0 + [8])))
	$10 = *($1)
	*($3 + [8]) = *($2)
	*($1 + [24]) = CALL db_idx64_store($7, (int_64)-3020371635640205312, $9, $10, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17713])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17736])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17736])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [17736])
	CALL memcpy(($5 + [16]), ($2 + [16]), [1])
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $17(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $75 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [20]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17665])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3020371635640205312)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17611])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17611])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $74(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*(($6 + [20])) == (int_32)$1), [18133])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4157493845350678528, $2)
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), $3)
	$6 = CALL $13($1, $6)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$1), [18133])
	*($0 + [4]) = $6
	*($0) = $1
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17713])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	CALL $71(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $58 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17736])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [17736])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $111($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17736])
	CALL memcpy(($4 + [32]), $2, [8])
	*($4) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [17736])
	CALL memcpy($4, ($2 + [8]), [8])
	$8 = *($4)
	*($4 + [40]) = $8
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $8), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $111($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	$2 = *($0)
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$0 = [0]
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $10($1, $3)
	
.LABEL $label$1
	$3 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($3, [17083])
	CALL eosio_assert($3, [18287])
	CALL eosio_assert($3, [17912])
	$3 = CALL db_next_i64(*($0 + [100]), ($1 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $10($1, $3)
	
.LABEL $label$2
	CALL $51($1, $0)
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($1 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($1 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($1 + [48])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [18321])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18366])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18416])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [100]))
}

void .FUNC $52 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth(*($0))
	CALL eosio_assert(CALL $fimport$3($1), [17109])
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)-1
	$4 = *($0)
	*($3) = $4
	*($3 + [8]) = $4
	*($3 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($4, $4, (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$2 }
	$0 = CALL $8($3, $0)
	if ( ((int_64)*($0 + [16]) != (int_64)$1) ){ goto $label$3 }
	$5 = [2]
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	$5 = [15]
	
.LABEL $label$1
	
.LOOP $label$4:
	goto $label$29 
	
.LABEL $label$31
	$0 = CALL $8($3, $0)
	if ( ((int_64)*($0 + [16]) != (int_64)$1) ){ goto $label$13 }
	$5 = [2]
	goto $label$4 
	
.LABEL $label$30
	if ( ((int_64)*(($0 + [40])) == (int_64)$2) ){ goto $label$14 }
	$5 = [0]
	goto $label$4 
	
.LABEL $label$29
	CALL eosio_assert([1], [17912])
	$0 = CALL db_next_i64(*($0 + [68]), ($3 + [40]))
	if ( ((int_32)$0 >= (int_32)[0]) ){ goto $label$15 }
	$5 = [15]
	goto $label$4 
	
.LABEL $label$28
	CALL eosio_assert([0], [17128])
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$9 }
	$5 = [6]
	goto $label$4 
	
.LABEL $label$27
	$7 = ($3 + [28])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$8 }
	$5 = [7]
	goto $label$4 
	
.LABEL $label$26
	$5 = [8]
	goto $label$4 
	
.LABEL $label$25
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$6 }
	$5 = [9]
	goto $label$4 
	
.LABEL $label$24
	CALL _ZdlPv($8)
	$5 = [10]
	goto $label$4 
	
.LABEL $label$23
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$7 }
	$5 = [11]
	goto $label$4 
	
.LABEL $label$22
	$0 = *(($3 + [24]))
	goto $label$5 
	
.LABEL $label$21
	$0 = $6
	$5 = [12]
	goto $label$4 
	
.LABEL $label$20
	*($7) = $6
	CALL _ZdlPv($0)
	$5 = [13]
	goto $label$4 
	
.LABEL $label$19
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$18
	CALL eosio_assert([1], [18287])
	CALL eosio_assert([1], [17912])
	$8 = CALL db_next_i64(*($0 + [68]), ($3 + [40]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$12 }
	$5 = [4]
	goto $label$4 
	
.LABEL $label$17
	CALL $8($3, $8)
	$5 = [5]
	goto $label$4 
	
.LABEL $label$16
	CALL $53($3, $0)
	$6 = *($3 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$15
	$5 = [1]
	goto $label$4 
	
.LABEL $label$14
	$5 = [3]
	goto $label$4 
	
.LABEL $label$13
	$5 = [0]
	goto $label$4 
	
.LABEL $label$12
	$5 = [5]
	goto $label$4 
	
.LABEL $label$11
	$5 = [13]
	goto $label$4 
	
.LABEL $label$10
	$5 = [6]
	goto $label$4 
	
.LABEL $label$9
	$5 = [13]
	goto $label$4 
	
.LABEL $label$8
	$5 = [14]
	goto $label$4 
	
.LABEL $label$7
	$5 = [8]
	goto $label$4 
	
.LABEL $label$6
	$5 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = [12]
	goto $label$4 
	$5
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [18321])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18366])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18416])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($3 + [88]) = $2
	*($3 + [96]) = $1
	CALL require_auth(*($0))
	*((($3 + [48]) + [32])) = [0]
	*($3 + [56]) = $1
	*($3 + [64]) = (int_64)-1
	$2 = *($0)
	*($3 + [48]) = $2
	*($3 + [72]) = (int_64)0
	$4 = CALL db_lowerbound_i64($2, $1, (int_64)-4992121834821386240, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL $19(($3 + [48]), $4)
	$2 = *(CALL $19(($3 + [48]), CALL $fimport$5(*($3 + [48]), *(($3 + [56])), (int_64)-4992121834821386240, (int_64)0)))
	*($3 + [88]) = $2
	*($3 + [8]) = (CASTING uint_64)(uint_32 ($3 + [48]))
	$5 = *(*(CALL $55(($3 + [8])) + [4]))
	if ( ((uint_64)$2 > (uint_64)$5) ){ goto $label$1 }
	$2 = ((int_64)$2 + (int_64)-1)
	
.LOOP $label$2:
	CALL $20($0, ($3 + [96]), ($3 + [88]))
	*($3 + [88]) = ((int_64)$2 + (int_64)2)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$5 != (int_64)$2) ){ goto $label$2 }
	
.LABEL $label$1
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$2 = *($0)
	*($3 + [8]) = $2
	*($3 + [16]) = $1
	$0 = CALL db_find_i64($2, $1, (int_64)-4157493845350678528, $1)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$5 }
	$0 = CALL $13(($3 + [8]), $0)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)($3 + [8])), [18133])
	CALL eosio_assert([1], [17175])
	CALL eosio_assert([1], [18287])
	CALL eosio_assert([1], [17912])
	$4 = CALL db_next_i64(*($0 + [24]), ($3 + [104]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$6 }
	CALL $13(($3 + [8]), $4)
	
.LABEL $label$6
	CALL $56(($3 + [8]), $0)
	$6 = *($3 + [32])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert([0], [17175])
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($3 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $6
	
.LABEL $label$7
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$6 = *($3 + [72])
	if ( ($6 == 0) ){ goto $label$11 }
	$7 = ($3 + [76])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$13 }
	
.LOOP $label$14:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$14 }
	$0 = *(($3 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$0 = $6
	
.LABEL $label$12
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$global$0 = ($3 + [112])
}

void .FUNC $34 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = *($2)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($1)
	*($3 + [8]) = $5
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	*($3 + [16]) = $4)
	$1 = [0]
	$6 = CALL db_find_i64($5, $4, (int_64)-4157508551318700032, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $38(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)($3 + [8])), [18133])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [17299])
	CALL eosio_assert(((int_64)*($2) == (int_64)*($1 + [8])), [17326])
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($3 + [36])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [20])) == (int_32)$0), [18321])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18366])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18416])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$0 != (int_64)$1) ){ goto $label$10 }
	if ( ((int_64)$2 > (int_64)5378050749326544143) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)-4417247484950609921) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-8524040059471527936) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-7951197863911211008) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [1]
	*($3) = *($3 + [136])
	CALL $58($0, $0, $3)
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-6569208335818555392) ){ goto $label$1 }
	CALL eosio_assert(((int_64)$1 == (int_64)6138663577826885632), [17373])
	goto $label$1 
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)5378050756955193343) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)5378050749326544144) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)5378050756354156032) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [2]
	*($3 + [40]) = *($3 + [96])
	CALL $59($0, $0, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [76]) = [0]
	*($3 + [72]) = [3]
	*($3 + [64]) = *($3 + [72])
	CALL $60($0, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4417247484950609920) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)3626411730319441920) ){ goto $label$1 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [4]
	*($3 + [24]) = *($3 + [112])
	CALL $61($0, $0, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)5378050756955193344) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)5935072309878980608) ){ goto $label$1 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [5]
	*($3 + [32]) = *($3 + [104])
	CALL $61($0, $0, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [84]) = [0]
	*($3 + [80]) = [6]
	*($3 + [56]) = *($3 + [80])
	CALL $62($0, $0, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [124]) = [0]
	*($3 + [120]) = [7]
	*($3 + [16]) = *($3 + [120])
	CALL $63($0, $0, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [132]) = [0]
	*($3 + [128]) = [8]
	*($3 + [8]) = *($3 + [128])
	CALL $64($0, $0, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [92]) = [0]
	*($3 + [88]) = [9]
	*($3 + [48]) = *($3 + [88])
	CALL $58($0, $0, ($3 + [48]))
	
.LABEL $label$1
	CALL $103([0])
	$global$0 = ($3 + [144])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $2(($7 + [28]), [64])
	$2 = *(($7 + [32]))
	$1 = *($7 + [28])
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	CALL $77(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $8)
	$1 = [0]
	
.LOOP $label$7:
	$9 = ($8 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($9 + [-32]))
	*(($2 + [-40])) = *(($9 + [-40]))
	*(($6 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($9 + [-24])
	*($6) = *($4)
	$6 = ($9 + [-16])
	*($3) = *($6)
	*($6) = [0]
	*(($6 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($9 + [-12])
	*($6) = *($3)
	*($4) = (int_64)0
	$9 = ($9 + [-4])
	*($2) = *($9)
	*($9) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$9 = *(($2 + [-12]))
	if ( ($9 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$10
	$9 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $9
	if ( ((int_32)$6 != (int_32)$9) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$global$0 = ($5 + [32])
	(unreachable)
}

int_32 .FUNC $110 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8216]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8220])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8216]) = [1]
	$2 = ($2 << [16])
	*([0] + [8220]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8220])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8220]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8216]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8216]) = [1]
	$3 = ($3 << [16])
	*([0] + [8220]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8220])
	
.LABEL $label$10
	*([0] + [8220]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $111 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16608])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16416]
	$3 = (((int_32)$1 * (int_32)[12]) + [16416])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$1), [18133])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-4992121834821386240, $2)
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), $3)
	$6 = CALL $19($1, $6)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$1), [18133])
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $28 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [208])
	$global$0 = $3
	*((($3 + [152]) + [32])) = [0]
	*($3 + [160]) = $1
	*($3 + [168]) = (int_64)-1
	*($3 + [176]) = (int_64)0
	*($3 + [152]) = *($0)
	CALL $29(($3 + [144]), ($3 + [152]), $2, [16783])
	CALL eosio_assert(((int_64)*(*($3 + [148]) + [16]) > (int_64)0), [16801])
	*($3 + [96]) = (int_64)3617214756542218240
	$2 = *($0)
	*($3 + [88]) = $2
	$4 = *($3 + [148])
	$5 = *($4 + [8])
	*((($3 + [32]) + [24])) = *(($4 + [24]))
	*($3 + [40]) = $1
	*($3 + [32]) = $2
	*($3 + [48]) = *($4 + [16])
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	$4 = CALL $105([16813])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*($3 + [16]) = ($4 << [1])
	$6 = (($3 + [16]) | [1])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($7)
	*($3 + [16]) = ($7 | [1])
	*($3 + [24]) = $6
	*($3 + [20]) = $4
	
.LABEL $label$6
	CALL memcpy($6, [16813], $4)
	
.LABEL $label$5
	$8 = (($3 + [32]) + [32])
	$7 = [0]
	*(($6 + $4)) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$11 }
	$6 = *([0] + [17440])
	
.LOOP $label$13:
	*((($3 + [104]) + ($4 = $7))) = *(($6 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$4 == (int_32)[12]) )))))
	$7 = ($4 + [1])
	if ( ((uint_32)$4 > (uint_32)[11]) ){ goto $label$12 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$10 }
	*($3) = ($7 << [1])
	$6 = ($3 | [1])
	goto $label$9 
	
.LABEL $label$11
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$4 = ($3 | [1])
	$7 = $4
	goto $label$8 
	
.LABEL $label$10
	$9 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*($3 + [8]) = $6
	*($3 + [4]) = $7
	
.LABEL $label$9
	$9 = ($4 + [1])
	$4 = [0]
	
.LOOP $label$14:
	*(($6 + $4)) = *((($3 + [104]) + $4))
	$4 = ($4 + [1])
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$14 }
	$7 = ($6 + $7)
	$4 = ($3 | [1])
	
.LABEL $label$8
	*($7) = [0]
	$7 = *($3)
	$6 = ($7 & [1])
	$4 = CALL $97(($3 + [16]), ( *($3 + [8]) ? $4 : $6 ), ( *($3 + [4]) ? uint_32($7 >> [1]) : $6 ))
	*($8) = *($4)
	$7 = ($4 + [8])
	*(($8 + [8])) = *($7)
	*($4) = (int_64)0
	*($7) = [0]
	$4 = CALL $21(($3 + [104]), ($3 + [88]), $5, (int_64)-3617168760277827584, ($3 + [32]))
	CALL $22(($3 + [192]), $4)
	$7 = *($3 + [192])
	CALL send_inline($7, (*($3 + [196]) - $7))
	$7 = *($3 + [192])
	if ( ($7 == 0) ){ goto $label$15 }
	*($3 + [196]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$15
	$7 = *($4 + [28])
	if ( ($7 == 0) ){ goto $label$16 }
	*(($4 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$16
	$7 = *($4 + [16])
	if ( ($7 == 0) ){ goto $label$17 }
	*(($4 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( (*(($3 + [64])) & [1]) ){ goto $label$19 }
	if ( (*($3) & [1]) ){ goto $label$18 }
	goto $label$3 
	
.LABEL $label$19
	CALL _ZdlPv(*(($3 + [72])))
	if ( ((*($3) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$18
	CALL _ZdlPv(*(($3 + [8])))
	$7 = [1]
	if ( (*($3 + [16]) & [1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $93(($3 + [16]))
	
.LABEL $label$3
	$7 = [1]
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [24]))
	
.LABEL $label$1
	$2 = *($0)
	$4 = *($3 + [148])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [17942])
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($3 + [152])), [17977])
	CALL eosio_assert(((int_64)*($3 + [152]) == (int_64)CALL $fimport$7()), [18023])
	*($4 + [16]) = (int_64))((int_64)0 - *($4 + [16]))
	$1 = *($4)
	CALL eosio_assert($7, [18074])
	*($3 + [96]) = (($3 + [32]) + [32])
	*($3 + [92]) = ($3 + [32])
	*($3 + [88]) = ($3 + [32])
	*($3 + [192]) = ($3 + [88])
	*($3 + [108]) = ($4 + [8])
	*($3 + [104]) = $4
	*($3 + [112]) = ($4 + [16])
	CALL $30(($3 + [104]), ($3 + [192]))
	CALL db_update_i64(*($4 + [36]), $2, ($3 + [32]), [32])
	$4 = (($3 + [152]) + [16])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$20 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	$1 = *($3 + [144])
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$7 = ((int_32)$4) != (int_32)[0]
	CALL eosio_assert($7), [18287])
	CALL eosio_assert($7, [17912])
	$7 = CALL db_next_i64(*($4 + [36]), ($3 + [32]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$21 }
	CALL $19((CASTING uint_32)(uint_64 $1), $7)
	
.LABEL $label$21
	CALL $31(($3 + [152]), $4)
	$6 = *($3 + [176])
	if ( ($6 == 0) ){ goto $label$22 }
	$9 = ($3 + [180])
	$4 = *($9)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$24 }
	
.LOOP $label$25:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$26 }
	CALL _ZdlPv($7)
	
.LABEL $label$26
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$25 }
	$4 = *(($3 + [176]))
	goto $label$23 
	
.LABEL $label$24
	$4 = $6
	
.LABEL $label$23
	*($9) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$global$0 = ($3 + [208])
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17665])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4992121834821386240)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17611])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17611])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $19(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $108($1)
	
.LABEL $label$2
	*(CALL $102()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $108(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $111($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $102())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $107($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($4 + [32])
	$6 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $2($6, $7)
	$6 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [12]) = $7
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($5 + [24]) = ($5 + [8])
	*($5 + [44]) = $1
	*($5 + [32]) = $4
	*($5 + [36]) = ($4 + [8])
	*($5 + [40]) = ($4 + [16])
	CALL $32(($5 + [32]), ($5 + [24]))
	$global$0 = ($5 + [48])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [64])
	$global$0 = $3
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [16]) = *($0)
	*($3 + [24]) = *($1)
	*($3 + [40]) = (int_64)0
	CALL $29(($3 + [8]), ($3 + [16]), *($2), [17353])
	if ( ((int_64)*(*($3 + [12]) + [16]) <= (int_64)0) ){ goto $label$3 }
	$0 = *($3 + [40])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($3 + [8])
	$2 = (CASTING uint_32)(uint_64 (uint_64)$4 >> (uint_64)(int_64)32)
	$1 = ((int_32)$2) != (int_32)[0]
	CALL eosio_assert($1), [18287])
	CALL eosio_assert($1, [17912])
	$1 = CALL db_next_i64(*($2 + [36]), ($3 + [56]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$4 }
	CALL $19((CASTING uint_32)(uint_64 $4), $1)
	
.LABEL $label$4
	CALL $31(($3 + [16]), $2)
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($3 + [44])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	CALL _ZdlPv($1)
	
.LABEL $label$8
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$7 }
	$2 = *(($3 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$2 = $0
	
.LABEL $label$5
	*($5) = $0
	CALL _ZdlPv($2)
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [64])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-4992121834821386240, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $19($6, $8)
	*($3 + [36]) = [0]
	*($3 + [32]) = $6
	$7 = *(*(CALL $55(($3 + [32])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [18235])
	$7 = *(($6 + [16]))
	*($1) = $7
	*(*($5 + [4])) = $7
	*($1 + [8]) = *(*(*($5 + [8]) + [4]) + [16])
	$5 = *($5 + [12])
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [16]) = *($5)
	$6 = $2
	$5 = ($6 + [-32])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	CALL $30(($3 + [32]), ($3 + [24]))
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-4992121834821386240, *(*($0 + [8])), $7, $5, [32])
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $2($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17477])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17477])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $70(CALL $45($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $2(($6 + [28]), [16])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [17477])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [17477])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [15]) = *(*($0 + [8]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17477])
	CALL memcpy(*($4 + [4]), ($2 + [15]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17477])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [17477])
	CALL memcpy(*($4 + [4]), $3, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [52])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($0 + [4]), $4, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $110($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [18473])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $94(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $94(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $83(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $108 (int_32 $0)
{
	return CALL $109([8224], $0)
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [16]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [16]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [16])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [17736])
	CALL memcpy(($2 + [31]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($4 + [16]) = ((int_32)*($2 + [31]) != (int_32)[0])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [17736])
	CALL memcpy(($4 + [17]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [17736])
	CALL memcpy(($4 + [18]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($2 + [8]) = $4
	CALL $81(($2 + [8]), $1)
	$global$0 = ($2 + [32])
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	$3 = ($global$0 - [224])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = [0]
	*($4 + [106]) = [0]
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [208]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $65(($4 + [40]), ($4 + [208]))
	*(($8 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	*(($3 = (($4 + [192]) + [8]))) = *($8)
	*($4 + [192]) = *($4 + [24])
	$8 = *($3)
	*((($4 + [208]) + [8])) = $8
	*(($4 + [64])) = $8
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [192])
	*($4 + [56]) = $0
	*($4 + [208]) = $0
	*(($8 = (($4 + [176]) + [8]))) = *($4 + [96])
	*($4 + [176]) = *($4 + [88])
	$9 = *($4 + [104])
	$10 = *($4 + [105])
	$11 = *($4 + [106])
	$0 = *($4 + [112])
	$1 = *($4 + [120])
	$12 = *($4 + [128])
	$13 = *($4 + [136])
	$14 = *($4 + [144])
	$15 = *($4 + [152])
	$16 = *($4 + [160])
	$17 = *($4 + [168])
	*($3) = *($8)
	*($4 + [192]) = *($4 + [176])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$18 = *((($4 + [192]) + [8]))
	*((($4 + [208]) + [8])) = $18
	*((($4 + [8]) + [8])) = $18
	$18 = *($4 + [192])
	*($4 + [8]) = $18
	*($4 + [208]) = $18
	CALL void $3((int_32 ($4 + [8])), (int_32 ((int_32)($9 & [255]) != (int_32)[0])), (int_32 ($10 & [255])), (int_32 ($11 & [255])), (int_32 $0), (int_64 $1), (int_64 $12), (int_64 $13), (int_64 $14), (int_64 $15), (int_64 $16), (int_64 $17), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $111($2)
	
.LABEL $label$5
	$global$0 = ($4 + [224])
	return [1]
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [24])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($4 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [40])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($4 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($4 + [56])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($4 + [64]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [40])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [56])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [112]) + [24]))) = (int_64)0
	*(($8 = ($4 + [152]))) = (int_64)0
	*(($9 = ($4 + [168]))) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $7)
	*($4 + [304]) = ($4 + [96])
	*($4 + [64]) = ($4 + [112])
	CALL $66(($4 + [64]), ($4 + [304]))
	*(($10 = (($4 + [48]) + [8]))) = *($4 + [104])
	*($4 + [48]) = *($4 + [96])
	*(($11 = (($4 + [288]) + [8]))) = *($10)
	*($4 + [288]) = *($4 + [48])
	$10 = *($11)
	*((($4 + [304]) + [8])) = $10
	*((($4 + [64]) + [24])) = $10
	*($4 + [64]) = $0
	*($4 + [72]) = $1
	$0 = *($4 + [288])
	*($4 + [80]) = $0
	*($4 + [304]) = $0
	*(($10 = (($4 + [208]) + [8]))) = *($3)
	*(($3 = (($4 + [192]) + [8]))) = *($8)
	*(($8 = (($4 + [176]) + [8]))) = *($9)
	*($4 + [208]) = *($4 + [128])
	*($4 + [192]) = *($4 + [144])
	*($4 + [176]) = *($4 + [160])
	$0 = *($4 + [120])
	$1 = *($4 + [112])
	*((($4 + [256]) + [8])) = *($8)
	*((($4 + [240]) + [8])) = *($3)
	*((($4 + [224]) + [8])) = *($10)
	*($4 + [256]) = *($4 + [176])
	*($4 + [240]) = *($4 + [192])
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$12 = *((($4 + [224]) + [8]))
	*((($4 + [304]) + [8])) = $12
	$13 = *((($4 + [240]) + [8]))
	*((($4 + [288]) + [8])) = $13
	$14 = *((($4 + [256]) + [8]))
	*((($4 + [272]) + [8])) = $14
	*((($4 + [32]) + [8])) = $12
	*((($4 + [16]) + [8])) = $13
	*(($4 + [8])) = $14
	$12 = *($4 + [224])
	*($4 + [304]) = $12
	$13 = *($4 + [240])
	*($4 + [288]) = $13
	*($4 + [32]) = $12
	*($4 + [16]) = $13
	$12 = *($4 + [256])
	*($4) = $12
	*($4 + [272]) = $12
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [32])), (int_32 ($4 + [16])), (int_32 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $111($2)
	
.LABEL $label$6
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $60 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $68(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $69(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $111($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $63 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $111($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

int_32 .FUNC $62 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $108($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [120]) + [24]))) = (int_64)0
	*(($8 = ($4 + [160]))) = (int_64)0
	*(($9 = ($4 + [176]))) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [108]) = $2
	*($4 + [104]) = $2
	*($4 + [112]) = ($2 + $7)
	*($4 + [320]) = ($4 + [104])
	*($4 + [72]) = ($4 + [120])
	CALL $67(($4 + [72]), ($4 + [320]))
	*(($10 = (($4 + [56]) + [8]))) = *($4 + [112])
	*($4 + [56]) = *($4 + [104])
	*(($11 = (($4 + [304]) + [8]))) = *($10)
	*($4 + [304]) = *($4 + [56])
	$10 = *($11)
	*((($4 + [320]) + [8])) = $10
	*((($4 + [72]) + [24])) = $10
	*($4 + [72]) = $0
	*($4 + [80]) = $1
	$0 = *($4 + [304])
	*($4 + [88]) = $0
	*($4 + [320]) = $0
	*(($10 = (($4 + [224]) + [8]))) = *($3)
	*(($3 = (($4 + [208]) + [8]))) = *($8)
	*(($8 = (($4 + [192]) + [8]))) = *($9)
	*($4 + [224]) = *($4 + [136])
	*($4 + [208]) = *($4 + [152])
	*($4 + [192]) = *($4 + [168])
	$0 = *($4 + [128])
	$1 = *($4 + [120])
	$12 = *($4 + [184])
	*((($4 + [272]) + [8])) = *($8)
	*((($4 + [256]) + [8])) = *($3)
	*((($4 + [240]) + [8])) = *($10)
	*($4 + [272]) = *($4 + [192])
	*($4 + [256]) = *($4 + [208])
	*($4 + [240]) = *($4 + [224])
	$3 = (($4 + [72]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$13 = *((($4 + [240]) + [8]))
	*((($4 + [320]) + [8])) = $13
	$14 = *((($4 + [256]) + [8]))
	*((($4 + [304]) + [8])) = $14
	$15 = *((($4 + [272]) + [8]))
	*((($4 + [288]) + [8])) = $15
	*((($4 + [40]) + [8])) = $13
	*((($4 + [24]) + [8])) = $14
	*((($4 + [8]) + [8])) = $15
	$13 = *($4 + [240])
	*($4 + [320]) = $13
	$14 = *($4 + [256])
	*($4 + [304]) = $14
	*($4 + [40]) = $13
	*($4 + [24]) = $14
	$13 = *($4 + [272])
	*($4 + [8]) = $13
	*($4 + [288]) = $13
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [40])), (int_32 ($4 + [24])), (int_32 ($4 + [8])), (int_32 $12), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $111($2)
	
.LABEL $label$6
	$global$0 = ($4 + [336])
	return [1]
}

void .FUNC $101 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $105($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$3 = uint_32($3 >> [1])
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$3 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( $4 ){ goto $label$6 }
	$0 = ($0 + [1])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$5 = ((uint_32)$3 > (uint_32)$2)
	$4 = ( $2 ? $3 : $5 )
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$0 = CALL $104($0, $1, $4)
	if ( ($0 == 0) ){ goto $label$1 }
	return $0
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $5 : ($3 <= $2) )
}

void .FUNC $103 (int_32 $0)
{
}

int_32 .FUNC $102 ()
{
	return [8208]
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $104 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $106(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $106(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $111($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $108($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $108($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18469])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $2($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17736])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $84($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $96($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $96($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $93($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [56]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($0 + [64]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($0 + [72]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($0 + [80]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($3 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($4 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($4 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy(($4 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $82(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17736])
	CALL memcpy(($2 + [7]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [7]) != (int_32)[0])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [17736])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$4 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [17736])
	CALL memcpy($4, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17736])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17736])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [17736])
	CALL memcpy($3, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [36])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [40])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [44])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [48])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [52])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($4, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17477])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17477])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17736])
	CALL memcpy($0, *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [17736])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($0 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17477])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17477])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($0 + [48]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [56]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17713])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $108($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17736])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17736])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [24]) = [-1]
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $16(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $111($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $39 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5, int_64 $6, int_64 $7, int_64 $8, int_64 $9, int_64 $10, int_64 $11, int_64 $12)
{
	int_32 $13
	$13 = ($global$0 - [304])
	$global$0 = $13
	*($13 + [96]) = $6
	*($13 + [104]) = $5
	*($13 + [95]) = $2
	*($13 + [94]) = $3
	*($13 + [93]) = $4
	*($13 + [80]) = $7
	*($13 + [72]) = $8
	*($13 + [64]) = $9
	*($13 + [56]) = $10
	*($13 + [48]) = $11
	*($13 + [40]) = $12
	CALL require_auth(*($0))
	*(($3 = ($13 + [32]))) = [0]
	*($13 + [16]) = (int_64)-1
	$12 = *($0)
	*($13) = $12
	*($13 + [8]) = $12
	*($13 + [24]) = (int_64)0
	$4 = CALL db_lowerbound_i64($12, $12, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$4 }
	$4 = CALL $10($13, $4)
	$11 = *($0)
	CALL eosio_assert([1], [17942])
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$13), [17977])
	CALL eosio_assert(((int_64)*($13) == (int_64)CALL $fimport$7()), [18023])
	*($4 + [8]) = *($1)
	*($4 + [16]) = *($13 + [95])
	*($4 + [17]) = *($13 + [94])
	*($4 + [18]) = *($13 + [93])
	*($4 + [24]) = *($13 + [104])
	*($4 + [32]) = *($13 + [96])
	*($4 + [48]) = *($13 + [80])
	*($4 + [56]) = *($13 + [72])
	$12 = *($4)
	*($4 + [64]) = *($13 + [64])
	*($4 + [72]) = *($13 + [56])
	*($4 + [80]) = *($13 + [48])
	*($4 + [88]) = *($13 + [40])
	CALL eosio_assert([1], [18074])
	*($13 + [224]) = (($13 + [112]) + [91])
	*($13 + [220]) = ($13 + [112])
	*($13 + [216]) = ($13 + [112])
	*($13 + [296]) = ($13 + [216])
	*($13 + [236]) = ($4 + [8])
	*($13 + [232]) = $4
	*($13 + [240]) = ($4 + [16])
	*($13 + [244]) = ($4 + [17])
	*($13 + [248]) = ($4 + [18])
	*($13 + [252]) = ($4 + [24])
	*($13 + [256]) = ($4 + [32])
	*($13 + [260]) = ($4 + [40])
	*($13 + [264]) = ($4 + [48])
	*($13 + [268]) = ($4 + [56])
	*($13 + [272]) = ($4 + [64])
	*($13 + [276]) = ($4 + [72])
	*($13 + [280]) = ($4 + [80])
	*($13 + [284]) = ($4 + [88])
	CALL $26(($13 + [232]), ($13 + [296]))
	CALL db_update_i64(*($4 + [100]), $11, ($13 + [112]), [91])
	$4 = ($13 + [16])
	if ( (uint_64)($12 <= *($4)) ){ goto $label$3 }
	*($4) = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	$3 = *($13 + [24])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$11 = *($0)
	*($13 + [116]) = $1
	*($13 + [112]) = $13
	*($13 + [120]) = ($13 + [95])
	*($13 + [124]) = ($13 + [94])
	*($13 + [128]) = ($13 + [93])
	*($13 + [132]) = ($13 + [104])
	*($13 + [136]) = ($13 + [96])
	*($13 + [140]) = ($13 + [80])
	*($13 + [144]) = ($13 + [72])
	*($13 + [148]) = ($13 + [64])
	*($13 + [152]) = ($13 + [56])
	*($13 + [156]) = ($13 + [48])
	*($13 + [160]) = ($13 + [40])
	*($13 + [216]) = $11
	CALL eosio_assert(((int_64)$12 == (int_64)CALL $fimport$7()), [18184])
	*($13 + [236]) = ($13 + [112])
	*($13 + [232]) = $13
	*($13 + [240]) = ($13 + [216])
	*(($4 = CALL _Znwj([112])) + [32]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [96]) = $13
	CALL $40(($13 + [232]), $4)
	*($13 + [296]) = $4
	$12 = *($4)
	*($13 + [232]) = $12
	$2 = *($4 + [100])
	*($13 + [292]) = $2
	$1 = ($13 + [28])
	$0 = *($1)
	if ( ((uint_32)$0 >= (uint_32)*($3)) ){ goto $label$6 }
	*($0 + [8]) = $12
	*($0 + [16]) = $2
	*($13 + [296]) = [0]
	*($0) = $4
	*($1) = ($0 + [24])
	$4 = *($13 + [296])
	*($13 + [296]) = [0]
	if ( $4 ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	CALL $41(($13 + [24]), ($13 + [296]), ($13 + [232]), ($13 + [292]))
	$4 = *($13 + [296])
	*($13 + [296]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$3 = *($13 + [24])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($13 + [28])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$9 }
	$4 = *(($13 + [24]))
	goto $label$7 
	
.LABEL $label$8
	$4 = $3
	
.LABEL $label$7
	*($2) = $3
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($13 + [304])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $101($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [100]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17665])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7235159537265672192)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17611])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17611])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $10(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17665])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3665743729458675712)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17611])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17611])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $8(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $76(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_64 $6)
{
	int_32 $7
	int_64 $8
	int_32 $9
	$7 = ($global$0 - [224])
	$global$0 = $7
	*($7 + [136]) = $1
	CALL require_auth(*($0))
	CALL $34($7, ($7 + [136]), ($3 + [8]))
	$8 = CALL current_time()
	*((($7 + [72]) + [28])) = (int_64)0
	*(($7 + [116])) = (int_64)0
	*(($7 + [124])) = (int_64)0
	*($7 + [84]) = [0]
	*($7 + [88]) = [0]
	*($7 + [92 align=4]) = (int_64)0
	*($7 + [108 align=4]) = (int_64)0
	*($7 + [72]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($7 + [152]) = (int_64)3617214756542218240
	$8 = *($0)
	*($7 + [144]) = $8
	*($7 + [208]) = $8
	*($7 + [184]) = (int_64)3626411730319441920
	*((($7 + [8]) + [24])) = *($3 + [8])
	*(($7 + [48])) = *(($4 + [8]))
	*(($7 + [64])) = *(($5 + [8]))
	*($7 + [16]) = $2
	*($7 + [8]) = $1
	*($7 + [24]) = *($3)
	*($7 + [40]) = *($4)
	*($7 + [56]) = *($5)
	CALL $35(($7 + [108]), ($7 + [144]), ($7 + [208]), ($7 + [184]), ($7 + [8]))
	$2 = *($0)
	*(($9 = (($7 + [8]) + [32]))) = [0]
	*($7 + [16]) = $2
	*($7 + [8]) = $2
	*($7 + [24]) = (int_64)-1
	*($7 + [32]) = (int_64)0
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$7()), [18184])
	*(($5 = CALL _Znwj([48])) + [32]) = ($7 + [8])
	*($5) = $1
	*($5 + [24]) = $6
	*($5 + [8]) = *($3)
	*(($5 + [16])) = *($3 + [8])
	*($7 + [192]) = (($7 + [144]) + [32])
	*($7 + [188]) = ($7 + [144])
	*($7 + [184]) = ($7 + [144])
	*($7 + [200]) = ($7 + [184])
	*($7 + [212]) = ($5 + [8])
	*($7 + [208]) = $5
	*($7 + [216]) = ($5 + [24])
	CALL $36(($7 + [208]), ($7 + [200]))
	$8 = *($5)
	$4 = CALL db_store_i64(*($7 + [16]), (int_64)4982364043133370368, $2, $8, ($7 + [144]), [32])
	*($5 + [36]) = $4
	if ( (uint_64)($8 <= *($7 + [24])) ){ goto $label$1 }
	*((($7 + [8]) + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($7 + [208]) = $5
	$2 = *($5)
	*($7 + [144]) = $2
	*($7 + [184]) = $4
	$3 = *((($7 + [8]) + [28]))
	if ( ((uint_32)$3 >= (uint_32)*($9)) ){ goto $label$4 }
	*($3 + [8]) = $2
	*($3 + [16]) = $4
	*($7 + [208]) = [0]
	*($3) = $5
	*(($7 + [36])) = ($3 + [24])
	$5 = *($7 + [208])
	$3 = [0]
	*($7 + [208]) = [0]
	if ( $5 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $37(($7 + [32]), ($7 + [208]), ($7 + [144]), ($7 + [184]))
	$5 = *($7 + [208])
	$3 = [0]
	*($7 + [208]) = [0]
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($5)
	
.LABEL $label$2
	if ( (*($3 + [8200]) == 0) ){ goto $label$6 }
	$2 = *([0] + [8192])
	goto $label$5 
	
.LABEL $label$6
	$2 = CALL current_time()
	*([0] + [8200]) = [1]
	$2 = ((int_64)$2 + (int_64)28800000000)
	*([0] + [8192]) = $2
	
.LABEL $label$5
	*(($7 + [92])) = ((int_64))($6 - $2) / (int_64)1000000)
	*($7 + [144]) = $1
	*($7 + [152]) = (int_64)0
	CALL cancel_deferred(($7 + [144]))
	$2 = *($0)
	CALL $1(($7 + [208]), ($7 + [72]))
	$5 = *($7 + [208])
	CALL send_deferred(($7 + [144]), $2, $5, (*($7 + [212]) - $5), ((int_64)$1 != (int_64)0))
	$5 = *($7 + [208])
	if ( ($5 == 0) ){ goto $label$7 }
	*($7 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$0 = *($7 + [32])
	if ( ($0 == 0) ){ goto $label$8 }
	$4 = ($7 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$11 }
	$5 = *(($7 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$5 = $0
	
.LABEL $label$9
	*($4) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$8
	CALL $27(($7 + [72]))
	$global$0 = ($7 + [224])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), $0, [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *($0 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [17477])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [18321])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [18366])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [18416])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}