(data (i32.const 8192) "0123456789abcdef\00")
(data (i32.const 8209) "CHAT:\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8301) "msg too long\00")
(data (i32.const 8314) "msg too short\00")
(data (i32.const 8328) "cannot transfer to self\00")
(data (i32.const 8352) "EOS\00")
(data (i32.const 8356) "must EOS token\00")
(data (i32.const 8371) "invalid token transfer\00")
(data (i32.const 8394) "can not less than 0.1 EOS for chat\00")
(data (i32.const 8429) "trustbetmine\00")
(data (i32.const 8442) "invalid referrer account name\00")
(data (i32.const 8472) "referrer can not be yourself\00")
(data (i32.const 8501) "referrer\'s gift, uid is \00")
(data (i32.const 8526) "hourth already trxprofit\00")
(data (i32.const 8551) "too early\00%llu\00")
(data (i32.const 8566) "the period not found\00")
(data (i32.const 8587) "overdrawn balance :)\00")
(data (i32.const 8608) "reveal repeatedly\00")
(data (i32.const 8626) "bonus null\00")
(data (i32.const 8637) "revealin repeatedly\00")
(data (i32.const 8657) "reveal table error!\00")
(data (i32.const 8677) "only eos can lottery\00")
(data (i32.const 8698) "cannot find itr_reveal!\00")
(data (i32.const 8722) "congratulations to the winner \00")
(data (i32.const 8753) "ticket table error!\00")
(data (i32.const 8773) "trustbetdivi\00")
(data (i32.const 8786) "not the time to trxprofit\00")
(data (i32.const 8812) "hourth not found\00")
(data (i32.const 8829) "already trxprofit this hourth\00")
(data (i32.const 8859) "eosio.token\00")
(data (i32.const 8871) "trustbetteam\00")
(data (i32.const 8884) "overdrawn eos balance\00")
(data (i32.const 8906) "overdrawn tbt balance\00")
(data (i32.const 8928) "TBT\00")
(data (i32.const 8932) "profit:\00")
(data (i32.const 8940) "hourth does not trxprofit\00")
(data (i32.const 8966) "trustbetinfo\00")
(data (i32.const 8979) "end must bigger\00")
(data (i32.const 8995) "transfer\00")
(data (i32.const 9004) "string is too long to be a valid symbol_code\00")
(data (i32.const 9049) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9102) "invalid memo\00")
(data (i32.const 9116) ";\00")
(data (i32.const 9118) ":\00")
(data (i32.const 9120) "invalid item fields\00")
(data (i32.const 9140) "u\00")
(data (i32.const 9142) "invalid uid\00")
(data (i32.const 9154) "f\00")
(data (i32.const 9156) "r\00")
(data (i32.const 9158) "uid not found\00")
(data (i32.const 9172) "\0e\00\00\00\0f\00\00\00")
(data (i32.const 9180) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> > >::n() [T = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]\00")
(data (i32.const 9402) "T = \00")
(data (i32.const 9408) "\0e\00\00\00\10\00\00\00")
(data (i32.const 9416) "string is too long to be a valid name\00")
(data (i32.const 9454) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 9521) "character is not in allowed character set for names\00")
(data (i32.const 9573) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9624) "error reading iterator\00")
(data (i32.const 9647) "read\00")
(data (i32.const 9652) "cannot create objects in table of another contract\00")
(data (i32.const 9703) "write\00")
(data (i32.const 9709) "cannot pass end iterator to modify\00")
(data (i32.const 9744) "object passed to modify is not in multi_index\00")
(data (i32.const 9790) "cannot modify objects in table of another contract\00")
(data (i32.const 9841) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9900) "divide by zero\00")
(data (i32.const 9915) "signed division overflow\00")
(data (i32.const 9940) "multiplication overflow\00")
(data (i32.const 9964) "multiplication underflow\00")
(data (i32.const 9989) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 10048) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 10097) "invalid symbol name\00")
(data (i32.const 10117) "unable to find key\00")
(data (i32.const 10136) "cannot increment end iterator\00")
(data (i32.const 10166) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10220) "cannot decrement iterator at beginning of table\00")
(data (i32.const 10268) "attempt to add asset with different symbol\00")
(data (i32.const 10311) "addition underflow\00")
(data (i32.const 10330) "addition overflow\00")
(data (i32.const 10348) "p(\00\00")
(data (i32.const 10352) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 10385) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10437) "cannot pass end iterator to erase\00")
(data (i32.const 10471) "object passed to erase is not in multi_index\00")
(data (i32.const 10516) "cannot erase objects in table of another contract\00")
(data (i32.const 10566) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10619) "get\00")
(data (i32.const 19040) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "require_auth" (func $fimport$2 (param i64)))
(import "env" "send_inline" (func $fimport$3 (param i32 i32)))
(import "env" "is_account" (func $fimport$4 (param i64) (result i32)))
(import "env" "__multi3" (func $fimport$5 (param i32 i64 i64 i64 i64)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$8 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$9 (param i32 i64 i32)))
(import "env" "db_store_i64" (func $fimport$10 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$12 (result i64)))
(import "env" "memmove" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "cancel_deferred" (func $fimport$15 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "tapos_block_prefix" (func $fimport$17 (result i32)))
(import "env" "sha256" (func $fimport$18 (param i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "tapos_block_num" (func $fimport$20 (result i32)))
(import "env" "require_recipient" (func $fimport$21 (param i64)))
(import "env" "action_data_size" (func $fimport$22 (result i32)))
(import "env" "read_action_data" (func $fimport$23 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$26 (param i64 i64 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$27 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$28 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "abort" (func $fimport$29))
(import "env" "db_idx64_next" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$31 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$32 (param i32)))
(import "env" "__lttf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "memset" (func $fimport$34 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$35 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$38 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$39 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$42 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$43 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$44 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$45 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$46 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$47 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$48 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$49 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$50 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$51 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$52 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$53 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$54 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $79))
(export "_ZdlPv" (func $153))
(export "_Znwj" (func $151))
(export "_Znaj" (func $152))
(export "_ZdaPv" (func $154))
(export "_ZnwjSt11align_val_t" (func $155))
(export "_ZnajSt11align_val_t" (func $156))
(export "_ZdlPvSt11align_val_t" (func $157))
(export "_ZdaPvSt11align_val_t" (func $158))
(table $0 19 19 anyfunc)
(elem (i32.const 1) $2 $36 $62 $78 $64 $55 $66 $45 $69 $56 $76 $71 $57 $102 $104 $111 $179 $181)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19120))
(global $global$2 i32 (i32.const 19120))


void .FUNC $174 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $6 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9573])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $113($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9573])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9709])
	CALL $115($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $116($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $176 ()
{
	return [10628]
}

void .FUNC $177 (int_32 $0)
{
}

int_32 .FUNC $170 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $163($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $171 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $170($0, $1, $2, CALL $186($2))
}

int_32 .FUNC $172 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $184(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $178 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [17] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $180($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $180($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $180($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $180($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19040]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $180($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $180($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $180($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [9416])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [9521])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [9454])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [9521])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_64 .FUNC $5 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$2 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9573])
	if ( ($4 == 0) ){ goto $label$1 }
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$2
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7235159537265672192, (int_64)7235159537265672192)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $113($0, $4)
	CALL eosio_assert(((int_32)*($4 + [8]) == (int_32)$0), [9573])
	$1 = *($4)
	$global$0 = ($3 + [16])
	return $1
	
.LABEL $label$1
	*($3 + [8]) = $2
	CALL $114($3, $0, $1, ($3 + [8]))
	$1 = *(*($3 + [4]))
	$global$0 = ($3 + [16])
	return $1
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$5 = ($global$0 - [96])
	$global$0 = $5
	$6 = [0]
	CALL eosio_assert(((int_32)CALL $172($1, [58], [0]) != (int_32)[-1]), [9102])
	*($3) = (int_64)-1
	CALL $165($2, [9115])
	*($4) = (int_64)0
	*($5 + [88]) = [0]
	*($5 + [80]) = (int_64)0
	$7 = CALL $186([9116])
	*($5 + [72]) = $7
	*($5 + [64]) = [0]
	if ( ((uint_32)$7 >= (uint_32)[9]) ){ goto $label$3 }
	$8 = ($5 + [64])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$8 = CALL _Znaj($7)
	*($5 + [64]) = $8
	
.LABEL $label$2
	CALL memmove($8, [9116], $7)
	$6 = *(($5 + [72]))
	
.LABEL $label$1
	CALL $148($8, ($8 + $6), ($5 + [48]))
	CALL $33(($5 + [80]), $1, ($5 + [64]), [1])
	if ( (*(($5 + [72])) <= [9]) ){ goto $label$4 }
	$7 = *($5 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	CALL _ZdaPv($7)
	
.LABEL $label$4
	$10 = *($5 + [84])
	$9 = *($5 + [80])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$13 }
	$11 = (($5 + [16]) | [1])
	$12 = (($5 + [16]) | [1])
	$13 = (($5 + [16]) | [1])
	
.LOOP $label$14:
	*((($5 + [48]) + [8])) = [0]
	*($5 + [48]) = (int_64)0
	$7 = CALL $186([9118])
	*(($1 = (($5 + [32]) + [8]))) = $7
	*($5 + [32]) = [0]
	if ( ((uint_32)$7 >= (uint_32)[9]) ){ goto $label$17 }
	$8 = ($5 + [32])
	if ( $7 ){ goto $label$16 }
	$7 = [0]
	goto $label$15 
	
.LABEL $label$17
	$8 = CALL _Znaj($7)
	*($5 + [32]) = $8
	
.LABEL $label$16
	CALL memmove($8, [9118], $7)
	$7 = *($1)
	
.LABEL $label$15
	CALL $148($8, ($8 + $7), ($5 + [16]))
	CALL $34(($5 + [48]), $9, ($5 + [32]), [1])
	if ( (*($1) <= [9]) ){ goto $label$18 }
	$7 = *($5 + [32])
	if ( ($7 == 0) ){ goto $label$18 }
	CALL _ZdaPv($7)
	
.LABEL $label$18
	CALL eosio_assert(((int_32)(*($5 + [52]) - *($5 + [48])) == (int_32)[24]), [9120])
	$1 = *($5 + [48])
	if ( ((int_32)*($5 + [52]) == (int_32)$1) ){ goto $label$12 }
	*(($6 = (($5 + [16]) + [8]))) = [0]
	*($5 + [16]) = (int_64)0
	$7 = CALL $186([9140])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$21 }
	*($5 + [16]) = ($7 << [1])
	$8 = $13
	if ( $7 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$14 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($14)
	*($6) = $8
	*($5 + [16]) = ($14 | [1])
	*($5 + [20]) = $7
	
.LABEL $label$20
	CALL memcpy($8, [9140], $7)
	
.LABEL $label$19
	$14 = [0]
	*(($8 + $7)) = [0]
	$18 = ($7 & [1])
	$7 = *($5 + [16])
	$16 = ($7 & [1])
	$7 = *($1)
	$15 = uint_32($7 >> [1])
	$17 = ( *($1 + [4]) ? $15 : $16 )
	if ( ((int_32)$17 != (int_32)( *($5 + [20]) ? uint_32($7 >> [1]) : $18 )) ){ goto $label$24 }
	$7 = ( *($6) ? $13 : $18 )
	$8 = ($1 + [1])
	if ( $16 ){ goto $label$26 }
	if ( ($17 == 0) ){ goto $label$25 }
	$1 = ([0] - $15)
	
.LOOP $label$27:
	if ( ((int_32)*($8) != (int_32)*($7)) ){ goto $label$24 }
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	if ( ($17 == 0) ){ goto $label$25 }
	$14 = (CALL $185(( *($1 + [8]) ? $8 : $16 ), $7, $17) == 0)
	if ( (*($5 + [16]) & [1]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$14 = [1]
	
.LABEL $label$24
	if ( ($18 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*($6))
	
.LABEL $label$22
	if ( ($14 == 0) ){ goto $label$47 }
	$7 = *($5 + [48])
	$8 = *($7 + [12])
	if ( ($8 & [1]) ){ goto $label$46 }
	$7 = uint_32($8 >> [1])
	goto $label$45 
	
.LABEL $label$47
	$1 = *($5 + [48])
	if ( ((int_32)*($5 + [52]) == (int_32)$1) ){ goto $label$10 }
	*($6) = [0]
	*($5 + [16]) = (int_64)0
	$7 = CALL $186([9154])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$44 }
	*($5 + [16]) = ($7 << [1])
	$8 = $12
	if ( $7 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$46
	$7 = *(($7 + [16]))
	
.LABEL $label$45
	CALL eosio_assert(((int_32)$7 == (int_32)[36]), [9142])
	CALL $162($2, (*($5 + [48]) + [12]))
	$1 = *($5 + [48])
	if ( ($1 == 0) ){ goto $label$32 }
	$8 = *($5 + [52])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$41 }
	
.LOOP $label$48:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$49 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$49
	$8 = $7
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$48 }
	$7 = *($5 + [48])
	goto $label$40 
	
.LABEL $label$44
	$14 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($14)
	*($6) = $8
	*($5 + [16]) = ($14 | [1])
	*($5 + [20]) = $7
	
.LABEL $label$43
	CALL memcpy($8, [9154], $7)
	
.LABEL $label$42
	$14 = [0]
	*(($8 + $7)) = [0]
	$18 = ($7 & [1])
	$7 = *($5 + [16])
	$16 = ($7 & [1])
	$7 = *($1)
	$15 = uint_32($7 >> [1])
	$17 = ( *($1 + [4]) ? $15 : $16 )
	if ( ((int_32)$17 != (int_32)( *($5 + [20]) ? uint_32($7 >> [1]) : $18 )) ){ goto $label$52 }
	$7 = ( *($6) ? $12 : $18 )
	$8 = ($1 + [1])
	if ( $16 ){ goto $label$54 }
	if ( ($17 == 0) ){ goto $label$53 }
	$1 = ([0] - $15)
	
.LOOP $label$55:
	if ( ((int_32)*($8) != (int_32)*($7)) ){ goto $label$52 }
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$54
	if ( ($17 == 0) ){ goto $label$53 }
	$14 = (CALL $185(( *($1 + [8]) ? $8 : $16 ), $7, $17) == 0)
	if ( (*($5 + [16]) & [1]) ){ goto $label$51 }
	goto $label$50 
	
.LABEL $label$53
	$14 = [1]
	
.LABEL $label$52
	if ( ($18 == 0) ){ goto $label$50 }
	
.LABEL $label$51
	CALL _ZdlPv(*($6))
	
.LABEL $label$50
	$1 = *($5 + [48])
	$7 = (*($5 + [52]) - $1)
	if ( ($14 == 0) ){ goto $label$61 }
	if ( ((uint_32)((int_32)$7 / (int_32)[12]) <= (uint_32)[1]) ){ goto $label$8 }
	if ( (*($1 + [12]) & [1]) ){ goto $label$60 }
	$7 = (($1 + [12]) + [1])
	goto $label$59 
	
.LABEL $label$61
	if ( ($7 == 0) ){ goto $label$7 }
	*($6) = [0]
	*($5 + [16]) = (int_64)0
	$7 = CALL $186([9156])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$58 }
	*($5 + [16]) = ($7 << [1])
	$8 = $11
	if ( $7 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$60
	$7 = *(($1 + [20]))
	
.LABEL $label$59
	*($3) = (CASTING int_64)(int_32 CALL $183($7))
	$1 = *($5 + [48])
	if ( ($1 == 0) ){ goto $label$32 }
	$8 = *($5 + [52])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$34 }
	
.LOOP $label$62:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$63 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$63
	$8 = $7
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$62 }
	$7 = *($5 + [48])
	goto $label$33 
	
.LABEL $label$58
	$14 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($14)
	*($6) = $8
	*($5 + [16]) = ($14 | [1])
	*($5 + [20]) = $7
	
.LABEL $label$57
	CALL memcpy($8, [9156], $7)
	
.LABEL $label$56
	$14 = [0]
	*(($8 + $7)) = [0]
	$18 = ($7 & [1])
	$7 = *($5 + [16])
	$16 = ($7 & [1])
	$7 = *($1)
	$15 = uint_32($7 >> [1])
	$17 = ( *($1 + [4]) ? $15 : $16 )
	if ( ((int_32)$17 != (int_32)( *($5 + [20]) ? uint_32($7 >> [1]) : $18 )) ){ goto $label$37 }
	$7 = ( *($6) ? $11 : $18 )
	$8 = ($1 + [1])
	if ( $16 ){ goto $label$39 }
	if ( ($17 == 0) ){ goto $label$38 }
	$1 = ([0] - $15)
	
.LOOP $label$64:
	if ( ((int_32)*($8) != (int_32)*($7)) ){ goto $label$37 }
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$64 }
	goto $label$38 
	
.LABEL $label$41
	$7 = $1
	
.LABEL $label$40
	*($5 + [52]) = $1
	CALL _ZdlPv($7)
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$39
	if ( ($17 == 0) ){ goto $label$38 }
	$14 = (CALL $185(( *($1 + [8]) ? $8 : $16 ), $7, $17) == 0)
	if ( (*($5 + [16]) & [1]) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$38
	$14 = [1]
	
.LABEL $label$37
	if ( ($18 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	CALL _ZdlPv(*($6))
	
.LABEL $label$35
	if ( ($14 == 0) ){ goto $label$67 }
	$7 = *($5 + [48])
	if ( ((uint_32)((int_32)(*($5 + [52]) - $7) / (int_32)[12]) <= (uint_32)[1]) ){ goto $label$5 }
	$8 = *($7 + [12])
	if ( ($8 & [1]) ){ goto $label$66 }
	$8 = uint_32($8 >> [1])
	$7 = (($7 + [12]) + [1])
	goto $label$65 
	
.LABEL $label$67
	$1 = *($5 + [48])
	if ( ($1 == 0) ){ goto $label$32 }
	$8 = *($5 + [52])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$31 }
	
.LOOP $label$68:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$69 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$69
	$8 = $7
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$68 }
	$7 = *($5 + [48])
	goto $label$30 
	
.LABEL $label$66
	$8 = *(($7 + [16]))
	$7 = *(($7 + [20]))
	
.LABEL $label$65
	*($5 + [12]) = $8
	*($5 + [8]) = $7
	*($5) = *($5 + [8])
	CALL $4(($5 + [16]), $5)
	*($4) = *($5 + [16])
	$1 = *($5 + [48])
	if ( ($1 == 0) ){ goto $label$32 }
	$8 = *($5 + [52])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$29 }
	
.LOOP $label$70:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$71 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$71
	$8 = $7
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$70 }
	$7 = *($5 + [48])
	goto $label$28 
	
.LABEL $label$34
	$7 = $1
	
.LABEL $label$33
	*($5 + [52]) = $1
	CALL _ZdlPv($7)
	
.LABEL $label$32
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$31
	$7 = $1
	
.LABEL $label$30
	*($5 + [52]) = $1
	CALL _ZdlPv($7)
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$29
	$7 = $1
	
.LABEL $label$28
	*($5 + [52]) = $1
	CALL _ZdlPv($7)
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$10) ){ goto $label$14 }
	
.LABEL $label$13
	$7 = *($2)
	CALL eosio_assert(((int_32)( *($2 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) ) != (int_32)[0]), [9158])
	$1 = *($5 + [80])
	if ( ($1 == 0) ){ goto $label$72 }
	$8 = *($5 + [84])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$74 }
	
.LOOP $label$75:
	$7 = ($8 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$76 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$76
	$8 = $7
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$75 }
	$7 = *($5 + [80])
	goto $label$73 
	
.LABEL $label$74
	$7 = $1
	
.LABEL $label$73
	*($5 + [84]) = $1
	CALL _ZdlPv($7)
	
.LABEL $label$72
	$global$0 = ($5 + [96])
	return (unreachable)
	
.LABEL $label$12
	CALL $175(($5 + [48]))
	
.LABEL $label$11
	CALL $159(($5 + [16]))
	
.LABEL $label$10
	CALL $175(($5 + [48]))
	
.LABEL $label$9
	CALL $159(($5 + [16]))
	
.LABEL $label$8
	CALL $175(($5 + [48]))
	
.LABEL $label$7
	CALL $175(($5 + [48]))
	
.LABEL $label$6
	CALL $159(($5 + [16]))
	
.LABEL $label$5
	CALL $175(($5 + [48]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $189 (int_32 $0)
{
	return CALL $190([10644], $0)
}

int_32 .FUNC $188 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $189($1)
	
.LABEL $label$2
	*(CALL $176()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $189(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $192($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$11 = ($6 + ((int_32)$9 * (int_32)[40]))
	$1 = ($7 + [32])
	$9 = ($7 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $7($9, $2)
	$1 = *($1)
	$2 = *($9)
	goto $label$6 
	
.LABEL $label$7
	$1 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($5 + [4]) = $2
	*($5) = $2
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	$12 = ($7 + [40])
	CALL $50(($5 + [24]), ($5 + [16]))
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$9 }
	$13 = ($2 - $8)
	$9 = [0]
	
.LOOP $label$10:
	$4 = ($8 + $9)
	*((($2 = ($7 + $9)) + [-32])) = *(($4 + [-32]))
	*(($2 + [-40])) = *(($4 + [-40]))
	*(($1 = ($2 + [-24]))) = (int_64)0
	*(($6 = ($2 + [-16]))) = [0]
	$3 = ($4 + [-24])
	*($1) = *($3)
	$1 = ($4 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$6 = ($4 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$4 = ($4 + [-4])
	*($2) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$13 != (int_32)$9) ){ goto $label$10 }
	$7 = ($7 + $9)
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $7
	*(($0 + [4])) = $12
	*(($0 + [8])) = $11
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = *(($2 + [-12]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$4 = ($2 + [-40])
	$9 = *(($2 + [-24]))
	if ( ($9 == 0) ){ goto $label$14 }
	*(($2 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$14
	$2 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($5 + [32])
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9624])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $189($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9647])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9647])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9647])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5 + [8])
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $18(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $192($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $123($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $7($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $124($2, $1)
	CALL $126(CALL $125(CALL $125($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_64 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [40]) = ((int_64)((int_64)((int_64)((int_64)*($1) << (int_64)16) | (int_64)(CASTING uint_64)(uint_32 (CALL tapos_block_prefix() & [65535]))) << (int_64)32) | (int_64)*($2))
	CALL sha256(($3 + [40]), [8], $3)
	$2 = [0]
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	
.LOOP $label$1:
	$1 = *(($3 + $2))
	CALL $168(($3 + [48]), *((uint_32($1 >> [4]) + [8192])))
	CALL $168(($3 + [48]), *((($1 & [15]) + [8192])))
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$1 }
	$4 = CALL $1(($3 + [48]))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$2
	$global$0 = ($3 + [64])
	return ((int_64)$4 + (int_64)(CASTING uint_64)(uint_32 ((int_64)$4 == (int_64)-1)))
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $7(($6 + [28]), [16])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [9703])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [9703])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [5])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$4 }
	$3 = [134217727]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$3 = int_32($2 >> [4])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [32])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $174($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [5]))
	$5 = ($2 + ($5 << [5]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	$3 = ($3 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [5]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [28]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10220])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5882677294048215040)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10166])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10166])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $48(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_64 $26
	int_32 $27
	int_64 $28
	int_64 $29
	int_32 $30
	int_32 $31
	int_32 $32
	$3 = ($global$0 - [368])
	$global$0 = $3
	CALL require_auth(*($0))
	if ( (int_64)(*($2) == 0) ){ goto $label$1 }
	$4 = CALL current_time()
	*(($3 + [204])) = (int_64)0
	*(($3 + [220])) = (int_64)0
	*(($3 + [228])) = (int_64)0
	*($3 + [188]) = [0]
	*($3 + [192]) = [0]
	*($3 + [196 align=4]) = (int_64)0
	*($3 + [212 align=4]) = (int_64)0
	*($3 + [176]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($3 + [248]) = (int_64)3617214756542218240
	*($3 + [240]) = *($0)
	*($3 + [88]) = (int_64)-4992623616605552640
	*($3 + [128]) = *($1)
	*($3 + [136]) = ((int_64)*($2) + (int_64)-1)
	CALL $41(($3 + [212]), ($3 + [240]), $0, ($3 + [88]), ($3 + [128]))
	$4 = *($1)
	*($3 + [196]) = [1]
	*($3 + [240]) = ((int_64)$4 + (int_64)1)
	$4 = CALL $42($0, $0, ($3 + [240]))
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = $4
	CALL cancel_deferred(($3 + [240]))
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = $4
	$4 = *($0)
	CALL $43(($3 + [128]), ($3 + [176]))
	$2 = *($3 + [128])
	CALL send_deferred(($3 + [240]), $4, $2, (*($3 + [132]) - $2), [0])
	$2 = *($3 + [128])
	if ( ($2 == 0) ){ goto $label$2 }
	*($3 + [132]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	CALL $44(($3 + [176]))
	$global$0 = ($3 + [368])
	return 
	
.LABEL $label$1
	$5 = ($0 + [72])
	*($3 + [168]) = $5
	CALL $13(($3 + [176]), ($3 + [168]), $1)
	$6 = [0]
	$7 = [0]
	$2 = *($3 + [180])
	if ( ($2 == 0) ){ goto $label$3 }
	$7 = ( $2 ? [0] : ((int_64)*($1) == (int_64)*($2 + [8])) )
	
.LABEL $label$3
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [8626])
	$2 = [1]
	CALL eosio_assert(((int_32)*($7 + [48]) ^ (int_32)[1]), [8637])
	*((($3 + [128]) + [32])) = [0]
	*($3 + [144]) = (int_64)-1
	$4 = *($0)
	*($3 + [128]) = $4
	$9 = *($1)
	*($3 + [136]) = $9
	*($3 + [152]) = (int_64)0
	$10 = CALL db_lowerbound_i64($4, $9, (int_64)-4992623624440512512, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $38(($3 + [128]), $10)
	CALL eosio_assert([1], [10136])
	$6 = CALL db_next_i64(*($6 + [44]), ($3 + [176]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$2 = [1]
	
.LOOP $label$6:
	$6 = CALL $38(($3 + [128]), $6)
	CALL eosio_assert([1], [10136])
	$2 = ($2 + [1])
	$6 = CALL db_next_i64(*($6 + [44]), ($3 + [176]))
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = $2
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$6 == (int_32)[8]), [8657])
	*((($3 + [88]) + [32])) = [0]
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	*($3 + [88]) = *($0)
	*($3 + [96]) = *($1)
	*($3 + [176]) = (CASTING uint_64)(uint_32 ($3 + [88]))
	$9 = *(*(CALL $46(($3 + [176])) + [4]) + [8])
	*($3 + [80]) = (CASTING int_64)(int_32 (CALL tapos_block_num() + CALL $fimport$17()))
	*((($3 + [40]) + [32])) = [0]
	*($3 + [64]) = (int_64)0
	CALL $47(($3 + [64]), [8])
	*($3 + [48]) = $9
	*($3 + [40]) = *($1)
	*($3 + [56]) = *($7)
	$4 = CALL current_time()
	*(($3 + [204])) = (int_64)0
	*(($3 + [220])) = (int_64)0
	*(($3 + [228])) = (int_64)0
	*($3 + [188]) = [0]
	*($3 + [192]) = [0]
	*($3 + [196 align=4]) = (int_64)0
	*($3 + [212 align=4]) = (int_64)0
	*($3 + [176]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$2 = CALL $186([8352])
	if ( ($2 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [9004])
	goto $label$9 
	
.LABEL $label$10
	if ( ($2 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$4 = (int_64)0
	
.LOOP $label$11:
	$6 = *(($2 + [8351]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$12
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$11 }
	$4 = ((int_64)$4 << (int_64)8)
	goto $label$7 
	
.LABEL $label$8
	$4 = (int_64)0
	
.LABEL $label$7
	$2 = ($7 + [24])
	CALL eosio_assert(((int_64)*($2) == (int_64)((int_64)$4 | (int_64)4)), [8677])
	$4 = *($7 + [16])
	$11 = *($2)
	CALL eosio_assert(((int_64)*(($7 + [40])) == (int_64)$11), [10268])
	$12 = ((int_64)$4 + (int_64)*($7 + [32]))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [10311])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [10330])
	$13 = (($3 + [176]) + [36])
	$14 = (($3 + [240]) + [40])
	$15 = (($3 + [240]) + [32])
	$16 = (($3 + [312]) | [1])
	$17 = (($3 + [128]) + [28])
	$18 = (($3 + [128]) + [8])
	$19 = (int_64)$12 >> (int_64)63)
	$20 = (($3 + [240]) + [16])
	$21 = ($3 + [220])
	$22 = (($3 + [312]) + [12])
	$23 = (int_64)1
	
.LOOP $label$13:
	$6 = *($17)
	$10 = *((($3 + [128]) + [24]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$17:
	$2 = ($6 + [-24])
	$24 = *($2)
	if ( ((int_64)*($24) == (int_64)$23) ){ goto $label$16 }
	$6 = $2
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	CALL eosio_assert(((int_32)*($24 + [40]) == (int_32)($3 + [128])), [9573])
	goto $label$14 
	
.LABEL $label$15
	$24 = [0]
	$2 = CALL db_find_i64(*($3 + [128]), *($18), (int_64)-4992623624440512512, $23)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$14 }
	$24 = CALL $38(($3 + [128]), $2)
	CALL eosio_assert(((int_32)*($24 + [40]) == (int_32)($3 + [128])), [9573])
	
.LABEL $label$14
	$25 = ((int_32)$24 != (int_32)[0])
	CALL eosio_assert($25, [8698])
	
.LOOP $label$18:
	CALL sha256(($3 + [80]), [8], ($3 + [240]))
	$2 = [0]
	*(($10 = (($3 + [312]) + [8]))) = [0]
	*($3 + [312]) = (int_64)0
	
.LOOP $label$19:
	$6 = *((($3 + [240]) + $2))
	CALL $168(($3 + [312]), *((uint_32($6 >> [4]) + [8192])))
	CALL $168(($3 + [312]), *((($6 & [15]) + [8192])))
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[32]) ){ goto $label$19 }
	$4 = CALL $1(($3 + [312]))
	if ( ((*($3 + [312]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$20
	$2 = [0]
	$4 = ((int_64)((uint_64)$4 % (uint_64)$9) + (int_64)1)
	$6 = CALL db_lowerbound_i64(*($3 + [88]), *((($3 + [88]) + [8])), (int_64)-5882677294048215040, $4)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$21 }
	$2 = CALL $48(($3 + [88]), $6)
	
.LABEL $label$21
	if ( ((uint_64)*($2) > (uint_64)$4) ){ goto $label$23 }
	if ( ((uint_64)*($2 + [8]) >= (uint_64)$4) ){ goto $label$22 }
	
.LABEL $label$23
	*($3 + [80]) = ((int_64)*($3 + [80]) + (int_64)1)
	goto $label$18 
	
.LABEL $label$22
	$26 = *($2 + [16])
	$27 = [50]
	if ( ((int_64)$23 == (int_64)1) ){ goto $label$24 }
	$27 = [11]
	$2 = (CASTING uint_32)(uint_64 $23)
	if ( ((int_32)($2 | [1]) == (int_32)[3]) ){ goto $label$24 }
	$27 = ( [5] ? [0] : (($2 + [-4]) <= [5]) )
	
.LABEL $label$24
	CALL __multi3($3, (CASTING uint_64)(uint_32 $27), (int_64)0, $12, $19)
	$29 = *(($3 + [8]))
	$28 = *($3)
	CALL eosio_assert(( (uint_64)($28 <= (int_64)4611686018427387904) ? ((int_64)$29 < (int_64)0) : (int_64)($29 == 0) ), [9940])
	CALL eosio_assert(( ((uint_64)$28 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$29 > (int_64)-1) : ((int_64)$29 == (int_64)-1) ), [9964])
	CALL eosio_assert([1], [9900])
	CALL eosio_assert([1], [9915])
	*(($30 = (($3 + [24]) + [8]))) = [0]
	*($3 + [24]) = (int_64)0
	$28 = ((int_64)$28 / (int_64)100)
	if ( ((int_64)$26 == (int_64)0) ){ goto $label$28 }
	$6 = [0]
	$31 = *([0] + [10348])
	$29 = $26
	
.LOOP $label$30:
	*((($3 + [240]) + ($2 = $6))) = *(($31 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$29 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$2 == (int_32)[12]) )))))
	$6 = ($2 + [1])
	if ( ((uint_32)$2 > (uint_32)[11]) ){ goto $label$29 }
	$29 = ((int_64)$29 << (int_64)5)
	if ( ((int_64)$29 != (int_64)0) ){ goto $label$30 }
	
.LABEL $label$29
	*($10) = [0]
	*($3 + [312]) = (int_64)0
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$27 }
	*($3 + [312]) = ($6 << [1])
	$31 = $16
	goto $label$26 
	
.LABEL $label$28
	*($10) = [0]
	*($3 + [312]) = (int_64)0
	*($3 + [312]) = [0]
	$2 = $16
	goto $label$25 
	
.LABEL $label$27
	$32 = (($6 + [16]) & [-16])
	$31 = CALL _Znwj($32)
	*($10) = $31
	*($3 + [312]) = ($32 | [1])
	*($3 + [316]) = $6
	
.LABEL $label$26
	$32 = ($2 + [1])
	$2 = [0]
	
.LOOP $label$31:
	*(($31 + $2)) = *((($3 + [240]) + $2))
	$2 = ($2 + [1])
	if ( ((int_32)$32 != (int_32)$2) ){ goto $label$31 }
	$2 = ($31 + $6)
	
.LABEL $label$25
	*($2) = [0]
	$2 = CALL $171(($3 + [312]), [0], [8722])
	$6 = *($2 + [4])
	$31 = *($2)
	*($2) = (int_64)0
	$32 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( (*($3 + [24]) & [1]) ){ goto $label$33 }
	*($3 + [24]) = [0]
	goto $label$32 
	
.LABEL $label$33
	*(*($30)) = [0]
	*($3 + [28]) = [0]
	
.LABEL $label$32
	CALL $164(($3 + [24]), [0])
	*($30) = $32
	*($3 + [28]) = $6
	*($3 + [24]) = $31
	if ( ((*($3 + [312]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$34
	if ( ((uint_32)($27 + [-1]) >= (uint_32)[50]) ){ goto $label$35 }
	*($10) = (int_64)3617214756542218240
	$29 = *($0)
	*($3 + [312]) = $29
	*($3 + [304]) = (int_64)6138663591592764928
	*($3 + [16]) = (int_64)-3617168760277827584
	*((($3 + [240]) + [8])) = $26
	*($20) = $28
	*((($3 + [240]) + [24])) = $11
	*($3 + [240]) = $29
	CALL $160($15, ($3 + [24]))
	$31 = (($3 + [176]) + [40])
	$6 = *($31)
	if ( ((uint_32)$6 >= (uint_32)*($21)) ){ goto $label$40 }
	*($6 + [8]) = *($3 + [16])
	*($6) = *($3 + [304])
	*($6 + [16 align=4]) = (int_64)0
	*(($32 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	$27 = ($2 + [16])
	*($32) = $27
	*(($2 + [8])) = *($10)
	*($2) = *($3 + [312])
	*(($6 + [20])) = $27
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$2 = *($15)
	$32 = ( *((($3 + [240]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($32 + [32])
	$29 = (CASTING uint_64)(uint_32 $32)
	$32 = ($6 + [28])
	
.LOOP $label$41:
	$2 = ($2 + [1])
	$29 = (uint_64)$29 >> (uint_64)(int_64)7
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$41 }
	if ( ($2 == 0) ){ goto $label$39 }
	CALL $7($32, $2)
	$6 = *(($6 + [32]))
	$2 = *($32)
	goto $label$38 
	
.LABEL $label$40
	CALL $49($13, ($3 + [312]), ($3 + [304]), ($3 + [16]), ($3 + [240]))
	if ( (*($15) & [1]) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$6 = [0]
	$2 = [0]
	
.LABEL $label$38
	*((($3 + [352]) + [8])) = $6
	*($3 + [356]) = $2
	*($3 + [352]) = $2
	*($3 + [336]) = ($3 + [352])
	*($3 + [344]) = ($3 + [240])
	CALL $50(($3 + [344]), ($3 + [336]))
	*($31) = (*($31) + [40])
	if ( ((*($15) & [1]) == 0) ){ goto $label$36 }
	
.LABEL $label$37
	CALL _ZdlPv(*($14))
	
.LABEL $label$36
	*((($3 + [176]) + [20])) = [0]
	
.LABEL $label$35
	CALL eosio_assert($25, [9709])
	CALL eosio_assert(((int_32)*($24 + [40]) == (int_32)($3 + [128])), [9744])
	CALL eosio_assert(((int_64)*($3 + [128]) == (int_64)CALL $fimport$6()), [9790])
	*($24 + [8]) = $26
	*($24 + [32]) = $4
	*($24 + [16]) = $28
	*(($24 + [24])) = $11
	$29 = *($24)
	*($24) = $23
	CALL eosio_assert(((int_64)$29 == (int_64)$23), [9841])
	*((($3 + [352]) + [8])) = $14
	*($3 + [356]) = ($3 + [240])
	*($3 + [352]) = ($3 + [240])
	*($3 + [304]) = ($3 + [352])
	*($10) = ($24 + [16])
	*($22) = ($24 + [32])
	*($3 + [316]) = ($24 + [8])
	*($3 + [312]) = $24
	CALL $51(($3 + [312]), ($3 + [304]))
	CALL db_update_i64(*($24 + [44]), (int_64)0, ($3 + [240]), [40])
	$2 = (($3 + [128]) + [16])
	if ( (uint_64)($29 <= *($2)) ){ goto $label$42 }
	*($2) = ( (int_64)-2 ? ((int_64)$29 + (int_64)1) : ((uint_64)$29 > (uint_64)(int_64)-3) )
	
.LABEL $label$42
	*(($2 = (*(($6 = (($3 + [40]) + [24]))) + ($10 = (((CASTING uint_32)(uint_64 $23) << [5]) + [-32])))) + [8]) = $28
	*(($2 + [16])) = $11
	*($2) = $26
	*((*($6) + $10) + [24]) = $4
	*($3 + [80]) = ((int_64)*($3 + [80]) + (int_64)1)
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*($30))
	
.LABEL $label$43
	$23 = ((int_64)$23 + (int_64)1)
	if ( ((int_64)$23 != (int_64)9) ){ goto $label$13 }
	CALL eosio_assert(((int_32)(*((($3 + [40]) + [28])) - *((($3 + [40]) + [24]))) == (int_32)[256]), [8753])
	*(($6 = (($3 + [240]) + [24]))) = [0]
	*($3 + [248]) = (int_64)-4994024802223128576
	*($3 + [256]) = (int_64)0
	$4 = *($0)
	*($3 + [240]) = $4
	*(($2 = CALL _Znwj([16]))) = $4
	*($2 + [8]) = (int_64)3617214756542218240
	$10 = ($2 + [16])
	*($6) = $10
	*(($3 + [260])) = $10
	*($3 + [256]) = $2
	CALL $52((($3 + [240]) + [28]), ($3 + [40]))
	CALL $9(($3 + [312]), ($3 + [240]))
	$2 = *($3 + [312])
	CALL send_inline($2, (*($3 + [316]) - $2))
	$2 = *($3 + [312])
	if ( ($2 == 0) ){ goto $label$44 }
	*($3 + [316]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$44
	$2 = *($3 + [268])
	if ( ($2 == 0) ){ goto $label$45 }
	*(($3 + [272])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$45
	$2 = *($3 + [256])
	if ( ($2 == 0) ){ goto $label$46 }
	*(($3 + [260])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$46
	CALL eosio_assert($8, [9709])
	$2 = *($3 + [168])
	CALL eosio_assert(((int_32)*($7 + [52]) == (int_32)$2), [9744])
	CALL eosio_assert(((int_64)*($2) == (int_64)CALL $fimport$6()), [9790])
	*($7 + [48]) = [1]
	$6 = ($7 + [8])
	*($3 + [304]) = *($6)
	$4 = *($7)
	CALL eosio_assert([1], [9841])
	*($3 + [360]) = (($3 + [240]) + [49])
	*($3 + [356]) = ($3 + [240])
	*($3 + [352]) = ($3 + [240])
	*($3 + [24]) = ($3 + [352])
	*($3 + [316]) = $6
	*($3 + [312]) = $7
	*($3 + [320]) = ($7 + [16])
	*($3 + [324]) = ($7 + [32])
	*($3 + [328]) = ($7 + [48])
	CALL $14(($3 + [312]), ($3 + [24]))
	CALL db_update_i64(*($7 + [56]), (int_64)0, ($3 + [240]), [49])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$47 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$47
	*($3 + [312]) = *($6)
	if ( (CALL $185(($3 + [304]), ($3 + [312]), [8]) == 0) ){ goto $label$48 }
	$6 = *($7 + [60])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$49 }
	$6 = CALL db_idx64_find_primary(*($2), *($2 + [8]), (int_64)4406680309660123136, ($3 + [24]), $4)
	*(($7 + [60])) = $6
	
.LABEL $label$49
	CALL db_idx64_update($6, (int_64)0, ($3 + [312]))
	
.LABEL $label$48
	$2 = CALL db_lowerbound_i64(*(($0 + [72])), *(($0 + [80])), (int_64)4406680309660123136, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$50 }
	$2 = CALL $53($5, $2)
	CALL eosio_assert([1], [10136])
	$6 = CALL db_next_i64(*($2 + [56]), ($3 + [240]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$50 }
	$2 = [1]
	
.LOOP $label$51:
	$6 = CALL $53($5, $6)
	CALL eosio_assert([1], [10136])
	$2 = ($2 + [-1])
	$6 = CALL db_next_i64(*($6 + [56]), ($3 + [240]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$51 }
	if ( ($2 == 0) ){ goto $label$50 }
	$2 = CALL $53($5, CALL $fimport$14(*(($0 + [72])), *(($0 + [80])), (int_64)4406680309660123136, (int_64)0))
	if ( (*($2 + [48]) == 0) ){ goto $label$50 }
	*($3 + [248]) = (int_64)3617214756542218240
	$4 = *($0)
	*($3 + [240]) = $4
	*($3 + [312]) = (int_64)4923678922967265280
	*($3 + [352]) = *($2 + [8])
	$10 = (($3 + [176]) + [40])
	$2 = *($10)
	if ( ((uint_32)$2 >= (uint_32)*(($3 + [220]))) ){ goto $label$52 }
	*($2 + [8]) = (int_64)4923678922967265280
	*($2) = $4
	*($2 + [16 align=4]) = (int_64)0
	*(($24 = ($2 + [24]))) = [0]
	$6 = CALL _Znwj([16])
	*($2 + [16]) = $6
	$31 = ($6 + [16])
	*($24) = $31
	*(($6 + [8])) = *((($3 + [240]) + [8]))
	*($6) = *($3 + [240])
	*(($2 + [20])) = $31
	*($2 + [28 align=4]) = (int_64)0
	*(($2 + [36])) = [0]
	CALL $7(($2 + [28]), [8])
	$2 = *($2 + [28])
	CALL eosio_assert(((int_32)(*(($2 + [32])) - $2) > (int_32)[7]), [9703])
	CALL memcpy($2, ($3 + [352]), [8])
	*($10) = (*($10) + [40])
	goto $label$50 
	
.LABEL $label$52
	CALL $54($13, ($3 + [240]), $0, ($3 + [312]), ($3 + [352]))
	
.LABEL $label$50
	*(($3 + [196])) = [1]
	$4 = CALL $42($0, $0, $1)
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = $4
	CALL cancel_deferred(($3 + [240]))
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = $4
	$4 = *($0)
	CALL $43(($3 + [312]), ($3 + [176]))
	$2 = *($3 + [312])
	CALL send_deferred(($3 + [240]), $4, $2, (*($3 + [316]) - $2), [0])
	$2 = *($3 + [312])
	if ( ($2 == 0) ){ goto $label$53 }
	*($3 + [316]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$53
	CALL $44(($3 + [176]))
	$2 = *(($3 + [64]))
	if ( ($2 == 0) ){ goto $label$54 }
	*(($3 + [68])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$54
	$10 = *($3 + [112])
	if ( ($10 == 0) ){ goto $label$55 }
	$24 = ($3 + [116])
	$2 = *($24)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$57 }
	
.LOOP $label$58:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$59 }
	CALL _ZdlPv($6)
	
.LABEL $label$59
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$58 }
	$2 = *(($3 + [112]))
	goto $label$56 
	
.LABEL $label$57
	$2 = $10
	
.LABEL $label$56
	*($24) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$55
	$10 = *($3 + [152])
	if ( ($10 == 0) ){ goto $label$60 }
	$24 = ($3 + [156])
	$2 = *($24)
	if ( ((int_32)$2 == (int_32)$10) ){ goto $label$62 }
	
.LOOP $label$63:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$64 }
	CALL _ZdlPv($6)
	
.LABEL $label$64
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$63 }
	$2 = *(($3 + [152]))
	goto $label$61 
	
.LABEL $label$62
	$2 = $10
	
.LABEL $label$61
	*($24) = $10
	CALL _ZdlPv($2)
	
.LABEL $label$60
	$global$0 = ($3 + [368])
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $167 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $167($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $186($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $163($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $163($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $163($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $160 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $163($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $168 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $167($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $175 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10136])
	$3 = *($0 + [4])
	$4 = *($3 + [60])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)4406680309660123136, ($1 + [8]), *($3))
	*(*(($0 + [4])) + [60]) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(($2 + [52])) == (int_32)$7), [9573])
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $53($7, CALL $fimport$11(*($7), *($7 + [8]), (int_64)4406680309660123136, $6))
	CALL eosio_assert(((int_32)*($2 + [52]) == (int_32)$7), [9573])
	
.LABEL $label$3
	*($2 + [60]) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [10471])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [10516])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10566])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [56]))
	$6 = *($1 + [60])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)4406680309660123136, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $120(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = ($1 + [24])
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [5]))
	$8 = [-20]
	
.LOOP $label$1:
	$8 = ($8 + [-1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	$9 = [0]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	$4 = [0]
	$5 = ($6 & [-32])
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$2 }
	$8 = ($5 - $8)
	goto $label$3 
	
.LABEL $label$4
	$8 = ([0] - $8)
	
.LABEL $label$3
	CALL $7($0, $8)
	$9 = *(($0 + [4]))
	$4 = *($0)
	
.LABEL $label$2
	*($2) = $4
	*($2 + [8]) = $9
	$8 = ($9 - $4)
	CALL eosio_assert(((int_32)$8 > (int_32)[3]), [9703])
	CALL memcpy($4, $1, [4])
	CALL eosio_assert(((int_32)($8 + [-4]) > (int_32)[7]), [9703])
	CALL memcpy(($4 + [4]), ($1 + [8]), [8])
	CALL eosio_assert(((int_32)($8 + [-12]) > (int_32)[7]), [9703])
	CALL memcpy(($4 + [12]), ($1 + [16]), [8])
	*($2 + [4]) = ($4 + [20])
	CALL $134($2, $3)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9624])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $189($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	CALL $128(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = [-1]
	*($5 + [56]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $17(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $192($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $7(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [9703])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	CALL require_recipient(*($1))
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [144])
	$global$0 = $2
	CALL require_auth(*($0))
	*($2 + [120]) = ($0 + [72])
	CALL $13(($2 + [16]), ($2 + [120]), $1)
	$3 = *($2 + [20])
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((int_64)*($1) != (int_64)*($3 + [8])) ){ goto $label$1 }
	*($2 + [16]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)32) | (int_64)*($2 + [16]))
	CALL eosio_assert([1], [10437])
	CALL $58(($2 + [16]))
	CALL $59(*($2 + [120]), $3)
	
.LABEL $label$1
	*(($2 + [112])) = [0]
	*($2 + [96]) = (int_64)-1
	$4 = *($0)
	*($2 + [80]) = $4
	$5 = ((int_64)*($0 + [192]) + (int_64)-145)
	*($2 + [88]) = $5
	*($2 + [104]) = (int_64)0
	$3 = CALL db_lowerbound_i64($4, $5, (int_64)-4992623624440512512, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $38(($2 + [80]), $3)
	CALL eosio_assert([1], [10136])
	$3 = CALL db_next_i64(*($3 + [44]), ($2 + [16]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	
.LOOP $label$3:
	$3 = CALL $38(($2 + [80]), $3)
	CALL eosio_assert([1], [10136])
	$3 = CALL db_next_i64(*($3 + [44]), ($2 + [16]))
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	$3 = CALL db_lowerbound_i64(*($2 + [80]), *(($2 + [88])), (int_64)-4992623624440512512, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $38(($2 + [80]), $3)
	
.LOOP $label$4:
	CALL eosio_assert([1], [10437])
	CALL eosio_assert([1], [10136])
	$3 = [0]
	$7 = CALL db_next_i64(*($6 + [44]), ($2 + [16]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$3 = CALL $38(($2 + [80]), $7)
	
.LABEL $label$5
	CALL $60(($2 + [80]), $6)
	$6 = $3
	if ( $3 ){ goto $label$4 }
	
.LABEL $label$2
	$4 = CALL current_time()
	*((($2 + [16]) + [28])) = (int_64)0
	*(($3 = ($2 + [60]))) = (int_64)0
	*(($2 + [68])) = (int_64)0
	*($2 + [28]) = [0]
	*($2 + [32]) = [0]
	*($2 + [36 align=4]) = (int_64)0
	*($2 + [52 align=4]) = (int_64)0
	*($2 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [8]) = (int_64)3617214756542218240
	*($2) = *($0)
	*($2 + [128]) = (int_64)4923678860143406976
	$8 = (($2 + [16]) + [36])
	CALL $61($8, $2, $0, ($2 + [128]), $1)
	$6 = *($3)
	$7 = (($2 + [16]) + [40])
	$3 = *($7)
	$4 = *($0)
	*($2 + [8]) = (int_64)3617214756542218240
	*($2) = $4
	*($2 + [128]) = (int_64)4923678927278486016
	if ( ((uint_32)$3 >= (uint_32)$6) ){ goto $label$7 }
	*($3 + [8]) = (int_64)4923678927278486016
	*($3) = $4
	*($3 + [16 align=4]) = (int_64)0
	*(($8 = ($3 + [24]))) = [0]
	$6 = CALL _Znwj([16])
	*($3 + [16]) = $6
	$9 = ($6 + [16])
	*($8) = $9
	*(($6 + [8])) = *(($2 + [8]))
	*($6) = *($2)
	*(($3 + [20])) = $9
	*($3 + [28 align=4]) = (int_64)0
	*(($3 + [36])) = [0]
	CALL $7(($3 + [28]), [8])
	$3 = *($3 + [28])
	CALL eosio_assert(((int_32)(*(($3 + [32])) - $3) > (int_32)[7]), [9703])
	CALL memcpy($3, $1, [8])
	*($7) = (*($7) + [40])
	goto $label$6 
	
.LABEL $label$7
	CALL $61($8, $2, $0, ($2 + [128]), $1)
	
.LABEL $label$6
	*(($2 + [36])) = [1]
	*($2) = ((int_64)*($1) + (int_64)111)
	$4 = CALL $42($0, $0, $2)
	*($2 + [8]) = (int_64)0
	*($2) = $4
	CALL cancel_deferred($2)
	*($2 + [8]) = (int_64)0
	*($2) = $4
	$4 = *($0)
	CALL $43(($2 + [128]), ($2 + [16]))
	$3 = *($2 + [128])
	CALL send_deferred($2, $4, $3, (*($2 + [132]) - $3), [0])
	$3 = *($2 + [128])
	if ( ($3 == 0) ){ goto $label$8 }
	*($2 + [132]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	CALL $44(($2 + [16]))
	$0 = *($2 + [104])
	if ( ($0 == 0) ){ goto $label$9 }
	$7 = ($2 + [108])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($6)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$12 }
	$3 = *(($2 + [104]))
	goto $label$10 
	
.LABEL $label$11
	$3 = $0
	
.LABEL $label$10
	*($7) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$global$0 = ($2 + [144])
}

void .FUNC $173 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $166(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $182(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8561], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $166(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $166(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $192($0)
	
.LABEL $label$1
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = [1]
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$20 }
	goto $label$2 
	
.LABEL $label$21
	$5 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$2 }
	*($0) = $2
	*($4) = $5
	return [1]
	
.LABEL $label$20
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$16 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$13 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$12 
	
.LABEL $label$19
	$5 = ($1 + [-1])
	$4 = *($5)
	$6 = *($0)
	$2 = *($0 + [1])
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$8 }
	*($0) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$18
	CALL $149($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	return [1]
	
.LABEL $label$17
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$5 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$14 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$7 }
	*($0) = $2
	*(($0 + [2])) = $5
	goto $label$6 
	
.LABEL $label$16
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$10 }
	*(($0 + [2])) = $4
	*(($6 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$11 }
	*($0) = $2
	*($6) = $5
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$15
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	$3 = [1]
	*(($6 = ($0 + [1]))) = $4
	*($5) = $2
	$2 = *($0)
	$4 = *($6)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$14
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$4 }
	*(($0 + [2])) = $4
	*(($7 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$5 }
	*($0) = $2
	*($7) = $5
	$5 = *($6)
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$13
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$10 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$12
	$4 = $5
	
.LABEL $label$11
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$10
	$4 = $2
	$6 = [3]
	$7 = ($0 + [3])
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$9
	$8 = [0]
	$9 = [0]
	
.LOOP $label$22:
	$5 = *($7)
	if ( ((int_32)$5 >= (int_32)int_32(($4 << [24]) >> [24])) ){ goto $label$23 }
	$3 = $8
	
.LOOP $label$25:
	*((($2 = ($0 + $3)) + $6)) = $4
	if ( ((int_32)$3 == (int_32)[-2]) ){ goto $label$24 }
	$3 = ($3 + [-1])
	$4 = *(($2 + [1]))
	if ( ((int_32)$5 < (int_32)$4) ){ goto $label$25 }
	*((($0 + $3) + $6)) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 != (int_32)[8]) ){ goto $label$23 }
	goto $label$1 
	
.LABEL $label$24
	*($0) = $5
	$9 = ($9 + [1])
	if ( ((int_32)$9 == (int_32)[8]) ){ goto $label$1 }
	
.LABEL $label$23
	$3 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$2 }
	$8 = ($8 + [1])
	$4 = *($7)
	$7 = $2
	goto $label$22 
	
.LABEL $label$8
	*($0) = $2
	$3 = [1]
	*(($0 + [1])) = $6
	$4 = *($5)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$2 }
	*(($0 + [1])) = $4
	*($5) = $6
	return [1]
	
.LABEL $label$7
	*($0) = $4
	*(($4 = ($0 + [1]))) = $5
	if ( ((int_32)$2 >= (int_32)$5) ){ goto $label$4 }
	*(($0 + [2])) = $5
	*($4) = $2
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	$5 = *($6)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$4 = $2
	$5 = *($6)
	if ( ((int_32)$5 >= (int_32)$4) ){ goto $label$2 }
	
.LABEL $label$3
	*(($2 = ($0 + [2]))) = $5
	*($6) = $4
	$3 = [1]
	$5 = *(($0 + [1]))
	$4 = *($2)
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$2 }
	*($2) = $5
	$3 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$2 }
	*($0) = $4
	*(($0 + [1])) = $2
	return [1]
	
.LABEL $label$2
	return $3
	
.LABEL $label$1
	$4
	return ((int_32)($7 + [1]) == (int_32)$1)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $189($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10624])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $189($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $192($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $187(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10624])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $187(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $159 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $179 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $183 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$4 = [1]
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$4 = [0]
	
.LABEL $label$2
	$2 = [0]
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $1)
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $4 )
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [112])
	$4 = *($1)
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($6 + [-24])
	$7 = *($1)
	if ( ((int_64)*($7) == (int_64)$4) ){ goto $label$3 }
	$6 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($7 + [76])) == (int_32)$3), [9573])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [120])), (int_64)-5915276457541632000, $4)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $28($3, $1)
	CALL eosio_assert(((int_32)*($7 + [76]) == (int_32)$3), [9573])
	
.LABEL $label$1
	$1 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($1, [8812])
	CALL eosio_assert(((int_32)*($7 + [72]) != (int_32)[0]), [8940])
	CALL eosio_assert($1, [10437])
	CALL eosio_assert($1, [10136])
	$1 = CALL db_next_i64(*($7 + [80]), ($2 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$5 }
	CALL $28($3, $1)
	
.LABEL $label$5
	CALL $70($3, $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [80]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10220])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-5915276457541632000)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10166])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10166])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $28(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10471])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [10516])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((int_64)*(*(($5 + [-24])) + [8]) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8) + [8]) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10566])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [144])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [120])) = [0]
	*($2 + [104]) = (int_64)-1
	$4 = *($0)
	*($2 + [88]) = $4
	$5 = *($1)
	*($2 + [96]) = $5
	*($2 + [112]) = (int_64)0
	$6 = [0]
	$7 = CALL db_lowerbound_i64($4, $5, (int_64)-5882677294048215040, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $48(($2 + [88]), $7)
	
.LABEL $label$1
	
.LOOP $label$3:
	if ( ($6 == 0) ){ goto $label$2 }
	CALL eosio_assert([1], [10437])
	CALL eosio_assert([1], [10136])
	$7 = [0]
	$8 = CALL db_next_i64(*($6 + [28]), ($2 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $48(($2 + [88]), $8)
	
.LABEL $label$4
	CALL $65(($2 + [88]), $6)
	$6 = $7
	$3 = ($3 + [1])
	if ( ($3 <= [50]) ){ goto $label$3 }
	$4 = CALL current_time()
	*(($2 + [52])) = (int_64)0
	*(($2 + [68])) = (int_64)0
	*(($2 + [76])) = (int_64)0
	*($2 + [36]) = [0]
	*($2 + [40]) = [0]
	*($2 + [44 align=4]) = (int_64)0
	*($2 + [60 align=4]) = (int_64)0
	*($2 + [24]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [8]) = (int_64)3617214756542218240
	*($2) = *($0)
	*($2 + [128]) = (int_64)4923678927278486016
	CALL $61(($2 + [60]), $2, $0, ($2 + [128]), $1)
	$4 = *($1)
	*($2 + [44]) = [1]
	*($2) = ((int_64)$4 + (int_64)333)
	$4 = CALL $42($0, $0, $2)
	*($2 + [8]) = (int_64)0
	*($2) = $4
	CALL cancel_deferred($2)
	*($2 + [8]) = (int_64)0
	*($2) = $4
	$4 = *($0)
	CALL $43(($2 + [128]), ($2 + [24]))
	$6 = *($2 + [128])
	CALL send_deferred($2, $4, $6, (*($2 + [132]) - $6), [0])
	$6 = *($2 + [128])
	if ( ($6 == 0) ){ goto $label$5 }
	*($2 + [132]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	CALL $44(($2 + [24]))
	
.LABEL $label$2
	$3 = *($2 + [112])
	if ( ($3 == 0) ){ goto $label$6 }
	$8 = ($2 + [116])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$9 }
	$6 = *(($2 + [112]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	*($8) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [144])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9703])
	CALL memcpy(*($4 + [4]), $0, [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_64 $16
	$2 = ($global$0 - [448])
	$global$0 = $2
	*($2 + [304]) = [8773]
	*($2 + [308]) = CALL $186([8773])
	*($2 + [120]) = *($2 + [304])
	CALL require_auth(*(CALL $4(($2 + [312]), ($2 + [120]))))
	$3 = CALL current_time()
	$4 = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) / (uint_32)[3600]))
	CALL eosio_assert((uint_64)(*($1) <= $4), [8786])
	$5 = ($0 + [112])
	$3 = *($1)
	$7 = *(($0 + [140]))
	$6 = *(($0 + [136]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$3) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($9 + [76])) == (int_32)$5), [9573])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [120])), (int_64)-5915276457541632000, $3)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $28($5, $8)
	CALL eosio_assert(((int_32)*($9 + [76]) == (int_32)$5), [9573])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [8812])
	CALL eosio_assert((*($9 + [72]) == 0), [8829])
	$3 = *($9 + [8])
	CALL __multi3(($2 + [64]), $3, (int_64)$3 >> (int_64)63), (int_64)189, (int_64)0)
	$11 = *(($9 + [16]))
	$3 = *((($2 + [64]) + [8]))
	$12 = *($2 + [64])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$3 < (int_64)0) : (int_64)($3 == 0) ), [9940])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$3 > (int_64)-1) : ((int_64)$3 == (int_64)-1) ), [9964])
	*($2 + [296]) = $11
	CALL eosio_assert([1], [9900])
	CALL eosio_assert([1], [9915])
	*($2 + [288]) = ((int_64)$12 / (int_64)10000)
	$3 = *($9 + [40])
	CALL __multi3(($2 + [48]), $3, (int_64)$3 >> (int_64)63), (int_64)189, (int_64)0)
	$3 = *(($9 + [48]))
	$12 = *((($2 + [48]) + [8]))
	$13 = *($2 + [48])
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [9940])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [9964])
	*($2 + [280]) = $3
	CALL eosio_assert([1], [9900])
	CALL eosio_assert([1], [9915])
	*($2 + [256]) = [8859]
	*($2 + [272]) = ((int_64)$13 / (int_64)10000)
	*($2 + [260]) = CALL $186([8859])
	*($2 + [112]) = *($2 + [256])
	CALL $4(($2 + [264]), ($2 + [112]))
	*($2 + [240]) = [8859]
	*($2 + [244]) = CALL $186([8859])
	*($2 + [104]) = *($2 + [240])
	CALL $4(($2 + [248]), ($2 + [104]))
	*($2 + [224]) = [8871]
	*($2 + [228]) = CALL $186([8871])
	*($2 + [96]) = *($2 + [224])
	CALL $4(($2 + [232]), ($2 + [96]))
	*($2 + [208]) = [8871]
	*($2 + [212]) = CALL $186([8871])
	*($2 + [88]) = *($2 + [208])
	CALL $4(($2 + [216]), ($2 + [88]))
	*($2 + [192]) = [8859]
	*($2 + [196]) = CALL $186([8859])
	*($2 + [80]) = *($2 + [192])
	$12 = *(CALL $4(($2 + [200]), ($2 + [80])))
	$13 = *($0)
	*(($14 = ($2 + [352]))) = [0]
	*($2 + [328]) = $13
	*($2 + [320]) = $12
	*($2 + [336]) = (int_64)-1
	*($2 + [344]) = (int_64)0
	$8 = CALL $37(($2 + [320]), (uint_64)$11 >> (uint_64)(int_64)8), [10117]
	$12 = *($8) + [8])
	$11 = *($8)
	$6 = *($2 + [344])
	if ( ($6 == 0) ){ goto $label$5 }
	$15 = ($2 + [348])
	$8 = *($15)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$9 }
	CALL _ZdlPv($7)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$8 }
	$8 = *(($2 + [344]))
	goto $label$6 
	
.LABEL $label$7
	$8 = $6
	
.LABEL $label$6
	*($15) = $6
	CALL _ZdlPv($8)
	$3 = *(($2 + [280]))
	
.LABEL $label$5
	*($2 + [176]) = [8871]
	*($2 + [180]) = CALL $186([8871])
	*($2 + [40]) = *($2 + [176])
	$13 = *(CALL $4(($2 + [184]), ($2 + [40])))
	$16 = *($0)
	*($14) = [0]
	*($2 + [328]) = $16
	*($2 + [320]) = $13
	*($2 + [336]) = (int_64)-1
	*($2 + [344]) = (int_64)0
	$8 = CALL $37(($2 + [320]), (uint_64)$3 >> (uint_64)(int_64)8), [10117]
	$13 = *($8) + [8])
	$16 = *($8)
	$6 = *($2 + [344])
	if ( ($6 == 0) ){ goto $label$10 }
	$14 = ($2 + [348])
	$8 = *($14)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$12 }
	
.LOOP $label$13:
	$8 = ($8 + [-24])
	$7 = *($8)
	*($8) = [0]
	if ( ($7 == 0) ){ goto $label$14 }
	CALL _ZdlPv($7)
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$13 }
	$8 = *(($2 + [344]))
	goto $label$11 
	
.LABEL $label$12
	$8 = $6
	
.LABEL $label$11
	*($14) = $6
	CALL _ZdlPv($8)
	$3 = *(($2 + [280]))
	
.LABEL $label$10
	CALL eosio_assert(((int_64)$12 == (int_64)*((($2 + [288]) + [8]))), [9989])
	CALL eosio_assert(((int_64)$11 > (int_64)*($2 + [288])), [8884])
	CALL eosio_assert(((int_64)$13 == (int_64)$3), [9989])
	CALL eosio_assert(((int_64)$16 > (int_64)*($2 + [272])), [8906])
	$8 = CALL $186([8352])
	if ( ($8 <= [8]) ){ goto $label$18 }
	CALL eosio_assert([0], [9004])
	goto $label$17 
	
.LABEL $label$18
	if ( ($8 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$3 = (int_64)0
	
.LOOP $label$19:
	$7 = *(($8 + [8351]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$20 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$20
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$19 }
	$12 = ((int_64)$3 << (int_64)8)
	goto $label$15 
	
.LABEL $label$16
	$12 = (int_64)0
	
.LABEL $label$15
	CALL eosio_assert([1], [10048])
	$3 = (uint_64)$12 >> (uint_64)(int_64)8)
	$11 = ((int_64)$12 | (int_64)4)
	$8 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$12 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$3 = $12
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$3 = $12
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$25 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$7 = [0]
	
.LABEL $label$21
	CALL eosio_assert($7, [10097])
	$8 = CALL $186([8928])
	if ( ($8 <= [8]) ){ goto $label$29 }
	CALL eosio_assert([0], [9004])
	goto $label$28 
	
.LABEL $label$29
	if ( ($8 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$3 = (int_64)0
	
.LOOP $label$30:
	$7 = *(($8 + [8927]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$31 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$31
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$30 }
	$12 = ((int_64)$3 << (int_64)8)
	goto $label$26 
	
.LABEL $label$27
	$12 = (int_64)0
	
.LABEL $label$26
	CALL eosio_assert([1], [10048])
	$3 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = ((int_64)$12 | (int_64)4)
	$8 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$12 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$3 = $12
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$3 = $12
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$36 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$7 = [0]
	
.LABEL $label$32
	CALL eosio_assert($7, [10097])
	*(($2 + [328])) = [0]
	*($2 + [320]) = (int_64)0
	$8 = CALL $186([8932])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$40 }
	*($2 + [320]) = ($8 << [1])
	$7 = (($2 + [320]) | [1])
	if ( $8 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$6 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($6)
	*($2 + [320]) = ($6 | [1])
	*($2 + [328]) = $7
	*($2 + [324]) = $8
	
.LABEL $label$39
	CALL memcpy($7, [8932], $8)
	
.LABEL $label$38
	*(($7 + $8)) = [0]
	CALL $173(($2 + [424]), *($1))
	$8 = *($2 + [424])
	$7 = ($8 & [1])
	$8 = CALL $169(($2 + [320]), ( *($2 + [432]) ? (($2 + [424]) | [1]) : $7 ), ( *($2 + [428]) ? uint_32($8 >> [1]) : $7 ))
	$7 = ($8 + [8])
	*((($2 + [160]) + [8])) = *($7)
	*($2 + [160]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	if ( ((*($2 + [424]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*((($2 + [424]) + [8])))
	
.LABEL $label$41
	if ( ((*($2 + [320]) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*($2 + [328]))
	
.LABEL $label$42
	$6 = *(($0 + [140]))
	$1 = *(($0 + [136]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$45 }
	
.LOOP $label$47:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$46 }
	$6 = $7
	if ( ((int_32)$1 != (int_32)$7) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$45 }
	CALL eosio_assert(((int_32)*(($8 + [76])) == (int_32)$5), [9573])
	if ( $8 ){ goto $label$43 }
	goto $label$44 
	
.LABEL $label$45
	$8 = CALL db_find_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-5915276457541632000, $4)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$44 }
	$8 = CALL $28($5, $8)
	CALL eosio_assert(((int_32)*($8 + [76]) == (int_32)$5), [9573])
	goto $label$43 
	
.LABEL $label$44
	$12 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$6()), [9652])
	$8 = CALL _Znwj([88])
	CALL $30($8)
	*($8 + [76]) = $5
	*($8) = $4
	*($2 + [408]) = (($2 + [320]) + [73])
	*($2 + [404]) = ($2 + [320])
	*($2 + [400]) = ($2 + [320])
	*($2 + [416]) = ($2 + [400])
	*($2 + [428]) = ($8 + [8])
	*($2 + [424]) = $8
	*($2 + [432]) = ($8 + [24])
	*($2 + [436]) = ($8 + [40])
	*($2 + [440]) = ($8 + [56])
	*($2 + [444]) = ($8 + [72])
	CALL $67(($2 + [424]), ($2 + [416]))
	$3 = *($8)
	$6 = CALL db_store_i64(*(($0 + [120])), (int_64)-5915276457541632000, $12, $3, ($2 + [320]), [73])
	*($8 + [80]) = $6
	$7 = ($0 + [128])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$48 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$48
	*($2 + [424]) = $8
	$3 = *($8)
	*($2 + [320]) = $3
	*($2 + [400]) = $6
	$1 = ($0 + [140])
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [144]))) ){ goto $label$50 }
	*($7 + [8]) = $3
	*($7 + [16]) = $6
	*($2 + [424]) = [0]
	*($7) = $8
	*($1) = ($7 + [24])
	$7 = *($2 + [424])
	*($2 + [424]) = [0]
	if ( $7 ){ goto $label$49 }
	goto $label$43 
	
.LABEL $label$50
	CALL $32(($0 + [136]), ($2 + [424]), ($2 + [320]), ($2 + [400]))
	$7 = *($2 + [424])
	*($2 + [424]) = [0]
	if ( ($7 == 0) ){ goto $label$43 }
	
.LABEL $label$49
	CALL _ZdlPv($7)
	
.LABEL $label$43
	CALL eosio_assert(((int_64)*((($2 + [288]) + [8])) == (int_64)$11), [9989])
	$7 = [1]
	if ( ((int_64)*($2 + [288]) > (int_64)99999) ){ goto $label$51 }
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9709])
	CALL eosio_assert(((int_32)*($8 + [76]) == (int_32)$5), [9744])
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$6()), [9790])
	$3 = *($8)
	$7 = ($9 + [16])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($8 + [16]))), [10268])
	$6 = ($9 + [8])
	$4 = ((int_64)*($8 + [8]) + (int_64)*($6))
	*($8 + [8]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10311])
	CALL eosio_assert(((int_64)*($8 + [8]) < (int_64)4611686018427387904), [10330])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($8 + [32]))), [10268])
	$4 = ((int_64)*($8 + [24]) + (int_64)*($6))
	*($8 + [24]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10311])
	CALL eosio_assert(((int_64)*($8 + [24]) < (int_64)4611686018427387904), [10330])
	CALL eosio_assert(((int_64)$3 == (int_64)*($8)), [9841])
	*($2 + [408]) = (($2 + [320]) + [73])
	*($2 + [404]) = ($2 + [320])
	*($2 + [400]) = ($2 + [320])
	*($2 + [416]) = ($2 + [400])
	*($2 + [428]) = ($8 + [8])
	*($2 + [424]) = $8
	*($2 + [432]) = ($8 + [24])
	*($2 + [436]) = ($8 + [40])
	*($2 + [440]) = ($8 + [56])
	*($2 + [444]) = ($8 + [72])
	CALL $67(($2 + [424]), ($2 + [416]))
	CALL db_update_i64(*($8 + [80]), (int_64)0, ($2 + [320]), [73])
	$7 = ($0 + [128])
	if ( (uint_64)($3 <= *($7)) ){ goto $label$52 }
	*($7) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$52
	$7 = [2]
	
.LABEL $label$51
	CALL eosio_assert(((int_64)*((($2 + [272]) + [8])) == (int_64)$13), [9989])
	if ( ((int_64)*($2 + [272]) > (int_64)9999999) ){ goto $label$54 }
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9709])
	CALL eosio_assert(((int_32)*($8 + [76]) == (int_32)$5), [9744])
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$6()), [9790])
	$3 = *($8)
	$6 = ($9 + [48])
	CALL eosio_assert(((int_64)*($6) == (int_64)*(($8 + [48]))), [10268])
	$1 = ($9 + [40])
	$4 = ((int_64)*($8 + [40]) + (int_64)*($1))
	*($8 + [40]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10311])
	CALL eosio_assert(((int_64)*($8 + [40]) < (int_64)4611686018427387904), [10330])
	CALL eosio_assert(((int_64)*($6) == (int_64)*(($8 + [64]))), [10268])
	$4 = ((int_64)*($8 + [56]) + (int_64)*($1))
	*($8 + [56]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10311])
	CALL eosio_assert(((int_64)*($8 + [56]) < (int_64)4611686018427387904), [10330])
	CALL eosio_assert(((int_64)$3 == (int_64)*($8)), [9841])
	*($2 + [408]) = (($2 + [320]) + [73])
	*($2 + [404]) = ($2 + [320])
	*($2 + [400]) = ($2 + [320])
	*($2 + [416]) = ($2 + [400])
	*($2 + [428]) = ($8 + [8])
	*($2 + [424]) = $8
	*($2 + [432]) = ($8 + [24])
	*($2 + [436]) = ($8 + [40])
	*($2 + [440]) = ($8 + [56])
	*($2 + [444]) = ($8 + [72])
	CALL $67(($2 + [424]), ($2 + [416]))
	CALL db_update_i64(*($8 + [80]), (int_64)0, ($2 + [320]), [73])
	$8 = ($0 + [128])
	if ( (uint_64)($3 <= *($8)) ){ goto $label$55 }
	*($8) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$55
	$8 = ((int_32)$7 == (int_32)[2])
	$7 = [4]
	if ( $8 ){ goto $label$53 }
	*($2 + [128]) = [8773]
	*($2 + [132]) = CALL $186([8773])
	*($2 + [8]) = *($2 + [128])
	CALL $12($0, CALL $4(($2 + [320]), ($2 + [8])), ($2 + [288]), ($2 + [160]))
	$7 = [3]
	goto $label$53 
	
.LABEL $label$54
	$8 = ($7 & [3])
	if ( ((int_32)$8 == (int_32)[2]) ){ goto $label$56 }
	if ( ((int_32)$8 != (int_32)[1]) ){ goto $label$53 }
	*($2 + [152]) = [8773]
	*($2 + [156]) = CALL $186([8773])
	*($2 + [24]) = *($2 + [152])
	CALL $12($0, CALL $4(($2 + [320]), ($2 + [24])), ($2 + [288]), ($2 + [160]))
	*($2 + [144]) = [8773]
	*($2 + [148]) = CALL $186([8773])
	*($2 + [16]) = *($2 + [144])
	CALL $12($0, CALL $4(($2 + [320]), ($2 + [16])), ($2 + [272]), ($2 + [160]))
	$7 = [1]
	goto $label$53 
	
.LABEL $label$56
	*($2 + [136]) = [8773]
	*($2 + [140]) = CALL $186([8773])
	*($2 + [32]) = *($2 + [136])
	CALL $12($0, CALL $4(($2 + [320]), ($2 + [32])), ($2 + [272]), ($2 + [160]))
	$7 = [2]
	
.LABEL $label$53
	CALL eosio_assert($10, [9709])
	CALL eosio_assert(((int_32)*($9 + [76]) == (int_32)$5), [9744])
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$6()), [9790])
	*($9 + [72]) = $7
	$3 = *($9)
	CALL eosio_assert([1], [9841])
	*($2 + [408]) = (($2 + [320]) + [73])
	*($2 + [404]) = ($2 + [320])
	*($2 + [400]) = ($2 + [320])
	*($2 + [416]) = ($2 + [400])
	*($2 + [428]) = ($9 + [8])
	*($2 + [424]) = $9
	*($2 + [432]) = ($9 + [24])
	*($2 + [436]) = ($9 + [40])
	*($2 + [440]) = ($9 + [56])
	*($2 + [444]) = ($9 + [72])
	CALL $67(($2 + [424]), ($2 + [416]))
	CALL db_update_i64(*($9 + [80]), (int_64)0, ($2 + [320]), [73])
	$8 = ($0 + [128])
	if ( (uint_64)($3 <= *($8)) ){ goto $label$57 }
	*($8) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$57
	if ( ((*($2 + [160]) & [1]) == 0) ){ goto $label$58 }
	CALL _ZdlPv(*($2 + [168]))
	
.LABEL $label$58
	$8 = [0]
	$3 = (CASTING uint_64)(uint_32 $5)
	$7 = CALL db_lowerbound_i64(*(($0 + [112])), *(($0 + [120])), (int_64)-5915276457541632000, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$59 }
	$8 = CALL $28($5, $7)
	
.LABEL $label$59
	*($2 + [320]) = $3
	if ( (uint_64)((int_64))(*(*(CALL $68(($2 + [320])) + [4])) - *($8)) <= (int_64)169) ){ goto $label$60 }
	*($2 + [328]) = (int_64)4923678863589618176
	$3 = *($0)
	*($2 + [320]) = $3
	*(($7 = CALL _Znwj([16]))) = $3
	*($7 + [8]) = (int_64)3617214756542218240
	*(($2 + [356])) = [0]
	$9 = ($7 + [16])
	*(($2 + [344])) = $9
	*(($2 + [340])) = $9
	*($2 + [336]) = $7
	*($2 + [348 align=4]) = (int_64)0
	CALL $7(($2 + [348]), [8])
	$7 = *($2 + [348])
	CALL eosio_assert(((int_32)(*(($2 + [352])) - $7) > (int_32)[7]), [9703])
	CALL memcpy($7, $8, [8])
	CALL $9(($2 + [424]), ($2 + [320]))
	$8 = *($2 + [424])
	CALL send_inline($8, (*($2 + [428]) - $8))
	$8 = *($2 + [424])
	if ( ($8 == 0) ){ goto $label$61 }
	*($2 + [428]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$61
	$8 = *($2 + [348])
	if ( ($8 == 0) ){ goto $label$62 }
	*(($2 + [352])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$62
	$8 = *($2 + [336])
	if ( ($8 == 0) ){ goto $label$60 }
	*(($2 + [340])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$60
	$global$0 = ($2 + [448])
	return (unreachable)
	
.LABEL $label$37
	CALL $159(($2 + [320]))
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $7(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [9703])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [10471])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [10516])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10566])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [10471])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [10516])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10566])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [144])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = [0]
	*(($2 + [120])) = [0]
	*($2 + [104]) = (int_64)-1
	$4 = *($0)
	*($2 + [88]) = $4
	$5 = *($1)
	*($2 + [96]) = $5
	*($2 + [112]) = (int_64)0
	$6 = [0]
	$7 = CALL db_lowerbound_i64($4, $5, (int_64)7881984528191848448, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $20(($2 + [88]), $7)
	
.LABEL $label$1
	
.LOOP $label$3:
	if ( ($6 == 0) ){ goto $label$2 }
	CALL eosio_assert([1], [10437])
	CALL eosio_assert([1], [10136])
	$7 = [0]
	$8 = CALL db_next_i64(*($6 + [36]), ($2 + [24]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $20(($2 + [88]), $8)
	
.LABEL $label$4
	CALL $63(($2 + [88]), $6)
	$6 = $7
	$3 = ($3 + [1])
	if ( ($3 <= [50]) ){ goto $label$3 }
	$6 = CALL db_lowerbound_i64(*($2 + [88]), *(($2 + [96])), (int_64)7881984528191848448, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $20(($2 + [88]), $6)
	CALL eosio_assert([1], [10136])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [24]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = CALL $20(($2 + [88]), $6)
	CALL eosio_assert([1], [10136])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [24]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = CALL current_time()
	*(($2 + [52])) = (int_64)0
	*(($2 + [68])) = (int_64)0
	*(($2 + [76])) = (int_64)0
	*($2 + [36]) = [0]
	*($2 + [40]) = [0]
	*($2 + [44 align=4]) = (int_64)0
	*($2 + [60 align=4]) = (int_64)0
	*($2 + [24]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [8]) = (int_64)3617214756542218240
	*($2) = *($0)
	*($2 + [128]) = (int_64)4923678860143406976
	CALL $61(($2 + [60]), $2, $0, ($2 + [128]), $1)
	$4 = *($1)
	*($2 + [44]) = [1]
	*($2) = ((int_64)$4 + (int_64)222)
	$4 = CALL $42($0, $0, $2)
	*($2 + [8]) = (int_64)0
	*($2) = $4
	CALL cancel_deferred($2)
	*($2 + [8]) = (int_64)0
	*($2) = $4
	$4 = *($0)
	CALL $43(($2 + [128]), ($2 + [24]))
	$6 = *($2 + [128])
	CALL send_deferred($2, $4, $6, (*($2 + [132]) - $6), [0])
	$6 = *($2 + [128])
	if ( ($6 == 0) ){ goto $label$7 }
	*($2 + [132]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$7
	CALL $44(($2 + [24]))
	
.LABEL $label$2
	$3 = *($2 + [112])
	if ( ($3 == 0) ){ goto $label$8 }
	$8 = ($2 + [116])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$11 }
	$6 = *(($2 + [112]))
	goto $label$9 
	
.LABEL $label$10
	$6 = $3
	
.LABEL $label$9
	*($8) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$8
	$global$0 = ($2 + [144])
}

int_64 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0)
	$3 = ($2 & [1])
	$4 = ( *($0 + [8]) ? ($0 + [1]) : $3 )
	$3 = ( *($0 + [4]) ? uint_32($2 >> [1]) : $3 )
	if ( ($3 <= [4]) ){ goto $label$4 }
	$5 = ($3 + [-4])
	$0 = $4
	$2 = $3
	
.LOOP $label$5:
	CALL memcpy(($1 + [12]), $0, [4])
	$6 = ((int_32)*($1 + [12]) * (int_32)[1540483477])
	$2 = ((int_32)((int_32)((int_32)uint_32($6 >> [24]) ^ (int_32)$6) * (int_32)[1540483477]) ^ (int_32)((int_32)$2 * (int_32)[1540483477]))
	$0 = ($0 + [4])
	$3 = ($3 + [-4])
	if ( ((uint_32)$3 > (uint_32)[3]) ){ goto $label$5 }
	$0 = ($5 & [-4])
	$4 = (($4 + $0) + [4])
	$3 = ($5 - $0)
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$2 = $3
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$6 }
	if ( ((int_32)$3 != (int_32)[3]) ){ goto $label$1 }
	$2 = ((int_32)(*($4 + [2]) << [16]) ^ (int_32)$2)
	
.LABEL $label$6
	$2 = ((int_32)(*($4 + [1]) << [8]) ^ (int_32)$2)
	
.LABEL $label$2
	$2 = ((int_32)((int_32)$2 ^ (int_32)*($4)) * (int_32)[1540483477])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	$0 = ((int_32)((int_32)uint_32($2 >> [13]) ^ (int_32)$2) * (int_32)[1540483477])
	return (CASTING uint_64)(uint_32 ((int_32)uint_32($0 >> [15]) ^ (int_32)$0))
}

int_32 .FUNC $89 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*(($5 = (($4 + [64]) + [8]))) = *(($3 + [8]))
	*($4 + [64]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*(($6 = (($4 + [32]) + [8]))) = $3
	$2 = *($4 + [64])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [32]) = $2
	*(($0 + [40])) = $1
	*($0 + [32]) = $1
	*(($0 + [48])) = (int_64)-1
	*(($0 + [56])) = (int_64)0
	*(($0 + [64])) = [0]
	*($0 + [72]) = $1
	*(($0 + [80])) = $1
	*(($0 + [88])) = (int_64)-1
	*(($0 + [96])) = (int_64)0
	*(($0 + [104])) = [0]
	*(($0 + [108])) = [0]
	*($0 + [112]) = $1
	*(($0 + [120])) = $1
	*(($0 + [128])) = (int_64)-1
	*(($0 + [136])) = (int_64)0
	*(($0 + [144])) = [0]
	*($0 + [152]) = $1
	*(($0 + [160])) = $1
	*(($0 + [168])) = (int_64)-1
	*(($0 + [176])) = (int_64)0
	*(($0 + [184])) = [0]
	$3 = CALL $136(($0 + [208]))
	$1 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($0 + [200]) = ((int_64)$1 & (int_64)4294967295)
	*($0 + [192]) = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 $1) / (uint_32)[600]))
	$1 = *($0)
	*(($4 + [24])) = (int_64)0
	*(($4 + [16])) = (int_64)0
	*(($4 + [8])) = (int_64)0
	*($4) = (int_64)0
	$5 = CALL $136($4)
	CALL $142(($4 + [32]), ($0 + [152]), $1, $5)
	*(($3 + [8])) = *($6)
	*($3) = *($4 + [32])
	$6 = ($0 + [224])
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$2 }
	*(($0 + [228])) = $3
	CALL _ZdlPv($3)
	*(($3 = ($0 + [232]))) = [0]
	*($6) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$3 = ($0 + [232])
	
.LABEL $label$1
	$6 = ($4 + [48])
	*(($0 + [224])) = *($6)
	$7 = ($4 + [56])
	$8 = *($7)
	*($7) = [0]
	*($3) = $8
	*($6) = (int_64)0
	$3 = *($5 + [16])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($5 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [80])
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $143(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $87 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $189($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9647])
	CALL memcpy(($4 + [272]), $2, [8])
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9647])
	CALL memcpy(($4 + [32]), ($2 + [8]), [8])
	*($4 + [280]) = *($4 + [32])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $89(($4 + [32]), $0, $1, $4)
	*(($3 = (($4 + [288]) + [8]))) = *($4 + [280])
	*($4 + [288]) = *($4 + [272])
	*((($4 + [304]) + [8])) = *($3)
	*($4 + [304]) = *($4 + [288])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [304])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $192($2)
	
.LABEL $label$6
	CALL $90($8)
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $86 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $189($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [272]) + [8]))) = [0]
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [9647])
	CALL memcpy(($4 + [272]), $2, [4])
	$8 = ($7 & [-4])
	CALL eosio_assert(((int_32)$8 != (int_32)[4]), [9647])
	CALL memcpy((($4 + [272]) | [4]), ($2 + [4]), [4])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9647])
	CALL memcpy($3, ($2 + [8]), [4])
	$8 = ($2 + $7)
	*(($4 + [8])) = $8
	*($4 + [20]) = ($2 + [12])
	*($4 + [16]) = $2
	*($4 + [24]) = $8
	*($4) = *($4 + [16])
	$8 = CALL $89(($4 + [32]), $0, $1, $4)
	*(($9 = (($4 + [288]) + [8]))) = *($3)
	*($4 + [288]) = *($4 + [272])
	*((($4 + [304]) + [8])) = *($9)
	*($4 + [304]) = *($4 + [288])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ($4 + [304])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $192($2)
	
.LABEL $label$5
	CALL $90($8)
	$global$0 = ($4 + [320])
	return [1]
}

int_32 .FUNC $85 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$3 = ($global$0 - [368])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $189($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [288]) + [32]))) = (int_64)0
	*(($3 = (($4 + [288]) + [16]))) = (int_64)0
	*(($9 = (($4 + [288]) + [8]))) = (int_64)0
	*(($10 = (($4 + [288]) + [24]))) = (int_64)0
	*($8) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = ($2 + $7)
	*($4 + [272]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [9647])
	CALL memcpy(($4 + [288]), $2, [4])
	CALL eosio_assert(((uint_32)($7 + [-4]) > (uint_32)[7]), [9647])
	CALL memcpy($9, ($2 + [4]), [8])
	CALL eosio_assert(((uint_32)($7 + [-12]) > (uint_32)[7]), [9647])
	CALL memcpy($3, ($2 + [12]), [8])
	*($4 + [276]) = ($2 + [20])
	CALL $91(($4 + [272]), $10)
	$8 = *($4 + [280])
	*((($4 + [16]) + [8])) = $8
	*(($4 + [8])) = $8
	$11 = *($4 + [272])
	*($4) = $11
	*($4 + [16]) = $11
	$8 = CALL $89(($4 + [32]), $0, $1, $4)
	*((($4 + [328]) + [32])) = [0]
	*((($4 + [328]) + [16])) = *($3)
	*((($4 + [328]) + [8])) = *($9)
	*($4 + [352]) = (int_64)0
	*($4 + [328]) = *($4 + [288])
	$3 = (*(($4 + [316])) - *($10))
	if ( ($3 == 0) ){ goto $label$5 }
	$10 = int_32($3 >> [5])
	if ( ((uint_32)$10 >= (uint_32)[134217728]) ){ goto $label$4 }
	$3 = CALL _Znwj($3)
	*((($4 + [328]) + [24])) = $3
	*(($9 = (($4 + [328]) + [28]))) = $3
	*(($4 + [360])) = ($3 + ($10 << [5]))
	$12 = *((($4 + [288]) + [24]))
	$10 = (*((($4 + [288]) + [28])) - $12)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $12, $10)
	*($9) = (*($9) + $10)
	
.LABEL $label$5
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [328])), (int_32 $6))
	$5 = *($4 + [352])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [356])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $192($2)
	
.LABEL $label$8
	CALL $90($8)
	$2 = *(($4 + [312]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($4 + [316])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($4 + [368])
	return [1]
	
.LABEL $label$4
	CALL $174((($4 + [328]) + [24]))
	return (unreachable)
}

int_32 .FUNC $84 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [304])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $189($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [280]) = (int_64)0
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9647])
	CALL memcpy(($4 + [272]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9647])
	CALL memcpy((($4 + [272]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $89(($4 + [32]), $0, $1, $4)
	$0 = *($4 + [272])
	*($4 + [288]) = *($4 + [280])
	*($4 + [296]) = $0
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [296])), (int_32 ($4 + [288])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $192($2)
	
.LABEL $label$6
	CALL $90($8)
	$global$0 = ($4 + [304])
	return [1]
}

int_32 .FUNC $83 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$3 = ($global$0 - [416])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $189($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [288]) + [56]))) = (int_64)0
	*(($8 = ($4 + [336]))) = (int_64)0
	*(($9 = (($4 + [288]) + [8]))) = (int_64)0
	*(($10 = (($4 + [288]) + [16]))) = (int_64)0
	*(($11 = (($4 + [288]) + [24]))) = (int_64)0
	*(($4 + [320])) = (int_64)0
	*(($4 + [328])) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [276]) = $2
	*($4 + [272]) = $2
	*($4 + [280]) = ($2 + $7)
	*($4 + [352]) = ($4 + [272])
	*($4 + [36]) = $9
	*($4 + [40]) = $11
	*($4 + [48]) = $8
	*($4 + [52]) = $3
	*($4 + [32]) = ($4 + [288])
	$12 = (($4 + [288]) + [36])
	*($4 + [44]) = $12
	CALL $92(($4 + [32]), ($4 + [352]))
	$13 = *($4 + [280])
	*((($4 + [16]) + [8])) = $13
	*(($4 + [8])) = $13
	$14 = *($4 + [272])
	*($4) = $14
	*($4 + [16]) = $14
	$13 = CALL $89(($4 + [32]), $0, $1, $4)
	*((($4 + [352]) + [16])) = *($10)
	*((($4 + [352]) + [8])) = *($9)
	*($4 + [352]) = *($4 + [288])
	$11 = CALL $160((($4 + [352]) + [24]), $11)
	$9 = CALL $160((($4 + [352]) + [36]), $12)
	*((($4 + [352]) + [56])) = *($3)
	*($4 + [400]) = *($8)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [352])), (int_32 $6))
	if ( (*($9) & [1]) ){ goto $label$10 }
	if ( (*($11) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL _ZdlPv(*(($4 + [396])))
	if ( ((*($11) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [384])))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ($7 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $192($2)
	
.LABEL $label$6
	CALL $90($13)
	if ( ((*(($4 + [324])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($4 + [332])))
	
.LABEL $label$11
	if ( ((*(($4 + [312])) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($4 + [320])))
	
.LABEL $label$12
	$global$0 = ($4 + [416])
	return [1]
}

int_32 .FUNC $82 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [336])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$2 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$2 = CALL $189($8)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $8)
	
.LABEL $label$1
	*($4 + [296]) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [276]) = $2
	*($4 + [272]) = $2
	*($4 + [280]) = ($2 + $8)
	CALL $93(($4 + [272]), ($4 + [288]))
	$3 = *($4 + [280])
	*((($4 + [16]) + [8])) = $3
	*(($4 + [8])) = $3
	$9 = *($4 + [272])
	*($4) = $9
	*($4 + [16]) = $9
	$10 = CALL $89(($4 + [32]), $0, $1, $4)
	*($4 + [312]) = [0]
	*($4 + [304]) = (int_64)0
	$3 = (*($4 + [292]) - *($4 + [288]))
	$11 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$11 >= (uint_32)[357913942]) ){ goto $label$5 }
	$7 = CALL _Znwj($3)
	*(($4 + [312])) = ($7 + ((int_32)$11 * (int_32)[12]))
	*($4 + [304]) = $7
	*($4 + [308]) = $7
	$11 = *($4 + [288])
	$3 = (*($4 + [292]) - $11)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $11, $3)
	$7 = (*($4 + [308]) + ((int_32)((uint_32)$3 / (uint_32)[12]) * (int_32)[12]))
	*($4 + [308]) = $7
	
.LABEL $label$6
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	*($4 + [328]) = [0]
	*($4 + [320]) = (int_64)0
	$7 = ($7 - *($4 + [304]))
	$5 = ((int_32)$7 / (int_32)[12])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$4 }
	$7 = CALL _Znwj($7)
	*(($4 + [328])) = ($7 + ((int_32)$5 * (int_32)[12]))
	*($4 + [320]) = $7
	*($4 + [324]) = $7
	$11 = *($4 + [304])
	$5 = (*($4 + [308]) - $11)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($7, $11, $5)
	*($4 + [324]) = ($7 + ((int_32)((uint_32)$5 / (uint_32)[12]) * (int_32)[12]))
	
.LABEL $label$8
	CALL void $3((int_32 ($4 + [320])), (int_32 $6))
	$7 = *($4 + [320])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [324]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [304])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [308]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL $192($2)
	
.LABEL $label$11
	CALL $90($10)
	$2 = *($4 + [288])
	if ( ($2 == 0) ){ goto $label$12 }
	*($4 + [292]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($4 + [336])
	return [1]
	
.LABEL $label$5
	CALL $174(($4 + [304]))
	
.LABEL $label$4
	CALL $174(($4 + [320]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $81 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $189($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9647])
	CALL memcpy(($4 + [272]), $2, [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [8])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	$8 = CALL $89(($4 + [32]), $0, $1, $4)
	*($4 + [280]) = *($4 + [272])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 ($4 + [280])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $192($2)
	
.LABEL $label$6
	CALL $90($8)
	$global$0 = ($4 + [288])
	return [1]
}

int_32 .FUNC $80 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$3 = ($global$0 - [400])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $189($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [312]))) = (int_64)0
	*(($4 + [328])) = [0]
	*($4 + [296]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [304]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [276]) = $2
	*($4 + [272]) = $2
	*($4 + [280]) = ($2 + $7)
	*($4 + [368]) = ($4 + [272])
	*($4 + [32]) = ($4 + [288])
	CALL $88(($4 + [32]), ($4 + [368]))
	$8 = *($4 + [280])
	*((($4 + [16]) + [8])) = $8
	*(($4 + [8])) = $8
	$9 = *($4 + [272])
	*($4) = $9
	*($4 + [16]) = $9
	$10 = CALL $89(($4 + [32]), $0, $1, $4)
	*(($8 = (($4 + [352]) + [8]))) = *($3)
	*($4 + [352]) = *($4 + [304])
	$0 = *($4 + [296])
	$1 = *($4 + [288])
	$3 = CALL $160(($4 + [336]), ($4 + [320]))
	*((($4 + [368]) + [8])) = *($8)
	*($4 + [392]) = $1
	*($4 + [384]) = $0
	*($4 + [368]) = *($4 + [352])
	$8 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($8) + $6))
	
.LABEL $label$4
	CALL void $8((int_32 ($4 + [392])), (int_32 ($4 + [384])), (int_32 ($4 + [368])), (int_32 $3), (int_32 $6))
	if ( ((*($4 + [336]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$5
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $192($2)
	
.LABEL $label$6
	CALL $90($10)
	if ( ((*($4 + [320]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [328])))
	
.LABEL $label$7
	$global$0 = ($4 + [400])
	return [1]
}

int_32 .FUNC $182 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $178([18], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $149 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = *($2)
	$8 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$5 }
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$4 }
	*($0) = $6
	*($2) = $8
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$2 }
	*($1) = $6
	*($2) = $7
	$9 = [1]
	$8 = *($0)
	$6 = *($1)
	if ( ((int_32)$6 >= (int_32)$8) ){ goto $label$1 }
	*($0) = $6
	*($1) = $8
	$7 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $7
	*($1) = $8
	$9 = [1]
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$1 }
	*($1) = $7
	*($2) = $8
	$9 = [2]
	
.LABEL $label$3
	$7 = $8
	goto $label$1 
	
.LABEL $label$2
	$7 = $6
	
.LABEL $label$1
	$6 = *($3)
	if ( ((int_32)$6 >= (int_32)int_32(($7 << [24]) >> [24])) ){ goto $label$10 }
	*($2) = $6
	*($3) = $7
	$6 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$9 }
	*($1) = $7
	*($2) = $6
	$6 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$8 }
	*($0) = $7
	*($1) = $6
	$9 = ($9 + [3])
	
.LABEL $label$10
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ($9 + [1])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$9 = ($9 + [2])
	$6 = *($3)
	$7 = *($4)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$7
	return $9
	
.LABEL $label$6
	*($3) = $7
	*($4) = $6
	$6 = *($2)
	$7 = *($3)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$13 }
	*($2) = $7
	*($3) = $6
	$3 = *($1)
	$7 = *($2)
	if ( ((int_32)$7 >= (int_32)$3) ){ goto $label$12 }
	*($1) = $7
	*($2) = $3
	$7 = *($0)
	$2 = *($1)
	if ( ((int_32)$2 >= (int_32)$7) ){ goto $label$11 }
	*($0) = $2
	*($1) = $7
	return ($9 + [4])
	
.LABEL $label$13
	return ($9 + [1])
	
.LABEL $label$12
	return ($9 + [2])
	
.LABEL $label$11
	return ($9 + [3])
}

void .FUNC $148 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$5 = ($1 + [-2])
	$6 = ($1 + [-1])
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	
.LOOP $label$7:
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$19 }
	$7 = ($4 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$20 }
	$0 = uint_32($0 >> [2])
	$8 = CALL $149($4, ($4 + $0), $7, ($7 + $0), $6, $2)
	goto $label$18 
	
.LABEL $label$20
	$0 = *($6)
	$9 = *($4)
	$10 = *($7)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$23 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$22 }
	*($4) = $0
	*($6) = $9
	$8 = [1]
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$23
	$8 = [0]
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$18 }
	*($7) = $0
	*($6) = $10
	$8 = [1]
	$10 = *($4)
	$0 = *($7)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$18 }
	*($4) = $0
	*($7) = $10
	goto $label$21 
	
.LABEL $label$22
	*($4) = $10
	*($7) = $9
	$8 = [1]
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$18 }
	*($7) = $0
	*($6) = $9
	
.LABEL $label$21
	$8 = [2]
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$0 = *($4 + [2])
	$9 = *($4)
	$10 = *($4 + [1])
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$29 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$28 }
	*($4) = $0
	*(($4 + [2])) = $9
	goto $label$27 
	
.LABEL $label$29
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$25 }
	*(($4 + [2])) = $10
	*(($11 = ($4 + [1]))) = $0
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$26 }
	*($4) = $0
	*($11) = $9
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$28
	*($4) = $10
	*(($10 = ($4 + [1]))) = $9
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$25 }
	*(($4 + [2])) = $9
	*($10) = $0
	
.LABEL $label$27
	$10 = $9
	
.LABEL $label$26
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$24 }
	goto $label$3 
	
.LABEL $label$25
	$10 = $0
	$12 = [3]
	$6 = ($4 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$24
	$7 = [0]
	
.LOOP $label$30:
	$11 = *($6)
	if ( ((int_32)$11 >= (int_32)int_32(($10 << [24]) >> [24])) ){ goto $label$31 }
	$0 = $7
	
.LOOP $label$34:
	*((($9 = ($4 + $0)) + $12)) = $10
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$33 }
	$0 = ($0 + [-1])
	$10 = *(($9 + [1]))
	if ( ((int_32)$11 < (int_32)$10) ){ goto $label$34 }
	$0 = (($4 + $0) + $12)
	goto $label$32 
	
.LABEL $label$33
	$0 = $4
	
.LABEL $label$32
	*($0) = $11
	
.LABEL $label$31
	$0 = ($6 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$3 }
	$7 = ($7 + [1])
	$10 = *($6)
	$6 = $0
	goto $label$30 
	
.LABEL $label$18
	$9 = *($7)
	$3 = *($4)
	if ( ((int_32)$3 >= (int_32)$9) ){ goto $label$16 }
	
.LABEL $label$17
	$10 = $6
	$3 = ($4 + [1])
	if ( ($3 <= $10) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$0 = $5
	
.LOOP $label$35:
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$14 }
	$10 = *($0)
	$11 = ($0 + [-1])
	$0 = $11
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$35 }
	*($4) = $10
	*(($10 = ($11 + [1]))) = $3
	$8 = ($8 + [1])
	$3 = ($4 + [1])
	if ( ((uint_32)$3 >= (uint_32)$10) ){ goto $label$13 }
	
.LABEL $label$15
	
.LOOP $label$36:
	$0 = ($3 + [-1])
	$9 = *($7)
	
.LOOP $label$37:
	$0 = ($0 + [1])
	$11 = *($0)
	if ( ((int_32)$11 < (int_32)$9) ){ goto $label$37 }
	$3 = ($0 + [1])
	
.LOOP $label$38:
	$10 = ($10 + [-1])
	$12 = *($10)
	if ( ((int_32)$12 >= (int_32)$9) ){ goto $label$38 }
	if ( ((uint_32)$0 > (uint_32)$10) ){ goto $label$39 }
	*($0) = $12
	*($10) = $11
	$7 = ( $10 ? $7 : ((int_32)$7 == (int_32)$0) )
	$8 = ($8 + [1])
	goto $label$36 
	
.LABEL $label$39
	$3 = $0
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$12 = ($4 + [1])
	$9 = *($6)
	if ( ((int_32)$3 < (int_32)$9) ){ goto $label$40 }
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$3 }
	$12 = ($4 + [2])
	
.LOOP $label$42:
	$0 = ($12 + [-1])
	$10 = *($0)
	if ( ((int_32)$3 < (int_32)$10) ){ goto $label$41 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$42 }
	goto $label$3 
	
.LABEL $label$41
	*($0) = $9
	*($6) = $10
	
.LABEL $label$40
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$43:
	$0 = ($12 + [-1])
	$10 = *($4)
	
.LOOP $label$44:
	$0 = ($0 + [1])
	$9 = *($0)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$44 }
	$12 = ($0 + [1])
	
.LOOP $label$45:
	$6 = ($6 + [-1])
	$11 = *($6)
	if ( ((int_32)$10 < (int_32)$11) ){ goto $label$45 }
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$46 }
	*($0) = $11
	*($6) = $9
	goto $label$43 
	
.LABEL $label$46
	$10 = ([4] & [7])
	if ( ((uint_32)$10 > (uint_32)[4]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$13
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$11 }
	
.LABEL $label$12
	$10 = *($3)
	$0 = *($7)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$11 }
	*($3) = $0
	*($7) = $10
	if ( ($8 + [1]) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$11
	if ( $8 ){ goto $label$9 }
	
.LABEL $label$10
	$10 = CALL $150($4, $3, $2)
	$0 = ($3 + [1])
	if ( CALL $150($0, $1, $2) ){ goto $label$6 }
	if ( $10 ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)($3 - $4) >= (int_32)($1 - $3)) ){ goto $label$2 }
	CALL $148($4, $3, $2)
	$0 = ($3 + [1])
	
.LABEL $label$8
	$4 = $0
	$0 = ($1 - $4)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$5 }
	goto $label$7 
	
.LABEL $label$6
	$1 = ( $1 ? $3 : $10 )
	$0 = $4
	$10 = (( [1] ? [2] : $10 ) & [7])
	if ( ((uint_32)$10 <= (uint_32)[4]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	goto $label$3 
	
.LABEL $label$59
	$9 = *($4)
	$0 = ($1 + [-1])
	$10 = *($0)
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$3 }
	*($4) = $10
	*($0) = $9
	return 
	
.LABEL $label$58
	$9 = ($1 + [-1])
	$0 = *($9)
	$11 = *($4)
	$10 = *($4 + [1])
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$55 }
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$53 }
	*($4) = $0
	*($9) = $11
	return 
	
.LABEL $label$57
	CALL $149($4, ($4 + [1]), ($4 + [2]), ($4 + [3]), ($1 + [-1]), $2)
	return 
	
.LABEL $label$56
	$11 = ($1 + [-1])
	$10 = *($4 + [2])
	$9 = *($4)
	$0 = *($4 + [1])
	if ( ((int_32)$0 >= (int_32)$9) ){ goto $label$54 }
	if ( ((int_32)$10 >= (int_32)$0) ){ goto $label$52 }
	*($4) = $10
	*(($4 + [2])) = $9
	goto $label$51 
	
.LABEL $label$55
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*(($11 = ($4 + [1]))) = $0
	*($9) = $10
	$10 = *($4)
	$0 = *($11)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*($4) = $0
	*($11) = $10
	return 
	
.LABEL $label$54
	if ( ((int_32)$10 >= (int_32)$0) ){ goto $label$50 }
	*(($4 + [2])) = $0
	*(($12 = ($4 + [1]))) = $10
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$48 }
	*($4) = $10
	*($12) = $9
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$53
	*($4) = $10
	*(($0 = ($4 + [1]))) = $11
	$10 = *($9)
	if ( ((int_32)$10 >= (int_32)$11) ){ goto $label$3 }
	*($0) = $10
	*($9) = $11
	return 
	
.LABEL $label$52
	*($4) = $0
	*(($0 = ($4 + [1]))) = $9
	if ( ((int_32)$10 >= (int_32)$9) ){ goto $label$49 }
	*(($4 + [2])) = $9
	*($0) = $10
	
.LABEL $label$51
	$0 = $9
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$50
	$0 = $10
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	goto $label$47 
	
.LABEL $label$49
	$0 = $10
	
.LABEL $label$48
	$12 = *($11)
	if ( ((int_32)$12 >= (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$47
	*(($10 = ($4 + [2]))) = $12
	*($11) = $0
	$9 = ($4 + [1])
	$11 = *($9)
	$0 = *($10)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$3 }
	*($10) = $11
	*($9) = $0
	$10 = *($4)
	if ( ((int_32)$0 >= (int_32)$10) ){ goto $label$3 }
	*($4) = $0
	*(($4 + [1])) = $10
	return 
	
.LABEL $label$4
	if ( (([1] << $10) & [21]) ){ goto $label$1 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	CALL $148(($3 + [1]), $1, $2)
	$1 = $3
	$0 = $4
	goto $label$1 
	$0
}

void .FUNC $145 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [9652])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([48])
	CALL $136($3)
	*($3 + [32]) = $1
	CALL $146(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)4982871454518345728
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)4982871454518345728
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $138(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10619])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $7($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9647])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [8])) = *(($5 + [8]))
	$6 = [16]
	$7 = ($1 + [16])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $140($7, *($5 + [16]), *(($5 + [20])))
	
.LABEL $label$1
	$8 = *($1 + [16])
	$5 = *(($1 + [20]))
	$9 = ($5 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[12]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$3 }
	$6 = ((((int_32)((uint_32)($9 + [-12]) / (uint_32)[12]) * (int_32)[12]) + $6) + [12])
	
.LABEL $label$3
	if ( ($6 <= [513]) ){ goto $label$5 }
	$5 = CALL $189($6)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [9703])
	CALL memcpy($5, $1, [8])
	*($3 + [24]) = *($1 + [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [9703])
	CALL memcpy(($5 + [8]), ($3 + [24]), [8])
	*($3 + [12]) = ($5 + [16])
	CALL $141(($3 + [8]), $7)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), (int_64)4982871454518345728, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)4982871454518345728) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $192($5)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)4982871454518345729
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [32])
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[12]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9703])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[3]), [9703])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $7, [4])
	$4 = (*($6) + [4])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[3]), [9703])
	CALL memcpy(*($6), ($7 + [4]), [4])
	$4 = (*($6) + [4])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[3]), [9703])
	CALL memcpy(*($6), ($7 + [8]), [4])
	$4 = (*($6) + [4])
	*($6) = $4
	$7 = ($7 + [12])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $140 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = ((int_32)$3 / (int_32)[12])
	if ( ((uint_32)$4 <= (uint_32)((int_32)($5 - $6) / (int_32)[12])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$1 }
	$6 = [357913941]
	$2 = ((int_32)$5 / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	
.LABEL $label$6
	$4 = ((int_32)$6 * (int_32)[12])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + ((int_32)((uint_32)$3 / (uint_32)[12]) * (int_32)[12]))
	goto $label$3 
	
.LABEL $label$4
	$3 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$7 = ( ($1 + ((int_32)$3 * (int_32)[12])) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$5 = ($7 - $1)
	$8 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $5)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[12]) * (int_32)[12]))
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + ((int_32)$8 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$1
	CALL $174($0)
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $144($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $164($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $164($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $159($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $142 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$6 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$1), [9573])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $73($1, $5)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$1), [9573])
	
.LABEL $label$5
	*($0) = *($5)
	$2 = *(($5 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$1 = (*(($5 + [20])) - *($5 + [16]))
	$3 = ((int_32)$1 / (int_32)[12])
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$1 = CALL _Znwj($1)
	*(($0 + [16])) = $1
	*(($0 + [24])) = ($1 + ((int_32)$3 * (int_32)[12]))
	*(($0 = ($0 + [20]))) = $1
	$3 = *(($5 + [16]))
	$5 = (*(($5 + [20])) - $3)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($1, $3, $5)
	*($0) = (*($0) + ((int_32)((uint_32)$5 / (uint_32)[12]) * (int_32)[12]))
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$4
	*($4 + [8]) = $3
	CALL $145($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$5 = (*(($1 + [20])) - *($1 + [16]))
	$3 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($0 + [16])) = $5
	*(($0 + [24])) = ($5 + ((int_32)$3 * (int_32)[12]))
	*(($0 = ($0 + [20]))) = $5
	$3 = *(($1 + [16]))
	$1 = (*(($1 + [20])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $3, $1)
	*($0) = (*($0) + ((int_32)((uint_32)$1 / (uint_32)[12]) * (int_32)[12]))
	
.LABEL $label$3
	$global$0 = ($4 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $174(($0 + [16]))
	
.LABEL $label$1
	CALL $174(($0 + [16]))
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [9573])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $73($0, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [9573])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9709])
	CALL $74($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $75($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9624])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $189($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [32]) = ($2 + $4)
	*($3 + [24]) = $2
	$5 = CALL _Znwj([48])
	CALL $136($5)
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9647])
	CALL memcpy($5, $2, [8])
	*($3 + [40]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9647])
	CALL memcpy(($3 + [40]), ($2 + [8]), [8])
	*($5 + [8]) = *($3 + [40])
	*($3 + [28]) = ($2 + [16])
	CALL $93(($3 + [24]), ($5 + [16]))
	*($5 + [36]) = $1
	*($3 + [16]) = $5
	*($3 + [40]) = (int_64)4982871454518345728
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)4982871454518345728
	*($7 + [16]) = $1
	*($3 + [16]) = [0]
	*($7) = $5
	*($6) = ($7 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $138(($0 + [24]), ($3 + [16]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $192($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [16])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [76])) == (int_32)$0), [10471])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [10516])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10566])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [80]))
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = [8966]
	*($2 + [20]) = CALL $186([8966])
	*($2 + [8]) = *($2 + [16])
	CALL require_auth(*(CALL $4(($2 + [24]), ($2 + [8]))))
	$3 = CALL $186([8352])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9004])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8351]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)$4), [8356])
	*(($0 + [216])) = *($1 + [8])
	*($0 + [208]) = *($1)
	CALL $72(($0 + [152]), ($0 + [208]), *($0))
	$global$0 = ($2 + [32])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = [8966]
	*($2 + [20]) = CALL $186([8966])
	*($2 + [8]) = *($2 + [16])
	CALL require_auth(*(CALL $4(($2 + [24]), ($2 + [8]))))
	CALL eosio_assert(((uint_32)*($1 + [8]) > (uint_32)*($1 + [4])), [8979])
	$3 = ($0 + [208])
	$4 = ($0 + [228])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)*(($0 + [232]))) ){ goto $label$2 }
	*($5) = *($1)
	*(($5 + [8])) = *(($1 + [8]))
	*($4) = (*($4) + [12])
	goto $label$1 
	
.LABEL $label$2
	CALL $77(($0 + [224]), $1)
	
.LABEL $label$1
	CALL $72(($0 + [152]), $3, *($0))
	$global$0 = ($2 + [32])
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 + ((int_32)((int_32)$1 / (int_32)[-12]) * (int_32)[12]))
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$4 = ($4 + [12])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9790])
	$6 = *($3)
	*($1) = *($6)
	*(($1 + [8])) = *(($6 + [8]))
	$3 = [16]
	$7 = ($1 + [16])
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$1 }
	CALL $140($7, *($6 + [16]), *(($6 + [20])))
	
.LABEL $label$1
	CALL eosio_assert([1], [9841])
	$8 = *($1 + [16])
	$6 = *(($1 + [20]))
	$9 = ($6 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[12]))
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$3 = ((((int_32)((uint_32)($9 + [-12]) / (uint_32)[12]) * (int_32)[12]) + $3) + [12])
	
.LABEL $label$3
	if ( ($3 <= [513]) ){ goto $label$5 }
	$6 = CALL $189($3)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$4
	*($5 + [8]) = $6
	*($5 + [16]) = ($6 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9703])
	CALL memcpy($6, $1, [8])
	*($5 + [24]) = *($1 + [8])
	CALL eosio_assert(((int_32)($3 + [-8]) > (int_32)[7]), [9703])
	CALL memcpy(($6 + [8]), ($5 + [24]), [8])
	*($5 + [12]) = ($6 + [16])
	CALL $141(($5 + [8]), $7)
	CALL db_update_i64(*($1 + [36]), $2, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($0 + [16]) <= (uint_64)(int_64)4982871454518345728) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $192($6)
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = (int_64)4982871454518345729
	$global$0 = ($5 + [32])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [32])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [9652])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([48])
	CALL $136($3)
	*($3 + [32]) = $1
	CALL $137(($4 + [16]), $3)
	*($4 + [32]) = $3
	*($4 + [16]) = (int_64)4982871454518345728
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = (int_64)4982871454518345728
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $138(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($1 + [20])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [16]) = [8966]
	*($2 + [20]) = CALL $186([8966])
	*($2 + [8]) = *($2 + [16])
	CALL require_auth(*(CALL $4(($2 + [24]), ($2 + [8]))))
	$3 = ($0 + [224])
	$4 = *($3)
	*($3) = *($1)
	*($1) = $4
	$3 = ($0 + [228])
	$4 = *($3)
	*($3) = *($1 + [4])
	*($1 + [4]) = $4
	$3 = ($0 + [232])
	$4 = *($3)
	*($3) = *($1 + [8])
	*($1 + [8]) = $4
	CALL $72(($0 + [152]), ($0 + [208]), *($0))
	$global$0 = ($2 + [32])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [288])
	$global$0 = $3
	CALL memory()
	*($3 + [272]) = [8859]
	*($3 + [276]) = CALL $186([8859])
	*($3 + [128]) = *($3 + [272])
	CALL $4(($3 + [280]), ($3 + [128]))
	$4 = [0]
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$2 }
	*($3 + [256]) = [8995]
	*($3 + [260]) = CALL $186([8995])
	*($3 + [120]) = *($3 + [256])
	CALL $4(($3 + [264]), ($3 + [120]))
	$4 = [1]
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [1]
	*($3 + [8]) = *($3 + [232])
	CALL $80($0, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	*($3 + [240]) = [8995]
	*($3 + [244]) = CALL $186([8995])
	*($3 + [112]) = *($3 + [240])
	CALL $4(($3 + [248]), ($3 + [112]))
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$1 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$1 }
	
.LABEL $label$3
	if ( ((int_64)$2 > (int_64)-3604186121715056641) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)-4992623616605552641) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-4994024803296870400) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-4994024802223128576) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4992623624440512512) ){ goto $label$1 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [2]
	*($3 + [24]) = *($3 + [224])
	CALL $81($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_64)$2 > (int_64)4923678863589618175) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-3604186121715056640) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)3626408465825529856) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4923678860143406976) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [3]
	*($3 + [64]) = *($3 + [184])
	CALL $81($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-4992623616605552640) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)-4417211294209179648) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4416979301228871680) ){ goto $label$1 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [4]
	*($3 + [16]) = *($3 + [136])
	CALL $82($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)4923678863589618176) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)4923678922967265280) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4923678927278486016) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [5]
	*($3 + [72]) = *($3 + [176])
	CALL $81($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [204]) = [0]
	*($3 + [200]) = [6]
	*($3 + [48]) = *($3 + [200])
	CALL $83($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [172]) = [0]
	*($3 + [168]) = [7]
	*($3 + [80]) = *($3 + [168])
	CALL $81($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [220]) = [0]
	*($3 + [216]) = [8]
	*($3 + [32]) = *($3 + [216])
	CALL $84($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [164]) = [0]
	*($3 + [160]) = [9]
	*($3 + [88]) = *($3 + [160])
	CALL $81($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [212]) = [0]
	*($3 + [208]) = [10]
	*($3 + [40]) = *($3 + [208])
	CALL $85($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [148]) = [0]
	*($3 + [144]) = [11]
	*($3 + [104]) = *($3 + [144])
	CALL $86($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [156]) = [0]
	*($3 + [152]) = [12]
	*($3 + [96]) = *($3 + [152])
	CALL $87($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [196]) = [0]
	*($3 + [192]) = [13]
	*($3 + [56]) = *($3 + [192])
	CALL $81($1, $1, ($3 + [56]))
	
.LABEL $label$1
	CALL $177([0])
	$global$0 = ($3 + [288])
}

int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*($0) = [0]
	*($3 + [16]) = [0]
	$1 = *(($3 + [8]))
	*($3 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $3
	$5 = ($3 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($3 + [16]) = $5
	$4 = *($3)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($3 + [28]) = *(($3 + [12]))
	CALL $100($0, ($3 + [16]))
	if ( (*((($3 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdaPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $94 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [272])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1 + [4])
	$6 = *($1)
	*($3 + [176]) = [0]
	$7 = *($2 + [8])
	*($3 + [184]) = $7
	$1 = ($6 & [1])
	$4 = ( $4 ? ($1 + [1]) : $1 )
	$1 = ($4 + ( $5 ? uint_32($6 >> [1]) : $1 ))
	if ( ((uint_32)$7 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($3 + [176])
	$5 = $2
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($7)
	*($3 + [176]) = $6
	$5 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $5, $7)
	*($3 + [188]) = *($2 + [12])
	$1 = CALL $96(($3 + [192]), $4, $1, ($3 + [176]))
	$2 = [0]
	*($3 + [232]) = [0]
	$7 = *($1)
	if ( ($7 == 0) ){ goto $label$3 }
	*($3 + [232]) = $7
	if ( ($7 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($3 + [232]) | [4])), (int_32 [0]), (int_32 *(($7 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($3 + [232]) + [12])) = *(($1 + [12]))
	*($3 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $7
	
.LABEL $label$3
	*($3 + [248]) = *($1 + [16 align=4])
	*($3 + [256]) = *($1 + [24 align=4])
	*($3 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$7 = ($1 + [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($3 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($3 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdaPv($1)
	
.LABEL $label$7
	*(($3 + [116])) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [96]) = [0]
	*($3 + [124]) = [0]
	*($3 + [128]) = [1]
	*($3 + [136]) = [0]
	*($3 + [160]) = (int_64)0
	*($3 + [168]) = [1]
	*($3 + [152]) = *($3 + [112])
	*($3 + [40]) = [0]
	$1 = [0]
	$2 = *($3 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($3 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($3 + [232]) | [4])((int_32 (($3 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($3 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($3 + [40]) + [12])) = *((($3 + [232]) + [12]))
	*($3 + [44 align=4]) = *($3 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($3) = [0]
	*($3 + [56]) = *((($3 + [232]) + [16]))
	*($3 + [64]) = *((($3 + [232]) + [24]))
	*($3 + [72]) = *((($3 + [232]) + [32]))
	if ( ($1 == 0) ){ goto $label$10 }
	*($3) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($3 + [136]) | [4])((int_32 ($3 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($3 + [12])) = *((($3 + [136]) + [12]))
	*($3 + [4 align=4]) = *($3 + [140 align=4])
	
.LABEL $label$10
	*($3 + [16]) = *((($3 + [136]) + [16]))
	*($3 + [24]) = *((($3 + [136]) + [24]))
	*($3 + [32]) = *((($3 + [136]) + [32]))
	$6 = CALL $97(($3 + [80]), ($3 + [40]), $3)
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($3 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($3) = [0]
	
.LABEL $label$12
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($3 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($3 + [40]) = [0]
	
.LABEL $label$14
	$7 = *($0)
	*($0) = *($6)
	*($6) = $7
	$8 = *($6 + [4 align=4])
	$2 = *($0 + [4])
	*($6 + [4]) = $2
	$1 = *($0 + [8])
	*($0 + [4 align=4]) = $8
	*($6 + [8]) = $1
	if ( ($7 == 0) ){ goto $label$16 }
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$1 = ($2 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$20
	$2 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	$1 = *($6)
	goto $label$17 
	
.LABEL $label$18
	$1 = $7
	
.LABEL $label$17
	*(($6 + [4])) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($3 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($3 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($3 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($3 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($3 + [232]) = [0]
	
.LABEL $label$23
	$global$0 = ($3 + [272])
	return $0
}

int_32 .FUNC $95 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [272])
	$global$0 = $3
	$4 = *($1 + [8])
	$5 = *($1 + [4])
	$6 = *($1)
	*($3 + [176]) = [0]
	$7 = *($2 + [8])
	*($3 + [184]) = $7
	$1 = ($6 & [1])
	$4 = ( $4 ? ($1 + [1]) : $1 )
	$1 = ($4 + ( $5 ? uint_32($6 >> [1]) : $1 ))
	if ( ((uint_32)$7 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($3 + [176])
	$5 = $2
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($7)
	*($3 + [176]) = $6
	$5 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $5, $7)
	*($3 + [188]) = *($2 + [12])
	$1 = CALL $106(($3 + [192]), $4, $1, ($3 + [176]))
	$2 = [0]
	*($3 + [232]) = [0]
	$7 = *($1)
	if ( ($7 == 0) ){ goto $label$3 }
	*($3 + [232]) = $7
	if ( ($7 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($3 + [232]) | [4])), (int_32 [0]), (int_32 *(($7 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($3 + [232]) + [12])) = *(($1 + [12]))
	*($3 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $7
	
.LABEL $label$3
	*($3 + [248]) = *($1 + [16 align=4])
	*($3 + [256]) = *($1 + [24 align=4])
	*($3 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$7 = ($1 + [4])
	CALL void $7((int_32 $7), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($3 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($3 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdaPv($1)
	
.LABEL $label$7
	*(($3 + [116])) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [96]) = [0]
	*($3 + [124]) = [0]
	*($3 + [128]) = [1]
	*($3 + [136]) = [0]
	*($3 + [160]) = (int_64)0
	*($3 + [168]) = [1]
	*($3 + [152]) = *($3 + [112])
	*($3 + [40]) = [0]
	$1 = [0]
	$2 = *($3 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($3 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($3 + [232]) | [4])((int_32 (($3 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($3 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($3 + [40]) + [12])) = *((($3 + [232]) + [12]))
	*($3 + [44 align=4]) = *($3 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($3) = [0]
	*($3 + [56]) = *((($3 + [232]) + [16]))
	*($3 + [64]) = *((($3 + [232]) + [24]))
	*($3 + [72]) = *((($3 + [232]) + [32]))
	if ( ($1 == 0) ){ goto $label$10 }
	*($3) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($3 + [136]) | [4])((int_32 ($3 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($3 + [12])) = *((($3 + [136]) + [12]))
	*($3 + [4 align=4]) = *($3 + [140 align=4])
	
.LABEL $label$10
	*($3 + [16]) = *((($3 + [136]) + [16]))
	*($3 + [24]) = *((($3 + [136]) + [24]))
	*($3 + [32]) = *((($3 + [136]) + [32]))
	$6 = CALL $107(($3 + [80]), ($3 + [40]), $3)
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($3 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($3) = [0]
	
.LABEL $label$12
	$1 = *($3 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($3 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($3 + [40]) = [0]
	
.LABEL $label$14
	$7 = *($0)
	*($0) = *($6)
	*($6) = $7
	$8 = *($6 + [4 align=4])
	$2 = *($0 + [4])
	*($6 + [4]) = $2
	$1 = *($0 + [8])
	*($0 + [4 align=4]) = $8
	*($6 + [8]) = $1
	if ( ($7 == 0) ){ goto $label$16 }
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$1 = ($2 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$20
	$2 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$19 }
	$1 = *($6)
	goto $label$17 
	
.LABEL $label$18
	$1 = $7
	
.LABEL $label$17
	*(($6 + [4])) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$16
	$1 = *($3 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($3 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($3 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($3 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($3 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($3 + [232]) = [0]
	
.LABEL $label$23
	$global$0 = ($3 + [272])
	return $0
}

int_32 .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [8]) = [0]
	$5 = *($3 + [8])
	*($4 + [16]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($4 + [8])
	$7 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4 + [8]) = $6
	$7 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	*($4 + [20]) = *($3 + [12])
	CALL $98($0, ($4 + [8]), [0])
	if ( (*(($4 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdaPv($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($4 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$2 = *($4 + [24])
	if ( ((int_32)$2 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$1 = *($4 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$1 = *($4 + [28])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$1) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $2
	$2 = ($0 + [24])
	*(($0 + [16])) = *($2)
	*($2) = $1
	
.LABEL $label$4
	$global$0 = ($4 + [32])
	return $0
}

int_32 .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$5 = ($3 | [1])
	$6 = ($1 + [16])
	$7 = ($1 + [20])
	$8 = ($3 + [8])
	$9 = ($1 + [28])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = [1]
	if ( *($1) ){ goto $label$2 }
	$14 = [1]
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$64 
	
.LABEL $label$65
	*($7) = $13
	*($6) = *($11)
	*($11) = $12
	$12 = [1]
	if ( (*($1) == 0) ){ goto $label$31 }
	$14 = [0]
	goto $label$3 
	
.LABEL $label$64
	$12 = ((int_32)*($10) != (int_32)[0])
	$14 = [1]
	goto $label$3 
	
.LABEL $label$63
	if ( (*($2) == 0) ){ goto $label$30 }
	$14 = [2]
	goto $label$3 
	
.LABEL $label$62
	$13 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($12 | $13) == (int_32)[1]) ){ goto $label$29 }
	$14 = [3]
	goto $label$3 
	
.LABEL $label$61
	$13 = *(($2 + [16]))
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	if ( ((int_32)$16 != (int_32)(*(($2 + [20])) - $13)) ){ goto $label$27 }
	$14 = [24]
	goto $label$3 
	
.LABEL $label$60
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$8 }
	$14 = [25]
	goto $label$3 
	
.LABEL $label$59
	$17 = $12
	$14 = [26]
	goto $label$3 
	
.LABEL $label$58
	if ( ((int_32)*($17) != (int_32)*($13)) ){ goto $label$26 }
	$14 = [27]
	goto $label$3 
	
.LABEL $label$57
	$13 = ($13 + [1])
	$17 = ($17 + [1])
	if ( ((int_32)$15 != (int_32)$17) ){ goto $label$7 }
	$14 = [28]
	goto $label$3 
	
.LABEL $label$56
	if ( ((int_32)*($11) != (int_32)*(($2 + [24]))) ){ goto $label$28 }
	$14 = [29]
	goto $label$3 
	
.LABEL $label$55
	if ( ((int_32)*($9) != (int_32)*(($2 + [28]))) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$54
	$13 = [1]
	$14 = [32]
	goto $label$3 
	
.LABEL $label$53
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$4 }
	$14 = [30]
	goto $label$3 
	
.LABEL $label$52
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	$14 = [4]
	goto $label$3 
	
.LABEL $label$51
	*($8) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$25 }
	$14 = [5]
	goto $label$3 
	
.LABEL $label$50
	if ( ((uint_32)$16 > (uint_32)[10]) ){ goto $label$24 }
	$14 = [22]
	goto $label$3 
	
.LABEL $label$49
	*($3) = ($16 << [1])
	$17 = $5
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$48
	$13 = (($16 + [16]) & [-16])
	$17 = CALL _Znwj($13)
	*($8) = $17
	*($3) = ($13 | [1])
	*($3 + [4]) = $16
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$23 }
	$14 = [7]
	goto $label$3 
	
.LABEL $label$47
	$13 = $17
	$14 = [8]
	goto $label$3 
	
.LABEL $label$46
	*($13) = *($12)
	$13 = ($13 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$20 }
	$14 = [9]
	goto $label$3 
	
.LABEL $label$45
	$17 = ($17 + $16)
	$14 = [10]
	goto $label$3 
	
.LABEL $label$44
	*($17) = [0]
	$12 = ($0 + [4])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [8]))) ){ goto $label$19 }
	$14 = [21]
	goto $label$3 
	
.LABEL $label$43
	*($13) = *($3)
	*(($13 + [8])) = *($8)
	*($8) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	$12 = *($9)
	$13 = *($1)
	if ( $13 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$42
	CALL $99($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	$14 = [12]
	goto $label$3 
	
.LABEL $label$41
	CALL _ZdlPv(*($8))
	$14 = [13]
	goto $label$3 
	
.LABEL $label$40
	$12 = *($9)
	$13 = *($1)
	if ( ($13 == 0) ){ goto $label$17 }
	$14 = [14]
	goto $label$3 
	
.LABEL $label$39
	CALL void $3((int_32 $4), (int_32 *($11)), (int_32 $12), (int_32 *(($13 & [-2]) + [4])))
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)*($9)) ){ goto $label$14 }
	$14 = [15]
	goto $label$3 
	
.LABEL $label$38
	$12 = *($3 + [4])
	goto $label$13 
	
.LABEL $label$37
	*($3 + [4]) = $12
	*($3) = $12
	$13 = $12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$36
	if ( ((int_32)*($7) != (int_32)$13) ){ goto $label$9 }
	$14 = [19]
	goto $label$3 
	
.LABEL $label$35
	*($10) = [1]
	goto $label$10 
	
.LABEL $label$34
	$12 = *($3 + [4])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$33
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$32
	CALL $159($3)
	
.LABEL $label$31
	$14 = [1]
	goto $label$3 
	
.LABEL $label$30
	$14 = [33]
	goto $label$3 
	
.LABEL $label$29
	$14 = [32]
	goto $label$3 
	
.LABEL $label$28
	$14 = [4]
	goto $label$3 
	
.LABEL $label$27
	$14 = [4]
	goto $label$3 
	
.LABEL $label$26
	$14 = [4]
	goto $label$3 
	
.LABEL $label$25
	$14 = [23]
	goto $label$3 
	
.LABEL $label$24
	$14 = [6]
	goto $label$3 
	
.LABEL $label$23
	$14 = [10]
	goto $label$3 
	
.LABEL $label$22
	$14 = [10]
	goto $label$3 
	
.LABEL $label$21
	$14 = [7]
	goto $label$3 
	
.LABEL $label$20
	$14 = [8]
	goto $label$3 
	
.LABEL $label$19
	$14 = [11]
	goto $label$3 
	
.LABEL $label$18
	$14 = [13]
	goto $label$3 
	
.LABEL $label$17
	$14 = [20]
	goto $label$3 
	
.LABEL $label$16
	$14 = [20]
	goto $label$3 
	
.LABEL $label$15
	$14 = [14]
	goto $label$3 
	
.LABEL $label$14
	$14 = [17]
	goto $label$3 
	
.LABEL $label$13
	$14 = [16]
	goto $label$3 
	
.LABEL $label$12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$11
	$14 = [16]
	goto $label$3 
	
.LABEL $label$10
	$14 = [16]
	goto $label$3 
	
.LABEL $label$9
	$14 = [16]
	goto $label$3 
	
.LABEL $label$8
	$14 = [28]
	goto $label$3 
	
.LABEL $label$7
	$14 = [26]
	goto $label$3 
	
.LABEL $label$6
	$14 = [31]
	goto $label$3 
	
.LABEL $label$5
	$14 = [30]
	goto $label$3 
	
.LABEL $label$4
	$14 = [31]
	goto $label$3 
	$14
	return (unreachable)
}

int_32 .FUNC $90 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [224]))
	if ( ($1 == 0) ){ goto $label$1 }
	*(($0 + [228])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$2 = *(($0 + [176]))
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = ($0 + [180])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$5 }
	$1 = *(($0 + [176]))
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	
.LABEL $label$3
	*($3) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$2
	$5 = *(($0 + [136]))
	if ( ($5 == 0) ){ goto $label$8 }
	$2 = ($0 + [140])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$11 }
	$1 = *(($0 + [136]))
	goto $label$9 
	
.LABEL $label$10
	$1 = $5
	
.LABEL $label$9
	*($2) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$5 = *(($0 + [96]))
	if ( ($5 == 0) ){ goto $label$13 }
	$2 = ($0 + [100])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	CALL _ZdlPv($4)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$16 }
	$1 = *(($0 + [96]))
	goto $label$14 
	
.LABEL $label$15
	$1 = $5
	
.LABEL $label$14
	*($2) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$5 = *(($0 + [56]))
	if ( ($5 == 0) ){ goto $label$18 }
	$2 = ($0 + [60])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$20 }
	
.LOOP $label$21:
	$1 = ($1 + [-24])
	$4 = *($1)
	*($1) = [0]
	if ( ($4 == 0) ){ goto $label$22 }
	CALL _ZdlPv($4)
	
.LABEL $label$22
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$21 }
	$1 = *(($0 + [56]))
	goto $label$19 
	
.LABEL $label$20
	$1 = $5
	
.LABEL $label$19
	*($2) = $5
	CALL _ZdlPv($1)
	
.LABEL $label$18
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [10619])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$4 = (CASTING uint_32)(uint_64 $5)
	$8 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $8) >> [5])
	if ( ((uint_32)$7 >= (uint_32)$4) ){ goto $label$4 }
	CALL $47($1, ($4 - $7))
	$3 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 <= (uint_32)$4) ){ goto $label$5 }
	$3 = ($8 + ($4 << [5]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	*($2 + [8]) = $0
	*($2 + [16]) = $8
	*((($2 + [16]) + [8])) = ($8 + [24])
	*($2 + [20]) = ($8 + [8])
	CALL $147(($2 + [16]), ($2 + [8]))
	$8 = ($8 + [32])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $143(*($1), *($0 + [8]))
	CALL $143(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10619])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = ((int_32)($5 - $2) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $139($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ((int_32)$7 * (int_32)[12]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$6 = *($7)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[3]), [9647])
	CALL memcpy($2, *($7), [4])
	$6 = (*($7) + [4])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[3]), [9647])
	CALL memcpy(($2 + [4]), *($7), [4])
	$6 = (*($7) + [4])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[3]), [9647])
	CALL memcpy(($2 + [8]), *($7), [4])
	$6 = (*($7) + [4])
	*($7) = $6
	$2 = ($2 + [12])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [16])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[12])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$3 }
	$3 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[12]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [8])) = [0]
	$3 = (*($0) + [12])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[12]))
	$5 = ($2 + ((int_32)$5 * (int_32)[12]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [8])) = [0]
	$3 = ($3 + [12])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[12]))
	$1 = *($0)
	$7 = ($0 + [4])
	$3 = (*($7) - $1)
	$2 = ($5 + ((int_32)((int_32)$3 / (int_32)[-12]) * (int_32)[12]))
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9647])
	CALL memcpy($0, *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $131 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [56]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10220])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4406680309660123136)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [10166])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10166])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $53(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $120(*($1), *($0 + [8]))
	CALL $120(*($1), *($0 + [12]))
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [16]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9703])
	CALL memcpy(*($6), ($2 + [16]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	*($2 + [8]) = $0
	*($2 + [16]) = $6
	*((($2 + [16]) + [8])) = ($6 + [24])
	*($2 + [20]) = ($6 + [8])
	CALL $135(($2 + [16]), ($2 + [8]))
	$6 = ($6 + [32])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [32])
	return $0
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$1 = CALL $186([8352])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9004])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($1 + [8351]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [8]) = $2
	*($0) = (int_64)0
	CALL eosio_assert([1], [10048])
	$2 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$11 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [10097])
	*(($0 + [24])) = [0]
	*($0 + [16 align=4]) = (int_64)0
	return $0
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	*($1) = *($5)
	*(($1 + [8])) = *(($5 + [8]))
	$6 = [16]
	$7 = ($1 + [16])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$1 }
	CALL $140($7, *($5 + [16]), *(($5 + [20])))
	
.LABEL $label$1
	$8 = *($1 + [16])
	$5 = *(($1 + [20]))
	$9 = ($5 - $8)
	$10 = (CASTING uint_64)(uint_32 ((int_32)$9 / (int_32)[12]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$3 }
	$6 = ((((int_32)((uint_32)($9 + [-12]) / (uint_32)[12]) * (int_32)[12]) + $6) + [12])
	
.LABEL $label$3
	if ( ($6 <= [513]) ){ goto $label$5 }
	$5 = CALL $189($6)
	goto $label$4 
	
.LABEL $label$5
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	
.LABEL $label$4
	*($3 + [8]) = $5
	*($3 + [16]) = ($5 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [9703])
	CALL memcpy($5, $1, [8])
	*($3 + [24]) = *($1 + [8])
	CALL eosio_assert(((int_32)($6 + [-8]) > (int_32)[7]), [9703])
	CALL memcpy(($5 + [8]), ($3 + [24]), [8])
	*($3 + [12]) = ($5 + [16])
	CALL $141(($3 + [8]), $7)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)4982871454518345728, *(*($0 + [8])), (int_64)4982871454518345728, $5, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($4 + [16]) <= (uint_64)(int_64)4982871454518345728) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $192($5)
	if ( ((uint_64)*($4 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = (int_64)4982871454518345729
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [32])
}

void .FUNC $181 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9647])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9647])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $120(*($1), *($0))
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($3 + [24]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	*($2 + [8]) = *(($3 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $120(*($1), ($3 + [40]))
	$global$0 = ($2 + [16])
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $7($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9703])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9703])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $119(CALL $118($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9624])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $189($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9647])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9647])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $122(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $192($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9703])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9703])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_64 $19
	int_64 $20
	$5 = ($global$0 - [368])
	$global$0 = $5
	*(($5 + [328])) = [0]
	*($5 + [320]) = (int_64)0
	*($5 + [320]) = [10]
	$6 = (($5 + [320]) | [1])
	CALL memcpy($6, [8209], [5])
	*($5 + [326]) = [0]
	$7 = *($0)
	if ( ((int_64)*($1) == (int_64)$7) ){ goto $label$1 }
	if ( ((int_64)*($2) != (int_64)$7) ){ goto $label$1 }
	$8 = ($4 + [1])
	$9 = *($4)
	$10 = ($9 & [1])
	$11 = *($4 + [8])
	$12 = *($5 + [328])
	$16 = ($14 & [1])
	$14 = *($5 + [320])
	$15 = uint_32($14 >> [1])
	$13 = *($5 + [324])
	$14 = ( $13 ? $15 : $16 )
	if ( ($14 == 0) ){ goto $label$2 }
	$13 = ( *($4 + [4]) ? uint_32($9 >> [1]) : $10 )
	if ( ((int_32)$13 < (int_32)$14) ){ goto $label$1 }
	$15 = ( $11 ? $8 : $10 )
	$11 = ($15 + $13)
	$16 = ( $12 ? $6 : $16 )
	$9 = *($16)
	$10 = $15
	
.LOOP $label$3:
	$13 = (($13 - $14) + [1])
	if ( ($13 == 0) ){ goto $label$1 }
	$13 = CALL $184($10, $9, $13)
	if ( ($13 == 0) ){ goto $label$1 }
	if ( (CALL $185($13, $16, $14) == 0) ){ goto $label$4 }
	$10 = ($13 + [1])
	$13 = ($11 - $10)
	if ( ((int_32)$13 >= (int_32)$14) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$13 == (int_32)$11) ){ goto $label$1 }
	if ( ((int_32)($13 - $15) == (int_32)[-1]) ){ goto $label$1 }
	$14 = *($5 + [320])
	$15 = uint_32($14 >> [1])
	$16 = ($14 & [1])
	$9 = *($4)
	$10 = ($9 & [1])
	$11 = *(($4 + [8]))
	$12 = *((($5 + [320]) + [8]))
	$13 = *($5 + [324])
	
.LABEL $label$2
	$17 = [0]
	$14 = [0]
	$13 = ( $13 ? $15 : $16 )
	if ( ($13 == 0) ){ goto $label$5 }
	$14 = ( *($4 + [4]) ? uint_32($9 >> [1]) : $10 )
	$15 = ( $11 ? $8 : $10 )
	$9 = ($15 + $14)
	if ( ((int_32)$14 < (int_32)$13) ){ goto $label$7 }
	$16 = ( $12 ? $6 : $16 )
	$11 = *($16)
	$10 = $15
	
.LOOP $label$8:
	$14 = (($14 - $13) + [1])
	if ( ($14 == 0) ){ goto $label$7 }
	$14 = CALL $184($10, $11, $14)
	if ( ($14 == 0) ){ goto $label$7 }
	if ( (CALL $185($14, $16, $13) == 0) ){ goto $label$6 }
	$10 = ($14 + [1])
	$14 = ($9 - $10)
	if ( ((int_32)$14 >= (int_32)$13) ){ goto $label$8 }
	
.LABEL $label$7
	$14 = $9
	
.LABEL $label$6
	$14 = ( [-1] ? ($14 - $15) : ((int_32)$14 == (int_32)$9) )
	
.LABEL $label$5
	$16 = CALL $161(($5 + [304]), $4, [0], ($14 + [5]), $4)
	$10 = ($14 & [1])
	$14 = *($5 + [320])
	$13 = ( *($5 + [324]) ? uint_32($14 >> [1]) : $10 )
	if ( ($13 == 0) ){ goto $label$9 }
	$14 = ( *($4 + [4]) ? uint_32($14 >> [1]) : $9 )
	$14 = *($4)
	$9 = ($14 & [1])
	$8 = ( *(($4 + [8])) ? $8 : $9 )
	$9 = ($8 + $14)
	if ( ((int_32)$14 < (int_32)$13) ){ goto $label$11 }
	$11 = ( *((($5 + [320]) + [8])) ? $6 : $10 )
	$6 = *($11)
	$10 = $8
	
.LOOP $label$12:
	$14 = (($14 - $13) + [1])
	if ( ($14 == 0) ){ goto $label$11 }
	$14 = CALL $184($10, $6, $14)
	if ( ($14 == 0) ){ goto $label$11 }
	if ( (CALL $185($14, $11, $13) == 0) ){ goto $label$10 }
	$10 = ($14 + [1])
	$14 = ($9 - $10)
	if ( ((int_32)$14 >= (int_32)$13) ){ goto $label$12 }
	
.LABEL $label$11
	$14 = $9
	
.LABEL $label$10
	$17 = ( [-1] ? ($14 - $8) : ((int_32)$14 == (int_32)$9) )
	
.LABEL $label$9
	$4 = *($5 + [288])
	$10 = CALL $161(($5 + [288]), $4, ($17 + [5]), [-1], $4)
	CALL eosio_assert((( *($10 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) <= [91]), [8301])
	$4 = *($5 + [288])
	CALL eosio_assert(((int_32)( *($10 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ) != (int_32)[0]), [8314])
	CALL require_auth(*($1))
	CALL eosio_assert(((int_64)*($1) != (int_64)*($2)), [8328])
	$4 = CALL $186([8352])
	if ( ($4 <= [8]) ){ goto $label$16 }
	CALL eosio_assert([0], [9004])
	goto $label$15 
	
.LABEL $label$16
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	$7 = (int_64)0
	
.LOOP $label$17:
	$14 = *(($4 + [8351]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$18 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$18
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$17 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$13 
	
.LABEL $label$14
	$7 = (int_64)0
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)((int_64)$7 | (int_64)4)), [8356])
	$14 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$19 }
	$7 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$18 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$7 = $18
	$14 = [1]
	$13 = $4
	$4 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$7 = $18
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$14 = ((int_32)$4 < (int_32)[6])
	$13 = ($4 + [1])
	$4 = $13
	if ( $14 ){ goto $label$23 }
	$14 = [1]
	$4 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$14 = [0]
	
.LABEL $label$19
	CALL eosio_assert($14, [8371])
	CALL eosio_assert(((int_64)*($3) > (int_64)999), [8394])
	*($5 + [280]) = [0]
	*($5 + [272]) = (int_64)0
	*($5 + [264]) = (int_64)-1
	*($5 + [256]) = (int_64)0
	CALL $3($0, $16, ($5 + [272]), ($5 + [264]), ($5 + [256]))
	$7 = *($0)
	*($5 + [200]) = [8429]
	*($5 + [204]) = CALL $186([8429])
	*($5 + [24]) = *($5 + [200])
	$4 = CALL $4(($5 + [208]), ($5 + [24]))
	$18 = *($0)
	*($5 + [128]) = (int_64)1
	$13 = ($0 + [32])
	*($5 + [128]) = ((int_64)CALL $5($13, $18, ($5 + [128])) + (int_64)1)
	CALL $6($13, ($5 + [128]), *($0))
	CALL $173(($5 + [48]), *($5 + [128]))
	$14 = (($5 + [48]) + [8])
	*((($5 + [128]) + [8])) = *($14)
	*($14) = [0]
	*((($5 + [128]) + [32])) = *(($3 + [8]))
	*($5 + [128]) = *($5 + [48])
	*($5 + [48]) = (int_64)0
	*($5 + [144]) = *($1)
	*($5 + [152]) = *($3)
	$14 = CALL $160(($5 + [168]), ($5 + [272]))
	*(($2 = (($5 + [216]) + [24]))) = [0]
	*($5 + [224]) = (int_64)-7807376982139731968
	*($5 + [232]) = (int_64)0
	*($5 + [216]) = *($4)
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = (int_64)3617214756542218240
	*(($5 + [252])) = [0]
	$6 = ($4 + [16])
	*($2) = $6
	*(($5 + [236])) = $6
	*($5 + [232]) = $4
	*($5 + [244 align=4]) = (int_64)0
	$4 = *($5 + [128])
	$2 = ( *($5 + [132]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($2 + [24])
	$7 = (CASTING uint_64)(uint_32 $2)
	$2 = ($5 + [244])
	
.LOOP $label$24:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$24 }
	$14 = *($14)
	$14 = ( *(($5 + [172])) ? uint_32($14 >> [1]) : ($14 & [1]) )
	$4 = ($14 + $4)
	$7 = (CASTING uint_64)(uint_32 $14)
	
.LOOP $label$25:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$25 }
	if ( ($4 == 0) ){ goto $label$27 }
	CALL $7($2, $4)
	$14 = *(($5 + [248]))
	$4 = *(($5 + [244]))
	goto $label$26 
	
.LABEL $label$27
	$14 = [0]
	$4 = [0]
	
.LABEL $label$26
	*($5 + [92]) = $4
	*($5 + [88]) = $4
	*($5 + [96]) = $14
	*($5 + [360]) = ($5 + [88])
	*($5 + [336]) = ($5 + [128])
	CALL $8(($5 + [336]), ($5 + [360]))
	CALL $9(($5 + [88]), ($5 + [216]))
	$4 = *($5 + [88])
	CALL send_inline($4, (*($5 + [92]) - $4))
	$4 = *($5 + [88])
	if ( ($4 == 0) ){ goto $label$28 }
	*($5 + [92]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$28
	$4 = *($5 + [244])
	if ( ($4 == 0) ){ goto $label$29 }
	*(($5 + [248])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$29
	$4 = *($5 + [232])
	if ( ($4 == 0) ){ goto $label$30 }
	*(($5 + [236])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$30
	if ( (*($5 + [168]) & [1]) ){ goto $label$35 }
	if ( (*($5 + [128]) & [1]) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	CALL _ZdlPv(*(($5 + [176])))
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	CALL _ZdlPv(*($5 + [136]))
	if ( (*($5 + [48]) & [1]) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$31
	$4 = CALL $186([8352])
	if ( ($4 <= [8]) ){ goto $label$39 }
	CALL eosio_assert([0], [9004])
	goto $label$38 
	
.LABEL $label$39
	if ( ($4 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	$7 = (int_64)0
	
.LOOP $label$40:
	$14 = *(($4 + [8351]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$41 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$41
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$40 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$36 
	
.LABEL $label$37
	$7 = (int_64)0
	
.LABEL $label$36
	if ( ((int_64)*(($3 + [8])) != (int_64)((int_64)$7 | (int_64)4)) ){ goto $label$42 }
	if ( ((int_64)*($5 + [264]) <= (int_64)-1) ){ goto $label$43 }
	$7 = *($0)
	*($5 + [128]) = (int_64)1
	*($5 + [128]) = ((int_64)CALL $5($13, $7, ($5 + [128])) + (int_64)1)
	CALL $6($13, ($5 + [128]), *($0))
	CALL $173(($5 + [48]), *($5 + [128]))
	*(($14 = ($5 + [240]))) = [0]
	$4 = (($5 + [48]) + [8])
	*((($5 + [128]) + [8])) = *($4)
	*($4) = [0]
	*((($5 + [128]) + [32])) = *(($3 + [8]))
	*($5 + [216]) = (int_64)-3605821319201630400
	*($5 + [224]) = (int_64)-5003134543285190656
	*($5 + [232]) = (int_64)0
	*($5 + [128]) = *($5 + [48])
	*($5 + [48]) = (int_64)0
	*($5 + [144]) = *($5 + [264])
	*($5 + [152]) = *($3)
	*($5 + [168]) = *($0 + [200])
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = (int_64)3617214756542218240
	*(($5 + [252])) = [0]
	$2 = ($4 + [16])
	*($14) = $2
	*(($5 + [236])) = $2
	*($5 + [232]) = $4
	*($5 + [244 align=4]) = (int_64)0
	$4 = *($5 + [128])
	$14 = ( *($5 + [132]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($14 + [32])
	$7 = (CASTING uint_64)(uint_32 $14)
	$14 = ($5 + [244])
	
.LOOP $label$44:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$44 }
	if ( ($4 == 0) ){ goto $label$46 }
	CALL $7($14, $4)
	$14 = *(($5 + [248]))
	$4 = *(($5 + [244]))
	goto $label$45 
	
.LABEL $label$46
	$14 = [0]
	$4 = [0]
	
.LABEL $label$45
	*($5 + [92]) = $4
	*($5 + [88]) = $4
	*($5 + [96]) = $14
	*($5 + [360]) = ($5 + [88])
	*($5 + [336]) = ($5 + [128])
	CALL $10(($5 + [336]), ($5 + [360]))
	CALL $9(($5 + [88]), ($5 + [216]))
	$4 = *($5 + [88])
	CALL send_inline($4, (*($5 + [92]) - $4))
	$4 = *($5 + [88])
	if ( ($4 == 0) ){ goto $label$47 }
	*($5 + [92]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$47
	$4 = *($5 + [244])
	if ( ($4 == 0) ){ goto $label$48 }
	*(($5 + [248])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$48
	$4 = *($5 + [232])
	if ( ($4 == 0) ){ goto $label$49 }
	*(($5 + [236])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$49
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($5 + [136]))
	
.LABEL $label$50
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$43
	$7 = *($0)
	*($5 + [128]) = (int_64)1
	*($5 + [128]) = ((int_64)CALL $5($13, $7, ($5 + [128])) + (int_64)1)
	CALL $6($13, ($5 + [128]), *($0))
	CALL $173(($5 + [48]), *($5 + [128]))
	*(($14 = ($5 + [240]))) = [0]
	$4 = (($5 + [48]) + [8])
	*((($5 + [128]) + [8])) = *($4)
	*($4) = [0]
	*((($5 + [128]) + [32])) = *(($3 + [8]))
	*($5 + [216]) = (int_64)-3605821319201630400
	*($5 + [224]) = (int_64)-3617370165638856704
	*($5 + [232]) = (int_64)0
	*($5 + [128]) = *($5 + [48])
	*($5 + [48]) = (int_64)0
	*($5 + [144]) = *($1)
	*($5 + [152]) = *($3)
	*($5 + [168]) = *(($0 + [200]))
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = (int_64)3617214756542218240
	*(($5 + [252])) = [0]
	$13 = ($4 + [16])
	*($14) = $13
	*(($5 + [236])) = $13
	*($5 + [232]) = $4
	*($5 + [244 align=4]) = (int_64)0
	$4 = *($5 + [128])
	$14 = ( *($5 + [132]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($14 + [32])
	$7 = (CASTING uint_64)(uint_32 $14)
	$14 = ($5 + [244])
	
.LOOP $label$51:
	$4 = ($4 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$51 }
	if ( ($4 == 0) ){ goto $label$53 }
	CALL $7($14, $4)
	$14 = *(($5 + [248]))
	$4 = *(($5 + [244]))
	goto $label$52 
	
.LABEL $label$53
	$14 = [0]
	$4 = [0]
	
.LABEL $label$52
	*($5 + [92]) = $4
	*($5 + [88]) = $4
	*($5 + [96]) = $14
	*($5 + [360]) = ($5 + [88])
	*($5 + [336]) = ($5 + [128])
	CALL $11(($5 + [336]), ($5 + [360]))
	CALL $9(($5 + [88]), ($5 + [216]))
	$4 = *($5 + [88])
	CALL send_inline($4, (*($5 + [92]) - $4))
	$4 = *($5 + [88])
	if ( ($4 == 0) ){ goto $label$54 }
	*($5 + [92]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$54
	$4 = *($5 + [244])
	if ( ($4 == 0) ){ goto $label$55 }
	*(($5 + [248])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$55
	$4 = *($5 + [232])
	if ( ($4 == 0) ){ goto $label$56 }
	*(($5 + [236])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$56
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*($5 + [136]))
	
.LABEL $label$57
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($5 + [56])))
	
.LABEL $label$42
	$7 = *($5 + [256])
	if ( (int_64)($7 == 0) ){ goto $label$62 }
	CALL eosio_assert(CALL $fimport$4($7), [8442])
	CALL eosio_assert(((int_64)*($5 + [256]) != (int_64)*($1)), [8472])
	$7 = *($3)
	CALL __multi3(($5 + [8]), $7, (int_64)$7 >> (int_64)63), (int_64)3, (int_64)0)
	$4 = ($3 + [8])
	$19 = *($4)
	$7 = *((($5 + [8]) + [8]))
	$18 = *($5 + [8])
	CALL eosio_assert(( (uint_64)($18 <= (int_64)4611686018427387904) ? ((int_64)$7 < (int_64)0) : (int_64)($7 == 0) ), [9940])
	CALL eosio_assert(( ((uint_64)$18 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$7 > (int_64)-1) : ((int_64)$7 == (int_64)-1) ), [9964])
	*($5 + [136]) = $19
	CALL eosio_assert([1], [9900])
	CALL eosio_assert([1], [9915])
	*($5 + [128]) = ((int_64)$18 / (int_64)1000)
	$19 = *($4)
	CALL eosio_assert([1], [10048])
	$7 = (uint_64)$19 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$65:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$64 }
	$18 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$66 }
	$7 = $18
	$14 = [1]
	$13 = $4
	$4 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$66
	$7 = $18
	
.LOOP $label$67:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$64 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$14 = ((int_32)$4 < (int_32)[6])
	$13 = ($4 + [1])
	$4 = $13
	if ( $14 ){ goto $label$67 }
	$14 = [1]
	$4 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$64
	$14 = [0]
	
.LABEL $label$63
	CALL eosio_assert($14, [10097])
	CALL eosio_assert(((int_64)*((($5 + [128]) + [8])) == (int_64)$19), [9989])
	if ( ((int_64)*($5 + [128]) < (int_64)1) ){ goto $label$62 }
	*((($5 + [88]) + [8])) = [0]
	*($5 + [88]) = (int_64)0
	$4 = CALL $186([8501])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$61 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$70 }
	*($5 + [88]) = ($4 << [1])
	$14 = (($5 + [88]) | [1])
	if ( $4 ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$13 = (($4 + [16]) & [-16])
	$14 = CALL _Znwj($13)
	*($5 + [88]) = ($13 | [1])
	*($5 + [96]) = $14
	*($5 + [92]) = $4
	
.LABEL $label$69
	CALL memcpy($14, [8501], $4)
	
.LABEL $label$68
	*(($14 + $4)) = [0]
	$4 = *($5 + [272])
	$14 = ($4 & [1])
	$4 = CALL $169(($5 + [88]), ( *((($5 + [272]) + [8])) ? (($5 + [272]) | [1]) : $14 ), ( *($5 + [276]) ? uint_32($4 >> [1]) : $14 ))
	$14 = ($4 + [8])
	*((($5 + [216]) + [8])) = *($14)
	*($5 + [216]) = *($4)
	*($4) = (int_64)0
	*($14) = [0]
	if ( ((*($5 + [88]) & [1]) == 0) ){ goto $label$71 }
	CALL _ZdlPv(*($5 + [96]))
	
.LABEL $label$71
	CALL $12($0, ($5 + [256]), ($5 + [128]), ($5 + [216]))
	if ( ((*($5 + [216]) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*($5 + [224]))
	
.LABEL $label$62
	$14 = ($0 + [72])
	*($5 + [192]) = $14
	$13 = ($0 + [192])
	CALL $13(($5 + [128]), ($5 + [192]), $13)
	$4 = *($5 + [132])
	if ( ($4 == 0) ){ goto $label$72 }
	$13 = ($4 + [8])
	if ( ((int_64)*($13) != (int_64)*($13)) ){ goto $label$72 }
	$18 = *($4 + [16])
	CALL eosio_assert([1], [9709])
	$14 = *($5 + [192])
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$14), [9744])
	CALL eosio_assert(((int_64)*($14) == (int_64)CALL $fimport$6()), [9790])
	*($5 + [336]) = *($13)
	$7 = *($4)
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*(($4 + [24]))), [10268])
	$19 = ((int_64)*($4 + [16]) + (int_64)*($3))
	*($4 + [16]) = $19
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [10311])
	CALL eosio_assert(((int_64)*($4 + [16]) < (int_64)4611686018427387904), [10330])
	CALL eosio_assert(((int_64)$7 == (int_64)*($4)), [9841])
	*($5 + [96]) = (($5 + [128]) + [49])
	*($5 + [92]) = ($5 + [128])
	*($5 + [88]) = ($5 + [128])
	*($5 + [48]) = ($5 + [88])
	*($5 + [220]) = $13
	*($5 + [216]) = $4
	*($5 + [224]) = ($4 + [16])
	*($5 + [228]) = ($4 + [32])
	*($5 + [232]) = ($4 + [48])
	CALL $14(($5 + [216]), ($5 + [48]))
	CALL db_update_i64(*($4 + [56]), (int_64)0, ($5 + [128]), [49])
	if ( (uint_64)($7 <= *($14 + [16])) ){ goto $label$73 }
	*(($14 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$73
	*($5 + [216]) = *($13)
	if ( (CALL $185(($5 + [336]), ($5 + [216]), [8]) == 0) ){ goto $label$74 }
	$13 = *($4 + [60])
	if ( ((int_32)$13 > (int_32)[-1]) ){ goto $label$75 }
	$13 = CALL db_idx64_find_primary(*($14), *($14 + [8]), (int_64)4406680309660123136, ($5 + [48]), $7)
	*(($4 + [60])) = $13
	
.LABEL $label$75
	CALL db_idx64_update($13, (int_64)0, ($5 + [216]))
	
.LABEL $label$74
	$7 = ((int_64)$18 + (int_64)1)
	goto $label$58 
	
.LABEL $label$72
	CALL $15(($5 + [128]), $0, *($0 + [200]))
	$7 = *($0)
	*($5 + [92]) = $3
	*($5 + [88]) = $0
	*($5 + [96]) = ($5 + [128])
	*($5 + [48]) = $7
	CALL eosio_assert(((int_64)*($14) == (int_64)CALL $fimport$6()), [9652])
	*($5 + [216]) = $14
	*($5 + [220]) = ($5 + [88])
	*($5 + [224]) = ($5 + [48])
	*(($4 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = [0]
	*($4 + [52]) = $14
	CALL $16(($5 + [216]), $4)
	*($5 + [336]) = $4
	$7 = *($4)
	*($5 + [216]) = $7
	$13 = *($4 + [56])
	*($5 + [360]) = $13
	$2 = ($0 + [100])
	$14 = *($2)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [104]))) ){ goto $label$76 }
	*($14 + [8]) = $7
	*($14 + [16]) = $13
	*($5 + [336]) = [0]
	*($14) = $4
	*($2) = ($14 + [24])
	$4 = *($5 + [336])
	*($5 + [336]) = [0]
	if ( ($4 == 0) ){ goto $label$59 }
	goto $label$60 
	
.LABEL $label$76
	CALL $17(($0 + [96]), ($5 + [336]), ($5 + [216]), ($5 + [360]))
	$4 = *($5 + [336])
	*($5 + [336]) = [0]
	if ( $4 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	CALL $159(($5 + [88]))
	
.LABEL $label$60
	CALL _ZdlPv($4)
	
.LABEL $label$59
	$7 = (int_64)1
	
.LABEL $label$58
	*(($2 = ($5 + [248]))) = [0]
	*($5 + [240]) = (int_64)0
	$18 = *($0)
	*($5 + [216]) = $18
	*($5 + [224]) = *(($0 + [192]))
	*($5 + [232]) = (int_64)-1
	CALL eosio_assert(((int_64)$18 == (int_64)CALL $fimport$6()), [9652])
	*(($4 = CALL _Znwj([40])) + [24]) = ($5 + [216])
	*($4) = $7
	*($4 + [16]) = *($1)
	$20 = ((int_64)$7 + (int_64)-1)
	*($4 + [8]) = ((int_64)$20 + (int_64)*($3))
	CALL eosio_assert([1], [9703])
	CALL memcpy(($5 + [128]), $4, [8])
	CALL eosio_assert([1], [9703])
	$14 = ($4 + [8])
	CALL memcpy((($5 + [128]) | [8]), $14, [8])
	CALL eosio_assert([1], [9703])
	CALL memcpy((($5 + [128]) + [16]), ($4 + [16]), [8])
	$19 = *($4 + [8])
	$13 = CALL db_store_i64(*($5 + [224]), (int_64)-5882677294048215040, $18, $19, ($5 + [128]), [24])
	*($4 + [28]) = $13
	if ( (uint_64)($19 <= *($5 + [232])) ){ goto $label$77 }
	*((($5 + [216]) + [16])) = ( (int_64)-2 ? ((int_64)$19 + (int_64)1) : ((uint_64)$19 > (uint_64)(int_64)-3) )
	
.LABEL $label$77
	*($5 + [88]) = $4
	$18 = *($14)
	*($5 + [128]) = $18
	*($5 + [48]) = $13
	$6 = ($5 + [244])
	$14 = *($6)
	if ( ((uint_32)$14 >= (uint_32)*($2)) ){ goto $label$80 }
	*($14 + [8]) = $18
	*($14 + [16]) = $13
	*($5 + [88]) = [0]
	*($14) = $4
	*($6) = ($14 + [24])
	$4 = *($5 + [88])
	$14 = [0]
	*($5 + [88]) = [0]
	if ( ($4 == 0) ){ goto $label$78 }
	goto $label$79 
	
.LABEL $label$80
	CALL $18(($5 + [240]), ($5 + [88]), ($5 + [128]), ($5 + [48]))
	$4 = *($5 + [88])
	$14 = [0]
	*($5 + [88]) = [0]
	if ( ($4 == 0) ){ goto $label$78 }
	
.LABEL $label$79
	CALL _ZdlPv($4)
	
.LABEL $label$78
	*(($5 + [160])) = (int_64)0
	*(($5 + [168])) = (int_64)0
	*((($5 + [128]) + [16])) = *(($3 + [8]))
	*($5 + [152]) = (int_64)0
	*($5 + [128]) = *($1)
	*($5 + [136]) = *($3)
	CALL $162((($5 + [128]) + [24]), ($5 + [272]))
	CALL $162(($5 + [164]), $10)
	*($5 + [176]) = $7
	*($5 + [184]) = ((int_64)$20 + (int_64)*($3))
	*(($13 = (($5 + [88]) + [24]))) = $14
	*($5 + [96]) = (int_64)-4994024803296870400
	*($5 + [104]) = (int_64)0
	$7 = *($0)
	*($5 + [88]) = $7
	*(($4 = CALL _Znwj([16]))) = $7
	*($4 + [8]) = (int_64)3617214756542218240
	$14 = ($4 + [16])
	*($13) = $14
	*(($5 + [108])) = $14
	*($5 + [104]) = $4
	CALL $19(($5 + [116]), ($5 + [128]))
	CALL $9(($5 + [48]), ($5 + [88]))
	$4 = *($5 + [48])
	CALL send_inline($4, (*($5 + [52]) - $4))
	$4 = *($5 + [48])
	if ( ($4 == 0) ){ goto $label$81 }
	*($5 + [52]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$81
	$4 = *($5 + [116])
	if ( ($4 == 0) ){ goto $label$82 }
	*(($5 + [120])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$82
	$4 = *($5 + [104])
	if ( ($4 == 0) ){ goto $label$83 }
	*(($5 + [108])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$83
	*(($14 = ($5 + [120]))) = [0]
	*($5 + [104]) = (int_64)-1
	*($5 + [112]) = (int_64)0
	$7 = *($0)
	*($5 + [88]) = $7
	$18 = *(($0 + [192]))
	*($5 + [96]) = $18
	$4 = CALL db_find_i64($7, $18, (int_64)7881984528191848448, *($1))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$85 }
	$4 = CALL $20(($5 + [88]), $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($5 + [88])), [9573])
	*($5 + [52]) = $3
	*($5 + [48]) = $0
	CALL eosio_assert([1], [9709])
	CALL $21(($5 + [88]), $4, ($5 + [48]))
	goto $label$84 
	
.LABEL $label$85
	$7 = *($0)
	*($5 + [340]) = $0
	*($5 + [336]) = $1
	*($5 + [344]) = $3
	*($5 + [360]) = $7
	CALL eosio_assert(((int_64)*($5 + [88]) == (int_64)CALL $fimport$6()), [9652])
	*($5 + [52]) = ($5 + [336])
	*($5 + [48]) = ($5 + [88])
	*($5 + [56]) = ($5 + [360])
	*(($4 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($4 + [8]) = (int_64)0
	*($4 + [32]) = ($5 + [88])
	CALL $22(($5 + [48]), $4)
	*($5 + [40]) = $4
	$7 = *($4)
	*($5 + [48]) = $7
	$2 = *($4 + [36])
	*($5 + [32]) = $2
	$6 = ($5 + [116])
	$13 = *($6)
	if ( ((uint_32)$13 >= (uint_32)*($14)) ){ goto $label$87 }
	*($13 + [8]) = $7
	*($13 + [16]) = $2
	*($5 + [40]) = [0]
	*($13) = $4
	*($6) = ($13 + [24])
	$4 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( ($4 == 0) ){ goto $label$84 }
	goto $label$86 
	
.LABEL $label$87
	CALL $23(($5 + [112]), ($5 + [40]), ($5 + [48]), ($5 + [32]))
	$4 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( ($4 == 0) ){ goto $label$84 }
	
.LABEL $label$86
	CALL _ZdlPv($4)
	
.LABEL $label$84
	*(($5 + [80])) = [0]
	*($5 + [64]) = (int_64)-1
	$7 = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [48]) = *($0)
	*($5 + [56]) = *($1)
	$4 = CALL $186([8352])
	if ( ($4 <= [8]) ){ goto $label$90 }
	CALL eosio_assert([0], [9004])
	goto $label$89 
	
.LABEL $label$90
	if ( ($4 == 0) ){ goto $label$88 }
	
.LABEL $label$89
	$7 = (int_64)0
	
.LOOP $label$91:
	$14 = *(($4 + [8351]))
	if ( ((($14 + [-65]) & [255]) <= [26]) ){ goto $label$92 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$92
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$91 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	
.LABEL $label$88
	$14 = *(($5 + [76]))
	$13 = *(($5 + [72]))
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$96 }
	
.LOOP $label$98:
	$4 = ($14 + [-24])
	$1 = *($4)
	if ( ((int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8) == (int_64)$7) ){ goto $label$97 }
	$14 = $4
	if ( ((int_32)$13 != (int_32)$4) ){ goto $label$98 }
	goto $label$96 
	
.LABEL $label$97
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$96 }
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)($5 + [48])), [9573])
	if ( $1 ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$96
	$4 = CALL db_find_i64(*($5 + [48]), *(($5 + [56])), (int_64)-6030912129794572288, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$94 }
	$1 = CALL $24(($5 + [48]), $4)
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)($5 + [48])), [9573])
	
.LABEL $label$95
	*($5 + [336]) = $3
	CALL eosio_assert([1], [9709])
	CALL $25(($5 + [48]), $1, ($5 + [336]))
	goto $label$93 
	
.LABEL $label$94
	$7 = *($0)
	*($5 + [352]) = $3
	*($5 + [360]) = $7
	CALL eosio_assert(((int_64)*($5 + [48]) == (int_64)CALL $fimport$6()), [9652])
	*($5 + [340]) = ($5 + [352])
	*($5 + [336]) = ($5 + [48])
	*($5 + [344]) = ($5 + [360])
	*(($4 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($4) = (int_64)0
	*($4 + [20]) = ($5 + [48])
	CALL $26(($5 + [336]), $4)
	*($5 + [40]) = $4
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($5 + [336]) = $7)
	$1 = *($4 + [24])
	*($5 + [32]) = $1
	$13 = ($5 + [76])
	$14 = *($13)
	if ( ((uint_32)$14 >= (uint_32)*((($5 + [48]) + [32]))) ){ goto $label$100 }
	*($14 + [8]) = $7
	*($14 + [16]) = $1
	*($5 + [40]) = [0]
	*($14) = $4
	*($13) = ($14 + [24])
	$4 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( ($4 == 0) ){ goto $label$93 }
	goto $label$99 
	
.LABEL $label$100
	CALL $27(($5 + [72]), ($5 + [40]), ($5 + [336]), ($5 + [32]))
	$4 = *($5 + [40])
	*($5 + [40]) = [0]
	if ( ($4 == 0) ){ goto $label$93 }
	
.LABEL $label$99
	CALL _ZdlPv($4)
	
.LABEL $label$93
	$7 = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[3600]))
	*($5 + [40]) = $7
	$2 = ($0 + [112])
	$14 = *(($0 + [140]))
	$13 = *(($0 + [136]))
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$105 }
	
.LOOP $label$107:
	$4 = ($14 + [-24])
	$1 = *($4)
	if ( ((int_64)*($1) == (int_64)$7) ){ goto $label$106 }
	$14 = $4
	if ( ((int_32)$13 != (int_32)$4) ){ goto $label$107 }
	goto $label$105 
	
.LABEL $label$106
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$105 }
	CALL eosio_assert(((int_32)*(($1 + [76])) == (int_32)$2), [9573])
	if ( $1 ){ goto $label$104 }
	goto $label$103 
	
.LABEL $label$105
	$4 = CALL db_find_i64(*($2), *(($0 + [120])), (int_64)-5915276457541632000, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$103 }
	$1 = CALL $28($2, $4)
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$2), [9573])
	
.LABEL $label$104
	CALL eosio_assert((*($1 + [72]) == 0), [8526])
	*($5 + [336]) = $3
	CALL eosio_assert([1], [9709])
	CALL $29($2, $1, ($5 + [336]))
	$0 = *($5 + [72])
	if ( $0 ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$103
	$7 = *($0)
	*($5 + [36]) = $3
	*($5 + [32]) = ($5 + [40])
	*($5 + [360]) = $7
	CALL eosio_assert(((int_64)*(($0 + [112])) == (int_64)CALL $fimport$6()), [9652])
	*($5 + [336]) = $2
	*($5 + [340]) = ($5 + [32])
	*($5 + [344]) = ($5 + [360])
	$4 = CALL _Znwj([88])
	CALL $30($4)
	*($4 + [76]) = $2
	CALL $31(($5 + [336]), $4)
	*($5 + [352]) = $4
	$7 = *($4)
	*($5 + [336]) = $7
	$1 = *($4 + [80])
	*($5 + [332]) = $1
	$3 = ($0 + [140])
	$14 = *($3)
	if ( ((uint_32)$14 >= (uint_32)*(($0 + [144]))) ){ goto $label$110 }
	*($14 + [8]) = $7
	*($14 + [16]) = $1
	*($5 + [352]) = [0]
	*($14) = $4
	*($3) = ($14 + [24])
	$4 = *($5 + [352])
	*($5 + [352]) = [0]
	if ( ($4 == 0) ){ goto $label$108 }
	goto $label$109 
	
.LABEL $label$110
	CALL $32(($0 + [136]), ($5 + [352]), ($5 + [336]), ($5 + [332]))
	$4 = *($5 + [352])
	*($5 + [352]) = [0]
	if ( ($4 == 0) ){ goto $label$108 }
	
.LABEL $label$109
	CALL _ZdlPv($4)
	
.LABEL $label$108
	$0 = *($5 + [72])
	if ( ($0 == 0) ){ goto $label$101 }
	
.LABEL $label$102
	$1 = ($5 + [76])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$112 }
	
.LOOP $label$113:
	$4 = ($4 + [-24])
	$14 = *($4)
	*($4) = [0]
	if ( ($14 == 0) ){ goto $label$114 }
	CALL _ZdlPv($14)
	
.LABEL $label$114
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$113 }
	$4 = *(($5 + [72]))
	goto $label$111 
	
.LABEL $label$112
	$4 = $0
	
.LABEL $label$111
	*($1) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$101
	$0 = *($5 + [112])
	if ( ($0 == 0) ){ goto $label$115 }
	$1 = ($5 + [116])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$117 }
	
.LOOP $label$118:
	$4 = ($4 + [-24])
	$14 = *($4)
	*($4) = [0]
	if ( ($14 == 0) ){ goto $label$119 }
	CALL _ZdlPv($14)
	
.LABEL $label$119
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$118 }
	$4 = *(($5 + [112]))
	goto $label$116 
	
.LABEL $label$117
	$4 = $0
	
.LABEL $label$116
	*($1) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$115
	if ( ((*(($5 + [164])) & [1]) == 0) ){ goto $label$120 }
	CALL _ZdlPv(*(($5 + [172])))
	
.LABEL $label$120
	if ( ((*(($5 + [152])) & [1]) == 0) ){ goto $label$121 }
	CALL _ZdlPv(*(($5 + [160])))
	
.LABEL $label$121
	$0 = *($5 + [240])
	if ( ($0 == 0) ){ goto $label$122 }
	$1 = ($5 + [244])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$124 }
	
.LOOP $label$125:
	$4 = ($4 + [-24])
	$14 = *($4)
	*($4) = [0]
	if ( ($14 == 0) ){ goto $label$126 }
	CALL _ZdlPv($14)
	
.LABEL $label$126
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$125 }
	$4 = *(($5 + [240]))
	goto $label$123 
	
.LABEL $label$124
	$4 = $0
	
.LABEL $label$123
	*($1) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$122
	if ( (*($5 + [272]) & [1]) ){ goto $label$130 }
	if ( (*($5 + [288]) & [1]) ){ goto $label$129 }
	goto $label$128 
	
.LABEL $label$130
	CALL _ZdlPv(*(($5 + [280])))
	if ( ((*($5 + [288]) & [1]) == 0) ){ goto $label$128 }
	
.LABEL $label$129
	CALL _ZdlPv(*($10 + [8]))
	if ( (*($5 + [304]) & [1]) ){ goto $label$127 }
	goto $label$1 
	
.LABEL $label$128
	if ( ((*($5 + [304]) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$127
	CALL _ZdlPv(*($16 + [8]))
	
.LABEL $label$1
	if ( ((*($5 + [320]) & [1]) == 0) ){ goto $label$131 }
	CALL _ZdlPv(*($5 + [328]))
	
.LABEL $label$131
	$global$0 = ($5 + [368])
	(unreachable)
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9703])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9703])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $119($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9703])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9703])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9703])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $119(CALL $118($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9703])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9703])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9703])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9703])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9703])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9703])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = [0]
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$5 = (*(($1 + [228])) - *(($1 + [224])))
	$6 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$4 }
	$4 = CALL _Znwj($5)
	*(($3 + [8])) = ($4 + ((int_32)$6 * (int_32)[12]))
	*($3) = $4
	*($3 + [4]) = $4
	$6 = *(($1 + [224]))
	$5 = (*(($1 + [228])) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($4, $6, $5)
	$5 = ((int_32)((uint_32)$5 / (uint_32)[12]) * (int_32)[12])
	$7 = ($4 + $5)
	*($3 + [4]) = $7
	$8 = ((uint_32)$2 / (uint_32)[86400])
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($2 - ((int_32)$8 * (int_32)[86400]))
	$5 = $4
	
.LOOP $label$7:
	$2 = ((uint_32)*(($5 + [8])) % (uint_32)[86400])
	if ( ((uint_32)((uint_32)*(($5 + [4])) % (uint_32)[86400]) > (uint_32)$6) ){ goto $label$8 }
	if ( ($2 <= $6) ){ goto $label$8 }
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((int_32)$2 == (int_32)$8) ){ goto $label$5 }
	
.LABEL $label$8
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = CALL $186([8352])
	if ( ($5 <= [8]) ){ goto $label$11 }
	CALL eosio_assert([0], [9004])
	goto $label$10 
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$9 = (int_64)0
	
.LOOP $label$12:
	$6 = *(($5 + [8351]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$13 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$13
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	$9 = ((int_64)((int_64)$9 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$9
	$9 = (int_64)4
	goto $label$3 
	
.LABEL $label$5
	*($0) = *($1 + [208])
	*(($0 + [8])) = *(($1 + [216]))
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $174($3)
	
.LABEL $label$3
	*($0 + [8]) = $9
	*($0) = (int_64)0
	CALL eosio_assert([1], [10048])
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$9 = $10
	$7 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$9 = $10
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $6 ){ goto $label$19 }
	$7 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [10097])
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$14
	CALL eosio_assert([0], [10097])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	$6 = ($5 + [72])
	$7 = *($0)
	$8 = ($5 + [88])
	$9 = *($8)
	if ( ((int_64)$9 != (int_64)-1) ){ goto $label$1 }
	$9 = (int_64)0
	$10 = CALL db_lowerbound_i64(*($6), *(($5 + [80])), (int_64)4406680309660123136, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $53($6, $10)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$9 = *(*(CALL $131(($3 + [24])) + [4]))
	$9 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [88])) = $9
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($9 <= (int_64)-2), [10385])
	$9 = (int_64)53
	$11 = *($8)
	if ( (uint_64)($11 <= (int_64)54) ){ goto $label$3 }
	if ( ((int_64)$11 != (int_64)-1) ){ goto $label$4 }
	$11 = (int_64)0
	$8 = CALL db_lowerbound_i64(*(($5 + [72])), *(($5 + [80])), (int_64)4406680309660123136, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	CALL $53($6, $8)
	*($3 + [28]) = [0]
	*($3 + [24]) = $6
	$9 = *(*(CALL $131(($3 + [24])) + [4]))
	$11 = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*(($5 + [88])) = $11
	
.LABEL $label$4
	CALL eosio_assert((uint_64)($11 <= (int_64)-2), [10385])
	$9 = *(($5 + [88]))
	
.LABEL $label$3
	*($1) = $9
	*($1 + [8]) = *($5 + [192])
	$5 = *($4 + [4])
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [16]) = *($5)
	$5 = *($4 + [8])
	*($1 + [32]) = *($5)
	*(($1 + [40])) = *(($5 + [8]))
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [4]) = $5
	*($3) = $5
	*($3 + [8]) = ($2 + [-15])
	*($3 + [16]) = $3
	$2 = ($1 + [8])
	*($3 + [28]) = $2
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [32])
	*($3 + [40]) = ($1 + [48])
	CALL $14(($3 + [24]), ($3 + [16]))
	$9 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($7 + [8]), (int_64)4406680309660123136, *(*($0 + [8])), $9, $5, [49])
	if ( (uint_64)($9 <= *($7 + [16])) ){ goto $label$6 }
	*(($7 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$9 = *(($7 + [8]))
	$11 = *(*(($0 + [8])))
	$12 = *($1)
	*($3 + [24]) = *($2)
	*($1 + [60]) = CALL db_idx64_store($9, (int_64)4406680309660123136, $11, $12, ($3 + [24]))
	$global$0 = ($3 + [48])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $120(*($1), *($0))
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($3 + [24]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	*($2 + [8]) = *(($3 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($3 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $120(*($1), *($0))
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($3 + [24]), [8])
	$4 = (*($0 + [4]) + [8])
	*($0 + [4]) = $4
	*($2 + [8]) = *(($3 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($0 + [4]), ($3 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [112]) = [8859]
	*($4 + [116]) = CALL $186([8859])
	*($4 + [8]) = *($4 + [112])
	$5 = CALL $4(($4 + [120]), ($4 + [8]))
	$6 = CALL $186([8928])
	if ( ($6 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9004])
	goto $label$5 
	
.LABEL $label$6
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = (int_64)0
	
.LOOP $label$7:
	$8 = *(($6 + [8927]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$8
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$7 }
	if ( ((int_64)*($2 + [8]) != (int_64)((int_64)((int_64)$7 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_64)*($2 + [8]) == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = *($5)
	goto $label$1 
	
.LABEL $label$2
	*($4 + [104]) = [8871]
	*($4 + [108]) = CALL $186([8871])
	*($4) = *($4 + [104])
	$9 = *(CALL $4(($4 + [16]), $4))
	*($5) = $9
	
.LABEL $label$1
	$7 = *($0)
	*((($4 + [16]) + [24])) = *(($2 + [8]))
	*($4 + [16]) = $7
	*($4 + [24]) = *($1)
	*($4 + [32]) = *($2)
	$8 = CALL $160((($4 + [16]) + [32]), $3)
	*($4 + [72]) = (int_64)-3617168760277827584
	*($4 + [64]) = $9
	*(($6 = CALL _Znwj([16]))) = $7
	*($6 + [8]) = (int_64)3617214756542218240
	*((($4 + [64]) + [36])) = [0]
	$2 = ($6 + [16])
	*((($4 + [64]) + [24])) = $2
	*(($4 + [84])) = $2
	*($4 + [80]) = $6
	*($4 + [92 align=4]) = (int_64)0
	$6 = *($8)
	$8 = ( *((($4 + [16]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($8 + [32])
	$7 = (CASTING uint_64)(uint_32 $8)
	$8 = ($4 + [92])
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$9 }
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $7($8, $6)
	$8 = *(($4 + [96]))
	$6 = *(($4 + [92]))
	goto $label$10 
	
.LABEL $label$11
	$8 = [0]
	$6 = [0]
	
.LABEL $label$10
	*($4 + [148]) = $6
	*($4 + [144]) = $6
	*($4 + [152]) = $8
	*($4 + [128]) = ($4 + [144])
	*($4 + [136]) = ($4 + [16])
	CALL $35(($4 + [136]), ($4 + [128]))
	CALL $9(($4 + [144]), ($4 + [64]))
	$6 = *($4 + [144])
	CALL send_inline($6, (*($4 + [148]) - $6))
	$6 = *($4 + [144])
	if ( ($6 == 0) ){ goto $label$12 }
	*($4 + [148]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$12
	$6 = *($4 + [92])
	if ( ($6 == 0) ){ goto $label$13 }
	*(($4 + [96])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$13
	$6 = *($4 + [80])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($4 + [84])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$14
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [56])))
	
.LABEL $label$15
	$global$0 = ($4 + [160])
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)4406680309660123136, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($4 + [52])) == (int_32)$7), [9573])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $53($7, CALL $fimport$11(*($7), *($7 + [8]), (int_64)4406680309660123136, $6))
	CALL eosio_assert(((int_32)*($4 + [52]) == (int_32)$7), [9573])
	
.LABEL $label$2
	*($4 + [60]) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $185 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [24])
	$4 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-40] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = *($1 + [36])
	$4 = ( *(($1 + [40])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = ($3 - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$7 = ($1 + [36])
	
.LOOP $label$2:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$2 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	CALL $7($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$3 
	
.LABEL $label$4
	$3 = [0]
	
.LABEL $label$3
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	*($2 + [16]) = $2
	*($2 + [32]) = $6
	*($2 + [36]) = $7
	*($2 + [24]) = $1
	*($2 + [28]) = ($1 + [8])
	*($2 + [40]) = ($1 + [48])
	*($2 + [44]) = ($1 + [56])
	CALL $132(($2 + [24]), ($2 + [16]))
	$global$0 = ($2 + [48])
}

int_32 .FUNC $184 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $187 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $176())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $188($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $186 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $180 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $116 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [9652])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9703])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $117(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$6()), [9652])
	*(($5 = CALL _Znwj([24])) + [8]) = $1
	*($5) = *(*($3))
	CALL eosio_assert([1], [9703])
	CALL memcpy(($4 + [16]), $5, [8])
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)7235159537265672192, $2, (int_64)7235159537265672192, ($4 + [16]), [8])
	*($5 + [12]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	*($4 + [8]) = $5
	*($4 + [16]) = (int_64)7235159537265672192
	*($4 + [4]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)7235159537265672192
	*($3 + [16]) = $6
	*($4 + [8]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $117(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$1 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$4 }
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [8]) == (int_32)$0), [9744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9790])
	*($1) = *(*($3))
	CALL eosio_assert([1], [9841])
	CALL eosio_assert([1], [9703])
	CALL memcpy($4, $1, [8])
	CALL db_update_i64(*($1 + [12]), $2, $4, [8])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)7235159537265672192) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)7235159537265672193
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4) = [0]
	$5 = *($1 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	$7 = $1
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$7 = *($1)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	$8 = *(($4 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$10 }
	if ( ((uint_32)$8 >= (uint_32)[9]) ){ goto $label$12 }
	$9 = ($4 + $8)
	if ( ($8 == 0) ){ goto $label$9 }
	
.LOOP $label$13:
	$10 = *($2)
	$5 = $4
	$6 = $8
	
.LOOP $label$14:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$14 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$15 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = *($4)
	$12 = ($9 + $8)
	
.LOOP $label$16:
	$10 = *($2)
	$5 = $9
	$6 = $8
	
.LOOP $label$17:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$17 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$18 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$18
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$11
	$2 = $3
	
.LABEL $label$10
	if ( ($8 <= [9]) ){ goto $label$8 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$7 }
	$5 = *($4)
	
.LOOP $label$19:
	if ( ((int_32)$5 <= (int_32)*($2)) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$19 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	if ( (*($1 + [12]) == 0) ){ goto $label$20 }
	$8 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$20
	$9 = *(($1 + [8]))
	if ( ((uint_32)$9 >= (uint_32)[9]) ){ goto $label$6 }
	$12 = ($1 + $9)
	if ( ($9 == 0) ){ goto $label$5 }
	$8 = $2
	
.LOOP $label$21:
	$10 = *($8)
	$5 = $1
	$6 = $9
	
.LOOP $label$22:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$22 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$21 }
	goto $label$4 
	
.LABEL $label$7
	$2 = $3
	goto $label$4 
	
.LABEL $label$6
	$12 = *($1)
	$1 = ($12 + $9)
	$8 = $2
	
.LOOP $label$23:
	$10 = *($8)
	$5 = $12
	$6 = $9
	
.LOOP $label$24:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$24 }
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$23 }
	goto $label$4 
	
.LABEL $label$5
	$6 = ((int_32)$12 == (int_32)$1)
	if ( $6 ){ goto $label$25 }
	$7 = ($3 + [-1])
	$5 = *($1)
	$8 = $2
	
.LOOP $label$26:
	if ( ((int_32)$5 > (int_32)*($8)) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ($6 == 0) ){ goto $label$26 }
	goto $label$3 
	
.LABEL $label$25
	$8 = $2
	goto $label$3 
	
.LABEL $label$4
	$8 = $3
	
.LABEL $label$3
	*($0 + [4]) = $8
	*($0) = $2
	$global$0 = ($4 + [16])
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9624])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $189($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*(($4 = CALL _Znwj([24])) + [8]) = $0
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9647])
	CALL memcpy($4, $2, [8])
	*($4 + [12]) = $1
	*($3 + [24]) = $4
	*($3 + [16]) = (int_64)7235159537265672192
	*($3 + [12]) = $1
	$6 = ($0 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($7 + [8]) = (int_64)7235159537265672192
	*($7 + [16]) = $1
	*($3 + [24]) = [0]
	*($7) = $4
	*($6) = ($7 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $117(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $192($2)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $4
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*(($1 = CALL _Znwj([16]))) = [0]
	$4 = *(($3 + [8]))
	*($1 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $3
	$6 = $1
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($4)
	*($1) = $6
	$4 = *(($1 + [8]))
	$5 = *($3)
	
.LABEL $label$3
	CALL memcpy($6, $5, $4)
	*($2) = $1
	*($1 + [12]) = *(($3 + [12]))
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $112($0, *($1), $2, $3)
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9703])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9703])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9703])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9703])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9703])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($1 + [76])) == (int_32)$0), [9744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9790])
	$5 = *($2)
	$6 = *($1)
	$7 = CALL $186([8352])
	if ( ($7 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9004])
	goto $label$5 
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$8 = (int_64)0
	
.LOOP $label$7:
	$9 = *(($7 + [8351]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$8
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$10 = *($2)
	if ( ((int_64)*($5 + [8]) != (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$10 = *($2)
	if ( ((int_64)*($5 + [8]) == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = CALL $186([8928])
	if ( ($7 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9004])
	goto $label$11 
	
.LABEL $label$12
	if ( ($7 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$8 = (int_64)0
	
.LOOP $label$13:
	$9 = *(($7 + [8927]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$13 }
	if ( ((int_64)*($10 + [8]) != (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_64)*($10 + [8]) != (int_64)4) ){ goto $label$1 }
	
.LABEL $label$9
	$7 = *($2)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [48]))), [10268])
	$8 = ((int_64)*($1 + [40]) + (int_64)*($7))
	*($1 + [40]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10311])
	CALL eosio_assert(((int_64)*($1 + [40]) < (int_64)4611686018427387904), [10330])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($10 + [8]) == (int_64)*(($1 + [16]))), [10268])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($10))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10311])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [10330])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9841])
	$9 = $3
	$7 = ($9 + [-80])
	$global$0 = $7
	*($4 + [4]) = $7
	*($4) = $7
	*($4 + [8]) = ($9 + [-7])
	*($4 + [16]) = $4
	*($4 + [28]) = ($1 + [8])
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [24])
	*($4 + [36]) = ($1 + [40])
	*($4 + [40]) = ($1 + [56])
	*($4 + [44]) = ($1 + [72])
	CALL $67(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $7, [73])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$15 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$global$0 = ($4 + [48])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9624])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $189($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([88])
	CALL $30($5)
	*($5 + [76]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [56])
	*($3 + [60]) = ($5 + [72])
	CALL $130(($3 + [40]), ($3 + [32]))
	*($5 + [80]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $32(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $192($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9790])
	*($1 + [24]) = *(*($2) + [200])
	$5 = *($1)
	$6 = *($2 + [4])
	$7 = CALL $186([8352])
	if ( ($7 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9004])
	goto $label$4 
	
.LABEL $label$5
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = (int_64)0
	
.LOOP $label$6:
	$9 = *(($7 + [8351]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$7
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$6 }
	$9 = ($1 + [24])
	if ( ((int_64)*($6 + [8]) != (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$9 = ($1 + [24])
	if ( ((int_64)*($6 + [8]) != (int_64)4) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = *(($2 + [4]))
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [16]))), [10268])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($7))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [10311])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [10330])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9841])
	$2 = $3
	$7 = ($2 + [-32])
	$global$0 = $7
	*($4 + [12]) = $7
	*($4 + [8]) = $7
	*($4 + [16]) = $2
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [8])
	*($4 + [32]) = $1
	*($4 + [40]) = $9
	CALL $133(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [36]), (int_64)0, $7, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9624])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $189($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [16]) = (int_64)0
	*($5 + [8]) = (int_64)0
	*($5 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	CALL $129(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $23(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $192($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [24]) = *(*($4 + [4]) + [200])
	$5 = *($0)
	$6 = *($4 + [8])
	$7 = CALL $186([8352])
	if ( ($7 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9004])
	goto $label$5 
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$8 = (int_64)0
	
.LOOP $label$7:
	$9 = *(($7 + [8351]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$8
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$10 = ($1 + [24])
	if ( ((int_64)*($6 + [8]) != (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$10 = ($1 + [24])
	if ( ((int_64)*($6 + [8]) == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = CALL $186([8352])
	if ( ($7 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9004])
	goto $label$11 
	
.LABEL $label$12
	if ( ($7 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$8 = (int_64)0
	
.LOOP $label$13:
	$9 = *(($7 + [8351]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$13 }
	$11 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$9 
	
.LABEL $label$10
	$11 = (int_64)4
	
.LABEL $label$9
	CALL eosio_assert([1], [10048])
	$8 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$8 = $12
	$9 = [1]
	$4 = $7
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$8 = $12
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $9 ){ goto $label$19 }
	$9 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$9 = [0]
	
.LABEL $label$15
	CALL eosio_assert($9, [10097])
	*(($1 + [16])) = $11
	*($1 + [8]) = (int_64)0
	$4 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$7 = *(($4 + [8]))
	*($1 + [8]) = *($7)
	*(($1 + [16])) = *(($7 + [8]))
	$4 = ($1 + [8])
	
.LABEL $label$1
	$9 = $2
	$7 = ($9 + [-32])
	$global$0 = $7
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = $9
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $4
	*($3 + [32]) = $1
	*($3 + [40]) = $10
	CALL $133(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($5 + [8]), (int_64)7881984528191848448, *(*($0 + [8])), $8, $7, [32])
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$20 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$20
	$global$0 = ($3 + [48])
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9744])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9790])
	*($1 + [16]) = (*($1 + [16]) + [1])
	$5 = *($1 + [8])
	$6 = *($2)
	$7 = CALL $186([8352])
	if ( ($7 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9004])
	goto $label$3 
	
.LABEL $label$4
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = (int_64)0
	
.LOOP $label$5:
	$9 = *(($7 + [8351]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$6
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$5 }
	$10 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$10 = (int_64)4
	
.LABEL $label$1
	$11 = ($1 + [16])
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)*($6 + [8]) != (int_64)$10) ){ goto $label$7 }
	$7 = *($2)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [8]))), [10268])
	$5 = ((int_64)*($1) + (int_64)*($7))
	*($1) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [10311])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [10330])
	
.LABEL $label$7
	$2 = ($1 + [8])
	CALL eosio_assert(((int_64)$8 == (int_64)(uint_64)*($2) >> (uint_64)(int_64)8)), [9841])
	$7 = $3
	$9 = ($7 + [-32])
	$global$0 = $9
	CALL eosio_assert([1], [9703])
	CALL memcpy($9, $1, [8])
	*($4 + [8]) = *($2)
	CALL eosio_assert([1], [9703])
	CALL memcpy(($7 + [-24]), ($4 + [8]), [8])
	CALL eosio_assert([1], [9703])
	CALL memcpy(($7 + [-16]), $11, [4])
	CALL db_update_i64(*($1 + [24]), (int_64)0, $9, [20])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$8
	$global$0 = ($4 + [16])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9624])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $189($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9647])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9647])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	*($5 + [8]) = *($3 + [24])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[16]), [9647])
	CALL memcpy(($5 + [16]), ($2 + [16]), [4])
	*($5 + [24]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $27(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $192($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1 + [16]) = [1]
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = CALL $186([8352])
	if ( ($7 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9004])
	goto $label$5 
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$8 = (int_64)0
	
.LOOP $label$7:
	$9 = *(($7 + [8351]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$8
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$10 = ($1 + [16])
	if ( ((int_64)*($6 + [8]) != (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$10 = ($1 + [16])
	if ( ((int_64)*($6 + [8]) == (int_64)4) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = CALL $186([8352])
	if ( ($7 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9004])
	goto $label$11 
	
.LABEL $label$12
	if ( ($7 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$8 = (int_64)0
	
.LOOP $label$13:
	$9 = *(($7 + [8351]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$13 }
	$11 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$9 
	
.LABEL $label$10
	$11 = (int_64)4
	
.LABEL $label$9
	CALL eosio_assert([1], [10048])
	$8 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$18 }
	$8 = $12
	$9 = [1]
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$18
	$8 = $12
	
.LOOP $label$19:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$6 = ($7 + [1])
	$7 = $6
	if ( $9 ){ goto $label$19 }
	$9 = [1]
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$9 = [0]
	
.LABEL $label$15
	CALL eosio_assert($9, [10097])
	*($1 + [8]) = $11
	*($1) = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$7 = *($5)
	*($1) = *($7)
	*(($1 + [8])) = *(($7 + [8]))
	
.LABEL $label$1
	$7 = $2
	$9 = ($7 + [-32])
	$global$0 = $9
	CALL eosio_assert([1], [9703])
	CALL memcpy($9, $1, [8])
	$6 = ($1 + [8])
	*($3 + [8]) = *($6)
	CALL eosio_assert([1], [9703])
	CALL memcpy(($7 + [-24]), ($3 + [8]), [8])
	CALL eosio_assert([1], [9703])
	CALL memcpy(($7 + [-16]), $10, [4])
	$8 = (uint_64)*($6) >> (uint_64)(int_64)8
	*($1 + [24]) = CALL db_store_i64(*($4 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $8), $9, [20])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$20 }
	*(($4 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$20
	$global$0 = ($3 + [16])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*(($1 = CALL _Znwj([16]))) = [0]
	$4 = *(($3 + [8]))
	*($1 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $3
	$6 = $1
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($4)
	*($1) = $6
	$4 = *(($1 + [8]))
	$5 = *($3)
	
.LABEL $label$3
	CALL memcpy($6, $5, $4)
	*($2) = $1
	*($1 + [12]) = *(($3 + [12]))
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = [0]
	$3 = *($1 + [8])
	*($2 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $2
	$5 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL _Znaj($3)
	*($2) = $4
	$5 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $5, $3)
	*($2 + [12]) = *($1 + [12])
	*($2 + [16]) = [0]
	$1 = *(($2 + [8]))
	*($2 + [24]) = $1
	$3 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $2
	$5 = ($2 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($2 + [16]) = $5
	$4 = *($2)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($2 + [28]) = *(($2 + [12]))
	$1 = CALL $101([9172], ($2 + [16]), $3)
	if ( (*((($2 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdaPv($3)
	
.LABEL $label$5
	if ( (*(($2 + [8])) <= [9]) ){ goto $label$6 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdaPv($3)
	
.LABEL $label$6
	*($0) = ( [9172] ? [0] : $1 )
	$global$0 = ($2 + [32])
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$15
	$3 = *($0)
	$2 = CALL _Znwj([16])
	$4 = *($3 + [8])
	*($2) = [0]
	*($2 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$10 }
	$0 = $3
	$5 = $2
	goto $label$9 
	
.LABEL $label$14
	$4 = [0]
	
.LOOP $label$16:
	$2 = [0]
	
.LOOP $label$18:
	if ( ((int_32)*((($4 + $2) + [9219])) != (int_32)*(($2 + [9402]))) ){ goto $label$17 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)($4 + $2) != (int_32)[183]) ){ goto $label$18 }
	goto $label$7 
	
.LABEL $label$17
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$16 }
	goto $label$7 
	
.LABEL $label$13
	*($1) = *($0)
	*($0) = [0]
	return 
	
.LABEL $label$12
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$19 }
	if ( (*($2 + [8]) <= [9]) ){ goto $label$20 }
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdaPv($4)
	
.LABEL $label$20
	CALL _ZdlPv($2)
	
.LABEL $label$19
	*($1) = [0]
	return 
	
.LABEL $label$11
	$3 = *($1)
	$4 = [0]
	
.LOOP $label$21:
	$2 = [0]
	
.LOOP $label$23:
	if ( ((int_32)*((($4 + $2) + [9219])) != (int_32)*(($2 + [9402]))) ){ goto $label$22 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)($4 + $2) != (int_32)[183]) ){ goto $label$23 }
	goto $label$5 
	
.LABEL $label$22
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$21 }
	goto $label$5 
	
.LABEL $label$10
	$5 = CALL _Znaj($4)
	*($2) = $5
	$4 = *(($2 + [8]))
	$0 = *($3)
	
.LABEL $label$9
	CALL memcpy($5, $0, $4)
	$4 = *($3 + [12])
	*($1) = $2
	*($2 + [12]) = $4
	return 
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$4 }
	
.LABEL $label$7
	*($1) = [9219]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)[183]) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = [9219]
	$5 = [0]
	$4 = *($3)
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($1) = ($4 + [9223])
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$3
	$2 = ($4 + [9223])
	$5 = [0]
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($3 + [1])
	
.LOOP $label$25:
	if ( ((int_32)($4 & [255]) != (int_32)*($2)) ){ goto $label$24 }
	$2 = ($2 + [1])
	$4 = *($3)
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$25 }
	goto $label$1 
	
.LABEL $label$24
	$5 = $4
	
.LABEL $label$1
	if ( ((int_32)($5 & [255]) != (int_32)*($2)) ){ goto $label$26 }
	*($1) = *($0)
	return 
	
.LABEL $label$26
	*($1) = [0]
	$2
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$5:
	$2 = [0]
	
.LOOP $label$7:
	if ( ((int_32)*((($0 + $2) + [9219])) != (int_32)*(($2 + [9402]))) ){ goto $label$6 }
	if ( ((int_32)$2 == (int_32)[3]) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)($0 + $2) != (int_32)[183]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	CALL $103($0, $1, $2)
	return 
	
.LABEL $label$3
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$1 }
	
.LABEL $label$2
	*($1) = [9219]
	*($1 + [4]) = [0]
	return 
	
.LABEL $label$1
	*($1) = ($0 + [9223])
	*($1 + [4]) = [0]
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4) = [0]
	$5 = *($1 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	$7 = $1
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$7 = *($1)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	$8 = *(($4 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$10 }
	if ( ((uint_32)$8 >= (uint_32)[9]) ){ goto $label$12 }
	$9 = ($4 + $8)
	if ( ($8 == 0) ){ goto $label$9 }
	
.LOOP $label$13:
	$10 = *($2)
	$5 = $4
	$6 = $8
	
.LOOP $label$14:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$14 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$15 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$9 = *($4)
	$12 = ($9 + $8)
	
.LOOP $label$16:
	$10 = *($2)
	$5 = $9
	$6 = $8
	
.LOOP $label$17:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$17 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$18 }
	if ( ((int_32)*($5) <= (int_32)$10) ){ goto $label$10 }
	
.LABEL $label$18
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$11
	$2 = $3
	
.LABEL $label$10
	if ( ($8 <= [9]) ){ goto $label$8 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$9 == (int_32)$4) ){ goto $label$7 }
	$5 = *($4)
	
.LOOP $label$19:
	if ( ((int_32)$5 <= (int_32)*($2)) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$19 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	if ( (*($1 + [12]) == 0) ){ goto $label$20 }
	$8 = ($2 + [1])
	goto $label$3 
	
.LABEL $label$20
	$9 = *(($1 + [8]))
	if ( ((uint_32)$9 >= (uint_32)[9]) ){ goto $label$6 }
	$12 = ($1 + $9)
	if ( ($9 == 0) ){ goto $label$5 }
	$8 = $2
	
.LOOP $label$21:
	$10 = *($8)
	$5 = $1
	$6 = $9
	
.LOOP $label$22:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$22 }
	if ( ((int_32)$5 == (int_32)$12) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$21 }
	goto $label$4 
	
.LABEL $label$7
	$2 = $3
	goto $label$4 
	
.LABEL $label$6
	$12 = *($1)
	$1 = ($12 + $9)
	$8 = $2
	
.LOOP $label$23:
	$10 = *($8)
	$5 = $12
	$6 = $9
	
.LOOP $label$24:
	$11 = ((int_32)*($11) < (int_32)$10)
	$7 = ((int_32)$6 / (int_32)[2])
	$11 = ($5 + $7)
	$5 = ( ($11 + [1]) ? $5 : $11 )
	$6 = ( (($6 + [-1]) - $7) ? $7 : $11 )
	if ( $6 ){ goto $label$24 }
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	if ( ((int_32)*($5) > (int_32)$10) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$23 }
	goto $label$4 
	
.LABEL $label$5
	$6 = ((int_32)$12 == (int_32)$1)
	if ( $6 ){ goto $label$25 }
	$7 = ($3 + [-1])
	$5 = *($1)
	$8 = $2
	
.LOOP $label$26:
	if ( ((int_32)$5 > (int_32)*($8)) ){ goto $label$3 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$4 }
	$8 = ($8 + [1])
	if ( ($6 == 0) ){ goto $label$26 }
	goto $label$3 
	
.LABEL $label$25
	$8 = $2
	goto $label$3 
	
.LABEL $label$4
	$8 = $3
	
.LABEL $label$3
	*($0 + [4]) = $8
	*($0) = $2
	$global$0 = ($4 + [16])
}

void .FUNC $104 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $105($0, *($1), $2, $3)
}

int_32 .FUNC $107 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$5 = ($3 | [1])
	$6 = ($1 + [16])
	$7 = ($1 + [20])
	$8 = ($3 + [8])
	$9 = ($1 + [28])
	$10 = ($1 + [32])
	$11 = ($1 + [24])
	$12 = [1]
	if ( *($1) ){ goto $label$2 }
	$14 = [1]
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	
.LOOP $label$3:
	goto $label$64 
	
.LABEL $label$65
	*($7) = $13
	*($6) = *($11)
	*($11) = $12
	$12 = [1]
	if ( (*($1) == 0) ){ goto $label$31 }
	$14 = [0]
	goto $label$3 
	
.LABEL $label$64
	$12 = ((int_32)*($10) != (int_32)[0])
	$14 = [1]
	goto $label$3 
	
.LABEL $label$63
	if ( (*($2) == 0) ){ goto $label$30 }
	$14 = [2]
	goto $label$3 
	
.LABEL $label$62
	$13 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($12 | $13) == (int_32)[1]) ){ goto $label$29 }
	$14 = [3]
	goto $label$3 
	
.LABEL $label$61
	$13 = *(($2 + [16]))
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	if ( ((int_32)$16 != (int_32)(*(($2 + [20])) - $13)) ){ goto $label$27 }
	$14 = [24]
	goto $label$3 
	
.LABEL $label$60
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$8 }
	$14 = [25]
	goto $label$3 
	
.LABEL $label$59
	$17 = $12
	$14 = [26]
	goto $label$3 
	
.LABEL $label$58
	if ( ((int_32)*($17) != (int_32)*($13)) ){ goto $label$26 }
	$14 = [27]
	goto $label$3 
	
.LABEL $label$57
	$13 = ($13 + [1])
	$17 = ($17 + [1])
	if ( ((int_32)$15 != (int_32)$17) ){ goto $label$7 }
	$14 = [28]
	goto $label$3 
	
.LABEL $label$56
	if ( ((int_32)*($11) != (int_32)*(($2 + [24]))) ){ goto $label$28 }
	$14 = [29]
	goto $label$3 
	
.LABEL $label$55
	if ( ((int_32)*($9) != (int_32)*(($2 + [28]))) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$54
	$13 = [1]
	$14 = [32]
	goto $label$3 
	
.LABEL $label$53
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$4 }
	$14 = [30]
	goto $label$3 
	
.LABEL $label$52
	$12 = *($6)
	$15 = *($7)
	$16 = ($15 - $12)
	$14 = [4]
	goto $label$3 
	
.LABEL $label$51
	*($8) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$16 >= (uint_32)[-16]) ){ goto $label$25 }
	$14 = [5]
	goto $label$3 
	
.LABEL $label$50
	if ( ((uint_32)$16 > (uint_32)[10]) ){ goto $label$24 }
	$14 = [22]
	goto $label$3 
	
.LABEL $label$49
	*($3) = ($16 << [1])
	$17 = $5
	if ( ((int_32)$12 != (int_32)$15) ){ goto $label$21 }
	goto $label$22 
	
.LABEL $label$48
	$13 = (($16 + [16]) & [-16])
	$17 = CALL _Znwj($13)
	*($8) = $17
	*($3) = ($13 | [1])
	*($3 + [4]) = $16
	if ( ((int_32)$12 == (int_32)$15) ){ goto $label$23 }
	$14 = [7]
	goto $label$3 
	
.LABEL $label$47
	$13 = $17
	$14 = [8]
	goto $label$3 
	
.LABEL $label$46
	*($13) = *($12)
	$13 = ($13 + [1])
	$12 = ($12 + [1])
	if ( ((int_32)$15 != (int_32)$12) ){ goto $label$20 }
	$14 = [9]
	goto $label$3 
	
.LABEL $label$45
	$17 = ($17 + $16)
	$14 = [10]
	goto $label$3 
	
.LABEL $label$44
	*($17) = [0]
	$12 = ($0 + [4])
	$13 = *($12)
	if ( ((uint_32)$13 >= (uint_32)*(($0 + [8]))) ){ goto $label$19 }
	$14 = [21]
	goto $label$3 
	
.LABEL $label$43
	*($13) = *($3)
	*(($13 + [8])) = *($8)
	*($8) = [0]
	*($12) = (*($12) + [12])
	*($3) = (int_64)0
	$12 = *($9)
	$13 = *($1)
	if ( $13 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$42
	CALL $99($0, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$18 }
	$14 = [12]
	goto $label$3 
	
.LABEL $label$41
	CALL _ZdlPv(*($8))
	$14 = [13]
	goto $label$3 
	
.LABEL $label$40
	$12 = *($9)
	$13 = *($1)
	if ( ($13 == 0) ){ goto $label$17 }
	$14 = [14]
	goto $label$3 
	
.LABEL $label$39
	CALL void $3((int_32 $4), (int_32 *($11)), (int_32 $12), (int_32 *(($13 & [-2]) + [4])))
	$13 = *($3)
	if ( ((int_32)$13 == (int_32)*($9)) ){ goto $label$14 }
	$14 = [15]
	goto $label$3 
	
.LABEL $label$38
	$12 = *($3 + [4])
	goto $label$13 
	
.LABEL $label$37
	*($3 + [4]) = $12
	*($3) = $12
	$13 = $12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$36
	if ( ((int_32)*($7) != (int_32)$13) ){ goto $label$9 }
	$14 = [19]
	goto $label$3 
	
.LABEL $label$35
	*($10) = [1]
	goto $label$10 
	
.LABEL $label$34
	$12 = *($3 + [4])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$11 }
	goto $label$12 
	
.LABEL $label$33
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$32
	CALL $159($3)
	
.LABEL $label$31
	$14 = [1]
	goto $label$3 
	
.LABEL $label$30
	$14 = [33]
	goto $label$3 
	
.LABEL $label$29
	$14 = [32]
	goto $label$3 
	
.LABEL $label$28
	$14 = [4]
	goto $label$3 
	
.LABEL $label$27
	$14 = [4]
	goto $label$3 
	
.LABEL $label$26
	$14 = [4]
	goto $label$3 
	
.LABEL $label$25
	$14 = [23]
	goto $label$3 
	
.LABEL $label$24
	$14 = [6]
	goto $label$3 
	
.LABEL $label$23
	$14 = [10]
	goto $label$3 
	
.LABEL $label$22
	$14 = [10]
	goto $label$3 
	
.LABEL $label$21
	$14 = [7]
	goto $label$3 
	
.LABEL $label$20
	$14 = [8]
	goto $label$3 
	
.LABEL $label$19
	$14 = [11]
	goto $label$3 
	
.LABEL $label$18
	$14 = [13]
	goto $label$3 
	
.LABEL $label$17
	$14 = [20]
	goto $label$3 
	
.LABEL $label$16
	$14 = [20]
	goto $label$3 
	
.LABEL $label$15
	$14 = [14]
	goto $label$3 
	
.LABEL $label$14
	$14 = [17]
	goto $label$3 
	
.LABEL $label$13
	$14 = [16]
	goto $label$3 
	
.LABEL $label$12
	$14 = [18]
	goto $label$3 
	
.LABEL $label$11
	$14 = [16]
	goto $label$3 
	
.LABEL $label$10
	$14 = [16]
	goto $label$3 
	
.LABEL $label$9
	$14 = [16]
	goto $label$3 
	
.LABEL $label$8
	$14 = [28]
	goto $label$3 
	
.LABEL $label$7
	$14 = [26]
	goto $label$3 
	
.LABEL $label$6
	$14 = [31]
	goto $label$3 
	
.LABEL $label$5
	$14 = [30]
	goto $label$3 
	
.LABEL $label$4
	$14 = [31]
	goto $label$3 
	$14
	return (unreachable)
}

int_32 .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [8]) = [0]
	$5 = *($3 + [8])
	*($4 + [16]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($4 + [8])
	$7 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4 + [8]) = $6
	$7 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $7, $5)
	*($4 + [20]) = *($3 + [12])
	CALL $108($0, ($4 + [8]), [0])
	if ( (*(($4 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($4 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdaPv($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($4 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$2 = *($4 + [24])
	if ( ((int_32)$2 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$1 = *($4 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($4 + [28]) = $2
	*($4 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$1 = *($4 + [28])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$1) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $2
	$2 = ($0 + [24])
	*(($0 + [16])) = *($2)
	*($2) = $1
	
.LABEL $label$4
	$global$0 = ($4 + [32])
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = [0]
	$3 = *($1 + [8])
	*($2 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $2
	$5 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL _Znaj($3)
	*($2) = $4
	$5 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $5, $3)
	*($2 + [12]) = *($1 + [12])
	*($2 + [16]) = [0]
	$1 = *(($2 + [8]))
	*($2 + [24]) = $1
	$3 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $2
	$5 = ($2 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($2 + [16]) = $5
	$4 = *($2)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($2 + [28]) = *(($2 + [12]))
	$1 = CALL $110([9408], ($2 + [16]), $3)
	if ( (*((($2 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$5 }
	CALL _ZdaPv($3)
	
.LABEL $label$5
	if ( (*(($2 + [8])) <= [9]) ){ goto $label$6 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdaPv($3)
	
.LABEL $label$6
	*($0) = ( [9408] ? [0] : $1 )
	$global$0 = ($2 + [32])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3) = [0]
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $3
	$6 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL _Znaj($4)
	*($3) = $5
	$6 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $6, $4)
	*($3 + [12]) = *($1 + [12])
	*($0) = [0]
	*($3 + [16]) = [0]
	$1 = *(($3 + [8]))
	*($3 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $3
	$5 = ($3 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL _Znaj($1)
	*($3 + [16]) = $5
	$4 = *($3)
	
.LABEL $label$3
	CALL memcpy($5, $4, $1)
	*($3 + [28]) = *(($3 + [12]))
	CALL $109($0, ($3 + [16]))
	if ( (*((($3 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($3 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdaPv($1)
	
.LABEL $label$5
	if ( (*(($3 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdaPv($1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9624])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $189($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [32])
	CALL $127(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $40(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $192($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	*($1 + [32]) = (int_64)0
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$5 = *($0)
	$4 = CALL $186([8352])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9004])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($4 + [8351]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$9 = ($1 + [32])
	$10 = ($1 + [8])
	CALL eosio_assert([1], [10048])
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $11
	$7 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $11
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [10097])
	*(($1 + [24])) = $8
	*($1 + [16]) = (int_64)0
	$7 = $2
	$4 = ($7 + [-48])
	$global$0 = $4
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($7 + [-8])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $10
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = $9
	CALL $51(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($5 + [8]), (int_64)-4992623624440512512, *(*($0 + [8])), $6, $4, [40])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$global$0 = ($3 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	$2 = ($global$0 - [176])
	$global$0 = $2
	CALL eosio_assert(((uint_64)*($0 + [192]) > (uint_64)*($1)), [8551])
	*($2 + [168]) = ($0 + [72])
	CALL $13(($2 + [64]), ($2 + [168]), $1)
	$3 = [0]
	$4 = *($2 + [68])
	if ( ($4 == 0) ){ goto $label$1 }
	$3 = ( $4 ? [0] : ((int_64)*($1) == (int_64)*($4 + [8])) )
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [8566])
	$5 = ($3 + [24])
	$6 = *($5)
	$7 = *($0)
	*((($2 + [64]) + [32])) = [0]
	*($2 + [72]) = $7
	*($2 + [64]) = (int_64)6138663591592764928
	*($2 + [80]) = (int_64)-1
	*($2 + [88]) = (int_64)0
	$4 = CALL $37(($2 + [64]), (uint_64)$6 >> (uint_64)(int_64)8), [10117]
	$8 = *($4) + [8])
	$9 = *($4)
	$10 = *($2 + [88])
	if ( ($10 == 0) ){ goto $label$2 }
	$11 = ($2 + [92])
	$4 = *($11)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$12 = *($4)
	*($4) = [0]
	if ( ($12 == 0) ){ goto $label$6 }
	CALL _ZdlPv($12)
	
.LABEL $label$6
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($2 + [88]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $10
	
.LABEL $label$3
	*($11) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$6 = *($3 + [16])
	CALL __multi3(($2 + [8]), $6, (int_64)$6 >> (int_64)63), (int_64)97, (int_64)0)
	$13 = *($5)
	$6 = *((($2 + [8]) + [8]))
	$7 = *($2 + [8])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [9940])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [9964])
	CALL eosio_assert([1], [9900])
	CALL eosio_assert([1], [9915])
	CALL eosio_assert(((int_64)$8 == (int_64)$13), [9989])
	CALL eosio_assert(((int_64)$9 >= (int_64)((int_64)$7 / (int_64)100)), [8587])
	*((($2 + [128]) + [32])) = [0]
	*($2 + [144]) = (int_64)-1
	*($2 + [152]) = (int_64)0
	$6 = *($0)
	*($2 + [128]) = $6
	$7 = *($1)
	*($2 + [136]) = $7
	$4 = [1]
	$12 = CALL db_lowerbound_i64($6, $7, (int_64)-4992623624440512512, (int_64)0)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	CALL $38(($2 + [128]), $12)
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [8608])
	*($2 + [124]) = [1]
	$14 = (($2 + [128]) + [24])
	$5 = (($2 + [64]) + [8])
	$11 = ($2 + [160])
	$10 = ($2 + [156])
	
.LOOP $label$8:
	$6 = *($0)
	*($2 + [28]) = $0
	*($2 + [24]) = ($2 + [124])
	*($2 + [48]) = $6
	CALL eosio_assert(((int_64)*($2 + [128]) == (int_64)CALL $fimport$6()), [9652])
	*($5) = ($2 + [48])
	*($2 + [68]) = ($2 + [24])
	*($2 + [64]) = ($2 + [128])
	*(($4 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [40]) = ($2 + [128])
	CALL $39(($2 + [64]), $4)
	*($2 + [40]) = $4
	$6 = *($4)
	*($2 + [64]) = $6
	$3 = *($4 + [44])
	*($2 + [172]) = $3
	$12 = *($10)
	if ( ((uint_32)$12 >= (uint_32)*($11)) ){ goto $label$11 }
	*($12 + [8]) = $6
	*($12 + [16]) = $3
	*($2 + [40]) = [0]
	*($12) = $4
	*($10) = ($12 + [24])
	$4 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $40($14, ($2 + [40]), ($2 + [64]), ($2 + [172]))
	$4 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$4 = (*($2 + [124]) + [1])
	*($2 + [124]) = $4
	if ( ($4 <= [9]) ){ goto $label$8 }
	$6 = CALL current_time()
	*(($2 + [92])) = (int_64)0
	*(($2 + [108])) = (int_64)0
	*(($2 + [116])) = (int_64)0
	*($2 + [76]) = [0]
	*($2 + [80]) = [0]
	*($2 + [84 align=4]) = (int_64)0
	*($2 + [100 align=4]) = (int_64)0
	*($2 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$6 / (uint_64)(int_64)1000000)) + [60])
	*($2 + [56]) = (int_64)3617214756542218240
	*($2 + [48]) = *($0)
	*($2 + [40]) = (int_64)-4992623616605552640
	*($2 + [32]) = (int_64)2
	*($2 + [24]) = *($1)
	CALL $41(($2 + [100]), ($2 + [48]), $0, ($2 + [40]), ($2 + [24]))
	*($2 + [84]) = [1]
	$6 = CALL $42($0, $0, $1)
	*($2 + [56]) = (int_64)0
	*($2 + [48]) = $6
	CALL cancel_deferred(($2 + [48]))
	*($2 + [56]) = (int_64)0
	*($2 + [48]) = $6
	$6 = *($0)
	CALL $43(($2 + [24]), ($2 + [64]))
	$4 = *($2 + [24])
	CALL send_deferred(($2 + [48]), $6, $4, (*($2 + [28]) - $4), [0])
	$4 = *($2 + [24])
	if ( ($4 == 0) ){ goto $label$12 }
	*($2 + [28]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	CALL $44(($2 + [64]))
	$0 = *($2 + [152])
	if ( ($0 == 0) ){ goto $label$13 }
	$10 = ($2 + [156])
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$4 = ($4 + [-24])
	$12 = *($4)
	*($4) = [0]
	if ( ($12 == 0) ){ goto $label$17 }
	CALL _ZdlPv($12)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$16 }
	$4 = *(($2 + [152]))
	goto $label$14 
	
.LABEL $label$15
	$4 = $0
	
.LABEL $label$14
	*($10) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$13
	$global$0 = ($2 + [176])
}

int_32 .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9573])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $121($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9573])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $34 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4) = [0]
	$5 = *($2 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $2, $5)
	*($4 + [32]) = [0]
	$2 = *(($4 + [8]))
	*($4 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $4
	$6 = ($4 + [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($2)
	*($4 + [32]) = $6
	$5 = *($4)
	
.LABEL $label$3
	CALL memcpy($6, $5, $2)
	*($4 + [16]) = [0]
	$2 = *((($4 + [32]) + [8]))
	*($4 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$5 = ($4 + [16])
	$6 = ($4 + [32])
	goto $label$5 
	
.LABEL $label$6
	$5 = CALL _Znaj($2)
	*($4 + [16]) = $5
	$2 = *((($4 + [16]) + [8]))
	$6 = *($4 + [32])
	
.LABEL $label$5
	CALL memcpy($5, $6, $2)
	*($4 + [28]) = $3
	if ( (*((($4 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdaPv($2)
	
.LABEL $label$7
	$2 = CALL $95($0, $1, ($4 + [16]))
	if ( (*((($4 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	
.LABEL $label$8
	if ( (*(($4 + [8])) <= [9]) ){ goto $label$9 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdaPv($5)
	
.LABEL $label$9
	$global$0 = ($4 + [48])
	return $2
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9703])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $120(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4) = [0]
	$5 = *($2 + [8])
	*($4 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$2 }
	$6 = $4
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL _Znaj($5)
	*($4) = $6
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($6, $2, $5)
	*($4 + [32]) = [0]
	$2 = *(($4 + [8]))
	*($4 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$5 = $4
	$6 = ($4 + [32])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL _Znaj($2)
	*($4 + [32]) = $6
	$5 = *($4)
	
.LABEL $label$3
	CALL memcpy($6, $5, $2)
	*($4 + [16]) = [0]
	$2 = *((($4 + [32]) + [8]))
	*($4 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$5 = ($4 + [16])
	$6 = ($4 + [32])
	goto $label$5 
	
.LABEL $label$6
	$5 = CALL _Znaj($2)
	*($4 + [16]) = $5
	$2 = *((($4 + [16]) + [8]))
	$6 = *($4 + [32])
	
.LABEL $label$5
	CALL memcpy($5, $6, $2)
	*($4 + [28]) = $3
	if ( (*((($4 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($4 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL _ZdaPv($2)
	
.LABEL $label$7
	$2 = CALL $94($0, $1, ($4 + [16]))
	if ( (*((($4 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$5 = *($4 + [16])
	if ( ($5 == 0) ){ goto $label$8 }
	CALL _ZdaPv($5)
	
.LABEL $label$8
	if ( (*(($4 + [8])) <= [9]) ){ goto $label$9 }
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdaPv($5)
	
.LABEL $label$9
	$global$0 = ($4 + [48])
	return $2
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	*($0) = (int_64)0
	$1 = CALL $186([8352])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9004])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($1 + [8351]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = $2
	CALL eosio_assert([1], [10048])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$11 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [10097])
	$1 = CALL $186([8352])
	if ( ($1 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9004])
	goto $label$14 
	
.LABEL $label$15
	if ( ($1 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = (int_64)0
	
.LOOP $label$16:
	$3 = *(($1 + [8351]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$17
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$16 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$2 = (int_64)4
	
.LABEL $label$12
	*($0 + [24]) = (int_64)0
	*(($1 = ($0 + [32]))) = $2
	CALL eosio_assert([1], [10048])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$2 = $4
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$22 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$3 = [0]
	
.LABEL $label$18
	CALL eosio_assert($3, [10097])
	$1 = CALL $186([8928])
	if ( ($1 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9004])
	goto $label$25 
	
.LABEL $label$26
	if ( ($1 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$2 = (int_64)0
	
.LOOP $label$27:
	$3 = *(($1 + [8927]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$28
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$27 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$2 = (int_64)4
	
.LABEL $label$23
	*($0 + [40]) = (int_64)0
	*(($1 = ($0 + [48]))) = $2
	CALL eosio_assert([1], [10048])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$2 = $4
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$33 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$3 = [0]
	
.LABEL $label$29
	CALL eosio_assert($3, [10097])
	$1 = CALL $186([8928])
	if ( ($1 <= [8]) ){ goto $label$37 }
	CALL eosio_assert([0], [9004])
	goto $label$36 
	
.LABEL $label$37
	if ( ($1 == 0) ){ goto $label$35 }
	
.LABEL $label$36
	$2 = (int_64)0
	
.LOOP $label$38:
	$3 = *(($1 + [8927]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$39 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$39
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$38 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$34 
	
.LABEL $label$35
	$2 = (int_64)4
	
.LABEL $label$34
	*($0 + [56]) = (int_64)0
	*(($1 = ($0 + [64]))) = $2
	CALL eosio_assert([1], [10048])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$2 = $4
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$44 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$3 = [0]
	
.LABEL $label$40
	CALL eosio_assert($3, [10097])
	*($0 + [72]) = [0]
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = *($4 + [4])
	$7 = CALL $186([8352])
	if ( ($7 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9004])
	goto $label$3 
	
.LABEL $label$4
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = (int_64)0
	
.LOOP $label$5:
	$9 = *(($7 + [8351]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$6
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$10 = *(($4 + [4]))
	if ( ((int_64)*($6 + [8]) != (int_64)$8) ){ goto $label$8 }
	*($1 + [8]) = *($10)
	*(($1 + [16])) = *(($10 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$7 = CALL $186([8928])
	if ( ($7 <= [8]) ){ goto $label$12 }
	CALL eosio_assert([0], [9004])
	goto $label$11 
	
.LABEL $label$12
	if ( ($7 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$8 = (int_64)0
	
.LOOP $label$13:
	$9 = *(($7 + [8927]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$14 }
	CALL eosio_assert([0], [9049])
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$13 }
	if ( ((int_64)*($10 + [8]) != (int_64)((int_64)((int_64)$8 << (int_64)8) | (int_64)4)) ){ goto $label$7 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_64)*($10 + [8]) != (int_64)4) ){ goto $label$7 }
	
.LABEL $label$9
	$7 = *(($4 + [4]))
	*($1 + [40]) = *($7)
	*(($1 + [48])) = *(($7 + [8]))
	
.LABEL $label$7
	$9 = $2
	$7 = ($9 + [-80])
	$global$0 = $7
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($9 + [-7])
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [24])
	*($3 + [36]) = ($1 + [40])
	*($3 + [40]) = ($1 + [56])
	*($3 + [44]) = ($1 + [72])
	CALL $67(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($5 + [8]), (int_64)-5915276457541632000, *(*($0 + [8])), $8, $7, [73])
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$15 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$15
	$global$0 = ($3 + [48])
}

void .FUNC $192 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19028])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18836]
	$3 = (((int_32)$1 * (int_32)[12]) + [18836])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $190 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $191($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8215])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $191 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10636]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10640])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10636]) = [1]
	$2 = ($2 << [16])
	*([0] + [10640]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10640])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10640]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10636]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10636]) = [1]
	$3 = ($3 << [16])
	*([0] + [10640]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10640])
	
.LABEL $label$10
	*([0] + [10640]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}