(data (i32.const 4) "\80g\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "creator  should be _self\00")
(data (i32.const 144) "unable to find key\00")
(data (i32.const 176) "cannot pass end iterator to erase\00")
(data (i32.const 224) "cannot increment end iterator\00")
(data (i32.const 256) "object passed to erase is not in multi_index\00")
(data (i32.const 304) "cannot erase objects in table of another contract\00")
(data (i32.const 368) "attempt to remove object that was not in multi_index\00")
(data (i32.const 432) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 496) "active\00")
(data (i32.const 512) "transfer\00")
(data (i32.const 528) "push token\00")
(data (i32.const 544) "write\00")
(data (i32.const 560) "error reading iterator\00")
(data (i32.const 592) "read\00")
(data (i32.const 608) "get\00")
(data (i32.const 624) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 688) "invalid symbol name\00")
(data (i32.const 720) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 784) "cannot decrement iterator at beginning of table\00")
(data (i32.const 832) "game is not exist\00")
(data (i32.const 864) "cannot pass end iterator to modify\00")
(data (i32.const 912) "object passed to modify is not in multi_index\00")
(data (i32.const 960) "cannot modify objects in table of another contract\00")
(data (i32.const 1024) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1088) "cannot create objects in table of another contract\00")
(data (i32.const 1152) "process\00")
(data (i32.const 1168) "it can\'t claim candy before game is over\00")
(data (i32.const 1216) "the global table is not exist\00")
(data (i32.const 1248) "the game is not exist\00")
(data (i32.const 1280) "game is stop\00")
(data (i32.const 1296) "eosio.token\00")
(data (i32.const 1312) "no eos balance object found\00")
(data (i32.const 1344) "the player account should has more than 1 EOS\00")
(data (i32.const 1392) "game is not exist \00")
(data (i32.const 1424) "it\'s not in game time\00")
(data (i32.const 1456) "It\'s not time to blowing\00")
(data (i32.const 1488) "game is full\00")
(data (i32.const 1504) "seed is not valid\00")
(data (i32.const 1536) "user has enter the game\00")
(data (i32.const 1568) "next primary key in table is at autoincrement limit\00")
(data (i32.const 10016) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$18 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$19 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN11blowballoon6createEyyyy" (func $8))
(export "_ZN11blowballoon4blowEyyy" (func $10))
(export "_ZN11blowballoon8addcandyEyyyN5eosio5assetE" (func $12))
(export "_ZN11blowballoon7processEy" (func $14))
(export "_ZN11blowballoon9cleangameEyy" (func $16))
(export "_ZN11blowballoon11cleanglobalEy" (func $18))
(export "_ZN11blowballoon10claimcandyEy" (func $19))
(export "_ZN11blowballoon4stopEy" (func $20))
(export "_ZN11blowballoon5startEy" (func $21))
(export "_ZN11blowballoon11cleanplayerEy" (func $22))
(export "_ZN11blowballoon6finishEyy" (func $23))
(export "_ZN11blowballoon9pushcandyEyy" (func $24))
(export "_ZN11blowballoon13transfertokenEyyN5eosio5assetE" (func $28))
(export "_ZN11blowballoon11processnextEyy" (func $50))
(export "_ZN11blowballoon8_next_idEv" (func $52))
(export "_ZN11blowballoon8_processEyy" (func $64))
(export "_ZN11blowballoon11assigncandyEyy" (func $72))
(export "malloc" (func $81))
(export "free" (func $84))
(export "memcmp" (func $89))
(export "strlen" (func $90))
(table $0 13 13 anyfunc)
(elem (i32.const 0) $91 $21 $18 $10 $8 $14 $24 $19 $16 $20 $12 $22 $23)



int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $91 ()
{
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $85(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $6
	CALL $86($6)
	
.LABEL $label$11
	CALL $86($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $86($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $85(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $86($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $86($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $85(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $86($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [544])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [544])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [544])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [544])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $44(CALL $43($0, ($1 + [48])), ($1 + [60]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [960])
	*($1 + [8]) = (int_64)3
	$2 = *($1)
	CALL eosio_assert([1], [1024])
	$4 = *($1 + [48])
	$3 = *(($1 + [52]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	$7 = [48]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$3 = ($5 + [-24])
	$7 = ((($3 - ((uint_32)$3 % (uint_32)[24])) + $7) + [24])
	
.LABEL $label$2
	$4 = *($1 + [60])
	$3 = *(($1 + [64]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	$7 = (($5 & [-8]) + $7)
	
.LABEL $label$4
	if ( ($7 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	CALL $42($9, $1)
	CALL db_update_i64(*($1 + [76]), (int_64)0, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $85([88])) + [48 align=4]) = (int_64)0
	*($6 + [56 align=4]) = (int_64)0
	*($6 + [64 align=4]) = (int_64)0
	*($6 + [72]) = $0
	CALL $45(($8 + [32]), $6)
	*($6 + [76]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [76])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $46(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [60])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [64])) = $7
	CALL $86($7)
	
.LABEL $label$10
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [52])) = $7
	CALL $86($7)
	
.LABEL $label$11
	CALL $86($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [608])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $48($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [592])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $85(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [60])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [64])) = $6
	CALL $86($6)
	
.LABEL $label$11
	$6 = *($1 + [48])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($1 + [52])) = $6
	CALL $86($6)
	
.LABEL $label$12
	CALL $86($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $86($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $47(CALL $37($0, ($1 + [48])), ($1 + [60]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [592])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [544])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [544])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN11blowballoon6createEyyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	*($10 + [16]) = $2
	*($10 + [8]) = $3
	*($10) = $4
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [112])
	CALL require_auth($1)
	*($10 + [64]) = $0
	*($10 + [68]) = ($10 + [16])
	*($10 + [72]) = ($10 + [8])
	*($10 + [76]) = $10
	*($10 + [56]) = $1
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)CALL $fimport$2()), [1088])
	$7 = ($0 + [8])
	*($10 + [32]) = $7
	*($10 + [36]) = ($10 + [64])
	*($10 + [40]) = ($10 + [56])
	*(($8 = CALL $85([88])) + [48 align=4]) = (int_64)0
	*($8 + [56 align=4]) = (int_64)0
	*($8 + [64 align=4]) = (int_64)0
	*($8 + [72]) = $7
	CALL $78(($10 + [32]), $8)
	*($10 + [48]) = $8
	$4 = *($8)
	*($10 + [32]) = $4
	$9 = *($8 + [76])
	*($10 + [28]) = $9
	$6 = ($0 + [36])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [40]))) ){ goto $label$2 }
	*($7 + [8]) = $4
	*($7 + [16]) = $9
	*($10 + [48]) = [0]
	*($7) = $8
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $46(($0 + [32]), ($10 + [48]), ($10 + [32]), ($10 + [28]))
	
.LABEL $label$1
	$8 = *($10 + [48])
	*($10 + [48]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	$7 = *($8 + [60])
	if ( ($7 == 0) ){ goto $label$4 }
	*(($8 + [64])) = $7
	CALL $86($7)
	
.LABEL $label$4
	$7 = *($8 + [48])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($8 + [52])) = $7
	CALL $86($7)
	
.LABEL $label$5
	CALL $86($8)
	
.LABEL $label$3
	$5 = *(($0 + [72]))
	$9 = *(($0 + [76]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$7:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$6 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = ($0 + [48])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$9 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$7), [432])
	goto $label$8 
	
.LABEL $label$9
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$8 }
	$8 = CALL $6($7, $9)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$7), [432])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [864])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$7), [912])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [960])
	*($8 + [16]) = (int_64)0
	$1 = *($8)
	CALL eosio_assert([1], [1024])
	CALL eosio_assert([1], [544])
	CALL memcpy(($10 + [64]), $8, [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($10 + [64]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($10 + [64]) + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), (int_64)0, ($10 + [64]), [24])
	$8 = ($0 + [64])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$10 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($10 + [96])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($1 + [4])
	$8 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	*($9) = (int_64)0
	*($9 + [16]) = (int_64)0
	*($9 + [24]) = (int_64)0
	*($9 + [36]) = $1
	*($9 + [32]) = $1
	*($9 + [40]) = ($1 + $3)
	*($9 + [48]) = ($9 + [32])
	*($9 + [56]) = $9
	CALL $77(($9 + [56]), ($9 + [48]))
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$7 = *(($9 + [24]))
	$6 = *(($9 + [16]))
	$5 = *(($9 + [8]))
	$4 = *($9)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$8 = *((*($1) + $8))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 $5), (int_64 $6), (int_64 $7), (int_64 $8))
	*([0] + [4]) = ($9 + [64])
	return [1]
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [560])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $85([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [592])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [592])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [592])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $49(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $86($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $7 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1088])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $85([40])) + [24]) = $1
	CALL $80(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [28])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $49(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $86($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [336])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($9 + [208])) = $0
	*(($9 + [216])) = (int_64)-1
	*(($9 + [224])) = (int_64)0
	*(($9 + [232])) = [0]
	*($9 + [200]) = $0
	*($9 + [192]) = $0
	*($9 + [240]) = $0
	*(($9 + [248])) = $0
	*(($9 + [256])) = (int_64)-1
	*(($9 + [264])) = [0]
	*(($9 + [268])) = [0]
	*(($9 + [272])) = [0]
	*($9 + [280]) = $0
	*(($9 + [288])) = $0
	*(($9 + [296])) = (int_64)-1
	*(($9 + [304])) = [0]
	*(($9 + [308])) = [0]
	*(($9 + [312])) = [0]
	$4 = ($9 + [240])
	$3 = CALL db_lowerbound_i64($0, $0, (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$23 }
	CALL $6($4, $3)
	goto $label$22 
	
.LABEL $label$23
	*($9 + [320]) = ($9 + [192])
	CALL $7(($9 + [328]), $4, $0, ($9 + [320]))
	
.LABEL $label$22
	if ( ((int_64)$2 > (int_64)4921564820002537471) ){ goto $label$35 }
	if ( ((int_64)$2 > (int_64)-4149697620714979329) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)-5915331450302889984) ){ goto $label$32 }
	if ( ((int_64)$2 == (int_64)-5858949905297440768) ){ goto $label$31 }
	if ( ((int_64)$2 != (int_64)-4157529991795441664) ){ goto $label$24 }
	*($9 + [124]) = [0]
	*($9 + [120]) = [1]
	*($9 + [64 align=4]) = *($9 + [120])
	CALL $15(($9 + [192]), ($9 + [64]))
	goto $label$24 
	
.LABEL $label$35
	if ( ((int_64)$2 > (int_64)4923676661120151039) ){ goto $label$33 }
	if ( ((int_64)$2 == (int_64)4921564820002537472) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)4923676500786413568) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)4923676506724082176) ){ goto $label$24 }
	*($9 + [148]) = [0]
	*($9 + [144]) = [2]
	*($9 + [40 align=4]) = *($9 + [144])
	CALL $15(($9 + [192]), ($9 + [40]))
	goto $label$24 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)-4149697620714979328) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)3626105017762578432) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)4353221621062828032) ){ goto $label$24 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [3]
	*($9 + [8 align=4]) = *($9 + [176])
	CALL $11(($9 + [192]), ($9 + [8]))
	goto $label$24 
	
.LABEL $label$33
	if ( ((int_64)$2 == (int_64)4923676661120151040) ){ goto $label$26 }
	if ( ((int_64)$2 == (int_64)6604225611667865600) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$24 }
	*($9 + [188]) = [0]
	*($9 + [184]) = [4]
	*($9) = *($9 + [184])
	CALL $9(($9 + [192]), $9)
	goto $label$24 
	
.LABEL $label$32
	*($9 + [164]) = [0]
	*($9 + [160]) = [5]
	*($9 + [24 align=4]) = *($9 + [160])
	CALL $15(($9 + [192]), ($9 + [24]))
	goto $label$24 
	
.LABEL $label$31
	*($9 + [100]) = [0]
	*($9 + [96]) = [6]
	*($9 + [88 align=4]) = *($9 + [96])
	CALL $17(($9 + [192]), ($9 + [88]))
	goto $label$24 
	
.LABEL $label$30
	*($9 + [140]) = [0]
	*($9 + [136]) = [7]
	*($9 + [48 align=4]) = *($9 + [136])
	CALL $15(($9 + [192]), ($9 + [48]))
	goto $label$24 
	
.LABEL $label$29
	*($9 + [156]) = [0]
	*($9 + [152]) = [8]
	*($9 + [32 align=4]) = *($9 + [152])
	CALL $17(($9 + [192]), ($9 + [32]))
	goto $label$24 
	
.LABEL $label$28
	*($9 + [132]) = [0]
	*($9 + [128]) = [9]
	*($9 + [56 align=4]) = *($9 + [128])
	CALL $15(($9 + [192]), ($9 + [56]))
	goto $label$24 
	
.LABEL $label$27
	*($9 + [172]) = [0]
	*($9 + [168]) = [10]
	*($9 + [16 align=4]) = *($9 + [168])
	CALL $13(($9 + [192]), ($9 + [16]))
	goto $label$24 
	
.LABEL $label$26
	*($9 + [116]) = [0]
	*($9 + [112]) = [11]
	*($9 + [72 align=4]) = *($9 + [112])
	CALL $15(($9 + [192]), ($9 + [72]))
	goto $label$24 
	
.LABEL $label$25
	*($9 + [108]) = [0]
	*($9 + [104]) = [12]
	*($9 + [80 align=4]) = *($9 + [104])
	CALL $17(($9 + [192]), ($9 + [80]))
	
.LABEL $label$24
	CALL $25(($9 + [192]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [336])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN11blowballoon7processEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [112])
	CALL require_auth($1)
	$2 = ($0 + [8])
	$5 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $40($2, $3)
	
.LABEL $label$1
	*($6 + [16]) = [0]
	*($6 + [8]) = (int_64)0
	if ( ($5 == 0) ){ goto $label$2 }
	$4 = (($6 + [8]) + [8])
	
.LOOP $label$3:
	if ( ((int_64)*($5 + [8]) != (int_64)3) ){ goto $label$4 }
	if ( ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= (uint_64)((int_64)*($5 + [24]) + (int_64)20)) ){ goto $label$4 }
	$3 = *($6 + [12])
	if ( ((int_32)$3 == (int_32)*($4)) ){ goto $label$5 }
	*($3) = *($5)
	*($6 + [12]) = ($3 + [8])
	goto $label$4 
	
.LABEL $label$5
	CALL $63(($6 + [8]), $5)
	
.LABEL $label$4
	CALL eosio_assert([1], [224])
	$5 = CALL db_next_i64(*($5 + [76]), ($6 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $40($2, $5)
	goto $label$3 
	
.LABEL $label$6
	$5 = *($6 + [8])
	if ( ((int_32)$5 == (int_32)*($6 + [12])) ){ goto $label$2 }
	
.LOOP $label$7:
	CALL _ZN11blowballoon9cleangameEyy($0, $1, *($5))
	$5 = ($5 + [8])
	if ( ((int_32)$5 != (int_32)*($6 + [12])) ){ goto $label$7 }
	
.LABEL $label$2
	$5 = [0]
	$3 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$5 = CALL $6(($0 + [48]), $3)
	
.LABEL $label$8
	$3 = CALL db_lowerbound_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$10 }
	CALL $40($2, $3)
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_64)*($5 + [16]) != (int_64)1) ){ goto $label$9 }
	CALL eosio_assert([0], [1280])
	
.LABEL $label$9
	$5 = CALL db_lowerbound_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$5 = CALL $40($2, $5)
	
.LOOP $label$12:
	if ( ((uint_64)((int_64)*($5 + [8]) + (int_64)-1) > (uint_64)(int_64)1) ){ goto $label$13 }
	CALL _ZN11blowballoon8_processEyy($0, $1, *($5))
	
.LABEL $label$13
	CALL eosio_assert([1], [224])
	$5 = CALL db_next_i64(*($5 + [76]), ($6 + [24]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$5 = CALL $40($2, $5)
	goto $label$12 
	
.LABEL $label$11
	CALL _ZN11blowballoon11processnextEyy($0, $1, (int_64)5)
	$5 = *($6 + [8])
	if ( ($5 == 0) ){ goto $label$14 }
	*($6 + [12]) = $5
	CALL $86($5)
	
.LABEL $label$14
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC _ZN11blowballoon9cleangameEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [112])
	CALL require_auth($1)
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$5), [432])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$6 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $40($5, $6)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$5), [432])
	
.LABEL $label$3
	$4 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($4, [1248])
	$6 = CALL $61($8, CALL $60($5, $2, [144]))
	$0 = *($6 + [48])
	*($6 + [48]) = [0]
	*(($6 + [52])) = (int_64)0
	if ( ($0 == 0) ){ goto $label$5 }
	CALL $86($0)
	
.LABEL $label$5
	$0 = *($6 + [60])
	*($6 + [60]) = [0]
	*(($6 + [64])) = (int_64)0
	if ( ($0 == 0) ){ goto $label$6 }
	CALL $86($0)
	
.LABEL $label$6
	CALL eosio_assert($4, [176])
	CALL eosio_assert($4, [224])
	$4 = CALL db_next_i64(*($7 + [76]), ($8 + [72]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$7 }
	CALL $40($5, $4)
	
.LABEL $label$7
	CALL $62($5, $7)
	$5 = *($6 + [60])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($6 + [64])) = $5
	CALL $86($5)
	
.LABEL $label$8
	$5 = *($6 + [48])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($6 + [52])) = $5
	CALL $86($5)
	
.LABEL $label$9
	*([0] + [4]) = ($8 + [80])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [592])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC _ZN11blowballoon4blowEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	*($13 + [56]) = $1
	CALL require_auth($1)
	CALL eosio_assert([1], [624])
	$10 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$4 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [688])
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [1296]
	$11 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$10 > (uint_64)(int_64)10) ){ goto $label$11 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$4 = ($4 + [165])
	goto $label$9 
	
.LABEL $label$11
	$12 = (int_64)0
	if ( ((int_64)$10 == (int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$7
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)-5)
	$11 = ((int_64)$12 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)1)
	if ( ((int_64)$10 != (int_64)13) ){ goto $label$6 }
	*((($13 + [16]) + [32])) = [0]
	*($13 + [24]) = $1
	*($13 + [16]) = $11
	*($13 + [32]) = (int_64)-1
	*($13 + [40]) = (int_64)0
	CALL eosio_assert(((int_64)*(CALL $70(($13 + [16]), (int_64)5459781, [1312])) > (int_64)9999), [1344])
	$5 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$12 }
	$8 = ($7 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$13:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$12 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$6 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$15 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$6), [432])
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$14 }
	$7 = CALL $40($6, $8)
	CALL eosio_assert(((int_32)*($7 + [72]) == (int_32)$6), [432])
	
.LABEL $label$14
	$8 = [0]
	$5 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($5, [1392])
	if ( (uint_64)(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= *($7 + [16])) ){ goto $label$16 }
	$8 = ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= (uint_64)*($7 + [24]))
	
.LABEL $label$16
	CALL eosio_assert($8, [1424])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)2), [1456])
	CALL eosio_assert(((uint_64)*($7 + [40]) > (uint_64)*($7 + [32])), [1488])
	CALL eosio_assert(((int_64)$3 != (int_64)0), [1504])
	$4 = *(($7 + [64]))
	$8 = *($7 + [60])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$17 }
	$10 = *($13 + [56])
	
.LOOP $label$18:
	if ( ((int_64)*($8) == (int_64)$10) ){ goto $label$17 }
	$8 = ($8 + [8])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$18 }
	$8 = $4
	
.LABEL $label$17
	CALL eosio_assert(((int_32)$8 == (int_32)$4), [1536])
	*($13 + [8]) = ($13 + [56])
	CALL eosio_assert($5, [864])
	CALL $71($6, $7, ($13 + [8]))
	CALL _ZN11blowballoon11assigncandyEyy($0, *($13 + [56]), $2)
	$7 = *($13 + [40])
	if ( ($7 == 0) ){ goto $label$19 }
	$6 = ($13 + [44])
	$8 = *($6)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$21 }
	
.LOOP $label$22:
	$8 = ($8 + [-24])
	$4 = *($8)
	*($8) = [0]
	if ( ($4 == 0) ){ goto $label$23 }
	CALL $86($4)
	
.LABEL $label$23
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$22 }
	$8 = *(($13 + [40]))
	goto $label$20 
	
.LABEL $label$21
	$8 = $7
	
.LABEL $label$20
	*($6) = $7
	CALL $86($8)
	
.LABEL $label$19
	*([0] + [4]) = ($13 + [64])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [592])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [592])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [592])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC _ZN11blowballoon8addcandyEyyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	*($10 + [40]) = $3
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [112])
	CALL require_auth($1)
	$5 = *(($0 + [32]))
	$9 = *(($0 + [36]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$1 }
	$8 = ($9 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$9 = $8
	$7 = ($8 + [-24])
	$8 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [8])
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	$8 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$7), [432])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $40($7, $9)
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)$7), [432])
	
.LABEL $label$3
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [832])
	*(($10 + [36])) = *(($4 + [12]))
	*(($10 + [32])) = *(($4 + [8]))
	*((($10 + [16]) + [12])) = *(($4 + [4]))
	*($10 + [16]) = $3
	*($10 + [24]) = *($4)
	*($10) = $4
	*($10 + [4]) = ($10 + [40])
	*($10 + [8]) = ($10 + [16])
	CALL eosio_assert($9, [864])
	CALL $68($7, $8, $10)
	*([0] + [4]) = ($10 + [48])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$9 = (*([0] + [4]) - [112])
	$11 = $9
	*([0] + [4]) = $9
	$2 = *($1 + [4])
	$10 = *($1)
	$1 = [0]
	$7 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	CALL read_action_data($7, $3)
	
.LABEL $label$1
	*(($11 + [56])) = (int_64)1397703940
	*($11 + [32]) = (int_64)0
	*($11 + [24]) = (int_64)0
	*($11 + [40]) = (int_64)0
	*($11 + [48]) = (int_64)0
	CALL eosio_assert([1], [624])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [688])
	*($11 + [100]) = $7
	*($11 + [96]) = $7
	*($11 + [104]) = ($7 + $3)
	*($11 + [64]) = ($11 + [96])
	*($11 + [80]) = ($11 + [24])
	CALL $67(($11 + [80]), ($11 + [64]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($7)
	
.LABEL $label$8
	$8 = *((($11 + [24]) + [8]))
	*(($11 + [76])) = *(($11 + [60]))
	*(($1 = (($11 + [64]) + [8]))) = *(($11 + [56]))
	$4 = *($11 + [24])
	*($11 + [64]) = *($11 + [48])
	*($11 + [68]) = *(($11 + [52]))
	$5 = *(($11 + [40]))
	*((($11 + [80]) + [8])) = *($1)
	*($11 + [80]) = *($11 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$10 = *((*($1) + $10))
	
.LABEL $label$9
	$6 = *((($11 + [80]) + [8]))
	*((($11 + [96]) + [8])) = $6
	*((($11 + [8]) + [8])) = $6
	$6 = *($11 + [80])
	*($11 + [96]) = $6
	*($11 + [8]) = $6
	CALL void $1((int_32 $4), (int_64 $8), (int_64 $5), (int_64 ($11 + [8])), (int_32 $10))
	*([0] + [4]) = ($11 + [112])
	return [1]
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [560])
	if ( ((uint_32)$7 <= (uint_32)[512]) ){ goto $label$6 }
	$3 = CALL malloc($7)
	CALL db_get_i64($1, $3, $7)
	CALL free($3)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	CALL db_get_i64($1, $3, $7)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $85([32])) + [8]) = (int_64)1397703940
	*($5) = (int_64)0
	CALL eosio_assert([1], [624])
	$10 = ($5 + [8])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [688])
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [592])
	CALL memcpy($5, $3, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [592])
	CALL memcpy($10, ($3 + [8]), [8])
	*($5 + [20]) = $1
	*($9 + [24]) = $5
	$8 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($9 + [16]) = $8)
	$7 = *($5 + [20])
	*($9 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($6 + [8]) = $8
	*($6 + [16]) = $7
	*($9 + [24]) = [0]
	*($6) = $5
	*($1) = ($6 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $76($2, ($9 + [24]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$12
	$6 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $86($6)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
	return $5
}

void .FUNC _ZN11blowballoon11cleanglobalEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [112])
	CALL require_auth($1)
	$2 = *(($0 + [72]))
	$6 = *(($0 + [76]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$5 = ($6 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [48])
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [432])
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $6($4, $6)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)$4), [432])
	
.LABEL $label$3
	$6 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($6, [1216])
	CALL eosio_assert($6, [176])
	CALL eosio_assert($6, [224])
	$6 = CALL db_next_i64(*($5 + [28]), ($7 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	CALL $6($4, $6)
	
.LABEL $label$5
	CALL $59($4, $5)
	*([0] + [4]) = ($7 + [16])
}

void .FUNC _ZN11blowballoon10claimcandyEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	CALL require_auth($1)
	$7 = *(($0 + [112]))
	$9 = *(($0 + [116]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$1 }
	$6 = ($9 + [-24])
	$3 = ([0] - $7)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$9 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = ($0 + [88])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$6 }
	$5 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$2), [432])
	if ( $5 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $27($2, $6)
	CALL eosio_assert(((int_32)*($5 + [20]) == (int_32)$2), [432])
	
.LABEL $label$5
	$6 = CALL db_lowerbound_i64(*($0 + [8]), *(($0 + [16])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = (CALL $40(($0 + [8]), $6) + [8])
	
.LOOP $label$8:
	if ( ((uint_64)((int_64)*($6) + (int_64)-1) > (uint_64)(int_64)1) ){ goto $label$8 }
	CALL eosio_assert([0], [1168])
	goto $label$8 
	
.LABEL $label$7
	$7 = ($5 + [12])
	$4 = *($7)
	$6 = *($5 + [8])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$9 = ($6 + [8])
	if ( ((int_64)*($9) < (int_64)1) ){ goto $label$11 }
	*(($4 = (($10 + [40]) + [12]))) = *(($6 + [20]))
	*(($3 = (($10 + [40]) + [8]))) = *(($6 + [16]))
	*($10 + [44]) = *(($6 + [12]))
	*($10 + [40]) = *($9)
	$8 = *($6)
	*(($10 + [12])) = *($4)
	*(($10 + [8])) = *($3)
	*($10 + [4]) = *($10 + [44])
	*($10) = *($10 + [40])
	CALL _ZN11blowballoon13transfertokenEyyN5eosio5assetE($0, $8, $1, $10)
	$4 = *($7)
	
.LABEL $label$11
	$6 = ($6 + [24])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = CALL $29($2, $1, [144])
	*((($10 + [16]) + [12])) = (int_64)0
	*($10 + [24]) = [0]
	*($10 + [16]) = *($6)
	$4 = (*(($6 + [12])) - *($6 + [8]))
	$9 = ((int_32)$4 / (int_32)[24])
	$3 = ($10 + [24])
	if ( ($4 == 0) ){ goto $label$13 }
	if ( ((uint_32)$9 >= (uint_32)[178956971]) ){ goto $label$3 }
	$4 = CALL $85($4)
	*(($3 = (($10 + [16]) + [8]))) = $4
	*(($0 = ($10 + [32]))) = ($4 + ((int_32)$9 * (int_32)[24]))
	*(($9 = (($10 + [16]) + [12]))) = $4
	$7 = *(($6 + [8]))
	$6 = (*(($6 + [12])) - $7)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($4, $7, $6)
	*($9) = ($4 + ((int_32)((uint_32)$6 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$14
	*($0) = [0]
	*($3) = (int_64)0
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $86($4)
	goto $label$12 
	
.LABEL $label$13
	*(($10 + [32])) = [0]
	*($3) = (int_64)0
	
.LABEL $label$12
	CALL eosio_assert([1], [176])
	CALL eosio_assert([1], [224])
	$6 = CALL db_next_i64(*($5 + [24]), ($10 + [56]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$15 }
	CALL $27($2, $6)
	
.LABEL $label$15
	CALL $30($2, $5)
	$6 = *($10 + [24])
	if ( ($6 == 0) ){ goto $label$4 }
	*(($10 + [28])) = $6
	CALL $86($6)
	
.LABEL $label$4
	*([0] + [4]) = ($10 + [64])
	return (unreachable)
	
.LABEL $label$3
	CALL $88($3)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [544])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [544])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $35($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [304])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [368])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $86($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $86($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC _ZN11blowballoon11processnextEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [128])
	*([0] + [4]) = $10
	*($10 + [104]) = $1
	$7 = CALL current_time()
	*(($10 + [68])) = [0]
	*(($10 + [72])) = [0]
	*($10 + [52]) = [0]
	*($10 + [56]) = [0]
	*($10 + [60]) = [0]
	*($10 + [64]) = [0]
	*($10 + [40]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($10 + [76]) = [0]
	*(($10 + [80])) = [0]
	*(($10 + [84])) = [0]
	*($10 + [88]) = [0]
	*(($10 + [92])) = [0]
	*(($10 + [96])) = [0]
	$3 = ($10 + [76])
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [496]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	*($10 + [24]) = $8
	*($10 + [16]) = $1
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1152]
	$8 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$7 > (uint_64)(int_64)6) ){ goto $label$12 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$4 = ($4 + [165])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$8
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$7 }
	*($10 + [112]) = $8
	*($10 + [8]) = $1
	CALL $51($3, ($10 + [16]), ($10 + [104]), ($10 + [112]), ($10 + [8]))
	*(($10 + [60])) = $2
	*($10 + [16]) = CALL _ZN11blowballoon8_next_idEv($0)
	*($10 + [24]) = (int_64)0
	$7 = *($10 + [104])
	CALL $53(($10 + [112]), ($10 + [40]))
	$5 = *($10 + [112])
	CALL send_deferred(($10 + [16]), $7, $5, (*($10 + [116]) - $5), [1])
	$5 = *($10 + [112])
	if ( ($5 == 0) ){ goto $label$13 }
	*($10 + [116]) = $5
	CALL $86($5)
	
.LABEL $label$13
	CALL $54(($10 + [40]))
	*([0] + [4]) = ($10 + [128])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $85(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $85([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $31(($8 + [28]), [8])
	$2 = *($8 + [28])
	CALL eosio_assert(((int_32)(*($2) - $2) > (int_32)[7]), [544])
	CALL memcpy($2, $4, [8])
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $86($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $86($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $86($6)
	
.LABEL $label$12
	(unreachable)
}

int_64 .FUNC _ZN11blowballoon8_next_idEv (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	$1 = ($0 + [48])
	$4 = [0]
	$2 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $6($1, $2)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [864])
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$1), [912])
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [960])
	*($4 + [8]) = ((int_64)*($4 + [8]) + (int_64)1)
	$3 = *($4)
	CALL eosio_assert([1], [1024])
	CALL eosio_assert([1], [544])
	CALL memcpy($5, $4, [8])
	CALL eosio_assert([1], [544])
	$1 = ($4 + [8])
	CALL memcpy(($5 | [8]), $1, [8])
	CALL eosio_assert([1], [544])
	CALL memcpy(($5 + [16]), ($4 + [16]), [8])
	CALL db_update_i64(*($4 + [28]), (int_64)0, $5, [24])
	$4 = ($0 + [64])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$2 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	$3 = *($1)
	*([0] + [4]) = ($5 + [32])
	return $3
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $55($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $31($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $56($4, $1)
	CALL $58(CALL $57(CALL $57($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $86($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $86($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $86($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $86($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $86($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $86($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $86($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $86($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [544])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [544])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [544])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [544])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [544])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [544])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [544])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [544])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [544])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [544])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [544])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $35(CALL $34($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [544])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [544])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $29 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$0), [432])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $27($0, $5)
	CALL eosio_assert(((int_32)*($6 + [20]) == (int_32)$0), [432])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC _ZN11blowballoon13transfertokenEyyN5eosio5assetE (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [144])
	*([0] + [4]) = $13
	$4 = *($0)
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [496]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)5) ){ goto $label$6 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$5 = ($5 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [512]
	$12 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$9 > (uint_64)(int_64)7) ){ goto $label$12 }
	$5 = *($7)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$5 = ($5 + [165])
	goto $label$10 
	
.LABEL $label$12
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$8
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$12 = ((int_64)$11 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$7 }
	*(($13 + [16])) = [0]
	*($13 + [8]) = (int_64)0
	$7 = CALL strlen([528])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$16 }
	*($13 + [8]) = ($7 << [1])
	$5 = (($13 + [8]) | [1])
	if ( $7 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$6 = (($7 + [16]) & [-16])
	$5 = CALL $85($6)
	*($13 + [8]) = ($6 | [1])
	*($13 + [16]) = $5
	*($13 + [12]) = $7
	
.LABEL $label$15
	CALL memcpy($5, [528], $7)
	
.LABEL $label$14
	*(($5 + $7)) = [0]
	*((($13 + [24]) + [28])) = *(($3 + [12]))
	*((($13 + [24]) + [24])) = *(($3 + [8]))
	*((($13 + [24]) + [20])) = *(($3 + [4]))
	*($13 + [32]) = $2
	*($13 + [24]) = *($0)
	*($13 + [40]) = *($3)
	$7 = (($13 + [8]) + [8])
	*(($13 + [64])) = *($7)
	*($13 + [56]) = *($13 + [8])
	*($13 + [8]) = [0]
	*($13 + [12]) = [0]
	*($7) = [0]
	*($13 + [72]) = $1
	*($13 + [80]) = $12
	*(($7 = CALL $85([16]))) = $4
	*($7 + [8]) = $10
	*((($13 + [72]) + [32])) = [0]
	$5 = ($7 + [16])
	*((($13 + [72]) + [24])) = $5
	*((($13 + [72]) + [20])) = $5
	*($13 + [88]) = $7
	*($13 + [100]) = [0]
	*((($13 + [72]) + [36])) = [0]
	$7 = *($13 + [56])
	$5 = ( *((($13 + [24]) + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($5 + [32])
	$9 = (CASTING uint_64)(uint_32 $5)
	$5 = (($13 + [72]) + [28])
	
.LOOP $label$17:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$17 }
	if ( ($7 == 0) ){ goto $label$19 }
	CALL $31($5, $7)
	$5 = *(($13 + [104]))
	$7 = *(($13 + [100]))
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	$7 = [0]
	
.LABEL $label$18
	*($13 + [132]) = $7
	*($13 + [128]) = $7
	*($13 + [136]) = $5
	*($13 + [112]) = ($13 + [128])
	*($13 + [120]) = ($13 + [24])
	CALL $32(($13 + [120]), ($13 + [112]))
	CALL $33(($13 + [128]), ($13 + [72]))
	$7 = *($13 + [128])
	CALL send_inline($7, (*($13 + [132]) - $7))
	$7 = *($13 + [128])
	if ( ($7 == 0) ){ goto $label$20 }
	*($13 + [132]) = $7
	CALL $86($7)
	
.LABEL $label$20
	$7 = *($13 + [100])
	if ( ($7 == 0) ){ goto $label$21 }
	*(($13 + [104])) = $7
	CALL $86($7)
	
.LABEL $label$21
	$7 = *($13 + [88])
	if ( ($7 == 0) ){ goto $label$22 }
	*(($13 + [92])) = $7
	CALL $86($7)
	
.LABEL $label$22
	if ( ((*(($13 + [56])) & [1]) == 0) ){ goto $label$23 }
	CALL $86(*(($13 + [64])))
	
.LABEL $label$23
	if ( ((*($13 + [8]) & [1]) == 0) ){ goto $label$24 }
	CALL $86(*(($13 + [16])))
	
.LABEL $label$24
	*([0] + [4]) = ($13 + [144])
	return (unreachable)
	
.LABEL $label$13
	CALL $87(($13 + [8]))
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC _ZN11blowballoon5startEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [112])
	CALL require_auth($1)
	$2 = *(($0 + [72]))
	$8 = *(($0 + [76]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$1 }
	$8 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [48])
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$4), [432])
	if ( $7 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$7 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$7 = CALL $6($4, $7)
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$4), [432])
	
.LABEL $label$5
	CALL eosio_assert([1], [864])
	CALL eosio_assert(((int_32)*($7 + [24]) == (int_32)$4), [912])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [960])
	*($7 + [16]) = (int_64)0
	$5 = *($7)
	CALL eosio_assert([1], [1024])
	CALL eosio_assert([1], [544])
	CALL memcpy(($9 + [16]), $7, [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($9 + [16]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($9 + [16]) + [16]), ($7 + [16]), [8])
	CALL db_update_i64(*($7 + [28]), (int_64)0, ($9 + [16]), [24])
	$7 = ($0 + [64])
	if ( (uint_64)($5 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$4
	$6 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [1088])
	*(($7 = CALL $85([40])) + [24]) = $4
	*($7 + [8]) = (int_64)1152921504606846960
	*($7 + [16]) = (int_64)0
	*($7) = *($0)
	CALL eosio_assert([1], [544])
	CALL memcpy(($9 + [16]), $7, [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($9 + [16]) | [8]), ($7 + [8]), [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($9 + [16]) + [16]), ($7 + [16]), [8])
	$5 = *($7)
	$8 = CALL db_store_i64(*(($0 + [56])), (int_64)7235159537265672192, $6, $5, ($9 + [16]), [24])
	*($7 + [28]) = $8
	$4 = ($0 + [64])
	if ( (uint_64)($5 <= *($4)) ){ goto $label$7 }
	*($4) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($9 + [8]) = $7
	$5 = *($7)
	*($9 + [16]) = $5
	*($9 + [4]) = $8
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [80]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $8
	*($9 + [8]) = [0]
	*($4) = $7
	*($3) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $49(($0 + [72]), ($9 + [8]), ($9 + [16]), ($9 + [4]))
	
.LABEL $label$8
	$7 = *($9 + [8])
	*($9 + [8]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $86($7)
	
.LABEL $label$3
	CALL _ZN11blowballoon11processnextEyy($0, $1, (int_64)5)
	*([0] + [4]) = ($9 + [48])
}

void .FUNC _ZN11blowballoon4stopEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [48])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [112])
	CALL require_auth($1)
	$2 = *(($0 + [72]))
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [48])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$4), [432])
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)7235159537265672192, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $6($4, $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$4), [432])
	
.LABEL $label$5
	CALL eosio_assert([1], [864])
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)$4), [912])
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [960])
	*($6 + [16]) = (int_64)1
	$1 = *($6)
	CALL eosio_assert([1], [1024])
	CALL eosio_assert([1], [544])
	CALL memcpy(($8 + [16]), $6, [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($8 + [16]) | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($8 + [16]) + [16]), ($6 + [16]), [8])
	CALL db_update_i64(*($6 + [28]), (int_64)0, ($8 + [16]), [24])
	$6 = ($0 + [64])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$4
	$5 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [48])) == (int_64)CALL $fimport$2()), [1088])
	*(($6 = CALL $85([40])) + [24]) = $4
	*($6 + [8]) = (int_64)1152921504606846960
	*($6 + [16]) = (int_64)1
	*($6) = *($0)
	CALL eosio_assert([1], [544])
	CALL memcpy(($8 + [16]), $6, [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($8 + [16]) | [8]), ($6 + [8]), [8])
	CALL eosio_assert([1], [544])
	CALL memcpy((($8 + [16]) + [16]), ($6 + [16]), [8])
	$1 = *($6)
	$7 = CALL db_store_i64(*(($0 + [56])), (int_64)7235159537265672192, $5, $1, ($8 + [16]), [24])
	*($6 + [28]) = $7
	$4 = ($0 + [64])
	if ( (uint_64)($1 <= *($4)) ){ goto $label$7 }
	*($4) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($8 + [8]) = $6
	$1 = *($6)
	*($8 + [16]) = $1
	*($8 + [4]) = $7
	$3 = ($0 + [76])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [80]))) ){ goto $label$9 }
	*($4 + [8]) = $1
	*($4 + [16]) = $7
	*($8 + [8]) = [0]
	*($4) = $6
	*($3) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $49(($0 + [72]), ($8 + [8]), ($8 + [16]), ($8 + [4]))
	
.LABEL $label$8
	$6 = *($8 + [8])
	*($8 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $86($6)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
}

void .FUNC _ZN11blowballoon6finishEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [112])
	CALL require_auth($1)
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$5), [432])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $40($5, $7)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$5), [432])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [832])
	CALL eosio_assert($7, [864])
	CALL $41($5, $6)
}

void .FUNC _ZN11blowballoon11cleanplayerEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [112])
	CALL require_auth($1)
	$3 = ($0 + [96])
	$2 = CALL db_lowerbound_i64(*($0 + [88]), *($3), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$0 = ($0 + [88])
	
.LOOP $label$2:
	CALL $27($0, $2)
	*($5) = $0
	*($5 + [4]) = [0]
	$1 = *(CALL $26($5))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$4 = ((int_32)$2) != (int_32)[0]
	CALL eosio_assert($4), [176])
	CALL eosio_assert($4, [224])
	$4 = CALL db_next_i64(*($2 + [24]), ($5 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $27((CASTING uint_32)(uint_64 $1), $4)
	
.LABEL $label$3
	CALL $30($0, $2)
	$2 = CALL db_lowerbound_i64(*($0), *($3), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $25 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [116])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	$2 = *($5 + [8])
	if ( ($2 == 0) ){ goto $label$6 }
	*(($5 + [12])) = $2
	CALL $86($2)
	
.LABEL $label$6
	CALL $86($5)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $86($3)
	
.LABEL $label$1
	$2 = *(($0 + [72]))
	if ( ($2 == 0) ){ goto $label$7 }
	$1 = ($0 + [76])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL $86($5)
	
.LABEL $label$11
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($0 + [72]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $2
	
.LABEL $label$8
	*($1) = $2
	CALL $86($3)
	
.LABEL $label$7
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$16 }
	$2 = *($3 + [60])
	if ( ($2 == 0) ){ goto $label$17 }
	*(($3 + [64])) = $2
	CALL $86($2)
	
.LABEL $label$17
	$2 = *($3 + [48])
	if ( ($2 == 0) ){ goto $label$18 }
	*(($3 + [52])) = $2
	CALL $86($2)
	
.LABEL $label$18
	CALL $86($3)
	
.LABEL $label$16
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$15 }
	$3 = *(($0 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $86($3)
	
.LABEL $label$12
	return $0
}

void .FUNC _ZN11blowballoon9pushcandyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [112])
	CALL require_auth($1)
	$3 = ($0 + [88])
	*($16 + [64]) = $3
	*($16 + [68]) = [0]
	$15 = CALL $26(($16 + [64]))
	$12 = *($15)
	$13 = *($15 + [4])
	$6 = ($0 + [96])
	$15 = CALL db_lowerbound_i64(*($0 + [88]), *($6), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$2 }
	$4 = (($16 + [24]) + [8])
	$11 = (($16 + [24]) + [16])
	$14 = (int_64)0
	
.LOOP $label$3:
	CALL $27($3, $15)
	if ( ((uint_64)$14 >= (uint_64)$2) ){ goto $label$2 }
	$7 = ($13 + [12])
	$15 = *($13 + [8])
	if ( ((int_32)$15 == (int_32)*($7)) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = *($13)
	$8 = *($15)
	*(($9 = (($16 + [48]) + [8]))) = *(($15 + [16]))
	*($16 + [48]) = *(($15 + [8]))
	*(($16 + [8])) = *($9)
	*($16) = *($16 + [48])
	CALL _ZN11blowballoon13transfertokenEyyN5eosio5assetE($0, $8, $1, $16)
	$15 = ($15 + [24])
	if ( ((int_32)$15 != (int_32)*($7)) ){ goto $label$5 }
	
.LABEL $label$4
	$15 = CALL $29($3, *($13), [144])
	*($4) = [0]
	*(($7 = (($16 + [24]) + [12]))) = (int_64)0
	*($16 + [24]) = *($15)
	$10 = ($15 + [12])
	$9 = (*($10) - *($15 + [8]))
	$5 = ((int_32)$9 / (int_32)[24])
	if ( ($9 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$1 }
	$9 = CALL $85($9)
	*($4) = $9
	*($11) = ($9 + ((int_32)$5 * (int_32)[24]))
	*($7) = $9
	$5 = *(($15 + [8]))
	$15 = (*($10) - $5)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($9, $5, $15)
	*($7) = (*($7) + ((int_32)((uint_32)$15 / (uint_32)[24]) * (int_32)[24]))
	$9 = *($4)
	
.LABEL $label$8
	*($11) = [0]
	*($4) = (int_64)0
	if ( ($9 == 0) ){ goto $label$6 }
	CALL $86($9)
	goto $label$6 
	
.LABEL $label$7
	*($11) = [0]
	*($4) = (int_64)0
	
.LABEL $label$6
	$15 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($15, [176])
	CALL eosio_assert($15, [224])
	$15 = CALL db_next_i64(*($13 + [24]), ($16 + [72]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$9 }
	CALL $27($12, $15)
	
.LABEL $label$9
	CALL $30($3, $13)
	$15 = [0]
	$9 = CALL db_lowerbound_i64(*($3), *($6), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$10 }
	$15 = CALL $27($3, $9)
	
.LABEL $label$10
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$11 }
	*($7) = $9
	CALL $86($9)
	
.LABEL $label$11
	if ( ($15 == 0) ){ goto $label$2 }
	*($16 + [20]) = [0]
	*($16 + [16]) = $3
	$15 = CALL $26(($16 + [16]))
	$12 = *($15)
	$13 = *($15 + [4])
	$14 = ((int_64)$14 + (int_64)1)
	$15 = CALL db_lowerbound_i64(*($3), *($6), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($16 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $88($4)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $85([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [592])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $37(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $38(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $7
	CALL $86($7)
	
.LABEL $label$10
	CALL $86($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $26 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [24]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [784])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6030912142679474176)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [720])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [720])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $27(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $85(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $86($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [960])
	$3 = *($1)
	$4 = *(($1 + [52]))
	$8 = *($1 + [48])
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$2 }
	$6 = *($2 + [4])
	$5 = *($2)
	$7 = *($5 + [8])
	
.LOOP $label$4:
	if ( ((int_64)*(($8 + [16])) != (int_64)$7) ){ goto $label$5 }
	if ( ((int_64)*($8) == (int_64)*($6)) ){ goto $label$3 }
	
.LABEL $label$5
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	*(($6 = ($8 + [8]))) = ((int_64)*($6) + (int_64)*($5))
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = *($2 + [8])
	if ( ((int_32)$4 == (int_32)*(($1 + [56]))) ){ goto $label$6 }
	*($4) = *($8)
	*(($4 + [16])) = *(($8 + [16]))
	*(($4 + [8])) = *(($8 + [8]))
	*(($8 = ($1 + [52]))) = (*($8) + [24])
	goto $label$1 
	
.LABEL $label$6
	CALL $69(($1 + [48]), $8)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [1024])
	$8 = [48]
	$6 = *(($1 + [48]))
	$4 = *(($1 + [52]))
	$2 = ($4 - $6)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$2 / (int_32)[24]))
	
.LOOP $label$7:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	$4 = ($2 + [-24])
	$8 = ((($4 - ((uint_32)$4 % (uint_32)[24])) + $8) + [24])
	
.LABEL $label$8
	$6 = *($1 + [60])
	$4 = *(($1 + [64]))
	$2 = ($4 - $6)
	$7 = (CASTING uint_64)(uint_32 int_32($2 >> [3]))
	
.LOOP $label$9:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$9 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$10 }
	$8 = (($2 & [-8]) + $8)
	
.LABEL $label$10
	if ( ($8 <= [513]) ){ goto $label$12 }
	$4 = CALL malloc($8)
	goto $label$11 
	
.LABEL $label$12
	$4 = ($10 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$11
	*($9 + [4]) = $4
	*($9) = $4
	*($9 + [8]) = ($4 + $8)
	CALL $42($9, $1)
	CALL db_update_i64(*($1 + [76]), (int_64)0, $4, $8)
	if ( ($8 <= [513]) ){ goto $label$13 }
	CALL free($4)
	
.LABEL $label$13
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$14 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [960])
	*($1 + [8]) = (int_64)2
	$2 = *($1)
	CALL eosio_assert([1], [1024])
	$4 = *($1 + [48])
	$3 = *(($1 + [52]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	$7 = [48]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$3 = ($5 + [-24])
	$7 = ((($3 - ((uint_32)$3 % (uint_32)[24])) + $7) + [24])
	
.LABEL $label$2
	$4 = *($1 + [60])
	$3 = *(($1 + [64]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	$7 = (($5 & [-8]) + $7)
	
.LABEL $label$4
	if ( ($7 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	CALL $42($9, $1)
	CALL db_update_i64(*($1 + [76]), (int_64)0, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

void .FUNC _ZN11blowballoon8_processEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	CALL require_auth(*($0))
	$3 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$5), [432])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$7 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $40($5, $7)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$5), [432])
	
.LABEL $label$3
	$7 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($7, [832])
	$2 = *($6 + [8])
	if ( ((int_64)$2 == (int_64)2) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)1) ){ goto $label$5 }
	if ( (uint_64)(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= *($6 + [16])) ){ goto $label$5 }
	CALL eosio_assert($7, [864])
	CALL $65($5, $6)
	return 
	
.LABEL $label$6
	if ( ((uint_64)((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) >= (uint_64)*($6 + [24])) ){ goto $label$7 }
	if ( (uint_64)(*($6 + [32]) <= *($6 + [40])) ){ goto $label$5 }
	
.LABEL $label$7
	CALL eosio_assert($7, [864])
	CALL $66($5, $6)
	
.LABEL $label$5
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($2 + [24]), *($1 + [4]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((uint_32)(*($1 + [8]) - $0) > (uint_32)[7]), [592])
	CALL memcpy(($2 + [32]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [960])
	*($1 + [8]) = (int_64)3
	$2 = *($1)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [1024])
	$4 = *($1 + [48])
	$3 = *(($1 + [52]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[24]))
	$7 = [48]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$3 = ($5 + [-24])
	$7 = ((($3 - ((uint_32)$3 % (uint_32)[24])) + $7) + [24])
	
.LABEL $label$2
	$4 = *($1 + [60])
	$3 = *(($1 + [64]))
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [3]))
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	$7 = (($5 & [-8]) + $7)
	
.LABEL $label$4
	if ( ($7 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($8 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $7)
	CALL $42($9, $1)
	CALL db_update_i64(*($1 + [76]), (int_64)0, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*(($0 = CALL memcpy($0, $1, [48])) + [48 align=4]) = (int_64)0
	*(($0 + [56])) = [0]
	$2 = (*(($1 + [52])) - *($1 + [48]))
	$3 = ((int_32)$2 / (int_32)[24])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$2 }
	$2 = CALL $85($2)
	*(($0 + [48])) = $2
	*(($0 + [56])) = ($2 + ((int_32)$3 * (int_32)[24]))
	*(($3 = ($0 + [52]))) = $2
	$4 = *(($1 + [48]))
	$5 = (*(($1 + [52])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($2, $4, $5)
	*($3) = (*($3) + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$3
	*($0 + [60 align=4]) = (int_64)0
	*(($0 + [68])) = [0]
	$2 = (*(($1 + [64])) - *($1 + [60]))
	$3 = int_32($2 >> [3])
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[536870912]) ){ goto $label$1 }
	$2 = CALL $85($2)
	*(($0 + [60])) = $2
	*(($0 + [68])) = ($2 + ($3 << [3]))
	*(($3 = ($0 + [64]))) = $2
	$5 = *(($1 + [60]))
	$1 = (*(($1 + [64])) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($2, $5, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $88(($0 + [48]))
	
.LABEL $label$1
	CALL $88(($0 + [60]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$0), [432])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)7035924439720001536, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $40($0, $5)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$0), [432])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $85(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $86($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [304])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$5 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$8 = ($6 + [-24])
	$6 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [368])
	$8 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = ([0] - $6)
	$6 = $8
	
.LOOP $label$5:
	$8 = ($6 + [24])
	$5 = *($8)
	*($8) = [0]
	$7 = *($6)
	*($6) = $5
	if ( ($7 == 0) ){ goto $label$6 }
	$5 = *($7 + [60])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($7 + [64])) = $5
	CALL $86($5)
	
.LABEL $label$7
	$5 = *($7 + [48])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($7 + [52])) = $5
	CALL $86($5)
	
.LABEL $label$8
	CALL $86($7)
	
.LABEL $label$6
	*(($6 + [16])) = *(($6 + [40]))
	*(($6 + [8])) = *(($6 + [32]))
	$6 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	$5 = *($6 + [60])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($6 + [64])) = $5
	CALL $86($5)
	
.LABEL $label$11
	$5 = *($6 + [48])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($6 + [52])) = $5
	CALL $86($5)
	
.LABEL $label$12
	CALL $86($6)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [76]))
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $88 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $87 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $86 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $85 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10108])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10004])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9812]
	$1 = (((int_32)$2 * (int_32)[12]) + [9812])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10102]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10104])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10102]) = [1]
	$7 = ($7 << [16])
	*([0] + [10104]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10104])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10104]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10102]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10102]) = [1]
	$3 = ($3 << [16])
	*([0] + [10104]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10104])
	
.LABEL $label$8
	*([0] + [10104]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $83($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10016])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $82([1620], $0)
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($0 + [4])
	*($1 + [8]) = (int_64)1152921504606846960
	*($1 + [16]) = (int_64)0
	*($1) = *(*($2))
	$2 = *($0)
	CALL eosio_assert([1], [544])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [544])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [544])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	$3 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159537265672192, *(*($0 + [8])), $3, $4, [24])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

void .FUNC _ZN11blowballoon11assigncandyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$18 = (*([0] + [4]) - [96])
	*([0] + [4]) = $18
	*($18 + [48]) = $1
	$15 = *(($0 + [32]))
	$17 = *(($0 + [36]))
	if ( ((int_32)$17 == (int_32)$15) ){ goto $label$1 }
	$16 = ($17 + [-24])
	$7 = ([0] - $15)
	
.LOOP $label$2:
	if ( ((int_64)*(*($16)) == (int_64)$2) ){ goto $label$1 }
	$17 = $16
	$8 = ($16 + [-24])
	$16 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = ($0 + [8])
	if ( ((int_32)$17 == (int_32)$15) ){ goto $label$4 }
	$16 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [72]) == (int_32)$8), [432])
	goto $label$3 
	
.LABEL $label$4
	$16 = [0]
	$17 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, $2)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$3 }
	$16 = CALL $40($8, $17)
	CALL eosio_assert(((int_32)*($16 + [72]) == (int_32)$8), [432])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [832])
	$9 = ($16 + [52])
	$15 = *($16 + [48])
	if ( ((int_32)$15 == (int_32)*($9)) ){ goto $label$5 }
	$5 = ($0 + [112])
	$4 = ($0 + [88])
	$10 = ($16 + [40])
	$3 = (($18 + [8]) + [8])
	$11 = ($3 + [4])
	$12 = ($0 + [116])
	$13 = ($0 + [96])
	$14 = ($0 + [120])
	
.LOOP $label$6:
	$2 = *($10)
	$1 = *($15 + [8])
	*(($17 = (($18 + [32]) + [8]))) = *(($15 + [16]))
	$2 = ((uint_64)$1 / (uint_64)$2)
	*($18 + [32]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [624])
	$2 = (uint_64)*($17) >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$8 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [688])
	$2 = *($15)
	*(($3 + [12])) = *((($18 + [32]) + [12]))
	*(($3 + [8])) = *($17)
	*($11) = *($18 + [36])
	*($18 + [8]) = $2
	*($3) = *($18 + [32])
	$2 = *($18 + [48])
	$6 = *($5)
	$17 = *($12)
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$12 }
	$16 = ($17 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$13:
	if ( ((int_64)*(*($16)) == (int_64)$2) ){ goto $label$12 }
	$17 = $16
	$8 = ($16 + [-24])
	$16 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$17 == (int_32)$6) ){ goto $label$17 }
	$16 = *(($17 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [20]) == (int_32)$4), [432])
	if ( $16 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$16 = CALL db_find_i64(*($4), *($13), (int_64)-6030912142679474176, $2)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$15 }
	$16 = CALL $27($4, $16)
	CALL eosio_assert(((int_32)*($16 + [20]) == (int_32)$4), [432])
	
.LABEL $label$16
	*($18 + [68]) = ($18 + [8])
	*($18 + [64]) = ($18 + [32])
	CALL eosio_assert([1], [864])
	CALL $74($4, $16, ($18 + [64]))
	goto $label$14 
	
.LABEL $label$15
	$2 = *($0)
	*($18 + [4]) = ($18 + [8])
	*($18) = ($18 + [48])
	*($18 + [88]) = $2
	CALL eosio_assert(((int_64)*($4) == (int_64)CALL $fimport$2()), [1088])
	*($18 + [64]) = $4
	*((($18 + [64]) + [8])) = ($18 + [88])
	*($18 + [68]) = $18
	*(($16 = CALL $85([32])) + [16]) = [0]
	*($16 + [8 align=4]) = (int_64)0
	*($16 + [20]) = $4
	CALL $73(($18 + [64]), $16)
	*($18 + [80]) = $16
	$2 = *($16)
	*($18 + [64]) = $2
	$17 = *($16 + [24])
	*($18 + [60]) = $17
	$8 = *($12)
	if ( ((uint_32)$8 >= (uint_32)*($14)) ){ goto $label$19 }
	*($8 + [8]) = $2
	*($8 + [16]) = $17
	*($18 + [80]) = [0]
	*($8) = $16
	*($12) = ($8 + [24])
	goto $label$18 
	
.LABEL $label$19
	CALL $38($5, ($18 + [80]), ($18 + [64]), ($18 + [60]))
	
.LABEL $label$18
	$16 = *($18 + [80])
	*($18 + [80]) = [0]
	if ( ($16 == 0) ){ goto $label$14 }
	$8 = *($16 + [8])
	if ( ($8 == 0) ){ goto $label$20 }
	*(($16 + [12])) = $8
	CALL $86($8)
	
.LABEL $label$20
	CALL $86($16)
	
.LABEL $label$14
	$15 = ($15 + [24])
	if ( ((int_32)$15 != (int_32)*($9)) ){ goto $label$6 }
	
.LABEL $label$5
	*([0] + [4]) = ($18 + [96])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$6 = *($6 + [4])
	$3 = ($1 + [12])
	$8 = *($3)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$2 }
	*($8) = *($6)
	*(($8 + [16])) = *(($6 + [16]))
	*(($8 + [8])) = *(($6 + [8]))
	$8 = (*($3) + [24])
	*($3) = $8
	$5 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($1 + [8])
	CALL $69($5, $6)
	$8 = *($3)
	
.LABEL $label$1
	$3 = *($5)
	$4 = ($8 - $3)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$4 / (int_32)[24]))
	$6 = [32]
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$5 }
	$8 = ($4 + [-24])
	$6 = (($8 - ((uint_32)$8 % (uint_32)[24])) + $6)
	goto $label$4 
	
.LABEL $label$5
	$6 = ($6 + [-24])
	
.LABEL $label$4
	if ( ($6 <= [513]) ){ goto $label$7 }
	$8 = CALL malloc($6)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$6
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [544])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $43($9, $5)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030912142679474176, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$8 }
	CALL free($8)
	
.LABEL $label$8
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$9 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $70 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [432])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $75($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [432])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [960])
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	$3 = *($1)
	$4 = *($2)
	$5 = ($1 + [64])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)*(($1 + [68]))) ){ goto $label$2 }
	*($5) = ($2 + [8])
	*($2) = *($4)
	goto $label$1 
	
.LABEL $label$2
	CALL $63(($1 + [60]), $4)
	
.LABEL $label$1
	if ( (uint_64)(*(($1 + [32])) <= *($1 + [40])) ){ goto $label$3 }
	*($1 + [8]) = (int_64)3
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [1024])
	$5 = *($1 + [48])
	$4 = *(($1 + [52]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	$2 = [48]
	
.LOOP $label$4:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$5 }
	$4 = ($6 + [-24])
	$2 = ((($4 - ((uint_32)$4 % (uint_32)[24])) + $2) + [24])
	
.LABEL $label$5
	$5 = *($1 + [60])
	$4 = *(($1 + [64]))
	$6 = ($4 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$7 }
	$2 = (($6 & [-8]) + $2)
	
.LABEL $label$7
	if ( ($2 <= [513]) ){ goto $label$9 }
	$8 = CALL malloc($2)
	goto $label$8 
	
.LABEL $label$9
	$8 = ($8 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$8
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $2)
	CALL $42($9, $1)
	CALL db_update_i64(*($1 + [76]), (int_64)0, $8, $2)
	if ( ($2 <= [513]) ){ goto $label$10 }
	CALL free($8)
	
.LABEL $label$10
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $85(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $86($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $86($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [592])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [912])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [960])
	$4 = ($1 + [8])
	$3 = *($1)
	$5 = *(($1 + [12]))
	$8 = *($1 + [8])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$2 }
	$7 = *($2)
	$9 = *($7 + [8])
	
.LOOP $label$4:
	if ( ((int_64)*(($8 + [16])) == (int_64)$9) ){ goto $label$3 }
	$8 = ($8 + [24])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	*(($6 = ($8 + [8]))) = ((int_64)*($6) + (int_64)*($7))
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = *($2 + [4])
	if ( ((int_32)$5 == (int_32)*(($1 + [16]))) ){ goto $label$5 }
	*($5) = *($8)
	*(($5 + [16])) = *(($8 + [16]))
	*(($5 + [8])) = *(($8 + [8]))
	*(($8 = ($1 + [12]))) = (*($8) + [24])
	goto $label$1 
	
.LABEL $label$5
	CALL $69($4, $8)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$3 == (int_64)*($1)), [1024])
	$2 = *(($1 + [8]))
	$5 = *(($1 + [12]))
	$7 = ($5 - $2)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[24]))
	$8 = [32]
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	$5 = ($7 + [-24])
	$8 = (($5 - ((uint_32)$5 % (uint_32)[24])) + $8)
	goto $label$7 
	
.LABEL $label$8
	$8 = ($8 + [-24])
	
.LABEL $label$7
	if ( ($8 <= [513]) ){ goto $label$10 }
	$5 = CALL malloc($8)
	goto $label$9 
	
.LABEL $label$10
	$5 = ($11 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$9
	*($10) = $5
	*($10 + [8]) = ($5 + $8)
	CALL eosio_assert(((int_32)$8 > (int_32)[7]), [544])
	CALL memcpy($5, $1, [8])
	*($10 + [4]) = ($5 + [8])
	CALL $43($10, $4)
	CALL db_update_i64(*($1 + [24]), (int_64)0, $5, $8)
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL free($5)
	
.LABEL $label$11
	if ( (uint_64)($3 <= *($0 + [16])) ){ goto $label$12 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[24])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$7 = ((int_32)($7 - $8) / (int_32)[24])
	if ( ((uint_32)$7 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $85(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6 + [8]) = (int_64)0
	*($6) = (int_64)0
	*(($6 = ($6 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [624])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [688])
	$6 = (*($8) + [24])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[24]))
	$2 = ($7 + ((int_32)$2 * (int_32)[24]))
	$8 = $2
	
.LOOP $label$13:
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	*(($6 = ($8 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [624])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [688])
	$8 = ($8 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$7 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $86($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [544])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [544])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [608])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $39($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [592])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [592])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [592])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$8 = *($0 + [4])
	$3 = *($8)
	$5 = ($3 + [24])
	$7 = *($5)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = ($3 + [8])
	$4 = CALL db_lowerbound_i64(*($6), *(($3 + [16])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $40($6, $4)
	*($10 + [4]) = [0]
	*($10) = $6
	$7 = *(*(CALL $79($10) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [24])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [1568])
	$7 = *($5)
	*($1 + [8]) = (int_64)1
	*($1) = $7
	$7 = *(*($8 + [4]))
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$3 }
	$7 = CALL current_time()
	*(($1 + [8])) = (int_64)2
	$7 = ((int_64)((uint_64)$7 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	
.LABEL $label$3
	*($1 + [16]) = $7
	$7 = *(*($8 + [8]))
	*($1 + [24]) = ( (int_64)-1 ? $7 : (int_64)($7 == 0) )
	*($1 + [40]) = *(*($8 + [12]))
	$5 = *($1 + [48])
	$3 = *(($1 + [52]))
	$6 = ($3 - $5)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	$8 = [48]
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$5 }
	$3 = ($6 + [-24])
	$8 = ((($3 - ((uint_32)$3 % (uint_32)[24])) + $8) + [24])
	
.LABEL $label$5
	$5 = *($1 + [60])
	$3 = *(($1 + [64]))
	$6 = ($3 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = (($6 & [-8]) + $8)
	
.LABEL $label$7
	if ( ($8 <= [513]) ){ goto $label$9 }
	$9 = CALL malloc($8)
	goto $label$8 
	
.LABEL $label$9
	$9 = ($9 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$8
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $8)
	CALL $42($10, $1)
	$7 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($2 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $7, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$10 }
	CALL free($9)
	
.LABEL $label$10
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [76]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [784])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035924439720001536)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [720])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [720])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $40(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [544])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [544])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [544])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [544])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $36(*($1), ($0 + [32]))
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $31($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [544])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [544])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $35(CALL $34($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [256])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [304])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [368])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$7 }
	*(($4 + [12])) = $6
	CALL $86($6)
	
.LABEL $label$7
	CALL $86($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	$6 = *($4 + [8])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($4 + [12])) = $6
	CALL $86($6)
	
.LABEL $label$10
	CALL $86($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $85($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $86($1)
	return 
	
.LABEL $label$1
	(unreachable)
}