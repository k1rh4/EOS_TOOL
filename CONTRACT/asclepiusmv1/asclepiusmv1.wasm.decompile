(data (i32.const 8192) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8256) "Order exists\00")
(data (i32.const 8269) "Order not available\00")
(data (i32.const 8289) "Order not found\00")
(data (i32.const 8305) "Order expired\00")
(data (i32.const 8319) "Already signed by this party\00")
(data (i32.const 8348) "Order is already executed\00")
(data (i32.const 8374) "Consensus not reached\00")
(data (i32.const 8396) "Failed consensus\00")
(data (i32.const 8413) "eosio.token\00")
(data (i32.const 8425) "transfer\00")
(data (i32.const 8434) "Order translation\00")
(data (i32.const 16876) "write\00")
(data (i32.const 16882) "read\00")
(data (i32.const 16887) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 16936) "invalid symbol name\00")
(data (i32.const 16956) "get\00")
(data (i32.const 16960) "cannot create objects in table of another contract\00")
(data (i32.const 17011) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17062) "error reading iterator\00")
(data (i32.const 17085) "cannot pass end iterator to modify\00")
(data (i32.const 17120) "object passed to modify is not in multi_index\00")
(data (i32.const 17166) "cannot modify objects in table of another contract\00")
(data (i32.const 17217) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17276) "cannot pass end iterator to erase\00")
(data (i32.const 17310) "cannot increment end iterator\00")
(data (i32.const 17340) "object passed to erase is not in multi_index\00")
(data (i32.const 17385) "cannot erase objects in table of another contract\00")
(data (i32.const 17435) "attempt to remove object that was not in multi_index\00")
(data (i32.const 17488) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "check_transaction_authorization" (func $fimport$0 (param i32 i32 i32 i32 i32 i32) (result i32)))
(import "env" "check_permission_authorization" (func $fimport$1 (param i64 i64 i32 i32 i32 i32 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$3 (result i32)))
(import "env" "read_action_data" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(import "env" "memset" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "require_auth2" (func $fimport$10 (param i64 i64)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "db_next_i64" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$13 (result i64)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$17 (param i32)))
(import "env" "abort" (func $fimport$18))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$30 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$31 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$34 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$36 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$37 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$38 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $2))
(export "_ZdlPv" (func $58))
(export "_Znwj" (func $56))
(export "_Znaj" (func $57))
(export "_ZdaPv" (func $59))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $13 $15)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17574))
(global $global$2 i32 (i32.const 17574))


void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [16960])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([80])) + [64]) = $1
	CALL $32(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [68])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $33(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $63($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [16960])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([96])) + [56]) = (int_64)3
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72]) = $1
	CALL $34(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [76])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $35(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$7 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	$0 = *($7 + [60])
	if ( ($0 == 0) ){ goto $label$4 }
	$5 = ($7 + [64])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$6 }
	
.LOOP $label$7:
	$1 = ($3 + [-96])
	if ( ((*(($3 + [-80])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [-72])))
	
.LABEL $label$8
	$3 = $1
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$7 }
	$3 = *(($7 + [60]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $0
	
.LABEL $label$5
	*($5) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$4
	CALL _ZdlPv($7)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $66 (int_32 $0)
{
}

void .FUNC $65 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [52])) == (int_32)$0), [17340])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [17385])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17435])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
}

int_32 .FUNC $67 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [17340])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [17385])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17435])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [68]))
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17120])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [17166])
	$3 = *($3)
	$6 = *($1)
	$7 = ($1 + [64])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)*(($1 + [68]))) ){ goto $label$2 }
	*($8) = *($3)
	*(($8 + [8])) = *(($3 + [8]))
	CALL $61(($8 + [16]), ($3 + [16]))
	CALL memcpy(($8 + [28]), ($3 + [28]), [66])
	*($7) = (*($7) + [96])
	$9 = ($1 + [60])
	goto $label$1 
	
.LABEL $label$2
	$9 = ($1 + [60])
	CALL $55($9, $3)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17217])
	$8 = *($9)
	$10 = *(($1 + [64]))
	$11 = (CASTING uint_64)(uint_32 ((int_32)($10 - $8) / (int_32)[96]))
	$3 = [52]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$10) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = *($8 + [16])
	$7 = ( *(($8 + [20])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = (($7 + $3) + [82])
	$11 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$6 }
	$8 = ($8 + [96])
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($3 <= [513]) ){ goto $label$8 }
	$8 = CALL $69($3)
	goto $label$7 
	
.LABEL $label$8
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$7
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($8 + $3)
	*($5 + [16]) = $5
	*($5 + [40]) = $9
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [16])
	*($5 + [32]) = ($1 + [48])
	*($5 + [36]) = ($1 + [56])
	CALL $48(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*(($1 + [76])), $2, $8, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $72($8)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [48])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)$3) ){ goto $label$4 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [17011])
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3948786716878307328, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $27($0, $5)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$0), [17011])
	
.LABEL $label$2
	$1 = [1]
	CALL eosio_assert([1], [17276])
	CALL eosio_assert([1], [17310])
	$5 = CALL db_next_i64(*($6 + [68]), ($2 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $27($0, $5)
	
.LABEL $label$6
	CALL $29($0, $6)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $1
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17062])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $69($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([80])) + [56]) = [0]
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [60]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [16882])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [16882])
	CALL memcpy(($5 + [16]), ($2 + [8]), [32])
	*($3 + [36]) = ($2 + [40])
	CALL $45(($3 + [32]), ($5 + [48]))
	*($5 + [64]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $72($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $23 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [16960])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([80])) + [56]) = [0]
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [60]) = $1
	CALL $41(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [64])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $42(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)$3) ){ goto $label$4 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$0), [17011])
	if ( $6 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return [0]
	
.LABEL $label$3
	$1 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6497942446108311552, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $17($0, $5)
	CALL eosio_assert(((int_32)*($6 + [72]) == (int_32)$0), [17011])
	
.LABEL $label$2
	$1 = [1]
	CALL eosio_assert([1], [17276])
	CALL eosio_assert([1], [17310])
	$5 = CALL db_next_i64(*($6 + [76]), ($2 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $17($0, $5)
	
.LABEL $label$6
	CALL $40($0, $6)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $1
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $1($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [16876])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [16876])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $44(CALL $43($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [16876])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [16876])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [16876])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [16876])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $50(*($1), ($0 + [32]))
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17062])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $69($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([80])) + [64]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [16882])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((uint_32)($4 + [-8]) > (uint_32)[31]), [16882])
	CALL memcpy(($5 + [16]), ($2 + [8]), [32])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[40]), [16882])
	CALL memcpy(($5 + [48]), ($2 + [40]), [8])
	*($5 + [68]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $33(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $72($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [16882])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [16882])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [16882])
	CALL memcpy(($4 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [16882])
	CALL memcpy(($4 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $45(*($1), ($4 + [32]))
	*($2) = *($1)
	*($2 + [12]) = ($4 + [45])
	*($2 + [8]) = ($4 + [44])
	*($2 + [16]) = ($4 + [46])
	*($2 + [20]) = ($4 + [47])
	*($2 + [24]) = ($4 + [48])
	*($2 + [28]) = ($4 + [49])
	*($2 + [32]) = ($4 + [50])
	*($2 + [36]) = ($4 + [51])
	*($2 + [40]) = ($4 + [52])
	*($2 + [44]) = ($4 + [53])
	*($2 + [48]) = ($4 + [54])
	*($2 + [52]) = ($4 + [55])
	*($2 + [56]) = ($4 + [56])
	*($2 + [60]) = ($4 + [57])
	*($2 + [64]) = ($4 + [58])
	*($2 + [68]) = ($4 + [59])
	*($2 + [72]) = ($4 + [60])
	*($2 + [76]) = ($4 + [61])
	*($2 + [80]) = ($4 + [62])
	*($2 + [88]) = ($4 + [64])
	*($2 + [84]) = ($4 + [63])
	*($2 + [92]) = ($4 + [65])
	*($2 + [96]) = ($4 + [66])
	*($2 + [100]) = ($4 + [67])
	*($2 + [104]) = ($4 + [68])
	*($2 + [108]) = ($4 + [69])
	*($2 + [112]) = ($4 + [70])
	*($2 + [116]) = ($4 + [71])
	*($2 + [120]) = ($4 + [72])
	*($2 + [124]) = ($4 + [73])
	*($2 + [128]) = ($4 + [74])
	*($2 + [132]) = ($4 + [75])
	*($2 + [136]) = ($4 + [76])
	*($2 + [140]) = ($4 + [77])
	*($2 + [144]) = ($4 + [78])
	*($2 + [148]) = ($4 + [79])
	*($2 + [152]) = ($4 + [80])
	*($2 + [156]) = ($4 + [81])
	*($2 + [164]) = ($4 + [83])
	*($2 + [160]) = ($4 + [82])
	*($2 + [168]) = ($4 + [84])
	*($2 + [172]) = ($4 + [85])
	*($2 + [176]) = ($4 + [86])
	*($2 + [180]) = ($4 + [87])
	*($2 + [184]) = ($4 + [88])
	*($2 + [188]) = ($4 + [89])
	*($2 + [192]) = ($4 + [90])
	*($2 + [196]) = ($4 + [91])
	*($2 + [200]) = ($4 + [92])
	*($2 + [204]) = ($4 + [93])
	*($2 + [208]) = ($4 + [94])
	*($2 + [212]) = ($4 + [95])
	*($2 + [216]) = ($4 + [96])
	*($2 + [220]) = ($4 + [97])
	*($2 + [224]) = ($4 + [98])
	*($2 + [228]) = ($4 + [99])
	*($2 + [232]) = ($4 + [100])
	*($2 + [240]) = ($4 + [102])
	*($2 + [236]) = ($4 + [101])
	*($2 + [244]) = ($4 + [103])
	*($2 + [248]) = ($4 + [104])
	*($2 + [252]) = ($4 + [105])
	*($2 + [256]) = ($4 + [106])
	*($2 + [260]) = ($4 + [107])
	*($2 + [264]) = ($4 + [108])
	*($2 + [268]) = ($4 + [109])
	CALL $46(($2 + [8]), $2)
	$global$0 = ($2 + [272])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_32 $51
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[96]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [8]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [16876])
	CALL memcpy(*($6), ($2 + [8]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$4 = ($0 + [4])
	$1 = ($2 + [20])
	$9 = ($2 + [28])
	$10 = ($2 + [32])
	$11 = ($2 + [108])
	$12 = ($2 + [112])
	$13 = ($2 + [116])
	$14 = ($2 + [120])
	$15 = ($2 + [124])
	$16 = ($2 + [128])
	$17 = ($2 + [132])
	$18 = ($2 + [136])
	$19 = ($2 + [140])
	$20 = ($2 + [144])
	$21 = ($2 + [148])
	$22 = ($2 + [152])
	$23 = ($2 + [156])
	$24 = ($2 + [164])
	$25 = ($2 + [160])
	$26 = ($2 + [168])
	$27 = ($2 + [172])
	$28 = ($2 + [176])
	$29 = ($2 + [180])
	$30 = ($2 + [184])
	$31 = ($2 + [188])
	$32 = ($2 + [192])
	$33 = ($2 + [196])
	$34 = ($2 + [200])
	$35 = ($2 + [204])
	$36 = ($2 + [208])
	$37 = ($2 + [212])
	$38 = ($2 + [216])
	$39 = ($2 + [220])
	$40 = ($2 + [224])
	$41 = ($2 + [228])
	$42 = ($2 + [232])
	$43 = ($2 + [240])
	$44 = ($2 + [236])
	$45 = ($2 + [244])
	$46 = ($2 + [248])
	$47 = ($2 + [252])
	$48 = ($2 + [256])
	$49 = ($2 + [260])
	$50 = ($2 + [264])
	$51 = ($2 + [268])
	
.LOOP $label$3:
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - *($4)) > (int_32)[7]), [16876])
	CALL memcpy(*($4), $6, [8])
	$8 = (*($4) + [8])
	*($4) = $8
	CALL eosio_assert(((int_32)(*($7) - $8) > (int_32)[7]), [16876])
	CALL memcpy(*($4), ($6 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $50($0, ($6 + [16]))
	*($2) = $0
	*((($2 + [8]) + [8])) = ($6 + [30])
	*($1) = ($6 + [31])
	*((($2 + [8]) + [16])) = ($6 + [32])
	*($9) = ($6 + [33])
	*($10) = ($6 + [34])
	*((($2 + [8]) + [28])) = ($6 + [35])
	*((($2 + [8]) + [32])) = ($6 + [36])
	*((($2 + [8]) + [36])) = ($6 + [37])
	*((($2 + [8]) + [40])) = ($6 + [38])
	*((($2 + [8]) + [44])) = ($6 + [39])
	*((($2 + [8]) + [48])) = ($6 + [40])
	*((($2 + [8]) + [52])) = ($6 + [41])
	*((($2 + [8]) + [56])) = ($6 + [42])
	*((($2 + [8]) + [60])) = ($6 + [43])
	*((($2 + [8]) + [64])) = ($6 + [44])
	*((($2 + [8]) + [68])) = ($6 + [45])
	*((($2 + [8]) + [72])) = ($6 + [46])
	*($2 + [12]) = ($6 + [29])
	*($2 + [8]) = ($6 + [28])
	*((($2 + [8]) + [80])) = ($6 + [48])
	*((($2 + [8]) + [76])) = ($6 + [47])
	*((($2 + [8]) + [84])) = ($6 + [49])
	*((($2 + [8]) + [88])) = ($6 + [50])
	*((($2 + [8]) + [92])) = ($6 + [51])
	*((($2 + [8]) + [96])) = ($6 + [52])
	*($11) = ($6 + [53])
	*($12) = ($6 + [54])
	*($13) = ($6 + [55])
	*($14) = ($6 + [56])
	*($15) = ($6 + [57])
	*($16) = ($6 + [58])
	*($17) = ($6 + [59])
	*($18) = ($6 + [60])
	*($19) = ($6 + [61])
	*($20) = ($6 + [62])
	*($21) = ($6 + [63])
	*($22) = ($6 + [64])
	*($23) = ($6 + [65])
	*($24) = ($6 + [67])
	*($25) = ($6 + [66])
	*($26) = ($6 + [68])
	*($27) = ($6 + [69])
	*($28) = ($6 + [70])
	*($29) = ($6 + [71])
	*($30) = ($6 + [72])
	*($31) = ($6 + [73])
	*($32) = ($6 + [74])
	*($33) = ($6 + [75])
	*($34) = ($6 + [76])
	*($35) = ($6 + [77])
	*($36) = ($6 + [78])
	*($37) = ($6 + [79])
	*($38) = ($6 + [80])
	*($39) = ($6 + [81])
	*($40) = ($6 + [82])
	*($41) = ($6 + [83])
	*($42) = ($6 + [84])
	*($43) = ($6 + [86])
	*($44) = ($6 + [85])
	*($45) = ($6 + [87])
	*($46) = ($6 + [88])
	*($47) = ($6 + [89])
	*($48) = ($6 + [90])
	*($49) = ($6 + [91])
	*($50) = ($6 + [92])
	*($51) = ($6 + [93])
	CALL $51(($2 + [8]), $2)
	$6 = ($6 + [96])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [272])
	return $0
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [16876])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [16876])
	CALL memcpy(*($3 + [4]), $2, [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [16876])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [16876])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $49(*($1), *($0 + [16]))
}

int_32 .FUNC $69 (int_32 $0)
{
	return CALL $70([8480], $0)
}

int_32 .FUNC $68 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [16876])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [16876])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [16876])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $65($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [56])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	$5 = *($4)
	*($1) = *($5)
	$6 = *($0)
	*(($1 + [40])) = *(($5 + [40]))
	*(($1 + [32])) = *(($5 + [32]))
	*(($1 + [24])) = *(($5 + [24]))
	*($1 + [16]) = *($5 + [16])
	$7 = ($1 + [48])
	CALL $62($7, *($4 + [4]))
	$5 = *($1 + [48])
	$4 = ( *(($1 + [52])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [40])
	$8 = (CASTING uint_64)(uint_32 $4)
	$4 = ($1 + [16])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $69($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [16876])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[31]), [16876])
	CALL memcpy(($2 + [8]), $4, [32])
	*($3 + [4]) = ($2 + [40])
	CALL $50($3, $7)
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($6 + [8]), (int_64)-5004450263566647296, *(*($0 + [8])), $8, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($6 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $72($2)
	if ( (uint_64)($8 <= *($6 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	CALL eosio_assert(((int_32)*($1 + [72]) == (int_32)$0), [17340])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [17385])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17435])
	$2 = ($3 + [-24])
	$9 = *($4)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = *($3)
	*($3) = [0]
	$4 = *($2)
	*($2) = $5
	if ( ($4 == 0) ){ goto $label$8 }
	$7 = *($4 + [60])
	if ( ($7 == 0) ){ goto $label$9 }
	$10 = ($4 + [64])
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$8 = ($5 + [-96])
	if ( ((*(($5 + [-80])) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [-72])))
	
.LABEL $label$13
	$5 = $8
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$12 }
	$5 = *(($4 + [60]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $7
	
.LABEL $label$10
	*($10) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$9
	CALL _ZdlPv($4)
	
.LABEL $label$8
	*($2 + [8]) = *($3 + [8])
	*(($2 + [16])) = *(($3 + [16]))
	$2 = ($2 + [24])
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$7 }
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$5 }
	
.LABEL $label$6
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	$7 = *($4 + [60])
	if ( ($7 == 0) ){ goto $label$16 }
	$9 = ($4 + [64])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$8 = ($5 + [-96])
	if ( ((*(($5 + [-80])) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($5 + [-72])))
	
.LABEL $label$20
	$5 = $8
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$19 }
	$5 = *(($4 + [60]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $7
	
.LABEL $label$17
	*($9) = $7
	CALL _ZdlPv($5)
	
.LABEL $label$16
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$14 }
	
.LABEL $label$5
	*(($0 + [28])) = $2
	CALL db_remove_i64(*(($1 + [76])))
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [16956])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $1($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [16882])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [16882])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [16882])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $47($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $64($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $64($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $60($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [16876])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [16876])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $72 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16864])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16672]
	$3 = (((int_32)$1 * (int_32)[12]) + [16672])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [68])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [72])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [76])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [80])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [84])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [88])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [92])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [96])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [100])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [104])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [108])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [112])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [116])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [120])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [124])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [128])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [132])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [136])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [140])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [144])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [148])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [152])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [156])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [160])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [164])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [168])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [172])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [176])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [180])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [184])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [188])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [192])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [196])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [200])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [204])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [208])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [212])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [216])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [220])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [224])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [228])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [232])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [236])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [240])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [244])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [248])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [252])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [256])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($3 + [4]), $2, [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [16876])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $71($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [17488])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $60 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $71 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8472]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8476])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8472]) = [1]
	$2 = ($2 << [16])
	*([0] + [8476]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8476])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8476]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8472]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8472]) = [1]
	$3 = ($3 << [16])
	*([0] + [8476]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8476])
	
.LABEL $label$10
	*([0] + [8476]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [128])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $69($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [48]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [16882])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((uint_32)($1 + [-8]) > (uint_32)[31]), [16882])
	$6 = ($3 + [16])
	CALL memcpy($6, ($2 + [8]), [32])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[40]), [16882])
	$7 = ($3 + [48])
	CALL memcpy($7, ($2 + [40]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $72($2)
	
.LABEL $label$5
	*(($1 = (($3 + [64]) + [16]))) = *(($6 + [16]))
	*(($2 = (($3 + [64]) + [24]))) = *(($6 + [24]))
	*($3 + [64]) = *($6)
	*($3 + [72]) = *(($6 + [8]))
	$8 = *($7)
	$9 = *($3)
	*((($3 + [96]) + [24])) = *($2)
	*((($3 + [96]) + [16])) = *($1)
	*($3 + [104]) = *($3 + [72])
	*($3 + [96]) = *($3 + [64])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $9), (int_64 ($3 + [96])), (int_32 $8), (int_64 $5))
	$global$0 = ($3 + [128])
	return [1]
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	CALL $31(($2 + [8]), $1)
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [36])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [336])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $69($6)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [48]) = (int_64)0
	$2 = CALL memset(($3 + [60]), [0], [66])
	*($3 + [252]) = $1
	*($3 + [248]) = $1
	*($3 + [256]) = ($1 + $6)
	*($3 + [320]) = ($3 + [248])
	*($3 + [128]) = ($3 + [16])
	CALL $26(($3 + [128]), ($3 + [320]))
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL $72($1)
	
.LABEL $label$4
	*(($6 = (($3 + [216]) + [8]))) = *(($3 + [32]))
	*($3 + [216]) = *($3 + [24])
	$7 = *(($3 + [40]))
	$8 = *($3 + [16])
	$1 = CALL $61(($3 + [200]), ($3 + [48]))
	CALL memcpy(($3 + [128]), $2, [66])
	CALL memcpy(($3 + [248]), ($3 + [128]), [66])
	*((($3 + [232]) + [8])) = *($6)
	*($3 + [232]) = *($3 + [216])
	$6 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($6) + $5))
	
.LABEL $label$5
	$9 = *((($3 + [232]) + [8]))
	*((($3 + [320]) + [8])) = $9
	*(($3 + [8])) = $9
	$9 = *($3 + [232])
	*($3) = $9
	*($3 + [320]) = $9
	CALL void $6((int_32 $8), (int_64 $3), (int_32 $7), (int_64 $1), (int_32 ($3 + [248])), (int_32 $5))
	if ( ((*($3 + [200]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$6
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [56])))
	
.LABEL $label$7
	$global$0 = ($3 + [336])
	return [1]
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [176])
	$global$0 = $4
	CALL require_auth(*($0))
	*((($4 + [136]) + [32])) = [0]
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$5 = *($0)
	*($4 + [136]) = $5
	*($4 + [144]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)-6497942446108311552, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $17(($4 + [136]), $6) + [72]) == (int_32)($4 + [136])), [17011])
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [8256])
	*((($4 + [64]) + [24])) = *(($2 + [8]))
	*((($4 + [64]) + [32])) = *(($2 + [16]))
	*(($4 + [104])) = *(($2 + [24]))
	*($4 + [64]) = $1
	*($4 + [112]) = $3
	*($4 + [80]) = *($2)
	*((($4 + [24]) + [32])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0)
	*($4 + [24]) = $5
	*($4 + [32]) = $5
	*($4 + [16]) = ($4 + [64])
	CALL $18(($4 + [8]), ($4 + [24]), $5, ($4 + [16]))
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($4 + [52])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	CALL _ZdlPv($6)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$5 = *($0)
	*($4 + [8]) = ($4 + [64])
	CALL $19(($4 + [24]), ($4 + [136]), $5, ($4 + [8]))
	$9 = *($4 + [160])
	if ( ($9 == 0) ){ goto $label$8 }
	$10 = ($4 + [164])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$9) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$8 = *($0)
	*($0) = [0]
	if ( ($8 == 0) ){ goto $label$12 }
	$7 = *($8 + [60])
	if ( ($7 == 0) ){ goto $label$13 }
	$11 = ($8 + [64])
	$2 = *($11)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = ($2 + [-96])
	if ( ((*(($2 + [-80])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($2 + [-72])))
	
.LABEL $label$17
	$2 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$16 }
	$2 = *(($8 + [60]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $7
	
.LABEL $label$14
	*($11) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$13
	CALL _ZdlPv($8)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$11 }
	$2 = *(($4 + [160]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $9
	
.LABEL $label$9
	*($10) = $9
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$global$0 = ($4 + [176])
}

int_32 .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $69($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [16882])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $72($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$6 = ($global$0 - [192])
	$global$0 = $6
	$7 = *($2)
	CALL require_auth2($7, *($2 + [8]))
	$8 = [0]
	*((($6 + [144]) + [32])) = [0]
	*($6 + [152]) = $1
	*($6 + [160]) = (int_64)-1
	*($6 + [168]) = (int_64)0
	$9 = *($0)
	*($6 + [144]) = $9
	*((($6 + [104]) + [32])) = [0]
	*($6 + [112]) = $1
	*($6 + [104]) = $9
	*($6 + [120]) = (int_64)-1
	*($6 + [128]) = (int_64)0
	$0 = CALL db_find_i64($9, $1, (int_64)-6497942446108311552, $3)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$4 }
	$8 = CALL $17(($6 + [144]), $0)
	CALL eosio_assert(((int_32)*($8 + [72]) == (int_32)($6 + [144])), [17011])
	$10 = ($6 + [104])
	$12 = *(($6 + [132]))
	$11 = *(($6 + [128]))
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$2 }
	
.LOOP $label$5:
	$0 = ($12 + [-24])
	$13 = *($0)
	if ( ((int_64)*($13) == (int_64)$3) ){ goto $label$3 }
	$12 = $0
	if ( ((int_32)$11 != (int_32)$0) ){ goto $label$5 }
	goto $label$2 
	
.LABEL $label$4
	$10 = ($6 + [104])
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)($6 + [104])), [17011])
	$10 = ($6 + [104])
	goto $label$1 
	
.LABEL $label$2
	$13 = [0]
	$0 = CALL db_find_i64(*($6 + [104]), *(($6 + [112])), (int_64)3948786716878307328, $3)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$13 = CALL $27($10, $0)
	CALL eosio_assert(((int_32)*($13 + [64]) == (int_32)$10), [17011])
	
.LABEL $label$1
	$11 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($11, [8269])
	$14 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($14, [8289])
	$9 = *($8 + [48])
	if ( (*([0] + [8464]) == 0) ){ goto $label$7 }
	$3 = *([0] + [8456])
	goto $label$6 
	
.LABEL $label$7
	$3 = CALL current_time()
	*([0] + [8464]) = [1]
	*([0] + [8456]) = $3
	
.LABEL $label$6
	CALL eosio_assert(((uint_64)$9 >= (uint_64)((int_64)((int_64)((int_64)$3 / (int_64)1000000) + (int_64)1) & (int_64)4294967295)), [8305])
	$0 = *($8 + [60])
	$12 = *(($8 + [64]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($12 - $0) / (int_32)[96]))
	if ( ((int_32)$12 == (int_32)$0) ){ goto $label$8 }
	
.LOOP $label$9:
	CALL eosio_assert(((int_64)*($0) != (int_64)$7), [8319])
	$0 = ($0 + [96])
	if ( ((int_32)$12 != (int_32)$0) ){ goto $label$9 }
	
.LABEL $label$8
	*((($6 + [8]) + [8])) = *(($2 + [8]))
	*($6 + [8]) = *($2)
	$0 = CALL $61(($6 + [24]), $4)
	CALL memcpy(($6 + [36]), $5, [66])
	*($6 + [184]) = ($6 + [8])
	CALL eosio_assert($14, [17085])
	CALL $28(($6 + [144]), $8, $1, ($6 + [184]))
	if ( ((uint_64)((int_64)$3 + (int_64)1) >= (uint_64)*($8 + [56])) ){ goto $label$16 }
	if ( (*($0) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL eosio_assert($11, [17276])
	CALL eosio_assert($11, [17310])
	$12 = CALL db_next_i64(*($13 + [68]), ($6 + [184]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$17 }
	CALL $27($10, $12)
	
.LABEL $label$17
	CALL $29($10, $13)
	if ( ((*($0) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($6 + [32])))
	$13 = *($6 + [128])
	if ( ($13 == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$13 = *($6 + [128])
	if ( $13 ){ goto $label$12 }
	
.LABEL $label$13
	$2 = *($6 + [168])
	if ( $2 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$8 = ($6 + [132])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$13) ){ goto $label$18 }
	
.LOOP $label$19:
	$0 = ($0 + [-24])
	$12 = *($0)
	*($0) = [0]
	if ( ($12 == 0) ){ goto $label$20 }
	CALL _ZdlPv($12)
	
.LABEL $label$20
	if ( ((int_32)$13 != (int_32)$0) ){ goto $label$19 }
	$0 = *(($6 + [128]))
	*($8) = $13
	CALL _ZdlPv($0)
	$2 = *($6 + [168])
	if ( $2 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$18
	*($8) = $13
	CALL _ZdlPv($13)
	$2 = *($6 + [168])
	if ( ($2 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	$4 = ($6 + [172])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$22 }
	
.LOOP $label$23:
	$8 = ($8 + [-24])
	$11 = *($8)
	*($8) = [0]
	if ( ($11 == 0) ){ goto $label$24 }
	$13 = *($11 + [60])
	if ( ($13 == 0) ){ goto $label$25 }
	$10 = ($11 + [64])
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$13) ){ goto $label$27 }
	
.LOOP $label$28:
	$12 = ($0 + [-96])
	if ( ((*(($0 + [-80])) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*(($0 + [-72])))
	
.LABEL $label$29
	$0 = $12
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$28 }
	$0 = *(($11 + [60]))
	goto $label$26 
	
.LABEL $label$27
	$0 = $13
	
.LABEL $label$26
	*($10) = $13
	CALL _ZdlPv($0)
	
.LABEL $label$25
	CALL _ZdlPv($11)
	
.LABEL $label$24
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$23 }
	$0 = *(($6 + [168]))
	goto $label$21 
	
.LABEL $label$22
	$0 = $2
	
.LABEL $label$21
	*($4) = $2
	CALL _ZdlPv($0)
	$global$0 = ($6 + [192])
	return 
	
.LABEL $label$10
	$global$0 = ($6 + [192])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 apply)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8192])
	
.LABEL $label$2
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$5 }
	$4 = (int_64)7
	
.LOOP $label$6:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*($3 + [120]) = $0
	if ( ((int_64)$2 <= (int_64)-3607760075751424001) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-3607760075751424000) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)4730614985703555072) ){ goto $label$4 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [1]
	*($3 + [16]) = *($3 + [104])
	CALL $4(($3 + [120]), ($3 + [16]))
	goto $label$4 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-5859529461371764736) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-3617353123208626176) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-3617168659307298816) ){ goto $label$4 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [2]
	*($3 + [32]) = *($3 + [88])
	CALL $6(($3 + [120]), ($3 + [32]))
	goto $label$4 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)6292810045348380672) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$4 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3 + [8]) = *($3 + [112])
	CALL $8(($3 + [120]), ($3 + [8]))
	goto $label$4 
	
.LABEL $label$10
	*($3 + [68]) = [0]
	*($3 + [64]) = [4]
	*($3 + [56]) = *($3 + [64])
	CALL $10(($3 + [120]), ($3 + [56]))
	goto $label$4 
	
.LABEL $label$9
	*($3 + [84]) = [0]
	*($3 + [80]) = [5]
	*($3 + [40]) = *($3 + [80])
	CALL $12(($3 + [120]), ($3 + [40]))
	goto $label$4 
	
.LABEL $label$8
	*($3 + [76]) = [0]
	*($3 + [72]) = [6]
	*($3 + [48]) = *($3 + [72])
	CALL $14(($3 + [120]), ($3 + [48]))
	goto $label$4 
	
.LABEL $label$7
	*($3 + [100]) = [0]
	*($3 + [96]) = [7]
	*($3 + [24]) = *($3 + [96])
	CALL $16(($3 + [120]), ($3 + [24]))
	
.LABEL $label$4
	CALL $66([0])
	$global$0 = ($3 + [128])
}

void .FUNC $3 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [40]) = $1
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$4 = CALL db_find_i64($3, $3, (int_64)-5004450263566647296, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $20($2, $4) + [60]) == (int_32)$2), [17011])
	CALL eosio_assert([0], [8348])
	$5 = *($2 + [24])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([1], [8348])
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($2 + [28])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($7 + [56])))
	
.LABEL $label$8
	CALL _ZdlPv($7)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$1
	*(($6 = ($2 + [32]))) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	CALL $21($2, ($2 + [40]))
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$9 }
	$8 = ($2 + [28])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$13 }
	CALL _ZdlPv($7)
	
.LABEL $label$13
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$12 }
	$4 = *(($2 + [24]))
	goto $label$10 
	
.LABEL $label$11
	$4 = $5
	
.LABEL $label$10
	*($8) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*($6) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	CALL $22($2, ($2 + [40]))
	$8 = *($2 + [24])
	if ( ($8 == 0) ){ goto $label$14 }
	$9 = ($2 + [28])
	$0 = *($9)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$18 }
	$5 = *($6 + [60])
	if ( ($5 == 0) ){ goto $label$19 }
	$10 = ($6 + [64])
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$21 }
	
.LOOP $label$22:
	$7 = ($4 + [-96])
	if ( ((*(($4 + [-80])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($4 + [-72])))
	
.LABEL $label$23
	$4 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$22 }
	$4 = *(($6 + [60]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $5
	
.LABEL $label$20
	*($10) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$19
	CALL _ZdlPv($6)
	
.LABEL $label$18
	if ( ((int_32)$0 != (int_32)$8) ){ goto $label$17 }
	$4 = *(($2 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $8
	
.LABEL $label$15
	*($9) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$global$0 = ($2 + [48])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $65($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [208])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $69($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*(($3 + [72])) = [0]
	*(($3 + [64])) = (int_64)0
	*((($3 + [24]) + [32])) = (int_64)0
	*((($3 + [24]) + [24])) = (int_64)0
	*($3 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [16882])
	CALL memcpy(($3 + [24]), $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [16882])
	$7 = (($3 + [24]) + [8])
	CALL memcpy($7, ($6 + [8]), [8])
	CALL eosio_assert(((uint_32)($1 + [-16]) > (uint_32)[33]), [16882])
	$2 = (($3 + [24]) + [16])
	CALL memcpy($2, ($6 + [16]), [34])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $72($6)
	
.LABEL $label$4
	*(($1 = (($3 + [120]) + [8]))) = *($7)
	*(($6 = (($3 + [80]) + [8]))) = *(($2 + [8]))
	*(($7 = (($3 + [80]) + [16]))) = *(($2 + [16]))
	*(($8 = (($3 + [80]) + [24]))) = *(($2 + [24]))
	*(($9 = (($3 + [80]) + [32]))) = *(($2 + [32]))
	*($3 + [120]) = *($3 + [24])
	*($3 + [80]) = *($2)
	*((($3 + [152]) + [32])) = *($9)
	*((($3 + [152]) + [24])) = *($8)
	*((($3 + [152]) + [16])) = *($7)
	*((($3 + [152]) + [8])) = *($6)
	*((($3 + [136]) + [8])) = *($1)
	*($3 + [152]) = *($3 + [80])
	*($3 + [136]) = *($3 + [120])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	$10 = *((($3 + [136]) + [8]))
	*((($3 + [192]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [136])
	*($3 + [8]) = $10
	*($3 + [192]) = $10
	CALL void $1((int_32 ($3 + [8])), (int_32 ($3 + [152])), (int_32 $5))
	$global$0 = ($3 + [208])
	return [1]
}

void .FUNC $15 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL require_auth(*($0))
	*(($3 + [152])) = [0]
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	$4 = *($0)
	*($3 + [120]) = $4
	*($3 + [128]) = $4
	$5 = [0]
	$6 = CALL db_find_i64($4, $4, (int_64)-6497942446108311552, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $17(($3 + [120]), $6)
	CALL eosio_assert(((int_32)*($5 + [72]) == (int_32)($3 + [120])), [17011])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [8289])
	$6 = ($5 + [64])
	CALL eosio_assert(((uint_32)((int_32)(*($6) - *($5 + [60])) / (int_32)[96]) >= (uint_32)*($5 + [56])), [8374])
	CALL eosio_assert(((uint_32)((int_32)(*($6) - *($5 + [60])) / (int_32)[96]) > (uint_32)[1]), [8374])
	$7 = CALL $61(($3 + [104]), (*($5 + [60]) + [16]))
	$9 = *($6)
	$8 = *($5 + [60])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$2 }
	$10 = ($7 + [1])
	$11 = ($7 + [4])
	$12 = ($7 + [8])
	
.LOOP $label$3:
	$13 = [0]
	$6 = ($6 & [1])
	$6 = *($3 + [104])
	$15 = ($6 & [1])
	$6 = *($8 + [16])
	$14 = uint_32($6 >> [1])
	$16 = ( *(($8 + [20])) ? $14 : $15 )
	if ( ((int_32)$16 != (int_32)( *($11) ? uint_32($6 >> [1]) : $6 )) ){ goto $label$7 }
	$17 = ( *($12) ? $10 : $6 )
	if ( $15 ){ goto $label$6 }
	if ( ($16 == 0) ){ goto $label$5 }
	$6 = [0]
	
.LOOP $label$8:
	if ( ((int_32)*((($8 + $6) + [17])) != (int_32)*(($17 + $6))) ){ goto $label$4 }
	$13 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($13, [8396])
	$8 = ($8 + [96])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	if ( ($16 == 0) ){ goto $label$5 }
	CALL eosio_assert((CALL $67(( *(($8 + [24])) ? (($8 + [16]) + [1]) : $15 ), $17, $16) == 0), [8396])
	$8 = ($8 + [96])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	CALL eosio_assert([1], [8396])
	$8 = ($8 + [96])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL eosio_assert([0], [8396])
	$8 = ($8 + [96])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$2
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	*($3 + [68]) = $7
	*($3 + [64]) = $5
	CALL $23(($3 + [160]), ($3 + [16]), $4, ($3 + [64]))
	$13 = *($3 + [40])
	if ( ($13 == 0) ){ goto $label$9 }
	$14 = ($3 + [44])
	$6 = *($14)
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$13 }
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($8 + [56])))
	
.LABEL $label$14
	CALL _ZdlPv($8)
	
.LABEL $label$13
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$12 }
	$6 = *(($3 + [40]))
	goto $label$10 
	
.LABEL $label$11
	$6 = $13
	
.LABEL $label$10
	*($14) = $13
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$10 = *(($5 + [64]))
	$15 = *(($5 + [60]))
	if ( ((int_32)$15 == (int_32)$10) ){ goto $label$15 }
	$17 = ($3 + [92])
	$13 = (($3 + [16]) + [32])
	$9 = (($3 + [16]) + [16])
	$12 = ($3 | [1])
	$14 = ($3 + [8])
	$16 = ($3 + [84])
	$11 = ($3 + [88])
	$18 = ($3 + [56])
	
.LOOP $label$16:
	$19 = *($0)
	$4 = (int_64)6
	
.LOOP $label$17:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$17 }
	$4 = (int_64)0
	$20 = (int_64)59
	$6 = [8413]
	$21 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$23 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$8 = ($8 + [-91])
	goto $label$21 
	
.LABEL $label$23
	$1 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$20 = ((int_64)$20 + (int_64)4294967291)
	$21 = ((int_64)$1 | (int_64)$21)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$18 }
	$4 = (int_64)0
	$20 = (int_64)59
	$6 = [8425]
	$22 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$29 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$8 = ($8 + [-91])
	goto $label$27 
	
.LABEL $label$29
	$1 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$25
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$22 = ((int_64)$1 | (int_64)$22)
	$20 = ((int_64)$20 + (int_64)4294967291)
	if ( ((int_64)$20 != (int_64)55834574842) ){ goto $label$24 }
	*($14) = [0]
	*($3) = (int_64)0
	$6 = CALL $68([8434])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$34 }
	*($3) = ($6 << [1])
	$8 = $12
	if ( $6 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$5 = (($6 + [16]) & [-16])
	$8 = CALL _Znwj($5)
	*($14) = $8
	*($3) = ($5 | [1])
	*($3 + [4]) = $6
	
.LABEL $label$33
	CALL memcpy($8, [8434], $6)
	
.LABEL $label$32
	*(($8 + $6)) = [0]
	*(($8 = (($3 + [64]) + [16]))) = [0]
	$4 = *($15)
	*($9) = *($2)
	*(($9 + [8])) = *(($2 + [8]))
	*($13) = *($3)
	*(($13 + [8])) = *($14)
	*((($3 + [64]) + [8])) = $22
	*((($3 + [16]) + [8])) = $4
	*($14) = [0]
	*($3 + [16]) = *($0)
	*($3) = (int_64)0
	*($3 + [64]) = $21
	*($16) = [0]
	*($11) = [0]
	$6 = CALL _Znwj([16])
	*($8) = $6
	*($6) = $19
	*($6 + [8]) = (int_64)3617214756542218240
	*($17) = (int_64)0
	*((($3 + [64]) + [36])) = [0]
	$6 = ($6 + [16])
	*($11) = $6
	*($16) = $6
	$6 = *($13)
	$5 = ( *((($3 + [16]) + [36])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [32])
	$4 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$35:
	$6 = ($6 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$35 }
	if ( ($6 == 0) ){ goto $label$37 }
	CALL $1($17, $6)
	$5 = *((($3 + [64]) + [32]))
	$6 = *($17)
	goto $label$36 
	
.LABEL $label$37
	$5 = [0]
	$6 = [0]
	
.LABEL $label$36
	*((($3 + [160]) + [8])) = $5
	*($3 + [164]) = $6
	*($3 + [160]) = $6
	*($3 + [176]) = ($3 + [160])
	*($3 + [184]) = ($3 + [16])
	CALL $24(($3 + [184]), ($3 + [176]))
	CALL $25(($3 + [160]), ($3 + [64]))
	$6 = *($3 + [160])
	CALL send_inline($6, (*($3 + [164]) - $6))
	$6 = *($3 + [160])
	if ( ($6 == 0) ){ goto $label$38 }
	*($3 + [164]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$38
	$6 = *($17)
	if ( ($6 == 0) ){ goto $label$39 }
	*((($3 + [64]) + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$39
	$6 = *($8)
	if ( ($6 == 0) ){ goto $label$40 }
	*($16) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$40
	if ( (*($13) & [1]) ){ goto $label$42 }
	if ( (*($3) & [1]) ){ goto $label$41 }
	goto $label$30 
	
.LABEL $label$42
	CALL _ZdlPv(*($18))
	if ( ((*($3) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$41
	CALL _ZdlPv(*($14))
	$15 = ($15 + [96])
	if ( ((int_32)$15 != (int_32)$10) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$31
	CALL $60($3)
	
.LABEL $label$30
	$15 = ($15 + [96])
	if ( ((int_32)$15 != (int_32)$10) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$43
	$15 = *($3 + [144])
	if ( ($15 == 0) ){ goto $label$44 }
	$0 = ($3 + [148])
	$14 = *($0)
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$46 }
	
.LOOP $label$47:
	$14 = ($14 + [-24])
	$17 = *($14)
	*($14) = [0]
	if ( ($17 == 0) ){ goto $label$48 }
	$13 = *($17 + [60])
	if ( ($13 == 0) ){ goto $label$49 }
	$16 = ($17 + [64])
	$6 = *($16)
	if ( ((int_32)$6 == (int_32)$13) ){ goto $label$51 }
	
.LOOP $label$52:
	$8 = ($6 + [-96])
	if ( ((*(($6 + [-80])) & [1]) == 0) ){ goto $label$53 }
	CALL _ZdlPv(*(($6 + [-72])))
	
.LABEL $label$53
	$6 = $8
	if ( ((int_32)$13 != (int_32)$8) ){ goto $label$52 }
	$6 = *(($17 + [60]))
	goto $label$50 
	
.LABEL $label$51
	$6 = $13
	
.LABEL $label$50
	*($16) = $13
	CALL _ZdlPv($6)
	
.LABEL $label$49
	CALL _ZdlPv($17)
	
.LABEL $label$48
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$47 }
	$6 = *(($3 + [144]))
	goto $label$45 
	
.LABEL $label$46
	$6 = $15
	
.LABEL $label$45
	*($0) = $15
	CALL _ZdlPv($6)
	
.LABEL $label$44
	$global$0 = ($3 + [192])
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $69($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [16887])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [16936])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [16882])
	CALL memcpy(($3 + [8]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [16882])
	$1 = (($3 + [8]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [16882])
	CALL memcpy((($3 + [8]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $72($6)
	
.LABEL $label$8
	*(($2 = (($3 + [32]) + [8]))) = *(($1 + [8]))
	*($3 + [32]) = *($1)
	$8 = *($3 + [8])
	*((($3 + [48]) + [8])) = *($2)
	*($3 + [48]) = *($3 + [32])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	CALL void $1((int_32 $8), (int_64 ($3 + [48])), (int_32 $5))
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [17062])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $69($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $5)
	*(($4 = CALL _Znwj([96])) + [56]) = (int_64)3
	*($4 + [64 align=4]) = (int_64)0
	*($4 + [72]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($4 + [16])
	*($3 + [40]) = $4
	*($3 + [48]) = ($4 + [48])
	*($3 + [52]) = ($4 + [56])
	*($3 + [56]) = ($4 + [60])
	CALL $52(($3 + [40]), ($3 + [32]))
	*($4 + [76]) = $1
	*($3 + [32]) = $4
	$6 = *($4)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $4
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $35(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $72($2)
	
.LABEL $label$6
	$2 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	$0 = *($2 + [60])
	if ( ($0 == 0) ){ goto $label$10 }
	$8 = ($2 + [64])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($5 + [-96])
	if ( ((*(($5 + [-80])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [-72])))
	
.LABEL $label$14
	$5 = $1
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$13 }
	$5 = *(($2 + [60]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$10
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $4
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $69($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [16882])
	CALL memcpy(($3 + [16]), $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [16882])
	$6 = (($3 + [16]) + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $72($2)
	
.LABEL $label$5
	*(($1 = (($3 + [32]) + [8]))) = *($6)
	*($3 + [32]) = *($3 + [16])
	*((($3 + [48]) + [8])) = *($1)
	*($3 + [48]) = *($3 + [32])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$7 = *((($3 + [48]) + [8]))
	*((($3 + [64]) + [8])) = $7
	*(($3 + [8])) = $7
	$7 = *($3 + [48])
	*($3) = $7
	*($3 + [64]) = $7
	CALL void $1((int_32 $3), (int_32 $5))
	$global$0 = ($3 + [80])
	return [1]
}

void .FUNC $11 (int_32 $0)
{
	CALL require_auth(*($0))
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $69($5)
	CALL read_action_data($2, $5)
	CALL $72($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL require_auth(*($0))
	*((($3 + [56]) + [8])) = *(($1 + [8]))
	*((($3 + [56]) + [24])) = *(($2 + [8]))
	*((($3 + [56]) + [32])) = *(($2 + [16]))
	*(($3 + [96])) = *(($2 + [24]))
	*(($3 + [104])) = *(($2 + [32]))
	*($3 + [56]) = *($1)
	*($3 + [72]) = *($2)
	*((($3 + [16]) + [32])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	*($3 + [8]) = ($3 + [56])
	CALL $30($3, ($3 + [16]), $4, ($3 + [8]))
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$1 }
	$5 = ($3 + [44])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$1 = *($2)
	*($2) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($3 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $0
	
.LABEL $label$2
	*($5) = $0
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [112])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($5 = ($1 + [48]))) = *(($4 + [48]))
	*(($6 = ($1 + [40]))) = *(($4 + [40]))
	*(($7 = ($1 + [32]))) = *(($4 + [32]))
	*(($8 = ($1 + [24]))) = *(($4 + [24]))
	*(($9 = ($1 + [16]))) = *(($4 + [16]))
	*(($10 = ($1 + [8]))) = *(($4 + [8]))
	CALL eosio_assert([1], [16876])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [16876])
	CALL memcpy(($2 | [8]), $10, [8])
	*(($4 = (($2 + [64]) + [32]))) = *($5)
	*(($5 = (($2 + [64]) + [24]))) = *($6)
	*(($6 = (($2 + [64]) + [16]))) = *($7)
	*(($7 = (($2 + [64]) + [8]))) = *($8)
	*($2 + [64]) = *($9)
	*((($2 + [104]) + [32])) = *($4)
	*((($2 + [104]) + [24])) = *($5)
	*((($2 + [104]) + [16])) = *($6)
	*((($2 + [104]) + [8])) = *($7)
	*($2 + [104]) = *($2 + [64])
	CALL eosio_assert([1], [16876])
	CALL memcpy(($2 + [16]), ($2 + [104]), [34])
	$11 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($3 + [8]), (int_64)-3617168659301666816, *(*($0 + [8])), $11, $2, [50])
	if ( (uint_64)($11 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [144])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $65($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *(*($0 + [4]))
	*($1 + [48]) = *($4 + [48])
	*($1) = *($4)
	$5 = *($0)
	*($1 + [16]) = *($4 + [16])
	*(($1 + [32])) = *(($4 + [32]))
	*(($1 + [24])) = *(($4 + [24]))
	*(($1 + [40])) = *(($4 + [40]))
	$6 = ($1 + [60])
	$7 = ($1 + [16])
	$8 = ($1 + [48])
	$10 = *($1 + [60])
	$9 = *(($1 + [64]))
	$11 = (CASTING uint_64)(uint_32 ((int_32)($9 - $10) / (int_32)[96]))
	$4 = [52]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$2 }
	
.LOOP $label$3:
	$12 = *($10 + [16])
	$12 = ( *(($10 + [20])) ? uint_32($12 >> [1]) : ($12 & [1]) )
	$4 = (($12 + $4) + [82])
	$11 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$4:
	$4 = ($4 + [1])
	$11 = (uint_64)$11 >> (uint_64)(int_64)7
	if ( ((int_64)$11) != (int_64)0) ){ goto $label$4 }
	$10 = ($10 + [96])
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($4 <= [513]) ){ goto $label$6 }
	$10 = CALL $69($4)
	goto $label$5 
	
.LABEL $label$6
	$10 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $10
	
.LABEL $label$5
	*($3 + [4]) = $10
	*($3) = $10
	*($3 + [8]) = ($10 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [24]) = $1
	*($3 + [32]) = $8
	*($3 + [36]) = ($1 + [56])
	*($3 + [40]) = $6
	CALL $48(($3 + [24]), ($3 + [16]))
	$11 = *($1)
	*($1 + [76]) = CALL db_store_i64(*($5 + [8]), (int_64)-6497942446108311552, *(*($0 + [8])), $11, $10, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$11 >= (uint_64)*($5 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $72($10)
	if ( (uint_64)($11 <= *($5 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$11 + (int_64)1) : ((uint_64)$11 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [48])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $65($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($5 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$6 = ($4 + ((int_32)$7 * (int_32)[24]))
	$8 = ($1 + [24])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$1 = (($4 + $5) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	$4 = *($3 + [60])
	if ( ($4 == 0) ){ goto $label$11 }
	$0 = ($3 + [64])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($1 + [-96])
	if ( ((*(($1 + [-80])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($1 + [-72])))
	
.LABEL $label$15
	$1 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$14 }
	$1 = *(($3 + [60]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $4
	
.LABEL $label$12
	*($0) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	$4 = *(*($0 + [4]))
	*($1) = *($4)
	*(($1 + [56])) = *(($4 + [56]))
	*(($5 = ($1 + [48]))) = *(($4 + [48]))
	*(($1 + [40])) = *(($4 + [40]))
	*(($1 + [32])) = *(($4 + [32]))
	*(($1 + [24])) = *(($4 + [24]))
	*(($6 = ($1 + [16]))) = *(($4 + [16]))
	*(($1 + [8])) = *(($4 + [8]))
	CALL eosio_assert([1], [16876])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [16876])
	CALL memcpy(($2 | [8]), $6, [32])
	CALL eosio_assert([1], [16876])
	CALL memcpy(($2 + [40]), $5, [8])
	$7 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($3 + [8]), (int_64)3948786716878307328, *(*($0 + [8])), $7, $2, [48])
	if ( (uint_64)($7 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $65($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [16960])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64])) + [52]) = $1
	CALL $36(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [56])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $37(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)$3) ){ goto $label$4 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(($6 + [52])) == (int_32)$0), [17011])
	if ( $6 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return [0]
	
.LABEL $label$3
	$1 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3617168659301666816, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $38($0, $5)
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)$0), [17011])
	
.LABEL $label$2
	$1 = [1]
	CALL eosio_assert([1], [17276])
	CALL eosio_assert([1], [17310])
	$5 = CALL db_next_i64(*($6 + [56]), ($2 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$6 }
	CALL $38($0, $5)
	
.LABEL $label$6
	CALL $39($0, $6)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	return $1
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $72($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [16876])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [16876])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17062])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $69($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([64])) + [52]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [16882])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [16882])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((uint_32)($4 + [-16]) > (uint_32)[33]), [16882])
	CALL memcpy(($5 + [16]), ($2 + [16]), [34])
	*($5 + [56]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $37(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $72($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [16882])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [16882])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [16882])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [16882])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $53(*($1), *($0 + [16]))
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_32 $51
	$2 = ($global$0 - [272])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [16956])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$4 = *($1)
	$6 = *($1 + [4])
	$3 = ((int_32)($6 - $4) / (int_32)[96])
	if ( ((uint_32)$3 >= (uint_32)$8) ){ goto $label$4 }
	CALL $54($1, ($8 - $3))
	$6 = *(($1 + [4]))
	$8 = *($1)
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$8) ){ goto $label$5 }
	$3 = ($4 + ((int_32)$8 * (int_32)[96]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = ($6 + [-96])
	if ( ((*(($6 + [-80])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [-72])))
	
.LABEL $label$8
	$6 = $8
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$6 = $3
	
.LABEL $label$5
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = ($0 + [4])
	$1 = ($2 + [20])
	$9 = ($2 + [28])
	$10 = ($2 + [32])
	$11 = ($2 + [108])
	$12 = ($2 + [112])
	$13 = ($2 + [116])
	$14 = ($2 + [120])
	$15 = ($2 + [124])
	$16 = ($2 + [128])
	$17 = ($2 + [132])
	$18 = ($2 + [136])
	$19 = ($2 + [140])
	$20 = ($2 + [144])
	$21 = ($2 + [148])
	$22 = ($2 + [152])
	$23 = ($2 + [156])
	$24 = ($2 + [164])
	$25 = ($2 + [160])
	$26 = ($2 + [168])
	$27 = ($2 + [172])
	$28 = ($2 + [176])
	$29 = ($2 + [180])
	$30 = ($2 + [184])
	$31 = ($2 + [188])
	$32 = ($2 + [192])
	$33 = ($2 + [196])
	$34 = ($2 + [200])
	$35 = ($2 + [204])
	$36 = ($2 + [208])
	$37 = ($2 + [212])
	$38 = ($2 + [216])
	$39 = ($2 + [220])
	$40 = ($2 + [224])
	$41 = ($2 + [228])
	$42 = ($2 + [232])
	$43 = ($2 + [240])
	$44 = ($2 + [236])
	$45 = ($2 + [244])
	$46 = ($2 + [248])
	$47 = ($2 + [252])
	$48 = ($2 + [256])
	$49 = ($2 + [260])
	$50 = ($2 + [264])
	$51 = ($2 + [268])
	
.LOOP $label$9:
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($4) - *($3)) > (uint_32)[7]), [16882])
	CALL memcpy($8, *($3), [8])
	$7 = (*($3) + [8])
	*($3) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [16882])
	CALL memcpy(($8 + [8]), *($3), [8])
	*($3) = (*($3) + [8])
	CALL $45($0, ($8 + [16]))
	*($2) = $0
	*((($2 + [8]) + [8])) = ($8 + [30])
	*($1) = ($8 + [31])
	*((($2 + [8]) + [16])) = ($8 + [32])
	*($9) = ($8 + [33])
	*($10) = ($8 + [34])
	*((($2 + [8]) + [28])) = ($8 + [35])
	*((($2 + [8]) + [32])) = ($8 + [36])
	*((($2 + [8]) + [36])) = ($8 + [37])
	*((($2 + [8]) + [40])) = ($8 + [38])
	*((($2 + [8]) + [44])) = ($8 + [39])
	*((($2 + [8]) + [48])) = ($8 + [40])
	*((($2 + [8]) + [52])) = ($8 + [41])
	*((($2 + [8]) + [56])) = ($8 + [42])
	*((($2 + [8]) + [60])) = ($8 + [43])
	*((($2 + [8]) + [64])) = ($8 + [44])
	*((($2 + [8]) + [68])) = ($8 + [45])
	*((($2 + [8]) + [72])) = ($8 + [46])
	*($2 + [12]) = ($8 + [29])
	*($2 + [8]) = ($8 + [28])
	*((($2 + [8]) + [80])) = ($8 + [48])
	*((($2 + [8]) + [76])) = ($8 + [47])
	*((($2 + [8]) + [84])) = ($8 + [49])
	*((($2 + [8]) + [88])) = ($8 + [50])
	*((($2 + [8]) + [92])) = ($8 + [51])
	*((($2 + [8]) + [96])) = ($8 + [52])
	*($11) = ($8 + [53])
	*($12) = ($8 + [54])
	*($13) = ($8 + [55])
	*($14) = ($8 + [56])
	*($15) = ($8 + [57])
	*($16) = ($8 + [58])
	*($17) = ($8 + [59])
	*($18) = ($8 + [60])
	*($19) = ($8 + [61])
	*($20) = ($8 + [62])
	*($21) = ($8 + [63])
	*($22) = ($8 + [64])
	*($23) = ($8 + [65])
	*($24) = ($8 + [67])
	*($25) = ($8 + [66])
	*($26) = ($8 + [68])
	*($27) = ($8 + [69])
	*($28) = ($8 + [70])
	*($29) = ($8 + [71])
	*($30) = ($8 + [72])
	*($31) = ($8 + [73])
	*($32) = ($8 + [74])
	*($33) = ($8 + [75])
	*($34) = ($8 + [76])
	*($35) = ($8 + [77])
	*($36) = ($8 + [78])
	*($37) = ($8 + [79])
	*($38) = ($8 + [80])
	*($39) = ($8 + [81])
	*($40) = ($8 + [82])
	*($41) = ($8 + [83])
	*($42) = ($8 + [84])
	*($43) = ($8 + [86])
	*($44) = ($8 + [85])
	*($45) = ($8 + [87])
	*($46) = ($8 + [88])
	*($47) = ($8 + [89])
	*($48) = ($8 + [90])
	*($49) = ($8 + [91])
	*($50) = ($8 + [92])
	*($51) = ($8 + [93])
	CALL $46(($2 + [8]), $2)
	$8 = ($8 + [96])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$2
	$global$0 = ($2 + [272])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[96]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[96])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[44739243]) ){ goto $label$3 }
	$3 = [44739242]
	$2 = ((int_32)($2 - $4) / (int_32)[96])
	if ( ((uint_32)$2 > (uint_32)[22369620]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[96]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*((($3 = CALL memset($3, [0], [96])) + [24])) = [0]
	*($3 + [16 align=4]) = (int_64)0
	$3 = (*($2) + [96])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $65($0)
	
.LABEL $label$2
	$7 = ($2 + ((int_32)$3 * (int_32)[96]))
	$5 = ($2 + ((int_32)$5 * (int_32)[96]))
	$3 = $5
	
.LOOP $label$8:
	*((($3 = CALL memset($3, [0], [96])) + [24])) = [0]
	*(($3 + [16])) = (int_64)0
	$3 = ($3 + [96])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$8 = ($2 + ((int_32)$6 * (int_32)[96]))
	$1 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$10 }
	$10 = ($1 - $9)
	$2 = [0]
	
.LOOP $label$11:
	$3 = ($9 + $2)
	*((($1 = ($5 + $2)) + [-88])) = *(($3 + [-88]))
	*(($1 + [-96])) = *(($3 + [-96]))
	$6 = ($3 + [-72])
	*(($1 + [-72])) = *($6)
	$4 = ($3 + [-80])
	*(($1 + [-80])) = *($4)
	*($4) = (int_64)0
	*($6) = [0]
	CALL memcpy(($1 + [-68]), ($3 + [-68]), [66])
	$2 = ($2 + [-96])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$11 }
	$5 = ($5 + $2)
	$1 = *(($0 + [4]))
	$2 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$2 = $1
	
.LABEL $label$9
	*($0) = $5
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($1 + [-96])
	if ( ((*(($1 + [-80])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($1 + [-72])))
	
.LABEL $label$14
	$1 = $3
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$1 }
	CALL _ZdlPv($2)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[96])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[44739243]) ){ goto $label$2 }
	$5 = [44739242]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[96])
	if ( ((uint_32)$2 > (uint_32)[22369620]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[96]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $65($0)
	
.LABEL $label$1
	*(($6 = ($2 + ((int_32)$3 * (int_32)[96])))) = *($1)
	*(($6 + [8])) = *(($1 + [8]))
	CALL $61(($6 + [16]), ($1 + [16]))
	CALL memcpy(($6 + [28]), ($1 + [28]), [66])
	$7 = ($2 + ((int_32)$5 * (int_32)[96]))
	$8 = ($6 + [96])
	$1 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$6 }
	$10 = ($1 - $9)
	$2 = [0]
	
.LOOP $label$7:
	$5 = ($9 + $2)
	*((($1 = ($6 + $2)) + [-88])) = *(($5 + [-88]))
	*(($1 + [-96])) = *(($5 + [-96]))
	$3 = ($5 + [-72])
	*(($1 + [-72])) = *($3)
	$4 = ($5 + [-80])
	*(($1 + [-80])) = *($4)
	*($4) = (int_64)0
	*($3) = [0]
	CALL memcpy(($1 + [-68]), ($5 + [-68]), [66])
	$2 = ($2 + [-96])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$7 }
	$6 = ($6 + $2)
	$1 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $1
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($1 + [-96])
	if ( ((*(($1 + [-80])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [-72])))
	
.LABEL $label$10
	$1 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $69($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8468])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $69($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}