(data (i32.const 16896) "\e6\b3\b0\e8\82\af\e6\98\9f\e5\8c\ba\e5\8f\b8\e4\bb\a4\e9\83\a8\e6\8e\88\e4\ba\88\e6\82\a8\e6\ad\a4\e6\ac\a1\e8\81\94\e5\90\88\e4\bf\9d\e5\8d\ab\e6\88\98\e8\8b\b1\e9\9b\84\e7\a7\b0\e5\8f\b7\ef\bc\8c\e5\b9\b6\e7\bb\99\e4\ba\88TKC\e5\a5\96\e5\8a\b1\ef\bc\81\e5\b8\8c\e6\9c\9b\e6\9c\aa\e6\9d\a5\e7\9a\84\e6\88\98\e6\96\97\e4\b8\ad\e6\82\a8\e8\83\bd\e6\9b\b4\e5\8a\a0\e8\8b\b1\e5\8b\87\e5\a5\8b\e6\88\98\ef\bc\8c\e5\81\9a\e6\b3\b0\e8\82\af\e5\b1\85\e6\b0\91\e4\bb\ac\e5\9d\9a\e5\ae\9e\e7\9a\84\e5\90\8e\e7\9b\be\ef\bc\81\00")
(data (i32.const 17071) "object passed to iterator_to is not in multi_index\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 17208) "error reading iterator\00")
(data (i32.const 17231) "read\00")
(data (i32.const 17236) "cannot create objects in table of another contract\00")
(data (i32.const 17287) "write\00")
(data (i32.const 17293) "who is not an account\00")
(data (i32.const 17315) "ok\00")
(data (i32.const 17318) "ng\00")
(data (i32.const 17321) "cannot pass end iterator to erase\00")
(data (i32.const 17355) "cannot increment end iterator\00")
(data (i32.const 17385) "object passed to erase is not in multi_index\00")
(data (i32.const 17430) "cannot erase objects in table of another contract\00")
(data (i32.const 17480) "attempt to remove object that was not in multi_index\00")
(data (i32.const 17533) "cannot pass end iterator to modify\00")
(data (i32.const 17568) "object passed to modify is not in multi_index\00")
(data (i32.const 17614) "cannot modify objects in table of another contract\00")
(data (i32.const 17665) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17724) "startts must less then endts\00")
(data (i32.const 17753) "tkc must between 1 and 500\00")
(data (i32.const 17780) "endts must be in the future\00")
(data (i32.const 17808) "tkc gift activity has not yet started\00")
(data (i32.const 17846) "not during the activity\00")
(data (i32.const 17870) "already received\00")
(data (i32.const 17887) "TKC\00")
(data (i32.const 17891) "active\00")
(data (i32.const 17898) "receive gift-TKC\00")
(data (i32.const 17915) "string is too long to be a valid symbol_code\00")
(data (i32.const 17960) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 18013) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 18062) "invalid symbol name\00")
(data (i32.const 18082) "string is too long to be a valid name\00")
(data (i32.const 18120) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 18187) "character is not in allowed character set for names\00")
(data (i32.const 18239) "invalid supply\00")
(data (i32.const 18254) "max-supply must be 1 billion TKC and with 4 decision\00")
(data (i32.const 18307) "token with symbol already exists\00")
(data (i32.const 18340) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18399) "cannot issue to tkcointkcoin\00")
(data (i32.const 18428) "must issue to tkcointeamxm, or foundationxm, or footingstone, or tkcoinminexm\00")
(data (i32.const 18506) "memo has more than 256 bytes\00")
(data (i32.const 18535) "token with symbol does not exist, create token before issue\00")
(data (i32.const 18595) "invalid quantity\00")
(data (i32.const 18612) "must issue positive quantity\00")
(data (i32.const 18641) "symbol precision mismatch\00")
(data (i32.const 18667) "quantity exceeds available supply\00")
(data (i32.const 18701) "the account has been issued\00")
(data (i32.const 18729) "attempt to add asset with different symbol\00")
(data (i32.const 18772) "addition underflow\00")
(data (i32.const 18791) "addition overflow\00")
(data (i32.const 18809) "cannot transfer to self\00")
(data (i32.const 18833) "cannot transfer to tkcointeamxm\00")
(data (i32.const 18865) "cannot transfer to foundationxm\00")
(data (i32.const 18897) "cannot transfer to footingstone\00")
(data (i32.const 18929) "cannot transfer to tkcoinminexm\00")
(data (i32.const 18961) "cannot transfer to tkcointkcoin\00")
(data (i32.const 18993) "cannot transfer from gm account\00")
(data (i32.const 19025) "to account does not exist\00")
(data (i32.const 19051) "transfer to teamunlockxm must from tkcointeamxm\00")
(data (i32.const 19099) "rc-\00")
(data (i32.const 19103) "transfer to remainingsum must from foundationxm or tkcoinminexm\00")
(data (i32.const 19167) "transfer to tkcprovision must from remainingsum\00")
(data (i32.const 19215) "transfer to coinretrieve must from remainingsum\00")
(data (i32.const 19263) "transfer to authoritydig must from tkcoinminexm\00")
(data (i32.const 19311) "unable to find key\00")
(data (i32.const 19330) "must transfer positive quantity\00")
(data (i32.const 19362) "no balance object found\00")
(data (i32.const 19386) "overdrawn balance\00")
(data (i32.const 19404) "attempt to subtract asset with different symbol\00")
(data (i32.const 19452) "subtraction underflow\00")
(data (i32.const 19474) "subtraction overflow\00")
(data (i32.const 19495) "open time should be before start fight time\00")
(data (i32.const 19539) "maxteams should greater then one\00")
(data (i32.const 19573) "get\00")
(data (i32.const 19577) "not during the opening period\00")
(data (i32.const 19607) "teamname is too long\00")
(data (i32.const 19628) "exceeding team limit\00")
(data (i32.const 19649) "teamname already used\00")
(data (i32.const 19671) "already have team\00")
(data (i32.const 19689) "cannot find the target team\00")
(data (i32.const 19717) "target team is full\00")
(data (i32.const 19737) "not involved\00")
(data (i32.const 19750) "missiles must greater then zero\00")
(data (i32.const 19782) "not enough missiles\00")
(data (i32.const 19802) "not enough durability\00")
(data (i32.const 19824) "cannot find team\00")
(data (i32.const 19844) "\88M\00\00")
(data (i32.const 19848) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 19881) "not the leader\00")
(data (i32.const 19896) "cannot find target team\00")
(data (i32.const 19920) "cannot be used on self\00")
(data (i32.const 19943) "insufficient quantity\00")
(data (i32.const 19965) "no debuff\00")
(data (i32.const 19975) "cannot be used on target\00")
(data (i32.const 20000) "tkcointkcoin\00")
(data (i32.const 20013) "tkcointeamxm\00")
(data (i32.const 20026) "foundationxm\00")
(data (i32.const 20039) "footingstone\00")
(data (i32.const 20052) "tkcoinminexm\00")
(data (i32.const 20065) "teamunlockxm\00")
(data (i32.const 20078) "remainingsum\00")
(data (i32.const 20091) "tkcprovision\00")
(data (i32.const 20104) "coinretrieve\00")
(data (i32.const 20117) "authoritydig\00")
(data (i32.const 20130) "tkcoperatexm\00")
(data (i32.const 20143) "tokenplanetq\00")
(import "env" "action_data_size" (func $fimport$0 (result i32)))
(import "env" "read_action_data" (func $fimport$1 (param i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$4 (param i64)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "is_account" (func $fimport$6 (param i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$8 (param i64)))
(import "env" "prints" (func $fimport$9 (param i32)))
(import "env" "db_lowerbound_i64" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_time" (func $fimport$11 (result i64)))
(import "env" "current_receiver" (func $fimport$12 (result i64)))
(import "env" "db_get_i64" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$15 (param i32)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(import "env" "abort" (func $fimport$18))
(import "env" "memmove" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$21 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$27 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$28 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$29 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$32 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$33 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$36 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$38 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$39 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$40 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $2))
(export "_ZdlPv" (func $162))
(export "_Znwj" (func $160))
(export "_Znaj" (func $161))
(export "_ZdaPv" (func $163))
(export "_ZnwjSt11align_val_t" (func $164))
(export "_ZnajSt11align_val_t" (func $165))
(export "_ZdlPvSt11align_val_t" (func $166))
(export "_ZdaPvSt11align_val_t" (func $167))
(table $0 21 21 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $12 $14 $16 $17 $18 $20 $22 $24 $26 $28 $29 $30 $31 $33 $1)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 20156))
(global $global$2 i32 (i32.const 20156))


void .FUNC $174 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17231])
	CALL memcpy(($4 + [160]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [17231])
	CALL memcpy((($4 + [160]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [168])
	$1 = *($4 + [160])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $188($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $176 (int_32 $0)
{
}

int_32 .FUNC $177 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $180([8216])
	$3 = *([0] + [8224])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8232]
	*([0] + [8224]) = [8232]
	$4 = *([0] + [8228])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $187([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8224])
	*([0] + [8224]) = $3
	*([0] + [8228]) = [0]
	
.LABEL $label$2
	*([0] + [8228]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $181([8216])
	return [0]
	
.LABEL $label$1
	CALL $181([8216])
	return [-1]
}

int_32 .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $171($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $171 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $7 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$4 = ($global$0 - [240])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($0 + [32]) != (int_64)$1), [18399])
	$5 = [1]
	if ( ((int_64)*($0 + [40]) == (int_64)$1) ){ goto $label$1 }
	$5 = [1]
	if ( ((int_64)*($0 + [48]) == (int_64)$1) ){ goto $label$1 }
	$5 = [1]
	if ( ((int_64)*($0 + [56]) == (int_64)$1) ){ goto $label$1 }
	$5 = ((int_64)*($0 + [64]) == (int_64)$1)
	
.LABEL $label$1
	CALL eosio_assert($5, [18428])
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$5 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	$7 = $8
	
.LOOP $label$6:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$6 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [18062])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = uint_32($5 >> [1])
	goto $label$7 
	
.LABEL $label$8
	$5 = *($3 + [4])
	
.LABEL $label$7
	CALL eosio_assert(($5 <= [257]), [18506])
	$9 = [0]
	*(($4 + [168])) = [0]
	*($4 + [152]) = (int_64)-1
	*($4 + [160]) = (int_64)0
	$7 = *($0)
	*($4 + [136]) = $7
	*($4 + [144]) = $6
	$11 = [0]
	$5 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$11 = CALL $50(($4 + [136]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [136])), [17071])
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [18535])
	CALL require_auth(*($11 + [32]))
	$12 = *(($2 + [8]))
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$10 }
	$5 = [0]
	$7 = $13
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$7 = $8
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$14 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$9 = [0]
	
.LABEL $label$10
	CALL eosio_assert($9, [18595])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [18612])
	CALL eosio_assert(((int_64)$12 == (int_64)*($11 + [8])), [18641])
	CALL eosio_assert(((int_64)$6 <= (int_64))(*($11 + [16]) - *($11))), [18667])
	$5 = [0]
	*((($4 + [96]) + [32])) = [0]
	*($4 + [112]) = (int_64)-1
	*($4 + [120]) = (int_64)0
	$7 = *($0)
	*($4 + [96]) = $7
	*($4 + [104]) = $1
	$9 = CALL db_find_i64($7, $1, (int_64)3607749779137757184, $13)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*(CALL $54(($4 + [96]), $9) + [16]) == (int_32)($4 + [96])), [17071])
	goto $label$15 
	
.LABEL $label$16
	$5 = [1]
	
.LABEL $label$15
	CALL eosio_assert($5, [18701])
	*($4 + [176]) = $2
	CALL $55(($4 + [136]), $11, (int_64)0, ($4 + [176]))
	$5 = ($11 + [32])
	$7 = *($5)
	$10 = ($2 + [8])
	*(($9 = (($4 + [80]) + [8]))) = *($10)
	$8 = *($2)
	*((($4 + [16]) + [8])) = *($9)
	*($4 + [80]) = $8
	*($4 + [16]) = *($4 + [80])
	CALL $56($0, $7, ($4 + [16]), $7)
	$7 = *($5)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$17 }
	$8 = *($0)
	*($4 + [224]) = [17891]
	*($4 + [228]) = CALL $179([17891])
	*($4 + [8]) = *($4 + [224])
	$6 = *(CALL $48(($4 + [176]), ($4 + [8])))
	$13 = *(($11 + [32]))
	*(($9 = (($4 + [32]) + [24]))) = *($10)
	*($4 + [40]) = $1
	*($4 + [32]) = $13
	*($4 + [48]) = *($2)
	CALL $169((($4 + [32]) + [32]), $3)
	*(($5 = CALL _Znwj([16]))) = $7
	*($5 + [8]) = $6
	*((($4 + [176]) + [24])) = *($9)
	$9 = (($4 + [32]) + [40])
	*(($10 = (($4 + [176]) + [40]))) = *($9)
	*($9) = [0]
	*($4 + [224]) = $5
	$5 = ($5 + [16])
	*($4 + [232]) = $5
	*($4 + [228]) = $5
	*($4 + [176]) = *($4 + [32])
	*($4 + [184]) = *($4 + [40])
	*($4 + [192]) = *($4 + [48])
	*($4 + [208]) = *($4 + [64])
	*($4 + [64]) = (int_64)0
	CALL $49($8, (int_64)-3617168760277827584, ($4 + [224]), ($4 + [176]))
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$18
	$5 = *($4 + [224])
	if ( ($5 == 0) ){ goto $label$19 }
	*($4 + [228]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$19
	if ( ((*(($4 + [64])) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*(($4 + [72])))
	
.LABEL $label$17
	$10 = *($4 + [120])
	if ( ($10 == 0) ){ goto $label$20 }
	$11 = ($4 + [124])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$22 }
	
.LOOP $label$23:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$24 }
	CALL _ZdlPv($9)
	
.LABEL $label$24
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$23 }
	$5 = *(($4 + [120]))
	goto $label$21 
	
.LABEL $label$22
	$5 = $10
	
.LABEL $label$21
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$20
	$10 = *($4 + [160])
	if ( ($10 == 0) ){ goto $label$25 }
	$11 = ($4 + [164])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$27 }
	
.LOOP $label$28:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$29 }
	CALL _ZdlPv($9)
	
.LABEL $label$29
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$28 }
	$5 = *(($4 + [160]))
	goto $label$26 
	
.LABEL $label$27
	$5 = $10
	
.LABEL $label$26
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$25
	$global$0 = ($4 + [240])
}

int_32 .FUNC $178 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	*($4 + [160]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17231])
	CALL memcpy(($4 + [160]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [17231])
	CALL memcpy((($4 + [160]) + [8]), ($2 + [8]), [8])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [16])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$0 = *($4 + [168])
	$1 = *($4 + [160])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $188($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	CALL require_auth(*($0 + [120]))
	CALL $45(($3 + [16]), $0, (int_64)4059685238987554816)
	$2 = *($3 + [16])
	$4 = *($3 + [24])
	CALL $45(($3 + [16]), $0, (int_64)4057545771816321024)
	CALL eosio_assert(((((int_32)*($3 + [24]) != (int_32)[0]) & ((int_64)*($3 + [16]) != (int_64)0)) & ((uint_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) >= (uint_64)( $2 ? (int_64)0 : $4 ))), [19577])
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$2 = *($0 + [8])
	*($3 + [16]) = $2
	*($3 + [24]) = $2
	$4 = [0]
	$5 = CALL db_find_i64($2, $2, (int_64)4065364500516175872, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $69(($3 + [16]), $5)
	CALL eosio_assert(((int_32)*($4 + [60]) == (int_32)($3 + [16])), [17071])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [19737])
	$2 = *(($0 + [120]))
	*($3 + [8]) = ($3 + [56])
	CALL eosio_assert($5, [17533])
	CALL $86(($3 + [16]), $4, $2, ($3 + [8]))
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [64])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [17385])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17430])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17480])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $3 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [120]) = $1
	*($3 + [112]) = $2
	CALL require_auth($1)
	CALL $45(($3 + [72]), $0, (int_64)4064873937408884736)
	$4 = *($3 + [72])
	$5 = *($3 + [80])
	CALL $45(($3 + [72]), $0, (int_64)4059685238987554816)
	$6 = *($3 + [80])
	$7 = *($3 + [72])
	$8 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert((((uint_64)$8 >= (uint_64)( $4 ? (int_64)0 : $5 )) & (uint_64)($8 <= ( $7 ? (int_64)0 : $6 ))), [19577])
	*((($3 + [72]) + [32])) = [0]
	*($3 + [88]) = (int_64)-1
	*($3 + [96]) = (int_64)0
	$4 = *($0 + [8])
	*($3 + [72]) = $4
	*($3 + [80]) = $4
	$9 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)4067492955986853888, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $67(($3 + [72]), $5)
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)($3 + [72])), [17071])
	$1 = *($3 + [120])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [19689])
	CALL eosio_assert((int_32((*(($9 + [24])) - *($9 + [20])) >> [3]) <= [10]), [19717])
	*((($3 + [32]) + [32])) = [0]
	*($3 + [48]) = (int_64)-1
	*($3 + [56]) = (int_64)0
	$4 = *(($0 + [8]))
	*($3 + [32]) = $4
	*($3 + [40]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)4065364500516175872, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$11 = CALL $69(($3 + [32]), $5)
	CALL eosio_assert(((int_32)*($11 + [60]) == (int_32)($3 + [32])), [17071])
	$1 = *($11 + [8])
	$13 = *(($3 + [100]))
	$12 = *((($3 + [72]) + [24]))
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$9 }
	
.LOOP $label$12:
	$5 = ($13 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$10 }
	$13 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$11
	*($3 + [136]) = $0
	*($3 + [132]) = ($3 + [112])
	*($3 + [128]) = ($3 + [120])
	CALL $78(($3 + [24]), ($3 + [32]), $1, ($3 + [128]))
	$1 = *($3 + [120])
	*($3 + [128]) = ($3 + [120])
	CALL eosio_assert($10, [17533])
	CALL $79(($3 + [72]), $9, $1, ($3 + [128]))
	$1 = *($3 + [120])
	CALL $45(($3 + [128]), $0, (int_64)4067679113740201856)
	CALL $41($0, $1, (int_64)4067679113740201856, ( ((int_64)*($3 + [128]) + (int_64)1) ? (int_64)1 : *($3 + [136]) ))
	$13 = *($3 + [56])
	if ( $13 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$10
	if ( ((int_32)$12 == (int_32)$13) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($6 + [88]) == (int_32)($3 + [72])), [17071])
	*($3 + [24]) = ($3 + [72])
	$14 = (($3 + [24]) | [4])
	goto $label$8 
	
.LABEL $label$9
	$5 = CALL db_find_i64(*($3 + [72]), *(($3 + [80])), (int_64)4067492955986853888, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $67(($3 + [72]), $5)
	CALL eosio_assert(((int_32)*($6 + [88]) == (int_32)($3 + [72])), [17071])
	*($3 + [24]) = ($3 + [72])
	$14 = (($3 + [24]) | [4])
	
.LABEL $label$8
	*($14) = $6
	$1 = *($3 + [120])
	if ( ((int_64)*(($11 + [8])) != (int_64)$1) ){ goto $label$13 }
	$5 = *($6 + [20])
	if ( (int_32((*(($6 + [24])) - $5) >> [3]) <= [2]) ){ goto $label$6 }
	*($3 + [128]) = *($5 + [8])
	$15 = ($3 + [60])
	$16 = (($3 + [32]) + [24])
	$17 = ($3 + [40])
	$0 = [1]
	
.LOOP $label$14:
	$1 = *((*($6 + [20]) + ($0 << [3])))
	$6 = *($15)
	$12 = *($16)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$17 }
	
.LOOP $label$19:
	$5 = ($6 + [-24])
	$13 = *($5)
	if ( ((int_64)*($13) == (int_64)$1) ){ goto $label$18 }
	$6 = $5
	if ( ((int_32)$12 != (int_32)$5) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*(($13 + [60])) == (int_32)($3 + [32])), [17071])
	if ( $13 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$5 = CALL db_find_i64(*($3 + [32]), *($17), (int_64)4065364500516175872, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$15 }
	$13 = CALL $69(($3 + [32]), $5)
	CALL eosio_assert(((int_32)*($13 + [60]) == (int_32)($3 + [32])), [17071])
	
.LABEL $label$16
	$1 = *($3 + [120])
	*($3 + [8]) = ($3 + [128])
	CALL eosio_assert([1], [17533])
	CALL $80(($3 + [32]), $13, $1, ($3 + [8]))
	
.LABEL $label$15
	$6 = *($14)
	$0 = ($0 + [1])
	if ( ($0 <= int_32((*(($6 + [24])) - *($6 + [20])) >> [3])) ){ goto $label$14 }
	$1 = *($3 + [120])
	*($3 + [16]) = ($3 + [24])
	CALL $81(($3 + [8]), ($3 + [72]), $1, ($3 + [16]))
	goto $label$5 
	
.LABEL $label$13
	$5 = *($3 + [28])
	*($3 + [128]) = ($3 + [120])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [17533])
	CALL $82(($3 + [72]), $5, $1, ($3 + [128]))
	goto $label$4 
	
.LABEL $label$7
	*($3 + [28]) = [0]
	*($3 + [24]) = ($3 + [72])
	goto $label$4 
	
.LABEL $label$6
	CALL $45(($3 + [128]), $0, (int_64)4067679113716016512)
	CALL $41($0, *($3 + [120]), (int_64)4067679113716016512, ( ((int_64)*($3 + [128]) + (int_64)-1) ? (int_64)-1 : *($3 + [136]) ))
	
.LABEL $label$5
	$1 = *($3 + [24])
	$5 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$6 = ((int_32)$5) != (int_32)[0]
	CALL eosio_assert($6), [17321])
	CALL eosio_assert($6, [17355])
	$6 = CALL db_next_i64(*($5 + [92]), ($3 + [128]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$20 }
	CALL $67((CASTING uint_32)(uint_64 $1), $6)
	
.LABEL $label$20
	CALL $68(($3 + [72]), $5)
	
.LABEL $label$4
	$1 = *($3 + [120])
	*($3 + [128]) = ($3 + [112])
	CALL eosio_assert([1], [17533])
	CALL $83(($3 + [32]), $11, $1, ($3 + [128]))
	$1 = *($3 + [120])
	*($3 + [128]) = ($3 + [120])
	CALL eosio_assert($10, [17533])
	CALL $84(($3 + [72]), $9, $1, ($3 + [128]))
	$13 = *($3 + [56])
	if ( ($13 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$12 = ($3 + [60])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$13) ){ goto $label$22 }
	
.LOOP $label$23:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$24 }
	CALL _ZdlPv($6)
	
.LABEL $label$24
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$23 }
	$5 = *(($3 + [56]))
	goto $label$21 
	
.LABEL $label$22
	$5 = $13
	
.LABEL $label$21
	*($12) = $13
	CALL _ZdlPv($5)
	
.LABEL $label$2
	CALL $71(($3 + [96]))
	$global$0 = ($3 + [144])
}

void .FUNC $188 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16884])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16692]
	$3 = (((int_32)$1 * (int_32)[12]) + [16692])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $49 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $104($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $105(($4 + [72]), ($4 + [64]))
	CALL $106(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $174(($4 + [8]))
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [18082])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [18187])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [18120])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [18187])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC memory ()
{
	CALL $159()
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17208])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $184($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [20]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17231])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17231])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [17231])
	CALL memcpy(($3 + [16]), ($2 + [16]), [1])
	*($5 + [16]) = ((int_32)*($3 + [16]) != (int_32)[0])
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $102(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $42 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0 + [8])
	*($2) = $3
	*($2 + [8]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)-2968585630355423232, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $96($2, $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$2), [17071])
	CALL eosio_assert([1], [17321])
	CALL eosio_assert([1], [17355])
	$4 = CALL db_next_i64(*($0 + [20]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $96($2, $4)
	
.LABEL $label$2
	CALL $101($2, $0)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [24]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [64]) = $3
	*($4 + [72]) = $2
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$3 = *($0 + [8])
	*($4 + [24]) = $3
	*($4 + [32]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)-2968585630355423232, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $96(($4 + [24]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [24])), [17071])
	*($4 + [16]) = ($4 + [64])
	CALL eosio_assert([1], [17533])
	CALL $97(($4 + [24]), $0, $1, ($4 + [16]))
	$5 = *($4 + [48])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [20]) = ($4 + [64])
	*($4 + [16]) = ($4 + [72])
	CALL $98(($4 + [8]), ($4 + [24]), $1, ($4 + [16]))
	$5 = *($4 + [48])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($4 + [52])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = $1
	*($3) = (int_64)0
	CALL $94(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $95(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [20]) = $1
	*($3) = (int_64)0
	CALL $103(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $102(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [20])) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [16]) = [0]
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	CALL eosio_assert([1], [17287])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [31]) = *($1 + [16])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($4 + [16]), ($4 + [31]), [1])
	CALL db_update_i64(*($1 + [24]), $2, $4, [17])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($1 + [8])
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$1 = CALL db_find_i64($4, $4, (int_64)-2968585630355423232, $2)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$4 }
	$1 = CALL $96(($3 + [8]), $1)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)($3 + [8])), [17071])
	*($0 + [8]) = [1]
	*($0) = *($1 + [8])
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$6 }
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$2
	$0 = $5
	
.LABEL $label$1
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($3 + [48])
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [20])) == (int_32)$0), [17385])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17430])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17480])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $188($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $182(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8204])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $182(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $188($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $184($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8204])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $184($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $168 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $175 ()
{
	return [8208]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $169(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $169(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [20])) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [16]) = [1]
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	CALL eosio_assert([1], [17287])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	*($4 + [31]) = *($1 + [16])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($4 + [16]), ($4 + [31]), [1])
	CALL db_update_i64(*($1 + [24]), $2, $4, [17])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17208])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $184($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $112(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $111(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $1
	$6 = *($3)
	*($5 + [8]) = *($6 + [8])
	*($5 + [24]) = *($6 + [8])
	*($5 + [16]) = *($6)
	*($5 + [32]) = *(*($3 + [4]))
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($5 + [16])
	*($4 + [64]) = $5
	*($4 + [72]) = ($5 + [32])
	CALL $110(($4 + [64]), ($4 + [56]))
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)-4157508551318700032, $2, $7), $4, [40]
	*($5 + [44]) = $6)
	if ( (uint_64)($7 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$1
	*($4 + [64]) = $5
	$7 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($4) = $7)
	*($4 + [40]) = $6
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $111(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $126($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $172($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $172($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $168($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $169(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $169(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17208])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $184($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17231])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17231])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $115(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [18729])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [18772])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [18791])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [17665])
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [32])
	CALL $110(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $56 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0)
	*($4 + [24]) = $5
	$6 = *($2 + [8])
	*($4 + [32]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $54(($4 + [24]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [24])), [17071])
	*($4 + [8]) = $2
	CALL eosio_assert([1], [17533])
	CALL $113(($4 + [24]), $0, (int_64)0, ($4 + [8]))
	$7 = *($4 + [48])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [16]) = $2
	CALL $114(($4 + [8]), ($4 + [24]), $3, ($4 + [16]))
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [52])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($2)
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [17231])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $52(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $173 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$6 = *($3)
	$7 = *($3 + [4])
	$8 = *($3 + [8])
	$9 = *($0)
	if ( ($9 & [1]) ){ goto $label$3 }
	$10 = ($0 + [1])
	$9 = uint_32($9 >> [1])
	if ( ((uint_32)$9 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$10 = *($0 + [8])
	$9 = *($0 + [4])
	if ( ($9 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($6 & [1])
	$0 = ( $7 ? uint_32($6 >> [1]) : $6 )
	if ( ($0 <= $4) ){ goto $label$1 }
	$5 = ($9 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	$0 = ($0 - $4)
	$0 = ( $0 ? $5 : ($0 <= $5) )
	$5 = ( $0 ? $2 : ($0 <= $2) )
	if ( ($5 == 0) ){ goto $label$5 }
	$3 = CALL $178(($10 + $1), (( $8 ? ($3 + [1]) : $6 ) + $4), $5)
	if ( $3 ){ goto $label$4 }
	
.LABEL $label$5
	$3 = [0]
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$4 }
	$3 = ( [-1] ? [1] : ($2 <= $0) )
	
.LABEL $label$4
	return $3
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $152 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0 + [20])
	$2 = *(($0 + [24]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	$4 = int_32(($2 - $3) >> [3])
	$5 = [0]
	$6 = [0]
	$7 = [0]
	
.LOOP $label$3:
	$8 = ($3 + $5)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$1 }
	$5 = ($5 + [8])
	$6 = ($6 + [4])
	$7 = ($7 + [1])
	if ( ($7 <= $4) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	$9 = ($8 + [8])
	$7 = ($2 - $9)
	$4 = int_32($7 >> [3])
	if ( ($7 == 0) ){ goto $label$4 }
	CALL memmove($8, $9, $7)
	
.LABEL $label$4
	*(($0 + [24])) = (($3 + ($4 << [3])) + $5)
	$8 = *($0 + [32])
	$2 = ($8 + $6)
	$9 = ($2 + [4])
	$3 = ($0 + [36])
	$7 = (*($3) - $9)
	$4 = int_32($7 >> [2])
	if ( ($7 == 0) ){ goto $label$5 }
	CALL memmove($2, $9, $7)
	
.LABEL $label$5
	*($3) = (($8 + ($4 << [2])) + $6)
	$3 = *($0 + [44])
	$4 = ($3 + $5)
	$0 = ($4 + [8])
	$7 = ($0 + [48])
	$6 = (*($7) - $0)
	$8 = int_32($6 >> [3])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memmove($4, $0, $6)
	
.LABEL $label$6
	*($7) = (($3 + ($8 << [3])) + $5)
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4 + [8])
	$6 = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	*($1) = $6
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = [0]
	CALL $45(($2 + [96]), $5, (int_64)4061463346874417152)
	*($1 + [24]) = ( *($2 + [96]) ? (int_64)0 : *($2 + [104]) )
	*($2 + [80]) = ($2 + [57])
	*($2 + [76]) = $2
	*($2 + [72]) = $2
	*($2 + [88]) = ($2 + [72])
	*($2 + [100]) = ($1 + [8])
	*($2 + [96]) = $1
	*($2 + [104]) = ($1 + [16])
	*($2 + [108]) = ($1 + [24])
	*($2 + [112]) = ($1 + [32])
	*($2 + [116]) = ($1 + [40])
	*($2 + [120]) = ($1 + [48])
	*($2 + [124]) = ($1 + [56])
	CALL $142(($2 + [96]), ($2 + [88]))
	$6 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($3 + [8]), (int_64)4065364500516175872, *(*($0 + [8])), $6, $2, [57])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [128])
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17287])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[3]), [17287])
	$7 = ($0 + [4])
	CALL memcpy(*($7), $6, [4])
	$4 = (*($7) + [4])
	*($7) = $4
	$6 = ($6 + [4])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17287])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [17287])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$2 = *(*($0) + [4])
	*($1) = *(*($2 + [20]) + [8])
	CALL $170(($1 + [8]), ($2 + [8]))
	$3 = ($1 + [20])
	$2 = *($1 + [20])
	if ( ((uint_32)int_32((*(($1 + [28])) - $2) >> [3]) > (uint_32)[9]) ){ goto $label$1 }
	$4 = ($1 + [24])
	$5 = *($4)
	$2 = *($1 + [20])
	$5 = (*($4) - $2)
	$6 = CALL _Znwj([80])
	$7 = ($6 + ($5 - $2))
	$8 = ($7 - $5)
	$6 = ($6 + [80])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($8, $2, $5)
	$2 = *($3)
	
.LABEL $label$2
	*($4) = $7
	*(($1 + [20])) = $8
	*(($1 + [28])) = $6
	if ( ($2 == 0) ){ goto $label$1 }
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$9 = ($1 + [32])
	$2 = *($1 + [32])
	if ( ((uint_32)int_32((*(($1 + [40])) - $2) >> [2]) > (uint_32)[9]) ){ goto $label$3 }
	$4 = ($1 + [36])
	$5 = *($4)
	$2 = *($1 + [32])
	$5 = (*($4) - $2)
	$6 = CALL _Znwj([40])
	$7 = ($6 + ($5 - $2))
	$8 = ($7 - $5)
	$6 = ($6 + [40])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($8, $2, $5)
	$2 = *($9)
	
.LABEL $label$4
	*($4) = $7
	*(($1 + [32])) = $8
	*(($1 + [40])) = $6
	if ( ($2 == 0) ){ goto $label$3 }
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$10 = ($1 + [44])
	$2 = *($1 + [44])
	if ( ((uint_32)int_32((*(($1 + [52])) - $2) >> [3]) > (uint_32)[9]) ){ goto $label$5 }
	$4 = ($1 + [48])
	$5 = *($4)
	$2 = *($1 + [44])
	$5 = (*($4) - $2)
	$6 = CALL _Znwj([80])
	$7 = ($6 + ($5 - $2))
	$8 = ($7 - $5)
	$6 = ($6 + [80])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($8, $2, $5)
	$2 = *($10)
	
.LABEL $label$6
	*($4) = $7
	*(($1 + [44])) = $8
	*(($1 + [52])) = $6
	if ( ($2 == 0) ){ goto $label$5 }
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$6 = *($0)
	$2 = *($6 + [4])
	if ( (int_32((*(($2 + [24])) - *($2 + [20])) >> [3]) <= [2]) ){ goto $label$7 }
	$11 = ($1 + [28])
	$12 = ($1 + [24])
	$13 = ($1 + [40])
	$14 = ($1 + [36])
	$15 = ($1 + [52])
	$16 = ($1 + [48])
	$5 = [4]
	$4 = [8]
	$7 = [1]
	
.LOOP $label$8:
	$8 = (*($2 + [20]) + $4)
	$2 = *($12)
	if ( ((int_32)$2 == (int_32)*($11)) ){ goto $label$10 }
	*($12) = ($2 + [8])
	*($2) = *($8)
	goto $label$9 
	
.LABEL $label$10
	CALL $146($3, $8)
	$6 = *($0)
	
.LABEL $label$9
	$2 = *($6 + [4])
	$17 = (*($2 + [32]) + $5)
	$8 = *($14)
	if ( ((int_32)$8 == (int_32)*($13)) ){ goto $label$12 }
	*($14) = ($8 + [4])
	*($8) = *($17)
	goto $label$11 
	
.LABEL $label$12
	CALL $157($9, $17)
	$6 = *($0)
	$2 = *($6 + [4])
	
.LABEL $label$11
	$17 = (*($2 + [44]) + $4)
	$8 = *($16)
	if ( ((int_32)$8 == (int_32)*($15)) ){ goto $label$14 }
	*($16) = ($8 + [8])
	*($8) = *($17)
	goto $label$13 
	
.LABEL $label$14
	CALL $158($10, $17)
	$6 = *($0)
	$2 = *($6 + [4])
	
.LABEL $label$13
	$5 = ($5 + [4])
	$4 = ($4 + [8])
	$7 = ($7 + [1])
	if ( ($7 <= int_32((*(($2 + [24])) - *($2 + [20])) >> [3])) ){ goto $label$8 }
	
.LABEL $label$7
	*($1 + [56]) = *($2 + [56])
	*($1 + [64]) = *($2 + [64])
	*($1 + [72]) = *($2 + [72])
	*($1 + [80]) = *($2 + [80])
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $154 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	CALL $156(*($0 + [4]), $1)
	*(($4 = $2) + [16]) = [0]
	*($4) = ($4 + [16])
	$5 = ($1 + [8])
	*($4 + [28]) = $5
	*($4 + [24]) = $1
	$6 = ($1 + [20])
	*($4 + [32]) = $6
	$7 = ($1 + [32])
	*($4 + [36]) = $7
	$8 = ($1 + [44])
	*($4 + [40]) = $8
	$9 = ($1 + [56])
	*($4 + [44]) = $9
	$10 = ($1 + [60])
	*($4 + [48]) = $10
	$11 = ($1 + [64])
	*($4 + [52]) = $11
	$12 = ($1 + [72])
	*($4 + [56]) = $12
	$13 = ($1 + [80])
	*($4 + [60]) = $13
	CALL $144(($4 + [24]), $4)
	$14 = *($4 + [16])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$2 = CALL $184($14)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($14 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $14)
	*($4 + [16]) = $4
	*($4 + [28]) = $5
	*($4 + [24]) = $1
	*($4 + [32]) = $6
	*($4 + [36]) = $7
	*($4 + [40]) = $8
	*($4 + [44]) = $9
	*($4 + [48]) = $10
	*($4 + [52]) = $11
	*($4 + [56]) = $12
	*($4 + [60]) = $13
	CALL $145(($4 + [24]), ($4 + [16]))
	$15 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($3 + [8]), (int_64)4067492955986853888, *(*($0 + [8])), $15, $2, $14)
	if ( ((uint_32)$14 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$15 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($2)
	if ( (uint_64)($15 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $155 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = $1
	$4 = *($0 + [20])
	$3 = *(($0 + [24]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	$5 = int_32(($3 - $4) >> [3])
	$6 = [0]
	
.LOOP $label$4:
	if ( ((int_64)*($4) == (int_64)$1) ){ goto $label$2 }
	$4 = ($4 + [8])
	$6 = ($6 + [1])
	if ( ($6 <= $5) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)*(($0 + [28])) == (int_32)$3) ){ goto $label$6 }
	*($3) = $1
	*(($0 + [24])) = ($3 + [8])
	goto $label$5 
	
.LABEL $label$6
	CALL $146(($0 + [20]), ($2 + [8]))
	
.LABEL $label$5
	*($2) = [0]
	$6 = ($0 + [36])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [40]))) ){ goto $label$8 }
	*($4) = [0]
	*($6) = ($4 + [4])
	goto $label$7 
	
.LABEL $label$8
	CALL $147(($0 + [32]), $2)
	
.LABEL $label$7
	*($2) = (int_64)0
	$6 = ($0 + [48])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [52]))) ){ goto $label$1 }
	*($4) = (int_64)0
	*($6) = ($4 + [8])
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$1
	CALL $148(($0 + [44]), $2)
	$global$0 = ($2 + [16])
}

void .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $159 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	*([0] + [8192 align=4]) = (int_64)0
	*([0] + [8200]) = [0]
	$0 = CALL $179([16896])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*([0] + [8192]) = ($0 << [1])
	$1 = [8193]
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = (($0 + [16]) & [-16])
	$1 = CALL _Znwj($2)
	*([0] + [8192]) = ($2 | [1])
	*([0] + [8200]) = $1
	*([0] + [8196]) = $0
	
.LABEL $label$3
	CALL memcpy($1, [16896], $0)
	
.LABEL $label$2
	*(($1 + $0)) = [0]
	CALL $177([20], [0], [8192])
	return (unreachable)
	
.LABEL $label$1
	CALL $168([8192])
}

int_32 .FUNC $179 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $184($1)
	
.LABEL $label$2
	*(CALL $175()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $184(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $188($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17208])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $184($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [60]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	CALL $137(($3 + [32]), ($3 + [24]))
	*($5 + [64]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $138(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [17385])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17430])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17480])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	$8 = *($3 + [44])
	if ( ($8 == 0) ){ goto $label$10 }
	*(($3 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$11 }
	*(($3 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$11
	$8 = *($3 + [20])
	if ( ($8 == 0) ){ goto $label$12 }
	*(($3 + [24])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$12
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$15 }
	$8 = *($5 + [44])
	if ( ($8 == 0) ){ goto $label$16 }
	*(($5 + [48])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	$8 = *($5 + [32])
	if ( ($8 == 0) ){ goto $label$17 }
	*(($5 + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$17
	$8 = *($5 + [20])
	if ( ($8 == 0) ){ goto $label$18 }
	*(($5 + [24])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$18
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$19
	CALL _ZdlPv($5)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$14 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [92]))
}

void .FUNC $65 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($4 + [56]) = $2
	*(($4 + [48])) = [0]
	*($4 + [32]) = (int_64)-1
	*($4 + [40]) = (int_64)0
	$5 = *($0 + [8])
	*($4 + [16]) = $5
	*($4 + [24]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)-4121507134962270208, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $121(($4 + [16]), $0)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)($4 + [16])), [17071])
	*($4 + [8]) = $3
	CALL eosio_assert([1], [17533])
	CALL $122(($4 + [16]), $0, $1, ($4 + [8]))
	$6 = *($4 + [40])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [12]) = $3
	*($4 + [8]) = ($4 + [56])
	CALL $123($4, ($4 + [16]), $1, ($4 + [8]))
	$6 = *($4 + [40])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($4 + [44])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($0)
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = CALL $169($2, $1)
	$4 = *($1 + [48])
	$5 = *($1 + [40])
	$6 = *($1 + [32])
	$7 = *($1 + [24])
	$8 = *($1 + [16])
	$1 = *($0 + [4])
	$9 = *($1 + [4])
	$0 = (*($0) + int_32($9 >> [1]))
	$1 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$9 = CALL $169(($2 + [16]), $3)
	CALL void $0((int_32 $9), (int_32 $8), (int_64 $7), (int_64 ($6 & [255])), (int_32 $5), (int_64 $4), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($3) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($3) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17208])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $184($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([104]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [88]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [20])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [44])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [60])
	*($3 + [68]) = ($5 + [64])
	*($3 + [72]) = ($5 + [72])
	*($3 + [76]) = ($5 + [80])
	CALL $128(($3 + [40]), ($3 + [32]))
	*($5 + [92]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $129(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$11 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $66 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0 + [8])
	*($2) = $3
	*($2 + [8]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)-4121507134962270208, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $121($2, $0)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)$2), [17071])
	CALL eosio_assert([1], [17321])
	CALL eosio_assert([1], [17355])
	$4 = CALL db_next_i64(*($0 + [24]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $121($2, $4)
	
.LABEL $label$2
	CALL $127($2, $0)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($2 + [24]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $61 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$4 = *($2)
	$0 = CALL $117(($3 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [19362]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$4), [19386])
	if ( ((int_64)$4 != (int_64)*($0)) ){ goto $label$3 }
	CALL $118(($3 + [8]), $0)
	$5 = *($3 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($3) = $2
	CALL $119(($3 + [8]), $0, $1, $3)
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($3 + [36])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($3 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($2)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $60 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [17071])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $50($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [17071])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $52(*($1), *($0))
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy(($0 + [16]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy(($0 + [24]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [17231])
	CALL memcpy(($0 + [32]), *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy(($0 + [40]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy(($0 + [48]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $120($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $115(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $1 (int_32 $0)
{
	if ( ((*([0] + [8192]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8200]))
	
.LABEL $label$1
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [32]) = *(*($3))
	*($1 + [40]) = *(*($3 + [4]))
	*($1 + [56]) = *(*($3 + [12]))
	*($1 + [48]) = *(*($3 + [8]))
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	*($4 + [80]) = ($4 + [57])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $142(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [64]), $2, $4, [57])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$6 = *($1)
	$8 = *($1 + [20])
	$7 = *(($1 + [24]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$1 }
	$9 = *(*($3 + [4]))
	$10 = *(*($3))
	$11 = int_32(($7 - $8) >> [3])
	$12 = [0]
	$7 = [0]
	$13 = [0]
	
.LOOP $label$3:
	if ( ((int_64)*(($8 + $7)) == (int_64)$10) ){ goto $label$2 }
	$12 = ($12 + [4])
	$7 = ($7 + [8])
	$13 = ($13 + [1])
	if ( ($13 <= $11) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*(($12 = (*($1 + [32]) + $12))) = (*($12) + (CASTING uint_32)(uint_64 $9))
	$10 = CALL current_time()
	*((*($1 + [44]) + $7)) = ((uint_64)$10 / (uint_64)(int_64)1000)
	
.LABEL $label$1
	$13 = ($1 + [20])
	$7 = *(*($3 + [8]))
	if ( ((int_32)$7 == (int_32)[1000]) ){ goto $label$4 }
	$10 = (CASTING int_64)(int_32 $7)
	if ( ((int_64)$10 == (int_64)2) ){ goto $label$6 }
	if ( ((int_64)$10 == (int_64)1) ){ goto $label$5 }
	if ( ((int_64)$10 != (int_64)0) ){ goto $label$4 }
	*($1 + [56]) = (*($1 + [56]) + [1])
	goto $label$4 
	
.LABEL $label$6
	*($1 + [64]) = (*($1 + [64]) + [1])
	goto $label$4 
	
.LABEL $label$5
	*($1 + [60]) = (*($1 + [60]) + [1])
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17665])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$8 = ($1 + [8])
	*($5 + [28]) = $8
	*($5 + [24]) = $1
	*($5 + [32]) = $13
	$11 = ($1 + [32])
	*($5 + [36]) = $11
	$3 = ($1 + [44])
	*($5 + [40]) = $3
	$14 = ($1 + [56])
	*($5 + [44]) = $14
	$15 = ($1 + [60])
	*($5 + [48]) = $15
	$16 = ($1 + [64])
	*($5 + [52]) = $16
	$17 = ($1 + [72])
	*($5 + [56]) = $17
	$18 = ($1 + [80])
	*($5 + [60]) = $18
	CALL $144(($5 + [24]), $5)
	$12 = *($5 + [16])
	if ( ($12 <= [513]) ){ goto $label$8 }
	$7 = CALL $184($12)
	goto $label$7 
	
.LABEL $label$8
	$7 = ($4 - (($12 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$7
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = ($7 + $12)
	*($5 + [16]) = $5
	*($5 + [28]) = $8
	*($5 + [32]) = $13
	*($5 + [36]) = $11
	*($5 + [40]) = $3
	*($5 + [44]) = $14
	*($5 + [48]) = $15
	*($5 + [52]) = $16
	*($5 + [56]) = $17
	*($5 + [60]) = $18
	*($5 + [24]) = $1
	CALL $145(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [92]), $2, $7, $12)
	if ( ((uint_32)$12 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $188($7)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [64])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$3 = *($3)
	*($1 + [24]) = (int_64))(*($1 + [24]) - *($3))
	*($1 + [16]) = (int_64))(*($1 + [16]) - *($3))
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	*($4 + [80]) = ($4 + [57])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $142(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [64]), $2, $4, [57])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	*($4 + [80]) = ($4 + [57])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $142(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [64]), $2, $4, [57])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	*($4 + [80]) = ($4 + [57])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $142(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [64]), $2, $4, [57])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $84 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$5 = *($1)
	CALL $155($1, *(*($3)))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17665])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [20])
	*($3 + [32]) = $7
	$8 = ($1 + [32])
	*($3 + [36]) = $8
	$9 = ($1 + [44])
	*($3 + [40]) = $9
	$10 = ($1 + [56])
	*($3 + [44]) = $10
	$11 = ($1 + [60])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [72])
	*($3 + [56]) = $13
	$14 = ($1 + [80])
	*($3 + [60]) = $14
	CALL $144(($3 + [24]), $3)
	$15 = *($3 + [16])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$4 = CALL $184($15)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($15 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $15)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [24]) = $1
	CALL $145(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $15)
	if ( ((uint_32)$15 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	*($4 + [80]) = ($4 + [57])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $142(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [64]), $2, $4, [57])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$5 = *($1)
	CALL $152($1, *(*($3)))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17665])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [20])
	*($3 + [32]) = $7
	$8 = ($1 + [32])
	*($3 + [36]) = $8
	$9 = ($1 + [44])
	*($3 + [40]) = $9
	$10 = ($1 + [56])
	*($3 + [44]) = $10
	$11 = ($1 + [60])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [72])
	*($3 + [56]) = $13
	$14 = ($1 + [80])
	*($3 + [60]) = $14
	CALL $144(($3 + [24]), $3)
	$15 = *($3 + [16])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$4 = CALL $184($15)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($15 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $15)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [24]) = $1
	CALL $145(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $15)
	if ( ((uint_32)$15 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([104]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [88]) = $1
	CALL $154(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [92])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $129(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [44])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [48])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($3 + [20])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [24])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	*($4 + [80]) = ($4 + [57])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $142(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [64]), $2, $4, [57])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

int_32 .FUNC $182 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $175())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $183($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17287])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [17287])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $107(*($1), *($0 + [4]))
	CALL $149(*($1), *($0 + [8]))
	CALL $150(*($1), *($0 + [12]))
	CALL $151(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17287])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17287])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [17287])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = (*($2) + [8])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [4])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$3 = *($3)
	$3 = *($0 + [8])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [3]))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	$1 = (($6 & [-8]) + $1)
	
.LABEL $label$4
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [12])
	$4 = *($3 + [4])
	$6 = ($4 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($6 >> [2]))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	$1 = (($6 & [-4]) + $1)
	
.LABEL $label$6
	*($2) = $1
	$0 = *($0)
	$0 = *($0 + [16])
	$3 = *($0 + [4])
	$4 = ($3 - $0)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [3]))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$8 }
	$1 = (($4 & [-8]) + $1)
	
.LABEL $label$8
	*($2) = ($1 + [28])
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	CALL $143($1, *(*($4)), *($4 + [4]))
	*(($4 = $2) + [16]) = [0]
	*($4) = ($4 + [16])
	$5 = ($1 + [8])
	*($4 + [28]) = $5
	*($4 + [24]) = $1
	$6 = ($1 + [20])
	*($4 + [32]) = $6
	$7 = ($1 + [32])
	*($4 + [36]) = $7
	$8 = ($1 + [44])
	*($4 + [40]) = $8
	$9 = ($1 + [56])
	*($4 + [44]) = $9
	$10 = ($1 + [60])
	*($4 + [48]) = $10
	$11 = ($1 + [64])
	*($4 + [52]) = $11
	$12 = ($1 + [72])
	*($4 + [56]) = $12
	$13 = ($1 + [80])
	*($4 + [60]) = $13
	CALL $144(($4 + [24]), $4)
	$14 = *($4 + [16])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$2 = CALL $184($14)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($14 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $14)
	*($4 + [16]) = $4
	*($4 + [28]) = $5
	*($4 + [24]) = $1
	*($4 + [32]) = $6
	*($4 + [36]) = $7
	*($4 + [40]) = $8
	*($4 + [44]) = $9
	*($4 + [48]) = $10
	*($4 + [52]) = $11
	*($4 + [56]) = $12
	*($4 + [60]) = $13
	CALL $145(($4 + [24]), ($4 + [16]))
	$15 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($3 + [8]), (int_64)4067492955986853888, *(*($0 + [8])), $15, $2, $14)
	if ( ((uint_32)$14 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$15 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($2)
	if ( (uint_64)($15 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	CALL $143($1, *(*($4)), *($4 + [4]))
	*(($4 = $2) + [16]) = [0]
	*($4) = ($4 + [16])
	$5 = ($1 + [8])
	*($4 + [28]) = $5
	*($4 + [24]) = $1
	$6 = ($1 + [20])
	*($4 + [32]) = $6
	$7 = ($1 + [32])
	*($4 + [36]) = $7
	$8 = ($1 + [44])
	*($4 + [40]) = $8
	$9 = ($1 + [56])
	*($4 + [44]) = $9
	$10 = ($1 + [60])
	*($4 + [48]) = $10
	$11 = ($1 + [64])
	*($4 + [52]) = $11
	$12 = ($1 + [72])
	*($4 + [56]) = $12
	$13 = ($1 + [80])
	*($4 + [60]) = $13
	CALL $144(($4 + [24]), $4)
	$14 = *($4 + [16])
	if ( ($14 <= [513]) ){ goto $label$2 }
	$2 = CALL $184($14)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($14 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $14)
	*($4 + [16]) = $4
	*($4 + [28]) = $5
	*($4 + [24]) = $1
	*($4 + [32]) = $6
	*($4 + [36]) = $7
	*($4 + [40]) = $8
	*($4 + [44]) = $9
	*($4 + [48]) = $10
	*($4 + [52]) = $11
	*($4 + [56]) = $12
	*($4 + [60]) = $13
	CALL $145(($4 + [24]), ($4 + [16]))
	$15 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($3 + [8]), (int_64)4067492955986853888, *(*($0 + [8])), $15, $2, $14)
	if ( ((uint_32)$14 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$15 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($2)
	if ( (uint_64)($15 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$15 + (int_64)1) : ((uint_64)$15 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [64])
}

void .FUNC $143 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0) = $1
	*($3 + [8]) = $1
	CALL $170(($0 + [8]), $2)
	$4 = ($0 + [20])
	$6 = *($0 + [20])
	$5 = *(($0 + [28]))
	if ( ((uint_32)int_32(($5 - $6) >> [3]) >= (uint_32)[10]) ){ goto $label$4 }
	$2 = ($0 + [24])
	$5 = *($2)
	$6 = *($0 + [20])
	$9 = (*($2) - $6)
	$7 = CALL _Znwj([80])
	$8 = ($7 + ($5 - $6))
	$10 = ($8 - $9)
	$5 = ($7 + [80])
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($10, $6, $9)
	$6 = *($4)
	
.LABEL $label$5
	*(($0 + [24])) = $8
	*(($0 + [20])) = $10
	*(($9 = ($0 + [28]))) = $5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL _ZdlPv($6)
	$5 = *($9)
	
.LABEL $label$6
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$2 = ($0 + [24])
	$6 = *($2)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $146($4, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($6) = $1
	*($2) = ($6 + [8])
	
.LABEL $label$1
	$4 = ($0 + [32])
	$5 = *($0 + [32])
	$2 = *(($0 + [40]))
	if ( ((uint_32)int_32(($2 - $5) >> [2]) >= (uint_32)[10]) ){ goto $label$8 }
	$6 = ($0 + [36])
	$2 = *($6)
	$5 = *($0 + [32])
	$9 = (*($6) - $5)
	$7 = CALL _Znwj([40])
	$8 = ($7 + ($2 - $5))
	$10 = ($8 - $9)
	$2 = ($7 + [40])
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($10, $5, $9)
	$5 = *($4)
	
.LABEL $label$9
	*(($0 + [36])) = $8
	*(($0 + [32])) = $10
	*(($9 = ($0 + [40]))) = $2
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	$2 = *($9)
	goto $label$7 
	
.LABEL $label$8
	$6 = ($0 + [36])
	
.LABEL $label$7
	*($3) = [0]
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)$2) ){ goto $label$11 }
	*($5) = [0]
	*($6) = ($5 + [4])
	goto $label$10 
	
.LABEL $label$11
	CALL $147($4, $3)
	
.LABEL $label$10
	$4 = ($0 + [44])
	$5 = *($0 + [44])
	$2 = *(($0 + [52]))
	if ( ((uint_32)int_32(($2 - $5) >> [3]) >= (uint_32)[10]) ){ goto $label$13 }
	$6 = ($0 + [48])
	$2 = *($6)
	$5 = *($0 + [44])
	$9 = (*($6) - $5)
	$7 = CALL _Znwj([80])
	$8 = ($7 + ($2 - $5))
	$10 = ($8 - $9)
	$2 = ($7 + [80])
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($10, $5, $9)
	$5 = *($4)
	
.LABEL $label$14
	*(($0 + [48])) = $8
	*(($0 + [44])) = $10
	*(($9 = ($0 + [52]))) = $2
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	$2 = *($9)
	goto $label$12 
	
.LABEL $label$13
	$6 = ($0 + [48])
	
.LABEL $label$12
	*($3) = (int_64)0
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)$2) ){ goto $label$16 }
	*($5) = (int_64)0
	*($6) = ($5 + [8])
	goto $label$15 
	
.LABEL $label$16
	CALL $148($4, $3)
	
.LABEL $label$15
	*($0 + [64]) = [0]
	*($0 + [56]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = (int_64)0
	$global$0 = ($3 + [16])
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [17287])
	CALL memcpy(*($0 + [4]), $3, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = [0]
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	$4 = *($0 + [8])
	*($2) = $4
	*($2 + [8]) = $4
	*($2 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($4, $4, (int_64)4067492955986853888, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$5 = ($1 + [1])
	$6 = CALL $67($2, $0)
	$7 = ($1 + [4])
	
.LOOP $label$3:
	$10 = ($0 & [1])
	$0 = *($1)
	$8 = ($0 & [1])
	$0 = *($6 + [8])
	$3 = uint_32($0 >> [1])
	$9 = ( *(($6 + [12])) ? $3 : $8 )
	if ( ((int_32)$9 != (int_32)( *($7) ? uint_32($0 >> [1]) : $10 )) ){ goto $label$4 }
	$0 = (($6 + [8]) + [1])
	$10 = ( *(($1 + [8])) ? $5 : $10 )
	if ( $8 ){ goto $label$5 }
	if ( ($9 == 0) ){ goto $label$2 }
	$8 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_32)*($0) != (int_32)*($10)) ){ goto $label$4 }
	$3 = [1]
	$10 = ($10 + [1])
	$0 = ($0 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [1]
	if ( ($9 == 0) ){ goto $label$1 }
	if ( (CALL $178(( *(($6 + [16])) ? $0 : $8 ), $10, $9) == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL eosio_assert([1], [17355])
	$0 = CALL db_next_i64(*($6 + [92]), ($2 + [40]))
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$7 }
	$6 = CALL $67($2, $0)
	goto $label$3 
	
.LABEL $label$7
	$3 = [0]
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL $71(($2 + [24]))
	$global$0 = ($2 + [48])
	return $3
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$5 = *($1)
	CALL $152($1, *(*($3)))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17665])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [20])
	*($3 + [32]) = $7
	$8 = ($1 + [32])
	*($3 + [36]) = $8
	$9 = ($1 + [44])
	*($3 + [40]) = $9
	$10 = ($1 + [56])
	*($3 + [44]) = $10
	$11 = ($1 + [60])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [72])
	*($3 + [56]) = $13
	$14 = ($1 + [80])
	*($3 + [60]) = $14
	CALL $144(($3 + [24]), $3)
	$15 = *($3 + [16])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$4 = CALL $184($15)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($15 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $15)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [24]) = $1
	CALL $145(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $15)
	if ( ((uint_32)$15 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [17385])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17430])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17480])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [64]))
}

int_32 .FUNC $71 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [44])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($3 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($3 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($3 + [20])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$9
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [60]) = $1
	CALL $139(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [64])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $138(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([104]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [88]) = $1
	CALL $140(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [92])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $129(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [44])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [48])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($3 + [20])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [24])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([104]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [88]) = $1
	CALL $141(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [92])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $129(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [44])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [48])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$4
	$1 = *($3 + [32])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [36])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$1 = *($3 + [20])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [24])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($1 + [60])) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	*($4 + [80]) = ($4 + [57])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [88]) = ($4 + [72])
	*($4 + [100]) = ($1 + [8])
	*($4 + [96]) = $1
	*($4 + [104]) = ($1 + [16])
	*($4 + [108]) = ($1 + [24])
	*($4 + [112]) = ($1 + [32])
	*($4 + [116]) = ($1 + [40])
	*($4 + [120]) = ($1 + [48])
	*($4 + [124]) = ($1 + [56])
	CALL $142(($4 + [96]), ($4 + [88]))
	CALL db_update_i64(*($1 + [64]), $2, $4, [57])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [60]) = $1
	CALL $153(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [64])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $138(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$5 = *($1)
	CALL $155($1, *(*($3)))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17665])
	*(($3 = $4) + [16]) = [0]
	*($3) = ($3 + [16])
	$6 = ($1 + [8])
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	$7 = ($1 + [20])
	*($3 + [32]) = $7
	$8 = ($1 + [32])
	*($3 + [36]) = $8
	$9 = ($1 + [44])
	*($3 + [40]) = $9
	$10 = ($1 + [56])
	*($3 + [44]) = $10
	$11 = ($1 + [60])
	*($3 + [48]) = $11
	$12 = ($1 + [64])
	*($3 + [52]) = $12
	$13 = ($1 + [72])
	*($3 + [56]) = $13
	$14 = ($1 + [80])
	*($3 + [60]) = $14
	CALL $144(($3 + [24]), $3)
	$15 = *($3 + [16])
	if ( ($15 <= [513]) ){ goto $label$2 }
	$4 = CALL $184($15)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($15 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $15)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [32]) = $7
	*($3 + [36]) = $8
	*($3 + [40]) = $9
	*($3 + [44]) = $10
	*($3 + [48]) = $11
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [24]) = $1
	CALL $145(($3 + [24]), ($3 + [16]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $15)
	if ( ((uint_32)$15 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $99($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $100(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)0
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [17287])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)-2968585630355423232, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [12]) = *(*($3 + [8]))
	$3 = *($0)
	CALL eosio_assert([1], [17287])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($2 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($2 | [12]), ($1 + [12]), [1])
	$4 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($3 + [8]), (int_64)5339760910833549312, *(*($0 + [8])), $4, $2, [13])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17208])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $184($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17231])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17231])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $100(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	CALL eosio_assert([1], [17287])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$4 = ($global$0 - [64])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$6 = *($1)
	$3 = *(*($3))
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)[1]) ){ goto $label$2 }
	if ( $3 ){ goto $label$1 }
	*($1 + [72]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000) + (int_64)300000)
	*($1 + [56]) = (*($1 + [56]) + [-1])
	goto $label$1 
	
.LABEL $label$3
	*($1 + [80]) = (int_64)0
	*($1 + [64]) = (*($1 + [64]) + [-1])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000) + (int_64)300000)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17665])
	*($5 + [16]) = [0]
	*($5) = ($5 + [16])
	$7 = ($1 + [8])
	*($5 + [28]) = $7
	*($5 + [24]) = $1
	$8 = ($1 + [20])
	*($5 + [32]) = $8
	$9 = ($1 + [32])
	*($5 + [36]) = $9
	$10 = ($1 + [44])
	*($5 + [40]) = $10
	$11 = ($1 + [56])
	*($5 + [44]) = $11
	$12 = ($1 + [60])
	*($5 + [48]) = $12
	$13 = ($1 + [64])
	*($5 + [52]) = $13
	$14 = ($1 + [72])
	*($5 + [56]) = $14
	$15 = ($1 + [80])
	*($5 + [60]) = $15
	CALL $144(($5 + [24]), $5)
	$3 = *($5 + [16])
	if ( ($3 <= [513]) ){ goto $label$5 }
	$4 = CALL $184($3)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $7
	*($5 + [32]) = $8
	*($5 + [36]) = $9
	*($5 + [40]) = $10
	*($5 + [44]) = $11
	*($5 + [48]) = $12
	*($5 + [52]) = $13
	*($5 + [56]) = $14
	*($5 + [60]) = $15
	*($5 + [24]) = $1
	CALL $145(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $188($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$6
	$global$0 = ($5 + [64])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [60]) = (*($1 + [60]) + [-1])
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	*(($6 = $4) + [16]) = [0]
	*($6) = ($6 + [16])
	$7 = ($1 + [8])
	*($6 + [28]) = $7
	*($6 + [24]) = $1
	$8 = ($1 + [20])
	*($6 + [32]) = $8
	$9 = ($1 + [32])
	*($6 + [36]) = $9
	$10 = ($1 + [44])
	*($6 + [40]) = $10
	$11 = ($1 + [56])
	*($6 + [44]) = $11
	$12 = ($1 + [60])
	*($6 + [48]) = $12
	$13 = ($1 + [64])
	*($6 + [52]) = $13
	$14 = ($1 + [72])
	*($6 + [56]) = $14
	$15 = ($1 + [80])
	*($6 + [60]) = $15
	CALL $144(($6 + [24]), $6)
	$16 = *($6 + [16])
	if ( ($16 <= [513]) ){ goto $label$2 }
	$4 = CALL $184($16)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($16 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $16)
	*($6 + [16]) = $6
	*($6 + [28]) = $7
	*($6 + [32]) = $8
	*($6 + [36]) = $9
	*($6 + [40]) = $10
	*($6 + [44]) = $11
	*($6 + [48]) = $12
	*($6 + [52]) = $13
	*($6 + [56]) = $14
	*($6 + [60]) = $15
	*($6 + [24]) = $1
	CALL $145(($6 + [24]), ($6 + [16]))
	CALL db_update_i64(*($1 + [92]), $2, $4, $16)
	if ( ((uint_32)$16 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [64])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [64])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0) = (int_64)0
	*($0) = *(*(*($2 + [4])))
	$1 = *($2)
	*($0 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000)
	CALL eosio_assert([1], [17287])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)5304430438831226880, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $138 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [128])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4 + [4])
	$6 = *(*($4))
	*($1 + [8]) = $6
	*($1) = $6
	*($1 + [16]) = (int_64)0
	*($1 + [24]) = (int_64)0
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [48]) = (int_64)0
	*($1 + [56]) = [0]
	CALL $45(($2 + [96]), $5, (int_64)4061463346874417152)
	*($1 + [24]) = ( *($2 + [96]) ? (int_64)0 : *($2 + [104]) )
	*($2 + [80]) = ($2 + [57])
	*($2 + [76]) = $2
	*($2 + [72]) = $2
	*($2 + [88]) = ($2 + [72])
	*($2 + [100]) = ($1 + [8])
	*($2 + [96]) = $1
	*($2 + [104]) = ($1 + [16])
	*($2 + [108]) = ($1 + [24])
	*($2 + [112]) = ($1 + [32])
	*($2 + [116]) = ($1 + [40])
	*($2 + [120]) = ($1 + [48])
	*($2 + [124]) = ($1 + [56])
	CALL $142(($2 + [96]), ($2 + [88]))
	$6 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($3 + [8]), (int_64)4065364500516175872, *(*($0 + [8])), $6, $2, [57])
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [128])
}

int_32 .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19573])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $133($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [17231])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19573])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [2])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $134($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [2]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[3]), [17231])
	CALL memcpy($7, *($2), [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$7 = ($7 + [4])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19573])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $135($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [17231])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [2])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($2 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [2]))
	$3 = ($2 + ($3 << [2]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [2]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = *($1 + [44])
	if ( ($4 == 0) ){ goto $label$4 }
	*(($1 + [48])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$4
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$5 }
	*(($1 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($1 + [20])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($1 + [24])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$8 }
	CALL _ZdlPv($1)
	
.LABEL $label$8
	return $0
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [17231])
	CALL memcpy($3, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $181 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $136(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $52(*($1), *($0 + [4]))
	CALL $130(*($1), *($0 + [8]))
	CALL $131(*($1), *($0 + [12]))
	CALL $132(*($1), *($0 + [16]))
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17231])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17231])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [17231])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [232]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [192]) + [16]))) = (int_64)0
	*(($4 + [224])) = [0]
	*($4 + [200]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [184]) = ($2 + $5)
	*($4 + [176]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [17231])
	CALL memcpy(($4 + [192]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [17231])
	CALL memcpy((($4 + [192]) + [8]), ($2 + [8]), [8])
	*($4 + [48]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [17231])
	CALL memcpy(($4 + [48]), ($2 + [16]), [8])
	*($3) = *($4 + [48])
	*($4 + [180]) = ($2 + [24])
	CALL $52(($4 + [176]), (($4 + [192]) + [24]))
	$3 = *($4 + [184])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$7 = *($4 + [176])
	*($4 + [8]) = $7
	*($4 + [32]) = $7
	*($4 + [24]) = CALL $34(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [28]) = ($4 + [232])
	CALL $53(($4 + [24]), ($4 + [192]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [216]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $188($2)
	$2 = [1]
	if ( ((*($4 + [216]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [224])))
	$global$0 = ($4 + [240])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [240])
	return $2
}

void .FUNC $9 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0))
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	$2 = *($0 + [8])
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)5304430438831226880, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $35($1, $0)
	
.LOOP $label$2:
	CALL require_recipient(*($0))
	CALL eosio_assert([1], [17321])
	CALL eosio_assert([1], [17355])
	$3 = [0]
	$4 = CALL db_next_i64(*($0 + [20]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $35($1, $4)
	
.LABEL $label$3
	CALL $37($1, $0)
	$0 = $3
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($1 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($1 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($1 + [48])
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [20]) = $1
	CALL $124(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $125(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$6 = *($1)
	$7 = ($1 + [8])
	CALL $170($7, *($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17665])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [8])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $184($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [17287])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $107($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $188($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17208])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $184($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17231])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $52(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $125(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $120 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2)
	$4 = *(*($2 + [4]))
	*($0) = *($4)
	*($0 + [8]) = *(($4 + [8]))
	CALL eosio_assert([1], [17287])
	CALL memcpy($3, $0, [8])
	*($3 + [24]) = *($0 + [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($3 | [8]), ($3 + [24]), [8])
	$5 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, *(*($2 + [8])), $5), $3, [16])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 apply)
{
	int_32 $3
	$3 = ($global$0 - [304])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)4056780959000011423) ){ goto $label$19 }
	if ( ((int_64)$2 > (int_64)4064873923584458751) ){ goto $label$18 }
	if ( ((int_64)$2 <= (int_64)4058053744225419263) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)4058053744225419264) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)4058153498780011808) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)4062043794247548928) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [1]
	*($3 + [112]) = *($3 + [184])
	CALL $4($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$19
	if ( ((int_64)$2 <= (int_64)-3810963714773876737) ){ goto $label$17 }
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$15 }
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)3842561318754189312) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)4056780810794041344) ){ goto $label$1 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [2]
	*($3 + [128]) = *($3 + [168])
	CALL $6($1, $1, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$18
	if ( ((int_64)$2 <= (int_64)5031766152489992191) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)5031766152489992192) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)5339760910820966400) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$1 }
	*($3 + [236]) = [0]
	*($3 + [232]) = [3]
	*($3 + [64]) = *($3 + [232])
	CALL $8($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$17
	if ( ((int_64)$2 > (int_64)-4352380133890326529) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-4858393161325608960) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)-4750306770268717056) ){ goto $label$1 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [4]
	*($3 + [16]) = *($3 + [280])
	CALL $10($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$16
	if ( ((int_64)$2 == (int_64)4056780959000011424) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)4057071020543049728) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [5]
	*($3 + [136]) = *($3 + [160])
	CALL $6($1, $1, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$15
	if ( ((int_64)$2 == (int_64)-3810963714773876736) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-3810963571671040000) ){ goto $label$1 }
	*($3 + [268]) = [0]
	*($3 + [264]) = [6]
	*($3 + [32]) = *($3 + [264])
	CALL $13($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)4064873923584458752) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)4068304327562756096) ){ goto $label$1 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [7]
	*($3 + [144]) = *($3 + [152])
	CALL $15($1, $1, ($3 + [144]))
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-4352380133890326528) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3810963779806396416) ){ goto $label$1 }
	*($3 + [260]) = [0]
	*($3 + [256]) = [8]
	*($3 + [40]) = *($3 + [256])
	CALL $10($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [204]) = [0]
	*($3 + [200]) = [9]
	*($3 + [96]) = *($3 + [200])
	CALL $10($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [196]) = [0]
	*($3 + [192]) = [10]
	*($3 + [104]) = *($3 + [192])
	CALL $19($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [228]) = [0]
	*($3 + [224]) = [11]
	*($3 + [72]) = *($3 + [224])
	CALL $21($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [300]) = [0]
	*($3 + [296]) = [12]
	*($3) = *($3 + [296])
	CALL $23($1, $1, $3)
	goto $label$1 
	
.LABEL $label$8
	*($3 + [244]) = [0]
	*($3 + [240]) = [13]
	*($3 + [56]) = *($3 + [240])
	CALL $25($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [276]) = [0]
	*($3 + [272]) = [14]
	*($3 + [24]) = *($3 + [272])
	CALL $27($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [292]) = [0]
	*($3 + [288]) = [15]
	*($3 + [8]) = *($3 + [288])
	CALL $23($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [180]) = [0]
	*($3 + [176]) = [16]
	*($3 + [120]) = *($3 + [176])
	CALL $6($1, $1, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [252]) = [0]
	*($3 + [248]) = [17]
	*($3 + [48]) = *($3 + [248])
	CALL $23($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [212]) = [0]
	*($3 + [208]) = [18]
	*($3 + [88]) = *($3 + [208])
	CALL $32($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [220]) = [0]
	*($3 + [216]) = [19]
	*($3 + [80]) = *($3 + [216])
	CALL $19($1, $1, ($3 + [80]))
	
.LABEL $label$1
	CALL $176([0])
	$global$0 = ($3 + [304])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [19573])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $104($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17231])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $170($6, *($4 + [4]))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [17287])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $107($3, $6)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)-4121507134962270208, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $188($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [112])
	$global$0 = $4
	*($4 + [95]) = $3
	CALL require_auth($1)
	CALL $45(($4 + [48]), $0, (int_64)4059685238987554816)
	$5 = *($4 + [48])
	$3 = *($4 + [56])
	CALL $45(($4 + [48]), $0, (int_64)4057545771816321024)
	CALL eosio_assert(((((int_32)*($4 + [56]) != (int_32)[0]) & ((int_64)*($4 + [48]) != (int_64)0)) & ((uint_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) >= (uint_64)( $5 ? (int_64)0 : $3 ))), [19577])
	*((($4 + [48]) + [32])) = [0]
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	$5 = *($0 + [8])
	*($4 + [48]) = $5
	*($4 + [56]) = $5
	*((($4 + [8]) + [32])) = [0]
	*($4 + [16]) = $5
	*($4 + [8]) = $5
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$3 = CALL db_find_i64($5, $5, (int_64)4065364500516175872, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $69(($4 + [48]), $3)
	CALL eosio_assert(((int_32)*($3 + [60]) == (int_32)($4 + [48])), [17071])
	$6 = *(($4 + [32]))
	$7 = *(($4 + [36]))
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$7 = [0]
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [19737])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$1), [19881])
	$5 = *($3 + [8])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$6:
	$3 = ($7 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$5 }
	$7 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)($4 + [8])), [17071])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$3 = CALL db_find_i64(*($4 + [8]), *(($4 + [16])), (int_64)4067492955986853888, $5)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $67(($4 + [8]), $3)
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)($4 + [8])), [17071])
	
.LABEL $label$3
	$9 = [0]
	$10 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($10, [19824])
	$7 = *(($4 + [36]))
	$6 = *(($4 + [32]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$10:
	$3 = ($7 + [-24])
	$11 = *($3)
	if ( ((int_64)*($11) == (int_64)$2) ){ goto $label$9 }
	$7 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($11 + [88]) == (int_32)($4 + [8])), [17071])
	$9 = $11
	goto $label$7 
	
.LABEL $label$8
	$3 = CALL db_find_i64(*($4 + [8]), *(($4 + [16])), (int_64)4067492955986853888, $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	$9 = CALL $67(($4 + [8]), $3)
	CALL eosio_assert(((int_32)*($9 + [88]) == (int_32)($4 + [8])), [17071])
	
.LABEL $label$7
	$3 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($3, [19896])
	$7 = *($4 + [95])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$12 }
	CALL eosio_assert(((int_32)($7 & [255]) == (int_32)[1]), [19975])
	CALL eosio_assert(((int_32)*($8 + [60]) != (int_32)[0]), [19943])
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert(((int_32)(($7 | [2]) & [255]) == (int_32)[2]), [19920])
	$7 = *($4 + [95])
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$13 }
	if ( $7 ){ goto $label$11 }
	CALL eosio_assert(((int_32)*($8 + [56]) != (int_32)[0]), [19943])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert(((int_32)*($8 + [64]) != (int_32)[0]), [19943])
	CALL eosio_assert(((uint_64)*($8 + [80]) > (uint_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000)), [19965])
	
.LABEL $label$11
	*($4 + [96]) = ($4 + [95])
	CALL eosio_assert($3, [17533])
	CALL $90(($4 + [8]), $9, $1, ($4 + [96]))
	if ( ((int_32)*($4 + [95]) != (int_32)[1]) ){ goto $label$14 }
	CALL eosio_assert($10, [17533])
	CALL $91(($4 + [8]), $8, $1, ($4 + [96]))
	
.LABEL $label$14
	CALL $45(($4 + [96]), $0, (int_64)4068304510766153728)
	CALL $41($0, $1, (int_64)4068304510766153728, ( ((int_64)*($4 + [96]) + (int_64)1) ? (int_64)1 : *($4 + [104]) ))
	CALL $71(($4 + [32]))
	$8 = *($4 + [72])
	if ( ($8 == 0) ){ goto $label$15 }
	$6 = ($4 + [76])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$17 }
	
.LOOP $label$18:
	$3 = ($3 + [-24])
	$7 = *($3)
	*($3) = [0]
	if ( ($7 == 0) ){ goto $label$19 }
	CALL _ZdlPv($7)
	
.LABEL $label$19
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$18 }
	$3 = *(($4 + [72]))
	goto $label$16 
	
.LABEL $label$17
	$3 = $8
	
.LABEL $label$16
	*($6) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$15
	$global$0 = ($4 + [112])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [176]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17231])
	CALL memcpy(($4 + [168]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [17231])
	CALL memcpy((($4 + [168]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [17231])
	CALL memcpy((($4 + [168]) + [16]), ($2 + [16]), [1])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [17])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	CALL $34(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$8 = *($4 + [184])
	$0 = *($4 + [176])
	$1 = *($4 + [168])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $188($2)
	
.LABEL $label$5
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL require_auth(*($0 + [120]))
	CALL $42($0, (int_64)-3810963500868668544)
	CALL $42($0, (int_64)-3810963744556711936)
	CALL $42($0, (int_64)-3810963488499564544)
	*(($1 + [32])) = [0]
	*($1 + [16]) = (int_64)-1
	$2 = *($0 + [8])
	*($1) = $2
	*($1 + [8]) = $2
	*($1 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)-3810963553248940032, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $43($1, $0)
	
.LOOP $label$2:
	CALL eosio_assert([1], [17321])
	CALL eosio_assert([1], [17355])
	$0 = [0]
	$4 = CALL db_next_i64(*($3 + [24]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $43($1, $4)
	
.LABEL $label$3
	CALL $44($1, $3)
	$3 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$4 = *($1 + [24])
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = ($1 + [28])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($1 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $4
	
.LABEL $label$5
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$global$0 = ($1 + [48])
}

void .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL require_auth(*($0 + [120]))
	CALL $66($0, (int_64)4058495467653169152)
	CALL $66($0, (int_64)4062502797923287040)
	CALL $42($0, (int_64)4064873937408884736)
	CALL $42($0, (int_64)4059685238987554816)
	CALL $42($0, (int_64)4063494694805831680)
	CALL $42($0, (int_64)4057545771825871360)
	CALL $42($0, (int_64)4061463346874417152)
	CALL $42($0, (int_64)4067500103751958528)
	CALL $42($0, (int_64)4057545771816321024)
	CALL $42($0, (int_64)4063632668662693888)
	CALL $42($0, (int_64)4057066402418655232)
	CALL $42($0, (int_64)4058722204053057536)
	CALL $42($0, (int_64)4068304510766153728)
	CALL $42($0, (int_64)4067679113740201856)
	CALL $42($0, (int_64)4067679113716016512)
	CALL $42($0, (int_64)4067679113523360640)
	*((($1 + [48]) + [32])) = [0]
	*($1 + [64]) = (int_64)-1
	$2 = *($0 + [8])
	*($1 + [48]) = $2
	*($1 + [56]) = $2
	*($1 + [72]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)4067492955986853888, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $67(($1 + [48]), $3)
	
.LOOP $label$2:
	CALL eosio_assert([1], [17321])
	CALL eosio_assert([1], [17355])
	$3 = [0]
	$5 = CALL db_next_i64(*($4 + [92]), ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $67(($1 + [48]), $5)
	
.LABEL $label$3
	CALL $68(($1 + [48]), $4)
	$4 = $3
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$1
	*((($1 + [8]) + [32])) = [0]
	*($1 + [24]) = (int_64)-1
	$2 = *(($0 + [8]))
	*($1 + [8]) = $2
	*($1 + [16]) = $2
	*($1 + [32]) = (int_64)0
	$3 = CALL db_lowerbound_i64($2, $2, (int_64)4065364500516175872, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $69(($1 + [8]), $3)
	
.LOOP $label$5:
	CALL eosio_assert([1], [17321])
	CALL eosio_assert([1], [17355])
	$3 = [0]
	$0 = CALL db_next_i64(*($4 + [64]), ($1 + [88]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $69(($1 + [8]), $0)
	
.LABEL $label$6
	CALL $70(($1 + [8]), $4)
	$4 = $3
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	$0 = *($1 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$5 = ($1 + [36])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$11 }
	CALL _ZdlPv($4)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($1 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $0
	
.LABEL $label$8
	*($5) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$7
	CALL $71(($1 + [72]))
	$global$0 = ($1 + [96])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = $2
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $188($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	float_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($3 + [128]) = $2
	*($3 + [136]) = $1
	CALL require_auth($1)
	CALL eosio_assert(((int_64)$2 != (int_64)0), [19750])
	CALL $45(($3 + [88]), $0, (int_64)4059685238987554816)
	$4 = *($3 + [88])
	$5 = *($3 + [96])
	CALL $45(($3 + [88]), $0, (int_64)4057545771816321024)
	$6 = [0]
	CALL eosio_assert(((((int_32)*($3 + [96]) != (int_32)[0]) & ((int_64)*($3 + [88]) != (int_64)0)) & ((uint_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) >= (uint_64)( $4 ? (int_64)0 : $5 ))), [19577])
	*((($3 + [88]) + [32])) = [0]
	*($3 + [104]) = (int_64)-1
	*($3 + [112]) = (int_64)0
	$4 = *($0 + [8])
	*($3 + [88]) = $4
	*($3 + [96]) = $4
	$7 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)4065364500516175872, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $69(($3 + [88]), $5)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)($3 + [88])), [17071])
	$1 = *($3 + [136])
	$2 = *($3 + [128])
	
.LABEL $label$1
	$8 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($8, [19737])
	CALL eosio_assert(((uint_64)*($7 + [16]) >= (uint_64)$2), [19782])
	CALL eosio_assert(((uint_64)*($7 + [24]) >= (uint_64)$2), [19802])
	*($3 + [48]) = ($3 + [128])
	CALL eosio_assert($8, [17533])
	CALL $87(($3 + [88]), $7, $1, ($3 + [48]))
	*((($3 + [48]) + [32])) = [0]
	*($3 + [64]) = (int_64)-1
	*($3 + [72]) = (int_64)0
	$1 = *(($0 + [8]))
	*($3 + [48]) = $1
	*($3 + [56]) = $1
	$5 = CALL db_find_i64($1, $1, (int_64)4067492955986853888, *($7 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $67(($3 + [48]), $5)
	CALL eosio_assert(((int_32)*($6 + [88]) == (int_32)($3 + [48])), [17071])
	
.LABEL $label$2
	$9 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($9, [19824])
	$2 = CALL current_time()
	$1 = ((uint_64)$2 / (uint_64)(int_64)1000)
	*($3 + [40]) = $1
	$10 = ( (float_64)1.05 ? (float_64)1 : ((uint_64)*($6 + [72]) > (uint_64)$1) )
	$10 = ((float_64)( ((float_64)$10 + (float_64)(float_64)-0.5) ? $10 : ((uint_64)*($6 + [80]) > (uint_64)$1) ) * (float_64)((float_64)((float_64)((float_64)((float_64)((float_64)(CASTING float_64)(uint_64 ((uint_64)((int_64)((uint_64)$2 / (uint_64)(int_64)100000) + (int_64)-5) % (uint_64)(int_64)100)) / (float_64)(float_64)5) / (float_64)(float_64)19) * (float_64)(float_64)50) + (float_64)(float_64)100) * (float_64)(CASTING float_64)(uint_64 *($3 + [128]))))
	if ( (((float_64)$10 < (float_64)(float_64)18446744073709551615) & ((float_64)$10 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$1 = (int_64)0
	goto $label$3 
	
.LABEL $label$4
	$1 = (Rounds 0)($10)
	
.LABEL $label$3
	*($3 + [32]) = $1
	CALL $45(($3 + [144]), $0, (int_64)4067500103751958528)
	$4 = *($3 + [144])
	$5 = *($3 + [152])
	*($3 + [28]) = [1000]
	$2 = ((uint_64)$2 / (uint_64)(int_64)600000000)
	if ( ((int_64)( $4 ? (int_64)0 : $5 ) == (int_64)$2) ){ goto $label$5 }
	*($3 + [28]) = ((uint_64)$2 % (uint_64)(int_64)3)
	CALL $41($0, *($3 + [136]), (int_64)4067500103751958528, $2)
	$1 = *($3 + [32])
	
.LABEL $label$5
	CALL $45(($3 + [144]), $0, (int_64)4057545771816321024)
	$2 = ( *($3 + [144]) ? (int_64)0 : *($3 + [152]) )
	*($3 + [16]) = $2
	if ( ((uint_64)$2 <= (uint_64)$1) ){ goto $label$7 }
	*($3 + [16]) = (int_64))($2 - $1)
	goto $label$6 
	
.LABEL $label$7
	*($3 + [32]) = $2
	*($3 + [16]) = (int_64)0
	$2 = *($3 + [136])
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$11 }
	$11 = [0]
	$12 = *([0] + [19844])
	$1 = $2
	
.LOOP $label$13:
	*((($3 + [144]) + ($5 = $11))) = *(($12 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$1 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$5 == (int_32)[12]) )))))
	$11 = ($5 + [1])
	if ( ((uint_32)$5 > (uint_32)[11]) ){ goto $label$12 }
	$1 = ((int_64)$1 << (int_64)5)
	if ( ((int_64)$1 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	if ( ((uint_32)$11 >= (uint_32)[11]) ){ goto $label$10 }
	*($3) = ($11 << [1])
	$12 = ($3 | [1])
	goto $label$9 
	
.LABEL $label$11
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	*($3) = [0]
	$5 = ($3 | [1])
	goto $label$8 
	
.LABEL $label$10
	$13 = (($11 + [16]) & [-16])
	$12 = CALL _Znwj($13)
	*($3) = ($13 | [1])
	*($3 + [8]) = $12
	*($3 + [4]) = $11
	
.LABEL $label$9
	$13 = ($5 + [1])
	$5 = [0]
	
.LOOP $label$14:
	*(($12 + $5)) = *((($3 + [144]) + $5))
	$5 = ($5 + [1])
	if ( ((int_32)$13 != (int_32)$5) ){ goto $label$14 }
	$5 = ($12 + $11)
	
.LABEL $label$8
	*($5) = [0]
	CALL $65($0, $2, (int_64)4062502797923287040, $3)
	if ( ((*($3) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$6
	$1 = *($3 + [136])
	CALL $41($0, $1, (int_64)4057545771816321024, *($3 + [16]))
	*($3 + [148]) = ($3 + [32])
	*($3 + [144]) = ($3 + [136])
	*($3 + [152]) = ($3 + [28])
	CALL eosio_assert($9, [17533])
	CALL $88(($3 + [48]), $6, $1, ($3 + [144]))
	$1 = *($3 + [136])
	CALL $45(($3 + [144]), $0, (int_64)4067679113523360640)
	CALL $41($0, $1, (int_64)4067679113523360640, ((int_64)*($3 + [32]) + (int_64)( *($3 + [144]) ? (int_64)0 : *($3 + [152]) )))
	$1 = *($3 + [136])
	CALL $45(($3 + [144]), $0, (int_64)4063632668662693888)
	CALL $41($0, $1, (int_64)4063632668662693888, ((int_64)*($3 + [128]) + (int_64)( *($3 + [144]) ? (int_64)0 : *($3 + [152]) )))
	$1 = *($3 + [136])
	CALL $45(($3 + [144]), $0, (int_64)4057066402418655232)
	CALL $41($0, $1, (int_64)4057066402418655232, ( ((int_64)*($3 + [144]) + (int_64)1) ? (int_64)1 : *($3 + [152]) ))
	if ( ((int_32)*($3 + [28]) == (int_32)[1000]) ){ goto $label$15 }
	$1 = *($3 + [136])
	CALL $45(($3 + [144]), $0, (int_64)4058722204053057536)
	CALL $41($0, $1, (int_64)4058722204053057536, ( ((int_64)*($3 + [144]) + (int_64)1) ? (int_64)1 : *($3 + [152]) ))
	
.LABEL $label$15
	$1 = *($3 + [136])
	*($3 + [148]) = ($3 + [32])
	*($3 + [144]) = ($3 + [40])
	*($3 + [152]) = ($3 + [16])
	*($3 + [156]) = ($3 + [28])
	CALL eosio_assert($8, [17533])
	CALL $89(($3 + [88]), $7, $1, ($3 + [144]))
	CALL $71(($3 + [72]))
	$0 = *($3 + [112])
	if ( ($0 == 0) ){ goto $label$16 }
	$12 = ($3 + [116])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$11 = *($5)
	*($5) = [0]
	if ( ($11 == 0) ){ goto $label$20 }
	CALL _ZdlPv($11)
	
.LABEL $label$20
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($3 + [112]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $0
	
.LABEL $label$17
	*($12) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$16
	$global$0 = ($3 + [160])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	CALL require_auth(*($0 + [120]))
	CALL eosio_assert((uint_64)($1 <= $2), [17724])
	CALL eosio_assert((uint_64)(((int_64)$3 + (int_64)-1) <= (int_64)500), [17753])
	CALL eosio_assert((uint_64)(((int_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) & (int_64)4294967295) <= $2), [17780])
	CALL $41($0, *($0 + [120]), (int_64)-3810963500868668544, $1)
	CALL $41($0, *($0 + [120]), (int_64)-3810963744556711936, $2)
	CALL $41($0, *($0 + [120]), (int_64)-3810963488499564544, $3)
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [192])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [176]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [184]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17231])
	CALL memcpy(($4 + [168]), $2, [8])
	$3 = ($7 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [17231])
	CALL memcpy((($4 + [168]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [17231])
	CALL memcpy((($4 + [168]) + [16]), ($2 + [16]), [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [24])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	CALL $34(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [184])
	$1 = *($4 + [176])
	$8 = *($4 + [168])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $8), (int_64 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $188($2)
	
.LABEL $label$6
	$global$0 = ($4 + [192])
	return [1]
}

int_32 .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $186($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [17122])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $18 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($3 + [104]) = $1
	CALL require_auth($1)
	CALL $45(($3 + [64]), $0, (int_64)4064873937408884736)
	$4 = *($3 + [64])
	$5 = *($3 + [72])
	CALL $45(($3 + [64]), $0, (int_64)4059685238987554816)
	$6 = *($3 + [72])
	$7 = *($3 + [64])
	$8 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert((((uint_64)$8 >= (uint_64)( $4 ? (int_64)0 : $5 )) & (uint_64)($8 <= ( $7 ? (int_64)0 : $6 ))), [19577])
	$5 = *($2)
	if ( ($5 & [1]) ){ goto $label$2 }
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($5 <= [33]), [19607])
	CALL $45(($3 + [64]), $0, (int_64)4063494694805831680)
	$4 = *($3 + [64])
	$5 = *($3 + [72])
	CALL $45(($3 + [64]), $0, (int_64)4067679113716016512)
	$7 = ( *($3 + [64]) ? (int_64)0 : *($3 + [72]) )
	CALL eosio_assert((uint_64)($7 <= ( $4 ? (int_64)0 : $5 )), [19628])
	CALL eosio_assert(((int_32)CALL $72($0, $2) ^ (int_32)[1]), [19649])
	*((($3 + [64]) + [32])) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$4 = *($0 + [8])
	*($3 + [64]) = $4
	*($3 + [72]) = $4
	$5 = CALL db_find_i64($4, $4, (int_64)4065364500516175872, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $69(($3 + [64]), $5)
	CALL eosio_assert(((int_32)*($5 + [60]) == (int_32)($3 + [64])), [17071])
	CALL eosio_assert(((int_64)*($5 + [8]) != (int_64)*($3 + [104])), [19671])
	*((($3 + [16]) + [32])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = *(($0 + [8]))
	*($3 + [16]) = $1
	*($3 + [24]) = $1
	$6 = CALL db_find_i64($1, $1, (int_64)4067492955986853888, *($5 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $67(($3 + [16]), $6)
	CALL eosio_assert(((int_32)*($6 + [88]) == (int_32)($3 + [16])), [17071])
	$1 = *($3 + [104])
	*($3 + [56]) = ($3 + [104])
	CALL eosio_assert([1], [17533])
	CALL $73(($3 + [16]), $6, $1, ($3 + [56]))
	
.LABEL $label$5
	$1 = *($3 + [104])
	*($3 + [60]) = $2
	*($3 + [56]) = ($3 + [104])
	CALL $74(($3 + [8]), ($3 + [16]), $1, ($3 + [56]))
	$1 = *($3 + [104])
	*($3 + [56]) = ($3 + [104])
	CALL eosio_assert([1], [17533])
	CALL $75(($3 + [64]), $5, $1, ($3 + [56]))
	CALL $71(($3 + [40]))
	goto $label$3 
	
.LABEL $label$4
	*($3 + [20]) = $0
	*($3 + [16]) = ($3 + [104])
	CALL $76(($3 + [56]), ($3 + [64]), $1, ($3 + [16]))
	$1 = *($3 + [104])
	CALL $45(($3 + [16]), $0, (int_64)4067679113740201856)
	CALL $41($0, $1, (int_64)4067679113740201856, ( ((int_64)*($3 + [16]) + (int_64)1) ? (int_64)1 : *($3 + [24]) ))
	*((($3 + [16]) + [32])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = *(($0 + [8]))
	*($3 + [16]) = $1
	*($3 + [24]) = $1
	$5 = CALL db_find_i64($1, $1, (int_64)4067492955986853888, *($3 + [104]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $67(($3 + [16]), $5) + [88]) == (int_32)($3 + [16])), [17071])
	goto $label$6 
	
.LABEL $label$7
	$1 = *($3 + [104])
	*($3 + [60]) = $2
	*($3 + [56]) = ($3 + [104])
	CALL $77(($3 + [8]), ($3 + [16]), $1, ($3 + [56]))
	
.LABEL $label$6
	CALL $71(($3 + [40]))
	
.LABEL $label$3
	CALL $41($0, *($3 + [104]), (int_64)4067679113716016512, ((int_64)$7 + (int_64)1))
	$5 = *($3 + [88])
	if ( ($5 == 0) ){ goto $label$8 }
	$6 = ($3 + [92])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($3 + [88]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $5
	
.LABEL $label$9
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($3 + [112])
}

int_32 .FUNC $19 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [200])) = [0]
	*($4 + [184]) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [176]) = ($2 + $7)
	*($4 + [168]) = $2
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17231])
	CALL memcpy(($4 + [184]), $2, [8])
	*($4 + [172]) = ($2 + [8])
	$8 = (($4 + [184]) + [8])
	CALL $52(($4 + [168]), $8)
	$3 = *($4 + [176])
	*((($4 + [24]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$9 = *($4 + [168])
	*($4 + [8]) = $9
	*($4 + [24]) = $9
	CALL $34(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [184])
	$8 = CALL $169(($4 + [208]), $8)
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$5 = CALL $169(($4 + [224]), $8)
	CALL void $3((int_32 $0), (int_64 $5), (int_32 $6))
	if ( (*($4 + [224]) & [1]) ){ goto $label$11 }
	if ( (*($4 + [208]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4 + [208]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($8 + [8]))
	if ( ($7 <= [513]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [192]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $188($2)
	$2 = [1]
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [200])))
	$global$0 = ($4 + [240])
	return $2
	
.LABEL $label$5
	$global$0 = ($4 + [240])
	return $2
}

int_32 .FUNC $184 (int_32 $0)
{
	return CALL $185([8500], $0)
}

int_32 .FUNC $187 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $185([8500], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $186 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8492]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8496])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8492]) = [1]
	$2 = ($2 << [16])
	*([0] + [8496]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8496])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8496]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8492]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8492]) = [1]
	$3 = ($3 << [16])
	*([0] + [8496]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8496])
	
.LABEL $label$10
	*([0] + [8496]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $180 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2)
	$4 = *(*($2 + [4]))
	*($0) = *($4)
	*($0 + [8]) = *(($4 + [8]))
	CALL eosio_assert([1], [17287])
	CALL memcpy($3, $0, [8])
	*($3 + [24]) = *($0 + [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($3 | [8]), ($3 + [24]), [8])
	$5 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, *(*($2 + [8])), $5), $3, [16])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $0
}

int_32 .FUNC $117 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [17071])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $54($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [17071])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $114 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $116($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $115(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17231])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [17231])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [17231])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [18729])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [18772])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [18791])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [17665])
	CALL eosio_assert([1], [17287])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17287])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [17287])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17385])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17430])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_64)((int_64)*(*(($5 + [-24])) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((uint_64)((int_64)*(*($8) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17480])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [19404])
	$6 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [19452])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [19474])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [17665])
	CALL eosio_assert([1], [17287])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	CALL require_auth(*($0 + [120]))
	CALL $45(($3 + [16]), $0, (int_64)4059685238987554816)
	$2 = *($3 + [16])
	$4 = *($3 + [24])
	CALL $45(($3 + [16]), $0, (int_64)4057545771816321024)
	CALL eosio_assert(((((int_32)*($3 + [24]) != (int_32)[0]) & ((int_64)*($3 + [16]) != (int_64)0)) & ((uint_64)((uint_64)CALL $fimport$11() / (uint_64)(int_64)1000000) >= (uint_64)( $2 ? (int_64)0 : $4 ))), [19577])
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$2 = *($0 + [8])
	*($3 + [16]) = $2
	*($3 + [24]) = $2
	$4 = [0]
	$5 = CALL db_find_i64($2, $2, (int_64)4065364500516175872, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $69(($3 + [16]), $5)
	CALL eosio_assert(((int_32)*($4 + [60]) == (int_32)($3 + [16])), [17071])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [19737])
	$2 = *(($0 + [120]))
	*($3 + [8]) = ($3 + [56])
	CALL eosio_assert($5, [17533])
	CALL $85(($3 + [16]), $4, $2, ($3 + [8]))
	$5 = *($3 + [40])
	if ( ($5 == 0) ){ goto $label$2 }
	$6 = ($3 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$6 }
	CALL _ZdlPv($4)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $5
	
.LABEL $label$3
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [64])
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL eosio_assert(CALL $fimport$6($1), [17293])
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0 + [8])
	*($2) = $3
	*($2 + [8]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)5304430438831226880, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $35($2, $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)$2), [17071])
	CALL eosio_assert([1], [17321])
	CALL eosio_assert([1], [17355])
	$4 = CALL db_next_i64(*($0 + [20]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	CALL $35($2, $4)
	
.LABEL $label$4
	CALL $37($2, $0)
	CALL require_recipient(*($0))
	CALL prints([17315])
	$5 = *($2 + [24])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL prints([17318])
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL _ZdlPv($4)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL _ZdlPv($0)
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [240])
	$global$0 = $3
	*(($4 = $3) + [232]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [208])) = (int_64)0
	*(($4 + [224])) = [0]
	*($4 + [192]) = (int_64)0
	*($4 + [184]) = (int_64)0
	*($4 + [200]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [172]) = $2
	*($4 + [168]) = $2
	*($4 + [176]) = ($2 + $5)
	*($4 + [16]) = ($4 + [168])
	*($4 + [40]) = ($4 + [184])
	CALL $57(($4 + [40]), ($4 + [16]))
	$3 = *($4 + [176])
	*((($4 + [24]) + [8])) = $3
	*(($4 + [8])) = $3
	$6 = *($4 + [168])
	*($4) = $6
	*($4 + [24]) = $6
	*($4 + [16]) = CALL $34(($4 + [40]), $0, $1, $4)
	*($4 + [20]) = ($4 + [232])
	CALL $58(($4 + [16]), ($4 + [184]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [216]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $188($2)
	$2 = [1]
	if ( ((*($4 + [216]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [224])))
	$global$0 = ($4 + [240])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [240])
	return $2
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [18809])
	if ( ((int_64)*($0 + [120]) == (int_64)$1) ){ goto $label$1 }
	CALL require_auth($1)
	
.LABEL $label$1
	if ( ((int_64)*($0 + [32]) == (int_64)$1) ){ goto $label$2 }
	CALL eosio_assert(((int_64)*($0 + [40]) != (int_64)$2), [18833])
	CALL eosio_assert(((int_64)*($0 + [48]) != (int_64)$2), [18865])
	CALL eosio_assert(((int_64)*($0 + [56]) != (int_64)$2), [18897])
	CALL eosio_assert(((int_64)*($0 + [64]) != (int_64)$2), [18929])
	CALL eosio_assert(((int_64)*(($0 + [32])) != (int_64)$2), [18961])
	
.LABEL $label$2
	if ( ((int_64)*(($0 + [120])) != (int_64)$1) ){ goto $label$3 }
	*(($5 + [104])) = [0]
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	$6 = *($0 + [8])
	*($5 + [72]) = $6
	*($5 + [80]) = $6
	$7 = CALL db_find_i64($6, $6, (int_64)-3810963553248940032, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $43(($5 + [72]), $7)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)($5 + [72])), [17071])
	if ( (*($7 + [16]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [18993])
	$8 = *($5 + [96])
	if ( $8 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$6 = *(($0 + [120]))
	CALL eosio_assert([1], [17533])
	CALL $59(($5 + [72]), $7, $6, ($5 + [64]))
	$8 = *($5 + [96])
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$9 = ($5 + [100])
	$7 = *($9)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$10 }
	CALL _ZdlPv($10)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	$7 = *(($5 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $8
	
.LABEL $label$7
	*($9) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$3
	CALL eosio_assert(CALL $fimport$6($2), [19025])
	if ( ((int_64)*($0 + [72]) != (int_64)$2) ){ goto $label$11 }
	CALL eosio_assert(((int_64)*($0 + [40]) == (int_64)$1), [19051])
	
.LABEL $label$11
	if ( ((int_64)*($0 + [80]) != (int_64)$2) ){ goto $label$16 }
	*(($5 + [80])) = [0]
	*($5 + [72]) = (int_64)0
	$7 = CALL $179([19099])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$19 }
	*($5 + [72]) = ($7 << [1])
	$10 = (($5 + [72]) | [1])
	if ( $7 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$8 = (($7 + [16]) & [-16])
	$10 = CALL _Znwj($8)
	*($5 + [72]) = ($8 | [1])
	*($5 + [80]) = $10
	*($5 + [76]) = $7
	
.LABEL $label$18
	CALL memcpy($10, [19099], $7)
	
.LABEL $label$17
	*(($10 + $7)) = [0]
	if ( (CALL $173($4, [0], [2], ($5 + [72]), [0], [2]) == 0) ){ goto $label$20 }
	$7 = [1]
	if ( ((int_64)*($0 + [48]) == (int_64)$1) ){ goto $label$21 }
	$7 = ((int_64)*($0 + [64]) == (int_64)$1)
	
.LABEL $label$21
	CALL eosio_assert($7, [19103])
	
.LABEL $label$20
	if ( ((*($5 + [72]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($5 + [80]))
	
.LABEL $label$16
	if ( ((int_64)*($0 + [88]) != (int_64)$2) ){ goto $label$23 }
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)$1), [19167])
	if ( ((int_64)*($0 + [96]) == (int_64)$2) ){ goto $label$22 }
	goto $label$14 
	
.LABEL $label$23
	if ( ((int_64)*($0 + [96]) != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$22
	CALL eosio_assert(((int_64)*(($0 + [80])) == (int_64)$1), [19215])
	if ( ((int_64)*($0 + [104]) == (int_64)$2) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	CALL $168(($5 + [72]))
	
.LABEL $label$14
	if ( ((int_64)*($0 + [104]) != (int_64)$2) ){ goto $label$12 }
	
.LABEL $label$13
	CALL eosio_assert(((int_64)*($0 + [64]) == (int_64)$1), [19263])
	
.LABEL $label$12
	$11 = *($3 + [8])
	$10 = [0]
	*(($5 + [104])) = [0]
	$6 = (uint_64)$11 >> (uint_64)(int_64)8
	*($5 + [80]) = $6)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$9 = CALL $60(($5 + [72]), $6, [19311])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$12 = *($3)
	if ( ((uint_64)((int_64)$12 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$24 }
	$7 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$25 }
	$13 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$6 = $13
	$10 = [1]
	$8 = $7
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$6 = $13
	
.LOOP $label$28:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$25 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$8 = ($7 + [1])
	$7 = $8
	if ( $10 ){ goto $label$28 }
	$10 = [1]
	$7 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$10 = [0]
	
.LABEL $label$24
	CALL eosio_assert($10, [18595])
	CALL eosio_assert(((int_64)$12 > (int_64)0), [19330])
	CALL eosio_assert(((int_64)$11 == (int_64)*($9 + [8])), [18641])
	$7 = *($4)
	if ( ($7 & [1]) ){ goto $label$30 }
	$7 = uint_32($7 >> [1])
	goto $label$29 
	
.LABEL $label$30
	$7 = *($4 + [4])
	
.LABEL $label$29
	CALL eosio_assert(($7 <= [257]), [18506])
	$7 = ($3 + [8])
	$13 = *($7)
	*((($5 + [48]) + [8])) = $13
	$6 = *($3)
	*((($5 + [16]) + [8])) = $13
	*($5 + [16]) = $6
	*($5 + [48]) = $6
	CALL $61($0, $1, ($5 + [16]))
	$13 = *($7)
	*((($5 + [32]) + [8])) = $13
	$6 = *($3)
	*(($5 + [8])) = $13
	*($5) = $6
	*($5 + [32]) = $6
	CALL $56($0, $2, $5, $1)
	$0 = *($5 + [96])
	if ( ($0 == 0) ){ goto $label$31 }
	$8 = ($5 + [100])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$33 }
	
.LOOP $label$34:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$35 }
	CALL _ZdlPv($10)
	
.LABEL $label$35
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$34 }
	$7 = *(($5 + [96]))
	goto $label$32 
	
.LABEL $label$33
	$7 = $0
	
.LABEL $label$32
	*($8) = $0
	CALL _ZdlPv($7)
	
.LABEL $label$31
	$global$0 = ($5 + [112])
	(unreachable)
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17231])
	CALL memcpy(($4 + [168]), $2, [8])
	$3 = ($2 + $7)
	*((($4 + [8]) + [8])) = $3
	*($4 + [28]) = ($2 + [8])
	*($4 + [24]) = $2
	*($4 + [32]) = $3
	*($4 + [8]) = *($4 + [24])
	CALL $34(($4 + [40]), $0, $1, ($4 + [8]))
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	$0 = *($4 + [168])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $188($2)
	
.LABEL $label$6
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = $1
	CALL require_auth($1)
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)5304430438831226880, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $35(($2 + [16]), $0) + [16]) == (int_32)($2 + [16])), [17071])
	$4 = *($2 + [40])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($2 + [8]) = ($2 + [56])
	CALL $36($2, ($2 + [16]), $1, ($2 + [8]))
	$4 = *($2 + [40])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($2 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	CALL _ZdlPv($6)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($0)
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [184]) + [16]))) = (int_64)0
	*($4 + [192]) = (int_64)0
	*($4 + [184]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17231])
	CALL memcpy(($4 + [184]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [17231])
	CALL memcpy((($4 + [184]) + [8]), ($2 + [8]), [8])
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [17231])
	CALL memcpy(($4 + [56]), ($2 + [16]), [8])
	*($3) = *($4 + [56])
	$8 = ($2 + $7)
	*((($4 + [24]) + [8])) = $8
	*($4 + [44]) = ($2 + [24])
	*($4 + [40]) = $2
	*($4 + [48]) = $8
	*($4 + [24]) = *($4 + [40])
	CALL $34(($4 + [56]), $0, $1, ($4 + [24]))
	*(($8 = (($4 + [208]) + [8]))) = *($3)
	*($4 + [208]) = *($4 + [192])
	$0 = *($4 + [184])
	*((($4 + [224]) + [8])) = *($8)
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [56]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [224]) + [8]))
	*((($4 + [240]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [224])
	*($4 + [8]) = $1
	*($4 + [240]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $188($2)
	
.LABEL $label$6
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $24 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth(*($0))
	$4 = [0]
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$1 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [18062])
	$7 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$1 = $5
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [18239])
	$4 = CALL $179([17887])
	if ( ($4 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [17915])
	goto $label$13 
	
.LABEL $label$14
	if ( ($4 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = (int_64)0
	
.LOOP $label$15:
	$7 = *(($4 + [17886]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [17960])
	
.LABEL $label$16
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$15 }
	$9 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$11 
	
.LABEL $label$12
	$9 = (int_64)4
	
.LABEL $label$11
	CALL eosio_assert([1], [18013])
	$1 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$1 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$1 = $6
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$21 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$7 = [0]
	
.LABEL $label$17
	CALL eosio_assert($7, [18062])
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)$9), [18340])
	CALL eosio_assert(((int_64)*($2) == (int_64)10000000000000), [18254])
	$4 = [0]
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = *($0)
	*($3 + [16]) = $1
	*($3 + [24]) = $5
	$7 = CALL db_find_i64($1, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$23 }
	CALL eosio_assert(((int_32)*(CALL $50(($3 + [16]), $7) + [40]) == (int_32)($3 + [16])), [17071])
	goto $label$22 
	
.LABEL $label$23
	$4 = [1]
	
.LABEL $label$22
	CALL eosio_assert($4, [18307])
	$1 = *($0)
	*($3 + [8]) = $2
	*($3 + [12]) = ($3 + [56])
	CALL $51($3, ($3 + [16]), $1, ($3 + [8]))
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$24 }
	$2 = ($3 + [44])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$26 }
	
.LOOP $label$27:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$28 }
	CALL _ZdlPv($7)
	
.LABEL $label$28
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$27 }
	$4 = *(($3 + [40]))
	goto $label$25 
	
.LABEL $label$26
	$4 = $8
	
.LABEL $label$25
	*($2) = $8
	CALL _ZdlPv($4)
	
.LABEL $label$24
	$global$0 = ($3 + [64])
}

int_32 .FUNC $27 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [168]) = [0]
	*($4 + [160]) = (int_64)0
	*($4 + [172]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [17231])
	CALL memcpy(($4 + [160]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[8]), [17231])
	CALL memcpy((($4 + [160]) + [8]), ($2 + [8]), [4])
	CALL eosio_assert(((int_32)$7 != (int_32)[12]), [17231])
	CALL memcpy((($4 + [160]) + [12]), ($2 + [12]), [1])
	$3 = ($2 + $7)
	*(($4 + [8])) = $3
	*($4 + [20]) = ($2 + [13])
	*($4 + [16]) = $2
	*($4 + [24]) = $3
	*($4) = *($4 + [16])
	CALL $34(($4 + [32]), $0, $1, $4)
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	$8 = *($4 + [172])
	$9 = *($4 + [168])
	$0 = *($4 + [160])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $9), (int_32 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $188($2)
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $26 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [68]) = $2
	*($4 + [72]) = $1
	*($4 + [67]) = $3
	CALL require_auth($1)
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0 + [8])
	*($4 + [24]) = $5
	*($4 + [32]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)5339760910833549312, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $38(($4 + [24]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [24])), [17071])
	$1 = *($4 + [72])
	*($4 + [12]) = ($4 + [67])
	*($4 + [8]) = ($4 + [68])
	CALL eosio_assert([1], [17533])
	CALL $39(($4 + [24]), $0, $1, ($4 + [8]))
	$2 = *($4 + [48])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [12]) = ($4 + [68])
	*($4 + [8]) = ($4 + [72])
	*($4 + [16]) = ($4 + [67])
	CALL $40($4, ($4 + [24]), $1, ($4 + [8]))
	$2 = *($4 + [48])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($4 + [52])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $2
	
.LABEL $label$4
	*($6) = $2
	CALL _ZdlPv($0)
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17385])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17430])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17480])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [16]) = [0]
	*($1 + [8]) = *(*($3 + [4]))
	$3 = *($0)
	CALL eosio_assert([1], [17287])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	*($2 + [31]) = *($1 + [16])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($2 + [16]), ($2 + [31]), [1])
	$4 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($3 + [8]), (int_64)-3810963553248940032, *(*($0 + [8])), $4, $2, [17])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $102 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $174($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [17287])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [17287])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $107(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $174($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17287])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17287])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $104($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17287])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17287])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $109(CALL $108($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17287])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17287])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17287])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17287])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17287])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17208])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $184($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17231])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [17231])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	CALL eosio_assert(((int_32)$4 != (int_32)[12]), [17231])
	CALL memcpy(($5 + [12]), ($2 + [12]), [1])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $95(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17568])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17614])
	*($1 + [8]) = *(*($3))
	*($1 + [12]) = *(*($3 + [4]))
	$5 = *($1)
	CALL eosio_assert([1], [17665])
	CALL eosio_assert([1], [17287])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL eosio_assert([1], [17287])
	CALL memcpy(($4 | [12]), ($1 + [12]), [1])
	CALL db_update_i64(*($1 + [20]), $2, $4, [13])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$12()), [17236])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $92($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $93(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17385])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$12()), [17430])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [17480])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

int_32 .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	*(($5 = (($4 + [104]) + [8]))) = *(($3 + [8]))
	*($4 + [104]) = *($3)
	*($0) = $1
	*($0 + [8]) = $2
	$3 = *($5)
	*((($4 + [120]) + [8])) = $3
	$2 = *($4 + [104])
	*($0 + [16]) = $2
	*(($0 + [24])) = $3
	*($4 + [120]) = $2
	*($0 + [40]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [48]) = (int_64)0
	*($0 + [56]) = (int_64)0
	*($0 + [64]) = (int_64)0
	*($0 + [72]) = (int_64)0
	*($0 + [80]) = (int_64)0
	*($0 + [88]) = (int_64)0
	*($0 + [96]) = (int_64)0
	*($0 + [104]) = (int_64)0
	*($0 + [112]) = (int_64)0
	*($0 + [120]) = (int_64)0
	*($4 + [136]) = [20000]
	*($4 + [140]) = CALL $179([20000])
	*($4 + [96]) = *($4 + [136])
	*($0 + [32]) = *(CALL $48(($4 + [120]), ($4 + [96])))
	*($4 + [136]) = [20013]
	*($4 + [140]) = CALL $179([20013])
	*($4 + [88]) = *($4 + [136])
	*($0 + [40]) = *(CALL $48(($4 + [120]), ($4 + [88])))
	*($4 + [136]) = [20026]
	*($4 + [140]) = CALL $179([20026])
	*($4 + [80]) = *($4 + [136])
	*($0 + [48]) = *(CALL $48(($4 + [120]), ($4 + [80])))
	*($4 + [136]) = [20039]
	*($4 + [140]) = CALL $179([20039])
	*($4 + [72]) = *($4 + [136])
	*($0 + [56]) = *(CALL $48(($4 + [120]), ($4 + [72])))
	*($4 + [136]) = [20052]
	*($4 + [140]) = CALL $179([20052])
	*($4 + [64]) = *($4 + [136])
	*($0 + [64]) = *(CALL $48(($4 + [120]), ($4 + [64])))
	*($4 + [136]) = [20065]
	*($4 + [140]) = CALL $179([20065])
	*($4 + [56]) = *($4 + [136])
	*($0 + [72]) = *(CALL $48(($4 + [120]), ($4 + [56])))
	*($4 + [136]) = [20078]
	*($4 + [140]) = CALL $179([20078])
	*($4 + [48]) = *($4 + [136])
	*($0 + [80]) = *(CALL $48(($4 + [120]), ($4 + [48])))
	*($4 + [136]) = [20091]
	*($4 + [140]) = CALL $179([20091])
	*($4 + [40]) = *($4 + [136])
	*($0 + [88]) = *(CALL $48(($4 + [120]), ($4 + [40])))
	*($4 + [136]) = [20104]
	*($4 + [140]) = CALL $179([20104])
	*($4 + [32]) = *($4 + [136])
	*($0 + [96]) = *(CALL $48(($4 + [120]), ($4 + [32])))
	*($4 + [136]) = [20117]
	*($4 + [140]) = CALL $179([20117])
	*($4 + [24]) = *($4 + [136])
	*($0 + [104]) = *(CALL $48(($4 + [120]), ($4 + [24])))
	*($4 + [136]) = [20130]
	*($4 + [140]) = CALL $179([20130])
	*($4 + [16]) = *($4 + [136])
	*($0 + [112]) = *(CALL $48(($4 + [120]), ($4 + [16])))
	*($4 + [136]) = [20143]
	*($4 + [140]) = CALL $179([20143])
	*($4 + [8]) = *($4 + [136])
	*($0 + [120]) = *(CALL $48(($4 + [120]), ($4 + [8])))
	$global$0 = ($4 + [144])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17208])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $184($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17231])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17231])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $93(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $32 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [248]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $184($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*($4 + [200]) = [0]
	*($4 + [192]) = (int_64)0
	*($4 + [208]) = (int_64)0
	*($4 + [216]) = (int_64)0
	*($4 + [224]) = [0]
	*($4 + [232]) = (int_64)0
	*($4 + [240]) = (int_64)0
	*($4 + [180]) = $2
	*($4 + [176]) = $2
	*($4 + [184]) = ($2 + $5)
	*($4 + [24]) = ($4 + [176])
	*($4 + [48]) = ($4 + [192])
	CALL $63(($4 + [48]), ($4 + [24]))
	$3 = *($4 + [184])
	*((($4 + [32]) + [8])) = $3
	*((($4 + [8]) + [8])) = $3
	$6 = *($4 + [176])
	*($4 + [8]) = $6
	*($4 + [32]) = $6
	*($4 + [24]) = CALL $34(($4 + [48]), $0, $1, ($4 + [8]))
	*($4 + [28]) = ($4 + [248])
	CALL $64(($4 + [24]), ($4 + [192]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [192]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $188($2)
	$2 = [1]
	if ( ((*($4 + [192]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [200])))
	$global$0 = ($4 + [256])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [256])
	return $2
}

void .FUNC $33 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$6($1), [19025])
	$4 = CALL $179([17887])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17915])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [17886]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17960])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = $5
	CALL eosio_assert([1], [18013])
	$4 = [0]
	$7 = (uint_64)$5 >> (uint_64)(int_64)8
	$5 = $7)
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $8
	$6 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $8
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $6 ){ goto $label$11 }
	$6 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$7
	CALL eosio_assert($6, [18062])
	CALL require_recipient($1)
	$4 = *($2)
	if ( ($4 & [1]) ){ goto $label$13 }
	$4 = uint_32($4 >> [1])
	goto $label$12 
	
.LABEL $label$13
	$4 = *($2 + [4])
	
.LABEL $label$12
	CALL eosio_assert(($4 <= [257]), [18506])
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$5 = *($0)
	*($3 + [24]) = $5
	*($3 + [32]) = $1
	$4 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*(CALL $54(($3 + [24]), $4) + [16]) == (int_32)($3 + [24])), [17071])
	$9 = *($3 + [48])
	if ( ($9 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	*($3 + [16]) = ($3 + [64])
	CALL $62(($3 + [8]), ($3 + [24]), $1, ($3 + [16]))
	$9 = *($3 + [48])
	if ( $9 ){ goto $label$14 }
	
.LABEL $label$15
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$14
	$2 = ($3 + [52])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$20 }
	CALL _ZdlPv($6)
	
.LABEL $label$20
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($3 + [48]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $9
	
.LABEL $label$17
	*($2) = $9
	CALL _ZdlPv($4)
	$global$0 = ($3 + [80])
}

void .FUNC $30 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [176])
	$global$0 = $2
	*($2 + [104]) = $1
	CALL require_auth($1)
	CALL $45(($2 + [112]), $0, (int_64)-3810963500868668544)
	$3 = ( *($2 + [112]) ? (int_64)0 : *($2 + [120]) )
	CALL eosio_assert(((int_64)$3 != (int_64)0), [17808])
	CALL $45(($2 + [112]), $0, (int_64)-3810963744556711936)
	$4 = ( *($2 + [112]) ? (int_64)0 : *($2 + [120]) )
	CALL eosio_assert(((int_64)$4 != (int_64)0), [17808])
	CALL $45(($2 + [112]), $0, (int_64)-3810963488499564544)
	$5 = ( *($2 + [112]) ? (int_64)0 : *($2 + [120]) )
	CALL eosio_assert(((int_64)$5 != (int_64)0), [17808])
	$6 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert((((uint_64)$4 > (uint_64)$6) & ((uint_64)$6 >= (uint_64)$3)), [17846])
	*($2 + [96]) = ((uint_64)(int_64))($6 - $3) / (uint_64)(int_64)86400)
	*(($2 + [88])) = [0]
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [56]) = $3
	*($2 + [64]) = $3
	$7 = CALL db_find_i64($3, $3, (int_64)-3810963553248940032, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $43(($2 + [56]), $7)
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)($2 + [56])), [17071])
	CALL eosio_assert(((uint_64)*($2 + [96]) > (uint_64)*($7 + [8])), [17870])
	$1 = *($2 + [104])
	*($2 + [112]) = ($2 + [96])
	CALL eosio_assert([1], [17533])
	CALL $46(($2 + [56]), $7, $1, ($2 + [112]))
	goto $label$1 
	
.LABEL $label$2
	*($2 + [116]) = ($2 + [96])
	*($2 + [112]) = ($2 + [104])
	CALL $47(($2 + [160]), ($2 + [56]), $1, ($2 + [112]))
	
.LABEL $label$1
	$6 = ((int_64)$5 * (int_64)10000)
	$7 = CALL $179([17887])
	if ( ($7 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [17915])
	goto $label$5 
	
.LABEL $label$6
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$1 = (int_64)0
	
.LOOP $label$7:
	$8 = *(($7 + [17886]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [17960])
	
.LABEL $label$8
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	$4 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$3 
	
.LABEL $label$4
	$4 = (int_64)4
	
.LABEL $label$3
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [18013])
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$1 = $3
	$8 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$1 = $3
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$13 }
	$8 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$8 = [0]
	
.LABEL $label$9
	CALL eosio_assert($8, [18062])
	$1 = *($0 + [120])
	$3 = *($0)
	*($2 + [160]) = [17891]
	*($2 + [164]) = CALL $179([17891])
	*($2) = *($2 + [160])
	$5 = *(CALL $48(($2 + [112]), $2))
	*(($2 + [32])) = $4
	*(($2 + [48])) = [0]
	*($2 + [24]) = $6
	*($2 + [40]) = (int_64)0
	*($2 + [8]) = *($0 + [120])
	*($2 + [16]) = *($2 + [104])
	$8 = ($2 + [40])
	$7 = CALL $179([17898])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$17 }
	*(($2 + [40])) = ($7 << [1])
	$9 = ($8 + [1])
	if ( $7 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$0 = (($7 + [16]) & [-16])
	$9 = CALL _Znwj($0)
	*(($2 + [48])) = $9
	*(($2 + [44])) = $7
	*($2 + [40]) = ($0 | [1])
	
.LABEL $label$16
	CALL memcpy($9, [17898], $7)
	
.LABEL $label$15
	*(($9 + $7)) = [0]
	*(($7 = CALL _Znwj([16]))) = $1
	*($7 + [8]) = $5
	*((($2 + [112]) + [24])) = *((($2 + [8]) + [24]))
	*(($9 = (($2 + [112]) + [40]))) = *(($8 + [8]))
	$1 = *($8)
	*(($2 + [40])) = (int_64)0
	*($2 + [160]) = $7
	$7 = ($7 + [16])
	*($2 + [168]) = $7
	*($2 + [164]) = $7
	*($2 + [112]) = *($2 + [8])
	*($2 + [120]) = *((($2 + [8]) + [8]))
	*($2 + [128]) = *($2 + [24])
	*($2 + [144]) = $1
	*((($2 + [8]) + [40])) = [0]
	CALL $49($3, (int_64)-3617168760277827584, ($2 + [160]), ($2 + [112]))
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$18
	$7 = *($2 + [160])
	if ( ($7 == 0) ){ goto $label$19 }
	*($2 + [164]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$19
	if ( ((*(($2 + [40])) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [48])))
	
.LABEL $label$20
	$9 = *($2 + [80])
	if ( ($9 == 0) ){ goto $label$21 }
	$0 = ($2 + [84])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$23 }
	
.LOOP $label$24:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$25 }
	CALL _ZdlPv($8)
	
.LABEL $label$25
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$24 }
	$7 = *(($2 + [80]))
	goto $label$22 
	
.LABEL $label$23
	$7 = $9
	
.LABEL $label$22
	*($0) = $9
	CALL _ZdlPv($7)
	
.LABEL $label$21
	$global$0 = ($2 + [176])
	return (unreachable)
	
.LABEL $label$14
	CALL $168($8)
}

void .FUNC $31 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$7 = ($global$0 - [32])
	$global$0 = $7
	CALL require_auth(*($0 + [120]))
	CALL eosio_assert((uint_64)($2 <= $3), [19495])
	CALL eosio_assert(((uint_32)$4 > (uint_32)[1]), [19539])
	$1 = CALL $169(($7 + [16]), $1)
	CALL $65($0, *($0 + [120]), (int_64)4058495467653169152, $1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$1
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$8 = *(($0 + [120]))
	$1 = CALL $179([19572])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$5 }
	*($7) = ($1 << [1])
	$9 = ($7 | [1])
	if ( $1 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$10 = (($1 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($7) = ($10 | [1])
	*($7 + [8]) = $9
	*($7 + [4]) = $1
	
.LABEL $label$4
	CALL memcpy($9, [19572], $1)
	
.LABEL $label$3
	*(($9 + $1)) = [0]
	CALL $65($0, $8, (int_64)4062502797923287040, $7)
	if ( ((*($7) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$6
	$1 = ($0 + [120])
	CALL $41($0, *($1), (int_64)4064873937408884736, $2)
	CALL $41($0, *($1), (int_64)4059685238987554816, $3)
	CALL $41($0, *($1), (int_64)4063494694805831680, (CASTING uint_64)(uint_32 $4))
	CALL $41($0, *($1), (int_64)4057545771825871360, $5)
	CALL $41($0, *($1), (int_64)4061463346874417152, $6)
	CALL $41($0, *($1), (int_64)4057545771816321024, $5)
	$global$0 = ($7 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $168($7)
}