(data (i32.const 8192) "add active seed : \00")
(data (i32.const 8211) "\n\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8299) "active seed is already exists\00")
(data (i32.const 8329) "active seed is not exists.\00")
(data (i32.const 8356) "active\00")
(data (i32.const 8363) "seedcontract\00")
(data (i32.const 8376) "generateseed\00")
(data (i32.const 8389) "contract_name is not exists.\00")
(data (i32.const 8418) "house contract is not setted.\00")
(data (i32.const 8448) ":house edge.\00")
(data (i32.const 8461) "house_contract_name is not exists.\00")
(data (i32.const 8496) "\05\00\00\00\e0!\00\00")
(data (i32.const 8504) "write\00")
(data (i32.const 8510) "string is too long to be a valid name\00%llu\00")
(data (i32.const 8553) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8620) "character is not in allowed character set for names\00")
(data (i32.const 8672) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8705) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8756) "error reading iterator\00")
(data (i32.const 8779) "read\00")
(data (i32.const 8784) "cannot create objects in table of another contract\00")
(data (i32.const 8835) "EOS\00")
(data (i32.const 8839) "string is too long to be a valid symbol_code\00")
(data (i32.const 8884) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8937) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8986) "invalid symbol name\00")
(data (i32.const 9006) "not initialized sicbo global table.\00")
(data (i32.const 9042) "not changed status.\00")
(data (i32.const 9062) "cannot pass end iterator to modify\00")
(data (i32.const 9097) "object passed to modify is not in multi_index\00")
(data (i32.const 9143) "cannot modify objects in table of another contract\00")
(data (i32.const 9194) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9253) "game is maintenance. waiting...\00")
(data (i32.const 9285) "begin : invalid state.\00")
(data (i32.const 9308) "get\00")
(data (i32.const 9312) "not found symbol \00")
(data (i32.const 9330) " \00")
(data (i32.const 9332) ",\00")
(data (i32.const 9334) "seed contract : buffer size is exceeded.\00")
(data (i32.const 9375) "%02x\00")
(data (i32.const 9380) "invalid game id.\00")
(data (i32.const 9397) "invalid end time.\00")
(data (i32.const 9415) "resultseed\00")
(data (i32.const 9426) "invalid current game id.\00")
(data (i32.const 9451) "invalid state\00")
(data (i32.const 9465) "invalid betting time.\00")
(data (i32.const 9487) "invalid action count.\00")
(data (i32.const 9509) "second action is must eosio.token code.\00")
(data (i32.const 9549) "second action is must transfer action.\00")
(data (i32.const 9588) "invalid bet amount.\00")
(data (i32.const 9608) "exceed maximum bet amount.\00")
(data (i32.const 9635) "invalid transfer amount.\00")
(data (i32.const 9660) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9719) "invalid seed id.\00")
(data (i32.const 9736) "not exists 3rd cards.\00")
(data (i32.const 9758) "attempt to add asset with different symbol\00")
(data (i32.const 9801) "addition underflow\00")
(data (i32.const 9820) "addition overflow\00")
(data (i32.const 9838) "not initialized baccarat global table.\00")
(data (i32.const 9877) "not exists bet info\00")
(data (i32.const 9897) "Baccarat gameID:\00")
(data (i32.const 9914) ",result:\00")
(data (i32.const 9923) "P\00")
(data (i32.const 9925) "B\00")
(data (i32.const 9927) "T\00")
(data (i32.const 9929) "PP\00")
(data (i32.const 9932) "BP\00")
(data (i32.const 9935) "cannot pass end iterator to erase\00")
(data (i32.const 9969) "cannot increment end iterator\00")
(data (i32.const 9999) "object passed to erase is not in multi_index\00")
(data (i32.const 10044) "cannot erase objects in table of another contract\00")
(data (i32.const 10094) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10147) "get_payout : invalid baccarat type.\00")
(data (i32.const 18608) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "prints" (func $fimport$0 (param i32)))
(import "env" "printui" (func $fimport$1 (param i64)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "eosio_assert" (func $fimport$3 (param i32 i32)))
(import "env" "current_receiver" (func $fimport$4 (result i64)))
(import "env" "db_store_i64" (func $fimport$5 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$6 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "cancel_deferred" (func $fimport$9 (param i32) (result i32)))
(import "env" "current_time" (func $fimport$10 (result i64)))
(import "env" "send_deferred" (func $fimport$11 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$12 (param i32 i32)))
(import "env" "is_account" (func $fimport$13 (param i64) (result i32)))
(import "env" "require_auth" (func $fimport$14 (param i64)))
(import "env" "db_update_i64" (func $fimport$15 (param i32 i64 i32 i32)))
(import "env" "action_data_size" (func $fimport$16 (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "require_recipient" (func $fimport$19 (param i64)))
(import "env" "prints_l" (func $fimport$20 (param i32 i32)))
(import "env" "printn" (func $fimport$21 (param i64)))
(import "env" "read_transaction" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$23 (param i32 i32 i32)))
(import "env" "db_get_i64" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$25))
(import "env" "memmove" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$27 (param i32)))
(import "env" "__unordtf2" (func $fimport$28 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$34 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$35 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$38 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$39 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$40 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$41 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$42 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$44 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$45 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$46 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $31))
(export "_Znwj" (func $154))
(export "_ZdlPv" (func $156))
(export "_Znaj" (func $155))
(export "_ZdaPv" (func $157))
(export "_ZnwjSt11align_val_t" (func $158))
(export "_ZnajSt11align_val_t" (func $159))
(export "_ZdlPvSt11align_val_t" (func $160))
(export "_ZdaPvSt11align_val_t" (func $161))
(table $0 15 15 anyfunc)
(elem (i32.const 1) $32 $34 $36 $38 $40 $42 $44 $46 $47 $49 $51 $53 $177 $180)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18688))
(global $global$2 i32 (i32.const 18688))


int_32 .FUNC $174 ()
{
	return [10188]
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9999])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10044])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10094])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

int_32 .FUNC $176 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [13] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $178($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $178($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $178($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $178($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18608]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $178($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $178($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $178($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $170 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $165($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $171 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $170($0, $1, $2, CALL $182($2))
}

void .FUNC $172 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $167(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $181(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8548], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $167(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $167(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $7 (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$global$0 = $3
	*((($3 + [8]) + [32])) = [0]
	*($3 + [16]) = $0
	*($3 + [8]) = $0
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = CALL db_find_i64($0, $0, (int_64)5374672172214124544, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $8(($3 + [8]), $4) + [16]) == (int_32)($3 + [8])), [8705])
	$5 = *($3 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert(((int_64)CALL $fimport$4() == (int_64)$0), [8784])
	*(($4 = CALL _Znwj([32])) + [16]) = ($3 + [8])
	*($4 + [8]) = $2
	*($4) = $1
	CALL eosio_assert([1], [8504])
	CALL memcpy(($3 + [64]), $4, [16])
	$2 = *($4 + [8])
	$1 = *($4)
	$5 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)5374672172214124544, $0, $1, ($3 + [64]), [16])
	*($4 + [20]) = $5
	$7 = (int_64)($2 == 0)
	$6 = (($3 + [8]) + [16])
	if ( ( (uint_64)($1 <= *($6)) ? [0] : $7 ) ){ goto $label$4 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ( ((uint_64)$1 > (uint_64)(int_64)-3) ? ((int_64)$2 != (int_64)0) : $7 ) )
	
.LABEL $label$4
	*($3 + [56]) = $4
	*($3 + [72]) = *(($4 + [8]))
	$0 = *($4)
	*($3 + [64]) = $0
	*($3 + [52]) = $5
	$7 = ($3 + [36])
	$6 = *($7)
	if ( ((uint_32)$6 >= (uint_32)*(($3 + [40]))) ){ goto $label$7 }
	*($6 + [8]) = $0
	*($6 + [16]) = $5
	*($3 + [56]) = [0]
	*($6) = $4
	*($7) = ($6 + [24])
	$4 = *($3 + [56])
	*($3 + [56]) = [0]
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $9(($3 + [32]), ($3 + [56]), ($3 + [64]), ($3 + [52]))
	$4 = *($3 + [56])
	*($3 + [56]) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($3 + [36])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$10 }
	$4 = *(($3 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $5
	
.LABEL $label$8
	*($7) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

int_32 .FUNC $178 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $5 (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [32])) = [0]
	*($3 + [8]) = $2
	*($3) = $2
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$4 = [0]
	$5 = CALL db_find_i64($2, $2, (int_64)3617214769600282624, $0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $2($3, $5)
	CALL eosio_assert(((int_32)*($4 + [40]) == (int_32)$3), [8705])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [8329])
	CALL eosio_assert($5, [9935])
	CALL eosio_assert($5, [9969])
	$5 = CALL db_next_i64(*($4 + [44]), ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $2($3, $5)
	
.LABEL $label$2
	CALL $6($3, $4)
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($3 + [28])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8504])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8504])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8504])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [16]))
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8504])
	CALL memcpy(*($6), $2, [8])
	*($6) = (*($6) + [8])
	CALL $129($0, ($7 + [24]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $188 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18588])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18396]
	$3 = (((int_32)$1 * (int_32)[12]) + [18396])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $49 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [688])
	$global$0 = $3
	CALL require_auth(*($2))
	$4 = ($0 + [208])
	$6 = *(($0 + [236]))
	$5 = *(($0 + [232]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( (int_64)(*($8) == 0) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [8705])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [216])), (int_64)4147959508456022528, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $56($4, $7)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)$4), [8705])
	
.LABEL $label$1
	$4 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9006])
	CALL eosio_assert(((int_32)*($8 + [24]) ^ (int_32)[1]), [9253])
	CALL printui(*($8 + [16]))
	CALL eosio_assert(((int_64)*($8 + [16]) == (int_64)$1), [9426])
	$9 = ($0 + [32])
	$6 = *(($0 + [60]))
	$8 = *(($0 + [56]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$1) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($5 + [156]) == (int_32)$9), [8705])
	$4 = $5
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL db_find_i64(*($9), *(($0 + [40])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$4 = CALL $66($9, $7)
	CALL eosio_assert(((int_32)*($4 + [156]) == (int_32)$9), [8705])
	
.LABEL $label$5
	$10 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($10, [9380])
	CALL eosio_assert((*($4 + [8]) == 0), [9451])
	$1 = CALL current_time()
	$7 = [0]
	$6 = (CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000))
	if ( ((uint_32)*($4 + [148]) > (uint_32)$6) ){ goto $label$9 }
	$7 = ((uint_32)*($4 + [152]) > (uint_32)$6)
	
.LABEL $label$9
	CALL eosio_assert($7, [9465])
	$7 = CALL read_transaction(($3 + [128]), [512])
	CALL eosio_assert(((int_32)$7 < (int_32)[513]), [9334])
	*($3 + [680]) = ($7 + ($3 + [128]))
	*($3 + [676]) = ($3 + [128])
	*($3 + [672]) = ($3 + [128])
	$1 = CALL current_time()
	*((($3 + [64]) + [28])) = (int_64)0
	*(($3 + [108])) = (int_64)0
	*(($3 + [116])) = (int_64)0
	*($3 + [76]) = [0]
	*($3 + [80]) = [0]
	*($3 + [84 align=4]) = (int_64)0
	*($3 + [100 align=4]) = (int_64)0
	*($3 + [64]) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	CALL $70(($3 + [672]), ($3 + [64]))
	$11 = ($3 + [100])
	CALL $72(CALL $71(CALL $71(($3 + [672]), (($3 + [64]) + [24])), $11), (($3 + [64]) + [48]))
	CALL eosio_assert(((int_32)(*((($3 + [64]) + [40])) - *($3 + [100])) == (int_32)[80]), [9487])
	CALL eosio_assert(((int_64)*(*($3 + [100]) + [40]) == (int_64)6138663591592764928), [9509])
	CALL eosio_assert(((int_64)*((*($3 + [100]) + [48])) == (int_64)-3617168760277827584), [9549])
	*($3 + [56]) = (int_64)0
	*($3 + [48]) = (int_64)0
	$12 = (int_64)0
	$13 = (int_64)0
	$7 = *($2 + [24])
	$6 = *(($2 + [28]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$10 }
	$5 = ((int_32)($6 - $7) / (int_32)[24])
	$6 = [0]
	$12 = (int_64)0
	$13 = (int_64)0
	
.LOOP $label$11:
	$1 = *(($7 + [8]))
	$13 = ((int_64)$13 + (int_64)$1)
	*($3 + [56]) = $13
	$14 = (int_64)0
	$8 = *($7)
	if ( ((uint_32)$8 > (uint_32)[4]) ){ goto $label$12 }
	goto $label$15 
	
.LABEL $label$16
	$14 = ((int_64)$1 * (int_64)12)
	goto $label$12 
	
.LABEL $label$15
	$14 = ((int_64)$1 << (int_64)1)
	goto $label$12 
	
.LABEL $label$14
	$14 = ((uint_64)((int_64)$1 * (int_64)195) / (uint_64)(int_64)100)
	goto $label$12 
	
.LABEL $label$13
	$14 = ((int_64)$1 * (int_64)9)
	
.LABEL $label$12
	$12 = ((int_64))($14 - $1) + (int_64)$12
	*($3 + [48]) = $12)
	$7 = ($7 + [24])
	$6 = ($6 + [1])
	if ( ($6 <= $5) ){ goto $label$11 }
	
.LABEL $label$10
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$13), [9588])
	CALL eosio_assert(((uint_64)*($4 + [16]) >= (uint_64)$12), [9608])
	$7 = CALL $82(($3 + [8]), (*($11) + [40]))
	*((($3 + [128]) + [24])) = (int_64)0
	*((($3 + [128]) + [40])) = [0]
	*($3 + [128]) = (int_64)0
	*($3 + [136]) = (int_64)0
	*($3 + [144]) = (int_64)0
	*($3 + [160]) = (int_64)0
	$5 = ($7 + [32])
	$6 = *($5)
	$8 = *($7 + [28])
	*($3 + [652]) = $8
	*($3 + [648]) = $8
	*($3 + [656]) = $6
	*($3 + [664]) = ($3 + [648])
	*($3 + [676]) = ($3 + [136])
	*($3 + [680]) = ($3 + [144])
	*($3 + [684]) = (($3 + [128]) + [32])
	*($3 + [672]) = ($3 + [128])
	CALL $22(($3 + [672]), ($3 + [664]))
	$6 = *($7 + [28])
	if ( ($6 == 0) ){ goto $label$17 }
	*($5) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	$6 = *($7 + [16])
	if ( ($6 == 0) ){ goto $label$18 }
	*(($7 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$18
	CALL eosio_assert(((int_64)*(($3 + [152])) == (int_64)*(($2 + [16]))), [9660])
	CALL eosio_assert(((int_64)*((($3 + [128]) + [16])) == (int_64)*($2 + [8])), [9635])
	$1 = *($0)
	*($3 + [680]) = $2
	*($3 + [676]) = ($3 + [56])
	*($3 + [672]) = ($3 + [48])
	CALL eosio_assert($10, [9062])
	CALL $83($9, $4, $1, ($3 + [672]))
	if ( ((*(($3 + [160])) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($3 + [168])))
	
.LABEL $label$19
	CALL $15(($3 + [64]))
	$global$0 = ($3 + [688])
	$8
}

int_32 .FUNC $48 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [264]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8779])
	CALL memcpy(($4 + [264]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*($4 + [160]) = $0
	*($4 + [216]) = $0
	*($4 + [256]) = [4]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [264])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $188($2)
	
.LABEL $label$5
	CALL $55(($4 + [8]))
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC memory ()
{
}

int_32 .FUNC $43 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [432])
	$global$0 = $3
	*(($4 = $3) + [376]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [288]) + [32]))) = (int_64)0
	*(($6 = (($4 + [288]) + [16]))) = (int_64)0
	*(($7 = (($4 + [288]) + [24]))) = (int_64)0
	*(($4 + [360])) = (int_64)0
	*((($4 + [288]) + [64])) = (int_64)0
	*((($4 + [288]) + [56])) = (int_64)0
	*($3) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [280]) = ($2 + $5)
	*($4 + [272]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8779])
	CALL memcpy(($4 + [288]), $2, [8])
	$3 = ($5 & [-8])
	CALL eosio_assert(((int_32)$3 != (int_32)[8]), [8779])
	CALL memcpy((($4 + [288]) | [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$3 != (int_32)[16]), [8779])
	CALL memcpy($6, ($2 + [16]), [8])
	*($4 + [276]) = ($2 + [24])
	CALL $76(($4 + [272]), $7)
	CALL eosio_assert(((uint_32)(*($4 + [280]) - *($4 + [276])) > (uint_32)[31]), [8779])
	CALL memcpy((($4 + [288]) + [48]), *($4 + [276]), [32])
	*($4 + [276]) = (*($4 + [276]) + [32])
	*(($3 = ($4 + [8]))) = *($4 + [280])
	*($4) = *($4 + [272])
	$3 = *($3)
	*((($4 + [384]) + [8])) = $3
	*(($6 = (($4 + [400]) + [8]))) = $3
	$8 = *($4)
	*($4 + [400]) = $8
	*($4 + [384]) = $8
	$3 = *($6)
	*((($4 + [416]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [400])
	*($4 + [32]) = $1
	*($4 + [416]) = $1
	*(($4 + [56])) = $0
	*((($4 + [16]) + [48])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*((($4 + [16]) + [64])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*(($4 + [188])) = (int_64)0
	*(($4 + [196])) = (int_64)0
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*($4 + [168]) = $0
	*($4 + [224]) = $0
	*($4 + [264]) = [4]
	*($4 + [420]) = ($4 + [376])
	*($4 + [416]) = ($4 + [16])
	CALL $84(($4 + [416]), ($4 + [288]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $188($2)
	
.LABEL $label$4
	CALL $55(($4 + [16]))
	$3 = *($4 + [312])
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [316])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$9
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [312]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [432])
	return [1]
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	$3 = ($global$0 - [80])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [32])
	$5 = *($1)
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$5) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [156]) == (int_32)$4), [8705])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)7035924439720001536, $5)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $66($4, $8)
	CALL eosio_assert(((int_32)*($9 + [156]) == (int_32)$4), [8705])
	
.LABEL $label$1
	$8 = [0]
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [9719])
	CALL $5(*($1), $5, *($0))
	*(($7 = (($3 + [16]) + [24]))) = *(($2 + [24]))
	*(($6 = (($3 + [16]) + [16]))) = *(($2 + [16]))
	*($3 + [24]) = *(($2 + [8]))
	*($3 + [16]) = *($2)
	*((($3 + [48]) + [24])) = *($7)
	*((($3 + [48]) + [16])) = *($6)
	$11 = ($0 + [160])
	$7 = *($11)
	*(($1 = ($0 + [164]))) = $7
	*($3 + [56]) = *($3 + [24])
	*($3 + [48]) = *($3 + [16])
	$12 = ($0 + [168])
	
.LOOP $label$6:
	$6 = ((uint_32)($8 & [255]) % (uint_32)[52])
	*($3) = $6
	if ( ((uint_32)$7 >= (uint_32)*($12)) ){ goto $label$8 }
	*($7) = $6
	*($1) = ($7 + [4])
	if ( ((int_32)$8 != (int_32)[51]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	CALL $85($11, $3)
	if ( ((int_32)$8 == (int_32)[51]) ){ goto $label$5 }
	
.LABEL $label$7
	$8 = ($8 + [1])
	$7 = *($1)
	goto $label$6 
	
.LABEL $label$5
	$13 = ($0 + [152])
	$5 = (int_64)0
	$14 = (int_64)52
	$8 = [0]
	$12 = ($3 + [64])
	$15 = ($3 + [72])
	
.LOOP $label$9:
	CALL sha256(($3 + [48]), [32], ($3 + [48]))
	$7 = *($11)
	$6 = ($7 + $8)
	$1 = *($6)
	$7 = ($7 + (((CASTING uint_32)(uint_64 ((uint_64)((int_64)((int_64)((int_64)*($3 + [56]) ^ (int_64)*($3 + [48])) ^ (int_64)*($12)) ^ (int_64)*($15)) % (uint_64)$14)) + (CASTING uint_32)(uint_64 $5)) << [2]))
	*($6) = *($7)
	*($7) = $1
	$8 = ($8 + [4])
	$5 = ((int_64)$5 + (int_64)1)
	$14 = ((int_64)$14 + (int_64)-1)
	if ( ((int_64)$14 != (int_64)1) ){ goto $label$9 }
	CALL $86(($3 + [48]), $13)
	$5 = *($0)
	*($3 + [4]) = $2
	*($3) = $0
	*($3 + [8]) = ($3 + [48])
	CALL eosio_assert($10, [9062])
	CALL $87($4, $9, $5, $3)
	CALL $88($0, $9)
	CALL $29(*($0), *($9), ((int_32)(*(($9 + [68])) - *($9 + [64])) / (int_32)[40]), (int_64)0, [3])
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$10 }
	*($3 + [52]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$global$0 = ($3 + [80])
}

int_32 .FUNC $41 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8779])
	CALL memcpy($4, $2, [1])
	$8 = *($4)
	*(($4 + [20])) = ($2 + [1])
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*($4 + [152]) = $0
	*($4 + [208]) = $0
	*($4 + [248]) = [4]
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $188($2)
	
.LABEL $label$5
	CALL $55($4)
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [15]) = $1
	CALL require_auth(*($0))
	$3 = ($0 + [208])
	$5 = *(($0 + [236]))
	$4 = *(($0 + [232]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( (int_64)(*($7) == 0) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8705])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($3), *(($0 + [216])), (int_64)4147959508456022528, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $56($3, $6)
	CALL eosio_assert(((int_32)*($7 + [32]) == (int_32)$3), [8705])
	
.LABEL $label$1
	$6 = ((int_32)$7 != (int_32)[0])
	CALL eosio_assert($6, [9006])
	CALL eosio_assert(((int_32)*($7 + [24]) != (int_32)$1), [9042])
	$8 = *($0)
	*($2 + [8]) = ($2 + [15])
	CALL eosio_assert($6, [9062])
	CALL $64($3, $7, $8, ($2 + [8]))
	$global$0 = ($2 + [16])
}

void .FUNC $47 (int_32 $0, int_64 $1)
{
	CALL $27(*($0), $1)
}

void .FUNC $46 (int_32 $0)
{
	CALL require_auth(*($0))
	
.LOOP $label$1:
	goto $label$1 
}

int_32 .FUNC $45 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [264]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [8779])
	CALL memcpy(($4 + [264]), $2, [4])
	CALL eosio_assert(((int_32)($7 & [-4]) != (int_32)[4]), [8779])
	CALL memcpy((($4 + [264]) | [4]), ($2 + [4]), [4])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*($4 + [160]) = $0
	*($4 + [216]) = $0
	*($4 + [256]) = [4]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [268])
	$9 = *($4 + [264])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $9), (int_32 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $188($2)
	
.LABEL $label$5
	CALL $55(($4 + [8]))
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$3 = ($global$0 - [864])
	$global$0 = $3
	*($3 + [248]) = $2
	*($3 + [252]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [208])
	$2 = *(($0 + [236]))
	$5 = *(($0 + [232]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($2 + [-24])
	$6 = *($1)
	if ( (int_64)(*($6) == 0) ){ goto $label$3 }
	$2 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$4), [8705])
	goto $label$1 
	
.LABEL $label$2
	$1 = CALL db_find_i64(*($4), *(($0 + [216])), (int_64)4147959508456022528, (int_64)0)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $56($4, $1)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$4), [8705])
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$1
	*($3 + [244]) = $6
	*($3 + [240]) = $4
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9006])
	CALL eosio_assert(((int_32)*($6 + [24]) ^ (int_32)[1]), [9253])
	$7 = ($0 + [32])
	$8 = *($6 + [16])
	$2 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$11:
	$1 = ($2 + [-24])
	$6 = *($1)
	if ( ((int_64)*($6) == (int_64)$8) ){ goto $label$10 }
	$2 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*($6 + [156]) == (int_32)$7), [8705])
	*($3 + [236]) = $6
	*($3 + [232]) = $7
	$9 = (($3 + [232]) | [4])
	if ( $6 ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = CALL db_find_i64(*($7), *(($0 + [40])), (int_64)7035924439720001536, $8)
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$7 }
	$6 = CALL $66($7, $1)
	CALL eosio_assert(((int_32)*($6 + [156]) == (int_32)$7), [8705])
	*($3 + [236]) = $6
	*($3 + [232]) = $7
	$9 = (($3 + [232]) | [4])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)*($6 + [8]) == (int_32)[4]), [9285])
	goto $label$6 
	
.LABEL $label$7
	*($3 + [236]) = [0]
	*($3 + [232]) = $7
	$9 = (($3 + [232]) | [4])
	
.LABEL $label$6
	CALL $10(*($0))
	$10 = *($0)
	$1 = CALL $182([8835])
	if ( ($1 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8839])
	goto $label$14 
	
.LABEL $label$15
	if ( ($1 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$8 = (int_64)0
	
.LOOP $label$16:
	$2 = *(($1 + [8834]))
	if ( ((($2 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8884])
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$16 }
	$11 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$11 = (int_64)4
	
.LABEL $label$12
	*(($3 + [368])) = [0]
	*($3 + [352]) = (int_64)-1
	*($3 + [360]) = (int_64)0
	*($3 + [344]) = $10
	*($3 + [336]) = (int_64)6138663591592764928
	$8 = (uint_64)$11 >> (uint_64)(int_64)8
	$1 = CALL db_find_i64((int_64)6138663591592764928, $10, (int_64)3607749779137757184, $8)
	if ( ((int_32)$1) <= (int_32)[-1]) ){ goto $label$20 }
	$1 = CALL $67(($3 + [336]), $1)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)($3 + [336])), [8705])
	*((($3 + [216]) + [8])) = *(($1 + [8]))
	*($3 + [216]) = *($1)
	$6 = *($3 + [360])
	if ( $6 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL prints([9312])
	CALL printui((int_64)4)
	CALL prints([9332])
	if ( (int_64)($8 == 0) ){ goto $label$21 }
	$1 = [0]
	$12 = $8
	
.LOOP $label$23:
	*((($3 + [256]) + $1)) = $12
	$2 = ($1 + [1])
	if ( ((uint_32)$1 > (uint_32)[5]) ){ goto $label$22 }
	$1 = $2
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$23 }
	
.LABEL $label$22
	CALL prints_l(($3 + [256]), $2)
	
.LABEL $label$21
	CALL prints([9330])
	CALL printn($10)
	*($3 + [224]) = $11
	*($3 + [216]) = (int_64)0
	CALL eosio_assert([1], [8937])
	$1 = [0]
	
.LOOP $label$26:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$27 }
	$8 = $12
	$5 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$8 = $12
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$28 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$6 = ($1 + [1])
	$1 = $6
	if ( $2 ){ goto $label$29 }
	$5 = [1]
	$1 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$5 = [0]
	
.LABEL $label$25
	CALL eosio_assert($5, [8986])
	$6 = *($3 + [360])
	if ( ($6 == 0) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$24
	CALL eosio_assert([0], [8986])
	$6 = *($3 + [360])
	if ( ($6 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$5 = ($3 + [364])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$31 }
	
.LOOP $label$32:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$33 }
	CALL _ZdlPv($2)
	
.LABEL $label$33
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$32 }
	$1 = *(($3 + [360]))
	goto $label$30 
	
.LABEL $label$31
	$1 = $6
	
.LABEL $label$30
	*($5) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$18
	*($3 + [216]) = ((int_64)*($3 + [216]) / (int_64)4)
	*($3 + [212]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$8 = *($0)
	*($3 + [340]) = ($3 + [216])
	*($3 + [336]) = ($3 + [240])
	*($3 + [344]) = ($3 + [212])
	*($3 + [348]) = ($3 + [252])
	*($3 + [352]) = ($3 + [248])
	CALL $68(($3 + [256]), $7, $8, ($3 + [336]))
	*($3 + [232]) = *($3 + [256])
	$1 = *($3 + [244])
	$8 = *($0)
	*($3 + [336]) = ($3 + [232])
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [9062])
	CALL $69($4, $1, $8, ($3 + [336]))
	$1 = CALL read_transaction(($3 + [336]), [512])
	CALL eosio_assert(((int_32)$1 < (int_32)[513]), [9334])
	*($3 + [328]) = ($1 + ($3 + [336]))
	*($3 + [324]) = ($3 + [336])
	*($3 + [320]) = ($3 + [336])
	$8 = CALL current_time()
	*(($3 + [284])) = (int_64)0
	*(($3 + [300])) = (int_64)0
	*(($3 + [308])) = (int_64)0
	*($3 + [268]) = [0]
	*($3 + [272]) = [0]
	*($3 + [276 align=4]) = (int_64)0
	*($3 + [292 align=4]) = (int_64)0
	*($3 + [256]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	CALL $70(($3 + [320]), ($3 + [256]))
	CALL $72(CALL $71(CALL $71(($3 + [320]), (($3 + [256]) + [24])), ($3 + [292])), ($3 + [304]))
	CALL sha256(($3 + [256]), $1, ($3 + [176]))
	CALL $15(($3 + [256]))
	*($3 + [328]) = [0]
	*($3 + [320]) = (int_64)0
	$8 = *((($3 + [176]) + [24]))
	*((($3 + [144]) + [24])) = $8
	$12 = *((($3 + [176]) + [16]))
	*((($3 + [144]) + [16])) = $12
	*((($3 + [32]) + [16])) = $12
	*((($3 + [32]) + [24])) = $8
	$8 = *($3 + [184])
	*($3 + [152]) = $8
	$12 = *($3 + [176])
	*($3 + [32]) = $12
	*($3 + [144]) = $12
	*($3 + [40]) = $8
	CALL $73(($3 + [336]), ($3 + [32]))
	$1 = *($3 + [324])
	if ( ((uint_32)$1 >= (uint_32)*($3 + [328])) ){ goto $label$35 }
	*($1) = *($3 + [336])
	$1 = (($3 + [336]) + [8])
	*(($1 + [8])) = *($1)
	*($1) = [0]
	*($3 + [336]) = (int_64)0
	*($3 + [324]) = (*($3 + [324]) + [12])
	goto $label$34 
	
.LABEL $label$35
	CALL $74(($3 + [320]), ($3 + [336]))
	if ( ((*($3 + [336]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($3 + [344]))
	
.LABEL $label$34
	$1 = CALL read_transaction([0], [0])
	$2 = CALL $185($1)
	CALL read_transaction($2, $1)
	CALL sha256($2, $1, ($3 + [336]))
	*(($1 = (($3 + [176]) + [24]))) = *((($3 + [336]) + [24]))
	*(($2 = (($3 + [176]) + [16]))) = *((($3 + [336]) + [16]))
	*($3 + [184]) = *($3 + [344])
	*($3 + [176]) = *($3 + [336])
	$8 = *($1)
	*((($3 + [112]) + [24])) = $8
	$12 = *($2)
	*((($3 + [112]) + [16])) = $12
	*(($3 + [16])) = $12
	*(($3 + [24])) = $8
	$8 = *($3 + [184])
	*($3 + [120]) = $8
	$12 = *($3 + [176])
	*($3) = $12
	*($3 + [112]) = $12
	*($3 + [8]) = $8
	CALL $73(($3 + [336]), $3)
	$1 = *($3 + [324])
	if ( ((uint_32)$1 >= (uint_32)*((($3 + [320]) + [8]))) ){ goto $label$37 }
	*($1) = *($3 + [336])
	$1 = (($3 + [336]) + [8])
	*(($1 + [8])) = *($1)
	*($1) = [0]
	*($3 + [336]) = (int_64)0
	*($3 + [324]) = (*($3 + [324]) + [12])
	goto $label$36 
	
.LABEL $label$37
	CALL $74(($3 + [320]), ($3 + [336]))
	if ( ((*($3 + [336]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($3 + [344]))
	
.LABEL $label$36
	$1 = *($9)
	$13 = (*($1 + [152]) - *($3 + [212]))
	*($3 + [104]) = $13
	*($3 + [108]) = ($13 + [5])
	$4 = ($3 + [92])
	$7 = (($3 + [336]) + [8])
	$14 = (($3 + [336]) + [16])
	$15 = ($3 + [88])
	$16 = ($3 + [100])
	$17 = ($3 + [84])
	$18 = ($3 + [96])
	$8 = *($1)
	$10 = $8
	$11 = (int_64)0
	$19 = [0]
	
.LOOP $label$39:
	$12 = *($0)
	*($7) = (int_64)0
	*($14) = [0]
	*($3 + [336]) = $8
	$1 = (*($3 + [324]) - *($3 + [320]))
	$5 = ((int_32)$1 / (int_32)[12])
	if ( ($1 == 0) ){ goto $label$40 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$38 }
	$2 = CALL _Znwj($1)
	*($7) = $2
	*(($6 = (($3 + [336]) + [12]))) = $2
	*($14) = ($2 + ((int_32)$5 * (int_32)[12]))
	$5 = *($3 + [324])
	$1 = *($3 + [320])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$40 }
	
.LOOP $label$41:
	CALL $163($2, $1)
	$2 = (*($6) + [12])
	*($6) = $2
	$1 = ($1 + [12])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$41 }
	
.LABEL $label$40
	$1 = [8]
	*((($3 + [64]) + [8])) = (int_64)6111947644295184384
	*(($20 = (($3 + [64]) + [16]))) = (int_64)0
	*($15) = [0]
	*($3 + [64]) = $12
	$2 = CALL _Znwj([16])
	*($20) = $2
	*($2) = $12
	*($2 + [8]) = (int_64)3617214756542218240
	*($4) = (int_64)0
	*($16) = [0]
	$2 = ($2 + [16])
	*($15) = $2
	*($17) = $2
	$2 = *((($3 + [336]) + [8]))
	$21 = (($3 + [336]) + [12])
	$5 = *($21)
	$8 = (CASTING uint_64)(uint_32 ((int_32)($5 - $2) / (int_32)[12]))
	
.LOOP $label$42:
	$1 = ($1 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$42 }
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$45 }
	
.LOOP $label$46:
	$6 = *($2)
	$6 = ( *($2 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$1 = ($6 + $1)
	$8 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$47:
	$1 = ($1 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$47 }
	$2 = ($2 + [12])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$46 }
	if ( ($1 == 0) ){ goto $label$44 }
	
.LABEL $label$45
	CALL $20($4, $1)
	$2 = *($18)
	$1 = *($4)
	goto $label$43 
	
.LABEL $label$44
	$2 = [0]
	$1 = [0]
	
.LABEL $label$43
	*((($3 + [256]) + [8])) = $2
	*($3 + [260]) = $1
	*($3 + [256]) = $1
	*($3 + [848]) = ($3 + [256])
	*($3 + [856]) = ($3 + [336])
	CALL $75(($3 + [856]), ($3 + [848]))
	CALL $12($12, $10, $11, $13, ($3 + [64]))
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$48 }
	*($18) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$48
	$1 = *($20)
	if ( ($1 == 0) ){ goto $label$49 }
	*($17) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$49
	$6 = *($7)
	if ( ($6 == 0) ){ goto $label$50 }
	$2 = *($21)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$52 }
	
.LOOP $label$53:
	$1 = ($2 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$54
	$2 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$53 }
	$1 = *($7)
	goto $label$51 
	
.LABEL $label$52
	$1 = $6
	
.LABEL $label$51
	*($21) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$50
	$19 = ($19 + [1])
	if ( ((uint_32)$19 > (uint_32)[1]) ){ goto $label$55 }
	$13 = *((($3 + [104]) + ($19 << [2])))
	$8 = *(*($9))
	$11 = $10
	$10 = (int_64)0
	goto $label$39 
	
.LABEL $label$55
	$6 = *($3 + [320])
	if ( ($6 == 0) ){ goto $label$56 }
	$2 = *($3 + [324])
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$58 }
	
.LOOP $label$59:
	$1 = ($2 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$60
	$2 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$59 }
	$1 = *($3 + [320])
	goto $label$57 
	
.LABEL $label$58
	$1 = $6
	
.LABEL $label$57
	*($3 + [324]) = $6
	CALL _ZdlPv($1)
	
.LABEL $label$56
	$global$0 = ($3 + [864])
	return (unreachable)
	
.LABEL $label$38
	CALL $173($7)
}

void .FUNC $167 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $168($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $165($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $162 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $188($0)
	
.LABEL $label$1
}

int_32 .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $182($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $165($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $168 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $175 (int_32 $0)
{
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8756])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $185($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	CALL $113(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $109(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [8784])
	*(($5 = CALL _Znwj([64])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $1
	CALL $107($3, $5)
	*($4 + [72]) = (($4 + [16]) + [48])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $108(($4 + [64]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-3660748247211412992, $2, $6, ($4 + [16]), [48])
	*($5 + [52]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [64]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $109(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

int_32 .FUNC $50 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$3 = ($global$0 - [432])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$2 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($8)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $8)
	
.LABEL $label$1
	*(($9 = (($4 + [288]) + [40]))) = (int_64)0
	*(($3 = (($4 + [288]) + [16]))) = (int_64)0
	*(($10 = (($4 + [288]) + [24]))) = (int_64)0
	*(($11 = (($4 + [288]) + [32]))) = (int_64)0
	*($9) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [280]) = ($2 + $8)
	*($4 + [272]) = $2
	CALL eosio_assert(((uint_32)$8 > (uint_32)[7]), [8779])
	CALL memcpy(($4 + [288]), $2, [8])
	$9 = ($8 & [-8])
	CALL eosio_assert(((int_32)$9 != (int_32)[8]), [8779])
	CALL memcpy((($4 + [288]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$9 != (int_32)[16]), [8779])
	CALL memcpy($3, ($2 + [16]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$9 != (int_32)[24]), [8779])
	CALL memcpy(($4 + [16]), ($2 + [24]), [8])
	*($10) = *($4 + [16])
	*($4 + [276]) = ($2 + [32])
	CALL $81(($4 + [272]), $11)
	*(($9 = ($4 + [8]))) = *($4 + [280])
	*($4) = *($4 + [272])
	$12 = *($9)
	*((($4 + [336]) + [8])) = $12
	*(($9 = (($4 + [352]) + [8]))) = $12
	$13 = *($4)
	*($4 + [352]) = $13
	*($4 + [336]) = $13
	$12 = *($9)
	*((($4 + [392]) + [8])) = $12
	*((($4 + [16]) + [24])) = $12
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [352])
	*($4 + [32]) = $1
	*($4 + [392]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*(($4 + [188])) = (int_64)0
	*(($4 + [196])) = (int_64)0
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*($4 + [168]) = $0
	*($4 + [224]) = $0
	*($4 + [264]) = [4]
	*((($4 + [352]) + [32])) = [0]
	*($9) = *($3)
	*((($4 + [352]) + [16])) = *($10)
	*($4 + [376]) = (int_64)0
	*($4 + [352]) = *($4 + [296])
	$3 = (*(($4 + [324])) - *($11))
	$10 = ((int_32)$3 / (int_32)[24])
	$0 = *($4 + [288])
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((uint_32)$10 >= (uint_32)[178956971]) ){ goto $label$5 }
	$7 = CALL _Znwj($3)
	*((($4 + [352]) + [24])) = $7
	*(($3 = ($4 + [380]))) = $7
	*((($4 + [352]) + [32])) = ($7 + ((int_32)$10 * (int_32)[24]))
	$11 = *((($4 + [288]) + [32]))
	$10 = (*(($4 + [324])) - $11)
	if ( ((int_32)$10 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $11, $10)
	$7 = (*($3) + ((int_32)((uint_32)$10 / (uint_32)[24]) * (int_32)[24]))
	*($3) = $7
	
.LABEL $label$6
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	*(($4 + [424])) = [0]
	*((($4 + [392]) + [16])) = *((($4 + [352]) + [16]))
	*((($4 + [392]) + [8])) = *((($4 + [352]) + [8]))
	*($4 + [392]) = *($4 + [352])
	*($4 + [416]) = (int_64)0
	$7 = ($7 - *((($4 + [352]) + [24])))
	$5 = ((int_32)$7 / (int_32)[24])
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$4 }
	$7 = CALL _Znwj($7)
	*((($4 + [392]) + [24])) = $7
	*(($10 = (($4 + [392]) + [28]))) = $7
	*(($4 + [424])) = ($7 + ((int_32)$5 * (int_32)[24]))
	$11 = *((($4 + [352]) + [24]))
	$5 = (*((($4 + [352]) + [28])) - $11)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($7, $11, $5)
	*($10) = ($7 + ((int_32)((uint_32)$5 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$8
	CALL void $3((int_32 $0), (int_64 ($4 + [392])), (int_32 $6))
	$7 = *($4 + [416])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [420])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [376])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [380])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL $188($2)
	
.LABEL $label$11
	CALL $55(($4 + [16]))
	$2 = *(($4 + [320]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($4 + [324])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($4 + [432])
	return [1]
	
.LABEL $label$5
	CALL $173((($4 + [352]) + [24]))
	
.LABEL $label$4
	CALL $173((($4 + [392]) + [24]))
	(unreachable)
	return (unreachable)
}

void .FUNC $51 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_64 $40
	int_64 $41
	int_64 $42
	int_64 $43
	$4 = ($global$0 - [704])
	$global$0 = $4
	CALL require_auth(*($0))
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($9 + [156]) == (int_32)$5), [8705])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $66($5, $8)
	CALL eosio_assert(((int_32)*($9 + [156]) == (int_32)$5), [8705])
	
.LABEL $label$1
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, [9380])
	$8 = *($9 + [8])
	if ( ((int_32)$8 != (int_32)[3]) ){ goto $label$10 }
	*(($8 = (($4 + [584]) + [8]))) = *(($9 + [56]))
	*($4 + [584]) = *($9 + [48])
	*((($4 + [616]) + [8])) = *($8)
	*($4 + [616]) = *($4 + [584])
	$11 = ($0 + [72])
	$7 = *(($0 + [100]))
	$12 = *(($0 + [96]))
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$11:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( (int_64)(*($6) == 0) ){ goto $label$9 }
	$7 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$11 }
	goto $label$8 
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$8 == (int_32)[2]), [9451])
	CALL eosio_assert(((int_32)*(($9 + [68])) != (int_32)*($9 + [64])), [9877])
	*($4 + [368]) = (int_64)0
	CALL $172(($4 + [304]), $1)
	$8 = CALL $171(($4 + [304]), [0], [9897])
	$7 = ($8 + [8])
	*((($4 + [616]) + [8])) = *($7)
	*($4 + [616]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	$8 = CALL $169(($4 + [616]), [9914])
	$7 = ($8 + [8])
	*((($4 + [352]) + [8])) = *($7)
	*($4 + [352]) = *($8)
	*($8) = (int_64)0
	*($7) = [0]
	if ( ((*($4 + [616]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($4 + [624]))
	
.LABEL $label$12
	if ( ((*($4 + [304]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*($4 + [312]))
	
.LABEL $label$13
	$6 = *($9 + [136])
	$12 = ($9 + [140])
	if ( ((int_32)*($12) == (int_32)$6) ){ goto $label$14 }
	$8 = [0]
	$11 = ($9 + [136])
	$7 = [0]
	
.LOOP $label$15:
	$6 = *(($6 + $8))
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $169(($4 + [352]), [9332])
	
.LABEL $label$16
	if ( ((uint_32)$6 > (uint_32)[4]) ){ goto $label$17 }
	goto $label$22 
	
.LABEL $label$22
	CALL $169(($4 + [352]), [9923])
	goto $label$17 
	
.LABEL $label$21
	CALL $169(($4 + [352]), [9932])
	goto $label$17 
	
.LABEL $label$20
	CALL $169(($4 + [352]), [9927])
	goto $label$17 
	
.LABEL $label$19
	CALL $169(($4 + [352]), [9929])
	goto $label$17 
	
.LABEL $label$18
	CALL $169(($4 + [352]), [9925])
	
.LABEL $label$17
	$8 = ($8 + [4])
	$6 = *($11)
	$7 = ($7 + [1])
	if ( ($7 <= int_32((*($12) - $6) >> [2])) ){ goto $label$15 }
	
.LABEL $label$14
	*($4 + [348]) = [0]
	$14 = ($9 + [64])
	$13 = ($9 + [68])
	if ( ((int_32)*($13) == (int_32)*($14)) ){ goto $label$24 }
	$15 = ($0 + [152])
	$16 = (($4 + [80]) + [64])
	$17 = (($4 + [616]) + [64])
	$18 = (($4 + [80]) + [48])
	$19 = (($4 + [616]) + [48])
	$12 = (($4 + [616]) + [8])
	$20 = (($4 + [80]) + [32])
	$21 = (($4 + [80]) + [8])
	$22 = (($4 + [304]) + [8])
	$23 = (($4 + [616]) + [32])
	$24 = (($4 + [304]) + [24])
	$25 = ($0 + [248])
	$26 = ($9 + [136])
	$27 = ($9 + [140])
	$28 = ($4 + [136])
	$29 = ($4 + [152])
	$30 = (($4 + [80]) + [36])
	$31 = ($4 + [252])
	$32 = (int_64)0
	
.LOOP $label$25:
	if ( ((int_64)$32 >= (int_64)*($25)) ){ goto $label$24 }
	*($4 + [348]) = (*($4 + [348]) + [1])
	$8 = (*($14) + ((int_32)(CASTING uint_32)(uint_64 $32) * (int_32)[40]))
	$33 = *($8)
	$34 = *(($8 + [8]))
	$35 = *(($8 + [16]))
	$7 = [0]
	*($24) = [0]
	*(($36 = (($4 + [304]) + [16]))) = $35
	*($22) = $34
	*(($37 = (($4 + [304]) + [28]))) = (int_64)0
	*($4 + [304]) = $33
	$38 = ($8 + [28])
	$6 = (*($38) - *($8 + [24]))
	$39 = ((int_32)$6 / (int_32)[24])
	$11 = [0]
	if ( ($6 == 0) ){ goto $label$31 }
	if ( ((uint_32)$39 >= (uint_32)[178956971]) ){ goto $label$30 }
	$7 = CALL _Znwj($6)
	*($24) = $7
	*((($4 + [304]) + [32])) = ($7 + ((int_32)$39 * (int_32)[24]))
	*($37) = $7
	$6 = *(($8 + [24]))
	$8 = (*($38) - $6)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$32 }
	CALL memcpy($7, $6, $8)
	$11 = (*($37) + ((int_32)((uint_32)$8 / (uint_32)[24]) * (int_32)[24]))
	*($37) = $11
	$7 = *($24)
	goto $label$31 
	
.LABEL $label$32
	$11 = $7
	
.LABEL $label$31
	*(($6 = (($4 + [288]) + [8]))) = [0]
	*($4 + [288]) = (int_64)0
	$8 = ($11 - $7)
	$7 = ((int_32)$8 / (int_32)[24])
	if ( ($8 == 0) ){ goto $label$33 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$29 }
	$8 = CALL _Znwj($8)
	*($6) = ($8 + ((int_32)$7 * (int_32)[24]))
	*($4 + [288]) = $8
	*($4 + [292]) = $8
	$6 = *($24)
	$7 = (*($37) - $6)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$33 }
	CALL memcpy($8, $6, $7)
	*($4 + [292]) = (*($4 + [292]) + ((int_32)((uint_32)$7 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$33
	$11 = [0]
	*(($7 = (($4 + [272]) + [8]))) = [0]
	*($4 + [272]) = (int_64)0
	$8 = (*($27) - *($26))
	if ( ($8 == 0) ){ goto $label$34 }
	$6 = int_32($8 >> [2])
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$28 }
	$11 = CALL _Znwj($8)
	*($7) = ($11 + ($6 << [2]))
	*($4 + [272]) = $11
	*($4 + [276]) = $11
	$7 = *($26)
	$8 = (*($27) - $7)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$34 }
	CALL memcpy($11, $7, $8)
	$11 = (*($4 + [276]) + $8)
	*($4 + [276]) = $11
	
.LABEL $label$34
	$34 = (int_64)0
	$8 = *($4 + [288])
	if ( ((int_32)*($4 + [292]) == (int_32)$8) ){ goto $label$36 }
	$34 = (int_64)0
	$7 = [1]
	$6 = [0]
	
.LOOP $label$37:
	$8 = ($8 + $6)
	$33 = *($8)
	*(($38 = (($4 + [232]) + [8]))) = [0]
	*(($39 = (($4 + [616]) + [16]))) = *(($8 + [16]))
	*($12) = *(($8 + [8]))
	*($4 + [616]) = $33
	*($4 + [232]) = (int_64)0
	$8 = ($11 - *($4 + [272]))
	if ( ($8 == 0) ){ goto $label$38 }
	$11 = int_32($8 >> [2])
	if ( ((uint_32)$11 >= (uint_32)[1073741824]) ){ goto $label$35 }
	$8 = CALL _Znwj($8)
	*($38) = ($8 + ($11 << [2]))
	*($4 + [232]) = $8
	*($4 + [236]) = $8
	$38 = *($4 + [272])
	$11 = (*($4 + [276]) - $38)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$38 }
	CALL memcpy($8, $38, $11)
	*($4 + [236]) = (*($4 + [236]) + $11)
	
.LABEL $label$38
	*((($4 + [56]) + [16])) = *($39)
	*((($4 + [56]) + [8])) = *($12)
	*($4 + [56]) = *($4 + [616])
	$33 = CALL $89($15, ($4 + [56]), ($4 + [232]))
	$8 = *($4 + [232])
	if ( ($8 == 0) ){ goto $label$39 }
	*($4 + [236]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$39
	$34 = ((int_64)$33 + (int_64)$34)
	$8 = *($4 + [288])
	if ( ((uint_32)$7 >= (uint_32)((int_32)(*($4 + [292]) - $8) / (int_32)[24])) ){ goto $label$36 }
	$6 = ($6 + [24])
	$7 = ($7 + [1])
	$11 = *($4 + [276])
	goto $label$37 
	
.LABEL $label$36
	$7 = *($4 + [272])
	if ( ($7 == 0) ){ goto $label$40 }
	*($4 + [276]) = $7
	CALL _ZdlPv($7)
	$8 = *($4 + [288])
	
.LABEL $label$40
	if ( ($8 == 0) ){ goto $label$41 }
	*($4 + [292]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$41
	if ( (int_64)($34 == 0) ){ goto $label$26 }
	*($4 + [368]) = ((int_64)*($4 + [368]) + (int_64)$34)
	$8 = CALL $182([8835])
	if ( ($8 <= [8]) ){ goto $label$44 }
	CALL eosio_assert([0], [8839])
	goto $label$43 
	
.LABEL $label$44
	if ( ($8 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$33 = (int_64)0
	
.LOOP $label$45:
	$7 = *(($8 + [8834]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$46 }
	CALL eosio_assert([0], [8884])
	
.LABEL $label$46
	$33 = ((int_64)((int_64)$33 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$45 }
	$35 = ((int_64)$33 << (int_64)8)
	goto $label$27 
	
.LABEL $label$42
	$35 = (int_64)0
	goto $label$27 
	
.LABEL $label$35
	CALL $173(($4 + [232]))
	
.LABEL $label$30
	CALL $173($24)
	
.LABEL $label$29
	CALL $173(($4 + [288]))
	
.LABEL $label$28
	CALL $173(($4 + [272]))
	
.LABEL $label$27
	CALL eosio_assert((uint_64)(((int_64)$34 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8937])
	$33 = (uint_64)$35 >> (uint_64)(int_64)8)
	$40 = ((int_64)$35 | (int_64)4)
	$8 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $33) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$35 = (uint_64)$33 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$33 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$33 = $35
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$33 = $35
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$33 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$33 = (uint_64)$33 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$51 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$7 = [0]
	
.LABEL $label$47
	CALL eosio_assert($7, [8986])
	*((($4 + [216]) + [8])) = (int_64)3617214756542218240
	$33 = *($0)
	*($4 + [216]) = $33
	*((($4 + [616]) + [16])) = $34
	*((($4 + [616]) + [24])) = $40
	*($12) = *($4 + [304])
	*($4 + [616]) = $33
	CALL $163($23, ($4 + [352]))
	CALL $19(($4 + [600]), CALL $18(($4 + [232]), ($4 + [216]), (int_64)6138663591592764928, (int_64)-3617168760277827584, ($4 + [616])))
	$8 = *($4 + [600])
	CALL send_inline($8, (*($4 + [604]) - $8))
	$8 = *($4 + [600])
	if ( ($8 == 0) ){ goto $label$52 }
	*($4 + [604]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$52
	$8 = *((($4 + [232]) + [28]))
	if ( ($8 == 0) ){ goto $label$53 }
	*((($4 + [232]) + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$53
	$8 = *((($4 + [232]) + [16]))
	if ( ($8 == 0) ){ goto $label$54 }
	*($31) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$54
	if ( ((*($23) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*((($4 + [616]) + [40])))
	
.LABEL $label$26
	$8 = CALL $182([8835])
	if ( ($8 <= [8]) ){ goto $label$58 }
	CALL eosio_assert([0], [8839])
	goto $label$57 
	
.LABEL $label$58
	if ( ($8 == 0) ){ goto $label$56 }
	
.LABEL $label$57
	$33 = (int_64)0
	
.LOOP $label$59:
	$7 = *(($8 + [8834]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$60 }
	CALL eosio_assert([0], [8884])
	
.LABEL $label$60
	$33 = ((int_64)((int_64)$33 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$59 }
	$35 = ((int_64)$33 << (int_64)8)
	goto $label$55 
	
.LABEL $label$56
	$35 = (int_64)0
	
.LABEL $label$55
	CALL eosio_assert([1], [8937])
	$33 = (uint_64)$35 >> (uint_64)(int_64)8)
	$41 = ((int_64)$35 | (int_64)4)
	$8 = [0]
	
.LOOP $label$63:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $33) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$35 = (uint_64)$33 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$33 & (int_64)65280) == (int_64)0) ){ goto $label$64 }
	$33 = $35
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$64
	$33 = $35
	
.LOOP $label$65:
	if ( ((int_64)((int_64)$33 & (int_64)65280) != (int_64)0) ){ goto $label$62 }
	$33 = (uint_64)$33 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$65 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$63 }
	goto $label$61 
	
.LABEL $label$62
	$7 = [0]
	
.LABEL $label$61
	CALL eosio_assert($7, [8986])
	$35 = (int_64)0
	$8 = *($24)
	$7 = *($37)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$66 }
	$6 = ((int_32)($7 - $8) / (int_32)[24])
	if ( ((int_32)*(*($26)) != (int_32)[2]) ){ goto $label$68 }
	$35 = (int_64)0
	$11 = [0]
	
.LOOP $label$69:
	$7 = *($8)
	if ( ($7 <= [2]) ){ goto $label$70 }
	$40 = *(($8 + [8]))
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$72 }
	if ( ((int_32)$7 == (int_32)[3]) ){ goto $label$73 }
	$33 = (int_64)0
	if ( ((int_32)$7 != (int_32)[4]) ){ goto $label$71 }
	$33 = ((int_64)((int_64)$40 * (int_64)386) / (int_64)10000)
	goto $label$71 
	
.LABEL $label$73
	$33 = ((int_64)((int_64)$40 * (int_64)386) / (int_64)10000)
	goto $label$71 
	
.LABEL $label$72
	$33 = ((int_64)((int_64)$40 * (int_64)1412) / (int_64)10000)
	
.LABEL $label$71
	$35 = ((int_64)$33 + (int_64)$35)
	
.LABEL $label$70
	$8 = ($8 + [24])
	$11 = ($11 + [1])
	if ( ($11 <= $6) ){ goto $label$69 }
	goto $label$67 
	
.LABEL $label$68
	$35 = (int_64)0
	$7 = [0]
	
.LOOP $label$74:
	$33 = (int_64)0
	$11 = *($8)
	if ( ((uint_32)$11 > (uint_32)[4]) ){ goto $label$75 }
	$33 = *(($8 + [8]))
	goto $label$80 
	
.LABEL $label$80
	$33 = ((int_64)((int_64)$33 * (int_64)123) / (int_64)10000)
	goto $label$75 
	
.LABEL $label$79
	$33 = ((int_64)((int_64)$33 * (int_64)386) / (int_64)10000)
	goto $label$75 
	
.LABEL $label$78
	$33 = ((int_64)((int_64)$33 * (int_64)1412) / (int_64)10000)
	goto $label$75 
	
.LABEL $label$77
	$33 = ((int_64)((int_64)$33 * (int_64)386) / (int_64)10000)
	goto $label$75 
	
.LABEL $label$76
	$33 = ((int_64)((int_64)$33 * (int_64)106) / (int_64)10000)
	
.LABEL $label$75
	$8 = ($8 + [24])
	$35 = ((int_64)$33 + (int_64)$35)
	$7 = ($7 + [1])
	if ( ($7 <= $6) ){ goto $label$74 }
	
.LABEL $label$67
	if ( ((int_64)$35 <= (int_64)0) ){ goto $label$66 }
	*(($11 = (($4 + [200]) + [8]))) = *(($22 + [8]))
	*($4 + [200]) = *($22)
	$42 = *($0)
	$43 = *($4 + [304])
	$8 = CALL $182([8835])
	if ( ($8 <= [8]) ){ goto $label$84 }
	CALL eosio_assert([0], [8839])
	goto $label$83 
	
.LABEL $label$84
	if ( ($8 == 0) ){ goto $label$82 }
	
.LABEL $label$83
	$33 = (int_64)0
	
.LOOP $label$85:
	$7 = *(($8 + [8834]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$86 }
	CALL eosio_assert([0], [8884])
	
.LABEL $label$86
	$33 = ((int_64)((int_64)$33 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$85 }
	$33 = ((int_64)$33 << (int_64)8)
	goto $label$81 
	
.LABEL $label$82
	$33 = (int_64)0
	
.LABEL $label$81
	*(($39 = (($4 + [184]) + [8]))) = ((int_64)$33 | (int_64)4)
	*($4 + [184]) = $34
	CALL eosio_assert((uint_64)(((int_64)$34 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8937])
	$33 = (uint_64)$33 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$89:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $33) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$88 }
	$40 = (uint_64)$33 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$33 & (int_64)65280) == (int_64)0) ){ goto $label$90 }
	$33 = $40
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$90
	$33 = $40
	
.LOOP $label$91:
	if ( ((int_64)((int_64)$33 & (int_64)65280) != (int_64)0) ){ goto $label$88 }
	$33 = (uint_64)$33 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$91 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$88
	$7 = [0]
	
.LABEL $label$87
	CALL eosio_assert($7, [8986])
	*((($4 + [168]) + [8])) = $41
	*((($4 + [8]) + [8])) = $41
	*((($4 + [40]) + [8])) = *($11)
	*((($4 + [24]) + [8])) = *($39)
	*($4 + [168]) = $35
	*($4 + [8]) = $35
	*($4 + [40]) = *($4 + [200])
	*($4 + [24]) = *($4 + [184])
	CALL $25($42, $43, [2], ($4 + [40]), ($4 + [24]), ($4 + [8]))
	
.LABEL $label$66
	$42 = *($0)
	$8 = CALL $182([8835])
	if ( ($8 <= [8]) ){ goto $label$95 }
	CALL eosio_assert([0], [8839])
	goto $label$94 
	
.LABEL $label$95
	if ( ($8 == 0) ){ goto $label$93 }
	
.LABEL $label$94
	$33 = (int_64)0
	
.LOOP $label$96:
	$7 = *(($8 + [8834]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$97 }
	CALL eosio_assert([0], [8884])
	
.LABEL $label$97
	$33 = ((int_64)((int_64)$33 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$96 }
	$40 = ((int_64)$33 << (int_64)8)
	goto $label$92 
	
.LABEL $label$93
	$40 = (int_64)0
	
.LABEL $label$92
	CALL eosio_assert((uint_64)(((int_64)$34 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8937])
	$33 = (uint_64)$40 >> (uint_64)(int_64)8)
	$43 = ((int_64)$40 | (int_64)4)
	$8 = [0]
	
.LOOP $label$100:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $33) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$99 }
	$40 = (uint_64)$33 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$33 & (int_64)65280) == (int_64)0) ){ goto $label$101 }
	$33 = $40
	$7 = [1]
	$6 = $8
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$100 }
	goto $label$98 
	
.LABEL $label$101
	$33 = $40
	
.LOOP $label$102:
	if ( ((int_64)((int_64)$33 & (int_64)65280) != (int_64)0) ){ goto $label$99 }
	$33 = (uint_64)$33 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$6 = ($8 + [1])
	$8 = $6
	if ( $7 ){ goto $label$102 }
	$7 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$100 }
	goto $label$98 
	
.LABEL $label$99
	$7 = [0]
	
.LABEL $label$98
	CALL eosio_assert($7, [8986])
	*($20) = (int_64)0
	*(($7 = (($4 + [80]) + [40]))) = [0]
	$33 = *($9)
	*($21) = *($4 + [304])
	*(($11 = ($21 + [8]))) = *($22)
	*(($39 = ($21 + [16]))) = *($36)
	*($4 + [80]) = $33
	$8 = (*($37) - *($24))
	$6 = ((int_32)$8 / (int_32)[24])
	if ( ($8 == 0) ){ goto $label$103 }
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$23 }
	$8 = CALL _Znwj($8)
	*($20) = $8
	*($30) = $8
	*($7) = ($8 + ((int_32)$6 * (int_32)[24]))
	$38 = *($24)
	$6 = (*($37) - $38)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$103 }
	CALL memcpy($8, $38, $6)
	*($30) = (*($30) + ((int_32)((uint_32)$6 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$103
	*($28) = $43
	*($18) = $34
	*($16) = $35
	*($29) = $41
	*(($6 = (($4 + [80]) + [80]))) = ((int_64)$32 + (int_64)$2)
	*(($8 = CALL _Znwj([16]))) = $42
	*($8 + [8]) = (int_64)3617214756542218240
	$38 = ($8 + [16])
	*((($4 + [232]) + [8])) = $38
	*($12) = *($21)
	*(($12 + [8])) = *($11)
	*(($12 + [16])) = *($39)
	*($23) = *($20)
	*((($4 + [616]) + [40])) = *($7)
	*($7) = [0]
	*($20) = (int_64)0
	*($4 + [232]) = $8
	*($4 + [236]) = $38
	*($4 + [616]) = *($4 + [80])
	*(($19 + [8])) = *(($18 + [8]))
	*($19) = *($18)
	*(($17 + [8])) = *(($16 + [8]))
	*($17) = *($16)
	*((($4 + [616]) + [80])) = *($6)
	CALL $90($42, (int_64)7035937269232844800, ($4 + [232]), ($4 + [616]))
	$8 = *($23)
	if ( ($8 == 0) ){ goto $label$104 }
	*((($4 + [616]) + [36])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$104
	$8 = *($4 + [232])
	if ( ($8 == 0) ){ goto $label$105 }
	*($4 + [236]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$105
	$8 = *($20)
	if ( ($8 == 0) ){ goto $label$106 }
	*($30) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$106
	$8 = *($24)
	if ( ($8 == 0) ){ goto $label$107 }
	*($37) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$107
	$32 = ((int_64)$32 + (int_64)1)
	if ( (uint_64)($32 <= (CASTING uint_64)(uint_32 ((int_32)(*($13) - *($14)) / (int_32)[40]))) ){ goto $label$25 }
	
.LABEL $label$24
	$33 = *($0)
	*($4 + [620]) = ($4 + [348])
	*($4 + [616]) = ($4 + [368])
	CALL eosio_assert($10, [9062])
	CALL $91($5, $9, $33, ($4 + [616]))
	if ( ($3 == 0) ){ goto $label$108 }
	CALL $29(*($0), $1, ((int_32)(*(($9 + [68])) - *(($9 + [64]))) / (int_32)[40]), ((int_64)$2 + (int_64)1000), [3])
	
.LABEL $label$108
	if ( ((*($4 + [352]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($4 + [360]))
	$global$0 = ($4 + [704])
	return (unreachable)
	
.LABEL $label$23
	CALL $173($20)
	
.LABEL $label$9
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$11), [8705])
	goto $label$7 
	
.LABEL $label$8
	$8 = CALL db_find_i64(*($11), *(($0 + [80])), (int_64)-3660748247211412992, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $58($11, $8)
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$11), [8705])
	
.LABEL $label$7
	$33 = *($0)
	*($4 + [304]) = ($4 + [616])
	CALL eosio_assert([1], [9062])
	CALL $92($11, $6, $33, ($4 + [304]))
	
.LABEL $label$6
	$33 = *($0)
	CALL eosio_assert($10, [9062])
	CALL $93($5, $9, $33, ($4 + [616]))
	$33 = *($0)
	*($4 + [624]) = (int_64)3617214756542218240
	*($4 + [616]) = $33
	CALL $94(($4 + [416]), $9)
	CALL $95($33, ($4 + [616]), ($4 + [416]))
	$8 = *($4 + [552])
	if ( ($8 == 0) ){ goto $label$109 }
	*(($4 + [556])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$109
	$8 = *($4 + [540])
	if ( ($8 == 0) ){ goto $label$110 }
	*(($4 + [544])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$110
	$8 = *($4 + [528])
	if ( ($8 == 0) ){ goto $label$111 }
	*(($4 + [532])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$111
	$12 = *($4 + [480])
	if ( ($12 == 0) ){ goto $label$112 }
	$11 = ($4 + [484])
	$8 = *($11)
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$114 }
	
.LOOP $label$115:
	$7 = ($8 + [-40])
	$6 = *(($8 + [-16]))
	if ( ($6 == 0) ){ goto $label$116 }
	*(($8 + [-12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$116
	$8 = $7
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$115 }
	$8 = *(($4 + [480]))
	goto $label$113 
	
.LABEL $label$114
	$8 = $12
	
.LABEL $label$113
	*($11) = $12
	CALL _ZdlPv($8)
	
.LABEL $label$112
	$11 = ($0 + [208])
	$7 = *(($0 + [236]))
	$12 = *(($0 + [232]))
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$118 }
	
.LOOP $label$120:
	$8 = ($7 + [-24])
	$6 = *($8)
	if ( (int_64)(*($6) == 0) ){ goto $label$119 }
	$7 = $8
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$120 }
	goto $label$118 
	
.LABEL $label$119
	if ( ((int_32)$12 == (int_32)$7) ){ goto $label$118 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$11), [8705])
	goto $label$117 
	
.LABEL $label$118
	$6 = [0]
	$8 = CALL db_find_i64(*($11), *(($0 + [216])), (int_64)4147959508456022528, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$117 }
	$6 = CALL $56($11, $8)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$11), [8705])
	
.LABEL $label$117
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9838])
	CALL $96($0, *($6 + [8]))
	CALL $10(*($0))
	$33 = *($0)
	*($4 + [616]) = [0]
	*($4 + [376]) = $33
	*($4 + [384]) = (int_64)4222381386624925696
	*($4 + [620]) = *($6 + [28])
	*(($8 = CALL _Znwj([16]))) = $33
	*($8 + [8]) = (int_64)3617214756542218240
	*(($4 + [412])) = [0]
	$7 = ($8 + [16])
	*(($4 + [400])) = $7
	*(($4 + [396])) = $7
	*($4 + [392]) = $8
	*($4 + [404 align=4]) = (int_64)0
	$12 = ($4 + [404])
	CALL $20($12, [8])
	$8 = *($4 + [404])
	$39 = ($4 + [408])
	$7 = (*($39) - $8)
	CALL eosio_assert(((int_32)$7 > (int_32)[3]), [8504])
	CALL memcpy($8, ($4 + [616]), [4])
	CALL eosio_assert(((int_32)($7 + [-4]) > (int_32)[3]), [8504])
	$11 = (($4 + [616]) | [4])
	CALL memcpy(($8 + [4]), $11, [4])
	$34 = ((int_64)$1 + (int_64)1)
	CALL $12($33, $34, (int_64)0, [0], ($4 + [376]))
	$8 = *($4 + [404])
	if ( ($8 == 0) ){ goto $label$121 }
	*($39) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$121
	$8 = *((($4 + [376]) + [16]))
	if ( ($8 == 0) ){ goto $label$122 }
	*(($4 + [396])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$122
	$33 = *($0)
	*(($7 = (($4 + [376]) + [16]))) = (int_64)0
	*(($39 = ($4 + [400]))) = [0]
	$8 = *(($6 + [28]))
	*((($4 + [376]) + [8])) = (int_64)4222381386624925696
	*($4 + [616]) = [0]
	*($4 + [376]) = $33
	*($4 + [620]) = $8
	$8 = CALL _Znwj([16])
	*($7) = $8
	*($8) = $33
	*($8 + [8]) = (int_64)3617214756542218240
	*(($6 = (($4 + [376]) + [28]))) = (int_64)0
	*(($4 + [412])) = [0]
	$8 = ($8 + [16])
	*($39) = $8
	*(($4 + [396])) = $8
	CALL $20($12, [8])
	$8 = *($6)
	$39 = ($4 + [408])
	$12 = (*($39) - $8)
	CALL eosio_assert(((int_32)$12 > (int_32)[3]), [8504])
	CALL memcpy($8, ($4 + [616]), [4])
	CALL eosio_assert(((int_32)($12 + [-4]) > (int_32)[3]), [8504])
	CALL memcpy(($8 + [4]), $11, [4])
	CALL $12($33, (int_64)0, $34, [5], ($4 + [376]))
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$123 }
	*($39) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$123
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$5 }
	*(($4 + [396])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$5
	$global$0 = ($4 + [704])
	$6
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	$11
}

int_32 .FUNC $52 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [288])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [272]) = (int_64)0
	*($4 + [264]) = (int_64)0
	*($4 + [280]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8779])
	CALL memcpy(($4 + [264]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8779])
	CALL memcpy((($4 + [264]) + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [8779])
	CALL memcpy(($4 + [8]), ($2 + [16]), [1])
	$8 = *($4 + [8])
	*($4 + [280]) = ((int_32)$8 != (int_32)[0])
	*(($4 + [28])) = ($2 + [17])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*($4 + [160]) = $0
	*($4 + [216]) = $0
	*($4 + [256]) = [4]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [272])
	$1 = *($4 + [264])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ((int_32)$8 != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $188($2)
	
.LABEL $label$5
	CALL $55(($4 + [8]))
	$global$0 = ($4 + [288])
	return [1]
}

void .FUNC $53 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5)
{
	CALL require_auth(*($0))
	if ( (CALL is_account((int_64)4157600125686060400) == 0) ){ goto $label$1 }
	CALL require_recipient((int_64)4157600125686060400)
	
.LABEL $label$1
}

int_32 .FUNC $54 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [432])
	$global$0 = $3
	*(($4 = $3) + [376]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [288]) + [40]))) = (int_64)0
	*(($4 + [304])) = (int_64)0
	*((($4 + [288]) + [24])) = (int_64)0
	*(($6 = ($4 + [320]))) = (int_64)0
	*((($4 + [288]) + [56])) = (int_64)0
	*(($4 + [360])) = (int_64)0
	*($3) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [368]) = (int_64)0
	*($4 + [276]) = $2
	*($4 + [272]) = $2
	*($4 + [280]) = ($2 + $5)
	*($4 + [416]) = ($4 + [272])
	*($4 + [16]) = ($4 + [288])
	CALL $97(($4 + [16]), ($4 + [416]))
	*(($3 = ($4 + [8]))) = *($4 + [280])
	*($4) = *($4 + [272])
	$3 = *($3)
	*((($4 + [384]) + [8])) = $3
	*(($7 = (($4 + [400]) + [8]))) = $3
	$8 = *($4)
	*($4 + [400]) = $8
	*($4 + [384]) = $8
	$3 = *($7)
	*((($4 + [416]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [400])
	*($4 + [32]) = $1
	*($4 + [416]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*(($4 + [188])) = (int_64)0
	*(($4 + [196])) = (int_64)0
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*($4 + [168]) = $0
	*($4 + [224]) = $0
	*($4 + [264]) = [4]
	*($4 + [420]) = ($4 + [376])
	*($4 + [416]) = ($4 + [16])
	CALL $98(($4 + [416]), ($4 + [288]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $188($2)
	
.LABEL $label$4
	CALL $55(($4 + [16]))
	$2 = *($6)
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [324])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [432])
	return [1]
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [232]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [236])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [232]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *(($0 + [192]))
	if ( ($3 == 0) ){ goto $label$6 }
	*(($0 + [196])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$3 = *(($0 + [176]))
	if ( ($3 == 0) ){ goto $label$7 }
	*(($0 + [180])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$3 = *(($0 + [160]))
	if ( ($3 == 0) ){ goto $label$8 }
	*(($0 + [164])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$1 = *(($0 + [136]))
	if ( ($1 == 0) ){ goto $label$9 }
	$2 = ($0 + [140])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$12 }
	$3 = *(($0 + [136]))
	goto $label$10 
	
.LABEL $label$11
	$3 = $1
	
.LABEL $label$10
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$9
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$14 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$16 }
	
.LOOP $label$17:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$18 }
	CALL _ZdlPv($4)
	
.LABEL $label$18
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$17 }
	$3 = *(($0 + [96]))
	goto $label$15 
	
.LABEL $label$16
	$3 = $1
	
.LABEL $label$15
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$14
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$19 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$21 }
	$3 = ($3 + [-24])
	
.LOOP $label$22:
	$4 = CALL $122($3)
	$3 = ($3 + [-24])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$22 }
	$3 = *(($0 + [56]))
	goto $label$20 
	
.LABEL $label$21
	$3 = $1
	
.LABEL $label$20
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$19
	return $0
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8756])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $185($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	CALL $112(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [8784])
	*(($5 = CALL _Znwj([48])) + [32]) = $1
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = [0]
	*($5 + [28]) = [10]
	*($4 + [56]) = (($4 + [16]) + [29])
	*($4 + [52]) = ($4 + [16])
	*($4 + [48]) = ($4 + [16])
	CALL $105(($4 + [48]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)4147959508456022528, $2, $6, ($4 + [16]), [29])
	*($5 + [36]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [48]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($9 + [8]) = $6
	*($9 + [16]) = $7
	*($4 + [48]) = [0]
	*($9) = $5
	*($8) = ($9 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $106(($1 + [24]), ($4 + [48]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [48])
	*($4 + [48]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [64])
}

void .FUNC $173 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $152 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [16])
	$global$0 = $3
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*($0) + int_32($4 >> [1]))
	$6 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$6 = *((*($5) + $6))
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$0 = (*($2 + [4]) - *($2))
	$4 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$0 = CALL _Znwj($0)
	*(($3 + [8])) = ($0 + ((int_32)$4 * (int_32)[12]))
	*($3) = $0
	*($3 + [4]) = $0
	$2 = *(($2 + [4]))
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = CALL $163($0, $4)
	$0 = ($0 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$4 }
	*($3 + [4]) = ($7 + [12])
	
.LABEL $label$3
	CALL void $5((int_32 $1), (int_64 $3), (int_32 $6))
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$5 }
	$4 = *($3 + [4])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($4 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$9
	$4 = $0
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$8 }
	$0 = *($3)
	goto $label$6 
	
.LABEL $label$7
	$0 = $2
	
.LABEL $label$6
	*($3 + [4]) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $173($3)
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [112])
	$global$0 = $3
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*($0) + int_32($4 >> [1]))
	$6 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$6 = *((*($5) + $6))
	
.LABEL $label$1
	*(($3 + [104])) = [0]
	*((($3 + [72]) + [16])) = *(($1 + [16]))
	*((($3 + [72]) + [8])) = *(($1 + [8]))
	*($3 + [96]) = (int_64)0
	*($3 + [72]) = *($1)
	$0 = (*(($1 + [28])) - *($1 + [24]))
	$4 = ((int_32)$0 / (int_32)[12])
	if ( ($0 == 0) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$0 = CALL _Znwj($0)
	*((($3 + [72]) + [24])) = $0
	*((($3 + [72]) + [28])) = $0
	*(($3 + [104])) = ($0 + ((int_32)$4 * (int_32)[12]))
	$1 = *(($1 + [28]))
	$4 = *(($1 + [24]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = CALL $163($0, $4)
	$0 = ($0 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	*(($3 + [100])) = ($7 + [12])
	
.LABEL $label$3
	$8 = *(($2 + [24]))
	*((($3 + [32]) + [24])) = $8
	$9 = *(($2 + [16]))
	*((($3 + [32]) + [16])) = $9
	$10 = *(($2 + [8]))
	$11 = *($2)
	*(($3 + [16])) = $9
	*(($3 + [24])) = $8
	*($3 + [32]) = $11
	*($3 + [40]) = $10
	*($3) = $11
	*($3 + [8]) = $10
	CALL void $5((int_32 ($3 + [72])), (int_32 $3), (int_32 $6))
	$1 = *($3 + [96])
	if ( ($1 == 0) ){ goto $label$5 }
	$7 = ($3 + [100])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($4 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$9
	$4 = $0
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($3 + [96]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $1
	
.LABEL $label$6
	*($7) = $1
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($3 + [112])
	return (unreachable)
	
.LABEL $label$2
	CALL $173((($3 + [72]) + [24]))
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($3 + [40]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *(($3 + [48]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [56]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [64]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $188($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $185($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10184])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $185($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $183(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10184])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $183(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $179 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $176([14], $0, [-1], $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $183 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $174())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $184($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	*($1 + [8]) = *($1 + [16])
	*($1 + [16]) = *(*(*($3) + [4]))
	$5 = *($1)
	CALL eosio_assert([1], [9194])
	*($4 + [40]) = ($4 + [29])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	CALL $105(($4 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $4, [29])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [8784])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([176])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72]) = [0]
	*($3 + [112 align=4]) = (int_64)0
	*($3 + [120 align=4]) = (int_64)0
	*($3 + [128 align=4]) = (int_64)0
	*($3 + [136 align=4]) = (int_64)0
	*($3 + [144]) = [0]
	*($3 + [156]) = $1
	CALL $115(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [160])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $116(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$5 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$3 = *($5 + [136])
	if ( ($3 == 0) ){ goto $label$4 }
	*(($5 + [140])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($5 + [124])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [128])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($5 + [112])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [116])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$7 = *($5 + [64])
	if ( ($7 == 0) ){ goto $label$7 }
	$6 = ($5 + [68])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($3 + [-40])
	$0 = *(($3 + [-16]))
	if ( ($0 == 0) ){ goto $label$11 }
	*(($3 + [-12])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$3 = $1
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$10 }
	$3 = *(($5 + [64]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $7
	
.LABEL $label$8
	*($6) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$7
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	*($1 + [28]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9194])
	*($4 + [40]) = ($4 + [29])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	CALL $105(($4 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $4, [29])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	*($1 + [24]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9194])
	*($4 + [40]) = ($4 + [29])
	*($4 + [36]) = $4
	*($4 + [32]) = $4
	CALL $105(($4 + [32]), $1)
	CALL db_update_i64(*($1 + [36]), $2, $4, [29])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [48])
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8756])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $185($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8779])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8779])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $123(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8756])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $185($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $5)
	*(($4 = CALL _Znwj([176])) + [24]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [64 align=4]) = (int_64)0
	*($4 + [72]) = [0]
	*($4 + [112 align=4]) = (int_64)0
	*($4 + [120 align=4]) = (int_64)0
	*($4 + [128 align=4]) = (int_64)0
	*($4 + [136 align=4]) = (int_64)0
	*($4 + [144]) = [0]
	*($4 + [156]) = $0
	CALL $62(($3 + [32]), $4)
	*($4 + [160]) = $1
	*($3 + [24]) = $4
	$6 = *($4)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $4
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $116(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$8 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($8 == 0) ){ goto $label$9 }
	$5 = *($8 + [136])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($8 + [140])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$5 = *($8 + [124])
	if ( ($5 == 0) ){ goto $label$11 }
	*(($8 + [128])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$5 = *($8 + [112])
	if ( ($5 == 0) ){ goto $label$12 }
	*(($8 + [116])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$12
	$2 = *($8 + [64])
	if ( ($2 == 0) ){ goto $label$13 }
	$7 = ($8 + [68])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($5 + [-40])
	$0 = *(($5 + [-16]))
	if ( ($0 == 0) ){ goto $label$17 }
	*(($5 + [-12])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$17
	$5 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$16 }
	$5 = *(($8 + [64]))
	goto $label$14 
	
.LABEL $label$15
	$5 = $2
	
.LABEL $label$14
	*($7) = $2
	CALL _ZdlPv($5)
	
.LABEL $label$13
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $61 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$4()), [8784])
	*(($5 = CALL _Znwj([64])) + [48]) = $1
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($4 + [72]) = (($4 + [16]) + [48])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $110(($4 + [64]), $5)
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-2042509307701886976, $2, $6, ($4 + [16]), [48])
	*($5 + [52]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($9 + [8]) = $6
	*($9 + [16]) = $7
	*($4 + [64]) = [0]
	*($9) = $5
	*($8) = ($9 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $111(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8756])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $185($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [48]) = $0
	CALL $114(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $111(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [320])
	$global$0 = $2
	$3 = CALL $94($2, $1)
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$1 = (*($0) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($1) + $0))
	
.LABEL $label$1
	$5 = CALL $94(($2 + [160]), $3)
	CALL void $1((int_32 $5), (int_32 $0))
	$0 = *($5 + [136])
	if ( ($0 == 0) ){ goto $label$2 }
	*(($5 + [140])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$0 = *($5 + [124])
	if ( ($0 == 0) ){ goto $label$3 }
	*(($5 + [128])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$0 = *($5 + [112])
	if ( ($0 == 0) ){ goto $label$4 }
	*(($5 + [116])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$4
	$6 = *($5 + [64])
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($5 + [68])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = ($0 + [-40])
	$4 = *(($0 + [-16]))
	if ( ($4 == 0) ){ goto $label$9 }
	*(($0 + [-12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$9
	$0 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$8 }
	$0 = *(($5 + [64]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$0 = *($3 + [136])
	if ( ($0 == 0) ){ goto $label$10 }
	*(($3 + [140])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$10
	$0 = *($3 + [124])
	if ( ($0 == 0) ){ goto $label$11 }
	*(($3 + [128])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$0 = *($3 + [112])
	if ( ($0 == 0) ){ goto $label$12 }
	*(($3 + [116])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$6 = *($3 + [64])
	if ( ($6 == 0) ){ goto $label$13 }
	$5 = ($3 + [68])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($0 + [-40])
	$4 = *(($0 + [-16]))
	if ( ($4 == 0) ){ goto $label$17 }
	*(($0 + [-12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$0 = $1
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$16 }
	$0 = *(($3 + [64]))
	goto $label$14 
	
.LABEL $label$15
	$0 = $6
	
.LABEL $label$14
	*($5) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$13
	$global$0 = ($2 + [320])
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[1]), [8779])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [56])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $117($0, ($1 + [64]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[31]), [8779])
	CALL memcpy(($1 + [80]), *($0 + [4]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $118(CALL $118(CALL $118($0, ($1 + [112])), ($1 + [124])), ($1 + [136]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8779])
	CALL memcpy(($1 + [148]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8779])
	CALL memcpy(($1 + [152]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $1 (int_64 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL prints([8192])
	CALL printui($0)
	CALL prints([8211])
	$6 = [0]
	*(($5 + [32])) = [0]
	*($5 + [8]) = $3
	*($5) = $3
	*($5 + [16]) = (int_64)-1
	*($5 + [24]) = (int_64)0
	$7 = CALL db_find_i64($3, $3, (int_64)3617214769600282624, $0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $2($5, $7) + [40]) == (int_32)$5), [8705])
	goto $label$1 
	
.LABEL $label$2
	$6 = [1]
	
.LABEL $label$1
	CALL eosio_assert($6, [8299])
	CALL eosio_assert(((int_64)*($5) == (int_64)CALL $fimport$4()), [8784])
	*(($6 = CALL _Znwj([56])) + [40]) = $5
	*($6 + [8]) = $1
	*($6) = $0
	*($6 + [16]) = $2
	*($6 + [24]) = $3
	*($6 + [32]) = $4
	*($5 + [104]) = (($5 + [48]) + [34])
	*($5 + [100]) = ($5 + [48])
	*($5 + [96]) = ($5 + [48])
	CALL $3(($5 + [96]), $6)
	$3 = *($6)
	$7 = CALL db_store_i64(*(($5 + [8])), (int_64)3617214769600282624, $2, $3, ($5 + [48]), [34])
	*($6 + [44]) = $7
	$1 = ($5 + [16])
	if ( (uint_64)($3 <= *($1)) ){ goto $label$3 }
	*($1) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*($5 + [96]) = $6
	$3 = *($6)
	*($5 + [48]) = $3
	*($5 + [44]) = $7
	$8 = ($5 + [28])
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*(($5 + [32]))) ){ goto $label$6 }
	*($1 + [8]) = $3
	*($1 + [16]) = $7
	*($5 + [96]) = [0]
	*($1) = $6
	*($8) = ($1 + [24])
	$6 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( $6 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $4(($5 + [24]), ($5 + [96]), ($5 + [48]), ($5 + [44]))
	$6 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv($6)
	
.LABEL $label$4
	$7 = *($5 + [24])
	if ( ($7 == 0) ){ goto $label$7 }
	$8 = ($5 + [28])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$1 = *($6)
	*($6) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL _ZdlPv($1)
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($5 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $7
	
.LABEL $label$8
	*($8) = $7
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($5 + [112])
}

int_64 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [80])
	$global$0 = $3
	$4 = *($1)
	if ( ((uint_32)$4 > (uint_32)[4]) ){ goto $label$18 }
	goto $label$23 
	
.LABEL $label$23
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [2])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$11 }
	$6 = *($1 + [8])
	$1 = CALL _Znwj($4)
	*(($3 + [72])) = ($1 + ($5 << [2]))
	*($3 + [64]) = $1
	*($3 + [68]) = $1
	$4 = *($2)
	$2 = (*(($2 + [4])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$24 }
	CALL memcpy($1, $4, $2)
	*($3 + [68]) = ($1 + $2)
	
.LABEL $label$24
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$16 }
	$7 = (int_64)0
	if ( $2 ){ goto $label$25 }
	$7 = ((int_64)$6 << (int_64)1)
	
.LABEL $label$25
	if ( $1 ){ goto $label$15 }
	goto $label$1 
	
.LABEL $label$22
	*($3 + [8]) = [0]
	$7 = (int_64)0
	*($3) = (int_64)0
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = int_32($1 >> [2])
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$7 }
	$1 = CALL _Znwj($1)
	*(($3 + [8])) = ($1 + ($4 << [2]))
	*($3) = $1
	*($3 + [4]) = $1
	$4 = *($2)
	$2 = (*(($2 + [4])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$26 }
	CALL memcpy($1, $4, $2)
	*($3 + [4]) = ($1 + $2)
	
.LABEL $label$26
	if ( ($1 == 0) ){ goto $label$1 }
	*($3 + [4]) = $1
	CALL _ZdlPv($1)
	$global$0 = ($3 + [80])
	return (int_64)0
	
.LABEL $label$21
	*($3 + [32]) = (int_64)0
	*($3 + [40]) = [0]
	$4 = (*($2 + [4]) - *($2))
	if ( ($4 == 0) ){ goto $label$10 }
	$5 = int_32($4 >> [2])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$9 }
	$7 = *($1 + [8])
	$1 = CALL _Znwj($4)
	*(($3 + [40])) = ($1 + ($5 << [2]))
	*($3 + [32]) = $1
	*($3 + [36]) = $1
	$4 = *($2)
	$2 = (*(($2 + [4])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$27 }
	CALL memcpy($1, $4, $2)
	*($3 + [36]) = ($1 + $2)
	
.LABEL $label$27
	$7 = ( ((int_64)$7 * (int_64)9) ? (int_64)0 : ((int_32)*($1) == (int_32)[2]) )
	if ( ($1 == 0) ){ goto $label$1 }
	*($3 + [36]) = $1
	CALL _ZdlPv($1)
	$global$0 = ($3 + [80])
	return $7
	
.LABEL $label$20
	$7 = (int_64)0
	*($3 + [16]) = (int_64)0
	$4 = [0]
	*($3 + [24]) = [0]
	$6 = *($1 + [8])
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$17 }
	$5 = int_32($1 >> [2])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$6 }
	$4 = CALL _Znwj($1)
	*(($3 + [24])) = ($4 + ($5 << [2]))
	*($3 + [16]) = $4
	*($3 + [20]) = $4
	$1 = *($2)
	$2 = (*(($2 + [4])) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($4, $1, $2)
	$2 = ($4 + $2)
	*($3 + [20]) = $2
	$2 = int_32(($2 - $4) >> [2])
	if ( ($2 <= [2]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$19
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [2])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$8 }
	$6 = *($1 + [8])
	$1 = CALL _Znwj($4)
	*(($3 + [56])) = ($1 + ($5 << [2]))
	*($3 + [48]) = $1
	*($3 + [52]) = $1
	$4 = *($2)
	$2 = (*(($2 + [4])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$28 }
	CALL memcpy($1, $4, $2)
	*($3 + [52]) = ($1 + $2)
	
.LABEL $label$28
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)[2]) ){ goto $label$14 }
	$7 = (int_64)0
	if ( ((int_32)$2 != (int_32)[1]) ){ goto $label$29 }
	$7 = ((uint_64)((int_64)$6 * (int_64)195) / (uint_64)(int_64)100)
	
.LABEL $label$29
	if ( $1 ){ goto $label$13 }
	goto $label$1 
	
.LABEL $label$18
	CALL eosio_assert([0], [10147])
	$global$0 = ($3 + [80])
	return (int_64)0
	
.LABEL $label$17
	$2 = int_32(([0] - [0]) >> [2])
	if ( ((uint_32)$2 >= (uint_32)[2]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$16
	$7 = $6
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$15
	*($3 + [68]) = $1
	CALL _ZdlPv($1)
	$global$0 = ($3 + [80])
	return $7
	
.LABEL $label$14
	$7 = $6
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$13
	*($3 + [52]) = $1
	CALL _ZdlPv($1)
	$global$0 = ($3 + [80])
	return $7
	
.LABEL $label$12
	$2 = int_32(($4 - $4) >> [2])
	if ( ((uint_32)$2 >= (uint_32)[2]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$11
	CALL $173(($3 + [64]))
	
.LABEL $label$10
	
.LABEL $label$9
	CALL $173(($3 + [32]))
	
.LABEL $label$8
	CALL $173(($3 + [48]))
	
.LABEL $label$7
	CALL $173($3)
	
.LABEL $label$6
	CALL $173(($3 + [16]))
	
.LABEL $label$5
	if ( ((int_32)*($4 + [4]) == (int_32)[3]) ){ goto $label$3 }
	if ( ($2 <= [3]) ){ goto $label$4 }
	if ( ((int_32)*($4 + [8]) == (int_32)[3]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$7 = ((int_64)$6 * (int_64)12)
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [20]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
	$4
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return $7
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [72])
	$5 = *(($0 + [100]))
	$4 = *(($0 + [96]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( (int_64)(*($7) == 0) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8705])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-3660748247211412992, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $58($3, $6)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$3), [8705])
	
.LABEL $label$2
	$8 = *($0)
	*($2) = $1
	CALL eosio_assert([1], [9062])
	CALL $140($3, $7, $8, $2)
	
.LABEL $label$1
	$9 = ($0 + [112])
	$5 = *(($0 + [140]))
	$7 = *(($0 + [136]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$10:
	$6 = ($5 + [-24])
	$3 = *($6)
	if ( (int_64)(*($3) == 0) ){ goto $label$9 }
	$5 = $6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$9), [8705])
	goto $label$7 
	
.LABEL $label$8
	$6 = CALL db_find_i64(*($9), *(($0 + [120])), (int_64)-2042509307701886976, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$3 = CALL $60($9, $6)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)$9), [8705])
	
.LABEL $label$7
	*($2 + [15]) = [0]
	*($2 + [14]) = [0]
	$6 = *($1 + [136])
	$4 = int_32((*(($1 + [140])) - $6) >> [2])
	if ( ($4 <= [2]) ){ goto $label$11 }
	$6 = ($6 + [4])
	$5 = [1]
	
.LOOP $label$12:
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)[4]) ){ goto $label$13 }
	if ( ((int_32)$7 != (int_32)[3]) ){ goto $label$14 }
	*($2 + [15]) = [1]
	
.LABEL $label$14
	$6 = ($6 + [4])
	$5 = ($5 + [1])
	if ( ($5 <= $4) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	*($2 + [14]) = [1]
	$6 = ($6 + [4])
	$5 = ($5 + [1])
	if ( ($5 <= $4) ){ goto $label$12 }
	
.LABEL $label$11
	$8 = *($0)
	*($2) = $1
	*($2 + [4]) = ($2 + [15])
	*($2 + [8]) = ($2 + [14])
	CALL eosio_assert([1], [9062])
	CALL $141($9, $3, $8, $2)
	
.LABEL $label$6
	$global$0 = ($2 + [16])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [156]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	$5 = *($1)
	CALL $142($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9194])
	*(($3 = $4)) = [0]
	CALL $125($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $185($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $126($3, $1)
	CALL db_update_i64(*($1 + [160]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($1 + [20]) = [1]
	*(($1 + [36])) = [0]
	*(($1 + [52])) = [0]
	$4 = *($1 + [24])
	*(($3 = ($1 + [28]))) = $4
	$6 = *($1 + [40])
	*(($5 = ($1 + [44]))) = $6
	$7 = *($1 + [8])
	$8 = *($7)
	*($2 + [12]) = $8
	$9 = ($1 + [24])
	if ( ((int_32)$4 == (int_32)*(($1 + [32]))) ){ goto $label$2 }
	*($4) = $8
	*($3) = ($4 + [4])
	goto $label$1 
	
.LABEL $label$2
	CALL $139($9, ($2 + [12]))
	$6 = *($5)
	$7 = *(($1 + [8]))
	
.LABEL $label$1
	$4 = ($1 + [40])
	$8 = ((int_32)*($2 + [12]) % (int_32)[13])
	*(($3 = ($1 + [36]))) = ((int_32)(( [0] ? ($8 + [1]) : ((int_32)$8 > (int_32)[8]) ) + *($3)) % (int_32)[10])
	$3 = *($3)
	*(($3 = ($1 + [20]))) = ($3 + [1])
	$3 = *(($7 + ($3 << [2])))
	*($2 + [12]) = $3
	if ( ((int_32)$6 == (int_32)*(($1 + [48]))) ){ goto $label$4 }
	*($6) = $3
	*(($1 + [44])) = ($6 + [4])
	goto $label$3 
	
.LABEL $label$4
	CALL $139($4, ($2 + [12]))
	$7 = *(($1 + [8]))
	
.LABEL $label$3
	$3 = ((int_32)*($2 + [12]) % (int_32)[13])
	*(($6 = ($1 + [52]))) = ((int_32)(( [0] ? ($3 + [1]) : ((int_32)$3 > (int_32)[8]) ) + *($6)) % (int_32)[10])
	$6 = *($6)
	*(($6 = ($1 + [20]))) = ($6 + [1])
	$3 = *(($7 + ($6 << [2])))
	*($2 + [12]) = $3
	$8 = ($1 + [28])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)*(($1 + [32]))) ){ goto $label$6 }
	*($6) = $3
	*($8) = ($6 + [4])
	goto $label$5 
	
.LABEL $label$6
	CALL $139($9, ($2 + [12]))
	$7 = *(($1 + [8]))
	
.LABEL $label$5
	$3 = ((int_32)*($2 + [12]) % (int_32)[13])
	*(($6 = ($1 + [36]))) = ((int_32)(( [0] ? ($3 + [1]) : ((int_32)$3 > (int_32)[8]) ) + *($6)) % (int_32)[10])
	$6 = *($6)
	*(($6 = ($1 + [20]))) = ($6 + [1])
	$6 = *(($7 + ($6 << [2])))
	*($2 + [12]) = $6
	$3 = ($1 + [44])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)*(($1 + [48]))) ){ goto $label$8 }
	*($7) = $6
	*($3) = ($7 + [4])
	goto $label$7 
	
.LABEL $label$8
	CALL $139($4, ($2 + [12]))
	
.LABEL $label$7
	$6 = ((int_32)*($2 + [12]) % (int_32)[13])
	$7 = ((int_32)(( [0] ? ($6 + [1]) : ((int_32)$6 > (int_32)[8]) ) + *($7)) % (int_32)[10])
	*(($7 = ($1 + [52]))) = $7
	$6 = ($1 + [36])
	$3 = *($6)
	if ( ((int_32)$3 > (int_32)[7]) ){ goto $label$9 }
	if ( ((int_32)$7 > (int_32)[7]) ){ goto $label$9 }
	if ( ((int_32)$3 > (int_32)[5]) ){ goto $label$13 }
	$7 = *($7)
	*(($7 = ($1 + [20]))) = ($7 + [1])
	$8 = *((*(($1 + [8])) + ($7 << [2])))
	*($2 + [12]) = $8
	$3 = ($1 + [28])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)*(($1 + [32]))) ){ goto $label$12 }
	*($7) = $8
	$7 = ($7 + [4])
	*($3) = $7
	goto $label$11 
	
.LABEL $label$13
	if ( ((int_32)$7 <= (int_32)[5]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL $139($9, ($2 + [12]))
	$7 = *($3)
	
.LABEL $label$11
	$8 = ((int_32)*($2 + [12]) % (int_32)[13])
	*(($3 = ($1 + [36]))) = ((int_32)(( [0] ? ($8 + [1]) : ((int_32)$8 > (int_32)[8]) ) + *($3)) % (int_32)[10])
	$3 = ($1 + [24])
	CALL eosio_assert(((int_32)($7 - *($3)) == (int_32)[12]), [9736])
	$3 = ((int_32)*(*($3) + [8]) % (int_32)[13])
	$7 = *(($1 + [52]))
	if ( ((uint_32)$7 > (uint_32)[6]) ){ goto $label$9 }
	$3 = ( [0] ? ($3 + [1]) : ((int_32)$3 > (int_32)[8]) )
	goto $label$10 
	
.LABEL $label$17
	$7 = [3]
	if ( ((int_32)$3 != (int_32)[8]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$16
	$7 = [5]
	if ( ((int_32)($3 & [-4]) == (int_32)[4]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$15
	$7 = [6]
	if ( ((int_32)($3 & [-2]) == (int_32)[6]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$14
	$7 = [4]
	if ( ((uint_32)($3 + [-2]) >= (uint_32)[6]) ){ goto $label$9 }
	
.LABEL $label$10
	$7 = *($7)
	*(($7 = ($1 + [20]))) = ($7 + [1])
	$3 = *((*(($1 + [8])) + ($7 << [2])))
	*($2 + [12]) = $3
	$8 = ($1 + [44])
	$7 = *($8)
	if ( ((int_32)$7 == (int_32)*(($1 + [48]))) ){ goto $label$19 }
	*($7) = $3
	*($8) = ($7 + [4])
	goto $label$18 
	
.LABEL $label$19
	CALL $139($4, ($2 + [12]))
	
.LABEL $label$18
	$7 = ((int_32)*($2 + [12]) % (int_32)[13])
	$7 = ((int_32)(( [0] ? ($7 + [1]) : ((int_32)$7 > (int_32)[8]) ) + *($1)) % (int_32)[10])
	*(($1 = ($1 + [52]))) = $7
	
.LABEL $label$9
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$1 = *($6)
	if ( ((int_32)$1 <= (int_32)$7) ){ goto $label$21 }
	*($2 + [12]) = [0]
	CALL $85($0, ($2 + [12]))
	goto $label$20 
	
.LABEL $label$21
	if ( ((int_32)$1 >= (int_32)$7) ){ goto $label$22 }
	*($2 + [12]) = [1]
	CALL $85($0, ($2 + [12]))
	goto $label$20 
	
.LABEL $label$22
	*($2 + [12]) = [2]
	CALL $85($0, ($2 + [12]))
	
.LABEL $label$20
	$1 = *($9)
	if ( ((int_32)((int_32)*($1) % (int_32)[13]) != (int_32)((int_32)*($1 + [4]) % (int_32)[13])) ){ goto $label$23 }
	*($2 + [12]) = [3]
	$7 = ($0 + [4])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [8]))) ){ goto $label$24 }
	*($1) = [3]
	*($7) = ($1 + [4])
	goto $label$23 
	
.LABEL $label$24
	CALL $85($0, ($2 + [12]))
	
.LABEL $label$23
	$1 = *($4)
	if ( ((int_32)((int_32)*($1) % (int_32)[13]) != (int_32)((int_32)*($1 + [4]) % (int_32)[13])) ){ goto $label$26 }
	$1 = *(($0 + [8]))
	*($2 + [12]) = [4]
	$6 = ($0 + [4])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)$1) ){ goto $label$25 }
	*($7) = [4]
	*($6) = ($7 + [4])
	
.LABEL $label$26
	$global$0 = ($2 + [16])
	return 
	
.LABEL $label$25
	CALL $85($0, ($2 + [12]))
	$global$0 = ($2 + [16])
	$7
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $173($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [112])
	$global$0 = $2
	*(($2 + [104])) = [0]
	*((($2 + [72]) + [16])) = *(($1 + [16]))
	*((($2 + [72]) + [8])) = *(($1 + [8]))
	*($2 + [96]) = (int_64)0
	*($2 + [72]) = *($1)
	$3 = (*(($1 + [28])) - *($1 + [24]))
	$4 = ((int_32)$3 / (int_32)[12])
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*((($2 + [72]) + [24])) = $3
	*((($2 + [72]) + [28])) = $3
	*(($2 + [104])) = ($3 + ((int_32)$4 * (int_32)[12]))
	$5 = *(($1 + [28]))
	$4 = *(($1 + [24]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = CALL $163($3, $4)
	$3 = ($3 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$3 }
	*(($2 + [100])) = ($6 + [12])
	
.LABEL $label$2
	$7 = *(($1 + [72]))
	*((($2 + [32]) + [24])) = $7
	$8 = *(($1 + [64]))
	*((($2 + [32]) + [16])) = $8
	$9 = *(($1 + [56]))
	$10 = *($1 + [48])
	*(($2 + [16])) = $8
	*(($2 + [24])) = $7
	*($2 + [32]) = $10
	*($2 + [40]) = $9
	*($2) = $10
	*($2 + [8]) = $9
	CALL $153($0, ($2 + [72]), $2)
	$5 = *($2 + [96])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($2 + [100])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$8
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($2 + [96]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($2 + [112])
	return (unreachable)
	
.LABEL $label$1
	CALL $173((($2 + [72]) + [24]))
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [156]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	$5 = *($1)
	CALL $137($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9194])
	*(($3 = $4)) = [0]
	CALL $125($3, $1)
	$6 = *($3)
	if ( ($6 <= [513]) ){ goto $label$2 }
	$4 = CALL $185($6)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($3 + [4]) = $4
	*($3) = $4
	*($3 + [8]) = ($4 + $6)
	CALL $126($3, $1)
	CALL db_update_i64(*($1 + [160]), $2, $4, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $173(($0 + [16]))
	
.LABEL $label$1
	CALL $173(($0 + [28]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [9308])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$3 = *($1)
	$6 = *($1 + [4])
	$4 = ((int_32)($6 - $3) / (int_32)[24])
	if ( ((uint_32)$4 >= (uint_32)$8) ){ goto $label$4 }
	CALL $121($1, ($8 - $4))
	$6 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 <= (uint_32)$8) ){ goto $label$5 }
	$6 = ($3 + ((int_32)$8 * (int_32)[24]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	$7 = *($8)
	
.LOOP $label$6:
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[1]), [8779])
	CALL memcpy($3, *($8), [2])
	$7 = (*($8) + [2])
	*($8) = $7
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8779])
	CALL memcpy(($3 + [8]), *($8), [8])
	$7 = (*($8) + [8])
	*($8) = $7
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4) - $7) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [16])) = *($2 + [8])
	$7 = (*($8) + [8])
	*($8) = $7
	$3 = ($3 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $80 (int_64 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [176])
	$global$0 = $2
	*($2 + [104]) = [8356]
	*($2 + [108]) = CALL $182([8356])
	*($2 + [24]) = *($2 + [104])
	$3 = *(CALL $16(($2 + [112]), ($2 + [24])))
	*($2 + [88]) = [8363]
	*($2 + [92]) = CALL $182([8363])
	*($2 + [16]) = *($2 + [88])
	$4 = CALL $16(($2 + [96]), ($2 + [16]))
	*($2 + [72]) = [8376]
	*($2 + [76]) = CALL $182([8376])
	*($2 + [8]) = *($2 + [72])
	$5 = CALL $16(($2 + [80]), ($2 + [8]))
	*(($2 + [64])) = [0]
	*((($2 + [32]) + [16])) = *(($1 + [16]))
	*((($2 + [32]) + [8])) = *(($1 + [8]))
	*($2 + [56]) = (int_64)0
	*($2 + [32]) = *($1)
	$6 = (*(($1 + [28])) - *($1 + [24]))
	$7 = ((int_32)$6 / (int_32)[12])
	if ( ($6 == 0) ){ goto $label$2 }
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$1 }
	$8 = CALL _Znwj($6)
	*((($2 + [32]) + [24])) = $8
	*(($9 = (($2 + [32]) + [28]))) = $8
	*(($2 + [64])) = ($8 + ((int_32)$7 * (int_32)[12]))
	$1 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $163($8, $6)
	$8 = (*($9) + [12])
	*($9) = $8
	$6 = ($6 + [12])
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	*($2 + [120]) = *($4)
	*($2 + [128]) = *($5)
	*(($6 = CALL _Znwj([16]))) = $0
	*($6 + [8]) = $3
	$8 = ($6 + [16])
	*((($2 + [120]) + [24])) = $8
	*(($2 + [140])) = $8
	*($2 + [136]) = $6
	CALL $17((($2 + [120]) + [28]), ($2 + [32]))
	CALL $19(($2 + [160]), ($2 + [120]))
	$6 = *($2 + [160])
	CALL send_inline($6, (*($2 + [164]) - $6))
	$6 = *($2 + [160])
	if ( ($6 == 0) ){ goto $label$4 }
	*($2 + [164]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$4
	$6 = *($2 + [148])
	if ( ($6 == 0) ){ goto $label$5 }
	*(($2 + [152])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$6 = *($2 + [136])
	if ( ($6 == 0) ){ goto $label$6 }
	*(($2 + [140])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$9 = *($2 + [56])
	if ( ($9 == 0) ){ goto $label$7 }
	$1 = ($2 + [60])
	$8 = *($1)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($8 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($8 + [-4])))
	
.LABEL $label$11
	$8 = $6
	if ( ((int_32)$9 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($2 + [56]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $9
	
.LABEL $label$8
	*($1) = $9
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($2 + [176])
	return (unreachable)
	
.LABEL $label$1
	CALL $173((($2 + [32]) + [24]))
}

int_32 .FUNC $182 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $131($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $166($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $166($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $162($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8779])
	CALL memcpy(($1 + [8]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [156]) == (int_32)$0), [9999])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10044])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10094])
	$5 = ($3 + [-24])
	$7 = *($4)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$8 = ($5 + [24])
	CALL $146($5, $8)
	$3 = ($5 + [48])
	$5 = $8
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$8 }
	$3 = *(($0 + [28]))
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = $5
	
.LABEL $label$6
	$5 = ($3 + [-24])
	
.LOOP $label$9:
	$3 = CALL $122($5)
	$5 = ($5 + [-24])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [160]))
}

void .FUNC $144 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = [0]
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$9 = (*($2 + [4]) - *($2))
	if ( ($9 == 0) ){ goto $label$2 }
	$6 = int_32($9 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL _Znwj($9)
	$6 = ($8 + ($6 << [4]))
	*(($4 + [16])) = $6
	*($4 + [8]) = $8
	*($4 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($4 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($4 + [44])) = $7
	*(($4 + [48])) = $6
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $8
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	*($4 + [64]) = [0]
	CALL $125(($4 + [64]), $3)
	$8 = *($4 + [64])
	if ( ($8 == 0) ){ goto $label$5 }
	$2 = ($4 + [52])
	CALL $20($2, $8)
	$5 = *(($4 + [56]))
	$8 = *($2)
	goto $label$4 
	
.LABEL $label$5
	$8 = [0]
	
.LABEL $label$4
	*($4 + [68]) = $8
	*($4 + [64]) = $8
	*($4 + [72]) = $5
	CALL $126(($4 + [64]), $3)
	CALL $19(($4 + [64]), ($4 + [24]))
	$8 = *($4 + [64])
	CALL send_inline($8, (*($4 + [68]) - $8))
	$8 = *($4 + [64])
	if ( ($8 == 0) ){ goto $label$6 }
	*($4 + [68]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$6
	$8 = *($4 + [52])
	if ( ($8 == 0) ){ goto $label$7 }
	*(($4 + [56])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$7
	$8 = *($4 + [40])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$8
	$8 = *($4 + [8])
	if ( ($8 == 0) ){ goto $label$9 }
	*($4 + [12]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$9
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $173(($4 + [8]))
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $129($4, ($0 + [32]))
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [48]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [56]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [64]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [72]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [80]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($1)
	*($1) = [0]
	$3 = *($0)
	*($0) = $2
	if ( ($3 == 0) ){ goto $label$1 }
	$2 = *($3 + [136])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($3 + [140])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$2 = *($3 + [124])
	if ( ($2 == 0) ){ goto $label$3 }
	*(($3 + [128])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$2 = *($3 + [112])
	if ( ($2 == 0) ){ goto $label$4 }
	*(($3 + [116])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$4 = *($3 + [64])
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = ($3 + [68])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($2 + [-40])
	$7 = *(($2 + [-16]))
	if ( ($7 == 0) ){ goto $label$9 }
	*(($2 + [-12])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$2 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$8 }
	$2 = *(($3 + [64]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $4
	
.LABEL $label$6
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

void .FUNC $141 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	$6 = *($1)
	$7 = *(*(*($3) + [136]))
	if ( ((int_32)$7 == (int_32)[2]) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)[1]) ){ goto $label$3 }
	if ( $7 ){ goto $label$1 }
	$7 = ($1 + [8])
	goto $label$2 
	
.LABEL $label$4
	$7 = ($1 + [24])
	goto $label$2 
	
.LABEL $label$3
	$7 = ($1 + [16])
	
.LABEL $label$2
	*($7) = ((int_64)*($7) + (int_64)1)
	
.LABEL $label$1
	if ( (*(*($3 + [4])) == 0) ){ goto $label$5 }
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)1)
	
.LABEL $label$5
	if ( (*(*($3 + [8])) == 0) ){ goto $label$6 }
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)1)
	
.LABEL $label$6
	CALL eosio_assert([1], [9194])
	$4 = $4
	$3 = ($4 + [-48])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $4
	CALL $110($5, $1)
	CALL db_update_i64(*($1 + [52]), $2, $3, [48])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$5 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*(($3 + [40])) == (int_64)*(($1 + [24]))), [9758])
	$6 = ((int_64)*($1 + [16]) + (int_64)*($3 + [32]))
	*($1 + [16]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9801])
	CALL eosio_assert(((int_64)*($1 + [16]) < (int_64)4611686018427387904), [9820])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9194])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $108(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [2])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [2])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = [1073741823]
	if ( ((uint_32)int_32($5 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [1])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [2])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [2])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [2]) << [2]))
	return (unreachable)
	
.LABEL $label$1
	CALL $173($0)
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($1 + [8]) = ( [3] ? [2] : ((int_32)*(($1 + [68])) == (int_32)*($1 + [64])) )
	$3 = *($0)
	$4 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = (*(($3 + [180])) - *(($3 + [176])))
	if ( ($7 == 0) ){ goto $label$8 }
	$4 = int_32($7 >> [2])
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = CALL _Znwj($7)
	$4 = ($6 + ($4 << [2]))
	*(($2 + [8])) = $4
	*($2) = $6
	*($2 + [4]) = $6
	$7 = *(($3 + [176]))
	$5 = (*(($3 + [180])) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($6, $7, $5)
	$5 = ($6 + $5)
	*($2 + [4]) = $5
	
.LABEL $label$8
	$7 = *($1 + [112])
	if ( ($7 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = $6
	$7 = *($1 + [112])
	if ( $7 ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($1 + [120])
	goto $label$4 
	
.LABEL $label$5
	*(($1 + [116])) = $7
	CALL _ZdlPv($7)
	*(($7 = ($1 + [120]))) = [0]
	*($1 + [112 align=4]) = (int_64)0
	
.LABEL $label$4
	*($7) = $4
	*(($1 + [116])) = $5
	*(($1 + [112])) = $6
	$4 = [0]
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = (*(($3 + [196])) - *(($3 + [192])))
	if ( ($7 == 0) ){ goto $label$11 }
	$4 = int_32($7 >> [2])
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = CALL _Znwj($7)
	$4 = ($6 + ($4 << [2]))
	*(($2 + [8])) = $4
	*($2) = $6
	*($2 + [4]) = $6
	$5 = *(($3 + [192]))
	$3 = (*(($3 + [196])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($6, $5, $3)
	$5 = ($6 + $3)
	*($2 + [4]) = $5
	
.LABEL $label$11
	$3 = *($1 + [124])
	if ( ($3 == 0) ){ goto $label$9 }
	goto $label$2 
	
.LABEL $label$10
	$5 = $6
	$3 = *($1 + [124])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$9
	$3 = ($1 + [132])
	goto $label$1 
	
.LABEL $label$3
	CALL $173($2)
	
.LABEL $label$2
	*(($1 + [128])) = $3
	CALL _ZdlPv($3)
	*(($3 = ($1 + [132]))) = [0]
	*($1 + [124 align=4]) = (int_64)0
	
.LABEL $label$1
	*($3) = $4
	*(($1 + [128])) = $5
	*(($1 + [124])) = $6
	$3 = *($0 + [4])
	*($1 + [80]) = *($3)
	*(($1 + [104])) = *(($3 + [24]))
	*(($1 + [96])) = *(($3 + [16]))
	*(($1 + [88])) = *(($3 + [8]))
	$1 = *($0 + [8])
	$3 = ($1 + [136])
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$12 }
	CALL $143($3, *($1), *($1 + [4]))
	
.LABEL $label$12
	$global$0 = ($2 + [16])
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9308])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = int_32(($3 - $6) >> [4])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $130($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ($7 << [4]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($3 + [-16])
	$2 = *(($3 + [-12]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = ($0 + [8])
	
.LOOP $label$9:
	$2 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($6) - *($2)) > (uint_32)[1]), [8779])
	CALL memcpy($7, *($2), [2])
	*($2) = (*($2) + [2])
	CALL $131($0, ($7 + [4]))
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [576])
	$global$0 = $2
	*($2 + [496]) = *($1)
	CALL $179(($2 + [512]), [9375], ($2 + [496]))
	*($2 + [480]) = *($1 + [1])
	CALL $179((($2 + [512]) | [2]), [9375], ($2 + [480]))
	*($2 + [464]) = *($1 + [2])
	CALL $179((($2 + [512]) | [4]), [9375], ($2 + [464]))
	*($2 + [448]) = *($1 + [3])
	CALL $179((($2 + [512]) | [6]), [9375], ($2 + [448]))
	*($2 + [432]) = *($1 + [4])
	CALL $179((($2 + [512]) | [8]), [9375], ($2 + [432]))
	*($2 + [416]) = *($1 + [5])
	CALL $179((($2 + [512]) | [10]), [9375], ($2 + [416]))
	*($2 + [400]) = *($1 + [6])
	CALL $179((($2 + [512]) | [12]), [9375], ($2 + [400]))
	*($2 + [384]) = *($1 + [7])
	CALL $179((($2 + [512]) | [14]), [9375], ($2 + [384]))
	*($2 + [368]) = *($1 + [8])
	CALL $179(($2 + [528]), [9375], ($2 + [368]))
	*($2 + [352]) = *($1 + [9])
	CALL $179(($2 + [530]), [9375], ($2 + [352]))
	*($2 + [336]) = *($1 + [10])
	CALL $179(($2 + [532]), [9375], ($2 + [336]))
	*($2 + [320]) = *($1 + [11])
	CALL $179(($2 + [534]), [9375], ($2 + [320]))
	*($2 + [304]) = *($1 + [12])
	CALL $179(($2 + [536]), [9375], ($2 + [304]))
	*($2 + [288]) = *($1 + [13])
	CALL $179(($2 + [538]), [9375], ($2 + [288]))
	*($2 + [272]) = *($1 + [14])
	CALL $179(($2 + [540]), [9375], ($2 + [272]))
	*($2 + [256]) = *($1 + [15])
	CALL $179(($2 + [542]), [9375], ($2 + [256]))
	*($2 + [240]) = *($1 + [16])
	CALL $179(($2 + [544]), [9375], ($2 + [240]))
	*($2 + [224]) = *($1 + [17])
	CALL $179(($2 + [546]), [9375], ($2 + [224]))
	*($2 + [208]) = *($1 + [18])
	CALL $179(($2 + [548]), [9375], ($2 + [208]))
	*($2 + [192]) = *($1 + [19])
	CALL $179(($2 + [550]), [9375], ($2 + [192]))
	*($2 + [176]) = *($1 + [20])
	CALL $179(($2 + [552]), [9375], ($2 + [176]))
	*($2 + [160]) = *($1 + [21])
	CALL $179(($2 + [554]), [9375], ($2 + [160]))
	*($2 + [144]) = *($1 + [22])
	CALL $179(($2 + [556]), [9375], ($2 + [144]))
	*($2 + [128]) = *($1 + [23])
	CALL $179(($2 + [558]), [9375], ($2 + [128]))
	*($2 + [112]) = *($1 + [24])
	CALL $179(($2 + [560]), [9375], ($2 + [112]))
	*($2 + [96]) = *($1 + [25])
	CALL $179(($2 + [562]), [9375], ($2 + [96]))
	*($2 + [80]) = *($1 + [26])
	CALL $179(($2 + [564]), [9375], ($2 + [80]))
	*($2 + [64]) = *($1 + [27])
	CALL $179(($2 + [566]), [9375], ($2 + [64]))
	*($2 + [48]) = *($1 + [28])
	CALL $179(($2 + [568]), [9375], ($2 + [48]))
	*($2 + [32]) = *($1 + [29])
	CALL $179(($2 + [570]), [9375], ($2 + [32]))
	*($2 + [16]) = *($1 + [30])
	CALL $179(($2 + [572]), [9375], ($2 + [16]))
	*($2) = *($1 + [31])
	CALL $179(($2 + [574]), [9375], $2)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	$1 = CALL $182(($2 + [512]))
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($1 << [1])
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$4 = (($1 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $3
	*($0 + [4]) = $1
	
.LABEL $label$3
	CALL memcpy($3, ($2 + [512]), $1)
	
.LABEL $label$2
	*(($3 + $1)) = [0]
	$global$0 = ($2 + [576])
	return (unreachable)
	
.LABEL $label$1
	CALL $162($0)
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8779])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [8779])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [8779])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	$4 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *(($0 + [8]))), [9308])
	$6 = ($0 + [4])
	$3 = *($6)
	$2 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($2 & [128]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)*($7) != (int_32)$3), [8779])
	$3 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($3), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($4 <= *($7)), [9308])
	$4 = *($3)
	$2 = *($4)
	$4 = ($4 + [1])
	*($3) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)))
	$6 = ($6 + [7])
	if ( ($2 & [128]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9308])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$3 = *($1 + [4])
	$2 = ((int_32)($3 - $6) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $132($1, ($7 - $2))
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$6 = ($6 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = *(($3 + [-12]))
	if ( ($7 == 0) ){ goto $label$8 }
	*(($3 + [-8])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = ($3 + [-40])
	$2 = *(($3 + [-24]))
	if ( ($2 == 0) ){ goto $label$9 }
	*(($3 + [-20])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$3 = $7
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $6
	$3 = $6
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$10:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($7)) > (uint_32)[7]), [8779])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($6) - $5) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $131(CALL $133($0, ($2 + [16])), ($2 + [28]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9308])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $151($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $149($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$3 = (*(($1 + [12])) - *($1 + [8]))
	$4 = ((int_32)$3 / (int_32)[12])
	$5 = *($1)
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$1 }
	$3 = CALL _Znwj($3)
	*(($2 + [8])) = ($3 + ((int_32)$4 * (int_32)[12]))
	*($2) = $3
	*($2 + [4]) = $3
	$1 = *(($1 + [12]))
	$4 = *(($1 + [8]))
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	$6 = CALL $163($3, $4)
	$3 = ($3 + [12])
	$4 = ($4 + [12])
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$3 }
	*($2 + [4]) = ($6 + [12])
	
.LABEL $label$2
	CALL $152($0, $5, $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	$4 = *($2 + [4])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$8
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$7 }
	$3 = *($2)
	goto $label$5 
	
.LABEL $label$6
	$3 = $1
	
.LABEL $label$5
	*($2 + [4]) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $173($2)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0)
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($5 + [12])) - *($5 + [8])) / (int_32)[12]))
	$7 = *($1)
	$0 = *($7 + [4])
	$4 = ($7 + [4])
	
.LOOP $label$1:
	$1 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($2 + [15]) = (($3) << [7]) | ($1 & [127]))
	CALL eosio_assert(((int_32)(*(($7 + [8])) - $0) > (int_32)[0]), [8504])
	CALL memcpy(*($4), ($2 + [15]), [1])
	$0 = (*($4) + [1])
	*($4) = $0
	if ( $3 ){ goto $label$1 }
	$0 = *(($5 + [12]))
	$4 = *(($5 + [8]))
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $135($7, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [156]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	*($1 + [8]) = [1]
	$5 = *($1)
	CALL eosio_assert([1], [9194])
	*(($6 = $4)) = [0]
	CALL $125($6, $1)
	$7 = *($6)
	if ( ($7 <= [513]) ){ goto $label$2 }
	$4 = CALL $185($7)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $7)
	CALL $126($6, $1)
	CALL db_update_i64(*($1 + [160]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [16])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[12])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$4 = ($6 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$8
	$6 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[12])
	$4 = ($1 + ((int_32)$7 * (int_32)[12]))
	$6 = ( $4 ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $164($5, $1)
	$5 = ($5 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$5 = *($1)
	
.LOOP $label$12:
	CALL $163($5, $4)
	$5 = (*($1) + [12])
	*($1) = $5
	$4 = ($4 + [12])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($4 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$15
	$4 = $1
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = [357913941]
	$4 = ((int_32)$4 / (int_32)[12])
	if ( ((uint_32)$4 > (uint_32)[178956969]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[12])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	CALL $163($5, $1)
	$5 = (*($4) + [12])
	*($4) = $5
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $173($0)
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [208])
	$global$0 = $2
	$3 = [0]
	*((($2 + [64]) + [32])) = [0]
	*((($2 + [64]) + [8])) = *(($1 + [16]))
	*((($2 + [64]) + [16])) = *(($1 + [24]))
	*($2 + [88]) = (int_64)0
	*($2 + [64]) = *($1 + [8])
	$4 = (*(($1 + [36])) - *(($1 + [32])))
	$5 = ((int_32)$4 / (int_32)[24])
	$6 = *($1)
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$4 = CALL _Znwj($4)
	*((($2 + [64]) + [24])) = $4
	*(($7 = ($2 + [92]))) = $4
	*((($2 + [64]) + [32])) = ($4 + ((int_32)$5 * (int_32)[24]))
	$5 = *(($1 + [32]))
	$3 = (*(($1 + [36])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($4, $5, $3)
	$3 = ($4 + ((int_32)((uint_32)$3 / (uint_32)[24]) * (int_32)[24]))
	*($7) = $3
	goto $label$4 
	
.LABEL $label$6
	$4 = [0]
	$8 = [0]
	$7 = [0]
	goto $label$3 
	
.LABEL $label$5
	$3 = $4
	
.LABEL $label$4
	$8 = $4
	$7 = $4
	
.LABEL $label$3
	*(($5 = (($2 + [48]) + [8]))) = *(($1 + [56]))
	*(($9 = (($2 + [32]) + [8]))) = *(($1 + [72]))
	*($2 + [48]) = *($1 + [48])
	*($2 + [32]) = *($1 + [64])
	$10 = *($1 + [80])
	*((($2 + [120]) + [8])) = *($9)
	*((($2 + [104]) + [8])) = *($5)
	*($2 + [120]) = *($2 + [32])
	*($2 + [104]) = *($2 + [48])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$5 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($5) + $1))
	
.LABEL $label$7
	*(($2 + [200])) = [0]
	*((($2 + [168]) + [16])) = *((($2 + [64]) + [16]))
	*((($2 + [168]) + [8])) = *((($2 + [64]) + [8]))
	*($2 + [168]) = *($2 + [64])
	*($2 + [192]) = (int_64)0
	$0 = ($3 - $7)
	$7 = ((int_32)$0 / (int_32)[24])
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$1 }
	$0 = CALL _Znwj($0)
	*((($2 + [168]) + [24])) = $0
	*(($9 = ($2 + [196]))) = $0
	*(($2 + [200])) = ($0 + ((int_32)$7 * (int_32)[24]))
	$3 = ($3 - $8)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $4, $3)
	*($9) = ($0 + ((int_32)((uint_32)$3 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$8
	$11 = *((($2 + [104]) + [8]))
	*((($2 + [152]) + [8])) = $11
	$12 = *((($2 + [120]) + [8]))
	*((($2 + [136]) + [8])) = $12
	*((($2 + [16]) + [8])) = $11
	*(($2 + [8])) = $12
	$11 = *($2 + [104])
	*($2 + [152]) = $11
	$12 = *($2 + [120])
	*($2 + [136]) = $12
	*($2 + [16]) = $11
	*($2) = $12
	CALL void $5((int_32 $6), (int_64 ($2 + [168])), (int_32 ($2 + [16])), (int_32 $2), (int_32 $10), (int_64 $1))
	$1 = *($2 + [192])
	if ( ($1 == 0) ){ goto $label$9 }
	*(($2 + [196])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$1 = *($2 + [88])
	if ( ($1 == 0) ){ goto $label$10 }
	*(($2 + [92])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$2
	CALL $173((($2 + [64]) + [24]))
	
.LABEL $label$1
	CALL $173((($2 + [168]) + [24]))
	(unreachable)
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $94 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	*($0) = *($1)
	$2 = *(($1 + [8]))
	$3 = *(($1 + [16]))
	$4 = *(($1 + [24]))
	$5 = *(($1 + [32]))
	$6 = *(($1 + [40]))
	$7 = *(($1 + [48]))
	$8 = *(($1 + [56]))
	*(($0 + [68])) = (int_64)0
	*(($0 + [56])) = $8
	*(($0 + [48])) = $7
	*(($0 + [40])) = $6
	*(($0 + [32])) = $5
	*(($0 + [24])) = $4
	*(($0 + [16])) = $3
	*(($0 + [8])) = $2
	*($0 + [64]) = [0]
	$9 = (*(($1 + [68])) - *($1 + [64]))
	$10 = ((int_32)$9 / (int_32)[40])
	if ( ($9 == 0) ){ goto $label$6 }
	if ( ((uint_32)$10 >= (uint_32)[107374183]) ){ goto $label$4 }
	$9 = CALL _Znwj($9)
	*(($11 = ($0 + [68]))) = $9
	*(($0 + [72])) = ($9 + ((int_32)$10 * (int_32)[40]))
	*(($0 + [64])) = $9
	$12 = *(($1 + [68]))
	$10 = *(($1 + [64]))
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$6 }
	
.LOOP $label$7:
	*($9) = *($10)
	*(($9 + [16])) = *(($10 + [16]))
	*(($9 + [8])) = *(($10 + [8]))
	*($9 + [24]) = [0]
	*(($13 = ($9 + [28]))) = (int_64)0
	$15 = ($10 + [24])
	$14 = ($10 + [28])
	$16 = (*($14) - *($15))
	$17 = ((int_32)$16 / (int_32)[24])
	if ( ($16 == 0) ){ goto $label$8 }
	$18 = ($9 + [24])
	if ( ((uint_32)$17 >= (uint_32)[178956971]) ){ goto $label$5 }
	$16 = CALL _Znwj($16)
	*($18) = $16
	*(($9 + [32])) = ($16 + ((int_32)$17 * (int_32)[24]))
	*($13) = $16
	$17 = *($15)
	$9 = (*($14) - $17)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($16, $17, $9)
	*($13) = (*($13) + ((int_32)((uint_32)$9 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$8
	$9 = (*($11) + [40])
	*($11) = $9
	$10 = ($10 + [40])
	if ( ((int_32)$12 != (int_32)$10) ){ goto $label$7 }
	
.LABEL $label$6
	*($0 + [80]) = *($1 + [80])
	$2 = *(($1 + [88]))
	$3 = *(($1 + [96]))
	$4 = *(($1 + [104]))
	*(($0 + [116])) = (int_64)0
	*(($0 + [104])) = $4
	*(($0 + [96])) = $3
	*(($0 + [88])) = $2
	*($0 + [112]) = [0]
	$9 = (*(($1 + [116])) - *($1 + [112]))
	if ( ($9 == 0) ){ goto $label$9 }
	$10 = int_32($9 >> [2])
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$9 = CALL _Znwj($9)
	*(($0 + [112])) = $9
	*(($0 + [120])) = ($9 + ($10 << [2]))
	*(($10 = ($0 + [116]))) = $9
	$13 = *(($1 + [112]))
	$16 = (*(($1 + [116])) - $13)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($9, $13, $16)
	*($10) = (*($10) + $16)
	
.LABEL $label$9
	*($0 + [124 align=4]) = (int_64)0
	*(($0 + [132])) = [0]
	$9 = (*(($1 + [128])) - *($1 + [124]))
	if ( ($9 == 0) ){ goto $label$10 }
	$10 = int_32($9 >> [2])
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$9 = CALL _Znwj($9)
	*(($0 + [124])) = $9
	*(($0 + [132])) = ($9 + ($10 << [2]))
	*(($10 = ($0 + [128]))) = $9
	$13 = *(($1 + [124]))
	$16 = (*(($1 + [128])) - $13)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($9, $13, $16)
	*($10) = (*($10) + $16)
	
.LABEL $label$10
	*($0 + [136 align=4]) = (int_64)0
	*(($0 + [144])) = [0]
	$9 = (*(($1 + [140])) - *($1 + [136]))
	if ( ($9 == 0) ){ goto $label$11 }
	$10 = int_32($9 >> [2])
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$9 = CALL _Znwj($9)
	*(($0 + [136])) = $9
	*(($0 + [144])) = ($9 + ($10 << [2]))
	*(($10 = ($0 + [140]))) = $9
	$13 = *(($1 + [136]))
	$16 = (*(($1 + [140])) - $13)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($9, $13, $16)
	*($10) = (*($10) + $16)
	
.LABEL $label$11
	*($0 + [148 align=4]) = *($1 + [148 align=4])
	return $0
	
.LABEL $label$5
	CALL $173($18)
	
.LABEL $label$4
	CALL $173(($0 + [64]))
	
.LABEL $label$3
	CALL $173(($0 + [112]))
	
.LABEL $label$2
	CALL $173(($0 + [124]))
	
.LABEL $label$1
	CALL $173(($0 + [136]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $95 (int_64 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = CALL _Znwj([16]))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	*(($3 + [16])) = *(($2 + [16]))
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [32])) = *(($2 + [32]))
	*(($3 + [40])) = *(($2 + [40]))
	*(($3 + [48])) = *(($2 + [48]))
	*(($3 + [56])) = *(($2 + [56]))
	*($3 + [160]) = $4
	$4 = ($4 + [16])
	*($3 + [168]) = $4
	*($3 + [164]) = $4
	*($3) = *($2)
	*($3 + [8]) = *(($2 + [8]))
	$4 = ($2 + [72])
	$1 = *($4)
	*($4) = [0]
	*(($3 + [72])) = $1
	$5 = *($2 + [64 align=4])
	*($2 + [64 align=4]) = (int_64)0
	*(($3 + [88])) = *(($2 + [88]))
	*(($3 + [96])) = *(($2 + [96]))
	*(($3 + [104])) = *(($2 + [104]))
	$4 = ($2 + [120])
	$1 = *($4)
	*($4) = [0]
	*(($3 + [120])) = $1
	$6 = *($2 + [112 align=4])
	*($2 + [112 align=4]) = (int_64)0
	*($3 + [64]) = $5
	*($3 + [80]) = *($2 + [80])
	*($3 + [112]) = $6
	*($3 + [124]) = *($2 + [124])
	$4 = ($2 + [128])
	*(($3 + [128])) = *($4)
	*($2 + [124]) = [0]
	*($4) = [0]
	$4 = ($2 + [132])
	$1 = *($4)
	*($4) = [0]
	*(($3 + [132])) = $1
	*($3 + [136]) = *($2 + [136])
	$4 = ($2 + [140])
	*(($7 = ($3 + [140]))) = *($4)
	*($2 + [136]) = [0]
	*($4) = [0]
	$4 = ($2 + [144])
	$1 = *($4)
	*($4) = [0]
	*(($3 + [144])) = $1
	*($3 + [148 align=4]) = *($2 + [148 align=4])
	CALL $144($0, (int_64)4147959693476866960, ($3 + [160]), $3)
	$2 = *($3 + [136])
	if ( ($2 == 0) ){ goto $label$1 }
	*($7) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$2 = *($3 + [124])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($3 + [128])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$2 = *($3 + [112])
	if ( ($2 == 0) ){ goto $label$3 }
	*(($3 + [116])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$7 = *($3 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	$8 = ($3 + [68])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$4 = ($2 + [-40])
	$1 = *(($2 + [-16]))
	if ( ($1 == 0) ){ goto $label$8 }
	*(($2 + [-12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$8
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$2 = *(($3 + [64]))
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($8) = $7
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$2 = *($3 + [160])
	if ( ($2 == 0) ){ goto $label$9 }
	*($3 + [164]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($3 + [176])
}

void .FUNC $96 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [156]) == (int_32)$3), [8705])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [40])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $66($3, $6)
	CALL eosio_assert(((int_32)*($7 + [156]) == (int_32)$3), [8705])
	
.LABEL $label$2
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9969])
	$6 = CALL db_next_i64(*($7 + [160]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $66($3, $6)
	
.LABEL $label$6
	CALL $145($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $81($4, ($0 + [32]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [56])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy(($0 + [64]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [72])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy(($0 + [80]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $90 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*((($4 + [24]) + [24])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = [32]
	$5 = *(($3 + [32]))
	$2 = *(($3 + [36]))
	$6 = ($2 - $5)
	$0 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[24]))
	$8 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$5 }
	$7 = ((((int_32)((uint_32)($6 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $7) + [18])
	
.LABEL $label$5
	$7 = ($7 + [40])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL $20($8, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	$7 = [0]
	
.LABEL $label$6
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $147(($4 + [72]), ($4 + [64]))
	CALL $19(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$8 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$11 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$11
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $173(($4 + [8]))
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [156]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	$6 = *($1)
	$7 = *(*($3))
	if ( (int_64)($7 == 0) ){ goto $label$1 }
	*($1 + [48]) = ((int_64)*($1 + [48]) + (int_64)$7)
	
.LABEL $label$1
	$8 = *($1 + [64])
	$9 = *(*($3 + [4]))
	if ( ($9 == 0) ){ goto $label$4 }
	$3 = ($8 + ((int_32)$9 * (int_32)[40]))
	$10 = *(($1 + [68]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$5 }
	$11 = ((int_32)$9 * (int_32)[40])
	$12 = ($10 + ((int_32)([0] - $9) * (int_32)[40]))
	
.LOOP $label$6:
	$3 = ($8 + $11)
	*($8) = *($3)
	*(($8 + [16])) = *(($3 + [16]))
	*(($8 + [8])) = *(($3 + [8]))
	$10 = ($8 + [24])
	$9 = *($10)
	if ( ($9 == 0) ){ goto $label$8 }
	*(($8 + [28])) = $9
	CALL _ZdlPv($9)
	*(($13 = ($8 + [32]))) = [0]
	*($8 + [24 align=4]) = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	$13 = ($8 + [32])
	
.LABEL $label$7
	$9 = ($3 + [24])
	*($10) = *($9)
	$10 = ($3 + [32])
	*($13) = *($10)
	*(($3 + [28])) = [0]
	*($10) = [0]
	*($9) = [0]
	$8 = ($8 + [40])
	if ( ((int_32)$12 != (int_32)$8) ){ goto $label$6 }
	$3 = *(($1 + [68]))
	
.LABEL $label$5
	$10 = $8
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = ($3 + [-40])
	$9 = *(($3 + [-16]))
	if ( ($9 == 0) ){ goto $label$11 }
	*(($3 + [-12])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	$3 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$10 }
	
.LABEL $label$9
	*(($1 + [68])) = $10
	if ( ((int_32)$10 != (int_32)*(($1 + [64]))) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)*(($1 + [68])) != (int_32)$8) ){ goto $label$2 }
	
.LABEL $label$3
	*($1 + [8]) = [3]
	
.LABEL $label$2
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9194])
	*($5) = [0]
	CALL $125($5, $1)
	$3 = *($5)
	if ( ($3 <= [513]) ){ goto $label$13 }
	$8 = CALL $185($3)
	goto $label$12 
	
.LABEL $label$13
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$12
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($8 + $3)
	CALL $126($5, $1)
	CALL db_update_i64(*($1 + [160]), $2, $8, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$16 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $188($8)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$14 }
	
.LABEL $label$15
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$14
	$global$0 = ($5 + [16])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	$5 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [40]))), [9758])
	$6 = ((int_64)*($1 + [32]) + (int_64)*($3))
	*($1 + [32]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9801])
	CALL eosio_assert(((int_64)*($1 + [32]) < (int_64)4611686018427387904), [9820])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9194])
	*($4 + [56]) = ($4 + [48])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $108(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [52]), $2, $4, [48])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [156]) == (int_32)$0), [9097])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [9143])
	*($1 + [8]) = [4]
	$5 = *($1)
	CALL eosio_assert([1], [9194])
	*(($6 = $4)) = [0]
	CALL $125($6, $1)
	$7 = *($6)
	if ( ($7 <= [513]) ){ goto $label$2 }
	$4 = CALL $185($7)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($6 + [4]) = $4
	*($6) = $4
	*($6 + [8]) = ($4 + $7)
	CALL $126($6, $1)
	CALL db_update_i64(*($1 + [160]), $2, $4, $7)
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($4)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($6 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($6 + [16])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	*(($6 = ($2 + ((int_32)$3 * (int_32)[40])))) = *($1)
	*($6 + [24 align=4]) = (int_64)0
	*(($6 + [16])) = *(($1 + [16]))
	*(($6 + [8])) = *(($1 + [8]))
	*(($7 = ($6 + [32]))) = [0]
	$3 = (*(($1 + [28])) - *($1 + [24]))
	$4 = ((int_32)$3 / (int_32)[24])
	if ( ($3 == 0) ){ goto $label$6 }
	$8 = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$5 }
	$3 = CALL _Znwj($3)
	*($8) = $3
	*(($8 = ($6 + [28]))) = $3
	*($7) = ($3 + ((int_32)$4 * (int_32)[24]))
	$4 = *(($1 + [24]))
	$1 = (*(($1 + [28])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($3, $4, $1)
	*($8) = (*($8) + ((int_32)((uint_32)$1 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$6
	$9 = ($2 + ((int_32)$5 * (int_32)[40]))
	$10 = ($6 + [40])
	$1 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$8 = ($1 - $7)
	$2 = [0]
	
.LOOP $label$9:
	$5 = ($7 + $2)
	*((($1 = ($6 + $2)) + [-24])) = *(($5 + [-24]))
	*(($1 + [-32])) = *(($5 + [-32]))
	*(($1 + [-40])) = *(($5 + [-40]))
	*(($3 = ($1 + [-16]))) = (int_64)0
	*(($1 = ($1 + [-8]))) = [0]
	$4 = ($5 + [-16])
	*($3) = *($4)
	$5 = ($5 + [-8])
	*($1) = *($5)
	*($5) = [0]
	*($4) = (int_64)0
	$2 = ($2 + [-40])
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$9 }
	$6 = ($6 + $2)
	$1 = *(($0 + [4]))
	$3 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($1 + [-40])
	$2 = *(($1 + [-16]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [-12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$1 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$13 }
	CALL _ZdlPv($3)
	
.LABEL $label$13
	return (unreachable)
	
.LABEL $label$5
	CALL $173($8)
	(unreachable)
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [2])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$6 = int_32($7 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [2]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $173($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [2])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [2]))
	$5 = ($4 + [4])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $173($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$8 = ($7 + ($6 << [4]))
	$9 = ($7 + ($3 << [4]))
	$6 = $9
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$10 = ($9 + ($1 << [4]))
	$6 = *($0)
	$11 = ($0 + [4])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$10 }
	$13 = (($3 + [-1]) - uint_32((($12 + [-16]) - $6) >> [4]))
	$14 = ($6 - $12)
	$6 = [0]
	
.LOOP $label$11:
	*(($3 = (($2 = ($9 + $6)) + [-12]))) = (int_64)0
	*(($4 = ($2 + [-4]))) = [0]
	$1 = ($12 + $6)
	$5 = ($1 + [-12])
	*($3) = *($5)
	$3 = ($1 + [-4])
	*($4) = *($3)
	*(($2 + [-16])) = *(($1 + [-16]))
	*($3) = [0]
	*($5) = (int_64)0
	$6 = ($6 + [-16])
	if ( ((int_32)$14 != (int_32)$6) ){ goto $label$11 }
	$9 = ($7 + ($13 << [4]))
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$3 = $6
	
.LABEL $label$9
	*($0) = $9
	*($11) = $10
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($6 + [-16])
	$1 = *(($6 + [-12]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-8])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9308])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $20($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8779])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[40])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[40]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$7 = ($2 + ((int_32)$6 * (int_32)[40]))
	$8 = ($2 + ((int_32)$3 * (int_32)[40]))
	$6 = $8
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [32])) = (int_64)0
	$6 = ($6 + [40])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$9 = ($8 + ((int_32)$1 * (int_32)[40]))
	$6 = *($0)
	$10 = *(($0 + [4]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$9 }
	$11 = ($6 - $10)
	$1 = [0]
	
.LOOP $label$10:
	$2 = ($10 + $1)
	*((($6 = ($8 + $1)) + [-32])) = *(($2 + [-32]))
	*(($6 + [-40])) = *(($2 + [-40]))
	*(($3 = ($6 + [-24]))) = (int_64)0
	*(($4 = ($6 + [-16]))) = [0]
	$5 = ($2 + [-24])
	*($3) = *($5)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($6 + [-12]))) = (int_64)0
	*(($6 = ($6 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($5) = (int_64)0
	$2 = ($2 + [-4])
	*($6) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$10 }
	$8 = ($8 + $1)
	$6 = *(($0 + [4]))
	$3 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$3 = $6
	
.LABEL $label$8
	*($0) = $8
	*(($0 + [4])) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = *(($6 + [-12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($6 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$13
	$2 = ($6 + [-40])
	$1 = *(($6 + [-24]))
	if ( ($1 == 0) ){ goto $label$14 }
	*(($6 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$6 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9308])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $134($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8779])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $173($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8504])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8504])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$5 = *($0 + [12])
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*($5 + [4]) - *($5)) / (int_32)[12]))
	$7 = *($1)
	$1 = *($7 + [4])
	$0 = ($7 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($2 + [15]) = (($3) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($7 + [8])) - $1) > (int_32)[0]), [8504])
	CALL memcpy(*($0), ($2 + [15]), [1])
	$1 = (*($0) + [1])
	*($0) = $1
	if ( $3 ){ goto $label$1 }
	$1 = *(($5 + [4]))
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $135($7, $0)
	$0 = ($0 + [12])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	*($1 + [16]) = (int_64))(*($1 + [16]) - *(*($0)))
	*($1 + [32]) = ((int_64)*($1 + [32]) + (int_64)*(*($0 + [4])))
	$2 = *($0 + [8])
	$0 = *(($1 + [68]))
	if ( ((int_32)$0 == (int_32)*(($1 + [72]))) ){ goto $label$2 }
	*($0) = *($2)
	$3 = *(($2 + [8]))
	$4 = *(($2 + [16]))
	*(($0 + [28])) = (int_64)0
	*(($0 + [16])) = $4
	*(($0 + [8])) = $3
	*($0 + [24]) = [0]
	$5 = (*(($2 + [28])) - *($2 + [24]))
	$6 = ((int_32)$5 / (int_32)[24])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$1 }
	$5 = CALL _Znwj($5)
	*(($0 + [24])) = $5
	*(($0 + [32])) = ($5 + ((int_32)$6 * (int_32)[24]))
	*(($0 = ($0 + [28]))) = $5
	$6 = *(($2 + [24]))
	$2 = (*(($2 + [28])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $6, $2)
	*($0) = (*($0) + ((int_32)((uint_32)$2 / (uint_32)[24]) * (int_32)[24]))
	
.LABEL $label$3
	*(($1 = ($1 + [68]))) = (*($1) + [40])
	return 
	
.LABEL $label$2
	CALL $138(($1 + [64]), $2)
	return (unreachable)
	
.LABEL $label$1
	CALL $173(($0 + [24]))
}

int_32 .FUNC $181 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $176([14], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8504])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[1]), [8504])
	CALL memcpy(*($6), $7, [2])
	$4 = (*($6) + [2])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8504])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	*($2) = *(($7 + [16]))
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8504])
	CALL memcpy(*($6), $2, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8504])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[3]), [8504])
	$7 = ($0 + [4])
	CALL memcpy(*($7), $6, [4])
	$4 = (*($7) + [4])
	*($7) = $4
	$6 = ($6 + [4])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8756])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $185($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[15]), [8779])
	CALL memcpy($5, $2, [16])
	*($5 + [20]) = $1
	*($3 + [40]) = $5
	*($3 + [24]) = *(($5 + [8]))
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [40]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(($0 + [24]), ($3 + [40]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [40])
	*($3 + [40]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $122 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($1 + [136])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($1 + [140])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$2 = *($1 + [124])
	if ( ($2 == 0) ){ goto $label$3 }
	*(($1 + [128])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$3
	$2 = *($1 + [112])
	if ( ($2 == 0) ){ goto $label$4 }
	*(($1 + [116])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$3 = *($1 + [64])
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = ($1 + [68])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($2 + [-40])
	$6 = *(($2 + [-16]))
	if ( ($6 == 0) ){ goto $label$9 }
	*(($2 + [-12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$2 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$8 }
	$2 = *(($1 + [64]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($4) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	CALL _ZdlPv($1)
	
.LABEL $label$1
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[24])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$3 }
	$3 = [178956970]
	$2 = ((int_32)($2 - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*($3 + [8]) = (int_64)0
	*(($3 + [16])) = (int_64)0
	$3 = (*($0) + [24])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $173($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[24]))
	$5 = ($2 + ((int_32)$5 * (int_32)[24]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	$3 = ($3 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[24]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$4 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($3 + [32]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($4) = [0]
	$3 = (*($2) + [40])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $173($0)
	
.LABEL $label$2
	$7 = ($4 + ((int_32)$3 * (int_32)[40]))
	$5 = ($4 + ((int_32)$5 * (int_32)[40]))
	$3 = $5
	
.LOOP $label$8:
	*(($2 = ($3 + [32]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$8 = ($4 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$10 }
	$10 = ($3 - $9)
	$2 = [0]
	
.LOOP $label$11:
	$1 = ($9 + $2)
	*((($3 = ($5 + $2)) + [-24])) = *(($1 + [-24]))
	*(($3 + [-32])) = *(($1 + [-32]))
	*(($3 + [-40])) = *(($1 + [-40]))
	*(($4 = ($3 + [-16]))) = (int_64)0
	*(($3 = ($3 + [-8]))) = [0]
	$6 = ($1 + [-16])
	*($4) = *($6)
	$1 = ($1 + [-8])
	*($3) = *($1)
	*($1) = [0]
	*($6) = (int_64)0
	$2 = ($2 + [-40])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$11 }
	$5 = ($5 + $2)
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$4 = $3
	
.LABEL $label$9
	*($0) = $5
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($3 + [-40])
	$2 = *(($3 + [-16]))
	if ( ($2 == 0) ){ goto $label$14 }
	*(($3 + [-12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$14
	$3 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$1 }
	CALL _ZdlPv($4)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8756])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $185($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	CALL $148(($3 + [32]), $5)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $4(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [56]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $127($0, ($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[31]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [32])
	*($0 + [4]) = (*($0 + [4]) + [32])
	$0 = CALL $128(CALL $128(CALL $128($0, ($1 + [112])), ($1 + [124])), ($1 + [136]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [148]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [152]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = (*($0) + [58])
	*($0) = $2
	$4 = *($1 + [64])
	$3 = *(($1 + [68]))
	$5 = (CASTING uint_64)(uint_32 ((int_32)($3 - $4) / (int_32)[40]))
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$2 = ($2 + [24])
	$7 = *($4 + [24])
	$6 = *(($4 + [28]))
	$8 = ($6 - $7)
	$5 = (CASTING uint_64)(uint_32 ((int_32)$8 / (int_32)[24]))
	
.LOOP $label$4:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$2 = ((((int_32)((uint_32)($8 + [-24]) / (uint_32)[24]) * (int_32)[18]) + $2) + [18])
	
.LABEL $label$5
	$4 = ($4 + [40])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	*($0) = $2
	
.LABEL $label$2
	$2 = ($2 + [32])
	*($0) = $2
	$6 = *($1 + [112])
	$4 = *(($1 + [116]))
	$7 = ($4 - $6)
	$5 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$7 }
	$2 = (($7 & [-4]) + $2)
	
.LABEL $label$7
	*($0) = $2
	$6 = *($1 + [124])
	$4 = *(($1 + [128]))
	$7 = ($4 - $6)
	$5 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$8 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$9 }
	$2 = (($7 & [-4]) + $2)
	
.LABEL $label$9
	*($0) = $2
	$6 = *($1 + [136])
	$4 = *(($1 + [140]))
	$7 = ($4 - $6)
	$5 = (CASTING uint_64)(uint_32 int_32($7 >> [2]))
	
.LOOP $label$10:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$10 }
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$11 }
	$2 = (($7 & [-4]) + $2)
	
.LABEL $label$11
	*($0) = ($2 + [8])
	return $0
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	*($1 + [8]) = [0]
	*($1) = ((int_64)*(*(*($0) + [4]) + [16]) + (int_64)1)
	$2 = *($0 + [4])
	*(($1 + [24])) = *(($2 + [8]))
	*($1 + [16]) = *($2)
	$2 = CALL $182([8835])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8839])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8834]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8884])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [8937])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $6
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$3 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [8986])
	*(($1 + [40])) = $5
	*($1 + [32]) = (int_64)0
	$2 = CALL $182([8835])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8839])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$3 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($2 + [8834]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8884])
	
.LABEL $label$17
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$5 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [8937])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$6 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$3 = $6
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$3 = $6
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$22 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$4 = [0]
	
.LABEL $label$18
	CALL eosio_assert($4, [8986])
	*(($1 + [56])) = $5
	*($1 + [48]) = (int_64)0
	$2 = *($0 + [8])
	*($1 + [148]) = (*(*($0 + [12])) + *($2))
	*($1 + [152]) = (*(*($0 + [16])) + *($2))
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $99($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $20($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $100($2, $1)
	CALL $102(CALL $101(CALL $101($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8510])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8620])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8553])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8620])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [24]
	$4 = ($1 + [24])
	$6 = *($1 + [24])
	$5 = *(($1 + [28]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($5 - $6) / (int_32)[12]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = *($6)
	$9 = ( *($6 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ([0] - ($9 + $3))
	$7 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$6:
	$8 = ($8 + [-1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	$3 = ([0] - $8)
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	$3 = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	$3 = ([0] - $8)
	
.LABEL $label$4
	CALL $20($0, $3)
	$3 = *(($0 + [4]))
	$8 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	*($2 + [12]) = $8
	*($2 + [8]) = $8
	*($2 + [16]) = $3
	*($2 + [24]) = ($2 + [8])
	*($2 + [44]) = $4
	*($2 + [32]) = $1
	*($2 + [36]) = ($1 + [8])
	*($2 + [40]) = ($1 + [16])
	CALL $136(($2 + [32]), ($2 + [24]))
	$global$0 = ($2 + [48])
}

void .FUNC $10 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [32])) = [0]
	*($1 + [8]) = $0
	*($1) = $0
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	$2 = CALL db_lowerbound_i64($0, $0, (int_64)5374672172214124544, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$3 = ($1 + [8])
	
.LOOP $label$2:
	$2 = CALL $8($1, $2)
	CALL cancel_deferred($2)
	CALL eosio_assert([1], [9935])
	CALL eosio_assert([1], [9969])
	$4 = CALL db_next_i64(*($2 + [20]), ($1 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $8($1, $4)
	
.LABEL $label$3
	CALL $11($1, $2)
	$2 = CALL db_lowerbound_i64(*($1), *($3), (int_64)5374672172214124544, (int_64)0)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$2 }
	$3 = *($1 + [24])
	if ( ($3 == 0) ){ goto $label$1 }
	$5 = ($1 + [28])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($1 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $3
	
.LABEL $label$4
	*($5) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9999])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$4()), [10044])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$7 = *(($1 + [8]))
	$6 = *($1)
	$3 = *(($5 + [-24]))
	if ( (int_64)(((int_64)((int_64)*($3) ^ (int_64)$6) | (int_64)((int_64)*(($3 + [8])) ^ (int_64)$7)) == 0) ){ goto $label$3 }
	$8 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$2 }
	$3 = ($5 + [-48])
	$5 = ($5 + [-24])
	$3 = *($3)
	if ( ((int_64)(((int_64)((int_64)*($3) ^ (int_64)$6) | (int_64)((int_64)*(($3 + [8])) ^ (int_64)$7)) == 0) == 0) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10094])
	$4 = *($4)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$2 = ($5 + [-24])
	$3 = *($2)
	*($2) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $12 (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [96])
	$global$0 = $5
	*($5 + [72]) = $2
	*($5 + [64]) = $1
	$1 = CALL current_time()
	*(($5 + [28])) = (int_64)0
	*(($5 + [44])) = (int_64)0
	*(($5 + [52])) = (int_64)0
	*($5 + [12]) = [0]
	*($5 + [16]) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [36 align=4]) = (int_64)0
	*($5) = ((CASTING uint_32)(uint_64 ((uint_64)$1 / (uint_64)(int_64)1000000)) + [60])
	CALL $13(($5 + [36]), $4)
	*($5 + [20]) = $3
	CALL $14(($5 + [80]), $5)
	$3 = *($5 + [80])
	CALL send_deferred(($5 + [64]), $0, $3, (*($5 + [84]) - $3), [0])
	$3 = *($5 + [80])
	if ( ($3 == 0) ){ goto $label$1 }
	*($5 + [84]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	CALL $7($0, *($5 + [64]), *($5 + [72]))
	CALL $15($5)
	$global$0 = ($5 + [96])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $82($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $185 (int_32 $0)
{
	return CALL $186([10204], $0)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $20($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $21(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $20($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8504])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8504])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $103(CALL $104($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $185($1)
	
.LABEL $label$2
	*(CALL $174()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $185(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $188($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $187 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10196]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10200])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10196]) = [1]
	$2 = ($2 << [16])
	*([0] + [10200]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10200])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10200]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10196]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10196]) = [1]
	$3 = ($3 << [16])
	*([0] + [10200]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10200])
	
.LABEL $label$10
	*([0] + [10200]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $187($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8213])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$2 = *($4)
	*($4) = [0]
	*($1) = $2
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$3 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	$1 = ($3 + [-24])
	
.LOOP $label$9:
	$7 = CALL $122($1)
	$1 = ($1 + [-24])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $117 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = [0]
	$5 = (int_64)0
	$6 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($3 <= *($6)), [9308])
	$3 = *($7)
	$8 = *($3)
	$3 = ($3 + [1])
	*($7) = $3
	$4 = ($4 & [255])
	$5 = ((int_64)$5 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $4)))
	$4 = ($4 + [7])
	if ( ($8 & [128]) ){ goto $label$1 }
	$8 = (CASTING uint_32)(uint_64 $5)
	$4 = *($1)
	$7 = *($1 + [4])
	$3 = ((int_32)($7 - $4) / (int_32)[40])
	if ( ((uint_32)$3 >= (uint_32)$8) ){ goto $label$4 }
	CALL $120($1, ($8 - $3))
	$7 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$8) ){ goto $label$5 }
	$4 = ($4 + ((int_32)$8 * (int_32)[40]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$8 = ($7 + [-40])
	$3 = *(($7 + [-16]))
	if ( ($3 == 0) ){ goto $label$8 }
	*(($7 + [-12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$7 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $4
	$7 = $4
	
.LABEL $label$5
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($0 + [4])
	
.LOOP $label$9:
	$4 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($4) - *($8)) > (uint_32)[7]), [8779])
	CALL memcpy($3, *($8), [8])
	$6 = (*($8) + [8])
	*($8) = $6
	CALL eosio_assert(((uint_32)(*($4) - $6) > (uint_32)[7]), [8779])
	CALL memcpy(($3 + [8]), *($8), [8])
	$6 = (*($8) + [8])
	*($8) = $6
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4) - $6) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($8), [8])
	*(($3 + [16])) = *($2 + [8])
	*($8) = (*($8) + [8])
	CALL $81($0, ($3 + [24]))
	$3 = ($3 + [40])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	CALL $124(*($0 + [4]), $1)
	*(($4 = $2)) = [0]
	CALL $125($4, $1)
	$5 = *($4)
	if ( ($5 <= [513]) ){ goto $label$2 }
	$2 = CALL $185($5)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $5)
	CALL $126($4, $1)
	$6 = *($1)
	*($1 + [160]) = CALL db_store_i64(*($3 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $6, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	if ( ((uint_64)$6 >= (uint_64)*($3 + [16])) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $188($2)
	if ( (uint_64)($6 <= *($3 + [16])) ){ goto $label$3 }
	
.LABEL $label$4
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [16])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$3), [8779])
	CALL memcpy(($2 + [15]), *($0 + [4]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	*($1 + [24]) = ((int_32)*($2 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8779])
	CALL memcpy(($1 + [28]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9308])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [2])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $119($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [2]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[3]), [8779])
	CALL memcpy($7, *($2), [4])
	$3 = (*($2) + [4])
	*($2) = $3
	$7 = ($7 + [4])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [2])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($2 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $173($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [2]))
	$3 = ($2 + ($3 << [2]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [2]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $29 (int_64 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [136]) = $0
	$6 = *([0] + [8496])
	$7 = ((int_32)((int_32)$2 / (int_32)$4) / (int_32)$6)
	$6 = ( ($7 + [1]) ? $6 : ((int_32)$7 < (int_32)$6) )
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$1 }
	$8 = ((int_64)$1 * (int_64)10000)
	$9 = ($5 + [108])
	$10 = ($5 + [84])
	$11 = (($5 + [72]) + [16])
	$12 = ($5 + [92])
	$13 = ($5 + [100])
	$14 = ($5 + [116])
	$15 = ($5 + [124])
	
.LOOP $label$2:
	$0 = CALL current_time()
	*($10) = [0]
	*($11) = [0]
	*($12) = (int_64)0
	*($13) = (int_64)0
	*($9) = (int_64)0
	*($14) = (int_64)0
	*($15) = (int_64)0
	*($5 + [72]) = ((CASTING uint_32)(uint_64 ((uint_64)$0 / (uint_64)(int_64)1000000)) + [60])
	$7 = [1]
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$3 }
	$7 = ((int_32)$2 > (int_32)((int_32)*([0] + [8496]) * (int_32)$4))
	
.LABEL $label$3
	*($5 + [56]) = (int_64)0
	*($5 + [48]) = ((int_64)$8 + (int_64)$3)
	*((($5 + [32]) + [8])) = (int_64)3617214756542218240
	*($5 + [32]) = *($5 + [136])
	*($5 + [24]) = (int_64)6298969432597200896
	*(($5 + [8])) = $3
	*(($5 + [16])) = $7
	*($5) = $1
	CALL $30($9, ($5 + [32]), ($5 + [136]), ($5 + [24]), $5)
	$0 = *($5 + [136])
	*($12) = [0]
	CALL $14($5, ($5 + [72]))
	$7 = *($5)
	CALL send_deferred(($5 + [48]), $0, $7, (*($5 + [4]) - $7), [0])
	$7 = *($5)
	if ( ($7 == 0) ){ goto $label$4 }
	*($5 + [4]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$2 = ($2 - $4)
	$3 = ((int_64)$3 + (int_64)10)
	CALL $7(*($5 + [136]), *($5 + [48]), *($5 + [56]))
	CALL $15(($5 + [72]))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($5 + [144])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $135(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $173($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_64 .FUNC $23 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	CALL eosio_assert(CALL $fimport$13($0), [8389])
	*(($1 + [40])) = [0]
	*($1 + [16]) = $0
	*($1 + [8]) = $0
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = [0]
	$3 = CALL db_find_i64($0, $0, (int_64)7869342374570861056, $0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $24(($1 + [8]), $3)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)($1 + [8])), [8705])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8418])
	$0 = *($2 + [8])
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($1 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($1 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$2 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($1 + [48])
	return $0
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8779])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8779])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $149(*($1), *($0 + [12]))
	$global$0 = ($2 + [16])
}

void .FUNC $25 (int_64 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [144])
	$global$0 = $6
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	$7 = [0]
	$8 = *([0] + [8500])
	$9 = $1
	
.LOOP $label$6:
	*(($6 + ($10 = $7))) = *(($8 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$9 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$10 == (int_32)[12]) )))))
	$7 = ($10 + [1])
	if ( ((uint_32)$10 > (uint_32)[11]) ){ goto $label$5 }
	$9 = ((int_64)$9 << (int_64)5)
	if ( ((int_64)$9 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($6 + [80])) = [0]
	*($6 + [72]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$3 }
	*($6 + [72]) = ($7 << [1])
	$8 = (($6 + [72]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($6 + [80])) = [0]
	*($6 + [72]) = (int_64)0
	*($6 + [72]) = [0]
	$10 = (($6 + [72]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$11 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($11)
	*($6 + [72]) = ($11 | [1])
	*($6 + [80]) = $8
	*($6 + [76]) = $7
	
.LABEL $label$2
	$11 = ($10 + [1])
	$10 = [0]
	
.LOOP $label$7:
	*(($8 + $10)) = *(($6 + $10))
	$10 = ($10 + [1])
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$7 }
	$10 = ($8 + $7)
	
.LABEL $label$1
	*($10) = [0]
	$10 = CALL $169(($6 + [72]), [8448])
	$7 = *($10)
	*($10) = [0]
	*($10 + [4]) = [0]
	$11 = *($10 + [8])
	*($10 + [8]) = [0]
	if ( ((*($6 + [72]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($6 + [80]))
	
.LABEL $label$8
	$9 = CALL $23($0)
	*(($6 + [32])) = *(($3 + [8]))
	*(($6 + [48])) = *(($4 + [8]))
	*(($6 + [64])) = *(($5 + [8]))
	*($6 + [8]) = $0
	*($6) = $2
	*($6 + [16]) = $1
	*($6 + [72]) = $9
	*($6 + [80]) = (int_64)-4420680149753659392
	*($6 + [24]) = *($3)
	*($6 + [40]) = *($4)
	*($6 + [56]) = *($5)
	*(($10 = CALL _Znwj([16]))) = $0
	*($10 + [8]) = (int_64)3617214756542218240
	*(($6 + [108])) = [0]
	$8 = ($10 + [16])
	*(($6 + [96])) = $8
	*(($6 + [92])) = $8
	*($6 + [88]) = $10
	*($6 + [100 align=4]) = (int_64)0
	CALL $20(($6 + [100]), [68])
	$10 = *((($6 + [72]) + [32]))
	$8 = *($6 + [100])
	*($6 + [116]) = $8
	*($6 + [112]) = $8
	*($6 + [120]) = $10
	*($6 + [128]) = ($6 + [112])
	*($6 + [136]) = $6
	CALL $26(($6 + [136]), ($6 + [128]))
	CALL $19(($6 + [112]), ($6 + [72]))
	$10 = *($6 + [112])
	CALL send_inline($10, (*($6 + [116]) - $10))
	$10 = *($6 + [112])
	if ( ($10 == 0) ){ goto $label$9 }
	*($6 + [116]) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$9
	$10 = *($6 + [100])
	if ( ($10 == 0) ){ goto $label$10 }
	*(($6 + [104])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$10
	$10 = *($6 + [88])
	if ( ($10 == 0) ){ goto $label$11 }
	*(($6 + [92])) = $10
	CALL _ZdlPv($10)
	
.LABEL $label$11
	if ( (($7 & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv($11)
	
.LABEL $label$12
	$global$0 = ($6 + [144])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8756])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $185($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8779])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8779])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $28(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $188($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $27 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [80])
	$global$0 = $2
	CALL require_auth($0)
	CALL eosio_assert(CALL $fimport$13($0), [8389])
	CALL eosio_assert(CALL $fimport$13($1), [8461])
	*((($2 + [8]) + [32])) = [0]
	*($2 + [16]) = $0
	*($2 + [8]) = $0
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = CALL db_find_i64($0, $0, (int_64)7869342374570861056, $0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	$3 = CALL $24(($2 + [8]), $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($2 + [8])), [8705])
	CALL eosio_assert([1], [9062])
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)($2 + [8])), [9097])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$4()), [9143])
	*($3 + [8]) = $1
	$1 = *($3)
	CALL eosio_assert([1], [9194])
	CALL eosio_assert([1], [8504])
	CALL memcpy(($2 + [64]), $3, [8])
	CALL eosio_assert([1], [8504])
	CALL memcpy((($2 + [64]) | [8]), ($3 + [8]), [8])
	CALL db_update_i64(*($3 + [20]), $0, ($2 + [64]), [16])
	$3 = (($2 + [8]) + [16])
	if ( (uint_64)($1 <= *($3)) ){ goto $label$3 }
	*($3) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$4 = *($2 + [32])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)CALL $fimport$4() == (int_64)$0), [8784])
	*(($3 = CALL _Znwj([32])) + [16]) = ($2 + [8])
	*($3 + [8]) = $1
	*($3) = $0
	CALL eosio_assert([1], [8504])
	CALL memcpy(($2 + [64]), $3, [8])
	CALL eosio_assert([1], [8504])
	CALL memcpy((($2 + [64]) | [8]), ($3 + [8]), [8])
	$1 = *($3)
	$4 = CALL db_store_i64(*((($2 + [8]) + [8])), (int_64)7869342374570861056, $0, $1, ($2 + [64]), [16])
	*($3 + [20]) = $4
	$5 = (($2 + [8]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$5 }
	*($5) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($2 + [56]) = $3
	$0 = *($3)
	*($2 + [64]) = $0
	*($2 + [52]) = $4
	$6 = ($2 + [36])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($2 + [40]))) ){ goto $label$7 }
	*($5 + [8]) = $0
	*($5 + [16]) = $4
	*($2 + [56]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	$3 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( $3 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $28(($2 + [32]), ($2 + [56]), ($2 + [64]), ($2 + [52]))
	$3 = *($2 + [56])
	*($2 + [56]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($2 + [36])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $4
	
.LABEL $label$8
	*($6) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [8504])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($2) = $0
	CALL $150($2, $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8504])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8504])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8504])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $103(CALL $104($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8504])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8504])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8504])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8504])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8504])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8504])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8504])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8504])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $103($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [15]) = *($1 + [24])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[0]), [8504])
	CALL memcpy(*($0 + [4]), ($2 + [15]), [1])
	$3 = (*($0 + [4]) + [1])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [28]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8504])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8504])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8504])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	*($1 + [8]) = (int_64)0
	*($1) = (int_64)0
	$2 = CALL $182([8835])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8839])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8834]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8884])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$5 = (int_64)4
	
.LABEL $label$1
	CALL eosio_assert([1], [8937])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $6
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$3 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [8986])
	*(($1 + [24])) = $5
	*($1 + [16]) = (int_64)0
	$2 = CALL $182([8835])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8839])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$3 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($2 + [8834]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8884])
	
.LABEL $label$17
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	$5 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$5 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [8937])
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$6 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$3 = $6
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$3 = $6
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$22 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$4 = [0]
	
.LABEL $label$18
	CALL eosio_assert($4, [8986])
	*(($1 + [40])) = $5
	*($1 + [32]) = (int_64)0
}

void .FUNC $106 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [40]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [8504])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [208])
	$4 = *(($0 + [236]))
	$3 = *(($0 + [232]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$5:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( (int_64)(*($6) == 0) ){ goto $label$4 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$2), [8705])
	if ( $6 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($2), *(($0 + [216])), (int_64)4147959508456022528, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $56($2, $5) + [32]) == (int_32)$2), [8705])
	goto $label$1 
	
.LABEL $label$2
	CALL $57($1, $2, *($0), ($1 + [8]))
	
.LABEL $label$1
	$2 = ($0 + [72])
	$4 = *(($0 + [100]))
	$3 = *(($0 + [96]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$10:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( (int_64)(*($6) == 0) ){ goto $label$9 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$2), [8705])
	if ( $6 ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$5 = CALL db_find_i64(*($2), *(($0 + [80])), (int_64)-3660748247211412992, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$7 }
	CALL eosio_assert(((int_32)*(CALL $58($2, $5) + [48]) == (int_32)$2), [8705])
	goto $label$6 
	
.LABEL $label$7
	CALL $59($1, $2, *($0), ($1 + [8]))
	
.LABEL $label$6
	$2 = ($0 + [112])
	$4 = *(($0 + [140]))
	$3 = *(($0 + [136]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$12 }
	
.LOOP $label$14:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( (int_64)(*($6) == 0) ){ goto $label$13 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($6 + [48]) == (int_32)$2), [8705])
	if ( ($6 == 0) ){ goto $label$11 }
	$global$0 = ($1 + [16])
	return 
	
.LABEL $label$12
	$5 = CALL db_find_i64(*($2), *(($0 + [120])), (int_64)-2042509307701886976, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $60($2, $5) + [48]) == (int_32)$2), [8705])
	$global$0 = ($1 + [16])
	return 
	
.LABEL $label$11
	CALL $61($1, $2, *($0), ($1 + [8]))
	$global$0 = ($1 + [16])
}

int_32 .FUNC $39 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [192])) = (int_64)0
	*(($4 + [200])) = [0]
	*(($4 + [216])) = $0
	*(($4 + [224])) = (int_64)-1
	*(($4 + [232])) = (int_64)0
	*(($4 + [240])) = [0]
	*($4 + [152]) = $0
	*($4 + [208]) = $0
	*($4 + [248]) = [4]
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $188($2)
	
.LABEL $label$5
	CALL $55($4)
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
	if ( (CALL is_account((int_64)4157600125686060400) == 0) ){ goto $label$1 }
	CALL require_recipient((int_64)4157600125686060400)
	
.LABEL $label$1
}

int_32 .FUNC $37 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [512])
	$global$0 = $3
	*(($4 = $3) + [456]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	CALL memset(($4 + [288]), [0], [160])
	*((($4 + [288]) + [24])) = (int_64)0
	*((($4 + [288]) + [40])) = (int_64)0
	*((($4 + [288]) + [56])) = (int_64)0
	*(($4 + [360])) = [0]
	*((($4 + [288]) + [120])) = (int_64)0
	*((($4 + [288]) + [128])) = (int_64)0
	*((($4 + [288]) + [144])) = [0]
	*($4 + [304]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [352]) = (int_64)0
	*($4 + [400]) = (int_64)0
	*($4 + [424]) = (int_64)0
	*($4 + [276]) = $2
	*($4 + [272]) = $2
	*($4 + [280]) = ($2 + $5)
	CALL $62(($4 + [272]), ($4 + [288]))
	*(($3 = ($4 + [8]))) = *($4 + [280])
	*($4) = *($4 + [272])
	$3 = *($3)
	*((($4 + [464]) + [8])) = $3
	*(($6 = (($4 + [480]) + [8]))) = $3
	$7 = *($4)
	*($4 + [480]) = $7
	*($4 + [464]) = $7
	$3 = *($6)
	*((($4 + [496]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [480])
	*($4 + [32]) = $1
	*($4 + [496]) = $1
	*((($4 + [16]) + [40])) = $0
	*(($4 + [64])) = (int_64)-1
	*((($4 + [16]) + [56])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*((($4 + [16]) + [120])) = $0
	*((($4 + [16]) + [128])) = (int_64)-1
	*((($4 + [16]) + [136])) = (int_64)0
	*((($4 + [16]) + [144])) = [0]
	*((($4 + [16]) + [160])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*(($4 + [188])) = (int_64)0
	*(($4 + [196])) = (int_64)0
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*($4 + [168]) = $0
	*($4 + [224]) = $0
	*($4 + [264]) = [4]
	*($4 + [500]) = ($4 + [456])
	*($4 + [496]) = ($4 + [16])
	CALL $63(($4 + [496]), ($4 + [288]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $188($2)
	
.LABEL $label$4
	CALL $55(($4 + [16]))
	$2 = *((($4 + [288]) + [136]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [428])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$2 = *(($4 + [412]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [416])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$2 = *(($4 + [400]))
	if ( ($2 == 0) ){ goto $label$7 }
	*(($4 + [404])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$6 = *($4 + [352])
	if ( ($6 == 0) ){ goto $label$8 }
	$8 = ($4 + [356])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($2 + [-40])
	$3 = *(($2 + [-16]))
	if ( ($3 == 0) ){ goto $label$12 }
	*(($2 + [-12])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$12
	$2 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$11 }
	$2 = *(($4 + [352]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $6
	
.LABEL $label$9
	*($8) = $6
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$global$0 = ($4 + [512])
	return [1]
}

void .FUNC $34 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [156]) == (int_32)$4), [8705])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $66($4, $7)
	CALL eosio_assert(((int_32)*($8 + [156]) == (int_32)$4), [8705])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [9380])
	CALL eosio_assert(((uint_32)*($8 + [152]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$10() / (uint_64)(int_64)1000000))), [9397])
	CALL $10(*($0))
	$9 = *($0)
	CALL eosio_assert($7, [9062])
	CALL $78($4, $8, $9, ($3 + [8]))
	$9 = *($0)
	*($3 + [48]) = [9415]
	*($3 + [52]) = CALL $182([9415])
	*($3) = *($3 + [48])
	CALL $1($1, [0], $9, $9, *(CALL $16(($3 + [56]), $3)))
	*(($3 + [40])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = $1
	*($3 + [24]) = *($0)
	CALL $79(($3 + [32]), *($2), *($2 + [4]))
	CALL $80(*($0), ($3 + [8]))
	$8 = *($3 + [32])
	if ( ($8 == 0) ){ goto $label$5 }
	$5 = ($3 + [36])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = ($6 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$9
	$6 = $7
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	$7 = *(($3 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$7 = $8
	
.LABEL $label$6
	*($5) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$global$0 = ($3 + [64])
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [368])
	$global$0 = $3
	*(($4 = $3) + [312]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [304])) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [280]) = ($2 + $5)
	*($4 + [272]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8779])
	CALL memcpy(($4 + [288]), $2, [8])
	*($4 + [276]) = ($2 + [8])
	CALL $76(($4 + [272]), (($4 + [288]) + [8]))
	*(($3 = ($4 + [8]))) = *($4 + [280])
	*($4) = *($4 + [272])
	$3 = *($3)
	*((($4 + [320]) + [8])) = $3
	*(($6 = (($4 + [336]) + [8]))) = $3
	$7 = *($4)
	*($4 + [336]) = $7
	*($4 + [320]) = $7
	$3 = *($6)
	*((($4 + [352]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$1 = *($4 + [336])
	*($4 + [32]) = $1
	*($4 + [352]) = $1
	*(($4 + [56])) = $0
	*(($4 + [64])) = (int_64)-1
	*(($4 + [72])) = (int_64)0
	*(($4 + [80])) = [0]
	*(($4 + [96])) = $0
	*(($4 + [104])) = (int_64)-1
	*(($4 + [112])) = (int_64)0
	*(($4 + [120])) = [0]
	*(($4 + [136])) = $0
	*(($4 + [144])) = (int_64)-1
	*(($4 + [152])) = (int_64)0
	*(($4 + [160])) = [0]
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*($4 + [48]) = $0
	*($4 + [88]) = $0
	*($4 + [128]) = $0
	*(($4 + [188])) = (int_64)0
	*(($4 + [196])) = (int_64)0
	*(($4 + [208])) = (int_64)0
	*(($4 + [216])) = [0]
	*(($4 + [232])) = $0
	*(($4 + [240])) = (int_64)-1
	*(($4 + [248])) = (int_64)0
	*(($4 + [256])) = [0]
	*($4 + [168]) = $0
	*($4 + [224]) = $0
	*($4 + [264]) = [4]
	*($4 + [356]) = ($4 + [312])
	*($4 + [352]) = ($4 + [16])
	CALL $77(($4 + [352]), ($4 + [288]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $188($2)
	
.LABEL $label$4
	CALL $55(($4 + [16]))
	$3 = *($4 + [296])
	if ( ($3 == 0) ){ goto $label$5 }
	$6 = ($4 + [300])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($5 + [-12])
	if ( ((*($2) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($5 + [-4])))
	
.LABEL $label$9
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$8 }
	$2 = *(($4 + [296]))
	goto $label$6 
	
.LABEL $label$7
	$2 = $3
	
.LABEL $label$6
	*($6) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$5
	$global$0 = ($4 + [368])
	return [1]
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [12]) = $1
	$3 = ($0 + [208])
	$5 = *(($0 + [236]))
	$4 = *(($0 + [232]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$1 = ($5 + [-24])
	$6 = *($1)
	if ( (int_64)(*($6) == 0) ){ goto $label$3 }
	$5 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$3), [8705])
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	$1 = CALL db_find_i64(*($3), *(($0 + [216])), (int_64)4147959508456022528, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $56($3, $1)
	CALL eosio_assert(((int_32)*($6 + [32]) == (int_32)$3), [8705])
	
.LABEL $label$1
	$1 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($1, [9006])
	$7 = *($0)
	*($2 + [8]) = ($2 + [12])
	CALL eosio_assert($1, [9062])
	CALL $65($3, $6, $7, ($2 + [8]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [272])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $185($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [264]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[3]), [8779])
	CALL memcpy(($4 + [264]), $2, [4])
	*(($4 + [28])) = ($2 + [4])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*(($4 + [88])) = $0
	*(($4 + [96])) = (int_64)-1
	*(($4 + [104])) = (int_64)0
	*(($4 + [112])) = [0]
	*(($4 + [128])) = $0
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	*($4 + [80]) = $0
	*($4 + [120]) = $0
	*(($4 + [136])) = (int_64)-1
	*(($4 + [144])) = (int_64)0
	*(($4 + [152])) = [0]
	*(($4 + [168])) = (int_64)0
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = (int_64)0
	*(($4 + [192])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*($4 + [160]) = $0
	*($4 + [216]) = $0
	*($4 + [256]) = [4]
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$8 = *($4 + [264])
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $8), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $188($2)
	
.LABEL $label$5
	CALL $55(($4 + [8]))
	$global$0 = ($4 + [272])
	return [1]
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [16])
	$global$0 = $5
	$6 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $6) / (int_32)[40])
	$8 = ($7 + [1])
	if ( ((uint_32)$8 >= (uint_32)[107374183]) ){ goto $label$2 }
	$9 = [107374182]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[40])
	if ( ((uint_32)$6 > (uint_32)[53687090]) ){ goto $label$4 }
	$9 = ($6 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL _Znwj(((int_32)$9 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$9 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $173($0)
	
.LABEL $label$1
	*(($7 = ($6 + ((int_32)$7 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$8 = ($2 + [16])
	*($3) = $8
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $8
	CALL $20(($7 + [28]), [17])
	$2 = *($7 + [28])
	$1 = (*(($7 + [32])) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [8504])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [8504])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	*($5 + [15]) = *($4 + [16])
	CALL eosio_assert(((int_32)($1 + [-16]) > (int_32)[0]), [8504])
	CALL memcpy(($2 + [16]), ($5 + [15]), [1])
	$10 = ($6 + ((int_32)$9 * (int_32)[40]))
	$11 = ($7 + [40])
	$4 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$12 = ($4 - $8)
	$9 = [0]
	
.LOOP $label$7:
	$2 = ($8 + $9)
	*((($4 = ($7 + $9)) + [-32])) = *(($2 + [-32]))
	*(($4 + [-40])) = *(($2 + [-40]))
	*(($1 = ($4 + [-24]))) = (int_64)0
	*(($6 = ($4 + [-16]))) = [0]
	$3 = ($2 + [-24])
	*($1) = *($3)
	$1 = ($2 + [-16])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($4 + [-12]))) = (int_64)0
	*(($4 = ($4 + [-4]))) = [0]
	$6 = ($2 + [-12])
	*($1) = *($6)
	*($3) = (int_64)0
	$2 = ($2 + [-4])
	*($4) = *($2)
	*($2) = [0]
	*($6) = (int_64)0
	$9 = ($9 + [-40])
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$7 }
	$7 = ($7 + $9)
	$4 = *(($0 + [4]))
	$1 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$1 = $4
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $11
	*(($0 + [8])) = $10
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($4 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($4 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($4 + [-40])
	$9 = *(($4 + [-24]))
	if ( ($9 == 0) ){ goto $label$11 }
	*(($4 + [-20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$11
	$4 = $2
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($5 + [16])
	(unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 > (int_64)4222381386624925695) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)-4417228131232907265) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-7954134664302947328) ){ goto $label$9 }
	if ( ((int_64)$2 == (int_64)-4994024801513095168) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-4417295262386149888) ){ goto $label$1 }
	*($3 + [164]) = [0]
	*($3 + [160]) = [1]
	*($3 + [24]) = *($3 + [160])
	CALL $33($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$12
	if ( ((int_64)$2 > (int_64)6298969432597200895) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)4222381386624925696) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)4923678915975577600) ){ goto $label$6 }
	if ( ((int_64)$2 != (int_64)6111947644295184384) ){ goto $label$1 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [40]) = *($3 + [144])
	CALL $35($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-4417228131232907264) ){ goto $label$5 }
	if ( ((int_64)$2 == (int_64)3617214760481193984) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)4147959693476866960) ){ goto $label$1 }
	*($3 + [180]) = [0]
	*($3 + [176]) = [3]
	*($3 + [8]) = *($3 + [176])
	CALL $37($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)6298969432597200896) ){ goto $label$3 }
	if ( ((int_64)$2 == (int_64)7035937269232844800) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)8421049960203129232) ){ goto $label$1 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [4]
	*($3) = *($3 + [184])
	CALL $39($1, $1, $3)
	goto $label$1 
	
.LABEL $label$9
	*($3 + [172]) = [0]
	*($3 + [168]) = [5]
	*($3 + [16]) = *($3 + [168])
	CALL $41($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [132]) = [0]
	*($3 + [128]) = [6]
	*($3 + [56]) = *($3 + [128])
	CALL $43($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [156]) = [0]
	*($3 + [152]) = [7]
	*($3 + [32]) = *($3 + [152])
	CALL $45($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [108]) = [0]
	*($3 + [104]) = [8]
	*($3 + [80]) = *($3 + [104])
	CALL $39($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [100]) = [0]
	*($3 + [96]) = [9]
	*($3 + [88]) = *($3 + [96])
	CALL $48($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [140]) = [0]
	*($3 + [136]) = [10]
	*($3 + [48]) = *($3 + [136])
	CALL $50($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [124]) = [0]
	*($3 + [120]) = [11]
	*($3 + [64]) = *($3 + [120])
	CALL $52($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [116]) = [0]
	*($3 + [112]) = [12]
	*($3 + [72]) = *($3 + [112])
	CALL $54($1, $1, ($3 + [72]))
	
.LABEL $label$1
	CALL $175([0])
	$global$0 = ($3 + [192])
}