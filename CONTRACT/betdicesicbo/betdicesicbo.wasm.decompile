(data (i32.const 4) "`~\00\00")
(data (i32.const 16) "transfer\00")
(data (i32.const 32) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 96) "invalid symbol name\00")
(data (i32.const 128) "read\00")
(data (i32.const 144) "get\00")
(data (i32.const 160) "betdicegroup\00")
(data (i32.const 176) "sicboserver\00")
(data (i32.const 192) "Do: \00")
(data (i32.const 208) "Remove: \00")
(data (i32.const 224) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 288) "cannot pass end iterator to erase\00")
(data (i32.const 336) "cannot increment end iterator\00")
(data (i32.const 368) "Nothing to do\00")
(data (i32.const 384) "object passed to erase is not in multi_index\00")
(data (i32.const 432) "cannot erase objects in table of another contract\00")
(data (i32.const 496) "attempt to remove object that was not in multi_index\00")
(data (i32.const 560) "error reading iterator\00")
(data (i32.const 592) "Symbol amount is not valid\00")
(data (i32.const 624) "Symbol is not valid\00")
(data (i32.const 656) "contract is not supported\00")
(data (i32.const 688) "cannot pass end iterator to modify\00")
(data (i32.const 736) "object passed to modify is not in multi_index\00")
(data (i32.const 784) "cannot modify objects in table of another contract\00")
(data (i32.const 848) "updater cannot change primary key when modifying an object\00")
(data (i32.const 912) "write\00")
(data (i32.const 928) "cannot create objects in table of another contract\00")
(data (i32.const 992) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1056) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1120) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1168) "Cannot new game as there is active game\00")
(data (i32.const 1208) "\00\00\00\00\00z\90\c3")
(data (i32.const 1216) ":\00")
(data (i32.const 1220) "\d0\04\00\00")
(data (i32.const 1232) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1280) "DO:\00")
(data (i32.const 1296) "ClearBet:\00")
(data (i32.const 1312) "pay\00")
(data (i32.const 1328) "No action\00")
(data (i32.const 1344) "Game not found\00")
(data (i32.const 1360) "Game not revealed\00")
(data (i32.const 1392) "Bets not found or paid\00")
(data (i32.const 1424) "lose\00")
(data (i32.const 1440) "win\00")
(data (i32.const 1456) "[\00")
(data (i32.const 1472) "] Payout for gameId: \00")
(data (i32.const 1504) ", Item: \00")
(data (i32.const 1520) "betdicehouse\00")
(data (i32.const 1536) "payout\00")
(data (i32.const 1552) "onpayout\00")
(data (i32.const 1568) "onbet4\00")
(data (i32.const 1584) "active\00")
(data (i32.const 1600) "betreceipt\00")
(data (i32.const 1616) "cannot find game\00")
(data (i32.const 1648) "game not available\00")
(data (i32.const 1680) "game not yet finished\00")
(data (i32.const 1712) "banker cards is not correct\00")
(data (i32.const 1744) "cannot find item\00")
(data (i32.const 1776) "wrong dice number\00")
(data (i32.const 1808) "Invalid token transfer\00")
(data (i32.const 1840) "Quantity must be positive\00")
(data (i32.const 1872) "action\00")
(data (i32.const 1888) "Not supported symbol\00")
(data (i32.const 1920) "bet\00")
(data (i32.const 1936) "gameId\00")
(data (i32.const 1952) "game ended\00")
(data (i32.const 1968) "symbol is not matched\00")
(data (i32.const 2000) "Cannot find symbolvar\00")
(data (i32.const 2032) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 2096) "smaller than min amount\00")
(data (i32.const 2144) "ref\00")
(data (i32.const 2160) "item\00")
(data (i32.const 2176) "unable to find key\00")
(data (i32.const 2208) "attempt to subtract asset with different symbol\00")
(data (i32.const 2256) "subtraction underflow\00")
(data (i32.const 2288) "subtraction overflow\00")
(data (i32.const 2320) "Amount too large\00")
(data (i32.const 2352) "Wager, Game: \00")
(data (i32.const 2368) " Memo: \00")
(data (i32.const 2384) ".\00")
(data (i32.const 2400) " \00")
(data (i32.const 2416) ",\00")
(data (i32.const 2432) "eosio.bpay\00")
(data (i32.const 2448) "eosio.msig\00")
(data (i32.const 2464) "eosio.names\00")
(data (i32.const 2480) "eosio.ram\00")
(data (i32.const 2496) "eosio.ramfee\00")
(data (i32.const 2512) "eosio.saving\00")
(data (i32.const 2528) "eosio.stake\00")
(data (i32.const 2544) "eosio.token\00")
(data (i32.const 2560) "eosio.vpay\00")
(data (i32.const 2576) "big\00")
(data (i32.const 2584) "=\n\d7\a3p=\06@\00\00\00\00\00\00\f0?\aeG\e1z\14NH@")
(data (i32.const 2608) "small\00")
(data (i32.const 2616) "=\n\d7\a3p=\06@\00\00\00\00\00\00\f0?\aeG\e1z\14NH@")
(data (i32.const 2640) "odd\00")
(data (i32.const 2648) "=\n\d7\a3p=\06@\00\00\00\00\00\00\f0?\aeG\e1z\14NH@")
(data (i32.const 2672) "even\00")
(data (i32.const 2680) "=\n\d7\a3p=\06@\00\00\00\00\00\00\f0?\aeG\e1z\14NH@")
(data (i32.const 2704) "triple_1\00")
(data (i32.const 2720) "\9a\99\99\99\99\19>@\00\00\00\00\00\c0b@q=\n\d7\a3p\dd?")
(data (i32.const 2752) "triple_2\00")
(data (i32.const 2768) "\9a\99\99\99\99\19>@\00\00\00\00\00\c0b@q=\n\d7\a3p\dd?")
(data (i32.const 2800) "triple_3\00")
(data (i32.const 2816) "\9a\99\99\99\99\19>@\00\00\00\00\00\c0b@q=\n\d7\a3p\dd?")
(data (i32.const 2848) "triple_4\00")
(data (i32.const 2864) "\9a\99\99\99\99\19>@\00\00\00\00\00\c0b@q=\n\d7\a3p\dd?")
(data (i32.const 2896) "triple_5\00")
(data (i32.const 2912) "\9a\99\99\99\99\19>@\00\00\00\00\00\c0b@q=\n\d7\a3p\dd?")
(data (i32.const 2944) "triple_6\00")
(data (i32.const 2960) "\9a\99\99\99\99\19>@\00\00\00\00\00\c0b@q=\n\d7\a3p\dd?")
(data (i32.const 2992) "double_1\00")
(data (i32.const 3008) "fffff\a6@@\00\00\00\00\00\00 @\a4p=\n\d7\a3\1d@")
(data (i32.const 3040) "double_2\00")
(data (i32.const 3056) "fffff\a6@@\00\00\00\00\00\00 @\a4p=\n\d7\a3\1d@")
(data (i32.const 3088) "double_3\00")
(data (i32.const 3104) "fffff\a6@@\00\00\00\00\00\00 @\a4p=\n\d7\a3\1d@")
(data (i32.const 3136) "double_4\00")
(data (i32.const 3152) "fffff\a6@@\00\00\00\00\00\00 @\a4p=\n\d7\a3\1d@")
(data (i32.const 3184) "double_5\00")
(data (i32.const 3200) "fffff\a6@@\00\00\00\00\00\00 @\a4p=\n\d7\a3\1d@")
(data (i32.const 3232) "double_6\00")
(data (i32.const 3248) "fffff\a6@@\00\00\00\00\00\00 @\a4p=\n\d7\a3\1d@")
(data (i32.const 3280) "triple_all\00")
(data (i32.const 3296) "\9a\99\99\99\99\99>@\00\00\00\00\00\008@=\n\d7\a3p=\06@")
(data (i32.const 3328) "score_4\00")
(data (i32.const 3336) "333333=@\00\00\00\00\00\00I@=\n\d7\a3p=\f6?")
(data (i32.const 3360) "score_5\00")
(data (i32.const 3368) "\9a\99\99\99\99\99G@\00\00\00\00\00\002@=\n\d7\a3p=\06@")
(data (i32.const 3392) "score_6\00")
(data (i32.const 3400) "\9a\99\99\99\99\99>@\00\00\00\00\00\00,@\85\ebQ\b8\1e\85\12@")
(data (i32.const 3424) "score_7\00")
(data (i32.const 3432) "ffffff#@\00\00\00\00\00\00(@\c3\f5(\\\8f\c2\1b@")
(data (i32.const 3456) "score_8\00")
(data (i32.const 3464) "\00\00\00\00\00\00)@\00\00\00\00\00\00 @q=\n\d7\a3p#@")
(data (i32.const 3488) "score_9\00")
(data (i32.const 3496) "\00\00\00\00\00\003@\00\00\00\00\00\00\18@\a4p=\n\d7#\'@")
(data (i32.const 3520) "score_10\00")
(data (i32.const 3536) "\00\00\00\00\00\00)@\00\00\00\00\00\00\18@\00\00\00\00\00\00)@")
(data (i32.const 3568) "score_11\00")
(data (i32.const 3584) "\00\00\00\00\00\00)@\00\00\00\00\00\00\18@\00\00\00\00\00\00)@")
(data (i32.const 3616) "score_12\00")
(data (i32.const 3632) "\00\00\00\00\00\003@\00\00\00\00\00\00\18@\a4p=\n\d7#\'@")
(data (i32.const 3664) "score_13\00")
(data (i32.const 3680) "\00\00\00\00\00\00)@\00\00\00\00\00\00 @q=\n\d7\a3p#@")
(data (i32.const 3712) "score_14\00")
(data (i32.const 3728) "ffffff#@\00\00\00\00\00\00(@\c3\f5(\\\8f\c2\1b@")
(data (i32.const 3760) "score_15\00")
(data (i32.const 3776) "\9a\99\99\99\99\99>@\00\00\00\00\00\00,@\85\ebQ\b8\1e\85\12@")
(data (i32.const 3808) "score_16\00")
(data (i32.const 3824) "\9a\99\99\99\99\99G@\00\00\00\00\00\002@=\n\d7\a3p=\06@")
(data (i32.const 3856) "score_17\00")
(data (i32.const 3872) "333333=@\00\00\00\00\00\00I@=\n\d7\a3p=\f6?")
(data (i32.const 3904) "combination_12\00")
(data (i32.const 3920) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 3952) "combination_13\00")
(data (i32.const 3968) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4000) "combination_14\00")
(data (i32.const 4016) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4048) "combination_15\00")
(data (i32.const 4064) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4096) "combination_16\00")
(data (i32.const 4112) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4144) "combination_23\00")
(data (i32.const 4160) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4192) "combination_24\00")
(data (i32.const 4208) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4240) "combination_25\00")
(data (i32.const 4256) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4288) "combination_26\00")
(data (i32.const 4304) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4336) "combination_34\00")
(data (i32.const 4352) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4384) "combination_35\00")
(data (i32.const 4400) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4432) "combination_36\00")
(data (i32.const 4448) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4480) "combination_45\00")
(data (i32.const 4496) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4528) "combination_46\00")
(data (i32.const 4544) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4576) "combination_56\00")
(data (i32.const 4592) "33333\b30@\00\00\00\00\00\00\14@H\e1z\14\ae\c7+@")
(data (i32.const 4624) "single_1\00")
(data (i32.const 4640) "\9a\99\99\99\99\99\1f@\00\00\00\00\00\00\f0?\\\8f\c2\f5(\\A@")
(data (i32.const 4672) "single_2\00")
(data (i32.const 4688) "\9a\99\99\99\99\99\1f@\00\00\00\00\00\00\f0?\\\8f\c2\f5(\\A@")
(data (i32.const 4720) "single_3\00")
(data (i32.const 4736) "\9a\99\99\99\99\99\1f@\00\00\00\00\00\00\f0?\\\8f\c2\f5(\\A@")
(data (i32.const 4768) "single_4\00")
(data (i32.const 4784) "\9a\99\99\99\99\99\1f@\00\00\00\00\00\00\f0?\\\8f\c2\f5(\\A@")
(data (i32.const 4816) "single_5\00")
(data (i32.const 4832) "\9a\99\99\99\99\99\1f@\00\00\00\00\00\00\f0?\\\8f\c2\f5(\\A@")
(data (i32.const 4864) "single_6\00")
(data (i32.const 4880) "\9a\99\99\99\99\99\1f@\00\00\00\00\00\00\f0?\\\8f\c2\f5(\\A@")
(data (i32.const 13312) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 13408) "%llu\00")
(data (i32.const 13424) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 13888) "0123456789ABCDEF")
(data (i32.const 13904) "-+   0X0x\00")
(data (i32.const 13920) "(null)\00")
(data (i32.const 13936) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 13968) "inf\00")
(data (i32.const 13984) "INF\00")
(data (i32.const 14000) "nan\00")
(data (i32.const 14016) "NAN\00")
(data (i32.const 14032) ".\00")
(data (i32.const 14048) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 14144) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "cancel_deferred" (func $fimport$13 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "db_end_i64" (func $fimport$16 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$19 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$20 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$21 (param i32)))
(import "env" "db_idx128_store" (func $fimport$22 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_update" (func $fimport$23 (param i32 i64 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$24 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$25 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$27 (param i32)))
(import "env" "db_idx64_store" (func $fimport$28 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$29 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$32 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$33 (param i32)))
(import "env" "db_store_i64" (func $fimport$34 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$35 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$36 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$37 (param i32)))
(import "env" "is_account" (func $fimport$38 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$39 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$40 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$41 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$42 (param i64)))
(import "env" "prints" (func $fimport$43 (param i32)))
(import "env" "prints_l" (func $fimport$44 (param i32 i32)))
(import "env" "printui" (func $fimport$45 (param i64)))
(import "env" "read_action_data" (func $fimport$46 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$47 (param i64)))
(import "env" "require_auth2" (func $fimport$48 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$49 (param i64)))
(import "env" "send_deferred" (func $fimport$50 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$51 (param i32 i32)))
(import "env" "sha256" (func $fimport$52 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $131))
(export "free" (func $134))
(export "_ZNSt3__19to_stringEy" (func $151))
(export "floor" (func $157))
(export "log10" (func $158))
(export "snprintf" (func $159))
(export "vsnprintf" (func $160))
(export "__errno_location" (func $162))
(export "vfprintf" (func $163))
(export "__lockfile" (func $165))
(export "__unlockfile" (func $166))
(export "__fwritex" (func $167))
(export "strerror" (func $169))
(export "strnlen" (func $170))
(export "wctomb" (func $171))
(export "__signbitl" (func $172))
(export "__fpclassifyl" (func $173))
(export "frexpl" (func $174))
(export "wcrtomb" (func $175))
(export "memchr" (func $176))
(export "__lctrans" (func $177))
(export "__lctrans_impl" (func $178))
(export "__mo_lookup" (func $179))
(export "strcmp" (func $180))
(export "__towrite" (func $181))
(export "atoi" (func $182))
(export "memcmp" (func $183))
(export "strlen" (func $184))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $185 $17 $12 $16 $10 $14 $20 $19 $161)



void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [2928])
	*([0] + [4]) = $9
	*($0) = $1
	*((($9 + [824]) + [8])) = [0]
	*($9 + [824]) = (int_64)0
	$8 = CALL strlen([2576])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$52 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$55 }
	*($9 + [824]) = ($8 << [1])
	$7 = (($9 + [824]) | [1])
	if ( $8 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [824]) = ($4 | [1])
	*($9 + [832]) = $7
	*($9 + [828]) = $8
	
.LABEL $label$54
	CALL memcpy($7, [2576], $8)
	
.LABEL $label$53
	*(($7 + $8)) = [0]
	CALL $155(($9 + [840]), ($9 + [824]))
	*(($9 + [872])) = *([0] + [2600])
	*(($9 + [864])) = *([0] + [2592])
	*($9 + [856]) = *([0] + [2584])
	*(($9 + [816])) = [0]
	*($9 + [808]) = (int_64)0
	$8 = CALL strlen([2608])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$51 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$58 }
	*($9 + [808]) = ($8 << [1])
	$7 = (($9 + [808]) | [1])
	if ( $8 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [808]) = ($4 | [1])
	*($9 + [816]) = $7
	*($9 + [812]) = $8
	
.LABEL $label$57
	CALL memcpy($7, [2608], $8)
	
.LABEL $label$56
	*(($7 + $8)) = [0]
	CALL $155(($9 + [880]), ($9 + [808]))
	*(($9 + [912])) = *([0] + [2632])
	*(($9 + [904])) = *([0] + [2624])
	*(($9 + [896])) = *([0] + [2616])
	*(($9 + [800])) = [0]
	*($9 + [792]) = (int_64)0
	$8 = CALL strlen([2640])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$50 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$61 }
	*($9 + [792]) = ($8 << [1])
	$7 = (($9 + [792]) | [1])
	if ( $8 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [792]) = ($4 | [1])
	*($9 + [800]) = $7
	*($9 + [796]) = $8
	
.LABEL $label$60
	CALL memcpy($7, [2640], $8)
	
.LABEL $label$59
	*(($7 + $8)) = [0]
	CALL $155(($9 + [920]), ($9 + [792]))
	*(($9 + [952])) = *([0] + [2664])
	*(($9 + [944])) = *([0] + [2656])
	*(($9 + [936])) = *([0] + [2648])
	*(($9 + [784])) = [0]
	*($9 + [776]) = (int_64)0
	$8 = CALL strlen([2672])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$49 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$64 }
	*($9 + [776]) = ($8 << [1])
	$7 = (($9 + [776]) | [1])
	if ( $8 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [776]) = ($4 | [1])
	*($9 + [784]) = $7
	*($9 + [780]) = $8
	
.LABEL $label$63
	CALL memcpy($7, [2672], $8)
	
.LABEL $label$62
	*(($7 + $8)) = [0]
	CALL $155(($9 + [960]), ($9 + [776]))
	*(($9 + [992])) = *([0] + [2696])
	*(($9 + [984])) = *([0] + [2688])
	*(($9 + [976])) = *([0] + [2680])
	*(($9 + [768])) = [0]
	*($9 + [760]) = (int_64)0
	$8 = CALL strlen([2704])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$48 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$67 }
	*($9 + [760]) = ($8 << [1])
	$7 = (($9 + [760]) | [1])
	if ( $8 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [760]) = ($4 | [1])
	*($9 + [768]) = $7
	*($9 + [764]) = $8
	
.LABEL $label$66
	CALL memcpy($7, [2704], $8)
	
.LABEL $label$65
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1000]), ($9 + [760]))
	*(($9 + [1032])) = *([0] + [2736])
	*(($9 + [1024])) = *([0] + [2728])
	*(($9 + [1016])) = *([0] + [2720])
	*(($9 + [752])) = [0]
	*($9 + [744]) = (int_64)0
	$8 = CALL strlen([2752])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$47 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$70 }
	*($9 + [744]) = ($8 << [1])
	$7 = (($9 + [744]) | [1])
	if ( $8 ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$70
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [744]) = ($4 | [1])
	*($9 + [752]) = $7
	*($9 + [748]) = $8
	
.LABEL $label$69
	CALL memcpy($7, [2752], $8)
	
.LABEL $label$68
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1040]), ($9 + [744]))
	*(($9 + [1072])) = *([0] + [2784])
	*(($9 + [1064])) = *([0] + [2776])
	*(($9 + [1056])) = *([0] + [2768])
	*(($9 + [736])) = [0]
	*($9 + [728]) = (int_64)0
	$8 = CALL strlen([2800])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$46 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$73 }
	*($9 + [728]) = ($8 << [1])
	$7 = (($9 + [728]) | [1])
	if ( $8 ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [728]) = ($4 | [1])
	*($9 + [736]) = $7
	*($9 + [732]) = $8
	
.LABEL $label$72
	CALL memcpy($7, [2800], $8)
	
.LABEL $label$71
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1080]), ($9 + [728]))
	*(($9 + [1112])) = *([0] + [2832])
	*(($9 + [1104])) = *([0] + [2824])
	*(($9 + [1096])) = *([0] + [2816])
	*(($9 + [720])) = [0]
	*($9 + [712]) = (int_64)0
	$8 = CALL strlen([2848])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$45 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$76 }
	*($9 + [712]) = ($8 << [1])
	$7 = (($9 + [712]) | [1])
	if ( $8 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [712]) = ($4 | [1])
	*($9 + [720]) = $7
	*($9 + [716]) = $8
	
.LABEL $label$75
	CALL memcpy($7, [2848], $8)
	
.LABEL $label$74
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1120]), ($9 + [712]))
	*(($9 + [1152])) = *([0] + [2880])
	*(($9 + [1144])) = *([0] + [2872])
	*(($9 + [1136])) = *([0] + [2864])
	*(($9 + [704])) = [0]
	*($9 + [696]) = (int_64)0
	$8 = CALL strlen([2896])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$44 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$79 }
	*($9 + [696]) = ($8 << [1])
	$7 = (($9 + [696]) | [1])
	if ( $8 ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$79
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [696]) = ($4 | [1])
	*($9 + [704]) = $7
	*($9 + [700]) = $8
	
.LABEL $label$78
	CALL memcpy($7, [2896], $8)
	
.LABEL $label$77
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1160]), ($9 + [696]))
	*(($9 + [1192])) = *([0] + [2928])
	*(($9 + [1184])) = *([0] + [2920])
	*(($9 + [1176])) = *([0] + [2912])
	*(($9 + [688])) = [0]
	*($9 + [680]) = (int_64)0
	$8 = CALL strlen([2944])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$43 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$82 }
	*($9 + [680]) = ($8 << [1])
	$7 = (($9 + [680]) | [1])
	if ( $8 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [680]) = ($4 | [1])
	*($9 + [688]) = $7
	*($9 + [684]) = $8
	
.LABEL $label$81
	CALL memcpy($7, [2944], $8)
	
.LABEL $label$80
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1200]), ($9 + [680]))
	*(($9 + [1232])) = *([0] + [2976])
	*(($9 + [1224])) = *([0] + [2968])
	*(($9 + [1216])) = *([0] + [2960])
	*(($9 + [672])) = [0]
	*($9 + [664]) = (int_64)0
	$8 = CALL strlen([2992])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$42 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$85 }
	*($9 + [664]) = ($8 << [1])
	$7 = (($9 + [664]) | [1])
	if ( $8 ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$85
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [664]) = ($4 | [1])
	*($9 + [672]) = $7
	*($9 + [668]) = $8
	
.LABEL $label$84
	CALL memcpy($7, [2992], $8)
	
.LABEL $label$83
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1240]), ($9 + [664]))
	*(($9 + [1272])) = *([0] + [3024])
	*(($9 + [1264])) = *([0] + [3016])
	*(($9 + [1256])) = *([0] + [3008])
	*(($9 + [656])) = [0]
	*($9 + [648]) = (int_64)0
	$8 = CALL strlen([3040])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$41 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$88 }
	*($9 + [648]) = ($8 << [1])
	$7 = (($9 + [648]) | [1])
	if ( $8 ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$88
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [648]) = ($4 | [1])
	*($9 + [656]) = $7
	*($9 + [652]) = $8
	
.LABEL $label$87
	CALL memcpy($7, [3040], $8)
	
.LABEL $label$86
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1280]), ($9 + [648]))
	*(($9 + [1312])) = *([0] + [3072])
	*(($9 + [1304])) = *([0] + [3064])
	*(($9 + [1296])) = *([0] + [3056])
	*(($9 + [640])) = [0]
	*($9 + [632]) = (int_64)0
	$8 = CALL strlen([3088])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$40 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$91 }
	*($9 + [632]) = ($8 << [1])
	$7 = (($9 + [632]) | [1])
	if ( $8 ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$91
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [632]) = ($4 | [1])
	*($9 + [640]) = $7
	*($9 + [636]) = $8
	
.LABEL $label$90
	CALL memcpy($7, [3088], $8)
	
.LABEL $label$89
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1320]), ($9 + [632]))
	*(($9 + [1352])) = *([0] + [3120])
	*(($9 + [1344])) = *([0] + [3112])
	*(($9 + [1336])) = *([0] + [3104])
	*(($9 + [624])) = [0]
	*($9 + [616]) = (int_64)0
	$8 = CALL strlen([3136])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$39 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$94 }
	*($9 + [616]) = ($8 << [1])
	$7 = (($9 + [616]) | [1])
	if ( $8 ){ goto $label$93 }
	goto $label$92 
	
.LABEL $label$94
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [616]) = ($4 | [1])
	*($9 + [624]) = $7
	*($9 + [620]) = $8
	
.LABEL $label$93
	CALL memcpy($7, [3136], $8)
	
.LABEL $label$92
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1360]), ($9 + [616]))
	*(($9 + [1392])) = *([0] + [3168])
	*(($9 + [1384])) = *([0] + [3160])
	*(($9 + [1376])) = *([0] + [3152])
	*(($9 + [608])) = [0]
	*($9 + [600]) = (int_64)0
	$8 = CALL strlen([3184])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$38 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$97 }
	*($9 + [600]) = ($8 << [1])
	$7 = (($9 + [600]) | [1])
	if ( $8 ){ goto $label$96 }
	goto $label$95 
	
.LABEL $label$97
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [600]) = ($4 | [1])
	*($9 + [608]) = $7
	*($9 + [604]) = $8
	
.LABEL $label$96
	CALL memcpy($7, [3184], $8)
	
.LABEL $label$95
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1400]), ($9 + [600]))
	*(($9 + [1432])) = *([0] + [3216])
	*(($9 + [1424])) = *([0] + [3208])
	*(($9 + [1416])) = *([0] + [3200])
	*(($9 + [592])) = [0]
	*($9 + [584]) = (int_64)0
	$8 = CALL strlen([3232])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$100 }
	*($9 + [584]) = ($8 << [1])
	$7 = (($9 + [584]) | [1])
	if ( $8 ){ goto $label$99 }
	goto $label$98 
	
.LABEL $label$100
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [584]) = ($4 | [1])
	*($9 + [592]) = $7
	*($9 + [588]) = $8
	
.LABEL $label$99
	CALL memcpy($7, [3232], $8)
	
.LABEL $label$98
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1440]), ($9 + [584]))
	*(($9 + [1472])) = *([0] + [3264])
	*(($9 + [1464])) = *([0] + [3256])
	*(($9 + [1456])) = *([0] + [3248])
	*(($9 + [576])) = [0]
	*($9 + [568]) = (int_64)0
	$8 = CALL strlen([3280])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$36 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$103 }
	*($9 + [568]) = ($8 << [1])
	$7 = (($9 + [568]) | [1])
	if ( $8 ){ goto $label$102 }
	goto $label$101 
	
.LABEL $label$103
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [568]) = ($4 | [1])
	*($9 + [576]) = $7
	*($9 + [572]) = $8
	
.LABEL $label$102
	CALL memcpy($7, [3280], $8)
	
.LABEL $label$101
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1480]), ($9 + [568]))
	*(($9 + [1512])) = *([0] + [3312])
	*(($9 + [1504])) = *([0] + [3304])
	*(($9 + [1496])) = *([0] + [3296])
	*(($9 + [560])) = [0]
	*($9 + [552]) = (int_64)0
	$8 = CALL strlen([3328])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$35 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$106 }
	*($9 + [552]) = ($8 << [1])
	$7 = (($9 + [552]) | [1])
	if ( $8 ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$106
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [552]) = ($4 | [1])
	*($9 + [560]) = $7
	*($9 + [556]) = $8
	
.LABEL $label$105
	CALL memcpy($7, [3328], $8)
	
.LABEL $label$104
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1520]), ($9 + [552]))
	*(($9 + [1552])) = *([0] + [3352])
	*(($9 + [1544])) = *([0] + [3344])
	*(($9 + [1536])) = *([0] + [3336])
	*(($9 + [544])) = [0]
	*($9 + [536]) = (int_64)0
	$8 = CALL strlen([3360])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$34 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$109 }
	*($9 + [536]) = ($8 << [1])
	$7 = (($9 + [536]) | [1])
	if ( $8 ){ goto $label$108 }
	goto $label$107 
	
.LABEL $label$109
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [536]) = ($4 | [1])
	*($9 + [544]) = $7
	*($9 + [540]) = $8
	
.LABEL $label$108
	CALL memcpy($7, [3360], $8)
	
.LABEL $label$107
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1560]), ($9 + [536]))
	*(($9 + [1592])) = *([0] + [3384])
	*(($9 + [1584])) = *([0] + [3376])
	*(($9 + [1576])) = *([0] + [3368])
	*(($9 + [528])) = [0]
	*($9 + [520]) = (int_64)0
	$8 = CALL strlen([3392])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$33 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$112 }
	*($9 + [520]) = ($8 << [1])
	$7 = (($9 + [520]) | [1])
	if ( $8 ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$112
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [520]) = ($4 | [1])
	*($9 + [528]) = $7
	*($9 + [524]) = $8
	
.LABEL $label$111
	CALL memcpy($7, [3392], $8)
	
.LABEL $label$110
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1600]), ($9 + [520]))
	*(($9 + [1632])) = *([0] + [3416])
	*(($9 + [1624])) = *([0] + [3408])
	*(($9 + [1616])) = *([0] + [3400])
	*(($9 + [512])) = [0]
	*($9 + [504]) = (int_64)0
	$8 = CALL strlen([3424])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$115 }
	*($9 + [504]) = ($8 << [1])
	$7 = (($9 + [504]) | [1])
	if ( $8 ){ goto $label$114 }
	goto $label$113 
	
.LABEL $label$115
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [504]) = ($4 | [1])
	*($9 + [512]) = $7
	*($9 + [508]) = $8
	
.LABEL $label$114
	CALL memcpy($7, [3424], $8)
	
.LABEL $label$113
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1640]), ($9 + [504]))
	*(($9 + [1672])) = *([0] + [3448])
	*(($9 + [1664])) = *([0] + [3440])
	*(($9 + [1656])) = *([0] + [3432])
	*(($9 + [496])) = [0]
	*($9 + [488]) = (int_64)0
	$8 = CALL strlen([3456])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$31 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$118 }
	*($9 + [488]) = ($8 << [1])
	$7 = (($9 + [488]) | [1])
	if ( $8 ){ goto $label$117 }
	goto $label$116 
	
.LABEL $label$118
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [488]) = ($4 | [1])
	*($9 + [496]) = $7
	*($9 + [492]) = $8
	
.LABEL $label$117
	CALL memcpy($7, [3456], $8)
	
.LABEL $label$116
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1680]), ($9 + [488]))
	*(($9 + [1712])) = *([0] + [3480])
	*(($9 + [1704])) = *([0] + [3472])
	*(($9 + [1696])) = *([0] + [3464])
	*(($9 + [480])) = [0]
	*($9 + [472]) = (int_64)0
	$8 = CALL strlen([3488])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$30 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$121 }
	*($9 + [472]) = ($8 << [1])
	$7 = (($9 + [472]) | [1])
	if ( $8 ){ goto $label$120 }
	goto $label$119 
	
.LABEL $label$121
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [472]) = ($4 | [1])
	*($9 + [480]) = $7
	*($9 + [476]) = $8
	
.LABEL $label$120
	CALL memcpy($7, [3488], $8)
	
.LABEL $label$119
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1720]), ($9 + [472]))
	*(($9 + [1752])) = *([0] + [3512])
	*(($9 + [1744])) = *([0] + [3504])
	*(($9 + [1736])) = *([0] + [3496])
	*(($9 + [464])) = [0]
	*($9 + [456]) = (int_64)0
	$8 = CALL strlen([3520])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$29 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$124 }
	*($9 + [456]) = ($8 << [1])
	$7 = (($9 + [456]) | [1])
	if ( $8 ){ goto $label$123 }
	goto $label$122 
	
.LABEL $label$124
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [456]) = ($4 | [1])
	*($9 + [464]) = $7
	*($9 + [460]) = $8
	
.LABEL $label$123
	CALL memcpy($7, [3520], $8)
	
.LABEL $label$122
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1760]), ($9 + [456]))
	*(($9 + [1792])) = *([0] + [3552])
	*(($9 + [1784])) = *([0] + [3544])
	*(($9 + [1776])) = *([0] + [3536])
	*(($9 + [448])) = [0]
	*($9 + [440]) = (int_64)0
	$8 = CALL strlen([3568])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$28 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$127 }
	*($9 + [440]) = ($8 << [1])
	$7 = (($9 + [440]) | [1])
	if ( $8 ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$127
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [440]) = ($4 | [1])
	*($9 + [448]) = $7
	*($9 + [444]) = $8
	
.LABEL $label$126
	CALL memcpy($7, [3568], $8)
	
.LABEL $label$125
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1800]), ($9 + [440]))
	*(($9 + [1832])) = *([0] + [3600])
	*(($9 + [1824])) = *([0] + [3592])
	*(($9 + [1816])) = *([0] + [3584])
	*(($9 + [432])) = [0]
	*($9 + [424]) = (int_64)0
	$8 = CALL strlen([3616])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$27 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$130 }
	*($9 + [424]) = ($8 << [1])
	$7 = (($9 + [424]) | [1])
	if ( $8 ){ goto $label$129 }
	goto $label$128 
	
.LABEL $label$130
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [424]) = ($4 | [1])
	*($9 + [432]) = $7
	*($9 + [428]) = $8
	
.LABEL $label$129
	CALL memcpy($7, [3616], $8)
	
.LABEL $label$128
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1840]), ($9 + [424]))
	*(($9 + [1872])) = *([0] + [3648])
	*(($9 + [1864])) = *([0] + [3640])
	*(($9 + [1856])) = *([0] + [3632])
	*(($9 + [416])) = [0]
	*($9 + [408]) = (int_64)0
	$8 = CALL strlen([3664])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$26 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$133 }
	*($9 + [408]) = ($8 << [1])
	$7 = (($9 + [408]) | [1])
	if ( $8 ){ goto $label$132 }
	goto $label$131 
	
.LABEL $label$133
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [408]) = ($4 | [1])
	*($9 + [416]) = $7
	*($9 + [412]) = $8
	
.LABEL $label$132
	CALL memcpy($7, [3664], $8)
	
.LABEL $label$131
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1880]), ($9 + [408]))
	*(($9 + [1912])) = *([0] + [3696])
	*(($9 + [1904])) = *([0] + [3688])
	*(($9 + [1896])) = *([0] + [3680])
	*(($9 + [400])) = [0]
	*($9 + [392]) = (int_64)0
	$8 = CALL strlen([3712])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$136 }
	*($9 + [392]) = ($8 << [1])
	$7 = (($9 + [392]) | [1])
	if ( $8 ){ goto $label$135 }
	goto $label$134 
	
.LABEL $label$136
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [392]) = ($4 | [1])
	*($9 + [400]) = $7
	*($9 + [396]) = $8
	
.LABEL $label$135
	CALL memcpy($7, [3712], $8)
	
.LABEL $label$134
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1920]), ($9 + [392]))
	*(($9 + [1952])) = *([0] + [3744])
	*(($9 + [1944])) = *([0] + [3736])
	*(($9 + [1936])) = *([0] + [3728])
	*(($9 + [384])) = [0]
	*($9 + [376]) = (int_64)0
	$8 = CALL strlen([3760])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$24 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$139 }
	*($9 + [376]) = ($8 << [1])
	$7 = (($9 + [376]) | [1])
	if ( $8 ){ goto $label$138 }
	goto $label$137 
	
.LABEL $label$139
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [376]) = ($4 | [1])
	*($9 + [384]) = $7
	*($9 + [380]) = $8
	
.LABEL $label$138
	CALL memcpy($7, [3760], $8)
	
.LABEL $label$137
	*(($7 + $8)) = [0]
	CALL $155(($9 + [1960]), ($9 + [376]))
	*(($9 + [1992])) = *([0] + [3792])
	*(($9 + [1984])) = *([0] + [3784])
	*(($9 + [1976])) = *([0] + [3776])
	*(($9 + [368])) = [0]
	*($9 + [360]) = (int_64)0
	$8 = CALL strlen([3808])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$23 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$142 }
	*($9 + [360]) = ($8 << [1])
	$7 = (($9 + [360]) | [1])
	if ( $8 ){ goto $label$141 }
	goto $label$140 
	
.LABEL $label$142
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [360]) = ($4 | [1])
	*($9 + [368]) = $7
	*($9 + [364]) = $8
	
.LABEL $label$141
	CALL memcpy($7, [3808], $8)
	
.LABEL $label$140
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2000]), ($9 + [360]))
	*(($9 + [2032])) = *([0] + [3840])
	*(($9 + [2024])) = *([0] + [3832])
	*(($9 + [2016])) = *([0] + [3824])
	*(($9 + [352])) = [0]
	*($9 + [344]) = (int_64)0
	$8 = CALL strlen([3856])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$22 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$145 }
	*($9 + [344]) = ($8 << [1])
	$7 = (($9 + [344]) | [1])
	if ( $8 ){ goto $label$144 }
	goto $label$143 
	
.LABEL $label$145
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [344]) = ($4 | [1])
	*($9 + [352]) = $7
	*($9 + [348]) = $8
	
.LABEL $label$144
	CALL memcpy($7, [3856], $8)
	
.LABEL $label$143
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2040]), ($9 + [344]))
	*(($9 + [2072])) = *([0] + [3888])
	*(($9 + [2064])) = *([0] + [3880])
	*(($9 + [2056])) = *([0] + [3872])
	*(($9 + [336])) = [0]
	*($9 + [328]) = (int_64)0
	$8 = CALL strlen([3904])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$21 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$148 }
	*($9 + [328]) = ($8 << [1])
	$7 = (($9 + [328]) | [1])
	if ( $8 ){ goto $label$147 }
	goto $label$146 
	
.LABEL $label$148
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [328]) = ($4 | [1])
	*($9 + [336]) = $7
	*($9 + [332]) = $8
	
.LABEL $label$147
	CALL memcpy($7, [3904], $8)
	
.LABEL $label$146
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2080]), ($9 + [328]))
	*(($9 + [2112])) = *([0] + [3936])
	*(($9 + [2104])) = *([0] + [3928])
	*(($9 + [2096])) = *([0] + [3920])
	*(($9 + [320])) = [0]
	*($9 + [312]) = (int_64)0
	$8 = CALL strlen([3952])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$20 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$151 }
	*($9 + [312]) = ($8 << [1])
	$7 = (($9 + [312]) | [1])
	if ( $8 ){ goto $label$150 }
	goto $label$149 
	
.LABEL $label$151
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [312]) = ($4 | [1])
	*($9 + [320]) = $7
	*($9 + [316]) = $8
	
.LABEL $label$150
	CALL memcpy($7, [3952], $8)
	
.LABEL $label$149
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2120]), ($9 + [312]))
	*(($9 + [2152])) = *([0] + [3984])
	*(($9 + [2144])) = *([0] + [3976])
	*(($9 + [2136])) = *([0] + [3968])
	*(($9 + [304])) = [0]
	*($9 + [296]) = (int_64)0
	$8 = CALL strlen([4000])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$154 }
	*($9 + [296]) = ($8 << [1])
	$7 = (($9 + [296]) | [1])
	if ( $8 ){ goto $label$153 }
	goto $label$152 
	
.LABEL $label$154
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [296]) = ($4 | [1])
	*($9 + [304]) = $7
	*($9 + [300]) = $8
	
.LABEL $label$153
	CALL memcpy($7, [4000], $8)
	
.LABEL $label$152
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2160]), ($9 + [296]))
	*(($9 + [2192])) = *([0] + [4032])
	*(($9 + [2184])) = *([0] + [4024])
	*(($9 + [2176])) = *([0] + [4016])
	*(($9 + [288])) = [0]
	*($9 + [280]) = (int_64)0
	$8 = CALL strlen([4048])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$157 }
	*($9 + [280]) = ($8 << [1])
	$7 = (($9 + [280]) | [1])
	if ( $8 ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$157
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [280]) = ($4 | [1])
	*($9 + [288]) = $7
	*($9 + [284]) = $8
	
.LABEL $label$156
	CALL memcpy($7, [4048], $8)
	
.LABEL $label$155
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2200]), ($9 + [280]))
	*(($9 + [2232])) = *([0] + [4080])
	*(($9 + [2224])) = *([0] + [4072])
	*(($9 + [2216])) = *([0] + [4064])
	*(($9 + [272])) = [0]
	*($9 + [264]) = (int_64)0
	$8 = CALL strlen([4096])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$160 }
	*($9 + [264]) = ($8 << [1])
	$7 = (($9 + [264]) | [1])
	if ( $8 ){ goto $label$159 }
	goto $label$158 
	
.LABEL $label$160
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [264]) = ($4 | [1])
	*($9 + [272]) = $7
	*($9 + [268]) = $8
	
.LABEL $label$159
	CALL memcpy($7, [4096], $8)
	
.LABEL $label$158
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2240]), ($9 + [264]))
	*(($9 + [2272])) = *([0] + [4128])
	*(($9 + [2264])) = *([0] + [4120])
	*(($9 + [2256])) = *([0] + [4112])
	*(($9 + [256])) = [0]
	*($9 + [248]) = (int_64)0
	$8 = CALL strlen([4144])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$163 }
	*($9 + [248]) = ($8 << [1])
	$7 = (($9 + [248]) | [1])
	if ( $8 ){ goto $label$162 }
	goto $label$161 
	
.LABEL $label$163
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [248]) = ($4 | [1])
	*($9 + [256]) = $7
	*($9 + [252]) = $8
	
.LABEL $label$162
	CALL memcpy($7, [4144], $8)
	
.LABEL $label$161
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2280]), ($9 + [248]))
	*(($9 + [2312])) = *([0] + [4176])
	*(($9 + [2304])) = *([0] + [4168])
	*(($9 + [2296])) = *([0] + [4160])
	*(($9 + [240])) = [0]
	*($9 + [232]) = (int_64)0
	$8 = CALL strlen([4192])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$166 }
	*($9 + [232]) = ($8 << [1])
	$7 = (($9 + [232]) | [1])
	if ( $8 ){ goto $label$165 }
	goto $label$164 
	
.LABEL $label$166
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [232]) = ($4 | [1])
	*($9 + [240]) = $7
	*($9 + [236]) = $8
	
.LABEL $label$165
	CALL memcpy($7, [4192], $8)
	
.LABEL $label$164
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2320]), ($9 + [232]))
	*(($9 + [2352])) = *([0] + [4224])
	*(($9 + [2344])) = *([0] + [4216])
	*(($9 + [2336])) = *([0] + [4208])
	*(($9 + [224])) = [0]
	*($9 + [216]) = (int_64)0
	$8 = CALL strlen([4240])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$169 }
	*($9 + [216]) = ($8 << [1])
	$7 = (($9 + [216]) | [1])
	if ( $8 ){ goto $label$168 }
	goto $label$167 
	
.LABEL $label$169
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [216]) = ($4 | [1])
	*($9 + [224]) = $7
	*($9 + [220]) = $8
	
.LABEL $label$168
	CALL memcpy($7, [4240], $8)
	
.LABEL $label$167
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2360]), ($9 + [216]))
	*(($9 + [2392])) = *([0] + [4272])
	*(($9 + [2384])) = *([0] + [4264])
	*(($9 + [2376])) = *([0] + [4256])
	*(($9 + [208])) = [0]
	*($9 + [200]) = (int_64)0
	$8 = CALL strlen([4288])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$172 }
	*($9 + [200]) = ($8 << [1])
	$7 = (($9 + [200]) | [1])
	if ( $8 ){ goto $label$171 }
	goto $label$170 
	
.LABEL $label$172
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [200]) = ($4 | [1])
	*($9 + [208]) = $7
	*($9 + [204]) = $8
	
.LABEL $label$171
	CALL memcpy($7, [4288], $8)
	
.LABEL $label$170
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2400]), ($9 + [200]))
	*(($9 + [2432])) = *([0] + [4320])
	*(($9 + [2424])) = *([0] + [4312])
	*(($9 + [2416])) = *([0] + [4304])
	*(($9 + [192])) = [0]
	*($9 + [184]) = (int_64)0
	$8 = CALL strlen([4336])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$175 }
	*($9 + [184]) = ($8 << [1])
	$7 = (($9 + [184]) | [1])
	if ( $8 ){ goto $label$174 }
	goto $label$173 
	
.LABEL $label$175
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [184]) = ($4 | [1])
	*($9 + [192]) = $7
	*($9 + [188]) = $8
	
.LABEL $label$174
	CALL memcpy($7, [4336], $8)
	
.LABEL $label$173
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2440]), ($9 + [184]))
	*(($9 + [2472])) = *([0] + [4368])
	*(($9 + [2464])) = *([0] + [4360])
	*(($9 + [2456])) = *([0] + [4352])
	*(($9 + [176])) = [0]
	*($9 + [168]) = (int_64)0
	$8 = CALL strlen([4384])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$178 }
	*($9 + [168]) = ($8 << [1])
	$7 = (($9 + [168]) | [1])
	if ( $8 ){ goto $label$177 }
	goto $label$176 
	
.LABEL $label$178
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [168]) = ($4 | [1])
	*($9 + [176]) = $7
	*($9 + [172]) = $8
	
.LABEL $label$177
	CALL memcpy($7, [4384], $8)
	
.LABEL $label$176
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2480]), ($9 + [168]))
	*(($9 + [2512])) = *([0] + [4416])
	*(($9 + [2504])) = *([0] + [4408])
	*(($9 + [2496])) = *([0] + [4400])
	*(($9 + [160])) = [0]
	*($9 + [152]) = (int_64)0
	$8 = CALL strlen([4432])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$181 }
	*($9 + [152]) = ($8 << [1])
	$7 = (($9 + [152]) | [1])
	if ( $8 ){ goto $label$180 }
	goto $label$179 
	
.LABEL $label$181
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [152]) = ($4 | [1])
	*($9 + [160]) = $7
	*($9 + [156]) = $8
	
.LABEL $label$180
	CALL memcpy($7, [4432], $8)
	
.LABEL $label$179
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2520]), ($9 + [152]))
	*(($9 + [2552])) = *([0] + [4464])
	*(($9 + [2544])) = *([0] + [4456])
	*(($9 + [2536])) = *([0] + [4448])
	*(($9 + [144])) = [0]
	*($9 + [136]) = (int_64)0
	$8 = CALL strlen([4480])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$184 }
	*($9 + [136]) = ($8 << [1])
	$7 = (($9 + [136]) | [1])
	if ( $8 ){ goto $label$183 }
	goto $label$182 
	
.LABEL $label$184
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [136]) = ($4 | [1])
	*($9 + [144]) = $7
	*($9 + [140]) = $8
	
.LABEL $label$183
	CALL memcpy($7, [4480], $8)
	
.LABEL $label$182
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2560]), ($9 + [136]))
	*(($9 + [2592])) = *([0] + [4512])
	*(($9 + [2584])) = *([0] + [4504])
	*(($9 + [2576])) = *([0] + [4496])
	*(($9 + [128])) = [0]
	*($9 + [120]) = (int_64)0
	$8 = CALL strlen([4528])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$187 }
	*($9 + [120]) = ($8 << [1])
	$7 = (($9 + [120]) | [1])
	if ( $8 ){ goto $label$186 }
	goto $label$185 
	
.LABEL $label$187
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [120]) = ($4 | [1])
	*($9 + [128]) = $7
	*($9 + [124]) = $8
	
.LABEL $label$186
	CALL memcpy($7, [4528], $8)
	
.LABEL $label$185
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2600]), ($9 + [120]))
	*(($9 + [2632])) = *([0] + [4560])
	*(($9 + [2624])) = *([0] + [4552])
	*(($9 + [2616])) = *([0] + [4544])
	*(($9 + [112])) = [0]
	*($9 + [104]) = (int_64)0
	$8 = CALL strlen([4576])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$190 }
	*($9 + [104]) = ($8 << [1])
	$7 = (($9 + [104]) | [1])
	if ( $8 ){ goto $label$189 }
	goto $label$188 
	
.LABEL $label$190
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [104]) = ($4 | [1])
	*($9 + [112]) = $7
	*($9 + [108]) = $8
	
.LABEL $label$189
	CALL memcpy($7, [4576], $8)
	
.LABEL $label$188
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2640]), ($9 + [104]))
	*(($9 + [2672])) = *([0] + [4608])
	*(($9 + [2664])) = *([0] + [4600])
	*(($9 + [2656])) = *([0] + [4592])
	*(($9 + [96])) = [0]
	*($9 + [88]) = (int_64)0
	$8 = CALL strlen([4624])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$193 }
	*($9 + [88]) = ($8 << [1])
	$7 = (($9 + [88]) | [1])
	if ( $8 ){ goto $label$192 }
	goto $label$191 
	
.LABEL $label$193
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [88]) = ($4 | [1])
	*($9 + [96]) = $7
	*($9 + [92]) = $8
	
.LABEL $label$192
	CALL memcpy($7, [4624], $8)
	
.LABEL $label$191
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2680]), ($9 + [88]))
	*(($9 + [2712])) = *([0] + [4656])
	*(($9 + [2704])) = *([0] + [4648])
	*(($9 + [2696])) = *([0] + [4640])
	*(($9 + [80])) = [0]
	*($9 + [72]) = (int_64)0
	$8 = CALL strlen([4672])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$196 }
	*($9 + [72]) = ($8 << [1])
	$7 = (($9 + [72]) | [1])
	if ( $8 ){ goto $label$195 }
	goto $label$194 
	
.LABEL $label$196
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [72]) = ($4 | [1])
	*($9 + [80]) = $7
	*($9 + [76]) = $8
	
.LABEL $label$195
	CALL memcpy($7, [4672], $8)
	
.LABEL $label$194
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2720]), ($9 + [72]))
	*(($9 + [2752])) = *([0] + [4704])
	*(($9 + [2744])) = *([0] + [4696])
	*(($9 + [2736])) = *([0] + [4688])
	*(($9 + [64])) = [0]
	*($9 + [56]) = (int_64)0
	$8 = CALL strlen([4720])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$199 }
	*($9 + [56]) = ($8 << [1])
	$7 = (($9 + [56]) | [1])
	if ( $8 ){ goto $label$198 }
	goto $label$197 
	
.LABEL $label$199
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [56]) = ($4 | [1])
	*($9 + [64]) = $7
	*($9 + [60]) = $8
	
.LABEL $label$198
	CALL memcpy($7, [4720], $8)
	
.LABEL $label$197
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2760]), ($9 + [56]))
	*(($9 + [2792])) = *([0] + [4752])
	*(($9 + [2784])) = *([0] + [4744])
	*(($9 + [2776])) = *([0] + [4736])
	*(($9 + [48])) = [0]
	*($9 + [40]) = (int_64)0
	$8 = CALL strlen([4768])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$202 }
	*($9 + [40]) = ($8 << [1])
	$7 = (($9 + [40]) | [1])
	if ( $8 ){ goto $label$201 }
	goto $label$200 
	
.LABEL $label$202
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [40]) = ($4 | [1])
	*($9 + [48]) = $7
	*($9 + [44]) = $8
	
.LABEL $label$201
	CALL memcpy($7, [4768], $8)
	
.LABEL $label$200
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2800]), ($9 + [40]))
	*(($9 + [2832])) = *([0] + [4800])
	*(($9 + [2824])) = *([0] + [4792])
	*(($9 + [2816])) = *([0] + [4784])
	*(($9 + [32])) = [0]
	*($9 + [24]) = (int_64)0
	$8 = CALL strlen([4816])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$205 }
	*($9 + [24]) = ($8 << [1])
	$7 = (($9 + [24]) | [1])
	if ( $8 ){ goto $label$204 }
	goto $label$203 
	
.LABEL $label$205
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [24]) = ($4 | [1])
	*($9 + [32]) = $7
	*($9 + [28]) = $8
	
.LABEL $label$204
	CALL memcpy($7, [4816], $8)
	
.LABEL $label$203
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2840]), ($9 + [24]))
	*(($9 + [2872])) = *([0] + [4848])
	*(($9 + [2864])) = *([0] + [4840])
	*(($9 + [2856])) = *([0] + [4832])
	*(($9 + [16])) = [0]
	*($9 + [8]) = (int_64)0
	$8 = CALL strlen([4864])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$208 }
	*($9 + [8]) = ($8 << [1])
	$7 = (($9 + [8]) | [1])
	if ( $8 ){ goto $label$207 }
	goto $label$206 
	
.LABEL $label$208
	$4 = (($8 + [16]) & [-16])
	$7 = CALL $138($4)
	*($9 + [8]) = ($4 | [1])
	*($9 + [16]) = $7
	*($9 + [12]) = $8
	
.LABEL $label$207
	CALL memcpy($7, [4864], $8)
	
.LABEL $label$206
	$2 = ($0 + [8])
	*(($7 + $8)) = [0]
	CALL $155(($9 + [2880]), ($9 + [8]))
	*(($9 + [2912])) = *([0] + [4896])
	*(($9 + [2904])) = *([0] + [4888])
	*(($9 + [2896])) = *([0] + [4880])
	*(($3 = ($0 + [12]))) = [0]
	*(($6 = ($0 + [16]))) = [0]
	*(($0 + [8])) = $3
	$7 = [0]
	
.LOOP $label$209:
	$4 = (($9 + [840]) + $7)
	$5 = CALL $130($2, $3, ($9 + [2924]), ($9 + [2920]), $4)
	if ( *($5) ){ goto $label$210 }
	$8 = CALL $138([56])
	CALL $155(($8 + [16]), $4)
	*(($8 + [48])) = *(($4 + [32]))
	*(($8 + [40])) = *(($4 + [24]))
	*($8 + [32]) = *(($4 + [16]))
	$4 = *($9 + [2924])
	*($8) = [0]
	*($8 + [4]) = [0]
	*($8 + [8]) = $4
	*($5) = $8
	$4 = *(*($2))
	if ( ($4 == 0) ){ goto $label$211 }
	*($2) = $4
	$8 = *($5)
	
.LABEL $label$211
	CALL $90(*($3), $8)
	*($6) = (*($6) + [1])
	
.LABEL $label$210
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)[2080]) ){ goto $label$209 }
	$8 = [2080]
	
.LOOP $label$212:
	$7 = (($9 + [840]) + $8)
	if ( ((*(($7 + [-40])) & [1]) == 0) ){ goto $label$213 }
	CALL $139(*(($7 + [-32])))
	
.LABEL $label$213
	$8 = ($8 + [-40])
	if ( $8 ){ goto $label$212 }
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$214 }
	CALL $139(*($9 + [16]))
	
.LABEL $label$214
	if ( ((*($9 + [24]) & [1]) == 0) ){ goto $label$215 }
	CALL $139(*($9 + [32]))
	
.LABEL $label$215
	if ( ((*($9 + [40]) & [1]) == 0) ){ goto $label$216 }
	CALL $139(*($9 + [48]))
	
.LABEL $label$216
	if ( ((*($9 + [56]) & [1]) == 0) ){ goto $label$217 }
	CALL $139(*($9 + [64]))
	
.LABEL $label$217
	if ( ((*($9 + [72]) & [1]) == 0) ){ goto $label$218 }
	CALL $139(*($9 + [80]))
	
.LABEL $label$218
	if ( ((*($9 + [88]) & [1]) == 0) ){ goto $label$219 }
	CALL $139(*($9 + [96]))
	
.LABEL $label$219
	if ( ((*($9 + [104]) & [1]) == 0) ){ goto $label$220 }
	CALL $139(*($9 + [112]))
	
.LABEL $label$220
	if ( ((*($9 + [120]) & [1]) == 0) ){ goto $label$221 }
	CALL $139(*($9 + [128]))
	
.LABEL $label$221
	if ( ((*($9 + [136]) & [1]) == 0) ){ goto $label$222 }
	CALL $139(*($9 + [144]))
	
.LABEL $label$222
	if ( ((*($9 + [152]) & [1]) == 0) ){ goto $label$223 }
	CALL $139(*($9 + [160]))
	
.LABEL $label$223
	if ( ((*($9 + [168]) & [1]) == 0) ){ goto $label$224 }
	CALL $139(*($9 + [176]))
	
.LABEL $label$224
	if ( ((*($9 + [184]) & [1]) == 0) ){ goto $label$225 }
	CALL $139(*($9 + [192]))
	
.LABEL $label$225
	if ( ((*($9 + [200]) & [1]) == 0) ){ goto $label$226 }
	CALL $139(*($9 + [208]))
	
.LABEL $label$226
	if ( ((*($9 + [216]) & [1]) == 0) ){ goto $label$227 }
	CALL $139(*($9 + [224]))
	
.LABEL $label$227
	if ( ((*($9 + [232]) & [1]) == 0) ){ goto $label$228 }
	CALL $139(*($9 + [240]))
	
.LABEL $label$228
	if ( ((*($9 + [248]) & [1]) == 0) ){ goto $label$229 }
	CALL $139(*($9 + [256]))
	
.LABEL $label$229
	if ( ((*($9 + [264]) & [1]) == 0) ){ goto $label$230 }
	CALL $139(*($9 + [272]))
	
.LABEL $label$230
	if ( ((*($9 + [280]) & [1]) == 0) ){ goto $label$231 }
	CALL $139(*($9 + [288]))
	
.LABEL $label$231
	if ( ((*($9 + [296]) & [1]) == 0) ){ goto $label$232 }
	CALL $139(*($9 + [304]))
	
.LABEL $label$232
	if ( ((*($9 + [312]) & [1]) == 0) ){ goto $label$233 }
	CALL $139(*($9 + [320]))
	
.LABEL $label$233
	if ( ((*($9 + [328]) & [1]) == 0) ){ goto $label$234 }
	CALL $139(*($9 + [336]))
	
.LABEL $label$234
	if ( ((*($9 + [344]) & [1]) == 0) ){ goto $label$235 }
	CALL $139(*($9 + [352]))
	
.LABEL $label$235
	if ( ((*($9 + [360]) & [1]) == 0) ){ goto $label$236 }
	CALL $139(*($9 + [368]))
	
.LABEL $label$236
	if ( ((*($9 + [376]) & [1]) == 0) ){ goto $label$237 }
	CALL $139(*($9 + [384]))
	
.LABEL $label$237
	if ( ((*($9 + [392]) & [1]) == 0) ){ goto $label$238 }
	CALL $139(*($9 + [400]))
	
.LABEL $label$238
	if ( ((*($9 + [408]) & [1]) == 0) ){ goto $label$239 }
	CALL $139(*($9 + [416]))
	
.LABEL $label$239
	if ( ((*($9 + [424]) & [1]) == 0) ){ goto $label$240 }
	CALL $139(*($9 + [432]))
	
.LABEL $label$240
	if ( ((*($9 + [440]) & [1]) == 0) ){ goto $label$241 }
	CALL $139(*($9 + [448]))
	
.LABEL $label$241
	if ( ((*($9 + [456]) & [1]) == 0) ){ goto $label$242 }
	CALL $139(*($9 + [464]))
	
.LABEL $label$242
	if ( ((*($9 + [472]) & [1]) == 0) ){ goto $label$243 }
	CALL $139(*($9 + [480]))
	
.LABEL $label$243
	if ( ((*($9 + [488]) & [1]) == 0) ){ goto $label$244 }
	CALL $139(*($9 + [496]))
	
.LABEL $label$244
	if ( ((*($9 + [504]) & [1]) == 0) ){ goto $label$245 }
	CALL $139(*($9 + [512]))
	
.LABEL $label$245
	if ( ((*($9 + [520]) & [1]) == 0) ){ goto $label$246 }
	CALL $139(*($9 + [528]))
	
.LABEL $label$246
	if ( ((*($9 + [536]) & [1]) == 0) ){ goto $label$247 }
	CALL $139(*($9 + [544]))
	
.LABEL $label$247
	if ( ((*($9 + [552]) & [1]) == 0) ){ goto $label$248 }
	CALL $139(*($9 + [560]))
	
.LABEL $label$248
	if ( ((*($9 + [568]) & [1]) == 0) ){ goto $label$249 }
	CALL $139(*($9 + [576]))
	
.LABEL $label$249
	if ( ((*($9 + [584]) & [1]) == 0) ){ goto $label$250 }
	CALL $139(*($9 + [592]))
	
.LABEL $label$250
	if ( ((*($9 + [600]) & [1]) == 0) ){ goto $label$251 }
	CALL $139(*($9 + [608]))
	
.LABEL $label$251
	if ( ((*($9 + [616]) & [1]) == 0) ){ goto $label$252 }
	CALL $139(*($9 + [624]))
	
.LABEL $label$252
	if ( ((*($9 + [632]) & [1]) == 0) ){ goto $label$253 }
	CALL $139(*($9 + [640]))
	
.LABEL $label$253
	if ( ((*($9 + [648]) & [1]) == 0) ){ goto $label$254 }
	CALL $139(*($9 + [656]))
	
.LABEL $label$254
	if ( ((*($9 + [664]) & [1]) == 0) ){ goto $label$255 }
	CALL $139(*($9 + [672]))
	
.LABEL $label$255
	if ( ((*($9 + [680]) & [1]) == 0) ){ goto $label$256 }
	CALL $139(*($9 + [688]))
	
.LABEL $label$256
	if ( ((*($9 + [696]) & [1]) == 0) ){ goto $label$257 }
	CALL $139(*($9 + [704]))
	
.LABEL $label$257
	if ( ((*($9 + [712]) & [1]) == 0) ){ goto $label$258 }
	CALL $139(*($9 + [720]))
	
.LABEL $label$258
	if ( ((*($9 + [728]) & [1]) == 0) ){ goto $label$259 }
	CALL $139(*($9 + [736]))
	
.LABEL $label$259
	if ( ((*($9 + [744]) & [1]) == 0) ){ goto $label$260 }
	CALL $139(*($9 + [752]))
	
.LABEL $label$260
	if ( ((*($9 + [760]) & [1]) == 0) ){ goto $label$261 }
	CALL $139(*($9 + [768]))
	
.LABEL $label$261
	if ( ((*($9 + [776]) & [1]) == 0) ){ goto $label$262 }
	CALL $139(*($9 + [784]))
	
.LABEL $label$262
	if ( ((*($9 + [792]) & [1]) == 0) ){ goto $label$263 }
	CALL $139(*($9 + [800]))
	
.LABEL $label$263
	if ( ((*($9 + [808]) & [1]) == 0) ){ goto $label$264 }
	CALL $139(*($9 + [816]))
	
.LABEL $label$264
	if ( ((*($9 + [824]) & [1]) == 0) ){ goto $label$265 }
	CALL $139(*($9 + [832]))
	
.LABEL $label$265
	*(($0 + [32])) = $1
	*($0 + [24]) = $1
	*(($0 + [40])) = (int_64)-1
	*(($0 + [48])) = (int_64)0
	*(($0 + [56])) = [0]
	*(($0 + [62])) = [0]
	*(($0 + [60])) = [0]
	*($0 + [64]) = $1
	*(($0 + [72])) = $1
	*(($0 + [80])) = (int_64)-1
	*(($0 + [88])) = [0]
	*(($0 + [92])) = [0]
	*(($0 + [96])) = [0]
	*(($0 + [100])) = [0]
	*($0 + [104]) = $1
	*(($0 + [112])) = $1
	*(($0 + [120])) = (int_64)-1
	*(($0 + [128])) = [0]
	*(($0 + [132])) = [0]
	*(($0 + [136])) = [0]
	*([0] + [4]) = ($9 + [2928])
	return $0
	
.LABEL $label$52
	CALL $140(($9 + [824]))
	
.LABEL $label$51
	CALL $140(($9 + [808]))
	
.LABEL $label$50
	CALL $140(($9 + [792]))
	
.LABEL $label$49
	CALL $140(($9 + [776]))
	
.LABEL $label$48
	CALL $140(($9 + [760]))
	
.LABEL $label$47
	CALL $140(($9 + [744]))
	
.LABEL $label$46
	CALL $140(($9 + [728]))
	
.LABEL $label$45
	CALL $140(($9 + [712]))
	
.LABEL $label$44
	CALL $140(($9 + [696]))
	
.LABEL $label$43
	CALL $140(($9 + [680]))
	
.LABEL $label$42
	CALL $140(($9 + [664]))
	
.LABEL $label$41
	CALL $140(($9 + [648]))
	
.LABEL $label$40
	CALL $140(($9 + [632]))
	
.LABEL $label$39
	CALL $140(($9 + [616]))
	
.LABEL $label$38
	CALL $140(($9 + [600]))
	
.LABEL $label$37
	CALL $140(($9 + [584]))
	
.LABEL $label$36
	CALL $140(($9 + [568]))
	
.LABEL $label$35
	CALL $140(($9 + [552]))
	
.LABEL $label$34
	CALL $140(($9 + [536]))
	
.LABEL $label$33
	CALL $140(($9 + [520]))
	
.LABEL $label$32
	CALL $140(($9 + [504]))
	
.LABEL $label$31
	CALL $140(($9 + [488]))
	
.LABEL $label$30
	CALL $140(($9 + [472]))
	
.LABEL $label$29
	CALL $140(($9 + [456]))
	
.LABEL $label$28
	CALL $140(($9 + [440]))
	
.LABEL $label$27
	CALL $140(($9 + [424]))
	
.LABEL $label$26
	CALL $140(($9 + [408]))
	
.LABEL $label$25
	CALL $140(($9 + [392]))
	
.LABEL $label$24
	CALL $140(($9 + [376]))
	
.LABEL $label$23
	CALL $140(($9 + [360]))
	
.LABEL $label$22
	CALL $140(($9 + [344]))
	
.LABEL $label$21
	CALL $140(($9 + [328]))
	
.LABEL $label$20
	CALL $140(($9 + [312]))
	
.LABEL $label$19
	CALL $140(($9 + [296]))
	
.LABEL $label$18
	CALL $140(($9 + [280]))
	
.LABEL $label$17
	CALL $140(($9 + [264]))
	
.LABEL $label$16
	CALL $140(($9 + [248]))
	
.LABEL $label$15
	CALL $140(($9 + [232]))
	
.LABEL $label$14
	CALL $140(($9 + [216]))
	
.LABEL $label$13
	CALL $140(($9 + [200]))
	
.LABEL $label$12
	CALL $140(($9 + [184]))
	
.LABEL $label$11
	CALL $140(($9 + [168]))
	
.LABEL $label$10
	CALL $140(($9 + [152]))
	
.LABEL $label$9
	CALL $140(($9 + [136]))
	
.LABEL $label$8
	CALL $140(($9 + [120]))
	
.LABEL $label$7
	CALL $140(($9 + [104]))
	
.LABEL $label$6
	CALL $140(($9 + [88]))
	
.LABEL $label$5
	CALL $140(($9 + [72]))
	
.LABEL $label$4
	CALL $140(($9 + [56]))
	
.LABEL $label$3
	CALL $140(($9 + [40]))
	
.LABEL $label$2
	CALL $140(($9 + [24]))
	
.LABEL $label$1
	CALL $140(($9 + [8]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $8(($9 + [112]))
	CALL $9($0, $1, ($9 + [112]))
	if ( ((*($9 + [144]) & [1]) == 0) ){ goto $label$7 }
	CALL $139(*(($9 + [152])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 <= (int_64)-4992623624440512513) ){ goto $label$14 }
	if ( ((int_64)$2 > (int_64)4229853260945440767) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-4417029266016907920) ){ goto $label$7 }
	*($9 + [76]) = [0]
	*($9 + [72]) = [1]
	*($9 + [32 align=4]) = *($9 + [72])
	CALL $18($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-8966374192761569280) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-7954134664302947328) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-6216093385678127104) ){ goto $label$7 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [2]
	*($9 + [8 align=4]) = *($9 + [96])
	CALL $13($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)4229853260945440768) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$7 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [3]
	*($9 + [24 align=4]) = *($9 + [80])
	CALL $15($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [108]) = [0]
	*($9 + [104]) = [4]
	*($9) = *($9 + [104])
	CALL $11($0, $9)
	goto $label$7 
	
.LABEL $label$11
	*($9 + [92]) = [0]
	*($9 + [88]) = [5]
	*($9 + [16 align=4]) = *($9 + [88])
	CALL $15($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [60]) = [0]
	*($9 + [56]) = [6]
	*($9 + [48 align=4]) = *($9 + [56])
	CALL $21($0, ($9 + [48]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [68]) = [0]
	*($9 + [64]) = [7]
	*($9 + [40 align=4]) = *($9 + [64])
	CALL $15($0, ($9 + [40]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [160])
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [144])
	*([0] + [4]) = $3
	CALL $7(CALL $6($3, $0), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [784])
	*($6 + [56]) = *(($1 + [24]))
	*($6 + [48]) = *($1 + [16])
	$3 = *($3)
	*($1 + [32]) = *($3)
	*(($1 + [44])) = *(($3 + [12]))
	*(($5 = ($1 + [40]))) = *(($3 + [8]))
	*(($1 + [36])) = *(($3 + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [912])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [912])
	$3 = ($1 + [16])
	CALL memcpy(($6 | [8]), $3, [16])
	CALL eosio_assert([1], [912])
	CALL memcpy(($6 + [24]), ($1 + [32]), [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($6 + [32]), $5, [8])
	CALL db_update_i64(*($1 + [52]), $2, $6, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [80]) = *($3)
	*($6 + [88]) = *(($3 + [8]))
	if ( (CALL memcmp(($6 + [48]), ($6 + [80]), [16]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4060986516896743424, ($6 + [64]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx128_update($1, $2, ($6 + [80]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [560])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $138([64])) + [40]) = (int_64)1398362884
	*($4 + [32]) = (int_64)0
	CALL eosio_assert([1], [32])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [96])
	*($4 + [48]) = $0
	CALL $50(($8 + [32]), $4)
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $51($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $139($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $138(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $44(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $29($0, ($1 + [76]))
	CALL $30($0, ($1 + [88]))
	return $0
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = *($0)
	$4 = *($5 + [4])
	$6 = *($4 + [108])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($5)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001536, $7, *($4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$5 = *($0)
	$4 = *($5 + [4])
	$6 = *(($4 + [112]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = *($5)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001537, $7, *($4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($6)
	
.LABEL $label$3
	$6 = *($0)
	$5 = *($6 + [4])
	$0 = *(($5 + [116]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($6)
	$0 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001538, $7, *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx128_remove($0)
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [928])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $138([64])) + [40]) = (int_64)1398362884
	*($4 + [32]) = (int_64)0
	CALL eosio_assert([1], [32])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [96])
	*($4 + [48]) = $1
	CALL $52(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [52])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $51(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $139($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx128_lowerbound(*($8), *($8 + [8]), (int_64)-4060986516896743424, $10, ($10 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [24])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $48($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-4060986516896743424, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [32])
}

int_32 .FUNC $45 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [48])
	*([0] + [4]) = $13
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [160]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [160]
	$11 = (int_64)0
	
.LOOP $label$5:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$3 = ($3 + [165])
	goto $label$7 
	
.LABEL $label$8
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$5 }
	$12 = [0]
	*(($13 + [32])) = [0]
	*($13 + [16]) = (int_64)-1
	*($13 + [8]) = $11
	*($13) = $9
	*($13 + [24]) = (int_64)0
	$6 = CALL db_lowerbound_i64($9, $11, (int_64)-4057297639048043008, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$12 = [1]
	$6 = CALL $54($13, $6)
	if ( (int_64)(((int_64)((int_64)*($6 + [32]) ^ (int_64)$1) | (int_64)((int_64)*(($6 + [40])) ^ (int_64)$2)) == 0) ){ goto $label$11 }
	
.LOOP $label$13:
	CALL eosio_assert([1], [336])
	$6 = CALL db_next_i64(*($6 + [52]), ($13 + [40]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$12 }
	$6 = CALL $54($13, $6)
	if ( ((int_64)((int_64)((int_64)*($6 + [32]) ^ (int_64)$1) | (int_64)((int_64)*(($6 + [40])) ^ (int_64)$2)) != (int_64)0) ){ goto $label$13 }
	$12 = [1]
	$4 = *($13 + [24])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$12 = [0]
	
.LABEL $label$11
	$4 = *($13 + [24])
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$5 = ($13 + [28])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$17 }
	CALL $139($3)
	
.LABEL $label$17
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$16 }
	$6 = *(($13 + [24]))
	goto $label$14 
	
.LABEL $label$15
	$6 = $4
	
.LABEL $label$14
	*($5) = $4
	CALL $139($6)
	
.LABEL $label$9
	*([0] + [4]) = ($13 + [48])
	return $12
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$1 }
	$5 = ($0 + [8])
	
.LOOP $label$2:
	$8 = ($8 + [-24])
	*($5) = $8
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	$6 = ($2 + [88])
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$4 }
	$7 = ($2 + [92])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$6 }
	$4 = ([0] - $3)
	$8 = ($8 + [-12])
	
.LOOP $label$7:
	if ( ((*($8) & [1]) == 0) ){ goto $label$8 }
	CALL $139(*(($8 + [8])))
	
.LABEL $label$8
	$8 = ($8 + [-12])
	if ( ((int_32)($8 + $4) != (int_32)[-12]) ){ goto $label$7 }
	$8 = *($6)
	goto $label$5 
	
.LABEL $label$6
	$8 = $3
	
.LABEL $label$5
	*($7) = $3
	CALL $139($8)
	
.LABEL $label$4
	$8 = *($2 + [76])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($2 + [80])) = $8
	CALL $139($8)
	
.LABEL $label$9
	CALL $139($2)
	
.LABEL $label$3
	$8 = *($5)
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$8 = *($0)
	if ( ($8 == 0) ){ goto $label$10 }
	CALL $139($8)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

int_32 .FUNC $164 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [13424]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $168(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [13904]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [13936]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [13942] ? [13937] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [13906] ? [13904] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [13939]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $162()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [13904]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [13904]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [13888])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [13904])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [13920] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [13904]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [14000] ? [14016] : $30 ) ? ( [13968] ? [13984] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [13904]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [13905]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [13904] ? [13909] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13888])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [13888])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [13888])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([14032], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([14032], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([14032], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $168(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $168(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $168(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $168(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $168(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $168(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $168(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $168(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $168(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $164([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $164($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $164($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC __errno_location ()
{
	return [15948]
}

int_32 .FUNC $161 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [8]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [14048])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [14144]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [14144]
	return .LABEL $label$1
}

void .FUNC $168 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	*($6 + [120]) = $2
	*($6 + [112]) = $1
	$3 = ($0 + [24])
	*($6 + [104]) = $3
	*($6 + [48]) = (int_64)0
	CALL $59(($6 + [96]), ($6 + [104]), ($6 + [48]))
	$5 = *($6 + [100])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	if ( ((int_64)*($5 + [64]) != (int_64)0) ){ goto $label$1 }
	if ( ((int_64)((int_64)((int_64)*($5 + [16]) ^ (int_64)*($6 + [112])) | (int_64)((int_64)*(($5 + [24])) ^ (int_64)*($6 + [120]))) != (int_64)0) ){ goto $label$3 }
	CALL eosio_assert([0], [1168])
	
.LABEL $label$3
	CALL $60(($6 + [96]))
	$5 = *($6 + [100])
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [40])
	$1 = *($5)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$4 }
	$1 = (int_64)0
	$4 = CALL db_lowerbound_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL $36($3, $4)
	*($6 + [52]) = [0]
	*($6 + [48]) = $3
	$1 = *(*(CALL $61(($6 + [48])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*(($0 + [40])) = $1
	
.LABEL $label$4
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [992])
	$1 = *($5)
	CALL $62(($6 + [24]), [1208])
	$5 = CALL $146(($6 + [24]), [1216])
	$4 = ($5 + [8])
	*((($6 + [48]) + [8])) = *($4)
	*($6 + [48]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	CALL _ZNSt3__19to_stringEy(($6 + [8]), $1)
	$5 = *($6 + [8])
	$4 = ($5 & [1])
	$5 = CALL $145(($6 + [48]), ( *($6 + [16]) ? (($6 + [8]) | [1]) : $4 ), ( *($6 + [12]) ? uint_32($5 >> [1]) : $4 ))
	$4 = ($5 + [8])
	*((($6 + [80]) + [8])) = *($4)
	*($6 + [80]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $139(*((($6 + [8]) + [8])))
	
.LABEL $label$6
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$7 }
	CALL $139(*($6 + [56]))
	
.LABEL $label$7
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL $139(*($6 + [32]))
	
.LABEL $label$8
	$5 = *($6 + [80])
	$4 = ($5 & [1])
	CALL sha256(( *($6 + [88]) ? (($6 + [80]) | [1]) : $4 ), ( *($6 + [84]) ? uint_32($5 >> [1]) : $4 ), ($6 + [48]))
	*(($5 = ($6 + [40]))) = (int_64)0
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	$1 = *($0)
	*($6 + [8]) = $0
	*($6 + [12]) = ($6 + [112])
	*($6 + [16]) = ($6 + [48])
	*($6 + [20]) = ($6 + [24])
	CALL $63($6, $3, $1, ($6 + [8]))
	$3 = *($6 + [36])
	if ( ($3 == 0) ){ goto $label$9 }
	$5 = *($5)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$11 }
	$0 = ([0] - $3)
	$5 = ($5 + [-12])
	
.LOOP $label$12:
	if ( ((*($5) & [1]) == 0) ){ goto $label$13 }
	CALL $139(*(($5 + [8])))
	
.LABEL $label$13
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $0) != (int_32)[-12]) ){ goto $label$12 }
	$5 = *(($6 + [36]))
	goto $label$10 
	
.LABEL $label$11
	$5 = $3
	
.LABEL $label$10
	*(($6 + [40])) = $3
	CALL $139($5)
	
.LABEL $label$9
	$5 = *($6 + [24])
	if ( ($5 == 0) ){ goto $label$14 }
	*($6 + [28]) = $5
	CALL $139($5)
	
.LABEL $label$14
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$15 }
	CALL $139(*(($6 + [88])))
	
.LABEL $label$15
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7035924439720001536, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $36($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)7035924439720001536, $5))
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$4), [224])
	
.LABEL $label$4
	*($2 + [108]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$8 = (*([0] + [4]) - [16])
	$12 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$7 = ($4 + [80])
	$6 = *($7)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$9 = ($4 + [64])
	$5 = CALL db_lowerbound_i64(*($9), *(($4 + [72])), (int_64)-4060986516896743424, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $48($9, $5)
	*($12 + [4]) = [0]
	*($12) = $9
	$6 = *(*(CALL $53($12) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [80])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [992])
	*($1) = *($7)
	$4 = *($3 + [4])
	$6 = *($4)
	*(($7 = ($1 + [24]))) = *(($4 + [8]))
	*($1 + [16]) = $6
	$3 = *($3 + [8])
	*($1 + [32]) = *($3)
	*(($4 = ($1 + [40]))) = *(($3 + [8]))
	$8 = $8
	$3 = ($8 + [-48])
	*([0] + [4]) = $3
	CALL eosio_assert([1], [912])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert([1], [912])
	$9 = ($1 + [16])
	CALL memcpy(($8 + [-40]), $9, [16])
	CALL eosio_assert([1], [912])
	CALL memcpy(($8 + [-24]), ($1 + [32]), [8])
	CALL eosio_assert([1], [912])
	CALL memcpy(($8 + [-16]), $4, [8])
	$6 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-4060986516896743424, *(*($0 + [8])), $6, $3, [40])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *(($2 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($12 + [8]) = *($7)
	*($12) = *($9)
	*($1 + [56]) = CALL db_idx128_store($6, (int_64)-4060986516896743424, $10, $11, $12)
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1120])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4060986516896743424)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1056])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1056])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $48(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $138([64])) + [48]) = $0
	*($6 + [8]) = (int_64)0
	CALL $55(($8 + [32]), $6)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $56(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $139($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $139($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx128_lowerbound(*($8), *($8 + [8]), (int_64)7035924439720001538, $10, ($10 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [24])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$4), [224])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $36($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)7035924439720001536, $5))
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$4), [224])
	
.LABEL $label$4
	*(($2 + [116])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [32])
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC $152 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $153($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $153 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $138($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $139($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $150 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [13408], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $152(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $152(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $156 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $138($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_64 .FUNC floor (float_64 $0)
{
	int_64 $1
	int_32 $2
	float_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$1 = (CASTING int_64)(float_64 $0)
	$2 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$2) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ((int_64)$1 < (int_64)0)
	$3 = (float_64))(((float_64)( (float_64)4503599627370496 ? (float_64)-4503599627370496 : $4 ) + (float_64)((float_64)( (float_64)-4503599627370496 ? (float_64)4503599627370496 : $4 ) + (float_64)$0)) - $0)
	if ( ((uint_32)$2 > (uint_32)[1022]) ){ goto $label$2 }
	*($5 + [8]) = $3
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$1 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$3 + (float_64)$0)
	if ( (((float_64)$3 <= (float_64)(float_64)0) | ((float_64)$3 != (float_64)$3)) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

void .FUNC $154 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $138($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_64 .FUNC log10 (float_64 $0)
{
	float_64 $1
	float_64 $2
	float_64 $3
	float_64 $4
	float_64 $5
	float_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$7 = (CASTING int_64)(float_64 $0)
	if ( ((int_64)$7 < (int_64)0) ){ goto $label$5 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	if ( ((uint_32)$8) <= (uint_32)[1048575]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[2146435071]) ){ goto $label$3 }
	$9 = [-1023]
	if ( ((int_64)((int_64)$7 & (int_64)4294967295) != (int_64)0) ){ goto $label$4 }
	$0 = (float_64)0
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_64)((int_64)$7 & (int_64)9223372036854775807) == (int_64)0) ){ goto $label$2 }
	if ( ((int_64)$7 <= (int_64)-1) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 ((float_64)$0 * (float_64)(float_64)18014398509481984))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = [-1077]
	
.LABEL $label$4
	$1 = ((float_64)$0 * (float_64)$0)
	$0 = ((float_64)$1 * (float_64)$1)
	$0 = ((float_64)$0 / (float_64)((float_64)$0 + (float_64)(float_64)2))
	$0 = ((float_64)(float_64))((float_64))($0 - $3) - $2
	$2 = ((float_64)$0 * (float_64)((float_64)$0 * (float_64)(float_64)0.5))
	$0 = ((float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 (($8 & [1048575]) + [1072079006])) << (int_64)32) | (int_64)((int_64)$7 & (int_64)4294967295))) + (float_64)(float_64)-1)
	$3 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 (float_64))($0 - $2)) & (int_64)-4294967296)
	$5 = ((float_64)$3) * (float_64)(float_64)0.4342944818781689
	$8 = ($8 + [614242])
	$4 = (CASTING float_64)(int_32 ($9 + uint_32($8 >> [20])))
	$1 = ((float_64)$4 * (float_64)(float_64)0.30102999566361177)
	$6 = ((float_64)$1 + (float_64)$5)
	$0 = ((float_64)$6) + (float_64)((float_64)((float_64)$5 + (float_64)(float_64))($1 - $6)) + (float_64)((float_64)((float_64)$0 + (float_64)((float_64)$0 * (float_64)((float_64)$2 + (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.15313837699209373) + (float_64)(float_64)0.22222198432149784)) + (float_64)(float_64)0.3999999999940942)) + (float_64)((float_64)$1 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.14798198605116586) + (float_64)(float_64)0.1818357216161805)) + (float_64)(float_64)0.2857142874366239)) + (float_64)(float_64)0.6666666666666735))))))) * (float_64)(float_64)0.4342944818781689) + (float_64)((float_64)((float_64)$4 * (float_64)(float_64)3.694239077158931e-13) + (float_64)((float_64)((float_64)$3 + (float_64)$0) * (float_64)(float_64)2.5082946711645275e-11)))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	return ((float_64)(float_64)-1 / (float_64)((float_64)$0 * (float_64)$0))
	
.LABEL $label$1
	return ((float_64)(float_64))($0 - $0) / (float_64)(float_64)0)
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [912])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [912])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [912])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [912])
	$2 = ($0 + [4])
	CALL memcpy(*($2), $5, [4])
	$7 = (*($2) + [4])
	*($2) = $7
	$5 = ($5 + [4])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$5 = *($0)
	$4 = ($5 + [40])
	$8 = *($4)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$2 = ($5 + [24])
	$3 = CALL db_lowerbound_i64(*($2), *(($5 + [32])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $36($2, $3)
	*($9 + [12]) = [0]
	*($9 + [8]) = $2
	$8 = *(*(CALL $61(($9 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [40])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [992])
	*($1) = *($4)
	$5 = *($0 + [4])
	$8 = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [16]) = $8
	$5 = *($0 + [8])
	*($1 + [32]) = *($5)
	$8 = *(($5 + [8]))
	$6 = *(($5 + [16]))
	$7 = *(($5 + [24]))
	*($1 + [64]) = (int_64)0
	*(($1 + [56])) = $7
	*(($1 + [48])) = $6
	*(($1 + [40])) = $8
	*($1 + [72]) = (CASTING uint_32)(float_64 ((float_64)((float_64)CALL floor((CASTING float_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000)) / (uint_32)[60]))) * (float_64)(float_64)60) + (float_64)(float_64)60))
	$0 = *($0 + [12])
	$5 = ($1 + [76])
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$3 }
	CALL $70($5, *($0), *($0 + [4]))
	CALL $71(($1 + [88]), *($0 + [12]), *(($0 + [16])))
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	$2 = *($0)
	CALL $65(*($0 + [4]), $1)
	$4 = *($1 + [76])
	$8 = *(($1 + [80]))
	$3 = ($8 - $4)
	$9 = (CASTING uint_64)(uint_32 int_32($3 >> [2]))
	$7 = [68]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$2 }
	$7 = (($3 & [-4]) + $7)
	
.LABEL $label$2
	$8 = *(($1 + [88]))
	$3 = *(($1 + [92]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($3 - $8) / (int_32)[12]))
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = *($8)
	$4 = ( *($8 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$7 = ($4 + $7)
	$9 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	$8 = ($8 + [12])
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($7 <= [513]) ){ goto $label$8 }
	$8 = CALL malloc($7)
	goto $label$7 
	
.LABEL $label$8
	$8 = ($11 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$7
	*($10 + [4]) = $8
	*($10) = $8
	*($10 + [8]) = ($8 + $7)
	CALL $66($10, $1)
	$9 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($2 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $9, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL free($8)
	
.LABEL $label$9
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$10 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	$7 = ($2 + [8])
	$9 = *($7)
	$8 = *(($0 + [8]))
	$5 = *($8)
	$6 = *($1)
	*($10 + [16]) = *($1 + [64])
	*($1 + [108]) = CALL db_idx64_store($9, (int_64)7035924439720001536, $5, $6, ($10 + [16]))
	$9 = *($8)
	$5 = *($7)
	$6 = *($1)
	*($10 + [16]) = *($1 + [72])
	*(($1 + [112])) = CALL db_idx64_store($5, (int_64)7035924439720001537, $9, $6, ($10 + [16]))
	$9 = *($8)
	$5 = *($7)
	$6 = *($1)
	*($10 + [24]) = *(($1 + [24]))
	*($10 + [16]) = *($1 + [16])
	*(($1 + [116])) = CALL db_idx128_store($5, (int_64)7035924439720001538, $9, $6, ($10 + [16]))
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	CALL $68(*($1), *($0))
	$2 = *($0 + [4])
	$7 = (CASTING uint_64)(uint_32 ((int_32)(*($2 + [4]) - *($2)) / (int_32)[12]))
	$3 = *($1)
	$1 = *($3 + [4])
	$6 = ($3 + [8])
	$0 = ($3 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$5 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $1) > (int_32)[0]), [912])
	CALL memcpy(*($0), ($8 + [15]), [1])
	$1 = (*($0) + [1])
	*($0) = $1
	if ( $5 ){ goto $label$1 }
	$1 = *(($2 + [4]))
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $69($3, $0)
	$0 = ($0 + [12])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	*($3) = $0
	*($3 + [12]) = ($1 + [88])
	*($3 + [8]) = ($1 + [76])
	CALL $67(($3 + [8]), $3)
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [104]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1120])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035924439720001536)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1056])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1056])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $36(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [336])
	$8 = *($0 + [4])
	$6 = *($8 + [108])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001536, ($9 + [8]), *($8))
	*(*(($0 + [4])) + [108]) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [100]) == (int_32)$2), [224])
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *($2 + [8]), (int_64)7035924439720001536, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $36($2, $6)
	CALL eosio_assert(((int_32)*($7 + [100]) == (int_32)$2), [224])
	
.LABEL $label$5
	*($7 + [108]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [928])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $138([128])) + [76 align=4]) = (int_64)0
	*($3 + [84 align=4]) = (int_64)0
	*($3 + [92 align=4]) = (int_64)0
	*($3 + [100]) = $1
	CALL $64(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [104])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $43(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *(($0 + [88]))
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [92])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$3 = ($3 + [-12])
	
.LOOP $label$7:
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $139(*(($3 + [8])))
	
.LABEL $label$8
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$3 = *(($0 + [88]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $139($3)
	
.LABEL $label$4
	$3 = *($0 + [76])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($0 + [80])) = $3
	CALL $139($3)
	
.LABEL $label$9
	CALL $139($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $138([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1220]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $156($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $143($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$2 }
	$3 = ($2 + [1])
	$12 = ($2 + [8])
	
.LOOP $label$4:
	$4 = ($0 + [16])
	$7 = ($8 & [1])
	$8 = *($2)
	$10 = ($2 + [4])
	$8 = ( *($10) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($0 + [16])
	$11 = ($0 + [20])
	$6 = ( *($11) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$8 }
	$5 = CALL memcmp(( *($12) ? $3 : $7 ), ( *(($0 + [24])) ? ($4 + [1]) : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$8 }
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = *($0)
	if ( $6 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	$7 = ($8 & [1])
	$8 = *($4)
	$8 = ( *($11) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$10 }
	$4 = CALL memcmp(( *(($0 + [24])) ? ($4 + [1]) : $7 ), ( *($12) ? $3 : $5 ), $9)
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	goto $label$3 
	
.LABEL $label$10
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$3 }
	
.LABEL $label$9
	$13 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$3 }
	$0 = $13
	
.LABEL $label$5
	$13 = $0
	$0 = $6
	goto $label$4 
	
.LABEL $label$3
	*($1) = $0
	return $13
	
.LABEL $label$2
	*($1) = $13
	return $13
	
.LABEL $label$1
	*($1) = $0
	return $0
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [76]) & [1]) == 0) ){ goto $label$11 }
	CALL $139(*(($1 + [84])))
	
.LABEL $label$11
	CALL $139($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $139($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $26($0, ($1 + [76]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [68]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $69($0, ($1 + [76]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [68]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [912])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [912])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [912])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [912])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [912])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [912])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [912])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $84($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [912])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [912])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [912])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $84(CALL $85($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [912])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [912])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [912])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [912])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_32 .FUNC $149 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $142($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $145 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $142($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $142($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $147 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $148($0, $1, $2, CALL $184($2))
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	return CALL $145($0, $1, CALL $184($1))
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $142($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $140 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $138(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $139($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $138($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $139($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [560])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $138([112])) + [24]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [32])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [96])
	*($4 + [84]) = [0]
	*($4 + [76 align=4]) = (int_64)0
	*($4 + [88]) = $0
	CALL $87(($8 + [32]), $4)
	*($4 + [92]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [92])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $88($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [76]) & [1]) == 0) ){ goto $label$15 }
	CALL $139(*(($5 + [84])))
	
.LABEL $label$15
	CALL $139($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $73 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [784])
	*($1 + [64]) = (*($1 + [64]) + [1])
	$4 = *($1)
	*($1 + [68]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [848])
	$6 = *($1 + [76])
	$5 = ( *(($1 + [80])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [76])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($6)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL $86($9, $1)
	CALL db_update_i64(*(($1 + [92])), $2, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [2])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [2])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $139($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = [1073741823]
	if ( ((uint_32)int_32($8 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [1])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [2])
	$5 = CALL $138($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [2])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [2])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [2]))
	return (unreachable)
	
.LABEL $label$1
	CALL $154($0)
}

void .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[12])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $139(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $5) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$7 = ($1 + ((int_32)$4 * (int_32)[12]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $141($6, $1)
	$6 = ($6 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$6 = *($1)
	
.LOOP $label$12:
	CALL $155($6, $7)
	$6 = (*($1) + [12])
	*($1) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $139(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $139($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$6 = [357913941]
	$7 = ((int_32)$7 / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[12])
	$6 = CALL $138($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	CALL $155($6, $1)
	$6 = (*($7) + [12])
	*($7) = $6
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $154($0)
}

int_32 .FUNC $76 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $139($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $139($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $139($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $139($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $139($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $139($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $139($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $139($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $138(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $139($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $138([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $35(($8 + [28]), [16])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [912])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [912])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($7 = ($8 + [-16]))) = [0]
	$4 = ($2 + [-4])
	*($1) = *($4)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($7) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($4) = (int_64)0
	*(($7 = ($8 + [-4]))) = [0]
	$4 = ($2 + [8])
	*($1) = *($4)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($7) = *($1)
	*($1) = [0]
	*($4) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$1 = ([0] - $7)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $139($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $139($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $139($7)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $80($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $35($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $81($4, $1)
	CALL $83(CALL $82(CALL $82($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	*(($11 = $12) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [784])
	*((($11 + [48]) + [24])) = *(($1 + [24]))
	*($11 + [64]) = *($1 + [16])
	*($11 + [48]) = *($1 + [64])
	*($11 + [56]) = *($1 + [72])
	*($1 + [64]) = (int_64)2
	$10 = *($1)
	*($11 + [40]) = $10
	CALL eosio_assert([1], [848])
	$6 = *($1 + [76])
	$8 = *(($1 + [80]))
	$5 = ($8 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($5 >> [2]))
	$7 = [68]
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = (($5 & [-4]) + $7)
	
.LABEL $label$2
	$4 = ($0 + [36])
	$8 = *(($1 + [88]))
	$5 = *(($1 + [92]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($5 - $8) / (int_32)[12]))
	
.LOOP $label$3:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = *($8)
	$6 = ( *($8 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$7 = ($6 + $7)
	$9 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$6:
	$7 = ($7 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	$8 = ($8 + [12])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($7 <= [513]) ){ goto $label$8 }
	$8 = CALL malloc($7)
	goto $label$7 
	
.LABEL $label$8
	$8 = ($12 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$7
	*($11 + [28]) = $8
	*($11 + [24]) = $8
	*($11 + [32]) = ($8 + $7)
	CALL $66(($11 + [24]), $1)
	CALL db_update_i64(*(($1 + [104])), $2, $8, $7)
	if ( ($7 <= [513]) ){ goto $label$9 }
	CALL free($8)
	$10 = *($11 + [40])
	
.LABEL $label$9
	if ( (uint_64)($10 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*($11 + [4]) = $1
	*($11) = $0
	*($11 + [12]) = $1
	*($11 + [8]) = ($11 + [48])
	*($11 + [16]) = ($11 + [40])
	*($11 + [20]) = ($11 + [80])
	*($11 + [88]) = $11
	CALL $79(($11 + [88]), $4, ($4 + [1]), ($4 + [2]))
	*([0] + [4]) = ($11 + [96])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$4 = *($0)
	$5 = *($4)
	*($7 + [16]) = *(*($4 + [4]) + [64])
	if ( (CALL memcmp(*($4 + [8]), ($7 + [16]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [108])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7035924439720001536, $7, *(*($4 + [16])))
	*(*(($4 + [12])) + [108]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$1
	$4 = *($0)
	$5 = *($4)
	*($7 + [16]) = *(*($4 + [4]) + [72])
	if ( (CALL memcmp((*($4 + [8]) + [8]), ($7 + [16]), [8]) == 0) ){ goto $label$3 }
	$6 = *((*($4 + [12]) + [112]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7035924439720001537, $7, *(*($4 + [16])))
	*((*(($4 + [12])) + [112])) = $6
	
.LABEL $label$4
	CALL db_idx64_update($6, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$3
	$4 = *($0)
	$6 = *($4)
	$0 = *($4 + [4])
	*($7 + [24]) = *(($0 + [24]))
	*($7 + [16]) = *($0 + [16])
	if ( (CALL memcmp((*($4 + [8]) + [16]), ($7 + [16]), [16]) == 0) ){ goto $label$5 }
	$0 = *((*($4 + [12]) + [116]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = CALL db_idx128_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001538, $7, *(*($4 + [16])))
	*((*(($4 + [12])) + [116])) = $0
	
.LABEL $label$6
	CALL db_idx128_update($0, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $69(*($1), ($2 + [24]))
	*($4 + [8]) = $2
	CALL $99(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [912])
	CALL memcpy(*($3 + [4]), ($2 + [48]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($0)
	*($4) = *($1)
	*($4 + [12]) = ($3 + [81])
	*($4 + [8]) = ($3 + [80])
	*($4 + [16]) = ($3 + [82])
	*($4 + [20]) = ($3 + [83])
	*($4 + [24]) = ($3 + [84])
	*($4 + [28]) = ($3 + [85])
	*($4 + [32]) = ($3 + [86])
	*($4 + [36]) = ($3 + [87])
	*($4 + [40]) = ($3 + [88])
	*($4 + [44]) = ($3 + [89])
	*($4 + [48]) = ($3 + [90])
	*($4 + [52]) = ($3 + [91])
	*($4 + [56]) = ($3 + [92])
	*($4 + [60]) = ($3 + [93])
	*($4 + [64]) = ($3 + [94])
	*($4 + [68]) = ($3 + [95])
	*($4 + [72]) = ($3 + [96])
	*($4 + [76]) = ($3 + [97])
	*($4 + [80]) = ($3 + [98])
	*($4 + [84]) = ($3 + [99])
	*($4 + [88]) = ($3 + [100])
	*($4 + [92]) = ($3 + [101])
	*($4 + [96]) = ($3 + [102])
	*($4 + [100]) = ($3 + [103])
	*($4 + [104]) = ($3 + [104])
	*($4 + [108]) = ($3 + [105])
	*($4 + [112]) = ($3 + [106])
	*($4 + [116]) = ($3 + [107])
	*($4 + [120]) = ($3 + [108])
	*($4 + [124]) = ($3 + [109])
	*($4 + [128]) = ($3 + [110])
	*($4 + [132]) = ($3 + [111])
	*($4 + [136]) = ($3 + [112])
	*($4 + [140]) = ($3 + [113])
	*($4 + [144]) = ($3 + [114])
	*($4 + [148]) = ($3 + [115])
	*($4 + [152]) = ($3 + [116])
	*($4 + [156]) = ($3 + [117])
	*($4 + [160]) = ($3 + [118])
	*($4 + [164]) = ($3 + [119])
	*($4 + [168]) = ($3 + [120])
	*($4 + [172]) = ($3 + [121])
	*($4 + [176]) = ($3 + [122])
	*($4 + [180]) = ($3 + [123])
	*($4 + [184]) = ($3 + [124])
	*($4 + [188]) = ($3 + [125])
	*($4 + [192]) = ($3 + [126])
	*($4 + [196]) = ($3 + [127])
	*($4 + [200]) = ($3 + [128])
	*($4 + [204]) = ($3 + [129])
	*($4 + [208]) = ($3 + [130])
	*($4 + [212]) = ($3 + [131])
	*($4 + [216]) = ($3 + [132])
	*($4 + [220]) = ($3 + [133])
	*($4 + [224]) = ($3 + [134])
	*($4 + [228]) = ($3 + [135])
	*($4 + [232]) = ($3 + [136])
	*($4 + [236]) = ($3 + [137])
	*($4 + [240]) = ($3 + [138])
	*($4 + [244]) = ($3 + [139])
	*($4 + [248]) = ($3 + [140])
	*($4 + [252]) = ($3 + [141])
	*($4 + [256]) = ($3 + [142])
	*($4 + [260]) = ($3 + [143])
	*($4 + [264]) = ($3 + [144])
	*($4 + [268]) = ($3 + [145])
	CALL $100(($4 + [8]), $4)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($3 + [152]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [172])
	*($4 + [8]) = ($3 + [160])
	CALL $67(($4 + [8]), $4)
	*($4 + [8]) = $3
	CALL $101(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [272])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($2 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $103(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [24])
	$2 = *(($1 + [28]))
	*($5 + [24]) = ($5 + [16])
	*($5 + [16]) = [24]
	$2 = ( $2 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($2 + [24])
	$4 = (CASTING uint_64)(uint_32 $2)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($5 + [16]) = $3
	*($5) = $1
	CALL $97($5, ($5 + [24]))
	$3 = *($5 + [16])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $35($0, $3)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$2 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = $2
	*($5 + [16]) = $5
	*($5 + [24]) = $1
	CALL $98(($5 + [24]), ($5 + [16]))
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [432])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [496])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [76]) & [1]) == 0) ){ goto $label$7 }
	CALL $139(*(($4 + [84])))
	
.LABEL $label$7
	CALL $139($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [76]) & [1]) == 0) ){ goto $label$10 }
	CALL $139(*(($4 + [84])))
	
.LABEL $label$10
	CALL $139($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [92])))
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [272])
	*([0] + [4]) = $8
	*(($6 = *($1))) = (*($6) + [32])
	$2 = *($0)
	*($8) = *($1)
	*($8 + [12]) = ($2 + [81])
	*($8 + [8]) = ($2 + [80])
	*($8 + [16]) = ($2 + [82])
	*($8 + [20]) = ($2 + [83])
	*($8 + [24]) = ($2 + [84])
	*($8 + [28]) = ($2 + [85])
	*($8 + [32]) = ($2 + [86])
	*($8 + [36]) = ($2 + [87])
	*($8 + [40]) = ($2 + [88])
	*($8 + [44]) = ($2 + [89])
	*($8 + [48]) = ($2 + [90])
	*($8 + [52]) = ($2 + [91])
	*($8 + [56]) = ($2 + [92])
	*($8 + [60]) = ($2 + [93])
	*($8 + [64]) = ($2 + [94])
	*($8 + [68]) = ($2 + [95])
	*($8 + [72]) = ($2 + [96])
	*($8 + [76]) = ($2 + [97])
	*($8 + [80]) = ($2 + [98])
	*($8 + [84]) = ($2 + [99])
	*($8 + [88]) = ($2 + [100])
	*($8 + [92]) = ($2 + [101])
	*($8 + [96]) = ($2 + [102])
	*($8 + [100]) = ($2 + [103])
	*($8 + [104]) = ($2 + [104])
	*($8 + [108]) = ($2 + [105])
	*($8 + [112]) = ($2 + [106])
	*($8 + [116]) = ($2 + [107])
	*($8 + [120]) = ($2 + [108])
	*($8 + [124]) = ($2 + [109])
	*($8 + [128]) = ($2 + [110])
	*($8 + [132]) = ($2 + [111])
	*($8 + [136]) = ($2 + [112])
	*($8 + [140]) = ($2 + [113])
	*($8 + [144]) = ($2 + [114])
	*($8 + [148]) = ($2 + [115])
	*($8 + [152]) = ($2 + [116])
	*($8 + [156]) = ($2 + [117])
	*($8 + [160]) = ($2 + [118])
	*($8 + [164]) = ($2 + [119])
	*($8 + [168]) = ($2 + [120])
	*($8 + [172]) = ($2 + [121])
	*($8 + [176]) = ($2 + [122])
	*($8 + [180]) = ($2 + [123])
	*($8 + [184]) = ($2 + [124])
	*($8 + [188]) = ($2 + [125])
	*($8 + [192]) = ($2 + [126])
	*($8 + [196]) = ($2 + [127])
	*($8 + [200]) = ($2 + [128])
	*($8 + [204]) = ($2 + [129])
	*($8 + [208]) = ($2 + [130])
	*($8 + [212]) = ($2 + [131])
	*($8 + [216]) = ($2 + [132])
	*($8 + [220]) = ($2 + [133])
	*($8 + [224]) = ($2 + [134])
	*($8 + [228]) = ($2 + [135])
	*($8 + [232]) = ($2 + [136])
	*($8 + [236]) = ($2 + [137])
	*($8 + [240]) = ($2 + [138])
	*($8 + [244]) = ($2 + [139])
	*($8 + [248]) = ($2 + [140])
	*($8 + [252]) = ($2 + [141])
	*($8 + [256]) = ($2 + [142])
	*($8 + [260]) = ($2 + [143])
	*($8 + [264]) = ($2 + [144])
	*($8 + [268]) = ($2 + [145])
	CALL $102(($8 + [8]), $8)
	*(($0 = *($1))) = (*($0) + [8])
	$5 = *($2 + [160])
	$6 = *(($2 + [164]))
	$4 = ($6 - $5)
	$7 = (CASTING uint_64)(uint_32 int_32($4 >> [2]))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$0 = (($4 & [-4]) + $0)
	
.LABEL $label$2
	*($3) = $0
	$6 = *(($2 + [172]))
	$4 = *(($2 + [176]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($4 - $6) / (int_32)[12]))
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	*($3) = $0
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$5 = *($6)
	$7 = (CASTING uint_64)(uint_32 ( *($6 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	
.LOOP $label$6:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	*($3) = $0
	$5 = *($6)
	$5 = ( *(($6 + [4])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	if ( ($5 == 0) ){ goto $label$7 }
	$0 = ($5 + $0)
	*($3) = $0
	
.LABEL $label$7
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$4
	$0 = *($2 + [184])
	$7 = (CASTING uint_64)(uint_32 ( *(($2 + [188])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$6 = *($1)
	$0 = *($6)
	
.LOOP $label$8:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$8 }
	*($6) = $0
	$2 = *(($2 + [184]))
	$2 = ( *(($2 + [188])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$9 }
	*($6) = ($2 + $0)
	
.LABEL $label$9
	*(($0 = *($1))) = (*($0) + [16])
	*(($0 = *($1))) = (*($0) + [16])
	*([0] + [4]) = ($8 + [272])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $3
	if ( $3 ){ goto $label$3 }
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( *($2 + [12]) ){ goto $label$3 }
	$3 = *($2 + [8])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$8 }
	if ( *($4 + [12]) ){ goto $label$8 }
	$4 = ($4 + [12])
	goto $label$9 
	
.LABEL $label$10
	$4 = *($3 + [4])
	if ( ($4 == 0) ){ goto $label$6 }
	if ( *($4 + [12]) ){ goto $label$6 }
	$4 = ($4 + [12])
	
.LABEL $label$9
	*(($2 + [12])) = [1]
	$2 = ((int_32)$3 == (int_32)$0)
	*($3 + [12]) = $2
	*($4) = [1]
	$1 = $3
	if ( ($2 == 0) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$5 }
	$4 = $2
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$2 }
	$4 = *($2 + [4])
	$1 = *($4)
	*($2 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$11
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*($4) = $2
	$3 = *($4 + [8])
	goto $label$1 
	
.LABEL $label$5
	$4 = *($2)
	$1 = *($4 + [4])
	*($2) = $1
	if ( ($1 == 0) ){ goto $label$12 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$12
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*(($4 + [4])) = $2
	$3 = *($4 + [8])
	
.LABEL $label$4
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3 + [4])
	$4 = *($2)
	*($3 + [4]) = $4
	if ( ($4 == 0) ){ goto $label$13 }
	*($4 + [8]) = $3
	
.LABEL $label$13
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*($2) = $3
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3)
	$4 = *($2 + [4])
	*($3) = $4
	if ( ($4 == 0) ){ goto $label$14 }
	*($4 + [8]) = $3
	
.LABEL $label$14
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*(($2 + [4])) = $3
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), ($0 + [32]))
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $35($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [912])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [912])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $84(CALL $85($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($3 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($1 + [4]), ($3 + [32]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((int_32)(*($1 + [8]) - $0) > (int_32)[7]), [912])
	CALL memcpy(*($1 + [4]), ($3 + [40]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [13404])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $139 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($0 + [4])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$13 }
	$6 = ($1 + [16])
	$8 = ($10 & [1])
	$10 = *($4)
	$10 = ( *($4 + [4]) ? uint_32($10 >> [1]) : $8 )
	$7 = ($11 & [1])
	$11 = *($1 + [16])
	$11 = ( *($1 + [20]) ? uint_32($11 >> [1]) : $7 )
	$9 = ( $11 ? $10 : ($11 <= $10) )
	if ( ($9 == 0) ){ goto $label$14 }
	$7 = CALL memcmp(( *($4 + [8]) ? ($4 + [1]) : $8 ), ( *($1 + [24]) ? ($6 + [1]) : $7 ), $9)
	if ( ($7 == 0) ){ goto $label$14 }
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$12 }
	
.LABEL $label$13
	if ( ((int_32)*($0) == (int_32)$1) ){ goto $label$11 }
	$10 = *($1)
	if ( ($10 == 0) ){ goto $label$7 }
	
.LOOP $label$15:
	$11 = $10
	$10 = *($11 + [4])
	if ( $10 ){ goto $label$15 }
	goto $label$6 
	
.LABEL $label$12
	$8 = ($10 & [1])
	$10 = *(($1 + [16]))
	$10 = ( *(($1 + [20])) ? uint_32($10 >> [1]) : $8 )
	$7 = ($11 & [1])
	$11 = *($4)
	$11 = ( *(($4 + [4])) ? uint_32($11 >> [1]) : $7 )
	$9 = ( $11 ? $10 : ($11 <= $10) )
	if ( ($9 == 0) ){ goto $label$10 }
	$6 = CALL memcmp(( *($1 + [24]) ? ($6 + [1]) : $8 ), ( *($4 + [8]) ? ($4 + [1]) : $7 ), $9)
	if ( ($6 == 0) ){ goto $label$10 }
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$11
	$11 = $1
	if ( *($1) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$10
	if ( ((uint_32)$10 >= (uint_32)$11) ){ goto $label$8 }
	
.LABEL $label$9
	$11 = *($1 + [4])
	if ( ($11 == 0) ){ goto $label$2 }
	
.LOOP $label$16:
	$10 = $11
	$11 = *($10)
	if ( $11 ){ goto $label$16 }
	goto $label$1 
	
.LABEL $label$8
	*($2) = $1
	*($3) = $1
	return $3
	
.LABEL $label$7
	$10 = $1
	
.LOOP $label$17:
	$11 = *($10 + [8])
	$3 = ((int_32)*($11) == (int_32)$10)
	$10 = $11
	if ( $3 ){ goto $label$17 }
	
.LABEL $label$6
	$5 = ($3 & [1])
	$3 = *($11 + [16])
	$3 = ( *(($11 + [20])) ? uint_32($3 >> [1]) : $5 )
	$6 = ($10 & [1])
	$10 = *($4)
	$10 = ( *($4 + [4]) ? uint_32($10 >> [1]) : $6 )
	$7 = ( $10 ? $3 : ($10 <= $3) )
	if ( ($7 == 0) ){ goto $label$19 }
	$6 = CALL memcmp(( *(($11 + [24])) ? (($11 + [16]) + [1]) : $5 ), ( *($4 + [8]) ? ($4 + [1]) : $6 ), $7)
	if ( ($6 == 0) ){ goto $label$19 }
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((uint_32)$3 >= (uint_32)$10) ){ goto $label$4 }
	
.LABEL $label$18
	if ( (*($1) == 0) ){ goto $label$3 }
	
.LABEL $label$5
	*($2) = $11
	return ($11 + [4])
	
.LABEL $label$4
	return CALL $89($0, $2, $4)
	
.LABEL $label$3
	*($2) = $1
	return $1
	
.LABEL $label$2
	$10 = *($1 + [8])
	if ( ((int_32)*($10) == (int_32)$1) ){ goto $label$1 }
	$3 = ($1 + [8])
	
.LOOP $label$20:
	$11 = *($3)
	$3 = ($11 + [8])
	$10 = *($11 + [8])
	if ( ((int_32)$11 != (int_32)*($10)) ){ goto $label$20 }
	
.LABEL $label$1
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$23 }
	$5 = ($3 & [1])
	$3 = *($4)
	$3 = ( *(($4 + [4])) ? uint_32($3 >> [1]) : $5 )
	$6 = ($11 & [1])
	$11 = *($10 + [16])
	$11 = ( *($10 + [20]) ? uint_32($11 >> [1]) : $6 )
	$7 = ( $11 ? $3 : ($11 <= $3) )
	if ( ($7 == 0) ){ goto $label$24 }
	$6 = CALL memcmp(( *($4 + [8]) ? ($4 + [1]) : $5 ), ( *($10 + [24]) ? (($10 + [16]) + [1]) : $6 ), $7)
	if ( ($6 == 0) ){ goto $label$24 }
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$22 }
	goto $label$23 
	
.LABEL $label$24
	if ( ((uint_32)$3 >= (uint_32)$11) ){ goto $label$22 }
	
.LABEL $label$23
	$11 = ($1 + [4])
	if ( (*($11) == 0) ){ goto $label$21 }
	*($2) = $10
	return $10
	
.LABEL $label$22
	return CALL $89($0, $2, $4)
	
.LABEL $label$21
	*($2) = $1
	return $11
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $132([4904], $0)
}

int_32 .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $133($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [13312])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $133 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [13398]) == 0) ){ goto $label$2 }
	$7 = *([0] + [13400])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [13398]) = [1]
	$7 = ($7 << [16])
	*([0] + [13400]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [13400])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [13400]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [13398]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [13398]) = [1]
	$3 = ($3 << [16])
	*([0] + [13400]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [13400])
	
.LABEL $label$8
	*([0] + [13400]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [13288])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [13096]
	$1 = (((int_32)$2 * (int_32)[12]) + [13096])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$4 = ($1 + [-8])
	$3 = ($1 + [-4])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$0 = ($1 - $5)
	$11 = int_32($0 >> [2])
	if ( ((uint_32)$11 <= (uint_32)[5]) ){ goto $label$12 }
	if ( ((int_32)$0 <= (int_32)[123]) ){ goto $label$11 }
	$12 = ($5 + (((int_32)$11 / (int_32)[2]) << [2]))
	if ( ((int_32)$0 < (int_32)[3997]) ){ goto $label$13 }
	$0 = (((int_32)$11 / (int_32)[4]) << [2])
	$10 = CALL $136($5, ($5 + $0), $12, ($12 + $0), $3, $2)
	goto $label$7 
	
.LABEL $label$13
	$0 = *($3)
	$6 = *($5)
	$11 = *($12)
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$16 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$15 }
	*($5) = $0
	*($3) = $6
	$10 = [1]
	goto $label$7 
	
.LABEL $label$16
	$10 = [0]
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$7 }
	*($12) = $0
	*($3) = $11
	$10 = [1]
	$11 = *($5)
	$0 = *($12)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$7 }
	*($5) = $0
	*($12) = $11
	goto $label$14 
	
.LABEL $label$15
	*($5) = $11
	*($12) = $6
	$10 = [1]
	$0 = *($3)
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$7 }
	*($12) = $0
	*($3) = $6
	
.LABEL $label$14
	$10 = [2]
	goto $label$7 
	
.LABEL $label$12
	goto $label$6 
	
.LABEL $label$17
	$11 = *($5)
	$0 = *($3)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($3) = $11
	return 
	
.LABEL $label$11
	$0 = *($5 + [8])
	$6 = *($5)
	$11 = *($5 + [4])
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$22 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$21 }
	*($5) = $0
	*(($5 + [8])) = $6
	goto $label$20 
	
.LABEL $label$22
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$19 }
	*(($5 + [8])) = $11
	*(($7 = ($5 + [4]))) = $0
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$18 }
	*($5) = $0
	*($7) = $6
	goto $label$18 
	
.LABEL $label$21
	*($5) = $11
	*(($11 = ($5 + [4]))) = $6
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$19 }
	*(($5 + [8])) = $6
	*($11) = $0
	
.LABEL $label$20
	$11 = $6
	goto $label$18 
	
.LABEL $label$19
	$11 = $0
	
.LABEL $label$18
	$8 = ($5 + [12])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$6 }
	$12 = [8]
	
.LOOP $label$23:
	$7 = *($8)
	if ( ((uint_32)$7 >= (uint_32)$11) ){ goto $label$24 }
	$0 = $12
	
.LOOP $label$28:
	*((($6 = ($5 + $0)) + [4])) = $11
	if ( ($0 == 0) ){ goto $label$27 }
	$0 = ($0 + [-4])
	$11 = *(($6 + [-4]))
	if ( ($7 <= $11) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$0 = $5
	goto $label$25 
	
.LABEL $label$26
	$0 = (($5 + $0) + [4])
	
.LABEL $label$25
	*($0) = $7
	
.LABEL $label$24
	$0 = ($8 + [4])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	$12 = ($12 + [4])
	$11 = *($8)
	$8 = $0
	goto $label$23 
	
.LABEL $label$10
	$11 = *($5 + [8])
	$6 = *($5)
	$0 = *($5 + [4])
	if ( ((uint_32)$0 >= (uint_32)$6) ){ goto $label$33 }
	if ( ((uint_32)$11 >= (uint_32)$0) ){ goto $label$32 }
	*($5) = $11
	*(($5 + [8])) = $6
	goto $label$31 
	
.LABEL $label$33
	if ( ((uint_32)$11 >= (uint_32)$0) ){ goto $label$30 }
	*(($5 + [8])) = $0
	*(($7 = ($5 + [4]))) = $11
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$29 }
	*($5) = $11
	*($7) = $6
	goto $label$29 
	
.LABEL $label$32
	*($5) = $0
	*(($0 = ($5 + [4]))) = $6
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$30 }
	*(($5 + [8])) = $6
	*($0) = $11
	
.LABEL $label$31
	$0 = $6
	goto $label$29 
	
.LABEL $label$30
	$0 = $11
	
.LABEL $label$29
	$11 = *($3)
	if ( ((uint_32)$11 >= (uint_32)$0) ){ goto $label$6 }
	*(($6 = ($5 + [8]))) = $11
	*($3) = $0
	$11 = ($5 + [4])
	$7 = *($11)
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)$7) ){ goto $label$6 }
	*($6) = $7
	*($11) = $0
	$11 = *($5)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$6 }
	*($5) = $0
	*(($5 + [4])) = $11
	return 
	
.LABEL $label$9
	CALL $136($5, ($5 + [4]), ($5 + [8]), ($5 + [12]), $3, $2)
	return 
	
.LABEL $label$8
	$0 = *($3)
	$6 = *($5)
	$11 = *($5 + [4])
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$35 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$34 }
	*($5) = $0
	*($3) = $6
	return 
	
.LABEL $label$35
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$6 }
	*(($6 = ($5 + [4]))) = $0
	*($3) = $11
	$11 = *($5)
	$0 = *($6)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($6) = $11
	return 
	
.LABEL $label$34
	*($5) = $11
	*(($0 = ($5 + [4]))) = $6
	$11 = *($3)
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$6 }
	*($0) = $11
	*($3) = $6
	return 
	
.LABEL $label$7
	$6 = *($12)
	$8 = *($5)
	if ( ($8 <= $6) ){ goto $label$37 }
	$0 = $4
	
.LOOP $label$40:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$39 }
	$11 = *($0)
	$7 = ($0 + [-4])
	$0 = $7
	if ( ((uint_32)$11 >= (uint_32)$6) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$12 = ($5 + [4])
	$6 = *($3)
	if ( ($8 <= $6) ){ goto $label$41 }
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$12 = ($5 + [8])
	
.LOOP $label$43:
	$0 = ($12 + [-4])
	$11 = *($0)
	if ( ($8 <= $11) ){ goto $label$42 }
	$12 = ($12 + [4])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$43 }
	goto $label$6 
	
.LABEL $label$42
	*($0) = $6
	*($3) = $11
	
.LABEL $label$41
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$11 = $3
	
.LOOP $label$44:
	$0 = ($12 + [-4])
	$6 = *($5)
	
.LOOP $label$45:
	$0 = ($0 + [4])
	$7 = *($0)
	if ( ((uint_32)$6 >= (uint_32)$7) ){ goto $label$45 }
	$12 = ($0 + [4])
	
.LOOP $label$46:
	$11 = ($11 + [-4])
	$8 = *($11)
	if ( ($6 <= $8) ){ goto $label$46 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$5 }
	*($0) = $8
	*($11) = $7
	goto $label$44 
	
.LABEL $label$38
	*($5) = $11
	*(($11 = ($7 + [4]))) = $8
	$10 = ($10 + [1])
	goto $label$36 
	
.LABEL $label$37
	$11 = $3
	
.LABEL $label$36
	$9 = ($5 + [4])
	if ( ((uint_32)$9 >= (uint_32)$11) ){ goto $label$47 }
	
.LOOP $label$48:
	$0 = ($9 + [-4])
	$6 = *($12)
	
.LOOP $label$49:
	$0 = ($0 + [4])
	$7 = *($0)
	if ( ($7 <= $6) ){ goto $label$49 }
	$9 = ($0 + [4])
	
.LOOP $label$50:
	$11 = ($11 + [-4])
	$8 = *($11)
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$50 }
	if ( ((uint_32)$0 > (uint_32)$11) ){ goto $label$51 }
	*($0) = $8
	*($11) = $7
	$12 = ( $11 ? $12 : ((int_32)$12 == (int_32)$0) )
	$10 = ($10 + [1])
	goto $label$48 
	
.LABEL $label$51
	$9 = $0
	
.LABEL $label$47
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$52 }
	$11 = *($9)
	$0 = *($12)
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$52 }
	*($9) = $0
	*($12) = $11
	$10 = ($10 + [1])
	
.LABEL $label$52
	if ( $10 ){ goto $label$54 }
	$11 = CALL $137($5, $9, $2)
	$0 = ($9 + [4])
	if ( CALL $137($0, $1, $2) ){ goto $label$53 }
	if ( $11 ){ goto $label$2 }
	
.LABEL $label$54
	if ( ((int_32)($9 - $5) >= (int_32)($1 - $9)) ){ goto $label$3 }
	CALL $135($5, $9, $2)
	$0 = ($9 + [4])
	goto $label$2 
	
.LABEL $label$53
	$1 = $9
	$0 = $5
	if ( ($11 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	return 
	
.LABEL $label$5
	$5 = $0
	goto $label$4 
	
.LABEL $label$3
	CALL $135(($9 + [4]), $1, $2)
	$1 = $9
	$0 = $5
	goto $label$1 
	$11
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = *($2)
	$6 = *($0)
	$8 = *($1)
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$4 }
	*($0) = $7
	*($2) = $6
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$2 }
	*($1) = $7
	*($2) = $8
	$9 = [1]
	$6 = *($0)
	$7 = *($1)
	if ( ((uint_32)$7 >= (uint_32)$6) ){ goto $label$1 }
	*($0) = $7
	*($1) = $6
	$8 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $8
	*($1) = $6
	$9 = [1]
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$1 }
	*($1) = $8
	*($2) = $6
	$9 = [2]
	
.LABEL $label$3
	$8 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = $7
	
.LABEL $label$1
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)$8) ){ goto $label$6 }
	*($2) = $7
	*($3) = $8
	$7 = *($1)
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$8 }
	*($1) = $8
	*($2) = $7
	$7 = *($0)
	$8 = *($1)
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$7 }
	*($0) = $8
	*($1) = $7
	$9 = ($9 + [3])
	goto $label$6 
	
.LABEL $label$8
	$9 = ($9 + [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = ($9 + [2])
	
.LABEL $label$6
	$7 = *($3)
	$8 = *($4)
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$12 }
	*($3) = $8
	*($4) = $7
	$7 = *($2)
	$8 = *($3)
	if ( ((uint_32)$8 >= (uint_32)$7) ){ goto $label$11 }
	*($2) = $8
	*($3) = $7
	$3 = *($1)
	$8 = *($2)
	if ( ((uint_32)$8 >= (uint_32)$3) ){ goto $label$10 }
	*($1) = $8
	*($2) = $3
	$8 = *($0)
	$2 = *($1)
	if ( ((uint_32)$2 >= (uint_32)$8) ){ goto $label$9 }
	*($0) = $2
	*($1) = $8
	$9 = ($9 + [4])
	
.LABEL $label$12
	return $9
	
.LABEL $label$11
	return ($9 + [1])
	
.LABEL $label$10
	return ($9 + [2])
	
.LABEL $label$9
	return ($9 + [3])
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = int_32(($1 - $0) >> [2])
	if ( ((uint_32)$6 > (uint_32)[5]) ){ goto $label$17 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$18
	$5 = *($0)
	$6 = ($1 + [-4])
	$2 = *($6)
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$1 }
	*($0) = $2
	*($6) = $5
	goto $label$1 
	
.LABEL $label$17
	$8 = *($0 + [8])
	$2 = *($0)
	$6 = *($0 + [4])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$13 }
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$10 }
	*($0) = $8
	*(($0 + [8])) = $2
	goto $label$9 
	
.LABEL $label$16
	$5 = ($1 + [-4])
	$6 = *($5)
	$4 = *($0)
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$12 }
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$2 }
	*($0) = $6
	*($5) = $4
	goto $label$1 
	
.LABEL $label$15
	CALL $136($0, ($0 + [4]), ($0 + [8]), ($0 + [12]), ($1 + [-4]), $2)
	goto $label$1 
	
.LABEL $label$14
	$4 = ($1 + [-4])
	$2 = *($0 + [8])
	$5 = *($0)
	$6 = *($0 + [4])
	if ( ((uint_32)$6 >= (uint_32)$5) ){ goto $label$11 }
	if ( ((uint_32)$2 >= (uint_32)$6) ){ goto $label$6 }
	*($0) = $2
	*(($0 + [8])) = $5
	goto $label$5 
	
.LABEL $label$13
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$8 }
	*(($0 + [8])) = $6
	*(($5 = ($0 + [4]))) = $8
	if ( ((uint_32)$8 >= (uint_32)$2) ){ goto $label$7 }
	*($0) = $8
	*($5) = $2
	goto $label$7 
	
.LABEL $label$12
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$1 }
	*(($4 = ($0 + [4]))) = $6
	*($5) = $2
	$2 = *($0)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$1 }
	*($0) = $6
	*($4) = $2
	goto $label$1 
	
.LABEL $label$11
	if ( ((uint_32)$2 >= (uint_32)$6) ){ goto $label$4 }
	*(($0 + [8])) = $6
	*(($3 = ($0 + [4]))) = $2
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$3 }
	*($0) = $2
	*($3) = $5
	goto $label$3 
	
.LABEL $label$10
	*($0) = $6
	*(($6 = ($0 + [4]))) = $2
	if ( ((uint_32)$8 >= (uint_32)$2) ){ goto $label$8 }
	*(($0 + [8])) = $2
	*($6) = $8
	
.LABEL $label$9
	$6 = $2
	goto $label$7 
	
.LABEL $label$8
	$6 = $8
	
.LABEL $label$7
	$4 = ($0 + [12])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$20 }
	$7 = [0]
	$3 = [8]
	
.LOOP $label$21:
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$22 }
	$8 = $3
	
.LOOP $label$26:
	*((($2 = ($0 + $8)) + [4])) = $6
	if ( ($8 == 0) ){ goto $label$25 }
	$8 = ($8 + [-4])
	$6 = *(($2 + [-4]))
	if ( ($5 <= $6) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$8 = $0
	goto $label$23 
	
.LABEL $label$24
	$8 = (($0 + $8) + [4])
	
.LABEL $label$23
	*($8) = $5
	$7 = ($7 + [1])
	if ( ((int_32)$7 == (int_32)[8]) ){ goto $label$19 }
	
.LABEL $label$22
	$8 = ($4 + [4])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$20 }
	$3 = ($3 + [4])
	$6 = *($4)
	$4 = $8
	goto $label$21 
	
.LABEL $label$20
	$8 = ([0] | [1])
	goto $label$1 
	
.LABEL $label$19
	$8 = (((int_32)($4 + [4]) == (int_32)$1) | [0])
	goto $label$1 
	
.LABEL $label$6
	*($0) = $6
	*(($6 = ($0 + [4]))) = $5
	if ( ((uint_32)$2 >= (uint_32)$5) ){ goto $label$4 }
	*(($0 + [8])) = $5
	*($6) = $2
	
.LABEL $label$5
	$6 = $5
	goto $label$3 
	
.LABEL $label$4
	$6 = $2
	
.LABEL $label$3
	$2 = *($4)
	if ( ((uint_32)$2 >= (uint_32)$6) ){ goto $label$1 }
	*(($5 = ($0 + [8]))) = $2
	*($4) = $6
	$2 = ($0 + [4])
	$4 = *($2)
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)$4) ){ goto $label$1 }
	*($5) = $4
	*($2) = $6
	$2 = *($0)
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$1 }
	*($0) = $6
	*(($0 + [4])) = $2
	goto $label$1 
	
.LABEL $label$2
	*($0) = $2
	*(($6 = ($0 + [4]))) = $4
	$2 = *($5)
	if ( ((uint_32)$2 >= (uint_32)$4) ){ goto $label$1 }
	*($6) = $2
	*($5) = $4
	
.LABEL $label$1
	$6
	return ($8 & [1])
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $26($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $138(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $139(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $139($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [32])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [96])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $129($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $9 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	float_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	float_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [416])
	*([0] + [4]) = $19
	$12 = *($2)
	*($19 + [384]) = $12
	$16 = *($2 + [8])
	*(($19 + [376])) = *(($2 + [24]))
	*($19 + [368]) = *($2 + [16])
	CALL $155(($19 + [352]), ($2 + [32]))
	CALL require_auth($12)
	$15 = *($0)
	if ( ((int_64)$12 == (int_64)$15) ){ goto $label$6 }
	if ( ((int_64)$16 != (int_64)$15) ){ goto $label$6 }
	$13 = [0]
	if ( ((uint_64)((int_64)*($19 + [368]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$12 = (uint_64)*($19 + [376]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$13 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$13 = [0]
	
.LABEL $label$7
	CALL eosio_assert($13, [1808])
	CALL eosio_assert(((int_64)*($19 + [368]) > (int_64)0), [1840])
	if ( CALL $111($0, *($19 + [384])) ){ goto $label$6 }
	*($19 + [344]) = [0]
	*($19 + [340]) = [0]
	$3 = (($19 + [336]) | [4])
	*($19 + [336]) = $3
	CALL $112(($19 + [320]), $0, ($19 + [352]), [44])
	$13 = *($19 + [320])
	if ( ((int_32)*($19 + [324]) == (int_32)$13) ){ goto $label$13 }
	$8 = (($19 + [336]) + [8])
	$2 = [0]
	$14 = [0]
	
.LOOP $label$14:
	$13 = CALL $149(($13 + $2), [58], [0])
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$12 }
	$7 = (*($19 + [320]) + $2)
	CALL $156($19, $7, [0], $13, $7)
	$7 = (*($19 + [320]) + $2)
	CALL $156(($19 + [200]), $7, ($13 + [1]), [-1], $7)
	$7 = CALL $113(($19 + [336]), ($19 + [160]), $19)
	$13 = *($7)
	if ( $13 ){ goto $label$15 }
	$13 = CALL $138([40])
	CALL $155(($13 + [16]), $19)
	*($13) = (int_64)0
	*($13 + [8]) = *($19 + [160])
	*($13 + [32]) = [0]
	*($13 + [28]) = [0]
	*($13 + [36]) = [0]
	*($7) = $13
	$10 = $13
	$4 = *(*($19 + [336]))
	if ( ($4 == 0) ){ goto $label$16 }
	*($19 + [336]) = $4
	$10 = *($7)
	
.LABEL $label$16
	CALL $90(*($19 + [340]), $10)
	*($8) = (*($8) + [1])
	
.LABEL $label$15
	CALL $141(($13 + [28]), ($19 + [200]))
	if ( ((*($19 + [200]) & [1]) == 0) ){ goto $label$17 }
	CALL $139(*((($19 + [200]) + [8])))
	
.LABEL $label$17
	if ( ((*($19) & [1]) == 0) ){ goto $label$18 }
	CALL $139(*(($19 + [8])))
	
.LABEL $label$18
	$2 = ($2 + [12])
	$13 = *($19 + [320])
	$14 = ($14 + [1])
	if ( ($14 <= ((int_32)(*($19 + [324]) - $13) / (int_32)[12])) ){ goto $label$14 }
	
.LABEL $label$13
	*(($19 + [8])) = [0]
	*($19) = (int_64)0
	$2 = CALL strlen([1872])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$21 }
	*($19) = ($2 << [1])
	$13 = ($19 | [1])
	if ( $2 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$14 = (($2 + [16]) & [-16])
	$13 = CALL $138($14)
	*($19) = ($14 | [1])
	*($19 + [8]) = $13
	*($19 + [4]) = $2
	
.LABEL $label$20
	CALL memcpy($13, [1872], $2)
	
.LABEL $label$19
	*(($13 + $2)) = [0]
	$2 = CALL $114(($19 + [336]), $19)
	if ( ((*($19) & [1]) == 0) ){ goto $label$22 }
	CALL $139(*($19 + [8]))
	
.LABEL $label$22
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$12 }
	CALL $155(($19 + [304]), ($2 + [28]))
	$12 = *($19 + [376])
	*($19 + [288]) = $12
	*($19 + [296]) = $1
	CALL eosio_assert(CALL $45($0, $12, $1), [1888])
	$2 = *($19 + [304])
	$13 = CALL strlen([1920])
	if ( ((int_32)$13 != (int_32)( *($19 + [308]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$23 }
	if ( CALL $150(($19 + [304]), [0], [-1], [1920], $13) ){ goto $label$23 }
	*($19 + [280]) = (int_64)0
	*(($19 + [8])) = [0]
	*($19) = (int_64)0
	$2 = CALL strlen([1936])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$26 }
	*($19) = ($2 << [1])
	$13 = ($19 | [1])
	if ( $2 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$14 = (($2 + [16]) & [-16])
	$13 = CALL $138($14)
	*($19) = ($14 | [1])
	*($19 + [8]) = $13
	*($19 + [4]) = $2
	
.LABEL $label$25
	CALL memcpy($13, [1936], $2)
	
.LABEL $label$24
	*(($13 + $2)) = [0]
	$2 = CALL $114(($19 + [336]), $19)
	if ( ((*($19) & [1]) == 0) ){ goto $label$27 }
	CALL $139(*($19 + [8]))
	
.LABEL $label$27
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$31 }
	if ( (*($2 + [28]) & [1]) ){ goto $label$30 }
	$2 = (($2 + [28]) + [1])
	goto $label$29 
	
.LABEL $label$31
	$12 = *($19 + [280])
	goto $label$28 
	
.LABEL $label$30
	$2 = *($2 + [36])
	
.LABEL $label$29
	$12 = (CASTING int_64)(int_32 CALL atoi($2))
	*($19 + [280]) = $12
	
.LABEL $label$28
	$10 = *(($0 + [48]))
	$14 = *(($0 + [52]))
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$32 }
	$2 = ($14 + [-24])
	$7 = ([0] - $10)
	
.LOOP $label$33:
	if ( ((int_64)*(*($2)) == (int_64)$12) ){ goto $label$32 }
	$14 = $2
	$13 = ($2 + [-24])
	$2 = $13
	if ( ((int_32)($13 + $7) != (int_32)[-24]) ){ goto $label$33 }
	
.LABEL $label$32
	$13 = ($0 + [24])
	if ( ((int_32)$14 == (int_32)$10) ){ goto $label$35 }
	$2 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$13), [224])
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	$14 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7035924439720001536, $12)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$34 }
	$2 = CALL $36($13, $14)
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$13), [224])
	
.LABEL $label$34
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1616])
	CALL eosio_assert((int_64)(*($2 + [64]) == 0), [1648])
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000)) <= *($2 + [72])), [1952])
	CALL eosio_assert((int_64)(((int_64)((int_64)*($19 + [288]) ^ (int_64)*($2 + [16])) | (int_64)((int_64)*($19 + [296]) ^ (int_64)*(($2 + [24])))) == 0), [1968])
	*($19 + [272]) = ($0 + [64])
	CALL $46($19, ($19 + [272]), ($19 + [288]))
	$2 = [0]
	$13 = *($19 + [4])
	if ( ($13 == 0) ){ goto $label$36 }
	$2 = ( $13 ? [0] : (int_64)(((int_64)((int_64)*($19 + [288]) ^ (int_64)*($13 + [16])) | (int_64)((int_64)*($19 + [296]) ^ (int_64)*(($13 + [24])))) == 0) )
	
.LABEL $label$36
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [2000])
	CALL eosio_assert(((int_64)*((($19 + [368]) + [8])) == (int_64)*(($2 + [40]))), [2032])
	CALL eosio_assert(((int_64)*($19 + [368]) >= (int_64)*($2 + [32])), [2096])
	*((($19 + [256]) + [8])) = [0]
	*($19 + [256]) = (int_64)0
	$2 = CALL strlen([2128])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$39 }
	*($19 + [256]) = ($2 << [1])
	$13 = (($19 + [256]) | [1])
	if ( $2 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$14 = (($2 + [16]) & [-16])
	$13 = CALL $138($14)
	*($19 + [256]) = ($14 | [1])
	*($19 + [264]) = $13
	*($19 + [260]) = $2
	
.LABEL $label$38
	CALL memcpy($13, [2128], $2)
	
.LABEL $label$37
	*(($13 + $2)) = [0]
	*(($19 + [8])) = [0]
	*($19) = (int_64)0
	$2 = CALL strlen([2144])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$42 }
	*($19) = ($2 << [1])
	$13 = ($19 | [1])
	if ( $2 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$14 = (($2 + [16]) & [-16])
	$13 = CALL $138($14)
	*($19) = ($14 | [1])
	*($19 + [8]) = $13
	*($19 + [4]) = $2
	
.LABEL $label$41
	CALL memcpy($13, [2144], $2)
	
.LABEL $label$40
	*(($13 + $2)) = [0]
	$2 = CALL $114(($19 + [336]), $19)
	if ( ((*($19) & [1]) == 0) ){ goto $label$43 }
	CALL $139(*($19 + [8]))
	
.LABEL $label$43
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$44 }
	CALL $141(($19 + [256]), ($2 + [28]))
	$2 = ( *($19 + [264]) ? (($19 + [256]) | [1]) : (*($19 + [256]) & [1]) )
	$13 = [-1]
	
.LOOP $label$45:
	$14 = ($2 + $13)
	$7 = ($13 + [1])
	$13 = $7
	if ( *(($14 + [1])) ){ goto $label$45 }
	$17 = (CASTING uint_64)(uint_32 $7)
	$12 = (int_64)0
	$16 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$46:
	$15 = (int_64)0
	if ( ((uint_64)$12 >= (uint_64)$17) ){ goto $label$47 }
	$13 = *($2)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$13 = ($13 + [165])
	goto $label$48 
	
.LABEL $label$49
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$47
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$51 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	goto $label$50 
	
.LABEL $label$51
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$50
	$2 = ($2 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$11 = ((int_64)$15 | (int_64)$11)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$46 }
	$2 = CALL is_account($11)
	if ( ((int_64)$11 == (int_64)*($19 + [384])) ){ goto $label$52 }
	if ( ((int_32)$2 ^ (int_32)[1]) ){ goto $label$52 }
	if ( (CALL $111($0, $11) == 0) ){ goto $label$44 }
	
.LABEL $label$52
	CALL $144(($19 + [256]), [2128])
	
.LABEL $label$44
	*(($19 + [248])) = [0]
	*($19 + [240]) = (int_64)0
	$2 = CALL strlen([2128])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$55 }
	*($19 + [240]) = ($2 << [1])
	$13 = (($19 + [240]) | [1])
	if ( $2 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$14 = (($2 + [16]) & [-16])
	$13 = CALL $138($14)
	*($19 + [240]) = ($14 | [1])
	*($19 + [248]) = $13
	*($19 + [244]) = $2
	
.LABEL $label$54
	CALL memcpy($13, [2128], $2)
	
.LABEL $label$53
	*(($13 + $2)) = [0]
	*(($19 + [8])) = [0]
	*($19) = (int_64)0
	$2 = CALL strlen([2160])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$58 }
	*($19) = ($2 << [1])
	$13 = ($19 | [1])
	if ( $2 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$14 = (($2 + [16]) & [-16])
	$13 = CALL $138($14)
	*($19) = ($14 | [1])
	*($19 + [8]) = $13
	*($19 + [4]) = $2
	
.LABEL $label$57
	CALL memcpy($13, [2160], $2)
	
.LABEL $label$56
	*(($13 + $2)) = [0]
	$2 = CALL $114(($19 + [336]), $19)
	if ( ((*($19) & [1]) == 0) ){ goto $label$59 }
	CALL $139(*($19 + [8]))
	
.LABEL $label$59
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$60 }
	CALL $141(($19 + [240]), ($2 + [28]))
	
.LABEL $label$60
	$8 = ($0 + [12])
	$14 = ($0 + [8])
	CALL eosio_assert(((int_32)CALL $106($14, ($19 + [240])) != (int_32)$8), [1744])
	$12 = (int_64)0
	$16 = (int_64)59
	$2 = [1520]
	$11 = (int_64)0
	
.LOOP $label$61:
	$15 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$62 }
	$13 = *($2)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$64 }
	$13 = ($13 + [165])
	goto $label$63 
	
.LABEL $label$64
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$63
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($13 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$62
	$2 = ($2 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$11 = ((int_64)$15 | (int_64)$11)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$61 }
	*((($19 + [200]) + [32])) = [0]
	*($19 + [208]) = $11
	*($19 + [200]) = $1
	*($19 + [216]) = (int_64)-1
	$2 = ($19 + [376])
	$12 = *($2)
	*($19 + [224]) = (int_64)0
	$13 = CALL $115(($19 + [200]), (uint_64)$12 >> (uint_64)(int_64)8), [2176]
	$12 = *($13))
	$15 = *($13 + [8])
	CALL eosio_assert(((int_64)*($2) == (int_64)$15), [2208])
	$12 = (int_64)
	CALL eosio_assert(((int_64)$12($12 - *($19 + [368]))) > (int_64)-4611686018427387904), [2256])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [2288])
	*($19 + [176]) = (int_64)-1
	*($19 + [184]) = [0]
	$16 = *($19 + [280])
	$11 = *($0)
	*($19 + [160]) = $11
	*($19 + [168]) = $16
	*(($19 + [188])) = [0]
	*((($19 + [160]) + [32])) = [0]
	$2 = CALL db_lowerbound_i64($11, $16, (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$65 }
	$2 = CALL $72(($19 + [160]), $2)
	
.LOOP $label$66:
	CALL eosio_assert(((int_64)*(($2 + [56])) == (int_64)$15), [2208])
	$12 = (int_64)
	CALL eosio_assert(((int_64)$12($12 - *($2 + [48]))) > (int_64)-4611686018427387904), [2256])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [2288])
	CALL eosio_assert([1], [336])
	$2 = CALL db_next_i64(*($2 + [92]), $19)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$65 }
	$2 = CALL $72(($19 + [160]), $2)
	goto $label$66 
	
.LABEL $label$65
	*($19 + [152]) = [0]
	*($19 + [148]) = [0]
	*($19 + [144]) = (($19 + [144]) | [4])
	$13 = *($14)
	if ( ((int_32)$13 == (int_32)$8) ){ goto $label$67 }
	$11 = (uint_64)$15 >> (uint_64)(int_64)8)
	$5 = (CASTING float_64)(int_64 $12)
	$10 = ($19 + [8])
	
.LOOP $label$68:
	$14 = $13
	$9 = ((float_64)*($14 + [48]) / (float_64)(float_64)100)
	$16 = (Rounds 0)(CALL floor(((float_64)((float_64)$9 * (float_64)((float_64)$5 / (float_64)CALL floor(((float_64)CALL $158((float_64)1e-05) / (float_64)CALL $158($9))))) / (float_64)(float_64))((float_64)1 - $9)))
	CALL eosio_assert((uint_64)(((int_64)$16) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$7 = ($14 + [16])
	$2 = [0]
	$12 = $11
	
.LOOP $label$70:
	$13 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$69 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$71 }
	
.LOOP $label$72:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$69 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$72 }
	
.LABEL $label$71
	$13 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$70 }
	
.LABEL $label$69
	CALL eosio_assert($13, [96])
	CALL $155($19, $7)
	*(($7 = ($19 + [16]))) = $16
	$13 = CALL $116(($19 + [144]), ($19 + [48]), $19)
	if ( *($13) ){ goto $label$73 }
	*((($2 = CALL $138([40])) + [24])) = *($10)
	*($2 + [16 align=4]) = *($19)
	*($10) = [0]
	*($19) = (int_64)0
	*($2 + [32]) = *($7)
	$7 = *($19 + [48])
	*($2) = [0]
	*($2 + [4]) = [0]
	*($2 + [8]) = $7
	*($13) = $2
	$7 = *(*($19 + [144]))
	if ( ($7 == 0) ){ goto $label$74 }
	*($19 + [144]) = $7
	$2 = *($13)
	
.LABEL $label$74
	CALL $90(*($19 + [148]), $2)
	*(($2 = (($19 + [144]) + [8]))) = (*($2) + [1])
	
.LABEL $label$73
	if ( ((*($19) & [1]) == 0) ){ goto $label$75 }
	CALL $139(*($10))
	
.LABEL $label$75
	$2 = *($14 + [4])
	if ( ($2 == 0) ){ goto $label$77 }
	
.LOOP $label$78:
	$13 = $2
	$2 = *($13)
	if ( $2 ){ goto $label$78 }
	goto $label$76 
	
.LABEL $label$77
	$13 = *($14 + [8])
	if ( ((int_32)*($13) == (int_32)$14) ){ goto $label$76 }
	$14 = ($14 + [8])
	
.LOOP $label$79:
	$2 = *($14)
	$14 = ($2 + [8])
	$13 = *($2 + [8])
	if ( ((int_32)$2 != (int_32)*($13)) ){ goto $label$79 }
	
.LABEL $label$76
	if ( ((int_32)$13 != (int_32)$8) ){ goto $label$68 }
	
.LABEL $label$67
	$2 = CALL db_lowerbound_i64(*($19 + [160]), *((($19 + [160]) + [8])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$81 }
	$13 = CALL $72(($19 + [160]), $2)
	$9 = (float_64)100
	$10 = (($19 + [144]) + [8])
	
.LOOP $label$82:
	$5 = (CASTING float_64)(int_64 *($13 + [48]))
	$7 = ($13 + [76])
	$14 = CALL $116(($19 + [144]), $19, $7)
	$2 = *($14)
	if ( $2 ){ goto $label$83 }
	$2 = CALL $138([40])
	CALL $155(($2 + [16]), $7)
	*($2) = (int_64)0
	*($2 + [8]) = *($19)
	*($14) = $2
	*($2 + [32]) = (int_64)0
	$7 = $2
	$8 = *(*($19 + [144]))
	if ( ($8 == 0) ){ goto $label$84 }
	*($19 + [144]) = $8
	$7 = *($14)
	
.LABEL $label$84
	CALL $90(*($19 + [148]), $7)
	*($10) = (*($10) + [1])
	
.LABEL $label$83
	$12 = *(($2 + [32]))
	CALL eosio_assert([1], [336])
	$9 = ((float_64)$9 + (float_64)((float_64)((float_64)$5 / (float_64)(CASTING float_64)(uint_64 $12)) * (float_64)(float_64)-100))
	$2 = CALL db_next_i64(*($13 + [92]), $19)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$85 }
	$13 = CALL $72(($19 + [160]), $2)
	goto $label$82 
	
.LABEL $label$85
	$14 = ($19 + [144])
	goto $label$80 
	
.LABEL $label$81
	$9 = (float_64)100
	$14 = ($19 + [144])
	
.LABEL $label$80
	$13 = CALL $116($14, $19, ($19 + [240]))
	$2 = *($13)
	if ( $2 ){ goto $label$86 }
	$2 = CALL $138([40])
	CALL $155(($2 + [16]), ($19 + [240]))
	*($2) = (int_64)0
	*($2 + [8]) = *($19)
	*($13) = $2
	*($2 + [32]) = (int_64)0
	$7 = $2
	$10 = *(*($19 + [144]))
	if ( ($10 == 0) ){ goto $label$87 }
	*($19 + [144]) = $10
	$7 = *($13)
	
.LABEL $label$87
	CALL $90(*($19 + [148]), $7)
	*(($13 = ($19 + [152]))) = (*($13) + [1])
	
.LABEL $label$86
	$9 = CALL floor(((float_64)((float_64)$9 * (float_64)(CASTING float_64)(uint_64 *(($2 + [32])))) / (float_64)(float_64)100))
	*($19 + [136]) = $15
	$12 = (Rounds 0)($9)
	*($19 + [128]) = $12
	CALL eosio_assert((uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$12 = (uint_64)*($19 + [136]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$90:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$89 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$91 }
	
.LOOP $label$92:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$89 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$92 }
	
.LABEL $label$91
	$13 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$89
	$13 = [0]
	
.LABEL $label$88
	CALL eosio_assert($13, [96])
	CALL $117(($19 + [128]))
	CALL eosio_assert(((int_64)*((($19 + [368]) + [8])) == (int_64)*((($19 + [128]) + [8]))), [2032])
	CALL eosio_assert(((int_64)*($19 + [368]) <= (int_64)*($19 + [128])), [2320])
	$2 = ($19 + [176])
	$12 = *($2)
	if ( ((int_64)$12 != (int_64)-1) ){ goto $label$93 }
	$12 = (int_64)0
	$13 = CALL db_lowerbound_i64(*($19 + [160]), *((($19 + [160]) + [8])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$94 }
	CALL $72(($19 + [160]), $13)
	*($19 + [4]) = [0]
	*($19) = ($19 + [160])
	$12 = *(*(CALL $118($19) + [4]))
	$12 = ( (int_64)-2 ? ((int_64)$12 + (int_64)1) : ((uint_64)$12 > (uint_64)(int_64)-3) )
	
.LABEL $label$94
	*(($19 + [176])) = $12
	
.LABEL $label$93
	CALL eosio_assert((uint_64)($12 <= (int_64)-2), [992])
	*($19 + [120]) = *($2)
	$12 = *($0)
	*($19 + [4]) = ($19 + [280])
	*($19) = ($19 + [120])
	*($19 + [8]) = ($19 + [384])
	*($19 + [12]) = ($19 + [256])
	*($19 + [16]) = ($19 + [288])
	*($19 + [20]) = ($19 + [368])
	*($19 + [24]) = ($19 + [240])
	CALL $119(($19 + [48]), ($19 + [160]), $12, $19)
	CALL $62(($19 + [400]), [1208])
	$2 = CALL $147(($19 + [400]), [0], [2352])
	$13 = ($2 + [8])
	*((($19 + [48]) + [8])) = *($13)
	*($19 + [48]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($13) = [0]
	$2 = CALL $146(($19 + [48]), [2368])
	$13 = ($2 + [8])
	*(($19 + [8])) = *($13)
	*($19) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($13) = [0]
	CALL _ZNSt3__19to_stringEy(($19 + [88]), *($19 + [120]))
	$2 = *($19 + [88])
	$13 = ($2 & [1])
	$2 = CALL $145($19, ( *($19 + [96]) ? (($19 + [88]) | [1]) : $13 ), ( *($19 + [92]) ? uint_32($2 >> [1]) : $13 ))
	$13 = ($2 + [8])
	*((($19 + [104]) + [8])) = *($13)
	*($19 + [104]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($13) = [0]
	if ( ((*($19 + [88]) & [1]) == 0) ){ goto $label$95 }
	CALL $139(*(($19 + [96])))
	
.LABEL $label$95
	if ( ((*($19) & [1]) == 0) ){ goto $label$96 }
	CALL $139(*($19 + [8]))
	
.LABEL $label$96
	if ( ((*($19 + [48]) & [1]) == 0) ){ goto $label$97 }
	CALL $139(*($19 + [56]))
	
.LABEL $label$97
	if ( ((*($19 + [400]) & [1]) == 0) ){ goto $label$98 }
	CALL $139(*($19 + [408]))
	
.LABEL $label$98
	$6 = *($0)
	$12 = (int_64)0
	$15 = (int_64)59
	$2 = [1584]
	$11 = (int_64)0
	
.LOOP $label$99:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$104 }
	$13 = *($2)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$103 }
	$13 = ($13 + [165])
	goto $label$102 
	
.LABEL $label$104
	$16 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$101 }
	goto $label$100 
	
.LABEL $label$103
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$102
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$101
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$100
	$2 = ($2 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$11 = ((int_64)$16 | (int_64)$11)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$99 }
	$12 = (int_64)0
	$15 = (int_64)59
	$2 = [16]
	$17 = (int_64)0
	
.LOOP $label$105:
	if ( ((uint_64)$12 > (uint_64)(int_64)7) ){ goto $label$110 }
	$13 = *($2)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$109 }
	$13 = ($13 + [165])
	goto $label$108 
	
.LABEL $label$110
	$16 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$109
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$108
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $13) << (int_64)56) >> (int_64)56)
	
.LABEL $label$107
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$106
	$2 = ($2 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$105 }
	$12 = (int_64)0
	$16 = (int_64)59
	$2 = [1520]
	$18 = (int_64)0
	
.LOOP $label$111:
	$15 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$112 }
	$13 = *($2)
	if ( ((uint_32)(($13 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$114 }
	$13 = ($13 + [165])
	goto $label$113 
	
.LABEL $label$114
	$13 = ( ($13 + [208]) ? [0] : ((($13 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$113
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($13 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$112
	$2 = ($2 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$18 = ((int_64)$15 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$111 }
	*(($19 + [20])) = *($19 + [372])
	*($19 + [8]) = $18
	*(($19 + [28])) = *(($19 + [380]))
	*(($19 + [24])) = *(($19 + [376]))
	*($19) = $6
	*($19 + [16]) = *($19 + [368])
	CALL $155(($19 + [32]), ($19 + [104]))
	*(($13 = (($19 + [48]) + [24]))) = [0]
	*($19 + [56]) = $17
	*($19 + [48]) = $1
	*($19 + [64]) = (int_64)0
	*(($2 = CALL $138([16]))) = $6
	*($2 + [8]) = $11
	*((($19 + [48]) + [32])) = [0]
	$7 = ($2 + [16])
	*($13) = $7
	*((($19 + [48]) + [20])) = $7
	*($19 + [64]) = $2
	*($19 + [76]) = [0]
	*((($19 + [48]) + [36])) = [0]
	$2 = *($19 + [32])
	$13 = ( *(($19 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($13 + [32])
	$12 = (CASTING uint_64)(uint_32 $13)
	$13 = (($19 + [48]) + [28])
	
.LOOP $label$115:
	$2 = ($2 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$115 }
	if ( ($2 == 0) ){ goto $label$117 }
	CALL $35($13, $2)
	$13 = *(($19 + [80]))
	$2 = *(($19 + [76]))
	goto $label$116 
	
.LABEL $label$117
	$13 = [0]
	$2 = [0]
	
.LABEL $label$116
	*($19 + [404]) = $2
	*($19 + [400]) = $2
	*($19 + [408]) = $13
	*($19 + [392]) = ($19 + [400])
	*($19 + [88]) = $19
	CALL $120(($19 + [88]), ($19 + [392]))
	CALL $92(($19 + [400]), ($19 + [48]))
	$2 = *($19 + [400])
	CALL send_inline($2, (*($19 + [404]) - $2))
	$2 = *($19 + [400])
	if ( ($2 == 0) ){ goto $label$118 }
	*($19 + [404]) = $2
	CALL $139($2)
	
.LABEL $label$118
	$2 = *($19 + [76])
	if ( ($2 == 0) ){ goto $label$119 }
	*(($19 + [80])) = $2
	CALL $139($2)
	
.LABEL $label$119
	$2 = *($19 + [64])
	if ( ($2 == 0) ){ goto $label$120 }
	*(($19 + [68])) = $2
	CALL $139($2)
	
.LABEL $label$120
	if ( ((*($19 + [32]) & [1]) == 0) ){ goto $label$121 }
	CALL $139(*(($19 + [40])))
	
.LABEL $label$121
	if ( ((*($19 + [104]) & [1]) == 0) ){ goto $label$122 }
	CALL $139(*($19 + [112]))
	
.LABEL $label$122
	CALL $121($14, *($19 + [148]))
	$14 = *($19 + [184])
	if ( ($14 == 0) ){ goto $label$123 }
	$7 = ($19 + [188])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$14) ){ goto $label$125 }
	
.LOOP $label$126:
	$2 = ($2 + [-24])
	$13 = *($2)
	*($2) = [0]
	if ( ($13 == 0) ){ goto $label$127 }
	if ( ((*($13 + [76]) & [1]) == 0) ){ goto $label$128 }
	CALL $139(*(($13 + [84])))
	
.LABEL $label$128
	CALL $139($13)
	
.LABEL $label$127
	if ( ((int_32)$14 != (int_32)$2) ){ goto $label$126 }
	$2 = *(($19 + [184]))
	goto $label$124 
	
.LABEL $label$125
	$2 = $14
	
.LABEL $label$124
	*($7) = $14
	CALL $139($2)
	
.LABEL $label$123
	$14 = *($19 + [224])
	if ( ($14 == 0) ){ goto $label$129 }
	$7 = ($19 + [228])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$14) ){ goto $label$131 }
	
.LOOP $label$132:
	$2 = ($2 + [-24])
	$13 = *($2)
	*($2) = [0]
	if ( ($13 == 0) ){ goto $label$133 }
	CALL $139($13)
	
.LABEL $label$133
	if ( ((int_32)$14 != (int_32)$2) ){ goto $label$132 }
	$2 = *(($19 + [224]))
	goto $label$130 
	
.LABEL $label$131
	$2 = $14
	
.LABEL $label$130
	*($7) = $14
	CALL $139($2)
	
.LABEL $label$129
	if ( ((*($19 + [240]) & [1]) == 0) ){ goto $label$134 }
	CALL $139(*($19 + [248]))
	
.LABEL $label$134
	if ( ((*($19 + [256]) & [1]) == 0) ){ goto $label$23 }
	CALL $139(*($19 + [264]))
	
.LABEL $label$23
	if ( ((*($19 + [304]) & [1]) == 0) ){ goto $label$12 }
	CALL $139(*($19 + [312]))
	
.LABEL $label$12
	$14 = *($19 + [320])
	if ( ($14 == 0) ){ goto $label$135 }
	$2 = *($19 + [324])
	if ( ((int_32)$2 == (int_32)$14) ){ goto $label$137 }
	$13 = ([0] - $14)
	$2 = ($2 + [-12])
	
.LOOP $label$138:
	if ( ((*($2) & [1]) == 0) ){ goto $label$139 }
	CALL $139(*(($2 + [8])))
	
.LABEL $label$139
	$2 = ($2 + [-12])
	if ( ((int_32)($2 + $13) != (int_32)[-12]) ){ goto $label$138 }
	$2 = *($19 + [320])
	goto $label$136 
	
.LABEL $label$137
	$2 = $14
	
.LABEL $label$136
	*($19 + [324]) = $14
	CALL $139($2)
	
.LABEL $label$135
	CALL $122(($19 + [336]), *($19 + [340]))
	
.LABEL $label$6
	if ( ((*($19 + [352]) & [1]) == 0) ){ goto $label$140 }
	CALL $139(*($19 + [360]))
	
.LABEL $label$140
	*([0] + [4]) = ($19 + [416])
	return (unreachable)
	
.LABEL $label$5
	CALL $140($19)
	
.LABEL $label$4
	CALL $140(($19 + [256]))
	
.LABEL $label$3
	CALL $140($19)
	
.LABEL $label$2
	CALL $140(($19 + [240]))
	
.LABEL $label$1
	CALL $140($19)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	CALL $124(*($0 + [4]), $1)
	$4 = *($1 + [76])
	$3 = ( *(($1 + [80])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($3 + [76])
	$5 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $4)
	CALL $86($7, $1)
	$5 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($2 + [8]), (int_64)4229443000054317056, *(*($0 + [8])), $5, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $122($0, *($1))
	CALL $122($0, *($1 + [4]))
	if ( ((*(($1 + [28])) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*(($1 + [36])))
	
.LABEL $label$2
	if ( ((*(($1 + [16])) & [1]) == 0) ){ goto $label$3 }
	CALL $139(*(($1 + [24])))
	
.LABEL $label$3
	CALL $139($1)
	
.LABEL $label$1
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $121($0, *($1))
	CALL $121($0, *($1 + [4]))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*(($1 + [24])))
	
.LABEL $label$2
	CALL $139($1)
	
.LABEL $label$1
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [912])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $69(*($1), ($0 + [32]))
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [560])
	if ( ((uint_32)$7 <= (uint_32)[512]) ){ goto $label$6 }
	$3 = CALL malloc($7)
	CALL db_get_i64($1, $3, $7)
	CALL free($3)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	CALL db_get_i64($1, $3, $7)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $138([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [32])
	$10 = ($5 + [8])
	$8 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [96])
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [128])
	CALL memcpy($5, $3, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [128])
	CALL memcpy($10, ($3 + [8]), [8])
	*($5 + [20]) = $1
	*($9 + [24]) = $5
	$8 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($9 + [16]) = $8)
	$7 = *($5 + [20])
	*($9 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($6 + [8]) = $8
	*($6 + [16]) = $7
	*($9 + [24]) = [0]
	*($6) = $5
	*($1) = ($6 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $127($2, ($9 + [24]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$12
	$6 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $139($6)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
	return $5
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([2416])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	$6 = *($0 + [12])
	if ( (*($6) & [1]) ){ goto $label$2 }
	$6 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($6 + [8])
	
.LABEL $label$1
	$5 = [-1]
	
.LOOP $label$3:
	$4 = ($6 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($4 + [1])) ){ goto $label$3 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$8 = (int_64)0
	$7 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$4:
	$10 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$3) ){ goto $label$5 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$5 = ($5 + [165])
	goto $label$6 
	
.LABEL $label$7
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$9 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$4 }
	*($1 + [24]) = $9
	$6 = *($0 + [16])
	$8 = *($6)
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = $8
	$6 = *($0 + [20])
	*($1 + [48]) = *($6)
	*(($1 + [56])) = *(($6 + [8]))
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL $141(($1 + [76]), *($0 + [24]))
}

void .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_32 $27
	$27 = (*([0] + [4]) - [208])
	*([0] + [4]) = $27
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [160]
	$26 = (int_64)0
	
.LOOP $label$1:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($21)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$2
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$22 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$1 }
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [176]
	$24 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$23 > (uint_64)(int_64)10) ){ goto $label$10 }
	$6 = *($21)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$6 = ($6 + [165])
	goto $label$8 
	
.LABEL $label$10
	$25 = (int_64)0
	if ( ((int_64)$23 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$6
	$21 = ($21 + [1])
	$22 = ((int_64)$22 + (int_64)-5)
	$24 = ((int_64)$25 | (int_64)$24)
	$23 = ((int_64)$23 + (int_64)1)
	if ( ((int_64)$23 != (int_64)13) ){ goto $label$5 }
	CALL require_auth2($26, $24)
	$4 = [0]
	*($27 + [200]) = [0]
	*($27 + [192]) = (int_64)0
	$1 = ($0 + [24])
	*($27 + [184]) = $1
	*($27 + [48]) = (int_64)1
	CALL $59(($27 + [176]), ($27 + [184]), ($27 + [48]))
	$21 = *($27 + [180])
	if ( ($21 == 0) ){ goto $label$11 }
	$3 = ($27 + [84])
	$2 = (($27 + [48]) | [1])
	$7 = (($27 + [48]) + [8])
	$8 = (($27 + [136]) + [16])
	$10 = (($27 + [136]) + [24])
	$11 = (($27 + [136]) + [28])
	$12 = (($27 + [136]) + [32])
	$13 = ($27 + [60])
	$14 = ($27 + [68])
	$15 = ($27 + [88])
	$16 = ($27 + [92])
	$17 = ($27 + [96])
	$18 = ($27 + [100])
	$19 = ($27 + [104])
	$4 = [0]
	$5 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$11 }
	if ( ((uint_64)*($21 + [64]) > (uint_64)(int_64)1) ){ goto $label$11 }
	CALL prints([1280])
	CALL _ZNSt3__19to_stringEy(($27 + [48]), *(*($27 + [180])))
	CALL prints(( *($7) ? $2 : (*($27 + [48]) & [1]) ))
	if ( ((*($27 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL $139(*($7))
	
.LABEL $label$13
	*($8) = (int_64)-1
	$23 = *(*($27 + [180]))
	*(($9 = (($27 + [136]) + [8]))) = $23
	$25 = *($0)
	*($27 + [136]) = $25
	*($10) = [0]
	*($11) = [0]
	*($12) = [0]
	$21 = CALL db_lowerbound_i64($25, $23, (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$14 }
	$20 = CALL $72(($27 + [136]), $21)
	
.LOOP $label$15:
	if ( ((uint_32)(*($20 + [68]) + [1]) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$16 }
	if ( ((uint_32)*($20 + [64]) > (uint_32)[999999999]) ){ goto $label$16 }
	CALL eosio_assert([1], [688])
	CALL $73(($27 + [136]), $20, (int_64)0, ($27 + [48]))
	CALL prints([1296])
	CALL _ZNSt3__19to_stringEy(($27 + [48]), *($20))
	CALL prints(( *($7) ? $2 : (*($27 + [48]) & [1]) ))
	if ( ((*($27 + [48]) & [1]) == 0) ){ goto $label$17 }
	CALL $139(*($7))
	
.LABEL $label$17
	*($27 + [120]) = *($20 + [8])
	*($27 + [112]) = *($20)
	CALL cancel_deferred(($27 + [112]))
	$23 = CALL current_time()
	*($13) = [0]
	*((($27 + [48]) + [16])) = [0]
	*($14) = [0]
	*((($27 + [48]) + [24])) = [0]
	*((($27 + [48]) + [28])) = [0]
	*((($27 + [48]) + [32])) = [0]
	*($27 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$23 / (uint_64)(int_64)1000000)) + [60])
	*($3) = [0]
	*($15) = [0]
	*($16) = [0]
	*($17) = [0]
	*($18) = [0]
	*($19) = [0]
	$23 = (int_64)0
	$25 = (int_64)59
	$21 = [160]
	$26 = (int_64)0
	
.LOOP $label$18:
	$22 = (int_64)0
	if ( ((uint_64)$23 > (uint_64)(int_64)11) ){ goto $label$19 }
	$6 = *($21)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$6 = ($6 + [165])
	goto $label$20 
	
.LABEL $label$21
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$22 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$25 & (int_64)4294967295))
	
.LABEL $label$19
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$22 | (int_64)$26)
	$25 = ((int_64)$25 + (int_64)-5)
	if ( ((int_64)$25 != (int_64)-6) ){ goto $label$18 }
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [176]
	$24 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$23 > (uint_64)(int_64)10) ){ goto $label$27 }
	$6 = *($21)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$6 = ($6 + [165])
	goto $label$25 
	
.LABEL $label$27
	$25 = (int_64)0
	if ( ((int_64)$23 == (int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$23
	$21 = ($21 + [1])
	$22 = ((int_64)$22 + (int_64)-5)
	$24 = ((int_64)$25 | (int_64)$24)
	$23 = ((int_64)$23 + (int_64)1)
	if ( ((int_64)$23 != (int_64)13) ){ goto $label$22 }
	*((($27 + [32]) + [8])) = $24
	*($27 + [32]) = $26
	$23 = (int_64)0
	$22 = (int_64)59
	$21 = [1312]
	$26 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$23 > (uint_64)(int_64)2) ){ goto $label$33 }
	$6 = *($21)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$6 = ($6 + [165])
	goto $label$31 
	
.LABEL $label$33
	$25 = (int_64)0
	if ( ((uint_64)$23 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$25 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$25 = ((int_64)((int_64)$25 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	
.LABEL $label$29
	$21 = ($21 + [1])
	$23 = ((int_64)$23 + (int_64)1)
	$26 = ((int_64)$25 | (int_64)$26)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$28 }
	*($27 + [24]) = $26
	*((($27 + [8]) + [8])) = *($20)
	*($27 + [8]) = *(($20 + [8]))
	CALL $74($3, ($27 + [32]), $0, ($27 + [24]), ($27 + [8]))
	$23 = *($0)
	*($14) = [0]
	CALL $75(($27 + [32]), ($27 + [48]))
	$21 = *($27 + [32])
	CALL send_deferred(($27 + [112]), $23, $21, (*($27 + [36]) - $21), [1])
	$21 = *($27 + [32])
	if ( ($21 == 0) ){ goto $label$34 }
	*($27 + [36]) = $21
	CALL $139($21)
	
.LABEL $label$34
	CALL $76(($27 + [48]))
	$4 = [1]
	
.LABEL $label$16
	CALL eosio_assert([1], [336])
	$21 = CALL db_next_i64(*($20 + [92]), ($27 + [48]))
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$14 }
	$20 = CALL $72(($27 + [136]), $21)
	goto $label$15 
	
.LABEL $label$14
	$21 = CALL db_lowerbound_i64(*($27 + [136]), *($9), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$36 }
	CALL $72(($27 + [136]), $21)
	goto $label$35 
	
.LABEL $label$36
	$6 = *(*($27 + [180]))
	*($27 + [48]) = $6
	$21 = *($27 + [196])
	if ( ((uint_32)$21 >= (uint_32)*((($27 + [192]) + [8]))) ){ goto $label$37 }
	*($21) = $6
	*($27 + [196]) = ($21 + [4])
	goto $label$35 
	
.LABEL $label$37
	CALL $77(($27 + [192]), ($27 + [48]))
	
.LABEL $label$35
	CALL $60(($27 + [176]))
	$20 = *($10)
	if ( ($20 == 0) ){ goto $label$38 }
	$21 = *($11)
	if ( ((int_32)$21 == (int_32)$20) ){ goto $label$40 }
	
.LOOP $label$41:
	$21 = ($21 + [-24])
	$6 = *($21)
	*($21) = [0]
	if ( ($6 == 0) ){ goto $label$42 }
	if ( ((*($6 + [76]) & [1]) == 0) ){ goto $label$43 }
	CALL $139(*(($6 + [84])))
	
.LABEL $label$43
	CALL $139($6)
	
.LABEL $label$42
	if ( ((int_32)$20 != (int_32)$21) ){ goto $label$41 }
	$21 = *($10)
	goto $label$39 
	
.LABEL $label$40
	$21 = $20
	
.LABEL $label$39
	*($11) = $20
	CALL $139($21)
	
.LABEL $label$38
	$5 = ($5 + [1])
	$21 = *($27 + [180])
	if ( $21 ){ goto $label$12 }
	
.LABEL $label$11
	$7 = *($27 + [196])
	$3 = *($27 + [192])
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$44 }
	$2 = ($0 + [48])
	$4 = ($0 + [52])
	$13 = ($0 + [32])
	$15 = ($0 + [24])
	
.LOOP $label$45:
	$23 = *($3)
	$14 = *($2)
	$20 = *($4)
	if ( ((int_32)$20 == (int_32)$14) ){ goto $label$46 }
	$21 = ($20 + [-24])
	$0 = ([0] - $14)
	
.LOOP $label$47:
	if ( ((int_64)*(*($21)) == (int_64)$23) ){ goto $label$46 }
	$20 = $21
	$6 = ($21 + [-24])
	$21 = $6
	if ( ((int_32)($6 + $0) != (int_32)[-24]) ){ goto $label$47 }
	
.LABEL $label$46
	if ( ((int_32)$20 == (int_32)$14) ){ goto $label$49 }
	$21 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($21 + [100]) == (int_32)$1), [224])
	goto $label$48 
	
.LABEL $label$49
	$21 = [0]
	$6 = CALL db_find_i64(*($15), *($13), (int_64)7035924439720001536, $23)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$48 }
	$21 = CALL $36($1, $6)
	CALL eosio_assert(((int_32)*($21 + [100]) == (int_32)$1), [224])
	
.LABEL $label$48
	CALL eosio_assert(((int_32)$21 != (int_32)[0]), [688])
	CALL $78($1, $21, (int_64)0, ($27 + [48]))
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$45 }
	$4 = [1]
	
.LABEL $label$44
	CALL eosio_assert(($4 & [1]), [1328])
	$21 = *($27 + [192])
	if ( ($21 == 0) ){ goto $label$50 }
	*($27 + [196]) = $21
	CALL $139($21)
	
.LABEL $label$50
	*([0] + [4]) = ($27 + [208])
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	$5 = CALL db_lowerbound_i64(*($0 + [64]), *(($0 + [72])), (int_64)-4060986516896743424, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$2 = ($0 + [24])
	$1 = ($0 + [64])
	$5 = CALL $48($1, $5)
	
.LOOP $label$2:
	if ( (CALL $45($0, *($5 + [16]), *(($5 + [24]))) == 0) ){ goto $label$3 }
	*($6) = $2
	$3 = ($5 + [16])
	CALL $57(($6 + [8]), $6, $3)
	$4 = *($6 + [12])
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_64)(((int_64)((int_64)*($3) ^ (int_64)*($4 + [16])) | (int_64)((int_64)*(($3 + [8])) ^ (int_64)*(($4 + [24])))) == 0) == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$3 }
	
.LABEL $label$4
	CALL $58($0, *($3), *(($3 + [8])))
	
.LABEL $label$3
	CALL eosio_assert([1], [336])
	$5 = CALL db_next_i64(*($5 + [52]), ($6 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $48($1, $5)
	goto $label$2 
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$7 = *($2)
	CALL eosio_assert(((int_64)$7 > (int_64)0), [592])
	$3 = *($2 + [8])
	$9 = [0]
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [624])
	*($11 + [40]) = $1
	*($11 + [32]) = $3
	CALL eosio_assert(CALL $45($0, $3, $1), [656])
	$4 = ($0 + [64])
	*($11 + [24]) = $4
	CALL $46(($11 + [8]), ($11 + [24]), ($11 + [32]))
	$8 = *($11 + [12])
	if ( ($8 == 0) ){ goto $label$9 }
	if ( ((int_64)(((int_64)((int_64)*($11 + [32]) ^ (int_64)*($8 + [16])) | (int_64)((int_64)*($11 + [40]) ^ (int_64)*(($8 + [24])))) == 0) == 0) ){ goto $label$9 }
	if ( ($8 == 0) ){ goto $label$9 }
	$7 = *($8)
	$5 = *(($0 + [88]))
	$10 = *(($0 + [92]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$10 }
	$8 = ($10 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$11:
	if ( ((int_64)*(*($8)) == (int_64)$7) ){ goto $label$10 }
	$10 = $8
	$9 = ($8 + [-24])
	$8 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$8 }
	$8 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [224])
	goto $label$7 
	
.LABEL $label$9
	$7 = *($0)
	*($11 + [8]) = $0
	*($11 + [16]) = $2
	*($11 + [12]) = ($11 + [32])
	CALL $47($11, $4, $7, ($11 + [8]))
	goto $label$6 
	
.LABEL $label$8
	$8 = [0]
	$0 = CALL db_find_i64(*(($0 + [64])), *(($0 + [72])), (int_64)-4060986516896743424, $7)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $48($4, $0)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [224])
	
.LABEL $label$7
	*($11 + [8]) = $2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [688])
	CALL $49($4, $8, (int_64)0, ($11 + [8]))
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [64])
	*([0] + [4]) = $17
	*($17 + [56]) = $1
	*($17 + [48]) = $2
	$2 = (int_64)0
	$16 = (int_64)59
	$12 = [160]
	$13 = (int_64)0
	
.LOOP $label$1:
	$14 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$6 = ($6 + [165])
	goto $label$3 
	
.LABEL $label$4
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($6 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$2
	$12 = ($12 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$1 }
	$2 = (int_64)0
	$14 = (int_64)59
	$12 = [176]
	$15 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$10 }
	$6 = *($12)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$6 = ($6 + [165])
	goto $label$8 
	
.LABEL $label$10
	$16 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$6
	$12 = ($12 + [1])
	$14 = ((int_64)$14 + (int_64)-5)
	$15 = ((int_64)$16 | (int_64)$15)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$5 }
	CALL require_auth2($13, $15)
	$8 = *(($0 + [48]))
	$11 = *(($0 + [52]))
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$11 }
	$12 = ($11 + [-24])
	$10 = ([0] - $8)
	
.LOOP $label$12:
	if ( ((int_64)*(*($12)) == (int_64)$1) ){ goto $label$11 }
	$11 = $12
	$6 = ($12 + [-24])
	$12 = $6
	if ( ((int_32)($6 + $10) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = ($0 + [24])
	if ( ((int_32)$11 == (int_32)$8) ){ goto $label$14 }
	$8 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [100]) == (int_32)$7), [224])
	goto $label$13 
	
.LABEL $label$14
	$8 = [0]
	$12 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$13 }
	$8 = CALL $36($7, $12)
	CALL eosio_assert(((int_32)*($8 + [100]) == (int_32)$7), [224])
	
.LABEL $label$13
	$9 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($9, [1616])
	CALL eosio_assert((int_64)(*($8 + [64]) == 0), [1648])
	CALL eosio_assert(((uint_32)*($8 + [72]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000))), [1680])
	$6 = *($5 + [4])
	$12 = *($5)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$15 }
	$11 = ($0 + [12])
	$10 = ($0 + [8])
	
.LOOP $label$16:
	CALL eosio_assert(((int_32)CALL $106($10, $12) != (int_32)$11), [1744])
	$12 = ($12 + [12])
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$16 }
	
.LABEL $label$15
	CALL eosio_assert(((int_32)(*($4 + [4]) - *($4)) == (int_32)[12]), [1712])
	$6 = *($4 + [4])
	$12 = *($4)
	if ( ((int_32)$12 == (int_32)$6) ){ goto $label$18 }
	
.LOOP $label$19:
	if ( ((*($12) + [-1]) <= [6]) ){ goto $label$20 }
	CALL eosio_assert([0], [1776])
	
.LABEL $label$20
	$12 = ($12 + [4])
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$19 }
	$12 = *(($4 + [4]))
	$6 = *($4)
	goto $label$17 
	
.LABEL $label$18
	$6 = $12
	
.LABEL $label$17
	CALL $135($6, $12, ($17 + [24]))
	*($17 + [32]) = [0]
	*($17 + [24]) = (int_64)0
	$12 = (*(($4 + [4])) - *($4))
	$6 = int_32($12 >> [2])
	if ( ($6 == 0) ){ goto $label$23 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$22 }
	$12 = CALL $138($12)
	*(($17 + [32])) = ($12 + ($6 << [2]))
	*($17 + [24]) = $12
	*($17 + [28]) = $12
	$11 = *($4)
	$6 = (*(($4 + [4])) - $11)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$23 }
	CALL memcpy($12, $11, $6)
	*($17 + [28]) = (*($17 + [28]) + $6)
	
.LABEL $label$23
	*(($17 + [44])) = [0]
	*($17 + [36 align=4]) = (int_64)0
	$12 = (*(($5 + [4])) - *($5))
	$10 = ((int_32)$12 / (int_32)[12])
	if ( ($12 == 0) ){ goto $label$24 }
	if ( ((uint_32)$10 >= (uint_32)[357913942]) ){ goto $label$21 }
	$6 = CALL $138($12)
	*((($17 + [24]) + [12])) = $6
	*(($11 = ($17 + [40]))) = $6
	*(($17 + [44])) = ($6 + ((int_32)$10 * (int_32)[12]))
	$10 = *(($5 + [4]))
	$12 = *($5)
	if ( ((int_32)$12 == (int_32)$10) ){ goto $label$24 }
	
.LOOP $label$25:
	CALL $155($6, $12)
	$6 = (*($11) + [12])
	*($11) = $6
	$12 = ($12 + [12])
	if ( ((int_32)$10 != (int_32)$12) ){ goto $label$25 }
	
.LABEL $label$24
	*($17 + [8]) = ($17 + [24])
	CALL eosio_assert($9, [688])
	CALL $107($7, $8, (int_64)0, ($17 + [8]))
	$2 = *($0)
	*($17 + [12]) = $3
	*($17 + [8]) = ($17 + [56])
	*($17 + [16]) = ($17 + [48])
	CALL $108($17, ($0 + [104]), $2, ($17 + [8]))
	CALL $58($0, *($8 + [16]), *(($8 + [24])))
	$11 = *($17 + [36])
	if ( ($11 == 0) ){ goto $label$26 }
	$10 = ($17 + [40])
	$12 = *($10)
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$28 }
	$6 = ([0] - $11)
	$12 = ($12 + [-12])
	
.LOOP $label$29:
	if ( ((*($12) & [1]) == 0) ){ goto $label$30 }
	CALL $139(*(($12 + [8])))
	
.LABEL $label$30
	$12 = ($12 + [-12])
	if ( ((int_32)($12 + $6) != (int_32)[-12]) ){ goto $label$29 }
	$12 = *(($17 + [36]))
	goto $label$27 
	
.LABEL $label$28
	$12 = $11
	
.LABEL $label$27
	*($10) = $11
	CALL $139($12)
	
.LABEL $label$26
	$12 = *($17 + [24])
	if ( ($12 == 0) ){ goto $label$31 }
	*($17 + [28]) = $12
	CALL $139($12)
	
.LABEL $label$31
	*([0] + [4]) = ($17 + [64])
	return (unreachable)
	
.LABEL $label$22
	CALL $154(($17 + [24]))
	
.LABEL $label$21
	CALL $154((($17 + [24]) + [12]))
	(unreachable)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [160])
	*([0] + [4]) = $2
	*(($4 = $2) + [124]) = $0
	*($4 + [112]) = *($1)
	*($4 + [116]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($4 + [8]) = (int_64)0
	*($4) = (int_64)0
	CALL memset(($4 + [16]), [0], [66])
	*(($4 + [92])) = (int_64)0
	*(($4 + [100])) = (int_64)0
	*($4 + [84 align=4]) = (int_64)0
	*($4 + [132]) = $1
	*($4 + [128]) = $1
	*($4 + [136]) = ($1 + $0)
	*($4 + [144]) = ($4 + [128])
	*($4 + [152]) = $4
	CALL $104(($4 + [152]), ($4 + [144]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($4 + [132]) = ($4 + [112])
	*($4 + [128]) = ($4 + [124])
	CALL $105(($4 + [128]), $4)
	$2 = *($4 + [96])
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = ($4 + [100])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$7 }
	$0 = ([0] - $2)
	$1 = ($1 + [-12])
	
.LOOP $label$8:
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL $139(*(($1 + [8])))
	
.LABEL $label$9
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$8 }
	$1 = *(($4 + [96]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $2
	
.LABEL $label$6
	*($3) = $2
	CALL $139($1)
	
.LABEL $label$5
	$1 = *(($4 + [84]))
	if ( ($1 == 0) ){ goto $label$10 }
	*(($4 + [88])) = $1
	CALL $139($1)
	
.LABEL $label$10
	*([0] + [4]) = ($4 + [160])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	float_64 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_32 $33
	$33 = (*([0] + [4]) - [416])
	*([0] + [4]) = $33
	$22 = (int_64)0
	$24 = (int_64)59
	$28 = [160]
	$20 = (int_64)0
	
.LOOP $label$1:
	$21 = (int_64)0
	if ( ((uint_64)$22 > (uint_64)(int_64)11) ){ goto $label$2 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$27 = ($27 + [165])
	goto $label$3 
	
.LABEL $label$4
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$2
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$1 }
	$22 = (int_64)0
	$21 = (int_64)59
	$28 = [176]
	$23 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$22 > (uint_64)(int_64)10) ){ goto $label$10 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$27 = ($27 + [165])
	goto $label$8 
	
.LABEL $label$10
	$24 = (int_64)0
	if ( ((int_64)$22 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$6
	$28 = ($28 + [1])
	$21 = ((int_64)$21 + (int_64)-5)
	$23 = ((int_64)$24 | (int_64)$23)
	$22 = ((int_64)$22 + (int_64)1)
	if ( ((int_64)$22 != (int_64)13) ){ goto $label$5 }
	CALL require_auth2($20, $23)
	$11 = *(($0 + [48]))
	$12 = *(($0 + [52]))
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$11 }
	$28 = ($12 + [-24])
	$14 = ([0] - $11)
	
.LOOP $label$12:
	if ( ((int_64)*(*($28)) == (int_64)$1) ){ goto $label$11 }
	$12 = $28
	$27 = ($28 + [-24])
	$28 = $27
	if ( ((int_32)($27 + $14) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$28 = ($0 + [24])
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$14 }
	$25 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($25 + [100]) == (int_32)$28), [224])
	goto $label$13 
	
.LABEL $label$14
	$25 = [0]
	$27 = CALL db_find_i64(*(($0 + [24])), *(($0 + [32])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$13 }
	$25 = CALL $36($28, $27)
	CALL eosio_assert(((int_32)*($25 + [100]) == (int_32)$28), [224])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$25 != (int_32)[0]), [1344])
	CALL eosio_assert(((int_64)*($25 + [64]) != (int_64)0), [1360])
	*(($33 + [392])) = [0]
	*($33 + [376]) = (int_64)-1
	*($33 + [384]) = (int_64)0
	$22 = *($0)
	*($33 + [360]) = $22
	*($33 + [368]) = $1
	$26 = [0]
	$28 = CALL db_find_i64($22, $1, (int_64)4229443000054317056, $2)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$15 }
	$26 = CALL $72(($33 + [360]), $28)
	CALL eosio_assert(((int_32)*($26 + [88]) == (int_32)($33 + [360])), [224])
	
.LABEL $label$15
	$3 = ((int_32)$26 != (int_32)[0])
	CALL eosio_assert($3, [1392])
	CALL eosio_assert(((int_64)*($26 + [8]) == (int_64)$1), [1392])
	$5 = ($26 + [76])
	$4 = ($0 + [8])
	$27 = CALL $89($4, $33, $5)
	$28 = *($27)
	if ( $28 ){ goto $label$16 }
	$28 = CALL $138([56])
	CALL $155(($28 + [16]), $5)
	*(($28 + [48])) = (int_64)0
	*(($28 + [40])) = (int_64)0
	*($28 + [32]) = (int_64)0
	*($28) = (int_64)0
	*($28 + [8]) = *($33)
	*($27) = $28
	$12 = $28
	$14 = *(*($4))
	if ( ($14 == 0) ){ goto $label$17 }
	*($4) = $14
	$12 = *($27)
	
.LABEL $label$17
	CALL $90(*(($0 + [12])), $12)
	*(($27 = ($0 + [16]))) = (*($27) + [1])
	
.LABEL $label$16
	$29 = *(($28 + [32]))
	*((($33 + [344]) + [8])) = [0]
	*($33 + [344]) = (int_64)0
	$28 = CALL strlen([1424])
	if ( ((uint_32)$28 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$28 >= (uint_32)[11]) ){ goto $label$21 }
	*($33 + [344]) = ($28 << [1])
	$27 = (($33 + [344]) | [1])
	if ( $28 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$12 = (($28 + [16]) & [-16])
	$27 = CALL $138($12)
	*($33 + [344]) = ($12 | [1])
	*($33 + [352]) = $27
	*($33 + [348]) = $28
	
.LABEL $label$20
	CALL memcpy($27, [1424], $28)
	
.LABEL $label$19
	*(($27 + $28)) = [0]
	$6 = *($25 + [16])
	CALL eosio_assert([1], [32])
	$22 = (uint_64)$6 >> (uint_64)(int_64)8)
	$28 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $22) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$22) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$22) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$28 = ($28 + [1])
	if ( ((int_32)$28 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$27 = [1]
	$28 = ($28 + [1])
	if ( ((int_32)$28 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$27 = [0]
	
.LABEL $label$22
	CALL eosio_assert($27, [96])
	$29 = CALL floor(((float_64)((float_64)$29 * (float_64)(CASTING float_64)(int_64 *($26 + [48]))) / (float_64)(float_64)100))
	$8 = *(($25 + [16]))
	$7 = (Rounds 0)($29)
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$22 = (uint_64)$8 >> (uint_64)(int_64)8)
	$28 = [0]
	
.LOOP $label$29:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $22) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$28 }
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$22) & (int_64)255) != (int_64)0) ){ goto $label$30 }
	
.LOOP $label$31:
	$22 = (uint_64)$22 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$22) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	$28 = ($28 + [1])
	if ( ((int_32)$28 < (int_32)[7]) ){ goto $label$31 }
	
.LABEL $label$30
	$27 = [1]
	$28 = ($28 + [1])
	if ( ((int_32)$28 < (int_32)[7]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$28
	$27 = [0]
	
.LABEL $label$27
	CALL eosio_assert($27, [96])
	$9 = *(($25 + [92]))
	$27 = *(($25 + [88]))
	if ( ((int_32)$27 == (int_32)$9) ){ goto $label$33 }
	$10 = ($5 + [1])
	$29 = (float_64)0
	$16 = ($26 + [76])
	$17 = ($26 + [80])
	$18 = ($26 + [84])
	$19 = ($0 + [12])
	
.LOOP $label$34:
	$28 = ($28 & [1])
	$28 = *($16)
	$11 = ($28 & [1])
	$28 = *($27)
	$12 = uint_32($28 >> [1])
	$13 = ( *($27 + [4]) ? $12 : $11 )
	if ( ((int_32)$13 != (int_32)( *($17) ? uint_32($28 >> [1]) : $28 )) ){ goto $label$35 }
	$14 = ( *($18) ? $10 : $28 )
	if ( $11 ){ goto $label$37 }
	if ( ($13 == 0) ){ goto $label$36 }
	$28 = [0]
	
.LOOP $label$38:
	if ( ((int_32)*((($27 + $28) + [1])) != (int_32)*(($14 + $28))) ){ goto $label$35 }
	$28 = ($28 + [1])
	if ( ((int_32)$12 != (int_32)$28) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	if ( ($13 == 0) ){ goto $label$36 }
	if ( CALL memcmp(( *($27 + [8]) ? ($27 + [1]) : $11 ), $14, $13) ){ goto $label$35 }
	
.LABEL $label$36
	CALL $144(($33 + [344]), [1440])
	$12 = CALL $89($4, $33, $27)
	$28 = *($12)
	if ( $28 ){ goto $label$39 }
	$28 = CALL $138([56])
	CALL $155(($28 + [16]), $27)
	*(($28 + [48])) = (int_64)0
	*(($28 + [40])) = (int_64)0
	*($28 + [32]) = (int_64)0
	*($28) = (int_64)0
	*($28 + [8]) = *($33)
	*($12) = $28
	$14 = $28
	$11 = *(*($4))
	if ( ($11 == 0) ){ goto $label$40 }
	*($4) = $11
	$14 = *($12)
	
.LABEL $label$40
	CALL $90(*($19), $14)
	*(($12 = ($0 + [16]))) = (*($12) + [1])
	
.LABEL $label$39
	$29 = ((float_64)$29 + (float_64)*(($28 + [40])))
	
.LABEL $label$35
	$27 = ($27 + [12])
	if ( ((int_32)$27 != (int_32)$9) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$29 = (float_64)0
	
.LABEL $label$32
	$30 = (int_64)0
	$28 = *($33 + [344])
	$27 = CALL strlen([1440])
	if ( ((int_32)$27 != (int_32)( *($33 + [348]) ? uint_32($28 >> [1]) : ($28 & [1]) )) ){ goto $label$41 }
	$28 = CALL $150(($33 + [344]), [0], [-1], [1440], $27)
	if ( (((float_64)$29 <= (float_64)(float_64)0) | ((float_64)$29 != (float_64)$29)) ){ goto $label$41 }
	if ( $28 ){ goto $label$41 }
	$30 = (Rounds 0)(CALL floor(((float_64)((float_64)$29 + (float_64)(float_64)1) * (float_64)(CASTING float_64)(int_64 *(($26 + [48]))))))
	
.LABEL $label$41
	$28 = *($33 + [344])
	$27 = CALL strlen([1440])
	if ( ((int_32)$27 != (int_32)( *($33 + [348]) ? uint_32($28 >> [1]) : ($28 & [1]) )) ){ goto $label$42 }
	if ( CALL $150(($33 + [344]), [0], [-1], [1440], $27) ){ goto $label$42 }
	CALL $62(($33 + [296]), [1208])
	$28 = CALL $147(($33 + [296]), [0], [1456])
	$27 = ($28 + [8])
	*((($33 + [312]) + [8])) = *($27)
	*($33 + [312]) = *($28)
	*($28) = [0]
	*(($28 + [4])) = [0]
	*($27) = [0]
	$28 = CALL $146(($33 + [312]), [1472])
	$27 = ($28 + [8])
	*((($33 + [400]) + [8])) = *($27)
	*($33 + [400]) = *($28)
	*($28) = [0]
	*(($28 + [4])) = [0]
	*($27) = [0]
	CALL _ZNSt3__19to_stringEy(($33 + [280]), *($25))
	$28 = *($33 + [280])
	$27 = ($28 & [1])
	$28 = CALL $145(($33 + [400]), ( *($33 + [288]) ? (($33 + [280]) | [1]) : $27 ), ( *($33 + [284]) ? uint_32($28 >> [1]) : $27 ))
	$27 = ($28 + [8])
	*((($33 + [240]) + [8])) = *($27)
	*($33 + [240]) = *($28)
	*($28) = [0]
	*(($28 + [4])) = [0]
	*($27) = [0]
	$28 = CALL $146(($33 + [240]), [1504])
	$27 = ($28 + [8])
	*(($33 + [8])) = *($27)
	*($33) = *($28)
	*($28) = [0]
	*(($28 + [4])) = [0]
	*($27) = [0]
	$28 = *(($26 + [76]))
	$27 = ($28 & [1])
	$28 = CALL $145($33, ( *(($26 + [84])) ? ($5 + [1]) : $27 ), ( *(($26 + [80])) ? uint_32($28 >> [1]) : $27 ))
	$27 = ($28 + [8])
	*((($33 + [328]) + [8])) = *($27)
	*($33 + [328]) = *($28)
	*($28) = [0]
	*(($28 + [4])) = [0]
	*($27) = [0]
	if ( ((*($33) & [1]) == 0) ){ goto $label$43 }
	CALL $139(*($33 + [8]))
	
.LABEL $label$43
	if ( ((*($33 + [240]) & [1]) == 0) ){ goto $label$44 }
	CALL $139(*($33 + [248]))
	
.LABEL $label$44
	if ( ((*($33 + [280]) & [1]) == 0) ){ goto $label$45 }
	CALL $139(*(($33 + [288])))
	
.LABEL $label$45
	if ( ((*($33 + [400]) & [1]) == 0) ){ goto $label$46 }
	CALL $139(*($33 + [408]))
	
.LABEL $label$46
	if ( ((*($33 + [312]) & [1]) == 0) ){ goto $label$47 }
	CALL $139(*($33 + [320]))
	
.LABEL $label$47
	if ( ((*($33 + [296]) & [1]) == 0) ){ goto $label$48 }
	CALL $139(*($33 + [304]))
	
.LABEL $label$48
	$22 = (int_64)0
	$24 = (int_64)59
	$28 = [1520]
	$20 = (int_64)0
	
.LOOP $label$49:
	$21 = (int_64)0
	if ( ((uint_64)$22 > (uint_64)(int_64)11) ){ goto $label$50 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$52 }
	$27 = ($27 + [165])
	goto $label$51 
	
.LABEL $label$52
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$51
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$50
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$49 }
	$22 = (int_64)0
	$21 = (int_64)59
	$28 = [1536]
	$23 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$22 > (uint_64)(int_64)5) ){ goto $label$58 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$27 = ($27 + [165])
	goto $label$56 
	
.LABEL $label$58
	$24 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$54
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$23 = ((int_64)$24 | (int_64)$23)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$53 }
	$15 = *(($25 + [24]))
	$22 = (int_64)0
	$21 = (int_64)59
	$28 = [16]
	$32 = (int_64)0
	
.LOOP $label$59:
	if ( ((uint_64)$22 > (uint_64)(int_64)7) ){ goto $label$64 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$63 }
	$27 = ($27 + [165])
	goto $label$62 
	
.LABEL $label$64
	$24 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$61 }
	goto $label$60 
	
.LABEL $label$63
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$62
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$61
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$60
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$32 = ((int_64)$24 | (int_64)$32)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$59 }
	$22 = (int_64)0
	$24 = (int_64)59
	$28 = [1520]
	$31 = (int_64)0
	
.LOOP $label$65:
	$21 = (int_64)0
	if ( ((uint_64)$22 > (uint_64)(int_64)11) ){ goto $label$66 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$68 }
	$27 = ($27 + [165])
	goto $label$67 
	
.LABEL $label$68
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$67
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$66
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$31 = ((int_64)$21 | (int_64)$31)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$65 }
	$22 = *($26 + [16])
	*(($33 + [24])) = $6
	*($33) = $31
	*($33 + [16]) = $30
	*($33 + [8]) = $22
	CALL $155(($33 + [32]), ($33 + [328]))
	*(($27 = (($33 + [240]) + [24]))) = [0]
	*($33 + [248]) = $32
	*($33 + [240]) = $15
	*($33 + [256]) = (int_64)0
	*(($28 = CALL $138([16]))) = $20
	*($28 + [8]) = $23
	*((($33 + [240]) + [32])) = [0]
	$12 = ($28 + [16])
	*($27) = $12
	*(($33 + [260])) = $12
	*($33 + [256]) = $28
	*($33 + [268]) = [0]
	*((($33 + [240]) + [36])) = [0]
	$28 = *($33 + [32])
	$27 = ( *(($33 + [36])) ? uint_32($28 >> [1]) : ($28 & [1]) )
	$28 = ($27 + [32])
	$22 = (CASTING uint_64)(uint_32 $27)
	$27 = ($33 + [268])
	
.LOOP $label$69:
	$28 = ($28 + [1])
	$22 = (uint_64)$22 >> (uint_64)(int_64)7
	if ( ((int_64)$22) != (int_64)0) ){ goto $label$69 }
	if ( ($28 == 0) ){ goto $label$71 }
	CALL $35($27, $28)
	$27 = *(($33 + [272]))
	$28 = *(($33 + [268]))
	goto $label$70 
	
.LABEL $label$71
	$27 = [0]
	$28 = [0]
	
.LABEL $label$70
	*($33 + [404]) = $28
	*($33 + [400]) = $28
	*($33 + [408]) = $27
	*($33 + [296]) = ($33 + [400])
	*($33 + [312]) = $33
	CALL $91(($33 + [312]), ($33 + [296]))
	CALL $92(($33 + [400]), ($33 + [240]))
	$28 = *($33 + [400])
	CALL send_inline($28, (*($33 + [404]) - $28))
	$28 = *($33 + [400])
	if ( ($28 == 0) ){ goto $label$72 }
	*($33 + [404]) = $28
	CALL $139($28)
	
.LABEL $label$72
	$28 = *($33 + [268])
	if ( ($28 == 0) ){ goto $label$73 }
	*(($33 + [272])) = $28
	CALL $139($28)
	
.LABEL $label$73
	$28 = *($33 + [256])
	if ( ($28 == 0) ){ goto $label$74 }
	*(($33 + [260])) = $28
	CALL $139($28)
	
.LABEL $label$74
	if ( ((*($33 + [32]) & [1]) == 0) ){ goto $label$75 }
	CALL $139(*(($33 + [40])))
	
.LABEL $label$75
	$22 = (int_64)0
	$24 = (int_64)59
	$28 = [160]
	$20 = (int_64)0
	
.LOOP $label$76:
	$21 = (int_64)0
	if ( ((uint_64)$22 > (uint_64)(int_64)11) ){ goto $label$77 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$27 = ($27 + [165])
	goto $label$78 
	
.LABEL $label$79
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$77
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$76 }
	$22 = (int_64)0
	$21 = (int_64)59
	$28 = [1552]
	$23 = (int_64)0
	
.LOOP $label$80:
	if ( ((uint_64)$22 > (uint_64)(int_64)7) ){ goto $label$85 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$27 = ($27 + [165])
	goto $label$83 
	
.LABEL $label$85
	$24 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$84
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$82
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$81
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$23 = ((int_64)$24 | (int_64)$23)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$80 }
	$22 = (int_64)0
	$24 = (int_64)59
	$28 = [160]
	$32 = (int_64)0
	
.LOOP $label$86:
	$21 = (int_64)0
	if ( ((uint_64)$22 > (uint_64)(int_64)11) ){ goto $label$87 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$89 }
	$27 = ($27 + [165])
	goto $label$88 
	
.LABEL $label$89
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$88
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$87
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$32 = ((int_64)$21 | (int_64)$32)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$86 }
	$22 = (int_64)0
	$21 = (int_64)59
	$28 = [1552]
	$31 = (int_64)0
	
.LOOP $label$90:
	if ( ((uint_64)$22 > (uint_64)(int_64)7) ){ goto $label$95 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$94 }
	$27 = ($27 + [165])
	goto $label$93 
	
.LABEL $label$95
	$24 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$94
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$93
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$92
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$91
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$31 = ((int_64)$24 | (int_64)$31)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$90 }
	$22 = *(($25 + [24]))
	$24 = *(($26 + [16]))
	*(($33 + [40])) = $6
	*($33) = (int_64)-4354846699248680960
	*($33 + [8]) = *($0)
	*($33 + [16]) = $24
	*($33 + [32]) = $30
	*($33 + [240]) = $32
	*($33 + [248]) = $31
	*($33 + [24]) = $22
	*($33 + [256]) = [0]
	*(($27 = ($33 + [260]))) = [0]
	*(($12 = (($33 + [240]) + [24]))) = [0]
	*(($28 = CALL $138([16]))) = $20
	*($28 + [8]) = $23
	*(($14 = ($33 + [272]))) = [0]
	$11 = ($28 + [16])
	*($12) = $11
	*($27) = $11
	*($33 + [256]) = $28
	*($33 + [268]) = [0]
	*(($33 + [276])) = [0]
	CALL $35(($33 + [268]), [48])
	$28 = *($14)
	$27 = *($33 + [268])
	*($33 + [404]) = $27
	*($33 + [400]) = $27
	*($33 + [408]) = $28
	*($33 + [296]) = ($33 + [400])
	*($33 + [312]) = $33
	CALL $93(($33 + [312]), ($33 + [296]))
	CALL $92(($33 + [400]), ($33 + [240]))
	$28 = *($33 + [400])
	CALL send_inline($28, (*($33 + [404]) - $28))
	$28 = *($33 + [400])
	if ( ($28 == 0) ){ goto $label$96 }
	*($33 + [404]) = $28
	CALL $139($28)
	
.LABEL $label$96
	$28 = *($33 + [268])
	if ( ($28 == 0) ){ goto $label$97 }
	*(($33 + [272])) = $28
	CALL $139($28)
	
.LABEL $label$97
	$28 = *($33 + [256])
	if ( ($28 == 0) ){ goto $label$98 }
	*(($33 + [260])) = $28
	CALL $139($28)
	
.LABEL $label$98
	if ( ((*($33 + [328]) & [1]) == 0) ){ goto $label$42 }
	CALL $139(*($33 + [336]))
	
.LABEL $label$42
	$28 = *($33 + [344])
	$27 = CALL strlen([1440])
	if ( ((int_32)$27 != (int_32)( *($33 + [348]) ? uint_32($28 >> [1]) : ($28 & [1]) )) ){ goto $label$101 }
	if ( (CALL $150(($33 + [344]), [0], [-1], [1440], $27) == 0) ){ goto $label$100 }
	
.LABEL $label$101
	$28 = *($33 + [344])
	$27 = CALL strlen([1424])
	if ( ((int_32)$27 != (int_32)( *($33 + [348]) ? uint_32($28 >> [1]) : ($28 & [1]) )) ){ goto $label$99 }
	if ( CALL $150(($33 + [344]), [0], [-1], [1424], $27) ){ goto $label$99 }
	
.LABEL $label$100
	$22 = (int_64)0
	$24 = (int_64)59
	$28 = [160]
	$20 = (int_64)0
	
.LOOP $label$102:
	$21 = (int_64)0
	if ( ((uint_64)$22 > (uint_64)(int_64)11) ){ goto $label$103 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$105 }
	$27 = ($27 + [165])
	goto $label$104 
	
.LABEL $label$105
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$104
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$103
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$102 }
	$31 = *($0)
	$22 = (int_64)0
	$24 = (int_64)59
	$28 = [160]
	$23 = (int_64)0
	
.LOOP $label$106:
	$21 = (int_64)0
	if ( ((uint_64)$22 > (uint_64)(int_64)11) ){ goto $label$107 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$109 }
	$27 = ($27 + [165])
	goto $label$108 
	
.LABEL $label$109
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$108
	$21 = ((int_64)(CASTING uint_64)(uint_32 ($27 & [31])) << (int_64)((int_64)$24 & (int_64)4294967295))
	
.LABEL $label$107
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$23 = ((int_64)$21 | (int_64)$23)
	$24 = ((int_64)$24 + (int_64)-5)
	if ( ((int_64)$24 != (int_64)-6) ){ goto $label$106 }
	$22 = (int_64)0
	$21 = (int_64)59
	$28 = [1568]
	$32 = (int_64)0
	
.LOOP $label$110:
	if ( ((uint_64)$22 > (uint_64)(int_64)5) ){ goto $label$115 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$114 }
	$27 = ($27 + [165])
	goto $label$113 
	
.LABEL $label$115
	$24 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$112 }
	goto $label$111 
	
.LABEL $label$114
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$113
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$112
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$111
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$32 = ((int_64)$24 | (int_64)$32)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$110 }
	$22 = *(($25 + [24]))
	CALL _ZNSt3__19to_stringEy(($33 + [328]), *($25))
	*($33) = (int_64)-4354846699248680960
	*($33 + [8]) = *($0)
	*($33 + [24]) = $22
	*($33 + [16]) = *($26 + [16])
	*(($33 + [36])) = *(($26 + [52]))
	*(($33 + [44])) = *(($26 + [60]))
	*($33 + [32]) = *($26 + [48])
	*($33 + [48]) = $7
	*(($33 + [56])) = $8
	*($33 + [64]) = *($26 + [24])
	*(($27 = ($33 + [76]))) = *($33 + [332 align=4])
	*($33 + [72]) = *($33 + [328])
	*($33 + [328]) = [0]
	*($33 + [332]) = [0]
	*(($33 + [336])) = [0]
	*($33 + [240]) = $23
	*($33 + [248]) = $32
	*($33 + [256]) = [0]
	*(($12 = ($33 + [260]))) = [0]
	*(($14 = (($33 + [240]) + [24]))) = [0]
	*(($28 = CALL $138([16]))) = $20
	*($28 + [8]) = $31
	*(($33 + [272])) = [0]
	$11 = ($28 + [16])
	*($14) = $11
	*($12) = $11
	*($33 + [256]) = $28
	*($33 + [268]) = [0]
	*((($33 + [240]) + [36])) = [0]
	$28 = *($33 + [72])
	$27 = ( *($27) ? uint_32($28 >> [1]) : ($28 & [1]) )
	$28 = ($27 + [72])
	$22 = (CASTING uint_64)(uint_32 $27)
	$27 = ($33 + [268])
	
.LOOP $label$116:
	$28 = ($28 + [1])
	$22 = (uint_64)$22 >> (uint_64)(int_64)7
	if ( ((int_64)$22) != (int_64)0) ){ goto $label$116 }
	if ( ($28 == 0) ){ goto $label$118 }
	CALL $35($27, $28)
	$27 = *(($33 + [272]))
	$28 = *(($33 + [268]))
	goto $label$117 
	
.LABEL $label$118
	$27 = [0]
	$28 = [0]
	
.LABEL $label$117
	*($33 + [404]) = $28
	*($33 + [400]) = $28
	*($33 + [408]) = $27
	*($33 + [296]) = ($33 + [400])
	*($33 + [312]) = $33
	CALL $94(($33 + [312]), ($33 + [296]))
	CALL $92(($33 + [400]), ($33 + [240]))
	$28 = *($33 + [400])
	CALL send_inline($28, (*($33 + [404]) - $28))
	$28 = *($33 + [400])
	if ( ($28 == 0) ){ goto $label$119 }
	*($33 + [404]) = $28
	CALL $139($28)
	
.LABEL $label$119
	$28 = *($33 + [268])
	if ( ($28 == 0) ){ goto $label$120 }
	*(($33 + [272])) = $28
	CALL $139($28)
	
.LABEL $label$120
	$28 = *($33 + [256])
	if ( ($28 == 0) ){ goto $label$121 }
	*(($33 + [260])) = $28
	CALL $139($28)
	
.LABEL $label$121
	if ( ((*(($33 + [72])) & [1]) == 0) ){ goto $label$122 }
	CALL $139(*(($33 + [80])))
	
.LABEL $label$122
	if ( ((*($33 + [328]) & [1]) == 0) ){ goto $label$99 }
	CALL $139(*(($33 + [336])))
	
.LABEL $label$99
	$11 = *(($0 + [128]))
	$12 = *(($0 + [132]))
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$123 }
	$28 = ($12 + [-24])
	$14 = ([0] - $11)
	
.LOOP $label$124:
	if ( ((int_64)*(*($28)) == (int_64)$1) ){ goto $label$123 }
	$12 = $28
	$27 = ($28 + [-24])
	$28 = $27
	if ( ((int_32)($27 + $14) != (int_32)[-24]) ){ goto $label$124 }
	
.LABEL $label$123
	$28 = ($0 + [104])
	if ( ((int_32)$12 == (int_32)$11) ){ goto $label$127 }
	$12 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)$28), [224])
	if ( $12 ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$127
	$27 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)7035937270569123840, $1)
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$125 }
	$12 = CALL $38($28, $27)
	CALL eosio_assert(((int_32)*($12 + [88]) == (int_32)$28), [224])
	
.LABEL $label$126
	$32 = *($0)
	$22 = (int_64)0
	$21 = (int_64)59
	$28 = [1584]
	$20 = (int_64)0
	
.LOOP $label$128:
	if ( ((uint_64)$22 > (uint_64)(int_64)5) ){ goto $label$133 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$132 }
	$27 = ($27 + [165])
	goto $label$131 
	
.LABEL $label$133
	$24 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$130 }
	goto $label$129 
	
.LABEL $label$132
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$131
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$130
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$129
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$20 = ((int_64)$24 | (int_64)$20)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$128 }
	$22 = (int_64)0
	$21 = (int_64)59
	$28 = [1600]
	$23 = (int_64)0
	
.LOOP $label$134:
	if ( ((uint_64)$22 > (uint_64)(int_64)9) ){ goto $label$139 }
	$27 = *($28)
	if ( ((uint_32)(($27 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$138 }
	$27 = ($27 + [165])
	goto $label$137 
	
.LABEL $label$139
	$24 = (int_64)0
	if ( ((uint_64)$22 <= (uint_64)(int_64)11) ){ goto $label$136 }
	goto $label$135 
	
.LABEL $label$138
	$27 = ( ($27 + [208]) ? [0] : ((($27 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$137
	$24 = (int_64)((int_64)(CASTING uint_64)(uint_32 $27) << (int_64)56) >> (int_64)56)
	
.LABEL $label$136
	$24 = ((int_64)((int_64)$24 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$135
	$28 = ($28 + [1])
	$22 = ((int_64)$22 + (int_64)1)
	$23 = ((int_64)$24 | (int_64)$23)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$134 }
	*($33 + [8]) = $1
	*($33 + [16]) = $2
	*($33) = *($26 + [16])
	CALL $155(($33 + [24]), $5)
	*(($33 + [72])) = *(($25 + [56]))
	*(($33 + [64])) = *(($25 + [48]))
	*(($33 + [56])) = *(($25 + [40]))
	*($33 + [48]) = *($25 + [32])
	CALL memcpy(($33 + [80]), ($12 + [8]), [66])
	*($33 + [152]) = *($12 + [80])
	CALL $24(($33 + [160]), ($25 + [76]))
	CALL $155(($33 + [184]), ($33 + [344]))
	*(($33 + [208])) = *(($26 + [56]))
	$22 = *($26 + [48])
	*(($33 + [224])) = $6
	*($33 + [216]) = $30
	*($33 + [200]) = $22
	*($33 + [240]) = $32
	*($33 + [248]) = $23
	*($33 + [256]) = [0]
	*(($27 = ($33 + [260]))) = [0]
	*(($12 = (($33 + [240]) + [24]))) = [0]
	*(($28 = CALL $138([16]))) = $32
	*($28 + [8]) = $20
	$14 = ($28 + [16])
	*($12) = $14
	*($27) = $14
	*($33 + [256]) = $28
	CALL $95(($33 + [268]), $33)
	CALL $92(($33 + [400]), ($33 + [240]))
	$28 = *($33 + [400])
	CALL send_inline($28, (*($33 + [404]) - $28))
	$28 = *($33 + [400])
	if ( ($28 == 0) ){ goto $label$140 }
	*($33 + [404]) = $28
	CALL $139($28)
	
.LABEL $label$140
	$28 = *($33 + [268])
	if ( ($28 == 0) ){ goto $label$141 }
	*(($33 + [272])) = $28
	CALL $139($28)
	
.LABEL $label$141
	$28 = *($33 + [256])
	if ( ($28 == 0) ){ goto $label$142 }
	*(($33 + [260])) = $28
	CALL $139($28)
	
.LABEL $label$142
	if ( ((*($33 + [184]) & [1]) == 0) ){ goto $label$143 }
	CALL $139(*(($33 + [192])))
	
.LABEL $label$143
	$12 = *(($33 + [172]))
	if ( ($12 == 0) ){ goto $label$144 }
	$14 = ($33 + [176])
	$28 = *($14)
	if ( ((int_32)$28 == (int_32)$12) ){ goto $label$146 }
	$27 = ([0] - $12)
	$28 = ($28 + [-12])
	
.LOOP $label$147:
	if ( ((*($28) & [1]) == 0) ){ goto $label$148 }
	CALL $139(*(($28 + [8])))
	
.LABEL $label$148
	$28 = ($28 + [-12])
	if ( ((int_32)($28 + $27) != (int_32)[-12]) ){ goto $label$147 }
	$28 = *(($33 + [172]))
	goto $label$145 
	
.LABEL $label$146
	$28 = $12
	
.LABEL $label$145
	*($14) = $12
	CALL $139($28)
	
.LABEL $label$144
	$28 = *($33 + [160])
	if ( ($28 == 0) ){ goto $label$149 }
	*(($33 + [164])) = $28
	CALL $139($28)
	
.LABEL $label$149
	if ( ((*($33 + [24]) & [1]) == 0) ){ goto $label$125 }
	CALL $139(*(($33 + [32])))
	
.LABEL $label$125
	CALL eosio_assert($3, [288])
	CALL eosio_assert($3, [336])
	$28 = CALL db_next_i64(*($26 + [92]), $33)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$150 }
	CALL $72(($33 + [360]), $28)
	
.LABEL $label$150
	CALL $96(($33 + [360]), $26)
	if ( ((*($33 + [344]) & [1]) == 0) ){ goto $label$151 }
	CALL $139(*($33 + [352]))
	
.LABEL $label$151
	$12 = *($33 + [384])
	if ( ($12 == 0) ){ goto $label$152 }
	$14 = ($33 + [388])
	$28 = *($14)
	if ( ((int_32)$28 == (int_32)$12) ){ goto $label$154 }
	
.LOOP $label$155:
	$28 = ($28 + [-24])
	$27 = *($28)
	*($28) = [0]
	if ( ($27 == 0) ){ goto $label$156 }
	if ( ((*($27 + [76]) & [1]) == 0) ){ goto $label$157 }
	CALL $139(*(($27 + [84])))
	
.LABEL $label$157
	CALL $139($27)
	
.LABEL $label$156
	if ( ((int_32)$12 != (int_32)$28) ){ goto $label$155 }
	$28 = *(($33 + [384]))
	goto $label$153 
	
.LABEL $label$154
	$28 = $12
	
.LABEL $label$153
	*($14) = $12
	CALL $139($28)
	
.LABEL $label$152
	*([0] + [4]) = ($33 + [416])
	return (unreachable)
	
.LABEL $label$18
	CALL $140(($33 + [344]))
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [128])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [128])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $185 ()
{
	(unreachable)
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [32])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [96])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [128])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [128])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [128])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	$20 = (*([0] + [4]) - [16])
	*([0] + [4]) = $20
	$4 = (int_64)0
	$18 = (int_64)59
	$19 = [160]
	$15 = (int_64)0
	
.LOOP $label$1:
	$16 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($19)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [165])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$18 & (int_64)4294967295))
	
.LABEL $label$2
	$19 = ($19 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$15 = ((int_64)$16 | (int_64)$15)
	$18 = ((int_64)$18 + (int_64)-5)
	if ( ((int_64)$18 != (int_64)-6) ){ goto $label$1 }
	$4 = (int_64)0
	$16 = (int_64)59
	$19 = [176]
	$17 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$10 }
	$7 = *($19)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [165])
	goto $label$8 
	
.LABEL $label$10
	$18 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$18 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$18 = ((int_64)((int_64)$18 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$6
	$19 = ($19 + [1])
	$16 = ((int_64)$16 + (int_64)-5)
	$17 = ((int_64)$18 | (int_64)$17)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$5 }
	CALL require_auth2($15, $17)
	$3 = ($0 + [104])
	$1 = ($0 + [24])
	$2 = ($20 | [1])
	$8 = ($0 + [32])
	$9 = ($20 + [8])
	$10 = ($0 + [48])
	$11 = ($0 + [52])
	$12 = ($0 + [128])
	$13 = ($0 + [132])
	$14 = ($0 + [112])
	$18 = (int_64)0
	
.LOOP $label$13:
	$19 = CALL db_lowerbound_i64(*($1), *($8), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$12 }
	$19 = CALL $36($1, $19)
	CALL prints([192])
	CALL _ZNSt3__19to_stringEy($20, *($19))
	CALL prints(( *($9) ? $2 : (*($20) & [1]) ))
	if ( ((*($20) & [1]) == 0) ){ goto $label$14 }
	CALL $139(*($9))
	
.LABEL $label$14
	if ( ((int_64)*($19 + [64]) != (int_64)2) ){ goto $label$12 }
	if ( ((uint_32)(*($19 + [72]) + [86400]) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$12 }
	$4 = *($19)
	CALL prints([208])
	CALL _ZNSt3__19to_stringEy($20, $4)
	CALL prints(( *($9) ? $2 : (*($20) & [1]) ))
	if ( ((*($20) & [1]) == 0) ){ goto $label$15 }
	CALL $139(*($9))
	
.LABEL $label$15
	$5 = *($10)
	$0 = *($11)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$16 }
	$19 = ($0 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$17:
	if ( ((int_64)*(*($19)) == (int_64)$4) ){ goto $label$16 }
	$0 = $19
	$7 = ($19 + [-24])
	$19 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$19 }
	$19 = *(($0 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [100]) == (int_32)$1), [224])
	goto $label$18 
	
.LABEL $label$19
	$19 = [0]
	$7 = CALL db_find_i64(*($1), *($8), (int_64)7035924439720001536, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$18 }
	$19 = CALL $36($1, $7)
	CALL eosio_assert(((int_32)*($19 + [100]) == (int_32)$1), [224])
	
.LABEL $label$18
	$7 = ((int_32)$19 != (int_32)[0])
	CALL eosio_assert($7, [288])
	CALL eosio_assert($7, [336])
	$7 = CALL db_next_i64(*($19 + [104]), $20)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$20 }
	CALL $36($1, $7)
	
.LABEL $label$20
	CALL $37($1, $19)
	$5 = *($12)
	$0 = *($13)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$21 }
	$19 = ($0 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$22:
	if ( ((int_64)*(*($19)) == (int_64)$4) ){ goto $label$21 }
	$0 = $19
	$7 = ($19 + [-24])
	$19 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	$18 = ((int_64)$18 + (int_64)1)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$25 }
	$19 = *(($0 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [88]) == (int_32)$3), [224])
	if ( $19 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$19 = CALL db_find_i64(*($3), *($14), (int_64)7035937270569123840, $4)
	if ( ((int_32)$19 < (int_32)[0]) ){ goto $label$23 }
	$19 = CALL $38($3, $19)
	CALL eosio_assert(((int_32)*($19 + [88]) == (int_32)$3), [224])
	
.LABEL $label$24
	CALL eosio_assert([1], [288])
	CALL eosio_assert([1], [336])
	$7 = CALL db_next_i64(*($19 + [92]), $20)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$26 }
	CALL $38($3, $7)
	
.LABEL $label$26
	CALL $39($3, $19)
	
.LABEL $label$23
	if ( ((uint_64)$18 <= (uint_64)(int_64)99) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_64)$18 != (int_64)0) ){ goto $label$11 }
	CALL eosio_assert([0], [368])
	
.LABEL $label$11
	*([0] + [4]) = ($20 + [16])
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$2 }
	$3 = ($2 + [1])
	$12 = ($2 + [8])
	
.LOOP $label$4:
	$4 = ($0 + [16])
	$7 = ($8 & [1])
	$8 = *($2)
	$10 = ($2 + [4])
	$8 = ( *($10) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($0 + [16])
	$11 = ($0 + [20])
	$6 = ( *($11) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$8 }
	$5 = CALL memcmp(( *($12) ? $3 : $7 ), ( *(($0 + [24])) ? ($4 + [1]) : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$8 }
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = *($0)
	if ( $6 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	$7 = ($8 & [1])
	$8 = *($4)
	$8 = ( *($11) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$10 }
	$4 = CALL memcmp(( *(($0 + [24])) ? ($4 + [1]) : $7 ), ( *($12) ? $3 : $5 ), $9)
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	goto $label$3 
	
.LABEL $label$10
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$3 }
	
.LABEL $label$9
	$13 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$3 }
	$0 = $13
	
.LABEL $label$5
	$13 = $0
	$0 = $6
	goto $label$4 
	
.LABEL $label$3
	*($1) = $0
	return $13
	
.LABEL $label$2
	*($1) = $13
	return $13
	
.LABEL $label$1
	*($1) = $0
	return $0
}

void .FUNC $117 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([2384])
	CALL prints_l($2, $3)
	CALL prints([2400])
	CALL $125($1, [0])
	*([0] + [4]) = $10
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$2 }
	$3 = ($1 + [1])
	$10 = ($1 + [4])
	$11 = ($1 + [8])
	$0 = $2
	
.LOOP $label$4:
	$4 = $0
	$0 = $6
	
.LOOP $label$7:
	$7 = ($8 & [1])
	$8 = *($0 + [16])
	$8 = ( *(($0 + [20])) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($1)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$9 }
	$5 = CALL memcmp(( *(($0 + [24])) ? (($0 + [16]) + [1]) : $7 ), ( *($11) ? $3 : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$6 }
	
.LABEL $label$8
	$0 = *($0 + [4])
	if ( $0 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0)
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$3
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$2 }
	$7 = ($8 & [1])
	$8 = *($1)
	$8 = ( *(($1 + [4])) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($0 + [16])
	$6 = ( *($0 + [20]) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$10 }
	$5 = CALL memcmp(( *(($1 + [8])) ? $3 : $7 ), ( *($0 + [24]) ? (($0 + [16]) + [1]) : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$10
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$1 }
	
.LABEL $label$2
	$0 = $2
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [224])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $126($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [224])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$6 = CALL $149($2, $3, [0])
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$2 }
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$7 = [0]
	
.LOOP $label$3:
	CALL $156($8, $2, $7, ($6 - $7), $2)
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*($4)) ){ goto $label$5 }
	*($7) = *($8)
	$7 = ($8 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($8) = [0]
	*($8 + [4]) = [0]
	*($5) = (*($5) + [12])
	goto $label$4 
	
.LABEL $label$5
	CALL $128($0, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$4 }
	CALL $139(*(($8 + [8])))
	
.LABEL $label$4
	$7 = ($6 + [1])
	$6 = CALL $149($2, $3, $7)
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL $156($8, $2, $7, [-1], $2)
	$2 = ($0 + [4])
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($7) = *($8)
	$7 = ($8 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($8) = [0]
	*($8 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $128($0, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$6 }
	CALL $139(*($8 + [8]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$2 }
	$3 = ($2 + [1])
	$12 = ($2 + [8])
	
.LOOP $label$4:
	$4 = ($0 + [16])
	$7 = ($8 & [1])
	$8 = *($2)
	$10 = ($2 + [4])
	$8 = ( *($10) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($0 + [16])
	$11 = ($0 + [20])
	$6 = ( *($11) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$8 }
	$5 = CALL memcmp(( *($12) ? $3 : $7 ), ( *(($0 + [24])) ? ($4 + [1]) : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$8 }
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = *($0)
	if ( $6 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	$7 = ($8 & [1])
	$8 = *($4)
	$8 = ( *($11) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$10 }
	$4 = CALL memcmp(( *(($0 + [24])) ? ($4 + [1]) : $7 ), ( *($12) ? $3 : $5 ), $9)
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	goto $label$3 
	
.LABEL $label$10
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$3 }
	
.LABEL $label$9
	$13 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$3 }
	$0 = $13
	
.LABEL $label$5
	$13 = $0
	$0 = $6
	goto $label$4 
	
.LABEL $label$3
	*($1) = $0
	return $13
	
.LABEL $label$2
	*($1) = $13
	return $13
	
.LABEL $label$1
	*($1) = $0
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$4 = *($0)
	$5 = *($4)
	*($7 + [16]) = *(*($4 + [4]) + [64])
	if ( (CALL memcmp(*($4 + [8]), ($7 + [16]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [108])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7035924439720001536, $7, *(*($4 + [16])))
	*(*(($4 + [12])) + [108]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$1
	$4 = *($0)
	$5 = *($4)
	*($7 + [16]) = *(*($4 + [4]) + [72])
	if ( (CALL memcmp((*($4 + [8]) + [8]), ($7 + [16]), [8]) == 0) ){ goto $label$3 }
	$6 = *((*($4 + [12]) + [112]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7035924439720001537, $7, *(*($4 + [16])))
	*((*(($4 + [12])) + [112])) = $6
	
.LABEL $label$4
	CALL db_idx64_update($6, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$3
	$4 = *($0)
	$6 = *($4)
	$0 = *($4 + [4])
	*($7 + [24]) = *(($0 + [24]))
	*($7 + [16]) = *($0 + [16])
	if ( (CALL memcmp((*($4 + [8]) + [16]), ($7 + [16]), [16]) == 0) ){ goto $label$5 }
	$0 = *((*($4 + [12]) + [116]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = CALL db_idx128_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001538, $7, *(*($4 + [16])))
	*((*(($4 + [12])) + [116])) = $0
	
.LABEL $label$6
	CALL db_idx128_update($0, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $111 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2432]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2448]
	$6 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$14 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$2 = ($2 + [165])
	goto $label$12 
	
.LABEL $label$14
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$10
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2464]
	$6 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$20 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$2 = ($2 + [165])
	goto $label$18 
	
.LABEL $label$20
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$16
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$15 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2480]
	$6 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$5 > (uint_64)(int_64)8) ){ goto $label$26 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$2 = ($2 + [165])
	goto $label$24 
	
.LABEL $label$26
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$22
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [2496]
	$6 = (int_64)0
	
.LOOP $label$27:
	$4 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$28 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$2 = ($2 + [165])
	goto $label$29 
	
.LABEL $label$30
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$28
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$27 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [2512]
	$6 = (int_64)0
	
.LOOP $label$31:
	$4 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$32 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$2 = ($2 + [165])
	goto $label$33 
	
.LABEL $label$34
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$32
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$31 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2528]
	$6 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$40 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$2 = ($2 + [165])
	goto $label$38 
	
.LABEL $label$40
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$36
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$35 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2544]
	$6 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$46 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$2 = ($2 + [165])
	goto $label$44 
	
.LABEL $label$46
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$42
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$41 }
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$7 }
	
.LABEL $label$8
	return [1]
	
.LABEL $label$7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2560]
	$6 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$52 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$2 = ($2 + [165])
	goto $label$50 
	
.LABEL $label$52
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$48
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$47 }
	return ((int_64)$6 == (int_64)$1)
}

int_32 .FUNC $118 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [92]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1120])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4229443000054317056)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1056])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1056])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $72(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $119 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [928])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $138([112])) + [24]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [32])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [96])
	*($4 + [84]) = [0]
	*($4 + [76 align=4]) = (int_64)0
	*($4 + [88]) = $1
	CALL $123(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [92])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $88(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [76]) & [1]) == 0) ){ goto $label$9 }
	CALL $139(*(($3 + [84])))
	
.LABEL $label$9
	CALL $139($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [144])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [2])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $33($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [2]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[3]), [128])
	CALL memcpy($4, *($5), [4])
	$7 = (*($5) + [4])
	*($5) = $7
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [128])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = (*([0] + [4]) - [272])
	*([0] + [4]) = $2
	*(($4 = $2) + [268]) = $0
	*($4 + [256]) = *($1)
	*($4 + [260]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $22(($4 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($4 + [12]) = ($4 + [256])
	*($4 + [8]) = ($4 + [268])
	CALL $23(($4 + [8]), ($4 + [16]))
	if ( ((*($4 + [200]) & [1]) == 0) ){ goto $label$6 }
	CALL $139(*(($4 + [208])))
	
.LABEL $label$6
	$0 = *(($4 + [188]))
	if ( ($0 == 0) ){ goto $label$7 }
	$3 = ($4 + [192])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$9 }
	$2 = ([0] - $0)
	$1 = ($1 + [-12])
	
.LOOP $label$10:
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL $139(*(($1 + [8])))
	
.LABEL $label$11
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $2) != (int_32)[-12]) ){ goto $label$10 }
	$1 = *(($4 + [188]))
	goto $label$8 
	
.LABEL $label$9
	$1 = $0
	
.LABEL $label$8
	*($3) = $0
	CALL $139($1)
	
.LABEL $label$7
	$1 = *($4 + [176])
	if ( ($1 == 0) ){ goto $label$12 }
	*(($4 + [180])) = $1
	CALL $139($1)
	
.LABEL $label$12
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL $139(*(($4 + [48])))
	
.LABEL $label$13
	*([0] + [4]) = ($4 + [272])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [672])
	*([0] + [4]) = $12
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $155(($12 + [320]), ($1 + [24]))
	*(($7 = (($12 + [288]) + [24]))) = *(($1 + [72]))
	*(($8 = (($12 + [288]) + [16]))) = *(($1 + [64]))
	*($12 + [296]) = *(($1 + [56]))
	*($12 + [288]) = *($1 + [48])
	CALL memcpy(($12 + [222]), ($1 + [80]), [66])
	$5 = *($1 + [152])
	$6 = CALL $24(($12 + [192]), ($1 + [160]))
	CALL $155(($12 + [176]), ($1 + [184]))
	*(($9 = (($12 + [160]) + [8]))) = *(($1 + [208]))
	*(($10 = (($12 + [144]) + [8]))) = *(($1 + [224]))
	*($12 + [160]) = *($1 + [200])
	*($12 + [144]) = *($1 + [216])
	*((($12 + [464]) + [8])) = *($10)
	*((($12 + [448]) + [8])) = *($9)
	*($12 + [464]) = *($12 + [144])
	*($12 + [448]) = *($12 + [160])
	CALL memcpy(($12 + [376]), ($12 + [222]), [66])
	*((($12 + [336]) + [24])) = *($7)
	*((($12 + [336]) + [16])) = *($8)
	*($12 + [344]) = *($12 + [296])
	*($12 + [336]) = *($12 + [288])
	$1 = *($0 + [4])
	$7 = *($1 + [4])
	$0 = (*(*($0)) + int_32($7 >> [1]))
	$1 = *($1)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $155(($12 + [656]), ($12 + [320]))
	*(($8 = (($12 + [624]) + [24]))) = *((($12 + [336]) + [24]))
	*(($9 = (($12 + [624]) + [16]))) = *((($12 + [336]) + [16]))
	*($12 + [632]) = *($12 + [344])
	*($12 + [624]) = *($12 + [336])
	CALL memcpy(($12 + [552]), ($12 + [376]), [66])
	$7 = CALL $24(($12 + [528]), $6)
	CALL $155(($12 + [512]), ($12 + [176]))
	*(($10 = (($12 + [496]) + [8]))) = *((($12 + [448]) + [8]))
	*(($11 = (($12 + [480]) + [8]))) = *((($12 + [464]) + [8]))
	*($12 + [496]) = *($12 + [448])
	*($12 + [480]) = *($12 + [464])
	*((($12 + [112]) + [24])) = *($8)
	*((($12 + [112]) + [16])) = *($9)
	*($12 + [120]) = *($12 + [632])
	*($12 + [112]) = *($12 + [624])
	CALL memcpy(($12 + [46]), ($12 + [552]), [66])
	*((($12 + [24]) + [8])) = *($10)
	*((($12 + [8]) + [8])) = *($11)
	*($12 + [24]) = *($12 + [496])
	*($12 + [8]) = *($12 + [480])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $4), (int_64 ($12 + [656])), (int_32 ($12 + [112])), (int_32 ($12 + [46])), (int_32 $5), (int_64 $7), (int_32 ($12 + [512])), (int_32 ($12 + [24])), (int_32 ($12 + [8])), (int_32 $1))
	if ( ((*($12 + [512]) & [1]) == 0) ){ goto $label$2 }
	CALL $139(*($12 + [520]))
	
.LABEL $label$2
	$8 = *($7 + [12])
	if ( ($8 == 0) ){ goto $label$3 }
	$9 = ($7 + [16])
	$1 = *($9)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$5 }
	$0 = ([0] - $8)
	$1 = ($1 + [-12])
	
.LOOP $label$6:
	if ( ((*($1) & [1]) == 0) ){ goto $label$7 }
	CALL $139(*(($1 + [8])))
	
.LABEL $label$7
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$6 }
	$1 = *(($7 + [12]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $8
	
.LABEL $label$4
	*($9) = $8
	CALL $139($1)
	
.LABEL $label$3
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$8 }
	*($7 + [4]) = $1
	CALL $139($1)
	
.LABEL $label$8
	if ( ((*($12 + [656]) & [1]) == 0) ){ goto $label$9 }
	CALL $139(*($12 + [664]))
	
.LABEL $label$9
	if ( ((*($12 + [176]) & [1]) == 0) ){ goto $label$10 }
	CALL $139(*($12 + [184]))
	
.LABEL $label$10
	$7 = *($6 + [12])
	if ( ($7 == 0) ){ goto $label$11 }
	$8 = ($6 + [16])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$13 }
	$0 = ([0] - $7)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $139(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $0) != (int_32)[-12]) ){ goto $label$14 }
	$1 = *(($6 + [12]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $7
	
.LABEL $label$12
	*($8) = $7
	CALL $139($1)
	
.LABEL $label$11
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$16 }
	*($6 + [4]) = $1
	CALL $139($1)
	
.LABEL $label$16
	if ( ((*($12 + [320]) & [1]) == 0) ){ goto $label$17 }
	CALL $139(*($12 + [328]))
	
.LABEL $label$17
	*([0] + [4]) = ($12 + [672])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	$4 = [0]
	*(($0 + [32])) = [0]
	*($0 + [48]) = (int_64)0
	*(($0 + [72])) = [0]
	*(($0 + [64])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [76])) = [0]
	CALL memset(($0 + [80]), [0], [66])
	*($0 + [152]) = (int_64)0
	*($0 + [160]) = (int_64)0
	*(($0 + [168])) = (int_64)0
	*(($0 + [176])) = (int_64)0
	*($0 + [184]) = (int_64)0
	*(($0 + [192])) = [0]
	*($0 + [200]) = (int_64)0
	*(($5 = ($0 + [208]))) = (int_64)1398362884
	CALL eosio_assert([1], [32])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [96])
	*(($4 = ($0 + [224]))) = (int_64)1398362884
	*($0 + [216]) = (int_64)0
	CALL eosio_assert([1], [32])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [96])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $25(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $26(*($1), ($2 + [24]))
	*($4 + [8]) = $2
	CALL $27(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$5 = (*($1 + [4]) - *($1))
	$4 = int_32($5 >> [2])
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$5 = CALL $138($5)
	*(($3 = ($0 + [4]))) = $5
	*(($0 + [8])) = ($5 + ($4 << [2]))
	*($0) = $5
	$2 = *($1)
	$4 = (*(($1 + [4])) - $2)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $2, $4)
	*($3) = (*($3) + $4)
	
.LABEL $label$3
	*($0 + [12 align=4]) = (int_64)0
	*(($0 + [20])) = [0]
	$5 = (*(($1 + [16])) - *($1 + [12]))
	$2 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[357913942]) ){ goto $label$1 }
	$4 = CALL $138($5)
	*(($3 = ($0 + [16]))) = $4
	*(($0 + [20])) = ($4 + ((int_32)$2 * (int_32)[12]))
	*(($0 + [12])) = $4
	$1 = *(($1 + [16]))
	$5 = *(($1 + [12]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $155($4, $5)
	$4 = (*($3) + [12])
	*($3) = $4
	$5 = ($5 + [12])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	CALL $154(($0 + [12]))
	(unreachable)
	return (unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [128])
	CALL memcpy(($2 + [48]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($0)
	*($4) = *($1)
	*($4 + [12]) = ($3 + [81])
	*($4 + [8]) = ($3 + [80])
	*($4 + [16]) = ($3 + [82])
	*($4 + [20]) = ($3 + [83])
	*($4 + [24]) = ($3 + [84])
	*($4 + [28]) = ($3 + [85])
	*($4 + [32]) = ($3 + [86])
	*($4 + [36]) = ($3 + [87])
	*($4 + [40]) = ($3 + [88])
	*($4 + [44]) = ($3 + [89])
	*($4 + [48]) = ($3 + [90])
	*($4 + [52]) = ($3 + [91])
	*($4 + [56]) = ($3 + [92])
	*($4 + [60]) = ($3 + [93])
	*($4 + [64]) = ($3 + [94])
	*($4 + [68]) = ($3 + [95])
	*($4 + [72]) = ($3 + [96])
	*($4 + [76]) = ($3 + [97])
	*($4 + [80]) = ($3 + [98])
	*($4 + [84]) = ($3 + [99])
	*($4 + [88]) = ($3 + [100])
	*($4 + [92]) = ($3 + [101])
	*($4 + [96]) = ($3 + [102])
	*($4 + [100]) = ($3 + [103])
	*($4 + [104]) = ($3 + [104])
	*($4 + [108]) = ($3 + [105])
	*($4 + [112]) = ($3 + [106])
	*($4 + [116]) = ($3 + [107])
	*($4 + [120]) = ($3 + [108])
	*($4 + [124]) = ($3 + [109])
	*($4 + [128]) = ($3 + [110])
	*($4 + [132]) = ($3 + [111])
	*($4 + [136]) = ($3 + [112])
	*($4 + [140]) = ($3 + [113])
	*($4 + [144]) = ($3 + [114])
	*($4 + [148]) = ($3 + [115])
	*($4 + [152]) = ($3 + [116])
	*($4 + [156]) = ($3 + [117])
	*($4 + [160]) = ($3 + [118])
	*($4 + [164]) = ($3 + [119])
	*($4 + [168]) = ($3 + [120])
	*($4 + [172]) = ($3 + [121])
	*($4 + [176]) = ($3 + [122])
	*($4 + [180]) = ($3 + [123])
	*($4 + [184]) = ($3 + [124])
	*($4 + [188]) = ($3 + [125])
	*($4 + [192]) = ($3 + [126])
	*($4 + [196]) = ($3 + [127])
	*($4 + [200]) = ($3 + [128])
	*($4 + [204]) = ($3 + [129])
	*($4 + [208]) = ($3 + [130])
	*($4 + [212]) = ($3 + [131])
	*($4 + [216]) = ($3 + [132])
	*($4 + [220]) = ($3 + [133])
	*($4 + [224]) = ($3 + [134])
	*($4 + [228]) = ($3 + [135])
	*($4 + [232]) = ($3 + [136])
	*($4 + [236]) = ($3 + [137])
	*($4 + [240]) = ($3 + [138])
	*($4 + [244]) = ($3 + [139])
	*($4 + [248]) = ($3 + [140])
	*($4 + [252]) = ($3 + [141])
	*($4 + [256]) = ($3 + [142])
	*($4 + [260]) = ($3 + [143])
	*($4 + [264]) = ($3 + [144])
	*($4 + [268]) = ($3 + [145])
	CALL $28(($4 + [8]), $4)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($3 + [152]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL $29($0, ($3 + [160]))
	CALL $30($0, ($3 + [172]))
	*($4 + [8]) = $3
	CALL $31(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [272])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $34($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $143($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $138($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $143($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $139($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $140($7)
	return (unreachable)
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $69(*($1), (*($0) + [184]))
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($2 + [200]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($2 + [208]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($2 + [216]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((int_32)(*($0 + [8]) - $1) > (int_32)[7]), [912])
	CALL memcpy(*($0 + [4]), ($2 + [224]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [912])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($2 + [4]), ($3 + [32]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [912])
	CALL memcpy(*($2 + [4]), ($3 + [40]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($2 + [4]), ($0 + [48]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((int_32)(*($2 + [8]) - $3) > (int_32)[7]), [912])
	CALL memcpy(*($2 + [4]), ($0 + [56]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($2 + [4]), ($0 + [64]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $69(*($1), ($0 + [72]))
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($1 = *($1))) = (*($1) + [1])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [320])
	*([0] + [4]) = $7
	$3 = *($1 + [8])
	$2 = *($1)
	CALL memcpy(($7 + [110]), ($1 + [16]), [66])
	*($7 + [104]) = [0]
	*($7 + [96]) = (int_64)0
	$6 = (*(($1 + [88])) - *($1 + [84]))
	$5 = int_32($6 >> [2])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$6 = CALL $138($6)
	*(($7 + [104])) = ($6 + ($5 << [2]))
	*($7 + [96]) = $6
	*($7 + [100]) = $6
	$4 = *(($1 + [84]))
	$5 = (*(($1 + [88])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $4, $5)
	*($7 + [100]) = ($6 + $5)
	
.LABEL $label$3
	*($7 + [88]) = [0]
	*($7 + [80]) = (int_64)0
	$6 = (*(($1 + [100])) - *($1 + [96]))
	$5 = ((int_32)$6 / (int_32)[12])
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$1 }
	$6 = CALL $138($6)
	*(($7 + [88])) = ($6 + ((int_32)$5 * (int_32)[12]))
	*($7 + [80]) = $6
	*($7 + [84]) = $6
	$1 = *(($1 + [100]))
	$5 = *(($1 + [96]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $155($6, $5)
	$6 = ($6 + [12])
	$5 = ($5 + [12])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$5 }
	*($7 + [84]) = $6
	
.LABEL $label$4
	CALL memcpy(($7 + [176]), ($7 + [110]), [66])
	$6 = *($0 + [4])
	$1 = *($6 + [4])
	$5 = (*(*($0)) + int_32($1 >> [1]))
	$6 = *($6)
	if ( (($1 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($5) + $6))
	
.LABEL $label$6
	CALL memcpy(($7 + [248]), ($7 + [176]), [66])
	CALL memcpy(($7 + [14]), ($7 + [248]), [66])
	CALL void $5((int_32 $2), (int_64 $3), (int_64 ($7 + [14])), (int_32 ($7 + [96])), (int_32 ($7 + [80])), (int_32 $6))
	$1 = *($7 + [80])
	if ( ($1 == 0) ){ goto $label$7 }
	$6 = *($7 + [84])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	$5 = ([0] - $1)
	$6 = ($6 + [-12])
	
.LOOP $label$10:
	if ( ((*($6) & [1]) == 0) ){ goto $label$11 }
	CALL $139(*(($6 + [8])))
	
.LABEL $label$11
	$6 = ($6 + [-12])
	if ( ((int_32)($6 + $5) != (int_32)[-12]) ){ goto $label$10 }
	$6 = *($7 + [80])
	goto $label$8 
	
.LABEL $label$9
	$6 = $1
	
.LABEL $label$8
	*($7 + [84]) = $1
	CALL $139($6)
	
.LABEL $label$7
	$6 = *($7 + [96])
	if ( ($6 == 0) ){ goto $label$12 }
	*($7 + [100]) = $6
	CALL $139($6)
	
.LABEL $label$12
	*([0] + [4]) = ($7 + [320])
	return (unreachable)
	
.LABEL $label$2
	CALL $154(($7 + [96]))
	
.LABEL $label$1
	CALL $154(($7 + [80]))
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [17])
	*($4 + [8]) = ($3 + [16])
	*($4 + [16]) = ($3 + [18])
	*($4 + [20]) = ($3 + [19])
	*($4 + [24]) = ($3 + [20])
	*($4 + [28]) = ($3 + [21])
	*($4 + [32]) = ($3 + [22])
	*($4 + [36]) = ($3 + [23])
	*($4 + [40]) = ($3 + [24])
	*($4 + [44]) = ($3 + [25])
	*($4 + [48]) = ($3 + [26])
	*($4 + [52]) = ($3 + [27])
	*($4 + [56]) = ($3 + [28])
	*($4 + [60]) = ($3 + [29])
	*($4 + [64]) = ($3 + [30])
	*($4 + [68]) = ($3 + [31])
	*($4 + [72]) = ($3 + [32])
	*($4 + [76]) = ($3 + [33])
	*($4 + [80]) = ($3 + [34])
	*($4 + [84]) = ($3 + [35])
	*($4 + [88]) = ($3 + [36])
	*($4 + [92]) = ($3 + [37])
	*($4 + [96]) = ($3 + [38])
	*($4 + [100]) = ($3 + [39])
	*($4 + [104]) = ($3 + [40])
	*($4 + [108]) = ($3 + [41])
	*($4 + [112]) = ($3 + [42])
	*($4 + [116]) = ($3 + [43])
	*($4 + [120]) = ($3 + [44])
	*($4 + [124]) = ($3 + [45])
	*($4 + [128]) = ($3 + [46])
	*($4 + [132]) = ($3 + [47])
	*($4 + [136]) = ($3 + [48])
	*($4 + [140]) = ($3 + [49])
	*($4 + [144]) = ($3 + [50])
	*($4 + [148]) = ($3 + [51])
	*($4 + [152]) = ($3 + [52])
	*($4 + [156]) = ($3 + [53])
	*($4 + [160]) = ($3 + [54])
	*($4 + [164]) = ($3 + [55])
	*($4 + [168]) = ($3 + [56])
	*($4 + [172]) = ($3 + [57])
	*($4 + [176]) = ($3 + [58])
	*($4 + [180]) = ($3 + [59])
	*($4 + [184]) = ($3 + [60])
	*($4 + [188]) = ($3 + [61])
	*($4 + [192]) = ($3 + [62])
	*($4 + [196]) = ($3 + [63])
	*($4 + [200]) = ($3 + [64])
	*($4 + [204]) = ($3 + [65])
	*($4 + [208]) = ($3 + [66])
	*($4 + [212]) = ($3 + [67])
	*($4 + [216]) = ($3 + [68])
	*($4 + [220]) = ($3 + [69])
	*($4 + [224]) = ($3 + [70])
	*($4 + [228]) = ($3 + [71])
	*($4 + [232]) = ($3 + [72])
	*($4 + [236]) = ($3 + [73])
	*($4 + [240]) = ($3 + [74])
	*($4 + [244]) = ($3 + [75])
	*($4 + [248]) = ($3 + [76])
	*($4 + [252]) = ($3 + [77])
	*($4 + [256]) = ($3 + [78])
	*($4 + [260]) = ($3 + [79])
	*($4 + [264]) = ($3 + [80])
	*($4 + [268]) = ($3 + [81])
	CALL $28(($4 + [8]), $4)
	CALL $29(*($1), ($3 + [84]))
	CALL $30(*($1), ($3 + [96]))
	*([0] + [4]) = ($4 + [272])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*(($10 = $11) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [736])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [784])
	*((($10 + [48]) + [24])) = *(($1 + [24]))
	*($10 + [64]) = *($1 + [16])
	*($10 + [48]) = *($1 + [64])
	*($10 + [56]) = *($1 + [72])
	*($1 + [64]) = (int_64)1
	$9 = *($1)
	*($10 + [40]) = $9
	$8 = $9
	$3 = *($3)
	$7 = ($1 + [76])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	CALL $70($7, *($3), *($3 + [4]))
	CALL $71(($1 + [88]), *($3 + [12]), *(($3 + [16])))
	$8 = *($1)
	
.LABEL $label$1
	$4 = ($0 + [36])
	CALL eosio_assert(((int_64)$9 == (int_64)$8), [848])
	$7 = *($7)
	$6 = *(($1 + [80]))
	$5 = ($6 - $7)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [2]))
	$3 = [68]
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$3 }
	$3 = (($5 & [-4]) + $3)
	
.LABEL $label$3
	$7 = *(($1 + [88]))
	$5 = *(($1 + [92]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($5 - $7) / (int_32)[12]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$6 = *($7)
	$6 = ( *($7 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$3 = ($6 + $3)
	$8 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$7:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$7 }
	$7 = ($7 + [12])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($3 <= [513]) ){ goto $label$9 }
	$7 = CALL malloc($3)
	goto $label$8 
	
.LABEL $label$9
	$7 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$8
	*($10 + [28]) = $7
	*($10 + [24]) = $7
	*($10 + [32]) = ($7 + $3)
	CALL $66(($10 + [24]), $1)
	CALL db_update_i64(*(($1 + [104])), $2, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$10 }
	CALL free($7)
	$9 = *($10 + [40])
	
.LABEL $label$10
	if ( (uint_64)($9 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($10 + [4]) = $1
	*($10) = $0
	*($10 + [12]) = $1
	*($10 + [8]) = ($10 + [48])
	*($10 + [16]) = ($10 + [40])
	*($10 + [20]) = ($10 + [80])
	*($10 + [88]) = $10
	CALL $110(($10 + [88]), $4, ($4 + [1]), ($4 + [2]))
	*([0] + [4]) = ($10 + [96])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$2 }
	$3 = ($1 + [1])
	$10 = ($1 + [4])
	$11 = ($1 + [8])
	$0 = $2
	
.LOOP $label$4:
	$4 = $0
	$0 = $6
	
.LOOP $label$7:
	$7 = ($8 & [1])
	$8 = *($0 + [16])
	$8 = ( *(($0 + [20])) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($1)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$9 }
	$5 = CALL memcmp(( *(($0 + [24])) ? (($0 + [16]) + [1]) : $7 ), ( *($11) ? $3 : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$6 }
	
.LABEL $label$8
	$0 = *($0 + [4])
	if ( $0 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0)
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$3
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$2 }
	$7 = ($8 & [1])
	$8 = *($1)
	$8 = ( *(($1 + [4])) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($0 + [16])
	$6 = ( *($0 + [20]) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$10 }
	$5 = CALL memcmp(( *(($1 + [8])) ? $3 : $7 ), ( *($0 + [24]) ? (($0 + [16]) + [1]) : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$10
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$1 }
	
.LABEL $label$2
	$0 = $2
	
.LABEL $label$1
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_32 $51
	int_32 $52
	int_32 $53
	int_32 $54
	int_32 $55
	int_32 $56
	int_32 $57
	int_32 $58
	int_32 $59
	int_32 $60
	int_32 $61
	int_32 $62
	int_32 $63
	int_32 $64
	int_32 $65
	int_32 $66
	int_32 $67
	int_32 $68
	int_32 $69
	int_32 $70
	int_32 $71
	int_64 $72
	int_32 $73
	int_32 $74
	$73 = (*([0] + [4]) - [288])
	*([0] + [4]) = $73
	$74 = *($0 + [4])
	*($1) = *(*($74))
	$3 = *($0)
	$2 = CALL memcpy(($1 + [8]), *($74 + [4]), [66])
	*($1 + [80]) = *(*($74 + [8]))
	*(($74 = $73) + [16]) = [8]
	*($74) = ($74 + [16])
	$5 = ($1 + [9])
	*($74 + [28]) = $5
	*($74 + [24]) = $2
	$6 = ($1 + [10])
	*($74 + [32]) = $6
	$7 = ($1 + [11])
	*($74 + [36]) = $7
	$8 = ($1 + [12])
	*($74 + [40]) = $8
	$9 = ($1 + [13])
	*($74 + [44]) = $9
	$10 = ($1 + [14])
	*($74 + [48]) = $10
	$11 = ($1 + [15])
	*($74 + [52]) = $11
	$12 = ($1 + [16])
	*($74 + [56]) = $12
	$13 = ($1 + [17])
	*($74 + [60]) = $13
	$14 = ($1 + [18])
	*($74 + [64]) = $14
	$15 = ($1 + [19])
	*($74 + [68]) = $15
	$16 = ($1 + [20])
	*($74 + [72]) = $16
	$17 = ($1 + [21])
	*($74 + [76]) = $17
	$18 = ($1 + [22])
	*($74 + [80]) = $18
	$19 = ($1 + [23])
	*($74 + [84]) = $19
	$20 = ($1 + [24])
	*($74 + [88]) = $20
	$21 = ($1 + [25])
	*($74 + [92]) = $21
	$22 = ($1 + [26])
	*($74 + [96]) = $22
	$23 = ($1 + [27])
	*($74 + [100]) = $23
	$24 = ($1 + [28])
	*($74 + [104]) = $24
	$25 = ($1 + [29])
	*($74 + [108]) = $25
	$26 = ($1 + [30])
	*($74 + [112]) = $26
	$27 = ($1 + [31])
	*($74 + [116]) = $27
	$28 = ($1 + [32])
	*($74 + [120]) = $28
	$29 = ($1 + [33])
	*($74 + [124]) = $29
	$30 = ($1 + [34])
	*($74 + [128]) = $30
	$31 = ($1 + [35])
	*($74 + [132]) = $31
	$32 = ($1 + [36])
	*($74 + [136]) = $32
	$33 = ($1 + [37])
	*($74 + [140]) = $33
	$34 = ($1 + [38])
	*($74 + [144]) = $34
	$35 = ($1 + [39])
	*($74 + [148]) = $35
	$36 = ($1 + [40])
	*($74 + [152]) = $36
	$37 = ($1 + [41])
	*($74 + [156]) = $37
	$38 = ($1 + [42])
	*($74 + [160]) = $38
	$39 = ($1 + [43])
	*($74 + [164]) = $39
	$40 = ($1 + [44])
	*($74 + [168]) = $40
	$41 = ($1 + [45])
	*($74 + [172]) = $41
	$42 = ($1 + [46])
	*($74 + [176]) = $42
	$43 = ($1 + [47])
	*($74 + [180]) = $43
	$44 = ($1 + [48])
	*($74 + [184]) = $44
	$45 = ($1 + [49])
	*($74 + [188]) = $45
	$46 = ($1 + [50])
	*($74 + [192]) = $46
	$47 = ($1 + [51])
	*($74 + [196]) = $47
	$48 = ($1 + [52])
	*($74 + [200]) = $48
	$49 = ($1 + [53])
	*($74 + [204]) = $49
	$50 = ($1 + [54])
	*($74 + [208]) = $50
	$51 = ($1 + [55])
	*($74 + [212]) = $51
	$52 = ($1 + [56])
	*($74 + [216]) = $52
	$53 = ($1 + [57])
	*($74 + [220]) = $53
	$54 = ($1 + [58])
	*($74 + [224]) = $54
	$55 = ($1 + [59])
	*($74 + [228]) = $55
	$56 = ($1 + [60])
	*($74 + [232]) = $56
	$57 = ($1 + [61])
	*($74 + [236]) = $57
	$58 = ($1 + [62])
	*($74 + [240]) = $58
	$59 = ($1 + [63])
	*($74 + [244]) = $59
	$60 = ($1 + [64])
	*($74 + [248]) = $60
	$61 = ($1 + [65])
	*($74 + [252]) = $61
	$62 = ($1 + [66])
	*($74 + [256]) = $62
	$63 = ($1 + [67])
	*($74 + [260]) = $63
	$64 = ($1 + [68])
	*($74 + [264]) = $64
	$65 = ($1 + [69])
	*($74 + [268]) = $65
	$66 = ($1 + [70])
	*($74 + [272]) = $66
	$67 = ($1 + [71])
	*($74 + [276]) = $67
	$68 = ($1 + [72])
	*($74 + [280]) = $68
	$69 = ($1 + [73])
	*($74 + [284]) = $69
	$4 = ($1 + [80])
	CALL $102(($74 + [24]), $74)
	$70 = *($74 + [16])
	$71 = ($70 + [8])
	if ( ($71 <= [513]) ){ goto $label$2 }
	$73 = CALL malloc($71)
	goto $label$1 
	
.LABEL $label$2
	$73 = ($73 - (($71 + [15]) & [-16]))
	*([0] + [4]) = $73
	
.LABEL $label$1
	*($74) = $73
	*($74 + [8]) = ($73 + $71)
	CALL eosio_assert(((int_32)($70 + [8]) > (int_32)[7]), [912])
	CALL memcpy($73, $1, [8])
	*($74 + [4]) = ($73 + [8])
	*($74 + [16]) = $74
	*($74 + [28]) = $5
	*($74 + [24]) = $2
	*($74 + [32]) = $6
	*($74 + [36]) = $7
	*($74 + [40]) = $8
	*($74 + [44]) = $9
	*($74 + [48]) = $10
	*($74 + [52]) = $11
	*($74 + [56]) = $12
	*($74 + [60]) = $13
	*($74 + [64]) = $14
	*($74 + [68]) = $15
	*($74 + [72]) = $16
	*($74 + [76]) = $17
	*($74 + [80]) = $18
	*($74 + [84]) = $19
	*($74 + [88]) = $20
	*($74 + [92]) = $21
	*($74 + [96]) = $22
	*($74 + [100]) = $23
	*($74 + [104]) = $24
	*($74 + [108]) = $25
	*($74 + [112]) = $26
	*($74 + [116]) = $27
	*($74 + [120]) = $28
	*($74 + [124]) = $29
	*($74 + [128]) = $30
	*($74 + [132]) = $31
	*($74 + [136]) = $32
	*($74 + [140]) = $33
	*($74 + [144]) = $34
	*($74 + [148]) = $35
	*($74 + [152]) = $36
	*($74 + [156]) = $37
	*($74 + [160]) = $38
	*($74 + [164]) = $39
	*($74 + [168]) = $40
	*($74 + [172]) = $41
	*($74 + [176]) = $42
	*($74 + [180]) = $43
	*($74 + [184]) = $44
	*($74 + [188]) = $45
	*($74 + [192]) = $46
	*($74 + [196]) = $47
	*($74 + [200]) = $48
	*($74 + [204]) = $49
	*($74 + [208]) = $50
	*($74 + [212]) = $51
	*($74 + [216]) = $52
	*($74 + [220]) = $53
	*($74 + [224]) = $54
	*($74 + [228]) = $55
	*($74 + [232]) = $56
	*($74 + [236]) = $57
	*($74 + [240]) = $58
	*($74 + [244]) = $59
	*($74 + [248]) = $60
	*($74 + [252]) = $61
	*($74 + [256]) = $62
	*($74 + [260]) = $63
	*($74 + [264]) = $64
	*($74 + [268]) = $65
	*($74 + [272]) = $66
	*($74 + [276]) = $67
	*($74 + [280]) = $68
	*($74 + [284]) = $69
	CALL $100(($74 + [24]), ($74 + [16]))
	CALL eosio_assert(((int_32)(*($74 + [8]) - *($74 + [4])) > (int_32)[7]), [912])
	CALL memcpy(*($74 + [4]), $4, [8])
	*($74 + [4]) = (*($74 + [4]) + [8])
	$72 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($3 + [8]), (int_64)7035937270569123840, *(*($0 + [8])), $72, $73, $71)
	if ( ($71 <= [513]) ){ goto $label$3 }
	CALL free($73)
	
.LABEL $label$3
	if ( (uint_64)($72 <= *($3 + [16])) ){ goto $label$4 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$72 + (int_64)1) : ((uint_64)$72 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($74 + [288])
}

void .FUNC $108 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [928])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $138([104])) + [88]) = $1
	CALL $109(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [92])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $40(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $139($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [304])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	$7 = ($4 + $6)
	*($8 + [24]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [24]))
	$4 = *($8 + [20])
	
.LABEL $label$7
	*(($6 = CALL $138([104])) + [88]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [128])
	CALL memcpy($6, $4, [8])
	*($8 + [20]) = ($4 + [8])
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [9])
	*($8 + [40]) = ($6 + [8])
	*($8 + [48]) = ($6 + [10])
	*($8 + [52]) = ($6 + [11])
	*($8 + [56]) = ($6 + [12])
	*($8 + [60]) = ($6 + [13])
	*($8 + [64]) = ($6 + [14])
	*($8 + [68]) = ($6 + [15])
	*($8 + [72]) = ($6 + [16])
	*($8 + [76]) = ($6 + [17])
	*($8 + [80]) = ($6 + [18])
	*($8 + [84]) = ($6 + [19])
	*($8 + [88]) = ($6 + [20])
	*($8 + [92]) = ($6 + [21])
	*($8 + [96]) = ($6 + [22])
	*($8 + [100]) = ($6 + [23])
	*($8 + [104]) = ($6 + [24])
	*($8 + [108]) = ($6 + [25])
	*($8 + [112]) = ($6 + [26])
	*($8 + [116]) = ($6 + [27])
	*($8 + [120]) = ($6 + [28])
	*($8 + [124]) = ($6 + [29])
	*($8 + [128]) = ($6 + [30])
	*($8 + [132]) = ($6 + [31])
	*($8 + [136]) = ($6 + [32])
	*($8 + [140]) = ($6 + [33])
	*($8 + [144]) = ($6 + [34])
	*($8 + [148]) = ($6 + [35])
	*($8 + [152]) = ($6 + [36])
	*($8 + [156]) = ($6 + [37])
	*($8 + [160]) = ($6 + [38])
	*($8 + [164]) = ($6 + [39])
	*($8 + [168]) = ($6 + [40])
	*($8 + [172]) = ($6 + [41])
	*($8 + [176]) = ($6 + [42])
	*($8 + [180]) = ($6 + [43])
	*($8 + [184]) = ($6 + [44])
	*($8 + [188]) = ($6 + [45])
	*($8 + [192]) = ($6 + [46])
	*($8 + [196]) = ($6 + [47])
	*($8 + [200]) = ($6 + [48])
	*($8 + [204]) = ($6 + [49])
	*($8 + [208]) = ($6 + [50])
	*($8 + [212]) = ($6 + [51])
	*($8 + [216]) = ($6 + [52])
	*($8 + [220]) = ($6 + [53])
	*($8 + [224]) = ($6 + [54])
	*($8 + [228]) = ($6 + [55])
	*($8 + [232]) = ($6 + [56])
	*($8 + [236]) = ($6 + [57])
	*($8 + [240]) = ($6 + [58])
	*($8 + [244]) = ($6 + [59])
	*($8 + [248]) = ($6 + [60])
	*($8 + [252]) = ($6 + [61])
	*($8 + [256]) = ($6 + [62])
	*($8 + [260]) = ($6 + [63])
	*($8 + [264]) = ($6 + [64])
	*($8 + [268]) = ($6 + [65])
	*($8 + [272]) = ($6 + [66])
	*($8 + [276]) = ($6 + [67])
	*($8 + [280]) = ($6 + [68])
	*($8 + [284]) = ($6 + [69])
	*($8 + [288]) = ($6 + [70])
	*($8 + [292]) = ($6 + [71])
	*($8 + [296]) = ($6 + [72])
	*($8 + [300]) = ($6 + [73])
	CALL $28(($8 + [40]), ($8 + [32]))
	CALL eosio_assert(((uint_32)(*((($8 + [16]) + [8])) - *($8 + [20])) > (uint_32)[7]), [128])
	CALL memcpy(($6 + [80]), *($8 + [20]), [8])
	*($6 + [92]) = $1
	*($8 + [32]) = $6
	*($8 + [20]) = (*($8 + [20]) + [8])
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [92])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $40(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $139($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [304])
	return $6
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [432])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [496])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $139($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $139($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($4 = CALL $138([128])) + [76 align=4]) = (int_64)0
	*($4 + [84 align=4]) = (int_64)0
	*($4 + [92 align=4]) = (int_64)0
	*($4 + [100]) = $0
	CALL $42(($8 + [32]), $4)
	*($4 + [108]) = [-1]
	*($4 + [104]) = $1
	*($4 + [112]) = [-1]
	*($4 + [116]) = [-1]
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$7 = *($4 + [104])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($8 + [24]) = [0]
	*($6) = $4
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $43(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *(($1 + [88]))
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [92])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$7 = ([0] - $3)
	$6 = ($6 + [-12])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $139(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-12])
	if ( ((int_32)($6 + $7) != (int_32)[-12]) ){ goto $label$13 }
	$6 = *(($1 + [88]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $139($6)
	
.LABEL $label$10
	$6 = *($1 + [76])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($1 + [80])) = $6
	CALL $139($6)
	
.LABEL $label$15
	CALL $139($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [432])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$9 = ([0] - $3)
	$11 = ($10 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($11)) == (int_64)$2) ){ goto $label$1 }
	$10 = $11
	$5 = ($11 + [-24])
	$11 = $5
	if ( ((int_32)($5 + $9) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$10 != (int_32)$3), [496])
	$9 = ($10 + [-24])
	$7 = *($4)
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$11 = *($10)
	*($10) = [0]
	$3 = *($9)
	*($9) = $11
	if ( ($3 == 0) ){ goto $label$6 }
	$8 = ($3 + [88])
	$4 = *($8)
	if ( ($4 == 0) ){ goto $label$7 }
	$6 = ($3 + [92])
	$11 = *($6)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$9 }
	$5 = ([0] - $4)
	$11 = ($11 + [-12])
	
.LOOP $label$10:
	if ( ((*($11) & [1]) == 0) ){ goto $label$11 }
	CALL $139(*(($11 + [8])))
	
.LABEL $label$11
	$11 = ($11 + [-12])
	if ( ((int_32)($11 + $5) != (int_32)[-12]) ){ goto $label$10 }
	$11 = *($8)
	goto $label$8 
	
.LABEL $label$9
	$11 = $4
	
.LABEL $label$8
	*($6) = $4
	CALL $139($11)
	
.LABEL $label$7
	$11 = *($3 + [76])
	if ( ($11 == 0) ){ goto $label$12 }
	*(($3 + [80])) = $11
	CALL $139($11)
	
.LABEL $label$12
	CALL $139($3)
	
.LABEL $label$6
	*($9 + [8]) = *($10 + [8])
	*(($9 + [16])) = *(($10 + [16]))
	$9 = ($9 + [24])
	$10 = ($10 + [24])
	if ( ((int_32)$10 != (int_32)$7) ){ goto $label$5 }
	$10 = *(($0 + [28]))
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$10 = ($10 + [-24])
	$3 = *($10)
	*($10) = [0]
	if ( ($3 == 0) ){ goto $label$14 }
	$7 = ($3 + [88])
	$4 = *($7)
	if ( ($4 == 0) ){ goto $label$15 }
	$8 = ($3 + [92])
	$11 = *($8)
	if ( ((int_32)$11 == (int_32)$4) ){ goto $label$17 }
	$5 = ([0] - $4)
	$11 = ($11 + [-12])
	
.LOOP $label$18:
	if ( ((*($11) & [1]) == 0) ){ goto $label$19 }
	CALL $139(*(($11 + [8])))
	
.LABEL $label$19
	$11 = ($11 + [-12])
	if ( ((int_32)($11 + $5) != (int_32)[-12]) ){ goto $label$18 }
	$11 = *($7)
	goto $label$16 
	
.LABEL $label$17
	$11 = $4
	
.LABEL $label$16
	*($8) = $4
	CALL $139($11)
	
.LABEL $label$15
	$11 = *($3 + [76])
	if ( ($11 == 0) ){ goto $label$20 }
	*(($3 + [80])) = $11
	CALL $139($11)
	
.LABEL $label$20
	CALL $139($3)
	
.LABEL $label$14
	if ( ((int_32)$10 != (int_32)$9) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $9
	CALL db_remove_i64(*(($1 + [104])))
	*($12 + [4]) = $1
	*($12) = $0
	*($12 + [8]) = $12
	CALL $41(($12 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [144])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $35($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [128])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $138($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $139($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$2 = *($0)
	$5 = ((int_32)($5 - $2) / (int_32)[12])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$4 = [357913941]
	$6 = ((int_32)($6 - $2) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$5 }
	$4 = ($6 << [1])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$6 = CALL $138(((int_32)$4 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	$6 = $1
	
.LOOP $label$6:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	*(($0 + [4])) = ($5 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$4 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $154($0)
	
.LABEL $label$1
	$2 = ($6 + ((int_32)$4 * (int_32)[12]))
	$6 = ($6 + ((int_32)$5 * (int_32)[12]))
	$4 = $6
	$5 = $1
	
.LOOP $label$7:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$3 = ($6 + ((int_32)$1 * (int_32)[12]))
	$4 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	$1 = ([0] - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$10:
	*(($6 + [-12])) = *($4)
	$5 = ($4 + [8])
	*(($6 + [-4])) = *($5)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	$6 = ($6 + [-12])
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $1) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$5 = $4
	
.LABEL $label$8
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$11 }
	$6 = ([0] - $5)
	$4 = ($4 + [-12])
	
.LOOP $label$12:
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	CALL $139(*(($4 + [8])))
	
.LABEL $label$13
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $6) != (int_32)[-12]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $139($5)
	
.LABEL $label$14
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [2])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($7 >> [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $138(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $154($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [2]))
	$2 = ($7 + ($4 << [2]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [2]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $139($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [144])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[12])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $32($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[12])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $139(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $7) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $26($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $26(*($1), (*($0) + [184]))
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [200]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [208]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [216]), *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [224]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}