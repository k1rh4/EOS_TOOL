(data (i32.const 4) "\f0h\00\00")
(data (i32.const 16) "config\00")
(data (i32.const 32) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 96) "error reading iterator\00")
(data (i32.const 128) "read\00")
(data (i32.const 144) "get\00")
(data (i32.const 160) "cannot create objects in table of another contract\00")
(data (i32.const 224) "cannot pass end iterator to modify\00")
(data (i32.const 272) "object passed to modify is not in multi_index\00")
(data (i32.const 320) "cannot modify objects in table of another contract\00")
(data (i32.const 384) "updater cannot change primary key when modifying an object\00")
(data (i32.const 448) "write\00")
(data (i32.const 464) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 512) "Must config the price before play the game.\00")
(data (i32.const 560) "=remainMoney=\00")
(data (i32.const 576) "=\00")
(data (i32.const 592) "|Start FenQian|\00")
(data (i32.const 608) "send money to GM \00")
(data (i32.const 640) "; \00")
(data (i32.const 656) " totalMoney=\00")
(data (i32.const 672) ",rate=\00")
(data (i32.const 688) " player=\00")
(data (i32.const 704) ",oldRoundMoney=\00")
(data (i32.const 720) ",curRoundMoney=\00")
(data (i32.const 736) ",thisPlayerMoney=\00")
(data (i32.const 768) " playerJoinNextRound=\00")
(data (i32.const 800) ",oldrm=\00")
(data (i32.const 816) ";\00")
(data (i32.const 832) "|End FenQian|\00")
(data (i32.const 848) "cannot pass end iterator to erase\00")
(data (i32.const 896) "cannot increment end iterator\00")
(data (i32.const 928) " remove player=\00")
(data (i32.const 944) "object passed to erase is not in multi_index\00")
(data (i32.const 992) "cannot erase objects in table of another contract\00")
(data (i32.const 1056) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1120) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1184) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1232) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1296) "invalid symbol name\00")
(data (i32.const 1328) "nbgame\00")
(data (i32.const 1344) "active\00")
(data (i32.const 1360) "eosio.token\00")
(data (i32.const 1376) "transfer\00")
(data (i32.const 1392) "|SavePlayerToTable=\00")
(data (i32.const 1424) ",money=\00")
(data (i32.const 1440) "|\00")
(data (i32.const 1456) "can\'t get table\00")
(data (i32.const 1472) "curprice=\00")
(data (i32.const 1488) ",targetprice=\00")
(data (i32.const 1504) ",id=\00")
(data (i32.const 1520) ",players=\00")
(data (i32.const 1536) " ||playerstable|| \00")
(data (i32.const 1568) ",curRoundMoney\00")
(data (i32.const 1600) "|CalcCurRoundPlayersMoney|\00")
(data (i32.const 1632) "eosio\00")
(data (i32.const 1648) "onerror\00")
(data (i32.const 1664) "setprice\00")
(data (i32.const 1680) "debug\00")
(data (i32.const 1696) "say\00")
(data (i32.const 1712) "You love has been said!\00")
(data (i32.const 1744) "check_transfer=\00")
(data (i32.const 1760) "nbgame is not involved in this transfer\00")
(data (i32.const 1808) "You must join this game with EOS token.\00")
(data (i32.const 1856) "starting onerror\n\00")
(data (i32.const 1888) "Attempting use of unconfigured proxy\00")
(data (i32.const 1936) "Resending Transaction: \00")
(data (i32.const 1968) " as \00")
(data (i32.const 1984) "\n\00")
(data (i32.const 10384) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "printdf" (func $fimport$17 (param f64)))
(import "env" "printn" (func $fimport$18 (param i64)))
(import "env" "prints" (func $fimport$19 (param i32)))
(import "env" "printui" (func $fimport$20 (param i64)))
(import "env" "printui128" (func $fimport$21 (param i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$23 (param i64)))
(import "env" "require_auth2" (func $fimport$24 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$25 (param i32 i64 i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN6nbgame7configs3getERNS_6configERKy" (func $5))
(export "_ZN6nbgame7configs5storeERKNS_6configERKy" (func $12))
(export "_ZN6nbgame14name_to_stringEy" (func $17))
(export "_ZN6nbgame10add_playerEyRKyy" (func $18))
(export "_ZN6nbgame17SavePlayerToTableEyyybRNS_6configE" (func $19))
(export "_ZN6nbgame7FenQianEyRNS_6configE" (func $20))
(export "_ZN6nbgame20transferEosToSomeoneEyyyy" (func $21))
(export "_ZN6nbgame8DecMoneyEyRNS_6configE" (func $39))
(export "_ZN6nbgame5DebugEy" (func $40))
(export "_ZN6nbgame14apply_setpriceEyNS_9set_priceE" (func $41))
(export "_ZN6nbgame20SavePlayerToOldRoundEyyyRNS_6configE" (func $42))
(export "_ZN6nbgame24CalcOldRoundPlayersMoneyEyRNS_6configE" (func $43))
(export "apply" (func $44))
(export "malloc" (func $65))
(export "free" (func $68))
(export "memcmp" (func $80))
(export "strlen" (func $81))
(export "memchr" (func $82))
(table $0 0 anyfunc)




void .FUNC $79 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZN6nbgame10add_playerEyRKyy (int_64 $0, int_32 $1, int_64 $2)
{
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($8 + [56]) = $0
	*(($8 + [44])) = [0]
	*(($8 + [48])) = [0]
	*($8 + [40]) = [0]
	*($8 + [16]) = [0]
	CALL eosio_assert(CALL $5(($8 + [8]), ($8 + [56])), [512])
	$4 = *($8 + [32])
	$7 = *($8 + [24])
	$3 = ((int_64)$7 + (int_64)$2)
	if ( ((uint_64)$3 >= (uint_64)$4) ){ goto $label$2 }
	CALL _ZN6nbgame17SavePlayerToTableEyyybRNS_6configE($0, *($1), $2, [0], ($8 + [8]))
	goto $label$1 
	
.LABEL $label$2
	CALL _ZN6nbgame17SavePlayerToTableEyyybRNS_6configE($0, *($1), (int_64))($4 - $7), [0], ($8 + [8]))
	$6 = ($8 + [32])
	*(($5 = ($8 + [24]))) = *($6)
	CALL _ZN6nbgame7FenQianEyRNS_6configE($0, ($8 + [8]))
	*($5) = (int_64)0
	$7 = ((int_64)*($6) << (int_64)1)
	*($6) = $7
	$2 = (int_64)
	if ( (int_64)($2($3 - $4)) == 0) ){ goto $label$3 }
	if ( (uint_64)($2 <= $7) ){ goto $label$4 }
	$5 = ($8 + [24])
	$6 = ($8 + [32])
	
.LOOP $label$5:
	CALL _ZN6nbgame17SavePlayerToTableEyyybRNS_6configE($0, *($1), $7, [0], ($8 + [8]))
	CALL _ZN6nbgame7FenQianEyRNS_6configE($0, ($8 + [8]))
	*($5) = (int_64)0
	$7 = *($6)
	*($6) = ((int_64)$7 << (int_64)1)
	CALL prints([560])
	$2 = (int_64)
	CALL printui($2($2 - $7)))
	CALL prints([576])
	$7 = *($6)
	if ( ((uint_64)$2 >= (uint_64)$7) ){ goto $label$5 }
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	
.LABEL $label$4
	CALL _ZN6nbgame17SavePlayerToTableEyyybRNS_6configE($0, *($1), $2, [0], ($8 + [8]))
	goto $label$1 
	
.LABEL $label$3
	*($5) = (int_64)0
	
.LABEL $label$1
	CALL _ZN6nbgame7configs5storeERKNS_6configERKy(($8 + [8]), ($8 + [56]))
	if ( ((*($8 + [40]) & [1]) == 0) ){ goto $label$6 }
	CALL $70(*(($8 + [48])))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [64])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($7 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$7 = [107374182]
	$8 = ((int_32)($8 - $4) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $69(((int_32)$7 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = (*($8) + [40])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $79($0)
	
.LABEL $label$2
	$2 = ($8 + ((int_32)$7 * (int_32)[40]))
	$8 = ($8 + ((int_32)$5 * (int_32)[40]))
	$7 = $8
	
.LOOP $label$8:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = ($7 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-20])
	
.LOOP $label$11:
	*(($8 + [-32])) = *(($1 + [-12]))
	*(($8 + [-40])) = *(($1 + [-20]))
	*(($4 = ($8 + [-24]))) = (int_64)0
	*(($5 = ($8 + [-16]))) = [0]
	$6 = ($1 + [-4])
	*($4) = *($6)
	*(($8 + [-20])) = *($1)
	$4 = ($1 + [4])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($8 + [-12]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($8 + [-4]))) = [0]
	$6 = ($1 + [8])
	*($4) = *($6)
	*(($8 + [-8])) = *(($1 + [12]))
	$4 = ($1 + [16])
	*($5) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$8 = ($8 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $3) != (int_32)[-20]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$7 = ($4 + [-24])
	
.LOOP $label$13:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$14 }
	*(($7 + [16])) = $8
	CALL $70($8)
	
.LABEL $label$14
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [4])) = $8
	CALL $70($8)
	
.LABEL $label$15
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $70($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZN6nbgame17SavePlayerToTableEyyybRNS_6configE (int_64 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [128])
	*([0] + [4]) = $13
	*($13 + [80]) = $1
	*($13 + [72]) = $2
	*($13 + [71]) = $3
	CALL _ZN6nbgame14name_to_stringEy(($13 + [56]), $1)
	$5 = ($4 + [32])
	$3 = *($4 + [32])
	if ( ($3 & [1]) ){ goto $label$2 }
	$10 = uint_32($3 >> [1])
	$11 = ($5 + [1])
	goto $label$1 
	
.LABEL $label$2
	$10 = *(($4 + [36]))
	$11 = *(($4 + [40]))
	
.LABEL $label$1
	$6 = (($13 + [56]) | [1])
	$12 = ($3 & [1])
	$3 = *($13 + [56])
	$3 = ( *($13 + [60]) ? uint_32($3 >> [1]) : $12 )
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((int_32)$10 < (int_32)$3) ){ goto $label$4 }
	$8 = ($11 + $10)
	$7 = ( *($13 + [64]) ? $6 : $12 )
	$9 = *($7)
	$12 = $11
	
.LOOP $label$5:
	$10 = (($10 - $3) + [1])
	if ( ($10 == 0) ){ goto $label$4 }
	$10 = CALL memchr($12, $9, $10)
	if ( ($10 == 0) ){ goto $label$4 }
	if ( (CALL memcmp($10, $7, $3) == 0) ){ goto $label$6 }
	$12 = ($10 + [1])
	$10 = ($8 - $12)
	if ( ((int_32)$10 >= (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$4 }
	if ( ((int_32)($10 - $11) != (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = *($13 + [56])
	$10 = ($3 & [1])
	CALL $76($5, ( *(($13 + [64])) ? $6 : $10 ), ( *($13 + [60]) ? uint_32($3 >> [1]) : $10 ))
	CALL $77($5, [816])
	
.LABEL $label$3
	$1 = *($13 + [72])
	*($4 + [16]) = ((int_64)*($4 + [16]) + (int_64)$1)
	$3 = *(($13 + [64]))
	$10 = *($13 + [56])
	CALL prints([1392])
	CALL prints(( $3 ? $6 : ($10 & [1]) ))
	CALL prints([1424])
	CALL printui($1)
	CALL prints([1440])
	*(($10 = ($13 + [48]))) = [0]
	*($13 + [16]) = $0
	*($13 + [24]) = $0
	*($13 + [32]) = (int_64)-1
	*($13 + [40]) = (int_64)0
	$3 = CALL db_find_i64($0, $0, (int_64)-6030912129794572288, *($13 + [80]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$9 }
	$3 = CALL $22(($13 + [16]), $3)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)($13 + [16])), [32])
	*($13 + [100]) = ($13 + [72])
	*($13 + [96]) = ($13 + [71])
	CALL eosio_assert([1], [224])
	CALL $37(($13 + [16]), $3, $0, ($13 + [96]))
	$4 = *($13 + [40])
	if ( $4 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	*($13 + [4]) = ($13 + [71])
	*($13) = ($13 + [80])
	*($13 + [8]) = ($13 + [72])
	*($13 + [120]) = $0
	CALL eosio_assert(((int_64)*($13 + [16]) == (int_64)CALL $fimport$2()), [160])
	*($13 + [100]) = $13
	*($13 + [96]) = ($13 + [16])
	*($13 + [104]) = ($13 + [120])
	*(($3 = CALL $69([40])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = ($13 + [16])
	CALL $38(($13 + [96]), $3)
	*($13 + [112]) = $3
	$0 = *($3)
	*($13 + [96]) = $0
	$12 = *($3 + [28])
	*($13 + [92]) = $12
	$6 = ($13 + [44])
	$4 = *($6)
	if ( ((uint_32)$4 >= (uint_32)*($10)) ){ goto $label$11 }
	*($4 + [8]) = $0
	*($4 + [16]) = $12
	*($13 + [112]) = [0]
	*($4) = $3
	*($6) = ($4 + [24])
	goto $label$10 
	
.LABEL $label$11
	CALL $26(($13 + [40]), ($13 + [112]), ($13 + [96]), ($13 + [92]))
	
.LABEL $label$10
	$3 = *($13 + [112])
	*($13 + [112]) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL $70($3)
	
.LABEL $label$12
	$4 = *($13 + [40])
	if ( ($4 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$12 = ($13 + [44])
	$3 = *($12)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$14 }
	
.LOOP $label$15:
	$3 = ($3 + [-24])
	$10 = *($3)
	*($3) = [0]
	if ( ($10 == 0) ){ goto $label$16 }
	CALL $70($10)
	
.LABEL $label$16
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$15 }
	$3 = *(($13 + [40]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $4
	
.LABEL $label$13
	*($12) = $4
	CALL $70($3)
	
.LABEL $label$7
	if ( ((*($13 + [56]) & [1]) == 0) ){ goto $label$17 }
	CALL $70(*(($13 + [64])))
	
.LABEL $label$17
	*([0] + [4]) = ($13 + [128])
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	return CALL $76($0, $1, CALL $81($1))
}

int_32 .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $73($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $67($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10384])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $66([1988], $0)
}

int_64 .FUNC _ZN6nbgame8DecMoneyEyRNS_6configE (int_64 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = ((uint_64)$2 > (uint_64)$0)
	$2 = *($1 + [16])
	*($1 + [16]) = ( (int_64))($2 - $0) ? (int_64)0 : $3 )
	return ( $0 ? $2 : $3 )
}

void .FUNC $73 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $69($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $70($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10470]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10472])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10470]) = [1]
	$7 = ($7 << [16])
	*([0] + [10472]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10472])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10472]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10470]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10470]) = [1]
	$3 = ($3 << [16])
	*([0] + [10472]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10472])
	
.LABEL $label$8
	*([0] + [10472]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $70($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $70($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $70($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $70($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $70($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $70($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $70($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $70($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $30($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $11($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $31($4, $1)
	CALL $33(CALL $32(CALL $32($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC _ZN6nbgame20transferEosToSomeoneEyyyy (int_64 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [160])
	*([0] + [4]) = $9
	*((($9 + [96]) + [24])) = (int_64)1398362884
	*($9 + [112]) = (int_64)0
	CALL eosio_assert([1], [1232])
	$7 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1296])
	*(($9 + [136])) = [0]
	*(($9 + [112])) = $2
	*(($9 + [120])) = (int_64)1397703940
	*($9 + [128]) = (int_64)0
	*($9 + [96]) = $0
	*($9 + [104]) = $1
	*(($9 + [40])) = [0]
	*($9 + [32]) = (int_64)0
	$6 = CALL strlen([1328])
	if ( ((uint_32)$6 > (uint_32)[-17]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($9 + [32]) = ($6 << [1])
	$5 = (($9 + [32]) | [1])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$4 = (($6 + [16]) & [-16])
	$5 = CALL $69($4)
	*($9 + [32]) = ($4 | [1])
	*($9 + [40]) = $5
	*($9 + [36]) = $6
	
.LABEL $label$8
	CALL memcpy($5, [1328], $6)
	
.LABEL $label$7
	*(($5 + $6)) = [0]
	$6 = ($9 + [128])
	if ( (*($9 + [128]) & [1]) ){ goto $label$11 }
	*($6) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*(($9 + [136]))) = [0]
	*(($9 + [132])) = [0]
	
.LABEL $label$10
	CALL $74($6, [0])
	*(($6 + [8])) = *((($9 + [32]) + [8]))
	*($6) = *($9 + [32])
	$7 = CALL current_time()
	*(($9 + [60])) = [0]
	*(($9 + [64])) = [0]
	*($9 + [44]) = [0]
	*($9 + [48]) = [0]
	*($9 + [52]) = [0]
	*($9 + [56]) = [0]
	*($9 + [32]) = ((CASTING uint_32)(uint_64 ((uint_64)$7 / (uint_64)(int_64)1000000)) + [60])
	*($9 + [68]) = [0]
	*(($9 + [72])) = [0]
	*(($9 + [76])) = [0]
	*($9 + [80]) = [0]
	*(($9 + [84])) = [0]
	*(($9 + [88])) = [0]
	$4 = ($9 + [68])
	$7 = (int_64)0
	$2 = (int_64)59
	$6 = [1344]
	$8 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$7 > (uint_64)(int_64)5) ){ goto $label$17 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$5 = ($5 + [165])
	goto $label$15 
	
.LABEL $label$17
	$1 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$13
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$1 | (int_64)$8)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$12 }
	*($9 + [24]) = $8
	*($9 + [16]) = $0
	$7 = (int_64)0
	$2 = (int_64)59
	$6 = [1360]
	$8 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$23 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$5 = ($5 + [165])
	goto $label$21 
	
.LABEL $label$23
	$1 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)-5)
	$8 = ((int_64)$1 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$18 }
	*($9 + [144]) = $8
	$7 = (int_64)0
	$2 = (int_64)59
	$6 = [1376]
	$8 = (int_64)0
	
.LOOP $label$24:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$29 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$28 }
	$5 = ($5 + [165])
	goto $label$27 
	
.LABEL $label$29
	$1 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$28
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$27
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$26
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	
.LABEL $label$25
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$1 | (int_64)$8)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$24 }
	*($9 + [8]) = $8
	CALL $27($4, ($9 + [16]), ($9 + [144]), ($9 + [8]), ($9 + [96]))
	*(($9 + [52])) = [0]
	*($9 + [24]) = (int_64)0
	*($9 + [16]) = $3
	CALL $28(($9 + [144]), ($9 + [32]))
	$6 = *($9 + [144])
	CALL send_deferred(($9 + [16]), $0, $6, (*($9 + [148]) - $6), [0])
	$6 = *($9 + [144])
	if ( ($6 == 0) ){ goto $label$30 }
	*($9 + [148]) = $6
	CALL $70($6)
	
.LABEL $label$30
	CALL $29(($9 + [32]))
	if ( ((*(($9 + [128])) & [1]) == 0) ){ goto $label$31 }
	CALL $70(*(($9 + [136])))
	
.LABEL $label$31
	*([0] + [4]) = ($9 + [160])
	return (unreachable)
	
.LABEL $label$6
	CALL $71(($9 + [32]))
}

void .FUNC _ZN6nbgame7FenQianEyRNS_6configE (int_64 $0, int_32 $1)
{
	float_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [112])
	*([0] + [4]) = $22
	CALL prints([592])
	$19 = ((uint_64)$7 > (uint_64)$18)
	$18 = (Rounds 0)(((float_64)(CASTING float_64)(uint_64 $7) * (float_64)(float_64)0.03750000149011612))
	$7 = *($1 + [16])
	*($1 + [16]) = ( (int_64))($7 - $18) ? (int_64)0 : $19 )
	CALL prints([608])
	$7 = ( $18 ? $7 : $19 )
	CALL printui($7)
	CALL prints([640])
	$19 = *($1 + [8])
	*($1 + [8]) = ($19 + [1])
	CALL _ZN6nbgame20transferEosToSomeoneEyyyy($0, (int_64)7098969676187343008, $7, (CASTING uint_64)(uint_32 $19))
	$18 = *($1 + [24])
	$7 = *($1 + [16])
	CALL prints([656])
	CALL printui($7)
	CALL prints([672])
	$2 = ((float_64)(CASTING float_64)(uint_64 $7) / (float_64)(CASTING float_64)(uint_32 (CASTING uint_32)(uint_64 (uint_64)$18 >> (uint_64)(int_64)1)))
	CALL printdf($2))
	*($22 + [72]) = [0]
	*($22 + [64]) = (int_64)0
	*(($22 + [56])) = [0]
	*($22 + [32]) = $0
	*($22 + [24]) = $0
	*($22 + [40]) = (int_64)-1
	*($22 + [48]) = (int_64)0
	*(($22 + [8])) = [0]
	*(($11 = ($22 + [16]))) = [0]
	*($22 + [4]) = ($22 + [24])
	*($22 + [12]) = ($22 + [24])
	$21 = (($22 + [80]) + [16])
	$5 = (($22 + [80]) | [8])
	$3 = ($22 + [12])
	$4 = (($22 + [24]) + [24])
	$13 = ($22 + [52])
	$7 = $0
	$18 = $0
	
.LOOP $label$1:
	$19 = [0]
	$10 = CALL db_lowerbound_i64($18, $7, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	$19 = CALL $22(($22 + [24]), $10)
	
.LABEL $label$2
	if ( ((int_32)*($11) == (int_32)$19) ){ goto $label$5 }
	*($22 + [80]) = *($3)
	if ( (int_64)(*(*(CALL $23(($22 + [80])) + [4]) + [8]) == 0) ){ goto $label$6 }
	*($22 + [80]) = *($3)
	$19 = CALL $23(($22 + [80]))
	$19 = ((uint_64)$7 > (uint_64)$18)
	$18 = (Rounds 0)(((float_64)$2 * (float_64)(CASTING float_64)(uint_64 *(*($19 + [4]) + [8]))))
	$7 = *($10)
	*(($10 = ($1 + [16]))) = ( (int_64))($7 - $18) ? (int_64)0 : $19 )
	*($22 + [80]) = *($3)
	$12 = *(*(CALL $23(($22 + [80])) + [4]))
	*($22 + [80]) = *($3)
	$10 = *(CALL $23(($22 + [80])) + [4])
	*($22 + [80]) = *($3)
	$20 = *(CALL $23(($22 + [80])) + [4])
	CALL prints([688])
	CALL printn($12)
	CALL prints([704])
	CALL printui(*($10 + [8]))
	CALL prints([720])
	CALL printui(*($20 + [16]))
	CALL prints([736])
	$7 = ( $18 ? $7 : $19 )
	CALL printui($7)
	CALL prints([640])
	*($22 + [80]) = *($3)
	$19 = *(CALL $23(($22 + [80])) + [4])
	$10 = *($10)
	*(($10 = ($1 + [8]))) = ($10 + [1])
	CALL _ZN6nbgame20transferEosToSomeoneEyyyy($0, *($19), $7, (CASTING uint_64)(uint_32 $10))
	
.LABEL $label$6
	*($22 + [80]) = *($3)
	if ( ((int_64)*(*(CALL $23(($22 + [80])) + [4]) + [16]) != (int_64)0) ){ goto $label$7 }
	*($22 + [80]) = *($3)
	$10 = *(CALL $23(($22 + [80])) + [4])
	$19 = *($22 + [68])
	if ( ((int_32)$19 == (int_32)*((($22 + [64]) + [8]))) ){ goto $label$8 }
	*($19) = *($10)
	*($22 + [68]) = ($19 + [8])
	goto $label$3 
	
.LABEL $label$8
	CALL $24(($22 + [64]), $10)
	goto $label$3 
	
.LABEL $label$7
	*($22 + [80]) = *($3)
	$7 = *(*(CALL $23(($22 + [80])) + [4]))
	$8 = *($4)
	$20 = *($13)
	if ( ((int_32)$20 == (int_32)$8) ){ goto $label$4 }
	$19 = ($20 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$9:
	if ( ((int_64)*(*($19)) == (int_64)$7) ){ goto $label$4 }
	$20 = $19
	$10 = ($19 + [-24])
	$19 = $10
	if ( ((int_32)($10 + $9) != (int_32)[-24]) ){ goto $label$9 }
	goto $label$4 
	
.LABEL $label$5
	$19 = *($22 + [64])
	if ( ((int_32)*($22 + [68]) == (int_32)$19) ){ goto $label$10 }
	$6 = ($1 + [33])
	$5 = ($1 + [32])
	$4 = (($22 + [80]) | [1])
	$13 = ($22 + [48])
	$14 = ($22 + [52])
	$15 = (($22 + [24]) + [8])
	$16 = ($1 + [36])
	$17 = ($1 + [40])
	$9 = [0]
	
.LOOP $label$11:
	$7 = *(($19 + ($9 << [3])))
	$8 = *($13)
	$3 = *($14)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$12 }
	$19 = ($3 + [-24])
	$20 = ([0] - $8)
	
.LOOP $label$13:
	if ( ((int_64)*(*($19)) == (int_64)$7) ){ goto $label$12 }
	$3 = $19
	$10 = ($19 + [-24])
	$19 = $10
	if ( ((int_32)($10 + $20) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$16 }
	$19 = *(($3 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [24]) == (int_32)($22 + [24])), [32])
	if ( $19 ){ goto $label$15 }
	$19 = [0]
	goto $label$14 
	
.LABEL $label$16
	$19 = [0]
	$10 = CALL db_find_i64(*($22 + [24]), *($15), (int_64)-6030912129794572288, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$14 }
	$19 = CALL $22(($22 + [24]), $10)
	CALL eosio_assert(((int_32)*($19 + [24]) == (int_32)($22 + [24])), [32])
	
.LABEL $label$15
	CALL eosio_assert([1], [848])
	CALL eosio_assert([1], [896])
	$10 = CALL db_next_i64(*($19 + [28]), ($22 + [80]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$17 }
	CALL $22(($22 + [24]), $10)
	
.LABEL $label$17
	CALL $25(($22 + [24]), $19)
	
.LABEL $label$14
	CALL _ZN6nbgame14name_to_stringEy(($22 + [80]), *($19))
	CALL $77(($22 + [80]), [816])
	$11 = (($22 + [80]) + [8])
	$19 = *($11)
	$10 = *($22 + [80])
	CALL prints([928])
	CALL prints(( $19 ? $4 : ($10 & [1]) ))
	$19 = *($5)
	if ( ($19 & [1]) ){ goto $label$19 }
	$10 = uint_32($19 >> [1])
	$21 = $6
	goto $label$18 
	
.LABEL $label$19
	$10 = *($16)
	$21 = *($17)
	
.LABEL $label$18
	$1 = ($3 & [1])
	$3 = *($22 + [80])
	$20 = *($22 + [84])
	$19 = ( $20 ? uint_32($3 >> [1]) : $1 )
	if ( ($19 == 0) ){ goto $label$23 }
	if ( ((int_32)$10 < (int_32)$19) ){ goto $label$20 }
	$8 = ($21 + $10)
	$1 = ( *($11) ? $4 : $1 )
	$20 = *($1)
	$3 = $21
	
.LOOP $label$24:
	$10 = (($10 - $19) + [1])
	if ( ($10 == 0) ){ goto $label$20 }
	$10 = CALL memchr($3, $20, $10)
	if ( ($10 == 0) ){ goto $label$20 }
	if ( (CALL memcmp($10, $1, $19) == 0) ){ goto $label$22 }
	$3 = ($10 + [1])
	$10 = ($8 - $3)
	if ( ((int_32)$10 >= (int_32)$19) ){ goto $label$24 }
	goto $label$20 
	
.LABEL $label$23
	$19 = [0]
	goto $label$21 
	
.LABEL $label$22
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$20 }
	$19 = ($10 - $21)
	if ( ((int_32)$19 == (int_32)[-1]) ){ goto $label$20 }
	$20 = *($22 + [84])
	$3 = *($22 + [80])
	
.LABEL $label$21
	CALL $78($5, $19, ( $20 ? uint_32(($3 & [254]) >> [1]) : ($3 & [1]) ))
	
.LABEL $label$20
	if ( ((*($22 + [80]) & [1]) == 0) ){ goto $label$25 }
	CALL $70(*($11))
	
.LABEL $label$25
	$19 = *($22 + [64])
	$9 = ($9 + [1])
	if ( ($9 <= int_32((*($22 + [68]) - $19) >> [3])) ){ goto $label$11 }
	
.LABEL $label$10
	CALL prints([832])
	$3 = *($22 + [48])
	if ( ($3 == 0) ){ goto $label$26 }
	$20 = ($22 + [52])
	$19 = *($20)
	if ( ((int_32)$19 == (int_32)$3) ){ goto $label$28 }
	
.LOOP $label$29:
	$19 = ($19 + [-24])
	$10 = *($19)
	*($19) = [0]
	if ( ($10 == 0) ){ goto $label$30 }
	CALL $70($10)
	
.LABEL $label$30
	if ( ((int_32)$3 != (int_32)$19) ){ goto $label$29 }
	$19 = *(($22 + [48]))
	goto $label$27 
	
.LABEL $label$28
	$19 = $3
	
.LABEL $label$27
	*($20) = $3
	CALL $70($19)
	
.LABEL $label$26
	$19 = *($22 + [64])
	if ( ($19 == 0) ){ goto $label$31 }
	*($22 + [68]) = $19
	CALL $70($19)
	
.LABEL $label$31
	*([0] + [4]) = ($22 + [112])
	return 
	
.LABEL $label$4
	if ( ((int_32)$20 == (int_32)$8) ){ goto $label$33 }
	$19 = *(($20 + [-24]))
	CALL eosio_assert(((int_32)*($19 + [24]) == (int_32)($22 + [24])), [32])
	goto $label$32 
	
.LABEL $label$33
	$19 = [0]
	$10 = CALL db_find_i64(*($22 + [24]), *((($22 + [24]) + [8])), (int_64)-6030912129794572288, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$32 }
	$19 = CALL $22(($22 + [24]), $10)
	CALL eosio_assert(((int_32)*($19 + [24]) == (int_32)($22 + [24])), [32])
	
.LABEL $label$32
	CALL eosio_assert(((int_32)$19 != (int_32)[0]), [224])
	CALL eosio_assert(((int_32)*($19 + [24]) == (int_32)($22 + [24])), [272])
	CALL eosio_assert(((int_64)*($22 + [24]) == (int_64)CALL $fimport$2()), [320])
	$7 = *($19)
	*($22 + [104]) = *($3)
	*($19 + [8]) = *(*(CALL $23(($22 + [104])) + [4]) + [16])
	*($19 + [16]) = (int_64)0
	*($22 + [104]) = *($3)
	$18 = *(*(CALL $23(($22 + [104])) + [4]))
	CALL prints([768])
	CALL printn($18)
	CALL prints([800])
	CALL printui(*($19 + [8]))
	CALL prints([816])
	CALL eosio_assert(((int_64)$7 == (int_64)*($19)), [384])
	CALL eosio_assert([1], [448])
	CALL memcpy(($22 + [80]), $19, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy($5, ($19 + [8]), [8])
	CALL eosio_assert([1], [448])
	CALL memcpy($21, ($19 + [16]), [8])
	CALL db_update_i64(*($19 + [28]), $0, ($22 + [80]), [24])
	$19 = (($22 + [24]) + [16])
	if ( (uint_64)($7 <= *($19)) ){ goto $label$3 }
	*($19) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	CALL $23($3)
	$7 = *((($22 + [24]) + [8]))
	$18 = *($22 + [24])
	goto $label$1 
}

int_32 .FUNC $23 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [28]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1184])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6030912129794572288)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1120])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1120])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $22(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [96])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $69([40])) + [8]) = (int_64)0
	*($6) = (int_64)0
	*($6 + [16]) = (int_64)0
	*($6 + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [128])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [128])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [128])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $26(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $70($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [992])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1056])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $70($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $70($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [3])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[536870912]) ){ goto $label$3 }
	$4 = [536870911]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$4 = int_32($2 >> [2])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $69(($4 << [3]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $79($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [3])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [3]))
	$7 = ($3 + [8])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $70($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$10 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $10) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$10 = ((int_32)(*($0 + [8]) - $10) / (int_32)[40])
	if ( ((uint_32)$10 > (uint_32)[53687090]) ){ goto $label$4 }
	$10 = ($10 << [1])
	$8 = ( $7 ? $10 : ($10 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $69(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	*(($10 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($10 + [8]) = *($3)
	*($10 + [16 align=4]) = (int_64)0
	*(($3 = ($10 + [24]))) = [0]
	$2 = CALL $69([16])
	*($10 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($10 + [20])) = $5
	*($10 + [28]) = [0]
	*(($6 = ($10 + [32]))) = [0]
	*(($10 + [36])) = [0]
	$2 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($1 + [32])
	$9 = (CASTING uint_64)(uint_32 $1)
	$3 = ($4 + [32])
	$5 = ($7 + ((int_32)$8 * (int_32)[40]))
	$1 = ($10 + [28])
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $11($1, $2)
	$8 = *($6)
	$2 = *($1)
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	$2 = [0]
	
.LABEL $label$6
	*($11 + [12]) = $2
	*($11 + [8]) = $2
	*($11 + [16]) = $8
	*($11 + [24]) = ($11 + [8])
	*($11 + [44]) = $3
	*($11 + [32]) = $4
	*($11 + [36]) = ($4 + [8])
	*($11 + [40]) = ($4 + [16])
	$3 = ($10 + [40])
	CALL $36(($11 + [32]), ($11 + [24]))
	$2 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$9 }
	$7 = ([0] - $2)
	$2 = ($4 + [-20])
	
.LOOP $label$10:
	*(($10 + [-32])) = *(($2 + [-12]))
	*(($10 + [-40])) = *(($2 + [-20]))
	*(($4 = ($10 + [-24]))) = (int_64)0
	*(($1 = ($10 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($4) = *($8)
	*(($10 + [-20])) = *($2)
	$4 = ($2 + [4])
	*($1) = *($4)
	*($4) = [0]
	*(($4 = ($10 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($1 = ($10 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($4) = *($8)
	*(($10 + [-8])) = *(($2 + [12]))
	$4 = ($2 + [16])
	*($1) = *($4)
	*($4) = [0]
	*($8) = (int_64)0
	$10 = ($10 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $7) != (int_32)[-20]) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $10
	*(($0 + [4])) = $3
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	$4 = ([0] - $1)
	$10 = ($2 + [-24])
	
.LOOP $label$12:
	$2 = *(($10 + [12]))
	if ( ($2 == 0) ){ goto $label$13 }
	*(($10 + [16])) = $2
	CALL $70($2)
	
.LABEL $label$13
	$2 = *($10)
	if ( ($2 == 0) ){ goto $label$14 }
	*(($10 + [4])) = $2
	CALL $70($2)
	
.LABEL $label$14
	$10 = ($10 + [-40])
	if ( ((int_32)($10 + $4) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $70($1)
	
.LABEL $label$15
	*([0] + [4]) = ($11 + [48])
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $69(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $70($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $70($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $69(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $70($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_64 .FUNC $49 ()
{
	int_32 $0
	int_64 $1
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [16])
	$3 = $2
	*([0] + [4]) = $2
	$0 = CALL action_data_size()
	if ( ($0 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($0)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $0)
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [128])
	CALL memcpy(($3 + [8]), $2, [8])
	$1 = *($3 + [8])
	*([0] + [4]) = ($3 + [16])
	return $1
}

void .FUNC $48 (int_64 $0, int_64 $1, int_32 $2)
{
	CALL prints([1744])
	CALL printn($0)
	if ( ((int_64)*($2) == (int_64)$0) ){ goto $label$1 }
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$0), [1760])
	if ( ((int_64)*(($2 + [24])) != (int_64)1397703940) ){ goto $label$2 }
	CALL _ZN6nbgame10add_playerEyRKyy($0, $2, *($2 + [16]))
	CALL _ZN6nbgame5DebugEy($0)
	return 
	
.LABEL $label$2
	CALL eosio_assert([0], [1808])
	
.LABEL $label$1
}

int_32 .FUNC $69 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10476])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10372])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10180]
	$1 = (((int_32)$2 * (int_32)[12]) + [10180])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_64 .FUNC _ZN6nbgame24CalcOldRoundPlayersMoneyEyRNS_6configE (int_64 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [80])
	*([0] + [4]) = $8
	*(($8 + [64])) = [0]
	*($8 + [40]) = $0
	*($8 + [32]) = $0
	*($8 + [48]) = (int_64)-1
	*($8 + [56]) = (int_64)0
	*((($8 + [8]) + [8])) = [0]
	*(($4 = ($8 + [24]))) = [0]
	*($8 + [12]) = ($8 + [32])
	*($8 + [20]) = ($8 + [32])
	$2 = ($8 + [20])
	$5 = $0
	$6 = (int_64)0
	
.LOOP $label$1:
	$7 = [0]
	$3 = CALL db_lowerbound_i64($5, $0, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $22(($8 + [32]), $3)
	
.LABEL $label$2
	if ( ((int_32)*($4) == (int_32)$7) ){ goto $label$3 }
	*($8 + [72]) = *($2)
	$0 = *(*(CALL $23(($8 + [72])) + [4]) + [8])
	CALL $23($2)
	$6 = ((int_64)$0 + (int_64)$6)
	$0 = *((($8 + [32]) + [8]))
	$5 = *($8 + [32])
	goto $label$1 
	
.LABEL $label$3
	CALL prints([1600])
	CALL printui($6)
	$3 = *($8 + [56])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = ($8 + [60])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$2 = *($7)
	*($7) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $70($2)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	$7 = *(($8 + [56]))
	goto $label$5 
	
.LABEL $label$6
	$7 = $3
	
.LABEL $label$5
	*($4) = $3
	CALL $70($7)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [80])
	return $6
}

void .FUNC _ZN6nbgame20SavePlayerToOldRoundEyyyRNS_6configE (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [112])
	*([0] + [4]) = $13
	CALL _ZN6nbgame14name_to_stringEy(($13 + [48]), $1)
	$4 = ($3 + [32])
	$12 = *($3 + [32])
	if ( ($12 & [1]) ){ goto $label$2 }
	$9 = uint_32($12 >> [1])
	$10 = ($4 + [1])
	goto $label$1 
	
.LABEL $label$2
	$9 = *(($3 + [36]))
	$10 = *(($3 + [40]))
	
.LABEL $label$1
	$5 = (($13 + [48]) | [1])
	$11 = ($12 & [1])
	$12 = *($13 + [48])
	$12 = ( *($13 + [52]) ? uint_32($12 >> [1]) : $11 )
	if ( ($12 == 0) ){ goto $label$3 }
	if ( ((int_32)$9 < (int_32)$12) ){ goto $label$4 }
	$7 = ($10 + $9)
	$6 = ( *($13 + [56]) ? $5 : $11 )
	$8 = *($6)
	$11 = $10
	
.LOOP $label$5:
	$9 = (($9 - $12) + [1])
	if ( ($9 == 0) ){ goto $label$4 }
	$9 = CALL memchr($11, $8, $9)
	if ( ($9 == 0) ){ goto $label$4 }
	if ( (CALL memcmp($9, $6, $12) == 0) ){ goto $label$6 }
	$11 = ($9 + [1])
	$9 = ($7 - $11)
	if ( ((int_32)$9 >= (int_32)$12) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$4 }
	if ( ((int_32)($9 - $10) != (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	$12 = *($13 + [48])
	$9 = ($12 & [1])
	CALL $76($4, ( *(($13 + [56])) ? $5 : $9 ), ( *($13 + [52]) ? uint_32($12 >> [1]) : $9 ))
	CALL $77($4, [816])
	
.LABEL $label$3
	*($3 + [16]) = ((int_64)*($3 + [16]) + (int_64)$2)
	$12 = *((($13 + [48]) + [8]))
	$9 = *($13 + [48])
	CALL prints([1392])
	CALL prints(( $12 ? $5 : ($9 & [1]) ))
	CALL prints([1424])
	CALL printui($2)
	CALL prints([1440])
	*(($13 + [40])) = [0]
	*($13 + [16]) = $0
	*($13 + [8]) = $0
	*($13 + [24]) = (int_64)-1
	*($13 + [32]) = (int_64)0
	$12 = CALL db_find_i64($0, $0, (int_64)-6030912129794572288, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$10 }
	$12 = CALL $22(($13 + [8]), $12)
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)($13 + [8])), [32])
	CALL eosio_assert([1], [224])
	CALL eosio_assert(((int_32)*($12 + [24]) == (int_32)($13 + [8])), [272])
	CALL eosio_assert(((int_64)*($13 + [8]) == (int_64)CALL $fimport$2()), [320])
	*($12 + [8]) = ((int_64)*($12 + [8]) + (int_64)$2)
	$2 = *($12)
	CALL eosio_assert([1], [384])
	CALL eosio_assert([1], [448])
	CALL memcpy(($13 + [64]), $12, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy((($13 + [64]) | [8]), ($12 + [8]), [8])
	CALL eosio_assert([1], [448])
	CALL memcpy((($13 + [64]) + [16]), ($12 + [16]), [8])
	CALL db_update_i64(*($12 + [28]), $0, ($13 + [64]), [24])
	$12 = (($13 + [8]) + [16])
	if ( (uint_64)($2 <= *($12)) ){ goto $label$9 }
	*($12) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$3 = *($13 + [32])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	CALL eosio_assert(((int_64)*($13 + [8]) == (int_64)CALL $fimport$2()), [160])
	*(($12 = CALL $69([40])) + [16]) = (int_64)0
	*($12 + [24]) = ($13 + [8])
	*($12 + [8]) = $2
	*($12) = $1
	CALL eosio_assert([1], [448])
	CALL memcpy(($13 + [64]), $12, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy((($13 + [64]) | [8]), ($12 + [8]), [8])
	CALL eosio_assert([1], [448])
	CALL memcpy((($13 + [64]) + [16]), ($12 + [16]), [8])
	$2 = *($12)
	$3 = CALL db_store_i64(*((($13 + [8]) + [8])), (int_64)-6030912129794572288, $0, $2, ($13 + [64]), [24])
	*($12 + [28]) = $3
	$9 = (($13 + [8]) + [16])
	if ( (uint_64)($2 <= *($9)) ){ goto $label$11 }
	*($9) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*($13 + [104]) = $12
	$0 = *($12)
	*($13 + [64]) = $0
	*($13 + [100]) = $3
	$11 = ($13 + [36])
	$9 = *($11)
	if ( ((uint_32)$9 >= (uint_32)*(($13 + [40]))) ){ goto $label$13 }
	*($9 + [8]) = $0
	*($9 + [16]) = $3
	*($13 + [104]) = [0]
	*($9) = $12
	*($11) = ($9 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $26(($13 + [32]), ($13 + [104]), ($13 + [64]), ($13 + [100]))
	
.LABEL $label$12
	$12 = *($13 + [104])
	*($13 + [104]) = [0]
	if ( ($12 == 0) ){ goto $label$9 }
	CALL $70($12)
	
.LABEL $label$9
	$3 = *($13 + [32])
	if ( ($3 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$11 = ($13 + [36])
	$12 = *($11)
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$15 }
	
.LOOP $label$16:
	$12 = ($12 + [-24])
	$9 = *($12)
	*($12) = [0]
	if ( ($9 == 0) ){ goto $label$17 }
	CALL $70($9)
	
.LABEL $label$17
	if ( ((int_32)$3 != (int_32)$12) ){ goto $label$16 }
	$12 = *(($13 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$12 = $3
	
.LABEL $label$14
	*($11) = $3
	CALL $70($12)
	
.LABEL $label$7
	if ( ((*($13 + [48]) & [1]) == 0) ){ goto $label$18 }
	CALL $70(*(($13 + [56])))
	
.LABEL $label$18
	*([0] + [4]) = ($13 + [112])
}

void .FUNC _ZN6nbgame14apply_setpriceEyNS_9set_priceE (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	CALL require_auth($0)
	*($8 + [56]) = $0
	*(($8 + [44])) = [0]
	*(($8 + [48])) = [0]
	*($8 + [40]) = [0]
	*($8 + [16]) = [0]
	CALL _ZN6nbgame7configs3getERNS_6configERKy(($8 + [8]), ($8 + [56]))
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [16]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)5) ){ goto $label$6 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	*(($8 + [16])) = [0]
	*($8 + [32]) = $1
	*($8 + [8]) = $6
	CALL $75(($8 + [40]), [1584])
	CALL _ZN6nbgame17SavePlayerToTableEyyybRNS_6configE($0, (int_64)7098969676187343008, $1, [1], ($8 + [8]))
	*($8 + [24]) = (int_64)0
	CALL _ZN6nbgame7configs5storeERKNS_6configERKy(($8 + [8]), ($8 + [56]))
	if ( ((*($8 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL $70(*(($8 + [48])))
	
.LABEL $label$7
	*([0] + [4]) = ($8 + [64])
}

void .FUNC _ZN6nbgame5DebugEy (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [128])
	*([0] + [4]) = $6
	*($6 + [112]) = $0
	*(($6 + [100])) = [0]
	*(($1 = ($6 + [104]))) = [0]
	*($6 + [96]) = [0]
	*($6 + [72]) = [0]
	if ( CALL _ZN6nbgame7configs3getERNS_6configERKy(($6 + [64]), ($6 + [112])) ){ goto $label$1 }
	CALL prints([1456])
	
.LABEL $label$1
	$1 = *($1)
	$5 = *($6 + [96])
	CALL prints([1472])
	CALL printui(*($6 + [80]))
	CALL prints([1488])
	CALL printui(*($6 + [88]))
	CALL prints([1504])
	CALL printui(*((($6 + [64]) + [8])))
	CALL prints([1520])
	CALL prints(( $1 ? ($6 + [97]) : ($5 & [1]) ))
	CALL prints([1536])
	*(($6 + [56])) = [0]
	*($6 + [32]) = $0
	*($6 + [24]) = $0
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	*(($6 + [8])) = [0]
	*(($2 = ($6 + [16]))) = [0]
	*($6 + [4]) = ($6 + [24])
	*($6 + [12]) = ($6 + [24])
	$1 = ($6 + [12])
	$4 = $0
	
.LOOP $label$2:
	$5 = [0]
	$3 = CALL db_lowerbound_i64($4, $0, (int_64)-6030912129794572288, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $22(($6 + [24]), $3)
	
.LABEL $label$3
	if ( ((int_32)*($2) == (int_32)$5) ){ goto $label$4 }
	*($6 + [120]) = *($1)
	$0 = *(*(CALL $23(($6 + [120])) + [4]))
	*($6 + [120]) = *($1)
	$5 = *(CALL $23(($6 + [120])) + [4])
	*($6 + [120]) = *($1)
	$3 = *(CALL $23(($6 + [120])) + [4])
	CALL prints([688])
	CALL printn($0)
	CALL prints([704])
	CALL printui(*($5 + [8]))
	CALL prints([1568])
	CALL printui(*($3 + [16]))
	CALL prints([640])
	CALL $23($1)
	$0 = *((($6 + [24]) + [8]))
	$4 = *($6 + [24])
	goto $label$2 
	
.LABEL $label$4
	$3 = *($6 + [48])
	if ( ($3 == 0) ){ goto $label$5 }
	$2 = ($6 + [52])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL $70($5)
	
.LABEL $label$9
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$1 = *(($6 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$1 = $3
	
.LABEL $label$6
	*($2) = $3
	CALL $70($1)
	
.LABEL $label$5
	if ( ((*(($6 + [96])) & [1]) == 0) ){ goto $label$10 }
	CALL $70(*(($6 + [104])))
	
.LABEL $label$10
	*([0] + [4]) = ($6 + [128])
}

void .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = *([0] + [4])
	$3 = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL $56($0, $2, $1)
	*([0] + [4]) = $3
}

void .FUNC $46 (int_64 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [160])
	*([0] + [4]) = $5
	CALL prints([1856])
	*($5 + [136]) = $0
	*((($5 + [88]) + [36])) = [0]
	*((($5 + [88]) + [40])) = [0]
	*($5 + [120]) = [0]
	*($5 + [96]) = [0]
	CALL eosio_assert(CALL $5(($5 + [88]), ($5 + [136])), [1888])
	$2 = *($5 + [96])
	*($5 + [96]) = ($2 + [1])
	CALL _ZN6nbgame7configs5storeERKNS_6configERKy(($5 + [88]), ($5 + [136]))
	CALL prints([1936])
	$3 = *($1)
	*($5 + [24]) = *(($1 + [8]))
	*($5 + [16]) = $3
	CALL printui128(($5 + [16]))
	CALL prints([1968])
	$3 = (CASTING uint_64)(uint_32 $2)
	CALL printui($3)
	CALL prints([1984])
	$2 = *(($1 + [20]))
	$1 = *($1 + [16])
	$4 = CALL current_time()
	*(($5 + [44])) = [0]
	*(($5 + [48])) = [0]
	*($5 + [28]) = [0]
	*($5 + [32]) = [0]
	*($5 + [36]) = [0]
	*($5 + [40]) = [0]
	*($5 + [16]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*($5 + [52]) = [0]
	*((($5 + [16]) + [40])) = [0]
	*(($5 + [60])) = [0]
	*($5 + [64]) = [0]
	*(($5 + [68])) = [0]
	*(($5 + [72])) = [0]
	*($5 + [4]) = $1
	*($5) = $1
	*($5 + [8]) = $2
	CALL $58($5, ($5 + [16]))
	CALL $60(CALL $59(CALL $59($5, ($5 + [40])), (($5 + [16]) + [36])), ($5 + [64]))
	*($5 + [36]) = [0]
	*($5 + [8]) = (int_64)0
	*($5) = $3
	CALL $28(($5 + [144]), ($5 + [16]))
	$1 = *($5 + [144])
	CALL send_deferred($5, $0, $1, (*($5 + [148]) - $1), [0])
	$1 = *($5 + [144])
	if ( ($1 == 0) ){ goto $label$1 }
	*($5 + [148]) = $1
	CALL $70($1)
	
.LABEL $label$1
	CALL $29(($5 + [16]))
	if ( ((*($5 + [120]) & [1]) == 0) ){ goto $label$2 }
	CALL $70(*(($5 + [128])))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [160])
}

void .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [16])
	$3 = $2
	*([0] + [4]) = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = [0]
	*($0 + [16 align=4]) = (int_64)0
	*($3 + [8]) = ($2 + $1)
	*($3) = $2
	CALL eosio_assert(((uint_32)$1 > (uint_32)[15]), [128])
	CALL memcpy($0, $2, [16])
	*($3 + [4]) = ($2 + [16])
	CALL $10($3, ($0 + [16]))
	*([0] + [4]) = ($3 + [16])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1632]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$8 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1648]
	$7 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$14 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$3 = ($3 + [165])
	goto $label$12 
	
.LABEL $label$14
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	CALL $45($9)
	CALL $46($0, $9)
	$4 = *($9 + [16])
	if ( ($4 == 0) ){ goto $label$7 }
	*(($9 + [20])) = $4
	CALL $70($4)
	goto $label$7 
	
.LABEL $label$8
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1360]
	$7 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$20 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$15 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1376]
	$7 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$27 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$22 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	CALL $47($9)
	CALL $48($0, $1, $9)
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $70(*(($9 + [40])))
	goto $label$7 
	
.LABEL $label$21
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1664]
	$7 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$33 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$3 = ($3 + [165])
	goto $label$31 
	
.LABEL $label$33
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$28 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$34 }
	CALL _ZN6nbgame14apply_setpriceEyNS_9set_priceE($1, CALL $49())
	goto $label$7 
	
.LABEL $label$34
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1680]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$41 }
	CALL _ZN6nbgame5DebugEy($1)
	goto $label$7 
	
.LABEL $label$41
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1696]
	$7 = (int_64)0
	
.LOOP $label$42:
	if ( ((uint_64)$6 > (uint_64)(int_64)2) ){ goto $label$47 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$3 = ($3 + [165])
	goto $label$45 
	
.LABEL $label$47
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$46
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$44
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$43
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$42 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	CALL $50($9)
	CALL $51($1, $9)
	if ( ((*($9 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $70(*(($9 + [16])))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $73($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

void .FUNC $51 (int_64 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	$3 = [0]
	*(($6 + [56])) = [0]
	*($6 + [24]) = $0
	*($6 + [40]) = (int_64)-1
	*($6 + [48]) = (int_64)0
	$4 = *($1)
	*($6 + [32]) = $4
	$2 = CALL db_find_i64($0, $4, (int_64)-8271247743758893056, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $52(($6 + [24]), $2) + [20]) == (int_32)($6 + [24])), [32])
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [1712])
	*($6 + [16]) = $1
	CALL $53(($6 + [8]), ($6 + [24]), $0, ($6 + [16]))
	$2 = *($6 + [48])
	if ( ($2 == 0) ){ goto $label$3 }
	$5 = ($6 + [52])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL $70(*(($3 + [16])))
	
.LABEL $label$8
	CALL $70($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($6 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL $70($1)
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$3 = ($6 & [1])
	if ( $3 ){ goto $label$3 }
	$4 = uint_32($6 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $3 ){ goto $label$6 }
	$5 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $3 ? $2 : ($3 <= $2) )
	$3 = ($4 - $1)
	$3 = ($3 - $2)
	if ( ($3 == 0) ){ goto $label$7 }
	$1 = ($5 + $1)
	CALL memmove($1, ($1 + $2), $3)
	$6 = *($0)
	
.LABEL $label$7
	$2 = ($4 - $2)
	if ( ($6 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($5 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $70 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $73($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [144])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = int_32(($7 - $3) >> [4])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $61($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ($4 << [4])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$3 = (([0] - $3) - $4)
	$4 = ($7 + [-12])
	
.LOOP $label$5:
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [4])) = $5
	CALL $70($5)
	
.LABEL $label$6
	$4 = ($4 + [-16])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$3 = ($0 + [8])
	
.LOOP $label$8:
	$5 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($3) - *($5)) > (uint_32)[1]), [128])
	CALL memcpy($4, *($5), [2])
	*($5) = (*($5) + [2])
	CALL $10($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $71 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $69(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $70(*(($1 + [40])))
	
.LABEL $label$11
	CALL $70($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $70($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $10($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $74($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $69($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $74($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $70($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $71($7)
	return (unreachable)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [96])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	*($8 + [24]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $69([56])) + [32]) = [0]
	*($6 + [8]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [44]) = $0
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [8])
	*($8 + [40]) = $6
	*($8 + [48]) = ($6 + [16])
	*($8 + [52]) = ($6 + [24])
	*($8 + [56]) = ($6 + [32])
	CALL $7(($8 + [40]), ($8 + [32]))
	*($6 + [48]) = $1
	*($8 + [32]) = $6
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [48])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $8(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $70(*(($4 + [40])))
	
.LABEL $label$10
	CALL $70($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [64])
	return $6
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[3]), [128])
	CALL memcpy($3, *($2 + [4]), [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $9(*($1), *($0 + [16]))
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC _ZN6nbgame7configs3getERNS_6configERKy (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$2 = *($1)
	$6 = (int_64)0
	$5 = (int_64)59
	$1 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($1)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$1 = ($1 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*(($11 + [40])) = [0]
	*($11 + [16]) = $7
	*($11 + [8]) = $2
	*($11 + [24]) = (int_64)-1
	$6 = (int_64)0
	*($11 + [32]) = (int_64)0
	$5 = (int_64)59
	$1 = [16]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$12 }
	$3 = *($1)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$1 = ($1 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	$10 = [0]
	$1 = CALL db_find_i64($2, $7, (int_64)4982871467403247616, $9)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$13 }
	$1 = CALL $6(($11 + [8]), $1)
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)($11 + [8])), [32])
	*(($0 + [24])) = *(($1 + [24]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [8])) = *(($1 + [8]))
	*($0) = *($1)
	CALL $72(($0 + [32]), ($1 + [32]))
	$10 = [1]
	$0 = *($11 + [32])
	if ( ($0 == 0) ){ goto $label$13 }
	$4 = ($11 + [36])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$15 }
	
.LOOP $label$16:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$17 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$18 }
	CALL $70(*(($3 + [40])))
	
.LABEL $label$18
	CALL $70($3)
	
.LABEL $label$17
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$16 }
	$1 = *(($11 + [32]))
	goto $label$14 
	
.LABEL $label$15
	$1 = $0
	
.LABEL $label$14
	*($4) = $0
	CALL $70($1)
	
.LABEL $label$13
	*([0] + [4]) = ($11 + [48])
	return $10
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$10 = (*([0] + [4]) - [48])
	$11 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [320])
	*($1 + [8]) = *(*($3) + [8])
	*($1 + [16]) = *(*($3) + [16])
	$4 = *($1)
	*($1 + [24]) = *(*($3) + [24])
	$7 = ($1 + [32])
	CALL $72($7, (*($3) + [32]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [384])
	$3 = *($1 + [32])
	$8 = ( *(($1 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [28])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [24])
	$6 = ($1 + [16])
	$5 = ($1 + [8])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$10 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$10 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$2
	*($11 + [4]) = $10
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	*($11 + [16]) = $11
	*($11 + [28]) = $5
	*($11 + [32]) = $6
	*($11 + [36]) = $8
	*($11 + [40]) = $7
	*($11 + [24]) = $1
	CALL $15(($11 + [24]), ($11 + [16]))
	CALL db_update_i64(*($1 + [48]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($10)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($11 + [48])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[3]), [448])
	CALL memcpy(*($2 + [4]), $3, [4])
	*($2 + [4]) = (*($2 + [4]) + [4])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $16(*($1), *($0 + [16]))
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN6nbgame14name_to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = CALL $69([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *(((CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$1)) + [464]))
	$8 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$8 = *($5)
	
.LABEL $label$2
	*(($8 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$1 = (uint_64)$1 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $8 )
	$6 = *($0)
	$8 = ($6 & [1])
	$3 = ( *(($0 + [8])) ? $2 : $8 )
	$4 = ($3 + $6)
	
.LOOP $label$6:
	if ( ($6 == 0) ){ goto $label$5 }
	$8 = ($3 + $6)
	$7 = ($6 + [-1])
	$6 = $7
	if ( ((int_32)*(($8 + [-1])) == (int_32)[46]) ){ goto $label$6 }
	$6 = (($3 + $7) + [1])
	goto $label$4 
	
.LABEL $label$5
	$6 = $3
	
.LABEL $label$4
	CALL $78($0, ($6 - $3), ($4 - $6))
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [144])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $11($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [128])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $69($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $79($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $70($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZN6nbgame7configs5storeERKNS_6configERKy (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	$2 = *($1)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	*(($10 + [48])) = [0]
	*($10 + [24]) = $7
	*($10 + [16]) = $2
	*($10 + [32]) = (int_64)-1
	$6 = (int_64)0
	*($10 + [40]) = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)5) ){ goto $label$12 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	$4 = CALL db_find_i64($2, $7, (int_64)4982871467403247616, $9)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$15 }
	$4 = CALL $6(($10 + [16]), $4)
	CALL eosio_assert(((int_32)*($4 + [44]) == (int_32)($10 + [16])), [32])
	$6 = *($1)
	*($10 + [64]) = $0
	CALL eosio_assert([1], [224])
	CALL $14(($10 + [16]), $4, $6, ($10 + [64]))
	$1 = *($10 + [40])
	if ( $1 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = *($1)
	*($10 + [8]) = $0
	*($10 + [88]) = $6
	CALL eosio_assert(((int_64)*($10 + [16]) == (int_64)CALL $fimport$2()), [160])
	*($10 + [68]) = ($10 + [8])
	*($10 + [64]) = ($10 + [16])
	*($10 + [72]) = ($10 + [88])
	*(($4 = CALL $69([56])) + [32]) = [0]
	*($4 + [8]) = [0]
	*($4 + [36]) = [0]
	*($4 + [40]) = [0]
	*($4 + [44]) = ($10 + [16])
	CALL $13(($10 + [64]), $4)
	*($10 + [80]) = $4
	$6 = *($4)
	*($10 + [64]) = $6
	$1 = *($4 + [48])
	*($10 + [60]) = $1
	$0 = ($10 + [44])
	$3 = *($0)
	if ( ((uint_32)$3 >= (uint_32)*(($10 + [48]))) ){ goto $label$17 }
	*($3 + [8]) = $6
	*($3 + [16]) = $1
	*($10 + [80]) = [0]
	*($3) = $4
	*($0) = ($3 + [24])
	goto $label$16 
	
.LABEL $label$17
	CALL $8(($10 + [40]), ($10 + [80]), ($10 + [64]), ($10 + [60]))
	
.LABEL $label$16
	$4 = *($10 + [80])
	*($10 + [80]) = [0]
	if ( ($4 == 0) ){ goto $label$18 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$19 }
	CALL $70(*(($4 + [40])))
	
.LABEL $label$19
	CALL $70($4)
	
.LABEL $label$18
	$1 = *($10 + [40])
	if ( ($1 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$0 = ($10 + [44])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$23 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$24 }
	CALL $70(*(($3 + [40])))
	
.LABEL $label$24
	CALL $70($3)
	
.LABEL $label$23
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($10 + [40]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $1
	
.LABEL $label$20
	*($0) = $1
	CALL $70($4)
	
.LABEL $label$13
	*([0] + [4]) = ($10 + [96])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [48])
	$13 = $14
	*([0] + [4]) = $14
	$3 = *($0 + [4])
	$2 = *($0)
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [16]
	$11 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$6 }
	$4 = *($8)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$4 = ($4 + [165])
	goto $label$4 
	
.LABEL $label$6
	$12 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$12 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$12 = ((int_64)((int_64)$12 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	*($1) = $11
	*($1 + [8]) = *(*($3) + [8])
	*($1 + [16]) = *(*($3) + [16])
	*($1 + [24]) = *(*($3) + [24])
	$7 = ($1 + [32])
	CALL $72($7, (*($3) + [32]))
	$8 = *($1 + [32])
	$4 = ( *(($1 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($4 + [28])
	$10 = (CASTING uint_64)(uint_32 $4)
	$3 = ($1 + [24])
	$6 = ($1 + [16])
	$5 = ($1 + [8])
	
.LOOP $label$7:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$7 }
	if ( ($8 <= [513]) ){ goto $label$9 }
	$4 = CALL malloc($8)
	goto $label$8 
	
.LABEL $label$9
	$4 = ($14 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$8
	*($13 + [4]) = $4
	*($13) = $4
	*($13 + [8]) = ($4 + $8)
	*($13 + [16]) = $13
	*($13 + [28]) = $5
	*($13 + [24]) = $1
	*($13 + [32]) = $6
	*($13 + [36]) = $3
	*($13 + [40]) = $7
	CALL $15(($13 + [24]), ($13 + [16]))
	$10 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)4982871467403247616, *(*($0 + [8])), $10, $4, $8)
	if ( ($8 <= [513]) ){ goto $label$10 }
	CALL free($4)
	
.LABEL $label$10
	if ( (uint_64)($10 <= *($2 + [16])) ){ goto $label$11 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$10 + (int_64)1) : ((uint_64)$10 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	*([0] + [4]) = ($13 + [48])
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), $3, [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [448])
	CALL memcpy(*($2 + [4]), ($3 + [8]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $16(*($1), *($0 + [12]))
}

void .FUNC $37 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = *([0] + [4])
	$9 = $6
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [272])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [320])
	$5 = *(*(($3 + [4])))
	$4 = *($1)
	if ( (*(*($3)) == 0) ){ goto $label$2 }
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = $5
	$7 = ($1 + [16])
	$8 = ($1 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)$5)
	$8 = ($1 + [8])
	$7 = ($1 + [16])
	
.LABEL $label$1
	CALL eosio_assert([1], [384])
	$3 = $6
	$6 = ($3 + [-32])
	*([0] + [4]) = $6
	CALL eosio_assert([1], [448])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy(($3 + [-24]), $8, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy(($3 + [-16]), $7, [8])
	CALL db_update_i64(*($1 + [28]), $2, $6, [24])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = $9
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [448])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [448])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [448])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [448])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [448])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $34(CALL $35($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [448])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [448])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $34($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [448])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [448])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [448])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [448])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [448])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [128])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [128])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *(($0 + [8]))), [144])
	$7 = ($0 + [4])
	$4 = *($7)
	$2 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)*($3) != (int_32)$4), [128])
	$4 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($6 <= *($3)), [144])
	$6 = *($4)
	$2 = *($6)
	$6 = ($6 + [1])
	*($4) = $6
	$7 = ($7 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $7)) | (int_64)$5)
	$7 = ($7 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [144])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = ((int_32)($2 - $6) / (int_32)[40])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $62($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[40])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$6 = (([0] - $6) - $4)
	$4 = ($2 + [-24])
	
.LOOP $label$5:
	$7 = *(($4 + [12]))
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [16])) = $7
	CALL $70($7)
	
.LABEL $label$6
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $7
	CALL $70($7)
	
.LABEL $label$7
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$4 = ($0 + [4])
	
.LOOP $label$9:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [128])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [128])
	CALL memcpy(($7 + [8]), *($4), [8])
	*($4) = (*($4) + [8])
	CALL $10(CALL $63($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$4 = int_32(($7 - $5) >> [4])
	$7 = ($4 + $1)
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$8 = ($8 - $5)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($8 >> [3])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$8 = CALL $69(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $7
	$8 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $79($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$2 = ($8 + ($6 << [4]))
	$8 = ($8 + ($4 << [4]))
	$6 = $8
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$3 = ($8 + ($1 << [4]))
	$6 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	$4 = ([0] - $6)
	$6 = ($7 + [-16])
	
.LOOP $label$11:
	*(($8 + [-16])) = *($6)
	*(($7 = ($8 + [-12]))) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$5 = ($6 + [4])
	*($7) = *($5)
	*(($8 + [-8])) = *(($6 + [8]))
	$7 = ($6 + [12])
	*($1) = *($7)
	*($7) = [0]
	*($5) = (int_64)0
	$8 = ($8 + [-16])
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$11 }
	$6 = *(($0 + [4]))
	$1 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$1 = $6
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$12 }
	$7 = ([0] - $1)
	$6 = ($6 + [-12])
	
.LOOP $label$13:
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$14 }
	*(($6 + [4])) = $8
	CALL $70($8)
	
.LABEL $label$14
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $7) != (int_32)[-12]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $70($1)
	
.LABEL $label$15
	(unreachable)
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [144])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $64($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [128])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [128])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$3 = int_32(($7 - $6) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$3 }
	$5 = [268435455]
	$2 = ($2 - $6)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = int_32($2 >> [3])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $69(($5 << [4]))
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $79($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$7 = ($7 - $6)
	$3 = ($2 + ($3 << [4]))
	$4 = ($3 - $7)
	$1 = ($3 + ($1 << [4]))
	$5 = ($2 + ($5 << [4]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $6, $7)
	$6 = *($0)
	
.LABEL $label$7
	*($0) = $4
	*(($0 + [4])) = $1
	*(($0 + [8])) = $5
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $70($6)
	
.LABEL $label$8
	(unreachable)
}

void .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [16])
	$3 = $2
	*([0] + [4]) = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [16])) = [0]
	*($0 + [8 align=4]) = (int_64)0
	*($3 + [8]) = ($2 + $1)
	*($3) = $2
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [128])
	CALL memcpy($0, $2, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $9($3, ($0 + [8]))
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *([0] + [4])
	$7 = $5
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$2 = *($0)
	if ( (*(*($3 + [4])) == 0) ){ goto $label$2 }
	*($1 + [8]) = *(*($3 + [8]))
	$6 = ($1 + [8])
	$4 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	*($1 + [8]) = (int_64)0
	$6 = ($1 + [8])
	$4 = *(*($3 + [8]))
	
.LABEL $label$1
	*($1 + [16]) = $4
	$3 = $5
	$5 = ($3 + [-32])
	*([0] + [4]) = $5
	CALL eosio_assert([1], [448])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy(($3 + [-24]), $6, [8])
	CALL eosio_assert([1], [448])
	CALL memcpy(($3 + [-16]), ($1 + [16]), [8])
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $4, $5, [24])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = $7
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [96])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $69([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [128])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $9(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $55(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $70(*(($4 + [16])))
	
.LABEL $label$10
	CALL $70($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [160])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $69([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $54(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $55(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL $70(*(($3 + [16])))
	
.LABEL $label$4
	CALL $70($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	$5 = *($0 + [4])
	*($1) = *(*($5))
	$2 = *($0)
	$3 = ($1 + [8])
	CALL $72($3, (*($5) + [8]))
	$5 = *($1 + [8])
	$4 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [8])
	$6 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [448])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	CALL $16($8, $3)
	$6 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-8271247743758893056, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $69(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $79($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $70(*(($1 + [16])))
	
.LABEL $label$11
	CALL $70($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $70($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1398362884
	CALL eosio_assert([1], [1232])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [1296])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [12]) = $1
	*($6 + [8]) = $1
	*($6 + [16]) = ($1 + $2)
	*($6 + [24]) = ($6 + [8])
	*($6 + [36]) = ($0 + [8])
	*($6 + [32]) = $0
	*($6 + [40]) = ($0 + [16])
	*($6 + [44]) = ($0 + [32])
	CALL $57(($6 + [32]), ($6 + [24]))
	*([0] + [4]) = ($6 + [48])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [128])
	CALL memcpy(($3 + [8]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $9(*($1), *($0 + [12]))
}