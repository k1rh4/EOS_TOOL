(data (i32.const 8192) "to account does not exist\00")
(data (i32.const 8218) "recipient account does not exist\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8337) "EOS\00")
(data (i32.const 8341) "account not found in creditor table\00")
(data (i32.const 8377) "plan table is empty!\00")
(data (i32.const 8398) "free plan is avaliable every 24 hours for each beneficiary\00")
(data (i32.const 8457) "something wrong with your account\00")
(data (i32.const 8491) "buyer cannot be bankofstaked\00")
(data (i32.const 8520) " affective orders at most for each buyer\00")
(data (i32.const 8561) "cannot delegate to bankofstaked\00")
(data (i32.const 8593) "cannot delegate to creditor\00")
(data (i32.const 8621) " affective orders at most for each beneficiary\00")
(data (i32.const 8668) "invalid price\00")
(data (i32.const 8682) "invalid cpu\00%lld\00")
(data (i32.const 8699) "invalid net\00%llu\00")
(data (i32.const 8716) "price should between 0.01 EOS and 1000 EOS\00")
(data (i32.const 8759) "account does not exist in creditor table\00")
(data (i32.const 8800) "string is too long to be a valid name\00")
(data (i32.const 8838) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8905) "character is not in allowed character set for names\00")
(data (i32.const 8957) "unable to find key\00")
(data (i32.const 8976) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9027) "error reading iterator\00")
(data (i32.const 9050) "read\00")
(data (i32.const 9055) "string is too long to be a valid symbol_code\00")
(data (i32.const 9100) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9153) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 9212) "write\00")
(data (i32.const 9218) "only accept EOS transfer\00")
(data (i32.const 9243) "plan is in-active\00")
(data (i32.const 9261) "creditor account does not exist\00")
(data (i32.const 9293) " \00")
(data (i32.const 9295) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9344) "invalid symbol name\00")
(data (i32.const 9364) "attempt to add asset with different symbol\00")
(data (i32.const 9407) "addition underflow\00")
(data (i32.const 9426) "addition overflow\00")
(data (i32.const 9444) "cannot pass end iterator to modify\00")
(data (i32.const 9479) "object passed to modify is not in multi_index\00")
(data (i32.const 9525) "cannot modify objects in table of another contract\00")
(data (i32.const 9576) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9635) "cannot create objects in table of another contract\00")
(data (i32.const 9686) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9738) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9792) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9840) "t&\00\00")
(data (i32.const 9844) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9877) " bankofstaked income\00")
(data (i32.const 9898) "income should not be greater than price\00")
(data (i32.const 9938) "reserved should not be greater than price\00")
(data (i32.const 9980) " bankofstaked reserved\00")
(data (i32.const 10003) "attempt to subtract asset with different symbol\00")
(data (i32.const 10051) "subtraction underflow\00")
(data (i32.const 10073) "subtraction overflow\00")
(data (i32.const 10094) "get\00")
(data (i32.const 10098) "cannot pass end iterator to erase\00")
(data (i32.const 10132) "cannot increment end iterator\00")
(data (i32.const 10162) "object passed to erase is not in multi_index\00")
(data (i32.const 10207) "cannot erase objects in table of another contract\00")
(data (i32.const 10257) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10312) "\e8\03\00\00\00\00\00\00")
(data (i32.const 10320) "order entry not found!!!\00")
(data (i32.const 10346) "|\00")
(data (i32.const 10348) "|free\00")
(data (i32.const 10354) "|paid\00")
(data (i32.const 10360) "account not found in whitelist table\00")
(data (i32.const 10397) "account already exist in creditor table\00")
(data (i32.const 10437) "account does not exist in safecreditor table\00")
(data (i32.const 10482) "cannot delete active creditor\00")
(data (i32.const 10512) "account already exist in blacklist table\00")
(data (i32.const 10553) "account not found in blacklist table\00")
(data (i32.const 10590) "price not found\00")
(data (i32.const 10606) "recipient entry not found!!!\00")
(data (i32.const 10635) "quantity exceeds limit\00")
(data (i32.const 10658) "cpu exceeds limit\00")
(data (i32.const 10676) "net exceeds limit\00")
(data (i32.const 10694) "duration less than limit\00")
(data (i32.const 19136) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(import "env" "current_receiver" (func $fimport$0 (result i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "current_time" (func $fimport$2 (result i64)))
(import "env" "memcpy" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$4 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$5 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$6 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "is_account" (func $fimport$8 (param i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "send_deferred" (func $fimport$10 (param i32 i64 i32 i32 i32)))
(import "env" "db_next_i64" (func $fimport$11 (param i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$12 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "read_action_data" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$15 (param i64)))
(import "env" "db_get_i64" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$17 (param i32 i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$19 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$20 (param i32 i64 i32)))
(import "env" "db_previous_i64" (func $fimport$21 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$22 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$23))
(import "env" "db_remove_i64" (func $fimport$24 (param i32)))
(import "env" "db_idx64_next" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$26 (param i32)))
(import "env" "memset" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$29 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$40 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$41 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$44 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$46 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$47 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$48 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $53))
(export "_Znwj" (func $190))
(export "_ZdlPv" (func $192))
(export "_Znaj" (func $191))
(export "_ZdaPv" (func $193))
(export "_ZnwjSt11align_val_t" (func $194))
(export "_ZnajSt11align_val_t" (func $195))
(export "_ZdlPvSt11align_val_t" (func $196))
(export "_ZdaPvSt11align_val_t" (func $197))
(table $0 26 26 anyfunc)
(elem (i32.const 1) $54 $56 $58 $60 $62 $64 $65 $66 $68 $70 $72 $73 $74 $75 $77 $78 $79 $80 $81 $82 $84 $86 $87 $215 $217)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 19216))
(global $global$2 i32 (i32.const 19216))


int_32 .FUNC $220 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $174 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($1) = *(*(*($0 + [4])))
	$3 = *($0)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9212])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	$4 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-4497226457311450768, *(*($0 + [8])), $4, $2, [24])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10132])
	$2 = *($0 + [4])
	$3 = *($2 + [32])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)6761214556460023808, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [32]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [8976])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $8($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)6761214556460023808, $5))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [8976])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [32])) = $4
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $115($0, ($1 + [24]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [64])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [80])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [96])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [112])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [120]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [128]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $170 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$1 = (int_64)0
	*($0) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [32])) = [0]
	$2 = CALL $220([8337])
	if ( ($2 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [9055])
	goto $label$2 
	
.LABEL $label$3
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = (int_64)0
	
.LOOP $label$4:
	$3 = *(($2 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$5
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$4 }
	$1 = ((int_64)$1 << (int_64)8)
	
.LABEL $label$1
	*($0 + [40]) = (int_64)0
	*(($2 = ($0 + [48]))) = ((int_64)$1 | (int_64)4)
	CALL eosio_assert([1], [9295])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$10 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [9344])
	$2 = CALL $220([8337])
	if ( ($2 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9055])
	goto $label$13 
	
.LABEL $label$14
	if ( ($2 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$1 = (int_64)0
	
.LOOP $label$15:
	$3 = *(($2 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$16
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$15 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$11 
	
.LABEL $label$12
	$1 = (int_64)4
	
.LABEL $label$11
	*($0 + [56]) = (int_64)0
	*(($2 = ($0 + [64]))) = $1
	CALL eosio_assert([1], [9295])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$1 = $4
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$21 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$3 = [0]
	
.LABEL $label$17
	CALL eosio_assert($3, [9344])
	$2 = CALL $220([8337])
	if ( ($2 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [9055])
	goto $label$24 
	
.LABEL $label$25
	if ( ($2 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$1 = (int_64)0
	
.LOOP $label$26:
	$3 = *(($2 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$27
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$26 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$22 
	
.LABEL $label$23
	$1 = (int_64)4
	
.LABEL $label$22
	*($0 + [72]) = (int_64)0
	*(($2 = ($0 + [80]))) = $1
	CALL eosio_assert([1], [9295])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$1 = $4
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$32 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$3 = [0]
	
.LABEL $label$28
	CALL eosio_assert($3, [9344])
	$2 = CALL $220([8337])
	if ( ($2 <= [8]) ){ goto $label$36 }
	CALL eosio_assert([0], [9055])
	goto $label$35 
	
.LABEL $label$36
	if ( ($2 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	$1 = (int_64)0
	
.LOOP $label$37:
	$3 = *(($2 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$38 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$38
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$37 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$33 
	
.LABEL $label$34
	$1 = (int_64)4
	
.LABEL $label$33
	*($0 + [88]) = (int_64)0
	*(($2 = ($0 + [96]))) = $1
	CALL eosio_assert([1], [9295])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$41:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$40 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$42 }
	$1 = $4
	$3 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	$1 = $4
	
.LOOP $label$43:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$40 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$43 }
	$3 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$40
	$3 = [0]
	
.LABEL $label$39
	CALL eosio_assert($3, [9344])
	$2 = CALL $220([8337])
	if ( ($2 <= [8]) ){ goto $label$47 }
	CALL eosio_assert([0], [9055])
	goto $label$46 
	
.LABEL $label$47
	if ( ($2 == 0) ){ goto $label$45 }
	
.LABEL $label$46
	$1 = (int_64)0
	
.LOOP $label$48:
	$3 = *(($2 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$49 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$49
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$48 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$44 
	
.LABEL $label$45
	$1 = (int_64)4
	
.LABEL $label$44
	*($0 + [104]) = (int_64)0
	*(($2 = ($0 + [112]))) = $1
	CALL eosio_assert([1], [9295])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$52:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$50 }
	$4 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$54 }
	$1 = $4
	$6 = [1]
	$3 = $2
	$2 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$52 }
	goto $label$53 
	
.LABEL $label$54
	$1 = $4
	
.LOOP $label$55:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$51 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $3 ){ goto $label$55 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$52 }
	
.LABEL $label$53
	CALL eosio_assert($6, [9344])
	return $0
	
.LABEL $label$51
	CALL eosio_assert([0], [9344])
	return $0
	
.LABEL $label$50
	CALL eosio_assert([0], [9344])
	return $0
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $173(*($0 + [4]), $1)
	$5 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [120])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $5)
	CALL $153(($3 + [8]), $1)
	$7 = *($1)
	*($1 + [140]) = CALL db_store_i64(*($4 + [8]), (int_64)5031813150555504640, *(*($0 + [8])), $7, $2, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $226($2)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$5 = ($4 + [8])
	$7 = *($5)
	$2 = *(($0 + [8]))
	$8 = *($2)
	$9 = *($1)
	*($3 + [24]) = *($1 + [8])
	*($1 + [144]) = CALL db_idx64_store($7, (int_64)5031813150555504640, $8, $9, ($3 + [24]))
	$7 = *($2)
	$8 = *($5)
	$9 = *($1)
	*($3 + [24]) = *($1 + [128])
	*(($1 + [148])) = CALL db_idx64_store($8, (int_64)5031813150555504641, $7, $9, ($3 + [24]))
	$global$0 = ($3 + [32])
}

void .FUNC $172 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10162])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [10207])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10257])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [28]))
	$6 = *(($1 + [32]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)6761214556460023808, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

int_32 .FUNC $178 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$3 = ($global$0 - [128])
	$global$0 = $3
	$4 = CALL $147($0)
	*($0 + [96]) = $1
	$1 = *($2)
	CALL $179(*($2 + [4]), $4)
	*($3 + [112]) = ($3 + [96])
	*($3 + [108]) = $3
	*($3 + [104]) = $3
	CALL $180(($3 + [104]), $4)
	$5 = *($0)
	*($0 + [100]) = CALL db_store_i64(*($1 + [8]), (int_64)-6031111549421092864, *(*($2 + [8])), $5, $3, [96])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($1 + [8]))
	$6 = *(*(($2 + [8])))
	$7 = *($0)
	*($3 + [120]) = *($0 + [8])
	*($0 + [104]) = CALL db_idx64_store($5, (int_64)-6031111549421092864, $6, $7, ($3 + [120]))
	$global$0 = ($3 + [128])
	return $0
}

void .FUNC $4 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)6761214556460023808, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$7), [8976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $8($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)6761214556460023808, $6))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$7), [8976])
	
.LABEL $label$2
	*(($4 + [32])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $221 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $212())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $222($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $5 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)6761214556460023808, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$7), [8976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $8($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)6761214556460023808, $6))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$7), [8976])
	
.LABEL $label$2
	*(($4 + [32])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $127 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9479])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [9525])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9576])
	CALL eosio_assert([1], [9212])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($4 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $3 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$0 = ($global$0 - [96])
	$global$0 = $0
	*($0 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*(($0 + [72])) = [0]
	*($0 + [48]) = (int_64)921459758687
	*($0 + [40]) = (int_64)4154300378675156112
	*($0 + [56]) = (int_64)-1
	*($0 + [64]) = (int_64)0
	*($0 + [76]) = [0]
	*($0 + [32]) = ($0 + [40])
	CALL $4(($0 + [24]), ($0 + [32]), ($0 + [80]))
	*($0 + [88]) = (int_64)0
	CALL $5(($0 + [16]), ($0 + [32]), ($0 + [88]))
	if ( ((int_32)*($0 + [20]) == (int_32)*($0 + [28])) ){ goto $label$1 }
	$1 = *($0 + [16])
	$2 = (int_64)1
	
.LOOP $label$2:
	*($0 + [88]) = $1
	$3 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	CALL eosio_assert(((int_32)$3) != (int_32)[0]), [10098])
	CALL $6(($0 + [88]))
	CALL $7(*($0 + [32]), $3)
	*($0 + [8]) = (int_64)0
	CALL $5(($0 + [88]), ($0 + [32]), ($0 + [8]))
	$1 = *($0 + [88])
	*($0 + [16]) = $1
	if ( ((uint_64)$2 > (uint_64)(int_64)2) ){ goto $label$1 }
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_32)*($0 + [28]) != (int_32)(CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32))) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = *($0 + [64])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($0 + [68])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	CALL _ZdlPv($6)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($0 + [64]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($0 + [96])
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $211($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)-6497942746098040830, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $46($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-6497942746098040832, $6))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8976])
	
.LABEL $label$2
	*(($4 + [128])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6497942746098040830, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $46($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-6497942746098040832, $6))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8976])
	
.LABEL $label$2
	*(($4 + [128])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6497942746098040832, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $46($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-6497942746098040832, $6))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8976])
	
.LABEL $label$2
	*(($4 + [120])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $42 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [112])
	$global$0 = $2
	*($2 + [104]) = $0
	CALL eosio_assert(((int_64)$0 != (int_64)4154300378675156112), [8491])
	CALL $38($0)
	$3 = (int_64)20
	if ( ((int_64)$1 != (int_64)1) ){ goto $label$1 }
	$3 = CALL $40($0)
	
.LABEL $label$1
	*(($2 + [96])) = [0]
	*($2 + [88]) = (int_64)0
	$4 = CALL $220([8520])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($2 + [88]) = ($4 << [1])
	$5 = (($2 + [88]) | [1])
	$6 = $5
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($2 + [88]) = ($5 | [1])
	*($2 + [96]) = $6
	*($2 + [92]) = $4
	$5 = (($2 + [88]) | [1])
	
.LABEL $label$5
	CALL memcpy($6, [8520], $4)
	
.LABEL $label$4
	*(($6 + $4)) = [0]
	CALL $210(($2 + [32]), $3)
	$4 = *($2 + [88])
	$6 = ($4 & [1])
	$4 = CALL $206(($2 + [32]), ( *($2 + [96]) ? $5 : $6 ), ( *($2 + [92]) ? uint_32($4 >> [1]) : $6 ))
	$6 = ($4 + [8])
	*((($2 + [72]) + [8])) = *($6)
	*($2 + [72]) = *($4)
	$0 = (int_64)0
	*($4) = (int_64)0
	*($6) = [0]
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($2 + [40]))
	
.LABEL $label$7
	*(($2 + [64])) = [0]
	*(($2 + [70])) = [0]
	*($2 + [40]) = (int_64)921459758687
	*($2 + [32]) = (int_64)4154300378675156112
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	*($2 + [68]) = [0]
	*($2 + [24]) = ($2 + [32])
	CALL $43(($2 + [16]), ($2 + [24]), ($2 + [104]))
	CALL $44(($2 + [8]), ($2 + [24]), ($2 + [104]))
	$4 = *($2 + [20])
	if ( ($4 == 0) ){ goto $label$8 }
	if ( ((int_32)$4 == (int_32)*($2 + [12])) ){ goto $label$8 }
	$0 = (int_64)0
	
.LOOP $label$9:
	$0 = ((int_64)$0 + (int_64)(CASTING uint_64)(uint_32 ((int_64)*($4 + [32]) == (int_64)$1)))
	CALL $45(($2 + [16]))
	$4 = *($2 + [20])
	if ( ($4 == 0) ){ goto $label$8 }
	if ( ((int_32)$4 != (int_32)*($2 + [12])) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert((uint_64)($0 <= $3), ( *($2 + [80]) ? (($2 + [72]) | [1]) : (*($2 + [72]) & [1]) ))
	$5 = *($2 + [56])
	if ( ($5 == 0) ){ goto $label$10 }
	$7 = ($2 + [60])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$14 }
	CALL _ZdlPv($6)
	
.LABEL $label$14
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$13 }
	$4 = *(($2 + [56]))
	goto $label$11 
	
.LABEL $label$12
	$4 = $5
	
.LABEL $label$11
	*($7) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( (*($2 + [72]) & [1]) ){ goto $label$16 }
	if ( (*($2 + [88]) & [1]) ){ goto $label$15 }
	goto $label$2 
	
.LABEL $label$16
	CALL _ZdlPv(*(($2 + [80])))
	if ( ((*($2 + [88]) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($2 + [96])))
	$global$0 = ($2 + [112])
	return (unreachable)
	
.LABEL $label$3
	CALL $198(($2 + [88]))
	
.LABEL $label$2
	$global$0 = ($2 + [112])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($5) = (int_64)0
	CALL $169(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $168(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_64 .FUNC $40 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	*($1 + [16]) = (int_64)921459758687
	*($1 + [8]) = (int_64)4154300378675156112
	$2 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)-2063328927043551232, $0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$2 = CALL $41(($1 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($1 + [8])), [8976])
	$0 = *($2 + [8])
	$3 = *($1 + [32])
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = ($1 + [36])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$6 }
	CALL _ZdlPv($5)
	
.LABEL $label$6
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($1 + [32]))
	goto $label$1 
	
.LABEL $label$4
	$0 = (int_64)5
	
.LABEL $label$3
	$global$0 = ($1 + [48])
	return $0
	
.LABEL $label$2
	$2 = $3
	
.LABEL $label$1
	*($4) = $3
	CALL _ZdlPv($2)
	$global$0 = ($1 + [48])
	return $0
}

void .FUNC $47 (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [128])
	$global$0 = $3
	*($3 + [120]) = $0
	CALL eosio_assert(((int_64)$0 != (int_64)4154300378675156112), [8561])
	CALL eosio_assert(((int_64)$0 != (int_64)$1), [8593])
	CALL $38($0)
	*(($3 + [112])) = [0]
	*(($3 + [118])) = [0]
	*($3 + [88]) = (int_64)921459758687
	*($3 + [80]) = (int_64)4154300378675156112
	*($3 + [96]) = (int_64)-1
	*($3 + [104]) = (int_64)0
	*($3 + [116]) = [0]
	*($3 + [72]) = ($3 + [80])
	CALL $48(($3 + [64]), ($3 + [72]), ($3 + [120]))
	CALL $49(($3 + [56]), ($3 + [72]), ($3 + [120]))
	$0 = (int_64)0
	$4 = *($3 + [68])
	if ( ($4 == 0) ){ goto $label$1 }
	$0 = (int_64)0
	if ( ((int_32)$4 == (int_32)*($3 + [60])) ){ goto $label$1 }
	$0 = (int_64)0
	
.LOOP $label$2:
	$0 = ((int_64)$0 + (int_64)(CASTING uint_64)(uint_32 ((int_64)*($4 + [32]) == (int_64)$2)))
	CALL $50(($3 + [64]))
	$4 = *($3 + [68])
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ((int_32)$4 != (int_32)*($3 + [60])) ){ goto $label$2 }
	
.LABEL $label$1
	*(($3 + [48])) = [0]
	*($3 + [40]) = (int_64)0
	$4 = CALL $220([8621])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$6 }
	$2 = ( (int_64)5 ? (int_64)20 : ((int_64)$2 == (int_64)1) )
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$9 }
	*($3 + [40]) = ($4 << [1])
	$5 = (($3 + [40]) | [1])
	$6 = $5
	if ( $4 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [40]) = ($5 | [1])
	*($3 + [48]) = $6
	*($3 + [44]) = $4
	$5 = (($3 + [40]) | [1])
	
.LABEL $label$8
	CALL memcpy($6, [8621], $4)
	
.LABEL $label$7
	*(($6 + $4)) = [0]
	CALL $210(($3 + [8]), $2)
	$4 = *($3 + [40])
	$6 = ($4 & [1])
	$4 = CALL $206(($3 + [8]), ( *($3 + [48]) ? $5 : $6 ), ( *($3 + [44]) ? uint_32($4 >> [1]) : $6 ))
	$6 = ($4 + [8])
	*((($3 + [24]) + [8])) = *($6)
	*($3 + [24]) = *($4)
	*($4) = (int_64)0
	*($6) = [0]
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($3 + [16]))
	
.LABEL $label$10
	CALL eosio_assert((uint_64)($0 <= $2), ( *($3 + [32]) ? (($3 + [24]) | [1]) : (*($3 + [24]) & [1]) ))
	if ( (*($3 + [24]) & [1]) ){ goto $label$12 }
	if ( (*($3 + [40]) & [1]) ){ goto $label$11 }
	goto $label$5 
	
.LABEL $label$12
	CALL _ZdlPv(*(($3 + [32])))
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($3 + [48])))
	$5 = *($3 + [104])
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL $198(($3 + [40]))
	
.LABEL $label$5
	$5 = *($3 + [104])
	if ( $5 ){ goto $label$3 }
	
.LABEL $label$4
	$global$0 = ($3 + [128])
	return 
	
.LABEL $label$3
	$7 = ($3 + [108])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	CALL _ZdlPv($6)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$15 }
	$4 = *(($3 + [104]))
	goto $label$13 
	
.LABEL $label$14
	$4 = $5
	
.LABEL $label$13
	*($7) = $5
	CALL _ZdlPv($4)
	$global$0 = ($3 + [128])
	(unreachable)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([136])
	$6 = CALL $141($5)
	*($5 + [112]) = $0
	CALL $159(($3 + [32]), $6)
	*($5 + [116]) = $1
	*($5 + [120 align=4]) = (int_64)-1
	*($5 + [128]) = [-1]
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $143(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10132])
	$2 = *($0 + [4])
	$3 = *($2 + [120])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6497942746098040832, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [120]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [8976])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $46($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)-6497942746098040832, $5))
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [8976])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [120])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)-6497942746098040832, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $46($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-6497942746098040832, $6))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8976])
	
.LABEL $label$2
	*(($4 + [120])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $222 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $223($1)
	
.LABEL $label$2
	*(CALL $212()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $223(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $226($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $226 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [19124])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18932]
	$3 = (((int_32)$1 * (int_32)[12]) + [18932])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$3 = *($0)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9212])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($2 + [24]), ($1 + [24]), [8])
	$4 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($3 + [8]), (int_64)-2063328927043551232, *(*($0 + [8])), $4, $2, [32])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $166 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [120])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6497942746098040832, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [124]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-6497942746098040831, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [128]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942746098040830, ($4 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$2 }
	CALL $101($6, $8)
	*($3 + [4]) = [0]
	*($3) = $6
	$7 = *(*(CALL $102($3) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [9686])
	*($1) = *(($6 + [16]))
	$8 = ($1 + [8])
	CALL $200($8, *($5 + [4]))
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($1 + [8])
	$5 = ( *(($1 + [12])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [16])
	$7 = (CASTING uint_64)(uint_32 $5)
	$9 = ($1 + [24])
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ($6 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($6)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3) = $2
	*($3 + [8]) = ($2 + $6)
	CALL eosio_assert(((int_32)$6 > (int_32)[7]), [9212])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	$5 = CALL $155($3, $8)
	CALL eosio_assert(((int_32)(*($5 + [8]) - *($5 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($5 + [4]), $9, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	$7 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)7760153368969871360, *(*($0 + [8])), $7, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $226($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $164 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $219(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [144])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5031813150555504640, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [144]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [128])
	if ( (CALL $219((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [148]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5031813150555504641, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [148])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *(*($0) + [4])
	CALL eosio_assert(((int_64)*(($3 + [72])) == (int_64)*(($1 + [64]))), [10003])
	$4 = (int_64)
	*($1 + [56]) = $4(*($1 + [56]) - *($3 + [64])))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10051])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [10073])
	$3 = *(*($0) + [4])
	CALL eosio_assert(((int_64)*(($3 + [88])) == (int_64)*(($1 + [80]))), [10003])
	$4 = (int_64)
	*($1 + [72]) = $4(*($1 + [72]) - *($3 + [80])))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [10051])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [10073])
	$3 = *(*($0) + [4])
	CALL eosio_assert(((int_64)*(($3 + [72])) == (int_64)*(($1 + [96]))), [9364])
	$4 = ((int_64)*($1 + [88]) + (int_64)*($3 + [64]))
	*($1 + [88]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9407])
	CALL eosio_assert(((int_64)*($1 + [88]) < (int_64)4611686018427387904), [9426])
	$3 = *(*($0) + [4])
	CALL eosio_assert(((int_64)*(($3 + [88])) == (int_64)*(($1 + [112]))), [9364])
	$4 = ((int_64)*($1 + [104]) + (int_64)*($3 + [80]))
	*($1 + [104]) = $4
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9407])
	CALL eosio_assert(((int_64)*($1 + [104]) < (int_64)4611686018427387904), [9426])
	CALL $15($2, *(*(*($0) + [4]) + [40]))
	*(($1 + [48])) = *(($2 + [8]))
	*($1 + [40]) = *($2)
	*($1 + [128]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$global$0 = ($2 + [16])
}

void .FUNC $162 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$0()), [9635])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $165(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $160(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10094])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $24($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9050])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $160 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $168 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $175 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $58 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth((int_64)4154300378675156112)
	*(($3 + [32])) = [0]
	*($3) = (int_64)4154300378675156112
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	*($3 + [8]) = (int_64)921459758687
	$4 = [0]
	$5 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)-2063328927043551232, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $41($3, $5)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$3), [8976])
	
.LABEL $label$1
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [10360])
	CALL eosio_assert($5, [10098])
	CALL eosio_assert($5, [10132])
	$5 = CALL db_next_i64(*($4 + [36]), ($3 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $41($3, $5)
	
.LABEL $label$2
	CALL $114($3, $4)
	$6 = *($3 + [24])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($3 + [28])
	$4 = *($7)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$5 = *($4)
	*($4) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($3 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

int_32 .FUNC $59 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9050])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9050])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $226($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10132])
	$2 = *($0 + [4])
	$3 = *(($2 + [128]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6497942746098040830, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [128])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [8976])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $46($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)-6497942746098040832, $5))
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [8976])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [128])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = [0]
	$4 = [0]
	$5 = *($0)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$4 = [1]
	$8 = $0
	$0 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$8 = ($0 + [1])
	$0 = $8
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$0 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8668])
	if ( ((uint_64)((int_64)*($1) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$6 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$6 = $7
	$3 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$6 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$8 = ($0 + [1])
	$0 = $8
	if ( $4 ){ goto $label$10 }
	$3 = [1]
	$0 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [8682])
	$4 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$6 = $7
	$4 = [1]
	$8 = $0
	$0 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$6 = $7
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$8 = ($0 + [1])
	$0 = $8
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$0 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [8699])
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)-100) <= (int_64)9999901), [8716])
}

void .FUNC $52 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	$2 = [0]
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	*($1 + [44]) = [0]
	*($1 + [16]) = (int_64)921459758687
	*($1 + [8]) = (int_64)4154300378675156112
	$3 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)5031813150555504640, $0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $17(($1 + [8]), $3) + [136]) == (int_32)($1 + [8])), [8976])
	$2 = [1]
	
.LABEL $label$1
	CALL eosio_assert($2, [8759])
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ($1 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$7
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($1 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$2 = $4
	
.LABEL $label$3
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($1 + [48])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [368])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [364]) = [0]
	*($3 + [360]) = [1]
	*($3 + [176]) = *($3 + [360])
	CALL $55($0, (int_64)6138663591592764928, ($3 + [176]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	if ( ((int_64)$2 > (int_64)4923678721393373151) ){ goto $label$23 }
	if ( ((int_64)$2 <= (int_64)3617214701423578415) ){ goto $label$22 }
	if ( ((int_64)$2 > (int_64)3626386355439071743) ){ goto $label$20 }
	if ( ((int_64)$2 == (int_64)3617214701423578416) ){ goto $label$16 }
	if ( ((int_64)$2 == (int_64)3626093248789590416) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)3626114208737603072) ){ goto $label$2 }
	*($3 + [284]) = [0]
	*($3 + [280]) = [2]
	*($3 + [72]) = *($3 + [280])
	CALL $57($1, $1, ($3 + [72]))
	goto $label$2 
	
.LABEL $label$23
	if ( ((int_64)$2 <= (int_64)5378271168185935759) ){ goto $label$21 }
	if ( ((int_64)$2 > (int_64)6101144942552285183) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)5378271168185935760) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)5378286610486194688) ){ goto $label$13 }
	if ( ((int_64)$2 != (int_64)5378360887185486224) ){ goto $label$2 }
	*($3 + [292]) = [0]
	*($3 + [288]) = [3]
	*($3 + [64]) = *($3 + [288])
	CALL $59($1, $1, ($3 + [64]))
	goto $label$2 
	
.LABEL $label$22
	if ( ((int_64)$2 <= (int_64)-4417058021344893041) ){ goto $label$18 }
	if ( ((int_64)$2 == (int_64)-4417058021344893040) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-3841130677495922688) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)3617214701412286464) ){ goto $label$2 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [4]
	*($3 + [136]) = *($3 + [216])
	CALL $61($1, $1, ($3 + [136]))
	goto $label$2 
	
.LABEL $label$21
	if ( ((int_64)$2 <= (int_64)5377993503836713359) ){ goto $label$17 }
	if ( ((int_64)$2 == (int_64)5377993503836713360) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)5378014463784726016) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)5378225553524391936) ){ goto $label$2 }
	*($3 + [252]) = [0]
	*($3 + [248]) = [5]
	*($3 + [104]) = *($3 + [248])
	CALL $63($1, $1, ($3 + [104]))
	goto $label$2 
	
.LABEL $label$20
	if ( ((int_64)$2 == (int_64)3626386355439071744) ){ goto $label$8 }
	if ( ((int_64)$2 == (int_64)3626460632138363280) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4851652232166244352) ){ goto $label$2 }
	*($3 + [324]) = [0]
	*($3 + [320]) = [6]
	*($3 + [32]) = *($3 + [320])
	CALL $61($1, $1, ($3 + [32]))
	goto $label$2 
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)6101144942552285184) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)6299106146746281472) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)6714450839240081408) ){ goto $label$2 }
	*($3 + [316]) = [0]
	*($3 + [312]) = [7]
	*($3 + [40]) = *($3 + [312])
	CALL $63($1, $1, ($3 + [40]))
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_64)$2 == (int_64)-4813665582895333376) ){ goto $label$4 }
	if ( ((int_64)$2 != (int_64)-4417089389461504000) ){ goto $label$2 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [8]
	*($3 + [128]) = *($3 + [224])
	CALL $67($1, $1, ($3 + [128]))
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_64)$2 == (int_64)4923678721393373152) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)5094022298689252864) ){ goto $label$2 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [9]
	*($3 + [168]) = *($3 + [184])
	CALL $69($1, $1, ($3 + [168]))
	goto $label$2 
	
.LABEL $label$16
	*($3 + [212]) = [0]
	*($3 + [208]) = [10]
	*($3 + [144]) = *($3 + [208])
	CALL $71($1, $1, ($3 + [144]))
	goto $label$2 
	
.LABEL $label$15
	*($3 + [244]) = [0]
	*($3 + [240]) = [11]
	*($3 + [112]) = *($3 + [240])
	CALL $61($1, $1, ($3 + [112]))
	goto $label$2 
	
.LABEL $label$14
	*($3 + [196]) = [0]
	*($3 + [192]) = [12]
	*($3 + [160]) = *($3 + [192])
	CALL $61($1, $1, ($3 + [160]))
	goto $label$2 
	
.LABEL $label$13
	*($3 + [268]) = [0]
	*($3 + [264]) = [13]
	*($3 + [88]) = *($3 + [264])
	CALL $61($1, $1, ($3 + [88]))
	goto $label$2 
	
.LABEL $label$12
	*($3 + [204]) = [0]
	*($3 + [200]) = [14]
	*($3 + [152]) = *($3 + [200])
	CALL $76($1, $1, ($3 + [152]))
	goto $label$2 
	
.LABEL $label$11
	*($3 + [340]) = [0]
	*($3 + [336]) = [15]
	*($3 + [16]) = *($3 + [336])
	CALL $61($1, $1, ($3 + [16]))
	goto $label$2 
	
.LABEL $label$10
	*($3 + [236]) = [0]
	*($3 + [232]) = [16]
	*($3 + [120]) = *($3 + [232])
	CALL $61($1, $1, ($3 + [120]))
	goto $label$2 
	
.LABEL $label$9
	*($3 + [260]) = [0]
	*($3 + [256]) = [17]
	*($3 + [96]) = *($3 + [256])
	CALL $61($1, $1, ($3 + [96]))
	goto $label$2 
	
.LABEL $label$8
	*($3 + [276]) = [0]
	*($3 + [272]) = [18]
	*($3 + [80]) = *($3 + [272])
	CALL $61($1, $1, ($3 + [80]))
	goto $label$2 
	
.LABEL $label$7
	*($3 + [300]) = [0]
	*($3 + [296]) = [19]
	*($3 + [56]) = *($3 + [296])
	CALL $59($1, $1, ($3 + [56]))
	goto $label$2 
	
.LABEL $label$6
	*($3 + [348]) = [0]
	*($3 + [344]) = [20]
	*($3 + [8]) = *($3 + [344])
	CALL $83($1, $1, ($3 + [8]))
	goto $label$2 
	
.LABEL $label$5
	*($3 + [308]) = [0]
	*($3 + [304]) = [21]
	*($3 + [48]) = *($3 + [304])
	CALL $85($1, $1, ($3 + [48]))
	goto $label$2 
	
.LABEL $label$4
	*($3 + [332]) = [0]
	*($3 + [328]) = [22]
	*($3 + [24]) = *($3 + [328])
	CALL $59($1, $1, ($3 + [24]))
	goto $label$2 
	
.LABEL $label$3
	*($3 + [356]) = [0]
	*($3 + [352]) = [23]
	*($3) = *($3 + [352])
	CALL $85($1, $1, $3)
	
.LABEL $label$2
	CALL $213([0])
	$global$0 = ($3 + [368])
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	$5 = ($global$0 - [608])
	$global$0 = $5
	$6 = CALL $220([8337])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9055])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8336]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)((int_64)$7 | (int_64)4)), [9218])
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$11 }
	*($5 + [528]) = $1
	if ( ((int_64)$1 == (int_64)6820310650163142816) ){ goto $label$7 }
	$6 = [0]
	*(($5 + [520])) = [0]
	*($5 + [496]) = (int_64)4154300378675156112
	*($5 + [488]) = (int_64)4154300378675156112
	*($5 + [504]) = (int_64)-1
	*($5 + [512]) = (int_64)0
	*($5 + [524]) = [0]
	*($5 + [480]) = ($5 + [488])
	*($5 + [328]) = *($3)
	CALL $90(($5 + [536]), ($5 + [480]), ($5 + [328]))
	$8 = *($5 + [540])
	if ( ($8 == 0) ){ goto $label$10 }
	if ( ((int_64)*($5 + [328]) != (int_64)*($8 + [8])) ){ goto $label$9 }
	$7 = *($5 + [536])
	*($5 + [472]) = $7
	$6 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (($5 + [472]) | [4])
	goto $label$8 
	
.LABEL $label$11
	$global$0 = ($5 + [608])
	return 
	
.LABEL $label$10
	*($5 + [476]) = [0]
	*($5 + [472]) = ($5 + [480])
	$9 = (($5 + [472]) | [4])
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	*($5 + [476]) = [0]
	*($5 + [472]) = ($5 + [480])
	$9 = (($5 + [472]) | [4])
	
.LABEL $label$8
	CALL eosio_assert(((int_64)*($6 + [72]) == (int_64)1), [9243])
	CALL eosio_assert(((int_32)*($5 + [476]) != (int_32)[0]), [8668])
	$6 = ($6 & [1])
	$6 = *($4)
	if ( (( *($4 + [4]) ? uint_32($6 >> [1]) : $6 ) == 0) ){ goto $label$13 }
	$6 = ( *($4 + [8]) ? ($4 + [1]) : $6 )
	*($5 + [328]) = $6
	*($5 + [332]) = CALL $220($6)
	*($5 + [120]) = *($5 + [328])
	$2 = *(CALL $9(($5 + [536]), ($5 + [120])))
	CALL eosio_assert(CALL $fimport$8($2), [8192])
	goto $label$12 
	
.LABEL $label$13
	$2 = *($5 + [528])
	
.LABEL $label$12
	*($5 + [464]) = $2
	$7 = *(*($9) + [64])
	if ( ((int_64)$7 != (int_64)1) ){ goto $label$14 }
	CALL $37($2)
	$7 = *(*($9) + [64])
	
.LABEL $label$14
	$7 = CALL $12($7)
	*($5 + [456]) = $7
	$6 = *($9)
	if ( ((int_64)*($6 + [64]) != (int_64)0) ){ goto $label$15 }
	$7 = *($6 + [24])
	$2 = *(($6 + [32]))
	CALL eosio_assert(((int_64)*(($6 + [48])) == (int_64)$2), [9364])
	$7 = ((int_64)$7 + (int_64)*($6 + [40]))
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9407])
	CALL eosio_assert(((int_64)$7 < (int_64)4611686018427387904), [9426])
	CALL $15(($5 + [536]), *($5 + [456]))
	CALL eosio_assert(((int_64)$2 == (int_64)*($5 + [544])), [9153])
	if ( ((int_64)*($5 + [536]) >= (int_64)$7) ){ goto $label$16 }
	*(($5 + [112])) = $2
	*($5 + [448]) = $2
	*($5 + [104]) = $7
	*($5 + [440]) = $7
	$7 = CALL $18(($5 + [104]))
	*($5 + [456]) = $7
	goto $label$15 
	
.LABEL $label$16
	$7 = *($5 + [456])
	
.LABEL $label$15
	CALL eosio_assert(CALL $fimport$8($7), [9261])
	CALL $42(*($5 + [528]), *(*($9) + [64]))
	CALL $47(*($5 + [464]), *($5 + [456]), *(*($9) + [64]))
	if ( (CALL $32(*($5 + [456])) == 0) ){ goto $label$18 }
	$7 = *($5 + [456])
	*($5 + [248]) = (int_64)5031813150566690592
	*($5 + [240]) = $7
	*((($6 = CALL _Znwj([16])) + [8])) = *($5 + [248])
	*($6) = *($5 + [240])
	$8 = *($9)
	*(($3 = (($5 + [424]) + [8]))) = *(($8 + [48]))
	*(($4 = (($5 + [408]) + [8]))) = *(($8 + [32]))
	*($5 + [424]) = *($8 + [40])
	*($5 + [408]) = *($8 + [24])
	$2 = *($5 + [464])
	$1 = *($3)
	*((($5 + [328]) + [8])) = $1
	$10 = *($4)
	*((($5 + [280]) + [8])) = $10
	*((($5 + [536]) + [16])) = $1
	*((($5 + [536]) + [32])) = $10
	$11 = *($5 + [424])
	*((($5 + [8]) + [8])) = $11
	*((($5 + [8]) + [16])) = $1
	$1 = *($5 + [408])
	*(($5 + [32])) = $1
	*((($5 + [8]) + [32])) = $10
	*($5 + [176]) = $6
	$6 = ($6 + [16])
	*($5 + [180]) = $6
	*($5 + [184]) = $6
	*($5 + [536]) = $2
	*($5 + [8]) = $2
	*($5 + [328]) = $11
	*($5 + [280]) = $1
	*($5 + [544]) = $11
	*($5 + [560]) = $1
	CALL $91($7, (int_64)5378043540636893184, ($5 + [176]), ($5 + [8]))
	$6 = *($5 + [176])
	if ( ($6 == 0) ){ goto $label$17 }
	*($5 + [180]) = $6
	CALL _ZdlPv($6)
	goto $label$17 
	
.LABEL $label$18
	*($5 + [248]) = (int_64)5031813150566690592
	*($5 + [240]) = *($5 + [456])
	*((($6 = CALL _Znwj([16])) + [8])) = *($5 + [248])
	*($6) = *($5 + [240])
	$8 = *($9)
	*(($3 = (($5 + [392]) + [8]))) = *(($8 + [48]))
	*(($4 = (($5 + [376]) + [8]))) = *(($8 + [32]))
	*($5 + [392]) = *($8 + [40])
	*($5 + [376]) = *($8 + [24])
	$7 = *($5 + [456])
	$2 = *($5 + [464])
	*(($8 = (($5 + [328]) + [8]))) = *($3)
	*(($3 = (($5 + [280]) + [8]))) = *($4)
	*(($4 = (($5 + [592]) + [4]))) = *((($5 + [369]) + [4]))
	*(($12 = (($5 + [592]) + [6]))) = *((($5 + [369]) + [6]))
	*($5 + [176]) = $6
	$6 = ($6 + [16])
	*($5 + [180]) = $6
	*($5 + [184]) = $6
	*($5 + [328]) = *($5 + [392])
	*($5 + [280]) = *($5 + [376])
	*($5 + [592]) = *($5 + [369 align=1])
	$1 = *($8)
	*((($5 + [536]) + [24])) = $1
	$10 = *($3)
	*((($5 + [536]) + [40])) = $10
	*(($5 + [591])) = *($12)
	*(($5 + [589])) = *($4)
	*($5 + [544]) = $2
	*($5 + [536]) = $7
	*($5 + [584]) = [0]
	$11 = *($5 + [328])
	*($5 + [552]) = $11
	$13 = *($5 + [280])
	*($5 + [568]) = $13
	*($5 + [585 align=1]) = *($5 + [592])
	*((($5 + [48]) + [40])) = $10
	*((($5 + [48]) + [32])) = $13
	*((($5 + [48]) + [24])) = $1
	*((($5 + [48]) + [16])) = $11
	*((($5 + [48]) + [8])) = $2
	*((($5 + [48]) + [48])) = *($5 + [584])
	*($5 + [48]) = $7
	CALL $92((int_64)6138663577826885632, (int_64)5378043540636893184, ($5 + [176]), ($5 + [48]))
	$6 = *($5 + [176])
	if ( ($6 == 0) ){ goto $label$17 }
	*($5 + [180]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$17
	*($5 + [544]) = (int_64)4154300910593376256
	*($5 + [536]) = (int_64)4154300378675156112
	*((($6 = CALL _Znwj([16])) + [8])) = *($5 + [544])
	*($6) = *($5 + [536])
	$7 = *($5 + [456])
	$8 = ($6 + [16])
	*($5 + [332]) = $8
	*($5 + [328]) = $6
	*($5 + [336]) = $8
	CALL $93((int_64)4154300378675156112, (int_64)4851652232166244352, ($5 + [328]), $7)
	$6 = *($5 + [328])
	if ( ($6 == 0) ){ goto $label$19 }
	*($5 + [332]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$7 = *($5 + [456])
	*((($5 + [328]) + [32])) = [0]
	*($5 + [344]) = (int_64)-1
	*($5 + [352]) = (int_64)0
	*($5 + [364]) = [0]
	*($5 + [336]) = (int_64)921459758687
	*($5 + [328]) = (int_64)4154300378675156112
	$6 = [0]
	$8 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)5031813150555504640, $7)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$20 }
	$6 = CALL $17(($5 + [328]), $8)
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)($5 + [328])), [8976])
	
.LABEL $label$20
	*($5 + [540]) = ($5 + [456])
	*($5 + [536]) = ($5 + [472])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9444])
	CALL $94(($5 + [328]), $6, (int_64)4154300378675156112, ($5 + [536]))
	*((($5 + [280]) + [32])) = [0]
	*(($5 + [318])) = [0]
	*($5 + [288]) = (int_64)921459758687
	*($5 + [280]) = (int_64)4154300378675156112
	*($5 + [296]) = (int_64)-1
	*($5 + [304]) = (int_64)0
	*($5 + [316]) = [0]
	*($5 + [540]) = ($5 + [528])
	*($5 + [536]) = ($5 + [280])
	*($5 + [544]) = ($5 + [472])
	*($5 + [548]) = ($5 + [456])
	*($5 + [552]) = ($5 + [464])
	*($5 + [556]) = ($5 + [320])
	CALL $95(($5 + [240]), ($5 + [280]), (int_64)4154300378675156112, ($5 + [536]))
	if ( ((int_64)*(*($9) + [64]) != (int_64)1) ){ goto $label$21 }
	CALL $1(*($5 + [464]))
	$8 = [0]
	*(($5 + [272])) = [0]
	*($5 + [248]) = (int_64)921459758687
	*($5 + [240]) = (int_64)4154300378675156112
	*($5 + [256]) = (int_64)-1
	*($5 + [276]) = [0]
	*($5 + [264]) = (int_64)0
	$12 = CALL $199(($5 + [224]), (CALL $96(($5 + [240]), *($5 + [456]), [8957]) + [24]))
	$7 = *($5 + [528])
	if ( ((int_64)$7 == (int_64)0) ){ goto $label$25 }
	$3 = *([0] + [9840])
	
.LOOP $label$27:
	*((($5 + [536]) + ($6 = $8))) = *(($3 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$7 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$8 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$26 }
	$7 = ((int_64)$7 << (int_64)5)
	if ( ((int_64)$7 != (int_64)0) ){ goto $label$27 }
	
.LABEL $label$26
	*(($5 + [216])) = [0]
	*($5 + [208]) = (int_64)0
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$24 }
	*($5 + [208]) = ($8 << [1])
	$3 = (($5 + [208]) | [1])
	goto $label$23 
	
.LABEL $label$25
	*(($5 + [216])) = [0]
	*($5 + [208]) = (int_64)0
	*($5 + [208]) = [0]
	$6 = (($5 + [208]) | [1])
	goto $label$22 
	
.LABEL $label$24
	$4 = (($8 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*($5 + [208]) = ($4 | [1])
	*($5 + [216]) = $3
	*($5 + [212]) = $8
	
.LABEL $label$23
	$4 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$28:
	*(($3 + $6)) = *((($5 + [536]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$28 }
	$6 = ($3 + $8)
	
.LABEL $label$22
	*($6) = [0]
	CALL $97(($5 + [536]), ($5 + [208]), [9293])
	$6 = *($5 + [224])
	$8 = ($6 & [1])
	$6 = CALL $206(($5 + [536]), ( *($12 + [8]) ? ($12 + [1]) : $8 ), ( *($12 + [4]) ? uint_32($6 >> [1]) : $8 ))
	$8 = ($6 + [8])
	*((($5 + [192]) + [8])) = *($8)
	*($5 + [192]) = *($6)
	*($6) = (int_64)0
	*($8) = [0]
	if ( ((*($5 + [536]) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*($5 + [544]))
	
.LABEL $label$29
	*($5 + [184]) = (int_64)4154300910593376256
	*($5 + [176]) = (int_64)4154300378675156112
	*((($6 = CALL _Znwj([16])) + [8])) = *($5 + [184])
	*($6) = *($5 + [176])
	*($5 + [136]) = (int_64)-7948557724747115152
	$3 = *($9)
	*(($8 = (($5 + [128]) + [24]))) = *(($3 + [16]))
	*($5 + [128]) = (int_64)4154300378675156112
	*($5 + [144]) = *($3 + [8])
	CALL $199(($5 + [160]), ($5 + [192]))
	*((($5 + [536]) + [24])) = *($8)
	$8 = (($5 + [128]) + [40])
	*(($3 = (($5 + [536]) + [40]))) = *($8)
	*($8) = [0]
	$8 = ($6 + [16])
	*($5 + [596]) = $8
	*($5 + [592]) = $6
	*($5 + [600]) = $8
	*($5 + [536]) = *($5 + [128])
	*($5 + [544]) = *($5 + [136])
	*($5 + [552]) = *($5 + [144])
	*($5 + [568]) = *($5 + [160])
	*($5 + [160]) = (int_64)0
	CALL $98((int_64)6138663591592764928, (int_64)-3617168760277827584, ($5 + [592]), ($5 + [536]))
	if ( ((*($5 + [568]) & [1]) == 0) ){ goto $label$30 }
	CALL _ZdlPv(*($3))
	
.LABEL $label$30
	$6 = *($5 + [592])
	if ( ($6 == 0) ){ goto $label$31 }
	*($5 + [596]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$31
	if ( (*(($5 + [160])) & [1]) ){ goto $label$39 }
	if ( (*($5 + [192]) & [1]) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	CALL _ZdlPv(*(($5 + [168])))
	if ( ((*($5 + [192]) & [1]) == 0) ){ goto $label$37 }
	
.LABEL $label$38
	CALL _ZdlPv(*($5 + [200]))
	$6 = [1]
	if ( ((*($5 + [208]) & [1]) == 0) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$6 = [1]
	if ( (*($5 + [208]) & [1]) ){ goto $label$35 }
	
.LABEL $label$36
	if ( (*($5 + [224]) & $6) ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	CALL _ZdlPv(*($5 + [216]))
	if ( ((*($5 + [224]) & $6) == 0) ){ goto $label$33 }
	
.LABEL $label$34
	CALL _ZdlPv(*(($12 + [8])))
	$3 = *($5 + [264])
	if ( ($3 == 0) ){ goto $label$21 }
	goto $label$32 
	
.LABEL $label$33
	$3 = *($5 + [264])
	if ( ($3 == 0) ){ goto $label$21 }
	
.LABEL $label$32
	$4 = ($5 + [268])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$41 }
	
.LOOP $label$42:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$43 }
	if ( ((*($8 + [24]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($8 + [32])))
	
.LABEL $label$44
	CALL _ZdlPv($8)
	
.LABEL $label$43
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$42 }
	$6 = *(($5 + [264]))
	goto $label$40 
	
.LABEL $label$41
	$6 = $3
	
.LABEL $label$40
	*($4) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$21
	*($5 + [544]) = [0]
	*($5 + [536]) = (int_64)0
	CALL $99(($5 + [536]), ($5 + [320]))
	CALL $100($0, ($5 + [536]), *(*($9) + [56]))
	$6 = *($5 + [536])
	if ( ($6 == 0) ){ goto $label$45 }
	*($5 + [540]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$45
	$3 = *($5 + [304])
	if ( ($3 == 0) ){ goto $label$46 }
	$4 = ($5 + [308])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$48 }
	
.LOOP $label$49:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$50 }
	CALL _ZdlPv($8)
	
.LABEL $label$50
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$49 }
	$6 = *(($5 + [304]))
	goto $label$47 
	
.LABEL $label$48
	$6 = $3
	
.LABEL $label$47
	*($4) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$46
	$3 = *($5 + [352])
	if ( ($3 == 0) ){ goto $label$51 }
	$4 = ($5 + [356])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$53 }
	
.LOOP $label$54:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$55 }
	if ( ((*($8 + [24]) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*(($8 + [32])))
	
.LABEL $label$56
	CALL _ZdlPv($8)
	
.LABEL $label$55
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$54 }
	$6 = *(($5 + [352]))
	goto $label$52 
	
.LABEL $label$53
	$6 = $3
	
.LABEL $label$52
	*($4) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$51
	$3 = *($5 + [512])
	if ( ($3 == 0) ){ goto $label$7 }
	$4 = ($5 + [516])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$58 }
	
.LOOP $label$59:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$60 }
	CALL _ZdlPv($8)
	
.LABEL $label$60
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$59 }
	$6 = *(($5 + [512]))
	goto $label$57 
	
.LABEL $label$58
	$6 = $3
	
.LABEL $label$57
	*($4) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$global$0 = ($5 + [608])
}

int_32 .FUNC $55 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $88(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $89(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $226($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $56 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [64]) = $2
	*($4 + [72]) = $1
	CALL require_auth((int_64)4154300378675156112)
	$5 = [0]
	*(($4 + [56])) = [0]
	*($4 + [24]) = (int_64)4154300378675156112
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	*($4 + [60]) = [0]
	*($4 + [32]) = (int_64)921459758687
	$6 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)5031813150555504640, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $17(($4 + [24]), $6) + [136]) == (int_32)($4 + [24])), [8976])
	goto $label$1 
	
.LABEL $label$2
	$5 = [1]
	
.LABEL $label$1
	CALL eosio_assert($5, [10397])
	*($4 + [12]) = $3
	*($4 + [8]) = ($4 + [64])
	*($4 + [16]) = ($4 + [72])
	CALL $117($4, ($4 + [24]), (int_64)4154300378675156112, ($4 + [8]))
	$6 = *($4 + [48])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [52])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	$5 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$5 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($4 + [80])
}

int_32 .FUNC $57 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9050])
	CALL memcpy(($4 + [72]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [9050])
	CALL memcpy((($4 + [72]) + [8]), ($2 + [8]), [8])
	*($4 + [60]) = ($2 + [16])
	CALL $115(($4 + [56]), (($4 + [72]) + [16]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $116(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $226($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($1 + [8]) = (int_64)0
	$3 = *($0)
	*($1 + [16]) = (CASTING uint_64)(uint_32 ((int_64)*($3) != (int_64)0))
	if ( (int_64)(*($3) == 0) ){ goto $label$3 }
	CALL $199($2, *($0 + [4]))
	goto $label$2 
	
.LABEL $label$3
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $220([10345])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($2) = ($3 << [1])
	$4 = ($2 | [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2) = ($5 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($4, [10345], $3)
	
.LABEL $label$4
	*(($4 + $3)) = [0]
	
.LABEL $label$2
	$3 = ($1 + [24])
	if ( (*($1 + [24]) & [1]) ){ goto $label$8 }
	*($3) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*(($1 + [32]))) = [0]
	*(($1 + [28])) = [0]
	
.LABEL $label$7
	CALL $202($3, [0])
	$4 = ($2 + [8])
	*(($3 + [8])) = *($4)
	*($3) = *($2)
	$3 = *($0 + [8])
	*($1) = *($3)
	CALL $15($2, *($3))
	*(($1 + [48])) = *($4)
	*($1 + [40]) = *($2)
	$6 = CALL current_time()
	*($1 + [128]) = (int_64)0
	*($1 + [120]) = ((int_64)((uint_64)$6 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $198($2)
}

void .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $155($0, ($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [64]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [80]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [96]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [112]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [120]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [128]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [16]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($0 + [24]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [32]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $24($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9212])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9212])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $139(CALL $140($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-6497942746098040832, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $46($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $158(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [9686])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = *(*($0 + [4]))
	$3 = *(*($0 + [8]) + [4])
	*(($1 + [24])) = *(($3 + [16]))
	*($1 + [16]) = *($3 + [8])
	*($1 + [40]) = *(*($0 + [12]))
	*($1 + [48]) = *(*($0 + [16]))
	$3 = *(*($0 + [8]) + [4])
	*($1 + [56]) = *($3)
	*(($1 + [72])) = *(($3 + [32]))
	*($1 + [64]) = *($3 + [24])
	$3 = *(*($0 + [8]) + [4])
	*($1 + [80]) = *($3 + [40])
	*(($1 + [88])) = *(($3 + [48]))
	*($1 + [32]) = *(*(*($0 + [8]) + [4]) + [64])
	*($1 + [96]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = CALL current_time()
	*($1 + [104]) = ((int_64)((int_64)*(*(*($0 + [8]) + [4]) + [56]) * (int_64)60) + (int_64)((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	*(*($0 + [20])) = *($1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [24]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [72]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [88]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [96]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [104]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $219(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [144])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5031813150555504640, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [144]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [128])
	if ( (CALL $219((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [148]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5031813150555504641, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [148])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9212])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9212])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $158 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [116]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9792])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6497942746098040832)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9738])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9738])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $46(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [72])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [88])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [96]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [104]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $179 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-6031111549421092864, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $31($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $181(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [9686])
	*($1) = *(($3 + [16]))
	$3 = *($0 + [4])
	*($1 + [8]) = *($3)
	*(($1 + [16])) = *(($3 + [8]))
	$3 = *($0 + [8])
	*($1 + [24]) = *($3)
	*(($1 + [32])) = *(($3 + [8]))
	$3 = *($0 + [12])
	*($1 + [40]) = *($3)
	*(($1 + [48])) = *(($3 + [8]))
	*($1 + [56]) = *(*($0 + [16]))
	*($1 + [72]) = (int_64)0
	*($1 + [64]) = *(*($0 + [20]))
	*($1 + [80]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $224 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $225($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8251])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $183 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $69 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [128]))) = (int_64)0
	*(($8 = ($4 + [144]))) = (int_64)0
	*(($9 = ($4 + [160]))) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $7)
	*($4 + [304]) = ($4 + [96])
	*($4 + [64]) = ($4 + [112])
	CALL $130(($4 + [64]), ($4 + [304]))
	*(($10 = (($4 + [48]) + [8]))) = *($4 + [104])
	*($4 + [48]) = *($4 + [96])
	*(($11 = (($4 + [288]) + [8]))) = *($10)
	*($4 + [288]) = *($4 + [48])
	$10 = *($11)
	*((($4 + [304]) + [8])) = $10
	*(($4 + [88])) = $10
	*($4 + [64]) = $0
	*($4 + [72]) = $1
	$0 = *($4 + [288])
	*($4 + [80]) = $0
	*($4 + [304]) = $0
	*(($10 = (($4 + [208]) + [8]))) = *($3)
	*(($3 = (($4 + [192]) + [8]))) = *($8)
	*(($8 = (($4 + [176]) + [8]))) = *($9)
	*($4 + [208]) = *($4 + [120])
	*($4 + [192]) = *($4 + [136])
	*($4 + [176]) = *($4 + [152])
	$0 = *($4 + [112])
	$1 = *($4 + [168])
	*((($4 + [256]) + [8])) = *($8)
	*((($4 + [240]) + [8])) = *($3)
	*((($4 + [224]) + [8])) = *($10)
	*($4 + [256]) = *($4 + [176])
	*($4 + [240]) = *($4 + [192])
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$12 = *((($4 + [224]) + [8]))
	*((($4 + [304]) + [8])) = $12
	$13 = *((($4 + [240]) + [8]))
	*((($4 + [288]) + [8])) = $13
	$14 = *((($4 + [256]) + [8]))
	*((($4 + [272]) + [8])) = $14
	*((($4 + [32]) + [8])) = $12
	*((($4 + [16]) + [8])) = $13
	*(($4 + [8])) = $14
	$12 = *($4 + [224])
	*($4 + [304]) = $12
	$13 = *($4 + [240])
	*($4 + [288]) = $13
	*($4 + [32]) = $12
	*($4 + [16]) = $13
	$12 = *($4 + [256])
	*($4) = $12
	*($4 + [272]) = $12
	CALL void $3((int_32 $0), (int_64 ($4 + [32])), (int_32 ($4 + [16])), (int_32 $4), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $226($2)
	
.LABEL $label$6
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $68 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$6 = ($global$0 - [416])
	$global$0 = $6
	*($6 + [320]) = $5
	*($6 + [328]) = $1
	CALL require_auth((int_64)4154300378675156112)
	*($6 + [319]) = [0]
	$7 = CALL $220([8337])
	if ( ($7 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9055])
	goto $label$3 
	
.LABEL $label$4
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = (int_64)0
	
.LOOP $label$5:
	$9 = *(($7 + [8336]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$6
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$5 }
	$10 = ((int_64)$8 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$10 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [9295])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$11 = ((int_64)$10 | (int_64)4)
	$7 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$8 = $10
	$9 = [1]
	$12 = $7
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$8 = $10
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$12 = ($7 + [1])
	$7 = $12
	if ( $9 ){ goto $label$11 }
	$9 = [1]
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$9 = [0]
	
.LABEL $label$7
	CALL eosio_assert($9, [9344])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$11), [9153])
	CALL eosio_assert(((int_64)*($2) < (int_64)4000001), [10635])
	$7 = CALL $220([8337])
	if ( ($7 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9055])
	goto $label$14 
	
.LABEL $label$15
	if ( ($7 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$8 = (int_64)0
	
.LOOP $label$16:
	$9 = *(($7 + [8336]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$16 }
	$10 = ((int_64)$8 << (int_64)8)
	goto $label$12 
	
.LABEL $label$13
	$10 = (int_64)0
	
.LABEL $label$12
	CALL eosio_assert([1], [9295])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$11 = ((int_64)$10 | (int_64)4)
	$7 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$8 = $10
	$9 = [1]
	$12 = $7
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$8 = $10
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$12 = ($7 + [1])
	$7 = $12
	if ( $9 ){ goto $label$22 }
	$9 = [1]
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$9 = [0]
	
.LABEL $label$18
	CALL eosio_assert($9, [9344])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$11), [9153])
	CALL eosio_assert(((int_64)*($3) < (int_64)1980000001), [10658])
	$7 = CALL $220([8337])
	if ( ($7 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9055])
	goto $label$25 
	
.LABEL $label$26
	if ( ($7 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$8 = (int_64)0
	
.LOOP $label$27:
	$9 = *(($7 + [8336]))
	if ( ((($9 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$28
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$27 }
	$10 = ((int_64)$8 << (int_64)8)
	goto $label$23 
	
.LABEL $label$24
	$10 = (int_64)0
	
.LABEL $label$23
	CALL eosio_assert([1], [9295])
	$8 = (uint_64)$10 >> (uint_64)(int_64)8)
	$11 = ((int_64)$10 | (int_64)4)
	$7 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$8 = $10
	$9 = [1]
	$12 = $7
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$8 = $10
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$12 = ($7 + [1])
	$7 = $12
	if ( $9 ){ goto $label$33 }
	$9 = [1]
	$7 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$9 = [0]
	
.LABEL $label$29
	CALL eosio_assert($9, [9344])
	$10 = *($4 + [8])
	CALL eosio_assert(((int_64)$10 == (int_64)$11), [9153])
	$13 = *($4)
	CALL eosio_assert(((int_64)$13 < (int_64)20000001), [10676])
	CALL eosio_assert(((int_64)$5 > (int_64)10079), [10694])
	CALL eosio_assert(CALL $fimport$8($1), [8192])
	$11 = (int_64)0
	$8 = CALL $12((int_64)0)
	*($6 + [304]) = $8
	$14 = *($3)
	$5 = *(($3 + [8]))
	CALL eosio_assert(((int_64)$10 == (int_64)$5), [9364])
	$10 = ((int_64)$13 + (int_64)$14)
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9407])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [9426])
	CALL $15(($6 + [344]), $8)
	CALL eosio_assert(((int_64)$5 == (int_64)*($6 + [352])), [9153])
	if ( ((int_64)*($6 + [344]) >= (int_64)$10) ){ goto $label$34 }
	*((($6 + [104]) + [8])) = $5
	*($6 + [296]) = $5
	*($6 + [104]) = $10
	*($6 + [288]) = $10
	$8 = CALL $18(($6 + [104]))
	*($6 + [304]) = $8
	$11 = *($6 + [319])
	$1 = *($6 + [328])
	
.LABEL $label$34
	CALL eosio_assert(CALL $fimport$8($8), [9261])
	CALL $47($1, $8, $11)
	if ( (CALL $32($8) == 0) ){ goto $label$36 }
	*($6 + [280]) = (int_64)5031813150566690592
	*($6 + [272]) = $8
	*((($7 = CALL _Znwj([16])) + [8])) = *($6 + [280])
	*($7) = *($6 + [272])
	*(($9 = (($6 + [256]) + [8]))) = *(($4 + [8]))
	*(($12 = (($6 + [240]) + [8]))) = *(($3 + [8]))
	*($6 + [256]) = *($4)
	*($6 + [240]) = *($3)
	$10 = *($9)
	*((($6 + [160]) + [8])) = $10
	$5 = *($12)
	*((($6 + [120]) + [8])) = $5
	*((($6 + [344]) + [16])) = $10
	*((($6 + [344]) + [32])) = $5
	$11 = *($6 + [256])
	*((($6 + [8]) + [8])) = $11
	*((($6 + [8]) + [16])) = $10
	$10 = *($6 + [240])
	*(($6 + [32])) = $10
	*((($6 + [8]) + [32])) = $5
	*($6 + [400]) = $7
	$7 = ($7 + [16])
	*($6 + [404]) = $7
	*($6 + [408]) = $7
	*($6 + [344]) = $1
	*($6 + [8]) = $1
	*($6 + [160]) = $11
	*($6 + [120]) = $10
	*($6 + [352]) = $11
	*($6 + [368]) = $10
	CALL $91($8, (int_64)5378043540636893184, ($6 + [400]), ($6 + [8]))
	$7 = *($6 + [400])
	if ( ($7 == 0) ){ goto $label$35 }
	*($6 + [404]) = $7
	CALL _ZdlPv($7)
	goto $label$35 
	
.LABEL $label$36
	*($6 + [280]) = (int_64)5031813150566690592
	*($6 + [272]) = $8
	*((($7 = CALL _Znwj([16])) + [8])) = *($6 + [280])
	*($7) = *($6 + [272])
	*(($9 = (($6 + [224]) + [8]))) = *(($4 + [8]))
	*(($12 = (($6 + [208]) + [8]))) = *(($3 + [8]))
	*($6 + [224]) = *($4)
	*($6 + [208]) = *($3)
	*(($15 = (($6 + [160]) + [8]))) = *($9)
	*(($9 = (($6 + [120]) + [8]))) = *($12)
	*(($12 = (($6 + [336]) + [4]))) = *((($6 + [201]) + [4]))
	*(($16 = (($6 + [336]) + [6]))) = *((($6 + [201]) + [6]))
	*($6 + [400]) = $7
	$7 = ($7 + [16])
	*($6 + [404]) = $7
	*($6 + [408]) = $7
	*($6 + [160]) = *($6 + [224])
	*($6 + [120]) = *($6 + [208])
	*($6 + [336]) = *($6 + [201 align=1])
	$10 = *($15)
	*((($6 + [344]) + [24])) = $10
	$5 = *($9)
	*((($6 + [344]) + [40])) = $5
	*(($6 + [399])) = *($16)
	*(($6 + [397])) = *($12)
	*($6 + [352]) = $1
	*($6 + [344]) = $8
	*($6 + [392]) = [0]
	$11 = *($6 + [160])
	*($6 + [360]) = $11
	$13 = *($6 + [120])
	*($6 + [376]) = $13
	*($6 + [393 align=1]) = *($6 + [336])
	*((($6 + [48]) + [40])) = $5
	*(($6 + [80])) = $13
	*((($6 + [48]) + [24])) = $10
	*((($6 + [48]) + [16])) = $11
	*((($6 + [48]) + [8])) = $1
	*(($6 + [96])) = *($6 + [392])
	*($6 + [48]) = $8
	CALL $92((int_64)6138663577826885632, (int_64)5378043540636893184, ($6 + [400]), ($6 + [48]))
	$7 = *($6 + [400])
	if ( ($7 == 0) ){ goto $label$35 }
	*($6 + [404]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$35
	*($6 + [352]) = (int_64)4154300910593376256
	*($6 + [344]) = (int_64)4154300378675156112
	*((($7 = CALL _Znwj([16])) + [8])) = *($6 + [352])
	*($7) = *($6 + [344])
	$8 = *($6 + [304])
	$9 = ($7 + [16])
	*($6 + [164]) = $9
	*($6 + [160]) = $7
	*($6 + [168]) = $9
	CALL $93((int_64)4154300378675156112, (int_64)4851652232166244352, ($6 + [160]), $8)
	$7 = *($6 + [160])
	if ( ($7 == 0) ){ goto $label$37 }
	*($6 + [164]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$37
	$8 = *($6 + [304])
	*((($6 + [344]) + [32])) = [0]
	*($6 + [360]) = (int_64)-1
	*($6 + [368]) = (int_64)0
	*($6 + [380]) = [0]
	*($6 + [352]) = (int_64)921459758687
	*($6 + [344]) = (int_64)4154300378675156112
	$7 = [0]
	$9 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)5031813150555504640, $8)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$38 }
	$7 = CALL $17(($6 + [344]), $9)
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)($6 + [344])), [8976])
	
.LABEL $label$38
	*($6 + [164]) = $4
	*($6 + [160]) = $3
	*($6 + [168]) = ($6 + [304])
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [9444])
	CALL $131(($6 + [344]), $7, (int_64)4154300378675156112, ($6 + [160]))
	*((($6 + [160]) + [32])) = [0]
	*(($6 + [198])) = [0]
	*($6 + [168]) = (int_64)921459758687
	*($6 + [160]) = (int_64)4154300378675156112
	*($6 + [176]) = (int_64)-1
	*($6 + [184]) = (int_64)0
	*($6 + [196]) = [0]
	*($6 + [124]) = $2
	*($6 + [136]) = $3
	*($6 + [140]) = $4
	*($6 + [120]) = ($6 + [160])
	*($6 + [128]) = ($6 + [304])
	*($6 + [132]) = ($6 + [328])
	*($6 + [144]) = ($6 + [319])
	*($6 + [148]) = ($6 + [320])
	*($6 + [152]) = ($6 + [272])
	CALL $132(($6 + [400]), ($6 + [160]), (int_64)4154300378675156112, ($6 + [120]))
	*($6 + [128]) = [0]
	*($6 + [120]) = (int_64)0
	CALL $99(($6 + [120]), ($6 + [272]))
	CALL $100($0, ($6 + [120]), *($6 + [320]))
	$7 = *($6 + [120])
	if ( ($7 == 0) ){ goto $label$39 }
	*($6 + [124]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$39
	$12 = *($6 + [184])
	if ( ($12 == 0) ){ goto $label$40 }
	$3 = ($6 + [188])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$42 }
	
.LOOP $label$43:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$44 }
	CALL _ZdlPv($9)
	
.LABEL $label$44
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$43 }
	$7 = *(($6 + [184]))
	goto $label$41 
	
.LABEL $label$42
	$7 = $12
	
.LABEL $label$41
	*($3) = $12
	CALL _ZdlPv($7)
	
.LABEL $label$40
	$12 = *($6 + [368])
	if ( ($12 == 0) ){ goto $label$45 }
	$3 = ($6 + [372])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$12) ){ goto $label$47 }
	
.LOOP $label$48:
	$7 = ($7 + [-24])
	$9 = *($7)
	*($7) = [0]
	if ( ($9 == 0) ){ goto $label$49 }
	if ( ((*($9 + [24]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($9 + [32])))
	
.LABEL $label$50
	CALL _ZdlPv($9)
	
.LABEL $label$49
	if ( ((int_32)$12 != (int_32)$7) ){ goto $label$48 }
	$7 = *(($6 + [368]))
	goto $label$46 
	
.LABEL $label$47
	$7 = $12
	
.LABEL $label$46
	*($3) = $12
	CALL _ZdlPv($7)
	
.LABEL $label$45
	$global$0 = ($6 + [416])
}

int_32 .FUNC $225 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10732]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10736])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10732]) = [1]
	$2 = ($2 << [16])
	*([0] + [10736]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10736])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10736]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10732]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10732]) = [1]
	$3 = ($3 << [16])
	*([0] + [10736]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10736])
	
.LABEL $label$10
	*([0] + [10736]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $65 (int_32 $0, int_32 $1)
{
	CALL require_auth((int_64)4154300378675156112)
	CALL $100($0, $1, (int_64)0)
	CALL $3()
	CALL $34()
}

void .FUNC $64 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL require_auth((int_64)4154300378675156112)
	CALL $52($1)
	*(($2 + [88])) = [0]
	*(($2 + [94])) = [0]
	*($2 + [64]) = (int_64)921459758687
	*($2 + [56]) = (int_64)4154300378675156112
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	*($2 + [92]) = [0]
	*($2 + [48]) = [0]
	*($2 + [40]) = (int_64)0
	*($2 + [32]) = ($2 + [56])
	*($2 + [8]) = (int_64)0
	CALL $105(($2 + [24]), ($2 + [32]), ($2 + [8]))
	if ( (*($2 + [28]) == 0) ){ goto $label$1 }
	$3 = (($2 + [40]) + [8])
	$4 = (int_64)1
	
.LOOP $label$2:
	$5 = CALL current_time()
	$6 = *($2 + [28])
	if ( ((uint_64)*($6 + [104]) > (uint_64)((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)) ){ goto $label$3 }
	$7 = *($2 + [44])
	if ( ((uint_32)$7 >= (uint_32)*($3)) ){ goto $label$4 }
	*($7) = *($6)
	*($2 + [44]) = ($7 + [8])
	goto $label$3 
	
.LABEL $label$4
	CALL $106(($2 + [40]), $6)
	
.LABEL $label$3
	CALL $107(($2 + [24]))
	if ( ((uint_64)$4 > (uint_64)(int_64)2) ){ goto $label$1 }
	$4 = ((int_64)$4 + (int_64)1)
	if ( *($2 + [28]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL $100($0, ($2 + [40]), (int_64)0)
	CALL $3()
	CALL $34()
	CALL $15(($2 + [8]), $1)
	$6 = *($2 + [40])
	if ( ($6 == 0) ){ goto $label$5 }
	*($2 + [44]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$3 = *($2 + [80])
	if ( ($3 == 0) ){ goto $label$6 }
	$0 = ($2 + [84])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$9 }
	$6 = *(($2 + [80]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	*($0) = $3
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [96])
}

int_32 .FUNC $67 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [320])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [112]) + [24]))) = (int_64)0
	*(($8 = ($4 + [152]))) = (int_64)0
	*($4 + [120]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [128]) = (int_64)0
	*($4 + [144]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [168]) = [0]
	*($4 + [100]) = $2
	*($4 + [96]) = $2
	*($4 + [104]) = ($2 + $7)
	*($4 + [304]) = ($4 + [96])
	*($4 + [64]) = ($4 + [112])
	CALL $123(($4 + [64]), ($4 + [304]))
	*(($9 = (($4 + [48]) + [8]))) = *($4 + [104])
	*($4 + [48]) = *($4 + [96])
	*(($10 = (($4 + [288]) + [8]))) = *($9)
	*($4 + [288]) = *($4 + [48])
	$9 = *($10)
	*((($4 + [304]) + [8])) = $9
	*((($4 + [64]) + [24])) = $9
	*($4 + [64]) = $0
	*($4 + [72]) = $1
	$0 = *($4 + [288])
	*($4 + [80]) = $0
	*($4 + [304]) = $0
	*(($9 = (($4 + [208]) + [8]))) = *($4 + [120])
	*(($10 = (($4 + [192]) + [8]))) = *($3)
	*(($3 = (($4 + [176]) + [8]))) = *($8)
	*($4 + [208]) = *($4 + [112])
	*($4 + [192]) = *($4 + [128])
	*($4 + [176]) = *($4 + [144])
	$0 = *($4 + [160])
	$8 = *($4 + [168])
	*((($4 + [256]) + [8])) = *($3)
	*((($4 + [240]) + [8])) = *($10)
	*((($4 + [224]) + [8])) = *($9)
	*($4 + [256]) = *($4 + [176])
	*($4 + [240]) = *($4 + [192])
	*($4 + [224]) = *($4 + [208])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$1 = *((($4 + [224]) + [8]))
	*((($4 + [304]) + [8])) = $1
	$11 = *((($4 + [240]) + [8]))
	*((($4 + [288]) + [8])) = $11
	$12 = *((($4 + [256]) + [8]))
	*((($4 + [272]) + [8])) = $12
	*((($4 + [32]) + [8])) = $1
	*((($4 + [16]) + [8])) = $11
	*(($4 + [8])) = $12
	$1 = *($4 + [224])
	*($4 + [304]) = $1
	$11 = *($4 + [240])
	*($4 + [288]) = $11
	*($4 + [32]) = $1
	*($4 + [16]) = $11
	$1 = *($4 + [256])
	*($4) = $1
	*($4 + [272]) = $1
	CALL void $3((int_32 ($4 + [32])), (int_32 ($4 + [16])), (int_32 $4), (int_32 $0), (int_64 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $226($2)
	
.LABEL $label$5
	$global$0 = ($4 + [320])
	return [1]
}

void .FUNC $66 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$6 = ($global$0 - [192])
	$global$0 = $6
	*($6 + [183]) = $5
	*($6 + [184]) = $4
	CALL require_auth((int_64)4154300378675156112)
	$7 = *(($1 + [8]))
	*((($6 + [160]) + [8])) = $7
	$8 = *(($2 + [8]))
	*((($6 + [144]) + [8])) = $8
	$4 = *(($3 + [8]))
	$9 = *($2)
	$10 = *($3)
	$11 = *($1)
	*((($6 + [32]) + [8])) = $7
	*((($6 + [16]) + [8])) = $8
	*((($6 + [128]) + [8])) = $4
	*(($6 + [8])) = $4
	*($6 + [160]) = $11
	*($6 + [128]) = $10
	*($6 + [32]) = $11
	*($6 + [144]) = $9
	*($6 + [16]) = $9
	*($6) = $10
	CALL $51(($6 + [32]), ($6 + [16]), $6)
	*(($6 + [120])) = [0]
	*($6 + [96]) = (int_64)4154300378675156112
	*($6 + [88]) = (int_64)4154300378675156112
	*($6 + [104]) = (int_64)-1
	*($6 + [112]) = (int_64)0
	*($6 + [124]) = [0]
	*($6 + [80]) = ($6 + [88])
	*($6 + [72]) = *($1)
	CALL $90(($6 + [48]), ($6 + [80]), ($6 + [72]))
	$5 = *($6 + [52])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_64)*($6 + [72]) != (int_64)*($5 + [8])) ){ goto $label$3 }
	*($6 + [52]) = $3
	*($6 + [48]) = $2
	*($6 + [56]) = ($6 + [184])
	*($6 + [60]) = ($6 + [183])
	CALL eosio_assert([1], [9444])
	CALL $124(*($6 + [80]), $5, (int_64)4154300378675156112, ($6 + [48]))
	$2 = *($6 + [112])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($6 + [52]) = $1
	*($6 + [56]) = $2
	*($6 + [60]) = $3
	*($6 + [48]) = ($6 + [88])
	*($6 + [64]) = ($6 + [184])
	*($6 + [68]) = ($6 + [183])
	CALL $125(($6 + [72]), ($6 + [88]), (int_64)4154300378675156112, ($6 + [48]))
	$2 = *($6 + [112])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$5 = ($6 + [116])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($1 + [-24])
	$3 = *($1)
	*($1) = [0]
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	$1 = *(($6 + [112]))
	goto $label$4 
	
.LABEL $label$5
	$1 = $2
	
.LABEL $label$4
	*($5) = $2
	CALL _ZdlPv($1)
	$global$0 = ($6 + [192])
	return 
	
.LABEL $label$1
	$global$0 = ($6 + [192])
}

int_32 .FUNC $61 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9050])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $226($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $60 (int_32 $0, int_64 $1)
{
	CALL require_auth((int_64)4154300378675156112)
	CALL $21($1)
}

int_32 .FUNC $63 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $7)
	CALL $108(($4 + [48]), ($4 + [64]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($8)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	*($4 + [104]) = [0]
	*($4 + [96]) = (int_64)0
	$3 = (*($4 + [68]) - *($4 + [64]))
	if ( ($3 == 0) ){ goto $label$5 }
	$8 = int_32($3 >> [3])
	if ( ((uint_32)$8 >= (uint_32)[536870912]) ){ goto $label$4 }
	$3 = CALL _Znwj($3)
	*(($4 + [104])) = ($3 + ($8 << [3]))
	*($4 + [96]) = $3
	*($4 + [100]) = $3
	$9 = *($4 + [64])
	$8 = (*($4 + [68]) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($3, $9, $8)
	*($4 + [100]) = (*($4 + [100]) + $8)
	
.LABEL $label$5
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($3) + $6))
	
.LABEL $label$6
	CALL void $3((int_32 ($4 + [96])), (int_32 $6))
	$5 = *($4 + [96])
	if ( ($5 == 0) ){ goto $label$7 }
	*($4 + [100]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $226($2)
	
.LABEL $label$8
	$2 = *($4 + [64])
	if ( ($2 == 0) ){ goto $label$9 }
	*($4 + [68]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($4 + [112])
	return [1]
	
.LABEL $label$4
	CALL $211(($4 + [96]))
	return (unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth((int_64)4154300378675156112)
	$3 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$3) ){ goto $label$1 }
	*(($2 + [32])) = [0]
	*(($2 + [38])) = [0]
	*($2 + [8]) = (int_64)921459758687
	*($2) = (int_64)4154300378675156112
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	$4 = ($2 + [8])
	$5 = ($1 + [4])
	$6 = ($2 + [24])
	$7 = ($2 + [28])
	$8 = [0]
	$9 = [0]
	$10 = [0]
	
.LOOP $label$2:
	$11 = *(($3 + ($10 << [3])))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	
.LOOP $label$6:
	$3 = ($9 + [-24])
	$12 = *($3)
	if ( ((int_64)*($12) == (int_64)$11) ){ goto $label$5 }
	$9 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($12 + [112]) == (int_32)$2), [8976])
	goto $label$3 
	
.LABEL $label$4
	$12 = [0]
	$3 = CALL db_find_i64(*($2), *($4), (int_64)-6497942746098040832, $11)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$12 = CALL $46($2, $3)
	CALL eosio_assert(((int_32)*($12 + [112]) == (int_32)$2), [8976])
	
.LABEL $label$3
	$3 = ((int_32)$12 != (int_32)[0])
	CALL eosio_assert($3, [10320])
	CALL $110($0, $12)
	CALL eosio_assert($3, [10098])
	CALL eosio_assert($3, [10132])
	$3 = CALL db_next_i64(*($12 + [116]), ($2 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$7 }
	CALL $46($2, $3)
	
.LABEL $label$7
	CALL $111($2, $12)
	$3 = *($1)
	$10 = ($10 + [1])
	if ( ((uint_32)$10 >= (uint_32)int_32((*($5) - $3) >> [3])) ){ goto $label$8 }
	$8 = *($6)
	$9 = *($7)
	goto $label$2 
	
.LABEL $label$8
	$12 = *($2 + [24])
	if ( ($12 == 0) ){ goto $label$1 }
	$8 = ($2 + [28])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$12) ){ goto $label$10 }
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$9 = *($3)
	*($3) = [0]
	if ( ($9 == 0) ){ goto $label$12 }
	CALL _ZdlPv($9)
	
.LABEL $label$12
	if ( ((int_32)$12 != (int_32)$3) ){ goto $label$11 }
	$3 = *(($2 + [24]))
	goto $label$9 
	
.LABEL $label$10
	$3 = $12
	
.LABEL $label$9
	*($8) = $12
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

void .FUNC $1 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [80])
	$global$0 = $1
	*(($2 = ($1 + [32]))) = [0]
	*($1 + [8]) = (int_64)921459758687
	*($1 + [16]) = (int_64)-1
	*($1 + [24]) = (int_64)0
	*($1 + [36]) = [0]
	*($1) = (int_64)4154300378675156112
	CALL eosio_assert(((int_64)CALL $fimport$0() == (int_64)4154300378675156112), [9635])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	*($3) = $0
	$0 = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [8]) = $0
	*($3 + [16]) = ((int_64)$0 + (int_64)86400)
	CALL eosio_assert([1], [9212])
	CALL memcpy(($1 + [48]), $3, [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy((($1 + [48]) | [8]), ($3 + [8]), [8])
	CALL eosio_assert([1], [9212])
	$4 = ($3 + [16])
	CALL memcpy((($1 + [48]) + [16]), $4, [8])
	$0 = *($3)
	*($3 + [28]) = CALL db_store_i64(*($1 + [8]), (int_64)6761214556460023808, (int_64)4154300378675156112, $0, ($1 + [48]), [24])
	if ( (uint_64)($0 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$0 + (int_64)1) : ((uint_64)$0 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$0 = *($3)
	$5 = *(($1 + [8]))
	*($1 + [72]) = *($4)
	*($3 + [32]) = CALL db_idx64_store($5, (int_64)6761214556460023808, (int_64)4154300378675156112, $0, ($1 + [72]))
	*($1 + [72]) = $3
	$0 = *($3)
	*($1 + [48]) = $0
	$6 = *(($3 + [28]))
	*($1 + [44]) = $6
	$7 = ($1 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*($2)) ){ goto $label$4 }
	*($4 + [8]) = $0
	*($4 + [16]) = $6
	*($1 + [72]) = [0]
	*($4) = $3
	*($7) = ($4 + [24])
	$3 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $2(($1 + [24]), ($1 + [72]), ($1 + [48]), ($1 + [44]))
	$3 = *($1 + [72])
	*($1 + [72]) = [0]
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$2 = *($1 + [24])
	if ( ($2 == 0) ){ goto $label$5 }
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$8 }
	$3 = *(($1 + [24]))
	goto $label$6 
	
.LABEL $label$7
	$3 = $2
	
.LABEL $label$6
	*($6) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$global$0 = ($1 + [80])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $199(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $199(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $115(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $87 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL require_auth((int_64)4154300378675156112)
	*(($2 + [48])) = [0]
	*($2 + [16]) = (int_64)4154300378675156112
	*($2 + [32]) = (int_64)-1
	*($2 + [24]) = (int_64)921459758687
	*($2 + [40]) = (int_64)0
	$3 = CALL db_lowerbound_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$4 = ($2 + [24])
	$5 = (int_64)0
	
.LOOP $label$3:
	CALL $101(($2 + [16]), $3)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((uint_64)$5 > (uint_64)$1) ){ goto $label$2 }
	*($2 + [8]) = ($2 + [16])
	*($2 + [12]) = [0]
	CALL $102(($2 + [8]))
	$6 = *($2 + [8])
	$3 = (CASTING uint_32)(uint_64 (uint_64)$6 >> (uint_64)(int_64)32)
	$7 = ((int_32)$3) != (int_32)[0]
	CALL eosio_assert($7), [10098])
	CALL eosio_assert($7, [10132])
	$7 = CALL db_next_i64(*($3 + [36]), ($2 + [56]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	CALL $101((CASTING uint_32)(uint_64 $6), $7)
	
.LABEL $label$4
	CALL $103(($2 + [16]), $3)
	$3 = CALL db_lowerbound_i64(*($2 + [16]), *($4), (int_64)7760153368969871360, (int_64)0)
	if ( ((int_32)$3 > (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$2
	$4 = *($2 + [40])
	if ( ($4 == 0) ){ goto $label$1 }
	$8 = ($2 + [44])
	$3 = *($8)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($3 + [-24])
	$7 = *($3)
	*($3) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	if ( ((*($7 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($7 + [16])))
	
.LABEL $label$9
	CALL _ZdlPv($7)
	
.LABEL $label$8
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($2 + [40]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $4
	
.LABEL $label$5
	*($8) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $86 (int_32 $0, int_64 $1, int_64 $2)
{
	CALL require_auth((int_64)4154300378675156112)
	CALL $52($1)
}

int_32 .FUNC $85 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9050])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $226($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $84 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	CALL require_auth((int_64)4154300378675156112)
	$3 = [0]
	*(($2 + [80])) = [0]
	*(($2 + [86])) = [0]
	*($2 + [48]) = (int_64)4154300378675156112
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	*($2 + [84]) = [0]
	*($2 + [56]) = (int_64)921459758687
	$4 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)-6497942746098040832, $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $46(($2 + [48]), $4)
	CALL eosio_assert(((int_32)*($3 + [112]) == (int_32)($2 + [48])), [8976])
	*($2 + [44]) = $3
	*($2 + [40]) = ($2 + [48])
	$4 = [1]
	goto $label$1 
	
.LABEL $label$2
	*($2 + [44]) = [0]
	*($2 + [40]) = ($2 + [48])
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [10320])
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	*($2 + [8]) = (int_64)921459758687
	*($2) = (int_64)4154300378675156112
	$4 = [0]
	$3 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)5031813150555504640, *($3 + [40]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $17($2, $3)
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$2), [8976])
	
.LABEL $label$3
	*($2 + [88]) = ($2 + [40])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9444])
	CALL $109($2, $4, (int_64)4154300378675156112, ($2 + [88]))
	CALL $110($0, *($2 + [44]))
	$1 = *($2 + [40])
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$3 = ((int_32)$4) != (int_32)[0]
	CALL eosio_assert($3), [10098])
	CALL eosio_assert($3, [10132])
	$3 = CALL db_next_i64(*($4 + [116]), ($2 + [88]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	CALL $46((CASTING uint_32)(uint_64 $1), $3)
	
.LABEL $label$4
	CALL $111(($2 + [48]), $4)
	$0 = *($2 + [24])
	if ( ($0 == 0) ){ goto $label$5 }
	$5 = ($2 + [28])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$8 }
	$4 = *(($2 + [24]))
	goto $label$6 
	
.LABEL $label$7
	$4 = $0
	
.LABEL $label$6
	*($5) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$0 = *($2 + [72])
	if ( ($0 == 0) ){ goto $label$11 }
	$5 = ($2 + [76])
	$4 = *($5)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$15 }
	CALL _ZdlPv($3)
	
.LABEL $label$15
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$14 }
	$4 = *(($2 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$4 = $0
	
.LABEL $label$12
	*($5) = $0
	CALL _ZdlPv($4)
	
.LABEL $label$11
	$global$0 = ($2 + [96])
}

int_32 .FUNC $83 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $226($2)
	
.LABEL $label$6
	$global$0 = ($4 + [32])
	return [1]
}

void .FUNC $82 (int_32 $0)
{
	CALL require_auth((int_64)4154300378675156112)
}

void .FUNC $81 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [64]) = $2
	*($3 + [72]) = $1
	CALL require_auth((int_64)4154300378675156112)
	*(($3 + [56])) = [0]
	*($3 + [24]) = (int_64)4154300378675156112
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	*($3 + [32]) = (int_64)921459758687
	$4 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)-2063328927043551232, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $41(($3 + [24]), $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($3 + [24])), [8976])
	*($3 + [16]) = ($3 + [64])
	CALL eosio_assert([1], [9444])
	CALL $112(($3 + [24]), $4, (int_64)4154300378675156112, ($3 + [16]))
	$5 = *($3 + [48])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($3 + [20]) = ($3 + [64])
	*($3 + [16]) = ($3 + [72])
	CALL $113(($3 + [8]), ($3 + [24]), (int_64)4154300378675156112, ($3 + [16]))
	$5 = *($3 + [48])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($3 + [52])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($3 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($4)
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

void .FUNC $80 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = $1
	CALL require_auth((int_64)4154300378675156112)
	CALL $52($1)
	*(($2 + [48])) = [0]
	*($2 + [24]) = (int_64)921459758687
	*($2 + [16]) = (int_64)4154300378675156112
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	*($2 + [8]) = ($2 + [56])
	CALL $118($2, ($2 + [16]), (int_64)4154300378675156112, ($2 + [8]))
	$3 = *($2 + [40])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($2 + [44])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$6 = *($5)
	*($5) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($2 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $3
	
.LABEL $label$2
	*($4) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$3 = *($0)
	*($1 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [24]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9212])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($2 + [24]), ($1 + [24]), [8])
	$4 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($3 + [8]), (int_64)-5003241104313155584, *(*($0 + [8])), $4, $2, [32])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $149 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [16])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [32])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [48])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [80]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $144 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [112]) == (int_32)$0), [8976])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-6497942746098040832, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $46($0, $4)
	CALL eosio_assert(((int_32)*($5 + [112]) == (int_32)$0), [8976])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $147 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$1 = CALL $220([8337])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9055])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($1 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = $2
	CALL eosio_assert([1], [9295])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$11 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [9344])
	$1 = CALL $220([8337])
	if ( ($1 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9055])
	goto $label$14 
	
.LABEL $label$15
	if ( ($1 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = (int_64)0
	
.LOOP $label$16:
	$3 = *(($1 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$17
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$16 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$2 = (int_64)4
	
.LABEL $label$12
	*($0 + [24]) = (int_64)0
	*(($1 = ($0 + [32]))) = $2
	CALL eosio_assert([1], [9295])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$2 = $4
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$22 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$3 = [0]
	
.LABEL $label$18
	CALL eosio_assert($3, [9344])
	$1 = CALL $220([8337])
	if ( ($1 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9055])
	goto $label$25 
	
.LABEL $label$26
	if ( ($1 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$2 = (int_64)0
	
.LOOP $label$27:
	$3 = *(($1 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$28
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$27 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$2 = (int_64)4
	
.LABEL $label$23
	*($0 + [40]) = (int_64)0
	*(($1 = ($0 + [48]))) = $2
	CALL eosio_assert([1], [9295])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$2 = $4
	$6 = [1]
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$33
	$2 = $4
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$34 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$31 }
	
.LABEL $label$32
	CALL eosio_assert($6, [9344])
	return $0
	
.LABEL $label$30
	CALL eosio_assert([0], [9344])
	return $0
	
.LABEL $label$29
	CALL eosio_assert([0], [9344])
	return $0
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $155(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $141 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	$1 = CALL $220([8337])
	if ( ($1 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9055])
	goto $label$3 
	
.LABEL $label$4
	if ( ($1 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	
.LOOP $label$5:
	$3 = *(($1 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$6
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$5 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$2 = (int_64)4
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($1 = ($0 + [24]))) = $2
	CALL eosio_assert([1], [9295])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$2 = $4
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$11 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$3 = [0]
	
.LABEL $label$7
	CALL eosio_assert($3, [9344])
	*($0 + [48]) = (int_64)0
	*($0 + [40]) = (int_64)0
	$1 = CALL $220([8337])
	if ( ($1 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9055])
	goto $label$14 
	
.LABEL $label$15
	if ( ($1 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = (int_64)0
	
.LOOP $label$16:
	$3 = *(($1 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$17
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$16 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$2 = (int_64)4
	
.LABEL $label$12
	*($0 + [64]) = (int_64)0
	*(($1 = ($0 + [72]))) = $2
	CALL eosio_assert([1], [9295])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$2 = $4
	$3 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$2 = $4
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$22 }
	$3 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$3 = [0]
	
.LABEL $label$18
	CALL eosio_assert($3, [9344])
	$1 = CALL $220([8337])
	if ( ($1 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [9055])
	goto $label$25 
	
.LABEL $label$26
	if ( ($1 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$2 = (int_64)0
	
.LOOP $label$27:
	$3 = *(($1 + [8336]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$28
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$27 }
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$2 = (int_64)4
	
.LABEL $label$23
	*($0 + [80]) = (int_64)0
	*(($1 = ($0 + [88]))) = $2
	CALL eosio_assert([1], [9295])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$4 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$33 }
	$2 = $4
	$6 = [1]
	$3 = $1
	$1 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$33
	$2 = $4
	
.LOOP $label$34:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$3 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $3 ){ goto $label$34 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$31 }
	
.LABEL $label$32
	CALL eosio_assert($6, [9344])
	return $0
	
.LABEL $label$30
	CALL eosio_assert([0], [9344])
	return $0
	
.LABEL $label$29
	CALL eosio_assert([0], [9344])
	return $0
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9212])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9212])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9212])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = *($0)
	CALL $156(*($0 + [4]), $1)
	*($2 + [128]) = ($2 + [112])
	*($2 + [124]) = $2
	*($2 + [120]) = $2
	CALL $157(($2 + [120]), $1)
	$4 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($3 + [8]), (int_64)-6497942746098040832, *(*($0 + [8])), $4, $2, [112])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = ($3 + [8])
	$4 = *($3)
	$0 = *(($0 + [8]))
	$5 = *($0)
	$6 = *($1)
	*($2 + [136]) = *($1 + [8])
	*($1 + [120]) = CALL db_idx64_store($4, (int_64)-6497942746098040832, $5, $6, ($2 + [136]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [136]) = *($1 + [104])
	*(($1 + [124])) = CALL db_idx64_store($5, (int_64)-6497942746098040831, $4, $6, ($2 + [136]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [136]) = *($1 + [48])
	*(($1 + [128])) = CALL db_idx64_store($5, (int_64)-6497942746098040830, $4, $6, ($2 + [136]))
	$global$0 = ($2 + [144])
}

void .FUNC $72 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = $1
	CALL require_auth((int_64)4154300378675156112)
	$3 = [0]
	*(($2 + [48])) = [0]
	*($2 + [16]) = (int_64)4154300378675156112
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	*($2 + [24]) = (int_64)921459758687
	$4 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)4344997574076792832, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $39(($2 + [16]), $4) + [16]) == (int_32)($2 + [16])), [8976])
	goto $label$1 
	
.LABEL $label$2
	$3 = [1]
	
.LABEL $label$1
	CALL eosio_assert($3, [10512])
	*($2 + [8]) = ($2 + [56])
	CALL $121($2, ($2 + [16]), (int_64)4154300378675156112, ($2 + [8]))
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [44])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($2 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($2 + [64])
}

void .FUNC $73 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth((int_64)4154300378675156112)
	*(($2 + [32])) = [0]
	*($2 + [8]) = (int_64)4154300378675156112
	*($2) = (int_64)4154300378675156112
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = [0]
	$4 = CALL db_find_i64((int_64)4154300378675156112, (int_64)4154300378675156112, (int_64)-5003241104313155584, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $11($2, $4)
	CALL eosio_assert(((int_32)*($3 + [32]) == (int_32)$2), [8976])
	
.LABEL $label$1
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [10606])
	CALL eosio_assert($4, [10098])
	CALL eosio_assert($4, [10132])
	$4 = CALL db_next_i64(*($3 + [36]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $11($2, $4)
	
.LABEL $label$2
	CALL $129($2, $3)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [71]) = $2
	CALL require_auth((int_64)4154300378675156112)
	$4 = [0]
	$2 = [0]
	$5 = *($1)
	if ( ((uint_64)((int_64)$5 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$6 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$2 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [8668])
	*(($3 + [56])) = [0]
	*($3 + [32]) = (int_64)4154300378675156112
	*($3 + [24]) = (int_64)4154300378675156112
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	*($3 + [60]) = [0]
	*($3 + [16]) = ($3 + [24])
	*($3 + [8]) = $5
	CALL $90(($3 + [72]), ($3 + [16]), ($3 + [8]))
	$1 = *($3 + [76])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ( $1 ? [0] : ((int_64)*($3 + [8]) == (int_64)*($1 + [8])) )
	
.LABEL $label$6
	$1 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($1, [10590])
	*($3 + [72]) = ($3 + [71])
	CALL eosio_assert($1, [9444])
	CALL $126(*($3 + [16]), $4, (int_64)4154300378675156112, ($3 + [72]))
	$8 = *($3 + [48])
	if ( ($8 == 0) ){ goto $label$7 }
	$4 = ($3 + [52])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$1) ){ goto $label$10 }
	$1 = *(($3 + [48]))
	goto $label$8 
	
.LABEL $label$9
	$1 = $8
	
.LABEL $label$8
	*($4) = $8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [80])
}

int_32 .FUNC $71 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	*($4 + [72]) = [0]
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9050])
	CALL memcpy(($4 + [56]), $2, [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9050])
	CALL memcpy(($4 + [24]), ($2 + [8]), [8])
	*($4 + [64]) = *($4 + [24])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [9050])
	CALL memcpy(($4 + [24]), ($2 + [16]), [1])
	$8 = *($4 + [24])
	*($4 + [72]) = ((int_32)$8 != (int_32)[0])
	*(($4 + [44])) = ($2 + [17])
	*(($4 + [48])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($3 = (($4 + [80]) + [8]))) = *($4 + [64])
	*($4 + [80]) = *($4 + [56])
	*((($4 + [96]) + [8])) = *($3)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$0 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $0
	*((($4 + [8]) + [8])) = $0
	$0 = *($4 + [96])
	*($4 + [8]) = $0
	*($4 + [112]) = $0
	CALL void $3((int_32 ($4 + [8])), (int_32 ((int_32)$8 != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $226($2)
	
.LABEL $label$5
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $76 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $223($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9050])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [9050])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $226($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $77 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$2 = ($global$0 - [432])
	$global$0 = $2
	CALL require_auth((int_64)4154300378675156112)
	CALL $52($1)
	$3 = [0]
	*(($2 + [312])) = [0]
	*($2 + [288]) = (int_64)4154300378675156112
	*($2 + [280]) = (int_64)4154300378675156112
	*($2 + [296]) = (int_64)-1
	*($2 + [304]) = (int_64)0
	*($2 + [316]) = [0]
	*($2 + [272]) = ($2 + [280])
	CALL $90(($2 + [360]), ($2 + [272]), [10312])
	$4 = *($2 + [364])
	if ( ($4 == 0) ){ goto $label$1 }
	$3 = ( $4 ? [0] : ((int_64)*($4 + [8]) == (int_64)1000) )
	
.LABEL $label$1
	if ( (CALL $32($1) == 0) ){ goto $label$3 }
	*($2 + [264]) = (int_64)5031813150566690592
	*($2 + [256]) = $1
	*((($4 = CALL _Znwj([16])) + [8])) = *($2 + [264])
	*($4) = *($2 + [256])
	*(($5 = (($2 + [240]) + [8]))) = *(($3 + [48]))
	*(($6 = (($2 + [224]) + [8]))) = *(($3 + [32]))
	*($2 + [240]) = *($3 + [40])
	*($2 + [224]) = *($3 + [24])
	$7 = *($5)
	*((($2 + [344]) + [8])) = $7
	$8 = *($6)
	*((($2 + [328]) + [8])) = $8
	*((($2 + [360]) + [16])) = $7
	*((($2 + [360]) + [32])) = $8
	$9 = *($2 + [240])
	*((($2 + [56]) + [8])) = $9
	*((($2 + [56]) + [16])) = $7
	$7 = *($2 + [224])
	*((($2 + [56]) + [24])) = $7
	*((($2 + [56]) + [32])) = $8
	*($2 + [416]) = $4
	$4 = ($4 + [16])
	*($2 + [420]) = $4
	*($2 + [424]) = $4
	*($2 + [360]) = $1
	*($2 + [56]) = $1
	*($2 + [344]) = $9
	*($2 + [328]) = $7
	*($2 + [368]) = $9
	*($2 + [384]) = $7
	CALL $91($1, (int_64)5378043540636893184, ($2 + [416]), ($2 + [56]))
	$4 = ($3 + [24])
	$5 = ($3 + [40])
	$3 = *($2 + [416])
	if ( ($3 == 0) ){ goto $label$2 }
	*($2 + [420]) = $3
	CALL _ZdlPv($3)
	goto $label$2 
	
.LABEL $label$3
	*($2 + [264]) = (int_64)5031813150566690592
	*($2 + [256]) = $1
	*((($4 = CALL _Znwj([16])) + [8])) = *($2 + [264])
	*($4) = *($2 + [256])
	*(($5 = (($2 + [208]) + [8]))) = *(($3 + [48]))
	*(($6 = (($2 + [192]) + [8]))) = *(($3 + [32]))
	*($2 + [208]) = *($3 + [40])
	*($2 + [192]) = *($3 + [24])
	*(($10 = (($2 + [344]) + [8]))) = *($5)
	*(($5 = (($2 + [328]) + [8]))) = *($6)
	*(($6 = (($2 + [320]) + [4]))) = *((($2 + [185]) + [4]))
	*(($11 = (($2 + [320]) + [6]))) = *((($2 + [185]) + [6]))
	*($2 + [416]) = $4
	$4 = ($4 + [16])
	*($2 + [420]) = $4
	*($2 + [424]) = $4
	*($2 + [344]) = *($2 + [208])
	*($2 + [328]) = *($2 + [192])
	*($2 + [320]) = *($2 + [185 align=1])
	$7 = *($10)
	*((($2 + [360]) + [24])) = $7
	$8 = *($5)
	*((($2 + [360]) + [40])) = $8
	*(($2 + [415])) = *($11)
	*(($2 + [413])) = *($6)
	*($2 + [368]) = $1
	*($2 + [360]) = $1
	*($2 + [408]) = [0]
	$9 = *($2 + [344])
	*($2 + [376]) = $9
	$12 = *($2 + [328])
	*($2 + [392]) = $12
	*($2 + [409 align=1]) = *($2 + [320])
	*((($2 + [96]) + [40])) = $8
	*((($2 + [96]) + [32])) = $12
	*((($2 + [96]) + [24])) = $7
	*((($2 + [96]) + [16])) = $9
	*((($2 + [96]) + [8])) = $1
	*((($2 + [96]) + [48])) = *($2 + [408])
	*($2 + [96]) = $1
	CALL $92((int_64)6138663577826885632, (int_64)5378043540636893184, ($2 + [416]), ($2 + [96]))
	$4 = ($3 + [24])
	$5 = ($3 + [40])
	$3 = *($2 + [416])
	if ( ($3 == 0) ){ goto $label$2 }
	*($2 + [420]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	*($2 + [264]) = (int_64)5031813150566690592
	*($2 + [256]) = $1
	*((($3 = CALL _Znwj([16])) + [8])) = *($2 + [264])
	*($3) = *($2 + [256])
	*(($6 = (($2 + [168]) + [8]))) = *(($5 + [8]))
	*(($10 = (($2 + [152]) + [8]))) = *(($4 + [8]))
	*($2 + [168]) = *($5)
	*($2 + [152]) = *($4)
	$8 = *($6)
	*((($2 + [344]) + [8])) = $8
	$7 = *($10)
	*((($2 + [328]) + [8])) = $7
	*(($4 = (($2 + [360]) + [24]))) = $8
	*((($2 + [360]) + [40])) = $7
	*($2 + [416]) = $3
	$3 = ($3 + [16])
	*($2 + [420]) = $3
	*($2 + [424]) = $3
	*($2 + [360]) = $1
	*($2 + [368]) = $1
	$9 = *($2 + [168])
	*($2 + [344]) = $9
	$8 = *($2 + [152])
	*($2 + [328]) = $8
	*($2 + [376]) = $9
	*($2 + [392]) = $8
	*((($2 + [8]) + [40])) = $7
	*(($2 + [40])) = $8
	*((($2 + [8]) + [8])) = $1
	*((($2 + [8]) + [24])) = *($4)
	*((($2 + [8]) + [16])) = *($2 + [376])
	*($2 + [8]) = $1
	CALL $104((int_64)6138663577826885632, (int_64)-3111238946495230016, ($2 + [416]), ($2 + [8]))
	$3 = *($2 + [416])
	if ( ($3 == 0) ){ goto $label$4 }
	*($2 + [420]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$5 = *($2 + [304])
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = ($2 + [308])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$8 }
	$3 = *(($2 + [304]))
	goto $label$6 
	
.LABEL $label$7
	$3 = $5
	
.LABEL $label$6
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$global$0 = ($2 + [432])
}

void .FUNC $74 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth((int_64)4154300378675156112)
	*(($2 + [32])) = [0]
	*($2) = (int_64)4154300378675156112
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [8]) = (int_64)921459758687
	$3 = [0]
	$4 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)-4497226457311450768, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $33($2, $4)
	CALL eosio_assert(((int_32)*($3 + [24]) == (int_32)$2), [8976])
	
.LABEL $label$1
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [10437])
	CALL eosio_assert($4, [10098])
	CALL eosio_assert($4, [10132])
	$4 = CALL db_next_i64(*($3 + [28]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $33($2, $4)
	
.LABEL $label$2
	CALL $119($2, $3)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $75 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [64]) = $2
	*($3 + [72]) = $1
	CALL require_auth((int_64)4154300378675156112)
	CALL $52($1)
	*(($3 + [56])) = [0]
	*($3 + [32]) = (int_64)4154300378675156112
	*($3 + [24]) = (int_64)4154300378675156112
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$4 = CALL db_find_i64((int_64)4154300378675156112, (int_64)4154300378675156112, (int_64)-5003241104313155584, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$4 = CALL $11(($3 + [24]), $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($3 + [24])), [8976])
	*($3 + [16]) = ($3 + [64])
	CALL eosio_assert([1], [9444])
	CALL $127(($3 + [24]), $4, (int_64)4154300378675156112, ($3 + [16]))
	$5 = *($3 + [48])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($3 + [20]) = ($3 + [64])
	*($3 + [16]) = ($3 + [72])
	CALL $128(($3 + [8]), ($3 + [24]), (int_64)4154300378675156112, ($3 + [16]))
	$5 = *($3 + [48])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($3 + [52])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	$4 = *(($3 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($4)
	$global$0 = ($3 + [80])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [80])
}

void .FUNC $78 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth((int_64)4154300378675156112)
	*(($2 + [32])) = [0]
	*($2) = (int_64)4154300378675156112
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [8]) = (int_64)921459758687
	$3 = [0]
	$4 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)4344997574076792832, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $39($2, $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$2), [8976])
	
.LABEL $label$1
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [10553])
	CALL eosio_assert($4, [10098])
	CALL eosio_assert($4, [10132])
	$4 = CALL db_next_i64(*($3 + [20]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $39($2, $4)
	
.LABEL $label$2
	CALL $122($2, $3)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $79 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth((int_64)4154300378675156112)
	*(($2 + [32])) = [0]
	*($2) = (int_64)4154300378675156112
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	*($2 + [36]) = [0]
	*($2 + [8]) = (int_64)921459758687
	$3 = [0]
	$4 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)5031813150555504640, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$3 = CALL $17($2, $4)
	CALL eosio_assert(((int_32)*($3 + [136]) == (int_32)$2), [8976])
	
.LABEL $label$1
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [8341])
	CALL eosio_assert((int_64)(*($3 + [8]) == 0), [10482])
	CALL eosio_assert($4, [10098])
	CALL eosio_assert($4, [10132])
	$4 = CALL db_next_i64(*($3 + [140]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $17($2, $4)
	
.LABEL $label$2
	CALL $120($2, $3)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$8
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$6 }
	$3 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$3 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

int_32 .FUNC $223 (int_32 $0)
{
	return CALL $224([10740], $0)
}

void .FUNC $98 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $24($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $146(($4 + [72]), ($4 + [64]))
	CALL $151(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $211(($4 + [8]))
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $211($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	*(($5 = $4) + [64]) = $2
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [9479])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [9525])
	*($5 + [48]) = *($1 + [8])
	*($5 + [56]) = *($1 + [128])
	$6 = *($1)
	*($5 + [40]) = $6
	$7 = *(*($3) + [4])
	CALL eosio_assert(((int_64)*(($7 + [32])) == (int_64)*(($1 + [64]))), [9364])
	$2 = ((int_64)*($1 + [56]) + (int_64)*($7 + [24]))
	*($1 + [56]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9407])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [9426])
	$7 = *(*($3) + [4])
	CALL eosio_assert(((int_64)*(($7 + [48])) == (int_64)*(($1 + [80]))), [9364])
	$2 = ((int_64)*($1 + [72]) + (int_64)*($7 + [40]))
	*($1 + [72]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9407])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [9426])
	CALL $15($5, *(*($3 + [4])))
	*(($1 + [48])) = *(($5 + [8]))
	*($1 + [40]) = *($5)
	*($1 + [128]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9576])
	$3 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [120])
	$2 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $223($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [28]) = $4
	*($5 + [24]) = $4
	*($5 + [32]) = ($4 + $3)
	CALL $153(($5 + [24]), $1)
	CALL db_update_i64(*($1 + [140]), *($5 + [64]), $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $226($4)
	$6 = *($5 + [40])
	
.LABEL $label$4
	$3 = ($0 + [36])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [4]) = $1
	*($5) = $0
	*($5 + [12]) = $1
	*($5 + [8]) = ($5 + [48])
	*($5 + [16]) = ($5 + [40])
	*($5 + [20]) = ($5 + [64])
	*($5 + [72]) = $5
	CALL $154(($5 + [72]), $3, ($3 + [1]))
	$global$0 = ($5 + [80])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$0()), [9635])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([136])
	CALL $141($3)
	*($3 + [112]) = $1
	CALL $142(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [116])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $143(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $96 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [136]) == (int_32)$0), [8976])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5031813150555504640, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $17($0, $4)
	CALL eosio_assert(((int_32)*($5 + [136]) == (int_32)$0), [8976])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $97 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $220($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $206($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $198($0)
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6031111549421092864, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [8976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $31($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-6031111549421092864, $6))
	CALL eosio_assert(((int_32)*($4 + [96]) == (int_32)$7), [8976])
	
.LABEL $label$2
	*(($4 + [104])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $91 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $24(($4 + [52]), [40])
	$7 = *(($4 + [56]))
	$2 = *($4 + [52])
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = $7
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $150(($4 + [72]), ($4 + [64]))
	CALL $151(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $211(($4 + [8]))
}

void .FUNC $92 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $24(($4 + [52]), [49])
	$7 = *(($4 + [56]))
	$2 = *($4 + [52])
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = $7
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $152(($4 + [72]), ($4 + [64]))
	CALL $151(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $211(($4 + [8]))
}

void .FUNC $93 (int_64 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($4 + [56]) = $3
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [8])) = $5
	*($4) = $7
	*($4 + [4]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [4]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [36])) = $6
	*(($4 + [40])) = $5
	*(($4 + [8])) = [0]
	*(($4 + [52])) = [0]
	*($4 + [24]) = $1
	*($4 + [16]) = $0
	*($4 + [32]) = $7
	*($4) = (int_64)0
	*($4 + [44 align=4]) = (int_64)0
	CALL $24(($4 + [44]), [8])
	$7 = *($4 + [44])
	CALL eosio_assert(((int_32)(*(($4 + [48])) - $7) > (int_32)[7]), [9212])
	CALL memcpy($7, ($4 + [56]), [8])
	CALL $151(($4 + [64]), ($4 + [16]))
	$7 = *($4 + [64])
	CALL send_inline($7, (*($4 + [68]) - $7))
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [68]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [44])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [48])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [36])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [4]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $211($4)
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9212])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9212])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $139($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9212])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9212])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [16])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [48])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($0 + [56]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	*(($5 = $4) + [64]) = $2
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [9479])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [9525])
	*($5 + [48]) = *($1 + [8])
	*($5 + [56]) = *($1 + [128])
	$6 = *($1)
	*($5 + [40]) = $6
	$7 = *($3)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [64]))), [9364])
	$2 = ((int_64)*($1 + [56]) + (int_64)*($7))
	*($1 + [56]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9407])
	CALL eosio_assert(((int_64)*($1 + [56]) < (int_64)4611686018427387904), [9426])
	$7 = *($3 + [4])
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [80]))), [9364])
	$2 = ((int_64)*($1 + [72]) + (int_64)*($7))
	*($1 + [72]) = $2
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [9407])
	CALL eosio_assert(((int_64)*($1 + [72]) < (int_64)4611686018427387904), [9426])
	CALL $15($5, *(*($3 + [8])))
	*(($1 + [48])) = *(($5 + [8]))
	*($1 + [40]) = *($5)
	*($1 + [128]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9576])
	$3 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [120])
	$2 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $223($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [28]) = $4
	*($5 + [24]) = $4
	*($5 + [32]) = ($4 + $3)
	CALL $153(($5 + [24]), $1)
	CALL db_update_i64(*($1 + [140]), *($5 + [64]), $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $226($4)
	$6 = *($5 + [40])
	
.LABEL $label$4
	$3 = ($0 + [36])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [4]) = $1
	*($5) = $0
	*($5 + [12]) = $1
	*($5 + [8]) = ($5 + [48])
	*($5 + [16]) = ($5 + [40])
	*($5 + [20]) = ($5 + [64])
	*($5 + [72]) = $5
	CALL $186(($5 + [72]), $3, ($3 + [1]))
	$global$0 = ($5 + [80])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$0()), [9635])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([136])
	CALL $141($3)
	*($3 + [112]) = $1
	CALL $185(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [116])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $143(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9050])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9050])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $134(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9212])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9212])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9212])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9212])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9212])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9212])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9212])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $139(CALL $140($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $213 (int_32 $0)
{
}

int_32 .FUNC $208 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $207($0, $1, $2, CALL $220($2))
}

void .FUNC $209 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $203(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $218(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8694], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $203(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $203(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $203 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $204($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $200 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $201($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $201 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $206 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $201($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $207 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $201($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

void .FUNC $204 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $205 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $220($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $201($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $181 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [100]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9792])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6031111549421092864)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9738])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9738])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $31(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [10162])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [10207])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10257])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $128 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$0()), [9635])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [32]) = $1
	CALL $182(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $183(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9050])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9050])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9050])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [32]) = [-1]
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $2(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8800])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8905])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8838])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8905])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($0 + [32]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9050])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [40])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($0 + [48]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9050])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [56]) = ((int_32)*($2 + [8]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10162])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [10207])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10257])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $121 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$0()), [9635])
	*(($5 = CALL _Znwj([32])) + [16]) = $1
	*($5) = (int_64)0
	*($5) = *(*($3))
	*($5 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9212])
	CALL memcpy(($4 + [16]), $5, [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy((($4 + [16]) | [8]), ($5 + [8]), [8])
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)4344997574076792832, $2, $6, ($4 + [16]), [16])
	*($5 + [20]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [8]) = $5
	$6 = *($5)
	*($4 + [16]) = $6
	*($4 + [4]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [8]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $177(($1 + [24]), ($4 + [8]), ($4 + [16]), ($4 + [4]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [8])
	*($4 + [8]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [32])
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [10162])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [10207])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10257])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($4 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$12 }
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$13
	CALL _ZdlPv($6)
	
.LABEL $label$12
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [140]))
	$6 = *(($1 + [144]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5031813150555504640, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$6 = *(($1 + [148]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$17 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5031813150555504641, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$16 }
	
.LABEL $label$17
	CALL db_idx64_remove($6)
	
.LABEL $label$16
	$global$0 = ($2 + [16])
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $126 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9479])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [9525])
	*($4 + [120]) = *($1 + [8])
	*($1 + [72]) = *(*($3))
	$5 = *($1)
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9576])
	*($4 + [112]) = ($4 + [96])
	*($4 + [108]) = $4
	*($4 + [104]) = $4
	CALL $180(($4 + [104]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $4, [96])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [136]) = *(($1 + [8]))
	if ( (CALL $219(($4 + [120]), ($4 + [136]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [104])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6031111549421092864, ($4 + [128]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [136]))
	
.LABEL $label$2
	$global$0 = ($4 + [144])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$0()), [9635])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([112])
	CALL $178($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [100])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $149(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [144])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [96]) == (int_32)$0), [9479])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [9525])
	$5 = *($3)
	*(($1 + [32])) = *(($5 + [8]))
	*($4 + [120]) = *($1 + [8])
	*($1 + [24]) = *($5)
	$5 = *($3 + [4])
	*($1 + [40]) = *($5)
	*(($1 + [48])) = *(($5 + [8]))
	$6 = *(*($3 + [8]))
	*($1 + [64]) = *(*($3 + [12]))
	*($1 + [56]) = $6
	$6 = *($1)
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9576])
	*($4 + [112]) = ($4 + [96])
	*($4 + [108]) = $4
	*($4 + [104]) = $4
	CALL $180(($4 + [104]), $1)
	CALL db_update_i64(*($1 + [100]), $2, $4, [96])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [136]) = *(($1 + [8]))
	if ( (CALL $219(($4 + [120]), ($4 + [136]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [104])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6031111549421092864, ($4 + [128]), $6)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [136]))
	
.LABEL $label$2
	$global$0 = ($4 + [144])
}

int_32 .FUNC $14 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10132])
	$2 = *($0 + [4])
	$3 = *($2 + [144])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)5031813150555504640, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [144]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$6), [8976])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $17($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)5031813150555504640, $5))
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$6), [8976])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [144])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = CALL $220([8337])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9055])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [8336]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9100])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	*(($2 + [40])) = [0]
	*($2 + [16]) = $1
	*($2 + [8]) = (int_64)6138663591592764928
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = CALL $16(($2 + [8]), $4, [8957])
	*($0) = *($3)
	*(($0 + [8])) = *(($3 + [8]))
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$6 = ($2 + [36])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$10 }
	$3 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$3 = $0
	
.LABEL $label$8
	*($6) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$7
	$global$0 = ($2 + [48])
}

int_32 .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8976])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $133($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8976])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([152])
	$6 = CALL $170($5)
	*($5 + [136]) = $0
	CALL $176(($3 + [32]), $6)
	*($5 + [140]) = $1
	*($5 + [144 align=4]) = (int_64)-1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $172(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_64 .FUNC $10 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [16]) = (int_64)4154300378675156112
	*($1 + [8]) = (int_64)4154300378675156112
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	$2 = CALL db_find_i64((int_64)4154300378675156112, (int_64)4154300378675156112, (int_64)-5003241104313155584, $0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $11(($1 + [8]), $2)
	CALL eosio_assert(((int_32)*($2 + [32]) == (int_32)($1 + [8])), [8976])
	$0 = *($2 + [8])
	
.LABEL $label$1
	CALL eosio_assert(CALL $fimport$8($0), [8218])
	$3 = *($1 + [32])
	if ( ($3 == 0) ){ goto $label$2 }
	$4 = ($1 + [36])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$6 }
	CALL _ZdlPv($5)
	
.LABEL $label$6
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($1 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$2 = $3
	
.LABEL $label$3
	*($4) = $3
	CALL _ZdlPv($2)
	
.LABEL $label$2
	$global$0 = ($1 + [48])
	return $0
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [32]) = $0
	CALL $184(($3 + [32]), $5)
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $183(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_64 .FUNC $12 (int_64 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [64])
	$global$0 = $1
	*(($1 + [48])) = [0]
	*($1 + [24]) = (int_64)921459758687
	*($1 + [16]) = (int_64)4154300378675156112
	*($1 + [32]) = (int_64)-1
	$2 = (int_64)0
	*($1 + [40]) = (int_64)0
	*($1 + [52]) = [0]
	*($1 + [8]) = ($1 + [16])
	*($1 + [56]) = (int_64)0
	CALL $13($1, ($1 + [8]), ($1 + [56]))
	$3 = *($1 + [4])
	if ( ($3 == 0) ){ goto $label$4 }
	
.LOOP $label$5:
	if ( ((int_64)*($3 + [8]) != (int_64)1) ){ goto $label$6 }
	if ( ((int_64)*($3 + [16]) == (int_64)$0) ){ goto $label$3 }
	CALL $14($1)
	$3 = *($1 + [4])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $14($1)
	$3 = *($1 + [4])
	if ( $3 ){ goto $label$5 }
	
.LABEL $label$4
	$4 = *($1 + [40])
	if ( ($4 == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$2 = *($3)
	$4 = *($1 + [40])
	if ( $4 ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($1 + [64])
	return $2
	
.LABEL $label$1
	$5 = ($1 + [44])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($1 + [40]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $4
	
.LABEL $label$7
	*($5) = $4
	CALL _ZdlPv($3)
	$global$0 = ($1 + [64])
	return $2
}

void .FUNC $13 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)5031813150555504640, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$7), [8976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $17($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)5031813150555504640, $6))
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$7), [8976])
	
.LABEL $label$2
	*(($4 + [144])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = *($0)
	CALL $187(*($0 + [4]), $1)
	*($2 + [128]) = ($2 + [112])
	*($2 + [124]) = $2
	*($2 + [120]) = $2
	CALL $157(($2 + [120]), $1)
	$4 = *($1)
	*($1 + [116]) = CALL db_store_i64(*($3 + [8]), (int_64)-6497942746098040832, *(*($0 + [8])), $4, $2, [112])
	if ( (uint_64)($4 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = ($3 + [8])
	$4 = *($3)
	$0 = *(($0 + [8]))
	$5 = *($0)
	$6 = *($1)
	*($2 + [136]) = *($1 + [8])
	*($1 + [120]) = CALL db_idx64_store($4, (int_64)-6497942746098040832, $5, $6, ($2 + [136]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [136]) = *($1 + [104])
	*(($1 + [124])) = CALL db_idx64_store($5, (int_64)-6497942746098040831, $4, $6, ($2 + [136]))
	$4 = *($0)
	$5 = *($3)
	$6 = *($1)
	*($2 + [136]) = *($1 + [48])
	*(($1 + [128])) = CALL db_idx64_store($5, (int_64)-6497942746098040830, $4, $6, ($2 + [136]))
	$global$0 = ($2 + [144])
}

int_64 .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [80])
	$global$0 = $1
	*(($1 + [72])) = [0]
	*($1 + [48]) = (int_64)921459758687
	*($1 + [40]) = (int_64)4154300378675156112
	*($1 + [56]) = (int_64)-1
	$2 = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [76]) = [0]
	*($1 + [32]) = ($1 + [40])
	*($1 + [8]) = (int_64)0
	CALL $13(($1 + [24]), ($1 + [32]), ($1 + [8]))
	$3 = *($1 + [28])
	if ( ($3 == 0) ){ goto $label$4 }
	$2 = *($0)
	$4 = *($0 + [8])
	$0 = ($1 + [16])
	
.LOOP $label$5:
	CALL $15(($1 + [8]), *($3))
	if ( ((int_64)*(*($1 + [28]) + [16]) != (int_64)0) ){ goto $label$6 }
	CALL eosio_assert(((int_64)*($0) == (int_64)$4), [9153])
	if ( ((int_64)*($1 + [8]) >= (int_64)$2) ){ goto $label$3 }
	
.LABEL $label$6
	CALL $14(($1 + [24]))
	$3 = *($1 + [28])
	if ( $3 ){ goto $label$5 }
	$2 = (int_64)0
	
.LABEL $label$4
	$5 = *($1 + [64])
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$2 = *(*($1 + [28]))
	$5 = *($1 + [64])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$6 = ($1 + [68])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	if ( ((*($0 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($0 + [32])))
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($1 + [64]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($1 + [80])
	return $2
}

void .FUNC $19 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = (int_64)4154300378675156112
	*($3 + [8]) = (int_64)4154300378675156112
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$4 = *($2)
	$5 = CALL db_find_i64((int_64)4154300378675156112, (int_64)4154300378675156112, (int_64)5455799419163115520, $1)
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$4 }
	$5 = CALL $20(($3 + [8]), $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($3 + [8])), [8976])
	*(($0 + [8])) = *(($2 + [8]))
	$1 = ((uint_64)((int_64)*($5 + [8]) * (int_64)$4) / (uint_64)(int_64)100)
	*($0) = $1
	*($2) = $1
	$5 = *($3 + [32])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [36])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$5:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$5 }
	$2 = *(($3 + [32]))
	goto $label$1 
	
.LABEL $label$4
	$1 = ((uint_64)((int_64)$4 * (int_64)90) / (uint_64)(int_64)100)
	*($0) = $1
	*(($0 + [8])) = *(($2 + [8]))
	*($2) = $1
	
.LABEL $label$3
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$2
	$2 = $5
	
.LABEL $label$1
	*($6) = $5
	CALL _ZdlPv($2)
	$global$0 = ($3 + [48])
}

int_32 .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9050])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $187 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-6497942746098040832, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $46($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $158(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [9686])
	$4 = *(($3 + [16]))
	*($1 + [8]) = (int_64)4154300378675156112
	*($1) = $4
	$3 = *($0 + [4])
	*($1 + [16]) = *($3)
	*(($1 + [24])) = *(($3 + [8]))
	*($1 + [40]) = *(*($0 + [8]))
	*($1 + [48]) = *(*($0 + [12]))
	*($1 + [56]) = (int_64)-1
	$3 = *($0 + [16])
	*(($1 + [72])) = *(($3 + [8]))
	*($1 + [64]) = *($3)
	$3 = *($0 + [20])
	*($1 + [80]) = *($3)
	*(($1 + [88])) = *(($3 + [8]))
	*($1 + [32]) = *(*($0 + [24]))
	*($1 + [96]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$4 = CALL current_time()
	*($1 + [104]) = ((int_64)((int_64)*(*($0 + [28])) * (int_64)60) + (int_64)((int_64)((uint_64)$4 / (uint_64)(int_64)1000000) & (int_64)4294967295))
	*(*($0 + [32])) = *($1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $218 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $214([25], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $186 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $219(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [144])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)5031813150555504640, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [144]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [128])
	if ( (CALL $219((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [148]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)5031813150555504641, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [148])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [16]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [32]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = *(($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [9212])
	CALL memcpy(*($0 + [4]), ($1 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $199($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $199(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$0()), [9635])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([152])
	CALL $170($3)
	*($3 + [136]) = $1
	CALL $171(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [140])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $172(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($1 + [32])))
	
.LABEL $label$4
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [10162])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [10207])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10257])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $161($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $202($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $202($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $198($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9479])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [9525])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	*($1 + [16]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9576])
	CALL eosio_assert([1], [9212])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [9212])
	CALL memcpy(($4 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$0()), [9635])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [32]) = $1
	*($3) = (int_64)0
	CALL $167(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $168(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($2 + [72])) = [0]
	*($2 + [64]) = (int_64)0
	$3 = CALL $220([10345])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*($2 + [64]) = ($3 << [1])
	$4 = (($2 + [64]) | [1])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2 + [64]) = ($5 | [1])
	*($2 + [72]) = $4
	*($2 + [68]) = $3
	
.LABEL $label$9
	CALL memcpy($4, [10345], $3)
	
.LABEL $label$8
	$5 = [0]
	*(($4 + $3)) = [0]
	$6 = *($1 + [8])
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$14 }
	$4 = *([0] + [9840])
	
.LOOP $label$16:
	*((($2 + [8]) + ($3 = $5))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$3 == (int_32)[12]) )))))
	$5 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[11]) ){ goto $label$15 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$16 }
	
.LABEL $label$15
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$13 }
	*($2 + [48]) = ($5 << [1])
	$4 = (($2 + [48]) | [1])
	goto $label$12 
	
.LABEL $label$14
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	*($2 + [48]) = [0]
	$3 = (($2 + [48]) | [1])
	$5 = $3
	goto $label$11 
	
.LABEL $label$13
	$7 = (($5 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($2 + [48]) = ($7 | [1])
	*($2 + [56]) = $4
	*($2 + [52]) = $5
	
.LABEL $label$12
	$7 = ($3 + [1])
	$3 = [0]
	
.LOOP $label$17:
	*(($4 + $3)) = *((($2 + [8]) + $3))
	$3 = ($3 + [1])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$17 }
	$5 = ($4 + $5)
	$3 = (($2 + [48]) | [1])
	
.LABEL $label$11
	*($5) = [0]
	$5 = *($2 + [48])
	$4 = ($5 & [1])
	CALL $206(($2 + [64]), ( *($2 + [56]) ? $3 : $4 ), ( *($2 + [52]) ? uint_32($5 >> [1]) : $4 ))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($2 + [56])))
	
.LABEL $label$18
	$6 = *($1 + [40])
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$22 }
	$5 = [0]
	$4 = *([0] + [9840])
	
.LOOP $label$24:
	*((($2 + [8]) + ($3 = $5))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$3 == (int_32)[12]) )))))
	$5 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[11]) ){ goto $label$23 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$24 }
	
.LABEL $label$23
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$21 }
	*($2 + [48]) = ($5 << [1])
	$4 = (($2 + [48]) | [1])
	goto $label$20 
	
.LABEL $label$22
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	*($2 + [48]) = [0]
	$3 = (($2 + [48]) | [1])
	goto $label$19 
	
.LABEL $label$21
	$7 = (($5 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($2 + [48]) = ($7 | [1])
	*($2 + [56]) = $4
	*($2 + [52]) = $5
	
.LABEL $label$20
	$7 = ($3 + [1])
	$3 = [0]
	
.LOOP $label$25:
	*(($4 + $3)) = *((($2 + [8]) + $3))
	$3 = ($3 + [1])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$25 }
	$3 = ($4 + $5)
	
.LABEL $label$19
	*($3) = [0]
	$3 = CALL $208(($2 + [48]), [0], [10346])
	$4 = ($3 + [8])
	*(($5 = (($2 + [8]) + [8]))) = *($4)
	*($2 + [8]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = *($2 + [8])
	$4 = ($3 & [1])
	CALL $206(($2 + [64]), ( *($5) ? (($2 + [8]) | [1]) : $4 ), ( *($2 + [12]) ? uint_32($3 >> [1]) : $4 ))
	if ( (*($2 + [8]) & [1]) ){ goto $label$27 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$26 }
	goto $label$6 
	
.LABEL $label$27
	CALL _ZdlPv(*($5))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$26
	CALL _ZdlPv(*($2 + [56]))
	$8 = (int_64)0
	$6 = *($1 + [48])
	if ( ((int_64)$6 != (int_64)0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	CALL $198(($2 + [64]))
	
.LABEL $label$6
	$8 = (int_64)0
	$6 = *($1 + [48])
	if ( ((int_64)$6 == (int_64)0) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = [0]
	$4 = *([0] + [9840])
	
.LOOP $label$29:
	*((($2 + [8]) + ($3 = $5))) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$6 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$3 == (int_32)[12]) )))))
	$5 = ($3 + [1])
	if ( ((uint_32)$3 > (uint_32)[11]) ){ goto $label$28 }
	$6 = ((int_64)$6 << (int_64)5)
	if ( ((int_64)$6 != (int_64)$8) ){ goto $label$29 }
	
.LABEL $label$28
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$3 }
	*($2 + [48]) = ($5 << [1])
	$4 = (($2 + [48]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($2 + [56])) = [0]
	*($2 + [48]) = $8
	*($2 + [48]) = [0]
	$3 = (($2 + [48]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$7 = (($5 + [16]) & [-16])
	$4 = CALL _Znwj($7)
	*($2 + [48]) = ($7 | [1])
	*($2 + [56]) = $4
	*($2 + [52]) = $5
	
.LABEL $label$2
	$7 = ($3 + [1])
	$3 = [0]
	
.LOOP $label$30:
	*(($4 + $3)) = *((($2 + [8]) + $3))
	$3 = ($3 + [1])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$30 }
	$3 = ($4 + $5)
	
.LABEL $label$1
	*($3) = [0]
	$3 = CALL $208(($2 + [48]), [0], [10346])
	$4 = ($3 + [8])
	*(($5 = (($2 + [8]) + [8]))) = *($4)
	*($2 + [8]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = *($2 + [8])
	$4 = ($3 & [1])
	CALL $206(($2 + [64]), ( *($5) ? (($2 + [8]) | [1]) : $4 ), ( *($2 + [12]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$31
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*($2 + [56]))
	
.LABEL $label$32
	CALL $210(($2 + [48]), *($1 + [56]))
	$3 = CALL $208(($2 + [48]), [0], [10346])
	$4 = ($3 + [8])
	*(($5 = (($2 + [8]) + [8]))) = *($4)
	*($2 + [8]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = *($2 + [8])
	$4 = ($3 & [1])
	CALL $206(($2 + [64]), ( *($5) ? (($2 + [8]) | [1]) : $4 ), ( *($2 + [12]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$33
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($2 + [56]))
	
.LABEL $label$34
	CALL $209(($2 + [48]), *($1 + [16]))
	$3 = CALL $208(($2 + [48]), [0], [10346])
	$4 = ($3 + [8])
	*(($5 = (($2 + [8]) + [8]))) = *($4)
	*($2 + [8]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = *($2 + [8])
	$4 = ($3 & [1])
	CALL $206(($2 + [64]), ( *($5) ? (($2 + [8]) | [1]) : $4 ), ( *($2 + [12]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$35
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($2 + [56]))
	
.LABEL $label$36
	CALL $205(($2 + [64]), ( [10348] ? [10354] : ((int_64)*($1 + [32]) == (int_64)1) ))
	CALL $209(($2 + [48]), *($1 + [64]))
	$3 = CALL $208(($2 + [48]), [0], [10346])
	$4 = ($3 + [8])
	*(($5 = (($2 + [8]) + [8]))) = *($4)
	*($2 + [8]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = *($2 + [8])
	$4 = ($3 & [1])
	CALL $206(($2 + [64]), ( *($5) ? (($2 + [8]) | [1]) : $4 ), ( *($2 + [12]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$37 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$37
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*($2 + [56]))
	
.LABEL $label$38
	CALL $209(($2 + [48]), *($1 + [80]))
	$3 = CALL $208(($2 + [48]), [0], [10346])
	$4 = ($3 + [8])
	*(($5 = (($2 + [8]) + [8]))) = *($4)
	*($2 + [8]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = *($2 + [8])
	$4 = ($3 & [1])
	CALL $206(($2 + [64]), ( *($5) ? (($2 + [8]) | [1]) : $4 ), ( *($2 + [12]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$39
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($2 + [56]))
	
.LABEL $label$40
	CALL $210(($2 + [48]), *($1 + [96]))
	$3 = CALL $208(($2 + [48]), [0], [10346])
	$4 = ($3 + [8])
	*(($5 = (($2 + [8]) + [8]))) = *($4)
	*($2 + [8]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = *($2 + [8])
	$4 = ($3 & [1])
	CALL $206(($2 + [64]), ( *($5) ? (($2 + [8]) | [1]) : $4 ), ( *($2 + [12]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$41
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*($2 + [56]))
	
.LABEL $label$42
	CALL $210(($2 + [48]), *($1 + [104]))
	$3 = CALL $208(($2 + [48]), [0], [10346])
	$4 = ($3 + [8])
	*(($5 = (($2 + [8]) + [8]))) = *($4)
	*($2 + [8]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = *($2 + [8])
	$4 = ($3 & [1])
	CALL $206(($2 + [64]), ( *($5) ? (($2 + [8]) | [1]) : $4 ), ( *($2 + [12]) ? uint_32($3 >> [1]) : $4 ))
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$43 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$43
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*($2 + [56]))
	
.LABEL $label$44
	*(($2 + [40])) = [0]
	*($2 + [16]) = (int_64)921459758687
	*($2 + [8]) = (int_64)4154300378675156112
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [52]) = ($2 + [64])
	*($2 + [48]) = ($2 + [8])
	CALL $162($2, ($2 + [8]), (int_64)4154300378675156112, ($2 + [48]))
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$45 }
	$7 = ($2 + [36])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$47 }
	
.LOOP $label$48:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$49 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$50
	CALL _ZdlPv($5)
	
.LABEL $label$49
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$48 }
	$3 = *(($2 + [32]))
	goto $label$46 
	
.LABEL $label$47
	$3 = $4
	
.LABEL $label$46
	*($7) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$45
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$51 }
	CALL _ZdlPv(*($2 + [72]))
	
.LABEL $label$51
	$global$0 = ($2 + [80])
	(unreachable)
}

void .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [112]) == (int_32)$0), [10162])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [10207])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10257])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [116]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $166(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$0()), [9635])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	*($3) = (int_64)0
	CALL $174(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $175(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [10162])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [10207])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10257])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $135($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $24($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $136($2, $1)
	CALL $138(CALL $137(CALL $137($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$1 = ($global$0 - [176])
	$global$0 = $1
	*((($1 + [136]) + [32])) = [0]
	*($1 + [152]) = (int_64)-1
	*($1 + [160]) = (int_64)0
	*($1 + [172]) = [0]
	*($1 + [144]) = (int_64)921459758687
	*($1 + [136]) = (int_64)4154300378675156112
	$2 = [0]
	$3 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)5031813150555504640, $0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $17(($1 + [136]), $3)
	CALL eosio_assert(((int_32)*($2 + [136]) == (int_32)($1 + [136])), [8976])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [8341])
	$0 = CALL current_time()
	*((($1 + [72]) + [28])) = (int_64)0
	*(($4 = ($1 + [116]))) = (int_64)0
	*(($1 + [124])) = (int_64)0
	*($1 + [84]) = [0]
	*($1 + [88]) = [0]
	*($1 + [92 align=4]) = (int_64)0
	*($1 + [108 align=4]) = (int_64)0
	*($1 + [72]) = ((CASTING uint_32)(uint_64 ((uint_64)$0 / (uint_64)(int_64)1000000)) + [60])
	*($1 + [68]) = [0]
	*($1 + [64]) = ($1 + [136])
	$5 = (($1 + [72]) + [36])
	$6 = (($1 + [16]) + [28])
	$7 = ($1 + [8])
	$8 = ($2 + [16])
	$9 = ($1 + [40])
	$10 = ($1 + [36])
	$11 = (($1 + [16]) + [32])
	$12 = (($1 + [72]) + [40])
	
.LOOP $label$2:
	$3 = [0]
	$13 = CALL db_lowerbound_i64(*($1 + [136]), *((($1 + [136]) + [8])), (int_64)5031813150555504640, (int_64)0)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$3 }
	$3 = CALL $17(($1 + [136]), $13)
	
.LABEL $label$3
	if ( ((int_32)*($1 + [68]) == (int_32)$3) ){ goto $label$4 }
	CALL $22(($1 + [64]))
	$3 = *($1 + [68])
	if ( ((int_64)*($3 + [16]) != (int_64)*($8)) ){ goto $label$2 }
	if ( ((int_64)*($3) != (int_64)*($2)) ){ goto $label$8 }
	*($1 + [16]) = ($1 + [64])
	CALL eosio_assert([1], [9444])
	CALL $23(($1 + [136]), $3, ($1 + [16]))
	*(($13 = (($1 + [16]) + [16]))) = (int_64)0
	*($9) = [0]
	$3 = *($1 + [68])
	*($7) = *($3 + [16])
	$0 = *($3)
	*((($1 + [16]) + [8])) = (int_64)-4813665582895333376
	*($1) = $0
	*($1 + [16]) = (int_64)4154300378675156112
	$3 = CALL _Znwj([16])
	*($13) = $3
	*($3) = (int_64)4154300378675156112
	*($3 + [8]) = (int_64)4154300910593376256
	*($6) = (int_64)0
	*((($1 + [16]) + [36])) = [0]
	$3 = ($3 + [16])
	*($9) = $3
	*($10) = $3
	CALL $24($6, [16])
	$3 = *($6)
	$14 = (*($11) - $3)
	CALL eosio_assert(((int_32)$14 > (int_32)[7]), [9212])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($14 + [-8]) > (int_32)[7]), [9212])
	CALL memcpy(($3 + [8]), $7, [8])
	$3 = *($12)
	if ( ((uint_32)$3 >= (uint_32)*($4)) ){ goto $label$7 }
	CALL $25($3, ($1 + [16]))
	*($12) = (*($12) + [40])
	$3 = *($6)
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	if ( (int_64)(*($3 + [8]) == 0) ){ goto $label$2 }
	*($1 + [16]) = ($1 + [64])
	CALL eosio_assert([1], [9444])
	CALL $26(($1 + [136]), $3, ($1 + [16]))
	goto $label$2 
	
.LABEL $label$7
	CALL $27($5, ($1 + [16]))
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	*($11) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($13)
	if ( ($3 == 0) ){ goto $label$2 }
	*($10) = $3
	CALL _ZdlPv($3)
	goto $label$2 
	
.LABEL $label$4
	$0 = CALL current_time()
	*($1 + [24]) = (int_64)4154300378675156112
	*($1 + [16]) = $0
	CALL $28($1, ($1 + [72]))
	$3 = *($1)
	CALL send_deferred(($1 + [16]), (int_64)4154300378675156112, $3, (*($1 + [4]) - $3), [1])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$9 }
	*($1 + [4]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$9
	CALL $29(($1 + [72]))
	$8 = *($1 + [160])
	if ( ($8 == 0) ){ goto $label$10 }
	$6 = ($1 + [164])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$12 }
	
.LOOP $label$13:
	$3 = ($3 + [-24])
	$13 = *($3)
	*($3) = [0]
	if ( ($13 == 0) ){ goto $label$14 }
	if ( ((*($13 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($13 + [32])))
	
.LABEL $label$15
	CALL _ZdlPv($13)
	
.LABEL $label$14
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$13 }
	$3 = *(($1 + [160]))
	goto $label$11 
	
.LABEL $label$12
	$3 = $8
	
.LABEL $label$11
	*($6) = $8
	CALL _ZdlPv($3)
	
.LABEL $label$10
	$global$0 = ($1 + [176])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9050])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9050])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $188(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [9479])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [9525])
	$4 = ($1 + [8])
	$5 = *($4)
	*($4) = (int_64)1
	*(($4 = $3)) = $5
	$6 = ($1 + [128])
	*($4 + [8]) = *($6)
	$7 = *($1)
	CALL $15(($4 + [32]), *(*(*($2) + [4])))
	*(($1 + [48])) = *((($4 + [32]) + [8]))
	*($1 + [40]) = *($4 + [32])
	*($6) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9576])
	$2 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($6 + [120])
	$5 = (CASTING uint_64)(uint_32 $6)
	$6 = ($4 + [8])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $223($2)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($4 + [36]) = $3
	*($4 + [32]) = $3
	*($4 + [40]) = ($3 + $2)
	CALL $153(($4 + [32]), $1)
	CALL db_update_i64(*($1 + [140]), (int_64)4154300378675156112, $3, $2)
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL $226($3)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [24]) = *(($1 + [8]))
	if ( (CALL $219($4, ($4 + [24]), [8]) == 0) ){ goto $label$6 }
	$3 = ($1 + [144])
	$2 = *($3)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$7 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5031813150555504640, ($4 + [16]), $7)
	*($3) = $2
	
.LABEL $label$7
	CALL db_idx64_update($2, (int_64)4154300378675156112, ($4 + [24]))
	
.LABEL $label$6
	*($4 + [24]) = *(($1 + [128]))
	if ( (CALL $219($6, ($4 + [24]), [8]) == 0) ){ goto $label$8 }
	$1 = ($1 + [148])
	$2 = *($1)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$9 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5031813150555504641, ($4 + [16]), $7)
	*($1) = $2
	
.LABEL $label$9
	CALL db_idx64_update($2, (int_64)4154300378675156112, ($4 + [24]))
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

int_32 .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [140]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9792])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)5031813150555504640)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9738])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9738])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $17(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0) = *($1)
	$2 = *(($1 + [8]))
	*(($0 + [20])) = (int_64)0
	*(($0 + [8])) = $2
	*($0 + [16]) = [0]
	$3 = (*(($1 + [20])) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$3 }
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	$3 = CALL _Znwj($3)
	*(($0 + [16])) = $3
	*(($0 + [24])) = ($3 + ($4 << [4]))
	*(($4 = ($0 + [20]))) = $3
	$5 = *(($1 + [16]))
	$6 = (*(($1 + [20])) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $6)
	*($4) = (*($4) + $6)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$3 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL _Znwj($3)
	*(($0 + [28])) = $4
	*(($0 + [36])) = ($4 + $3)
	*(($3 = ($0 + [32]))) = $4
	$6 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $6)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $1)
	*($3) = (*($3) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $211(($0 + [16]))
	
.LABEL $label$1
	CALL $211(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $211($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $211($0)
	
.LABEL $label$1
	$6 = ($2 + ((int_32)$5 * (int_32)[40]))
	$7 = ($2 + ((int_32)$3 * (int_32)[40]))
	$2 = CALL $25($7, $1)
	$8 = ($2 + [40])
	$5 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$6 }
	$10 = ($5 - $9)
	$1 = [0]
	
.LOOP $label$7:
	$2 = ($9 + $1)
	*((($5 = ($7 + $1)) + [-32])) = *(($2 + [-32]))
	*(($5 + [-40])) = *(($2 + [-40]))
	*(($3 = ($5 + [-24]))) = (int_64)0
	*(($4 = ($5 + [-16]))) = [0]
	$11 = ($2 + [-24])
	*($3) = *($11)
	$3 = ($2 + [-16])
	*($4) = *($3)
	*($3) = [0]
	*(($3 = ($5 + [-12]))) = (int_64)0
	*(($5 = ($5 + [-4]))) = [0]
	$4 = ($2 + [-12])
	*($3) = *($4)
	*($11) = (int_64)0
	$2 = ($2 + [-4])
	*($5) = *($2)
	*($2) = [0]
	*($4) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$7 }
	$2 = ($7 + $1)
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($0) = $2
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = *(($5 + [-12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($5 + [-8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$10
	$2 = ($5 + [-40])
	$1 = *(($5 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($5 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$5 = $2
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($3 == 0) ){ goto $label$12 }
	CALL _ZdlPv($3)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [9479])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [9525])
	$4 = ($1 + [8])
	$5 = *($4)
	*($4) = (int_64)0
	*(($4 = $3)) = $5
	$6 = ($1 + [128])
	*($4 + [8]) = *($6)
	$7 = *($1)
	CALL $15(($4 + [32]), *(*(*($2) + [4])))
	*(($1 + [48])) = *((($4 + [32]) + [8]))
	*($1 + [40]) = *($4 + [32])
	*($6) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$7 == (int_64)*($1)), [9576])
	$2 = *($1 + [24])
	$6 = ( *(($1 + [28])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($6 + [120])
	$5 = (CASTING uint_64)(uint_32 $6)
	$6 = ($4 + [8])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $223($2)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($4 + [36]) = $3
	*($4 + [32]) = $3
	*($4 + [40]) = ($3 + $2)
	CALL $153(($4 + [32]), $1)
	CALL db_update_i64(*($1 + [140]), (int_64)4154300378675156112, $3, $2)
	if ( ($2 <= [513]) ){ goto $label$4 }
	CALL $226($3)
	
.LABEL $label$4
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($4 + [24]) = *(($1 + [8]))
	if ( (CALL $219($4, ($4 + [24]), [8]) == 0) ){ goto $label$6 }
	$3 = ($1 + [144])
	$2 = *($3)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$7 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5031813150555504640, ($4 + [16]), $7)
	*($3) = $2
	
.LABEL $label$7
	CALL db_idx64_update($2, (int_64)4154300378675156112, ($4 + [24]))
	
.LABEL $label$6
	*($4 + [24]) = *(($1 + [128]))
	if ( (CALL $219($6, ($4 + [24]), [8]) == 0) ){ goto $label$8 }
	$1 = ($1 + [148])
	$2 = *($1)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$9 }
	$2 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5031813150555504641, ($4 + [16]), $7)
	*($1) = $2
	
.LABEL $label$9
	CALL db_idx64_update($2, (int_64)4154300378675156112, ($4 + [24]))
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9050])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	$6 = CALL $115(($3 + [32]), ($5 + [8]))
	CALL eosio_assert(((uint_32)(*($6 + [8]) - *($6 + [4])) > (uint_32)[7]), [9050])
	CALL memcpy(($5 + [24]), *($6 + [4]), [8])
	*($5 + [36]) = $1
	*($6 + [4]) = (*($6 + [4]) + [8])
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $160(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $100 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_64 $28
	int_32 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	$3 = ($global$0 - [480])
	$global$0 = $3
	if ( ((int_32)*($1 + [4]) == (int_32)*($1)) ){ goto $label$1 }
	$4 = CALL current_time()
	$5 = (int_64)0
	*((($3 + [384]) + [28])) = (int_64)0
	*(($6 = ($3 + [428]))) = (int_64)0
	*(($3 + [436])) = (int_64)0
	*($3 + [396]) = [0]
	*($3 + [400]) = [0]
	*($3 + [404 align=4]) = (int_64)0
	*($3 + [420 align=4]) = (int_64)0
	*($3 + [384]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	*((($3 + [344]) + [32])) = [0]
	*(($3 + [382])) = [0]
	*($3 + [352]) = (int_64)921459758687
	*($3 + [344]) = (int_64)4154300378675156112
	*($3 + [360]) = (int_64)-1
	*($3 + [368]) = (int_64)0
	*($3 + [380]) = [0]
	$7 = ($1 + [4])
	if ( ((int_32)*($7) == (int_32)*($1)) ){ goto $label$2 }
	$8 = *($1)
	$9 = (($3 + [24]) + [28])
	$10 = (($3 + [208]) + [32])
	$11 = (($3 + [64]) + [28])
	$12 = (($3 + [208]) + [16])
	$13 = (($3 + [152]) | [1])
	$14 = (($3 + [168]) + [28])
	$15 = (($3 + [384]) + [36])
	$16 = (($3 + [264]) + [28])
	$17 = (($3 + [320]) + [8])
	$18 = (($3 + [264]) + [20])
	$19 = (($3 + [384]) + [40])
	$20 = ($3 + [214])
	$21 = ($3 + [210])
	$22 = (($3 + [208]) + [4])
	$23 = ($3 + [213])
	$24 = ($3 + [217])
	$25 = ($3 + [218])
	$26 = (($3 + [208]) + [11])
	$5 = (int_64)0
	$27 = [0]
	
.LOOP $label$3:
	$28 = *(($8 + ($27 << [3])))
	$8 = CALL $144(($3 + [344]), $28, [8957])
	*($17) = *(($8 + [64]))
	*((($3 + [320]) + [16])) = *(($8 + [72]))
	*(($29 = (($3 + [304]) + [8]))) = *(($8 + [88]))
	*($3 + [320]) = *($8 + [56])
	*($3 + [304]) = *($8 + [80])
	$4 = *($8 + [32])
	$30 = *($8 + [16])
	$31 = *(($8 + [24]))
	$32 = *($8 + [40])
	*(($33 = (($3 + [208]) + [8]))) = *($8 + [48])
	*((($3 + [264]) + [8])) = (int_64)-3111238946495230016
	*(($34 = (($3 + [264]) + [16]))) = (int_64)0
	*(($35 = (($3 + [264]) + [24]))) = [0]
	*($12) = *($3 + [304])
	*(($36 = ($12 + [8]))) = *($29)
	*($10) = *($17)
	*(($10 + [8])) = *(($17 + [8]))
	*($3 + [208]) = $32
	*($3 + [264]) = (int_64)6138663577826885632
	$8 = CALL _Znwj([16])
	*($34) = $8
	*($8) = $32
	*($8 + [8]) = (int_64)5031813150566690592
	*($16) = (int_64)0
	*((($3 + [264]) + [36])) = [0]
	$8 = ($8 + [16])
	*($35) = $8
	*($18) = $8
	CALL $24($16, [48])
	$8 = *($16)
	$37 = (($3 + [264]) + [32])
	*(($29 = (($3 + [168]) + [8]))) = *($37)
	*($3 + [172]) = $8
	*($3 + [168]) = $8
	*($3 + [24]) = ($3 + [168])
	*($3 + [64]) = ($3 + [208])
	CALL $145(($3 + [64]), ($3 + [24]))
	$8 = *($19)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$5 }
	CALL $25($8, ($3 + [264]))
	*($19) = (*($19) + [40])
	goto $label$4 
	
.LABEL $label$5
	CALL $27($15, ($3 + [264]))
	
.LABEL $label$4
	*($29) = (int_64)6299106146746281472
	*(($38 = (($3 + [168]) + [16]))) = (int_64)0
	*(($29 = (($3 + [168]) + [24]))) = [0]
	*($3 + [168]) = (int_64)4154300378675156112
	*($3 + [208]) = $28
	$8 = CALL _Znwj([16])
	*($38) = $8
	*($8) = (int_64)4154300378675156112
	*($8 + [8]) = (int_64)4154300910593376256
	*($14) = (int_64)0
	*((($3 + [168]) + [36])) = [0]
	$8 = ($8 + [16])
	*($29) = $8
	*(($39 = (($3 + [168]) + [20]))) = $8
	CALL $24($14, [8])
	$8 = *($14)
	$40 = (($3 + [168]) + [32])
	CALL eosio_assert(((int_32)(*($40) - $8) > (int_32)[7]), [9212])
	CALL memcpy($8, ($3 + [208]), [8])
	$8 = *($19)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$8 }
	CALL $25($8, ($3 + [168]))
	*($19) = (*($19) + [40])
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL $27($15, ($3 + [168]))
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$7
	$4 = CALL $10($32)
	if ( ((int_64)$4 == (int_64)0) ){ goto $label$12 }
	$29 = [0]
	$35 = *([0] + [9840])
	
.LOOP $label$14:
	*((($3 + [208]) + ($8 = $29))) = *(($35 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$4 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$8 == (int_32)[12]) )))))
	$29 = ($8 + [1])
	if ( ((uint_32)$8 > (uint_32)[11]) ){ goto $label$13 }
	$4 = ((int_64)$4 << (int_64)5)
	if ( ((int_64)$4 != (int_64)0) ){ goto $label$14 }
	
.LABEL $label$13
	*(($41 = (($3 + [152]) + [8]))) = [0]
	*($3 + [152]) = (int_64)0
	if ( ((uint_32)$29 >= (uint_32)[11]) ){ goto $label$11 }
	*($3 + [152]) = ($29 << [1])
	$35 = $13
	goto $label$10 
	
.LABEL $label$12
	*((($3 + [152]) + [8])) = [0]
	*($3 + [152]) = (int_64)0
	*($3 + [152]) = [0]
	$8 = $13
	goto $label$9 
	
.LABEL $label$11
	$42 = (($29 + [16]) & [-16])
	$35 = CALL _Znwj($42)
	*($41) = $35
	*($3 + [152]) = ($42 | [1])
	*($3 + [156]) = $29
	
.LABEL $label$10
	$41 = ($8 + [1])
	$8 = [0]
	
.LOOP $label$15:
	*(($35 + $8)) = *((($3 + [208]) + $8))
	$8 = ($8 + [1])
	if ( ((int_32)$41 != (int_32)$8) ){ goto $label$15 }
	$8 = ($35 + $29)
	
.LABEL $label$9
	*($8) = [0]
	CALL $97(($3 + [136]), ($3 + [152]), [9877])
	*((($3 + [104]) + [8])) = $31
	*((($3 + [8]) + [8])) = $31
	*($3 + [8]) = $30
	*($3 + [104]) = $30
	CALL $19(($3 + [120]), $32, ($3 + [8]))
	$8 = (($3 + [120]) + [8])
	$41 = ((int_64)*($8) == (int_64)$31)
	CALL eosio_assert($41, [9153])
	$32 = *($3 + [120])
	CALL eosio_assert(((int_64)$30 >= (int_64)$32), [9898])
	*($33) = (int_64)-7948557724747115152
	*($12) = *($3 + [120])
	*($36) = *($8)
	*($3 + [208]) = (int_64)4154300378675156112
	CALL $199($10, ($3 + [136]))
	*((($3 + [64]) + [8])) = (int_64)-3617168760277827584
	*(($35 = (($3 + [64]) + [16]))) = (int_64)0
	*(($29 = (($3 + [64]) + [24]))) = [0]
	*($3 + [64]) = (int_64)6138663591592764928
	$8 = CALL _Znwj([16])
	*($35) = $8
	*($8) = (int_64)4154300378675156112
	*($8 + [8]) = (int_64)4154300910593376256
	*($11) = (int_64)0
	*((($3 + [64]) + [36])) = [0]
	$8 = ($8 + [16])
	*($29) = $8
	*(($43 = (($3 + [64]) + [20]))) = $8
	$8 = *($10)
	$36 = (($3 + [208]) + [36])
	$29 = ( *($36) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($29 + [32])
	$4 = (CASTING uint_64)(uint_32 $29)
	
.LOOP $label$16:
	$8 = ($8 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$16 }
	if ( ($8 == 0) ){ goto $label$18 }
	CALL $24($11, $8)
	$42 = *((($3 + [64]) + [32]))
	$8 = *($11)
	goto $label$17 
	
.LABEL $label$18
	$42 = [0]
	$8 = [0]
	
.LABEL $label$17
	*(($29 = (($3 + [24]) + [8]))) = $42
	*($3 + [28]) = $8
	*($3 + [24]) = $8
	*($3 + [472]) = ($3 + [24])
	*($3 + [448]) = ($3 + [208])
	CALL $146(($3 + [448]), ($3 + [472]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*((($3 + [208]) + [40])))
	
.LABEL $label$19
	$8 = *($19)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$21 }
	CALL $25($8, ($3 + [64]))
	*($19) = (*($19) + [40])
	goto $label$20 
	
.LABEL $label$21
	CALL $27($15, ($3 + [64]))
	
.LABEL $label$20
	CALL eosio_assert($41, [10003])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($30 - $32)) > (int_64)-4611686018427387904), [10051])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [10073])
	CALL eosio_assert([1], [9153])
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)$32 >> (uint_64)(int_64)63)) ^ (int_32)[1]), [9938])
	$8 = *([0] + [9840])
	$41 = *($8 + [6])
	*($20) = *($8 + [14])
	*((($3 + [208]) + [7])) = *($8 + [19])
	*($21) = $41
	*((($3 + [208]) + [3])) = *($8 + [16])
	*($22) = *($8 + [10])
	*($23) = *($8 + [9])
	*($33) = *($8 + [8])
	*($3 + [208 align=1]) = *($8 + [24 align=1])
	*($24) = *($8 + [20])
	*($25) = *($8 + [18])
	*($26) = *($8 + [10])
	$8 = CALL _Znwj([16])
	*($29) = $8
	*($8) = *($3 + [208 align=1])
	*($8 + [8 align=1]) = *($33)
	*(($8 + [12])) = [0]
	*($3 + [24]) = (int_64)51539607569
	if ( (*($3 + [152]) & [1]) ){ goto $label$23 }
	*($3 + [152]) = [0]
	goto $label$22 
	
.LABEL $label$23
	*(*((($3 + [152]) + [8]))) = [0]
	*($3 + [156]) = [0]
	
.LABEL $label$22
	CALL $202(($3 + [152]), [0])
	*(($42 = (($3 + [152]) + [8]))) = *($29)
	*($3 + [152]) = *($3 + [24])
	CALL $97(($3 + [208]), ($3 + [152]), [9980])
	if ( (*($3 + [136]) & [1]) ){ goto $label$25 }
	*($3 + [136]) = [0]
	goto $label$24 
	
.LABEL $label$25
	*(*((($3 + [136]) + [8]))) = [0]
	*($3 + [140]) = [0]
	
.LABEL $label$24
	CALL $202(($3 + [136]), [0])
	*(($44 = (($3 + [136]) + [8]))) = *($33)
	*($3 + [136]) = *($3 + [208])
	*($33) = (int_64)-7948557724747115152
	*($12) = $4
	*((($3 + [208]) + [24])) = $31
	*($3 + [208]) = (int_64)4154300378675156112
	CALL $199($10, ($3 + [136]))
	*($29) = (int_64)-3617168760277827584
	*(($29 = (($3 + [24]) + [16]))) = (int_64)0
	*(($41 = (($3 + [24]) + [24]))) = [0]
	*($3 + [24]) = (int_64)6138663591592764928
	$8 = CALL _Znwj([16])
	*($29) = $8
	*($8) = (int_64)4154300378675156112
	*($8 + [8]) = (int_64)4154300910593376256
	*($9) = (int_64)0
	*((($3 + [24]) + [36])) = [0]
	$8 = ($8 + [16])
	*($41) = $8
	*(($33 = (($3 + [24]) + [20]))) = $8
	$8 = *($10)
	$41 = ( *($36) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($41 + [32])
	$4 = (CASTING uint_64)(uint_32 $41)
	
.LOOP $label$26:
	$8 = ($8 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$26 }
	if ( ($8 == 0) ){ goto $label$28 }
	CALL $24($9, $8)
	$41 = *((($3 + [24]) + [32]))
	$8 = *($9)
	goto $label$27 
	
.LABEL $label$28
	$41 = [0]
	$8 = [0]
	
.LABEL $label$27
	*((($3 + [448]) + [8])) = $41
	*($3 + [452]) = $8
	*($3 + [448]) = $8
	*($3 + [464]) = ($3 + [448])
	*($3 + [472]) = ($3 + [208])
	CALL $146(($3 + [472]), ($3 + [464]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$29 }
	CALL _ZdlPv(*((($3 + [208]) + [40])))
	
.LABEL $label$29
	$8 = *($19)
	if ( ((uint_32)$8 >= (uint_32)*($6)) ){ goto $label$32 }
	CALL $25($8, ($3 + [24]))
	*($19) = (*($19) + [40])
	$8 = *($9)
	if ( $8 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	CALL $27($15, ($3 + [24]))
	$8 = *($9)
	if ( ($8 == 0) ){ goto $label$30 }
	
.LABEL $label$31
	*((($3 + [24]) + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$30
	$8 = *($29)
	if ( ($8 == 0) ){ goto $label$33 }
	*($33) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$33
	$8 = *($11)
	if ( ($8 == 0) ){ goto $label$34 }
	*((($3 + [64]) + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$34
	$8 = *($35)
	if ( ($8 == 0) ){ goto $label$35 }
	*($43) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$35
	if ( ((*($3 + [136]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($44))
	
.LABEL $label$36
	if ( ((*($3 + [152]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($42))
	
.LABEL $label$6
	$8 = *($14)
	if ( ($8 == 0) ){ goto $label$37 }
	*($40) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$37
	$8 = *($38)
	if ( ($8 == 0) ){ goto $label$38 }
	*($39) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$38
	$8 = *($16)
	if ( ($8 == 0) ){ goto $label$39 }
	*($37) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$39
	$8 = *($34)
	if ( ($8 == 0) ){ goto $label$40 }
	*($18) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$40
	$5 = ((int_64)$28 + (int_64)$5)
	$8 = *($1)
	$27 = ($27 + [1])
	if ( ($27 <= int_32((*($7) - $8) >> [3])) ){ goto $label$3 }
	
.LABEL $label$2
	if ( (int_64)($2 == 0) ){ goto $label$41 }
	*(($3 + [404])) = ((int_32)(CASTING uint_32)(uint_64 $2) * (int_32)[60])
	
.LABEL $label$41
	$4 = CALL current_time()
	*($3 + [216]) = (int_64)4154300378675156112
	*($3 + [208]) = ((int_64)$4 | (int_64)$5)
	CALL $28(($3 + [264]), ($3 + [384]))
	$8 = *($3 + [264])
	CALL send_deferred(($3 + [208]), (int_64)4154300378675156112, $8, (*($3 + [268]) - $8), [1])
	$8 = *($3 + [264])
	if ( ($8 == 0) ){ goto $label$42 }
	*($3 + [268]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$42
	$35 = *($3 + [368])
	if ( ($35 == 0) ){ goto $label$43 }
	$41 = ($3 + [372])
	$8 = *($41)
	if ( ((int_32)$8 == (int_32)$35) ){ goto $label$45 }
	
.LOOP $label$46:
	$8 = ($8 + [-24])
	$29 = *($8)
	*($8) = [0]
	if ( ($29 == 0) ){ goto $label$47 }
	CALL _ZdlPv($29)
	
.LABEL $label$47
	if ( ((int_32)$35 != (int_32)$8) ){ goto $label$46 }
	$8 = *(($3 + [368]))
	goto $label$44 
	
.LABEL $label$45
	$8 = $35
	
.LABEL $label$44
	*($41) = $35
	CALL _ZdlPv($8)
	
.LABEL $label$43
	CALL $29(($3 + [384]))
	
.LABEL $label$1
	$global$0 = ($3 + [480])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [10162])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [10207])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10257])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

int_32 .FUNC $102 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [36]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9792])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)7760153368969871360)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9738])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9738])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $101(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6497942746098040831, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $46($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)-6497942746098040832, $6))
	CALL eosio_assert(((int_32)*($4 + [112]) == (int_32)$7), [8976])
	
.LABEL $label$2
	*(($4 + [124])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $104 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*(($4 + [60])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	CALL $24(($4 + [52]), [48])
	$7 = *(($4 + [56]))
	$2 = *($4 + [52])
	*($4 + [84]) = $2
	*($4 + [80]) = $2
	*($4 + [88]) = $7
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $145(($4 + [72]), ($4 + [64]))
	CALL $151(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$4 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$4
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$5 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$5
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $211(($4 + [8]))
}

int_32 .FUNC $107 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10132])
	$2 = *($0 + [4])
	$3 = *(($2 + [124]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6497942746098040831, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [124])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [8976])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $46($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)-6497942746098040832, $5))
	CALL eosio_assert(((int_32)*($8 + [112]) == (int_32)$6), [8976])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [124])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $211($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	*(($5 = $4) + [64]) = $2
	CALL eosio_assert(((int_32)*($1 + [136]) == (int_32)$0), [9479])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$0()), [9525])
	*($5 + [48]) = *($1 + [8])
	*($5 + [56]) = *($1 + [128])
	$6 = *($1)
	*($5 + [40]) = $6
	CALL $163($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9576])
	$3 = *($1 + [24])
	$7 = ( *(($1 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($7 + [120])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $223($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [28]) = $4
	*($5 + [24]) = $4
	*($5 + [32]) = ($4 + $3)
	CALL $153(($5 + [24]), $1)
	CALL db_update_i64(*($1 + [140]), $2, $4, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL $226($4)
	$6 = *($5 + [40])
	
.LABEL $label$4
	$3 = ($0 + [36])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [4]) = $1
	*($5) = $0
	*($5 + [12]) = $1
	*($5 + [8]) = ($5 + [48])
	*($5 + [16]) = ($5 + [40])
	*($5 + [20]) = ($5 + [64])
	*($5 + [72]) = $5
	CALL $164(($5 + [72]), $3, ($3 + [1]))
	$global$0 = ($5 + [80])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10094])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $189($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [9050])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $212 ()
{
	return [10724]
}

int_32 .FUNC $219 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $38 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	*($1 + [16]) = (int_64)921459758687
	*($1 + [8]) = (int_64)4154300378675156112
	$2 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)4344997574076792832, $0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $39(($1 + [8]), $2) + [16]) == (int_32)($1 + [8])), [8976])
	CALL eosio_assert([0], [8457])
	$3 = *($1 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([1], [8457])
	$3 = *($1 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($1 + [36])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($1 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $3
	
.LABEL $label$4
	*($4) = $3
	CALL _ZdlPv($2)
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$1
	$global$0 = ($1 + [48])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9050])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9050])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $177(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [10132])
	$2 = *($0 + [4])
	$3 = *(($2 + [148]))
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)5031813150555504641, ($1 + [8]), *($2))
	*((*(($0 + [4])) + [148])) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$6), [8976])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $17($6, CALL $fimport$7(*($6), *($6 + [8]), (int_64)5031813150555504640, $5))
	CALL eosio_assert(((int_32)*($8 + [136]) == (int_32)$6), [8976])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [148])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $37 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = ($global$0 - [48])
	$global$0 = $1
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	*($1 + [44]) = [0]
	*($1 + [16]) = (int_64)921459758687
	*($1 + [8]) = (int_64)4154300378675156112
	$2 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)6761214556460023808, $0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $8(($1 + [8]), $2) + [24]) == (int_32)($1 + [8])), [8976])
	CALL eosio_assert([0], [8398])
	$3 = *($1 + [32])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([1], [8398])
	$3 = *($1 + [32])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($1 + [36])
	$2 = *($4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$5 = *($2)
	*($2) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($1 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $3
	
.LABEL $label$4
	*($4) = $3
	CALL _ZdlPv($2)
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$1
	$global$0 = ($1 + [48])
}

void .FUNC $34 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$0 = ($global$0 - [112])
	$global$0 = $0
	*(($0 + [104])) = [0]
	*($0 + [80]) = (int_64)921459758687
	*($0 + [72]) = (int_64)4154300378675156112
	*($0 + [88]) = (int_64)-1
	*($0 + [96]) = (int_64)0
	*($0 + [108]) = [0]
	$1 = CALL $12((int_64)1)
	$2 = CALL $12((int_64)0)
	CALL $15(($0 + [56]), $1)
	CALL $15(($0 + [40]), $2)
	$3 = CALL $30()
	$4 = *($0 + [40])
	$5 = *($0 + [56])
	*($0 + [32]) = ($0 + [72])
	*($0 + [8]) = (int_64)0
	CALL $35(($0 + [24]), ($0 + [32]), ($0 + [8]))
	$6 = *($0 + [28])
	if ( ($6 == 0) ){ goto $label$1 }
	$5 = (CASTING uint_64)(uint_32 ((uint_64)$5 > (uint_64)(int_64)100000))
	$4 = (CASTING uint_64)(uint_32 ((uint_64)$4 > (uint_64)$3))
	
.LOOP $label$2:
	if ( ((int_64)*($6 + [16]) != (int_64)1) ){ goto $label$5 }
	if ( ((int_64)$5 != (int_64)1) ){ goto $label$4 }
	CALL $36(($0 + [24]))
	$5 = (int_64)1
	$6 = *($0 + [28])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_64)$4 != (int_64)1) ){ goto $label$3 }
	CALL $36(($0 + [24]))
	$4 = (int_64)1
	$6 = *($0 + [28])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $15(($0 + [8]), *($6))
	$7 = *(*($0 + [28]))
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$6 }
	if ( (uint_64)(*($0 + [8]) <= (int_64)100001) ){ goto $label$6 }
	CALL $21($7)
	$5 = (int_64)1
	
.LABEL $label$6
	CALL $36(($0 + [24]))
	$6 = *($0 + [28])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $15(($0 + [8]), *($6))
	$7 = *(*($0 + [28]))
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$7 }
	if ( ((uint_64)*($0 + [8]) <= (uint_64)$3) ){ goto $label$7 }
	CALL $21($7)
	$4 = (int_64)1
	
.LABEL $label$7
	CALL $36(($0 + [24]))
	$6 = *($0 + [28])
	if ( $6 ){ goto $label$2 }
	
.LABEL $label$1
	$8 = *($0 + [96])
	if ( ($8 == 0) ){ goto $label$8 }
	$9 = ($0 + [100])
	$6 = *($9)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [-24])
	$10 = *($6)
	*($6) = [0]
	if ( ($10 == 0) ){ goto $label$12 }
	if ( ((*($10 + [24]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($10 + [32])))
	
.LABEL $label$13
	CALL _ZdlPv($10)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$11 }
	$6 = *(($0 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$6 = $8
	
.LABEL $label$9
	*($9) = $8
	CALL _ZdlPv($6)
	
.LABEL $label$8
	$global$0 = ($0 + [112])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)5031813150555504641, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$7), [8976])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $17($7, CALL $fimport$7(*($7), *($7 + [8]), (int_64)5031813150555504640, $6))
	CALL eosio_assert(((int_32)*($4 + [136]) == (int_32)$7), [8976])
	
.LABEL $label$2
	*(($4 + [148])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $32 (int_64 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$1 = ($global$0 - [48])
	$global$0 = $1
	$2 = [0]
	*(($1 + [40])) = [0]
	*($1 + [24]) = (int_64)-1
	*($1 + [32]) = (int_64)0
	*($1 + [16]) = (int_64)921459758687
	*($1 + [8]) = (int_64)4154300378675156112
	$3 = CALL db_find_i64((int_64)4154300378675156112, (int_64)921459758687, (int_64)-4497226457311450768, $0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $33(($1 + [8]), $3) + [24]) == (int_32)($1 + [8])), [8976])
	$2 = [1]
	$4 = *($1 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($1 + [36])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$6 = *($3)
	*($3) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($1 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($1 + [48])
	return $2
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	*($5) = (int_64)0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9050])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9050])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9050])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $175(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_64 .FUNC $30 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$0 = ($global$0 - [48])
	$global$0 = $0
	*(($0 + [32])) = [0]
	*($0 + [8]) = (int_64)4154300378675156112
	*($0) = (int_64)4154300378675156112
	*($0 + [16]) = (int_64)-1
	*($0 + [36]) = [0]
	*($0 + [24]) = (int_64)0
	$1 = [0]
	$2 = CALL db_lowerbound_i64((int_64)4154300378675156112, (int_64)4154300378675156112, (int_64)-6031111549421092864, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	CALL $31($0, $2)
	$1 = [1]
	
.LABEL $label$1
	CALL eosio_assert($1, [8377])
	$1 = CALL db_lowerbound_i64(*($0), *(($0 + [8])), (int_64)-6031111549421092864, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$6 }
	$3 = (int_64)100000000
	$1 = CALL $31($0, $1)
	if ( ((int_64)*($1 + [64]) != (int_64)0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$3 = (int_64)100000000
	$6 = *($0 + [24])
	if ( ($6 == 0) ){ goto $label$3 }
	$4 = [4]
	goto $label$2 
	
.LABEL $label$5
	$4 = [2]
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	$4 = [12]
	
.LABEL $label$2
	
.LOOP $label$7:
	goto $label$25 
	
.LABEL $label$27
	$1 = CALL $31($0, $1)
	if ( ((int_64)*($1 + [64]) != (int_64)0) ){ goto $label$13 }
	$4 = [2]
	goto $label$7 
	
.LABEL $label$26
	$5 = ((int_64)*($1 + [40]) + (int_64)*($1 + [24]))
	$3 = ( ( $5 ? $3 : ((int_64)*($1 + [72]) != (int_64)0) ) ? $3 : (uint_64)($5 <= $3) )
	$4 = [0]
	goto $label$7 
	
.LABEL $label$25
	CALL eosio_assert([1], [10132])
	$1 = CALL db_next_i64(*($1 + [100]), ($0 + [40]))
	if ( ((int_32)$1 >= (int_32)[0]) ){ goto $label$14 }
	$4 = [3]
	goto $label$7 
	
.LABEL $label$24
	$6 = *($0 + [24])
	if ( $6 ){ goto $label$12 }
	$4 = [12]
	goto $label$7 
	
.LABEL $label$23
	$global$0 = ($0 + [48])
	return $3
	
.LABEL $label$22
	$7 = ($0 + [28])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	$4 = [5]
	goto $label$7 
	
.LABEL $label$21
	$4 = [6]
	goto $label$7 
	
.LABEL $label$20
	$1 = ($1 + [-24])
	$2 = *($1)
	*($1) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	$4 = [7]
	goto $label$7 
	
.LABEL $label$19
	CALL _ZdlPv($2)
	$4 = [8]
	goto $label$7 
	
.LABEL $label$18
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$10 }
	$4 = [9]
	goto $label$7 
	
.LABEL $label$17
	$1 = *(($0 + [24]))
	goto $label$8 
	
.LABEL $label$16
	$1 = $6
	$4 = [10]
	goto $label$7 
	
.LABEL $label$15
	*($7) = $6
	CALL _ZdlPv($1)
	$global$0 = ($0 + [48])
	return $3
	
.LABEL $label$14
	$4 = [1]
	goto $label$7 
	
.LABEL $label$13
	$4 = [0]
	goto $label$7 
	
.LABEL $label$12
	$4 = [4]
	goto $label$7 
	
.LABEL $label$11
	$4 = [11]
	goto $label$7 
	
.LABEL $label$10
	$4 = [6]
	goto $label$7 
	
.LABEL $label$9
	$4 = [8]
	goto $label$7 
	
.LABEL $label$8
	$4 = [10]
	goto $label$7 
	return $4
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9027])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $223($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([112])
	$6 = CALL $147($5)
	*($5 + [96]) = $0
	CALL $148(($3 + [32]), $6)
	*($5 + [104]) = [-1]
	*($5 + [100]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $149(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $226($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $215 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $214 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [24] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $216($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $216($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $216($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $216($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [19136]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $216($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $216($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $216($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $217 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $216 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $211 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $210 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $203(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $218(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8711], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $203(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $203(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}

void .FUNC $198 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $226($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $221(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [10720])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $221(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $226($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $223($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10720])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $223($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}