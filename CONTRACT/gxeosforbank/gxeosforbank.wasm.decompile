(data (i32.const 8192) "liebi.com\00")
(data (i32.const 8202) "invalid stake account size\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8315) "invalid stake account\00")
(data (i32.const 8337) "invalid account receiver\00")
(data (i32.const 8362) "invalid stake duration\00")
(data (i32.const 8385) "EOS\00")
(data (i32.const 8389) "invalid stake_cpu_quantity symbol\00")
(data (i32.const 8423) "invalid asset stake_cpu_quantity\00")
(data (i32.const 8456) "asset stake_cpu_quantity not positive\00")
(data (i32.const 8494) "eosio.token\00")
(data (i32.const 8506) "not enough balance for stake\00")
(data (i32.const 8535) "stake account not exist\00")
(data (i32.const 8559) "invalid account from\00")
(data (i32.const 8580) "invalid unstake_cpu_quantity symbol\00")
(data (i32.const 8616) "invalid asset unstake_cpu_quantity\00")
(data (i32.const 8651) "asset unstake_cpu_quantity not positive\00")
(data (i32.const 8691) "invalid account owner\00")
(data (i32.const 8713) "eosio\00")
(data (i32.const 8719) "refund\00")
(data (i32.const 8726) "stake cpu\00")
(data (i32.const 8736) "setagent\00")
(data (i32.const 8745) "stakecpu\00")
(data (i32.const 8754) "unstakecpu\00")
(data (i32.const 8765) "string is too long to be a valid name\00")
(data (i32.const 8803) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8870) "character is not in allowed character set for names\00")
(data (i32.const 8922) "string is too long to be a valid symbol_code\00")
(data (i32.const 8967) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9020) "unable to find key\00")
(data (i32.const 9039) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9090) "error reading iterator\00")
(data (i32.const 9113) "read\00")
(data (i32.const 9118) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9167) "invalid symbol name\00")
(data (i32.const 9187) "write\00")
(data (i32.const 9193) "get\00")
(data (i32.const 9197) "cannot pass end iterator to erase\00")
(data (i32.const 9231) "cannot increment end iterator\00")
(data (i32.const 9261) "object passed to erase is not in multi_index\00")
(data (i32.const 9306) "cannot erase objects in table of another contract\00")
(data (i32.const 9356) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9409) "cannot create objects in table of another contract\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "require_recipient" (func $fimport$1 (param i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$3 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$4 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$5 (param i64) (result i32)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "memcpy" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$8 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$9 (result i32)))
(import "env" "read_action_data" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "db_remove_i64" (func $fimport$13 (param i32)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$17 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$20 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$25 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$27 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$28 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$29 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$30 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$32 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$34 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$35 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$36 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $22))
(export "_Znwj" (func $40))
(export "_ZdlPv" (func $42))
(export "_Znaj" (func $41))
(export "_ZdaPv" (func $43))
(export "_ZnwjSt11align_val_t" (func $44))
(export "_ZnajSt11align_val_t" (func $45))
(export "_ZdlPvSt11align_val_t" (func $46))
(export "_ZdaPvSt11align_val_t" (func $47))
(table $0 5 5 anyfunc)
(elem (i32.const 1) $1 $7 $12 $14)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17876))
(global $global$2 i32 (i32.const 17876))


void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $17($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9187])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9187])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $33(CALL $32($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $39(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9187])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9187])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9113])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9113])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9113])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]), [9113])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9113])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9113])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9113])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [9113])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [9113])
	CALL memcpy(($0 + [32]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$1 = (*($4 + [4]) + [8])
	*($4 + [4]) = $1
	*($2 + [8]) = *(($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $1) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($0 + [32]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [40]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9187])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *($0 + [48])
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9187])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $23 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [112])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = [0]
	$2 = [0]
	$8 = CALL action_data_size()
	if ( ($8 == 0) ){ goto $label$1 }
	if ( ($8 <= [513]) ){ goto $label$3 }
	$2 = CALL $56($8)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $8)
	
.LABEL $label$1
	*($4 + [64]) = [0]
	*($4 + [68 align=4]) = (int_64)0
	*($4 + [76]) = [0]
	*($4 + [56]) = ($2 + $8)
	*($4 + [48]) = $2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9113])
	CALL memcpy(($4 + [64]), $2, [1])
	*($4 + [52]) = ($2 + [1])
	CALL $27(($4 + [48]), (($4 + [64]) | [4]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($9 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4)
	$3 = *($9)
	*((($4 + [96]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [80])
	*($4 + [32]) = $0
	*($4 + [96]) = $0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = [0]
	$9 = *($4 + [64])
	$3 = (*($4 + [72]) - *($4 + [68]))
	if ( ($3 == 0) ){ goto $label$6 }
	$10 = int_32($3 >> [3])
	if ( ((uint_32)$10 >= (uint_32)[536870912]) ){ goto $label$5 }
	$7 = CALL _Znwj($3)
	*((($4 + [80]) + [8])) = ($7 + ($10 << [3]))
	*($4 + [80]) = $7
	*($4 + [84]) = $7
	$10 = *($4 + [68])
	$3 = (*((($4 + [64]) + [8])) - $10)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($7, $10, $3)
	$7 = (*($4 + [84]) + $3)
	*($4 + [84]) = $7
	
.LABEL $label$6
	$3 = (($4 + [16]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	*($4 + [104]) = [0]
	*($4 + [96]) = (int_64)0
	$7 = ($7 - *($4 + [80]))
	if ( ($7 == 0) ){ goto $label$8 }
	$5 = int_32($7 >> [3])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$4 }
	$7 = CALL _Znwj($7)
	*(($4 + [104])) = ($7 + ($5 << [3]))
	*($4 + [96]) = $7
	*($4 + [100]) = $7
	$10 = *($4 + [80])
	$5 = (*($4 + [84]) - $10)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($7, $10, $5)
	*($4 + [100]) = ($7 + $5)
	
.LABEL $label$8
	CALL void $3((int_32 ($9 & [255])), (int_32 ($4 + [96])), (int_32 $6))
	$7 = *($4 + [96])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [100]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ($8 <= [513]) ){ goto $label$11 }
	CALL $59($2)
	
.LABEL $label$11
	$2 = *($4 + [68])
	if ( ($2 == 0) ){ goto $label$12 }
	*(($4 + [72])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$global$0 = ($4 + [112])
	return [1]
	
.LABEL $label$5
	CALL $50(($4 + [80]))
	
.LABEL $label$4
	CALL $50(($4 + [96]))
	(unreachable)
	return (unreachable)
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [144])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	*($3 + [128]) = [8736]
	*($3 + [132]) = CALL $53([8736])
	*($3 + [64]) = *($3 + [128])
	CALL $2(($3 + [136]), ($3 + [64]))
	if ( ((int_64)$2 != (int_64)-4417355951892332544) ){ goto $label$2 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [1]
	*($3 + [8]) = *($3 + [120])
	CALL $23($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [112]) = [8745]
	*($3 + [116]) = CALL $53([8745])
	*($3 + [56]) = *($3 + [112])
	CALL $2(($3 + [136]), ($3 + [56]))
	if ( ((int_64)$2 != (int_64)-4157661234285510656) ){ goto $label$3 }
	*($3 + [108]) = [0]
	*($3 + [104]) = [2]
	*($3 + [16]) = *($3 + [104])
	CALL $24($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [96]) = [8754]
	*($3 + [100]) = CALL $53([8754])
	*($3 + [48]) = *($3 + [96])
	CALL $2(($3 + [136]), ($3 + [48]))
	if ( ((int_64)$2 != (int_64)-3102536759680008192) ){ goto $label$4 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [3]
	*($3 + [24]) = *($3 + [88])
	CALL $25($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [80]) = [8719]
	*($3 + [84]) = CALL $53([8719])
	*($3 + [40]) = *($3 + [80])
	CALL $2(($3 + [136]), ($3 + [40]))
	if ( ((int_64)$2 != (int_64)-5001342339331915776) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [4]
	*($3 + [32]) = *($3 + [72])
	CALL $26($1, $1, ($3 + [32]))
	
.LABEL $label$1
	CALL $52([0])
	$global$0 = ($3 + [144])
}

int_32 .FUNC $25 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $56($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [80]) + [24]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [144]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $29(($4 + [32]), ($4 + [144]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4 + [16])
	$9 = *($3)
	*((($4 + [144]) + [8])) = $9
	*((($4 + [32]) + [24])) = $9
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [128])
	*($4 + [48]) = $0
	*($4 + [144]) = $0
	*(($9 = (($4 + [112]) + [8]))) = *($8)
	*($4 + [112]) = *($4 + [96])
	$0 = *($4 + [88])
	$1 = *($4 + [80])
	*($3) = *($9)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$10 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $10
	*(($4 + [8])) = $10
	$10 = *($4 + [128])
	*($4) = $10
	*($4 + [144]) = $10
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $4), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $59($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $56($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = (($4 + [88]) + [24]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [120]) = [0]
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [160]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $28(($4 + [40]), ($4 + [160]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	*(($3 = (($4 + [144]) + [8]))) = *($9)
	*($4 + [144]) = *($4 + [24])
	$9 = *($3)
	*((($4 + [160]) + [8])) = $9
	*((($4 + [40]) + [24])) = $9
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [144])
	*($4 + [56]) = $0
	*($4 + [160]) = $0
	*(($9 = (($4 + [128]) + [8]))) = *($8)
	*($4 + [128]) = *($4 + [104])
	$0 = *($4 + [96])
	$1 = *($4 + [88])
	$8 = *($4 + [120])
	*($3) = *($9)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$10 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $10
	*((($4 + [8]) + [8])) = $10
	$10 = *($4 + [144])
	*($4 + [8]) = $10
	*($4 + [160]) = $10
	CALL void $3((int_32 $1), (int_64 $0), (int_64 ($4 + [8])), (int_32 ($8 & [255])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $59($2)
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return [1]
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9193])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [3])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $34($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [3]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]), [9113])
	CALL memcpy($7, *($2), [8])
	$3 = (*($2) + [8])
	*($2) = $3
	$7 = ($7 + [8])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $26 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $56($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = (($4 + [56]) + [16]))) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [56]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9113])
	CALL memcpy(($4 + [56]), $2, [8])
	$8 = ($7 & [-8])
	CALL eosio_assert(((int_32)$8 != (int_32)[8]), [9113])
	CALL memcpy((($4 + [56]) + [8]), ($2 + [8]), [8])
	*($4 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)$8 != (int_32)[16]), [9113])
	CALL memcpy(($4 + [24]), ($2 + [16]), [8])
	*($3) = *($4 + [24])
	*(($4 + [44])) = ($2 + [24])
	*((($4 + [24]) + [24])) = ($2 + $7)
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $2
	*(($8 = (($4 + [80]) + [8]))) = *($3)
	*($4 + [80]) = *($4 + [64])
	$0 = *($4 + [56])
	*((($4 + [96]) + [8])) = *($8)
	*($4 + [96]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [96]) + [8]))
	*((($4 + [112]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [96])
	*($4 + [8]) = $1
	*($4 + [112]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $59($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $48 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $59($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $56($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9460])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $56($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $59($0)
	
.LABEL $label$1
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $54(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [9460])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $54(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $51 ()
{
	return [9464]
}

int_32 .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9039])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $30($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9039])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$6 = ($global$0 - [128])
	$global$0 = $6
	$7 = *($0)
	*((($6 + [80]) + [8])) = [0]
	$8 = *(($4 + [8]))
	*((($6 + [112]) + [8])) = $8
	*((($6 + [96]) + [8])) = $8
	*($6 + [80]) = (int_64)0
	$8 = *($4)
	*($6 + [96]) = $8
	*($6 + [112]) = $8
	$0 = CALL $53([8726])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$4 }
	*($6 + [80]) = ($0 << [1])
	$9 = (($6 + [80]) | [1])
	if ( $0 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$10 = (($0 + [16]) & [-16])
	$9 = CALL _Znwj($10)
	*($6 + [80]) = ($10 | [1])
	*($6 + [88]) = $9
	*($6 + [84]) = $0
	
.LABEL $label$3
	CALL memcpy($9, [8726], $0)
	
.LABEL $label$2
	*(($9 + $0)) = [0]
	*((($6 + [32]) + [8])) = *((($6 + [96]) + [8]))
	*($6 + [32]) = *($6 + [96])
	CALL $10($6, $7, $1, ($6 + [32]), ($6 + [80]))
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($6 + [88]))
	
.LABEL $label$5
	$11 = *(($3 + [8]))
	*((($6 + [64]) + [8])) = $11
	$12 = *(($4 + [8]))
	*((($6 + [48]) + [8])) = $12
	$7 = *($4)
	$8 = *($3)
	*((($6 + [16]) + [8])) = $11
	*(($6 + [8])) = $12
	*($6 + [64]) = $8
	*($6 + [48]) = $7
	*($6 + [16]) = $8
	*($6) = $7
	CALL $11($6, $1, $2, ($6 + [16]), $6, $5)
	$global$0 = ($6 + [128])
	return (unreachable)
	
.LABEL $label$1
	CALL $48(($6 + [80]))
}

void .FUNC $6 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $50($0)
	
.LABEL $label$1
	$8 = *($2)
	$2 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($9 = ((int_32)$5 * (int_32)[24]))))) = $2
	*($1 + [8]) = $8
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $9) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [4])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [160])
	$global$0 = $5
	*($5 + [104]) = [8192]
	*($5 + [108]) = CALL $53([8192])
	*($5 + [48]) = *($5 + [104])
	CALL require_auth(*(CALL $2(($5 + [112]), ($5 + [48]))))
	CALL eosio_assert(CALL $fimport$5($2), [8337])
	CALL eosio_assert(((($4 + [-1]) & [255]) <= [30]), [8362])
	$6 = CALL $53([8385])
	if ( ($6 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8922])
	goto $label$3 
	
.LABEL $label$4
	if ( ($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = (int_64)0
	
.LOOP $label$5:
	$8 = *(($6 + [8384]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8967])
	
.LABEL $label$6
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$5 }
	$7 = ((int_64)$7 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	$9 = *($3 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)((int_64)$7 | (int_64)4)), [8389])
	$8 = [0]
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$7 = (uint_64)$9 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$7 = $9
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$7 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [8423])
	$7 = (int_64)0
	CALL eosio_assert(((int_64)$10 > (int_64)0), [8456])
	*($5 + [88]) = [8494]
	*($5 + [92]) = CALL $53([8494])
	*($5 + [40]) = *($5 + [88])
	$11 = CALL $2(($5 + [96]), ($5 + [40]))
	$9 = *($0)
	$6 = CALL $53([8385])
	if ( ($6 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [8922])
	goto $label$13 
	
.LABEL $label$14
	if ( ($6 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$7 = (int_64)0
	
.LOOP $label$15:
	$8 = *(($6 + [8384]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [8967])
	
.LABEL $label$16
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$15 }
	$7 = ((int_64)$7 & (int_64)72057594037927935)
	
.LABEL $label$12
	$12 = *($11)
	*(($5 + [152])) = [0]
	*($5 + [128]) = $9
	*($5 + [120]) = $12
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	$7 = *(CALL $8(($5 + [120]), $7, [9020]))
	$11 = *($5 + [144])
	if ( ($11 == 0) ){ goto $label$17 }
	$13 = ($5 + [148])
	$6 = *($13)
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$19 }
	
.LOOP $label$20:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$21 }
	CALL _ZdlPv($8)
	
.LABEL $label$21
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$20 }
	$6 = *(($5 + [144]))
	goto $label$18 
	
.LABEL $label$19
	$6 = $11
	
.LABEL $label$18
	*($13) = $11
	CALL _ZdlPv($6)
	
.LABEL $label$17
	CALL eosio_assert(((int_64)$7 >= (int_64)$10), [8506])
	$6 = CALL $53([8385])
	if ( ($6 <= [8]) ){ goto $label$25 }
	CALL eosio_assert([0], [8922])
	goto $label$24 
	
.LABEL $label$25
	if ( ($6 == 0) ){ goto $label$23 }
	
.LABEL $label$24
	$7 = (int_64)0
	
.LOOP $label$26:
	$8 = *(($6 + [8384]))
	if ( ((($8 + [-65]) & [255]) <= [26]) ){ goto $label$27 }
	CALL eosio_assert([0], [8967])
	
.LABEL $label$27
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$26 }
	$10 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	goto $label$22 
	
.LABEL $label$23
	$10 = (int_64)4
	
.LABEL $label$22
	CALL eosio_assert([1], [9118])
	$7 = (uint_64)$10 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$7 = $9
	$8 = [1]
	$11 = $6
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$7 = $9
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $8 ){ goto $label$32 }
	$8 = [1]
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$8 = [0]
	
.LABEL $label$28
	CALL eosio_assert($8, [9167])
	*(($5 + [152])) = [0]
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	$7 = *($0)
	*($5 + [120]) = $7
	*($5 + [128]) = $7
	$8 = [0]
	$6 = CALL db_find_i64($7, $7, (int_64)-4157661275915638896, (CASTING uint_64)(uint_32 $4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$33 }
	$8 = CALL $3(($5 + [120]), $6)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($5 + [120])), [9039])
	
.LABEL $label$33
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [8535])
	$8 = *(($8 + [8]))
	$6 = *($8 + [4])
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$37 }
	
.LOOP $label$38:
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$36 }
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$38 }
	
.LABEL $label$37
	CALL eosio_assert([0], [8535])
	$3 = *($5 + [144])
	if ( ($3 == 0) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$9 = *(($3 + [8]))
	*((($5 + [56]) + [8])) = $9
	$7 = *($3)
	*((($5 + [24]) + [8])) = $10
	*((($5 + [8]) + [8])) = $9
	*($5 + [80]) = $10
	*($5 + [72]) = (int_64)0
	*($5 + [56]) = $7
	*($5 + [24]) = (int_64)0
	*($5 + [8]) = $7
	CALL $9($0, $1, $2, ($5 + [24]), ($5 + [8]), [0])
	$3 = *($5 + [144])
	if ( $3 ){ goto $label$34 }
	
.LABEL $label$35
	$global$0 = ($5 + [160])
	return 
	
.LABEL $label$34
	$0 = ($5 + [148])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$40 }
	
.LOOP $label$41:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$42 }
	$11 = *($8 + [4])
	if ( ($11 == 0) ){ goto $label$43 }
	*(($8 + [8])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$43
	CALL _ZdlPv($8)
	
.LABEL $label$42
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$41 }
	$6 = *(($5 + [144]))
	goto $label$39 
	
.LABEL $label$40
	$6 = $3
	
.LABEL $label$39
	*($0) = $3
	CALL _ZdlPv($6)
	$global$0 = ($5 + [160])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9261])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [9306])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = (*($1) & [255])
	if ( ((int_32)*(*(($5 + [-24]))) == (int_32)$6) ){ goto $label$3 }
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$3 = ($5 + [-48])
	$5 = ($5 + [-24])
	if ( ((int_32)*(*($3)) != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [9356])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$6 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $6
	if ( ($3 == 0) ){ goto $label$9 }
	$6 = *($3 + [4])
	if ( ($6 == 0) ){ goto $label$10 }
	*(($3 + [8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$7 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$7 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$6 = *($5 + [4])
	if ( ($6 == 0) ){ goto $label$13 }
	*(($5 + [8])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $7
	CALL db_remove_i64(*(($1 + [20])))
}

void .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *(($4 + [4]))
	$6 = ($1 + [4])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$1 }
	CALL $35($6, *($4), *($4 + [4]))
	
.LABEL $label$1
	$8 = *($1 + [4])
	$7 = *(($1 + [8]))
	$9 = ($7 - $8)
	$10 = (CASTING uint_64)(uint_32 int_32($9 >> [3]))
	$4 = [1]
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$3 }
	$4 = (($9 & [-8]) + $4)
	
.LABEL $label$3
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $56($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[0]), [9187])
	CALL memcpy($2, $1, [1])
	*($3 + [4]) = ($2 + [1])
	CALL $36($3, $6)
	$10 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($5 + [8]), (int_64)-4157661275915638896, *(*($0 + [8])), $10, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)*($5 + [16]) <= (uint_64)$10) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $59($2)
	if ( ((uint_64)*($5 + [16]) > (uint_64)$10) ){ goto $label$6 }
	
.LABEL $label$7
	*(($5 + [16])) = ((int_64)$10 + (int_64)1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8765])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8870])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8803])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8870])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9090])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $56($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [24]) = ($2 + $4)
	*($3 + [16]) = $2
	*(($5 = CALL _Znwj([28])) + [12]) = [0]
	*($5 + [4 align=4]) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [9113])
	CALL memcpy($5, $2, [1])
	*($3 + [20]) = ($2 + [1])
	CALL $27(($3 + [16]), ($5 + [4]))
	*($5 + [20]) = $1
	*($3 + [8]) = $5
	$6 = *($5)
	*($3 + [7]) = $6
	*($3) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	*($8 + [16]) = $1
	*($3 + [8]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $6(($0 + [24]), ($3 + [8]), ($3 + [7]), $3)
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $59($2)
	
.LABEL $label$6
	$1 = *($3 + [8])
	*($3 + [8]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	$4 = *($1 + [4])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($3 + [78]) = $1
	CALL require_auth(*($0))
	*($3 + [56]) = [8192]
	*($3 + [60]) = CALL $53([8192])
	*($3) = *($3 + [56])
	CALL require_recipient(*(CALL $2(($3 + [64]), $3)))
	CALL eosio_assert(((int_32)(*($2 + [4]) - *($2)) == (int_32)[32]), [8202])
	*((($3 + [16]) + [32])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$4 = *($0)
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	$1 = CALL db_find_i64($4, $4, (int_64)-4157661275915638896, (CASTING uint_64)(uint_32 $1))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$1 = CALL $3(($3 + [16]), $1)
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)($3 + [16])), [9039])
	CALL eosio_assert([1], [9197])
	CALL eosio_assert([1], [9231])
	$5 = CALL db_next_i64(*($1 + [20]), ($3 + [80]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $3(($3 + [16]), $5)
	
.LABEL $label$2
	CALL $4(($3 + [16]), $1)
	
.LABEL $label$1
	$5 = *(($2 + [4]))
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL eosio_assert(CALL $fimport$5(*($1)), [8315])
	$1 = ($1 + [8])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$4 = *($0)
	*($3 + [12]) = $2
	*($3 + [8]) = ($3 + [78])
	*($3 + [104]) = $4
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)CALL $fimport$6()), [9409])
	*($3 + [84]) = ($3 + [8])
	*($3 + [80]) = ($3 + [16])
	*($3 + [88]) = ($3 + [104])
	*(($1 = CALL _Znwj([28])) + [12]) = [0]
	*($1 + [4 align=4]) = (int_64)0
	*($1 + [16]) = ($3 + [16])
	CALL $5(($3 + [80]), $1)
	*($3 + [96]) = $1
	$2 = *($1)
	*($3 + [79]) = $2
	$0 = *($1 + [20])
	*($3 + [80]) = $0
	$6 = (($3 + [16]) + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($3 + [48]))) ){ goto $label$9 }
	*($5 + [8]) = ((int_64)(CASTING uint_64)(uint_32 $2) & (int_64)255)
	*($5 + [16]) = $0
	*($3 + [96]) = [0]
	*($5) = $1
	*($6) = ($5 + [24])
	$1 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $6(($3 + [40]), ($3 + [96]), ($3 + [79]), ($3 + [80]))
	$1 = *($3 + [96])
	*($3 + [96]) = [0]
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$8
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$5 = *($1 + [4])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($1 + [8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	$0 = *($3 + [40])
	if ( ($0 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$6 = ($3 + [44])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($1 + [-24])
	$5 = *($1)
	*($1) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	$2 = *($5 + [4])
	if ( ($2 == 0) ){ goto $label$15 }
	*(($5 + [8])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$13 }
	$1 = *(($3 + [40]))
	goto $label$11 
	
.LABEL $label$12
	$1 = $0
	
.LABEL $label$11
	*($6) = $0
	CALL _ZdlPv($1)
	
.LABEL $label$5
	$global$0 = ($3 + [112])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*($3 + [144]) = [8192]
	*($3 + [148]) = CALL $53([8192])
	*($3 + [32]) = *($3 + [144])
	CALL require_auth(*(CALL $2(($3 + [152]), ($3 + [32]))))
	CALL eosio_assert(CALL $fimport$5($1), [8691])
	*($3 + [88]) = [8713]
	*($3 + [92]) = CALL $53([8713])
	*($3 + [24]) = *($3 + [88])
	$4 = CALL $2(($3 + [96]), ($3 + [24]))
	*(($3 + [136])) = [0]
	*($3 + [112]) = $1
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	$5 = *($4)
	*($3 + [104]) = $5
	$4 = CALL db_find_i64($5, $1, (int_64)-5001342326447013888, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $15(($3 + [104]), $4) + [48]) == (int_32)($3 + [104])), [9039])
	CALL $16($2, $1)
	
.LABEL $label$1
	$5 = *($0)
	*((($3 + [40]) + [8])) = [0]
	$6 = *(($2 + [8]))
	*((($3 + [72]) + [8])) = $6
	*((($3 + [56]) + [8])) = $6
	*($3 + [40]) = (int_64)0
	$6 = *($2)
	*($3 + [56]) = $6
	*($3 + [72]) = $6
	$2 = CALL $53([8719])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($3 + [40]) = ($2 << [1])
	$0 = (($3 + [40]) | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($2 + [16]) & [-16])
	$0 = CALL _Znwj($4)
	*($3 + [40]) = ($4 | [1])
	*($3 + [48]) = $0
	*($3 + [44]) = $2
	
.LABEL $label$4
	CALL memcpy($0, [8719], $2)
	
.LABEL $label$3
	*(($0 + $2)) = [0]
	*((($3 + [8]) + [8])) = *((($3 + [56]) + [8]))
	*($3 + [8]) = *($3 + [56])
	CALL $10($2, $1, $5, ($3 + [8]), ($3 + [40]))
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($3 + [48]))
	
.LABEL $label$6
	$4 = *($3 + [128])
	if ( ($4 == 0) ){ goto $label$7 }
	$7 = ($3 + [132])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$10 }
	$2 = *(($3 + [128]))
	goto $label$8 
	
.LABEL $label$9
	$2 = $4
	
.LABEL $label$8
	*($7) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$2
	CALL $48(($3 + [40]))
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9090])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $56($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = $0
	CALL $37(($3 + [32]), $5)
	*($5 + [52]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $38(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $59($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [96])
	$global$0 = $2
	*($2 + [24]) = [8713]
	*($2 + [28]) = CALL $53([8713])
	*($2 + [8]) = *($2 + [24])
	$3 = CALL $2(($2 + [32]), ($2 + [8]))
	*($2 + [16]) = $1
	*($2 + [48]) = (int_64)-5001342339331915776
	*($2 + [40]) = *($3)
	*(($3 = CALL _Znwj([16]))) = $1
	*($3 + [8]) = (int_64)3617214756542218240
	*(($2 + [76])) = [0]
	$4 = ($3 + [16])
	*(($2 + [64])) = $4
	*(($2 + [60])) = $4
	*($2 + [56]) = $3
	*($2 + [68 align=4]) = (int_64)0
	CALL $17(($2 + [68]), [8])
	$3 = *($2 + [68])
	CALL eosio_assert(((int_32)(*(($2 + [72])) - $3) > (int_32)[7]), [9187])
	CALL memcpy($3, ($2 + [16]), [8])
	CALL $18(($2 + [80]), ($2 + [40]))
	$3 = *($2 + [80])
	CALL send_inline($3, (*($2 + [84]) - $3))
	$3 = *($2 + [80])
	if ( ($3 == 0) ){ goto $label$1 }
	*($2 + [84]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$3 = *($2 + [68])
	if ( ($3 == 0) ){ goto $label$2 }
	*(($2 + [72])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$2
	$3 = *($2 + [56])
	if ( ($3 == 0) ){ goto $label$3 }
	*(($2 + [60])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($2 + [96])
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $50($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [56]) = [8494]
	*($5 + [60]) = CALL $53([8494])
	*($5) = *($5 + [56])
	$6 = CALL $2(($5 + [64]), $5)
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $1
	*($5 + [24]) = *($3)
	$4 = CALL $49((($5 + [8]) + [32]), $4)
	*($5 + [80]) = (int_64)-3617168760277827584
	*($5 + [72]) = *($6)
	*(($3 = CALL _Znwj([16]))) = $1
	*($3 + [8]) = (int_64)3617214756542218240
	*((($5 + [72]) + [36])) = [0]
	$6 = ($3 + [16])
	*((($5 + [72]) + [24])) = $6
	*(($5 + [92])) = $6
	*($5 + [88]) = $3
	*($5 + [100 align=4]) = (int_64)0
	$3 = *($4)
	$4 = ( *((($5 + [8]) + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$1 = (CASTING uint_64)(uint_32 $4)
	$4 = ($5 + [100])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $17($4, $3)
	$4 = *(($5 + [104]))
	$3 = *(($5 + [100]))
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($5 + [132]) = $3
	*($5 + [128]) = $3
	*($5 + [136]) = $4
	*($5 + [112]) = ($5 + [128])
	*($5 + [120]) = ($5 + [8])
	CALL $19(($5 + [120]), ($5 + [112]))
	CALL $18(($5 + [128]), ($5 + [72]))
	$3 = *($5 + [128])
	CALL send_inline($3, (*($5 + [132]) - $3))
	$3 = *($5 + [128])
	if ( ($3 == 0) ){ goto $label$4 }
	*($5 + [132]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$4
	$3 = *($5 + [100])
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [104])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$3 = *($5 + [88])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($5 + [92])) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$7
	$global$0 = ($5 + [144])
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	$6 = ($global$0 - [160])
	$global$0 = $6
	*($6 + [72]) = [8713]
	*($6 + [76]) = CALL $53([8713])
	*($6 + [8]) = *($6 + [72])
	$7 = CALL $2(($6 + [80]), ($6 + [8]))
	*((($6 + [16]) + [24])) = *(($3 + [8]))
	*(($6 + [56])) = *(($4 + [8]))
	*($6 + [24]) = $2
	*($6 + [16]) = $1
	*($6 + [64]) = $5
	*($6 + [96]) = (int_64)5378043540636893184
	*($6 + [32]) = *($3)
	*($6 + [48]) = *($4)
	*($6 + [88]) = *($7)
	*(($4 = CALL _Znwj([16]))) = $1
	*($4 + [8]) = (int_64)3617214756542218240
	*(($6 + [124])) = [0]
	$3 = ($4 + [16])
	*((($6 + [88]) + [24])) = $3
	*(($6 + [108])) = $3
	*($6 + [104]) = $4
	*($6 + [116 align=4]) = (int_64)0
	CALL $17(($6 + [116]), [49])
	$4 = *(($6 + [120]))
	$3 = *($6 + [116])
	*($6 + [132]) = $3
	*($6 + [128]) = $3
	*($6 + [136]) = $4
	*($6 + [144]) = ($6 + [128])
	*($6 + [152]) = ($6 + [16])
	CALL $20(($6 + [152]), ($6 + [144]))
	CALL $18(($6 + [128]), ($6 + [88]))
	$4 = *($6 + [128])
	CALL send_inline($4, (*($6 + [132]) - $4))
	$4 = *($6 + [128])
	if ( ($4 == 0) ){ goto $label$1 }
	*($6 + [132]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *($6 + [116])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($6 + [120])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$4 = *($6 + [104])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($6 + [108])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($6 + [160])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [128])
	$global$0 = $4
	*($4 + [64]) = [8192]
	*($4 + [68]) = CALL $53([8192])
	*($4 + [40]) = *($4 + [64])
	CALL require_auth(*(CALL $2(($4 + [72]), ($4 + [40]))))
	CALL eosio_assert(CALL $fimport$5($1), [8559])
	CALL eosio_assert(CALL $fimport$5($2), [8337])
	$5 = CALL $53([8385])
	if ( ($5 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [8922])
	goto $label$3 
	
.LABEL $label$4
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($5 + [8384]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [8967])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$5 }
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)4
	
.LABEL $label$1
	$8 = *($3 + [8])
	CALL eosio_assert(((int_64)$8 == (int_64)$6), [8580])
	$7 = [0]
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $8
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $8
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$11 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$7 = [0]
	
.LABEL $label$7
	CALL eosio_assert($7, [8616])
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8651])
	$5 = CALL $53([8385])
	if ( ($5 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [8922])
	goto $label$14 
	
.LABEL $label$15
	if ( ($5 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = (int_64)0
	
.LOOP $label$16:
	$7 = *(($5 + [8384]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [8967])
	
.LABEL $label$17
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$16 }
	$9 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$9 = (int_64)4
	
.LABEL $label$12
	CALL eosio_assert([1], [9118])
	$6 = (uint_64)$9 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$6 = $8
	$7 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$6 = $8
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $7 ){ goto $label$22 }
	$7 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$7 = [0]
	
.LABEL $label$18
	CALL eosio_assert($7, [9167])
	*(($5 = (($4 + [48]) + [8]))) = *(($3 + [8]))
	*($4 + [48]) = *($3)
	*((($4 + [24]) + [8])) = $9
	$6 = *($5)
	*((($4 + [80]) + [8])) = $6
	*((($4 + [96]) + [8])) = $6
	*((($4 + [8]) + [8])) = $6
	*($4 + [112]) = (int_64)0
	*($4 + [120]) = $9
	*($4 + [24]) = (int_64)0
	$6 = *($4 + [48])
	*($4 + [96]) = $6
	*($4 + [80]) = $6
	*($4 + [8]) = $6
	CALL $13($5, $1, $2, ($4 + [24]), ($4 + [8]))
	$global$0 = ($4 + [128])
}

void .FUNC $13 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [144])
	$global$0 = $5
	*($5 + [56]) = [8713]
	*($5 + [60]) = CALL $53([8713])
	*($5) = *($5 + [56])
	$6 = CALL $2(($5 + [64]), $5)
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*(($5 + [48])) = *(($4 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $1
	*($5 + [80]) = (int_64)-3111238946495230016
	*($5 + [24]) = *($3)
	*($5 + [40]) = *($4)
	*($5 + [72]) = *($6)
	*(($4 = CALL _Znwj([16]))) = $1
	*($4 + [8]) = (int_64)3617214756542218240
	*(($5 + [108])) = [0]
	$3 = ($4 + [16])
	*((($5 + [72]) + [24])) = $3
	*(($5 + [92])) = $3
	*($5 + [88]) = $4
	*($5 + [100 align=4]) = (int_64)0
	CALL $17(($5 + [100]), [48])
	$4 = *(($5 + [104]))
	$3 = *($5 + [100])
	*($5 + [116]) = $3
	*($5 + [112]) = $3
	*($5 + [120]) = $4
	*($5 + [128]) = ($5 + [112])
	*($5 + [136]) = ($5 + [8])
	CALL $21(($5 + [136]), ($5 + [128]))
	CALL $18(($5 + [112]), ($5 + [72]))
	$4 = *($5 + [112])
	CALL send_inline($4, (*($5 + [116]) - $4))
	$4 = *($5 + [112])
	if ( ($4 == 0) ){ goto $label$1 }
	*($5 + [116]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$4 = *($5 + [100])
	if ( ($4 == 0) ){ goto $label$2 }
	*(($5 + [104])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$4 = *($5 + [88])
	if ( ($4 == 0) ){ goto $label$3 }
	*(($5 + [92])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$3
	$global$0 = ($5 + [144])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9187])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[7]), [9187])
	CALL memcpy(*($7), $6, [8])
	$4 = (*($7) + [8])
	*($7) = $4
	$6 = ($6 + [8])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9113])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [9113])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9113])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9113])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9113])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [9113])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [3])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($2 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $50($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [3]))
	$3 = ($2 + ($3 << [3]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [3]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [3])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$6 = [536870911]
	if ( ((uint_32)int_32($5 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [3])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [3]) << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $50($0)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9187])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9187])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9187])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9187])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9187])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9090])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $56($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9113])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9113])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $31(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $59($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $50($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9472]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9476])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9472]) = [1]
	$2 = ($2 << [16])
	*([0] + [9476]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9476])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9476]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9472]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9472]) = [1]
	$3 = ($3 << [16])
	*([0] + [9476]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9476])
	
.LABEL $label$10
	*([0] + [9476]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17864])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17672]
	$3 = (((int_32)$1 * (int_32)[12]) + [17672])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $50 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $50($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0)
{
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $51())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $55($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $56($1)
	
.LABEL $label$2
	*(CALL $51()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $56(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $59($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $56 (int_32 $0)
{
	return CALL $57([9480], $0)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $58($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8229])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}