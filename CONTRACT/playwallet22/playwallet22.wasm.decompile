(data (i32.const 8192) "|\00")
(data (i32.const 8194) ",\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8282) "unfind SETTING_ID\00")
(data (i32.const 8300) "not found accessControl\00")
(data (i32.const 8324) "accessControl not found \00")
(data (i32.const 8349) "eosio.token\00")
(data (i32.const 8361) "transfer\00")
(data (i32.const 8370) "playwallet11\00")
(data (i32.const 8383) "resultKey not found\00")
(data (i32.const 8403) "gamebet reward DIR\00")
(data (i32.const 8422) "user account does not exist\00")
(data (i32.const 8451) ":\00")
(data (i32.const 8453) "gameid: \00")
(data (i32.const 8462) "directorwal1\00")
(data (i32.const 8475) "playwallet21\00")
(data (i32.const 8488) "directorwal3\00")
(data (i32.const 8501) "directorwal2\00")
(data (i32.const 8514) "playbancor11\00")
(data (i32.const 8527) "playbancor22\00")
(data (i32.const 8540) "invalid symbol name\00")
(data (i32.const 8560) "invalid supply\00")
(data (i32.const 8575) "max-supply must be positive\00")
(data (i32.const 8603) "token with symbol already exists\00")
(data (i32.const 8636) "amount must be positive\00")
(data (i32.const 8660) "no balance object found\00")
(data (i32.const 8684) "overdrawn balance\00")
(data (i32.const 8702) "not found issuer\00")
(data (i32.const 8719) "refund request not found\00")
(data (i32.const 8744) "refund is not available yet\00")
(data (i32.const 8772) "invalid  account\00")
(data (i32.const 8789) "dividend\00")
(data (i32.const 8798) "memo has more than 256 bytes\00")
(data (i32.const 8827) "token with symbol does not exist, create token before issue\00")
(data (i32.const 8887) "invalid quantity\00")
(data (i32.const 8904) "must issue positive quantity\00")
(data (i32.const 8933) "symbol precision mismatch\00")
(data (i32.const 8959) "quantity exceeds available supply\00")
(data (i32.const 8993) "sell dir\00")
(data (i32.const 9002) "issue\00")
(data (i32.const 9008) "gamebet brokerage gameid\00")
(data (i32.const 9033) "memo == null\00")
(data (i32.const 9046) "cannot transfer to self\00")
(data (i32.const 9070) "to account does not exist\00")
(data (i32.const 9096) "unfind statstable keys\00")
(data (i32.const 9119) "must transfer positive quantity\00")
(data (i32.const 9151) "selldir  user1 account does not exist\00")
(data (i32.const 9189) "selldir invalid quantity\00")
(data (i32.const 9214) "selldir must transfer positive quantity\00")
(data (i32.const 9254) "selldir symbol precision mismatch\00")
(data (i32.const 9288) "selldir no balance object found\00")
(data (i32.const 9320) "selldir overdrawn balance\00")
(data (i32.const 9346) "accountbases not found\00")
(data (i32.const 9369) "playwallet22\00")
(data (i32.const 9382) "sell dir, reserve fund pay out\00")
(data (i32.const 9413) "sell dir, exchange reserve fund payout\00")
(data (i32.const 9452) "sell dir fee to player dividend\00")
(data (i32.const 9484) "outEos is zero\00")
(data (i32.const 9499) "sell dir, get eos\00")
(data (i32.const 9517) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 9581) "0123456789\00")
(data (i32.const 9592) "write\00")
(data (i32.const 9598) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9647) "bancor contract closed\00")
(data (i32.const 9670) "attempt to add asset with different symbol\00")
(data (i32.const 9713) "addition underflow\00")
(data (i32.const 9732) "addition overflow\00")
(data (i32.const 9752) "\1c&\00\00")
(data (i32.const 9756) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 9789) "attempt to subtract asset with different symbol\00")
(data (i32.const 9837) "subtraction underflow\00")
(data (i32.const 9859) "subtraction overflow\00")
(data (i32.const 9880) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9931) "error reading iterator\00")
(data (i32.const 9954) "read\00")
(data (i32.const 9959) "cannot create objects in table of another contract\00")
(data (i32.const 10010) "cannot pass end iterator to modify\00")
(data (i32.const 10045) "object passed to modify is not in multi_index\00")
(data (i32.const 10091) "cannot modify objects in table of another contract\00")
(data (i32.const 10142) "updater cannot change primary key when modifying an object\00")
(data (i32.const 10201) "cannot pass end iterator to erase\00")
(data (i32.const 10235) "cannot increment end iterator\00")
(data (i32.const 10265) "object passed to erase is not in multi_index\00")
(data (i32.const 10310) "cannot erase objects in table of another contract\00")
(data (i32.const 10360) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10413) "get\00")
(data (i32.const 18832) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00\f8?")
(data (i32.const 18848) "\00\00\00\00\00\00\00\00\06\d0\cfC\eb\fdL>")
(data (i32.const 18864) "\00\00\00\00\00\00\00\00\00\00\00@\03\b8\e2?")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "db_store_i64" (func $fimport$4 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "db_update_i64" (func $fimport$6 (param i32 i64 i32 i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_idx64_store" (func $fimport$8 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "is_account" (func $fimport$11 (param i64) (result i32)))
(import "env" "memset" (func $fimport$12 (param i32 i32 i32) (result i32)))
(import "env" "cancel_deferred" (func $fimport$13 (param i32) (result i32)))
(import "env" "send_deferred" (func $fimport$14 (param i32 i64 i32 i32 i32)))
(import "env" "require_recipient" (func $fimport$15 (param i64)))
(import "env" "action_data_size" (func $fimport$16 (result i32)))
(import "env" "read_action_data" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$18))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "db_idx64_find_primary" (func $fimport$21 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$22 (param i32)))
(import "env" "memmove" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$25 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$26 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$27 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$28 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$30 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$31 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$32 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$33 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$34 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$35 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$38 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$39 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$40 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$41 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$42 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $82))
(export "_ZdlPv" (func $115))
(export "_Znwj" (func $113))
(export "_Znaj" (func $114))
(export "_ZdaPv" (func $116))
(table $0 15 15 anyfunc)
(elem (i32.const 1) $59 $73 $20 $74 $62 $53 $58 $30 $71 $22 $14 $44 $78 $75)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18880))
(global $global$2 i32 (i32.const 18880))


int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9592])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9592])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9592])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9592])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9592])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9954])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $92(*($1), ($0 + [32]))
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $118(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $118(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $92(*($1), ($3 + [24]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy(($3 + [48]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $118($2, ($1 + [24]))
	$7 = *($1 + [48])
	$8 = *($1 + [40])
	$1 = *($0 + [4])
	$9 = *($1 + [4])
	$0 = (*(*($0)) + int_32($9 >> [1]))
	$1 = *($1)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$9 = CALL $118(($2 + [16]), $6)
	CALL void $0((int_32 $5), (int_64 $4), (int_64 $3), (int_64 $9), (int_32 $8), (int_64 $7), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($6) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($6) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($6 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $140($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1397703940
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [9598])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8540])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [72]) = ($4 + $5)
	*($3 + [64]) = $4
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [9954])
	CALL memcpy(($3 + [8]), $4, [8])
	$1 = ($5 & [-8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [9954])
	CALL memcpy((($3 + [8]) + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[16]), [9954])
	CALL memcpy((($3 + [8]) + [16]), ($4 + [16]), [8])
	*($3 + [68]) = ($4 + [24])
	CALL $92(($3 + [64]), (($3 + [8]) + [24]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $143($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $93(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [80])
	return [1]
}

int_32 .FUNC $91 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [296]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [300])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [296]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [248]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [252])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [248]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [40]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [44])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [40]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $112($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $122($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $122($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $117($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $118(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*(*($0)) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $118(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $123 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $143($0)
	
.LABEL $label$1
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $130 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $131 (int_32 $0)
{
}

int_64 .FUNC $132 (float_64 $0)
{
	return (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $0) & (int_64)9223372036854775807))
}

int_64 .FUNC $133 (float_64 $0, float_64 $1)
{
	float_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	float_64 $13
	float_64 $14
	float_64 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	float_64 $20
	$2 = (float_64)1
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (CASTING int_64)(float_64 $1)
	$4 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	$5 = ($4) & [2147483647]
	if ( (($5) | $6) == 0) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 $0)
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = (CASTING uint_32)(uint_64 $7)
	if ( $9 ){ goto $label$2 }
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = ($8 & [2147483647])
	if ( ((uint_32)$10 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( (((int_32)$9 != (int_32)[0]) & ((int_32)$10 == (int_32)[2146435072])) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[2146435072]) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$3 }
	
.LABEL $label$4
	return ((float_64)$0 + (float_64)$1)
	
.LABEL $label$3
	$11 = [0]
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$8 }
	$11 = [2]
	if ( ((uint_32)$5 > (uint_32)[1128267775]) ){ goto $label$8 }
	$11 = [0]
	if ( ($5 <= [1072693248]) ){ goto $label$8 }
	$12 = uint_32($5 >> [20])
	if ( ($5 <= [1094713344]) ){ goto $label$7 }
	$11 = ([1075] - $12)
	$12 = uint_32($6 >> $11)
	$11 = ( ([2] - ($12 & [1])) ? [0] : ((int_32)($12 << $11) == (int_32)$6) )
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$11 = [0]
	if ( $6 ){ goto $label$5 }
	$6 = ([1043] - $12)
	$11 = uint_32($5 >> $6)
	$11 = ( ([2] - ($11 & [1])) ? [0] : ((int_32)($11 << $6) == (int_32)$5) )
	
.LABEL $label$6
	if ( ((int_32)$5 != (int_32)[2146435072]) ){ goto $label$12 }
	if ( ((($10 + [-1072693248]) | $9) == 0) ){ goto $label$1 }
	if ( ($10 <= [1072693248]) ){ goto $label$11 }
	return ( $1 ? (float_64)0 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)[1072693248]) ){ goto $label$13 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	return $0
	
.LABEL $label$13
	if ( ((int_32)$4 != (int_32)[1073741824]) ){ goto $label$10 }
	return ((float_64)$0 * (float_64)$0)
	
.LABEL $label$11
	return ( (float_64)0 ? !(float_64)$1 : ((int_32)$4 > (int_32)[-1]) )
	
.LABEL $label$10
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)$4 != (int_32)[1071644672]) ){ goto $label$5 }
	return CALL $135($0)
	
.LABEL $label$9
	return ((float_64)(float_64)1 / (float_64)$0)
	
.LABEL $label$5
	$2 = CALL $132($0)
	if ( $9 ){ goto $label$26 }
	if ( ($10 == 0) ){ goto $label$25 }
	if ( ((int_32)($10 | [1073741824]) == (int_32)[2146435072]) ){ goto $label$25 }
	
.LABEL $label$26
	$13 = (float_64)1
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$22 }
	if ( ((int_32)$11 == (int_32)[1]) ){ goto $label$24 }
	if ( $11 ){ goto $label$22 }
	$1 = (float_64)
	return ((float_64)$1($0 - $0)) / (float_64)$1)
	
.LABEL $label$25
	$2 = ( ((float_64)(float_64)1 / (float_64)$2) ? $2 : ((int_32)$4 < (int_32)[0]) )
	if ( ((int_32)$8 > (int_32)[-1]) ){ goto $label$1 }
	if ( (($11 | ($10 + [-1072693248])) == 0) ){ goto $label$23 }
	return ( !(float_64)$2 ? $2 : ((int_32)$11 == (int_32)[1]) )
	
.LABEL $label$24
	$13 = (float_64)-1
	if ( ((uint_32)$5 >= (uint_32)[1105199105]) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$1 = (float_64)
	return ((float_64)$1($2 - $2)) / (float_64)$1)
	
.LABEL $label$22
	if ( ($5 <= [1105199105]) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ($5 <= [1139802113]) ){ goto $label$27 }
	if ( ((uint_32)$10 > (uint_32)[1072693247]) ){ goto $label$19 }
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$27
	if ( ((uint_32)$10 > (uint_32)[1072693246]) ){ goto $label$18 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 < (int_32)[0]) )
	
.LABEL $label$20
	$5 = [0]
	if ( ((uint_32)$10 > (uint_32)[1048575]) ){ goto $label$29 }
	$2 = ((float_64)$2 * (float_64)(float_64)9007199254740992)
	$10 = (CASTING uint_32)(uint_64 (uint_64)(CASTING int_64)(float_64 $2) >> (uint_64)(int_64)32))
	$4 = [-53]
	goto $label$28 
	
.LABEL $label$29
	$4 = [0]
	
.LABEL $label$28
	$6 = ($10 & [1048575])
	$8 = ($6 | [1072693248])
	$4 = ((int_32($10 >> [20]) + $4) + [-1023])
	if ( ($6 <= [235663]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[767610]) ){ goto $label$17 }
	$5 = [1]
	goto $label$16 
	
.LABEL $label$19
	return ( (float_64)inf ? (float_64)0 : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$18
	if ( ($10 <= [1072693249]) ){ goto $label$15 }
	return ( ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300) ? ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300) : ((int_32)$4 > (int_32)[0]) )
	
.LABEL $label$17
	$8 = ($8 + [-1048576])
	$4 = ($4 + [1])
	
.LABEL $label$16
	$2 = (CASTING float_64)(int_32 $4)
	$16 = ((float_64)*(($6 + [18848])) + (float_64)((float_64)((float_64)(float_64))($2 - (float_64))($0 - $17)) * (float_64)(float_64)0.9617966939259756) + (float_64)((float_64)$0 * (float_64)(float_64)-7.028461650952758e-09)
	$2 = ((float_64)((float_64)$15 * (float_64)$0) + (float_64)((float_64)$2 * (float_64)(float_64))($16 - (float_64))(((float_64)$0 + (float_64)(float_64)-3) - $19))
	$0 = ((float_64)$2 * (float_64)$2)
	$20 = (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (((int_32($8 >> [1]) | [536870912]) + ($5 << [18])) + [524288])) << (int_64)32))
	$15 = ((float_64)$18 * (float_64)(float_64))((float_64))($17 - ((float_64)$0 * (float_64)$20)) - ((float_64)$0 * (float_64)(float_64))($15 - (float_64))($20 - $16)
	$16 = ((float_64)((float_64)((float_64)$2 + (float_64)$0) * (float_64)$15))
	$19 = ((float_64)$0 * (float_64)$0)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$19 + (float_64)(float_64)3) + (float_64)$16)) + (float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.20697501780033842) + (float_64)(float_64)0.23066074577556175)) + (float_64)(float_64)0.272728123808534)) + (float_64)(float_64)0.33333332981837743)) + (float_64)(float_64)0.4285714285785502)) + (float_64)(float_64)0.5999999999999946))))
	$18 = ((float_64)(float_64)1 / (float_64)((float_64)$16 + (float_64)$15))
	$16 = *(($6 + [18832]))
	$15 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)(CASTING int_64)(float_64 $2) & (int_64)4294967295)))
	$17 = (float_64)
	$2 = ((float_64)$17($15 - $16)) * (float_64)$18
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 $2)) & (int_64)-4294967296)
	$17 = ((float_64)$0) * (float_64)$0
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$17 & (int_64)-4294967296))))
	$15 = ((float_64)$0 + (float_64)$2)
	$6 = ($5 << [3])
	$14 = *(($6 + [18864]))
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)((float_64)$14 + (float_64)((float_64)$15)) & (int_64)-4294967296))) * (float_64)(float_64)0.9617967009544373)
	$14 = (float_64))((float_64))((float_64))($0 + (float_64)$16)))) + (float_64)$2)) & (int_64)-4294967296))) - $2) - $14) - $15)
	goto $label$14 
	
.LABEL $label$15
	$16 = ((float_64)((float_64)$0 * (float_64)(float_64)1.9259629911266175e-08) + (float_64)((float_64)((float_64)((float_64)$0 * (float_64)$0) * (float_64)(float_64))((float_64)0.5 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)-0.25) + (float_64)(float_64)0.3333333333333333)))) * (float_64)(float_64)-1.4426950408889634)
	$0 = ((float_64)$2 + (float_64)(float_64)-1)
	$2 = ((float_64)$0 * (float_64)(float_64)1.4426950216293335)
	$0 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 ((float_64)$2 + (float_64)$16))) & (int_64)-4294967296)
	$14 = (float_64))($0) - $2)
	
.LABEL $label$14
	$1 = ((float_64)((float_64)(float_64))($16 - $14) * (float_64)$1) + (float_64)((float_64)(float_64))($1 - $15) * (float_64)$0
	$15 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$2 = ((float_64)$0 * (float_64)$15)
	$0 = ((float_64)$2 + (float_64)$1)
	$3 = (CASTING int_64)(float_64 $0)
	$5 = (CASTING uint_32)(uint_64 $3)))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ((int_32)$8) < (int_32)[1083179008]) ){ goto $label$34 }
	if ( ((($8 + [-1083179008]) | $5) == 0) ){ goto $label$33 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$34
	if ( (($8 & [2147482624]) <= [1083231232]) ){ goto $label$31 }
	if ( ((($8 + [1064252416]) | $5) == 0) ){ goto $label$32 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$33
	if ( ((int_32)((float_64)((float_64)$1 + (float_64)(float_64)8.008566259537294e-17) > (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) ){ goto $label$31 }
	return ((float_64)((float_64)$13 * (float_64)(float_64)1.e+300) * (float_64)(float_64)1.e+300)
	
.LABEL $label$32
	if ( (((int_32)((float_64)$1 <= (float_64)(float_64))($0 - $2)) ^ (int_32)[1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	$5 = [0]
	$6 = ($8 & [2147483647])
	if ( ($6 <= [1071644673]) ){ goto $label$35 }
	$4 = (uint_32($6 >> [20]) & [2047])
	$6 = (uint_32([1048576] >> (uint_32($6 >> [20]) + [-1022])) + $8)
	$5 = uint_32((($6 & [1048575]) | [1048576]) >> ([1043] - $4))
	$5 = ( ([0] - $5) ? $5 : ((int_32)$8 < (int_32)[0]) )
	$2 = (float_64)
	$3 = (CASTING int_64)(float_64 ((float_64)$1 + (float_64)$2($2 - (CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 (int_32([-1048576] >> ($4 + [-1023])) & $6)) << (int_64)32))))))
	
.LABEL $label$35
	$0 = (float_64)
	$0 = ((float_64)$1 * (float_64)$1)
	$2 = ((float_64)((float_64)(float_64))($1 - (float_64))($0 - $2)) * (float_64)(float_64)0.6931471805599453
	$0 = (CASTING float_64)(int_64 ((int_64)$3 & (int_64)-4294967296))
	$15 = ((float_64)$0 * (float_64)(float_64)0.6931471824645996)
	$1 = ((float_64)$15 + (float_64)$2 + (float_64)((float_64)$0 * (float_64)(float_64)-1.904654299957768e-09))
	$1 = ((float_64)(float_64))($1)
	$3 = (CASTING int_64)(float_64 $1 - (float_64))(((float_64)((float_64)$1 * (float_64)$0($1 - ((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)4.1381367970572385e-08) + (float_64)(float_64)-1.6533902205465252e-06)) + (float_64)(float_64)6.613756321437934e-05)) + (float_64)(float_64)-2.7777777777015593e-03)) + (float_64)(float_64)0.16666666666666602))))) / (float_64)((float_64)$0 + (float_64)(float_64)-2)) - ((float_64)$0($2 - (float_64))($1 - $15))
	$8 = (($5 << [20]) + (CASTING uint_32)(uint_64 (uint_64)$3 + (float_64)((float_64)$1 * (float_64)$0)))
	if ( ((int_32)$8 + (float_64)(float_64)1)))) >> (uint_64)(int_64)32)))) > (int_32)[1048575]) ){ goto $label$36 }
	return ((float_64)$13 * (float_64)CALL $134($1, $5))
	
.LABEL $label$36
	return ((float_64)$13 * (float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)32) | (int_64)((int_64)$3 & (int_64)4294967295))))
	
.LABEL $label$30
	return ((float_64)((float_64)$13 * (float_64)(float_64)1e-300) * (float_64)(float_64)1e-300)
	
.LABEL $label$1
	return $2
}

int_64 .FUNC $134 (float_64 $0, int_32 $1)
{
	if ( ((int_32)$1 < (int_32)[1024]) ){ goto $label$4 }
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	if ( ((int_32)$1 < (int_32)[2047]) ){ goto $label$3 }
	$1 = ($1 + [-2046])
	$1 = ( $1 ? [1023] : ((int_32)$1 < (int_32)[1023]) )
	$0 = ((float_64)$0 * (float_64)(float_64)8988465674311579538646525e283)
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$1 > (int_32)[-1023]) ){ goto $label$1 }
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	if ( ((int_32)$1 > (int_32)[-1992]) ){ goto $label$2 }
	$1 = ($1 + [1938])
	$1 = ( $1 ? [-1022] : ((int_32)$1 > (int_32)[-1022]) )
	$0 = ((float_64)$0 * (float_64)(float_64)2.004168360008973e-292)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($1 + [-1023])
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 + [969])
	
.LABEL $label$1
	return ((float_64)$0 * (float_64)(CASTING float_64)(int_64 ((int_64)(CASTING uint_64)(uint_32 ($1 + [1023])) << (int_64)52)))
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_64 .FUNC $136 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$4 = (int_64)0
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$4 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64))(((int_64)$4 * (int_64)10) - (CASTING int_64)(int_32 $1))
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $4 ? (int_64))((int_64)0 - $4) : $2 )
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $121($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $38 (int_32 $0, int_32 $1, float_64 $2)
{
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = (int_64)1194249984
	$4 = (int_64)4607182418800017408
	if ( ((float_64)$2 < (float_64)(float_64)1194249984) ){ goto $label$1 }
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)1194249984) ^ (int_32)[1]) ){ goto $label$2 }
	if ( (((float_64)$2 < (float_64)(float_64)2031799726) == 0) ){ goto $label$2 }
	$3 = (int_64)2031799726
	$4 = (int_64)4605380978949069210
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)2031799726) ^ (int_32)[1]) ){ goto $label$3 }
	if ( (((float_64)$2 < (float_64)(float_64)3148519012) == 0) ){ goto $label$3 }
	$3 = (int_64)3148519012
	$4 = (int_64)4604480259023595110
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)3148519012) ^ (int_32)[1]) ){ goto $label$4 }
	if ( (((float_64)$2 < (float_64)(float_64)4570036242) == 0) ){ goto $label$4 }
	$3 = (int_64)4570036242
	$4 = (int_64)4603579539098121011
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)4570036242) ^ (int_32)[1]) ){ goto $label$5 }
	if ( (((float_64)$2 < (float_64)(float_64)6319977787) == 0) ){ goto $label$5 }
	$3 = (int_64)6319977787
	$4 = (int_64)4602678819172646912
	goto $label$1 
	
.LABEL $label$5
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)28377015347) ^ (int_32)[1]) ){ goto $label$6 }
	if ( (((float_64)$2 < (float_64)(float_64)17026209208) == 0) ){ goto $label$6 }
	$3 = (int_64)17026209208
	$4 = (int_64)4600877379321698714
	goto $label$1 
	
.LABEL $label$6
	$3 = (int_64)0
	if ( ((int_32)((float_64)$2 >= (float_64)(float_64)17026209208) ^ (int_32)[1]) ){ goto $label$1 }
	$3 = (int_64)100000000000000
	$4 = (int_64)4596373779694328218
	
.LABEL $label$1
	CALL eosio_assert([1], [9598])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $7
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $7
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$11 }
	$8 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	
.LABEL $label$7
	CALL eosio_assert($8, [8540])
	*($0 + [8]) = $3
	*($0) = $4
	*(($0 + [16])) = (int_64)1397703940
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $121($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = CALL _Znwj([16])
	*($0 + [8]) = $3
	*($0) = (int_64)55834574865
	CALL memset($3, [46], [13])
	*($3 + [13]) = [0]
	$5 = *($1)
	$1 = (CASTING uint_32)(uint_64 $5)
	$4 = *([0] + [9752])
	*($3 + [12]) = *(($4 + ($1 & [15])))
	*($3 + [11]) = *(($4 + (uint_32($1 >> [4]) & [31])))
	*($3 + [10]) = *(($4 + (uint_32($1 >> [9]) & [31])))
	*($3 + [9]) = *(($4 + (uint_32($1 >> [14]) & [31])))
	*($3 + [8]) = *(($4 + (uint_32($1 >> [19]) & [31])))
	*($3 + [7]) = *(($4 + (uint_32($1 >> [24]) & [31])))
	*($3 + [6]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)29)) & [31])))
	*($3 + [5]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)34)) & [31])))
	*($3 + [4]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)39)) & [31])))
	*($3 + [3]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)44)) & [31])))
	*($3 + [2]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)49)) & [31])))
	*($3 + [1]) = *(($4 + ((CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)54)) & [31])))
	*(*($0 + [8])) = *(($4 + (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)59))))
	$4 = ($3 & [1])
	$3 = *($0)
	$3 = ( *($0 + [4]) ? uint_32($3 >> [1]) : $4 )
	$1 = ( *($0 + [8]) ? ($0 + [1]) : $4 )
	
.LOOP $label$2:
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = ($1 + $3)
	$6 = ($3 + [-1])
	$3 = $6
	if ( ((int_32)*(($4 + [-1])) == (int_32)[46]) ){ goto $label$2 }
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	CALL $119($2, $0, [0], ($6 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$4 }
	*($0) = [0]
	goto $label$3 
	
.LABEL $label$4
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$3
	CALL $122($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $123($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9931])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $140($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $108(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $43(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $40 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$6 = ($global$0 - [128])
	$global$0 = $6
	*((($6 + [8]) + [32])) = [0]
	*($6 + [24]) = (int_64)-1
	*($6 + [32]) = (int_64)0
	$7 = *($0)
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	$8 = CALL db_find_i64($7, $1, (int_64)-4454364709896676176, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $41(($6 + [8]), $8)
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($6 + [8])), [9880])
	$2 = *($0)
	CALL eosio_assert([1], [10010])
	CALL eosio_assert(((int_32)*($8 + [32]) == (int_32)($6 + [8])), [10045])
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)CALL $fimport$3()), [10091])
	*($8 + [8]) = (CASTING uint_64)(uint_32 ((int_64)$4 > (int_64)0))
	*($8 + [16]) = $4
	*($8 + [24]) = ((int_64)*($8 + [24]) + (int_64)$5)
	$1 = *($8)
	CALL eosio_assert([1], [10142])
	*($6 + [96]) = (($6 + [48]) + [32])
	*($6 + [92]) = ($6 + [48])
	*($6 + [88]) = ($6 + [48])
	*($6 + [104]) = ($6 + [88])
	*($6 + [116]) = ($8 + [8])
	*($6 + [112]) = $8
	*($6 + [120]) = ($8 + [16])
	*($6 + [124]) = ($8 + [24])
	CALL $42(($6 + [112]), ($6 + [104]))
	CALL db_update_i64(*($8 + [36]), $2, ($6 + [48]), [32])
	$8 = (($6 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$3 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$9 = *($6 + [32])
	if ( $9 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$10 = *($0)
	CALL eosio_assert(((int_64)$7 == (int_64)CALL $fimport$3()), [9959])
	*(($8 = CALL _Znwj([48])) + [32]) = ($6 + [8])
	*($8 + [8]) = (CASTING uint_64)(uint_32 ((int_64)$4 > (int_64)0))
	*($8) = $2
	*($8 + [16]) = $4
	*($8 + [24]) = $5
	*($6 + [96]) = (($6 + [48]) + [32])
	*($6 + [92]) = ($6 + [48])
	*($6 + [88]) = ($6 + [48])
	*($6 + [104]) = ($6 + [88])
	*($6 + [116]) = ($8 + [8])
	*($6 + [112]) = $8
	*($6 + [120]) = ($8 + [16])
	*($6 + [124]) = ($8 + [24])
	CALL $42(($6 + [112]), ($6 + [104]))
	$1 = *($8)
	$9 = CALL db_store_i64(*((($6 + [8]) + [8])), (int_64)-4454364709896676176, $10, $1, ($6 + [48]), [32])
	*($8 + [36]) = $9
	$0 = (($6 + [8]) + [16])
	if ( (uint_64)($1 <= *($0)) ){ goto $label$5 }
	*($0) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($6 + [112]) = $8
	$1 = *($8)
	*($6 + [48]) = $1
	*($6 + [88]) = $9
	$11 = ($6 + [36])
	$0 = *($11)
	if ( ((uint_32)$0 >= (uint_32)*(($6 + [40]))) ){ goto $label$7 }
	*($0 + [8]) = $1
	*($0 + [16]) = $9
	*($6 + [112]) = [0]
	*($0) = $8
	*($11) = ($0 + [24])
	$8 = *($6 + [112])
	*($6 + [112]) = [0]
	if ( $8 ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$7
	CALL $43(($6 + [32]), ($6 + [112]), ($6 + [48]), ($6 + [88]))
	$8 = *($6 + [112])
	*($6 + [112]) = [0]
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$6
	CALL _ZdlPv($8)
	
.LABEL $label$3
	$9 = *($6 + [32])
	if ( ($9 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$11 = ($6 + [36])
	$8 = *($11)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = ($8 + [-24])
	$0 = *($8)
	*($8) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$10 }
	$8 = *(($6 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $9
	
.LABEL $label$8
	*($11) = $9
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($6 + [128])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	CALL eosio_assert([1], [9598])
	$6 = (int_64)5392708
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8540])
	*(($1 + [16])) = (int_64)1380533252
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [9598])
	$6 = (int_64)5392708
	$7 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$6 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8540])
	*(($1 + [32])) = (int_64)1380533252
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = [0]
	*($1 + [72]) = [0]
	*($1 + [48]) = *(*($4 + [4]))
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	$9 = $2
	$7 = ($9 + [-80])
	$global$0 = $7
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($9 + [-8])
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($1 + [8])
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [24])
	*($3 + [44]) = ($1 + [40])
	*($3 + [48]) = ($1 + [48])
	*($3 + [52]) = ($1 + [56])
	*($3 + [56]) = ($1 + [64])
	*($3 + [60]) = ($1 + [72])
	CALL $45(($3 + [32]), ($3 + [24]))
	$6 = *($1)
	*($1 + [80]) = CALL db_store_i64(*($5 + [8]), (int_64)3607749778856088576, *(*($0 + [8])), $6, $7, [72])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$11 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($3 + [64])
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [9598])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8540])
	*(($1 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9598])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8540])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8540])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8540])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9592])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9592])
	CALL memcpy(*($0 + [4]), $3, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $44 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	float_64 $24
	float_64 $25
	float_64 $26
	float_64 $27
	float_64 $28
	float_64 $29
	int_32 $30
	float_64 $31
	float_64 $32
	float_64 $33
	float_64 $34
	float_64 $35
	float_64 $36
	$7 = ($global$0 - [704])
	$global$0 = $7
	*($7 + [552]) = $2
	CALL $3(($7 + [536]), $4)
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [9647])
	$2 = (int_64)0
	$8 = (int_64)59
	$4 = [8370]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($4)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($9)
	CALL eosio_assert(CALL eosio_assert1($3), [8422])
	*($7 + [528]) = $3
	*(($7 + [520])) = [0]
	*($7 + [512]) = (int_64)0
	$4 = CALL $139([8450])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$15 }
	*($7 + [512]) = ($4 << [1])
	$11 = (($7 + [512]) | [1])
	if ( $4 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$12 = (($4 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($7 + [512]) = ($12 | [1])
	*($7 + [520]) = $11
	*($7 + [516]) = $4
	
.LABEL $label$14
	CALL memcpy($11, [8450], $4)
	
.LABEL $label$13
	*(($11 + $4)) = [0]
	*($7 + [472]) = (int_64)4572414629676717179
	*($7 + [464]) = (int_64)4576918229304087675
	*($7 + [480]) = (int_64)4571261708172110332
	*($7 + [488]) = (int_64)4569063951553953530
	*($7 + [496]) = (int_64)4566758108544739836
	*($7 + [504]) = (int_64)4562254508917369340
	*($7 + [424]) = (int_64)4572414629676717179
	*($7 + [416]) = (int_64)4562254508917369340
	*($7 + [432]) = (int_64)4573567551181324026
	*($7 + [440]) = (int_64)4574720472685930873
	*($7 + [448]) = (int_64)4575765307799480828
	*($7 + [456]) = (int_64)4576341768551784251
	CALL eosio_assert([1], [9598])
	$2 = (int_64)5392708
	$4 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$2 = $8
	$11 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$2 = $8
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $11 ){ goto $label$20 }
	$11 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$11 = [0]
	
.LABEL $label$16
	CALL eosio_assert($11, [8540])
	$14 = *($7 + [540])
	$13 = *($7 + [536])
	if ( ((int_32)$13 == (int_32)$14) ){ goto $label$11 }
	$15 = ((int_64)1380533252 == (int_64)1380533252)
	$16 = (($7 + [344]) + [24])
	$17 = (($7 + [560]) + [72])
	$18 = (($7 + [384]) + [16])
	$19 = ($0 + [176])
	$20 = (($7 + [344]) + [32])
	$21 = (($7 + [344]) + [28])
	$22 = ($7 + [668])
	$23 = ($7 + [676])
	$24 = (float_64)0
	$25 = (float_64)0
	$26 = (float_64)0
	$27 = (float_64)0
	$28 = (float_64)0
	$29 = (float_64)0
	$8 = (int_64)0
	
.LOOP $label$21:
	CALL eosio_assert([1], [9598])
	$2 = (int_64)5392708
	$4 = [0]
	
.LOOP $label$23:
	$30 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$10 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$2 = $10
	$30 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$2 = $10
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $11 ){ goto $label$25 }
	$30 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$23 }
	
.LABEL $label$22
	CALL eosio_assert($30, [8540])
	$10 = (int_64)0
	*($7 + [408]) = (int_64)0
	$9 = *($13 + [24])
	$4 = ((int_64)$9 < (int_64)2)
	$2 = *(($13 + ( [0] ? [8] : $4 )))
	*($7 + [408]) = $2
	$31 = (CASTING float_64)(int_64 $2)
	if ( (((float_64)$31 > (float_64)(float_64)0) == 0) ){ goto $label$26 }
	CALL $32(($7 + [384]), $0, $31, *(((($7 + [464]) + ((CASTING uint_32)(uint_64 $9) << [3])) + [-8])))
	$31 = *($7 + [384])
	if ( ((float_64)(float_64)|$31| < (float_64)(float_64)9223372036854775808) ){ goto $label$28 }
	$10 = (int_64)-9223372036854775808
	goto $label$27 
	
.LABEL $label$28
	$10 = (Rounds 0)($31)
	
.LABEL $label$27
	$32 = ( (float_64)0.02 ? (float_64)0.015 : $4 )
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$2 = (int_64)5392708
	$4 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$9 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$2 = $9
	$11 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$2 = $9
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $11 ){ goto $label$33 }
	$11 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$11 = [0]
	
.LABEL $label$29
	CALL eosio_assert($11, [8540])
	CALL eosio_assert([1], [9670])
	CALL eosio_assert(((int_64)$10 > (int_64)-4611686018427387904), [9713])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [9732])
	$2 = *(($13 + [24]))
	$34 = ((float_64)$31 * (float_64)*(((($7 + [416]) + ((CASTING uint_32)(uint_64 $2) << [3])) + [-8])))
	$33 = *($18)
	$32 = *((($7 + [384]) + [8]))
	$31 = *($7 + [408])
	$35 = (float_64))((float_64))((float_64))(((float_64)$32 * (float_64)$31) - $32) - $33) - $34)
	if ( ((int_64)$2 != (int_64)1) ){ goto $label$35 }
	$36 = ( (float_64)0 ? $31 : (int_64)($6 == 0) )
	$31 = ((float_64)$31 * (float_64)(float_64)0.002)
	$35 = (float_64))((float_64))($35 - $31) - $36)
	$29 = ((float_64)$29 + (float_64)$36)
	goto $label$34 
	
.LABEL $label$35
	$31 = ((float_64)$31 * (float_64)(float_64)0.001)
	$35 = (float_64))($35 - $31)
	
.LABEL $label$34
	*($19) = ((float_64)$31 + (float_64)*($19))
	*(($11 = (($7 + [344]) + [16]))) = (int_64)-1
	*($16) = (int_64)0
	*($20) = [0]
	$2 = *($7 + [528])
	*((($7 + [344]) + [8])) = $2
	$9 = *($0)
	*($7 + [344]) = $9
	$4 = CALL db_find_i64($9, $2, (int_64)3607749778856088576, $2)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$39 }
	$4 = CALL $23(($7 + [344]), $4)
	CALL eosio_assert(((int_32)*($4 + [76]) == (int_32)($7 + [344])), [9880])
	CALL eosio_assert([1], [10010])
	CALL eosio_assert(((int_32)*($4 + [76]) == (int_32)($7 + [344])), [10045])
	CALL eosio_assert(((int_64)*($7 + [344]) == (int_64)CALL $fimport$3()), [10091])
	*($4 + [48]) = ((float_64)*($7 + [408]) + (float_64)*($4 + [48]))
	$2 = *($4)
	CALL eosio_assert([1], [10142])
	*((($7 + [640]) + [8])) = $17
	*($7 + [644]) = ($7 + [560])
	*($7 + [640]) = ($7 + [560])
	*($7 + [96]) = ($7 + [640])
	*((($7 + [656]) + [8])) = ($4 + [24])
	*($22) = ($4 + [40])
	*((($7 + [656]) + [16])) = ($4 + [48])
	*($23) = ($4 + [56])
	*((($7 + [656]) + [24])) = ($4 + [64])
	*((($7 + [656]) + [28])) = ($4 + [72])
	*($7 + [660]) = ($4 + [8])
	*($7 + [656]) = $4
	CALL $45(($7 + [656]), ($7 + [96]))
	CALL db_update_i64(*($4 + [80]), (int_64)0, ($7 + [560]), [72])
	if ( (uint_64)($2 <= *($11)) ){ goto $label$38 }
	*($11) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$12 = *($16)
	if ( ($12 == 0) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$39
	$2 = *($0)
	*($7 + [644]) = ($7 + [408])
	*($7 + [640]) = ($7 + [528])
	*($7 + [656]) = $2
	CALL eosio_assert(((int_64)*($7 + [344]) == (int_64)CALL $fimport$3()), [9959])
	*((($7 + [560]) + [8])) = ($7 + [656])
	*($7 + [564]) = ($7 + [640])
	*($7 + [560]) = ($7 + [344])
	$4 = CALL _Znwj([88])
	CALL $46($4)
	*($4 + [76]) = ($7 + [344])
	CALL $47(($7 + [560]), $4)
	*($7 + [96]) = $4
	$2 = *($4)
	*($7 + [560]) = $2
	$12 = *($4 + [80])
	*($7 + [696]) = $12
	$11 = *($21)
	if ( ((uint_32)$11 >= (uint_32)*($20)) ){ goto $label$41 }
	*($11 + [8]) = $2
	*($11 + [16]) = $12
	*($7 + [96]) = [0]
	*($11) = $4
	*($21) = ($11 + [24])
	$4 = *($7 + [96])
	*($7 + [96]) = [0]
	if ( $4 ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$41
	CALL $48($16, ($7 + [96]), ($7 + [560]), ($7 + [696]))
	$4 = *($7 + [96])
	*($7 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$38 }
	
.LABEL $label$40
	CALL _ZdlPv($4)
	
.LABEL $label$38
	$12 = *($16)
	if ( ($12 == 0) ){ goto $label$36 }
	
.LABEL $label$37
	$4 = *($21)
	if ( ((int_32)$4 == (int_32)$12) ){ goto $label$43 }
	
.LOOP $label$44:
	$4 = ($4 + [-24])
	$11 = *($4)
	*($4) = [0]
	if ( ($11 == 0) ){ goto $label$45 }
	CALL _ZdlPv($11)
	
.LABEL $label$45
	if ( ((int_32)$12 != (int_32)$4) ){ goto $label$44 }
	$4 = *($16)
	goto $label$42 
	
.LABEL $label$43
	$4 = $12
	
.LABEL $label$42
	*($21) = $12
	CALL _ZdlPv($4)
	
.LABEL $label$36
	$28 = ((float_64)$28 + (float_64)$34)
	$27 = ((float_64)$27 + (float_64)$31)
	$25 = ((float_64)$25 + (float_64)$33)
	$24 = ((float_64)$24 + (float_64)$32)
	$26 = ((float_64)$26 + (float_64)$35)
	
.LABEL $label$26
	CALL $40($0, $3, $1, $2, *($13 + [16]), $10)
	CALL eosio_assert($15, [9670])
	$8 = ((int_64)$10 + (int_64)$8)
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9713])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [9732])
	$1 = ((int_64)$1 + (int_64)1)
	$13 = ($13 + [32])
	if ( ((int_32)$13 != (int_32)$14) ){ goto $label$21 }
	if ( ((int_64)($5 == 0) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	CALL $117(($7 + [512]))
	
.LABEL $label$11
	$29 = (float_64)0
	$8 = (int_64)0
	$28 = (float_64)0
	$27 = (float_64)0
	$26 = (float_64)0
	$25 = (float_64)0
	$24 = (float_64)0
	if ( (int_64)($5 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$10 = *($0)
	$2 = (int_64)6
	
.LOOP $label$46:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$46 }
	*(($7 + [320])) = (int_64)1380533252
	*(($7 + [336])) = [0]
	*($7 + [296]) = $10
	*($7 + [304]) = *($7 + [528])
	*($7 + [312]) = $8
	*($7 + [328]) = (int_64)0
	$11 = ($7 + [328])
	$4 = CALL $139([8403])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$49 }
	*(($7 + [328])) = ($4 << [1])
	$12 = ($11 + [1])
	if ( $4 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$30 = (($4 + [16]) & [-16])
	$12 = CALL _Znwj($30)
	*(($7 + [336])) = $12
	*(($7 + [332])) = $4
	*($7 + [328]) = ($30 | [1])
	
.LABEL $label$48
	CALL memcpy($12, [8403], $4)
	
.LABEL $label$47
	*(($12 + $4)) = [0]
	*(($4 = CALL _Znwj([16]))) = $10
	*($4 + [8]) = (int_64)3617214756542218240
	*((($7 + [560]) + [24])) = *((($7 + [296]) + [24]))
	*(($12 = (($7 + [560]) + [40]))) = *(($11 + [8]))
	$2 = *($11)
	*(($7 + [328])) = (int_64)0
	*($7 + [344]) = $4
	$4 = ($4 + [16])
	*($7 + [352]) = $4
	*($7 + [348]) = $4
	*($7 + [560]) = *($7 + [296])
	*($7 + [568]) = *((($7 + [296]) + [8]))
	*($7 + [576]) = *($7 + [312])
	*($7 + [592]) = $2
	*((($7 + [296]) + [40])) = [0]
	CALL $33($10, (int_64)-3617168760277827584, ($7 + [344]), ($7 + [560]))
	if ( ((*($7 + [592]) & [1]) == 0) ){ goto $label$50 }
	CALL _ZdlPv(*($12))
	
.LABEL $label$50
	$4 = *($7 + [344])
	if ( ($4 == 0) ){ goto $label$51 }
	*($7 + [348]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$51
	if ( ((*(($7 + [328])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($7 + [336])))
	
.LABEL $label$9
	*($7 + [408]) = $3
	CALL $49(($7 + [560]), ($7 + [408]))
	$4 = CALL $124(($7 + [560]), [8451])
	$11 = ($4 + [8])
	*((($7 + [656]) + [8])) = *($11)
	*($7 + [656]) = *($4)
	*($4) = (int_64)0
	*($11) = [0]
	if ( ((*($7 + [560]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*($7 + [568]))
	
.LABEL $label$52
	*($7 + [392]) = [0]
	*($7 + [384]) = (int_64)0
	CALL $122(($7 + [384]), [40])
	
.LOOP $label$53:
	$2 = ((int_64)$8 / (int_64)10)
	CALL $125(($7 + [384]), *(((CASTING uint_32)(uint_64 (int_64))($8 - ((int_64)$2 * (int_64)10))) + [9581])))
	$10 = ((int_64)$8 + (int_64)9)
	$8 = $2
	if ( ((uint_64)$10 > (uint_64)(int_64)18) ){ goto $label$53 }
	$4 = ($4 & [1])
	$4 = *($7 + [384])
	$11 = ( *($7 + [388]) ? uint_32($4 >> [1]) : $4 )
	if ( ($11 == 0) ){ goto $label$54 }
	$4 = ( *(($7 + [392])) ? (($7 + [384]) | [1]) : $4 )
	$11 = (($4 + $11) + [-1])
	if ( ((uint_32)$11 <= (uint_32)$4) ){ goto $label$54 }
	
.LOOP $label$55:
	$12 = *($4)
	*($4) = *($11)
	*($11) = $12
	$11 = ($11 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $11) ){ goto $label$55 }
	
.LABEL $label$54
	CALL $50(($7 + [560]), ($7 + [656]), ($7 + [384]))
	if ( (*($7 + [512]) & [1]) ){ goto $label$57 }
	*($7 + [512]) = [0]
	goto $label$56 
	
.LABEL $label$57
	*(*($7 + [520])) = [0]
	*($7 + [516]) = [0]
	
.LABEL $label$56
	CALL $122(($7 + [512]), [0])
	*((($7 + [512]) + [8])) = *((($7 + [560]) + [8]))
	*($7 + [512]) = *($7 + [560])
	if ( ((int_32)((float_64)$27 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$58 }
	*($7 + [344]) = (int_64)0
	*($7 + [352]) = [0]
	$2 = *($7 + [552])
	CALL $122(($7 + [344]), [40])
	
.LOOP $label$59:
	$8 = ((int_64)$2 / (int_64)10)
	CALL $125(($7 + [344]), *(((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$8 * (int_64)10))) + [9581])))
	$10 = ((int_64)$2 + (int_64)9)
	$2 = $8
	if ( ((uint_64)$10 > (uint_64)(int_64)18) ){ goto $label$59 }
	$4 = ($4 & [1])
	$4 = *($7 + [344])
	$11 = ( *($7 + [348]) ? uint_32($4 >> [1]) : $4 )
	if ( ($11 == 0) ){ goto $label$60 }
	$4 = ( *((($7 + [344]) + [8])) ? (($7 + [344]) | [1]) : $4 )
	$11 = (($4 + $11) + [-1])
	if ( ((uint_32)$11 <= (uint_32)$4) ){ goto $label$60 }
	
.LOOP $label$61:
	$12 = *($4)
	*($4) = *($11)
	*($11) = $12
	$11 = ($11 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $11) ){ goto $label$61 }
	
.LABEL $label$60
	$4 = CALL $128(($7 + [344]), [0], [8453])
	$11 = ($4 + [8])
	*((($7 + [560]) + [8])) = *($11)
	*($7 + [560]) = *($4)
	$2 = (int_64)0
	*($4) = (int_64)0
	*($11) = [0]
	if ( ((*($7 + [344]) & [1]) == 0) ){ goto $label$62 }
	CALL _ZdlPv(*(($7 + [352])))
	
.LABEL $label$62
	$8 = (int_64)59
	$4 = [8462]
	$9 = (int_64)0
	
.LOOP $label$63:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$64 }
	$11 = *($4)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$11 = ($11 + [-91])
	goto $label$65 
	
.LABEL $label$66
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$64
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$63 }
	*($7 + [288]) = (int_64)1397703940
	if ( (((float_64)$27 < (float_64)(float_64)18446744073709551615) & ((float_64)$27 >= (float_64)(float_64)0)) ){ goto $label$68 }
	$2 = (int_64)0
	goto $label$67 
	
.LABEL $label$68
	$2 = (Rounds 0)($27)
	
.LABEL $label$67
	*($7 + [280]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$71:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$70 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$72 }
	$2 = $8
	$11 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$72
	$2 = $8
	
.LOOP $label$73:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$70 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $11 ){ goto $label$73 }
	$11 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$71 }
	goto $label$69 
	
.LABEL $label$70
	$11 = [0]
	
.LABEL $label$69
	CALL eosio_assert($11, [8540])
	$4 = CALL $118(($7 + [264]), ($7 + [560]))
	*((($7 + [80]) + [8])) = *((($7 + [280]) + [8]))
	*($7 + [80]) = *($7 + [280])
	CALL $25($0, $9, ($7 + [80]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$74 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$74
	if ( ((*($7 + [560]) & [1]) == 0) ){ goto $label$58 }
	CALL _ZdlPv(*($7 + [568]))
	
.LABEL $label$58
	if ( ((int_32)((float_64)$29 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$75 }
	*($7 + [344]) = (int_64)0
	*($7 + [352]) = [0]
	$2 = *($7 + [552])
	CALL $122(($7 + [344]), [40])
	
.LOOP $label$76:
	$8 = ((int_64)$2 / (int_64)10)
	CALL $125(($7 + [344]), *(((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$8 * (int_64)10))) + [9581])))
	$10 = ((int_64)$2 + (int_64)9)
	$2 = $8
	if ( ((uint_64)$10 > (uint_64)(int_64)18) ){ goto $label$76 }
	$4 = ($4 & [1])
	$4 = *($7 + [344])
	$11 = ( *($7 + [348]) ? uint_32($4 >> [1]) : $4 )
	if ( ($11 == 0) ){ goto $label$77 }
	$4 = ( *((($7 + [344]) + [8])) ? (($7 + [344]) | [1]) : $4 )
	$11 = (($4 + $11) + [-1])
	if ( ((uint_32)$11 <= (uint_32)$4) ){ goto $label$77 }
	
.LOOP $label$78:
	$12 = *($4)
	*($4) = *($11)
	*($11) = $12
	$11 = ($11 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $11) ){ goto $label$78 }
	
.LABEL $label$77
	$4 = CALL $128(($7 + [344]), [0], [8453])
	$11 = ($4 + [8])
	*((($7 + [560]) + [8])) = *($11)
	*($7 + [560]) = *($4)
	$2 = (int_64)0
	*($4) = (int_64)0
	*($11) = [0]
	if ( ((*($7 + [344]) & [1]) == 0) ){ goto $label$79 }
	CALL _ZdlPv(*(($7 + [352])))
	
.LABEL $label$79
	$8 = (int_64)59
	$4 = [8475]
	$9 = (int_64)0
	
.LOOP $label$80:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$81 }
	$11 = *($4)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$83 }
	$11 = ($11 + [-91])
	goto $label$82 
	
.LABEL $label$83
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$82
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$81
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$80 }
	*($7 + [256]) = (int_64)1397703940
	if ( (((float_64)$29 < (float_64)(float_64)18446744073709551615) & ((float_64)$29 >= (float_64)(float_64)0)) ){ goto $label$85 }
	$2 = (int_64)0
	goto $label$84 
	
.LABEL $label$85
	$2 = (Rounds 0)($29)
	
.LABEL $label$84
	*($7 + [248]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$88:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$87 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$89 }
	$2 = $8
	$11 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$88 }
	goto $label$86 
	
.LABEL $label$89
	$2 = $8
	
.LOOP $label$90:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$87 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $11 ){ goto $label$90 }
	$11 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$88 }
	goto $label$86 
	
.LABEL $label$87
	$11 = [0]
	
.LABEL $label$86
	CALL eosio_assert($11, [8540])
	$4 = CALL $118(($7 + [232]), ($7 + [560]))
	*((($7 + [64]) + [8])) = *((($7 + [248]) + [8]))
	*($7 + [64]) = *($7 + [248])
	CALL $25($0, $9, ($7 + [64]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$91 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$91
	if ( ((*($7 + [560]) & [1]) == 0) ){ goto $label$75 }
	CALL _ZdlPv(*($7 + [568]))
	
.LABEL $label$75
	if ( ((int_32)((float_64)$28 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$92 }
	*($7 + [344]) = (int_64)0
	*($7 + [352]) = [0]
	$2 = *($7 + [552])
	CALL $122(($7 + [344]), [40])
	
.LOOP $label$93:
	$8 = ((int_64)$2 / (int_64)10)
	CALL $125(($7 + [344]), *(((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$8 * (int_64)10))) + [9581])))
	$10 = ((int_64)$2 + (int_64)9)
	$2 = $8
	if ( ((uint_64)$10 > (uint_64)(int_64)18) ){ goto $label$93 }
	$4 = ($4 & [1])
	$4 = *($7 + [344])
	$11 = ( *($7 + [348]) ? uint_32($4 >> [1]) : $4 )
	if ( ($11 == 0) ){ goto $label$94 }
	$4 = ( *((($7 + [344]) + [8])) ? (($7 + [344]) | [1]) : $4 )
	$11 = (($4 + $11) + [-1])
	if ( ((uint_32)$11 <= (uint_32)$4) ){ goto $label$94 }
	
.LOOP $label$95:
	$12 = *($4)
	*($4) = *($11)
	*($11) = $12
	$11 = ($11 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $11) ){ goto $label$95 }
	
.LABEL $label$94
	$4 = CALL $128(($7 + [344]), [0], [8453])
	$11 = ($4 + [8])
	*((($7 + [560]) + [8])) = *($11)
	*($7 + [560]) = *($4)
	$2 = (int_64)0
	*($4) = (int_64)0
	*($11) = [0]
	if ( ((*($7 + [344]) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*(($7 + [352])))
	
.LABEL $label$96
	$8 = (int_64)59
	$4 = [8488]
	$9 = (int_64)0
	
.LOOP $label$97:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$98 }
	$11 = *($4)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$100 }
	$11 = ($11 + [-91])
	goto $label$99 
	
.LABEL $label$100
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$99
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$98
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$97 }
	*($7 + [224]) = (int_64)1397703940
	if ( (((float_64)$28 < (float_64)(float_64)18446744073709551615) & ((float_64)$28 >= (float_64)(float_64)0)) ){ goto $label$102 }
	$2 = (int_64)0
	goto $label$101 
	
.LABEL $label$102
	$2 = (Rounds 0)($28)
	
.LABEL $label$101
	*($7 + [216]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$105:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$104 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$106 }
	$2 = $8
	$11 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$105 }
	goto $label$103 
	
.LABEL $label$106
	$2 = $8
	
.LOOP $label$107:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$104 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $11 ){ goto $label$107 }
	$11 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$105 }
	goto $label$103 
	
.LABEL $label$104
	$11 = [0]
	
.LABEL $label$103
	CALL eosio_assert($11, [8540])
	$4 = CALL $118(($7 + [200]), ($7 + [560]))
	*((($7 + [48]) + [8])) = *((($7 + [216]) + [8]))
	*($7 + [48]) = *($7 + [216])
	CALL $25($0, $9, ($7 + [48]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$108 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$108
	if ( ((*($7 + [560]) & [1]) == 0) ){ goto $label$92 }
	CALL _ZdlPv(*($7 + [568]))
	
.LABEL $label$92
	if ( ((int_32)((float_64)$26 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$109 }
	*($7 + [344]) = (int_64)0
	*($7 + [352]) = [0]
	$2 = *($7 + [552])
	CALL $122(($7 + [344]), [40])
	
.LOOP $label$110:
	$8 = ((int_64)$2 / (int_64)10)
	CALL $125(($7 + [344]), *(((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$8 * (int_64)10))) + [9581])))
	$10 = ((int_64)$2 + (int_64)9)
	$2 = $8
	if ( ((uint_64)$10 > (uint_64)(int_64)18) ){ goto $label$110 }
	$4 = ($4 & [1])
	$4 = *($7 + [344])
	$11 = ( *($7 + [348]) ? uint_32($4 >> [1]) : $4 )
	if ( ($11 == 0) ){ goto $label$111 }
	$4 = ( *((($7 + [344]) + [8])) ? (($7 + [344]) | [1]) : $4 )
	$11 = (($4 + $11) + [-1])
	if ( ((uint_32)$11 <= (uint_32)$4) ){ goto $label$111 }
	
.LOOP $label$112:
	$12 = *($4)
	*($4) = *($11)
	*($11) = $12
	$11 = ($11 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $11) ){ goto $label$112 }
	
.LABEL $label$111
	$4 = CALL $128(($7 + [344]), [0], [8453])
	$11 = ($4 + [8])
	*((($7 + [560]) + [8])) = *($11)
	*($7 + [560]) = *($4)
	$2 = (int_64)0
	*($4) = (int_64)0
	*($11) = [0]
	if ( ((*($7 + [344]) & [1]) == 0) ){ goto $label$113 }
	CALL _ZdlPv(*(($7 + [352])))
	
.LABEL $label$113
	$8 = (int_64)59
	$4 = [8501]
	$9 = (int_64)0
	
.LOOP $label$114:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$115 }
	$11 = *($4)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$117 }
	$11 = ($11 + [-91])
	goto $label$116 
	
.LABEL $label$117
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$116
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$115
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$114 }
	*($7 + [192]) = (int_64)1397703940
	if ( (((float_64)$26 < (float_64)(float_64)18446744073709551615) & ((float_64)$26 >= (float_64)(float_64)0)) ){ goto $label$119 }
	$2 = (int_64)0
	goto $label$118 
	
.LABEL $label$119
	$2 = (Rounds 0)($26)
	
.LABEL $label$118
	*($7 + [184]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$122:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$121 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$123 }
	$2 = $8
	$11 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$122 }
	goto $label$120 
	
.LABEL $label$123
	$2 = $8
	
.LOOP $label$124:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$121 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $11 ){ goto $label$124 }
	$11 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$122 }
	goto $label$120 
	
.LABEL $label$121
	$11 = [0]
	
.LABEL $label$120
	CALL eosio_assert($11, [8540])
	$4 = CALL $118(($7 + [168]), ($7 + [560]))
	*((($7 + [32]) + [8])) = *((($7 + [184]) + [8]))
	*($7 + [32]) = *($7 + [184])
	CALL $25($0, $9, ($7 + [32]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$125 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$125
	if ( ((*($7 + [560]) & [1]) == 0) ){ goto $label$109 }
	CALL _ZdlPv(*($7 + [568]))
	
.LABEL $label$109
	if ( ((int_32)((float_64)$24 > (float_64)(float_64)0) ^ (int_32)[1]) ){ goto $label$126 }
	*($7 + [344]) = (int_64)0
	*($7 + [352]) = [0]
	$2 = *($7 + [552])
	CALL $122(($7 + [344]), [40])
	
.LOOP $label$127:
	$8 = ((int_64)$2 / (int_64)10)
	CALL $125(($7 + [344]), *(((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$8 * (int_64)10))) + [9581])))
	$10 = ((int_64)$2 + (int_64)9)
	$2 = $8
	if ( ((uint_64)$10 > (uint_64)(int_64)18) ){ goto $label$127 }
	$4 = ($4 & [1])
	$4 = *($7 + [344])
	$11 = ( *($7 + [348]) ? uint_32($4 >> [1]) : $4 )
	if ( ($11 == 0) ){ goto $label$128 }
	$4 = ( *((($7 + [344]) + [8])) ? (($7 + [344]) | [1]) : $4 )
	$11 = (($4 + $11) + [-1])
	if ( ((uint_32)$11 <= (uint_32)$4) ){ goto $label$128 }
	
.LOOP $label$129:
	$12 = *($4)
	*($4) = *($11)
	*($11) = $12
	$11 = ($11 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $11) ){ goto $label$129 }
	
.LABEL $label$128
	$4 = CALL $128(($7 + [344]), [0], [8453])
	$11 = ($4 + [8])
	*((($7 + [560]) + [8])) = *($11)
	*($7 + [560]) = *($4)
	$2 = (int_64)0
	*($4) = (int_64)0
	*($11) = [0]
	if ( ((*($7 + [344]) & [1]) == 0) ){ goto $label$130 }
	CALL _ZdlPv(*(($7 + [352])))
	
.LABEL $label$130
	$8 = (int_64)59
	$4 = [8514]
	$9 = (int_64)0
	
.LOOP $label$131:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$132 }
	$11 = *($4)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$134 }
	$11 = ($11 + [-91])
	goto $label$133 
	
.LABEL $label$134
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$133
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$132
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$131 }
	*($7 + [160]) = (int_64)1397703940
	if ( (((float_64)$24 < (float_64)(float_64)18446744073709551615) & ((float_64)$24 >= (float_64)(float_64)0)) ){ goto $label$136 }
	$2 = (int_64)0
	goto $label$135 
	
.LABEL $label$136
	$2 = (Rounds 0)($24)
	
.LABEL $label$135
	*($7 + [152]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$139:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$138 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$140 }
	$2 = $8
	$11 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$139 }
	goto $label$137 
	
.LABEL $label$140
	$2 = $8
	
.LOOP $label$141:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$138 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $11 ){ goto $label$141 }
	$11 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$139 }
	goto $label$137 
	
.LABEL $label$138
	$11 = [0]
	
.LABEL $label$137
	CALL eosio_assert($11, [8540])
	$4 = CALL $118(($7 + [136]), ($7 + [560]))
	*((($7 + [16]) + [8])) = *((($7 + [152]) + [8]))
	*($7 + [16]) = *($7 + [152])
	CALL $25($0, $9, ($7 + [16]), $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$142 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$142
	if ( ((*($7 + [560]) & [1]) == 0) ){ goto $label$126 }
	CALL _ZdlPv(*($7 + [568]))
	
.LABEL $label$126
	if ( ((float_64)$25 == (float_64)(float_64)0) ){ goto $label$143 }
	*($7 + [344]) = (int_64)0
	*($7 + [352]) = [0]
	$2 = *($7 + [552])
	CALL $122(($7 + [344]), [40])
	
.LOOP $label$144:
	$8 = ((int_64)$2 / (int_64)10)
	CALL $125(($7 + [344]), *(((CASTING uint_32)(uint_64 (int_64))($2 - ((int_64)$8 * (int_64)10))) + [9581])))
	$10 = ((int_64)$2 + (int_64)9)
	$2 = $8
	if ( ((uint_64)$10 > (uint_64)(int_64)18) ){ goto $label$144 }
	$4 = ($4 & [1])
	$4 = *($7 + [344])
	$11 = ( *($7 + [348]) ? uint_32($4 >> [1]) : $4 )
	if ( ($11 == 0) ){ goto $label$145 }
	$4 = ( *((($7 + [344]) + [8])) ? (($7 + [344]) | [1]) : $4 )
	$11 = (($4 + $11) + [-1])
	if ( ((uint_32)$11 <= (uint_32)$4) ){ goto $label$145 }
	
.LOOP $label$146:
	$12 = *($4)
	*($4) = *($11)
	*($11) = $12
	$11 = ($11 + [-1])
	$4 = ($4 + [1])
	if ( ($4 <= $11) ){ goto $label$146 }
	
.LABEL $label$145
	$4 = CALL $128(($7 + [344]), [0], [8453])
	$11 = ($4 + [8])
	*((($7 + [560]) + [8])) = *($11)
	*($7 + [560]) = *($4)
	$2 = (int_64)0
	*($4) = (int_64)0
	*($11) = [0]
	if ( ((*($7 + [344]) & [1]) == 0) ){ goto $label$147 }
	CALL _ZdlPv(*(($7 + [352])))
	
.LABEL $label$147
	$8 = (int_64)59
	$4 = [8527]
	$9 = (int_64)0
	
.LOOP $label$148:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$149 }
	$11 = *($4)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$151 }
	$11 = ($11 + [-91])
	goto $label$150 
	
.LABEL $label$151
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$150
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$149
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$148 }
	*($7 + [128]) = (int_64)1397703940
	if ( (((float_64)$25 < (float_64)(float_64)18446744073709551615) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$153 }
	$2 = (int_64)0
	goto $label$152 
	
.LABEL $label$153
	$2 = (Rounds 0)($25)
	
.LABEL $label$152
	*($7 + [120]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$2 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$156:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$155 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$157 }
	$2 = $8
	$11 = [1]
	$12 = $4
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$156 }
	goto $label$154 
	
.LABEL $label$157
	$2 = $8
	
.LOOP $label$158:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$155 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$11 = ((int_32)$4 < (int_32)[6])
	$12 = ($4 + [1])
	$4 = $12
	if ( $11 ){ goto $label$158 }
	$11 = [1]
	$4 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$156 }
	goto $label$154 
	
.LABEL $label$155
	$11 = [0]
	
.LABEL $label$154
	CALL eosio_assert($11, [8540])
	$4 = CALL $118(($7 + [104]), ($7 + [560]))
	*(($7 + [8])) = *((($7 + [120]) + [8]))
	*($7) = *($7 + [120])
	CALL $25($0, $9, $7, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$159 }
	CALL _ZdlPv(*($4 + [8]))
	
.LABEL $label$159
	if ( ((*($7 + [560]) & [1]) == 0) ){ goto $label$143 }
	CALL _ZdlPv(*($7 + [568]))
	
.LABEL $label$143
	$2 = *($7 + [552])
	if ( (int_64)($2 == 0) ){ goto $label$5 }
	*(($12 = ($7 + [592]))) = [0]
	*($7 + [568]) = $2
	*($7 + [576]) = (int_64)-1
	*($7 + [584]) = (int_64)0
	$2 = *($0)
	*($7 + [560]) = $2
	*($7 + [100]) = ($7 + [512])
	*($7 + [96]) = ($7 + [552])
	*($7 + [640]) = $2
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$3()), [9959])
	*($7 + [348]) = ($7 + [96])
	*($7 + [344]) = ($7 + [560])
	*($7 + [352]) = ($7 + [640])
	*(($4 = CALL _Znwj([48])) + [8 align=4]) = (int_64)0
	*($4 + [16 align=4]) = (int_64)0
	*($4 + [24 align=4]) = (int_64)0
	*($4 + [32]) = ($7 + [560])
	CALL $51(($7 + [344]), $4)
	*($7 + [696]) = $4
	$2 = *($4)
	*($7 + [344]) = $2
	$30 = *($4 + [36])
	*($7 + [692]) = $30
	$13 = ($7 + [588])
	$11 = *($13)
	if ( ((uint_32)$11 >= (uint_32)*($12)) ){ goto $label$161 }
	*($11 + [8]) = $2
	*($11 + [16]) = $30
	*($7 + [696]) = [0]
	*($11) = $4
	*($13) = ($11 + [24])
	$4 = *($7 + [696])
	*($7 + [696]) = [0]
	if ( ($4 == 0) ){ goto $label$160 }
	goto $label$7 
	
.LABEL $label$161
	CALL $52(($7 + [584]), ($7 + [696]), ($7 + [344]), ($7 + [692]))
	$4 = *($7 + [696])
	*($7 + [696]) = [0]
	if ( $4 ){ goto $label$7 }
	
.LABEL $label$160
	$12 = *($7 + [584])
	if ( ($12 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$8
	CALL $117($11)
	
.LABEL $label$7
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$162 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$162
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$163 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$163
	CALL _ZdlPv($4)
	$12 = *($7 + [584])
	if ( ($12 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$30 = (($7 + [560]) + [28])
	$11 = *($30)
	if ( ((int_32)$11 == (int_32)$12) ){ goto $label$165 }
	
.LOOP $label$166:
	$11 = ($11 + [-24])
	$4 = *($11)
	*($11) = [0]
	if ( ($4 == 0) ){ goto $label$167 }
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$168 }
	CALL _ZdlPv(*(($4 + [28])))
	
.LABEL $label$168
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$169 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$169
	CALL _ZdlPv($4)
	
.LABEL $label$167
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$166 }
	$4 = *(($7 + [584]))
	goto $label$164 
	
.LABEL $label$165
	$4 = $12
	
.LABEL $label$164
	*($30) = $12
	CALL _ZdlPv($4)
	
.LABEL $label$5
	CALL $36($0)
	if ( (*($7 + [384]) & [1]) ){ goto $label$176 }
	if ( (*($7 + [656]) & [1]) ){ goto $label$175 }
	goto $label$174 
	
.LABEL $label$176
	CALL _ZdlPv(*(($7 + [392])))
	if ( ((*($7 + [656]) & [1]) == 0) ){ goto $label$174 }
	
.LABEL $label$175
	CALL _ZdlPv(*($7 + [664]))
	if ( ((*($7 + [512]) & [1]) == 0) ){ goto $label$173 }
	goto $label$172 
	
.LABEL $label$174
	if ( (*($7 + [512]) & [1]) ){ goto $label$172 }
	
.LABEL $label$173
	$4 = *($7 + [536])
	if ( ($4 == 0) ){ goto $label$170 }
	goto $label$171 
	
.LABEL $label$172
	CALL _ZdlPv(*($7 + [520]))
	$4 = *($7 + [536])
	if ( ($4 == 0) ){ goto $label$170 }
	
.LABEL $label$171
	*($7 + [540]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$170
	$global$0 = ($7 + [704])
	(unreachable)
	(unreachable)
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $139($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $121($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $127($0, $1, $2, CALL $139($2))
}

void .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1) = *((*(*($0 + [4])) + [56]))
	$4 = *($0)
	CALL eosio_assert([1], [9598])
	$5 = ($1 + [8])
	$6 = ($1 + [16])
	$7 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8540])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)240000000
	*($1 + [48]) = (int_64)4576918229304087675
	*($1 + [56]) = (int_64)4607182418800017408
	*($1 + [64]) = (int_64)4600877379321698714
	*($1 + [96]) = [10000]
	*($1 + [24]) = (int_64)0
	*($1 + [72]) = (int_64)4581421828931458171
	CALL eosio_assert([1], [9598])
	$12 = ($1 + [72])
	$13 = ($1 + [24])
	$14 = ($1 + [96])
	$15 = ($1 + [64])
	$16 = ($1 + [56])
	$17 = ($1 + [48])
	$7 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $9
	$10 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $10 ){ goto $label$10 }
	$10 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$10 = [0]
	
.LABEL $label$6
	CALL eosio_assert($10, [8540])
	*(($1 + [88])) = (int_64)1397703940
	*($1 + [80]) = (int_64)0
	*($1 + [104]) = (int_64)4596373779694328218
	*($1 + [112]) = (int_64)0
	*($1 + [120]) = (int_64)0
	*($1 + [136]) = (int_64)0
	*($1 + [144]) = (int_64)4596373779694328218
	*($1 + [152]) = (int_64)4602678819172646912
	*($1 + [128]) = (int_64)4591870180066957722
	$10 = $2
	$8 = ($10 + [-160])
	$global$0 = $8
	*($3 + [4]) = $8
	*($3) = $8
	*($3 + [8]) = ($10 + [-8])
	*($3 + [16]) = $3
	*($3 + [28]) = $5
	*($3 + [24]) = $1
	*($3 + [32]) = $6
	*($3 + [36]) = $13
	*($3 + [40]) = ($1 + [32])
	*($3 + [44]) = $17
	*($3 + [48]) = $16
	*($3 + [52]) = $15
	*($3 + [56]) = $12
	*($3 + [60]) = ($1 + [80])
	*($3 + [64]) = $14
	*($3 + [68]) = ($1 + [104])
	*($3 + [72]) = ($1 + [112])
	*($3 + [76]) = ($1 + [120])
	*($3 + [80]) = ($1 + [128])
	*($3 + [84]) = ($1 + [136])
	*($3 + [88]) = ($1 + [144])
	*($3 + [92]) = ($1 + [152])
	CALL $39(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [164]) = CALL db_store_i64(*($4 + [8]), (int_64)4154159847563875632, *(*($0 + [8])), $7, $8, [152])
	if ( ((uint_64)*($4 + [16]) > (uint_64)$7) ){ goto $label$11 }
	*(($4 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$11
	$global$0 = ($3 + [96])
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [32]) = (int_64)0
	*(($1 = ($0 + [40]))) = (int_64)1397703940
	CALL eosio_assert([1], [9598])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8540])
	*(($1 = ($0 + [88]))) = (int_64)1397703940
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [9598])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8540])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8540])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8540])
	return $0
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [112])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9931])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $140($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	$5 = CALL _Znwj([176])
	CALL $6($5)
	*($5 + [160]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [48])
	*($3 + [64]) = ($5 + [56])
	*($3 + [68]) = ($5 + [64])
	*($3 + [72]) = ($5 + [72])
	*($3 + [76]) = ($5 + [80])
	*($3 + [80]) = ($5 + [96])
	*($3 + [84]) = ($5 + [104])
	*($3 + [88]) = ($5 + [112])
	*($3 + [92]) = ($5 + [120])
	*($3 + [96]) = ($5 + [128])
	*($3 + [100]) = ($5 + [136])
	*($3 + [104]) = ($5 + [144])
	*($3 + [108]) = ($5 + [152])
	CALL $104(($3 + [40]), ($3 + [32]))
	*($5 + [164]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $9(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [112])
	return $5
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [5])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$3 }
	$6 = [134217727]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$6 = int_32($7 >> [4])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [5]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $130($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [5])))) = *($1)
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [5]))
	$4 = ($4 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $5 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($0 + [8]) = [300]
	*($0) = $1
	*($0 + [16]) = $1
	*($0 + [56]) = [2]
	*(($3 = ($0 + [24]))) = (int_64)0
	*(($0 + [32])) = (int_64)-1
	*(($4 = ($0 + [40]))) = (int_64)0
	*(($0 + [48])) = [0]
	$5 = CALL $6(($0 + [64]))
	*(($0 + [232])) = (int_64)0
	*($0 + [224]) = $1
	*(($0 + [240])) = (int_64)-1
	*(($0 + [248])) = (int_64)0
	*(($0 + [256])) = [0]
	*(($0 + [260])) = [0]
	*(($0 + [264])) = [1]
	*(($0 + [280])) = (int_64)0
	*(($0 + [288])) = (int_64)-1
	*(($0 + [296])) = (int_64)0
	*(($0 + [304])) = [0]
	*($0 + [272]) = *($0)
	$6 = ($0 + [16])
	$1 = *($0 + [56])
	$8 = *(($0 + [44]))
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$4 = ($8 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$4 }
	$8 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [160]) == (int_32)$6), [9880])
	if ( $9 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($6), *($3), (int_64)4154159847563875632, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $7($6, $4) + [160]) == (int_32)$6), [9880])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	*($2 + [8]) = $0
	*($2 + [40]) = $1
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$3()), [9959])
	*($2 + [16]) = $6
	*($2 + [20]) = ($2 + [8])
	*($2 + [24]) = ($2 + [40])
	$4 = CALL _Znwj([176])
	CALL $6($4)
	*($4 + [160]) = $6
	CALL $8(($2 + [16]), $4)
	*($2 + [32]) = $4
	$1 = *($4)
	*($2 + [16]) = $1
	$7 = *($4 + [164])
	*($2 + [12]) = $7
	$9 = ($0 + [44])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [48]))) ){ goto $label$7 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($2 + [32]) = [0]
	*($8) = $4
	*($9) = ($8 + [24])
	$4 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( $4 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	CALL $9(($0 + [40]), ($2 + [32]), ($2 + [16]), ($2 + [12]))
	$4 = *($2 + [32])
	*($2 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	CALL _ZdlPv($4)
	
.LABEL $label$1
	$3 = ($0 + [272])
	CALL memcpy($5, CALL $10($6, *(($0 + [56])), [8282]), [160])
	$1 = *(($0 + [264]))
	$8 = *(($0 + [300]))
	$7 = *(($0 + [296]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$12:
	$4 = ($8 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$11 }
	$8 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$10 }
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$3), [9880])
	if ( $9 ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$4 = CALL db_find_i64(*(($0 + [272])), *(($0 + [280])), (int_64)3607572834567340032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$9 }
	CALL eosio_assert(((int_32)*(CALL $11($3, $4) + [16]) == (int_32)$3), [9880])
	goto $label$8 
	
.LABEL $label$9
	$10 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL $fimport$3()), [9959])
	*(($4 = CALL _Znwj([32])) + [16]) = $3
	*($4 + [8]) = [1]
	*($4) = *(($0 + [264]))
	CALL eosio_assert([1], [9592])
	CALL memcpy(($2 + [16]), $4, [8])
	CALL eosio_assert([1], [9592])
	CALL memcpy((($2 + [16]) | [8]), ($4 + [8]), [4])
	$1 = *($4)
	$7 = CALL db_store_i64(*(($0 + [280])), (int_64)3607572834567340032, $10, $1, ($2 + [16]), [12])
	*($4 + [20]) = $7
	$8 = ($0 + [288])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$13 }
	*($8) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*($2 + [40]) = $4
	$1 = *($4)
	*($2 + [16]) = $1
	*($2 + [32]) = $7
	$9 = ($0 + [300])
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [304]))) ){ goto $label$15 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($2 + [40]) = [0]
	*($8) = $4
	*($9) = ($8 + [24])
	$4 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( $4 ){ goto $label$14 }
	goto $label$8 
	
.LABEL $label$15
	CALL $12(($0 + [296]), ($2 + [40]), ($2 + [16]), ($2 + [32]))
	$4 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	
.LABEL $label$14
	CALL _ZdlPv($4)
	
.LABEL $label$8
	$4 = CALL $13($3, *(($0 + [264])), [8300])
	*($0 + [312]) = *($4)
	*(($0 + [320])) = *(($4 + [8]))
	$global$0 = ($2 + [48])
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$3 = CALL $139([8192])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($2) = ($3 << [1])
	$4 = ($2 | [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($2) = ($5 | [1])
	*($2 + [8]) = $4
	*($2 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($4, [8192], $3)
	
.LABEL $label$2
	*(($4 + $3)) = [0]
	CALL $1(($2 + [48]), $1, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$5
	$6 = *($2 + [52])
	$5 = *($2 + [48])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	$7 = ($2 | [1])
	$8 = ($2 + [8])
	$9 = ($2 + [16])
	$10 = ($0 + [4])
	
.LOOP $label$7:
	*($8) = [0]
	*($2) = (int_64)0
	$3 = CALL $139([8194])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*($2) = ($3 << [1])
	$4 = $7
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$1 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($1)
	*($8) = $4
	*($2) = ($1 | [1])
	*($2 + [4]) = $3
	
.LABEL $label$9
	CALL memcpy($4, [8194], $3)
	
.LABEL $label$8
	*(($4 + $3)) = [0]
	CALL $1(($2 + [32]), $5, $2)
	if ( ((*($2) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*($8))
	
.LABEL $label$11
	$3 = *($2 + [32])
	if ( (*($3) & [1]) ){ goto $label$13 }
	$3 = ($3 + [1])
	goto $label$12 
	
.LABEL $label$13
	$3 = *($3 + [8])
	
.LABEL $label$12
	*($2) = ((float_64)(CASTING float_64)(int_64 CALL $136($3)) / (float_64)(float_64)10)
	$3 = *($2 + [32])
	if ( (*($3 + [12]) & [1]) ){ goto $label$15 }
	$3 = (($3 + [12]) + [1])
	goto $label$14 
	
.LABEL $label$15
	$3 = *(($3 + [20]))
	
.LABEL $label$14
	*($8) = ((float_64)(CASTING float_64)(int_64 CALL $136($3)) / (float_64)(float_64)10)
	$3 = *($2 + [32])
	if ( (*($3 + [24]) & [1]) ){ goto $label$17 }
	$3 = (($3 + [24]) + [1])
	goto $label$16 
	
.LABEL $label$17
	$3 = *(($3 + [32]))
	
.LABEL $label$16
	*($9) = CALL $136($3)
	$3 = *($2 + [32])
	if ( (*($3 + [36]) & [1]) ){ goto $label$19 }
	$3 = (($3 + [36]) + [1])
	goto $label$18 
	
.LABEL $label$19
	$3 = *(($3 + [44]))
	
.LABEL $label$18
	*(($4 = ($2 + [24]))) = CALL $136($3)
	$3 = *($10)
	if ( ((int_32)$3 == (int_32)*(($0 + [8]))) ){ goto $label$23 }
	*($3) = *($2)
	*(($3 + [24])) = *($4)
	*(($3 + [16])) = *($9)
	*(($3 + [8])) = *($8)
	*($10) = (*($10) + [32])
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	CALL $4($0, $2)
	$1 = *($2 + [32])
	if ( $1 ){ goto $label$21 }
	
.LABEL $label$22
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$7 }
	goto $label$20 
	
.LABEL $label$21
	$4 = *($2 + [36])
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$25 }
	
.LOOP $label$26:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$27
	$4 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$26 }
	$3 = *($2 + [32])
	goto $label$24 
	
.LABEL $label$25
	$3 = $1
	
.LABEL $label$24
	*($2 + [36]) = $1
	CALL _ZdlPv($3)
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$7 }
	
.LABEL $label$20
	$5 = *($2 + [48])
	
.LABEL $label$6
	if ( ($5 == 0) ){ goto $label$28 }
	$4 = *($2 + [52])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$30 }
	
.LOOP $label$31:
	$3 = ($4 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($4 + [-4])))
	
.LABEL $label$32
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$31 }
	$3 = *($2 + [48])
	goto $label$29 
	
.LABEL $label$30
	$3 = $5
	
.LABEL $label$29
	*($2 + [52]) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$28
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$1
	CALL $117($2)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($2 + [1])
	$5 = ($1 + [1])
	$6 = [0]
	$8 = ($7 & [1])
	$7 = *($2)
	$7 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $8 )
	if ( ($7 == 0) ){ goto $label$3 }
	$9 = ($6 & [1])
	$6 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($6 >> [1]) : $9 )
	if ( ((int_32)$6 < (int_32)$7) ){ goto $label$2 }
	$10 = ( *($1 + [8]) ? $5 : $9 )
	$11 = ($10 + $6)
	$12 = ( *($2 + [8]) ? $4 : $8 )
	$9 = *($12)
	$8 = $10
	
.LOOP $label$4:
	$6 = (($6 - $7) + [1])
	if ( ($6 == 0) ){ goto $label$2 }
	$6 = CALL $137($8, $9, $6)
	if ( ($6 == 0) ){ goto $label$2 }
	if ( (CALL $138($6, $12, $7) == 0) ){ goto $label$5 }
	$8 = ($6 + [1])
	$6 = ($11 - $8)
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$5
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$2 }
	$6 = ($6 - $10)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$13 = ($0 + [8])
	$14 = ($0 + [4])
	$9 = [0]
	
.LOOP $label$6:
	$8 = CALL $119($3, $1, $9, ($6 - $9), $1)
	$7 = *($14)
	if ( ((uint_32)$7 >= (uint_32)*($13)) ){ goto $label$8 }
	*($7) = *($3)
	$7 = ($3 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($14) = (*($14) + [12])
	*($3) = (int_64)0
	goto $label$7 
	
.LABEL $label$8
	CALL $2($0, $8)
	if ( ((*($3) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$7
	$10 = ($7 & [1])
	$7 = *($2)
	$7 = ( *(($2 + [4])) ? uint_32($7 >> [1]) : $10 )
	$9 = ($7 + $6)
	$8 = ($7 & [1])
	$7 = *($1)
	$12 = ( *(($1 + [4])) ? uint_32($7 >> [1]) : $8 )
	if ( ($12 <= $9) ){ goto $label$1 }
	$6 = $9
	if ( ($7 == 0) ){ goto $label$9 }
	$8 = ($15 + $9)
	$15 = ( *(($1 + [8])) ? $5 : $8 )
	$11 = ($15 + $12)
	$6 = ($11 - $8)
	if ( ((int_32)$6 < (int_32)$7) ){ goto $label$1 }
	$10 = ( *(($2 + [8])) ? $4 : $10 )
	$12 = *($10)
	
.LOOP $label$10:
	$6 = (($6 - $7) + [1])
	if ( ($6 == 0) ){ goto $label$1 }
	$6 = CALL $137($8, $12, $6)
	if ( ($6 == 0) ){ goto $label$1 }
	if ( (CALL $138($6, $10, $7) == 0) ){ goto $label$11 }
	$8 = ($6 + [1])
	$6 = ($11 - $8)
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$10 }
	goto $label$1 
	
.LABEL $label$11
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$1 }
	$6 = ($6 - $15)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	$7 = *($1)
	if ( ((int_32)$9 == (int_32)( *(($1 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$12 }
	$7 = CALL $119($3, $1, $9, [-1], $1)
	$6 = *(($0 + [4]))
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [8]))) ){ goto $label$13 }
	*($6) = *($3)
	*(($6 + [8])) = *(($3 + [8]))
	*($7 + [8]) = [0]
	*($7) = (int_64)0
	*(($7 = ($0 + [4]))) = (*($7) + [12])
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	CALL $2($0, $7)
	if ( ((*($3) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*($7 + [8]))
	
.LABEL $label$12
	$global$0 = ($3 + [16])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [272])
	$4 = *($0 + [264])
	$6 = *(($0 + [300]))
	$5 = *(($0 + [296]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [9880])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [280])), (int_64)3607572834567340032, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $11($3, $7)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [9880])
	
.LABEL $label$1
	$7 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($7, [8324])
	CALL eosio_assert($7, [10010])
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$3), [10045])
	CALL eosio_assert(((int_64)*(($0 + [272])) == (int_64)CALL $fimport$3()), [10091])
	*($8 + [8]) = $1
	$4 = *($8)
	CALL eosio_assert([1], [10142])
	CALL eosio_assert([1], [9592])
	CALL memcpy($2, $8, [8])
	CALL eosio_assert([1], [9592])
	CALL memcpy(($2 | [8]), ($8 + [8]), [4])
	CALL db_update_i64(*($8 + [20]), (int_64)0, $2, [12])
	$7 = ($0 + [288])
	if ( (uint_64)($4 <= *($7)) ){ goto $label$5 }
	*($7) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	$global$0 = ($2 + [16])
}

void .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ($0 + [224])
	$5 = *(($0 + [252]))
	$4 = *(($0 + [248]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [9880])
	if ( $7 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [232])), (int_64)5455799419177145712, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(CALL $16($3, $6) + [16]) == (int_32)$3), [9880])
	$global$0 = ($2 + [48])
	return 
	
.LABEL $label$2
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [224])) == (int_64)CALL $fimport$3()), [9959])
	*(($6 = CALL _Znwj([32])) + [16]) = $3
	*($6) = $1
	*($6 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [9592])
	CALL memcpy(($2 + [16]), $6, [8])
	CALL eosio_assert([1], [9592])
	$5 = ($6 + [8])
	CALL memcpy((($2 + [16]) | [8]), $5, [8])
	$1 = *($6)
	$4 = ($0 + [232])
	*($6 + [20]) = CALL db_store_i64(*($4), (int_64)5455799419177145712, $8, $1, ($2 + [16]), [16])
	$7 = ($0 + [240])
	if ( (uint_64)($1 <= *($7)) ){ goto $label$6 }
	*($7) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$1 = *($4)
	$9 = *($6)
	*($2 + [40]) = *($5)
	*($6 + [24]) = CALL db_idx64_store($1, (int_64)5455799419177145712, $8, $9, ($2 + [40]))
	*($2 + [40]) = $6
	$1 = *($6)
	*($2 + [16]) = $1
	$4 = *(($6 + [20]))
	*($2 + [12]) = $4
	$7 = ($0 + [252])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [256]))) ){ goto $label$8 }
	*($5 + [8]) = $1
	*($5 + [16]) = $4
	*($2 + [40]) = [0]
	*($5) = $6
	*($7) = ($5 + [24])
	$6 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( $6 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$8
	CALL $17(($0 + [248]), ($2 + [40]), ($2 + [16]), ($2 + [12]))
	$6 = *($2 + [40])
	*($2 + [40]) = [0]
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$7
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($2 + [48])
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9931])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $140($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9954])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [9954])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [24]) = [-1]
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $17(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $17 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [160]) == (int_32)$0), [9880])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4154159847563875632, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $7($0, $4)
	CALL eosio_assert(((int_32)*($5 + [160]) == (int_32)$0), [9880])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9931])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $140($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9954])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [9954])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $12(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9880])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607572834567340032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $11($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9880])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $75 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$4 = ($global$0 - [224])
	$global$0 = $4
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [9647])
	$5 = [0]
	$6 = *($2 + [8])
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	$8 = $7)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $10 ){ goto $label$5 }
	$10 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$10 = [0]
	
.LABEL $label$1
	CALL eosio_assert($10, [8540])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [8798])
	$10 = [0]
	*((($4 + [88]) + [32])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$8 = *($0)
	*($4 + [88]) = $8
	*($4 + [96]) = $7
	$11 = [0]
	$5 = CALL db_find_i64($8, $7, (int_64)-4157508551318700032, $7)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $54(($4 + [88]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [9880])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [8827])
	CALL require_auth(*($11 + [32]))
	$12 = ($11 + [32])
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $9
	$10 = [1]
	$13 = $5
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $9
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$10 = ((int_32)$5 < (int_32)[6])
	$13 = ($5 + [1])
	$5 = $13
	if ( $10 ){ goto $label$13 }
	$10 = [1]
	$5 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [8887])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8904])
	CALL eosio_assert(((int_64)$6 == (int_64)*($11 + [8])), [8933])
	CALL eosio_assert(((int_64)$8 <= (int_64))(*($11 + [16]) - *($11))), [8959])
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [88])), [10045])
	CALL eosio_assert(((int_64)*($4 + [88]) == (int_64)CALL $fimport$3()), [10091])
	$7 = *($11 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$7), [9670])
	$8 = ((int_64)*($11) + (int_64)$8)
	*($11) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9713])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [9732])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$8) == (int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8)), [10142])
	*($4 + [192]) = (($4 + [128]) + [40])
	*($4 + [188]) = ($4 + [128])
	*($4 + [184]) = ($4 + [128])
	*($4 + [200]) = ($4 + [184])
	*($4 + [212]) = ($11 + [16])
	*($4 + [208]) = $11
	*($4 + [216]) = $12
	CALL $56(($4 + [208]), ($4 + [200]))
	CALL db_update_i64(*($11 + [44]), (int_64)0, ($4 + [128]), [40])
	$5 = (($4 + [88]) + [16])
	if ( (uint_64)($8 <= *($5)) ){ goto $label$14 }
	*($5) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$14
	$9 = *(($2 + [8]))
	*((($4 + [72]) + [8])) = $9
	$8 = *($12)
	$7 = *($2)
	*((($4 + [8]) + [8])) = $9
	*($4 + [72]) = $7
	*($4 + [8]) = $7
	CALL $76($0, $8, ($4 + [8]), $8)
	$7 = *($12)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$15 }
	$9 = *($0)
	$8 = (int_64)6
	
.LOOP $label$16:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$16 }
	*(($10 = (($4 + [24]) + [24]))) = *(($2 + [8]))
	*($4 + [32]) = $1
	*($4 + [24]) = $7
	*($4 + [40]) = *($2)
	CALL $118(($4 + [56]), $3)
	*(($5 = CALL _Znwj([16]))) = $7
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [128]) + [24])) = *($10)
	$10 = (($4 + [24]) + [40])
	*(($11 = (($4 + [128]) + [40]))) = *($10)
	*($10) = [0]
	*($4 + [208]) = $5
	$5 = ($5 + [16])
	*($4 + [216]) = $5
	*($4 + [212]) = $5
	*($4 + [128]) = *($4 + [24])
	*($4 + [136]) = *($4 + [32])
	*($4 + [144]) = *($4 + [40])
	*($4 + [160]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $33($9, (int_64)-3617168760277827584, ($4 + [208]), ($4 + [128]))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$17 }
	CALL _ZdlPv(*($11))
	
.LABEL $label$17
	$5 = *($4 + [208])
	if ( ($5 == 0) ){ goto $label$18 }
	*($4 + [212]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$18
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$15
	$11 = *($4 + [112])
	if ( ($11 == 0) ){ goto $label$19 }
	$13 = ($4 + [116])
	$5 = *($13)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$21 }
	
.LOOP $label$22:
	$5 = ($5 + [-24])
	$10 = *($5)
	*($5) = [0]
	if ( ($10 == 0) ){ goto $label$23 }
	CALL _ZdlPv($10)
	
.LABEL $label$23
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$22 }
	$5 = *(($4 + [112]))
	goto $label$20 
	
.LABEL $label$21
	$5 = $11
	
.LABEL $label$20
	*($13) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$19
	$global$0 = ($4 + [224])
}

void .FUNC $18 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [224])
	$5 = *(($0 + [252]))
	$4 = *(($0 + [248]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [9880])
	goto $label$2 
	
.LABEL $label$3
	$6 = CALL db_find_i64(*($3), *(($0 + [232])), (int_64)5455799419177145712, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $16($3, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [9880])
	
.LABEL $label$2
	CALL eosio_assert([1], [10201])
	CALL eosio_assert([1], [10235])
	$6 = CALL db_next_i64(*($7 + [20]), ($2 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $16($3, $6)
	
.LABEL $label$6
	CALL $19($3, $7)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [10265])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10310])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10360])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [20]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)5455799419177145712, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$global$0 = ($2 + [16])
}

void .FUNC $58 (int_32 $0, int_64 $1)
{
}

void .FUNC $59 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	float_64 $12
	$3 = ($global$0 - [208])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [9647])
	CALL require_auth($1)
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8540])
	$10 = [0]
	$9 = [0]
	$8 = *($2)
	if ( ((uint_64)((int_64)$8 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $11
	$9 = [1]
	$2 = $4
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $11
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8560])
	CALL eosio_assert(((int_64)$8 > (int_64)0), [8636])
	*((($3 + [40]) + [32])) = [0]
	*($3 + [48]) = $1
	*($3 + [56]) = (int_64)-1
	*($3 + [64]) = (int_64)0
	*($3 + [40]) = *($0)
	$4 = CALL $60(($3 + [40]), $6, [8660])
	CALL eosio_assert(((int_64)*($4) >= (int_64)$8), [8684])
	*(($3 + [32])) = [0]
	*($3 + [8]) = $1
	*($3 + [16]) = (int_64)-1
	*($3 + [24]) = (int_64)0
	$7 = *($0)
	*($3) = $7
	$9 = CALL db_find_i64($7, $1, (int_64)3607749778856088576, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	$10 = CALL $23($3, $9)
	CALL eosio_assert(((int_32)*($10 + [76]) == (int_32)$3), [9880])
	
.LABEL $label$11
	$12 = *($10 + [48])
	$11 = *($4)
	CALL eosio_assert(((int_32)*($4 + [16]) == (int_32)($3 + [40])), [10045])
	CALL eosio_assert(((int_64)*($3 + [40]) == (int_64)CALL $fimport$3()), [10091])
	$7 = *($4 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)$7), [9789])
	$6 = (int_64)
	*($4) = $6(*($4) - $8))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9837])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [9859])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$7) == (int_64)(uint_64)*($4 + [8]) >> (uint_64)(int_64)8)), [10142])
	CALL eosio_assert([1], [9592])
	CALL memcpy(($3 + [80]), $4, [8])
	CALL eosio_assert([1], [9592])
	CALL memcpy((($3 + [80]) | [8]), ($4 + [8]), [8])
	CALL db_update_i64(*($4 + [20]), $1, ($3 + [80]), [16])
	$12 = ((float_64)$12 * (float_64)((float_64)(CASTING float_64)(int_64 $8) / (float_64)(CASTING float_64)(int_64 $11)))
	$4 = (($3 + [40]) + [16])
	if ( (uint_64)($7 <= *($4)) ){ goto $label$12 }
	*($4) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$12
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [10010])
	CALL eosio_assert(((int_32)*($10 + [76]) == (int_32)$3), [10045])
	CALL eosio_assert(((int_64)*($3) == (int_64)CALL $fimport$3()), [10091])
	$7 = *($10)
	CALL eosio_assert(((int_64)$5 == (int_64)*(($10 + [16]))), [9670])
	$8 = ((int_64)*($10 + [8]) + (int_64)$8)
	*($10 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9713])
	CALL eosio_assert(((int_64)*($10 + [8]) < (int_64)4611686018427387904), [9732])
	*($10 + [56]) = ((float_64)$12 + (float_64)*($10 + [56]))
	*($10 + [48]) = (float_64))(*($10 + [48]) - $12)
	CALL eosio_assert(((int_64)$7 == (int_64)*($10)), [10142])
	*($3 + [160]) = (($3 + [80]) + [72])
	*($3 + [156]) = ($3 + [80])
	*($3 + [152]) = ($3 + [80])
	*($3 + [168]) = ($3 + [152])
	*($3 + [180]) = ($10 + [8])
	*($3 + [176]) = $10
	*($3 + [184]) = ($10 + [24])
	*($3 + [188]) = ($10 + [40])
	*($3 + [192]) = ($10 + [48])
	*($3 + [196]) = ($10 + [56])
	*($3 + [200]) = ($10 + [64])
	*($3 + [204]) = ($10 + [72])
	CALL $45(($3 + [176]), ($3 + [168]))
	CALL db_update_i64(*($10 + [80]), $1, ($3 + [80]), [72])
	if ( (uint_64)($7 <= *(($3 + [16]))) ){ goto $label$13 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*(($4 = ($0 + [200]))) = ((float_64)$12 + (float_64)*($4))
	CALL $15($0, $1)
	CALL $36($0)
	$10 = *($3 + [24])
	if ( ($10 == 0) ){ goto $label$14 }
	$2 = ($3 + [28])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$18 }
	CALL _ZdlPv($9)
	
.LABEL $label$18
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$17 }
	$4 = *(($3 + [24]))
	goto $label$15 
	
.LABEL $label$16
	$4 = $10
	
.LABEL $label$15
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$10 = *($3 + [64])
	if ( ($10 == 0) ){ goto $label$19 }
	$2 = ($3 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$23 }
	CALL _ZdlPv($9)
	
.LABEL $label$23
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($3 + [64]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $10
	
.LABEL $label$20
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$19
	$global$0 = ($3 + [208])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, ( $7 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $126($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $117($0)
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [20])
	CALL $120($6, *(($4 + [4])))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [8])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	$9 = *(($1 + [20]))
	$9 = ( *(($1 + [24])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$4 = ($9 + $4)
	$8 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $140($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9592])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $106($3, $7)
	CALL $106($3, $6)
	$8 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($5 + [8]), (int_64)4229853544465694720, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $143($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $53 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [9647])
	CALL require_auth(*($0))
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8540])
	$9 = [0]
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$9 = [1]
	$10 = $4
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$10 }
	$9 = [1]
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$9 = [0]
	
.LABEL $label$6
	CALL eosio_assert($9, [8560])
	CALL eosio_assert(((int_64)$11 > (int_64)0), [8575])
	*((($3 + [8]) + [32])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$7 = *($0)
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*(CALL $54(($3 + [8]), $4) + [40]) == (int_32)($3 + [8])), [9880])
	$4 = [0]
	goto $label$11 
	
.LABEL $label$12
	$4 = [1]
	
.LABEL $label$11
	CALL eosio_assert($4, [8603])
	$8 = *($0)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [9959])
	$4 = CALL _Znwj([56])
	CALL $55($4)
	*($4 + [40]) = ($3 + [8])
	*($4 + [8]) = $5
	*($4 + [32]) = $1
	*($4 + [16]) = *($2)
	*(($4 + [24])) = *(($2 + [8]))
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($4 + [16])
	*($3 + [112]) = $4
	*($3 + [120]) = ($4 + [32])
	CALL $56(($3 + [112]), ($3 + [104]))
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157508551318700032, $8, $7), ($3 + [48]), [40]
	*($4 + [44]) = $10)
	$9 = (($3 + [8]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$13 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$13
	*($3 + [112]) = $4
	$7 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $7)
	*($3 + [88]) = $10
	$2 = ($3 + [36])
	$9 = *($2)
	if ( ((uint_32)$9 >= (uint_32)*(($3 + [40]))) ){ goto $label$16 }
	*($9 + [8]) = $7
	*($9 + [16]) = $10
	*($3 + [112]) = [0]
	*($9) = $4
	*($2) = ($9 + [24])
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $4 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $57(($3 + [32]), ($3 + [112]), ($3 + [48]), ($3 + [88]))
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$10 = *($3 + [32])
	if ( ($10 == 0) ){ goto $label$17 }
	$2 = ($3 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($3 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $10
	
.LABEL $label$18
	*($2) = $10
	CALL _ZdlPv($4)
	
.LABEL $label$17
	$global$0 = ($3 + [128])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9931])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $140($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	CALL $55($5)
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $109(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $57(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $117 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $35 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [10413])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $28($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9954])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $140($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10420])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $140($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9954])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($0, *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [9954])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9598])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [8540])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($0, *($4 + [4]), [8])
	$6 = (*($4 + [4]) + [8])
	*($4 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $6) > (uint_32)[7]), [9954])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

int_32 .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $106(*($1), ($0 + [32]))
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $130($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9598])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [8540])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9598])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$1 = $3
	$6 = [1]
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$1 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [8540])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [8540])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [8540])
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9592])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9592])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [96])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [160]) == (int_32)$0), [10045])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10091])
	$5 = *($1)
	*($1) = *((*($2) + [56]))
	*($1 + [8]) = (CASTING float_64)(int_64 *(*(($2 + [4]))))
	*($1 + [24]) = (CASTING float_64)(int_64 *(*(($2 + [8]))))
	CALL eosio_assert([1], [9598])
	$6 = ($1 + [24])
	$7 = ($1 + [8])
	$8 = (CASTING uint_64)(uint_32 $5)
	$9 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $10
	$11 = [1]
	$12 = $2
	$2 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$2 < (int_32)[6])
	$12 = ($2 + [1])
	$2 = $12
	if ( $11 ){ goto $label$5 }
	$11 = [1]
	$2 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [8540])
	*(($1 + [40])) = (int_64)1397703940
	*($1 + [32]) = (int_64)240000000
	CALL eosio_assert(((int_32)$5 == (int_32)*($1)), [10142])
	$11 = $3
	$2 = ($11 + [-160])
	$global$0 = $2
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($11 + [-8])
	*($4 + [16]) = $4
	*($4 + [28]) = $7
	*($4 + [24]) = $1
	*($4 + [32]) = ($1 + [16])
	*($4 + [36]) = $6
	*($4 + [40]) = ($1 + [32])
	*($4 + [44]) = ($1 + [48])
	*($4 + [48]) = ($1 + [56])
	*($4 + [52]) = ($1 + [64])
	*($4 + [56]) = ($1 + [72])
	*($4 + [60]) = ($1 + [80])
	*($4 + [64]) = ($1 + [96])
	*($4 + [68]) = ($1 + [104])
	*($4 + [72]) = ($1 + [112])
	*($4 + [76]) = ($1 + [120])
	*($4 + [80]) = ($1 + [128])
	*($4 + [84]) = ($1 + [136])
	*($4 + [88]) = ($1 + [144])
	*($4 + [92]) = ($1 + [152])
	CALL $39(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [164]), (int_64)0, $2, [152])
	if ( ((uint_64)*($0 + [16]) > (uint_64)$8) ){ goto $label$6 }
	*(($0 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($4 + [96])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [16]) = $2
	*($3 + [24]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [16])
	$1 = *($0 + [56])
	$6 = *(($0 + [44]))
	$5 = *(($0 + [40]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$4), [9880])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [24])), (int_64)4154159847563875632, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $7($4, $7)
	CALL eosio_assert(((int_32)*($8 + [160]) == (int_32)$4), [9880])
	
.LABEL $label$1
	*($3) = $0
	*($3 + [4]) = ($3 + [24])
	*($3 + [8]) = ($3 + [16])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [10010])
	CALL $21($4, $8, $3)
	$global$0 = ($3 + [32])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9931])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $140($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	$5 = CALL _Znwj([88])
	CALL $46($5)
	*($5 + [76]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [24])
	*($3 + [44]) = ($5 + [40])
	*($3 + [48]) = ($5 + [48])
	*($3 + [52]) = ($5 + [56])
	*($3 + [56]) = ($5 + [64])
	*($3 + [60]) = ($5 + [72])
	CALL $105(($3 + [32]), ($3 + [24]))
	*($5 + [80]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $48(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = $1
	CALL require_auth(*($0))
	*(($2 + [48])) = [0]
	*($2 + [24]) = $1
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0)
	*($2 + [16]) = $3
	$0 = CALL db_find_i64($3, $1, (int_64)3607749778856088576, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $23(($2 + [16]), $0)
	CALL eosio_assert(((int_32)*($0 + [76]) == (int_32)($2 + [16])), [9880])
	*($2 + [8]) = ($2 + [56])
	CALL eosio_assert([1], [10010])
	CALL $24(($2 + [16]), $0, ($2 + [8]))
	$4 = *($2 + [40])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$5 }
	CALL _ZdlPv($6)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [40]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

void .FUNC $25 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	$5 = *($0)
	$6 = (int_64)6
	
.LOOP $label$2:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$2 }
	*($4 + [64]) = (int_64)3617214756542218240
	*($4 + [56]) = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [8349]
	$8 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$8 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$10 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$3 }
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [8361]
	$11 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$9 = ($9 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$10 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$9 }
	*(($4 + [32])) = *(($2 + [8]))
	*($4 + [16]) = $1
	*($4 + [8]) = $5
	*($4 + [24]) = *($2)
	CALL $118(($4 + [40]), $3)
	$0 = CALL $26(($4 + [72]), ($4 + [56]), $8, $11, ($4 + [8]))
	CALL $27(($4 + [112]), $0)
	$9 = *($4 + [112])
	CALL send_inline($9, (*($4 + [116]) - $9))
	$9 = *($4 + [112])
	if ( ($9 == 0) ){ goto $label$15 }
	*($4 + [116]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$15
	$9 = *($0 + [28])
	if ( ($9 == 0) ){ goto $label$16 }
	*(($0 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$16
	$9 = *($0 + [16])
	if ( ($9 == 0) ){ goto $label$17 }
	*(($0 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$17
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [10045])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10091])
	$5 = *($1)
	*($1) = *(*($2))
	CALL eosio_assert([1], [9598])
	$6 = (int_64)5392708
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $7
	$8 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [8540])
	*(($1 + [16])) = (int_64)1380533252
	*($1 + [8]) = (int_64)0
	CALL eosio_assert([1], [9598])
	$6 = (int_64)5392708
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$6 = $7
	$8 = [1]
	$9 = $2
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$6 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$8 = ((int_32)$2 < (int_32)[6])
	$9 = ($2 + [1])
	$2 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$2 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [8540])
	*(($1 + [32])) = (int_64)1380533252
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = [0]
	*($1 + [48]) = (int_64)4652007308841189376
	*($1 + [56]) = (int_64)0
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = [0]
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10142])
	$8 = $3
	$2 = ($8 + [-80])
	$global$0 = $2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($8 + [-8])
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [8])
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [24])
	*($4 + [44]) = ($1 + [40])
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [56])
	*($4 + [56]) = ($1 + [64])
	*($4 + [60]) = ($1 + [72])
	CALL $45(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $2, [72])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$11 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$global$0 = ($4 + [64])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $28($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9592])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9592])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $99(CALL $98($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $28($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $29(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9954])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9954])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_64 .FUNC $135 (float_64 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$1 = (CASTING int_64)(float_64 $0)
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	if ( ((int_32)($2) & [2146435072]) != (int_32)[2146435072]) ){ goto $label$1 }
	return ((float_64)((float_64)$0 * (float_64)$0) + (float_64)$0)
	
.LABEL $label$1
	$3 = (CASTING uint_32)(uint_64 $1)
	if ( ((int_32)$2 > (int_32)[0]) ){ goto $label$3 }
	if ( ((($2 & [2147483647]) | $3) == 0) ){ goto $label$2 }
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$3 }
	$0 = (float_64)
	return ((float_64)$0($0 - $0)) / (float_64)$0)
	
.LABEL $label$3
	$4 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)
	if ( $4) ){ goto $label$4 }
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	$4 = [0]
	$6 = $3
	if ( (($2 & [1048576]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = [0]
	
.LOOP $label$9:
	$2 = uint_32($3 >> [11])
	$4 = ($4 + [-21])
	$6 = ($3 << [21])
	$3 = $6
	if ( ($2 == 0) ){ goto $label$9 }
	if ( ($2 & [1048576]) ){ goto $label$6 }
	
.LABEL $label$7
	$5 = [0]
	
.LOOP $label$10:
	$5 = ($5 + [1])
	$3 = ($2 & [524288])
	$7 = ($2 << [1])
	$2 = $7
	if ( ($3 == 0) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	$3 = ($6 << $5)
	$4 = (($4 + [1]) - $5)
	$2 = (uint_32($6 >> ([32] - $5)) | $7)
	
.LABEL $label$4
	$2 = (($2 & [1048575]) | [1048576])
	$7 = ($4 + [-1023])
	if ( (($7 & [1]) == 0) ){ goto $label$11 }
	$2 = (($2 << [1]) | uint_32($3 >> [31]))
	$3 = ($3 << [1])
	
.LABEL $label$11
	$5 = (uint_32($3 >> [31]) | ($2 << [1]))
	$2 = ((int_32)$5 < (int_32)[2097152])
	$8 = ( [0] ? [2097152] : $2 )
	$5 = ( [0] ? [4194304] : $2 )
	$2 = ($5 | [1048576])
	$5 = ($5 << [1])
	$4 = (( $5 ? ($5 + [-4194304]) : $2 ) | (uint_32($3 >> [30]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$12 }
	$8 = ($8 | [1048576])
	$4 = ($4 - $2)
	$5 = ($2 + [1048576])
	
.LABEL $label$12
	$4 = ($5 + [524288])
	$2 = (($4 << [1]) | (uint_32($3 >> [29]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$13 }
	$8 = ($8 + [524288])
	$2 = ($2 - $4)
	$5 = ($5 + [1048576])
	
.LABEL $label$13
	$4 = ($5 + [262144])
	$2 = (($2 << [1]) | (uint_32($3 >> [28]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$14 }
	$8 = ($8 + [262144])
	$2 = ($2 - $4)
	$5 = ($5 + [524288])
	
.LABEL $label$14
	$4 = ($5 + [131072])
	$2 = (($2 << [1]) | (uint_32($3 >> [27]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$15 }
	$8 = ($8 + [131072])
	$2 = ($2 - $4)
	$5 = ($5 + [262144])
	
.LABEL $label$15
	$4 = ($5 + [65536])
	$2 = (($2 << [1]) | (uint_32($3 >> [26]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$16 }
	$8 = ($8 + [65536])
	$2 = ($2 - $4)
	$5 = ($5 + [131072])
	
.LABEL $label$16
	$4 = ($5 + [32768])
	$2 = (($2 << [1]) | (uint_32($3 >> [25]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$17 }
	$8 = ($8 + [32768])
	$2 = ($2 - $4)
	$5 = ($5 + [65536])
	
.LABEL $label$17
	$4 = ($5 + [16384])
	$2 = (($2 << [1]) | (uint_32($3 >> [24]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$18 }
	$8 = ($8 + [16384])
	$2 = ($2 - $4)
	$5 = ($5 + [32768])
	
.LABEL $label$18
	$4 = ($5 + [8192])
	$2 = (($2 << [1]) | (uint_32($3 >> [23]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$19 }
	$8 = ($8 + [8192])
	$2 = ($2 - $4)
	$5 = ($5 + [16384])
	
.LABEL $label$19
	$4 = ($5 + [4096])
	$2 = (($2 << [1]) | (uint_32($3 >> [22]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$20 }
	$8 = ($8 + [4096])
	$2 = ($2 - $4)
	$5 = ($5 + [8192])
	
.LABEL $label$20
	$4 = ($5 + [2048])
	$2 = (($2 << [1]) | (uint_32($3 >> [21]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$21 }
	$8 = ($8 + [2048])
	$2 = ($2 - $4)
	$5 = ($5 + [4096])
	
.LABEL $label$21
	$4 = ($5 + [1024])
	$2 = (($2 << [1]) | (uint_32($3 >> [20]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$22 }
	$8 = ($8 + [1024])
	$2 = ($2 - $4)
	$5 = ($5 + [2048])
	
.LABEL $label$22
	$4 = ($5 + [512])
	$2 = (($2 << [1]) | (uint_32($3 >> [19]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$23 }
	$8 = ($8 + [512])
	$2 = ($2 - $4)
	$5 = ($5 + [1024])
	
.LABEL $label$23
	$4 = ($5 + [256])
	$2 = (($2 << [1]) | (uint_32($3 >> [18]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$24 }
	$8 = ($8 + [256])
	$2 = ($2 - $4)
	$5 = ($5 + [512])
	
.LABEL $label$24
	$4 = ($5 + [128])
	$2 = (($2 << [1]) | (uint_32($3 >> [17]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$25 }
	$8 = ($8 + [128])
	$2 = ($2 - $4)
	$5 = ($5 + [256])
	
.LABEL $label$25
	$4 = ($5 + [64])
	$2 = (($2 << [1]) | (uint_32($3 >> [16]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$26 }
	$8 = ($8 + [64])
	$2 = ($2 - $4)
	$5 = ($5 + [128])
	
.LABEL $label$26
	$4 = ($5 + [32])
	$2 = (($2 << [1]) | (uint_32($3 >> [15]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$27 }
	$8 = ($8 + [32])
	$2 = ($2 - $4)
	$5 = ($5 + [64])
	
.LABEL $label$27
	$4 = ($5 + [16])
	$2 = (($2 << [1]) | (uint_32($3 >> [14]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$28 }
	$8 = ($8 + [16])
	$2 = ($2 - $4)
	$5 = ($5 + [32])
	
.LABEL $label$28
	$4 = ($5 + [8])
	$2 = (($2 << [1]) | (uint_32($3 >> [13]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$29 }
	$8 = ($8 + [8])
	$2 = ($2 - $4)
	$5 = ($5 + [16])
	
.LABEL $label$29
	$4 = ($5 + [4])
	$2 = (($2 << [1]) | (uint_32($3 >> [12]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$30 }
	$8 = ($8 + [4])
	$2 = ($2 - $4)
	$5 = ($5 + [8])
	
.LABEL $label$30
	$4 = ($5 + [2])
	$2 = (($2 << [1]) | (uint_32($3 >> [11]) & [1]))
	if ( ((int_32)$2 < (int_32)$4) ){ goto $label$31 }
	$8 = ($8 + [2])
	$2 = ($2 - $4)
	$5 = ($5 + [4])
	
.LABEL $label$31
	$2 = ($5 + [1])
	$4 = (($2 << [1]) | (uint_32($3 >> [10]) & [1]))
	if ( ((int_32)$4 < (int_32)$2) ){ goto $label$32 }
	$8 = ($8 + [1])
	$4 = ($4 - $2)
	$5 = ($5 + [2])
	
.LABEL $label$32
	$2 = ($3 << [23])
	$3 = (($4 << [1]) | (uint_32($3 >> [9]) & [1]))
	$9 = uint_32($7 >> [1])
	$4 = [-2147483648]
	$10 = [0]
	$6 = [0]
	
.LOOP $label$33:
	$7 = ($6 + $4)
	if ( ((int_32)$3 > (int_32)$5) ){ goto $label$35 }
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$34 }
	if ( ($2 <= $7) ){ goto $label$34 }
	
.LABEL $label$35
	$3 = (($3 - $5) - ($2 <= $7))
	$6 = ($7 + $4)
	$5 = ($5 + (((int_32)$7 < (int_32)[0]) & ((int_32)$6 > (int_32)[-1])))
	$10 = ($10 + $4)
	$2 = ($2 - $7)
	
.LABEL $label$34
	$3 = (uint_32($2 >> [31]) | ($3 << [1]))
	$2 = ($2 << [1])
	$4 = uint_32($4 >> [1])
	if ( $4 ){ goto $label$33 }
	if ( (($2 | $3) == 0) ){ goto $label$36 }
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$37 }
	$10 = (($10 & [1]) + $10)
	goto $label$36 
	
.LABEL $label$37
	$8 = ($8 + [1])
	$10 = [0]
	
.LABEL $label$36
	$0 = (CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 ((($9 << [20]) + int_32($8 >> [1])) + [1071644672])) << (int_64)32) | (int_64)(CASTING uint_64)(uint_32 (uint_32($10 >> [1]) | ($8 << [31])))))
	
.LABEL $label$2
	return $0
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $100($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $28($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $101($2, $1)
	CALL $103(CALL $102(CALL $102($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

void .FUNC $68 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $28(($6 + [28]), [8])
	$2 = *($6 + [28])
	CALL eosio_assert(((int_32)(*(($6 + [32])) - $2) > (int_32)[7]), [9592])
	CALL memcpy($2, $4, [8])
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$4 = ($8 + [-24])
	*($5) = *($4)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($4) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$7 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $65 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9931])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $140($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*($3 + [12]) = $7
	*($3 + [8]) = $7
	*($3 + [16]) = ($7 + $6)
	*(($9 = CALL _Znwj([48])) + [24]) = (int_64)1397703940
	*($9 + [16]) = (int_64)0
	CALL eosio_assert([1], [9598])
	$10 = ($9 + [16])
	$11 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [8540])
	*($9 + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($9 + [8])
	*($3 + [32]) = $9
	*($3 + [40]) = $10
	CALL $110(($3 + [32]), ($3 + [24]))
	*($9 + [36]) = $1
	*($3 + [24]) = $9
	$11 = *($9)
	*($3 + [32]) = $11
	*($3 + [4]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $67($8, ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $143($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [48])
	return $9
}

void .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	CALL eosio_assert(((int_32)*($1 + [76]) == (int_32)$0), [10045])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10091])
	$5 = *($1)
	CALL eosio_assert([1], [9598])
	$6 = (int_64)5392708
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$6 = $8
	$9 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$6 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [8540])
	*(($1 + [16])) = (int_64)1380533252
	*($1 + [8]) = (int_64)0
	$7 = *($2)
	CALL eosio_assert(((int_64)*($7 + [8]) == (int_64)*(($1 + [32]))), [9670])
	$6 = ((int_64)*($1 + [24]) + (int_64)*($7))
	*($1 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9713])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [9732])
	$6 = CALL current_time()
	*($1 + [56]) = (int_64)0
	*($1 + [40]) = ((uint_64)$6 / (uint_64)(int_64)1000000)
	*($1 + [48]) = ((float_64)*(*($2 + [4])) + (float_64)*($1 + [48]))
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [10142])
	$9 = $3
	$7 = ($9 + [-80])
	$global$0 = $7
	*($4 + [12]) = $7
	*($4 + [8]) = $7
	*($4 + [16]) = ($9 + [-8])
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [8])
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [24])
	*($4 + [44]) = ($1 + [40])
	*($4 + [48]) = ($1 + [48])
	*($4 + [52]) = ($1 + [56])
	*($4 + [56]) = ($1 + [64])
	*($4 + [60]) = ($1 + [72])
	CALL $45(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [80]), (int_64)0, $7, [72])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	$global$0 = ($4 + [64])
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9592])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$0 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $0, [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9931])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $140($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL _Znwj([32])
	$6 = CALL $111($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($3 + [8]) = $7)
	$8 = *($1 + [20])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$2 = *($9)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($2 + [8]) = $7
	*($2 + [16]) = $8
	*($3 + [24]) = [0]
	*($2) = $1
	*($9) = ($2 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $77(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($4)
	
.LABEL $label$6
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL _ZdlPv($5)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $60 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9880])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $61($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9880])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $63 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [76]) == (int_32)$0), [9880])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749778856088576, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $23($0, $4)
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)$0), [9880])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $62 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	float_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [208])
	$global$0 = $3
	*($3 + [104]) = $1
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [9647])
	CALL require_auth($1)
	$4 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [8540])
	$7 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$6 }
	$4 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [8560])
	CALL eosio_assert(((int_64)*($2) > (int_64)0), [8636])
	*((($3 + [64]) + [32])) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	*($3 + [64]) = *($0)
	*($3 + [72]) = $1
	$5 = CALL $63(($3 + [64]), $1, [8702])
	CALL eosio_assert(((int_64)*($5 + [8]) >= (int_64)*($2)), [8684])
	$6 = *($5 + [8])
	$4 = *($2)
	$9 = ((float_64)((float_64)*($5 + [56]) * (float_64)(CASTING float_64)(int_64 $4)) / (float_64)(CASTING float_64)(int_64 $6))
	*($3 + [56]) = $9
	*(($7 = ($0 + [200]))) = (float_64))(*($7) - $9)
	if ( ((int_64)$6 != (int_64)$4) ){ goto $label$12 }
	*($3 + [112]) = $2
	*($3 + [116]) = ($3 + [56])
	CALL $64(($3 + [64]), $5, ($3 + [112]))
	CALL $18($0, *($3 + [104]))
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)($3 + [64])), [10045])
	CALL eosio_assert(((int_64)*($3 + [64]) == (int_64)CALL $fimport$3()), [10091])
	$4 = *($5)
	$7 = ($2 + [8])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($5 + [16]))), [9789])
	$6 = (int_64)
	*($5 + [8]) = $6(*($5 + [8]) - *($2)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9837])
	CALL eosio_assert(((int_64)*($5 + [8]) < (int_64)4611686018427387904), [9859])
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($5 + [32]))), [9670])
	$6 = ((int_64)*($5 + [24]) + (int_64)*($2))
	*($5 + [24]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9713])
	CALL eosio_assert(((int_64)*($5 + [24]) < (int_64)4611686018427387904), [9732])
	*($5 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$9 = *($3 + [56])
	*(($7 = ($5 + [56]))) = (float_64))(*($7) - $9)
	*($5 + [48]) = ((float_64)$9 + (float_64)*($5 + [48]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($5)), [10142])
	*($3 + [8]) = (($3 + [112]) + [72])
	*($3 + [4]) = ($3 + [112])
	*($3) = ($3 + [112])
	*($3 + [192]) = $3
	*($3 + [20]) = ($5 + [8])
	*($3 + [16]) = $5
	*($3 + [24]) = ($5 + [24])
	*($3 + [28]) = ($5 + [40])
	*($3 + [32]) = ($5 + [48])
	*($3 + [36]) = $7
	*($3 + [40]) = ($5 + [64])
	*($3 + [44]) = ($5 + [72])
	CALL $45(($3 + [16]), ($3 + [192]))
	CALL db_update_i64(*($5 + [80]), (int_64)0, ($3 + [112]), [72])
	$5 = (($3 + [64]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$11 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$5 = [0]
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$4 = *($0)
	*($3 + [16]) = $4
	$6 = *($3 + [104])
	*($3 + [24]) = $6
	$7 = CALL db_find_i64($4, $6, (int_64)-5001342326447013888, $6)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$14 }
	$5 = CALL $65(($3 + [16]), $7)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($3 + [16])), [9880])
	CALL eosio_assert([1], [10010])
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)($3 + [16])), [10045])
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)CALL $fimport$3()), [10091])
	$4 = *($5)
	*($5 + [8]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)*(($2 + [8])) == (int_64)*(($5 + [24]))), [9670])
	$6 = ((int_64)*($5 + [16]) + (int_64)*($2))
	*($5 + [16]) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9713])
	CALL eosio_assert(((int_64)*($5 + [16]) < (int_64)4611686018427387904), [9732])
	CALL eosio_assert(((int_64)$4 == (int_64)*($5)), [10142])
	*($3 + [200]) = (($3 + [112]) + [28])
	*($3 + [196]) = ($3 + [112])
	*($3 + [192]) = ($3 + [112])
	*($3 + [184]) = ($3 + [192])
	*($3 + [4]) = ($5 + [8])
	*($3) = $5
	*($3 + [8]) = ($5 + [16])
	CALL $66($3, ($3 + [184]))
	CALL db_update_i64(*($5 + [36]), (int_64)0, ($3 + [112]), [28])
	$5 = (($3 + [16]) + [16])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$13 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	goto $label$13 
	
.LABEL $label$14
	CALL eosio_assert(((int_64)*($3 + [16]) == (int_64)CALL $fimport$3()), [9959])
	*(($10 = CALL _Znwj([48])) + [24]) = (int_64)1397703940
	*($10 + [16]) = (int_64)0
	CALL eosio_assert([1], [9598])
	$11 = ($10 + [16])
	$4 = (int_64)5459781
	
.LOOP $label$16:
	$12 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$1 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$4 = $1
	$12 = [1]
	$7 = $5
	$5 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$4 = $1
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$18 }
	$12 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$16 }
	
.LABEL $label$15
	CALL eosio_assert($12, [8540])
	*($10 + [32]) = ($3 + [16])
	*($10) = *($3 + [104])
	$4 = CALL current_time()
	*($11) = *($2)
	*($10 + [8]) = ((uint_64)$4 / (uint_64)(int_64)1000000)
	*(($11 + [8])) = *(($2 + [8]))
	*($3 + [200]) = (($3 + [112]) + [28])
	*($3 + [196]) = ($3 + [112])
	*($3 + [192]) = ($3 + [112])
	*($3 + [184]) = ($3 + [192])
	*($3 + [4]) = ($10 + [8])
	*($3) = $10
	*($3 + [8]) = $11
	CALL $66($3, ($3 + [184]))
	$4 = *($10)
	$7 = CALL db_store_i64(*((($3 + [16]) + [8])), (int_64)-5001342326447013888, $6, $4, ($3 + [112]), [28])
	*($10 + [36]) = $7
	$5 = ($3 + [32])
	if ( (uint_64)($4 <= *($5)) ){ goto $label$19 }
	*($5) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($3) = $10
	$4 = *($10)
	*($3 + [112]) = $4
	*($3 + [192]) = $7
	$5 = *((($3 + [16]) + [28]))
	if ( ((uint_32)$5 >= (uint_32)*(($3 + [48]))) ){ goto $label$21 }
	*($5 + [8]) = $4
	*($5 + [16]) = $7
	*($3) = [0]
	*($5) = $10
	*(($3 + [44])) = ($5 + [24])
	$5 = *($3)
	*($3) = [0]
	if ( $5 ){ goto $label$20 }
	goto $label$13 
	
.LABEL $label$21
	CALL $67(($3 + [40]), $3, ($3 + [112]), ($3 + [192]))
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	
.LABEL $label$20
	CALL _ZdlPv($5)
	
.LABEL $label$13
	$4 = CALL current_time()
	*(($3 + [140])) = (int_64)0
	*(($3 + [156])) = (int_64)0
	*(($3 + [164])) = (int_64)0
	*($3 + [124]) = [0]
	*($3 + [128]) = [0]
	*($3 + [132 align=4]) = (int_64)0
	*($3 + [148 align=4]) = (int_64)0
	*($3 + [112]) = ((CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) + [60])
	$5 = ($3 + [148])
	$4 = (int_64)6
	$6 = *($3 + [104])
	
.LOOP $label$22:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$22 }
	*($3 + [8]) = (int_64)3617214756542218240
	*($3) = $6
	$4 = (int_64)6
	
.LOOP $label$23:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$23 }
	*($3 + [192]) = (int_64)-5001342339331915776
	CALL $68($5, $3, $0, ($3 + [192]), ($3 + [104]))
	$4 = *($3 + [104])
	*(($3 + [132])) = [86400]
	*($3 + [8]) = (int_64)0
	*($3) = $4
	CALL cancel_deferred($3)
	*($3 + [8]) = (int_64)0
	$4 = *($3 + [104])
	*($3) = $4
	CALL $69(($3 + [192]), ($3 + [112]))
	$5 = *($3 + [192])
	CALL send_deferred($3, $4, $5, (*($3 + [196]) - $5), [1])
	$5 = *($3 + [192])
	if ( ($5 == 0) ){ goto $label$24 }
	*($3 + [196]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$24
	CALL $36($0)
	CALL $70(($3 + [112]))
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$25 }
	$2 = ($3 + [44])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$27 }
	
.LOOP $label$28:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$29 }
	CALL _ZdlPv($7)
	
.LABEL $label$29
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$28 }
	$5 = *(($3 + [40]))
	goto $label$26 
	
.LABEL $label$27
	$5 = $8
	
.LABEL $label$26
	*($2) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$25
	$8 = *($3 + [88])
	if ( ($8 == 0) ){ goto $label$30 }
	$2 = ($3 + [92])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$32 }
	
.LOOP $label$33:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$34 }
	CALL _ZdlPv($7)
	
.LABEL $label$34
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$33 }
	$5 = *(($3 + [88]))
	goto $label$31 
	
.LABEL $label$32
	$5 = $8
	
.LABEL $label$31
	*($2) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$30
	$global$0 = ($3 + [208])
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9592])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [9592])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [9592])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [9592])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9592])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [9592])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9592])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [9592])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $99($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9592])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9592])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9592])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $99(CALL $98($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9954])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9954])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9954])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [28])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9954])
	CALL memcpy($3, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9954])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9954])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9954])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [9954])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9954])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $140($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1397703940
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9598])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [8540])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $94(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $143($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $95(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [112])
	$global$0 = $2
	*(($3 = $2) + [76]) = $0
	*($3 + [64]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $140($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [40])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [84]) = $1
	*($3 + [80]) = $1
	*($3 + [88]) = ($1 + $0)
	*($3 + [96]) = ($3 + [80])
	*($3 + [104]) = ($3 + [8])
	CALL $96(($3 + [104]), ($3 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $143($1)
	
.LABEL $label$4
	*($3 + [84]) = ($3 + [64])
	*($3 + [80]) = ($3 + [76])
	CALL $97(($3 + [80]), ($3 + [8]))
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$5
	$global$0 = ($3 + [112])
	return [1]
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	float_64 $8
	int_64 $9
	int_64 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $140($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9954])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [9954])
	$7 = (($3 + [8]) + [8])
	CALL memcpy($7, ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [9954])
	$6 = (($3 + [8]) + [16])
	CALL memcpy($6, ($2 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $143($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$8 = *($6)
	$9 = *($7)
	$10 = *($3 + [8])
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $10), (int_64 $9), (int_64 $8), (int_64 $5))
	$global$0 = ($3 + [32])
	return [1]
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL $140($1)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($3 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [9954])
	CALL memcpy(($3 + [8]), $6, [4])
	$2 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL $143($6)
	
.LABEL $label$4
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$5 }
	$5 = *((*($1) + $5))
	
.LABEL $label$5
	CALL void $1((int_32 $2), (int_32 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $140($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9954])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [9954])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $143($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $140($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9954])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $143($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $140($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1397703940
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [9598])
	$8 = (int_64)5459781
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [8540])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9954])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [9954])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [9954])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $143($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [560])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [9517])
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8361]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$12 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = (int_64)0
	$9 = (int_64)59
	$6 = [9369]
	$7 = (int_64)0
	
.LOOP $label$13:
	$5 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$14 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$8 = ($8 + [-91])
	goto $label$15 
	
.LABEL $label$16
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$5 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$17 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [8361]
	$7 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$23 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$8 = ($8 + [-91])
	goto $label$21 
	
.LABEL $label$23
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$19
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$18 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$17
	$4 = (int_64)7
	
.LOOP $label$24:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$24 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	$6 = CALL $5(($3 + [232]), $0)
	if ( ((int_64)$2 > (int_64)3607572829840605183) ){ goto $label$38 }
	if ( ((int_64)$2 <= (int_64)-4994048603321270273) ){ goto $label$37 }
	if ( ((int_64)$2 > (int_64)-3617168760277827585) ){ goto $label$35 }
	if ( ((int_64)$2 == (int_64)-4994048603321270272) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)-4157661383434960896) ){ goto $label$25 }
	*($3 + [204]) = [0]
	*($3 + [200]) = [1]
	*($3 + [32]) = *($3 + [200])
	CALL $83($6, ($3 + [32]))
	goto $label$25 
	
.LABEL $label$38
	if ( ((int_64)$2 <= (int_64)4729496127508463615) ){ goto $label$36 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)4729496127508463616) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)4921564802787365024) ){ goto $label$25 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [2]
	*($3 + [88]) = *($3 + [144])
	CALL $84($6, ($3 + [88]))
	goto $label$25 
	
.LABEL $label$37
	if ( ((int_64)$2 == (int_64)-5001342339331915776) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)-4994302213476581376) ){ goto $label$30 }
	if ( ((int_64)$2 != (int_64)-4994301902879742272) ){ goto $label$25 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [3]
	*($3 + [96]) = *($3 + [136])
	CALL $85($6, ($3 + [96]))
	goto $label$25 
	
.LABEL $label$36
	if ( ((int_64)$2 == (int_64)3607572829840605184) ){ goto $label$29 }
	if ( ((int_64)$2 == (int_64)3626087424883949568) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)4729492996716756992) ){ goto $label$25 }
	*($3 + [156]) = [0]
	*($3 + [152]) = [4]
	*($3 + [80]) = *($3 + [152])
	CALL $86($6, ($3 + [80]))
	goto $label$25 
	
.LABEL $label$35
	if ( ((int_64)$2 == (int_64)-3617168760277827584) ){ goto $label$27 }
	if ( ((int_64)$2 != (int_64)-3102536759825661952) ){ goto $label$25 }
	*($3 + [196]) = [0]
	*($3 + [192]) = [5]
	*($3 + [40]) = *($3 + [192])
	CALL $83($6, ($3 + [40]))
	goto $label$25 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$25 }
	*($3 + [228]) = [0]
	*($3 + [224]) = [6]
	*($3 + [8]) = *($3 + [224])
	CALL $83($6, ($3 + [8]))
	goto $label$25 
	
.LABEL $label$33
	*($3 + [180]) = [0]
	*($3 + [176]) = [7]
	*($3 + [56]) = *($3 + [176])
	CALL $84($6, ($3 + [56]))
	goto $label$25 
	
.LABEL $label$32
	*($3 + [124]) = [0]
	*($3 + [120]) = [8]
	*($3 + [112]) = *($3 + [120])
	CALL $87($6, ($3 + [112]))
	goto $label$25 
	
.LABEL $label$31
	*($3 + [188]) = [0]
	*($3 + [184]) = [9]
	*($3 + [48]) = *($3 + [184])
	CALL $84($6, ($3 + [48]))
	goto $label$25 
	
.LABEL $label$30
	*($3 + [164]) = [0]
	*($3 + [160]) = [10]
	*($3 + [72]) = *($3 + [160])
	CALL $84($6, ($3 + [72]))
	goto $label$25 
	
.LABEL $label$29
	*($3 + [132]) = [0]
	*($3 + [128]) = [11]
	*($3 + [104]) = *($3 + [128])
	CALL $86($6, ($3 + [104]))
	goto $label$25 
	
.LABEL $label$28
	*($3 + [172]) = [0]
	*($3 + [168]) = [12]
	*($3 + [64]) = *($3 + [168])
	CALL $88($6, ($3 + [64]))
	goto $label$25 
	
.LABEL $label$27
	*($3 + [212]) = [0]
	*($3 + [208]) = [13]
	*($3 + [24]) = *($3 + [208])
	CALL $89($6, ($3 + [24]))
	goto $label$25 
	
.LABEL $label$26
	*($3 + [220]) = [0]
	*($3 + [216]) = [14]
	*($3 + [16]) = *($3 + [216])
	CALL $90($6, ($3 + [16]))
	
.LABEL $label$25
	CALL $91($6)
	
.LABEL $label$4
	CALL $131([0])
	$global$0 = ($3 + [560])
}

void .FUNC $81 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [64])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$5 = *($2)
	$4 = *($2 + [8])
	$0 = CALL $60(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8), [8660]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)$5), [8684])
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($3 + [8])), [10045])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)CALL $fimport$3()), [10091])
	$6 = *($0 + [8])
	CALL eosio_assert(((int_64)$4 == (int_64)$6), [9789])
	$4 = (int_64)
	*($0) = $4(*($0) - $5))
	CALL eosio_assert(((int_64)$4 > (int_64)-4611686018427387904), [9837])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [9859])
	$4 = (uint_64)$6 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$4) == (int_64)(uint_64)*($0 + [8]) >> (uint_64)(int_64)8)), [10142])
	CALL eosio_assert([1], [9592])
	CALL memcpy(($3 + [48]), $0, [8])
	CALL eosio_assert([1], [9592])
	CALL memcpy((($3 + [48]) | [8]), ($0 + [8]), [8])
	CALL db_update_i64(*($0 + [20]), $1, ($3 + [48]), [16])
	if ( (uint_64)($4 <= *($3 + [24])) ){ goto $label$1 }
	*((($3 + [8]) + [16])) = ((int_64)$4 + (int_64)1)
	
.LABEL $label$1
	$7 = *($3 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	$8 = ($3 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$6 }
	CALL _ZdlPv($2)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $7
	
.LABEL $label$3
	*($8) = $7
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [64])
}

void .FUNC $80 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	float_64 $11
	float_64 $12
	int_32 $13
	float_64 $14
	int_32 $15
	float_64 $16
	float_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	float_64 $21
	float_64 $22
	float_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_64 $28
	int_64 $29
	int_64 $30
	int_64 $31
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [9647])
	CALL require_auth($1)
	CALL eosio_assert(CALL eosio_assert1($1), [9151])
	$4 = *($2 + [8])
	CALL require_recipient($1)
	$5 = [0]
	$6 = [0]
	$7 = *($2)
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)$4 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$6 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9189])
	CALL eosio_assert(((int_64)$7 > (int_64)0), [9214])
	CALL eosio_assert(((int_64)$4 == (int_64)1380533252), [9254])
	*((($3 + [120]) + [32])) = [0]
	*($3 + [128]) = $1
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	*($3 + [120]) = *($0)
	$2 = CALL $60(($3 + [120]), (uint_64)$4 >> (uint_64)(int_64)8), [9288]
	CALL eosio_assert(((int_64)*($2)) >= (int_64)$7), [9320])
	*((($3 + [80]) + [32])) = [0]
	*($3 + [88]) = $1
	*($3 + [96]) = (int_64)-1
	*($3 + [104]) = (int_64)0
	$8 = *($0)
	*($3 + [80]) = $8
	$6 = CALL db_find_i64($8, $1, (int_64)3607749778856088576, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $23(($3 + [80]), $6)
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)($3 + [80])), [9880])
	
.LABEL $label$6
	$6 = [0]
	$10 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($10, [9346])
	$11 = *($5 + [48])
	$8 = *($2)
	CALL eosio_assert($10, [10010])
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)($3 + [80])), [10045])
	CALL eosio_assert(((int_64)*($3 + [80]) == (int_64)CALL $fimport$3()), [10091])
	*($5 + [48]) = ((float_64)((float_64)$11 * (float_64)(CASTING float_64)(int_64 (int_64))($8 - $7))) / (float_64)(CASTING float_64)(int_64 $8))
	$8 = *($5)
	CALL eosio_assert([1], [10142])
	*($3 + [32]) = (($3 + [160]) + [72])
	*($3 + [28]) = ($3 + [160])
	*($3 + [24]) = ($3 + [160])
	*($3 + [240]) = ($3 + [24])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	*($3 + [60]) = ($5 + [56])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [72])
	CALL $45(($3 + [40]), ($3 + [240]))
	CALL db_update_i64(*($5 + [80]), (int_64)0, ($3 + [160]), [72])
	$2 = ($3 + [96])
	if ( (uint_64)($8 <= *($2)) ){ goto $label$7 }
	*($2) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	$12 = *(($0 + [168]))
	$13 = ($0 + [72])
	$14 = *($13)
	$15 = *(($0 + [160]))
	$11 = *(($0 + [88]))
	$16 = *(($0 + [128]))
	CALL eosio_assert([1], [9598])
	$17 = (float_64))((float_64)1 - $16)
	$8 = (int_64)5459781
	$18 = (int_64)1397703940
	
.LOOP $label$10:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$8 = $9
	$5 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$8 = $9
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $5 ){ goto $label$12 }
	$5 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$5 = [0]
	
.LABEL $label$8
	CALL eosio_assert($5, [8540])
	CALL eosio_assert([1], [9598])
	$8 = (int_64)5459781
	$19 = (int_64)1397703940
	
.LOOP $label$15:
	$6 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$8 = $9
	$5 = [1]
	$10 = $2
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$8 = $9
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = ((int_32)$2 < (int_32)[6])
	$10 = ($2 + [1])
	$2 = $10
	if ( $5 ){ goto $label$17 }
	$5 = [1]
	$2 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$5 = [0]
	
.LABEL $label$13
	CALL eosio_assert($5, [8540])
	CALL eosio_assert([1], [9598])
	$8 = (int_64)5459781
	$20 = (int_64)1397703940
	
.LOOP $label$19:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$8 = $9
	$10 = [1]
	$2 = $6
	$6 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$8 = $9
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$6 < (int_32)[6])
	$5 = ($6 + [1])
	$6 = $5
	if ( $2 ){ goto $label$21 }
	$10 = [1]
	$6 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$19 }
	
.LABEL $label$18
	CALL eosio_assert($10, [8540])
	$21 = (CASTING float_64)(int_64 $7)
	$22 = (float_64))($11 - $21)
	if ( ((int_32)((float_64)$11 > (float_64)(float_64)6e10) ^ (int_32)[1]) ){ goto $label$31 }
	if ( ((int_32)((float_64)$22 < (float_64)(float_64)6e10) ^ (int_32)[1]) ){ goto $label$31 }
	$11 = CALL $132(((float_64)$14 * (float_64)((float_64)CALL $133((float_64))((float_64)1 - ((float_64)$23 / (float_64)$11)), ((float_64)(float_64)1 / (float_64)$16)) + (float_64)(float_64)-1))
	$23 = ((float_64)$11 + (float_64)(float_64)-6e10)
	$22 = ((float_64)(float_64))($21 - $23) / (float_64)(CASTING float_64)(uint_32 $15)
	$14 = ((float_64)$22) + (float_64)$11
	if ( (((float_64)$14)) < (float_64)(float_64)18446744073709551615) & ((float_64)$14 >= (float_64)(float_64)0)) ){ goto $label$30 }
	$24 = (int_64)0
	goto $label$29 
	
.LABEL $label$31
	if ( (((int_32)((float_64)$22 >= (float_64)(float_64)6e10) ^ (int_32)[1]) == 0) ){ goto $label$32 }
	$25 = (int_64)0
	$26 = (int_64)0
	$24 = (int_64)0
	if ( ((int_32)((float_64)$11 <= (float_64)(float_64)6e10) ^ (int_32)[1]) ){ goto $label$22 }
	$11 = ((float_64)$21 / (float_64)(CASTING float_64)(uint_32 $15))
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$26 }
	$24 = (int_64)0
	goto $label$25 
	
.LABEL $label$32
	$11 = CALL $132(((float_64)$14 * (float_64)((float_64)CALL $133(((float_64)((float_64)(CASTING float_64)(int_64 (int_64))((int_64)0 - $7)) / (float_64)$11) + (float_64)(float_64)1), ((float_64)(float_64)1 / (float_64)$16)) + (float_64)(float_64)-1))
	if ( ((float_64)(float_64)|$11)| < (float_64)(float_64)9223372036854775808) ){ goto $label$28 }
	$7 = (int_64)-9223372036854775808
	goto $label$27 
	
.LABEL $label$30
	$24 = (Rounds 0)($14)
	
.LABEL $label$29
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$8 = (int_64)5459781
	$18 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$35:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$34 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$36 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$36
	$8 = $9
	
.LOOP $label$37:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$37 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$35 }
	goto $label$33 
	
.LABEL $label$34
	$6 = [0]
	
.LABEL $label$33
	CALL eosio_assert($6, [8540])
	*($13) = (float_64))(*($13) - $11)
	$16 = ((float_64)$16 * (float_64)$22)
	if ( (((float_64)$16 < (float_64)(float_64)18446744073709551615) & ((float_64)$16 >= (float_64)(float_64)0)) ){ goto $label$39 }
	$7 = (int_64)0
	goto $label$38 
	
.LABEL $label$39
	$7 = (Rounds 0)($16)
	
.LABEL $label$38
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$8 = (int_64)5459781
	$19 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$43 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$43
	$8 = $9
	
.LOOP $label$44:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$41 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$44 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$6 = [0]
	
.LABEL $label$40
	CALL eosio_assert($6, [8540])
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$46 }
	$4 = (int_64)0
	goto $label$45 
	
.LABEL $label$46
	$4 = (Rounds 0)($11)
	
.LABEL $label$45
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$49:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$48 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$50 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$50
	$8 = $9
	
.LOOP $label$51:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$51 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$49 }
	goto $label$47 
	
.LABEL $label$48
	$6 = [0]
	
.LABEL $label$47
	CALL eosio_assert($6, [8540])
	CALL eosio_assert(((int_64)1397703940 == (int_64)1397703940), [9670])
	$26 = ((int_64)$4 + (int_64)$7)
	CALL eosio_assert(((int_64)$26 > (int_64)-4611686018427387904), [9713])
	CALL eosio_assert(((int_64)$26 < (int_64)4611686018427387904), [9732])
	*($13) = (float_64))(*($13) - $16)
	$11 = ((float_64)$22 * (float_64)$17)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$53 }
	$7 = (int_64)0
	goto $label$52 
	
.LABEL $label$53
	$7 = (Rounds 0)($11)
	
.LABEL $label$52
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$8 = (int_64)5459781
	$20 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$56:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$55 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$57 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$57
	$8 = $9
	
.LOOP $label$58:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$55 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$58 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$56 }
	goto $label$54 
	
.LABEL $label$55
	$6 = [0]
	
.LABEL $label$54
	CALL eosio_assert($6, [8540])
	$13 = ($0 + [80])
	goto $label$24 
	
.LABEL $label$28
	$7 = (Rounds 0)($11)
	
.LABEL $label$27
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$8 = (int_64)5459781
	$19 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$61:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$62 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$62
	$8 = $9
	
.LOOP $label$63:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$60 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$63 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$61 }
	goto $label$59 
	
.LABEL $label$60
	$6 = [0]
	
.LABEL $label$59
	CALL eosio_assert($6, [8540])
	$25 = (int_64)0
	$26 = $7
	$24 = $7
	$18 = (int_64)1397703940
	goto $label$23 
	
.LABEL $label$26
	$24 = (Rounds 0)($11)
	
.LABEL $label$25
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$8 = (int_64)5459781
	$18 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$66:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$65 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$67 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$67
	$8 = $9
	
.LOOP $label$68:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$65 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$68 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$66 }
	goto $label$64 
	
.LABEL $label$65
	$6 = [0]
	
.LABEL $label$64
	CALL eosio_assert($6, [8540])
	$22 = (CASTING float_64)(int_64 $24)
	$11 = ((float_64)$16 * (float_64)$22)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$70 }
	$26 = (int_64)0
	goto $label$69 
	
.LABEL $label$70
	$26 = (Rounds 0)($11)
	
.LABEL $label$69
	CALL eosio_assert((uint_64)(((int_64)$26 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$8 = (int_64)5459781
	$19 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$73:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$72 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$74 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$74
	$8 = $9
	
.LOOP $label$75:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$72 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$75 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$73 }
	goto $label$71 
	
.LABEL $label$72
	$6 = [0]
	
.LABEL $label$71
	CALL eosio_assert($6, [8540])
	*($13) = (float_64))(*($13) - (CASTING float_64)(int_64 $26))
	$11 = ((float_64)$17 * (float_64)$22)
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$77 }
	$7 = (int_64)0
	goto $label$76 
	
.LABEL $label$77
	$7 = (Rounds 0)($11)
	
.LABEL $label$76
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$8 = (int_64)5459781
	$20 = (int_64)1397703940
	$2 = [0]
	
.LOOP $label$80:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$79 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$81 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$80 }
	goto $label$78 
	
.LABEL $label$81
	$8 = $9
	
.LOOP $label$82:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$79 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$82 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$80 }
	goto $label$78 
	
.LABEL $label$79
	$6 = [0]
	
.LABEL $label$78
	CALL eosio_assert($6, [8540])
	$13 = ($0 + [80])
	
.LABEL $label$24
	$25 = $7
	
.LABEL $label$23
	*($13) = (float_64))(*($13) - (CASTING float_64)(int_64 $7))
	
.LABEL $label$22
	*(($2 = ($0 + [88]))) = (float_64))(*($2) - $21)
	$11 = ((float_64)$12 * (float_64)(CASTING float_64)(int_64 $24))
	if ( (((float_64)$11 < (float_64)(float_64)18446744073709551615) & ((float_64)$11 >= (float_64)(float_64)0)) ){ goto $label$84 }
	$27 = (int_64)0
	goto $label$83 
	
.LABEL $label$84
	$27 = (Rounds 0)($11)
	
.LABEL $label$83
	CALL eosio_assert((uint_64)(((int_64)$27 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$8 = (int_64)5459781
	$2 = [0]
	
.LOOP $label$87:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$86 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$88 }
	$8 = $9
	$6 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$88
	$8 = $9
	
.LOOP $label$89:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$86 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$6 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $6 ){ goto $label$89 }
	$6 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$87 }
	goto $label$85 
	
.LABEL $label$86
	$6 = [0]
	
.LABEL $label$85
	CALL eosio_assert($6, [8540])
	CALL eosio_assert(((int_64)1397703940 == (int_64)$18), [9789])
	$28 = (int_64)
	CALL eosio_assert(((int_64)$28($24 - $27)) > (int_64)-4611686018427387904), [9837])
	CALL eosio_assert(((int_64)$28 < (int_64)4611686018427387904), [9859])
	*(($2 = ($0 + [176]))) = ((float_64)*($2) + (float_64)(CASTING float_64)(int_64 $27))
	if ( ((int_64)$26 < (int_64)1) ){ goto $label$99 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [8514]
	$4 = (int_64)0
	
.LOOP $label$100:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$101 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$103 }
	$6 = ($6 + [-91])
	goto $label$102 
	
.LABEL $label$103
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$102
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$101
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$4 = ((int_64)$7 | (int_64)$4)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$100 }
	$8 = (int_64)6
	
.LOOP $label$104:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$104 }
	*($3 + [32]) = (int_64)3617214756542218240
	*($3 + [24]) = $4
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8349]
	$4 = (int_64)0
	
.LOOP $label$105:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$110 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$109 }
	$6 = ($6 + [-91])
	goto $label$108 
	
.LABEL $label$110
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$109
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$108
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$107
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$106
	$2 = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$4 = ((int_64)$9 | (int_64)$4)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$105 }
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8361]
	$29 = (int_64)0
	
.LOOP $label$111:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$116 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$115 }
	$6 = ($6 + [-91])
	goto $label$114 
	
.LABEL $label$116
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$115
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$114
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$113
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$112
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$29 = ((int_64)$9 | (int_64)$29)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$111 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [8514]
	$30 = (int_64)0
	
.LOOP $label$117:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$118 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$120 }
	$6 = ($6 + [-91])
	goto $label$119 
	
.LABEL $label$120
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$119
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$118
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$30 = ((int_64)$7 | (int_64)$30)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$117 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [9369]
	$31 = (int_64)0
	
.LOOP $label$121:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$122 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$124 }
	$6 = ($6 + [-91])
	goto $label$123 
	
.LABEL $label$124
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$123
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$122
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$31 = ((int_64)$7 | (int_64)$31)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$121 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $139([9382])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$98 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$127 }
	*($3 + [8]) = ($2 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$127
	$5 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [8]) = ($5 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $2
	
.LABEL $label$126
	CALL memcpy($6, [9382], $2)
	
.LABEL $label$125
	*(($6 + $2)) = [0]
	*(($3 + [184])) = $19
	$2 = ($3 + [16])
	*(($3 + [200])) = *($2)
	*($2) = [0]
	*($3 + [168]) = $31
	*($3 + [160]) = $30
	*($3 + [176]) = $26
	*($3 + [192]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$2 = CALL $26(($3 + [40]), ($3 + [24]), $4, $29, ($3 + [160]))
	CALL $27(($3 + [240]), $2)
	$6 = *($3 + [240])
	CALL send_inline($6, (*($3 + [244]) - $6))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$128 }
	*($3 + [244]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$128
	$6 = *($2 + [28])
	if ( ($6 == 0) ){ goto $label$129 }
	*(($2 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$129
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$130 }
	*(($2 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$130
	if ( ((*(($3 + [192])) & [1]) == 0) ){ goto $label$131 }
	CALL _ZdlPv(*(($3 + [200])))
	
.LABEL $label$131
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$99 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$99
	if ( ((int_64)$25 < (int_64)1) ){ goto $label$132 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [8527]
	$4 = (int_64)0
	
.LOOP $label$133:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$134 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$136 }
	$6 = ($6 + [-91])
	goto $label$135 
	
.LABEL $label$136
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$135
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$134
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$4 = ((int_64)$7 | (int_64)$4)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$133 }
	$8 = (int_64)6
	
.LOOP $label$137:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$137 }
	*($3 + [32]) = (int_64)3617214756542218240
	*($3 + [24]) = $4
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8349]
	$4 = (int_64)0
	
.LOOP $label$138:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$143 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$142 }
	$6 = ($6 + [-91])
	goto $label$141 
	
.LABEL $label$143
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$140 }
	goto $label$139 
	
.LABEL $label$142
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$141
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$140
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$139
	$2 = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$4 = ((int_64)$9 | (int_64)$4)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$138 }
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8361]
	$29 = (int_64)0
	
.LOOP $label$144:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$149 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$148 }
	$6 = ($6 + [-91])
	goto $label$147 
	
.LABEL $label$149
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$146 }
	goto $label$145 
	
.LABEL $label$148
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$147
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$146
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$145
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$29 = ((int_64)$9 | (int_64)$29)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$144 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [8527]
	$30 = (int_64)0
	
.LOOP $label$150:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$151 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$153 }
	$6 = ($6 + [-91])
	goto $label$152 
	
.LABEL $label$153
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$152
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$151
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$30 = ((int_64)$7 | (int_64)$30)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$150 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [9369]
	$31 = (int_64)0
	
.LOOP $label$154:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$155 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$157 }
	$6 = ($6 + [-91])
	goto $label$156 
	
.LABEL $label$157
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$156
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$155
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$31 = ((int_64)$7 | (int_64)$31)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$154 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $139([9413])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$97 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$160 }
	*($3 + [8]) = ($2 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$159 }
	goto $label$158 
	
.LABEL $label$160
	$5 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [8]) = ($5 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $2
	
.LABEL $label$159
	CALL memcpy($6, [9413], $2)
	
.LABEL $label$158
	*(($6 + $2)) = [0]
	*(($3 + [184])) = $20
	$2 = ($3 + [16])
	*(($3 + [200])) = *($2)
	*($2) = [0]
	*($3 + [168]) = $31
	*($3 + [160]) = $30
	*($3 + [176]) = $25
	*($3 + [192]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$2 = CALL $26(($3 + [40]), ($3 + [24]), $4, $29, ($3 + [160]))
	CALL $27(($3 + [240]), $2)
	$6 = *($3 + [240])
	CALL send_inline($6, (*($3 + [244]) - $6))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$161 }
	*($3 + [244]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$161
	$6 = *($2 + [28])
	if ( ($6 == 0) ){ goto $label$162 }
	*(($2 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$162
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$163 }
	*(($2 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$163
	if ( ((*(($3 + [192])) & [1]) == 0) ){ goto $label$164 }
	CALL _ZdlPv(*(($3 + [200])))
	
.LABEL $label$164
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$132 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$132
	if ( ((int_64)$27 < (int_64)1) ){ goto $label$165 }
	$9 = *($0)
	$8 = (int_64)6
	
.LOOP $label$166:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$166 }
	*($3 + [32]) = (int_64)3617214756542218240
	*($3 + [24]) = $9
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8349]
	$4 = (int_64)0
	
.LOOP $label$167:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$172 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$171 }
	$6 = ($6 + [-91])
	goto $label$170 
	
.LABEL $label$172
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$171
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$170
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$169
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$168
	$2 = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$4 = ((int_64)$9 | (int_64)$4)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$167 }
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8361]
	$29 = (int_64)0
	
.LOOP $label$173:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$178 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$177 }
	$6 = ($6 + [-91])
	goto $label$176 
	
.LABEL $label$178
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$175 }
	goto $label$174 
	
.LABEL $label$177
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$176
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$175
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$174
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$29 = ((int_64)$9 | (int_64)$29)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$173 }
	$8 = (int_64)0
	$9 = (int_64)59
	$2 = [8462]
	$30 = (int_64)0
	
.LOOP $label$179:
	$7 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$180 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$182 }
	$6 = ($6 + [-91])
	goto $label$181 
	
.LABEL $label$182
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$181
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$180
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$30 = ((int_64)$7 | (int_64)$30)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$179 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $139([9452])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$96 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$185 }
	*($3 + [8]) = ($2 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$184 }
	goto $label$183 
	
.LABEL $label$185
	$5 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [8]) = ($5 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $2
	
.LABEL $label$184
	CALL memcpy($6, [9452], $2)
	
.LABEL $label$183
	*(($6 + $2)) = [0]
	*(($3 + [184])) = (int_64)1397703940
	$2 = ($3 + [16])
	*(($3 + [200])) = *($2)
	*($2) = [0]
	*($3 + [168]) = $30
	*($3 + [176]) = $27
	*($3 + [160]) = *($0)
	*($3 + [192]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$2 = CALL $26(($3 + [40]), ($3 + [24]), $4, $29, ($3 + [160]))
	CALL $27(($3 + [240]), $2)
	$6 = *($3 + [240])
	CALL send_inline($6, (*($3 + [244]) - $6))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$186 }
	*($3 + [244]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$186
	$6 = *($2 + [28])
	if ( ($6 == 0) ){ goto $label$187 }
	*(($2 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$187
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$188 }
	*(($2 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$188
	if ( ((*(($3 + [192])) & [1]) == 0) ){ goto $label$189 }
	CALL _ZdlPv(*(($3 + [200])))
	
.LABEL $label$189
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$165 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$165
	CALL eosio_assert(((int_64)$24 > (int_64)0), [9484])
	$9 = *($0)
	$8 = (int_64)6
	
.LOOP $label$190:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$190 }
	*($3 + [32]) = (int_64)3617214756542218240
	*($3 + [24]) = $9
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8349]
	$4 = (int_64)0
	
.LOOP $label$191:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$196 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$195 }
	$6 = ($6 + [-91])
	goto $label$194 
	
.LABEL $label$196
	$9 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$193 }
	goto $label$192 
	
.LABEL $label$195
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$194
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$193
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$192
	$2 = ($2 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$4 = ((int_64)$9 | (int_64)$4)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$191 }
	$8 = (int_64)0
	$7 = (int_64)59
	$2 = [8361]
	$29 = (int_64)0
	
.LOOP $label$197:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$202 }
	$6 = *($2)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$201 }
	$6 = ($6 + [-91])
	goto $label$200 
	
.LABEL $label$202
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$199 }
	goto $label$198 
	
.LABEL $label$201
	$6 = ( ($6 + [-48]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$200
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$199
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$198
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$29 = ((int_64)$9 | (int_64)$29)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$197 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$2 = CALL $139([9499])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$203 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$206 }
	*($3 + [8]) = ($2 << [1])
	$6 = (($3 + [8]) | [1])
	if ( $2 ){ goto $label$205 }
	goto $label$204 
	
.LABEL $label$206
	$5 = (($2 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [8]) = ($5 | [1])
	*($3 + [16]) = $6
	*($3 + [12]) = $2
	
.LABEL $label$205
	CALL memcpy($6, [9499], $2)
	
.LABEL $label$204
	*(($6 + $2)) = [0]
	*(($3 + [184])) = $18
	$2 = ($3 + [16])
	*(($3 + [200])) = *($2)
	*($2) = [0]
	*($3 + [168]) = $1
	*($3 + [176]) = $28
	*($3 + [160]) = *($0)
	*($3 + [192]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$2 = CALL $26(($3 + [40]), ($3 + [24]), $4, $29, ($3 + [160]))
	CALL $27(($3 + [240]), $2)
	$6 = *($3 + [240])
	CALL send_inline($6, (*($3 + [244]) - $6))
	$6 = *($3 + [240])
	if ( ($6 == 0) ){ goto $label$207 }
	*($3 + [244]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$207
	$6 = *($2 + [28])
	if ( ($6 == 0) ){ goto $label$208 }
	*(($2 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$208
	$6 = *($2 + [16])
	if ( ($6 == 0) ){ goto $label$209 }
	*(($2 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$209
	if ( (*(($3 + [192])) & [1]) ){ goto $label$211 }
	if ( (*($3 + [8]) & [1]) ){ goto $label$210 }
	goto $label$95 
	
.LABEL $label$211
	CALL _ZdlPv(*(($3 + [200])))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$95 }
	
.LABEL $label$210
	CALL _ZdlPv(*(($3 + [16])))
	CALL $36($0)
	$5 = *($3 + [104])
	if ( $5 ){ goto $label$94 }
	goto $label$93 
	
.LABEL $label$203
	CALL $117(($3 + [8]))
	
.LABEL $label$98
	CALL $117(($3 + [8]))
	
.LABEL $label$97
	CALL $117(($3 + [8]))
	
.LABEL $label$96
	CALL $117(($3 + [8]))
	
.LABEL $label$95
	CALL $36($0)
	$5 = *($3 + [104])
	if ( ($5 == 0) ){ goto $label$93 }
	
.LABEL $label$94
	$10 = ($3 + [108])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$92 }
	
.LOOP $label$212:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$213 }
	CALL _ZdlPv($6)
	
.LABEL $label$213
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$212 }
	$2 = *(($3 + [104]))
	*($10) = $5
	CALL _ZdlPv($2)
	$5 = *($3 + [144])
	if ( $5 ){ goto $label$91 }
	goto $label$90 
	
.LABEL $label$93
	$5 = *($3 + [144])
	if ( ($5 == 0) ){ goto $label$90 }
	goto $label$91 
	
.LABEL $label$92
	*($10) = $5
	CALL _ZdlPv($5)
	$5 = *($3 + [144])
	if ( ($5 == 0) ){ goto $label$90 }
	
.LABEL $label$91
	$10 = ($3 + [148])
	$2 = *($10)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$215 }
	
.LOOP $label$216:
	$2 = ($2 + [-24])
	$6 = *($2)
	*($2) = [0]
	if ( ($6 == 0) ){ goto $label$217 }
	CALL _ZdlPv($6)
	
.LABEL $label$217
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$216 }
	$2 = *(($3 + [144]))
	goto $label$214 
	
.LABEL $label$215
	$2 = $5
	
.LABEL $label$214
	*($10) = $5
	CALL _ZdlPv($2)
	$global$0 = ($3 + [256])
	return 
	
.LABEL $label$90
	$global$0 = ($3 + [256])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $142($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8196])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $140 (int_32 $0)
{
	return CALL $141([10432], $0)
}

void .FUNC $143 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18816])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18624]
	$3 = (((int_32)$1 * (int_32)[12]) + [18624])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $142 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10424]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10428])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10424]) = [1]
	$2 = ($2 << [16])
	*([0] + [10428]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10428])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10428]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10424]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10424]) = [1]
	$3 = ($3 << [16])
	*([0] + [10428]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10428])
	
.LABEL $label$10
	*([0] + [10428]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [10265])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$3()), [10310])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10360])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $73 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	float_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [208])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [9647])
	CALL require_auth($1)
	CALL eosio_assert(CALL eosio_assert1($1), [8772])
	*(($2 + [104])) = [0]
	*($2 + [80]) = $1
	*($2 + [88]) = (int_64)-1
	*($2 + [96]) = (int_64)0
	$3 = *($0)
	*($2 + [72]) = $3
	$4 = CALL db_find_i64($3, $1, (int_64)3607749778856088576, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $23(($2 + [72]), $4)
	CALL eosio_assert(((int_32)*($4 + [76]) == (int_32)($2 + [72])), [9880])
	$5 = *($4 + [64])
	if ( ((int_32)((float_64)$5 >= (float_64)(float_64)1) ^ (int_32)[1]) ){ goto $label$2 }
	if ( (((float_64)$5 < (float_64)(float_64)18446744073709551615) & ((float_64)$5 >= (float_64)(float_64)0)) ){ goto $label$4 }
	$6 = (int_64)0
	if ( ((int_64)((int_64)0 == 0) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (Rounds 0)($5)
	if ( (int_64)($6 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([1], [10010])
	CALL eosio_assert(((int_32)*(($4 + [76])) == (int_32)($2 + [72])), [10045])
	CALL eosio_assert(((int_64)*($2 + [72]) == (int_64)CALL $fimport$3()), [10091])
	*(($4 + [64])) = (float_64))($5 - (CASTING float_64)(uint_64 $6))
	$3 = *($4)
	CALL eosio_assert([1], [10142])
	*($2 + [24]) = (($2 + [112]) + [72])
	*($2 + [20]) = ($2 + [112])
	*($2 + [16]) = ($2 + [112])
	*($2 + [192]) = ($2 + [16])
	*($2 + [36]) = ($4 + [8])
	*($2 + [32]) = $4
	*($2 + [40]) = ($4 + [24])
	*($2 + [44]) = ($4 + [40])
	*($2 + [48]) = ($4 + [48])
	*($2 + [52]) = ($4 + [56])
	*($2 + [56]) = ($4 + [64])
	*($2 + [60]) = ($4 + [72])
	CALL $45(($2 + [32]), ($2 + [192]))
	CALL db_update_i64(*($4 + [80]), (int_64)0, ($2 + [112]), [72])
	$4 = ($2 + [88])
	if ( (uint_64)($3 <= *($4)) ){ goto $label$5 }
	*($4) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $7
	$8 = [1]
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $7
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $8 ){ goto $label$10 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	
.LABEL $label$6
	CALL eosio_assert($8, [8540])
	$3 = (int_64)0
	$7 = (int_64)59
	$4 = [8462]
	$10 = (int_64)0
	
.LOOP $label$11:
	$11 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$12 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$8 = ($8 + [-91])
	goto $label$13 
	
.LABEL $label$14
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$11 }
	$3 = (int_64)6
	
.LOOP $label$15:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$15 }
	*($2 + [24]) = (int_64)3617214756542218240
	*($2 + [16]) = $10
	$3 = (int_64)0
	$11 = (int_64)59
	$4 = [8349]
	$10 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$21 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$8 = ($8 + [-91])
	goto $label$19 
	
.LABEL $label$21
	$7 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$17
	$4 = ($4 + [1])
	$11 = ((int_64)$11 + (int_64)4294967291)
	$10 = ((int_64)$7 | (int_64)$10)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$16 }
	$3 = (int_64)0
	$11 = (int_64)59
	$4 = [8361]
	$12 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$3 > (uint_64)(int_64)7) ){ goto $label$27 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$8 = ($8 + [-91])
	goto $label$25 
	
.LABEL $label$27
	$7 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$12 = ((int_64)$7 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$22 }
	$3 = (int_64)0
	$7 = (int_64)59
	$4 = [8462]
	$13 = (int_64)0
	
.LOOP $label$28:
	$11 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$29 }
	$8 = *($4)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$8 = ($8 + [-91])
	goto $label$30 
	
.LABEL $label$31
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $8) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$13 = ((int_64)$11 | (int_64)$13)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$28 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$4 = CALL $139([8789])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$34 }
	*($2) = ($4 << [1])
	$8 = ($2 | [1])
	if ( $4 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$9 = (($4 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($2) = ($9 | [1])
	*($2 + [8]) = $8
	*($2 + [4]) = $4
	
.LABEL $label$33
	CALL memcpy($8, [8789], $4)
	
.LABEL $label$32
	*(($8 + $4)) = [0]
	*(($2 + [136])) = (int_64)1397703940
	$4 = ($2 + [8])
	*(($2 + [152])) = *($4)
	*($4) = [0]
	*($2 + [120]) = $1
	*($2 + [112]) = $13
	*($2 + [128]) = $6
	*($2 + [144]) = *($2)
	*($2) = (int_64)0
	$4 = CALL $26(($2 + [32]), ($2 + [16]), $10, $12, ($2 + [112]))
	CALL $27(($2 + [192]), $4)
	$8 = *($2 + [192])
	CALL send_inline($8, (*($2 + [196]) - $8))
	$8 = *($2 + [192])
	if ( ($8 == 0) ){ goto $label$35 }
	*($2 + [196]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$35
	$8 = *($4 + [28])
	if ( ($8 == 0) ){ goto $label$36 }
	*(($4 + [32])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$36
	$8 = *($4 + [16])
	if ( ($8 == 0) ){ goto $label$37 }
	*(($4 + [20])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$37
	if ( ((*(($2 + [144])) & [1]) == 0) ){ goto $label$38 }
	CALL _ZdlPv(*(($2 + [152])))
	
.LABEL $label$38
	if ( ((*($2) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$39
	*(($4 = ($0 + [184]))) = (float_64))(*($4) - (CASTING float_64)(int_64 $6))
	CALL $36($0)
	
.LABEL $label$2
	$9 = *($2 + [96])
	if ( ($9 == 0) ){ goto $label$40 }
	$0 = ($2 + [100])
	$4 = *($0)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$42 }
	
.LOOP $label$43:
	$4 = ($4 + [-24])
	$8 = *($4)
	*($4) = [0]
	if ( ($8 == 0) ){ goto $label$44 }
	CALL _ZdlPv($8)
	
.LABEL $label$44
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$43 }
	$4 = *(($2 + [96]))
	goto $label$41 
	
.LABEL $label$42
	$4 = $9
	
.LABEL $label$41
	*($0) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$40
	$global$0 = ($2 + [208])
	return (unreachable)
	
.LABEL $label$1
	CALL $117($2)
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $71 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [256])
	$global$0 = $2
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [9647])
	CALL require_auth($1)
	*((($2 + [88]) + [32])) = [0]
	*($2 + [96]) = $1
	*($2 + [104]) = (int_64)-1
	*($2 + [112]) = (int_64)0
	$3 = *($0)
	*($2 + [88]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $1, (int_64)-5001342326447013888, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $65(($2 + [88]), $5)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)($2 + [88])), [9880])
	
.LABEL $label$1
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [8719])
	CALL eosio_assert(((uint_32)(*($4 + [8]) + [86400]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$7() / (uint_64)(int_64)1000000))), [8744])
	*((($2 + [48]) + [32])) = [0]
	*($2 + [56]) = $1
	*($2 + [64]) = (int_64)-1
	*($2 + [72]) = (int_64)0
	*($2 + [48]) = *($0)
	$7 = ($4 + [24])
	$5 = CALL $60(($2 + [48]), (uint_64)*($7) >> (uint_64)(int_64)8), [8660]
	CALL eosio_assert(((int_32)*($5) + [16]) == (int_32)($2 + [48])), [10045])
	CALL eosio_assert(((int_64)*($2 + [48]) == (int_64)CALL $fimport$3()), [10091])
	$3 = *($5 + [8])
	CALL eosio_assert(((int_64)*($7) == (int_64)$3), [9670])
	$8 = ((int_64)*($5) + (int_64)*($4 + [16]))
	*($5) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9713])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [9732])
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$3) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [10142])
	CALL eosio_assert([1], [9592])
	CALL memcpy(($2 + [128]), $5, [8])
	CALL eosio_assert([1], [9592])
	CALL memcpy((($2 + [128]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), $1, ($2 + [128]), [16])
	if ( (uint_64)($3 <= *($2 + [64])) ){ goto $label$2 }
	*((($2 + [48]) + [16])) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$2
	*((($2 + [8]) + [32])) = [0]
	*($2 + [16]) = $1
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	*($2 + [8]) = *($0)
	$5 = CALL $63(($2 + [8]), $1, [8702])
	CALL eosio_assert(((int_32)*($5 + [76]) == (int_32)($2 + [8])), [10045])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)CALL $fimport$3()), [10091])
	$3 = *($5)
	CALL eosio_assert(((int_64)*($7) == (int_64)*(($5 + [32]))), [9789])
	$8 = (int_64)
	*($5 + [24]) = $8(*($5 + [24]) - *(($4 + [16]))))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [9837])
	CALL eosio_assert(((int_64)*($5 + [24]) < (int_64)4611686018427387904), [9859])
	*($5 + [40]) = [0]
	CALL eosio_assert(((int_64)$3 == (int_64)*($5)), [10142])
	*($2 + [208]) = (($2 + [128]) + [72])
	*($2 + [204]) = ($2 + [128])
	*($2 + [200]) = ($2 + [128])
	*($2 + [216]) = ($2 + [200])
	*($2 + [228]) = ($5 + [8])
	*($2 + [224]) = $5
	*($2 + [232]) = ($5 + [24])
	*($2 + [236]) = ($5 + [40])
	*($2 + [240]) = ($5 + [48])
	*($2 + [244]) = ($5 + [56])
	*($2 + [248]) = ($5 + [64])
	*($2 + [252]) = ($5 + [72])
	CALL $45(($2 + [224]), ($2 + [216]))
	CALL db_update_i64(*($5 + [80]), $1, ($2 + [128]), [72])
	if ( (uint_64)($3 <= *($2 + [24])) ){ goto $label$3 }
	*(($2 + [24])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	CALL eosio_assert($6, [10201])
	CALL eosio_assert($6, [10235])
	$5 = CALL db_next_i64(*($4 + [36]), ($2 + [128]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $65(($2 + [88]), $5)
	
.LABEL $label$4
	CALL $72(($2 + [88]), $4)
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$5 }
	$6 = ($2 + [36])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$8 }
	$5 = *(($2 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$5 = $0
	
.LABEL $label$6
	*($6) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$0 = *($2 + [72])
	if ( ($0 == 0) ){ goto $label$10 }
	$6 = ($2 + [76])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($2 + [72]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*($6) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$10
	$0 = *($2 + [112])
	if ( ($0 == 0) ){ goto $label$15 }
	$6 = ($2 + [116])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$19 }
	CALL _ZdlPv($4)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$18 }
	$5 = *(($2 + [112]))
	goto $label$16 
	
.LABEL $label$17
	$5 = $0
	
.LABEL $label$16
	*($6) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$15
	$global$0 = ($2 + [256])
}

void .FUNC $76 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = [0]
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	$7 = *($2 + [8])
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $61(($4 + [8]), $0)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [9880])
	CALL eosio_assert([1], [10010])
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)($4 + [8])), [10045])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)CALL $fimport$3()), [10091])
	$1 = *($5 + [8])
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [9670])
	$7 = ((int_64)*($5) + (int_64)*($2))
	*($5) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9713])
	CALL eosio_assert(((int_64)*($5) < (int_64)4611686018427387904), [9732])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$1) == (int_64)(uint_64)*($5 + [8]) >> (uint_64)(int_64)8)), [10142])
	CALL eosio_assert([1], [9592])
	CALL memcpy(($4 + [64]), $5, [8])
	CALL eosio_assert([1], [9592])
	CALL memcpy((($4 + [64]) | [8]), ($5 + [8]), [8])
	CALL db_update_i64(*($5 + [20]), (int_64)0, ($4 + [64]), [16])
	$5 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($5)) ){ goto $label$3 }
	*($5) = ((int_64)$1 + (int_64)1)
	$8 = *($4 + [32])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$6 == (int_64)CALL $fimport$3()), [9959])
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [9598])
	$10 = ($9 + [8])
	$1 = (int_64)5459781
	
.LOOP $label$6:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$1 = $7
	$11 = [1]
	$0 = $5
	$5 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$0 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $0 ){ goto $label$8 }
	$11 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$6 }
	
.LABEL $label$5
	CALL eosio_assert($11, [8540])
	*($9 + [16]) = ($4 + [8])
	*(($5 = ($9 + [8]))) = *(($2 + [8]))
	*($9) = *($2)
	CALL eosio_assert([1], [9592])
	CALL memcpy(($4 + [64]), $9, [8])
	CALL eosio_assert([1], [9592])
	CALL memcpy((($4 + [64]) | [8]), $10, [8])
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8
	$0 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [64]), [16]
	*($9 + [20]) = $0)
	$8 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($8)) ){ goto $label$9 }
	*($8) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$9
	*($4 + [56]) = $9
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8
	*($4 + [64]) = $1)
	*($4 + [52]) = $0
	$8 = ($4 + [36])
	$5 = *($8)
	if ( ((uint_32)$5 >= (uint_32)*(($4 + [40]))) ){ goto $label$11 }
	*($5 + [8]) = $1
	*($5 + [16]) = $0
	*($4 + [56]) = [0]
	*($5) = $9
	*($8) = ($5 + [24])
	$5 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( $5 ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	CALL $77(($4 + [32]), ($4 + [56]), ($4 + [64]), ($4 + [52]))
	$5 = *($4 + [56])
	*($4 + [56]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$10
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$8 = *($4 + [32])
	if ( ($8 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$9 = ($4 + [36])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$0 = *($5)
	*($5) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($4 + [32]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $8
	
.LABEL $label$12
	*($9) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $130($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9592])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9592])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [48])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [52])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [60])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [64])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [68])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9592])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $36 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [256])
	$global$0 = $1
	$2 = ($0 + [16])
	$3 = *($0 + [56])
	$5 = *(($0 + [44]))
	$4 = *(($0 + [40]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$4 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$2), [9880])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($2), *(($0 + [24])), (int_64)4154159847563875632, $3)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $7($2, $7)
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$2), [9880])
	
.LABEL $label$2
	CALL eosio_assert([1], [10010])
	CALL eosio_assert(((int_32)*($7 + [160]) == (int_32)$2), [10045])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$3()), [10091])
	*($7 + [24]) = *(($0 + [88]))
	*($7 + [8]) = *(($0 + [72]))
	*($7 + [16]) = *(($0 + [80]))
	*(($7 + [88])) = *(($0 + [152]))
	*($7 + [80]) = *(($0 + [144]))
	*($7 + [136]) = *(($0 + [200]))
	*($7 + [120]) = *(($0 + [184]))
	*($7 + [112]) = *(($0 + [176]))
	$3 = *($7)
	CALL eosio_assert([1], [10142])
	*($1 + [168]) = ($1 + [152])
	*($1 + [164]) = $1
	*($1 + [160]) = $1
	*($1 + [176]) = ($1 + [160])
	*($1 + [188]) = ($7 + [8])
	*($1 + [184]) = $7
	*($1 + [192]) = ($7 + [16])
	*($1 + [196]) = ($7 + [24])
	*($1 + [200]) = ($7 + [32])
	*($1 + [204]) = ($7 + [48])
	*($1 + [208]) = ($7 + [56])
	*($1 + [212]) = ($7 + [64])
	*($1 + [216]) = ($7 + [72])
	*($1 + [220]) = ($7 + [80])
	*($1 + [224]) = ($7 + [96])
	*($1 + [228]) = ($7 + [104])
	*($1 + [232]) = ($7 + [112])
	*($1 + [236]) = ($7 + [120])
	*($1 + [240]) = ($7 + [128])
	*($1 + [244]) = ($7 + [136])
	*($1 + [248]) = ($7 + [144])
	*($1 + [252]) = ($7 + [152])
	CALL $39(($1 + [184]), ($1 + [176]))
	CALL db_update_i64(*($7 + [164]), (int_64)0, $1, [152])
	$7 = ($0 + [32])
	if ( ((uint_64)*($7) > (uint_64)$3) ){ goto $label$1 }
	*($7) = ((int_64)$3 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($1 + [256])
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9931])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $140($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [56]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	*($3 + [48]) = ($5 + [32])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [48])
	CALL $107(($3 + [32]), ($3 + [24]))
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $35(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $143($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $78 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	$5 = ($global$0 - [144])
	$global$0 = $5
	CALL eosio_assert(((int_32)*(($0 + [320])) == (int_32)[1]), [9647])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$7 }
	$7 = uint_32($6 >> [1])
	$8 = ($4 + [1])
	$6 = CALL $139([8403])
	if ( ($6 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$7
	$7 = *($4 + [4])
	$8 = *($4 + [8])
	$6 = CALL $139([8403])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$4 }
	$9 = ($8 + $7)
	$10 = $8
	
.LOOP $label$8:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$4 }
	$7 = CALL $137($10, [103], $7)
	if ( ($7 == 0) ){ goto $label$4 }
	if ( (CALL $138($7, [8403], $6) == 0) ){ goto $label$9 }
	$10 = ($7 + [1])
	$7 = ($9 - $10)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$9
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$4 }
	if ( ((int_32)($7 - $8) == (int_32)[-1]) ){ goto $label$4 }
	
.LABEL $label$5
	$11 = *($0)
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$11 != (int_64)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = *($4)
	$7 = CALL $139([8993])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$14 }
	if ( (CALL $129($4, [0], [-1], [8993], $7) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$6 = *($4)
	$7 = CALL $139([9002])
	if ( ((int_32)$7 != (int_32)( *(($4 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$15 }
	if ( (CALL $129($4, [0], [-1], [9002], $7) == 0) ){ goto $label$12 }
	$6 = *($4)
	
.LABEL $label$15
	if ( ($6 & [1]) ){ goto $label$16 }
	$8 = ($4 + [1])
	$7 = uint_32(($6 & [254]) >> [1])
	$6 = CALL $139([9008])
	if ( ($6 == 0) ){ goto $label$10 }
	goto $label$11 
	
.LABEL $label$16
	$7 = *(($4 + [4]))
	$8 = *($4 + [8])
	$6 = CALL $139([9008])
	if ( $6 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$11 = *($0)
	if ( ((int_64)$11 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$12
	$11 = *($0)
	if ( ((int_64)$11 != (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$11 == (int_64)$2) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$11
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$1 }
	$9 = ($8 + $7)
	$10 = $8
	
.LOOP $label$17:
	$7 = (($7 - $6) + [1])
	if ( ($7 == 0) ){ goto $label$1 }
	$7 = CALL $137($10, [103], $7)
	if ( ($7 == 0) ){ goto $label$1 }
	if ( (CALL $138($7, [9008], $6) == 0) ){ goto $label$18 }
	$10 = ($7 + [1])
	$7 = ($9 - $10)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$17 }
	goto $label$1 
	
.LABEL $label$18
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$1 }
	if ( ((int_32)($7 - $8) == (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$10
	$11 = *($0)
	if ( ((int_64)$11 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$11 != (int_64)$2) ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [9046])
	CALL require_auth($1)
	CALL eosio_assert(CALL eosio_assert1($2), [9070])
	$12 = *($3 + [8])
	$7 = [0]
	*(($5 + [136])) = [0]
	$11 = (uint_64)$12 >> (uint_64)(int_64)8
	*($5 + [112]) = $11)
	*($5 + [120]) = (int_64)-1
	*($5 + [128]) = (int_64)0
	*($5 + [104]) = *($0)
	$9 = CALL $79(($5 + [104]), $11, [9096])
	$13 = *($3)
	if ( ((uint_64)((int_64)$13 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$19 }
	$6 = [0]
	
.LOOP $label$21:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$20 }
	$14 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$22 }
	$11 = $14
	$7 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$22
	$11 = $14
	
.LOOP $label$23:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$20 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $7 ){ goto $label$23 }
	$7 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	$7 = [0]
	
.LABEL $label$19
	CALL eosio_assert($7, [8887])
	CALL eosio_assert(((int_64)$13 > (int_64)0), [9119])
	CALL eosio_assert(((int_64)$12 == (int_64)*($9 + [8])), [8933])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$25 }
	$6 = uint_32($6 >> [1])
	goto $label$24 
	
.LABEL $label$25
	$6 = *($4 + [4])
	
.LABEL $label$24
	CALL eosio_assert(($6 <= [257]), [8798])
	$6 = *($4)
	$7 = CALL $139([8993])
	if ( ((int_32)$7 != (int_32)( *(($4 + [4])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$26 }
	if ( CALL $129($4, [0], [-1], [8993], $7) ){ goto $label$26 }
	$14 = *(($3 + [8]))
	*((($5 + [88]) + [8])) = $14
	$11 = *($3)
	*((($5 + [40]) + [8])) = $14
	*($5 + [88]) = $11
	*($5 + [40]) = $11
	CALL $80($0, $1, ($5 + [40]))
	
.LABEL $label$26
	$6 = ($3 + [8])
	$14 = *($6)
	*((($5 + [72]) + [8])) = $14
	$11 = *($3)
	*((($5 + [24]) + [8])) = $14
	*($5 + [72]) = $11
	*($5 + [24]) = $11
	CALL $81($0, $1, ($5 + [24]))
	$14 = *($6)
	*((($5 + [56]) + [8])) = $14
	$11 = *($3)
	*((($5 + [8]) + [8])) = $14
	*($5 + [8]) = $11
	*($5 + [56]) = $11
	CALL $76($0, $2, ($5 + [8]), $1)
	$4 = *($5 + [128])
	if ( ($4 == 0) ){ goto $label$2 }
	$10 = ($5 + [132])
	$6 = *($10)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$28 }
	
.LOOP $label$29:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$30 }
	CALL _ZdlPv($7)
	
.LABEL $label$30
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$29 }
	$6 = *(($5 + [128]))
	goto $label$27 
	
.LABEL $label$28
	$6 = $4
	
.LABEL $label$27
	*($10) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$2
	$global$0 = ($5 + [144])
	return 
	
.LABEL $label$1
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$32 }
	$6 = uint_32($6 >> [1])
	goto $label$31 
	
.LABEL $label$32
	$6 = *(($4 + [4]))
	
.LABEL $label$31
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9033])
	$global$0 = ($5 + [144])
}

int_32 .FUNC $79 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [9880])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $54($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [9880])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $32 (int_32 $0, int_32 $1, float_64 $2, float_64 $3)
{
	int_32 $4
	int_64 $5
	float_64 $6
	float_64 $7
	int_32 $8
	float_64 $9
	float_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	float_64 $16
	float_64 $17
	float_64 $18
	float_64 $19
	$4 = ($global$0 - [48])
	$global$0 = $4
	$5 = *(($1 + [96]))
	$6 = *(($1 + [88]))
	$7 = *(($1 + [72]))
	$8 = *(($1 + [160]))
	$9 = *(($1 + [128]))
	CALL eosio_assert([1], [9598])
	$10 = ((float_64)$2 * (float_64)$3)
	$2 = ((float_64)$9 * (float_64)$10)
	$3 = (float_64))((float_64)1 - $9)
	$11 = (int_64)5459781
	$12 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$13 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$11 = $13
	$14 = [1]
	$15 = $12
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$11 = $13
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$14 = ((int_32)$12 < (int_32)[6])
	$15 = ($12 + [1])
	$12 = $15
	if ( $14 ){ goto $label$5 }
	$14 = [1]
	$12 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$14 = [0]
	
.LABEL $label$1
	CALL eosio_assert($14, [8540])
	$16 = (CASTING float_64)(int_64 $5)
	if ( (((int_32)((float_64)$7 >= (float_64)$16) ^ (int_32)[1]) == 0) ){ goto $label$10 }
	$17 = ((float_64)$2 + (float_64)$7)
	if ( ((int_32)((float_64)$17 < (float_64)$16) ^ (int_32)[1]) ){ goto $label$9 }
	*($0 + [8]) = $2
	*(($1 + [72])) = $17
	$7 = ((float_64)$10 * (float_64)$3)
	*($0 + [16]) = $7
	*(($12 = ($1 + [80]))) = ((float_64)$7 + (float_64)*($12))
	$9 = ((float_64)((float_64)$2 * (float_64)(CASTING float_64)(uint_32 $8)) / (float_64)$9)
	*($0) = $9
	*(($1 + [88])) = ((float_64)$6 + (float_64)$9)
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$10
	CALL $38(($4 + [24]), $12, $7)
	$11 = *($4 + [32])
	$19 = (CASTING float_64)(int_64 $11)
	$17 = *($4 + [24])
	$16 = ((float_64)$2 * (float_64)$17)
	$18 = ((float_64)$7 + (float_64)$16)
	if ( ((int_32)((float_64)$18 < (float_64)$19) ^ (int_32)[1]) ){ goto $label$8 }
	$7 = CALL $133(((float_64)((float_64)$16 / (float_64)$7) + (float_64)(float_64)1), $9)
	*(($1 + [72])) = $18
	$9 = ((float_64)((float_64)$10 * (float_64)$3) * (float_64)$17)
	*(($12 = ($1 + [80]))) = ((float_64)$9 + (float_64)*($12))
	$7 = ((float_64)$6 * (float_64)((float_64)$7 + (float_64)(float_64)-1))
	*(($1 + [88])) = ((float_64)$6 + (float_64)$7)
	goto $label$7 
	
.LABEL $label$9
	if ( ((int_32)((float_64)$17 < (float_64)(float_64)2031799726) ^ (int_32)[1]) ){ goto $label$6 }
	if ( ((int_32)((float_64)$17 > (float_64)$16) ^ (int_32)[1]) ){ goto $label$6 }
	$7 = ((float_64)$7 + (float_64)$16)
	$16 = (float_64)
	$16 = ( $16($16 - $7)) ? (float_64)0 : ((float_64)$16 > (float_64)(float_64)0) 
	$2 = (float_64)
	$10 = CALL $133(((float_64)((float_64)$2($2 - $16))) / (float_64)$7) + (float_64)(float_64)1), $9)
	*(($1 + [72])) = ((float_64)$7 + (float_64)$2)
	*($0 + [8]) = ((float_64)$16 + (float_64)$2)
	$7 = ((float_64)((float_64)((float_64)$3 * (float_64)$16) / (float_64)$9) + (float_64)((float_64)((float_64)$3 * (float_64)$2) / (float_64)$9))
	*($0 + [16]) = $7
	*(($12 = ($1 + [80]))) = ((float_64)$7 + (float_64)*($12))
	$7 = ((float_64)$7 * (float_64)((float_64)$10 + (float_64)(float_64)-1))
	$9 = ((float_64)((float_64)$16 * (float_64)(CASTING float_64)(uint_32 $8)) / (float_64)$9)
	$7 = ((float_64)$6 + (float_64)$9)
	*(($1 + [88])) = ((float_64)$7 + (float_64)$7)
	*($0) = ((float_64)$9 + (float_64)$7)
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$8
	CALL $38($4, $12, (CASTING float_64)(int_64 ((int_64)$11 + (int_64)1)))
	$10 = *($4)
	$16 = (float_64)
	$16 = ( $16($19 - $7)) ? (float_64)0 : ((float_64)$16 > (float_64)(float_64)0) 
	$17 = CALL $133(((float_64)((float_64)$16) / (float_64)$7) + (float_64)(float_64)1), $9)
	$7 = ((float_64)$7 + (float_64)$16)
	$2 = (float_64)
	$10 = CALL $133(((float_64)((float_64)$2(((float_64)$2 * (float_64)$10) - $16)) / (float_64)$7) + (float_64)(float_64)1), $9)
	*(($1 + [72])) = ((float_64)$7 + (float_64)$2)
	$9 = ((float_64)((float_64)((float_64)$3 * (float_64)$16) / (float_64)$9) + (float_64)((float_64)((float_64)$3 * (float_64)$2) / (float_64)$9))
	*(($12 = ($1 + [80]))) = ((float_64)*($12) + (float_64)$9)
	$6 = ((float_64)$6 * (float_64)((float_64)$10 + (float_64)(float_64)-1))
	$7 = ((float_64)$6 * (float_64)((float_64)$17 + (float_64)(float_64)-1))
	$6 = ((float_64)$6 + (float_64)$7)
	*(($1 + [88])) = ((float_64)$6 + (float_64)$6)
	$16 = ((float_64)$16 + (float_64)$2)
	$7 = ((float_64)$7 + (float_64)$6)
	
.LABEL $label$7
	*($0 + [8]) = $16
	*($0) = $7
	*($0 + [16]) = $9
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	$global$0 = ($4 + [48])
}

void .FUNC $33 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $28($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $29(($4 + [72]), ($4 + [64]))
	CALL $27(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $130(($4 + [8]))
}

void .FUNC $30 (int_32 $0, int_64 $1, int_64 $2, float_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	$4 = ($global$0 - [320])
	$global$0 = $4
	$5 = (int_64)0
	$6 = (int_64)59
	$7 = [8370]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($7)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $10) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$1 }
	$7 = [0]
	*(($4 + [200])) = [0]
	*($4 + [176]) = $1
	*($4 + [168]) = $8
	*($4 + [184]) = (int_64)-1
	*($4 + [192]) = (int_64)0
	$10 = CALL $31(($4 + [168]), $2, [8383])
	$2 = *($10 + [48])
	$11 = *($10 + [32])
	$12 = *($10 + [16])
	$13 = *($10 + [8])
	$14 = *($10)
	$8 = *($10 + [24])
	*($4 + [120]) = (int_64)4572414629676717179
	*($4 + [112]) = (int_64)4576918229304087675
	*($4 + [128]) = (int_64)4571261708172110332
	*($4 + [136]) = (int_64)4569063951553953530
	*($4 + [144]) = (int_64)4566758108544739836
	*($4 + [152]) = (int_64)4562254508917369340
	CALL $32(($4 + [88]), $0, $3, *(((($4 + [112]) + ((CASTING uint_32)(uint_64 $8) << [3])) + [-8])))
	$3 = *($4 + [88])
	if ( ((float_64)(float_64)|$3| < (float_64)(float_64)9223372036854775808) ){ goto $label$6 }
	$9 = (int_64)-9223372036854775808
	goto $label$5 
	
.LABEL $label$6
	$9 = (Rounds 0)($3)
	
.LABEL $label$5
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9598])
	$5 = (int_64)5392708
	
.LOOP $label$8:
	$15 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$5 = $6
	$15 = [1]
	$10 = $7
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$10 = ((int_32)$7 < (int_32)[6])
	$16 = ($7 + [1])
	$7 = $16
	if ( $10 ){ goto $label$10 }
	$15 = [1]
	$7 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($15, [8540])
	$6 = *($0)
	$5 = (int_64)6
	
.LOOP $label$11:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$11 }
	*(($4 + [64])) = (int_64)1380533252
	*(($4 + [80])) = [0]
	*($4 + [48]) = $1
	*($4 + [40]) = $6
	*($4 + [56]) = $9
	*($4 + [72]) = (int_64)0
	$10 = ($4 + [72])
	$7 = CALL $139([8403])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$15 }
	*(($4 + [72])) = ($7 << [1])
	$16 = ($10 + [1])
	if ( $7 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$15 = (($7 + [16]) & [-16])
	$16 = CALL _Znwj($15)
	*(($4 + [80])) = $16
	*(($4 + [76])) = $7
	*($4 + [72]) = ($15 | [1])
	
.LABEL $label$14
	CALL memcpy($16, [8403], $7)
	
.LABEL $label$13
	*(($16 + $7)) = [0]
	*(($7 = CALL _Znwj([16]))) = $6
	*($7 + [8]) = (int_64)3617214756542218240
	*((($4 + [208]) + [24])) = *((($4 + [40]) + [24]))
	*(($16 = (($4 + [208]) + [40]))) = *(($10 + [8]))
	$5 = *($10)
	*(($4 + [72])) = (int_64)0
	*($4) = $7
	$7 = ($7 + [16])
	*($4 + [8]) = $7
	*($4 + [4]) = $7
	*($4 + [208]) = *($4 + [40])
	*($4 + [216]) = *((($4 + [40]) + [8]))
	*($4 + [224]) = *($4 + [56])
	*($4 + [240]) = $5
	*((($4 + [40]) + [40])) = [0]
	CALL $33($6, (int_64)-3617168760277827584, $4, ($4 + [208]))
	if ( ((*($4 + [240]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*($16))
	
.LABEL $label$16
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$17 }
	*($4 + [4]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$17
	if ( ((*((($4 + [40]) + [32])) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($4 + [80])))
	
.LABEL $label$18
	*(($4 + [32])) = [0]
	*($4 + [8]) = $1
	*($4 + [16]) = (int_64)-1
	*($4 + [24]) = (int_64)0
	$5 = *($0)
	*($4) = $5
	CALL eosio_assert(((int_64)$5 == (int_64)CALL $fimport$3()), [9959])
	*(($7 = CALL _Znwj([72])) + [56]) = $4
	*($7 + [8]) = $13
	*($7) = $14
	*($7 + [16]) = $12
	*($7 + [24]) = $8
	*($7 + [32]) = $11
	*($7 + [40]) = $9
	*($7 + [48]) = $2
	*($4 + [272]) = (($4 + [208]) + [56])
	*($4 + [268]) = ($4 + [208])
	*($4 + [264]) = ($4 + [208])
	*($4 + [280]) = ($4 + [264])
	*($4 + [292]) = ($7 + [8])
	*($4 + [288]) = $7
	*($4 + [296]) = ($7 + [16])
	*($4 + [300]) = ($7 + [24])
	*($4 + [304]) = ($7 + [32])
	*($4 + [308]) = ($7 + [40])
	*($4 + [312]) = ($7 + [48])
	CALL $34(($4 + [288]), ($4 + [280]))
	$6 = *($7)
	$16 = CALL db_store_i64(*($4 + [8]), (int_64)-4993458661321014272, $5, $6, ($4 + [208]), [56])
	*($7 + [60]) = $16
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$19 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$19
	*($4 + [288]) = $7
	$5 = *($7)
	*($4 + [208]) = $5
	*($4 + [264]) = $16
	$15 = ($4 + [28])
	$10 = *($15)
	if ( ((uint_32)$10 >= (uint_32)*(($4 + [32]))) ){ goto $label$22 }
	*($10 + [8]) = $5
	*($10 + [16]) = $16
	*($4 + [288]) = [0]
	*($10) = $7
	*($15) = ($10 + [24])
	$7 = *($4 + [288])
	*($4 + [288]) = [0]
	if ( $7 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	CALL $35(($4 + [24]), ($4 + [288]), ($4 + [208]), ($4 + [264]))
	$7 = *($4 + [288])
	*($4 + [288]) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	CALL _ZdlPv($7)
	
.LABEL $label$20
	CALL $36($0)
	$16 = *($4 + [24])
	if ( ($16 == 0) ){ goto $label$23 }
	$15 = ($4 + [28])
	$7 = *($15)
	if ( ((int_32)$7 == (int_32)$16) ){ goto $label$25 }
	
.LOOP $label$26:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$27 }
	CALL _ZdlPv($10)
	
.LABEL $label$27
	if ( ((int_32)$16 != (int_32)$7) ){ goto $label$26 }
	$7 = *(($4 + [24]))
	goto $label$24 
	
.LABEL $label$25
	$7 = $16
	
.LABEL $label$24
	*($15) = $16
	CALL _ZdlPv($7)
	
.LABEL $label$23
	$16 = *($4 + [192])
	if ( ($16 == 0) ){ goto $label$28 }
	$15 = ($4 + [196])
	$7 = *($15)
	if ( ((int_32)$7 == (int_32)$16) ){ goto $label$30 }
	
.LOOP $label$31:
	$7 = ($7 + [-24])
	$10 = *($7)
	*($7) = [0]
	if ( ($10 == 0) ){ goto $label$32 }
	CALL _ZdlPv($10)
	
.LABEL $label$32
	if ( ((int_32)$16 != (int_32)$7) ){ goto $label$31 }
	$7 = *(($4 + [192]))
	goto $label$29 
	
.LABEL $label$30
	$7 = $16
	
.LABEL $label$29
	*($15) = $16
	CALL _ZdlPv($7)
	
.LABEL $label$28
	$global$0 = ($4 + [320])
	return (unreachable)
	
.LABEL $label$12
	CALL $117($10)
}

int_32 .FUNC $31 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)$0), [9880])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4993458661321014272, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $37($0, $4)
	CALL eosio_assert(((int_32)*($5 + [56]) == (int_32)$0), [9880])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $138(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $121($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}