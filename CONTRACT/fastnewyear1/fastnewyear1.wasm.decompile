(data (i32.const 4) "\00g\00\00")
(data (i32.const 16) "eosio.token\00")
(data (i32.const 32) "fastecoadmin\00")
(data (i32.const 48) "transfer\00")
(data (i32.const 64) "fastshieldio\00")
(data (i32.const 80) "read\00")
(data (i32.const 96) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 160) "FAST LUCKY PACKET IS NOT READY YET. www.fastwin.io\00")
(data (i32.const 224) "THERE IS NO MORE LUCK PACKET, KEEP WAIT THE NEXT ROUND! www.fastwin.io\00")
(data (i32.const 304) "YOU NEED TO STAKE MINIMUM 10000 FAST TO JOIN THE EVENT. www.fastwin.io\00")
(data (i32.const 384) "min should be less than max.\00")
(data (i32.const 416) "payout calculation error.\00")
(data (i32.const 448) "cannot pass end iterator to modify\00")
(data (i32.const 496) "Seems like a serious internal error.\00")
(data (i32.const 544) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 608) "invalid symbol name\00")
(data (i32.const 640) "active\00")
(data (i32.const 656) "FAST ECO -- BEST WISHES TO YOU FOR 2019! www.fastwin.io\00")
(data (i32.const 720) " YOU HAVE ALREADY GOT REWARD FOR THIS ROUND.\00")
(data (i32.const 768) "write\00")
(data (i32.const 784) "object passed to modify is not in multi_index\00")
(data (i32.const 832) "cannot modify objects in table of another contract\00")
(data (i32.const 896) "updater cannot change primary key when modifying an object\00")
(data (i32.const 960) "error reading iterator\00")
(data (i32.const 992) "get\00")
(data (i32.const 1008) "fastwinhold2\00")
(data (i32.const 1024) "YOU NEED TO STAKE FAST TO JOIN THE EVENT.\00")
(data (i32.const 1072) "cannot create objects in table of another contract\00")
(data (i32.const 1136) "you have to begin first.\00")
(data (i32.const 1168) "fast new year internal error. (end)\00")
(data (i32.const 1216) " history list differentiate than the globalstates table.\00")
(data (i32.const 1280) " pool balance is not enough.\00")
(data (i32.const 1312) " maximum number is 100.\00")
(data (i32.const 1344) "memo length is too long (255).\00")
(data (i32.const 1376) "another round is not finished yet, please call end() first.\00")
(data (i32.const 1440) "fast new year internal error. (begin)\00")
(data (i32.const 9888) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$7 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$8 (param i32 i32)))
(import "env" "memcpy" (func $fimport$9 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$11 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$12 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$13 (param i64)))
(import "env" "require_auth2" (func $fimport$14 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$15 (param i64)))
(import "env" "send_inline" (func $fimport$16 (param i32 i32)))
(import "env" "sha256" (func $fimport$17 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $53))
(export "free" (func $56))
(export "memcmp" (func $65))
(export "strlen" (func $66))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $67 $10 $6 $12 $8)



void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$8 = (*([0] + [4]) - [16])
	$11 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$10 = *($3 + [4])
	$4 = *($1)
	$3 = *(*($3) + [4])
	$6 = ($3 + [12])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($3 + [16]))) ){ goto $label$2 }
	*($5) = *($10)
	*(($5 + [16])) = *(($10 + [16]))
	*(($5 + [8])) = *(($10 + [8]))
	*($6) = (*($6) + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $25(($3 + [8]), $10)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [896])
	$5 = ($1 + [8])
	$6 = *($1 + [8])
	$10 = *(($1 + [12]))
	$7 = ($10 - $6)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[24]))
	$3 = [32]
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$5 }
	$10 = ($7 + [-24])
	$3 = (($10 - ((uint_32)$10 % (uint_32)[24])) + $3)
	goto $label$4 
	
.LABEL $label$5
	$3 = ($3 + [-24])
	
.LABEL $label$4
	$10 = *($1 + [32])
	$10 = ( *(($1 + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$3 = (($10 + $3) + [8])
	$9 = (CASTING uint_64)(uint_32 $10)
	$6 = ($1 + [32])
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$6 }
	if ( ($3 <= [513]) ){ goto $label$8 }
	$10 = CALL malloc($3)
	goto $label$7 
	
.LABEL $label$8
	$10 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $10
	
.LABEL $label$7
	*($11) = $10
	*($11 + [8]) = ($10 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [768])
	CALL memcpy($10, $1, [8])
	*($11 + [4]) = ($10 + [8])
	$8 = CALL $26($11, $5)
	CALL eosio_assert(((int_32)(*($8 + [8]) - *($8 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($8 + [4]), ($1 + [24]), [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	CALL $24($8, $6)
	CALL db_update_i64(*($1 + [48]), $2, $10, $3)
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($10)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $57(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $58($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $57($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $63($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $58($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [80])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [80])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [80])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [80])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [80])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [80])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $28(*($1), *($0 + [24]))
	$0 = *($0 + [28])
	*($4) = *($1)
	*($4 + [12]) = ($0 + [1])
	*($4 + [8]) = $0
	*($4 + [16]) = ($0 + [2])
	*($4 + [20]) = ($0 + [3])
	*($4 + [24]) = ($0 + [4])
	*($4 + [28]) = ($0 + [5])
	*($4 + [32]) = ($0 + [6])
	*($4 + [36]) = ($0 + [7])
	*($4 + [40]) = ($0 + [8])
	*($4 + [44]) = ($0 + [9])
	*($4 + [48]) = ($0 + [10])
	*($4 + [52]) = ($0 + [11])
	*($4 + [56]) = ($0 + [12])
	*($4 + [60]) = ($0 + [13])
	*($4 + [64]) = ($0 + [14])
	*($4 + [68]) = ($0 + [15])
	*($4 + [72]) = ($0 + [16])
	*($4 + [76]) = ($0 + [17])
	*($4 + [80]) = ($0 + [18])
	*($4 + [84]) = ($0 + [19])
	*($4 + [88]) = ($0 + [20])
	*($4 + [92]) = ($0 + [21])
	*($4 + [96]) = ($0 + [22])
	*($4 + [100]) = ($0 + [23])
	*($4 + [104]) = ($0 + [24])
	*($4 + [108]) = ($0 + [25])
	*($4 + [112]) = ($0 + [26])
	*($4 + [116]) = ($0 + [27])
	*($4 + [120]) = ($0 + [28])
	*($4 + [124]) = ($0 + [29])
	*($4 + [128]) = ($0 + [30])
	*($4 + [132]) = ($0 + [31])
	*($4 + [136]) = ($0 + [32])
	*($4 + [140]) = ($0 + [33])
	*($4 + [144]) = ($0 + [34])
	*($4 + [148]) = ($0 + [35])
	*($4 + [152]) = ($0 + [36])
	*($4 + [156]) = ($0 + [37])
	*($4 + [160]) = ($0 + [38])
	*($4 + [164]) = ($0 + [39])
	*($4 + [168]) = ($0 + [40])
	*($4 + [172]) = ($0 + [41])
	*($4 + [176]) = ($0 + [42])
	*($4 + [180]) = ($0 + [43])
	*($4 + [184]) = ($0 + [44])
	*($4 + [188]) = ($0 + [45])
	*($4 + [192]) = ($0 + [46])
	*($4 + [196]) = ($0 + [47])
	*($4 + [200]) = ($0 + [48])
	*($4 + [204]) = ($0 + [49])
	*($4 + [208]) = ($0 + [50])
	*($4 + [212]) = ($0 + [51])
	*($4 + [216]) = ($0 + [52])
	*($4 + [220]) = ($0 + [53])
	*($4 + [224]) = ($0 + [54])
	*($4 + [228]) = ($0 + [55])
	*($4 + [232]) = ($0 + [56])
	*($4 + [236]) = ($0 + [57])
	*($4 + [240]) = ($0 + [58])
	*($4 + [244]) = ($0 + [59])
	*($4 + [248]) = ($0 + [60])
	*($4 + [252]) = ($0 + [61])
	*($4 + [256]) = ($0 + [62])
	*($4 + [260]) = ($0 + [63])
	*($4 + [264]) = ($0 + [64])
	*($4 + [268]) = ($0 + [65])
	CALL $41(($4 + [8]), $4)
	*([0] + [4]) = ($4 + [272])
}

void .FUNC $67 ()
{
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $57(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $58(*(($1 + [40])))
	
.LABEL $label$11
	$6 = *($1 + [8])
	if ( ($6 == 0) ){ goto $label$12 }
	*(($1 + [12])) = $6
	CALL $58($6)
	
.LABEL $label$12
	CALL $58($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $58($2)
	
.LABEL $label$13
	(unreachable)
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $30($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $62($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $57($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $62($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $58($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $59($7)
	return (unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $19($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [768])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [768])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $23(CALL $22($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [768])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $24(*($1), ($0 + [40]))
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [768])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [768])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [768])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [768])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [768])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[24])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$2 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($2 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $57(((int_32)$6 * (int_32)[24]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$3 * (int_32)[24])))) = *($1)
	*(($3 + [16])) = *(($1 + [16]))
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($5 - $4)
	$5 = ($3 + ((int_32)((int_32)$1 / (int_32)[-24]) * (int_32)[24]))
	$6 = ($7 + ((int_32)$6 * (int_32)[24]))
	$3 = ($3 + [24])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($5, $4, $1)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $5
	*(($0 + [4])) = $3
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $58($4)
	
.LABEL $label$6
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [768])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [768])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [992])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = ((int_32)($2 - $7) / (int_32)[24])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $31($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ((int_32)$4 * (int_32)[24]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [80])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [80])
	CALL memcpy(($7 + [8]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [80])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[24]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [768])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [768])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [768])
	CALL memcpy(*($4), ($7 + [8]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [768])
	CALL memcpy(*($4), ($7 + [16]), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [24])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [320])
	*([0] + [4]) = $5
	$2 = *($1)
	CALL $64(($5 + [144]), ($1 + [8]))
	$3 = *($1 + [24])
	CALL memcpy(($5 + [78]), ($1 + [32]), [66])
	CALL memcpy(($5 + [160]), ($5 + [78]), [66])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $64(($5 + [304]), ($5 + [144]))
	CALL memcpy(($5 + [232]), ($5 + [160]), [66])
	CALL memcpy(($5 + [12]), ($5 + [232]), [66])
	CALL void $0((int_32 $2), (int_64 ($5 + [304])), (int_32 $3), (int_64 ($5 + [12])), (int_32 $1))
	if ( ((*($5 + [304]) & [1]) == 0) ){ goto $label$2 }
	CALL $58(*($5 + [312]))
	
.LABEL $label$2
	if ( ((*($5 + [144]) & [1]) == 0) ){ goto $label$3 }
	CALL $58(*($5 + [152]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [320])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [80])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	CALL $28(*($1), ($3 + [8]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [80])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [33])
	*($4 + [8]) = ($3 + [32])
	*($4 + [16]) = ($3 + [34])
	*($4 + [20]) = ($3 + [35])
	*($4 + [24]) = ($3 + [36])
	*($4 + [28]) = ($3 + [37])
	*($4 + [32]) = ($3 + [38])
	*($4 + [36]) = ($3 + [39])
	*($4 + [40]) = ($3 + [40])
	*($4 + [44]) = ($3 + [41])
	*($4 + [48]) = ($3 + [42])
	*($4 + [52]) = ($3 + [43])
	*($4 + [56]) = ($3 + [44])
	*($4 + [60]) = ($3 + [45])
	*($4 + [64]) = ($3 + [46])
	*($4 + [68]) = ($3 + [47])
	*($4 + [72]) = ($3 + [48])
	*($4 + [76]) = ($3 + [49])
	*($4 + [80]) = ($3 + [50])
	*($4 + [84]) = ($3 + [51])
	*($4 + [88]) = ($3 + [52])
	*($4 + [92]) = ($3 + [53])
	*($4 + [96]) = ($3 + [54])
	*($4 + [100]) = ($3 + [55])
	*($4 + [104]) = ($3 + [56])
	*($4 + [108]) = ($3 + [57])
	*($4 + [112]) = ($3 + [58])
	*($4 + [116]) = ($3 + [59])
	*($4 + [120]) = ($3 + [60])
	*($4 + [124]) = ($3 + [61])
	*($4 + [128]) = ($3 + [62])
	*($4 + [132]) = ($3 + [63])
	*($4 + [136]) = ($3 + [64])
	*($4 + [140]) = ($3 + [65])
	*($4 + [144]) = ($3 + [66])
	*($4 + [148]) = ($3 + [67])
	*($4 + [152]) = ($3 + [68])
	*($4 + [156]) = ($3 + [69])
	*($4 + [160]) = ($3 + [70])
	*($4 + [164]) = ($3 + [71])
	*($4 + [168]) = ($3 + [72])
	*($4 + [172]) = ($3 + [73])
	*($4 + [176]) = ($3 + [74])
	*($4 + [180]) = ($3 + [75])
	*($4 + [184]) = ($3 + [76])
	*($4 + [188]) = ($3 + [77])
	*($4 + [192]) = ($3 + [78])
	*($4 + [196]) = ($3 + [79])
	*($4 + [200]) = ($3 + [80])
	*($4 + [204]) = ($3 + [81])
	*($4 + [208]) = ($3 + [82])
	*($4 + [212]) = ($3 + [83])
	*($4 + [216]) = ($3 + [84])
	*($4 + [220]) = ($3 + [85])
	*($4 + [224]) = ($3 + [86])
	*($4 + [228]) = ($3 + [87])
	*($4 + [232]) = ($3 + [88])
	*($4 + [236]) = ($3 + [89])
	*($4 + [240]) = ($3 + [90])
	*($4 + [244]) = ($3 + [91])
	*($4 + [248]) = ($3 + [92])
	*($4 + [252]) = ($3 + [93])
	*($4 + [256]) = ($3 + [94])
	*($4 + [260]) = ($3 + [95])
	*($4 + [264]) = ($3 + [96])
	*($4 + [268]) = ($3 + [97])
	CALL $41(($4 + [8]), $4)
	*([0] + [4]) = ($4 + [272])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $64(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $64(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $58(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $58(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [80])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [80])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [80])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [80])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $28(*($1), ($0 + [32]))
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [80])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [80])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $57(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	CALL $58(*(($1 + [56])))
	
.LABEL $label$11
	CALL $58($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $58($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	*($1 + [40]) = (int_64)0
	$12 = *($1 + [24])
	*($1 + [24]) = (int_64)0
	*($1) = ((int_64)*($1) + (int_64)1)
	*($1 + [8]) = ((int_64)$12 + (int_64)*($1 + [8]))
	*($1 + [32]) = (int_64)0
	*($1 + [16]) = (int_64)0
	CALL eosio_assert([1], [896])
	*(($14 = $13) + [24]) = [0]
	*($14 + [8]) = ($14 + [24])
	$5 = ($1 + [8])
	*($14 + [36]) = $5
	*($14 + [32]) = $1
	$8 = ($1 + [16])
	*($14 + [40]) = $8
	$4 = ($1 + [24])
	*($14 + [44]) = $4
	$7 = ($1 + [32])
	*($14 + [48]) = $7
	$6 = ($1 + [40])
	*($14 + [52]) = $6
	$9 = ($1 + [48])
	*($14 + [56]) = $9
	$10 = ($1 + [60])
	*($14 + [60]) = $10
	CALL $32(($14 + [32]), ($14 + [8]))
	$11 = *($14 + [24])
	if ( ($11 <= [513]) ){ goto $label$2 }
	$13 = CALL malloc($11)
	goto $label$1 
	
.LABEL $label$2
	$13 = ($13 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $13
	
.LABEL $label$1
	*($14 + [12]) = $13
	*($14 + [8]) = $13
	*($14 + [16]) = ($13 + $11)
	*($14 + [24]) = ($14 + [8])
	*($14 + [36]) = $5
	*($14 + [40]) = $8
	*($14 + [44]) = $4
	*($14 + [48]) = $7
	*($14 + [52]) = $6
	*($14 + [56]) = $9
	*($14 + [32]) = $1
	*($14 + [60]) = $10
	CALL $33(($14 + [32]), ($14 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $13, $11)
	if ( ($11 <= [513]) ){ goto $label$3 }
	CALL free($13)
	
.LABEL $label$3
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$4 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$4
	*([0] + [4]) = ($14 + [64])
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	*($1 + [8]) = *(*(*($0 + [4])))
	$2 = *($0)
	*(($12 = $11) + [24]) = [0]
	*($12 + [8]) = ($12 + [24])
	$3 = ($1 + [8])
	*($12 + [36]) = $3
	*($12 + [32]) = $1
	$4 = ($1 + [16])
	*($12 + [40]) = $4
	$5 = ($1 + [24])
	*($12 + [44]) = $5
	$6 = ($1 + [32])
	*($12 + [48]) = $6
	$7 = ($1 + [40])
	*($12 + [52]) = $7
	$8 = ($1 + [48])
	*($12 + [56]) = $8
	$9 = ($1 + [60])
	*($12 + [60]) = $9
	CALL $32(($12 + [32]), ($12 + [8]))
	$10 = *($12 + [24])
	if ( ($10 <= [513]) ){ goto $label$2 }
	$11 = CALL malloc($10)
	goto $label$1 
	
.LABEL $label$2
	$11 = ($11 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$1
	*($12 + [12]) = $11
	*($12 + [8]) = $11
	*($12 + [16]) = ($11 + $10)
	*($12 + [24]) = ($12 + [8])
	*($12 + [36]) = $3
	*($12 + [32]) = $1
	*($12 + [40]) = $4
	*($12 + [44]) = $5
	*($12 + [48]) = $6
	*($12 + [52]) = $7
	*($12 + [56]) = $8
	*($12 + [60]) = $9
	CALL $33(($12 + [32]), ($12 + [24]))
	*($1 + [132]) = CALL db_store_i64(*($2 + [8]), (int_64)7235159550573565312, *(*($0 + [8])), (int_64)1, $11, $10)
	if ( ($10 <= [513]) ){ goto $label$3 }
	CALL free($11)
	
.LABEL $label$3
	if ( ((uint_64)*($2 + [16]) > (uint_64)(int_64)1) ){ goto $label$4 }
	*(($2 + [16])) = (int_64)2
	
.LABEL $label$4
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $45 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)*(*($3)))
	CALL eosio_assert([1], [896])
	*(($3 = $12) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$4 = ($1 + [8])
	*($3 + [36]) = $4
	*($3 + [32]) = $1
	$5 = ($1 + [16])
	*($3 + [40]) = $5
	$6 = ($1 + [24])
	*($3 + [44]) = $6
	$7 = ($1 + [32])
	*($3 + [48]) = $7
	$8 = ($1 + [40])
	*($3 + [52]) = $8
	$9 = ($1 + [48])
	*($3 + [56]) = $9
	$10 = ($1 + [60])
	*($3 + [60]) = $10
	CALL $32(($3 + [32]), ($3 + [8]))
	$11 = *($3 + [24])
	if ( ($11 <= [513]) ){ goto $label$2 }
	$12 = CALL malloc($11)
	goto $label$1 
	
.LABEL $label$2
	$12 = ($12 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $12
	
.LABEL $label$1
	*($3 + [12]) = $12
	*($3 + [8]) = $12
	*($3 + [16]) = ($12 + $11)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $4
	*($3 + [40]) = $5
	*($3 + [44]) = $6
	*($3 + [48]) = $7
	*($3 + [52]) = $8
	*($3 + [56]) = $9
	*($3 + [32]) = $1
	*($3 + [60]) = $10
	CALL $33(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $12, $11)
	if ( ($11 <= [513]) ){ goto $label$3 }
	CALL free($12)
	
.LABEL $label$3
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$4 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [64])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1072])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $57([144])) + [56]) = [0]
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [128]) = $1
	CALL $46(($7 + [16]), $3)
	*($7 + [32]) = $3
	*($7 + [16]) = (int_64)1
	$4 = *($3 + [132])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = (int_64)1
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $40(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $58(*(($1 + [56])))
	
.LABEL $label$4
	CALL $58($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1072])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $57([56])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [32]) = [0]
	*($3 + [36]) = [0]
	*($3 + [40]) = [0]
	*($3 + [44]) = $1
	CALL $52(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [48])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $29(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $58(*(($3 + [40])))
	
.LABEL $label$4
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [12])) = $1
	CALL $58($1)
	
.LABEL $label$5
	CALL $58($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $61($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	$3 = [0]
	*((($6 + [56]) + [32])) = [0]
	*($6 + [72]) = (int_64)-1
	*($6 + [80]) = (int_64)0
	$4 = *($0)
	*($6 + [56]) = $4
	*($6 + [64]) = $4
	$2 = [0]
	$1 = CALL db_find_i64($4, $4, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $14(($6 + [56]), $1)
	CALL eosio_assert(((int_32)*($2 + [128]) == (int_32)($6 + [56])), [96])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($2 + [16]) == (int_64)1), [1136])
	*((($6 + [16]) + [32])) = [0]
	*($6 + [40]) = (int_64)0
	*($6 + [32]) = (int_64)-1
	$4 = *($0)
	*($6 + [16]) = $4
	*($6 + [24]) = $4
	$1 = CALL db_find_i64($4, $4, (int_64)-5003134530400288768, *($2))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = CALL $17(($6 + [16]), $1)
	CALL eosio_assert(((int_32)*($3 + [44]) == (int_32)($6 + [16])), [96])
	
.LABEL $label$2
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [1168])
	CALL eosio_assert(((int_64)(CASTING uint_64)(uint_32 ((int_32)(*(($3 + [12])) - *($3 + [8])) / (int_32)[24])) == (int_64)*($2 + [40])), [1216])
	$4 = *($0)
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [448])
	CALL $47(($6 + [56]), $2, $4, ($6 + [8]))
	$1 = *($6 + [40])
	if ( ($1 == 0) ){ goto $label$3 }
	$5 = ($6 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $58(*(($2 + [40])))
	
.LABEL $label$8
	$3 = *($2 + [8])
	if ( ($3 == 0) ){ goto $label$9 }
	*(($2 + [12])) = $3
	CALL $58($3)
	
.LABEL $label$9
	CALL $58($2)
	
.LABEL $label$7
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$6 }
	$2 = *(($6 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $1
	
.LABEL $label$4
	*($5) = $1
	CALL $58($2)
	
.LABEL $label$3
	$3 = *($6 + [80])
	if ( ($3 == 0) ){ goto $label$10 }
	$1 = ($6 + [84])
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$14 }
	if ( ((*($0 + [48]) & [1]) == 0) ){ goto $label$15 }
	CALL $58(*(($0 + [56])))
	
.LABEL $label$15
	CALL $58($0)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$13 }
	$2 = *(($6 + [80]))
	goto $label$11 
	
.LABEL $label$12
	$2 = $3
	
.LABEL $label$11
	*($1) = $3
	CALL $58($2)
	
.LABEL $label$10
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [128])
	*([0] + [4]) = $7
	*($7 + [120]) = $1
	*($7 + [112]) = $3
	CALL require_auth(*($0))
	*(($7 + [104])) = [0]
	*($7 + [88]) = (int_64)-1
	*($7 + [96]) = (int_64)0
	$3 = *($0)
	*($7 + [72]) = $3
	*($7 + [80]) = $3
	$6 = CALL $14(($7 + [72]), CALL $fimport$4($3, $3, (int_64)7235159550573565312, (int_64)1))
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)($7 + [72])), [96])
	*($7 + [68]) = $6
	$3 = *($6 + [8])
	*($7 + [64]) = ($7 + [72])
	CALL eosio_assert(((uint_64)*($7 + [120]) <= (uint_64)$3), [1280])
	CALL eosio_assert((uint_64)(*($7 + [112]) <= (int_64)101), [1312])
	$5 = *($2)
	if ( ($5 & [1]) ){ goto $label$2 }
	$5 = uint_32($5 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$5 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($5 <= [255]), [1344])
	CALL eosio_assert((int_64)(*($6 + [16]) == 0), [1376])
	$3 = *($0)
	$5 = *($7 + [68])
	*($7 + [32]) = $2
	*($7 + [36]) = $4
	$4 = [0]
	*($7 + [28]) = ($7 + [112])
	*($7 + [24]) = ($7 + [120])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [448])
	CALL $50(($7 + [72]), $5, $3, ($7 + [24]))
	*(($7 + [56])) = [0]
	*($7 + [48]) = (int_64)0
	*($7 + [40]) = (int_64)-1
	$3 = *($0)
	*($7 + [24]) = $3
	*($7 + [32]) = $3
	$6 = CALL db_find_i64($3, $3, (int_64)-5003134530400288768, *($6))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $17(($7 + [24]), $6) + [44]) == (int_32)($7 + [24])), [96])
	goto $label$3 
	
.LABEL $label$4
	$4 = [1]
	
.LABEL $label$3
	CALL eosio_assert($4, [1440])
	$3 = *($0)
	*($7 + [16]) = $2
	*($7 + [12]) = ($7 + [120])
	*($7 + [8]) = ($7 + [64])
	CALL $51($7, ($7 + [24]), $3, ($7 + [8]))
	$5 = *($7 + [48])
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = ($7 + [52])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$9 }
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $58(*(($0 + [40])))
	
.LABEL $label$10
	$2 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($0 + [12])) = $2
	CALL $58($2)
	
.LABEL $label$11
	CALL $58($0)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$8 }
	$0 = *(($7 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $5
	
.LABEL $label$6
	*($4) = $5
	CALL $58($0)
	
.LABEL $label$5
	$2 = *($7 + [96])
	if ( ($2 == 0) ){ goto $label$12 }
	$5 = ($7 + [100])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$17 }
	CALL $58(*(($6 + [56])))
	
.LABEL $label$17
	CALL $58($6)
	
.LABEL $label$16
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($7 + [96]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $2
	
.LABEL $label$13
	*($5) = $2
	CALL $58($0)
	
.LABEL $label$12
	*([0] + [4]) = ($7 + [128])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [160])
	*([0] + [4]) = $3
	*(($2 = $3) + [124]) = $0
	*($2 + [112]) = *($1)
	*($2 + [116]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = (int_64)0
	CALL memset(($2 + [40]), [0], [66])
	*($2 + [132]) = $1
	*($2 + [128]) = $1
	*($2 + [136]) = ($1 + $0)
	*($2 + [144]) = ($2 + [128])
	*($2 + [152]) = ($2 + [8])
	CALL $48(($2 + [152]), ($2 + [144]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [132]) = ($2 + [112])
	*($2 + [128]) = ($2 + [124])
	CALL $49(($2 + [128]), ($2 + [8]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $58(*(($2 + [24])))
	
.LABEL $label$5
	*([0] + [4]) = ($2 + [160])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$4 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$10 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$3 = ($3 + [165])
	goto $label$8 
	
.LABEL $label$10
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$6
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$5 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$4 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$11:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$12 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$3 = ($3 + [165])
	goto $label$13 
	
.LABEL $label$14
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$11 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [48]
	$7 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$20 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$3 = ($3 + [165])
	goto $label$18 
	
.LABEL $label$20
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$15 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$21 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$27 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$22 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$21 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$28:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$29 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$3 = ($3 + [165])
	goto $label$30 
	
.LABEL $label$31
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$29
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$28 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$2 }
	
.LABEL $label$21
	*($9 + [72]) = $1
	*($9 + [64]) = $0
	if ( ((int_64)$2 > (int_64)4222381386624925695) ){ goto $label$34 }
	if ( ((int_64)$2 == (int_64)-8173735356026322944) ){ goto $label$33 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($9 + [44]) = [0]
	*($9 + [40]) = [1]
	*($9 + [16 align=4]) = *($9 + [40])
	CALL $11(($9 + [64]), ($9 + [16]))
	goto $label$1 
	
.LABEL $label$34
	if ( ((int_64)$2 == (int_64)6111947644295184384) ){ goto $label$32 }
	if ( ((int_64)$2 != (int_64)4222381386624925696) ){ goto $label$1 }
	*($9 + [60]) = [0]
	*($9 + [56]) = [2]
	*($9) = *($9 + [56])
	CALL $7(($9 + [64]), $9)
	goto $label$1 
	
.LABEL $label$33
	*($9 + [36]) = [0]
	*($9 + [32]) = [3]
	*($9 + [24 align=4]) = *($9 + [32])
	CALL $13(($9 + [64]), ($9 + [24]))
	goto $label$1 
	
.LABEL $label$32
	*($9 + [52]) = [0]
	*($9 + [48]) = [4]
	*($9 + [8 align=4]) = *($9 + [48])
	CALL $9(($9 + [64]), ($9 + [8]))
	goto $label$1 
	
.LABEL $label$3
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [64]
	$7 = (int_64)0
	
.LOOP $label$35:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$36 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$38 }
	$3 = ($3 + [165])
	goto $label$37 
	
.LABEL $label$38
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$37
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$35 }
	CALL require_recipient($7)
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [64]
	$7 = (int_64)0
	
.LOOP $label$39:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$42 }
	$3 = ($3 + [165])
	goto $label$41 
	
.LABEL $label$42
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$41
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$40
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$39 }
	CALL require_recipient($7)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$5 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [960])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($8 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($7 + [12]) = $4
	*($7 + [8]) = $4
	*($7 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($5 = CALL $57([144])) + [56]) = [0]
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [128]) = $0
	*($7 + [24]) = ($7 + [8])
	*($7 + [36]) = ($5 + [8])
	*($7 + [32]) = $5
	*($7 + [40]) = ($5 + [16])
	*($7 + [44]) = ($5 + [24])
	*($7 + [48]) = ($5 + [32])
	*($7 + [52]) = ($5 + [40])
	*($7 + [56]) = ($5 + [48])
	*($7 + [60]) = ($5 + [60])
	CALL $39(($7 + [32]), ($7 + [24]))
	*($5 + [132]) = $1
	*($7 + [24]) = $5
	*($7 + [32]) = (int_64)1
	$6 = *($5 + [132])
	*($7 + [4]) = $6
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)1
	*($4 + [16]) = $6
	*($7 + [24]) = [0]
	*($4) = $5
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $40(($0 + [24]), ($7 + [24]), ($7 + [32]), ($7 + [4]))
	
.LABEL $label$8
	$4 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$10 }
	CALL $58(*(($4 + [56])))
	
.LABEL $label$10
	CALL $58($4)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [64])
	return $5
}

int_64 .FUNC $15 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1008]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1008]
	$10 = (int_64)0
	
.LOOP $label$5:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$6 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$2 = ($2 + [165])
	goto $label$7 
	
.LABEL $label$8
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$6
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$5 }
	*(($11 + [40])) = [0]
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	*($11 + [44]) = [0]
	*($11 + [16]) = $10
	*($11 + [8]) = $8
	$5 = [0]
	$2 = CALL db_find_i64($8, $10, (int_64)-5003134530400288768, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$9 }
	$5 = CALL $36(($11 + [8]), $2)
	CALL eosio_assert(((int_32)*($5 + [64]) == (int_32)($11 + [8])), [96])
	
.LABEL $label$9
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [1024])
	$7 = *($5 + [40])
	$3 = *($11 + [32])
	if ( ($3 == 0) ){ goto $label$10 }
	$4 = ($11 + [36])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$14 }
	CALL $58($2)
	
.LABEL $label$14
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($11 + [32]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $3
	
.LABEL $label$11
	*($4) = $3
	CALL $58($5)
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [48])
	return $7
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	$12 = *(*($3))
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)1)
	*($1 + [24]) = (int_64))(*($1 + [24]) - $12)
	CALL eosio_assert([1], [896])
	*(($3 = $13) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$6 = ($1 + [8])
	*($3 + [36]) = $6
	*($3 + [32]) = $1
	$7 = ($1 + [16])
	*($3 + [40]) = $7
	$4 = ($1 + [24])
	*($3 + [44]) = $4
	$8 = ($1 + [32])
	*($3 + [48]) = $8
	$5 = ($1 + [40])
	*($3 + [52]) = $5
	$9 = ($1 + [48])
	*($3 + [56]) = $9
	$10 = ($1 + [60])
	*($3 + [60]) = $10
	CALL $32(($3 + [32]), ($3 + [8]))
	$11 = *($3 + [24])
	if ( ($11 <= [513]) ){ goto $label$2 }
	$13 = CALL malloc($11)
	goto $label$1 
	
.LABEL $label$2
	$13 = ($13 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $13
	
.LABEL $label$1
	*($3 + [12]) = $13
	*($3 + [8]) = $13
	*($3 + [16]) = ($13 + $11)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $4
	*($3 + [48]) = $8
	*($3 + [52]) = $5
	*($3 + [56]) = $9
	*($3 + [32]) = $1
	*($3 + [60]) = $10
	CALL $33(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $13, $11)
	if ( ($11 <= [513]) ){ goto $label$3 }
	CALL free($13)
	
.LABEL $label$3
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$4 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [64])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [960])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $57([56])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [32]) = [0]
	*($6 + [36]) = [0]
	*($6 + [40]) = [0]
	*($6 + [44]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [80])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	$4 = CALL $27(($8 + [32]), ($6 + [8]))
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [80])
	CALL memcpy(($6 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $28($4, ($6 + [32]))
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [48])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $29(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $58(*(($4 + [40])))
	
.LABEL $label$10
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [12])) = $7
	CALL $58($7)
	
.LABEL $label$11
	CALL $58($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL require_auth($1)
	$5 = *($0 + [8])
	$1 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$6 }
	$6 = *($7)
	if ( ((uint_32)(($6 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$6 = ($6 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$6 = ( ($6 + [208]) ? [0] : ((($6 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$8 = ((int_64)$8 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$5 != (int_64)$9) ){ goto $label$7 }
	if ( ((int_64)*($3 + [8]) != (int_64)1397703940) ){ goto $label$7 }
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$7 }
	*(($11 + [56])) = [0]
	*($11 + [32]) = $2
	*($11 + [24]) = $2
	*($11 + [40]) = (int_64)-1
	*($11 + [48]) = (int_64)0
	$7 = CALL db_find_i64($2, $2, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$9 }
	$7 = CALL $14(($11 + [24]), $7)
	CALL eosio_assert(((int_32)*($7 + [128]) == (int_32)($11 + [24])), [96])
	$1 = *($0)
	*($11 + [8]) = $3
	CALL eosio_assert([1], [448])
	CALL $45(($11 + [24]), $7, $1, ($11 + [8]))
	$0 = *($11 + [48])
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = *($0)
	*($11 + [16]) = $3
	CALL $44(($11 + [8]), ($11 + [24]), $1, ($11 + [16]))
	$0 = *($11 + [48])
	if ( ($0 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	$3 = ($11 + [52])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$13 }
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$14 }
	CALL $58(*(($6 + [56])))
	
.LABEL $label$14
	CALL $58($6)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$7) ){ goto $label$12 }
	$7 = *(($11 + [48]))
	goto $label$10 
	
.LABEL $label$11
	$7 = $0
	
.LABEL $label$10
	*($3) = $0
	CALL $58($7)
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [64])
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1397703940
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [544])
	$3 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [608])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $42(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $43(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $58(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [400])
	*([0] + [4]) = $15
	CALL require_auth($1)
	$6 = [0]
	*(($15 + [208])) = [0]
	*($15 + [192]) = (int_64)-1
	*($15 + [200]) = (int_64)0
	$8 = *($0)
	*($15 + [176]) = $8
	*($15 + [184]) = $8
	$14 = CALL db_find_i64($8, $8, (int_64)7235159550573565312, (int_64)1)
	if ( ((int_32)$14 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $14(($15 + [176]), $14)
	CALL eosio_assert(((int_32)*($6 + [128]) == (int_32)($15 + [176])), [96])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($6 + [16]) == (int_64)1), [160])
	CALL eosio_assert((uint_64)(*($6 + [40]) <= *($6 + [32])), [224])
	CALL eosio_assert(((uint_64)CALL $15($0, $1) > (uint_64)(int_64)99999999), [304])
	*($15 + [168]) = (int_64)0
	if ( ((int_64)((int_64)*($6 + [40]) + (int_64)1) != (int_64)*($6 + [32])) ){ goto $label$3 }
	$10 = *($6 + [24])
	$8 = $10
	goto $label$2 
	
.LABEL $label$3
	CALL memcpy(($15 + [102]), ($6 + [60]), [66])
	CALL memcpy(($15 + [216]), ($15 + [102]), [66])
	CALL memcpy(($15 + [288]), ($15 + [216]), [66])
	*($15 + [360]) = $1
	CALL sha256(($15 + [288]), [80], ($15 + [16]))
	CALL eosio_assert([1], [384])
	$10 = *($6 + [24])
	$8 = ((uint_64)((int_64)((int_64)((int_64)((uint_64)(int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)((int_64)*($15 + [17]) + (int_64)*($15 + [16])) + (int_64)*($15 + [18])) + (int_64)*($15 + [19])) + (int_64)*($15 + [20])) + (int_64)*($15 + [21])) + (int_64)*($15 + [22])) + (int_64)*($15 + [23])) << (int_64)32) >> (int_64)32) % (uint_64)(int_64)9999) << (int_64)1) + (int_64)4) * (int_64)((uint_64)$10 / (uint_64)(int_64))(*(($6 + [32])) - *(($6 + [40]))))) / (uint_64)(int_64)10000)
	
.LABEL $label$2
	*($15 + [168]) = $8
	CALL eosio_assert(((uint_64)$8 <= (uint_64)$10), [416])
	$5 = [0]
	$8 = *($0)
	*($15 + [288]) = ($15 + [168])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [448])
	CALL $16(($15 + [176]), $6, $8, ($15 + [288]))
	*(($15 + [248])) = [0]
	*($15 + [232]) = (int_64)-1
	*($15 + [240]) = (int_64)0
	$8 = *($0)
	*($15 + [216]) = $8
	*($15 + [224]) = $8
	$6 = CALL db_find_i64($8, $8, (int_64)-5003134530400288768, *($6))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $17(($15 + [216]), $6)
	CALL eosio_assert(((int_32)*($5 + [44]) == (int_32)($15 + [216])), [96])
	*($15 + [92]) = $5
	*($15 + [88]) = ($15 + [216])
	$4 = (($15 + [88]) | [4])
	goto $label$4 
	
.LABEL $label$5
	*($15 + [92]) = [0]
	*($15 + [88]) = ($15 + [216])
	$4 = (($15 + [88]) | [4])
	
.LABEL $label$4
	$14 = [0]
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [496])
	$6 = *($4)
	if ( ((int_32)*(($6 + [12])) == (int_32)*($6 + [8])) ){ goto $label$6 }
	$8 = (int_64)0
	
.LOOP $label$7:
	CALL eosio_assert(((int_64)*((*($6 + [8]) + $14)) != (int_64)$1), [720])
	$14 = ($14 + [24])
	$6 = *($4)
	$8 = ((int_64)$8 + (int_64)1)
	if ( (uint_64)($8 <= (CASTING uint_64)(uint_32 ((int_32)(*(($6 + [12])) - *($6 + [8])) / (int_32)[24]))) ){ goto $label$7 }
	
.LABEL $label$6
	*($15 + [64]) = $1
	$8 = CALL current_time()
	*($15 + [80]) = *($15 + [168])
	*($15 + [72]) = ((int_64)((uint_64)$8 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	$6 = *($15 + [92])
	$8 = *($0)
	*($15 + [292]) = ($15 + [64])
	*($15 + [288]) = ($15 + [88])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [448])
	CALL $18(($15 + [216]), $6, $8, ($15 + [288]))
	CALL eosio_assert([1], [544])
	$8 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$14 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$14 = [0]
	
.LABEL $label$8
	CALL eosio_assert($14, [608])
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$2 = *($15 + [168])
	$9 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$18 }
	$14 = *($6)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$14 = ($14 + [165])
	goto $label$16 
	
.LABEL $label$18
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$13 }
	$3 = *($0)
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [640]
	$11 = (int_64)0
	
.LOOP $label$19:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$24 }
	$14 = *($6)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$14 = ($14 + [165])
	goto $label$22 
	
.LABEL $label$24
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$23
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$21
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$20
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$19 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$12 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$8 > (uint_64)(int_64)10) ){ goto $label$30 }
	$14 = *($6)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$14 = ($14 + [165])
	goto $label$28 
	
.LABEL $label$30
	$10 = (int_64)0
	if ( ((int_64)$8 == (int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$26
	$6 = ($6 + [1])
	$7 = ((int_64)$7 + (int_64)-5)
	$12 = ((int_64)$10 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$25 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [48]
	$13 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$36 }
	$14 = *($6)
	if ( ((uint_32)(($14 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$14 = ($14 + [165])
	goto $label$34 
	
.LABEL $label$36
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$14 = ( ($14 + [208]) ? [0] : ((($14 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $14) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$32
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$13 = ((int_64)$10 | (int_64)$13)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$31 }
	*(($15 + [8])) = [0]
	*($15) = (int_64)0
	$6 = CALL strlen([656])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$37 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$40 }
	*($15) = ($6 << [1])
	$14 = ($15 | [1])
	if ( $6 ){ goto $label$39 }
	goto $label$38 
	
.LABEL $label$40
	$4 = (($6 + [16]) & [-16])
	$14 = CALL $57($4)
	*($15) = ($4 | [1])
	*($15 + [8]) = $14
	*($15 + [4]) = $6
	
.LABEL $label$39
	CALL memcpy($14, [656], $6)
	
.LABEL $label$38
	*(($14 + $6)) = [0]
	*((($15 + [288]) + [24])) = (int_64)1397703940
	*((($15 + [288]) + [32])) = $9
	*($15 + [296]) = $1
	$6 = ($15 + [8])
	*(($15 + [336])) = *($6)
	*($15 + [288]) = *($0)
	*($15 + [304]) = $2
	*($15 + [328]) = *($15)
	*($15) = [0]
	*($15 + [4]) = [0]
	*($6) = [0]
	*($15 + [16]) = $12
	*($15 + [24]) = $13
	*($15 + [32]) = [0]
	*(($14 = ($15 + [36]))) = [0]
	*(($4 = (($15 + [16]) + [24]))) = [0]
	*(($6 = CALL $57([16]))) = $3
	*($6 + [8]) = $11
	*((($15 + [16]) + [32])) = [0]
	$0 = ($6 + [16])
	*($4) = $0
	*($14) = $0
	*($15 + [32]) = $6
	*($15 + [44]) = [0]
	*(($15 + [52])) = [0]
	$6 = *($15 + [328])
	$14 = ( *(($15 + [332])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($14 + [40])
	$8 = (CASTING uint_64)(uint_32 $14)
	$14 = ($15 + [44])
	
.LOOP $label$41:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$41 }
	if ( ($6 == 0) ){ goto $label$43 }
	CALL $19($14, $6)
	$14 = *(($15 + [48]))
	$6 = *(($15 + [44]))
	goto $label$42 
	
.LABEL $label$43
	$14 = [0]
	$6 = [0]
	
.LABEL $label$42
	*($15 + [372]) = $6
	*($15 + [368]) = $6
	*($15 + [376]) = $14
	*($15 + [384]) = ($15 + [368])
	*($15 + [392]) = ($15 + [288])
	CALL $20(($15 + [392]), ($15 + [384]))
	CALL $21(($15 + [368]), ($15 + [16]))
	$6 = *($15 + [368])
	CALL send_inline($6, (*($15 + [372]) - $6))
	$6 = *($15 + [368])
	if ( ($6 == 0) ){ goto $label$44 }
	*($15 + [372]) = $6
	CALL $58($6)
	
.LABEL $label$44
	$6 = *($15 + [44])
	if ( ($6 == 0) ){ goto $label$45 }
	*(($15 + [48])) = $6
	CALL $58($6)
	
.LABEL $label$45
	$6 = *($15 + [32])
	if ( ($6 == 0) ){ goto $label$46 }
	*(($15 + [36])) = $6
	CALL $58($6)
	
.LABEL $label$46
	if ( ((*(($15 + [328])) & [1]) == 0) ){ goto $label$47 }
	CALL $58(*(($15 + [336])))
	
.LABEL $label$47
	if ( ((*($15) & [1]) == 0) ){ goto $label$48 }
	CALL $58(*(($15 + [8])))
	
.LABEL $label$48
	$0 = *($15 + [240])
	if ( ($0 == 0) ){ goto $label$49 }
	$5 = ($15 + [244])
	$14 = *($5)
	if ( ((int_32)$14 == (int_32)$0) ){ goto $label$51 }
	
.LOOP $label$52:
	$14 = ($14 + [-24])
	$6 = *($14)
	*($14) = [0]
	if ( ($6 == 0) ){ goto $label$53 }
	if ( ((*($6 + [32]) & [1]) == 0) ){ goto $label$54 }
	CALL $58(*(($6 + [40])))
	
.LABEL $label$54
	$4 = *($6 + [8])
	if ( ($4 == 0) ){ goto $label$55 }
	*(($6 + [12])) = $4
	CALL $58($4)
	
.LABEL $label$55
	CALL $58($6)
	
.LABEL $label$53
	if ( ((int_32)$0 != (int_32)$14) ){ goto $label$52 }
	$6 = *(($15 + [240]))
	goto $label$50 
	
.LABEL $label$51
	$6 = $0
	
.LABEL $label$50
	*($5) = $0
	CALL $58($6)
	
.LABEL $label$49
	$4 = *($15 + [200])
	if ( ($4 == 0) ){ goto $label$56 }
	$0 = ($15 + [204])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$58 }
	
.LOOP $label$59:
	$6 = ($6 + [-24])
	$14 = *($6)
	*($6) = [0]
	if ( ($14 == 0) ){ goto $label$60 }
	if ( ((*($14 + [48]) & [1]) == 0) ){ goto $label$61 }
	CALL $58(*(($14 + [56])))
	
.LABEL $label$61
	CALL $58($14)
	
.LABEL $label$60
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$59 }
	$6 = *(($15 + [200]))
	goto $label$57 
	
.LABEL $label$58
	$6 = $4
	
.LABEL $label$57
	*($0) = $4
	CALL $58($6)
	
.LABEL $label$56
	*([0] + [4]) = ($15 + [400])
	return (unreachable)
	
.LABEL $label$37
	CALL $59($15)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [80])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [960])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $57([80])) + [64]) = $0
	CALL $37(($8 + [32]), $6)
	*($6 + [72]) = [-1]
	*($6 + [68]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [68])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $38(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $58($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [80])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [80])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [80])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [80])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [80])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [80])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [80])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [80])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [768])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($1 = *($1))) = (*($1) + [1])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [272])
	*([0] + [4]) = $6
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	$4 = *($2)
	$2 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$3 = *($1)
	$4 = *($3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $4
	$2 = *($2)
	$2 = ( *(($2 + [4])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	*($3) = ($2 + $4)
	
.LABEL $label$2
	$4 = *($0 + [28])
	*($6) = *($1)
	*($6 + [12]) = ($4 + [1])
	*($6 + [8]) = $4
	*($6 + [16]) = ($4 + [2])
	*($6 + [20]) = ($4 + [3])
	*($6 + [24]) = ($4 + [4])
	*($6 + [28]) = ($4 + [5])
	*($6 + [32]) = ($4 + [6])
	*($6 + [36]) = ($4 + [7])
	*($6 + [40]) = ($4 + [8])
	*($6 + [44]) = ($4 + [9])
	*($6 + [48]) = ($4 + [10])
	*($6 + [52]) = ($4 + [11])
	*($6 + [56]) = ($4 + [12])
	*($6 + [60]) = ($4 + [13])
	*($6 + [64]) = ($4 + [14])
	*($6 + [68]) = ($4 + [15])
	*($6 + [72]) = ($4 + [16])
	*($6 + [76]) = ($4 + [17])
	*($6 + [80]) = ($4 + [18])
	*($6 + [84]) = ($4 + [19])
	*($6 + [88]) = ($4 + [20])
	*($6 + [92]) = ($4 + [21])
	*($6 + [96]) = ($4 + [22])
	*($6 + [100]) = ($4 + [23])
	*($6 + [104]) = ($4 + [24])
	*($6 + [108]) = ($4 + [25])
	*($6 + [112]) = ($4 + [26])
	*($6 + [116]) = ($4 + [27])
	*($6 + [120]) = ($4 + [28])
	*($6 + [124]) = ($4 + [29])
	*($6 + [128]) = ($4 + [30])
	*($6 + [132]) = ($4 + [31])
	*($6 + [136]) = ($4 + [32])
	*($6 + [140]) = ($4 + [33])
	*($6 + [144]) = ($4 + [34])
	*($6 + [148]) = ($4 + [35])
	*($6 + [152]) = ($4 + [36])
	*($6 + [156]) = ($4 + [37])
	*($6 + [160]) = ($4 + [38])
	*($6 + [164]) = ($4 + [39])
	*($6 + [168]) = ($4 + [40])
	*($6 + [172]) = ($4 + [41])
	*($6 + [176]) = ($4 + [42])
	*($6 + [180]) = ($4 + [43])
	*($6 + [184]) = ($4 + [44])
	*($6 + [188]) = ($4 + [45])
	*($6 + [192]) = ($4 + [46])
	*($6 + [196]) = ($4 + [47])
	*($6 + [200]) = ($4 + [48])
	*($6 + [204]) = ($4 + [49])
	*($6 + [208]) = ($4 + [50])
	*($6 + [212]) = ($4 + [51])
	*($6 + [216]) = ($4 + [52])
	*($6 + [220]) = ($4 + [53])
	*($6 + [224]) = ($4 + [54])
	*($6 + [228]) = ($4 + [55])
	*($6 + [232]) = ($4 + [56])
	*($6 + [236]) = ($4 + [57])
	*($6 + [240]) = ($4 + [58])
	*($6 + [244]) = ($4 + [59])
	*($6 + [248]) = ($4 + [60])
	*($6 + [252]) = ($4 + [61])
	*($6 + [256]) = ($4 + [62])
	*($6 + [260]) = ($4 + [63])
	*($6 + [264]) = ($4 + [64])
	*($6 + [268]) = ($4 + [65])
	CALL $35(($6 + [8]), $6)
	*([0] + [4]) = ($6 + [272])
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $24(*($1), *($0 + [24]))
	$0 = *($0 + [28])
	*($4) = *($1)
	*($4 + [12]) = ($0 + [1])
	*($4 + [8]) = $0
	*($4 + [16]) = ($0 + [2])
	*($4 + [20]) = ($0 + [3])
	*($4 + [24]) = ($0 + [4])
	*($4 + [28]) = ($0 + [5])
	*($4 + [32]) = ($0 + [6])
	*($4 + [36]) = ($0 + [7])
	*($4 + [40]) = ($0 + [8])
	*($4 + [44]) = ($0 + [9])
	*($4 + [48]) = ($0 + [10])
	*($4 + [52]) = ($0 + [11])
	*($4 + [56]) = ($0 + [12])
	*($4 + [60]) = ($0 + [13])
	*($4 + [64]) = ($0 + [14])
	*($4 + [68]) = ($0 + [15])
	*($4 + [72]) = ($0 + [16])
	*($4 + [76]) = ($0 + [17])
	*($4 + [80]) = ($0 + [18])
	*($4 + [84]) = ($0 + [19])
	*($4 + [88]) = ($0 + [20])
	*($4 + [92]) = ($0 + [21])
	*($4 + [96]) = ($0 + [22])
	*($4 + [100]) = ($0 + [23])
	*($4 + [104]) = ($0 + [24])
	*($4 + [108]) = ($0 + [25])
	*($4 + [112]) = ($0 + [26])
	*($4 + [116]) = ($0 + [27])
	*($4 + [120]) = ($0 + [28])
	*($4 + [124]) = ($0 + [29])
	*($4 + [128]) = ($0 + [30])
	*($4 + [132]) = ($0 + [31])
	*($4 + [136]) = ($0 + [32])
	*($4 + [140]) = ($0 + [33])
	*($4 + [144]) = ($0 + [34])
	*($4 + [148]) = ($0 + [35])
	*($4 + [152]) = ($0 + [36])
	*($4 + [156]) = ($0 + [37])
	*($4 + [160]) = ($0 + [38])
	*($4 + [164]) = ($0 + [39])
	*($4 + [168]) = ($0 + [40])
	*($4 + [172]) = ($0 + [41])
	*($4 + [176]) = ($0 + [42])
	*($4 + [180]) = ($0 + [43])
	*($4 + [184]) = ($0 + [44])
	*($4 + [188]) = ($0 + [45])
	*($4 + [192]) = ($0 + [46])
	*($4 + [196]) = ($0 + [47])
	*($4 + [200]) = ($0 + [48])
	*($4 + [204]) = ($0 + [49])
	*($4 + [208]) = ($0 + [50])
	*($4 + [212]) = ($0 + [51])
	*($4 + [216]) = ($0 + [52])
	*($4 + [220]) = ($0 + [53])
	*($4 + [224]) = ($0 + [54])
	*($4 + [228]) = ($0 + [55])
	*($4 + [232]) = ($0 + [56])
	*($4 + [236]) = ($0 + [57])
	*($4 + [240]) = ($0 + [58])
	*($4 + [244]) = ($0 + [59])
	*($4 + [248]) = ($0 + [60])
	*($4 + [252]) = ($0 + [61])
	*($4 + [256]) = ($0 + [62])
	*($4 + [260]) = ($0 + [63])
	*($4 + [264]) = ($0 + [64])
	*($4 + [268]) = ($0 + [65])
	CALL $34(($4 + [8]), $4)
	*([0] + [4]) = ($4 + [272])
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [992])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $19($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [80])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $6) / (int_32)[24]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ((int_32)($6 - $5) / (int_32)[24])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$3 }
	$6 = [178956970]
	$2 = ((int_32)($2 - $5) / (int_32)[24])
	if ( ((uint_32)$2 > (uint_32)[89478484]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $57(((int_32)$6 * (int_32)[24]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = (*($0) + [24])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $63($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$6 * (int_32)[24]))
	$5 = ($2 + ((int_32)$3 * (int_32)[24]))
	$6 = $5
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [24])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 + ((int_32)((int_32)$2 / (int_32)[-24]) * (int_32)[24]))
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $58($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $58 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $59 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $57($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $58($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $63 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $57($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [64])
	*([0] + [4]) = $13
	CALL eosio_assert(((int_32)*($1 + [128]) == (int_32)$0), [784])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [832])
	*($1 + [8]) = (int_64))(*($1 + [8]) - *(*($3)))
	$12 = *(*($3))
	*($1 + [40]) = (int_64)0
	*($1 + [24]) = $12
	*($1 + [32]) = *(*($3 + [4]))
	$9 = ($1 + [48])
	CALL $60($9, *($3 + [8]))
	$4 = CALL memcpy(($1 + [60]), *($3 + [12]), [66])
	*($1 + [16]) = (int_64)1
	CALL eosio_assert([1], [896])
	*(($3 = $13) + [24]) = [0]
	*($3 + [8]) = ($3 + [24])
	$5 = ($1 + [8])
	*($3 + [36]) = $5
	*($3 + [32]) = $1
	$10 = ($1 + [16])
	*($3 + [40]) = $10
	$6 = ($1 + [24])
	*($3 + [44]) = $6
	$8 = ($1 + [32])
	*($3 + [48]) = $8
	$7 = ($1 + [40])
	*($3 + [52]) = $7
	*($3 + [56]) = $9
	*($3 + [60]) = $4
	CALL $32(($3 + [32]), ($3 + [8]))
	$11 = *($3 + [24])
	if ( ($11 <= [513]) ){ goto $label$2 }
	$13 = CALL malloc($11)
	goto $label$1 
	
.LABEL $label$2
	$13 = ($13 - (($11 + [15]) & [-16]))
	*([0] + [4]) = $13
	
.LABEL $label$1
	*($3 + [12]) = $13
	*($3 + [8]) = $13
	*($3 + [16]) = ($13 + $11)
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = $5
	*($3 + [40]) = $10
	*($3 + [44]) = $6
	*($3 + [48]) = $8
	*($3 + [52]) = $7
	*($3 + [56]) = $9
	*($3 + [32]) = $1
	*($3 + [60]) = $4
	CALL $33(($3 + [32]), ($3 + [24]))
	CALL db_update_i64(*($1 + [132]), $2, $13, $11)
	if ( ($11 <= [513]) ){ goto $label$3 }
	CALL free($13)
	
.LABEL $label$3
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)1) ){ goto $label$4 }
	*(($0 + [16])) = (int_64)2
	
.LABEL $label$4
	*([0] + [4]) = ($3 + [64])
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $57(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $63($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $58($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $58($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$8 = (*([0] + [4]) - [16])
	$12 = $8
	*([0] + [4]) = $8
	$11 = *($0 + [4])
	*($1) = *(*(*($11) + [4]))
	$2 = *($0)
	*($1 + [24]) = *(*($11 + [4]))
	$10 = [32]
	$4 = ($1 + [32])
	CALL $60($4, *($11 + [8]))
	$5 = ($1 + [8])
	$3 = ($1 + [24])
	$6 = *($1 + [8])
	$11 = *(($1 + [12]))
	$7 = ($11 - $6)
	$9 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[24]))
	
.LOOP $label$1:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$11) ){ goto $label$3 }
	$11 = ($7 + [-24])
	$10 = (($11 - ((uint_32)$11 % (uint_32)[24])) + $10)
	goto $label$2 
	
.LABEL $label$3
	$10 = ($10 + [-24])
	
.LABEL $label$2
	$11 = *(($1 + [32]))
	$11 = ( *(($1 + [36])) ? uint_32($11 >> [1]) : ($11 & [1]) )
	$10 = (($11 + $10) + [8])
	$9 = (CASTING uint_64)(uint_32 $11)
	
.LOOP $label$4:
	$10 = ($10 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ($10 <= [513]) ){ goto $label$6 }
	$11 = CALL malloc($10)
	goto $label$5 
	
.LABEL $label$6
	$11 = ($8 - (($10 + [15]) & [-16]))
	*([0] + [4]) = $11
	
.LABEL $label$5
	*($12) = $11
	*($12 + [8]) = ($11 + $10)
	CALL eosio_assert(((int_32)$10 > (int_32)[7]), [768])
	CALL memcpy($11, $1, [8])
	*($12 + [4]) = ($11 + [8])
	$8 = CALL $26($12, $5)
	CALL eosio_assert(((int_32)(*($8 + [8]) - *($8 + [4])) > (int_32)[7]), [768])
	CALL memcpy(*($8 + [4]), $3, [8])
	*($8 + [4]) = (*($8 + [4]) + [8])
	CALL $24($8, $4)
	$9 = *($1)
	*($1 + [48]) = CALL db_store_i64(*($2 + [8]), (int_64)-5003134530400288768, *(*($0 + [8])), $9, $11, $10)
	if ( ($10 <= [513]) ){ goto $label$7 }
	CALL free($11)
	
.LABEL $label$7
	if ( (uint_64)($9 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $54([1480], $0)
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $55($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9888])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $55 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9974]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9976])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9974]) = [1]
	$7 = ($7 << [16])
	*([0] + [9976]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9976])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9976]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9974]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9974]) = [1]
	$3 = ($3 << [16])
	*([0] + [9976]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9976])
	
.LABEL $label$8
	*([0] + [9976]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9864])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9672]
	$1 = (((int_32)$2 * (int_32)[12]) + [9672])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9980])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}