(data (i32.const 8192) "charge\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8208) "eosio.stake\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8306) "Parameters must be separated with space\00")
(data (i32.const 8346) "days must be number\00stoul\00")
(data (i32.const 8372) "Length of days should be less than 2\00")
(data (i32.const 8409) "Days should be between 1 and 30\00")
(data (i32.const 8441) "Length of account name should be less than 12\00")
(data (i32.const 8487) "cpu\00")
(data (i32.const 8491) "net\00")
(data (i32.const 8495) "type must be cpu or net\00")
(data (i32.const 8519) "Length of referral name should be less than 12\00")
(data (i32.const 8566) "cpubankeosio\00")
(data (i32.const 8579) "liebirentcpu\00")
(data (i32.const 8592) "eoscheapcpu1\00")
(data (i32.const 8605) "eosio.token\00")
(data (i32.const 8617) "transfer\00")
(data (i32.const 8626) "referral fee\00")
(data (i32.const 8639) "cpubankstake only accepts CORE\00")
(data (i32.const 8670) "Invalid token transfer\00")
(data (i32.const 8693) "Quantity must be positive\00")
(data (i32.const 8719) "bankreserves\00")
(data (i32.const 8732) "rent amount should be more than 10 EOS\00")
(data (i32.const 8771) "distribute\00: no conversion\00")
(data (i32.const 8798) "stakechanne1\00: out of range\00")
(data (i32.const 8826) "delegatebw\00")
(data (i32.const 8837) "undelegatebw\00")
(data (i32.const 8850) "divide by zero\00")
(data (i32.const 8865) "signed division overflow\00")
(data (i32.const 8890) "multiplication overflow\00")
(data (i32.const 8914) "multiplication underflow\00")
(data (i32.const 8939) "attempt to subtract asset with different symbol\00")
(data (i32.const 8987) "subtraction underflow\00")
(data (i32.const 9009) "subtraction overflow\00")
(data (i32.const 9030) "write\00")
(data (i32.const 9036) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9087) "error reading iterator\00")
(data (i32.const 9110) "read\00")
(data (i32.const 9115) "cannot create objects in table of another contract\00")
(data (i32.const 9166) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9215) "invalid symbol name\00")
(data (i32.const 9235) "order not found\00")
(data (i32.const 9251) "now should be expired\00")
(data (i32.const 9273) "advance pay time should be positive\00")
(data (i32.const 9309) "advance pay time should be less than rent duration\00")
(data (i32.const 9360) "cannot increment end iterator\00")
(data (i32.const 9390) "cannot pass end iterator to erase\00")
(data (i32.const 9424) "object passed to erase is not in multi_index\00")
(data (i32.const 9469) "cannot erase objects in table of another contract\00")
(data (i32.const 9519) "attempt to remove object that was not in multi_index\00")
(data (i32.const 9572) "cannot pass end iterator to modify\00")
(data (i32.const 9607) "object passed to modify is not in multi_index\00")
(data (i32.const 9653) "cannot modify objects in table of another contract\00")
(data (i32.const 9704) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9763) "attempt to add asset with different symbol\00")
(data (i32.const 9806) "addition underflow\00")
(data (i32.const 9825) "addition overflow\00")
(data (i32.const 9843) "1day apr should be positive\00")
(data (i32.const 9871) "7day apr should be positive\00")
(data (i32.const 9899) "singleton does not exist\00")
(data (i32.const 9924) "get\00")
(data (i32.const 9928) "next primary key in table is at autoincrement limit\00")
(data (i32.const 9980) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 10034) "cannot decrement iterator at beginning of table\00")
(data (i32.const 18512) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "current_time" (func $fimport$0 (result i64)))
(import "env" "require_auth2" (func $fimport$1 (param i64 i64)))
(import "env" "eosio_assert" (func $fimport$2 (param i32 i32)))
(import "env" "__multi3" (func $fimport$3 (param i32 i64 i64 i64 i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$5 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$7 (result i64)))
(import "env" "memset" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$10 (param i64)))
(import "env" "eosio_exit" (func $fimport$11 (param i32)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$15 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_upperbound" (func $fimport$16 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$17 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$18 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_next" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$21 (param i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "db_idx64_update" (func $fimport$23 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx64_store" (func $fimport$25 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$27 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$28))
(import "env" "memmove" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$31 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$35 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$36 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$37 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$40 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$41 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$42 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$43 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$44 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$46 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$47 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$48 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $28))
(export "_ZdlPv" (func $65))
(export "_Znwj" (func $63))
(export "_Znaj" (func $64))
(export "_ZdaPv" (func $66))
(table $0 6 6 anyfunc)
(elem (i32.const 1) $1 $27 $22 $23 $25)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18769))
(global $global$2 i32 (i32.const 18769))


void .FUNC $98 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18488])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18296]
	$3 = (((int_32)$1 * (int_32)[12]) + [18296])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $94 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $95 (int_32 $0)
{
	return CALL $96([10104], $0)
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $97($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8220])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10096]) == 0) ){ goto $label$2 }
	$2 = *([0] + [10100])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [10096]) = [1]
	$2 = ($2 << [16])
	*([0] + [10100]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10100])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [10100]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [10096]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [10096]) = [1]
	$3 = ($3 << [16])
	*([0] + [10100]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10100])
	
.LABEL $label$10
	*([0] + [10100]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_64 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $89($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $84()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $89($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18513]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $88($0, (int_64)0)
	*(CALL $84()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $89($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $89($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $89($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $89($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18513])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $89($0)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $89($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8199]))
	$8 = (int_64)0
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $89($0)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $89($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18513]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $88($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18513]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18513]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $89($0) + [18513]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $84()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $84()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $84()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_32 .FUNC $91 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $88($3, (int_64)0)
	$4 = CALL $90($3, $2, [1], (int_64)4294967295)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9030])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9030])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9030])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [56])
	if ( (CALL $93(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [72])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-6497942333781180416, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [72]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $93((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [76]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-6497942333781180415, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [76])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((int_32)(*($3 + [8]) - $4) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($2 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $0, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [9115])
	*(($5 = CALL _Znwj([48])) + [32]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	*(($7 = ($5 + [16]))) = *(($3 + [16]))
	*(($8 = ($5 + [24]))) = *(($3 + [24]))
	*($4 + [48]) = ($4 + [32])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = $6
	*($4 + [64]) = $5
	*($4 + [72]) = $7
	*($4 + [76]) = $8
	CALL $43(($4 + [64]), ($4 + [56]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, (int_64)4982871454518345728, $4, [32])
	*($5 + [36]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	*($4 + [64]) = $5
	*($4) = (int_64)4982871454518345728
	*($4 + [40]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871454518345728
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $44(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9087])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $95($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $98($4)
	
.LABEL $label$6
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $45(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)4982871454518345728
	*($3 + [4]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)4982871454518345728
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $44(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9110])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($0, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($0 + [16]) = (int_64)0
	*(($4 = ($0 + [24]))) = (int_64)1397703940
	CALL eosio_assert([1], [9166])
	$5 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $6
	$7 = [1]
	$8 = $4
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9215])
	*($0 + [64]) = $1
	*($3 + [8]) = *($2 + [4])
	*($3 + [20]) = ($0 + [8])
	*($3 + [16]) = $0
	*($3 + [24]) = ($0 + [16])
	*($3 + [28]) = ($0 + [32])
	*($3 + [32]) = ($0 + [40])
	*($3 + [36]) = ($0 + [48])
	*($3 + [40]) = ($0 + [56])
	CALL $47(($3 + [16]), ($3 + [8]))
	*($0 + [68]) = *(*($2 + [8]))
	*($0 + [72 align=4]) = (int_64)-1
	$global$0 = ($3 + [48])
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9087])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $95($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $98($4)
	
.LABEL $label$6
	$5 = CALL _Znwj([152])
	CALL $52($5)
	*($5 + [136]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	*($3 + [44]) = ($5 + [48])
	*($3 + [48]) = ($5 + [56])
	*($3 + [52]) = ($5 + [64])
	*($3 + [56]) = ($5 + [72])
	*($3 + [60]) = ($5 + [80])
	*($3 + [64]) = ($5 + [96])
	*($3 + [68]) = ($5 + [112])
	*($3 + [72]) = ($5 + [120])
	CALL $53(($3 + [32]), ($3 + [24]))
	*($5 + [140]) = $1
	*($3 + [24]) = $5
	*($3 + [32]) = (int_64)6820297015373594624
	*($3 + [4]) = $1
	$2 = ($0 + [28])
	$4 = *($2)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = (int_64)6820297015373594624
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($2) = ($4 + [24])
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $54(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$7
	$4 = *($1 + [120])
	if ( ($4 == 0) ){ goto $label$10 }
	*(($1 + [124])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	CALL _ZdlPv($1)
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *(($1 + [28]))
	if ( ((int_32)$2 == (int_32)*($1 + [24])) ){ goto $label$2 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [136]) == (int_32)$1), [9036])
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	$3 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)6820297015373594624, (int_64)6820297015373594624)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$2 = CALL $8($1, $3)
	CALL eosio_assert(((int_32)*($2 + [136]) == (int_32)$1), [9036])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [9899])
	*(($1 = CALL memcpy($0, $2, [120])) + [120 align=4]) = (int_64)0
	*(($1 + [128])) = [0]
	$0 = (*(($2 + [124])) - *($2 + [120]))
	$3 = ((int_32)$0 / (int_32)[40])
	if ( ($0 == 0) ){ goto $label$4 }
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$3 }
	$0 = CALL _Znwj($0)
	*(($1 + [120])) = $0
	*(($1 + [128])) = ($0 + ((int_32)$3 * (int_32)[40]))
	*(($1 = ($1 + [124]))) = $0
	$3 = *(($2 + [120]))
	$2 = (*(($2 + [124])) - $3)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($0, $3, $2)
	*($1) = (*($1) + ((int_32)((uint_32)$2 / (uint_32)[40]) * (int_32)[40]))
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $81(($1 + [120]))
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $81($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[1]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [26]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
}

void .FUNC $4 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [48])
	$global$0 = $5
	$6 = [0]
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	*($5 + [16]) = $2
	*($5 + [8]) = $3
	$7 = CALL db_find_i64($3, $2, (int_64)3607749779137757184, $4)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL $14(($5 + [8]), $7)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)($5 + [8])), [9036])
	*(($0 + [8])) = *(($6 + [8]))
	*($0) = *($6)
	$7 = *($5 + [32])
	if ( ($7 == 0) ){ goto $label$3 }
	$8 = ($5 + [36])
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$5:
	$6 = ($6 + [-24])
	$0 = *($6)
	*($6) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$5 }
	$6 = *(($5 + [32]))
	goto $label$1 
	
.LABEL $label$4
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9166])
	$3 = (int_64)5459781
	
.LOOP $label$8:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $2
	$8 = [1]
	$0 = $6
	$6 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = $2
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$0 = ((int_32)$6 < (int_32)[6])
	$7 = ($6 + [1])
	$6 = $7
	if ( $0 ){ goto $label$10 }
	$8 = [1]
	$6 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$7
	CALL eosio_assert($8, [9215])
	
.LABEL $label$3
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$2
	$6 = $7
	
.LABEL $label$1
	*($8) = $7
	CALL _ZdlPv($6)
	$global$0 = ($5 + [48])
}

void .FUNC $5 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *(($1 + [28]))
	if ( ((int_32)$5 == (int_32)*($1 + [24])) ){ goto $label$3 }
	$5 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$1), [9036])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $41($1, $5)
	CALL eosio_assert(((int_32)*($5 + [32]) == (int_32)$1), [9036])
	
.LABEL $label$2
	*($0) = *($5)
	*(($0 + [24])) = *(($5 + [24]))
	*(($0 + [16])) = *(($5 + [16]))
	*(($0 + [8])) = *(($5 + [8]))
	$global$0 = ($4 + [16])
	return 
	
.LABEL $label$1
	*($4 + [8]) = $3
	CALL $42($4, $1, $2, ($4 + [8]))
	$1 = *($4 + [4])
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [24])) = *(($1 + [24]))
	$global$0 = ($4 + [16])
}

int_32 .FUNC $2 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $6($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $13(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $6($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9030])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9030])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $39(CALL $38($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	float_64 $24
	float_64 $25
	int_64 $26
	int_64 $27
	$5 = ($global$0 - [432])
	$global$0 = $5
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$2 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$2 }
	$8 = *($4)
	$7 = CALL $94([8192])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$3 }
	if ( (CALL $74($4, [0], [-1], [8192], $7) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = (int_64)0
	$9 = (int_64)59
	$8 = [8208]
	$10 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$9 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$9
	$6 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$5
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$10 = ((int_64)$6 | (int_64)$10)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$4 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$2 }
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$15 }
	$12 = ($4 + [1])
	$7 = uint_32($11 >> [1])
	if ( ($7 == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$12 = *($4 + [8])
	$7 = *(($4 + [4]))
	if ( $7 ){ goto $label$13 }
	
.LABEL $label$14
	$8 = $12
	$7 = [1]
	if ( (($11 & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$11 = ($12 + $7)
	$8 = $12
	
.LOOP $label$17:
	if ( (CALL $83(*($8)) == 0) ){ goto $label$16 }
	$8 = ($8 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$17 }
	$8 = $11
	
.LABEL $label$16
	$7 = [1]
	if ( (*($4) & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	$7 = ($4 + $7)
	goto $label$10 
	
.LABEL $label$11
	$7 = *($4 + [8])
	
.LABEL $label$10
	CALL $72($4, ($12 - $7), ($8 - $12))
	$8 = *($4)
	if ( ($8 & [1]) ){ goto $label$24 }
	$13 = ($4 + [1])
	$8 = ($13 + uint_32($8 >> [1]))
	if ( ((int_32)$8 != (int_32)$13) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$13 = *($4 + [8])
	$8 = ($13 + *(($4 + [4])))
	if ( ((int_32)$8 == (int_32)$13) ){ goto $label$22 }
	
.LABEL $label$23
	if ( (CALL $83(*(($8 + [-1]))) == 0) ){ goto $label$22 }
	$12 = ($13 + [1])
	
.LOOP $label$25:
	if ( ((int_32)$12 == (int_32)$8) ){ goto $label$21 }
	$7 = ($8 + [-2])
	$11 = ($8 + [-1])
	$8 = $11
	if ( CALL $83(*($7)) ){ goto $label$25 }
	$8 = $11
	
.LABEL $label$22
	$7 = [1]
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$8 = $13
	$7 = [1]
	$11 = *($4)
	if ( (($11 & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$20
	$12 = *($4 + [8])
	$7 = ($12 + *(($4 + [4])))
	goto $label$18 
	
.LABEL $label$19
	$12 = ($4 + $7)
	$7 = ($12 + uint_32($11 >> $7))
	
.LABEL $label$18
	CALL $72($4, ($8 - $12), ($7 - $8))
	$7 = [0]
	$14 = CALL $73($4, [32], [0])
	CALL eosio_assert(((int_32)$14 != (int_32)[-1]), [8306])
	$15 = ($14 + [1])
	$16 = CALL $73($4, [32], $15)
	CALL eosio_assert(((int_32)$16 != (int_32)[-1]), [8306])
	$17 = ($16 + [1])
	$18 = CALL $73($4, [32], $17)
	$12 = *($5 + [400])
	$11 = ($12 & [1])
	$20 = ($13 + [1])
	$13 = CALL $69(($5 + [400]), $4, [0], $14, $4)
	$19 = *($13 + [8])
	$8 = ( $19 ? $20 : $11 )
	$22 = uint_32($12 >> [1])
	$21 = *($13 + [4])
	$12 = ( $21 ? $22 : $11 )
	if ( ($12 == 0) ){ goto $label$26 }
	$11 = ($8 + $12)
	
.LOOP $label$28:
	if ( (CALL $82(*($8)) == 0) ){ goto $label$27 }
	$8 = ($8 + [1])
	$12 = ($12 + [-1])
	if ( $12 ){ goto $label$28 }
	$8 = $11
	
.LABEL $label$27
	$12 = *($5 + [400])
	$22 = uint_32($12 >> [1])
	$11 = ($12 & [1])
	$21 = *(($13 + [4]))
	$19 = *(($13 + [8]))
	
.LABEL $label$26
	CALL eosio_assert(((int_32)$8 == (int_32)(( $19 ? $20 : $11 ) + ( $21 ? $22 : $11 ))), [8346])
	$8 = *($5 + [400])
	CALL eosio_assert((( *(($13 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [3]), [8372])
	$21 = CALL $77($13, [0], [10])
	$22 = ($21 & [65535])
	CALL eosio_assert((($22 + [-1]) <= [30]), [8409])
	$8 = *($5 + [384])
	$19 = CALL $69(($5 + [384]), $4, $15, ($16 + ((int_32)$14 ^ (int_32)[-1])), $4)
	CALL eosio_assert((( *($19 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) ) <= [13]), [8441])
	$8 = ( *($19 + [8]) ? ($19 + [1]) : (*($5 + [384]) & [1]) )
	
.LOOP $label$29:
	$12 = ($8 + $7)
	$11 = ($7 + [1])
	$7 = $11
	if ( *($12) ){ goto $label$29 }
	$23 = (CASTING uint_64)(uint_32 ($11 + [-1]))
	$2 = (int_64)0
	$6 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$30:
	$9 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$23) ){ goto $label$31 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$7 = ($7 + [-91])
	goto $label$32 
	
.LABEL $label$33
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$35 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$34 
	
.LABEL $label$35
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$34
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$30 }
	*($5 + [376]) = $10
	if ( ((int_32)$18 == (int_32)[-1]) ){ goto $label$37 }
	$14 = CALL $69(($5 + [176]), $4, $17, ($18 + ((int_32)$16 ^ (int_32)[-1])), $4)
	$8 = [1]
	$7 = *($5 + [176])
	$12 = CALL $94([8487])
	if ( ((int_32)$12 != (int_32)( *($14 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$39 }
	if ( (CALL $74($14, [0], [-1], [8487], $12) == 0) ){ goto $label$38 }
	
.LABEL $label$39
	$7 = CALL $94([8491])
	$8 = *($5 + [176])
	$12 = ($8 & [1])
	$11 = uint_32($8 >> [1])
	$8 = [0]
	if ( ((int_32)$7 != (int_32)( *(($14 + [4])) ? $11 : $12 )) ){ goto $label$38 }
	$8 = (CALL $74($14, [0], [-1], [8491], $7) == 0)
	
.LABEL $label$38
	CALL eosio_assert($8, [8495])
	$7 = [0]
	$16 = [0]
	$8 = *($5 + [176])
	$12 = CALL $94([8487])
	if ( ((int_32)$12 != (int_32)( *(($14 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$40 }
	$16 = (CALL $74($14, [0], [-1], [8487], $12) == 0)
	
.LABEL $label$40
	$12 = *($5 + [48])
	$8 = CALL $69(($5 + [48]), $4, ($18 + [1]), [-1], $4)
	CALL eosio_assert((( *($8 + [4]) ? uint_32($12 >> [1]) : ($12 & [1]) ) <= [13]), [8519])
	$4 = (*($5 + [48]) & [1])
	$15 = *($8 + [8])
	$8 = ( $15 ? ($8 + [1]) : $4 )
	
.LOOP $label$41:
	$12 = ($8 + $7)
	$11 = ($7 + [1])
	$7 = $11
	if ( *($12) ){ goto $label$41 }
	$10 = (CASTING uint_64)(uint_32 ($11 + [-1]))
	$2 = (int_64)0
	$6 = (int_64)59
	$23 = (int_64)0
	
.LOOP $label$42:
	$9 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$10) ){ goto $label$43 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$7 = ($7 + [-91])
	goto $label$44 
	
.LABEL $label$45
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$47 }
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	goto $label$46 
	
.LABEL $label$47
	$9 = ((int_64)$9 & (int_64)15)
	
.LABEL $label$46
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$23 = ((int_64)$9 | (int_64)$23)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$42 }
	if ( ($4 == 0) ){ goto $label$48 }
	CALL _ZdlPv($15)
	
.LABEL $label$48
	if ( ((*($5 + [176]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*($14 + [8]))
	goto $label$36 
	
.LABEL $label$37
	$8 = CALL $69(($5 + [176]), $4, $17, [-1], $4)
	$7 = [1]
	$12 = *($5 + [176])
	$11 = CALL $94([8487])
	if ( ((int_32)$11 != (int_32)( *($8 + [4]) ? uint_32($12 >> [1]) : ($12 & [1]) )) ){ goto $label$50 }
	if ( (CALL $74($8, [0], [-1], [8487], $11) == 0) ){ goto $label$49 }
	
.LABEL $label$50
	$12 = CALL $94([8491])
	$7 = *($5 + [176])
	$11 = ($7 & [1])
	$4 = uint_32($7 >> [1])
	$7 = [0]
	if ( ((int_32)$12 != (int_32)( *(($8 + [4])) ? $4 : $11 )) ){ goto $label$49 }
	$7 = (CALL $74($8, [0], [-1], [8491], $12) == 0)
	
.LABEL $label$49
	CALL eosio_assert($7, [8495])
	$16 = [0]
	$7 = ($7 & [1])
	$7 = *($5 + [176])
	$12 = CALL $94([8487])
	if ( ((int_32)$12 != (int_32)( *(($8 + [4])) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$51 }
	$16 = (CALL $74($8, [0], [-1], [8487], $12) == 0)
	$7 = (*($5 + [176]) & [1])
	
.LABEL $label$51
	if ( ($7 == 0) ){ goto $label$52 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$52
	
.LABEL $label$36
	$11 = ((int_32)$16 ^ (int_32)[1])
	$2 = (int_64)0
	$6 = (int_64)59
	$8 = [8566]
	$10 = (int_64)0
	
.LOOP $label$53:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$54 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$7 = ($7 + [-91])
	goto $label$55 
	
.LABEL $label$56
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$54
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$53 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$57 }
	$2 = (int_64)0
	$6 = (int_64)59
	$8 = [8579]
	$10 = (int_64)0
	
.LOOP $label$58:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$59 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$7 = ($7 + [-91])
	goto $label$60 
	
.LABEL $label$61
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$59
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$58 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$57 }
	$2 = (int_64)0
	$6 = (int_64)59
	$8 = [8592]
	$10 = (int_64)0
	
.LOOP $label$62:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$63 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$65 }
	$7 = ($7 + [-91])
	goto $label$64 
	
.LABEL $label$65
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$64
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$63
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$62 }
	if ( ((int_64)$10 == (int_64)$1) ){ goto $label$57 }
	$9 = *($3)
	CALL __multi3(($5 + [16]), $9, (int_64)$9 >> (int_64)63), (int_64)666, (int_64)0)
	$26 = *($3 + [8])
	$2 = *(($5 + [24]))
	$6 = *($5 + [16])
	CALL eosio_assert(( (uint_64)($6 <= (int_64)4611686018427387904) ? ((int_64)$2 < (int_64)0) : (int_64)($2 == 0) ), [8890])
	CALL eosio_assert(( ((uint_64)$6 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$2 > (int_64)-1) : ((int_64)$2 == (int_64)-1) ), [8914])
	CALL eosio_assert([1], [8850])
	CALL eosio_assert([1], [8865])
	CALL eosio_assert([1], [8939])
	$2 = ((int_64)$6 / (int_64)10000)
	$27 = ( $2 ? (int_64)1000 : ((int_64)$2 < (int_64)1000) )
	$2 = (int_64)
	*($3) = $2($9 - $27))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [8987])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [9009])
	if ( ((int_32)$18 == (int_32)[-1]) ){ goto $label$57 }
	if ( ((int_64)$6 < (int_64)10000) ){ goto $label$57 }
	$6 = *($0)
	$2 = (int_64)6
	
.LOOP $label$66:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$66 }
	*($5 + [120]) = (int_64)3617214756542218240
	*($5 + [112]) = $6
	$2 = (int_64)0
	$9 = (int_64)59
	$8 = [8605]
	$10 = (int_64)0
	
.LOOP $label$67:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$72 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$71 }
	$7 = ($7 + [-91])
	goto $label$70 
	
.LABEL $label$72
	$6 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$69 }
	goto $label$68 
	
.LABEL $label$71
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$70
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$69
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$68
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$10 = ((int_64)$6 | (int_64)$10)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$67 }
	$2 = (int_64)0
	$9 = (int_64)59
	$8 = [8617]
	$1 = (int_64)0
	
.LOOP $label$73:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$78 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$77 }
	$7 = ($7 + [-91])
	goto $label$76 
	
.LABEL $label$78
	$6 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$77
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$76
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$75
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$74
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$6 | (int_64)$1)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$73 }
	*(($5 + [368])) = [0]
	*($5 + [360]) = (int_64)0
	$8 = CALL $94([8626])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$79 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$82 }
	*($5 + [360]) = ($8 << [1])
	$7 = (($5 + [360]) | [1])
	if ( $8 ){ goto $label$81 }
	goto $label$80 
	
.LABEL $label$82
	$12 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($12)
	*($5 + [360]) = ($12 | [1])
	*($5 + [368]) = $7
	*($5 + [364]) = $8
	
.LABEL $label$81
	CALL memcpy($7, [8626], $8)
	
.LABEL $label$80
	*(($7 + $8)) = [0]
	*(($5 + [200])) = $26
	$8 = ($5 + [368])
	*(($5 + [216])) = *($8)
	*($8) = [0]
	*($5 + [184]) = $23
	*($5 + [192]) = $27
	*($5 + [176]) = *($0)
	*($5 + [208]) = *($5 + [360])
	*($5 + [360]) = (int_64)0
	$8 = CALL $2(($5 + [48]), ($5 + [112]), $10, $1, ($5 + [176]))
	CALL $3(($5 + [328]), $8)
	$7 = *($5 + [328])
	CALL send_inline($7, (*($5 + [332]) - $7))
	$7 = *($5 + [328])
	if ( ($7 == 0) ){ goto $label$83 }
	*($5 + [332]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$83
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$84 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$84
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$85 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$85
	if ( ((*(($5 + [208])) & [1]) == 0) ){ goto $label$86 }
	CALL _ZdlPv(*(($5 + [216])))
	
.LABEL $label$86
	if ( ((*($5 + [360]) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*(($5 + [368])))
	goto $label$57 
	
.LABEL $label$79
	CALL $67(($5 + [360]))
	
.LABEL $label$57
	$2 = *($3 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)1397703940), [8639])
	$7 = [0]
	$1 = *($3)
	if ( ((uint_64)((int_64)$1 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$87 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$89:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$88 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$90 }
	$2 = $6
	$7 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$90
	$2 = $6
	
.LOOP $label$91:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$88 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $7 ){ goto $label$91 }
	$7 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$89 }
	goto $label$87 
	
.LABEL $label$88
	$7 = [0]
	
.LABEL $label$87
	CALL eosio_assert($7, [8670])
	CALL eosio_assert(((int_64)$1 > (int_64)19), [8693])
	$2 = (int_64)0
	$6 = (int_64)59
	$8 = [8719]
	$10 = (int_64)0
	
.LOOP $label$92:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$93 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$95 }
	$7 = ($7 + [-91])
	goto $label$94 
	
.LABEL $label$95
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$94
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$93
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$92 }
	$2 = (int_64)0
	$9 = (int_64)59
	$8 = [8605]
	$23 = (int_64)0
	
.LOOP $label$96:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$101 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$100 }
	$7 = ($7 + [-91])
	goto $label$99 
	
.LABEL $label$101
	$6 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$100
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$99
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$98
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$97
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$23 = ((int_64)$6 | (int_64)$23)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$96 }
	CALL $4(($5 + [360]), $0, $10, $23, (int_64)5459781)
	$2 = *($0)
	*($5 + [184]) = (int_64)4596013491724138578
	*($5 + [176]) = (int_64)4596013491724138578
	*($5 + [192]) = (int_64)4596013491724138578
	*($5 + [200]) = (int_64)4596013491724138578
	CALL $5(($5 + [328]), ($0 + [8]), $2, ($5 + [176]))
	$24 = (CASTING float_64)(int_32 ($22 + [4]))
	$25 = (CASTING float_64)(int_64 $1)
	$8 = ($21 & [65535])
	if ( ($8 <= [7]) ){ goto $label$105 }
	if ( ($8 <= [28]) ){ goto $label$104 }
	$8 = ($5 + [352])
	goto $label$103 
	
.LABEL $label$105
	$24 = ((float_64)((float_64)*($5 + [328]) / (float_64)(float_64)365) * (float_64)$24)
	goto $label$102 
	
.LABEL $label$104
	if ( (($21 & [65535]) <= [14]) ){ goto $label$106 }
	$8 = ($5 + [344])
	goto $label$103 
	
.LABEL $label$106
	$8 = ($5 + [336])
	
.LABEL $label$103
	$24 = ((float_64)((float_64)*($8) * (float_64)$24) / (float_64)(float_64)365)
	
.LABEL $label$102
	$24 = ((float_64)$25 / (float_64)$24)
	if ( ((float_64)(float_64)|$24| < (float_64)(float_64)9223372036854775808) ){ goto $label$108 }
	$23 = (int_64)-9223372036854775808
	goto $label$107 
	
.LABEL $label$108
	$23 = (Rounds 0)($24)
	
.LABEL $label$107
	CALL eosio_assert(((int_64)$23 > (int_64)90000), [8732])
	CALL eosio_assert((uint_64)(((int_64)$23 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9166])
	$2 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$111:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$110 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$112 }
	$2 = $6
	$7 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$111 }
	goto $label$109 
	
.LABEL $label$112
	$2 = $6
	
.LOOP $label$113:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$110 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $7 ){ goto $label$113 }
	$7 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$111 }
	goto $label$109 
	
.LABEL $label$110
	$7 = [0]
	
.LABEL $label$109
	CALL eosio_assert($7, [9215])
	$26 = *($0)
	$2 = (int_64)6
	
.LOOP $label$114:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$114 }
	$2 = (int_64)0
	$6 = (int_64)59
	$8 = [8719]
	$10 = (int_64)0
	
.LOOP $label$115:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$116 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$118 }
	$7 = ($7 + [-91])
	goto $label$117 
	
.LABEL $label$118
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$117
	$9 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$116
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$9 | (int_64)$10)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$115 }
	$2 = (int_64)4
	
.LOOP $label$119:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$119 }
	*((($5 + [48]) + [16])) = (int_64)1397703940
	*(($7 = ($5 + [200]))) = [0]
	*($5 + [56]) = $23
	*($5 + [72]) = $21
	*($5 + [74]) = $11
	*($5 + [176]) = $10
	*($5 + [184]) = (int_64)-4996866931869876224
	*($5 + [192]) = (int_64)0
	*($5 + [48]) = *($5 + [376])
	*(($8 = CALL _Znwj([16]))) = $26
	*($8 + [8]) = (int_64)3617214756542218240
	*(($5 + [212])) = [0]
	$12 = ($8 + [16])
	*($7) = $12
	*(($5 + [196])) = $12
	*($5 + [192]) = $8
	*($5 + [204 align=4]) = (int_64)0
	CALL $6(($5 + [204]), [27])
	$8 = *(($5 + [208]))
	$7 = *($5 + [204])
	*($5 + [116]) = $7
	*($5 + [112]) = $7
	*($5 + [120]) = $8
	*($5 + [96]) = ($5 + [112])
	*($5 + [312]) = ($5 + [48])
	CALL $7(($5 + [312]), ($5 + [96]))
	CALL $3(($5 + [112]), ($5 + [176]))
	$8 = *($5 + [112])
	CALL send_inline($8, (*($5 + [116]) - $8))
	$8 = *($5 + [112])
	if ( ($8 == 0) ){ goto $label$120 }
	*($5 + [116]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$120
	$8 = *($5 + [204])
	if ( ($8 == 0) ){ goto $label$121 }
	*(($5 + [208])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$121
	$8 = *($5 + [192])
	if ( ($8 == 0) ){ goto $label$122 }
	*(($5 + [196])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$122
	*($5 + [320]) = (int_64)1397703940
	*($5 + [312]) = (int_64)0
	CALL eosio_assert([1], [9166])
	$2 = (uint_64)*($5 + [320]) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$125:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$124 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$126 }
	$2 = $6
	$7 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$125 }
	goto $label$123 
	
.LABEL $label$126
	$2 = $6
	
.LOOP $label$127:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$124 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $7 ){ goto $label$127 }
	$7 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$125 }
	goto $label$123 
	
.LABEL $label$124
	$7 = [0]
	
.LABEL $label$123
	CALL eosio_assert($7, [9215])
	*($5 + [312]) = ((int_64)$1 / (int_64)10)
	$8 = ($0 + [48])
	$7 = *(($0 + [76]))
	if ( ((int_32)$7 == (int_32)*(($0 + [72]))) ){ goto $label$130 }
	$7 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [136]) == (int_32)$8), [9036])
	if ( $7 ){ goto $label$129 }
	goto $label$128 
	
.LABEL $label$130
	$7 = CALL db_find_i64(*($8), *(($0 + [56])), (int_64)6820297015373594624, (int_64)6820297015373594624)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$128 }
	CALL eosio_assert(((int_32)*(CALL $8($8, $7) + [136]) == (int_32)$8), [9036])
	
.LABEL $label$129
	CALL $9(($5 + [176]), $8)
	*($5 + [172]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ((int_64)*($5 + [256]) < (int_64)1) ){ goto $label$131 }
	CALL eosio_assert([1], [9166])
	$2 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$134:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$133 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$135 }
	$2 = $6
	$7 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$134 }
	goto $label$132 
	
.LABEL $label$135
	$2 = $6
	
.LOOP $label$136:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$133 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $7 ){ goto $label$136 }
	$7 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$134 }
	goto $label$132 
	
.LABEL $label$133
	$7 = [0]
	
.LABEL $label$132
	CALL eosio_assert($7, [9215])
	*($5 + [160]) = (int_64)86400
	$8 = ((int_32)$22 * (int_32)[86400])
	*($5 + [152]) = (CASTING uint_64)(uint_32 $8)
	$2 = *($5 + [312])
	if ( ($8 <= [86401]) ){ goto $label$140 }
	if ( ((int_64)$2 < (int_64)9000) ){ goto $label$140 }
	$2 = *($0)
	*($5 + [48]) = $0
	*($5 + [52]) = ($5 + [376])
	*($5 + [56]) = ($5 + [312])
	*($5 + [60]) = ($5 + [172])
	*($5 + [64]) = ($5 + [152])
	*($5 + [68]) = ($5 + [160])
	*($5 + [96]) = $2
	CALL eosio_assert(((int_64)*($0 + [88]) == (int_64)CALL $fimport$7()), [9115])
	$4 = ($0 + [88])
	*($5 + [112]) = $4
	*($5 + [116]) = ($5 + [48])
	*($5 + [120]) = ($5 + [96])
	*(($11 = CALL _Znwj([80])) + [24]) = (int_64)1397703940
	*($11 + [16]) = (int_64)0
	CALL eosio_assert([1], [9166])
	$2 = (int_64)5459781
	$8 = [0]
	
.LOOP $label$141:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$139 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$142 }
	$2 = $6
	$7 = [1]
	$12 = $8
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$141 }
	goto $label$138 
	
.LABEL $label$142
	$2 = $6
	
.LOOP $label$143:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$139 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$12 = ($8 + [1])
	$8 = $12
	if ( $7 ){ goto $label$143 }
	$7 = [1]
	$8 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$141 }
	goto $label$138 
	
.LABEL $label$140
	$26 = *(($5 + [320]))
	goto $label$137 
	
.LABEL $label$139
	$7 = [0]
	
.LABEL $label$138
	CALL eosio_assert($7, [9215])
	*($11 + [64]) = $4
	CALL $10(($5 + [112]), $11)
	*($5 + [416]) = $11
	$2 = *($11)
	*($5 + [112]) = $2
	$7 = *($11 + [68])
	*($5 + [32]) = $7
	$12 = ($0 + [116])
	$8 = *($12)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [120]))) ){ goto $label$146 }
	*($8 + [8]) = $2
	*($8 + [16]) = $7
	*($5 + [416]) = [0]
	*($8) = $11
	*($12) = ($8 + [24])
	$8 = *($5 + [416])
	*($5 + [416]) = [0]
	if ( ($8 == 0) ){ goto $label$144 }
	goto $label$145 
	
.LABEL $label$146
	CALL $11(($0 + [112]), ($5 + [416]), ($5 + [112]), ($5 + [32]))
	$8 = *($5 + [416])
	*($5 + [416]) = [0]
	if ( ($8 == 0) ){ goto $label$144 }
	
.LABEL $label$145
	CALL _ZdlPv($8)
	
.LABEL $label$144
	$2 = *($5 + [160])
	$2 = *($5 + [312])
	CALL __multi3($5, $2, (int_64)$2 >> (int_64)63), $2, (int_64)$2 >> (int_64)63))
	$26 = *((($5 + [312]) + [8]))
	$6 = *(($5 + [8]))
	$2 = *($5)
	CALL eosio_assert(( (uint_64)($2 <= (int_64)4611686018427387904) ? ((int_64)$6 < (int_64)0) : (int_64)($6 == 0) ), [8890])
	CALL eosio_assert(( ((uint_64)$2 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$6 > (int_64)-1) : ((int_64)$6 == (int_64)-1) ), [8914])
	$6 = *($5 + [152])
	CALL eosio_assert(((int_64)$6 != (int_64)0), [8850])
	CALL eosio_assert((((int_64)$2 != (int_64)-9223372036854775808) | ((int_64)$6 != (int_64)-1)), [8865])
	$2 = ((int_64)$2 / (int_64)$6)
	
.LABEL $label$137
	CALL $12(($5 + [48]), $0, [10])
	CALL eosio_assert(((int_64)*($5 + [56]) == (int_64)$26), [9763])
	$1 = ((int_64)*($5 + [48]) + (int_64)$2)
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9806])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9825])
	if ( ((int_64)$1 < (int_64)1) ){ goto $label$131 }
	$6 = *($0)
	$2 = (int_64)6
	
.LOOP $label$147:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$147 }
	*($5 + [104]) = (int_64)3617214756542218240
	*($5 + [96]) = $6
	$2 = (int_64)0
	$9 = (int_64)59
	$8 = [8605]
	$10 = (int_64)0
	
.LOOP $label$148:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$153 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$152 }
	$7 = ($7 + [-91])
	goto $label$151 
	
.LABEL $label$153
	$6 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$150 }
	goto $label$149 
	
.LABEL $label$152
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$151
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$150
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$149
	$8 = ($8 + [1])
	$9 = ((int_64)$9 + (int_64)4294967291)
	$10 = ((int_64)$6 | (int_64)$10)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$148 }
	$2 = (int_64)0
	$9 = (int_64)59
	$8 = [8617]
	$23 = (int_64)0
	
.LOOP $label$154:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$159 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$158 }
	$7 = ($7 + [-91])
	goto $label$157 
	
.LABEL $label$159
	$6 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$156 }
	goto $label$155 
	
.LABEL $label$158
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$157
	$6 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$156
	$6 = ((int_64)((int_64)$6 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$155
	$8 = ($8 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$23 = ((int_64)$6 | (int_64)$23)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$154 }
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$8 = CALL $94([8771])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$162 }
	*($5 + [32]) = ($8 << [1])
	$7 = (($5 + [32]) | [1])
	if ( $8 ){ goto $label$161 }
	goto $label$160 
	
.LABEL $label$162
	$12 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($12)
	*($5 + [32]) = ($12 | [1])
	*($5 + [40]) = $7
	*($5 + [36]) = $8
	
.LABEL $label$161
	CALL memcpy($7, [8771], $8)
	
.LABEL $label$160
	*(($7 + $8)) = [0]
	*(($5 + [72])) = $26
	$8 = ($5 + [40])
	*(($5 + [88])) = *($8)
	*($8) = [0]
	*($5 + [56]) = (int_64)4154293930757629584
	*($5 + [64]) = $1
	*($5 + [48]) = *($0)
	*($5 + [80]) = *($5 + [32])
	*($5 + [32]) = (int_64)0
	$8 = CALL $2(($5 + [112]), ($5 + [96]), $10, $23, ($5 + [48]))
	CALL $3(($5 + [416]), $8)
	$7 = *($5 + [416])
	CALL send_inline($7, (*($5 + [420]) - $7))
	$7 = *($5 + [416])
	if ( ($7 == 0) ){ goto $label$163 }
	*($5 + [420]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$163
	$7 = *($8 + [28])
	if ( ($7 == 0) ){ goto $label$164 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$164
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$165 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$165
	if ( ((*(($5 + [80])) & [1]) == 0) ){ goto $label$166 }
	CALL _ZdlPv(*(($5 + [88])))
	
.LABEL $label$166
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$131 }
	CALL _ZdlPv(*(($5 + [40])))
	
.LABEL $label$131
	$8 = *($5 + [296])
	if ( ($8 == 0) ){ goto $label$128 }
	*(($5 + [300])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$128
	if ( ((*($5 + [384]) & [1]) == 0) ){ goto $label$167 }
	CALL _ZdlPv(*(($19 + [8])))
	
.LABEL $label$167
	if ( ((*($5 + [400]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($13 + [8])))
	
.LABEL $label$2
	$global$0 = ($5 + [432])
	return (unreachable)
	
.LABEL $label$1
	CALL $67(($5 + [32]))
	(unreachable)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9087])
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$5 }
	$7 = CALL $95($6)
	CALL db_get_i64($1, $7, $6)
	CALL $98($7)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	CALL db_get_i64($1, $7, $6)
	
.LABEL $label$4
	$8 = ($0 + [24])
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [9166])
	$10 = ($9 + [8])
	$11 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9215])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [9110])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [9110])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	$11 = (uint_64)*(($9 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $11)
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $40($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_upperbound(*($2), *($2 + [8]), (int_64)-6497942333781180416, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9036])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $20($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)-6497942333781180416, $6))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9036])
	
.LABEL $label$2
	*(($4 + [72])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-6497942333781180416, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9036])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $20($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)-6497942333781180416, $6))
	CALL eosio_assert(((int_32)*($4 + [64]) == (int_32)$7), [9036])
	
.LABEL $label$2
	*(($4 + [72])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

int_32 .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9360])
	$2 = *($0 + [4])
	$3 = *($2 + [72])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-6497942333781180416, ($1 + [8]), *($2))
	*(*(($0 + [4])) + [72]) = $3
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$4 = CALL db_idx64_next($3, ($1 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = *($1 + [8])
	$2 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$6:
	$3 = ($2 + [-24])
	$8 = *($3)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$4 }
	$2 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	$global$0 = ($1 + [16])
	return $0
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [9036])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL $20($6, CALL $fimport$6(*($6), *($6 + [8]), (int_64)-6497942333781180416, $5))
	CALL eosio_assert(((int_32)*($8 + [64]) == (int_32)$6), [9036])
	
.LABEL $label$2
	*(($0 + [4])) = $8
	*(($8 + [72])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = ($6 + [104])
	$8 = *($7)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = ($6 + [88])
	$10 = CALL db_lowerbound_i64(*($9), *(($6 + [96])), (int_64)-6497942333781180416, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $20($9, $10)
	*($3 + [36]) = [0]
	*($3 + [32]) = $9
	$8 = *(*(CALL $59(($3 + [32])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [104])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [9928])
	*($1) = *($7)
	*($1 + [8]) = *(*($5 + [4]))
	$6 = *($5 + [8])
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [16]) = *($6)
	$8 = *(*($5 + [12]))
	*($1 + [32]) = $8
	*($1 + [40]) = *(*($5 + [16]))
	*($1 + [48]) = $8
	*($1 + [56]) = ((int_64)$8 + (int_64)*(*($5 + [20])))
	$2 = $2
	$5 = ($2 + [-64])
	$global$0 = $5
	*($3 + [12]) = $5
	*($3 + [8]) = $5
	*($3 + [16]) = $2
	*($3 + [24]) = ($3 + [8])
	$2 = ($1 + [8])
	*($3 + [36]) = $2
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + [16])
	*($3 + [44]) = ($1 + [32])
	*($3 + [48]) = ($1 + [40])
	*($3 + [52]) = ($1 + [48])
	$6 = ($1 + [56])
	*($3 + [56]) = $6
	CALL $48(($3 + [32]), ($3 + [24]))
	$8 = *($1)
	*($1 + [68]) = CALL db_store_i64(*($4 + [8]), (int_64)-6497942333781180416, *(*($0 + [8])), $8, $5, [64])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = ($4 + [8])
	$8 = *($5)
	$0 = *(($0 + [8]))
	$11 = *($0)
	$12 = *($1)
	*($3 + [32]) = *($6)
	*($1 + [72]) = CALL db_idx64_store($8, (int_64)-6497942333781180416, $11, $12, ($3 + [32]))
	$8 = *($0)
	$11 = *($5)
	$12 = *($1)
	*($3 + [32]) = *($2)
	*(($1 + [76])) = CALL db_idx64_store($11, (int_64)-6497942333781180415, $8, $12, ($3 + [32]))
	$global$0 = ($3 + [64])
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $12 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [224])
	$global$0 = $3
	$4 = $3
	CALL $9(($4 + [80]), ($1 + [48]))
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9166])
	$5 = (int_64)5459781
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $7
	$8 = [1]
	$9 = $6
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $7
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = ((int_32)$6 < (int_32)[6])
	$9 = ($6 + [1])
	$6 = $9
	if ( $8 ){ goto $label$5 }
	$8 = [1]
	$6 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	
.LABEL $label$1
	CALL eosio_assert($8, [9215])
	$5 = CALL current_time()
	*($4 + [72]) = (int_64)86400
	$10 = ($1 + [88])
	*($4 + [64]) = $10
	$11 = ((int_64)((uint_64)$5 / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($4 + [216]) = $11
	CALL $15(($4 + [56]), ($4 + [64]), ($4 + [216]))
	*($4 + [216]) = (int_64)0
	CALL $16(($4 + [48]), ($4 + [64]), ($4 + [216]))
	$12 = $3
	$8 = ($2 << [3])
	$6 = ($3 - (($8 + [15]) & [-16]))
	$global$0 = $6
	$13 = [0]
	CALL memset($6, [0], $8)
	$5 = *($4 + [48])
	*($4 + [216]) = $5
	$8 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( ($8) == 0) ){ goto $label$6 }
	$3 = $6
	
.LOOP $label$9:
	$9 = $13
	if ( ((int_32)$8 == (int_32)*($4 + [60])) ){ goto $label$8 }
	*($3) = *($8)
	$13 = ($9 + [1])
	if ( ((int_32)$13 >= (int_32)$2) ){ goto $label$10 }
	$3 = ($3 + [8])
	CALL $17(($4 + [216]))
	$8 = *($4 + [220])
	if ( $8 ){ goto $label$9 }
	
.LABEL $label$10
	$9 = ($9 + [1])
	goto $label$7 
	
.LABEL $label$8
	if ( ($9 == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$13 = (($4 + [8]) + [8])
	$5 = (int_64)0
	
.LOOP $label$11:
	CALL $18(($4 + [40]), $10, *($6), [9235])
	CALL eosio_assert(((uint_64)*(*($4 + [44]) + [56]) <= (uint_64)$11), [9251])
	$8 = *($4 + [44])
	$7 = (int_64)
	CALL eosio_assert(((int_64)$7(((int_64)*($8 + [40]) + (int_64)*($8 + [32])) - *($8 + [56]))) != (int_64)0), [9273])
	CALL eosio_assert((uint_64)($7 <= *(*($4 + [44]) + [40])), [9309])
	$8 = *($4 + [44])
	$14 = *(($8 + [24]))
	$15 = *($8 + [16])
	$16 = *($4 + [72])
	if ( ((uint_64)$7 <= (uint_64)$16) ){ goto $label$12 }
	CALL __multi3(($4 + [8]), $15, (int_64)$15 >> (int_64)63), $16, (int_64)$16 >> (int_64)63))
	$15 = *($13)
	$7 = *($4 + [8])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$15 < (int_64)0) : (int_64)($15 == 0) ), [8890])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$15 > (int_64)-1) : ((int_64)$15 == (int_64)-1) ), [8914])
	$15 = *(*($4 + [44]) + [40])
	CALL eosio_assert(((int_64)$15 != (int_64)0), [8850])
	CALL eosio_assert((((int_64)$7 != (int_64)-9223372036854775808) | ((int_64)$15 != (int_64)-1)), [8865])
	CALL eosio_assert(((int_64)$14 == (int_64)1397703940), [9763])
	$5 = ((int_64)$5 + (int_64)((int_64)$7 / (int_64)$15))
	*($0) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9806])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9825])
	$8 = *($4 + [44])
	$7 = *($1)
	*($4 + [216]) = ($4 + [72])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9572])
	CALL $19($10, $8, $7, ($4 + [216]))
	$6 = ($6 + [8])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$11 }
	goto $label$6 
	
.LABEL $label$12
	CALL __multi3(($4 + [24]), $15, (int_64)$15 >> (int_64)63), $7, (int_64)$7 >> (int_64)63))
	$15 = *((($4 + [24]) + [8]))
	$7 = *($4 + [24])
	CALL eosio_assert(( (uint_64)($7 <= (int_64)4611686018427387904) ? ((int_64)$15 < (int_64)0) : (int_64)($15 == 0) ), [8890])
	CALL eosio_assert(( ((uint_64)$7 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$15 > (int_64)-1) : ((int_64)$15 == (int_64)-1) ), [8914])
	$15 = *(*($4 + [44]) + [40])
	CALL eosio_assert(((int_64)$15 != (int_64)0), [8850])
	CALL eosio_assert((((int_64)$7 != (int_64)-9223372036854775808) | ((int_64)$15 != (int_64)-1)), [8865])
	CALL eosio_assert(((int_64)$14 == (int_64)1397703940), [9763])
	$5 = ((int_64)$5 + (int_64)((int_64)$7 / (int_64)$15))
	*($0) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9806])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9825])
	$7 = *($4 + [40])
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	$3 = ((int_32)$8) != (int_32)[0]
	CALL eosio_assert($3), [9390])
	CALL eosio_assert($3, [9360])
	$3 = CALL db_next_i64(*($8 + [68]), ($4 + [216]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$13 }
	CALL $20((CASTING uint_32)(uint_64 $7), $3)
	
.LABEL $label$13
	CALL $21($10, $8)
	$6 = ($6 + [8])
	$9 = ($9 + [-1])
	if ( $9 ){ goto $label$11 }
	
.LABEL $label$6
	$12
	$6 = *($4 + [200])
	if ( ($6 == 0) ){ goto $label$14 }
	*(($4 + [204])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$14
	$global$0 = ($4 + [224])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $58(*($1), ($0 + [32]))
}

void .FUNC $75 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $78($1, $0, [8811])
	CALL $79()
	(unreachable)
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *(($1 + [28]))
	$4 = *($1 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	$6 = ($5 + [-24])
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$2 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$6 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$1), [9036])
	*($0 + [4]) = $6
	*($0) = $1
	return 
	
.LABEL $label$1
	$6 = CALL db_find_i64(*($1), *($1 + [8]), (int_64)-6497942333781180416, $2)
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), $3)
	$6 = CALL $20($1, $6)
	CALL eosio_assert(((int_32)*($6 + [64]) == (int_32)$1), [9036])
	*($0 + [4]) = $6
	*($0) = $1
}

void .FUNC $19 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [112]) = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9607])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9653])
	$5 = *($1 + [56])
	*($4 + [96]) = $5
	*($4 + [104]) = *($1 + [8])
	*($1 + [48]) = $5
	$6 = *($1)
	*($4 + [88]) = $6
	*($1 + [56]) = ((int_64)$5 + (int_64)*(*($3)))
	CALL eosio_assert([1], [9704])
	*($4 + [80]) = ($4 + [64])
	*($4 + [76]) = $4
	*($4 + [72]) = $4
	*($4 + [120]) = ($4 + [72])
	*($4 + [132]) = ($1 + [8])
	*($4 + [128]) = $1
	*($4 + [136]) = ($1 + [16])
	*($4 + [140]) = ($1 + [32])
	*($4 + [144]) = ($1 + [40])
	*($4 + [148]) = ($1 + [48])
	*($4 + [152]) = ($1 + [56])
	CALL $48(($4 + [128]), ($4 + [120]))
	CALL db_update_i64(*($1 + [68]), $2, $4, [64])
	$3 = ($0 + [36])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [132]) = $1
	*($4 + [128]) = $0
	*($4 + [140]) = $1
	*($4 + [136]) = ($4 + [96])
	*($4 + [144]) = ($4 + [88])
	*($4 + [148]) = ($4 + [112])
	*($4 + [120]) = ($4 + [128])
	CALL $49(($4 + [120]), $3, ($3 + [1]))
	$global$0 = ($4 + [160])
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9030])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9030])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [68]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [10034])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-6497942333781180416)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [9980])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9980])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $20(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9607])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9653])
	$3 = *($3)
	*($1) = *($3)
	*(($5 = ($1 + [24]))) = *(($3 + [24]))
	*(($6 = ($1 + [16]))) = *(($3 + [16]))
	*(($7 = ($1 + [8]))) = *(($3 + [8]))
	CALL eosio_assert([1], [9704])
	*($4 + [48]) = ($4 + [32])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = $7
	*($4 + [64]) = $1
	*($4 + [72]) = $6
	*($4 + [76]) = $5
	CALL $43(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( ((uint_64)*($0 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($0 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$7()), [9115])
	*(($5 = CALL _Znwj([48])) + [32]) = $1
	$3 = *($3)
	*($5) = *($3)
	*(($6 = ($5 + [8]))) = *(($3 + [8]))
	*(($7 = ($5 + [16]))) = *(($3 + [16]))
	*(($8 = ($5 + [24]))) = *(($3 + [24]))
	*($4 + [48]) = ($4 + [32])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = $6
	*($4 + [64]) = $5
	*($4 + [72]) = $7
	*($4 + [76]) = $8
	CALL $43(($4 + [64]), ($4 + [56]))
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)4982871454518345728, $2, (int_64)4982871454518345728, $4, [32])
	*($5 + [36]) = $6
	if ( ((uint_64)*($1 + [16]) > (uint_64)(int_64)4982871454518345728) ){ goto $label$1 }
	*(($1 + [16])) = (int_64)4982871454518345729
	
.LABEL $label$1
	*($4 + [64]) = $5
	*($4) = (int_64)4982871454518345728
	*($4 + [40]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = (int_64)4982871454518345728
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $44(($1 + [24]), ($4 + [64]), $4, ($4 + [40]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

int_32 .FUNC $52 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1397703940
	*($0) = (int_64)0
	CALL eosio_assert([1], [9166])
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9215])
	*(($2 = ($0 + [24]))) = (int_64)1397703940
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [9166])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9215])
	*(($2 = ($0 + [40]))) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9166])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$1 = $3
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$15 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$4 = [0]
	
.LABEL $label$11
	CALL eosio_assert($4, [9215])
	*(($2 = ($0 + [88]))) = (int_64)1397703940
	*($0 + [80]) = (int_64)0
	CALL eosio_assert([1], [9166])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$17 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$19
	$1 = $3
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$20 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$18 }
	goto $label$16 
	
.LABEL $label$17
	$4 = [0]
	
.LABEL $label$16
	CALL eosio_assert($4, [9215])
	*(($2 = ($0 + [104]))) = (int_64)1397703940
	*($0 + [96]) = (int_64)0
	CALL eosio_assert([1], [9166])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$3 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$1 = $3
	$4 = [1]
	$5 = $2
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$1 = $3
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$5 = ($2 + [1])
	$2 = $5
	if ( $4 ){ goto $label$25 }
	$4 = [1]
	$2 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$4 = [0]
	
.LABEL $label$21
	CALL eosio_assert($4, [9215])
	*(($0 + [128])) = [0]
	*($0 + [120 align=4]) = (int_64)0
	return $0
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9110])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9110])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9110])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9110])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	$4 = (*($3 + [4]) + [8])
	*($3 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]), [9110])
	CALL memcpy(($2 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$5 = *($0 + [40])
	$4 = *($1)
	$1 = *($4 + [4])
	$3 = [0]
	$6 = (int_64)0
	$2 = ($4 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($1 <= *(($4 + [8]))), [9924])
	$1 = *($2)
	$0 = *($1)
	$1 = ($1 + [1])
	*($2) = $1
	$3 = ($3 & [255])
	$6 = ((int_64)$6 | (int_64)(CASTING uint_64)(uint_32 (($0 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($0 & [128]) ){ goto $label$1 }
	$3 = (CASTING uint_32)(uint_64 $6)
	$0 = *($5)
	$1 = *($5 + [4])
	$2 = ((int_32)($1 - $0) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$4 }
	CALL $55($5, ($3 - $2))
	$1 = *(($5 + [4]))
	$0 = *($5)
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$5 }
	$1 = ($0 + ((int_32)$3 * (int_32)[40]))
	*(($5 + [4])) = $1
	
.LABEL $label$5
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $56($4, $0)
	$0 = ($0 + [40])
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$6 }
	
.LABEL $label$2
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $81($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [120])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [124])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL _ZdlPv($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $60(*($1), ($0 + [32]))
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [9110])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9110])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9110])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9110])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9110])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1397703940
	CALL eosio_assert([1], [9166])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9215])
	*(($1 = ($0 + [32]))) = (int_64)1397703940
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [9166])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9215])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9215])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9215])
	return $0
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $68(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $68(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $95($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1397703940
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [9166])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9215])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $34(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $98($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $35(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL memory()
	*(($3 + [104])) = $0
	*(($3 + [112])) = (int_64)-1
	*(($3 + [120])) = (int_64)0
	*(($3 + [128])) = [0]
	*(($3 + [144])) = (int_64)4154293930757629584
	*(($3 + [152])) = (int_64)-1
	*(($3 + [160])) = (int_64)0
	*(($3 + [168])) = [0]
	*(($3 + [184])) = $0
	*(($3 + [192])) = (int_64)-1
	*(($3 + [200])) = (int_64)0
	*(($3 + [208])) = [0]
	*(($3 + [212])) = [0]
	*($3 + [96]) = $0
	*($3 + [88]) = $0
	*($3 + [136]) = (int_64)4154293930757629584
	*($3 + [176]) = $0
	$0 = (int_64)5
	
.LOOP $label$1:
	$0 = ((int_64)$0 + (int_64)1)
	if ( ((int_64)$0 != (int_64)13) ){ goto $label$1 }
	$0 = (int_64)5
	
.LOOP $label$2:
	$0 = ((int_64)$0 + (int_64)1)
	if ( ((int_64)$0 != (int_64)13) ){ goto $label$2 }
	*(($3 + [224])) = (int_64)6138663577826885632
	*(($3 + [232])) = (int_64)-1
	$0 = (int_64)0
	*(($3 + [240])) = (int_64)0
	*(($3 + [248])) = [0]
	*($3 + [216]) = (int_64)6138663577826885632
	$4 = (int_64)59
	$5 = [8605]
	$6 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$0 > (uint_64)(int_64)10) ){ goto $label$8 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$8 = (int_64)0
	if ( ((int_64)$0 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$4
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$6 = ((int_64)$8 | (int_64)$6)
	$0 = ((int_64)$0 + (int_64)1)
	if ( ((int_64)$0 != (int_64)13) ){ goto $label$3 }
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$9 }
	$0 = (int_64)0
	$4 = (int_64)59
	$5 = [8617]
	$6 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$0 > (uint_64)(int_64)7) ){ goto $label$15 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$7 = ($7 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$8 = (int_64)0
	if ( ((uint_64)$0 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$11
	$5 = ($5 + [1])
	$0 = ((int_64)$0 + (int_64)1)
	$6 = ((int_64)$8 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$10 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$9 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [1]
	*($3 + [8]) = *($3 + [80])
	CALL $29(($3 + [88]), ($3 + [8]))
	CALL $30(($3 + [88]))
	CALL $85([0])
	$global$0 = ($3 + [256])
	return (unreachable)
	
.LABEL $label$9
	if ( ((int_64)$2 > (int_64)5378043540636893183) ){ goto $label$19 }
	if ( ((int_64)$2 == (int_64)-4417316219328135168) ){ goto $label$18 }
	if ( ((int_64)$2 != (int_64)-3111238946495230016) ){ goto $label$16 }
	*($3 + [52]) = [0]
	*($3 + [48]) = [2]
	*($3 + [40]) = *($3 + [48])
	CALL $31(($3 + [88]), ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$19
	if ( ((int_64)$2 == (int_64)5378043540636893184) ){ goto $label$17 }
	if ( ((int_64)$2 != (int_64)5454311842506244096) ){ goto $label$16 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [3]
	*($3 + [24]) = *($3 + [64])
	CALL $32(($3 + [88]), ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$18
	*($3 + [76]) = [0]
	*($3 + [72]) = [4]
	*($3 + [16]) = *($3 + [72])
	CALL $33(($3 + [88]), ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$17
	*($3 + [60]) = [0]
	*($3 + [56]) = [5]
	*($3 + [32]) = *($3 + [56])
	CALL $31(($3 + [88]), ($3 + [32]))
	
.LABEL $label$16
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$3 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj(((int_32)$3 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	CALL $57($3)
	$3 = (*($0) + [40])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $81($0)
	
.LABEL $label$2
	$4 = ($2 + ((int_32)$3 * (int_32)[40]))
	$5 = ($2 + ((int_32)$5 * (int_32)[40]))
	$3 = $5
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	CALL $57($3)
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$6 = ($2 + ((int_32)$6 * (int_32)[40]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 + ((int_32)((int_32)$1 / (int_32)[-40]) * (int_32)[40]))
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [64]) == (int_32)$0), [9424])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$7()), [9469])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [9519])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [68]))
	$6 = *(($1 + [72]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942333781180416, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [76]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-6497942333781180415, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9087])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $95($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$6 }
	CALL $98($4)
	
.LABEL $label$6
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$5 = CALL _Znwj([80])
	$4 = CALL $46($5, $0, ($3 + [8]))
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [8]) = $6
	$2 = *($5 + [68])
	*($3 + [4]) = $2
	$7 = ($0 + [28])
	$1 = *($7)
	if ( ((uint_32)$1 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($1 + [8]) = $6
	*($1 + [16]) = $2
	*($3 + [24]) = [0]
	*($1) = $5
	*($7) = ($1 + [24])
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $5 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $11(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $23 (int_32 $0, float_64 $1, float_64 $2, float_64 $3, float_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = ($global$0 - [64])
	$global$0 = $5
	CALL require_auth(*($0))
	CALL eosio_assert(((float_64)$1 > (float_64)(float_64)0), [9843])
	CALL eosio_assert(((float_64)$2 > (float_64)(float_64)0), [9871])
	CALL eosio_assert(((float_64)$3 > (float_64)(float_64)0), [9871])
	CALL eosio_assert(((float_64)$4 > (float_64)(float_64)0), [9871])
	$6 = *($0)
	*($5 + [40]) = (int_64)4596013491724138578
	*($5 + [32]) = (int_64)4596013491724138578
	*($5 + [48]) = (int_64)4596013491724138578
	*($5 + [56]) = (int_64)4596013491724138578
	$7 = ($0 + [8])
	CALL $5($5, $7, $6, ($5 + [32]))
	*($5 + [8]) = $2
	*($5) = $1
	*($5 + [16]) = $3
	*($5 + [24]) = $4
	CALL $24($7, $5, *($0))
	$global$0 = ($5 + [64])
}

void .FUNC $22 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [160])
	$global$0 = $2
	CALL require_auth(*($0))
	CALL $12(($2 + [128]), $0, (CASTING uint_32)(uint_64 $1))
	if ( ((int_64)*($2 + [128]) < (int_64)1) ){ goto $label$2 }
	$3 = *($0)
	$1 = (int_64)6
	
.LOOP $label$3:
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$3 }
	*($2 + [80]) = (int_64)3617214756542218240
	*($2 + [72]) = $3
	$1 = (int_64)0
	$4 = (int_64)59
	$5 = [8605]
	$6 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$9 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$9
	$3 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$5
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$6 = ((int_64)$3 | (int_64)$6)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$4 }
	$1 = (int_64)0
	$4 = (int_64)59
	$5 = [8617]
	$8 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$15 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$7 = ($7 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$3 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$3 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$3 = ((int_64)((int_64)$3 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$11
	$5 = ($5 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$8 = ((int_64)$3 | (int_64)$8)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$10 }
	*(($2 + [16])) = [0]
	*($2 + [8]) = (int_64)0
	$5 = CALL $94([8771])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$18 }
	*($2 + [8]) = ($5 << [1])
	$7 = (($2 + [8]) | [1])
	if ( $5 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$9 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($2 + [8]) = ($9 | [1])
	*($2 + [16]) = $7
	*($2 + [12]) = $5
	
.LABEL $label$17
	CALL memcpy($7, [8771], $5)
	
.LABEL $label$16
	*(($7 + $5)) = [0]
	*(($2 + [48])) = *((($2 + [128]) + [8]))
	$5 = (($2 + [8]) + [8])
	*(($2 + [64])) = *($5)
	*($5) = [0]
	*($2 + [32]) = (int_64)4154293930757629584
	*($2 + [24]) = *($0)
	*($2 + [40]) = *($2 + [128])
	*($2 + [56]) = *($2 + [8])
	*($2 + [8]) = (int_64)0
	$5 = CALL $2(($2 + [88]), ($2 + [72]), $6, $8, ($2 + [24]))
	CALL $3(($2 + [144]), $5)
	$7 = *($2 + [144])
	CALL send_inline($7, (*($2 + [148]) - $7))
	$7 = *($2 + [144])
	if ( ($7 == 0) ){ goto $label$19 }
	*($2 + [148]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$19
	$7 = *($5 + [28])
	if ( ($7 == 0) ){ goto $label$20 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$20
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$21 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((*(($2 + [56])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($2 + [64])))
	
.LABEL $label$22
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [16])))
	
.LABEL $label$2
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $67(($2 + [8]))
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8798]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($9)
	$12 = *($0)
	$6 = (int_64)6
	
.LOOP $label$5:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$5 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8719]
	$9 = (int_64)0
	
.LOOP $label$6:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$7 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$11 = ($11 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$7
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$6 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [8826]
	$13 = (int_64)0
	
.LOOP $label$10:
	if ( ((uint_64)$6 > (uint_64)(int_64)9) ){ goto $label$15 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$11 = ($11 + [-91])
	goto $label$13 
	
.LABEL $label$15
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$14
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$13 = ((int_64)$7 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$10 }
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*(($5 + [48])) = *(($4 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $1
	*($5 + [56]) = $9
	*($5 + [64]) = $13
	*($5 + [24]) = *($3)
	*($5 + [40]) = *($4)
	*(($8 = CALL _Znwj([16]))) = $12
	*($8 + [8]) = (int_64)3617214756542218240
	*(($5 + [92])) = [0]
	$11 = ($8 + [16])
	*((($5 + [56]) + [24])) = $11
	*(($5 + [76])) = $11
	*($5 + [72]) = $8
	*($5 + [84 align=4]) = (int_64)0
	CALL $6(($5 + [84]), [48])
	$8 = *(($5 + [88]))
	$11 = *($5 + [84])
	*($5 + [100]) = $11
	*($5 + [96]) = $11
	*($5 + [104]) = $8
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = ($5 + [8])
	CALL $26(($5 + [120]), ($5 + [112]))
	CALL $3(($5 + [96]), ($5 + [56]))
	$8 = *($5 + [96])
	CALL send_inline($8, (*($5 + [100]) - $8))
	$8 = *($5 + [96])
	if ( ($8 == 0) ){ goto $label$16 }
	*($5 + [100]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	$8 = *($5 + [84])
	if ( ($8 == 0) ){ goto $label$17 }
	*(($5 + [88])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$17
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$18 }
	*(($5 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$18
	$global$0 = ($5 + [128])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *(($0 + [28]))
	if ( ((int_32)$4 == (int_32)*($0 + [24])) ){ goto $label$3 }
	$4 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [9036])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871454518345728, (int_64)4982871454518345728)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $41($0, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$0), [9036])
	
.LABEL $label$2
	*($3) = $1
	CALL eosio_assert([1], [9572])
	CALL $50($0, $4, $2, $3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	*($3 + [8]) = $1
	CALL $51($3, $0, $2, ($3 + [8]))
	$global$0 = ($3 + [16])
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8798]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($9)
	$12 = *($0)
	$6 = (int_64)6
	
.LOOP $label$5:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$5 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8719]
	$9 = (int_64)0
	
.LOOP $label$6:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$7 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$11 = ($11 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$7
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$6 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [8837]
	$13 = (int_64)0
	
.LOOP $label$10:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$11 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$11 = ($11 + [-91])
	goto $label$12 
	
.LABEL $label$13
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$11
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$13 = ((int_64)$10 | (int_64)$13)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$10 }
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*(($5 + [48])) = *(($4 + [8]))
	*($5 + [16]) = $2
	*($5 + [8]) = $1
	*($5 + [56]) = $9
	*($5 + [64]) = $13
	*($5 + [24]) = *($3)
	*($5 + [40]) = *($4)
	*(($8 = CALL _Znwj([16]))) = $12
	*($8 + [8]) = (int_64)3617214756542218240
	*(($5 + [92])) = [0]
	$11 = ($8 + [16])
	*((($5 + [56]) + [24])) = $11
	*(($5 + [76])) = $11
	*($5 + [72]) = $8
	*($5 + [84 align=4]) = (int_64)0
	CALL $6(($5 + [84]), [48])
	$8 = *(($5 + [88]))
	$11 = *($5 + [84])
	*($5 + [100]) = $11
	*($5 + [96]) = $11
	*($5 + [104]) = $8
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = ($5 + [8])
	CALL $26(($5 + [120]), ($5 + [112]))
	CALL $3(($5 + [96]), ($5 + [56]))
	$8 = *($5 + [96])
	CALL send_inline($8, (*($5 + [100]) - $8))
	$8 = *($5 + [96])
	if ( ($8 == 0) ){ goto $label$14 }
	*($5 + [100]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$14
	$8 = *($5 + [84])
	if ( ($8 == 0) ){ goto $label$15 }
	*(($5 + [88])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$15
	$8 = *($5 + [72])
	if ( ($8 == 0) ){ goto $label$16 }
	*(($5 + [76])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$16
	$global$0 = ($5 + [128])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((int_32)(*($3 + [8]) - $1) > (int_32)[7]), [9030])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $98($0)
	
.LABEL $label$1
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $67 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9924])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $6($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9110])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $61($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $71($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $71($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $67($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $95($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10084])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $95($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $89 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $87($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $88 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $87 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $86($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $86 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

void .FUNC $85 (int_32 $0)
{
}

int_32 .FUNC $84 ()
{
	return [10088]
}

int_32 .FUNC $83 (int_32 $0)
{
	return (((int_32)$0 == (int_32)[32]) | (($0 + [-9]) <= [5]))
}

int_32 .FUNC $82 (int_32 $0)
{
	return (($0 + [-48]) <= [10])
}

void .FUNC $81 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $80 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $72 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$3 }
	$5 = uint_32($3 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( ($2 == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$6 }
	$6 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0 + [8])
	
.LABEL $label$5
	$2 = ( $4 ? $2 : ($4 <= $2) )
	$4 = ($5 - $1)
	$4 = ($4 - $2)
	if ( ($4 == 0) ){ goto $label$7 }
	$1 = ($6 + $1)
	CALL memmove($1, ($1 + $2), $4)
	$3 = *($0)
	
.LABEL $label$7
	$2 = ($5 - $2)
	if ( ($3 & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($6 + $2)) = [0]
	
.LABEL $label$4
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $92(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $76 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $78($1, $0, [8782])
	CALL $80()
	(unreachable)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $94([8366])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [8366], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $84())
	*(CALL $84()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $91($4, ($3 + [12]), $2)
	$5 = CALL $84()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $75($3)
	
.LABEL $label$1
	CALL $76($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $74 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $93(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9030])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9030])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [9110])
	CALL memcpy(($0 + [24]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)1397703940
	CALL eosio_assert([1], [9166])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9215])
	*(($0 + [40])) = (int_64)1397703940
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [9166])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$10 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$7 = [0]
	
.LABEL $label$6
	CALL eosio_assert($7, [9215])
	*($3 + [4]) = $1
	*($3) = $1
	*($3 + [8]) = ($1 + $2)
	*($3 + [16]) = $3
	*($3 + [24]) = $0
	CALL $62(($3 + [24]), ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $94($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $70($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

void .FUNC $79 ()
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9110])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $98($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	float_64 $7
	float_64 $8
	float_64 $9
	float_64 $10
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = CALL action_data_size()
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$1 = CALL $95($6)
	goto $label$2 
	
.LABEL $label$4
	$1 = [0]
	goto $label$1 
	
.LABEL $label$3
	$1 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $6)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [36]) = $1
	*($3 + [32]) = $1
	*($3 + [40]) = ($1 + $6)
	*($3 + [48]) = ($3 + [32])
	*($3 + [56]) = $3
	CALL $36(($3 + [56]), ($3 + [48]))
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL $98($1)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *(($3 + [24]))
	$8 = *(($3 + [16]))
	$9 = *(($3 + [8]))
	$10 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $10), (int_64 $9), (int_64 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *(($0 + [152]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [156])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [152]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *(($0 + [112]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [116])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [112]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$2 = *(($0 + [72]))
	if ( ($2 == 0) ){ goto $label$11 }
	$5 = ($0 + [76])
	$3 = *($5)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	$1 = *($4 + [120])
	if ( ($1 == 0) ){ goto $label$16 }
	*(($4 + [124])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$16
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [72]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $2
	
.LABEL $label$12
	*($5) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$11
	$1 = *(($0 + [32]))
	if ( ($1 == 0) ){ goto $label$17 }
	$2 = ($0 + [36])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$19 }
	
.LOOP $label$20:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$21 }
	CALL _ZdlPv($4)
	
.LABEL $label$21
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$20 }
	$3 = *(($0 + [32]))
	goto $label$18 
	
.LABEL $label$19
	$3 = $1
	
.LABEL $label$18
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$17
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [176])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $95($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $37(($3 + [32]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $98($2)
	
.LABEL $label$5
	*(($1 = (($3 + [96]) + [8]))) = *(($3 + [56]))
	*(($2 = (($3 + [80]) + [8]))) = *(($3 + [72]))
	*($3 + [96]) = *($3 + [48])
	*($3 + [80]) = *($3 + [64])
	$6 = *($3 + [40])
	$7 = *($3 + [32])
	*((($3 + [128]) + [8])) = *($2)
	*((($3 + [112]) + [8])) = *($1)
	*($3 + [128]) = *($3 + [80])
	*($3 + [112]) = *($3 + [96])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$8 = *((($3 + [112]) + [8]))
	*((($3 + [160]) + [8])) = $8
	$9 = *((($3 + [128]) + [8]))
	*((($3 + [144]) + [8])) = $9
	*((($3 + [16]) + [8])) = $8
	*(($3 + [8])) = $9
	$8 = *($3 + [112])
	*($3 + [160]) = $8
	$9 = *($3 + [128])
	*($3 + [144]) = $9
	*($3 + [16]) = $8
	*($3) = $9
	CALL void $1((int_32 $7), (int_64 $6), (int_64 ($3 + [16])), (int_32 $3), (int_32 $5))
	$global$0 = ($3 + [176])
	return [1]
}