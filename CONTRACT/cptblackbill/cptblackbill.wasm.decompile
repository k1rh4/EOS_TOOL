(data (i32.const 8192) "addtreasure\00\00\01\02\04\07\03\06\05\00")
(data (i32.const 8213) "addtradmin\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8310) "modtreasure\00")
(data (i32.const 8322) "modtreasimg\00")
(data (i32.const 8334) "modtreasjson\00")
(data (i32.const 8347) "activatchest\00")
(data (i32.const 8360) "modexpdate\00")
(data (i32.const 8371) "resetsecretc\00")
(data (i32.const 8384) "unlockchest\00")
(data (i32.const 8396) "erasetreasur\00")
(data (i32.const 8409) "addsetting\00")
(data (i32.const 8420) "modsetting\00")
(data (i32.const 8431) "erasesetting\00")
(data (i32.const 8444) "erasecheck\00")
(data (i32.const 8455) "eraseverunlc\00%llu\00")
(data (i32.const 8473) "erasetcrf\00")
(data (i32.const 8483) "eraseresult\00")
(data (i32.const 8495) "upsertcrew\00")
(data (i32.const 8506) "erasecrew\00")
(data (i32.const 8516) "issue\00")
(data (i32.const 8522) "transfer\00")
(data (i32.const 8531) "eosio.token\00")
(data (i32.const 8543) "string is too long to be a valid name\00")
(data (i32.const 8581) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 8648) "character is not in allowed character set for names\00")
(data (i32.const 8700) "Max length of title is 55 characters.\00")
(data (i32.const 8738) "Max length of imageUrl is 100 characters.\00")
(data (i32.const 8780) "Location (latitude and/ord longitude) is not valid.\00")
(data (i32.const 8832) "cannot create objects in table of another contract\00")
(data (i32.const 8883) "created\00")
(data (i32.const 8891) "next primary key in table is at autoincrement limit\00")
(data (i32.const 8943) "error reading iterator\00")
(data (i32.const 8966) "read\00")
(data (i32.const 8971) "get\00")
(data (i32.const 8975) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 9029) "cannot decrement iterator at beginning of table\00")
(data (i32.const 9077) "write\00")
(data (i32.const 9083) "cptblackbill\00")
(data (i32.const 9096) "Treasure not found\00")
(data (i32.const 9115) "You don\'t have access to modify this treasure.\00")
(data (i32.const 9162) "Max length of description is 650 characters.\00")
(data (i32.const 9207) "Max length of image url is 100 characters.\00")
(data (i32.const 9250) "Max length of video url is 100 characters.\00")
(data (i32.const 9293) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9344) "cannot pass end iterator to modify\00")
(data (i32.const 9379) "object passed to modify is not in multi_index\00")
(data (i32.const 9425) "cannot modify objects in table of another contract\00")
(data (i32.const 9476) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9535) "cannot increment end iterator\00")
(data (i32.const 9565) "active\00")
(data (i32.const 9572) "Treasure does not exist.\00")
(data (i32.const 9597) "You don\'t have access to reset the secret code on this treasure.\00")
(data (i32.const 9662) "Treasure is not active.\00")
(data (i32.const 9686) "EOS\00")
(data (i32.const 9690) "string is too long to be a valid symbol_code\00")
(data (i32.const 9735) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 9788) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9837) "invalid symbol name\00")
(data (i32.const 9857) "attempt to add asset with different symbol\00")
(data (i32.const 9900) "addition underflow\00")
(data (i32.const 9919) "addition overflow\00")
(data (i32.const 9937) "robbed\00")
(data (i32.const 9945) "Congrats for solving Treasure No.\00")
(data (i32.const 9979) " on CptBlackBill!\00")
(data (i32.const 9997) "Congrats! Treasure No.\00")
(data (i32.const 10020) " has been solved by the owner. This is your equal share of the treasure chest.\00")
(data (i32.const 10099) "Congrats! Your Treasure No.\00")
(data (i32.const 10127) " has been solved. You share 50/50 with the current conquerer.\00")
(data (i32.const 10189) "Congrats! Your conquered treasure No.\00")
(data (i32.const 10227) " has been solved. You share 50/50 with the owner.\00")
(data (i32.const 10277) " has been solved. This is your equal share of the treasure chest.\00")
(data (i32.const 10343) "BLKBILL\00")
(data (i32.const 10351) "1 BLKBILL token as reward for unlocking treasure.\00")
(data (i32.const 10401) "2 BLKBILL token as reward for someone unlocking your treasure.\00")
(data (i32.const 10464) "Verify unlock record does not exist\00")
(data (i32.const 10500) "Income for The Lost Diamond owners.\00")
(data (i32.const 10536) "divide by zero\00")
(data (i32.const 10551) "signed division overflow\00")
(data (i32.const 10576) "USD\00")
(data (i32.const 10580) "eosusd\00")
(data (i32.const 10587) "cannot pass end iterator to erase\00")
(data (i32.const 10621) "object passed to erase is not in multi_index\00")
(data (i32.const 10666) "cannot erase objects in table of another contract\00")
(data (i32.const 10716) "attempt to remove object that was not in multi_index\00")
(data (i32.const 10769) "You don\'t have access to remove this treasure.\00")
(data (i32.const 10816) "Setting not found\00")
(data (i32.const 10834) "Setting does not exist\00")
(data (i32.const 10857) "Verify check value record does not exist\00")
(data (i32.const 10898) "Tcrf-account does not exist.\00")
(data (i32.const 10927) "Result does not exist.\00")
(data (i32.const 10950) "Only Cpt.BlackBill can insert crewmembers on behalf of other users.\00")
(data (i32.const 11018) "You don\'t have access to modify this crewmember.\00")
(data (i32.const 11067) "Crew-info does not exist.\00")
(data (i32.const 11093) "memo has more than 256 bytes\00")
(data (i32.const 11122) "token with symbol does not exist, create token before issue\00")
(data (i32.const 11182) "invalid quantity\00")
(data (i32.const 11199) "must issue positive quantity\00")
(data (i32.const 11228) "symbol precision mismatch\00")
(data (i32.const 11254) "quantity exceeds available supply\00")
(data (i32.const 11288) "cannot transfer to self\00")
(data (i32.const 11312) "to account does not exist\00")
(data (i32.const 11338) "unable to find key\00")
(data (i32.const 11357) "must transfer positive quantity\00")
(data (i32.const 11389) "no balance object found\00")
(data (i32.const 11413) "overdrawn balance\00")
(data (i32.const 11431) "attempt to subtract asset with different symbol\00")
(data (i32.const 11479) "subtraction underflow\00")
(data (i32.const 11501) "subtraction overflow\00")
(data (i32.const 11522) "must pay with EOS token\00")
(data (i32.const 11546) "deposit amount must be positive\00")
(data (i32.const 11578) "Check Treasure No.\00")
(data (i32.const 11597) "Transfered amount is below minimum price for checking treasure value. Please refresh webpage.\00")
(data (i32.const 11691) "Treasure not found.\00")
(data (i32.const 11711) "Unlock Treasure No.\00")
(data (i32.const 11731) "Transfered amount is below minimum price for unlocking a treasure.\00")
(data (i32.const 11798) "-\00")
(data (i32.const 11800) "You are not allowed to unlock a treasure you have conquered.\00")
(data (i32.const 11861) "You are not allowed to unlock your own treasure.\00")
(data (i32.const 11910) "Activate Treasure No.\00")
(data (i32.const 11932) "Transfered amount is below minimum value.\00")
(data (i32.const 11974) "Only treasure owner or treasure conquerer can request treasure activation.\00")
(data (i32.const 12049) "Treasure is already activated.\00")
(data (i32.const 12080) "Mined BLKBILLs for investing in the lost diamond.\00")
(data (i32.const 12130) "Mined BLKBILLS for using Captain Black Bill.\00")
(data (i32.const 12175) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 12234) "checktreasur\00")
(data (i32.const 12247) "multiplication overflow\00")
(data (i32.const 12271) "multiplication underflow\00")
(data (i32.const 12296) "requestactivation\00")
(data (i32.const 20736) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 20816) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$3 (param i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_upperbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$9 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$10 (param i64)))
(import "env" "has_auth" (func $fimport$11 (param i64) (result i32)))
(import "env" "__multi3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "current_receiver" (func $fimport$13 (result i64)))
(import "env" "db_store_i64" (func $fimport$14 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_store" (func $fimport$15 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "current_time" (func $fimport$16 (result i64)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$18 (param i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$19 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$20 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$21 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$22 (param i32 i64 i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$23 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$25 (param i32 i32)))
(import "env" "db_remove_i64" (func $fimport$26 (param i32)))
(import "env" "db_idx64_remove" (func $fimport$27 (param i32)))
(import "env" "abort" (func $fimport$28))
(import "env" "memset" (func $fimport$29 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$30 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$31 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$33 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$34 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$35 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$36 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$37 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$38 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$39 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$40 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$41 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$42 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$43 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$44 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$45 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$46 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$47 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$48 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$49 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$50 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_ZdlPv" (func $171))
(export "_Znwj" (func $169))
(export "_Znaj" (func $170))
(export "_ZdaPv" (func $172))
(export "_ZnwjSt11align_val_t" (func $173))
(export "_ZnajSt11align_val_t" (func $174))
(export "_ZdlPvSt11align_val_t" (func $175))
(export "_ZdaPvSt11align_val_t" (func $176))
(table $0 25 25 anyfunc)
(elem (i32.const 1) $3 $5 $7 $9 $11 $12 $14 $16 $17 $19 $20 $22 $23 $25 $26 $27 $28 $29 $31 $32 $34 $36 $196 $198)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 21073))
(global $global$2 i32 (i32.const 21073))


int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_32 .FUNC $6 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [256])
	$global$0 = $3
	*(($4 = $3) + [200]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [184])) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [136]) = (int_64)0
	*($4 + [152]) = (int_64)0
	*($4 + [160]) = (int_64)0
	*($4 + [168]) = (int_64)0
	*($4 + [176]) = (int_64)0
	*($4 + [192]) = [0]
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [240]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $41(($4 + [24]), ($4 + [240]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [208]) + [8])) = $3
	*(($6 = (($4 + [224]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [224]) = $7
	*($4 + [208]) = $7
	$3 = *($6)
	*((($4 + [240]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [224])
	*($4 + [40]) = $0
	*($4 + [240]) = $0
	*($4 + [244]) = ($4 + [200])
	*($4 + [240]) = ($4 + [24])
	CALL $42(($4 + [240]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$16 }
	$2 = [1]
	if ( (*($4 + [176]) & [1]) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL $214($2)
	$2 = [1]
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL _ZdlPv(*(($4 + [184])))
	if ( ((*($4 + [136]) & $2) == 0) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	if ( (*($4 + [136]) & $2) ){ goto $label$12 }
	
.LABEL $label$13
	$2 = [1]
	if ( (*($4 + [124]) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [144])))
	$2 = [1]
	if ( ((*($4 + [124]) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*(($4 + [132])))
	if ( ((*($4 + [112]) & $2) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($4 + [112]) & $2) ){ goto $label$8 }
	
.LABEL $label$9
	$2 = [1]
	if ( (*($4 + [100]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [120])))
	$2 = [1]
	if ( ((*($4 + [100]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*(($4 + [108])))
	if ( (*($4 + [88]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [88]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	
.LABEL $label$4
	$global$0 = ($4 + [256])
	return [1]
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $177 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $214($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = ($global$0 - [80])
	$global$0 = $7
	CALL require_auth($1)
	*(($7 + [64])) = [0]
	*($7 + [48]) = (int_64)-1
	*($7 + [56]) = (int_64)0
	*($7 + [68]) = [0]
	$8 = *($0 + [8])
	*($7 + [32]) = $8
	*($7 + [40]) = $8
	$0 = [0]
	$9 = CALL db_find_i64($8, $8, (int_64)-3615145394423463936, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $46(($7 + [32]), $9)
	CALL eosio_assert(((int_32)*($0 + [168]) == (int_32)($7 + [32])), [9293])
	
.LABEL $label$1
	$9 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($9, [9096])
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$5 }
	CALL eosio_assert([1], [9115])
	$10 = [1]
	$11 = *($3)
	if ( ($11 & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_64)*($0 + [136]) != (int_64)$1) ){ goto $label$6 }
	CALL eosio_assert([1], [9115])
	$10 = [1]
	$11 = *($3)
	if ( (($11 & [1]) == 0) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	*($7 + [72]) = [9083]
	*($7 + [76]) = CALL $208([9083])
	*($7 + [8]) = *($7 + [72])
	CALL eosio_assert(((int_64)*(CALL $2(($7 + [16]), ($7 + [8]))) == (int_64)$1), [9115])
	$10 = [1]
	$11 = *($3)
	if ( (($11 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$10 = *($3 + [4])
	goto $label$2 
	
.LABEL $label$3
	$10 = uint_32($11 >> $10)
	
.LABEL $label$2
	CALL eosio_assert(($10 <= [56]), [8700])
	$10 = *($4)
	if ( ($10 & [1]) ){ goto $label$8 }
	$10 = uint_32($10 >> [1])
	goto $label$7 
	
.LABEL $label$8
	$10 = *($4 + [4])
	
.LABEL $label$7
	CALL eosio_assert(($10 <= [651]), [9162])
	$10 = *($5)
	if ( ($10 & [1]) ){ goto $label$10 }
	$10 = uint_32($10 >> [1])
	goto $label$9 
	
.LABEL $label$10
	$10 = *($5 + [4])
	
.LABEL $label$9
	CALL eosio_assert(($10 <= [101]), [9207])
	$10 = *($6)
	if ( ($10 & [1]) ){ goto $label$12 }
	$10 = uint_32($10 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$10 = *($6 + [4])
	
.LABEL $label$11
	CALL eosio_assert(($10 <= [101]), [9250])
	*($7 + [20]) = $4
	*($7 + [16]) = $3
	*($7 + [24]) = $5
	*($7 + [28]) = $6
	CALL eosio_assert($9, [9344])
	CALL $47(($7 + [32]), $0, $1, ($7 + [16]))
	$5 = *($7 + [56])
	if ( ($5 == 0) ){ goto $label$13 }
	$6 = ($7 + [60])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$15 }
	
.LOOP $label$16:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$17 }
	CALL $40($4)
	CALL _ZdlPv($4)
	
.LABEL $label$17
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$16 }
	$0 = *(($7 + [56]))
	goto $label$14 
	
.LABEL $label$15
	$0 = $5
	
.LABEL $label$14
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$13
	$global$0 = ($7 + [80])
}

int_32 .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $4 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $211($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*(($4 + [88])) = (int_64)0
	*((($4 + [72]) + [24])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [60]) = $3
	*($4 + [56]) = $3
	*($4 + [64]) = ($3 + $2)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $37(($4 + [24]), ($4 + [160]))
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$5 = *($5)
	*((($4 + [128]) + [8])) = $5
	*(($6 = (($4 + [144]) + [8]))) = $5
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$5 = *($6)
	*((($4 + [160]) + [8])) = $5
	*((($4 + [24]) + [24])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $38(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	$3 = [1]
	if ( (*($4 + [92]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $214($3)
	$3 = [1]
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [100])))
	if ( (*($4 + [80]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [80]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $5 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, float_64 $8, float_64 $9, int_64 $10, int_32 $11, int_32 $12, int_32 $13)
{
	int_32 $14
	$14 = ($global$0 - [160])
	$global$0 = $14
	*($14 + [144]) = $1
	*($14 + [152]) = $2
	*($14 + [136]) = $8
	*($14 + [128]) = $9
	*($14 + [120]) = $10
	*($14 + [116]) = $12
	*($14 + [112]) = $13
	*($14 + [72]) = [9083]
	*($14 + [76]) = CALL $208([9083])
	*($14) = *($14 + [72])
	CALL require_auth(*(CALL $2(($14 + [16]), $14)))
	$13 = *($3)
	if ( ($13 & [1]) ){ goto $label$2 }
	$13 = uint_32($13 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$13 = *($3 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($13 <= [56]), [8700])
	$13 = *($6)
	if ( ($13 & [1]) ){ goto $label$4 }
	$13 = uint_32($13 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$13 = *($6 + [4])
	
.LABEL $label$3
	CALL eosio_assert(($13 <= [101]), [8738])
	CALL eosio_assert(((int_32)((((float_64)$8 == (float_64)(float_64)0) | (((float_64)$8 < (float_64)(float_64)-90) | ((float_64)$8 > (float_64)(float_64)90))) | (((float_64)$9 == (float_64)(float_64)0) | (((float_64)$9 < (float_64)(float_64)-180) | ((float_64)$9 > (float_64)(float_64)180)))) ^ (int_32)[1]), [8780])
	*(($14 + [104])) = [0]
	*($14 + [88]) = (int_64)-1
	*($14 + [96]) = (int_64)0
	*($14 + [108]) = [0]
	$10 = *($0 + [8])
	*($14 + [72]) = $10
	*($14 + [80]) = $10
	$10 = *($0)
	*($14 + [24]) = $3
	*($14 + [28]) = $4
	*($14 + [32]) = $6
	*($14 + [36]) = $5
	*($14 + [40]) = $7
	*($14 + [60]) = $11
	*($14 + [20]) = ($14 + [152])
	*($14 + [16]) = ($14 + [144])
	*($14 + [44]) = ($14 + [136])
	*($14 + [48]) = ($14 + [128])
	*($14 + [52]) = ($14 + [120])
	*($14 + [56]) = ($14 + [116])
	*($14 + [64]) = ($14 + [112])
	CALL $43(($14 + [8]), ($14 + [72]), $10, ($14 + [16]))
	$0 = *($14 + [96])
	if ( ($0 == 0) ){ goto $label$5 }
	$4 = ($14 + [100])
	$6 = *($4)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$9 }
	CALL $40($3)
	CALL _ZdlPv($3)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$8 }
	$6 = *(($14 + [96]))
	goto $label$6 
	
.LABEL $label$7
	$6 = $0
	
.LABEL $label$6
	*($4) = $0
	CALL _ZdlPv($6)
	
.LABEL $label$5
	$global$0 = ($14 + [160])
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [160])
	$global$0 = $2
	$3 = *($0)
	CALL $130(*($0 + [4]), $1)
	*($2 + [104]) = ($2 + [93])
	*($2 + [100]) = $2
	*($2 + [96]) = $2
	*($2 + [112]) = ($2 + [96])
	$4 = ($1 + [8])
	*($2 + [124]) = $4
	*($2 + [120]) = $1
	*($2 + [128]) = ($1 + [16])
	*($2 + [132]) = ($1 + [24])
	*($2 + [136]) = ($1 + [32])
	*($2 + [140]) = ($1 + [40])
	*($2 + [144]) = ($1 + [48])
	*($2 + [148]) = ($1 + [64])
	*($2 + [152]) = ($1 + [80])
	*($2 + [156]) = ($1 + [96])
	CALL $131(($2 + [120]), ($2 + [112]))
	$5 = *($1)
	*($1 + [104]) = CALL db_store_i64(*($3 + [8]), (int_64)-4994024801686257664, *(*($0 + [8])), $5, $2, [93])
	if ( (uint_64)($5 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$3 = ($3 + [8])
	$5 = *($3)
	$0 = *(($0 + [8]))
	$6 = *($0)
	$7 = *($1)
	*($2 + [120]) = *($1 + [16])
	*($1 + [108]) = CALL db_idx64_store($5, (int_64)-4994024801686257664, $6, $7, ($2 + [120]))
	$5 = *($0)
	$6 = *($3)
	$7 = *($1)
	*($2 + [120]) = *($1 + [24])
	*(($1 + [112])) = CALL db_idx64_store($6, (int_64)-4994024801686257663, $5, $7, ($2 + [120]))
	$5 = *($0)
	$6 = *($3)
	$7 = *($1)
	*($2 + [120]) = *($4)
	*(($1 + [116])) = CALL db_idx64_store($6, (int_64)-4994024801686257662, $5, $7, ($2 + [120]))
	$global$0 = ($2 + [160])
}

void .FUNC $3 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, float_64 $4, float_64 $5)
{
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = ($global$0 - [96])
	$global$0 = $6
	*($6 + [80]) = $4
	*($6 + [88]) = $1
	*($6 + [72]) = $5
	CALL require_auth($1)
	$7 = *($2)
	if ( ($7 & [1]) ){ goto $label$2 }
	$7 = uint_32($7 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$7 = *($2 + [4])
	
.LABEL $label$1
	CALL eosio_assert(($7 <= [56]), [8700])
	$7 = *($3)
	if ( ($7 & [1]) ){ goto $label$4 }
	$7 = uint_32($7 >> [1])
	goto $label$3 
	
.LABEL $label$4
	$7 = *($3 + [4])
	
.LABEL $label$3
	CALL eosio_assert(($7 <= [101]), [8738])
	CALL eosio_assert(((int_32)((((float_64)$4 == (float_64)(float_64)0) | (((float_64)$4 < (float_64)(float_64)-90) | ((float_64)$4 > (float_64)(float_64)90))) | (((float_64)$5 == (float_64)(float_64)0) | (((float_64)$5 < (float_64)(float_64)-180) | ((float_64)$5 > (float_64)(float_64)180)))) ^ (int_32)[1]), [8780])
	*(($6 + [64])) = [0]
	*($6 + [48]) = (int_64)-1
	*($6 + [56]) = (int_64)0
	*($6 + [68]) = [0]
	$8 = *($0 + [8])
	*($6 + [32]) = $8
	*($6 + [40]) = $8
	*($6 + [16]) = $2
	*($6 + [20]) = $3
	*($6 + [12]) = ($6 + [88])
	*($6 + [8]) = ($6 + [32])
	*($6 + [24]) = ($6 + [80])
	*($6 + [28]) = ($6 + [72])
	CALL $39($6, ($6 + [32]), $1, ($6 + [8]))
	$0 = *($6 + [56])
	if ( ($0 == 0) ){ goto $label$5 }
	$7 = ($6 + [60])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = ($3 + [-24])
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	CALL $40($2)
	CALL _ZdlPv($2)
	
.LABEL $label$9
	if ( ((int_32)$0 != (int_32)$3) ){ goto $label$8 }
	$3 = *(($6 + [56]))
	goto $label$6 
	
.LABEL $label$7
	$3 = $0
	
.LABEL $label$6
	*($7) = $0
	CALL _ZdlPv($3)
	
.LABEL $label$5
	$global$0 = ($6 + [96])
}

int_32 .FUNC $189 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$5 = uint_32($5 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($5 - $1)
	$2 = ( $7 ? $2 : ($7 <= $2) )
	$8 = [10]
	if ( ($6 == 0) ){ goto $label$4 }
	$8 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)(($2 - $5) + $8) >= (uint_32)$4) ){ goto $label$5 }
	CALL $181($0, $8, ((($5 + $4) - $2) - $8), $5, $1, $2, $4, $3)
	return $0
	
.LABEL $label$5
	if ( $6 ){ goto $label$11 }
	$8 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$8 = *($0 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$10
	$2 = $4
	$6 = $4
	if ( ($6 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = ($7 - $2)
	if ( ($9 == 0) ){ goto $label$13 }
	$7 = ($8 + $1)
	if ( ((uint_32)$2 <= (uint_32)$4) ){ goto $label$12 }
	if ( ($4 == 0) ){ goto $label$14 }
	CALL memmove($7, $3, $4)
	
.LABEL $label$14
	CALL memmove(($7 + $4), ($7 + $2), $9)
	goto $label$6 
	
.LABEL $label$13
	$6 = $4
	if ( $6 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$15 }
	if ( ((uint_32)($8 + $5) <= (uint_32)$3) ){ goto $label$15 }
	if ( ((uint_32)($7 + $2) <= (uint_32)$3) ){ goto $label$16 }
	if ( ($2 == 0) ){ goto $label$17 }
	CALL memmove($7, $3, $2)
	
.LABEL $label$17
	$6 = ($4 - $2)
	$3 = ($3 + $4)
	$1 = ($2 + $1)
	$2 = [0]
	$4 = ($8 + $1)
	CALL memmove(($6 + $4), ($4 + [0]), $9)
	if ( $6 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$16
	$3 = ($3 + ($4 - $2))
	
.LABEL $label$15
	$6 = $4
	CALL memmove(($7 + $6), ($7 + $2), $9)
	if ( $6 ){ goto $label$7 }
	
.LABEL $label$8
	$4 = [0]
	goto $label$6 
	
.LABEL $label$7
	CALL memmove(($8 + $1), $3, $6)
	$4 = $6
	
.LABEL $label$6
	$4 = (($4 - $2) + $5)
	if ( (*($0) & [1]) ){ goto $label$18 }
	*($0) = ($4 << [1])
	*(($8 + $4)) = [0]
	return $0
	
.LABEL $label$18
	*($0 + [4]) = $4
	*(($8 + $4)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $188 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $187($0, $1, $2, CALL $208($2))
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$4 = ($global$0 - [128])
	$global$0 = $4
	*(($5 = $4) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	*($5 + [24]) = *($1 + [8])
	*($5 + [32]) = *($1 + [96])
	$2 = *($1)
	*($5 + [16]) = $2
	$6 = ($1 + [96])
	$7 = *($3 + [8])
	if ( ((int_64)*(*($3)) != (int_64)*(*(*($3 + [4]) + [4]) + [136])) ){ goto $label$2 }
	$8 = ($1 + [144])
	CALL $180($8, $7)
	$9 = ($1 + [40])
	goto $label$1 
	
.LABEL $label$2
	$9 = ($1 + [40])
	CALL $180($9, $7)
	$8 = ($1 + [144])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [9476])
	*($5 + [48]) = [0]
	*($5) = ($5 + [48])
	$10 = ($1 + [8])
	*($5 + [60]) = $10
	*($5 + [56]) = $1
	$11 = ($1 + [16])
	*($5 + [64]) = $11
	$12 = ($1 + [28])
	*($5 + [68]) = $12
	*($5 + [72]) = $9
	$13 = ($1 + [52])
	*($5 + [76]) = $13
	$14 = ($1 + [64])
	*($5 + [80]) = $14
	$15 = ($1 + [80])
	*($5 + [84]) = $15
	$16 = ($1 + [88])
	*($5 + [88]) = $16
	*($5 + [92]) = $6
	$17 = ($1 + [104])
	*($5 + [96]) = $17
	$18 = ($1 + [108])
	*($5 + [100]) = $18
	$19 = ($1 + [112])
	*($5 + [104]) = $19
	$20 = ($1 + [124])
	*($5 + [108]) = $20
	$21 = ($1 + [136])
	*($5 + [112]) = $21
	*($5 + [116]) = $8
	$22 = ($1 + [156])
	*($5 + [120]) = $22
	CALL $103(($5 + [56]), $5)
	$7 = *($5 + [48])
	if ( ($7 <= [513]) ){ goto $label$4 }
	$3 = CALL $211($7)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($4 - (($7 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $7)
	*($5 + [48]) = $5
	*($5 + [60]) = $10
	*($5 + [64]) = $11
	*($5 + [68]) = $12
	*($5 + [72]) = $9
	*($5 + [76]) = $13
	*($5 + [80]) = $14
	*($5 + [84]) = $15
	*($5 + [88]) = $16
	*($5 + [92]) = $6
	*($5 + [96]) = $17
	*($5 + [100]) = $18
	*($5 + [104]) = $19
	*($5 + [108]) = $20
	*($5 + [112]) = $21
	*($5 + [116]) = $8
	*($5 + [120]) = $22
	*($5 + [56]) = $1
	CALL $104(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [172]), *($5 + [40]), $3, $7)
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $214($3)
	
.LABEL $label$5
	$3 = ($0 + [36])
	$2 = *($5 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($5 + [60]) = $1
	*($5 + [56]) = $0
	*($5 + [68]) = $1
	*($5 + [64]) = ($5 + [24])
	*($5 + [72]) = ($5 + [16])
	*($5 + [76]) = ($5 + [40])
	*($5 + [48]) = ($5 + [56])
	CALL $112(($5 + [48]), $3, ($3 + [1]))
	$global$0 = ($5 + [128])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$1 = CALL $178($2, ($1 + [16]))
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$6 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($6) + $0))
	
.LABEL $label$1
	$5 = CALL $178(($2 + [16]), $1)
	CALL void $6((int_32 $4), (int_64 $3), (int_64 $5), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC memory ()
{
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8832])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([184])) + [8]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72]) = [0]
	*($3 + [112 align=4]) = (int_64)0
	*($3 + [120 align=4]) = (int_64)0
	*($3 + [128 align=4]) = (int_64)0
	*($3 + [136]) = (int_64)0
	*($3 + [144 align=4]) = (int_64)0
	*($3 + [152 align=4]) = (int_64)0
	*($3 + [160 align=4]) = (int_64)0
	*($3 + [168]) = $1
	CALL $110(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [172])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $101(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $40($3)
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$global$0 = $2
	$8 = CALL $178($2, ($1 + [104]))
	$7 = CALL $178(($2 + [16]), ($1 + [64]))
	$6 = CALL $178(($2 + [32]), ($1 + [52]))
	$5 = CALL $178(($2 + [48]), ($1 + [40]))
	$4 = CALL $178(($2 + [64]), ($1 + [28]))
	$3 = CALL $178(($2 + [80]), ($1 + [16]))
	CALL $167($0, *($1), *($1 + [8]), $3, $4, $5, $6, $7, *($1 + [80]), *($1 + [88]), *($1 + [96]), $8, *($1 + [116]), *($1 + [120]))
	if ( (*($8) & [1]) ){ goto $label$11 }
	if ( (*($7) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($7 + [8]))
	$1 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$1 = [1]
	if ( (*($6) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	if ( (*($5) & $1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $1) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [96])
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($4 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $44(*($1), ($4 + [16]))
	CALL $44(*($1), ($4 + [28]))
	CALL $44(*($1), ($4 + [40]))
	CALL $44(*($1), ($4 + [52]))
	CALL $44(*($1), ($4 + [64]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($4 + [80]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($2 + [8]) = $4
	CALL $166(($2 + [8]), $1)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	if ( (*($0 + [156]) & [1]) ){ goto $label$17 }
	if ( (*($0 + [144]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*(($0 + [164])))
	if ( ((*($0 + [144]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*(($0 + [152])))
	$1 = [1]
	if ( ((*($0 + [124]) & [1]) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$1 = [1]
	if ( (*($0 + [124]) & [1]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($0 + [112]) & $1) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*(($0 + [132])))
	if ( ((*($0 + [112]) & $1) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($0 + [120])))
	$1 = [1]
	if ( ((*($0 + [64]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$1 = [1]
	if ( (*($0 + [64]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	if ( (*($0 + [52]) & $1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($0 + [72])))
	if ( ((*($0 + [52]) & $1) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($0 + [60])))
	$1 = [1]
	if ( ((*($0 + [40]) & [1]) == 0) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$1 = [1]
	if ( (*($0 + [40]) & [1]) ){ goto $label$5 }
	
.LABEL $label$6
	if ( (*($0 + [28]) & $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL _ZdlPv(*(($0 + [48])))
	if ( ((*($0 + [28]) & $1) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*(($0 + [36])))
	if ( ((*($0 + [16]) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($0 + [16]) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	return $0
	
.LABEL $label$1
	CALL _ZdlPv(*(($0 + [24])))
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$4 = ($global$0 - [128])
	$global$0 = $4
	*(($5 = $4) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	*($5 + [24]) = *($1 + [8])
	*($5 + [32]) = *($1 + [96])
	$2 = *($1)
	*($5 + [16]) = $2
	$6 = ($1 + [16])
	CALL $180($6, *($3))
	$7 = ($1 + [28])
	CALL $180($7, *($3 + [4]))
	$8 = ($1 + [40])
	CALL $180($8, *($3 + [8]))
	$9 = ($1 + [64])
	CALL $180($9, *($3 + [12]))
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [9476])
	*($5 + [48]) = [0]
	*($5) = ($5 + [48])
	$10 = ($1 + [8])
	*($5 + [60]) = $10
	*($5 + [56]) = $1
	*($5 + [64]) = $6
	*($5 + [68]) = $7
	*($5 + [72]) = $8
	$11 = ($1 + [52])
	*($5 + [76]) = $11
	*($5 + [80]) = $9
	$12 = ($1 + [80])
	*($5 + [84]) = $12
	$13 = ($1 + [88])
	*($5 + [88]) = $13
	$14 = ($1 + [96])
	*($5 + [92]) = $14
	$15 = ($1 + [104])
	*($5 + [96]) = $15
	$16 = ($1 + [108])
	*($5 + [100]) = $16
	$17 = ($1 + [112])
	*($5 + [104]) = $17
	$18 = ($1 + [124])
	*($5 + [108]) = $18
	$19 = ($1 + [136])
	*($5 + [112]) = $19
	$20 = ($1 + [144])
	*($5 + [116]) = $20
	$21 = ($1 + [156])
	*($5 + [120]) = $21
	CALL $103(($5 + [56]), $5)
	$22 = *($5 + [48])
	if ( ($22 <= [513]) ){ goto $label$2 }
	$3 = CALL $211($22)
	goto $label$1 
	
.LABEL $label$2
	$3 = ($4 - (($22 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$1
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $22)
	*($5 + [48]) = $5
	*($5 + [60]) = $10
	*($5 + [64]) = $6
	*($5 + [68]) = $7
	*($5 + [72]) = $8
	*($5 + [76]) = $11
	*($5 + [80]) = $9
	*($5 + [84]) = $12
	*($5 + [88]) = $13
	*($5 + [92]) = $14
	*($5 + [96]) = $15
	*($5 + [100]) = $16
	*($5 + [104]) = $17
	*($5 + [108]) = $18
	*($5 + [112]) = $19
	*($5 + [116]) = $20
	*($5 + [120]) = $21
	*($5 + [56]) = $1
	CALL $104(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [172]), *($5 + [40]), $3, $22)
	if ( ($22 <= [513]) ){ goto $label$3 }
	CALL $214($3)
	
.LABEL $label$3
	$3 = ($0 + [36])
	$2 = *($5 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [60]) = $1
	*($5 + [56]) = $0
	*($5 + [68]) = $1
	*($5 + [64]) = ($5 + [24])
	*($5 + [72]) = ($5 + [16])
	*($5 + [76]) = ($5 + [40])
	*($5 + [48]) = ($5 + [56])
	CALL $111(($5 + [48]), $3, ($3 + [1]))
	$global$0 = ($5 + [128])
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [112])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [112])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8943])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $211($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([184])) + [8]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48 align=4]) = (int_64)0
	*($5 + [56 align=4]) = (int_64)0
	*($5 + [64 align=4]) = (int_64)0
	*($5 + [72]) = [0]
	*($5 + [112 align=4]) = (int_64)0
	*($5 + [120 align=4]) = (int_64)0
	*($5 + [128 align=4]) = (int_64)0
	*($5 + [136]) = (int_64)0
	*($5 + [144 align=4]) = (int_64)0
	*($5 + [152 align=4]) = (int_64)0
	*($5 + [160 align=4]) = (int_64)0
	*($5 + [168]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [28])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [52])
	*($3 + [64]) = ($5 + [64])
	*($3 + [68]) = ($5 + [80])
	*($3 + [72]) = ($5 + [88])
	*($3 + [76]) = ($5 + [96])
	*($3 + [80]) = ($5 + [104])
	*($3 + [84]) = ($5 + [108])
	*($3 + [88]) = ($5 + [112])
	*($3 + [92]) = ($5 + [124])
	*($3 + [96]) = ($5 + [136])
	*($3 + [100]) = ($5 + [144])
	*($3 + [104]) = ($5 + [156])
	CALL $106(($3 + [40]), ($3 + [32]))
	*($5 + [172]) = $1
	*($5 + [176 align=4]) = (int_64)-1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $101(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $214($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $40($1)
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [112])
	return $5
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [64])
	$global$0 = $2
	$1 = CALL $178($2, ($1 + [52]))
	$5 = CALL $178(($2 + [16]), ($1 + [40]))
	$4 = CALL $178(($2 + [32]), ($1 + [28]))
	$3 = CALL $178(($2 + [48]), ($1 + [16]))
	CALL $168($0, *($1), *($1 + [8]), $3, $4, $5, $1)
	if ( (*($1) & [1]) ){ goto $label$7 }
	if ( (*($5) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*($5 + [8]))
	$1 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = [1]
	if ( (*($4) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( (*($3) & $1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $1) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($2 + [64])
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $107($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $182($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $182($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $177($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $167 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, float_64 $8, float_64 $9, int_64 $10, int_32 $11, int_32 $12, int_32 $13)
{
	int_32 $14
	int_32 $15
	int_32 $16
	$14 = ($global$0 - [96])
	$global$0 = $14
	$0 = *($0 + [4])
	$15 = *($0 + [4])
	$16 = (*($0) + int_32($15 >> [1]))
	$0 = *($0)
	if ( (($15 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($16) + $0))
	
.LABEL $label$1
	$11 = CALL $178($14, $11)
	$7 = CALL $178(($14 + [16]), $7)
	$6 = CALL $178(($14 + [32]), $6)
	$5 = CALL $178(($14 + [48]), $5)
	$4 = CALL $178(($14 + [64]), $4)
	$3 = CALL $178(($14 + [80]), $3)
	CALL void $16((int_32 $1), (int_64 $2), (int_64 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $7), (int_32 $8), (int_64 $9), (int_64 $10), (int_64 $11), (int_32 $12), (int_32 $13), (int_32 $0))
	if ( (*($11) & [1]) ){ goto $label$12 }
	if ( (*($7) & [1]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL _ZdlPv(*($11 + [8]))
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL _ZdlPv(*($7 + [8]))
	$0 = [1]
	if ( ((*($6) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$0 = [1]
	if ( (*($6) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($5) & $0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & $0) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($4) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($14 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($14 + [96])
}

void .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [88]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($3 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $44(*($1), ($3 + [104]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy(($3 + [116]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy(($3 + [120]), *($1 + [4]), [4])
	*($1 + [4]) = (*($1 + [4]) + [4])
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $207(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [176])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3615145394423463936, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [176]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [96])
	if ( (CALL $207((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [180]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3615145394423463935, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [180])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

int_32 .FUNC $164 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [60]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9029])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2688959059892301568)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8975])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8975])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $69(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $109(*($1), *($0 + [16]))
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9077])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-2688959059892301568, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $69($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $164(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [8891])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = *(*($0 + [4]))
	CALL $180(($1 + [40]), *($0 + [8]))
	*($1 + [16]) = *(*($0 + [12]))
	$3 = *($0 + [20])
	$6 = *($3 + [8])
	$0 = *($0 + [16])
	$4 = *($3)
	CALL eosio_assert(((int_64)$4 < (int_64)2305843009213693952), [12247])
	CALL eosio_assert(((int_64)$4 > (int_64)-2305843009213693952), [12271])
	$7 = *($0)
	$8 = *($0 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$8), [11431])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($7 - ((int_64)$4 << (int_64)1))) > (int_64)-4611686018427387904), [11479])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [11501])
	*(($1 + [32])) = $8
	*($1 + [24]) = $4
	*($1 + [52]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $161 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [48]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9029])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-2688959069660504064)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8975])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8975])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $67(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $160 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	*($1) = *(*($0))
	$0 = *($0 + [4])
	*(($1 + [16])) = *(($0 + [8]))
	*($1 + [8]) = *($0)
	$2 = (int_64)0
	*($1 + [24]) = (int_64)0
	$0 = CALL $208([9686])
	if ( ($0 <= [8]) ){ goto $label$3 }
	CALL eosio_assert([0], [9690])
	goto $label$2 
	
.LABEL $label$3
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = (int_64)0
	
.LOOP $label$4:
	$3 = *(($0 + [9685]))
	if ( ((($3 + [-65]) & [255]) <= [26]) ){ goto $label$5 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$5
	$2 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$4 }
	
.LABEL $label$1
	CALL eosio_assert([1], [9788])
	$4 = ((int_64)$2 & (int_64)72057594037927935)
	$5 = ((int_64)((int_64)$2 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$4 = $2
	$3 = [1]
	$6 = $0
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$4 = $2
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$6 = ($0 + [1])
	$0 = $6
	if ( $3 ){ goto $label$10 }
	$3 = [1]
	$0 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [9837])
	*(($1 + [40])) = $5
	*($1 + [32]) = (int_64)0
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $211($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [12316])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $211($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $168 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = ($global$0 - [64])
	$global$0 = $7
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$9 = (*($0) + int_32($8 >> [1]))
	$0 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	$6 = CALL $178($7, $6)
	$5 = CALL $178(($7 + [16]), $5)
	$4 = CALL $178(($7 + [32]), $4)
	$3 = CALL $178(($7 + [48]), $3)
	CALL void $9((int_32 $1), (int_64 $2), (int_64 $3), (int_32 $4), (int_32 $5), (int_32 $6), (int_32 $0))
	if ( (*($6) & [1]) ){ goto $label$8 }
	if ( (*($5) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($5 + [8]))
	$0 = [1]
	if ( ((*($4) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($4) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($3) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($3) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($3 + [8]))
	$global$0 = ($7 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($7 + [64])
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $214($0)
	
.LABEL $label$1
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8943])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $211($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [52]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [32])
	*($3 + [56]) = ($5 + [48])
	CALL $118(($3 + [40]), ($3 + [32]))
	*($5 + [56]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $119(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $214($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$4 = ($global$0 - [128])
	$global$0 = $4
	*(($5 = $4) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	*($5 + [24]) = *($1 + [8])
	*($5 + [32]) = *($1 + [96])
	$2 = *($1)
	*($5 + [16]) = $2
	CALL $120($3, $1)
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [9476])
	*($5 + [48]) = [0]
	*($5) = ($5 + [48])
	$6 = ($1 + [8])
	*($5 + [60]) = $6
	*($5 + [56]) = $1
	$7 = ($1 + [16])
	*($5 + [64]) = $7
	$8 = ($1 + [28])
	*($5 + [68]) = $8
	$9 = ($1 + [40])
	*($5 + [72]) = $9
	$10 = ($1 + [52])
	*($5 + [76]) = $10
	$11 = ($1 + [64])
	*($5 + [80]) = $11
	$12 = ($1 + [80])
	*($5 + [84]) = $12
	$13 = ($1 + [88])
	*($5 + [88]) = $13
	$14 = ($1 + [96])
	*($5 + [92]) = $14
	$15 = ($1 + [104])
	*($5 + [96]) = $15
	$16 = ($1 + [108])
	*($5 + [100]) = $16
	$17 = ($1 + [112])
	*($5 + [104]) = $17
	$18 = ($1 + [124])
	*($5 + [108]) = $18
	$19 = ($1 + [136])
	*($5 + [112]) = $19
	$20 = ($1 + [144])
	*($5 + [116]) = $20
	$21 = ($1 + [156])
	*($5 + [120]) = $21
	CALL $103(($5 + [56]), $5)
	$3 = *($5 + [48])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $211($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [48]) = $5
	*($5 + [60]) = $6
	*($5 + [64]) = $7
	*($5 + [68]) = $8
	*($5 + [72]) = $9
	*($5 + [76]) = $10
	*($5 + [80]) = $11
	*($5 + [84]) = $12
	*($5 + [88]) = $13
	*($5 + [92]) = $14
	*($5 + [96]) = $15
	*($5 + [100]) = $16
	*($5 + [104]) = $17
	*($5 + [108]) = $18
	*($5 + [112]) = $19
	*($5 + [116]) = $20
	*($5 + [120]) = $21
	*($5 + [56]) = $1
	CALL $104(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [172]), *($5 + [40]), $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $214($4)
	
.LABEL $label$3
	$4 = ($0 + [36])
	$2 = *($5 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [60]) = $1
	*($5 + [56]) = $0
	*($5 + [68]) = $1
	*($5 + [64]) = ($5 + [24])
	*($5 + [72]) = ($5 + [16])
	*($5 + [76]) = ($5 + [40])
	*($5 + [48]) = ($5 + [56])
	CALL $121(($5 + [48]), $4, ($4 + [1]))
	$global$0 = ($5 + [128])
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$4 = ($global$0 - [128])
	$global$0 = $4
	*(($5 = $4) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	*($5 + [24]) = *($1 + [8])
	*($5 + [32]) = *($1 + [96])
	$2 = *($1)
	*($5 + [16]) = $2
	$6 = ($1 + [156])
	CALL $180($6, *($3))
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [9476])
	*($5 + [48]) = [0]
	*($5) = ($5 + [48])
	$7 = ($1 + [8])
	*($5 + [60]) = $7
	*($5 + [56]) = $1
	$8 = ($1 + [16])
	*($5 + [64]) = $8
	$9 = ($1 + [28])
	*($5 + [68]) = $9
	$10 = ($1 + [40])
	*($5 + [72]) = $10
	$11 = ($1 + [52])
	*($5 + [76]) = $11
	$12 = ($1 + [64])
	*($5 + [80]) = $12
	$13 = ($1 + [80])
	*($5 + [84]) = $13
	$14 = ($1 + [88])
	*($5 + [88]) = $14
	$15 = ($1 + [96])
	*($5 + [92]) = $15
	$16 = ($1 + [104])
	*($5 + [96]) = $16
	$17 = ($1 + [108])
	*($5 + [100]) = $17
	$18 = ($1 + [112])
	*($5 + [104]) = $18
	$19 = ($1 + [124])
	*($5 + [108]) = $19
	$20 = ($1 + [136])
	*($5 + [112]) = $20
	$21 = ($1 + [144])
	*($5 + [116]) = $21
	*($5 + [120]) = $6
	CALL $103(($5 + [56]), $5)
	$3 = *($5 + [48])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $211($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [48]) = $5
	*($5 + [60]) = $7
	*($5 + [64]) = $8
	*($5 + [68]) = $9
	*($5 + [72]) = $10
	*($5 + [76]) = $11
	*($5 + [80]) = $12
	*($5 + [84]) = $13
	*($5 + [88]) = $14
	*($5 + [92]) = $15
	*($5 + [96]) = $16
	*($5 + [100]) = $17
	*($5 + [104]) = $18
	*($5 + [108]) = $19
	*($5 + [112]) = $20
	*($5 + [116]) = $21
	*($5 + [120]) = $6
	*($5 + [56]) = $1
	CALL $104(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [172]), *($5 + [40]), $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $214($4)
	
.LABEL $label$3
	$4 = ($0 + [36])
	$2 = *($5 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [60]) = $1
	*($5 + [56]) = $0
	*($5 + [68]) = $1
	*($5 + [64]) = ($5 + [24])
	*($5 + [72]) = ($5 + [16])
	*($5 + [76]) = ($5 + [40])
	*($5 + [48]) = ($5 + [56])
	CALL $113(($5 + [48]), $4, ($4 + [1]))
	$global$0 = ($5 + [128])
}

void .FUNC $51 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-4994024801686257663, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [100]) == (int_32)$7), [9293])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $72($7, CALL $fimport$5(*($7), *($7 + [8]), (int_64)-4994024801686257664, $6))
	CALL eosio_assert(((int_32)*($4 + [100]) == (int_32)$7), [9293])
	
.LABEL $label$2
	*(($4 + [112])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $2
	if ( $2 ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = *($1 + [8])
	if ( *($3 + [12]) ){ goto $label$3 }
	$4 = ($3 + [12])
	$2 = *($3 + [8])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$2 }
	if ( *($5 + [12]) ){ goto $label$2 }
	$3 = ($5 + [12])
	goto $label$5 
	
.LABEL $label$6
	$5 = *($2 + [4])
	if ( ($5 == 0) ){ goto $label$1 }
	if ( *($5 + [12]) ){ goto $label$1 }
	$3 = ($5 + [12])
	
.LABEL $label$5
	*($4) = [1]
	*($2 + [12]) = ((int_32)$2 == (int_32)$0)
	*($3) = [1]
	$1 = $2
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	if ( ((int_32)*($3) != (int_32)$1) ){ goto $label$7 }
	$5 = *($1 + [4])
	*($3) = $5
	if ( ($5 == 0) ){ goto $label$8 }
	*($5 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$8
	*(($5 = ($1 + [8]))) = $2
	*((($0 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($0) == (int_32)$3) ))) = $1
	*($2) = $1
	*(($1 + [4])) = $3
	$4 = ($1 + [12])
	$2 = *($5)
	
.LABEL $label$7
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2 + [4])
	$5 = *($3)
	*($2 + [4]) = $5
	if ( ($5 == 0) ){ goto $label$9 }
	*($5 + [8]) = $2
	
.LABEL $label$9
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*($3) = $2
	return 
	
.LABEL $label$1
	if ( ((int_32)*($3) == (int_32)$1) ){ goto $label$10 }
	$5 = *($3 + [4])
	$1 = *($5)
	*($3 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $3
	$2 = *(($3 + [8]))
	
.LABEL $label$11
	*($5 + [8]) = $2
	*((($1 = *(($2 = ($3 + [8])))) + ( [0] ? [4] : ((int_32)*($1) == (int_32)$3) ))) = $5
	*($2) = $5
	*($5) = $3
	$4 = ($5 + [12])
	$2 = *($5 + [8])
	
.LABEL $label$10
	*($4) = [1]
	*($2 + [12]) = [0]
	$3 = *($2)
	$5 = *($3 + [4])
	*($2) = $5
	if ( ($5 == 0) ){ goto $label$12 }
	*($5 + [8]) = $2
	
.LABEL $label$12
	*($3 + [8]) = *($2 + [8])
	*((($5 = *($2 + [8])) + ( [0] ? [4] : ((int_32)*($5) == (int_32)$2) ))) = $3
	*($2 + [8]) = $3
	*(($3 + [4])) = $2
}

int_32 .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [9535])
	$3 = *($0 + [4])
	$4 = *(($3 + [112]))
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$1 }
	$4 = *(*($0))
	$4 = CALL db_idx64_find_primary(*($4), *($4 + [8]), (int_64)-4994024801686257663, ($1 + [8]), *($3))
	*((*(($0 + [4])) + [112])) = $4
	
.LABEL $label$1
	*($1 + [8]) = (int_64)0
	$5 = CALL db_idx64_next($4, ($1 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	$6 = *($1 + [8])
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	
.LOOP $label$6:
	$4 = ($3 + [-24])
	$2 = *($4)
	if ( ((int_64)*($2) == (int_64)$6) ){ goto $label$5 }
	$3 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$7), [9293])
	goto $label$3 
	
.LABEL $label$4
	$2 = [0]
	$4 = CALL db_find_i64(*($7), *($7 + [8]), (int_64)-4994024801686257664, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $72($7, $4)
	CALL eosio_assert(((int_32)*($2 + [100]) == (int_32)$7), [9293])
	
.LABEL $label$3
	*(($2 + [112])) = $5
	
.LABEL $label$2
	*(($0 + [4])) = $2
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$4 = ($global$0 - [128])
	$global$0 = $4
	*(($5 = $4) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	*($5 + [24]) = *($1 + [8])
	*($5 + [32]) = *($1 + [96])
	$2 = *($1)
	*($5 + [16]) = $2
	$6 = ($1 + [124])
	CALL $183($6, [9565])
	*($1 + [96]) = *(*($3))
	*($1 + [108]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [94608000])
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [9476])
	*($5 + [48]) = [0]
	*($5) = ($5 + [48])
	$7 = ($1 + [8])
	*($5 + [60]) = $7
	*($5 + [56]) = $1
	$8 = ($1 + [16])
	*($5 + [64]) = $8
	$9 = ($1 + [28])
	*($5 + [68]) = $9
	$10 = ($1 + [40])
	*($5 + [72]) = $10
	$11 = ($1 + [52])
	*($5 + [76]) = $11
	$12 = ($1 + [64])
	*($5 + [80]) = $12
	$13 = ($1 + [80])
	*($5 + [84]) = $13
	$14 = ($1 + [88])
	*($5 + [88]) = $14
	$15 = ($1 + [96])
	*($5 + [92]) = $15
	$16 = ($1 + [104])
	*($5 + [96]) = $16
	$17 = ($1 + [108])
	*($5 + [100]) = $17
	$18 = ($1 + [112])
	*($5 + [104]) = $18
	*($5 + [108]) = $6
	$19 = ($1 + [136])
	*($5 + [112]) = $19
	$20 = ($1 + [144])
	*($5 + [116]) = $20
	$21 = ($1 + [156])
	*($5 + [120]) = $21
	CALL $103(($5 + [56]), $5)
	$3 = *($5 + [48])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$4 = CALL $211($3)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [48]) = $5
	*($5 + [60]) = $7
	*($5 + [64]) = $8
	*($5 + [68]) = $9
	*($5 + [72]) = $10
	*($5 + [76]) = $11
	*($5 + [80]) = $12
	*($5 + [84]) = $13
	*($5 + [88]) = $14
	*($5 + [92]) = $15
	*($5 + [96]) = $16
	*($5 + [100]) = $17
	*($5 + [104]) = $18
	*($5 + [108]) = $6
	*($5 + [112]) = $19
	*($5 + [116]) = $20
	*($5 + [120]) = $21
	*($5 + [56]) = $1
	CALL $104(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [172]), *($5 + [40]), $4, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL $214($4)
	
.LABEL $label$3
	$4 = ($0 + [36])
	$2 = *($5 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [60]) = $1
	*($5 + [56]) = $0
	*($5 + [68]) = $1
	*($5 + [64]) = ($5 + [24])
	*($5 + [72]) = ($5 + [16])
	*($5 + [76]) = ($5 + [40])
	*($5 + [48]) = ($5 + [56])
	CALL $116(($5 + [48]), $4, ($4 + [1]))
	$global$0 = ($5 + [128])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $55($0, *($1))
	CALL $55($0, *($1 + [4]))
	CALL _ZdlPv($1)
	
.LABEL $label$1
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$4 = ($global$0 - [128])
	$global$0 = $4
	*(($5 = $4) + [40]) = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	*($5 + [24]) = *($1 + [8])
	*($5 + [32]) = *($1 + [96])
	$2 = *($1)
	*($5 + [16]) = $2
	*($1 + [108]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [94608000])
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [9476])
	*($5 + [48]) = [0]
	*($5) = ($5 + [48])
	$6 = ($1 + [8])
	*($5 + [60]) = $6
	*($5 + [56]) = $1
	$7 = ($1 + [16])
	*($5 + [64]) = $7
	$8 = ($1 + [28])
	*($5 + [68]) = $8
	$9 = ($1 + [40])
	*($5 + [72]) = $9
	$10 = ($1 + [52])
	*($5 + [76]) = $10
	$11 = ($1 + [64])
	*($5 + [80]) = $11
	$12 = ($1 + [80])
	*($5 + [84]) = $12
	$13 = ($1 + [88])
	*($5 + [88]) = $13
	$14 = ($1 + [96])
	*($5 + [92]) = $14
	$15 = ($1 + [104])
	*($5 + [96]) = $15
	$16 = ($1 + [108])
	*($5 + [100]) = $16
	$17 = ($1 + [112])
	*($5 + [104]) = $17
	$18 = ($1 + [124])
	*($5 + [108]) = $18
	$19 = ($1 + [136])
	*($5 + [112]) = $19
	$20 = ($1 + [144])
	*($5 + [116]) = $20
	$21 = ($1 + [156])
	*($5 + [120]) = $21
	CALL $103(($5 + [56]), $5)
	$22 = *($5 + [48])
	if ( ($22 <= [513]) ){ goto $label$2 }
	$4 = CALL $211($22)
	goto $label$1 
	
.LABEL $label$2
	$4 = ($4 - (($22 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$1
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $22)
	*($5 + [48]) = $5
	*($5 + [60]) = $6
	*($5 + [64]) = $7
	*($5 + [68]) = $8
	*($5 + [72]) = $9
	*($5 + [76]) = $10
	*($5 + [80]) = $11
	*($5 + [84]) = $12
	*($5 + [88]) = $13
	*($5 + [92]) = $14
	*($5 + [96]) = $15
	*($5 + [100]) = $16
	*($5 + [104]) = $17
	*($5 + [108]) = $18
	*($5 + [112]) = $19
	*($5 + [116]) = $20
	*($5 + [120]) = $21
	*($5 + [56]) = $1
	CALL $104(($5 + [56]), ($5 + [48]))
	CALL db_update_i64(*($1 + [172]), *($5 + [40]), $4, $22)
	if ( ($22 <= [513]) ){ goto $label$3 }
	CALL $214($4)
	
.LABEL $label$3
	$4 = ($0 + [36])
	$2 = *($5 + [16])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($5 + [60]) = $1
	*($5 + [56]) = $0
	*($5 + [68]) = $1
	*($5 + [64]) = ($5 + [24])
	*($5 + [72]) = ($5 + [16])
	*($5 + [76]) = ($5 + [40])
	*($5 + [48]) = ($5 + [56])
	CALL $117(($5 + [48]), $4, ($4 + [1]))
	$global$0 = ($5 + [128])
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8966])
	CALL memcpy($2, *($4 + [4]), [8])
	*(($0 + [16])) = *($2)
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8966])
	CALL memcpy(($2 + [15]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($0 + [32]) = ((int_32)*($2 + [15]) != (int_32)[0])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($0 + [40]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $209(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [12316])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $209(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $152 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $153 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = $1
	$1 = *($2)
	$4 = *(*($2 + [4]))
	*($0) = *($4)
	*($0 + [8]) = *(($4 + [8]))
	CALL eosio_assert([1], [9077])
	CALL memcpy($3, $0, [8])
	*($3 + [24]) = *($0 + [8])
	CALL eosio_assert([1], [9077])
	CALL memcpy(($3 | [8]), ($3 + [24]), [8])
	$5 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)3607749779137757184, *(*($2 + [8])), $5), $3, [16])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($3 + [32])
	return $0
}

void .FUNC $150 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8832])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $153($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	*($4 + [16]) = $2)
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $154(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($0, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $156 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [11431])
	$6 = (int_64)
	*($1) = $6(*($1) - *($3)))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [11479])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [11501])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9476])
	CALL eosio_assert([1], [9077])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [9077])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-2688959069660504064, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $67($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $161(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [8891])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	$3 = *($0 + [16])
	$6 = *($3 + [8])
	$0 = *($0 + [12])
	$4 = *($3)
	CALL eosio_assert(((int_64)$4 < (int_64)2305843009213693952), [12247])
	CALL eosio_assert(((int_64)$4 > (int_64)-2305843009213693952), [12271])
	$7 = *($0)
	$8 = *($0 + [8])
	CALL eosio_assert(((int_64)$6 == (int_64)$8), [11431])
	$4 = (int_64)
	CALL eosio_assert(((int_64)$4($7 - ((int_64)$4 << (int_64)1))) > (int_64)-4611686018427387904), [11479])
	CALL eosio_assert(((int_64)$4 < (int_64)4611686018427387904), [11501])
	*(($1 + [32])) = $8
	*($1 + [24]) = $4
	*($1 + [40]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$global$0 = ($2 + [16])
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $155 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9293])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $148($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9293])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9077])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	CALL $162(*($0 + [4]), $1)
	$5 = *($1 + [40])
	$6 = ( *(($1 + [44])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [44])
	$7 = (CASTING uint_64)(uint_32 $6)
	$6 = ($1 + [40])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [8])
	*($3 + [24]) = $1
	*($3 + [32]) = ($1 + [16])
	*($3 + [36]) = ($1 + [24])
	*($3 + [40]) = $6
	*($3 + [44]) = ($1 + [52])
	CALL $163(($3 + [24]), ($3 + [16]))
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-2688959059892301568, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $214($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

int_32 .FUNC $179 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $183 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $208($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $181($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $181($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8943])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $211($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([72])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [56]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	*($3 + [60]) = ($5 + [52])
	CALL $136(($3 + [40]), ($3 + [32]))
	*($5 + [60]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $137(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $214($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [10621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10666])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10716])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [48]))
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$6 = *($1)
	$7 = ($1 + [8])
	CALL $180($7, *($3))
	$8 = *($3 + [4])
	*($1 + [24]) = *($8)
	*(($1 + [32])) = *(($8 + [8]))
	*($1 + [40]) = *(*($3 + [8]))
	*($1 + [44]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9476])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [32])
	$9 = (CASTING uint_64)(uint_32 $8)
	$8 = ($1 + [44])
	$10 = ($1 + [40])
	$11 = ($1 + [24])
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $211($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	*($5 + [16]) = $5
	*($5 + [28]) = $7
	*($5 + [32]) = $11
	*($5 + [36]) = $10
	*($5 + [40]) = $8
	*($5 + [24]) = $1
	CALL $141(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [52]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $214($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [48])
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8943])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $211($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([64]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [24])
	*($3 + [52]) = ($5 + [40])
	*($3 + [56]) = ($5 + [44])
	CALL $134(($3 + [40]), ($3 + [32]))
	*($5 + [52]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $135(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $214($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8943])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $211($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [44]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [40])
	CALL $142(($3 + [40]), ($3 + [32]))
	*($5 + [48]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $143(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $214($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [10621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10666])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10716])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	CALL $44(*($1), ($0 + [8]))
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($0 + [24]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [32])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy(($0 + [40]), *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [10621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10666])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10716])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $40($4)
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $40($6)
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [172]))
	$6 = *(($1 + [176]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$13 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3615145394423463936, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$12 }
	
.LABEL $label$13
	CALL db_idx64_remove($6)
	
.LABEL $label$12
	$6 = *(($1 + [180]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$15 }
	$6 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3615145394423463935, ($2 + [8]), *($1))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$15
	CALL db_idx64_remove($6)
	
.LABEL $label$14
	$global$0 = ($2 + [16])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8832])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([64]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16]) = [0]
	*($3 + [24]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [48]) = $1
	CALL $140(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $135(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $178(($2 + [32]), ($1 + [8]))
	*(($5 = (($2 + [16]) + [8]))) = *(($1 + [32]))
	*($2 + [16]) = *($1 + [24])
	$6 = *($1 + [40])
	*((($2 + [48]) + [8])) = *($5)
	*($2 + [48]) = *($2 + [16])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*($0) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$5 = CALL $178(($2 + [80]), $4)
	$7 = *((($2 + [48]) + [8]))
	*((($2 + [64]) + [8])) = $7
	*(($2 + [8])) = $7
	$7 = *($2 + [48])
	*($2) = $7
	*($2 + [64]) = $7
	CALL void $0((int_32 $3), (int_64 $5), (int_32 $2), (int_32 $6), (int_32 $1))
	if ( (*($2 + [80]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [736])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$2 }
	*($3 + [720]) = [8192]
	*($3 + [724]) = CALL $208([8192])
	*($3 + [352]) = *($3 + [720])
	CALL $2(($3 + [728]), ($3 + [352]))
	if ( ((int_64)$2 != (int_64)3626413274458084352) ){ goto $label$3 }
	*($3 + [716]) = [0]
	*($3 + [712]) = [1]
	*($3) = *($3 + [712])
	CALL $4($1, $1, $3)
	goto $label$1 
	
.LABEL $label$3
	*($3 + [704]) = [8213]
	*($3 + [708]) = CALL $208([8213])
	*($3 + [344]) = *($3 + [704])
	CALL $2(($3 + [728]), ($3 + [344]))
	if ( ((int_64)$2 != (int_64)3626413207242194944) ){ goto $label$4 }
	*($3 + [700]) = [0]
	*($3 + [696]) = [2]
	*($3 + [8]) = *($3 + [696])
	CALL $6($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$4
	*($3 + [688]) = [8310]
	*($3 + [692]) = CALL $208([8310])
	*($3 + [336]) = *($3 + [688])
	CALL $2(($3 + [728]), ($3 + [336]))
	if ( ((int_64)$2 != (int_64)-7704643388006083584) ){ goto $label$5 }
	*($3 + [684]) = [0]
	*($3 + [680]) = [3]
	*($3 + [16]) = *($3 + [680])
	CALL $8($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [672]) = [8322]
	*($3 + [676]) = CALL $208([8322])
	*($3 + [328]) = *($3 + [672])
	CALL $2(($3 + [728]), ($3 + [328]))
	if ( ((int_64)$2 != (int_64)-7704643388012455936) ){ goto $label$6 }
	*($3 + [668]) = [0]
	*($3 + [664]) = [4]
	*($3 + [24]) = *($3 + [664])
	CALL $10($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$6
	*($3 + [656]) = [8334]
	*($3 + [660]) = CALL $208([8334])
	*($3 + [320]) = *($3 + [656])
	CALL $2(($3 + [728]), ($3 + [320]))
	if ( ((int_64)$2 != (int_64)-7704643388011828944) ){ goto $label$7 }
	*($3 + [652]) = [0]
	*($3 + [648]) = [5]
	*($3 + [32]) = *($3 + [648])
	CALL $10($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$7
	*($3 + [640]) = [8347]
	*($3 + [644]) = CALL $208([8347])
	*($3 + [312]) = *($3 + [640])
	CALL $2(($3 + [728]), ($3 + [312]))
	if ( ((int_64)$2 != (int_64)3617214701385724304) ){ goto $label$8 }
	*($3 + [636]) = [0]
	*($3 + [632]) = [6]
	*($3 + [40]) = *($3 + [632])
	CALL $13($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$8
	*($3 + [624]) = [8360]
	*($3 + [628]) = CALL $208([8360])
	*($3 + [304]) = *($3 + [624])
	CALL $2(($3 + [728]), ($3 + [304]))
	if ( ((int_64)$2 != (int_64)-7704903781975425024) ){ goto $label$9 }
	*($3 + [620]) = [0]
	*($3 + [616]) = [7]
	*($3 + [48]) = *($3 + [616])
	CALL $15($1, $1, ($3 + [48]))
	goto $label$1 
	
.LABEL $label$9
	*($3 + [608]) = [8371]
	*($3 + [612]) = CALL $208([8371])
	*($3 + [296]) = *($3 + [608])
	CALL $2(($3 + [728]), ($3 + [296]))
	if ( ((int_64)$2 != (int_64)-4994301903166066048) ){ goto $label$10 }
	*($3 + [604]) = [0]
	*($3 + [600]) = [8]
	*($3 + [56]) = *($3 + [600])
	CALL $15($1, $1, ($3 + [56]))
	goto $label$1 
	
.LABEL $label$10
	*($3 + [592]) = [8384]
	*($3 + [596]) = CALL $208([8384])
	*($3 + [288]) = *($3 + [592])
	CALL $2(($3 + [728]), ($3 + [288]))
	if ( ((int_64)$2 != (int_64)-3106564271768194560) ){ goto $label$11 }
	*($3 + [588]) = [0]
	*($3 + [584]) = [9]
	*($3 + [64]) = *($3 + [584])
	CALL $18($1, $1, ($3 + [64]))
	goto $label$1 
	
.LABEL $label$11
	*($3 + [576]) = [8396]
	*($3 + [580]) = CALL $208([8396])
	*($3 + [280]) = *($3 + [576])
	CALL $2(($3 + [728]), ($3 + [280]))
	if ( ((int_64)$2 != (int_64)6182744540512138608) ){ goto $label$12 }
	*($3 + [572]) = [0]
	*($3 + [568]) = [10]
	*($3 + [72]) = *($3 + [568])
	CALL $15($1, $1, ($3 + [72]))
	goto $label$1 
	
.LABEL $label$12
	*($3 + [560]) = [8409]
	*($3 + [564]) = CALL $208([8409])
	*($3 + [272]) = *($3 + [560])
	CALL $2(($3 + [728]), ($3 + [272]))
	if ( ((int_64)$2 != (int_64)3626388803173416960) ){ goto $label$13 }
	*($3 + [556]) = [0]
	*($3 + [552]) = [11]
	*($3 + [80]) = *($3 + [552])
	CALL $21($1, $1, ($3 + [80]))
	goto $label$1 
	
.LABEL $label$13
	*($3 + [544]) = [8420]
	*($3 + [548]) = CALL $208([8420])
	*($3 + [264]) = *($3 + [544])
	CALL $2(($3 + [728]), ($3 + [264]))
	if ( ((int_64)$2 != (int_64)-7704667859290750976) ){ goto $label$14 }
	*($3 + [540]) = [0]
	*($3 + [536]) = [12]
	*($3 + [88]) = *($3 + [536])
	CALL $21($1, $1, ($3 + [88]))
	goto $label$1 
	
.LABEL $label$14
	*($3 + [528]) = [8431]
	*($3 + [532]) = CALL $208([8431])
	*($3 + [256]) = *($3 + [528])
	CALL $2(($3 + [728]), ($3 + [256]))
	if ( ((int_64)$2 != (int_64)6182744516614399680) ){ goto $label$15 }
	*($3 + [524]) = [0]
	*($3 + [520]) = [13]
	*($3 + [96]) = *($3 + [520])
	CALL $24($1, $1, ($3 + [96]))
	goto $label$1 
	
.LABEL $label$15
	*($3 + [512]) = [8444]
	*($3 + [516]) = CALL $208([8444])
	*($3 + [248]) = *($3 + [512])
	CALL $2(($3 + [728]), ($3 + [248]))
	if ( ((int_64)$2 != (int_64)6182744243086557184) ){ goto $label$16 }
	*($3 + [508]) = [0]
	*($3 + [504]) = [14]
	*($3 + [104]) = *($3 + [504])
	CALL $13($1, $1, ($3 + [104]))
	goto $label$1 
	
.LABEL $label$16
	*($3 + [496]) = [8455]
	*($3 + [500]) = CALL $208([8455])
	*($3 + [240]) = *($3 + [496])
	CALL $2(($3 + [728]), ($3 + [240]))
	if ( ((int_64)$2 != (int_64)6182744568121057920) ){ goto $label$17 }
	*($3 + [492]) = [0]
	*($3 + [488]) = [15]
	*($3 + [112]) = *($3 + [488])
	CALL $13($1, $1, ($3 + [112]))
	goto $label$1 
	
.LABEL $label$17
	*($3 + [480]) = [8473]
	*($3 + [484]) = CALL $208([8473])
	*($3 + [232]) = *($3 + [480])
	CALL $2(($3 + [728]), ($3 + [232]))
	if ( ((int_64)$2 != (int_64)6182744532679393280) ){ goto $label$18 }
	*($3 + [476]) = [0]
	*($3 + [472]) = [16]
	*($3 + [120]) = *($3 + [472])
	CALL $24($1, $1, ($3 + [120]))
	goto $label$1 
	
.LABEL $label$18
	*($3 + [464]) = [8483]
	*($3 + [468]) = CALL $208([8483])
	*($3 + [224]) = *($3 + [464])
	CALL $2(($3 + [728]), ($3 + [224]))
	if ( ((int_64)$2 != (int_64)6182744499418329600) ){ goto $label$19 }
	*($3 + [460]) = [0]
	*($3 + [456]) = [17]
	*($3 + [128]) = *($3 + [456])
	CALL $13($1, $1, ($3 + [128]))
	goto $label$1 
	
.LABEL $label$19
	*($3 + [448]) = [8495]
	*($3 + [452]) = CALL $208([8495])
	*($3 + [216]) = *($3 + [448])
	CALL $2(($3 + [728]), ($3 + [216]))
	if ( ((int_64)$2 != (int_64)-3066762345811869696) ){ goto $label$20 }
	*($3 + [444]) = [0]
	*($3 + [440]) = [18]
	*($3 + [136]) = *($3 + [440])
	CALL $30($1, $1, ($3 + [136]))
	goto $label$1 
	
.LABEL $label$20
	*($3 + [432]) = [8506]
	*($3 + [436]) = CALL $208([8506])
	*($3 + [208]) = *($3 + [432])
	CALL $2(($3 + [728]), ($3 + [208]))
	if ( ((int_64)$2 != (int_64)6182744248465489920) ){ goto $label$21 }
	*($3 + [428]) = [0]
	*($3 + [424]) = [19]
	*($3 + [144]) = *($3 + [424])
	CALL $24($1, $1, ($3 + [144]))
	goto $label$1 
	
.LABEL $label$21
	*($3 + [416]) = [8516]
	*($3 + [420]) = CALL $208([8516])
	*($3 + [200]) = *($3 + [416])
	CALL $2(($3 + [728]), ($3 + [200]))
	if ( ((int_64)$2 != (int_64)8516769789752901632) ){ goto $label$22 }
	*($3 + [412]) = [0]
	*($3 + [408]) = [20]
	*($3 + [152]) = *($3 + [408])
	CALL $33($1, $1, ($3 + [152]))
	goto $label$1 
	
.LABEL $label$22
	*($3 + [400]) = [8522]
	*($3 + [404]) = CALL $208([8522])
	*($3 + [192]) = *($3 + [400])
	CALL $2(($3 + [728]), ($3 + [192]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$2 }
	*($3 + [396]) = [0]
	*($3 + [392]) = [21]
	*($3 + [160]) = *($3 + [392])
	CALL $35($1, $1, ($3 + [160]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [384]) = [8531]
	*($3 + [388]) = CALL $208([8531])
	*($3 + [184]) = *($3 + [384])
	CALL $2(($3 + [728]), ($3 + [184]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [368]) = [8522]
	*($3 + [372]) = CALL $208([8522])
	*($3 + [176]) = *($3 + [368])
	CALL $2(($3 + [376]), ($3 + [176]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [364]) = [0]
	*($3 + [360]) = [22]
	*($3 + [168]) = *($3 + [360])
	CALL $35($0, (int_64)6138663591592764928, ($3 + [168]))
	
.LABEL $label$1
	CALL $194([0])
	$global$0 = ($3 + [736])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$5 = *($1)
	$6 = *($1 + [32])
	$7 = ($1 + [40])
	$8 = *($7)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$8), [9857])
	$6 = ((int_64)$6 + (int_64)*($3))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9900])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9919])
	*($7) = $8
	*($1 + [32]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9476])
	*($4 + [72]) = ($4 + [52])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [24])
	*($4 + [100]) = ($1 + [32])
	*($4 + [104]) = ($1 + [48])
	CALL $139(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [56]), $2, $4, [52])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	float_64 $8
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = CALL $208([10576])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9690])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [10575]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [9788])
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [9837])
	$3 = CALL $208([10576])
	if ( ($3 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [9690])
	goto $label$14 
	
.LABEL $label$15
	if ( ($3 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$4 = (int_64)0
	
.LOOP $label$16:
	$5 = *(($3 + [10575]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$17
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$16 }
	goto $label$12 
	
.LABEL $label$13
	$4 = (int_64)0
	
.LABEL $label$12
	CALL eosio_assert([1], [9788])
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	$3 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$4 = $6
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$22 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	$5 = [0]
	
.LABEL $label$18
	CALL eosio_assert($5, [9837])
	*(($2 + [72])) = [0]
	*($2 + [56]) = (int_64)-1
	*($2 + [64]) = (int_64)0
	$4 = *($1)
	*($2 + [40]) = $4
	*($2 + [48]) = $4
	*($2 + [24]) = [10580]
	*($2 + [28]) = CALL $208([10580])
	*($2 + [8]) = *($2 + [24])
	CALL $2(($2 + [32]), ($2 + [8]))
	$5 = *(($2 + [68]))
	$1 = *($2 + [64])
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$26 }
	
.LOOP $label$28:
	$3 = ($5 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)6138877037701496832) ){ goto $label$27 }
	$5 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$26 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($2 + [40])), [9293])
	if ( $7 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$3 = CALL db_find_i64(*($2 + [40]), *(($2 + [48])), (int_64)-4417020450001911808, (int_64)6138877037701496832)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$24 }
	$7 = CALL $64(($2 + [40]), $3)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($2 + [40])), [9293])
	
.LABEL $label$25
	$4 = *($7 + [24])
	goto $label$23 
	
.LABEL $label$24
	$4 = (int_64)27600
	
.LABEL $label$23
	*($2 + [16]) = [12234]
	*($2 + [20]) = CALL $208([12234])
	*($2) = *($2 + [16])
	CALL $2(($2 + [32]), $2)
	$5 = *(($2 + [68]))
	$1 = *(($2 + [64]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$32 }
	
.LOOP $label$34:
	$3 = ($5 + [-24])
	$7 = *($3)
	if ( ((int_64)*($7) == (int_64)4851652674182329712) ){ goto $label$33 }
	$5 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$32 }
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($2 + [40])), [9293])
	if ( $7 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$3 = CALL db_find_i64(*($2 + [40]), *(($2 + [48])), (int_64)-4417020450001911808, (int_64)4851652674182329712)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$30 }
	$7 = CALL $64(($2 + [40]), $3)
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)($2 + [40])), [9293])
	
.LABEL $label$31
	$6 = ((int_64)*($7 + [24]) * (int_64)10000)
	goto $label$29 
	
.LABEL $label$30
	$6 = (int_64)200000000
	
.LABEL $label$29
	$3 = CALL $208([9686])
	$5 = ($3 <= [8])
	$8 = (CASTING float_64)(int_64 ((int_64)$6 / (int_64)$4))
	if ( (((float_64)$8 < (float_64)(float_64)18446744073709551615) & ((float_64)$8 >= (float_64)(float_64)0)) ){ goto $label$39 }
	$6 = (int_64)0
	if ( ($5 == 0) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$6 = (Rounds 0)($8)
	if ( $5 ){ goto $label$37 }
	
.LABEL $label$38
	CALL eosio_assert([0], [9690])
	goto $label$36 
	
.LABEL $label$37
	if ( $3 ){ goto $label$36 }
	$4 = (int_64)0
	goto $label$35 
	
.LABEL $label$36
	$4 = (int_64)0
	
.LOOP $label$40:
	$5 = *(($3 + [9685]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$41 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$41
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$40 }
	
.LABEL $label$35
	*($0) = $6
	*($0 + [8]) = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9788])
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	$3 = [0]
	
.LOOP $label$46:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$44 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$47 }
	$4 = $6
	$1 = [1]
	$5 = $3
	$3 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$47
	$4 = $6
	
.LOOP $label$49:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$48 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$49 }
	$1 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$1 = [0]
	
.LABEL $label$45
	CALL eosio_assert($1, [9837])
	$7 = *($2 + [64])
	if ( ($7 == 0) ){ goto $label$42 }
	goto $label$43 
	
.LABEL $label$44
	CALL eosio_assert([0], [9837])
	$7 = *($2 + [64])
	if ( ($7 == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$1 = ($2 + [68])
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$51 }
	
.LOOP $label$52:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$53 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$54 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$54
	CALL _ZdlPv($5)
	
.LABEL $label$53
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$52 }
	$3 = *(($2 + [64]))
	goto $label$50 
	
.LABEL $label$51
	$3 = $7
	
.LABEL $label$50
	*($1) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$42
	$global$0 = ($2 + [80])
}

void .FUNC $87 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($3 + [40])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [8]) = *($0)
	$0 = CALL $155(($3 + [8]), (uint_64)*($2 + [8]) >> (uint_64)(int_64)8), [11389]
	CALL eosio_assert(((int_64)*($0)) >= (int_64)*($2)), [11413])
	*($3) = $2
	CALL $156(($3 + [8]), $0, $1, $3)
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($3 + [36])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$2) ){ goto $label$4 }
	$2 = *(($3 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($2)
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $86 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)$0), [9293])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $80($0, $4)
	CALL eosio_assert(((int_32)*($5 + [40]) == (int_32)$0), [9293])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $178(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $178(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($0 + [16]), *($4 + [4]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $3) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*(($0 + [24])) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $44(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $83 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $108($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $126(($4 + [72]), ($4 + [64]))
	CALL $123(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $192(($4 + [8]))
}

void .FUNC $82 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [64])
	$global$0 = $4
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	$5 = *($0)
	*($4 + [24]) = $5
	$6 = *($2 + [8])
	*($4 + [32]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $148(($4 + [24]), $0)
	CALL eosio_assert(((int_32)*($0 + [16]) == (int_32)($4 + [24])), [9293])
	*($4 + [8]) = $2
	CALL eosio_assert([1], [9344])
	CALL $149(($4 + [24]), $0, (int_64)0, ($4 + [8]))
	$7 = *($4 + [48])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($4 + [16]) = $2
	CALL $150(($4 + [8]), ($4 + [24]), $3, ($4 + [16]))
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [52])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($4 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $7
	
.LABEL $label$4
	*($8) = $7
	CALL _ZdlPv($2)
	$global$0 = ($4 + [64])
	return 
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9857])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9900])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9919])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9476])
	*($4 + [48]) = ($4 + [40])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [16])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [32])
	CALL $147(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8943])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $211($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $151(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$6 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $6)
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $152(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $214($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $149 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$5 = *($1 + [8])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$5), [9857])
	$6 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $6
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9900])
	CALL eosio_assert(((int_64)*($1) < (int_64)4611686018427387904), [9919])
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	CALL eosio_assert(((int_64)$5) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)), [9476])
	CALL eosio_assert([1], [9077])
	CALL memcpy($4, $1, [8])
	*($4 + [24]) = *($1 + [8])
	CALL eosio_assert([1], [9077])
	CALL memcpy(($4 | [8]), ($4 + [24]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8943])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $211($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8966])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8966])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $154(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $214($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $145 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $180($6, *($4 + [4]))
	$7 = ($1 + [20])
	CALL $180($7, *($4 + [8]))
	$4 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($8 + [8])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	$8 = *(($1 + [20]))
	$8 = ( *(($1 + [24])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$4 = ($8 + $4)
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$2:
	$4 = ($4 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($4 <= [513]) ){ goto $label$4 }
	$2 = CALL $211($4)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9077])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $109($3, $6)
	CALL $109($3, $7)
	$9 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($5 + [8]), (int_64)5032147294128963584, *(*($0 + [8])), $9, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$9 >= (uint_64)*($5 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $214($2)
	if ( (uint_64)($9 <= *($5 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $144 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [16])
	$global$0 = $4
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *($6 + [108])
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$2 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-4994024801686257664, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($7)
	
.LABEL $label$1
	$5 = *($0)
	$6 = *($5 + [4])
	$7 = *(($6 + [112]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$4 }
	$7 = *($5)
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-4994024801686257663, ($4 + [8]), *($6))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($7)
	
.LABEL $label$3
	$7 = *($0)
	$5 = *($7 + [4])
	$0 = *(($5 + [116]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($7)
	$0 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-4994024801686257662, ($4 + [8]), *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx64_remove($0)
	
.LABEL $label$5
	$global$0 = ($4 + [16])
}

void .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $0, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $146 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$11
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$12
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$13 }
	CALL _ZdlPv($2)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $141 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $109(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9077])
	CALL memcpy(*($4 + [4]), $3, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9077])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $180($6, *($4 + [4]))
	$7 = *($4 + [8])
	*($1 + [24]) = *($7)
	*(($1 + [32])) = *(($7 + [8]))
	*($1 + [40]) = *(*($4 + [12]))
	*($1 + [44]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [32])
	$8 = (CASTING uint_64)(uint_32 $7)
	$7 = ($1 + [44])
	$9 = ($1 + [40])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	*($3 + [16]) = $3
	*($3 + [28]) = $6
	*($3 + [24]) = $1
	*($3 + [32]) = $10
	*($3 + [36]) = $9
	*($3 + [40]) = $7
	CALL $141(($3 + [24]), ($3 + [16]))
	$8 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($5 + [8]), (int_64)-4417020450001911808, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $214($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [48])
}

void .FUNC $143 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [80])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8943])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $211($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([120])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [100]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [64])
	*($3 + [72]) = ($5 + [80])
	*($3 + [76]) = ($5 + [96])
	CALL $114(($3 + [40]), ($3 + [32]))
	*($5 + [104]) = $1
	*($5 + [108 align=4]) = (int_64)-1
	*($5 + [116]) = [-1]
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $115(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $214($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [80])
	return $5
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)*($1 + [100]) == (int_32)$0), [10621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10666])
	$3 = *($0 + [24])
	$4 = $3
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$1 }
	$7 = *($1)
	if ( ((int_64)*(*(($6 + [-24]))) != (int_64)$7) ){ goto $label$2 }
	$4 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = ($3 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$3 }
	$9 = ($6 + [-48])
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_64)*(*($9)) != (int_64)$7) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$4 != (int_32)$3), [10716])
	$3 = *($5)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = $4
	
.LOOP $label$8:
	$9 = *($6)
	*($6) = [0]
	$8 = ($6 + [-24])
	$4 = *($8)
	*($8) = $9
	if ( ($4 == 0) ){ goto $label$9 }
	CALL _ZdlPv($4)
	
.LABEL $label$9
	*(($6 + [-8])) = *(($6 + [16]))
	*(($6 + [-16])) = *(($6 + [8]))
	$6 = ($6 + [24])
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$8 }
	$9 = ($6 + [-24])
	$4 = *(($0 + [28]))
	if ( ((int_32)($4 + [24]) != (int_32)$6) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = ($4 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$4 = ($4 + [-24])
	$6 = *($4)
	*($4) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	CALL _ZdlPv($6)
	
.LABEL $label$11
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $9
	CALL db_remove_i64(*($1 + [104]))
	*($2 + [4]) = $1
	*($2) = $0
	*($2 + [8]) = $2
	CALL $144(($2 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	$global$0 = ($2 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [10621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10666])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10716])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$10
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$11:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$13
	CALL _ZdlPv($5)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [10621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10666])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10716])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$11 }
	CALL _ZdlPv($5)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$10 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [56]))
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$6 = *($1)
	$7 = ($1 + [8])
	CALL $180($7, *($3))
	$8 = ($1 + [20])
	CALL $180($8, *($3 + [4]))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9476])
	$3 = *($1 + [8])
	$9 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($9 + [8])
	$10 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$1 }
	$9 = *(($1 + [20]))
	$9 = ( *(($1 + [24])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$3 = ($9 + $3)
	$10 = (CASTING uint_64)(uint_32 $9)
	
.LOOP $label$2:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$2 }
	if ( ($3 <= [513]) ){ goto $label$4 }
	$4 = CALL $211($3)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9077])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $109($5, $7)
	CALL $109($5, $8)
	CALL db_update_i64(*($1 + [36]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $214($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($5 + [16])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8832])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48]))) = (int_64)0
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32]) = $1
	CALL $145(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $146(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$4
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$5
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1)
	$5 = CALL $178(($2 + [16]), ($1 + [16]))
	$1 = CALL $178($2, ($1 + [28]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$8 = CALL $178(($2 + [32]), $1)
	$6 = CALL $178(($2 + [48]), $5)
	CALL void $7((int_32 $4), (int_64 $3), (int_64 $6), (int_32 $8), (int_32 $0))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($8 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($6 + [8]))
	$0 = [1]
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$0 = [1]
	if ( (*($1) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($5) & $0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($1 + [8]))
	if ( ((*($5) & $0) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($5 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8943])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $211($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([48]))) = (int_64)0
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8966])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $44(($3 + [32]), ($5 + [8]))
	CALL $44(($3 + [32]), ($5 + [20]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $146(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $214($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [28])))
	
.LABEL $label$10
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [10621])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [10666])
	$2 = *($0 + [24])
	$3 = $2
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$1 }
	$6 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) != (int_64)$6) ){ goto $label$2 }
	$3 = $5
	goto $label$1 
	
.LABEL $label$2
	$7 = ($2 + [24])
	
.LOOP $label$4:
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	$8 = ($5 + [-48])
	$3 = ($5 + [-24])
	$5 = $3
	if ( ((int_64)*(*($8)) != (int_64)$6) ){ goto $label$4 }
	goto $label$1 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$3 != (int_32)$2), [10716])
	$2 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$7 }
	$5 = $3
	
.LOOP $label$8:
	$8 = *($5)
	*($5) = [0]
	$7 = ($5 + [-24])
	$3 = *($7)
	*($7) = $8
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [28])))
	
.LABEL $label$10
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$9
	*(($5 + [-8])) = *(($5 + [16]))
	*(($5 + [-16])) = *(($5 + [8]))
	$5 = ($5 + [24])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$8 }
	$8 = ($5 + [-24])
	$3 = *(($0 + [28]))
	if ( ((int_32)($3 + [24]) != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = ($3 + [-24])
	
.LABEL $label$6
	
.LOOP $label$12:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [28])))
	
.LABEL $label$14
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$13
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$12 }
	
.LABEL $label$5
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [36]))
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $178(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $178(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $98 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$5 = *($1)
	$6 = *($1 + [8])
	$7 = ($1 + [16])
	$8 = *($7)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$8), [9857])
	$6 = ((int_64)$6 + (int_64)*($3))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9900])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9919])
	*($7) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9476])
	*($4 + [72]) = ($4 + [52])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [24])
	*($4 + [100]) = ($1 + [32])
	*($4 + [104]) = ($1 + [48])
	CALL $139(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [56]), $2, $4, [52])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8832])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([72])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [56]) = $1
	CALL $159(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $137(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$5 = *($1)
	$6 = *($1 + [8])
	$7 = ($1 + [16])
	$8 = *($7)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$8), [9857])
	$6 = ((int_64)$6 + (int_64)*($3))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9900])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9919])
	*($7) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9476])
	*($4 + [72]) = ($4 + [52])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [24])
	*($4 + [100]) = ($1 + [32])
	*($4 + [104]) = ($1 + [48])
	CALL $139(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [56]), $2, $4, [52])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $95 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8832])
	*(($5 = CALL _Znwj([64])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [52]) = $1
	CALL $160($3, $5)
	*($4 + [72]) = ($4 + [52])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($5 + [8])
	*($4 + [88]) = $5
	*($4 + [96]) = ($5 + [24])
	*($4 + [100]) = ($5 + [32])
	*($4 + [104]) = ($5 + [48])
	CALL $139(($4 + [88]), ($4 + [80]))
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-3877954090172416000, $2, $6, $4, [52])
	*($5 + [56]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [88]) = $5
	$6 = *($5)
	*($4) = $6
	*($4 + [64]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [88]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $119(($1 + [24]), ($4 + [88]), $4, ($4 + [64]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [88])
	*($4 + [88]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	*($1 + [24]) = *(*($3))
	$5 = *($1)
	CALL eosio_assert([1], [9476])
	*($4 + [72]) = ($4 + [52])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [24])
	*($4 + [100]) = ($1 + [32])
	*($4 + [104]) = ($1 + [48])
	CALL $139(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [56]), $2, $4, [52])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $97 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$5 = *($1)
	$6 = *($1 + [32])
	$7 = ($1 + [40])
	$8 = *($7)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$8), [9857])
	$6 = ((int_64)$6 + (int_64)*($3))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9900])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9919])
	*($7) = $8
	*($1 + [32]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9476])
	*($4 + [72]) = ($4 + [52])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [24])
	*($4 + [100]) = ($1 + [32])
	*($4 + [104]) = ($1 + [48])
	CALL $139(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [56]), $2, $4, [52])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $90 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$5 = *($1)
	$6 = *($1 + [8])
	$7 = ($1 + [16])
	$8 = *($7)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)$8), [9857])
	$6 = ((int_64)$6 + (int_64)*($3))
	CALL eosio_assert(((int_64)$6 > (int_64)-4611686018427387904), [9900])
	CALL eosio_assert(((int_64)$6 < (int_64)4611686018427387904), [9919])
	*($7) = $8
	*($1 + [8]) = $6
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9476])
	*($4 + [72]) = ($4 + [52])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [24])
	*($4 + [100]) = ($1 + [32])
	*($4 + [104]) = ($1 + [48])
	CALL $139(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [56]), $2, $4, [52])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $91 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8832])
	*(($5 = CALL _Znwj([56])) + [24]) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [44]) = $1
	CALL $157($3, $5)
	*($4 + [56]) = ($4 + [44])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($5 + [8])
	*($4 + [72]) = $5
	*($4 + [80]) = ($5 + [16])
	*($4 + [84]) = ($5 + [24])
	*($4 + [88]) = ($5 + [40])
	CALL $158(($4 + [72]), ($4 + [64]))
	$6 = *($5)
	$7 = CALL db_store_i64(*($1 + [8]), (int_64)-2688959069660504064, $2, $6, $4, [44])
	*($5 + [48]) = $7
	if ( (uint_64)($6 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [72]) = $5
	$6 = *($5)
	*($4) = $6
	*($4 + [48]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $6
	*($3 + [16]) = $7
	*($4 + [72]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $143(($1 + [24]), ($4 + [72]), $4, ($4 + [48]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [72])
	*($4 + [72]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [96])
}

int_32 .FUNC $92 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$7 = ($5 & [1])
	$5 = *($2)
	$6 = uint_32($5 >> [1])
	$4 = *($2 + [4])
	$5 = ( $4 ? $6 : $7 )
	if ( ($5 == 0) ){ goto $label$4 }
	$8 = [0]
	$6 = ($4 & [1])
	$4 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($4 >> [1]) : $6 )
	if ( ((int_32)$4 < (int_32)$5) ){ goto $label$1 }
	$9 = ( *($1 + [8]) ? ($1 + [1]) : $6 )
	$10 = ($9 + $4)
	$11 = ( *($2 + [8]) ? ($2 + [1]) : $7 )
	$6 = *($11)
	$7 = $9
	
.LOOP $label$5:
	$4 = (($4 - $5) + [1])
	if ( ($4 == 0) ){ goto $label$1 }
	$4 = CALL $206($7, $6, $4)
	if ( ($4 == 0) ){ goto $label$1 }
	if ( (CALL $207($4, $11, $5) == 0) ){ goto $label$3 }
	$7 = ($4 + [1])
	$4 = ($10 - $7)
	if ( ((int_32)$4 >= (int_32)$5) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$1 }
	$5 = ($4 - $9)
	if ( ((int_32)$5 == (int_32)[-1]) ){ goto $label$1 }
	$4 = *($2)
	$6 = uint_32($4 >> [1])
	$7 = ($4 & [1])
	$4 = *(($2 + [4]))
	
.LABEL $label$2
	$4 = *($3)
	$7 = ($4 & [1])
	CALL $189($1, $5, ( $4 ? $6 : $7 ), ( *($3 + [8]) ? ($3 + [1]) : $7 ), ( *($3 + [4]) ? uint_32($4 >> [1]) : $7 ))
	$8 = [1]
	
.LABEL $label$1
	return $8
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	$4 = ($global$0 - [144])
	$global$0 = $4
	*(($5 = $4) + [56]) = $2
	CALL eosio_assert(((int_32)*($1 + [168]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	*($5 + [40]) = *($1 + [8])
	*($5 + [48]) = *($1 + [96])
	$2 = *($1)
	*($5 + [32]) = $2
	$6 = ($1 + [124])
	CALL $183($6, [12296])
	$7 = ($1 + [96])
	if ( ((int_64)*(*($3)) != (int_64)*(*(*($3 + [4]) + [4]) + [8])) ){ goto $label$1 }
	*($5 + [16]) = [9944]
	*($5 + [20]) = CALL $208([9944])
	*($5 + [8]) = *($5 + [16])
	*($1 + [136]) = *(CALL $2(($5 + [72]), ($5 + [8])))
	$2 = *($5 + [32])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$2 == (int_64)*($1)), [9476])
	*($5 + [64]) = [0]
	*($5 + [16]) = ($5 + [64])
	$8 = ($1 + [8])
	*($5 + [76]) = $8
	*($5 + [72]) = $1
	$9 = ($1 + [16])
	*($5 + [80]) = $9
	$10 = ($1 + [28])
	*($5 + [84]) = $10
	$11 = ($1 + [40])
	*($5 + [88]) = $11
	$12 = ($1 + [52])
	*($5 + [92]) = $12
	$13 = ($1 + [64])
	*($5 + [96]) = $13
	$14 = ($1 + [80])
	*($5 + [100]) = $14
	$15 = ($1 + [88])
	*($5 + [104]) = $15
	*($5 + [108]) = $7
	$16 = ($1 + [104])
	*($5 + [112]) = $16
	$17 = ($1 + [108])
	*($5 + [116]) = $17
	$18 = ($1 + [112])
	*($5 + [120]) = $18
	*($5 + [124]) = $6
	$19 = ($1 + [136])
	*($5 + [128]) = $19
	$20 = ($1 + [144])
	*($5 + [132]) = $20
	$21 = ($1 + [156])
	*($5 + [136]) = $21
	CALL $103(($5 + [72]), ($5 + [16]))
	$22 = *($5 + [64])
	if ( ($22 <= [513]) ){ goto $label$3 }
	$3 = CALL $211($22)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($4 - (($22 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	*($5 + [20]) = $3
	*($5 + [16]) = $3
	*($5 + [24]) = ($3 + $22)
	*($5 + [64]) = ($5 + [16])
	*($5 + [76]) = $8
	*($5 + [80]) = $9
	*($5 + [84]) = $10
	*($5 + [88]) = $11
	*($5 + [92]) = $12
	*($5 + [96]) = $13
	*($5 + [100]) = $14
	*($5 + [104]) = $15
	*($5 + [108]) = $7
	*($5 + [112]) = $16
	*($5 + [116]) = $17
	*($5 + [120]) = $18
	*($5 + [124]) = $6
	*($5 + [128]) = $19
	*($5 + [132]) = $20
	*($5 + [136]) = $21
	*($5 + [72]) = $1
	CALL $104(($5 + [72]), ($5 + [64]))
	CALL db_update_i64(*($1 + [172]), *($5 + [56]), $3, $22)
	if ( ($22 <= [513]) ){ goto $label$4 }
	CALL $214($3)
	
.LABEL $label$4
	$3 = ($0 + [36])
	$2 = *($5 + [32])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($5 + [76]) = $1
	*($5 + [72]) = $0
	*($5 + [84]) = $1
	*($5 + [80]) = ($5 + [40])
	*($5 + [88]) = ($5 + [32])
	*($5 + [92]) = ($5 + [56])
	*($5 + [64]) = ($5 + [72])
	CALL $165(($5 + [64]), $3, ($3 + [1]))
	$global$0 = ($5 + [144])
}

void .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$2 = CALL $208([9686])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9690])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [9685]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [9788])
	$5 = ((int_64)$3 & (int_64)72057594037927935)
	$6 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$5 = $3
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$5 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$11 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [9837])
	*(($1 + [40])) = $6
	$3 = (int_64)0
	*($1 + [32]) = (int_64)0
	$2 = CALL $208([9686])
	if ( ($2 <= [8]) ){ goto $label$14 }
	CALL eosio_assert([0], [9690])
	goto $label$13 
	
.LABEL $label$14
	if ( ($2 == 0) ){ goto $label$12 }
	
.LABEL $label$13
	$3 = (int_64)0
	
.LOOP $label$15:
	$4 = *(($2 + [9685]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$16 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$16
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$15 }
	
.LABEL $label$12
	CALL eosio_assert([1], [9788])
	$5 = ((int_64)$3 & (int_64)72057594037927935)
	$6 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$2 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$3 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$5 = $3
	$4 = [1]
	$7 = $2
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$20
	$5 = $3
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$18 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$7 = ($2 + [1])
	$2 = $7
	if ( $4 ){ goto $label$21 }
	$4 = [1]
	$2 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$4 = [0]
	
.LABEL $label$17
	CALL eosio_assert($4, [9837])
	*(($1 + [16])) = $6
	*($1 + [8]) = (int_64)0
	*($1 + [24]) = (int_64)0
}

void .FUNC $139 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[3]), [9077])
	CALL memcpy(*($4 + [4]), $0, [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($0 + [4])
	$5 = *($4 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)-4994024801686257664, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	CALL $72($4, $6)
	*($2 + [4]) = [0]
	*($2) = $4
	$5 = *(*(CALL $132($2) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [8891])
	*($1) = *(($4 + [16]))
	*($1 + [16]) = *(*($0 + [8]))
	*($1 + [24]) = *(*($0 + [12]))
	*($1 + [32]) = *(*($0 + [16]))
	*($1 + [40]) = *(*($0 + [24]))
	*($1 + [8]) = *(*($0 + [20]))
	$0 = *($0 + [28])
	*($1 + [48]) = *($0)
	*(($1 + [56])) = *(($0 + [8]))
	CALL $133($2, $3)
	*(($1 + [72])) = *(($2 + [8]))
	*($1 + [64]) = *($2)
	$0 = CALL $208([10343])
	if ( ($0 <= [8]) ){ goto $label$6 }
	CALL eosio_assert([0], [9690])
	goto $label$5 
	
.LABEL $label$6
	if ( ($0 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = (int_64)0
	
.LOOP $label$7:
	$4 = *(($0 + [10342]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$8 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$8
	$7 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$7 = (int_64)0
	
.LABEL $label$3
	CALL eosio_assert([1], [9788])
	$5 = ((int_64)$7 & (int_64)72057594037927935)
	$8 = ((int_64)((int_64)$7 << (int_64)8) | (int_64)4)
	$0 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$5 = $7
	$4 = [1]
	$3 = $0
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$5 = $7
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$4 = ((int_32)$0 < (int_32)[6])
	$3 = ($0 + [1])
	$0 = $3
	if ( $4 ){ goto $label$13 }
	$4 = [1]
	$0 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$4 = [0]
	
.LABEL $label$9
	CALL eosio_assert($4, [9837])
	*(($1 + [88])) = $8
	*($1 + [80]) = (int_64)30000
	*($1 + [96]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$global$0 = ($2 + [16])
}

void .FUNC $131 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	*($2 + [8]) = *(*($0 + [20]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[0]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = *($3 + [8])
	CALL eosio_assert(((int_32)(*($4 + [8]) - $5) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [9077])
	CALL memcpy(*($0 + [4]), $4, [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [104]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9029])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-4994024801686257664)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8975])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8975])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $72(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = CALL $208([10576])
	if ( ($3 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9690])
	goto $label$3 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = (int_64)0
	
.LOOP $label$5:
	$5 = *(($3 + [10575]))
	if ( ((($5 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$6
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56))
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = (int_64)0
	
.LABEL $label$1
	*($0) = (int_64)0
	*($0 + [8]) = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9788])
	$4 = ((int_64)$4 & (int_64)72057594037927935)
	$3 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$4 = $6
	$5 = [1]
	$7 = $3
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$4 = $6
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$5 = ((int_32)$3 < (int_32)[6])
	$7 = ($3 + [1])
	$3 = $7
	if ( $5 ){ goto $label$11 }
	$5 = [1]
	$3 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [9837])
	*((($2 + [24]) + [32])) = [0]
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$4 = *($1)
	*($2 + [24]) = $4
	*($2 + [32]) = $4
	*($2 + [8]) = [10580]
	*($2 + [12]) = CALL $208([10580])
	*($2) = *($2 + [8])
	CALL $2(($2 + [16]), $2)
	$3 = CALL db_find_i64($4, $4, (int_64)-4417020450001911808, (int_64)6138877037701496832)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$12 }
	$3 = CALL $64(($2 + [24]), $3)
	CALL eosio_assert(((int_32)*($3 + [48]) == (int_32)($2 + [24])), [9293])
	*(($0 + [8])) = *(($3 + [32]))
	*($0) = *($3 + [24])
	
.LABEL $label$12
	$7 = *($2 + [48])
	if ( ($7 == 0) ){ goto $label$13 }
	$0 = ($2 + [52])
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$15 }
	
.LOOP $label$16:
	$3 = ($3 + [-24])
	$5 = *($3)
	*($3) = [0]
	if ( ($5 == 0) ){ goto $label$17 }
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($5 + [16])))
	
.LABEL $label$18
	CALL _ZdlPv($5)
	
.LABEL $label$17
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$16 }
	$3 = *(($2 + [48]))
	goto $label$14 
	
.LABEL $label$15
	$3 = $7
	
.LABEL $label$14
	*($0) = $7
	CALL _ZdlPv($3)
	
.LABEL $label$13
	$global$0 = ($2 + [64])
}

void .FUNC $134 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $44(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy($3, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $44(*($1), *($0 + [16]))
	$0 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $137 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [40]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [48])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $213 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [12328]) == 0) ){ goto $label$2 }
	$2 = *([0] + [12332])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [12328]) = [1]
	$2 = ($2 << [16])
	*([0] + [12332]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [12332])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [12332]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [12328]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [12328]) = [1]
	$3 = ($3 << [16])
	*([0] + [12332]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [12332])
	
.LABEL $label$10
	*([0] + [12332]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $208 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $209 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $193())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $210($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $202 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $203 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $201($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

int_32 .FUNC $200 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $201 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $200($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

int_32 .FUNC $206 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $207 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_64 .FUNC $204 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $203($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $193()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $203($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [20817]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $202($0, (int_64)0)
	*(CALL $193()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $203($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $203($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $203($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $203($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [20817])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [20817]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20817]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $203($0)
	$5 = *(($6 + [20817]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $203($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [20817]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [8204]))
	$8 = (int_64)0
	$5 = *(($6 + [20817]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [20817]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $203($0)
	$5 = *(($6 + [20817]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $203($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [20817]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $202($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [20817]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [20817]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $203($0) + [20817]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $193()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $193()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $193()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

int_64 .FUNC $205 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $202($3, (int_64)0)
	$4 = CALL $204($3, $2, [1], (int_64)-1)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return $4
}

void .FUNC $181 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9077])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9077])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9077])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9077])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9077])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $8 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*(($4 = $3) + [136]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $211($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [104])) = (int_64)0
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [64]) = ($3 + $2)
	*($4 + [56]) = $3
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [8966])
	CALL memcpy(($4 + [72]), $3, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [8966])
	CALL memcpy((($4 + [72]) + [8]), ($3 + [8]), [8])
	*($4 + [60]) = ($3 + [16])
	CALL $44(($4 + [56]), (($4 + [72]) + [16]))
	CALL $44(($4 + [56]), ($4 + [100]))
	CALL $44(($4 + [56]), ($4 + [112]))
	CALL $44(($4 + [56]), ($4 + [124]))
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$5 = *($5)
	*((($4 + [144]) + [8])) = $5
	*(($6 = (($4 + [160]) + [8]))) = $5
	$7 = *($4 + [8])
	*($4 + [160]) = $7
	*($4 + [144]) = $7
	$5 = *($6)
	*((($4 + [176]) + [8])) = $5
	*((($4 + [24]) + [24])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [160])
	*($4 + [40]) = $0
	*($4 + [176]) = $0
	*($4 + [180]) = ($4 + [136])
	*($4 + [176]) = ($4 + [24])
	CALL $45(($4 + [176]), ($4 + [72]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$13 }
	$3 = [1]
	if ( (*($4 + [124]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $214($3)
	$3 = [1]
	if ( ((*($4 + [124]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($4 + [132])))
	if ( ((*($4 + [112]) & $3) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( (*($4 + [112]) & $3) ){ goto $label$9 }
	
.LABEL $label$10
	$3 = [1]
	if ( (*($4 + [100]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL _ZdlPv(*(($4 + [120])))
	$3 = [1]
	if ( ((*($4 + [100]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [108])))
	if ( (*($4 + [88]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [88]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [96])))
	
.LABEL $label$5
	$global$0 = ($4 + [192])
	return [1]
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [80]) = $1
	CALL require_auth($1)
	$5 = [0]
	*(($4 + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	*($4 + [76]) = [0]
	$6 = *($0 + [8])
	*($4 + [40]) = $6
	*($4 + [48]) = $6
	$0 = CALL db_find_i64($6, $6, (int_64)-3615145394423463936, $2)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL $46(($4 + [40]), $0)
	CALL eosio_assert(((int_32)*($5 + [168]) == (int_32)($4 + [40])), [9293])
	*($4 + [36]) = $5
	*($4 + [32]) = ($4 + [40])
	$0 = [1]
	$1 = *($4 + [80])
	goto $label$1 
	
.LABEL $label$2
	*($4 + [36]) = [0]
	*($4 + [32]) = ($4 + [40])
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [9096])
	if ( ((int_64)$1 != (int_64)*($5 + [8])) ){ goto $label$6 }
	CALL eosio_assert([1], [9115])
	$5 = [1]
	$0 = *($3)
	if ( ($0 & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$1 != (int_64)*($5 + [136])) ){ goto $label$7 }
	CALL eosio_assert([1], [9115])
	$5 = [1]
	$0 = *($3)
	if ( (($0 & [1]) == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$7
	*($4 + [88]) = [9083]
	*($4 + [92]) = CALL $208([9083])
	*($4 + [8]) = *($4 + [88])
	$5 = CALL $2(($4 + [16]), ($4 + [8]))
	CALL eosio_assert(((int_64)*($4 + [80]) == (int_64)*($5)), [9115])
	$5 = [1]
	$0 = *($3)
	if ( (($0 & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$5 = *($3 + [4])
	goto $label$3 
	
.LABEL $label$4
	$5 = uint_32($0 >> $5)
	
.LABEL $label$3
	CALL eosio_assert(($5 <= [101]), [9207])
	$1 = *($4 + [80])
	$5 = *($4 + [36])
	*($4 + [24]) = $3
	*($4 + [20]) = ($4 + [32])
	*($4 + [16]) = ($4 + [80])
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), [9344])
	CALL $49(($4 + [40]), $5, $1, ($4 + [16]))
	$0 = *($4 + [64])
	if ( ($0 == 0) ){ goto $label$8 }
	$7 = ($4 + [68])
	$5 = *($7)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($5 + [-24])
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$12 }
	CALL $40($3)
	CALL _ZdlPv($3)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$11 }
	$5 = *(($4 + [64]))
	goto $label$9 
	
.LABEL $label$10
	$5 = $0
	
.LABEL $label$9
	*($7) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$8
	$global$0 = ($4 + [96])
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $108($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9077])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9077])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $129(CALL $128($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $108($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $126(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $207(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [176])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3615145394423463936, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [176]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [96])
	if ( (CALL $207((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [180]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3615145394423463935, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [180])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	$2 = ($global$0 - [512])
	$global$0 = $2
	$3 = *($0 + [12])
	CALL $183(($1 + [124]), [9937])
	$4 = *(*($0))
	if ( ((int_64)$4 != (int_64)*(*($0 + [4]))) ){ goto $label$1 }
	*($2 + [456]) = [9944]
	*($2 + [460]) = CALL $208([9944])
	*($2 + [184]) = *($2 + [456])
	$4 = *(CALL $2(($2 + [408]), ($2 + [184])))
	
.LABEL $label$1
	*($1 + [136]) = $4
	$1 = *($0 + [8])
	$4 = *($1)
	if ( ((int_64)$4 < (int_64)1) ){ goto $label$6 }
	$5 = *($1 + [8])
	CALL eosio_assert([1], [10536])
	CALL eosio_assert([1], [10551])
	*(($6 = *(($1 = ($0 + [8])))) + [8]) = $5
	*($6) = (uint_64)$4 >> (uint_64)(int_64)1)
	$4 = *($3)
	*($2 + [456]) = [9565]
	*($2 + [460]) = CALL $208([9565])
	*($2 + [176]) = *($2 + [456])
	*($2 + [312]) = *(CALL $2(($2 + [408]), ($2 + [176])))
	*($2 + [304]) = $4
	*($2 + [456]) = [8531]
	*($2 + [460]) = CALL $208([8531])
	*($2 + [168]) = *($2 + [456])
	$4 = *(CALL $2(($2 + [408]), ($2 + [168])))
	*($2 + [456]) = [8522]
	*($2 + [460]) = CALL $208([8522])
	*($2 + [160]) = *($2 + [456])
	$5 = *(CALL $2(($2 + [408]), ($2 + [160])))
	$6 = *($1)
	$7 = *($3)
	$8 = *($0)
	CALL $191(($2 + [208]), *(*($0 + [16])))
	$1 = CALL $188(($2 + [208]), [0], [9945])
	$9 = ($1 + [8])
	*((($2 + [224]) + [8])) = *($9)
	*($2 + [224]) = *($1)
	*($1) = (int_64)0
	*($9) = [0]
	$1 = CALL $186(($2 + [224]), [9979])
	$9 = *($1 + [8])
	*($1 + [8]) = [0]
	$10 = *($1)
	*($1) = (int_64)0
	*($2 + [416]) = *($8)
	*($2 + [408]) = $7
	$7 = *($6)
	$11 = *(($6 + [8]))
	*(($2 + [448])) = $9
	*(($2 + [432])) = $11
	*($2 + [424]) = $7
	*($2 + [440]) = $10
	$1 = CALL $122(($2 + [456]), ($2 + [304]), $4, $5, ($2 + [408]))
	CALL $123(($2 + [264]), $1)
	$6 = *($2 + [264])
	CALL send_inline($6, (*($2 + [268]) - $6))
	$6 = *($2 + [264])
	if ( ($6 == 0) ){ goto $label$7 }
	*($2 + [268]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$7
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$8 }
	*(($1 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$8
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$9 }
	*(($1 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$9
	if ( (*($2 + [440]) & [1]) ){ goto $label$11 }
	if ( (*($2 + [224]) & [1]) ){ goto $label$10 }
	goto $label$5 
	
.LABEL $label$11
	CALL _ZdlPv(*(($2 + [448])))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$10
	CALL _ZdlPv(*($2 + [232]))
	if ( (*($2 + [208]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$22 = [45]
	goto $label$2 
	
.LABEL $label$5
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL _ZdlPv(*($2 + [216]))
	
.LABEL $label$3
	if ( ((int_64)*(*($0)) != (int_64)*(*(($0 + [4])))) ){ goto $label$21 }
	$1 = ($0 + [20])
	if ( (CALL is_account(*(*($1))) == 0) ){ goto $label$21 }
	$4 = *($3)
	*($2 + [456]) = [9565]
	*($2 + [460]) = CALL $208([9565])
	*($2 + [80]) = *($2 + [456])
	*($2 + [312]) = *(CALL $2(($2 + [408]), ($2 + [80])))
	*($2 + [304]) = $4
	*($2 + [456]) = [8531]
	*($2 + [460]) = CALL $208([8531])
	*($2 + [72]) = *($2 + [456])
	$4 = *(CALL $2(($2 + [408]), ($2 + [72])))
	*($2 + [456]) = [8522]
	*($2 + [460]) = CALL $208([8522])
	*($2 + [64]) = *($2 + [456])
	$5 = *(CALL $2(($2 + [408]), ($2 + [64])))
	$6 = *(($0 + [8]))
	$8 = *($1)
	$7 = *($3)
	CALL $191(($2 + [208]), *(*(($0 + [16]))))
	$1 = CALL $188(($2 + [208]), [0], [9997])
	$9 = ($1 + [8])
	*((($2 + [224]) + [8])) = *($9)
	*($2 + [224]) = *($1)
	*($1) = (int_64)0
	*($9) = [0]
	$1 = CALL $186(($2 + [224]), [10020])
	$9 = *($1 + [8])
	*($1 + [8]) = [0]
	$10 = *($1)
	*($1) = (int_64)0
	*($2 + [416]) = *($8)
	*($2 + [408]) = $7
	$7 = *($6)
	$11 = *(($6 + [8]))
	*(($2 + [448])) = $9
	*(($2 + [432])) = $11
	*($2 + [424]) = $7
	*($2 + [440]) = $10
	$1 = CALL $122(($2 + [456]), ($2 + [304]), $4, $5, ($2 + [408]))
	CALL $123(($2 + [264]), $1)
	$6 = *($2 + [264])
	CALL send_inline($6, (*($2 + [268]) - $6))
	$6 = *($2 + [264])
	if ( ($6 == 0) ){ goto $label$22 }
	*($2 + [268]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$22
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$23 }
	*(($1 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$23
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$24 }
	*(($1 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$24
	if ( (*($2 + [440]) & [1]) ){ goto $label$20 }
	if ( (*($2 + [224]) & [1]) ){ goto $label$19 }
	goto $label$14 
	
.LABEL $label$21
	if ( (CALL is_account(*(*(($0 + [20])))) == 0) ){ goto $label$29 }
	$11 = *(*(($0 + [8])))
	$7 = ((int_64)$11 / (int_64)2)
	$1 = CALL $208([9686])
	if ( ($1 <= [8]) ){ goto $label$28 }
	CALL eosio_assert([0], [9690])
	goto $label$27 
	
.LABEL $label$29
	$4 = *($3)
	*($2 + [456]) = [9565]
	*($2 + [460]) = CALL $208([9565])
	*($2 + [152]) = *($2 + [456])
	*($2 + [312]) = *(CALL $2(($2 + [408]), ($2 + [152])))
	*($2 + [304]) = $4
	*($2 + [456]) = [8531]
	*($2 + [460]) = CALL $208([8531])
	*($2 + [144]) = *($2 + [456])
	$4 = *(CALL $2(($2 + [408]), ($2 + [144])))
	*($2 + [456]) = [8522]
	*($2 + [460]) = CALL $208([8522])
	*($2 + [136]) = *($2 + [456])
	$5 = *(CALL $2(($2 + [408]), ($2 + [136])))
	$6 = *(($0 + [8]))
	$8 = *(($0 + [4]))
	$7 = *($3)
	CALL $191(($2 + [208]), *(*(($0 + [16]))))
	$1 = CALL $188(($2 + [208]), [0], [10099])
	$9 = ($1 + [8])
	*((($2 + [224]) + [8])) = *($9)
	*($2 + [224]) = *($1)
	*($1) = (int_64)0
	*($9) = [0]
	$1 = CALL $186(($2 + [224]), [10277])
	$9 = *($1 + [8])
	*($1 + [8]) = [0]
	$10 = *($1)
	*($1) = (int_64)0
	*($2 + [416]) = *($8)
	*($2 + [408]) = $7
	$7 = *($6)
	$11 = *(($6 + [8]))
	*(($2 + [448])) = $9
	*(($2 + [432])) = $11
	*($2 + [424]) = $7
	*($2 + [440]) = $10
	$1 = CALL $122(($2 + [456]), ($2 + [304]), $4, $5, ($2 + [408]))
	CALL $123(($2 + [264]), $1)
	$6 = *($2 + [264])
	CALL send_inline($6, (*($2 + [268]) - $6))
	$6 = *($2 + [264])
	if ( ($6 == 0) ){ goto $label$30 }
	*($2 + [268]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$30
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$31 }
	*(($1 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$31
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$32 }
	*(($1 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$32
	if ( (*($2 + [440]) & [1]) ){ goto $label$26 }
	if ( (*($2 + [224]) & [1]) ){ goto $label$25 }
	goto $label$16 
	
.LABEL $label$28
	if ( ($1 == 0) ){ goto $label$18 }
	
.LABEL $label$27
	$5 = (int_64)0
	
.LOOP $label$33:
	$6 = *(($1 + [9685]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$34 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$34
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$33 }
	goto $label$17 
	
.LABEL $label$26
	CALL _ZdlPv(*(($2 + [448])))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$16 }
	
.LABEL $label$25
	CALL _ZdlPv(*($2 + [232]))
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$12 }
	goto $label$15 
	
.LABEL $label$20
	CALL _ZdlPv(*(($2 + [448])))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$14 }
	
.LABEL $label$19
	CALL _ZdlPv(*($2 + [232]))
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$18
	$5 = (int_64)0
	
.LABEL $label$17
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9788])
	$4 = ((int_64)$5 & (int_64)72057594037927935)
	$12 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	$1 = [0]
	
.LOOP $label$37:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$36 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$38 }
	$4 = $5
	$6 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$38
	$4 = $5
	
.LOOP $label$39:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$36 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $6 ){ goto $label$39 }
	$6 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$37 }
	goto $label$35 
	
.LABEL $label$36
	$6 = [0]
	
.LABEL $label$35
	CALL eosio_assert($6, [9837])
	$13 = *(*(($0 + [8])))
	$10 = ((int_64)$13 / (int_64)2)
	$1 = CALL $208([9686])
	if ( ($1 <= [8]) ){ goto $label$43 }
	CALL eosio_assert([0], [9690])
	goto $label$42 
	
.LABEL $label$43
	if ( ($1 == 0) ){ goto $label$41 }
	
.LABEL $label$42
	$5 = (int_64)0
	
.LOOP $label$44:
	$6 = *(($1 + [9685]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$45 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$45
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$44 }
	goto $label$40 
	
.LABEL $label$41
	$5 = (int_64)0
	
.LABEL $label$40
	CALL eosio_assert((uint_64)(((int_64)$10 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [9788])
	$4 = ((int_64)$5 & (int_64)72057594037927935)
	$14 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)4)
	$1 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$49 }
	$4 = $5
	$6 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$49
	$4 = $5
	
.LOOP $label$50:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$47 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $6 ){ goto $label$50 }
	$6 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$6 = [0]
	
.LABEL $label$46
	CALL eosio_assert($6, [9837])
	if ( ((int_64)$11 < (int_64)2) ){ goto $label$51 }
	$4 = *($3)
	*($2 + [456]) = [9565]
	*($2 + [460]) = CALL $208([9565])
	*($2 + [128]) = *($2 + [456])
	*($2 + [312]) = *(CALL $2(($2 + [408]), ($2 + [128])))
	*($2 + [304]) = $4
	*($2 + [456]) = [8531]
	*($2 + [460]) = CALL $208([8531])
	*($2 + [120]) = *($2 + [456])
	$4 = *(CALL $2(($2 + [408]), ($2 + [120])))
	*($2 + [456]) = [8522]
	*($2 + [460]) = CALL $208([8522])
	*($2 + [112]) = *($2 + [456])
	$5 = *(CALL $2(($2 + [408]), ($2 + [112])))
	$6 = *(($0 + [4]))
	$11 = *($3)
	CALL $191(($2 + [208]), *(*(($0 + [16]))))
	$1 = CALL $188(($2 + [208]), [0], [10099])
	$8 = ($1 + [8])
	*((($2 + [224]) + [8])) = *($8)
	*($2 + [224]) = *($1)
	*($1) = (int_64)0
	*($8) = [0]
	$1 = CALL $186(($2 + [224]), [10127])
	$8 = *($1 + [8])
	*($1 + [8]) = [0]
	$15 = *($1)
	*($1) = (int_64)0
	$16 = *($6)
	*(($2 + [432])) = $12
	*(($2 + [448])) = $8
	*($2 + [408]) = $11
	*($2 + [416]) = $16
	*($2 + [424]) = $7
	*($2 + [440]) = $15
	$1 = CALL $122(($2 + [456]), ($2 + [304]), $4, $5, ($2 + [408]))
	CALL $123(($2 + [264]), $1)
	$6 = *($2 + [264])
	CALL send_inline($6, (*($2 + [268]) - $6))
	$6 = *($2 + [264])
	if ( ($6 == 0) ){ goto $label$52 }
	*($2 + [268]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$52
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$53 }
	*(($1 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$53
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$54 }
	*(($1 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$54
	if ( (*($2 + [440]) & [1]) ){ goto $label$58 }
	if ( (*($2 + [224]) & [1]) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	CALL _ZdlPv(*(($2 + [448])))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$56 }
	
.LABEL $label$57
	CALL _ZdlPv(*($2 + [232]))
	if ( (*($2 + [208]) & [1]) ){ goto $label$55 }
	goto $label$51 
	
.LABEL $label$56
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$51 }
	
.LABEL $label$55
	CALL _ZdlPv(*($2 + [216]))
	
.LABEL $label$51
	if ( ((int_64)$13 < (int_64)2) ){ goto $label$12 }
	$4 = *($3)
	*($2 + [456]) = [9565]
	*($2 + [460]) = CALL $208([9565])
	*($2 + [104]) = *($2 + [456])
	*($2 + [312]) = *(CALL $2(($2 + [408]), ($2 + [104])))
	*($2 + [304]) = $4
	*($2 + [456]) = [8531]
	*($2 + [460]) = CALL $208([8531])
	*($2 + [96]) = *($2 + [456])
	$4 = *(CALL $2(($2 + [408]), ($2 + [96])))
	*($2 + [456]) = [8522]
	*($2 + [460]) = CALL $208([8522])
	*($2 + [88]) = *($2 + [456])
	$5 = *(CALL $2(($2 + [408]), ($2 + [88])))
	$6 = *(($0 + [20]))
	$7 = *($3)
	CALL $191(($2 + [208]), *(*(($0 + [16]))))
	$1 = CALL $188(($2 + [208]), [0], [10189])
	$8 = ($1 + [8])
	*((($2 + [224]) + [8])) = *($8)
	*($2 + [224]) = *($1)
	*($1) = (int_64)0
	*($8) = [0]
	$1 = CALL $186(($2 + [224]), [10227])
	$8 = *($1 + [8])
	*($1 + [8]) = [0]
	$11 = *($1)
	*($1) = (int_64)0
	$13 = *($6)
	*(($2 + [432])) = $14
	*(($2 + [448])) = $8
	*($2 + [408]) = $7
	*($2 + [416]) = $13
	*($2 + [424]) = $10
	*($2 + [440]) = $11
	$1 = CALL $122(($2 + [456]), ($2 + [304]), $4, $5, ($2 + [408]))
	CALL $123(($2 + [264]), $1)
	$6 = *($2 + [264])
	CALL send_inline($6, (*($2 + [268]) - $6))
	$6 = *($2 + [264])
	if ( ($6 == 0) ){ goto $label$59 }
	*($2 + [268]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$59
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$60 }
	*(($1 + [32])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$60
	$6 = *($1 + [16])
	if ( ($6 == 0) ){ goto $label$61 }
	*(($1 + [20])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$61
	if ( (*($2 + [440]) & [1]) ){ goto $label$65 }
	if ( (*($2 + [224]) & [1]) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$65
	CALL _ZdlPv(*(($2 + [448])))
	if ( ((*($2 + [224]) & [1]) == 0) ){ goto $label$63 }
	
.LABEL $label$64
	CALL _ZdlPv(*($2 + [232]))
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$12 }
	goto $label$62 
	
.LABEL $label$63
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$62
	CALL _ZdlPv(*($2 + [216]))
	goto $label$12 
	
.LABEL $label$16
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$15
	CALL _ZdlPv(*($2 + [216]))
	goto $label$12 
	
.LABEL $label$14
	if ( ((*($2 + [208]) & [1]) == 0) ){ goto $label$12 }
	
.LABEL $label$13
	CALL _ZdlPv(*($2 + [216]))
	
.LABEL $label$12
	$7 = *(*($0))
	$1 = CALL $208([10343])
	if ( ($1 <= [8]) ){ goto $label$69 }
	CALL eosio_assert([0], [9690])
	goto $label$68 
	
.LABEL $label$69
	if ( ($1 == 0) ){ goto $label$67 }
	
.LABEL $label$68
	$4 = (int_64)0
	
.LOOP $label$70:
	$6 = *(($1 + [10342]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$71 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$71
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$70 }
	goto $label$66 
	
.LABEL $label$67
	$4 = (int_64)0
	
.LABEL $label$66
	*($2 + [392]) = (int_64)10000
	*($2 + [400]) = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9788])
	$4 = (uint_64)*($2 + [400]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$74:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$73 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$75 }
	$4 = $5
	$6 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$74 }
	goto $label$72 
	
.LABEL $label$75
	$4 = $5
	
.LOOP $label$76:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$73 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $6 ){ goto $label$76 }
	$6 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$74 }
	goto $label$72 
	
.LABEL $label$73
	$6 = [0]
	
.LABEL $label$72
	CALL eosio_assert($6, [9837])
	*(($2 + [384])) = [0]
	*($2 + [376]) = (int_64)0
	$1 = CALL $208([10351])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$78 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$81 }
	*($2 + [376]) = ($1 << [1])
	$6 = (($2 + [376]) | [1])
	if ( $1 ){ goto $label$80 }
	goto $label$79 
	
.LABEL $label$81
	$8 = (($1 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($2 + [376]) = ($8 | [1])
	*($2 + [384]) = $6
	*($2 + [380]) = $1
	
.LABEL $label$80
	CALL memcpy($6, [10351], $1)
	
.LABEL $label$79
	*(($6 + $1)) = [0]
	*((($2 + [48]) + [8])) = *((($2 + [392]) + [8]))
	*($2 + [48]) = *($2 + [392])
	CALL $32($3, $7, ($2 + [48]), ($2 + [376]))
	if ( ((*($2 + [376]) & [1]) == 0) ){ goto $label$82 }
	CALL _ZdlPv(*($2 + [384]))
	
.LABEL $label$82
	$7 = *(*(($0 + [4])))
	$1 = CALL $208([10343])
	if ( ($1 <= [8]) ){ goto $label$85 }
	CALL eosio_assert([0], [9690])
	goto $label$84 
	
.LABEL $label$85
	if ( ($1 == 0) ){ goto $label$83 }
	
.LABEL $label$84
	$4 = (int_64)0
	
.LOOP $label$86:
	$6 = *(($1 + [10342]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$87 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$87
	$4 = ((int_64)((int_64)$4 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$86 }
	goto $label$77 
	
.LABEL $label$83
	$4 = (int_64)0
	goto $label$77 
	
.LABEL $label$78
	CALL $177(($2 + [376]))
	
.LABEL $label$77
	*($2 + [360]) = (int_64)20000
	*($2 + [368]) = ((int_64)((int_64)$4 << (int_64)8) | (int_64)4)
	CALL eosio_assert([1], [9788])
	$4 = (uint_64)*($2 + [368]) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$90:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$89 }
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$91 }
	$4 = $5
	$6 = [1]
	$8 = $1
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$91
	$4 = $5
	
.LOOP $label$92:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$89 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = ((int_32)$1 < (int_32)[6])
	$8 = ($1 + [1])
	$1 = $8
	if ( $6 ){ goto $label$92 }
	$6 = [1]
	$1 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$89
	$6 = [0]
	
.LABEL $label$88
	CALL eosio_assert($6, [9837])
	*(($2 + [352])) = [0]
	*($2 + [344]) = (int_64)0
	$1 = CALL $208([10401])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$96 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$99 }
	*($2 + [344]) = ($1 << [1])
	$8 = (($2 + [344]) | [1])
	if ( $1 ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$99
	$6 = (($1 + [16]) & [-16])
	$8 = CALL _Znwj($6)
	*($2 + [344]) = ($6 | [1])
	*($2 + [352]) = $8
	*($2 + [348]) = $1
	
.LABEL $label$98
	CALL memcpy($8, [10401], $1)
	
.LABEL $label$97
	$6 = [0]
	*(($8 + $1)) = [0]
	*((($2 + [32]) + [8])) = *((($2 + [360]) + [8]))
	*($2 + [32]) = *($2 + [360])
	CALL $32($3, $7, ($2 + [32]), ($2 + [344]))
	if ( ((*($2 + [344]) & [1]) == 0) ){ goto $label$100 }
	CALL _ZdlPv(*($2 + [352]))
	
.LABEL $label$100
	$4 = *($3 + [8])
	*(($2 + [494])) = [0]
	*((($2 + [456]) + [32])) = [0]
	*($2 + [492]) = [0]
	*($2 + [456]) = $4
	*($2 + [464]) = $4
	*($2 + [472]) = (int_64)-1
	*($2 + [480]) = (int_64)0
	$4 = *($3)
	*($2 + [408]) = $3
	*($2 + [416]) = *($0)
	*($2 + [424]) = *($0 + [20])
	*($2 + [428]) = *(($0 + [16]))
	*($2 + [432]) = *($0 + [24])
	*($2 + [436]) = *(($0 + [8]))
	*($2 + [412]) = ($2 + [456])
	CALL $124(($2 + [304]), ($2 + [456]), $4, ($2 + [408]))
	$4 = *($3 + [8])
	*((($2 + [304]) + [32])) = [0]
	*($2 + [304]) = $4
	*($2 + [312]) = $4
	*($2 + [320]) = (int_64)-1
	*($2 + [328]) = (int_64)0
	$1 = CALL db_find_i64($4, $4, (int_64)-2688959059892301568, *(*($0 + [28])))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$101 }
	$6 = CALL $69(($2 + [304]), $1)
	CALL eosio_assert(((int_32)*($6 + [56]) == (int_32)($2 + [304])), [9293])
	
.LABEL $label$101
	$1 = ((int_32)$6 != (int_32)[0])
	CALL eosio_assert($1, [10464])
	CALL eosio_assert($1, [10587])
	CALL eosio_assert($1, [9535])
	$1 = CALL db_next_i64(*($6 + [60]), ($2 + [408]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$102 }
	CALL $69(($2 + [304]), $1)
	
.LABEL $label$102
	CALL $70(($2 + [304]), $6)
	if ( (*(*(($0 + [24]))) == 0) ){ goto $label$93 }
	$4 = *($3)
	*((($2 + [264]) + [32])) = [0]
	*($2 + [272]) = $4
	*($2 + [264]) = $4
	*($2 + [280]) = (int_64)-1
	*($2 + [288]) = (int_64)0
	$1 = CALL db_lowerbound_i64($4, $4, (int_64)-3877954090172416000, (int_64)0)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$94 }
	$8 = (($2 + [408]) + [32])
	$17 = (($2 + [408]) + [16])
	$18 = (($2 + [192]) | [1])
	$19 = ($2 + [252])
	$20 = ($2 + [448])
	$21 = ($2 + [244])
	$1 = CALL $58(($2 + [264]), $1)
	if ( ((int_64)*($1 + [32]) < (int_64)1) ){ goto $label$95 }
	$22 = [2]
	goto $label$2 
	
.LABEL $label$96
	CALL $177(($2 + [344]))
	
.LABEL $label$95
	$22 = [0]
	goto $label$2 
	
.LABEL $label$94
	$22 = [19]
	goto $label$2 
	
.LABEL $label$93
	$22 = [27]
	
.LABEL $label$2
	
.LOOP $label$103:
	goto $label$164 
	
.LABEL $label$181
	*($2 + [224]) = [9083]
	*($2 + [228]) = CALL $208([9083])
	*($2 + [24]) = *($2 + [224])
	CALL $2(($2 + [408]), ($2 + [24]))
	if ( ((int_64)*($1) == (int_64)*($2 + [408])) ){ goto $label$131 }
	$22 = [3]
	goto $label$103 
	
.LABEL $label$180
	$4 = *($3)
	*($2 + [224]) = [9565]
	*($2 + [228]) = CALL $208([9565])
	*($2 + [16]) = *($2 + [224])
	CALL $2(($2 + [408]), ($2 + [16]))
	*((($2 + [208]) + [8])) = *($2 + [408])
	*($2 + [208]) = $4
	*($2 + [224]) = [8531]
	*($2 + [228]) = CALL $208([8531])
	*($2 + [8]) = *($2 + [224])
	CALL $2(($2 + [408]), ($2 + [8]))
	$4 = *($2 + [408])
	*($2 + [224]) = [8522]
	*($2 + [228]) = CALL $208([8522])
	*($2) = *($2 + [224])
	CALL $2(($2 + [408]), $2)
	$5 = *($2 + [408])
	$7 = *($3)
	*(($0 = (($2 + [192]) + [8]))) = [0]
	*($2 + [192]) = (int_64)0
	$6 = CALL $208([10500])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$127 }
	$22 = [4]
	goto $label$103 
	
.LABEL $label$179
	$9 = ($1 + [32])
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$126 }
	$22 = [17]
	goto $label$103 
	
.LABEL $label$178
	*($2 + [192]) = ($6 << [1])
	$23 = $18
	if ( $6 ){ goto $label$124 }
	goto $label$125 
	
.LABEL $label$177
	$24 = (($6 + [16]) & [-16])
	$23 = CALL _Znwj($24)
	*($0) = $23
	*($2 + [192]) = ($24 | [1])
	*($2 + [196]) = $6
	$22 = [6]
	goto $label$103 
	
.LABEL $label$176
	CALL memcpy($23, [10500], $6)
	$22 = [7]
	goto $label$103 
	
.LABEL $label$175
	*(($23 + $6)) = [0]
	*((($2 + [408]) + [8])) = *($1)
	$10 = *(($9 + [8]))
	$11 = *($9)
	*($8) = *($2 + [192])
	*(($8 + [8])) = *($0)
	*(($17 + [8])) = $10
	*($17) = $11
	*($0) = [0]
	*($2 + [408]) = $7
	*($2 + [192]) = (int_64)0
	CALL $123(($2 + [496]), CALL $122(($2 + [224]), ($2 + [208]), $4, $5, ($2 + [408])))
	$6 = *($2 + [496])
	CALL send_inline($6, (*($2 + [500]) - $6))
	$6 = *($2 + [496])
	if ( ($6 == 0) ){ goto $label$123 }
	$22 = [8]
	goto $label$103 
	
.LABEL $label$174
	*($2 + [500]) = $6
	CALL _ZdlPv($6)
	$22 = [9]
	goto $label$103 
	
.LABEL $label$173
	$6 = *($19)
	if ( ($6 == 0) ){ goto $label$122 }
	$22 = [10]
	goto $label$103 
	
.LABEL $label$172
	*((($2 + [224]) + [32])) = $6
	CALL _ZdlPv($6)
	$22 = [11]
	goto $label$103 
	
.LABEL $label$171
	$6 = *((($2 + [224]) + [16]))
	if ( ($6 == 0) ){ goto $label$121 }
	$22 = [12]
	goto $label$103 
	
.LABEL $label$170
	*($21) = $6
	CALL _ZdlPv($6)
	$22 = [13]
	goto $label$103 
	
.LABEL $label$169
	if ( ((*($8) & [1]) == 0) ){ goto $label$120 }
	$22 = [14]
	goto $label$103 
	
.LABEL $label$168
	CALL _ZdlPv(*($20))
	$22 = [15]
	goto $label$103 
	
.LABEL $label$167
	if ( ((*($2 + [192]) & [1]) == 0) ){ goto $label$129 }
	$22 = [16]
	goto $label$103 
	
.LABEL $label$166
	CALL _ZdlPv(*($0))
	goto $label$130 
	
.LABEL $label$165
	$1 = CALL $58(($2 + [264]), $1)
	if ( ((int_64)*($1 + [32]) >= (int_64)1) ){ goto $label$128 }
	$22 = [0]
	goto $label$103 
	
.LABEL $label$164
	$4 = *($3)
	CALL eosio_assert([1], [9344])
	CALL $125(($2 + [264]), $1, $4, ($2 + [408]))
	CALL eosio_assert([1], [9535])
	$1 = CALL db_next_i64(*($1 + [56]), ($2 + [408]))
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$132 }
	$22 = [19]
	goto $label$103 
	
.LABEL $label$163
	$3 = *($2 + [288])
	if ( ($3 == 0) ){ goto $label$119 }
	$22 = [20]
	goto $label$103 
	
.LABEL $label$162
	$0 = ($2 + [292])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$118 }
	$22 = [21]
	goto $label$103 
	
.LABEL $label$161
	$22 = [22]
	goto $label$103 
	
.LABEL $label$160
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$116 }
	$22 = [23]
	goto $label$103 
	
.LABEL $label$159
	CALL _ZdlPv($6)
	$22 = [24]
	goto $label$103 
	
.LABEL $label$158
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$117 }
	$22 = [25]
	goto $label$103 
	
.LABEL $label$157
	$1 = *(($2 + [288]))
	goto $label$115 
	
.LABEL $label$156
	$1 = $3
	$22 = [26]
	goto $label$103 
	
.LABEL $label$155
	*($0) = $3
	CALL _ZdlPv($1)
	$22 = [27]
	goto $label$103 
	
.LABEL $label$154
	$3 = *($2 + [328])
	if ( ($3 == 0) ){ goto $label$114 }
	$22 = [28]
	goto $label$103 
	
.LABEL $label$153
	$0 = ($2 + [332])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$113 }
	$22 = [29]
	goto $label$103 
	
.LABEL $label$152
	$22 = [30]
	goto $label$103 
	
.LABEL $label$151
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$111 }
	$22 = [31]
	goto $label$103 
	
.LABEL $label$150
	if ( ((*($6 + [40]) & [1]) == 0) ){ goto $label$110 }
	$22 = [32]
	goto $label$103 
	
.LABEL $label$149
	CALL _ZdlPv(*(($6 + [48])))
	$22 = [33]
	goto $label$103 
	
.LABEL $label$148
	CALL _ZdlPv($6)
	$22 = [34]
	goto $label$103 
	
.LABEL $label$147
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$112 }
	$22 = [35]
	goto $label$103 
	
.LABEL $label$146
	$1 = *(($2 + [328]))
	goto $label$109 
	
.LABEL $label$145
	$1 = $3
	$22 = [36]
	goto $label$103 
	
.LABEL $label$144
	*($0) = $3
	CALL _ZdlPv($1)
	$22 = [37]
	goto $label$103 
	
.LABEL $label$143
	$3 = *($2 + [480])
	if ( ($3 == 0) ){ goto $label$108 }
	$22 = [38]
	goto $label$103 
	
.LABEL $label$142
	$0 = ($2 + [484])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$107 }
	$22 = [39]
	goto $label$103 
	
.LABEL $label$141
	$22 = [40]
	goto $label$103 
	
.LABEL $label$140
	$1 = ($1 + [-24])
	$6 = *($1)
	*($1) = [0]
	if ( ($6 == 0) ){ goto $label$105 }
	$22 = [41]
	goto $label$103 
	
.LABEL $label$139
	CALL _ZdlPv($6)
	$22 = [42]
	goto $label$103 
	
.LABEL $label$138
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$106 }
	$22 = [43]
	goto $label$103 
	
.LABEL $label$137
	$1 = *(($2 + [480]))
	goto $label$104 
	
.LABEL $label$136
	$1 = $3
	$22 = [44]
	goto $label$103 
	
.LABEL $label$135
	*($0) = $3
	CALL _ZdlPv($1)
	$22 = [45]
	goto $label$103 
	
.LABEL $label$134
	$global$0 = ($2 + [512])
	return (unreachable)
	
.LABEL $label$133
	CALL $177(($2 + [192]))
	
.LABEL $label$132
	$22 = [1]
	goto $label$103 
	
.LABEL $label$131
	$22 = [0]
	goto $label$103 
	
.LABEL $label$130
	$22 = [0]
	goto $label$103 
	
.LABEL $label$129
	$22 = [0]
	goto $label$103 
	
.LABEL $label$128
	$22 = [2]
	goto $label$103 
	
.LABEL $label$127
	$22 = [18]
	goto $label$103 
	
.LABEL $label$126
	$22 = [5]
	goto $label$103 
	
.LABEL $label$125
	$22 = [7]
	goto $label$103 
	
.LABEL $label$124
	$22 = [6]
	goto $label$103 
	
.LABEL $label$123
	$22 = [9]
	goto $label$103 
	
.LABEL $label$122
	$22 = [11]
	goto $label$103 
	
.LABEL $label$121
	$22 = [13]
	goto $label$103 
	
.LABEL $label$120
	$22 = [15]
	goto $label$103 
	
.LABEL $label$119
	$22 = [27]
	goto $label$103 
	
.LABEL $label$118
	$22 = [48]
	goto $label$103 
	
.LABEL $label$117
	$22 = [22]
	goto $label$103 
	
.LABEL $label$116
	$22 = [24]
	goto $label$103 
	
.LABEL $label$115
	$22 = [26]
	goto $label$103 
	
.LABEL $label$114
	$22 = [37]
	goto $label$103 
	
.LABEL $label$113
	$22 = [47]
	goto $label$103 
	
.LABEL $label$112
	$22 = [30]
	goto $label$103 
	
.LABEL $label$111
	$22 = [34]
	goto $label$103 
	
.LABEL $label$110
	$22 = [33]
	goto $label$103 
	
.LABEL $label$109
	$22 = [36]
	goto $label$103 
	
.LABEL $label$108
	$22 = [45]
	goto $label$103 
	
.LABEL $label$107
	$22 = [46]
	goto $label$103 
	
.LABEL $label$106
	$22 = [40]
	goto $label$103 
	
.LABEL $label$105
	$22 = [42]
	goto $label$103 
	
.LABEL $label$104
	$22 = [44]
	goto $label$103 
	(unreachable)
	(unreachable)
	$22
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$4 }
	CALL eosio_assert([0], [8543])
	$3 = [12]
	goto $label$3 
	
.LABEL $label$4
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$5:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$7 }
	$7 = [0]
	goto $label$6 
	
.LABEL $label$7
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$8 }
	$7 = ($7 + [-48])
	goto $label$6 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [-91])
	goto $label$6 
	
.LABEL $label$9
	$7 = [0]
	CALL eosio_assert([0], [8648])
	$4 = *($0)
	
.LABEL $label$6
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$1
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$10 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [8581])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [8648])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$10
	return $0
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [9077])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $109(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $125 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [112])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [52]) == (int_32)$0), [9379])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$13()), [9425])
	$5 = *($1)
	CALL $138($3, $1)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9476])
	*($4 + [72]) = ($4 + [52])
	*($4 + [68]) = $4
	*($4 + [64]) = $4
	*($4 + [80]) = ($4 + [64])
	*($4 + [92]) = ($1 + [8])
	*($4 + [88]) = $1
	*($4 + [96]) = ($1 + [24])
	*($4 + [100]) = ($1 + [32])
	*($4 + [104]) = ($1 + [48])
	CALL $139(($4 + [88]), ($4 + [80]))
	CALL db_update_i64(*($1 + [56]), $2, $4, [52])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8832])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([120])) + [24]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [32]) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3 + [56]) = (int_64)0
	*($3 + [64]) = (int_64)0
	*($3 + [72]) = (int_64)0
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)0
	*($3 + [100]) = $1
	CALL $127(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [104])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $115(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $14 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = [9083]
	*($3 + [60]) = CALL $208([9083])
	*($3 + [8]) = *($3 + [56])
	CALL require_auth(*(CALL $2(($3 + [16]), ($3 + [8]))))
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	*($3 + [52]) = [0]
	$4 = *($0 + [8])
	*($3 + [16]) = $4
	*($3 + [24]) = $4
	$0 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-3615145394423463936, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $46(($3 + [16]), $5)
	CALL eosio_assert(((int_32)*($0 + [168]) == (int_32)($3 + [16])), [9293])
	
.LABEL $label$1
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [9096])
	CALL eosio_assert($5, [9344])
	CALL $56(($3 + [16]), $0, $1, ($3 + [56]))
	$6 = *($3 + [40])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($3 + [44])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $40($5)
	CALL _ZdlPv($5)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($3 + [40]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($3 + [64])
}

int_32 .FUNC $15 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	*($4 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8966])
	CALL memcpy(($4 + [32]), $2, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [8966])
	CALL memcpy((($4 + [32]) + [8]), ($2 + [8]), [8])
	*(($4 + [20])) = ($2 + [16])
	*(($4 + [24])) = ($2 + $7)
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	$1 = *($4 + [32])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $214($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL require_auth($1)
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$5 = *($0 + [8])
	*($3 + [8]) = $5
	*($3 + [16]) = $5
	$0 = [0]
	$6 = CALL db_find_i64($5, $5, (int_64)-3615145394423463936, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $46(($3 + [8]), $6)
	CALL eosio_assert(((int_32)*($0 + [168]) == (int_32)($3 + [8])), [9293])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$0 != (int_32)[0]), [9572])
	CALL eosio_assert(((int_64)*($0 + [8]) == (int_64)$1), [9597])
	$6 = *($0 + [124])
	$7 = CALL $208([9565])
	if ( ((int_32)$7 != (int_32)( *(($0 + [128])) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$2 }
	$4 = (CALL $190(($0 + [124]), [0], [-1], [9565], $7) == 0)
	
.LABEL $label$2
	CALL eosio_assert($4, [9662])
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $40($4)
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [32]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $6
	
.LABEL $label$4
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $17 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$6 = ($global$0 - [128])
	$global$0 = $6
	*($6 + [112]) = $1
	*($6 + [120]) = $3
	*($6 + [111]) = $4
	*($6 + [96]) = $5
	*($6 + [8]) = [9083]
	*($6 + [12]) = CALL $208([9083])
	*($6) = *($6 + [8])
	CALL require_auth(*(CALL $2(($6 + [56]), $6)))
	$4 = CALL $208([9686])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [9690])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($4 + [9685]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)0
	
.LABEL $label$1
	CALL eosio_assert([1], [9788])
	$5 = ((int_64)$3 & (int_64)72057594037927935)
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	$4 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$1 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$5 = $1
	$8 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	$5 = $1
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$9 = ($4 + [1])
	$4 = $9
	if ( $7 ){ goto $label$14 }
	$8 = [1]
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$8 = [0]
	
.LABEL $label$10
	CALL eosio_assert($8, [9837])
	if ( (*($6 + [111]) == 0) ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [9837])
	if ( (*($6 + [111]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	*(($6 + [88])) = [0]
	*($6 + [72]) = (int_64)-1
	$1 = *($0)
	*($6 + [56]) = $1
	*($6 + [64]) = $1
	$5 = (int_64)0
	*($6 + [80]) = (int_64)0
	$10 = $1
	$4 = CALL db_upperbound_i64($1, $1, (int_64)-3877954090172416000, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$15 }
	CALL $58(($6 + [56]), $4)
	$1 = *(($6 + [64]))
	$10 = *($6 + [56])
	
.LABEL $label$15
	$4 = CALL db_lowerbound_i64($10, $1, (int_64)-3877954090172416000, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$16 }
	$4 = CALL $58(($6 + [56]), $4)
	$5 = (int_64)0
	
.LOOP $label$17:
	CALL eosio_assert(((int_64)*(($4 + [16])) == (int_64)$3), [9857])
	$5 = ((int_64)*($4 + [8]) + (int_64)$5)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9900])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9919])
	CALL eosio_assert([1], [9535])
	$4 = CALL db_next_i64(*($4 + [56]), ($6 + [8]))
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$16 }
	$4 = CALL $58(($6 + [56]), $4)
	goto $label$17 
	
.LABEL $label$16
	$1 = *($2)
	$10 = *($2 + [8])
	CALL eosio_assert(((int_64)$3 == (int_64)$10), [9857])
	$5 = ((int_64)$1 + (int_64)$5)
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [9900])
	CALL eosio_assert(((int_64)$5 < (int_64)4611686018427387904), [9919])
	*($2 + [8]) = $10
	*($2) = $5
	$9 = *($6 + [80])
	if ( ($9 == 0) ){ goto $label$7 }
	$8 = ($6 + [84])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$19 }
	
.LOOP $label$20:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$21 }
	CALL _ZdlPv($7)
	
.LABEL $label$21
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$20 }
	$4 = *(($6 + [80]))
	goto $label$18 
	
.LABEL $label$19
	$4 = $9
	
.LABEL $label$18
	*($8) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$7
	*(($6 + [88])) = [0]
	*($6 + [72]) = (int_64)-1
	*($6 + [80]) = (int_64)0
	*($6 + [92]) = [0]
	$5 = *($0 + [8])
	*($6 + [56]) = $5
	*($6 + [64]) = $5
	$4 = [0]
	$7 = CALL db_find_i64($5, $5, (int_64)-3615145394423463936, *($6 + [112]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$22 }
	$4 = CALL $46(($6 + [56]), $7)
	CALL eosio_assert(((int_32)*($4 + [168]) == (int_32)($6 + [56])), [9293])
	
.LABEL $label$22
	$7 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($7, [9096])
	*($6 + [48]) = *($4 + [8])
	*($6 + [40]) = *($4 + [136])
	$5 = *($0)
	*($6 + [16]) = $2
	*($6 + [20]) = $0
	*($6 + [12]) = ($6 + [48])
	*($6 + [8]) = ($6 + [120])
	*($6 + [24]) = ($6 + [112])
	*($6 + [28]) = ($6 + [40])
	*($6 + [32]) = ($6 + [111])
	*($6 + [36]) = ($6 + [96])
	CALL eosio_assert($7, [9344])
	CALL $59(($6 + [56]), $4, $5, ($6 + [8]))
	$9 = *($6 + [80])
	if ( ($9 == 0) ){ goto $label$23 }
	$8 = ($6 + [84])
	$4 = *($8)
	if ( ((int_32)$4 == (int_32)$9) ){ goto $label$25 }
	
.LOOP $label$26:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$27 }
	CALL $40($7)
	CALL _ZdlPv($7)
	
.LABEL $label$27
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$26 }
	$4 = *(($6 + [80]))
	goto $label$24 
	
.LABEL $label$25
	$4 = $9
	
.LABEL $label$24
	*($8) = $9
	CALL _ZdlPv($4)
	
.LABEL $label$23
	$global$0 = ($6 + [128])
}

int_32 .FUNC $10 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [64]) = ($2 + $5)
	*($4 + [56]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8966])
	CALL memcpy(($4 + [72]), $2, [8])
	CALL eosio_assert(((int_32)($5 & [-8]) != (int_32)[8]), [8966])
	CALL memcpy((($4 + [72]) + [8]), ($2 + [8]), [8])
	*($4 + [60]) = ($2 + [16])
	CALL $44(($4 + [56]), (($4 + [72]) + [16]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($6 = (($4 + [128]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [24])
	CALL $48(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $214($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL require_auth($1)
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [44]) = [0]
	$5 = *($0 + [8])
	*($4 + [8]) = $5
	*($4 + [16]) = $5
	$0 = [0]
	$6 = CALL db_find_i64($5, $5, (int_64)-3615145394423463936, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $46(($4 + [8]), $6)
	CALL eosio_assert(((int_32)*($0 + [168]) == (int_32)($4 + [8])), [9293])
	
.LABEL $label$1
	$6 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($6, [9096])
	*($4 + [48]) = [9083]
	*($4 + [52]) = CALL $208([9083])
	*($4) = *($4 + [48])
	CALL eosio_assert(((int_64)*(CALL $2(($4 + [56]), $4)) == (int_64)$1), [9115])
	*($4 + [56]) = $3
	CALL eosio_assert($6, [9344])
	CALL $50(($4 + [8]), $0, $1, ($4 + [56]))
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$2 }
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $40($3)
	CALL _ZdlPv($3)
	
.LABEL $label$6
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($4 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $6
	
.LABEL $label$3
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$2
	$global$0 = ($4 + [64])
}

void .FUNC $12 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [144])
	$global$0 = $2
	*($2 + [32]) = [9083]
	*($2 + [36]) = CALL $208([9083])
	*($2 + [8]) = *($2 + [32])
	CALL require_auth(*(CALL $2(($2 + [96]), ($2 + [8]))))
	*((($2 + [96]) + [32])) = [0]
	*($2 + [112]) = (int_64)-1
	*($2 + [120]) = (int_64)0
	*($2 + [132]) = [0]
	$3 = *($0 + [8])
	*($2 + [96]) = $3
	*($2 + [104]) = $3
	$4 = [0]
	$5 = CALL db_find_i64($3, $3, (int_64)-3615145394423463936, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $46(($2 + [96]), $5)
	CALL eosio_assert(((int_32)*($4 + [168]) == (int_32)($2 + [96])), [9293])
	
.LABEL $label$1
	$6 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($6, [9096])
	*($2 + [88]) = (int_64)0
	$7 = (($2 + [72]) | [4])
	*($2 + [72]) = $7
	*($2 + [76 align=4]) = (int_64)0
	*((($2 + [32]) + [32])) = [0]
	*(($2 + [70])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	*($2 + [68]) = [0]
	$3 = *(($0 + [8]))
	*($2 + [32]) = $3
	*($2 + [40]) = $3
	*($2 + [24]) = ($2 + [32])
	$5 = ($4 + [8])
	CALL $51(($2 + [136]), ($2 + [24]), $5)
	$8 = *($2 + [140])
	if ( ($8 == 0) ){ goto $label$3 }
	if ( ((int_64)*($5) != (int_64)*($8 + [24])) ){ goto $label$3 }
	$3 = *($2 + [136])
	*($2 + [16]) = $3
	$9 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	if ( ($9) == 0) ){ goto $label$2 }
	$10 = ($2 + [80])
	
.LOOP $label$4:
	$5 = *($2 + [76])
	if ( ($5 == 0) ){ goto $label$8 }
	$8 = $7
	$1 = *($5 + [16])
	$3 = *(($9 + [16]))
	if ( ((uint_64)$3 >= (uint_64)$1) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	$5 = $7
	$8 = $7
	$12 = [3]
	goto $label$5 
	
.LABEL $label$7
	$12 = [9]
	goto $label$5 
	
.LABEL $label$6
	$12 = [2]
	
.LABEL $label$5
	
.LOOP $label$9:
	goto $label$26 
	
.LABEL $label$30
	$8 = $5
	$5 = $11
	$1 = *($5 + [16])
	if ( ((uint_64)$3 >= (uint_64)$1) ){ goto $label$19 }
	$12 = [9]
	goto $label$9 
	
.LABEL $label$29
	$11 = *($5)
	if ( $11 ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$28
	if ( ((uint_64)$1 >= (uint_64)$3) ){ goto $label$14 }
	$12 = [8]
	goto $label$9 
	
.LABEL $label$27
	$8 = ($5 + [4])
	$11 = *($5 + [4])
	if ( ($11 == 0) ){ goto $label$17 }
	$12 = [0]
	goto $label$9 
	
.LABEL $label$26
	$5 = $8
	goto $label$18 
	
.LABEL $label$25
	if ( *($8) ){ goto $label$13 }
	$12 = [5]
	goto $label$9 
	
.LABEL $label$24
	*(($11 = CALL _Znwj([24]))) = (int_64)0
	*($11 + [8]) = $5
	*($8) = $11
	*($11 + [16]) = *(($9 + [16]))
	$5 = *(*($2 + [72]))
	if ( ($5 == 0) ){ goto $label$10 }
	$12 = [6]
	goto $label$9 
	
.LABEL $label$23
	*($2 + [72]) = $5
	$11 = *($8)
	$12 = [7]
	goto $label$9 
	
.LABEL $label$22
	CALL $52(*($2 + [76]), $11)
	*($10) = (*($10) + [1])
	goto $label$12 
	
.LABEL $label$21
	$8 = $5
	if ( (*($8) == 0) ){ goto $label$11 }
	$12 = [4]
	goto $label$9 
	
.LABEL $label$20
	CALL $53(($2 + [16]))
	$9 = *($2 + [20])
	if ( $9 ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$19
	$12 = [2]
	goto $label$9 
	
.LABEL $label$18
	$12 = [1]
	goto $label$9 
	
.LABEL $label$17
	$12 = [3]
	goto $label$9 
	
.LABEL $label$16
	$12 = [10]
	goto $label$9 
	
.LABEL $label$15
	$12 = [1]
	goto $label$9 
	
.LABEL $label$14
	$12 = [3]
	goto $label$9 
	
.LABEL $label$13
	$12 = [4]
	goto $label$9 
	
.LABEL $label$12
	$12 = [4]
	goto $label$9 
	
.LABEL $label$11
	$12 = [5]
	goto $label$9 
	
.LABEL $label$10
	$12 = [7]
	goto $label$9 
	
.LABEL $label$3
	*($2 + [20]) = [0]
	*($2 + [16]) = ($2 + [24])
	
.LABEL $label$2
	*($2 + [88]) = *(($2 + [80]))
	$3 = *($0)
	*($2 + [136]) = ($2 + [88])
	CALL eosio_assert($6, [9344])
	CALL $54(($2 + [96]), $4, $3, ($2 + [136]))
	$11 = *($2 + [56])
	if ( ($11 == 0) ){ goto $label$31 }
	$9 = ($2 + [60])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$33 }
	
.LOOP $label$34:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$35 }
	CALL _ZdlPv($8)
	
.LABEL $label$35
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$34 }
	$5 = *(($2 + [56]))
	goto $label$32 
	
.LABEL $label$33
	$5 = $11
	
.LABEL $label$32
	*($9) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$31
	CALL $55(($2 + [72]), *($2 + [76]))
	$11 = *($2 + [120])
	if ( ($11 == 0) ){ goto $label$36 }
	$9 = ($2 + [124])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$38 }
	
.LOOP $label$39:
	$5 = ($5 + [-24])
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$40 }
	CALL $40($8)
	CALL _ZdlPv($8)
	
.LABEL $label$40
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$39 }
	$5 = *(($2 + [120]))
	goto $label$37 
	
.LABEL $label$38
	$5 = $11
	
.LABEL $label$37
	*($9) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$36
	$global$0 = ($2 + [144])
	$12
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8966])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $214($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $185 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $18 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$3 = ($global$0 - [176])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [96]))) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = [0]
	*($4 + [120]) = (int_64)0
	*($4 + [68]) = $2
	*($4 + [64]) = $2
	*($4 + [72]) = ($2 + $7)
	*($4 + [160]) = ($4 + [64])
	*($4 + [32]) = ($4 + [80])
	CALL $57(($4 + [32]), ($4 + [160]))
	*(($9 = (($4 + [16]) + [8]))) = *($4 + [72])
	*($4 + [16]) = *($4 + [64])
	$10 = *($9)
	*(($3 = (($4 + [128]) + [8]))) = $10
	*(($9 = (($4 + [144]) + [8]))) = $10
	$11 = *($4 + [16])
	*($4 + [144]) = $11
	*($4 + [128]) = $11
	$10 = *($9)
	*((($4 + [160]) + [8])) = $10
	*(($4 + [56])) = $10
	*($4 + [32]) = $0
	*($4 + [40]) = $1
	$0 = *($4 + [144])
	*($4 + [48]) = $0
	*($4 + [160]) = $0
	*($3) = *($8)
	*($4 + [128]) = *($4 + [88])
	$0 = *($4 + [80])
	$1 = *($4 + [104])
	$8 = *($4 + [112])
	$11 = *($4 + [120])
	*($9) = *($3)
	*($4 + [144]) = *($4 + [128])
	$3 = (($4 + [32]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$12 = *((($4 + [144]) + [8]))
	*((($4 + [160]) + [8])) = $12
	*(($4 + [8])) = $12
	$12 = *($4 + [144])
	*($4) = $12
	*($4 + [160]) = $12
	CALL void $3((int_32 $0), (int_64 $4), (int_32 $1), (int_64 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $11), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $214($2)
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [64])
	$global$0 = $3
	CALL require_auth($1)
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	*($3 + [44]) = [0]
	$4 = *($0 + [8])
	*($3 + [8]) = $4
	*($3 + [16]) = $4
	$0 = [0]
	$5 = CALL db_find_i64($4, $4, (int_64)-3615145394423463936, $2)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $46(($3 + [8]), $5)
	CALL eosio_assert(((int_32)*($0 + [168]) == (int_32)($3 + [8])), [9293])
	
.LABEL $label$1
	$5 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($5, [9572])
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$3 }
	CALL eosio_assert([1], [10769])
	goto $label$2 
	
.LABEL $label$3
	*($3 + [48]) = [9083]
	*($3 + [52]) = CALL $208([9083])
	*($3) = *($3 + [48])
	CALL eosio_assert(((int_64)*(CALL $2(($3 + [56]), $3)) == (int_64)$1), [10769])
	
.LABEL $label$2
	CALL eosio_assert($5, [10587])
	CALL eosio_assert($5, [9535])
	$5 = CALL db_next_i64(*($0 + [172]), ($3 + [56]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	CALL $46(($3 + [8]), $5)
	
.LABEL $label$4
	CALL $60(($3 + [8]), $0)
	$6 = *($3 + [32])
	if ( ($6 == 0) ){ goto $label$5 }
	$7 = ($3 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$9 }
	CALL $40($5)
	CALL _ZdlPv($5)
	
.LABEL $label$9
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($3 + [32]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $6
	
.LABEL $label$6
	*($7) = $6
	CALL _ZdlPv($0)
	
.LABEL $label$5
	$global$0 = ($3 + [64])
}

void .FUNC $184 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$5 }
	$5 = uint_32($3 >> [1])
	if ( ($5 <= $1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = ($1 - $5)
	if ( ($1 == 0) ){ goto $label$2 }
	if ( $4 ){ goto $label$8 }
	$5 = [10]
	$4 = uint_32($3 >> [1])
	if ( (([10] - $4) <= $1) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = *($0 + [4])
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	if ( ((uint_32)($5 - $4) >= (uint_32)$1) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $185($0, $5, (($4 + $1) - $5), $4, $4, [0], [0])
	$3 = *($0)
	
.LABEL $label$6
	if ( ($3 & [1]) ){ goto $label$10 }
	$3 = ($0 + [1])
	goto $label$9 
	
.LABEL $label$10
	$3 = *($0 + [8])
	
.LABEL $label$9
	CALL memset(($3 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$11
	*($0 + [4]) = $1
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$3
	if ( $4 ){ goto $label$1 }
	*((($0 + $1) + [1])) = [0]
	*($0) = ($1 << [1])
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*((*($0 + [8]) + $1)) = [0]
	*($0 + [4]) = $1
}

int_32 .FUNC $187 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0)
	$5 = ($4 & [1])
	if ( $5 ){ goto $label$5 }
	$4 = uint_32($4 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = [10]
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$6
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$10 }
	CALL $181($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	goto $label$9 
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$9 }
	if ( $5 ){ goto $label$8 }
	$5 = ($0 + [1])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( $1 ){ goto $label$2 }
	
.LABEL $label$7
	CALL memmove($6, $2, $3)
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL memmove(($6 + $3), $6, $1)
	CALL memmove($6, ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) ), $3)
	
.LABEL $label$1
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = ($3 << [1])
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$11
	*($0 + [4]) = $3
	*(($5 + $3)) = [0]
	(unreachable)
	return $0
}

int_32 .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $208($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $181($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $180 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $181($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $207(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [176])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3615145394423463936, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [176]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [96])
	if ( (CALL $207((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [180]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3615145394423463935, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [180])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $117 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $207(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [176])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3615145394423463936, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [176]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [96])
	if ( (CALL $207((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [180]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3615145394423463935, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [180])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((int_32)*($4 + [8]) != (int_32)*($4 + [4])), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [1])
	*($4 + [4]) = (*($4 + [4]) + [1])
	*($3) = ((int_32)*($2 + [8]) != (int_32)[0])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [36])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy($4, *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $207(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [176])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3615145394423463936, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [176]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [96])
	if ( (CALL $207((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [180]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3615145394423463935, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [180])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $207(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [176])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3615145394423463936, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [176]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [96])
	if ( (CALL $207((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [180]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3615145394423463935, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [180])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$4 = *($0)
	$5 = ($1 + [16])
	CALL $180($5, *($3 + [8]))
	$6 = ($1 + [28])
	CALL $180($6, *($3 + [12]))
	$7 = ($1 + [40])
	CALL $180($7, *($3 + [16]))
	$8 = ($1 + [52])
	CALL $180($8, *($3 + [20]))
	$9 = ($1 + [64])
	CALL $180($9, *($3 + [24]))
	*($1 + [80]) = *(*($3 + [28]))
	*($1 + [96]) = *(*($3 + [36]))
	*($1 + [108]) = *(*($3 + [40]))
	*($1 + [88]) = *(*($3 + [32]))
	$10 = ($1 + [124])
	CALL $180($10, *($3 + [44]))
	*($1 + [104]) = *(*($3 + [48]))
	*(($3 = $2) + [16]) = [0]
	*($3) = ($3 + [16])
	$11 = ($1 + [8])
	*($3 + [28]) = $11
	*($3 + [24]) = $1
	*($3 + [32]) = $5
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	$12 = ($1 + [80])
	*($3 + [52]) = $12
	$13 = ($1 + [88])
	*($3 + [56]) = $13
	$14 = ($1 + [96])
	*($3 + [60]) = $14
	$15 = ($1 + [104])
	*($3 + [64]) = $15
	$16 = ($1 + [108])
	*($3 + [68]) = $16
	$17 = ($1 + [112])
	*($3 + [72]) = $17
	*($3 + [76]) = $10
	$18 = ($1 + [136])
	*($3 + [80]) = $18
	$19 = ($1 + [144])
	*($3 + [84]) = $19
	$20 = ($1 + [156])
	*($3 + [88]) = $20
	CALL $103(($3 + [24]), $3)
	$21 = *($3 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$2 = CALL $211($21)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($21 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $21)
	*($3 + [16]) = $3
	*($3 + [28]) = $11
	*($3 + [24]) = $1
	*($3 + [32]) = $5
	*($3 + [36]) = $6
	*($3 + [40]) = $7
	*($3 + [44]) = $8
	*($3 + [48]) = $9
	*($3 + [52]) = $12
	*($3 + [56]) = $13
	*($3 + [60]) = $14
	*($3 + [64]) = $15
	*($3 + [68]) = $16
	*($3 + [72]) = $17
	*($3 + [76]) = $10
	*($3 + [80]) = $18
	*($3 + [84]) = $19
	*($3 + [88]) = $20
	CALL $104(($3 + [24]), ($3 + [16]))
	$22 = *($1)
	*($1 + [172]) = CALL db_store_i64(*($4 + [8]), (int_64)-3615145394423463936, *(*($0 + [8])), $22, $2, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL $214($2)
	
.LABEL $label$3
	if ( (uint_64)($22 <= *($4 + [16])) ){ goto $label$4 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$22 + (int_64)1) : ((uint_64)$22 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$2 = ($4 + [8])
	$22 = *($2)
	$0 = *(($0 + [8]))
	$23 = *($0)
	$24 = *($1)
	*($3 + [24]) = *(($1 + [8]))
	*($1 + [176]) = CALL db_idx64_store($22, (int_64)-3615145394423463936, $23, $24, ($3 + [24]))
	$22 = *($0)
	$23 = *($2)
	$24 = *($1)
	*($3 + [24]) = *(($1 + [96]))
	*(($1 + [180])) = CALL db_idx64_store($23, (int_64)-3615145394423463935, $22, $24, ($3 + [24]))
	$global$0 = ($3 + [96])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = *($0)
	$5 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [8])
	if ( (CALL $207(*($4 + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [176])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)-3615145394423463936, $3, *(*($4 + [16])))
	*(*(($4 + [12])) + [176]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$1
	$4 = *($0)
	$6 = *($4)
	*($3 + [8]) = *(*($4 + [4]) + [96])
	if ( (CALL $207((*($4 + [8]) + [8]), ($3 + [8]), [8]) == 0) ){ goto $label$3 }
	$0 = *((*($4 + [12]) + [180]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$4 }
	$0 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)-3615145394423463935, $3, *(*($4 + [16])))
	*((*(($4 + [12])) + [180])) = $0
	
.LABEL $label$4
	CALL db_idx64_update($0, *(*($4 + [20])), ($3 + [8]))
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [8])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8966])
	CALL memcpy(($2 + [8]), *($4 + [4]), [8])
	*($3 + [8]) = *($2 + [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy($0, *($4 + [4]), [4])
	*($4 + [4]) = (*($4 + [4]) + [4])
	$global$0 = ($2 + [16])
}

void .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = ($global$0 - [96])
	$global$0 = $5
	*($5 + [80]) = $2
	CALL require_auth($1)
	*(($5 + [72])) = [0]
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	$6 = *($0 + [8])
	*($5 + [40]) = $6
	*($5 + [48]) = $6
	$0 = CALL db_find_i64($6, $6, (int_64)5032147294128963584, $2)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	$0 = CALL $75(($5 + [40]), $0)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)($5 + [40])), [9293])
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$6 }
	CALL eosio_assert([1], [11018])
	goto $label$5 
	
.LABEL $label$7
	if ( ((int_64)$2 != (int_64)$1) ){ goto $label$4 }
	CALL eosio_assert([1], [10950])
	goto $label$3 
	
.LABEL $label$6
	*($5 + [88]) = [9083]
	*($5 + [92]) = CALL $208([9083])
	*($5 + [16]) = *($5 + [88])
	CALL eosio_assert(((int_64)*(CALL $2(($5 + [24]), ($5 + [16]))) == (int_64)$1), [11018])
	
.LABEL $label$5
	*($5 + [28]) = $4
	*($5 + [24]) = $3
	CALL eosio_assert([1], [9344])
	CALL $76(($5 + [40]), $0, $1, ($5 + [24]))
	$4 = *($5 + [64])
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	*($5 + [88]) = [9083]
	*($5 + [92]) = CALL $208([9083])
	*($5 + [8]) = *($5 + [88])
	CALL eosio_assert(((int_64)*(CALL $2(($5 + [24]), ($5 + [8]))) == (int_64)$1), [10950])
	
.LABEL $label$3
	*($5 + [28]) = $3
	*($5 + [32]) = $4
	*($5 + [24]) = ($5 + [80])
	CALL $77(($5 + [88]), ($5 + [40]), $1, ($5 + [24]))
	$4 = *($5 + [64])
	if ( ($4 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = (($5 + [40]) + [28])
	$3 = *($7)
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$11 }
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$12 }
	CALL _ZdlPv(*(($0 + [28])))
	
.LABEL $label$12
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($0 + [16])))
	
.LABEL $label$13
	CALL _ZdlPv($0)
	
.LABEL $label$11
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$10 }
	$0 = *(($5 + [64]))
	goto $label$8 
	
.LABEL $label$9
	$0 = $4
	
.LABEL $label$8
	*($7) = $4
	CALL _ZdlPv($0)
	$global$0 = ($5 + [96])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

void .FUNC $28 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = [9083]
	*($2 + [60]) = CALL $208([9083])
	*($2 + [8]) = *($2 + [56])
	CALL require_auth(*(CALL $2(($2 + [16]), ($2 + [8]))))
	*(($2 + [48])) = [0]
	*(($2 + [54])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	*($2 + [52]) = [0]
	$3 = *($0 + [8])
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-4994024801686257664, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $72(($2 + [16]), $4)
	CALL eosio_assert(((int_32)*($0 + [100]) == (int_32)($2 + [16])), [9293])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [10927])
	CALL eosio_assert($4, [10587])
	CALL eosio_assert($4, [9535])
	$4 = CALL db_next_i64(*($0 + [104]), ($2 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $72(($2 + [16]), $4)
	
.LABEL $label$2
	CALL $73(($2 + [16]), $0)
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [64])
}

int_32 .FUNC $21 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*(($4 + [104])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [112]) = [0]
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $61(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $62(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [80]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $214($2)
	$2 = [1]
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [88])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $20 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [96])
	$global$0 = $5
	*($5 + [84]) = $4
	*($5 + [88]) = $1
	*($5 + [24]) = [9083]
	*($5 + [28]) = CALL $208([9083])
	*($5 + [8]) = *($5 + [24])
	CALL require_auth(*(CALL $2(($5 + [40]), ($5 + [8]))))
	*(($5 + [72])) = [0]
	*($5 + [56]) = (int_64)-1
	*($5 + [64]) = (int_64)0
	$1 = *($0 + [8])
	*($5 + [40]) = $1
	*($5 + [48]) = $1
	$1 = *($0)
	*($5 + [28]) = $2
	*($5 + [32]) = $3
	*($5 + [24]) = ($5 + [88])
	*($5 + [36]) = ($5 + [84])
	CALL $63(($5 + [16]), ($5 + [40]), $1, ($5 + [24]))
	$2 = *($5 + [64])
	if ( ($2 == 0) ){ goto $label$1 }
	$4 = ($5 + [68])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($5 + [64]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $2
	
.LABEL $label$2
	*($4) = $2
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$global$0 = ($5 + [96])
}

void .FUNC $23 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = [9083]
	*($2 + [60]) = CALL $208([9083])
	*($2 + [8]) = *($2 + [56])
	CALL require_auth(*(CALL $2(($2 + [16]), ($2 + [8]))))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-4417020450001911808, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $64(($2 + [16]), $4)
	CALL eosio_assert(((int_32)*($0 + [48]) == (int_32)($2 + [16])), [9293])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [10834])
	CALL eosio_assert($4, [10587])
	CALL eosio_assert($4, [9535])
	$4 = CALL db_next_i64(*($0 + [52]), ($2 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $64(($2 + [16]), $4)
	
.LABEL $label$2
	CALL $66(($2 + [16]), $0)
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [16])))
	
.LABEL $label$8
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [64])
}

void .FUNC $22 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = ($global$0 - [80])
	$global$0 = $5
	*($5 + [76]) = $4
	*($5 + [16]) = [9083]
	*($5 + [20]) = CALL $208([9083])
	*($5 + [8]) = *($5 + [16])
	CALL require_auth(*(CALL $2(($5 + [32]), ($5 + [8]))))
	*(($5 + [64])) = [0]
	*($5 + [48]) = (int_64)-1
	*($5 + [56]) = (int_64)0
	$6 = *($0 + [8])
	*($5 + [32]) = $6
	*($5 + [40]) = $6
	$4 = [0]
	$7 = CALL db_find_i64($6, $6, (int_64)-4417020450001911808, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $64(($5 + [32]), $7)
	CALL eosio_assert(((int_32)*($4 + [48]) == (int_32)($5 + [32])), [9293])
	
.LABEL $label$1
	$7 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($7, [10816])
	$6 = *($0)
	*($5 + [20]) = $3
	*($5 + [16]) = $2
	*($5 + [24]) = ($5 + [76])
	CALL eosio_assert($7, [9344])
	CALL $65(($5 + [32]), $4, $6, ($5 + [16]))
	$2 = *($5 + [56])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = ($5 + [60])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($0 + [16])))
	
.LABEL $label$7
	CALL _ZdlPv($0)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$5 }
	$4 = *(($5 + [56]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $2
	
.LABEL $label$3
	*($3) = $2
	CALL _ZdlPv($4)
	
.LABEL $label$2
	$global$0 = ($5 + [80])
}

void .FUNC $25 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = [9083]
	*($2 + [60]) = CALL $208([9083])
	*($2 + [8]) = *($2 + [56])
	CALL require_auth(*(CALL $2(($2 + [16]), ($2 + [8]))))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-2688959069660504064, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $67(($2 + [16]), $4)
	CALL eosio_assert(((int_32)*($0 + [44]) == (int_32)($2 + [16])), [9293])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [10857])
	CALL eosio_assert($4, [10587])
	CALL eosio_assert($4, [9535])
	$4 = CALL db_next_i64(*($0 + [48]), ($2 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $67(($2 + [16]), $4)
	
.LABEL $label$2
	CALL $68(($2 + [16]), $0)
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [64])
}

int_32 .FUNC $24 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [8966])
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [28])) = ($2 + [8])
	*(($4 + [32])) = ($2 + $7)
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $214($2)
	
.LABEL $label$6
	$global$0 = ($4 + [48])
	return [1]
}

void .FUNC $27 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = [9083]
	*($2 + [60]) = CALL $208([9083])
	*($2 + [8]) = *($2 + [56])
	CALL require_auth(*(CALL $2(($2 + [16]), ($2 + [8]))))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-3877954090172416000, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $58(($2 + [16]), $4)
	CALL eosio_assert(((int_32)*($0 + [52]) == (int_32)($2 + [16])), [9293])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [10898])
	CALL eosio_assert($4, [10587])
	CALL eosio_assert($4, [9535])
	$4 = CALL db_next_i64(*($0 + [56]), ($2 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $58(($2 + [16]), $4)
	
.LABEL $label$2
	CALL $71(($2 + [16]), $0)
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [64])
}

void .FUNC $26 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [56]) = [9083]
	*($2 + [60]) = CALL $208([9083])
	*($2 + [8]) = *($2 + [56])
	CALL require_auth(*(CALL $2(($2 + [16]), ($2 + [8]))))
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	*($2 + [40]) = (int_64)0
	$3 = *($0 + [8])
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)-2688959059892301568, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $69(($2 + [16]), $4)
	CALL eosio_assert(((int_32)*($0 + [56]) == (int_32)($2 + [16])), [9293])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [10464])
	CALL eosio_assert($4, [10587])
	CALL eosio_assert($4, [9535])
	$4 = CALL db_next_i64(*($0 + [60]), ($2 + [56]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $69(($2 + [16]), $4)
	
.LABEL $label$2
	CALL $70(($2 + [16]), $0)
	$5 = *($2 + [40])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [44])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$7 }
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$8
	CALL _ZdlPv($4)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($2 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [64])
}

void .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $192($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $40($1)
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	int_64 $23
	int_64 $24
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($0)
	CALL $102(*($0 + [4]), $1)
	*(($4 = $2) + [16]) = [0]
	*($4) = ($4 + [16])
	$5 = ($1 + [8])
	*($4 + [28]) = $5
	*($4 + [24]) = $1
	$6 = ($1 + [16])
	*($4 + [32]) = $6
	$7 = ($1 + [28])
	*($4 + [36]) = $7
	$8 = ($1 + [40])
	*($4 + [40]) = $8
	$9 = ($1 + [52])
	*($4 + [44]) = $9
	$10 = ($1 + [64])
	*($4 + [48]) = $10
	$11 = ($1 + [80])
	*($4 + [52]) = $11
	$12 = ($1 + [88])
	*($4 + [56]) = $12
	$13 = ($1 + [96])
	*($4 + [60]) = $13
	$14 = ($1 + [104])
	*($4 + [64]) = $14
	$15 = ($1 + [108])
	*($4 + [68]) = $15
	$16 = ($1 + [112])
	*($4 + [72]) = $16
	$17 = ($1 + [124])
	*($4 + [76]) = $17
	$18 = ($1 + [136])
	*($4 + [80]) = $18
	$19 = ($1 + [144])
	*($4 + [84]) = $19
	$20 = ($1 + [156])
	*($4 + [88]) = $20
	CALL $103(($4 + [24]), $4)
	$21 = *($4 + [16])
	if ( ($21 <= [513]) ){ goto $label$2 }
	$2 = CALL $211($21)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($21 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$1
	*($4 + [4]) = $2
	*($4) = $2
	*($4 + [8]) = ($2 + $21)
	*($4 + [16]) = $4
	*($4 + [28]) = $5
	*($4 + [24]) = $1
	*($4 + [32]) = $6
	*($4 + [36]) = $7
	*($4 + [40]) = $8
	*($4 + [44]) = $9
	*($4 + [48]) = $10
	*($4 + [52]) = $11
	*($4 + [56]) = $12
	*($4 + [60]) = $13
	*($4 + [64]) = $14
	*($4 + [68]) = $15
	*($4 + [72]) = $16
	*($4 + [76]) = $17
	*($4 + [80]) = $18
	*($4 + [84]) = $19
	*($4 + [88]) = $20
	CALL $104(($4 + [24]), ($4 + [16]))
	$22 = *($1)
	*($1 + [172]) = CALL db_store_i64(*($3 + [8]), (int_64)-3615145394423463936, *(*($0 + [8])), $22, $2, $21)
	if ( ($21 <= [513]) ){ goto $label$3 }
	CALL $214($2)
	
.LABEL $label$3
	if ( (uint_64)($22 <= *($3 + [16])) ){ goto $label$4 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$22 + (int_64)1) : ((uint_64)$22 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$2 = ($3 + [8])
	$22 = *($2)
	$0 = *(($0 + [8]))
	$23 = *($0)
	$24 = *($1)
	*($4 + [24]) = *($1 + [8])
	*($1 + [176]) = CALL db_idx64_store($22, (int_64)-3615145394423463936, $23, $24, ($4 + [24]))
	$22 = *($0)
	$23 = *($2)
	$24 = *($1)
	*($4 + [24]) = *(($1 + [96]))
	*(($1 + [180])) = CALL db_idx64_store($23, (int_64)-3615145394423463935, $22, $24, ($4 + [24]))
	$global$0 = ($4 + [96])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = (*($2) + [16])
	*(($2 = *($1))) = $1
	$4 = *($3)
	$3 = *($0 + [8])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$2
	$4 = *($3)
	$3 = *($0 + [12])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$4
	$4 = *($3)
	$3 = *($0 + [16])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$6
	$4 = *($3)
	$3 = *($0 + [20])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$7:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$7 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$8 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$8
	$4 = *($3)
	$3 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$9:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$9 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$10 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$10
	$1 = ($1 + [32])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [48])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$11:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$11 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$12 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$12
	$4 = *($3)
	$3 = *($0 + [52])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$13:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$13 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$14 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$14
	$1 = ($1 + [8])
	*($2) = $1
	$4 = *($3)
	$3 = *($0 + [60])
	$5 = (CASTING uint_64)(uint_32 ( *($3 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$15:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$15 }
	*($2) = $1
	$3 = *($3)
	$3 = ( *(($3 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$16 }
	$1 = ($3 + $1)
	*($2) = $1
	
.LABEL $label$16
	$3 = *($0)
	$0 = *($0 + [64])
	$5 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$17:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$17 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$18 }
	*($2) = ($0 + $1)
	
.LABEL $label$18
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($3 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($3), *($3 + [8]), (int_64)-3615145394423463936, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $46($3, $5)
	*($2 + [12]) = [0]
	*($2 + [8]) = $3
	$4 = *(*(CALL $105(($2 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [8891])
	*($1) = *(($3 + [16]))
	*($1 + [8]) = *(*($0 + [4]))
	CALL $180(($1 + [16]), *($0 + [8]))
	CALL $180(($1 + [40]), *($0 + [12]))
	*($1 + [80]) = *(*($0 + [16]))
	*($1 + [88]) = *(*($0 + [20]))
	*($1 + [108]) = ((CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) + [94608000])
	CALL $183(($1 + [124]), [8883])
	*($1 + [104]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $105 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [172]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [9029])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)-3615145394423463936)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [8975])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [8975])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $46(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $109(*($1), *($0 + [8]))
	CALL $109(*($1), *($0 + [12]))
	CALL $109(*($1), *($0 + [16]))
	CALL $109(*($1), *($0 + [20]))
	CALL $109(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9077])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[3]), [9077])
	CALL memcpy(*($3 + [4]), $2, [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $109(*($1), *($0 + [48]))
	CALL $109(*($1), *($0 + [52]))
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9077])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $109(*($1), *($0 + [60]))
	CALL $109(*($1), *($0 + [64]))
}

int_32 .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8971])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $108($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8966])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $44(*($1), *($0 + [8]))
	CALL $44(*($1), *($0 + [12]))
	CALL $44(*($1), *($0 + [16]))
	CALL $44(*($1), *($0 + [20]))
	CALL $44(*($1), *($0 + [24]))
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[3]), [8966])
	CALL memcpy($2, *($3 + [4]), [4])
	*($3 + [4]) = (*($3 + [4]) + [4])
	CALL $44(*($1), *($0 + [48]))
	CALL $44(*($1), *($0 + [52]))
	$2 = *($0 + [56])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $44(*($1), *($0 + [60]))
	CALL $44(*($1), *($0 + [64]))
}

int_32 .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9077])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9077])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $192($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $212 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $213($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8224])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	float_64 $6
	float_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $178(($2 + [16]), ($1 + [8]))
	$5 = CALL $178($2, ($1 + [20]))
	$6 = *($1 + [40])
	$7 = *($1 + [32])
	$1 = *($0 + [4])
	$8 = *($1 + [4])
	$0 = (*($0) + int_32($8 >> [1]))
	$1 = *($1)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$9 = CALL $178(($2 + [32]), $5)
	$8 = CALL $178(($2 + [48]), $4)
	CALL void $0((int_32 $3), (int_64 $8), (int_32 $9), (int_32 $7), (int_64 $6), (int_64 $1))
	if ( (*($2 + [32]) & [1]) ){ goto $label$8 }
	if ( (*($2 + [48]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL _ZdlPv(*($9 + [8]))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL _ZdlPv(*($8 + [8]))
	$1 = [1]
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$1 = [1]
	if ( (*($5) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( (*($4) & $1) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($5 + [8]))
	if ( ((*($4) & $1) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [64])
}

void .FUNC $39 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$13()), [8832])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([184])) + [8]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [56 align=4]) = (int_64)0
	*($3 + [64 align=4]) = (int_64)0
	*($3 + [72]) = [0]
	*($3 + [112 align=4]) = (int_64)0
	*($3 + [120 align=4]) = (int_64)0
	*($3 + [128 align=4]) = (int_64)0
	*($3 + [136]) = (int_64)0
	*($3 + [144 align=4]) = (int_64)0
	*($3 + [152 align=4]) = (int_64)0
	*($3 + [160 align=4]) = (int_64)0
	*($3 + [168]) = $1
	CALL $100(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [172])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $101(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $40($3)
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $36 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	float_64 $19
	$5 = ($global$0 - [400])
	$global$0 = $5
	*($5 + [392]) = $1
	*($5 + [384]) = [9083]
	*($5 + [388]) = CALL $208([9083])
	*($5 + [120]) = *($5 + [384])
	if ( ((int_64)*(CALL $2(($5 + [336]), ($5 + [120]))) != (int_64)$2) ){ goto $label$1 }
	$6 = CALL $208([9686])
	if ( ($6 <= [8]) ){ goto $label$5 }
	CALL eosio_assert([0], [9690])
	goto $label$4 
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$1 = (int_64)0
	
.LOOP $label$6:
	$7 = *(($6 + [9685]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$7 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$7
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$1 = (int_64)0
	
.LABEL $label$2
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)((int_64)((int_64)$1 << (int_64)8) | (int_64)4)), [11522])
	CALL eosio_assert(((int_64)*($3) > (int_64)0), [11546])
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$9 }
	$7 = uint_32($6 >> [1])
	$8 = ($4 + [1])
	goto $label$8 
	
.LABEL $label$9
	$7 = *($4 + [4])
	$8 = *($4 + [8])
	
.LABEL $label$8
	$9 = CALL $208([11578])
	$10 = ( $9 ? $7 : ((uint_32)$7 > (uint_32)$9) )
	$11 = ($8 + $10)
	$6 = $11
	if ( ($9 == 0) ){ goto $label$35 }
	$6 = $11
	if ( ((int_32)$10 < (int_32)$9) ){ goto $label$35 }
	$7 = ((int_32)$7 ^ (int_32)[-1])
	$6 = ((int_32)$9 ^ (int_32)[-1])
	$12 = ($8 + ([-3] - ( $6 ? $7 : ((uint_32)$6 > (uint_32)$7) )))
	$13 = ($9 + [11577])
	$15 = $11
	$14 = (($8 + $9) + [-1])
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$37 }
	
.LOOP $label$38:
	$6 = $9
	$7 = $12
	$15 = ($15 + [-1])
	if ( ((int_32)*($15) != (int_32)*($13)) ){ goto $label$39 }
	
.LOOP $label$40:
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$36 }
	$10 = ($6 + [11576])
	$16 = *($7)
	$6 = ($6 + [-1])
	$7 = ($7 + [-1])
	if ( ((int_32)$16 == (int_32)*($10)) ){ goto $label$40 }
	
.LABEL $label$39
	$12 = ($12 + [-1])
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$38 }
	
.LABEL $label$37
	$6 = $11
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$36
	$6 = ($7 + [1])
	
.LABEL $label$35
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ((($9 == 0) | ((int_32)$6 != (int_32)$11)) == 0) ){ goto $label$33 }
	CALL $88(($5 + [336]), $0)
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*($5 + [344])), [12175])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($5 + [336])), [11597])
	$6 = [0]
	$7 = CALL $179(($5 + [336]), $4, [18], [-1], $4)
	$17 = CALL $205(( *($7 + [8]) ? ($7 + [1]) : (*($5 + [336]) & [1]) ), [0], [0])
	if ( ((*($5 + [336]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($7 + [8])))
	
.LABEL $label$41
	*($5 + [376]) = $17
	*(($5 + [368])) = [0]
	*($5 + [352]) = (int_64)-1
	*($5 + [360]) = (int_64)0
	*($5 + [372]) = [0]
	$1 = *($0)
	*($5 + [336]) = $1
	*($5 + [344]) = $1
	$7 = CALL db_find_i64($1, $1, (int_64)-3615145394423463936, $17)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$42 }
	$6 = CALL $46(($5 + [336]), $7)
	CALL eosio_assert(((int_32)*($6 + [168]) == (int_32)($5 + [336])), [9293])
	
.LABEL $label$42
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [11691])
	$7 = [0]
	$10 = *($6 + [124])
	$16 = CALL $208([9565])
	if ( ((int_32)$16 != (int_32)( *(($6 + [128])) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$43 }
	$7 = (CALL $190(($6 + [124]), [0], [-1], [9565], $16) == 0)
	
.LABEL $label$43
	CALL eosio_assert($7, [9662])
	$1 = *($3)
	CALL __multi3(($5 + [40]), $1, (int_64)$1 >> (int_64)63), (int_64)2500, (int_64)0)
	$7 = ($3 + [8])
	$18 = *($7)
	$1 = *((($5 + [40]) + [8]))
	$17 = *($5 + [40])
	CALL eosio_assert(( (uint_64)($17 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [12247])
	CALL eosio_assert(( ((uint_64)$17 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [12271])
	*($5 + [328]) = $18
	CALL eosio_assert([1], [10536])
	CALL eosio_assert([1], [10551])
	*($5 + [320]) = ((int_64)$17 / (int_64)10000)
	*(($5 + [312])) = [0]
	*($5 + [296]) = (int_64)-1
	*($5 + [304]) = (int_64)0
	$1 = *($0)
	*($5 + [280]) = $1
	*($5 + [288]) = $1
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)-3877954090172416000, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$44 }
	$6 = CALL $58(($5 + [280]), $6)
	
.LOOP $label$45:
	$17 = *($5 + [320])
	$18 = (int_64)$17 >> (int_64)63)
	$19 = ((float_64)*($6 + [24]) * (float_64)(float_64)100)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$47 }
	$1 = (int_64)-9223372036854775808
	goto $label$46 
	
.LABEL $label$47
	$1 = (Rounds 0)($19)
	
.LABEL $label$46
	CALL __multi3(($5 + [24]), $1, (int_64)$1 >> (int_64)63), $17, $18)
	$18 = *((($5 + [320]) + [8]))
	$1 = *((($5 + [24]) + [8]))
	$17 = *($5 + [24])
	CALL eosio_assert(( (uint_64)($17 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [12247])
	CALL eosio_assert(( ((uint_64)$17 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [12271])
	*((($5 + [224]) + [8])) = $18
	CALL eosio_assert([1], [10536])
	CALL eosio_assert([1], [10551])
	*($5 + [224]) = ((int_64)$17 / (int_64)10000)
	$1 = *($0)
	*($5 + [192]) = ($5 + [224])
	CALL eosio_assert([1], [9344])
	CALL $89(($5 + [280]), $6, $1, ($5 + [192]))
	CALL eosio_assert([1], [9535])
	$6 = CALL db_next_i64(*($6 + [56]), ($5 + [224]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$44 }
	$6 = CALL $58(($5 + [280]), $6)
	goto $label$45 
	
.LABEL $label$44
	$1 = *($3)
	CALL __multi3(($5 + [8]), $1, (int_64)$1 >> (int_64)63), (int_64)2000, (int_64)0)
	$18 = *($7)
	$1 = *((($5 + [8]) + [8]))
	$17 = *($5 + [8])
	CALL eosio_assert(( (uint_64)($17 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [12247])
	CALL eosio_assert(( ((uint_64)$17 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [12271])
	*($5 + [272]) = $18
	CALL eosio_assert([1], [10536])
	CALL eosio_assert([1], [10551])
	*($5 + [264]) = ((int_64)$17 / (int_64)10000)
	$7 = *(($5 + [308]))
	$16 = *(($5 + [304]))
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$31 }
	
.LOOP $label$48:
	$6 = ($7 + [-24])
	$10 = *($6)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$32 }
	$7 = $6
	if ( ((int_32)$16 != (int_32)$6) ){ goto $label$48 }
	goto $label$31 
	
.LABEL $label$33
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$50 }
	$7 = uint_32($6 >> [1])
	$8 = ($4 + [1])
	goto $label$49 
	
.LABEL $label$50
	$7 = *($4 + [4])
	$8 = *($4 + [8])
	
.LABEL $label$49
	$9 = CALL $208([11711])
	$10 = ( $9 ? $7 : ((uint_32)$7 > (uint_32)$9) )
	$11 = ($8 + $10)
	$6 = $11
	if ( ($9 == 0) ){ goto $label$53 }
	$6 = $11
	if ( ((int_32)$10 < (int_32)$9) ){ goto $label$53 }
	$7 = ((int_32)$7 ^ (int_32)[-1])
	$6 = ((int_32)$9 ^ (int_32)[-1])
	$12 = ($8 + ([-3] - ( $6 ? $7 : ((uint_32)$6 > (uint_32)$7) )))
	$13 = ($9 + [11710])
	$15 = $11
	$14 = (($8 + $9) + [-1])
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$55 }
	
.LOOP $label$56:
	$6 = $9
	$7 = $12
	$15 = ($15 + [-1])
	if ( ((int_32)*($15) != (int_32)*($13)) ){ goto $label$57 }
	
.LOOP $label$58:
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$54 }
	$10 = ($6 + [11709])
	$16 = *($7)
	$6 = ($6 + [-1])
	$7 = ($7 + [-1])
	if ( ((int_32)$16 == (int_32)*($10)) ){ goto $label$58 }
	
.LABEL $label$57
	$12 = ($12 + [-1])
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$56 }
	
.LABEL $label$55
	$6 = $11
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$52 }
	goto $label$51 
	
.LABEL $label$54
	$6 = ($7 + [1])
	
.LABEL $label$53
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$51 }
	
.LABEL $label$52
	if ( ((($9 == 0) | ((int_32)$6 != (int_32)$11)) == 0) ){ goto $label$51 }
	CALL $88(($5 + [336]), $0)
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*($5 + [344])), [12175])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($5 + [336])), [11731])
	*((($5 + [336]) + [8])) = [0]
	*($5 + [336]) = (int_64)0
	$6 = CALL $208([11711])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$27 }
	*($5 + [336]) = ($6 << [1])
	$7 = (($5 + [336]) | [1])
	if ( $6 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$51
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$29 }
	$7 = uint_32($6 >> [1])
	$8 = ($4 + [1])
	goto $label$28 
	
.LABEL $label$32
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$31 }
	CALL eosio_assert(((int_32)*($10 + [52]) == (int_32)($5 + [280])), [9293])
	goto $label$30 
	
.LABEL $label$31
	$10 = [0]
	$6 = CALL db_find_i64(*($5 + [280]), *(($5 + [288])), (int_64)-3877954090172416000, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$30 }
	$10 = CALL $58(($5 + [280]), $6)
	CALL eosio_assert(((int_32)*($10 + [52]) == (int_32)($5 + [280])), [9293])
	
.LABEL $label$30
	$1 = *($0)
	*($5 + [224]) = ($5 + [264])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9344])
	CALL $90(($5 + [280]), $10, $1, ($5 + [224]))
	*(($5 + [256])) = [0]
	*($5 + [240]) = (int_64)-1
	*($5 + [248]) = (int_64)0
	$1 = *($0)
	*($5 + [224]) = $1
	*($5 + [232]) = $1
	*($5 + [204]) = $3
	*($5 + [196]) = ($5 + [376])
	*($5 + [192]) = ($5 + [224])
	*($5 + [200]) = ($5 + [392])
	*($5 + [208]) = ($5 + [320])
	CALL $91(($5 + [216]), ($5 + [224]), $1, ($5 + [192]))
	$10 = *($5 + [248])
	if ( ($10 == 0) ){ goto $label$22 }
	$16 = ($5 + [252])
	$6 = *($16)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$24 }
	
.LOOP $label$59:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$60 }
	CALL _ZdlPv($7)
	
.LABEL $label$60
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$59 }
	$6 = *(($5 + [248]))
	goto $label$23 
	
.LABEL $label$29
	$7 = *($4 + [4])
	$8 = *($4 + [8])
	
.LABEL $label$28
	$9 = CALL $208([11910])
	$10 = ( $9 ? $7 : ((uint_32)$7 > (uint_32)$9) )
	$11 = ($8 + $10)
	$6 = $11
	if ( ($9 == 0) ){ goto $label$20 }
	$6 = $11
	if ( ((int_32)$10 < (int_32)$9) ){ goto $label$20 }
	$7 = ((int_32)$7 ^ (int_32)[-1])
	$6 = ((int_32)$9 ^ (int_32)[-1])
	$12 = ($8 + ([-3] - ( $6 ? $7 : ((uint_32)$6 > (uint_32)$7) )))
	$13 = ($9 + [11909])
	$15 = $11
	$14 = (($8 + $9) + [-1])
	if ( ((int_32)$14 == (int_32)$15) ){ goto $label$61 }
	
.LOOP $label$62:
	$6 = $9
	$7 = $12
	$15 = ($15 + [-1])
	if ( ((int_32)*($15) != (int_32)*($13)) ){ goto $label$63 }
	
.LOOP $label$64:
	if ( ((int_32)$6 == (int_32)[1]) ){ goto $label$21 }
	$10 = ($6 + [11908])
	$16 = *($7)
	$6 = ($6 + [-1])
	$7 = ($7 + [-1])
	if ( ((int_32)$16 == (int_32)*($10)) ){ goto $label$64 }
	
.LABEL $label$63
	$12 = ($12 + [-1])
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$62 }
	
.LABEL $label$61
	$6 = $11
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$27
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($5 + [336]) = ($10 | [1])
	*($5 + [344]) = $7
	*($5 + [340]) = $6
	
.LABEL $label$26
	CALL memcpy($7, [11711], $6)
	
.LABEL $label$25
	*(($7 + $6)) = [0]
	*(($5 + [288])) = [0]
	*($5 + [280]) = (int_64)0
	$6 = CALL $208([9944])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$67 }
	*($5 + [280]) = ($6 << [1])
	$7 = (($5 + [280]) | [1])
	if ( $6 ){ goto $label$66 }
	goto $label$65 
	
.LABEL $label$67
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($5 + [280]) = ($10 | [1])
	*($5 + [288]) = $7
	*($5 + [284]) = $6
	
.LABEL $label$66
	CALL memcpy($7, [9944], $6)
	
.LABEL $label$65
	*(($7 + $6)) = [0]
	CALL $92($0, $4, ($5 + [336]), ($5 + [280]))
	if ( (*($5 + [280]) & [1]) ){ goto $label$69 }
	if ( (*($5 + [336]) & [1]) ){ goto $label$68 }
	goto $label$13 
	
.LABEL $label$69
	CALL _ZdlPv(*($5 + [288]))
	if ( ((*($5 + [336]) & [1]) == 0) ){ goto $label$13 }
	
.LABEL $label$68
	CALL _ZdlPv(*($5 + [344]))
	$7 = [1]
	$6 = *($4)
	if ( (($6 & [1]) == 0) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$24
	$6 = $10
	
.LABEL $label$23
	*($16) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$22
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$70 }
	$16 = ($5 + [308])
	$6 = *($16)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$72 }
	
.LOOP $label$73:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$74 }
	CALL _ZdlPv($7)
	
.LABEL $label$74
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$73 }
	$6 = *(($5 + [304]))
	goto $label$71 
	
.LABEL $label$72
	$6 = $10
	
.LABEL $label$71
	*($16) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$70
	$10 = *($5 + [360])
	if ( ($10 == 0) ){ goto $label$1 }
	$16 = ($5 + [364])
	$6 = *($16)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$76 }
	
.LOOP $label$77:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$78 }
	CALL $40($7)
	CALL _ZdlPv($7)
	
.LABEL $label$78
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$77 }
	$6 = *(($5 + [360]))
	goto $label$75 
	
.LABEL $label$76
	$6 = $10
	
.LABEL $label$75
	*($16) = $10
	CALL _ZdlPv($6)
	$global$0 = ($5 + [400])
	return (unreachable)
	
.LABEL $label$21
	$6 = ($7 + [1])
	
.LABEL $label$20
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((($9 == 0) | ((int_32)$6 != (int_32)$11)) == 0) ){ goto $label$18 }
	CALL $88(($5 + [336]), $0)
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*($5 + [344])), [12175])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($5 + [336])), [11932])
	$6 = CALL $179(($5 + [336]), $4, [21], [-1], $4)
	$17 = CALL $205(( *($6 + [8]) ? ($6 + [1]) : (*($5 + [336]) & [1]) ), [0], [0])
	if ( ((*($5 + [336]) & [1]) == 0) ){ goto $label$79 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$79
	*(($5 + [368])) = [0]
	*($5 + [352]) = (int_64)-1
	*($5 + [360]) = (int_64)0
	*($5 + [372]) = [0]
	$1 = *($0)
	*($5 + [336]) = $1
	*($5 + [344]) = $1
	$6 = CALL db_find_i64($1, $1, (int_64)-3615145394423463936, $17)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$81 }
	$6 = CALL $46(($5 + [336]), $6)
	CALL eosio_assert(((int_32)*($6 + [168]) == (int_32)($5 + [336])), [9293])
	*($5 + [284]) = $6
	*($5 + [280]) = ($5 + [336])
	goto $label$80 
	
.LABEL $label$81
	$6 = [0]
	*($5 + [284]) = [0]
	*($5 + [280]) = ($5 + [336])
	
.LABEL $label$80
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [11691])
	$7 = [1]
	$6 = [1]
	$10 = *($5 + [284])
	$1 = *($5 + [392])
	if ( ((int_64)$1 == (int_64)*($10 + [8])) ){ goto $label$82 }
	$6 = ((int_64)$1 == (int_64)*($10 + [136]))
	
.LABEL $label$82
	CALL eosio_assert($6, [11974])
	$6 = *($5 + [284])
	$10 = *($6 + [124])
	$16 = CALL $208([9565])
	if ( ((int_32)$16 != (int_32)( *(($6 + [128])) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$83 }
	$7 = ((int_32)CALL $190(($6 + [124]), [0], [-1], [9565], $16) != (int_32)[0])
	
.LABEL $label$83
	CALL eosio_assert($7, [12049])
	$6 = *($5 + [284])
	$1 = *($0)
	*($5 + [228]) = ($5 + [280])
	*($5 + [224]) = ($5 + [392])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [9344])
	CALL $93(($5 + [336]), $6, $1, ($5 + [224]))
	$10 = *($5 + [360])
	if ( ($10 == 0) ){ goto $label$18 }
	$16 = ($5 + [364])
	$6 = *($16)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$85 }
	
.LOOP $label$86:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$87 }
	CALL $40($7)
	CALL _ZdlPv($7)
	
.LABEL $label$87
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$86 }
	$6 = *(($5 + [360]))
	goto $label$84 
	
.LABEL $label$85
	$6 = $10
	
.LABEL $label$84
	*($16) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$18
	CALL $88(($5 + [336]), $0)
	CALL eosio_assert(((int_64)*(($3 + [8])) == (int_64)*($5 + [344])), [12175])
	if ( ((int_64)*($3) >= (int_64)*($5 + [336])) ){ goto $label$94 }
	$18 = *($5 + [392])
	$6 = CALL $208([10343])
	if ( ($6 <= [8]) ){ goto $label$93 }
	CALL eosio_assert([0], [9690])
	goto $label$92 
	
.LABEL $label$94
	*(($5 + [368])) = [0]
	*($5 + [352]) = (int_64)-1
	*($5 + [360]) = (int_64)0
	$1 = *($0)
	*($5 + [336]) = $1
	*($5 + [344]) = $1
	$6 = CALL db_find_i64($1, $1, (int_64)-3877954090172416000, *($5 + [392]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$91 }
	$6 = CALL $58(($5 + [336]), $6)
	CALL eosio_assert(((int_32)*($6 + [52]) == (int_32)($5 + [336])), [9293])
	$1 = *($0)
	*($5 + [280]) = $3
	CALL eosio_assert([1], [9344])
	CALL $94(($5 + [336]), $6, $1, ($5 + [280]))
	goto $label$90 
	
.LABEL $label$93
	if ( ($6 == 0) ){ goto $label$89 }
	
.LABEL $label$92
	$1 = (int_64)0
	
.LOOP $label$95:
	$7 = *(($6 + [10342]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$96 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$96
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$95 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$14 
	
.LABEL $label$91
	$1 = *($0)
	*($5 + [284]) = $3
	*($5 + [280]) = ($5 + [392])
	CALL $95(($5 + [224]), ($5 + [336]), $1, ($5 + [280]))
	
.LABEL $label$90
	$6 = CALL $208([9686])
	if ( ($6 <= [8]) ){ goto $label$98 }
	CALL eosio_assert([0], [9690])
	goto $label$97 
	
.LABEL $label$98
	if ( ($6 == 0) ){ goto $label$88 }
	
.LABEL $label$97
	$17 = (int_64)0
	
.LOOP $label$99:
	$7 = *(($6 + [9685]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$100 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$100
	$17 = ((int_64)((int_64)$17 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$99 }
	goto $label$15 
	
.LABEL $label$89
	$1 = (int_64)4
	goto $label$14 
	
.LABEL $label$88
	$17 = (int_64)0
	goto $label$15 
	
.LABEL $label$17
	CALL $177(($5 + [336]))
	
.LABEL $label$16
	CALL $177(($5 + [280]))
	
.LABEL $label$15
	CALL eosio_assert([1], [9788])
	$1 = ((int_64)$17 & (int_64)72057594037927935)
	$17 = ((int_64)((int_64)$17 << (int_64)8) | (int_64)4)
	$6 = [0]
	
.LOOP $label$103:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$102 }
	$18 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$104 }
	$1 = $18
	$7 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$103 }
	goto $label$101 
	
.LABEL $label$104
	$1 = $18
	
.LOOP $label$105:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$102 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $7 ){ goto $label$105 }
	$7 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$103 }
	goto $label$101 
	
.LABEL $label$102
	$7 = [0]
	
.LABEL $label$101
	CALL eosio_assert($7, [9837])
	$1 = (int_64)0
	$6 = ($5 + [344])
	$7 = CALL db_upperbound_i64(*($5 + [336]), *($6), (int_64)-3877954090172416000, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$106 }
	CALL $58(($5 + [336]), $7)
	
.LABEL $label$106
	$6 = CALL db_lowerbound_i64(*($5 + [336]), *($6), (int_64)-3877954090172416000, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$107 }
	$6 = CALL $58(($5 + [336]), $6)
	$1 = (int_64)0
	
.LOOP $label$108:
	CALL eosio_assert(((int_64)*(($6 + [16])) == (int_64)$17), [9857])
	$1 = ((int_64)*($6 + [8]) + (int_64)$1)
	CALL eosio_assert(((int_64)$1 > (int_64)-4611686018427387904), [9900])
	CALL eosio_assert(((int_64)$1 < (int_64)4611686018427387904), [9919])
	CALL eosio_assert([1], [9535])
	$6 = CALL db_next_i64(*($6 + [56]), ($5 + [280]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$107 }
	$6 = CALL $58(($5 + [336]), $6)
	goto $label$108 
	
.LABEL $label$107
	$6 = CALL db_lowerbound_i64(*($5 + [336]), *((($5 + [336]) + [8])), (int_64)-3877954090172416000, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$109 }
	$6 = CALL $58(($5 + [336]), $6)
	if ( ((int_64)$1 <= (int_64)0) ){ goto $label$110 }
	
.LOOP $label$111:
	*($5 + [280]) = (CASTING float_64)(int_64 ((int_64)((int_64)*($6 + [8]) * (int_64)100) / (int_64)$1))
	$17 = *($0)
	*($5 + [224]) = ($5 + [280])
	CALL eosio_assert([1], [9344])
	CALL $96(($5 + [336]), $6, $17, ($5 + [224]))
	CALL eosio_assert([1], [9535])
	$6 = CALL db_next_i64(*($6 + [56]), ($5 + [280]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$109 }
	$6 = CALL $58(($5 + [336]), $6)
	goto $label$111 
	
.LABEL $label$110
	
.LOOP $label$112:
	*($5 + [280]) = (int_64)4636737291354636288
	$1 = *($0)
	*($5 + [224]) = ($5 + [280])
	CALL eosio_assert([1], [9344])
	CALL $96(($5 + [336]), $6, $1, ($5 + [224]))
	CALL eosio_assert([1], [9535])
	$6 = CALL db_next_i64(*($6 + [56]), ($5 + [280]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$109 }
	$6 = CALL $58(($5 + [336]), $6)
	goto $label$112 
	
.LABEL $label$109
	$18 = *($5 + [392])
	$6 = CALL $208([10343])
	if ( ($6 <= [8]) ){ goto $label$116 }
	CALL eosio_assert([0], [9690])
	goto $label$115 
	
.LABEL $label$116
	if ( ($6 == 0) ){ goto $label$114 }
	
.LABEL $label$115
	$1 = (int_64)0
	
.LOOP $label$117:
	$7 = *(($6 + [10342]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$118 }
	CALL eosio_assert([0], [9735])
	
.LABEL $label$118
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$117 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$113 
	
.LABEL $label$114
	$1 = (int_64)4
	
.LABEL $label$113
	*($5 + [176]) = (int_64)1000
	*($5 + [184]) = $1
	CALL eosio_assert([1], [9788])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$121:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$120 }
	$17 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$122 }
	$1 = $17
	$7 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$121 }
	goto $label$119 
	
.LABEL $label$122
	$1 = $17
	
.LOOP $label$123:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$120 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $7 ){ goto $label$123 }
	$7 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$121 }
	goto $label$119 
	
.LABEL $label$120
	$7 = [0]
	
.LABEL $label$119
	CALL eosio_assert($7, [9837])
	*(($5 + [168])) = [0]
	*($5 + [160]) = (int_64)0
	$6 = CALL $208([12080])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$124 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$127 }
	*($5 + [160]) = ($6 << [1])
	$7 = (($5 + [160]) | [1])
	if ( $6 ){ goto $label$126 }
	goto $label$125 
	
.LABEL $label$127
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($5 + [160]) = ($10 | [1])
	*($5 + [168]) = $7
	*($5 + [164]) = $6
	
.LABEL $label$126
	CALL memcpy($7, [12080], $6)
	
.LABEL $label$125
	*(($7 + $6)) = [0]
	*((($5 + [104]) + [8])) = *((($5 + [176]) + [8]))
	*($5 + [104]) = *($5 + [176])
	CALL $32($0, $18, ($5 + [104]), ($5 + [160]))
	if ( ((*($5 + [160]) & [1]) == 0) ){ goto $label$128 }
	CALL _ZdlPv(*($5 + [168]))
	
.LABEL $label$128
	$10 = *($5 + [360])
	if ( ($10 == 0) ){ goto $label$1 }
	$16 = ($5 + [364])
	$6 = *($16)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$130 }
	
.LOOP $label$131:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$132 }
	CALL _ZdlPv($7)
	
.LABEL $label$132
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$131 }
	$6 = *(($5 + [360]))
	goto $label$129 
	
.LABEL $label$130
	$6 = $10
	
.LABEL $label$129
	*($16) = $10
	CALL _ZdlPv($6)
	goto $label$1 
	
.LABEL $label$124
	CALL $177(($5 + [160]))
	
.LABEL $label$14
	*($5 + [144]) = (int_64)1
	*($5 + [152]) = $1
	CALL eosio_assert([1], [9788])
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$135:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$134 }
	$17 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$136 }
	$1 = $17
	$7 = [1]
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$135 }
	goto $label$133 
	
.LABEL $label$136
	$1 = $17
	
.LOOP $label$137:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$134 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$6 < (int_32)[6])
	$10 = ($6 + [1])
	$6 = $10
	if ( $7 ){ goto $label$137 }
	$7 = [1]
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$135 }
	goto $label$133 
	
.LABEL $label$134
	$7 = [0]
	
.LABEL $label$133
	CALL eosio_assert($7, [9837])
	*(($5 + [136])) = [0]
	*($5 + [128]) = (int_64)0
	$6 = CALL $208([12130])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$138 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$141 }
	*($5 + [128]) = ($6 << [1])
	$7 = (($5 + [128]) | [1])
	if ( $6 ){ goto $label$140 }
	goto $label$139 
	
.LABEL $label$141
	$10 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($10)
	*($5 + [128]) = ($10 | [1])
	*($5 + [136]) = $7
	*($5 + [132]) = $6
	
.LABEL $label$140
	CALL memcpy($7, [12130], $6)
	
.LABEL $label$139
	*(($7 + $6)) = [0]
	*((($5 + [88]) + [8])) = *((($5 + [144]) + [8]))
	*($5 + [88]) = *($5 + [144])
	CALL $32($0, $18, ($5 + [88]), ($5 + [128]))
	if ( ((*($5 + [128]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($5 + [136]))
	$global$0 = ($5 + [400])
	return (unreachable)
	
.LABEL $label$138
	CALL $177(($5 + [128]))
	
.LABEL $label$13
	$7 = [1]
	$6 = *($4)
	if ( ($6 & [1]) ){ goto $label$11 }
	
.LABEL $label$12
	$6 = uint_32($6 >> $7)
	$9 = ($4 + $7)
	goto $label$10 
	
.LABEL $label$11
	$6 = *($4 + [4])
	$9 = *($4 + [8])
	
.LABEL $label$10
	$10 = [0]
	$7 = CALL $208([11798])
	if ( ($7 == 0) ){ goto $label$142 }
	$16 = ($9 + $6)
	if ( ((int_32)$6 < (int_32)$7) ){ goto $label$144 }
	$10 = $9
	
.LOOP $label$145:
	$6 = (($6 - $7) + [1])
	if ( ($6 == 0) ){ goto $label$144 }
	$6 = CALL $206($10, [45], $6)
	if ( ($6 == 0) ){ goto $label$144 }
	if ( (CALL $207($6, [11798], $7) == 0) ){ goto $label$143 }
	$10 = ($6 + [1])
	$6 = ($16 - $10)
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$145 }
	
.LABEL $label$144
	$6 = $16
	
.LABEL $label$143
	$10 = ( [-1] ? ($6 - $9) : ((int_32)$6 == (int_32)$16) )
	
.LABEL $label$142
	$6 = CALL $179(($5 + [336]), $4, [0], $10, $4)
	$17 = CALL $205(( *($6 + [8]) ? ($6 + [1]) : (*($5 + [336]) & [1]) ), [0], [0])
	if ( ((*($5 + [336]) & [1]) == 0) ){ goto $label$146 }
	CALL _ZdlPv(*(($6 + [8])))
	
.LABEL $label$146
	*($5 + [376]) = $17
	$4 = CALL $179(($5 + [264]), $4, ($10 + [1]), [-1], $4)
	$7 = [0]
	*(($5 + [368])) = [0]
	*($5 + [352]) = (int_64)-1
	*($5 + [360]) = (int_64)0
	*($5 + [372]) = [0]
	$1 = *($0)
	*($5 + [336]) = $1
	*($5 + [344]) = $1
	$6 = [0]
	$10 = CALL db_find_i64($1, $1, (int_64)-3615145394423463936, $17)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$147 }
	$6 = CALL $46(($5 + [336]), $10)
	CALL eosio_assert(((int_32)*($6 + [168]) == (int_32)($5 + [336])), [9293])
	
.LABEL $label$147
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), [11691])
	$10 = *($6 + [124])
	$16 = CALL $208([9565])
	if ( ((int_32)$16 != (int_32)( *(($6 + [128])) ? uint_32($10 >> [1]) : ($10 & [1]) )) ){ goto $label$148 }
	$7 = (CALL $190(($6 + [124]), [0], [-1], [9565], $16) == 0)
	
.LABEL $label$148
	CALL eosio_assert($7, [9662])
	if ( (CALL is_account(*($6 + [136])) == 0) ){ goto $label$150 }
	CALL eosio_assert(((int_64)*(($6 + [136])) != (int_64)*($5 + [392])), [11800])
	goto $label$149 
	
.LABEL $label$150
	CALL eosio_assert(((int_64)*($6 + [8]) != (int_64)*($5 + [392])), [11861])
	
.LABEL $label$149
	$1 = *($3)
	CALL __multi3(($5 + [72]), $1, (int_64)$1 >> (int_64)63), (int_64)2500, (int_64)0)
	$18 = *(($3 + [8]))
	$1 = *((($5 + [72]) + [8]))
	$17 = *($5 + [72])
	CALL eosio_assert(( (uint_64)($17 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [12247])
	CALL eosio_assert(( ((uint_64)$17 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [12271])
	*($5 + [328]) = $18
	CALL eosio_assert([1], [10536])
	CALL eosio_assert([1], [10551])
	*($5 + [320]) = ((int_64)$17 / (int_64)10000)
	*(($5 + [312])) = [0]
	*($5 + [296]) = (int_64)-1
	*($5 + [304]) = (int_64)0
	$1 = *($0)
	*($5 + [280]) = $1
	*($5 + [288]) = $1
	$6 = CALL db_lowerbound_i64($1, $1, (int_64)-3877954090172416000, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$151 }
	$6 = CALL $58(($5 + [280]), $6)
	
.LOOP $label$152:
	$17 = *($5 + [320])
	$18 = (int_64)$17 >> (int_64)63)
	$19 = ((float_64)*($6 + [24]) * (float_64)(float_64)100)
	if ( ((float_64)(float_64)|$19| < (float_64)(float_64)9223372036854775808) ){ goto $label$154 }
	$1 = (int_64)-9223372036854775808
	goto $label$153 
	
.LABEL $label$154
	$1 = (Rounds 0)($19)
	
.LABEL $label$153
	CALL __multi3(($5 + [56]), $1, (int_64)$1 >> (int_64)63), $17, $18)
	$18 = *((($5 + [320]) + [8]))
	$1 = *((($5 + [56]) + [8]))
	$17 = *($5 + [56])
	CALL eosio_assert(( (uint_64)($17 <= (int_64)4611686018427387904) ? ((int_64)$1 < (int_64)0) : (int_64)($1 == 0) ), [12247])
	CALL eosio_assert(( ((uint_64)$17 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$1 > (int_64)-1) : ((int_64)$1 == (int_64)-1) ), [12271])
	*((($5 + [224]) + [8])) = $18
	CALL eosio_assert([1], [10536])
	CALL eosio_assert([1], [10551])
	*($5 + [224]) = ((int_64)$17 / (int_64)10000)
	$1 = *($0)
	*($5 + [192]) = ($5 + [224])
	CALL eosio_assert([1], [9344])
	CALL $97(($5 + [280]), $6, $1, ($5 + [192]))
	CALL eosio_assert([1], [9535])
	$6 = CALL db_next_i64(*($6 + [56]), ($5 + [224]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$151 }
	$6 = CALL $58(($5 + [280]), $6)
	goto $label$152 
	
.LABEL $label$151
	$7 = *(($5 + [308]))
	$16 = *(($5 + [304]))
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$156 }
	
.LOOP $label$158:
	$6 = ($7 + [-24])
	$10 = *($6)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$157 }
	$7 = $6
	if ( ((int_32)$16 != (int_32)$6) ){ goto $label$158 }
	goto $label$156 
	
.LABEL $label$157
	if ( ((int_32)$16 == (int_32)$7) ){ goto $label$156 }
	CALL eosio_assert(((int_32)*($10 + [52]) == (int_32)($5 + [280])), [9293])
	goto $label$155 
	
.LABEL $label$156
	$10 = [0]
	$6 = CALL db_find_i64(*($5 + [280]), *(($5 + [288])), (int_64)-3877954090172416000, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$155 }
	$10 = CALL $58(($5 + [280]), $6)
	CALL eosio_assert(((int_32)*($10 + [52]) == (int_32)($5 + [280])), [9293])
	
.LABEL $label$155
	$1 = *($0)
	*($5 + [224]) = ($5 + [320])
	CALL eosio_assert(((int_32)$10 != (int_32)[0]), [9344])
	CALL $98(($5 + [280]), $10, $1, ($5 + [224]))
	*(($5 + [256])) = [0]
	*($5 + [240]) = (int_64)-1
	*($5 + [248]) = (int_64)0
	$1 = *($0)
	*($5 + [224]) = $1
	*($5 + [232]) = $1
	*($5 + [200]) = $4
	*($5 + [208]) = $3
	*($5 + [196]) = ($5 + [376])
	*($5 + [192]) = ($5 + [224])
	*($5 + [204]) = ($5 + [392])
	*($5 + [212]) = ($5 + [320])
	CALL $99(($5 + [216]), ($5 + [224]), $1, ($5 + [192]))
	$10 = *($5 + [248])
	if ( ($10 == 0) ){ goto $label$159 }
	$16 = ($5 + [252])
	$6 = *($16)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$161 }
	
.LOOP $label$162:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$163 }
	if ( ((*($7 + [40]) & [1]) == 0) ){ goto $label$164 }
	CALL _ZdlPv(*(($7 + [48])))
	
.LABEL $label$164
	CALL _ZdlPv($7)
	
.LABEL $label$163
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$162 }
	$6 = *(($5 + [248]))
	goto $label$160 
	
.LABEL $label$161
	$6 = $10
	
.LABEL $label$160
	*($16) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$159
	$10 = *($5 + [304])
	if ( ($10 == 0) ){ goto $label$165 }
	$16 = ($5 + [308])
	$6 = *($16)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$167 }
	
.LOOP $label$168:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$169 }
	CALL _ZdlPv($7)
	
.LABEL $label$169
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$168 }
	$6 = *(($5 + [304]))
	goto $label$166 
	
.LABEL $label$167
	$6 = $10
	
.LABEL $label$166
	*($16) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$165
	$10 = *($5 + [360])
	if ( ($10 == 0) ){ goto $label$170 }
	$16 = ($5 + [364])
	$6 = *($16)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$172 }
	
.LOOP $label$173:
	$6 = ($6 + [-24])
	$7 = *($6)
	*($6) = [0]
	if ( ($7 == 0) ){ goto $label$174 }
	CALL $40($7)
	CALL _ZdlPv($7)
	
.LABEL $label$174
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$173 }
	$6 = *(($5 + [360]))
	goto $label$171 
	
.LABEL $label$172
	$6 = $10
	
.LABEL $label$171
	*($16) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$170
	if ( ((*($5 + [264]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($5 + [400])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [400])
	(unreachable)
	(unreachable)
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	CALL $44(*($1), ($0 + [8]))
	CALL $44(*($1), ($0 + [20]))
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [8966])
	CALL memcpy(($0 + [40]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_64 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	CALL eosio_assert(((int_64)$1 != (int_64)$2), [11288])
	CALL require_auth($1)
	CALL eosio_assert(CALL $fimport$9($2), [11312])
	$6 = *($3 + [8])
	$7 = [0]
	*(($5 + [104])) = [0]
	$8 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $8)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$9 = CALL $86(($5 + [72]), $8, [11338])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$10 = *($3)
	if ( ((uint_64)((int_64)$10 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$11 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$12 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $12
	$7 = [1]
	$13 = $11
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $12
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$7 = ((int_32)$11 < (int_32)[6])
	$13 = ($11 + [1])
	$11 = $13
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$11 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [11182])
	CALL eosio_assert(((int_64)$10 > (int_64)0), [11357])
	CALL eosio_assert(((int_64)$6 == (int_64)*($9 + [8])), [11228])
	$11 = *($4)
	if ( ($11 & [1]) ){ goto $label$7 }
	$11 = uint_32($11 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$11 = *($4 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($11 <= [257]), [11093])
	$11 = CALL has_auth($2)
	$7 = ($3 + [8])
	$12 = *($7)
	*((($5 + [56]) + [8])) = $12
	$8 = *($3)
	*((($5 + [24]) + [8])) = $12
	*($5 + [24]) = $8
	*($5 + [56]) = $8
	CALL $87($0, $1, ($5 + [24]))
	$12 = *($7)
	*((($5 + [40]) + [8])) = $12
	$8 = *($3)
	*((($5 + [8]) + [8])) = $12
	*($5 + [8]) = $8
	*($5 + [40]) = $8
	CALL $82($0, $2, ($5 + [8]), ( $2 ? $1 : $11 ))
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$8 }
	$3 = ($5 + [100])
	$11 = *($3)
	if ( ((int_32)$11 == (int_32)$13) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = ($11 + [-24])
	$7 = *($11)
	*($11) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$13 != (int_32)$11) ){ goto $label$11 }
	$11 = *(($5 + [96]))
	goto $label$9 
	
.LABEL $label$10
	$11 = $13
	
.LABEL $label$9
	*($3) = $13
	CALL _ZdlPv($11)
	
.LABEL $label$8
	$global$0 = ($5 + [112])
}

int_32 .FUNC $35 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $84(($4 + [24]), ($4 + [160]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [144])
	*($4 + [40]) = $0
	*($4 + [160]) = $0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [24])
	CALL $85(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $214($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [112])))
	$global$0 = ($4 + [176])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return $2
}

void .FUNC $32 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	$4 = ($global$0 - [208])
	$global$0 = $4
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$5 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [9837])
	$5 = *($3)
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = uint_32($5 >> [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($3 + [4])
	
.LABEL $label$6
	CALL eosio_assert(($5 <= [257]), [11093])
	$9 = [0]
	*(($4 + [136])) = [0]
	*($4 + [120]) = (int_64)-1
	*($4 + [128]) = (int_64)0
	$7 = *($0)
	*($4 + [104]) = $7
	*($4 + [112]) = $6
	$11 = [0]
	$5 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $80(($4 + [104]), $5)
	CALL eosio_assert(((int_32)*($11 + [40]) == (int_32)($4 + [104])), [9293])
	
.LABEL $label$8
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [11122])
	CALL require_auth(*($11 + [32]))
	$12 = ($2 + [8])
	$13 = *($12)
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$9 }
	$7 = (uint_64)$13 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$7 = $8
	$9 = [1]
	$10 = $5
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$7 = $8
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$13 }
	$9 = [1]
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$9 = [0]
	
.LABEL $label$9
	CALL eosio_assert($9, [11182])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [11199])
	CALL eosio_assert(((int_64)$13 == (int_64)*($11 + [8])), [11228])
	CALL eosio_assert(((int_64)$6 <= (int_64))(*($11 + [16]) - *($11))), [11254])
	*($4 + [144]) = $2
	CALL $81(($4 + [104]), $11, (int_64)0, ($4 + [144]))
	$5 = ($11 + [32])
	$7 = *($5)
	*(($9 = (($4 + [88]) + [8]))) = *($12)
	$8 = *($2)
	*((($4 + [8]) + [8])) = *($9)
	*($4 + [88]) = $8
	*($4 + [8]) = *($4 + [88])
	CALL $82($0, $7, ($4 + [8]), $7)
	$7 = *($5)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$14 }
	$8 = *($0)
	*($4 + [72]) = [9565]
	*($4 + [76]) = CALL $208([9565])
	*($4) = *($4 + [72])
	*($4 + [80]) = *(CALL $2(($4 + [144]), $4))
	*($4 + [72]) = $7
	*((($9 = CALL _Znwj([16])) + [8])) = *($4 + [80])
	*($9) = *($4 + [72])
	$7 = *($5)
	*(($5 = (($4 + [24]) + [24]))) = *(($2 + [8]))
	*($4 + [32]) = $1
	*($4 + [24]) = $7
	*($4 + [40]) = *($2)
	CALL $178((($4 + [24]) + [32]), $3)
	*((($4 + [144]) + [24])) = *($5)
	$5 = (($4 + [24]) + [40])
	*(($10 = (($4 + [144]) + [40]))) = *($5)
	*($5) = [0]
	$5 = ($9 + [16])
	*($4 + [196]) = $5
	*($4 + [192]) = $9
	*($4 + [200]) = $5
	*($4 + [144]) = *($4 + [24])
	*($4 + [152]) = *($4 + [32])
	*($4 + [160]) = *($4 + [40])
	*($4 + [176]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $83($8, (int_64)-3617168760277827584, ($4 + [192]), ($4 + [144]))
	if ( ((*($4 + [176]) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*($10))
	
.LABEL $label$15
	$5 = *($4 + [192])
	if ( ($5 == 0) ){ goto $label$16 }
	*($4 + [196]) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$16
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [64])))
	
.LABEL $label$14
	$10 = *($4 + [128])
	if ( ($10 == 0) ){ goto $label$17 }
	$11 = ($4 + [132])
	$5 = *($11)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$19 }
	
.LOOP $label$20:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$21 }
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$20 }
	$5 = *(($4 + [128]))
	goto $label$18 
	
.LABEL $label$19
	$5 = $10
	
.LABEL $label$18
	*($11) = $10
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$global$0 = ($4 + [208])
}

int_32 .FUNC $33 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $211($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($3 = (($4 + [64]) + [16]))) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [56]) = ($2 + $5)
	*($4 + [48]) = $2
	CALL eosio_assert(((uint_32)$5 > (uint_32)[7]), [8966])
	CALL memcpy(($4 + [64]), $2, [8])
	$6 = ($5 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [8966])
	CALL memcpy((($4 + [64]) + [8]), ($2 + [8]), [8])
	*($4 + [16]) = (int_64)0
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [8966])
	CALL memcpy(($4 + [16]), ($2 + [16]), [8])
	*($3) = *($4 + [16])
	*($4 + [52]) = ($2 + [24])
	CALL $44(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($6 = (($4 + [128]) + [8]))) = $3
	$7 = *($4)
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [16])
	CALL $79(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $214($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL _ZdlPv(*(($4 + [96])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_32 .FUNC $30 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $211($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*((($4 + [64]) + [24])) = (int_64)0
	*(($4 + [96])) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [56]) = ($3 + $2)
	*($4 + [48]) = $3
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [8966])
	CALL memcpy(($4 + [64]), $3, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [8966])
	CALL memcpy((($4 + [64]) + [8]), ($3 + [8]), [8])
	*($4 + [52]) = ($3 + [16])
	CALL $44(($4 + [48]), (($4 + [64]) + [16]))
	CALL $44(($4 + [48]), ($4 + [92]))
	*(($5 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	$5 = *($5)
	*((($4 + [112]) + [8])) = $5
	*(($6 = (($4 + [128]) + [8]))) = $5
	$7 = *($4)
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$5 = *($6)
	*((($4 + [144]) + [8])) = $5
	*((($4 + [16]) + [24])) = $5
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [16])
	CALL $74(($4 + [144]), ($4 + [64]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$9 }
	$3 = [1]
	if ( (*($4 + [92]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $214($3)
	$3 = [1]
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv(*(($4 + [100])))
	if ( (*($4 + [80]) & $3) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((*($4 + [80]) & $3) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL _ZdlPv(*(($4 + [88])))
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $31 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth($1)
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0 + [8])
	*($2) = $3
	*($2 + [8]) = $3
	$0 = [0]
	$4 = CALL db_find_i64($3, $3, (int_64)5032147294128963584, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$1 }
	$0 = CALL $75($2, $4)
	CALL eosio_assert(((int_32)*($0 + [32]) == (int_32)$2), [9293])
	
.LABEL $label$1
	$4 = ((int_32)$0 != (int_32)[0])
	CALL eosio_assert($4, [11067])
	CALL eosio_assert($4, [10587])
	CALL eosio_assert($4, [9535])
	$4 = CALL db_next_i64(*($0 + [36]), ($2 + [40]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $75($2, $4)
	
.LABEL $label$2
	CALL $78($2, $0)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($2 + [28])
	$4 = *($6)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($0 + [28])))
	
.LABEL $label$8
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($0 + [16])))
	
.LABEL $label$9
	CALL _ZdlPv($0)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	$0 = *(($2 + [24]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($2 + [48])
}

void .FUNC $214 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [20720])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [20528]
	$3 = (((int_32)$1 * (int_32)[12]) + [20528])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $211 (int_32 $0)
{
	return CALL $212([12336], $0)
}

int_32 .FUNC $210 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $211($1)
	
.LABEL $label$2
	*(CALL $193()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $211(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $214($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

void .FUNC $198 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $199 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $3
	$3 = CALL $195([24], $0, $1, $2, $3)
	$global$0 = ($4 + [16])
	return $3
}

void .FUNC $196 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}

int_32 .FUNC $197 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $194 (int_32 $0)
{
}

int_32 .FUNC $195 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [23] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $197($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $197($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $197($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $197($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [20736]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $197($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $197($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $197($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

void .FUNC $192 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $193 ()
{
	return [12320]
}

int_32 .FUNC $190 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $207(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $191 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $184(($2 + [16]), [10], [0])
	$3 = *($2 + [16])
	$4 = ( *($2 + [20]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = (($2 + [16]) | [1])
	$6 = ($2 + [24])
	
.LOOP $label$2:
	*($2) = $1
	$3 = CALL $199(( *($6) ? $5 : ($3 & [1]) ), ($4 + [1]), [8468], $2)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$4 }
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$1 }
	$4 = $3
	goto $label$3 
	
.LABEL $label$4
	$4 = (($4 << [1]) | [1])
	
.LABEL $label$3
	CALL $184(($2 + [16]), $4, [0])
	$3 = *($2 + [16])
	goto $label$2 
	
.LABEL $label$1
	CALL $184(($2 + [16]), $3, [0])
	*(($0 + [8])) = *((($2 + [16]) + [8]))
	*($0) = *($2 + [16])
	$global$0 = ($2 + [32])
}