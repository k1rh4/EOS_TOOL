(data (i32.const 8192) "EOS\00")
(data (i32.const 8196) "there are no funds to distribute\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8315) "OS\00")
(data (i32.const 8318) "Leaderboard bonus from stackchips.games\00")
(data (i32.const 8358) "unable to find key\00")
(data (i32.const 8377) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8428) "error reading iterator\00")
(data (i32.const 8451) "read\00")
(data (i32.const 8456) "string is too long to be a valid symbol_code\00")
(data (i32.const 8501) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 8554) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8603) "invalid symbol name\00")
(data (i32.const 8623) "write\00")
(data (i32.const 8629) "cannot create objects in table of another contract\00")
(data (i32.const 8680) "cannot pass end iterator to modify\00")
(data (i32.const 8715) "object passed to modify is not in multi_index\00")
(data (i32.const 8761) "cannot modify objects in table of another contract\00")
(data (i32.const 8812) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8871) "get\00")
(data (i32.const 8875) "cannot increment end iterator\00")
(import "env" "require_auth" (func $fimport$0 (param i64)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$2 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$5 (param i32 i64 i32 i32)))
(import "env" "db_store_i64" (func $fimport$6 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_lowerbound_i64" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "send_deferred" (func $fimport$10 (param i32 i64 i32 i32 i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$15 (param i32 i32)))
(import "env" "memset" (func $fimport$16 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "prints_l" (func $fimport$18 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$19 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$22 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$26 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$29 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$30 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$32 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$33 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$35 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$36 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$37 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $11))
(export "_Znwj" (func $32))
(export "_ZdlPv" (func $34))
(export "_Znaj" (func $33))
(export "_ZdaPv" (func $35))
(export "_ZnwjSt11align_val_t" (func $36))
(export "_ZnajSt11align_val_t" (func $37))
(export "_ZdlPvSt11align_val_t" (func $38))
(export "_ZdaPvSt11align_val_t" (func $39))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $1 $4)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 17324))
(global $global$2 i32 (i32.const 17324))


int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [8623])
	CALL memcpy(*($0 + [4]), $1, [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[1]), [8623])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$3 = (*($0 + [4]) + [2])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [8623])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = *($1 + [12])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$6 = ((int_64)$5) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [8623])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($2 + [14]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $6 ){ goto $label$1 }
	$7 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8623])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($1 + [16]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	$5 = *($1 + [20])
	
.LOOP $label$2:
	$6 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$1 = ((int_64)$5) != (int_64)0
	*($2 + [15]) = (($1) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($7) - $4) > (int_32)[0]), [8623])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $1 ){ goto $label$2 }
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8623])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8623])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [8623])
	CALL memcpy(*($6), ($7 + [8]), [8])
	*($6) = (*($6) + [8])
	CALL $21(CALL $22($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8623])
	CALL memcpy(*($4 + [4]), $3, [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$0 = *($0)
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8623])
	CALL memcpy(*($4 + [4]), ($0 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($1)
	CALL eosio_assert(((int_32)(*($4 + [8]) - *($4 + [4])) > (int_32)[7]), [8623])
	CALL memcpy(*($4 + [4]), ($0 + [16]), [8])
	$3 = (*($4 + [4]) + [8])
	*($4 + [4]) = $3
	*($2 + [8]) = *(($0 + [24]))
	CALL eosio_assert(((int_32)(*($4 + [8]) - $3) > (int_32)[7]), [8623])
	CALL memcpy(*($4 + [4]), ($2 + [8]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $31(*($1), ($0 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8871])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $17($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8451])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8623])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [8623])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8623])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$7 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$5 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[1]), [8623])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $6, [2])
	*($4) = (*($4) + [2])
	CALL $21($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	$4 = *($4)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [8451])
	CALL memcpy($1, *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[3]), [8451])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$3 = (*($0 + [4]) + [4])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8451])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8451])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [24])) = *($2 + [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8451])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	*($2 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [8451])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*(($1 + [40])) = *($2 + [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $25($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [8623])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8623])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [8623])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8871])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$3 = *($1)
	$5 = *($1 + [4])
	$2 = int_32(($5 - $3) >> [5])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $26($1, ($7 - $2))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$2 = ($3 + ($7 << [5]))
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($5 + [-32])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($5 + [-24])))
	
.LABEL $label$8
	$5 = $7
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$9:
	CALL $27($0, $2)
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - *($7)) > (uint_32)[7]), [8451])
	CALL memcpy(($2 + [16]), *($7), [8])
	$6 = (*($7) + [8])
	*($7) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [8451])
	CALL memcpy(($2 + [24]), *($7), [8])
	*($7) = (*($7) + [8])
	$2 = ($2 + [32])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $43($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($5 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$6 = ($4 + ((int_32)$7 * (int_32)[24]))
	$8 = ($1 + [24])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$1 = (($4 + $5) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	$4 = *($3 + [48])
	if ( ($4 == 0) ){ goto $label$11 }
	$0 = ($3 + [52])
	$7 = *($0)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($7 + [-32])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($7 + [-24])))
	
.LABEL $label$15
	$7 = $1
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$14 }
	$1 = *(($3 + [48]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $4
	
.LABEL $label$12
	*($0) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	(unreachable)
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $28($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $41($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $41($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $40($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [5])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$4 }
	$3 = [134217727]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$3 = int_32($2 >> [4])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$4 = CALL _Znwj(($3 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$2 = ($0 + [4])
	
.LOOP $label$8:
	*(($6 = ($3 + [8]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*($6) = [0]
	$3 = (*($2) + [32])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $43($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$7 = ($4 + ($3 << [5]))
	$8 = ($4 + ($5 << [5]))
	$3 = $8
	
.LOOP $label$9:
	*(($2 = ($3 + [8]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$9 = ($4 + ($6 << [5]))
	$6 = *($0)
	$10 = ($0 + [4])
	$1 = *($10)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	$3 = ($5 + [-1])
	$8 = ($3 - uint_32((($1 + [-32]) - $6) >> [5]))
	$3 = ($4 + ($3 << [5]))
	
.LOOP $label$12:
	$5 = ($1 + [-24])
	*(($3 + [8])) = *($5)
	$2 = ($1 + [-32])
	*($3) = *($2)
	*($2) = (int_64)0
	*($5) = [0]
	*(($3 + [24])) = *(($1 + [-8]))
	*(($3 + [16])) = *(($1 + [-16]))
	$3 = ($3 + [-32])
	$1 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$12 }
	$8 = ($4 + ($8 << [5]))
	$6 = *(($0 + [4]))
	$1 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$1 = $6
	
.LABEL $label$10
	*($0) = $8
	*($10) = $9
	*(($0 + [8])) = $7
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($6 + [-32])
	if ( ((*($3) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-24])))
	
.LABEL $label$15
	$6 = $3
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $50($1)
	
.LABEL $label$2
	*(CALL $44()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $50(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $53($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $44())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $49($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $43 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $46(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $40 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $45 (int_32 $0)
{
}

int_32 .FUNC $44 ()
{
	return [8912]
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $52($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8229])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $8 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $43($0)
	
.LABEL $label$1
	*(($7 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($7 + [8]) = *($3)
	*($7 + [16 align=4]) = (int_64)0
	*(($3 = ($7 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($7 + [16]) = $2
	*($7 + [28 align=4]) = (int_64)0
	*(($7 + [36])) = [0]
	$6 = ($2 + [16])
	*($3) = $6
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($7 + [20])) = $6
	$9 = ($5 + ((int_32)$8 * (int_32)[40]))
	$10 = ($7 + [40])
	$2 = *($0)
	$11 = *(($0 + [4]))
	if ( ((int_32)$11 == (int_32)$2) ){ goto $label$6 }
	$12 = ($2 - $11)
	$1 = [0]
	
.LOOP $label$7:
	$8 = ($11 + $1)
	*((($2 = ($7 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($5 = ($2 + [-24]))) = (int_64)0
	*(($3 = ($2 + [-16]))) = [0]
	$6 = ($8 + [-24])
	*($5) = *($6)
	$5 = ($8 + [-16])
	*($3) = *($5)
	*($5) = [0]
	*(($5 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$3 = ($8 + [-12])
	*($5) = *($3)
	*($6) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($3) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$12 != (int_32)$1) ){ goto $label$7 }
	$7 = ($7 + $1)
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $7
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$10 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$10
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$11 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$2 = $8
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($2) = [0]
	CALL $16($2, $1)
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL $17($0, $4)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($2 + [4]) = $0
	*($2) = $0
	*($2 + [8]) = $3
	CALL $18($2, $1)
	CALL $20(CALL $19(CALL $19($2, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [8428])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$2 = CALL $50($5)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $5)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $5)
	*(($4 = CALL _Znwj([72])) + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	*($4 + [48 align=4]) = (int_64)0
	*($4 + [56]) = [0]
	*($4 + [60]) = $0
	CALL $23(($3 + [32]), $4)
	*($4 + [64]) = $1
	*($3 + [24]) = $4
	$6 = *($4)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $4
	*($7) = ($8 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $24(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $53($2)
	
.LABEL $label$6
	$2 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($2 == 0) ){ goto $label$9 }
	$0 = *($2 + [48])
	if ( ($0 == 0) ){ goto $label$10 }
	$8 = ($2 + [52])
	$1 = *($8)
	if ( ((int_32)$1 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = ($1 + [-32])
	if ( ((*($5) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($1 + [-24])))
	
.LABEL $label$14
	$1 = $5
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$13 }
	$5 = *(($2 + [48]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$10
	CALL _ZdlPv($2)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $7 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $17($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [84]) = $7
	*($4 + [80]) = $7
	*($4 + [88]) = $2
	*($4 + [64]) = ($4 + [80])
	*($4 + [72]) = $3
	CALL $29(($4 + [72]), ($4 + [64]))
	CALL $30(($4 + [80]), ($4 + [24]))
	$7 = *($4 + [80])
	CALL send_inline($7, (*($4 + [84]) - $7))
	$7 = *($4 + [80])
	if ( ($7 == 0) ){ goto $label$7 }
	*($4 + [84]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$9 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$10 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $43(($4 + [8]))
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_32 $22
	$1 = ($global$0 - [224])
	$global$0 = $1
	CALL require_auth(*($0))
	$2 = ($0 + [32])
	$4 = *(($0 + [60]))
	$3 = *(($0 + [56]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$10:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)100) ){ goto $label$9 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$8 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$2), [8377])
	if ( ($6 == 0) ){ goto $label$6 }
	if ( ((int_64)(*($6 + [8]) == 0) == 0) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$8
	$5 = CALL db_find_i64(*($2), *(($0 + [40])), (int_64)7235159551874301952, (int_64)100)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$5 = CALL $2($2, $5)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$2), [8377])
	if ( (int_64)(*($5 + [8]) == 0) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = *($0)
	$5 = CALL $47([8192])
	if ( ($5 <= [8]) ){ goto $label$13 }
	CALL eosio_assert([0], [8456])
	goto $label$12 
	
.LABEL $label$13
	if ( ($5 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$8 = (int_64)0
	
.LOOP $label$14:
	$4 = *(($5 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$15 }
	CALL eosio_assert([0], [8501])
	
.LABEL $label$15
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$14 }
	$8 = ((int_64)$8 & (int_64)72057594037927935)
	goto $label$2 
	
.LABEL $label$11
	$8 = (int_64)0
	goto $label$2 
	
.LABEL $label$6
	$12 = [52]
	goto $label$1 
	
.LABEL $label$5
	$12 = [52]
	goto $label$1 
	
.LABEL $label$4
	$12 = [52]
	goto $label$1 
	
.LABEL $label$3
	$12 = [52]
	goto $label$1 
	
.LABEL $label$2
	*((($1 + [24]) + [32])) = [0]
	*($1 + [32]) = $7
	*($1 + [24]) = (int_64)6138663591592764928
	*($1 + [40]) = (int_64)-1
	*($1 + [48]) = (int_64)0
	$9 = *(CALL $5(($1 + [24]), $8, [8358]))
	$3 = *($1 + [48])
	if ( ($3 == 0) ){ goto $label$16 }
	$6 = ($1 + [52])
	$5 = *($6)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$4 = *($5)
	*($5) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($1 + [48]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $3
	
.LABEL $label$17
	*($6) = $3
	CALL _ZdlPv($5)
	
.LABEL $label$16
	CALL eosio_assert(((int_64)$9 > (int_64)0), [8196])
	*((($1 + [168]) + [32])) = [0]
	*($1 + [176]) = (int_64)-4157798660113466416
	*($1 + [168]) = (int_64)-4157798660113466416
	*($1 + [184]) = (int_64)-1
	*($1 + [192]) = (int_64)0
	*($1 + [160]) = [0]
	*($1 + [152]) = (int_64)0
	CALL current_time()
	$8 = CALL current_time()
	$5 = CALL db_lowerbound_i64(*($1 + [168]), *($1 + [176]), (int_64)5304430433289633792, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$21 }
	$10 = ($1 + [160])
	$2 = CALL $6(($1 + [168]), $5)
	$11 = ((int_64)((int_64)((int_64)((uint_64)$8 / (uint_64)(int_64)1000000) & (int_64)4294967295) * (int_64)1000000) + (int_64)-86400000000)
	if ( ((int_64)$11 > (int_64)((int_64)*($2 + [8]) * (int_64)1000000)) ){ goto $label$22 }
	$12 = [3]
	goto $label$1 
	
.LABEL $label$22
	$12 = [1]
	goto $label$1 
	
.LABEL $label$21
	$12 = [21]
	
.LABEL $label$1
	
.LOOP $label$23:
	goto $label$167 
	
.LABEL $label$173
	$8 = (int_64)0
	$6 = ($2 + [52])
	$5 = *($2 + [48])
	if ( ((int_32)$5 == (int_32)*($6)) ){ goto $label$76 }
	$12 = [4]
	goto $label$23 
	
.LABEL $label$172
	$4 = *($5)
	$3 = CALL $47([8315])
	if ( ((int_32)$3 != (int_32)( *(($5 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )) ){ goto $label$75 }
	$12 = [19]
	goto $label$23 
	
.LABEL $label$171
	if ( (CALL $42($5, [0], [-1], [8315], $3) == 0) ){ goto $label$74 }
	$12 = [5]
	goto $label$23 
	
.LABEL $label$170
	$5 = ($5 + [32])
	if ( ((int_32)$5 != (int_32)*($6)) ){ goto $label$77 }
	goto $label$78 
	
.LABEL $label$169
	$8 = *(($5 + [16]))
	$12 = [6]
	goto $label$23 
	
.LABEL $label$168
	$7 = *($2)
	$3 = *($10)
	$5 = *($1 + [156])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$81 }
	$12 = [0]
	goto $label$23 
	
.LABEL $label$167
	*($5) = $7
	*($5 + [8]) = $8
	*($1 + [156]) = (*($1 + [156]) + [16])
	goto $label$82 
	
.LABEL $label$166
	$4 = *($1 + [152])
	$13 = int_32(($5 - $4) >> [4])
	$14 = ($13 + [1])
	if ( ((uint_32)$14 >= (uint_32)[268435456]) ){ goto $label$73 }
	$12 = [8]
	goto $label$23 
	
.LABEL $label$165
	$6 = [268435455]
	$3 = ($3 - $4)
	if ( ((uint_32)int_32($3 >> [4]) > (uint_32)[134217726]) ){ goto $label$72 }
	$12 = [14]
	goto $label$23 
	
.LABEL $label$164
	$3 = int_32($3 >> [3])
	$6 = ( $14 ? $3 : ($3 <= $14) )
	if ( ($6 == 0) ){ goto $label$68 }
	$12 = [15]
	goto $label$23 
	
.LABEL $label$163
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$71 }
	$12 = [9]
	goto $label$23 
	
.LABEL $label$162
	$14 = CALL _Znwj(($6 << [4]))
	$5 = *($1 + [156])
	$4 = *($1 + [152])
	$12 = [10]
	goto $label$23 
	
.LABEL $label$161
	*(($3 = ($14 + ($13 << [4]))) + [8]) = $8
	*($3) = $7
	$5 = ($5 - $4)
	$13 = ($3 - $5)
	$6 = ($14 + ($6 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$69 }
	$12 = [13]
	goto $label$23 
	
.LABEL $label$160
	CALL memcpy($13, $4, $5)
	$4 = *($1 + [152])
	$12 = [11]
	goto $label$23 
	
.LABEL $label$159
	*($10) = $6
	*($1 + [156]) = $3
	*($1 + [152]) = $13
	if ( ($4 == 0) ){ goto $label$84 }
	$12 = [12]
	goto $label$23 
	
.LABEL $label$158
	CALL _ZdlPv($4)
	goto $label$83 
	
.LABEL $label$157
	$6 = [0]
	$14 = [0]
	goto $label$70 
	
.LABEL $label$156
	$2 = CALL $6(($1 + [168]), $5)
	if ( ((int_64)$11 <= (int_64)((int_64)*($2 + [8]) * (int_64)1000000)) ){ goto $label$80 }
	$12 = [1]
	goto $label$23 
	
.LABEL $label$155
	CALL eosio_assert([1], [8875])
	$5 = CALL db_next_i64(*($2 + [64]), ($1 + [24]))
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$79 }
	$12 = [21]
	goto $label$23 
	
.LABEL $label$154
	$6 = *($1 + [152])
	$2 = *($1 + [156])
	if ( (int_32(($2 - $6) >> [4]) <= [2]) ){ goto $label$67 }
	$12 = [22]
	goto $label$23 
	
.LABEL $label$153
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$66 }
	$12 = [23]
	goto $label$23 
	
.LABEL $label$152
	$5 = [0]
	$12 = [24]
	goto $label$23 
	
.LABEL $label$151
	$13 = ($5 + [1])
	$4 = int_32(($2 - $6) >> [4])
	if ( ((int_32)$4 == (int_32)$13) ){ goto $label$64 }
	$12 = [25]
	goto $label$23 
	
.LABEL $label$150
	$14 = ((int_32)$5 ^ (int_32)[-1])
	$4 = [0]
	$5 = [24]
	$12 = [26]
	goto $label$23 
	
.LABEL $label$149
	$4 = ($4 + [1])
	$7 = *($3)
	$3 = ($6 + $5)
	$10 = ($3 + [-16])
	$8 = *($10)
	if ( ((uint_64)$8 >= (uint_64)$7) ){ goto $label$62 }
	$12 = [88]
	goto $label$23 
	
.LABEL $label$148
	$6 = ($3 + [-24])
	$11 = *($6)
	$3 = ($3 + [-8])
	*($6) = *($3)
	*($10) = $7
	*($3) = $11
	*((($6 = *($1 + [152])) + $5)) = $8
	$2 = *($1 + [156])
	$12 = [27]
	goto $label$23 
	
.LABEL $label$147
	$5 = ($5 + [16])
	if ( ($4 <= (int_32(($2 - $6) >> [4]) + $14)) ){ goto $label$63 }
	$12 = [28]
	goto $label$23 
	
.LABEL $label$146
	$4 = int_32(($2 - $6) >> [4])
	$12 = [29]
	goto $label$23 
	
.LABEL $label$145
	$5 = $13
	if ( ($13 <= $4) ){ goto $label$65 }
	$12 = [30]
	goto $label$23 
	
.LABEL $label$144
	$8 = (int_64)30
	*(($5 = CALL _Znwj([40]))) = (int_64)30
	*($5 + [8]) = (int_64)25
	*($5 + [16]) = (int_64)20
	*($5 + [24]) = (int_64)15
	*($5 + [32]) = (int_64)10
	*($1 + [136]) = $5
	$5 = ($5 + [40])
	*($1 + [144]) = $5
	*($1 + [140]) = $5
	$15 = *($1 + [152])
	$5 = int_32((*($1 + [156]) - $15) >> [4])
	$16 = ( $5 ? [5] : ($5 <= [5]) )
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$61 }
	$12 = [55]
	goto $label$23 
	
.LABEL $label$143
	$10 = (($1 + [24]) + [32])
	$14 = (($1 + [88]) + [16])
	$17 = (($1 + [24]) + [16])
	$18 = ($1 + [121])
	$6 = (($1 + [88]) + [32])
	$13 = (($1 + [88]) + [40])
	$19 = ($1 + [124])
	$2 = [0]
	goto $label$45 
	
.LABEL $label$142
	$8 = *((*($1 + [136]) + ($2 << [3])))
	$15 = *($1 + [152])
	$12 = [56]
	goto $label$23 
	
.LABEL $label$141
	$11 = ((uint_64)((int_64)$8 * (int_64)$9) / (uint_64)(int_64)100)
	$20 = *($0)
	$5 = CALL $47([8192])
	if ( ($5 <= [8]) ){ goto $label$44 }
	$12 = [87]
	goto $label$23 
	
.LABEL $label$140
	CALL eosio_assert([0], [8456])
	goto $label$42 
	
.LABEL $label$139
	if ( ($5 == 0) ){ goto $label$43 }
	$12 = [58]
	goto $label$23 
	
.LABEL $label$138
	$8 = (int_64)0
	$12 = [59]
	goto $label$23 
	
.LABEL $label$137
	$4 = *(($5 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$40 }
	$12 = [85]
	goto $label$23 
	
.LABEL $label$136
	CALL eosio_assert([0], [8501])
	$12 = [60]
	goto $label$23 
	
.LABEL $label$135
	$8 = ((int_64)((int_64)$8 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$41 }
	$12 = [61]
	goto $label$23 
	
.LABEL $label$134
	$7 = ((int_64)$8 << (int_64)8)
	$12 = [62]
	goto $label$23 
	
.LABEL $label$133
	CALL eosio_assert([1], [8554])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$21 = ((int_64)$7 | (int_64)4)
	$5 = [0]
	$12 = [63]
	goto $label$23 
	
.LABEL $label$132
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$12 = [79]
	goto $label$23 
	
.LABEL $label$131
	$7 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$25 }
	$12 = [80]
	goto $label$23 
	
.LABEL $label$130
	$8 = $7
	$4 = [1]
	$3 = $5
	$5 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$129
	$8 = $7
	$12 = [82]
	goto $label$23 
	
.LABEL $label$128
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$34 }
	$12 = [83]
	goto $label$23 
	
.LABEL $label$127
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$3 = ($5 + [1])
	$5 = $3
	if ( $4 ){ goto $label$24 }
	$12 = [84]
	goto $label$23 
	
.LABEL $label$126
	$4 = [1]
	$5 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$125
	$4 = [0]
	$12 = [65]
	goto $label$23 
	
.LABEL $label$124
	CALL eosio_assert($4, [8603])
	*($1 + [88]) = *($0)
	$8 = *(($15 + ($2 << [4])))
	*((($1 + [88]) + [24])) = $21
	*($14) = $11
	*(($3 = (($1 + [88]) + [8]))) = $8
	*(($15 = ($6 + [8]))) = [0]
	*($6) = (int_64)0
	$5 = CALL $47([8318])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$32 }
	$12 = [66]
	goto $label$23 
	
.LABEL $label$123
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$31 }
	$12 = [77]
	goto $label$23 
	
.LABEL $label$122
	*($6) = ($5 << [1])
	$4 = $18
	if ( $5 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$121
	$22 = (($5 + [16]) & [-16])
	$4 = CALL _Znwj($22)
	*($6) = ($22 | [1])
	*($13) = $4
	*($19) = $5
	$12 = [68]
	goto $label$23 
	
.LABEL $label$120
	CALL memcpy($4, [8318], $5)
	$12 = [69]
	goto $label$23 
	
.LABEL $label$119
	*(($4 + $5)) = [0]
	*(($5 = CALL _Znwj([16]))) = $20
	*($5 + [8]) = (int_64)3617214756542218240
	$4 = ($5 + [16])
	*(($1 + [8])) = $4
	*((($1 + [24]) + [8])) = *($3)
	*($17) = *($14)
	*(($17 + [8])) = *(($14 + [8]))
	*(($10 + [8])) = *($15)
	*($10) = *($6)
	*($6) = (int_64)0
	*($1) = $5
	*($1 + [4]) = $4
	*($1 + [24]) = *($1 + [88])
	*($13) = [0]
	CALL $7((int_64)6138663591592764928, (int_64)-3617168760277827584, $1, ($1 + [24]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$28 }
	$12 = [70]
	goto $label$23 
	
.LABEL $label$118
	CALL _ZdlPv(*((($1 + [24]) + [40])))
	$12 = [71]
	goto $label$23 
	
.LABEL $label$117
	$5 = *($1)
	if ( ($5 == 0) ){ goto $label$27 }
	$12 = [72]
	goto $label$23 
	
.LABEL $label$116
	*($1 + [4]) = $5
	CALL _ZdlPv($5)
	$12 = [73]
	goto $label$23 
	
.LABEL $label$115
	if ( ((*($6) & [1]) == 0) ){ goto $label$26 }
	$12 = [74]
	goto $label$23 
	
.LABEL $label$114
	CALL _ZdlPv(*($13))
	$12 = [75]
	goto $label$23 
	
.LABEL $label$113
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)$16) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$112
	$7 = (int_64)0
	goto $label$39 
	
.LABEL $label$111
	$8 = CALL current_time()
	*(($1 + [52])) = (int_64)0
	*(($1 + [68])) = (int_64)0
	*(($1 + [76])) = (int_64)0
	*($1 + [36]) = [0]
	*($1 + [40]) = [0]
	*($1 + [44 align=4]) = (int_64)0
	*($1 + [60 align=4]) = (int_64)0
	*($1 + [24]) = ((CASTING uint_32)(uint_64 ((uint_64)$8 / (uint_64)(int_64)1000000)) + [60])
	*($1 + [8]) = (int_64)3617214756542218240
	*($1) = *($0)
	*($1 + [208]) = (int_64)-6215788712865955840
	CALL $8(($1 + [60]), $1, $0, ($1 + [208]), ($1 + [16]))
	$8 = *($0)
	*($1 + [44]) = [86400]
	*($1 + [8]) = (int_64)0
	*($1) = $8
	CALL $9(($1 + [208]), ($1 + [24]))
	$5 = *($1 + [208])
	CALL send_deferred($1, $8, $5, (*($1 + [212]) - $5), [0])
	$5 = *($1 + [208])
	if ( ($5 == 0) ){ goto $label$58 }
	$12 = [32]
	goto $label$23 
	
.LABEL $label$110
	*($1 + [212]) = $5
	CALL _ZdlPv($5)
	$12 = [33]
	goto $label$23 
	
.LABEL $label$109
	CALL $10(($1 + [24]))
	$5 = *($1 + [136])
	if ( ($5 == 0) ){ goto $label$57 }
	$12 = [34]
	goto $label$23 
	
.LABEL $label$108
	*($1 + [140]) = $5
	CALL _ZdlPv($5)
	$12 = [35]
	goto $label$23 
	
.LABEL $label$107
	$5 = *($1 + [152])
	if ( ($5 == 0) ){ goto $label$56 }
	$12 = [36]
	goto $label$23 
	
.LABEL $label$106
	*($1 + [156]) = $5
	CALL _ZdlPv($5)
	$12 = [37]
	goto $label$23 
	
.LABEL $label$105
	$10 = *($1 + [192])
	if ( ($10 == 0) ){ goto $label$55 }
	$12 = [38]
	goto $label$23 
	
.LABEL $label$104
	$0 = ($1 + [196])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$54 }
	$12 = [39]
	goto $label$23 
	
.LABEL $label$103
	$12 = [40]
	goto $label$23 
	
.LABEL $label$102
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$52 }
	$12 = [41]
	goto $label$23 
	
.LABEL $label$101
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$51 }
	$12 = [42]
	goto $label$23 
	
.LABEL $label$100
	$14 = ($2 + [52])
	$4 = *($14)
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$49 }
	$12 = [43]
	goto $label$23 
	
.LABEL $label$99
	$5 = ($4 + [-32])
	if ( ((*($5) & [1]) == 0) ){ goto $label$48 }
	$12 = [44]
	goto $label$23 
	
.LABEL $label$98
	CALL _ZdlPv(*(($4 + [-24])))
	$12 = [45]
	goto $label$23 
	
.LABEL $label$97
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$50 }
	$12 = [46]
	goto $label$23 
	
.LABEL $label$96
	$5 = *(($2 + [48]))
	goto $label$47 
	
.LABEL $label$95
	$5 = $3
	$12 = [47]
	goto $label$23 
	
.LABEL $label$94
	*($14) = $3
	CALL _ZdlPv($5)
	$12 = [48]
	goto $label$23 
	
.LABEL $label$93
	CALL _ZdlPv($2)
	$12 = [49]
	goto $label$23 
	
.LABEL $label$92
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$53 }
	$12 = [50]
	goto $label$23 
	
.LABEL $label$91
	$5 = *(($1 + [192]))
	goto $label$46 
	
.LABEL $label$90
	$5 = $10
	$12 = [51]
	goto $label$23 
	
.LABEL $label$89
	*($0) = $10
	CALL _ZdlPv($5)
	$12 = [52]
	goto $label$23 
	
.LABEL $label$88
	$global$0 = ($1 + [224])
	return (unreachable)
	
.LABEL $label$87
	CALL $40($6)
	
.LABEL $label$86
	CALL $43(($1 + [152]))
	
.LABEL $label$85
	CALL abort()
	
.LABEL $label$84
	$12 = [1]
	goto $label$23 
	
.LABEL $label$83
	$12 = [1]
	goto $label$23 
	
.LABEL $label$82
	$12 = [1]
	goto $label$23 
	
.LABEL $label$81
	$12 = [7]
	goto $label$23 
	
.LABEL $label$80
	$12 = [3]
	goto $label$23 
	
.LABEL $label$79
	$12 = [2]
	goto $label$23 
	
.LABEL $label$78
	$12 = [6]
	goto $label$23 
	
.LABEL $label$77
	$12 = [4]
	goto $label$23 
	
.LABEL $label$76
	$12 = [6]
	goto $label$23 
	
.LABEL $label$75
	$12 = [5]
	goto $label$23 
	
.LABEL $label$74
	$12 = [20]
	goto $label$23 
	
.LABEL $label$73
	$12 = [18]
	goto $label$23 
	
.LABEL $label$72
	$12 = [9]
	goto $label$23 
	
.LABEL $label$71
	$12 = [16]
	goto $label$23 
	
.LABEL $label$70
	$12 = [10]
	goto $label$23 
	
.LABEL $label$69
	$12 = [11]
	goto $label$23 
	
.LABEL $label$68
	$12 = [17]
	goto $label$23 
	
.LABEL $label$67
	$12 = [30]
	goto $label$23 
	
.LABEL $label$66
	$12 = [30]
	goto $label$23 
	
.LABEL $label$65
	$12 = [24]
	goto $label$23 
	
.LABEL $label$64
	$12 = [29]
	goto $label$23 
	
.LABEL $label$63
	$12 = [26]
	goto $label$23 
	
.LABEL $label$62
	$12 = [27]
	goto $label$23 
	
.LABEL $label$61
	$12 = [31]
	goto $label$23 
	
.LABEL $label$60
	$12 = [76]
	goto $label$23 
	
.LABEL $label$59
	$12 = [31]
	goto $label$23 
	
.LABEL $label$58
	$12 = [33]
	goto $label$23 
	
.LABEL $label$57
	$12 = [35]
	goto $label$23 
	
.LABEL $label$56
	$12 = [37]
	goto $label$23 
	
.LABEL $label$55
	$12 = [52]
	goto $label$23 
	
.LABEL $label$54
	$12 = [54]
	goto $label$23 
	
.LABEL $label$53
	$12 = [40]
	goto $label$23 
	
.LABEL $label$52
	$12 = [49]
	goto $label$23 
	
.LABEL $label$51
	$12 = [48]
	goto $label$23 
	
.LABEL $label$50
	$12 = [43]
	goto $label$23 
	
.LABEL $label$49
	$12 = [53]
	goto $label$23 
	
.LABEL $label$48
	$12 = [45]
	goto $label$23 
	
.LABEL $label$47
	$12 = [47]
	goto $label$23 
	
.LABEL $label$46
	$12 = [51]
	goto $label$23 
	
.LABEL $label$45
	$12 = [56]
	goto $label$23 
	
.LABEL $label$44
	$12 = [57]
	goto $label$23 
	
.LABEL $label$43
	$12 = [86]
	goto $label$23 
	
.LABEL $label$42
	$12 = [58]
	goto $label$23 
	
.LABEL $label$41
	$12 = [59]
	goto $label$23 
	
.LABEL $label$40
	$12 = [60]
	goto $label$23 
	
.LABEL $label$39
	$12 = [62]
	goto $label$23 
	
.LABEL $label$38
	$12 = [63]
	goto $label$23 
	
.LABEL $label$37
	$12 = [65]
	goto $label$23 
	
.LABEL $label$36
	$12 = [63]
	goto $label$23 
	
.LABEL $label$35
	$12 = [65]
	goto $label$23 
	
.LABEL $label$34
	$12 = [64]
	goto $label$23 
	
.LABEL $label$33
	$12 = [64]
	goto $label$23 
	
.LABEL $label$32
	$12 = [78]
	goto $label$23 
	
.LABEL $label$31
	$12 = [67]
	goto $label$23 
	
.LABEL $label$30
	$12 = [69]
	goto $label$23 
	
.LABEL $label$29
	$12 = [68]
	goto $label$23 
	
.LABEL $label$28
	$12 = [71]
	goto $label$23 
	
.LABEL $label$27
	$12 = [73]
	goto $label$23 
	
.LABEL $label$26
	$12 = [75]
	goto $label$23 
	
.LABEL $label$25
	$12 = [81]
	goto $label$23 
	
.LABEL $label$24
	$12 = [82]
	goto $label$23 
	$12
	(unreachable)
	(unreachable)
}

int_32 .FUNC $5 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [8377])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $14($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [8377])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $2 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8428])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $50($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8451])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8451])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $3(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $53($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $3 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $43($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0))
	$3 = ($0 + [32])
	$5 = *(($0 + [60]))
	$4 = *(($0 + [56]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$6:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)100) ){ goto $label$5 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [8377])
	goto $label$3 
	
.LABEL $label$4
	$5 = ($0 + [40])
	$6 = CALL db_find_i64(*($3), *($5), (int_64)7235159551874301952, (int_64)100)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$7 = CALL $2($3, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [8377])
	
.LABEL $label$3
	$8 = *($0)
	CALL eosio_assert([1], [8680])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$3), [8715])
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [8761])
	*($7 + [8]) = (CASTING uint_64)(uint_32 $1)
	$9 = *($7)
	CALL eosio_assert([1], [8812])
	CALL eosio_assert([1], [8623])
	CALL memcpy(($2 + [16]), $7, [8])
	CALL eosio_assert([1], [8623])
	CALL memcpy((($2 + [16]) | [8]), ($7 + [8]), [8])
	CALL db_update_i64(*($7 + [20]), $8, ($2 + [16]), [16])
	$6 = ($0 + [48])
	if ( (uint_64)($9 <= *($6)) ){ goto $label$1 }
	*($6) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$8 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [32])) == (int_64)CALL $fimport$3()), [8629])
	*(($6 = CALL _Znwj([32])) + [16]) = $3
	*($6 + [8]) = (CASTING uint_64)(uint_32 $1)
	*($6) = (int_64)100
	CALL eosio_assert([1], [8623])
	CALL memcpy(($2 + [16]), $6, [8])
	CALL eosio_assert([1], [8623])
	CALL memcpy((($2 + [16]) | [8]), ($6 + [8]), [8])
	$9 = *($6)
	$7 = CALL db_store_i64(*($5), (int_64)7235159551874301952, $8, $9, ($2 + [16]), [16])
	*($6 + [20]) = $7
	$5 = ($0 + [48])
	if ( (uint_64)($9 <= *($5)) ){ goto $label$7 }
	*($5) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($2 + [8]) = $6
	$9 = *($6)
	*($2 + [16]) = $9
	*($2 + [4]) = $7
	$4 = ($0 + [60])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [64]))) ){ goto $label$9 }
	*($5 + [8]) = $9
	*($5 + [16]) = $7
	*($2 + [8]) = [0]
	*($5) = $6
	*($4) = ($5 + [24])
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( $6 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$9
	CALL $3(($0 + [56]), ($2 + [8]), ($2 + [16]), ($2 + [4]))
	$6 = *($2 + [8])
	*($2 + [8]) = [0]
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$8
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [8428])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $50($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [8451])
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [8451])
	CALL memcpy(($3 + [24]), ($2 + [8]), [8])
	$6 = *($3 + [24])
	*($5 + [8]) = $6
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	*($3 + [24]) = $6)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [16]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $15(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $53($2)
	
.LABEL $label$6
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $43($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $43($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $10 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL memory()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 == (int_64)-6215788712865955840) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-4417357895863107584) ){ goto $label$1 }
	*($3 + [28]) = [0]
	*($3 + [24]) = [1]
	*($3) = *($3 + [24])
	CALL $12($1, $1, $3)
	goto $label$1 
	
.LABEL $label$2
	*($3 + [20]) = [0]
	*($3 + [16]) = [2]
	*($3 + [8]) = *($3 + [16])
	CALL $13($1, $1, ($3 + [8]))
	
.LABEL $label$1
	CALL $45([0])
	$global$0 = ($3 + [32])
}

int_32 .FUNC $12 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $50($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [8451])
	CALL memcpy(($4 + [8]), $2, [1])
	$8 = *($4 + [8])
	*(($4 + [28])) = ($2 + [1])
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $53($2)
	
.LABEL $label$5
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($4 + [68])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$10 }
	CALL _ZdlPv($7)
	
.LABEL $label$10
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	$2 = *(($4 + [64]))
	goto $label$7 
	
.LABEL $label$8
	$2 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$global$0 = ($4 + [80])
	return [1]
}

int_32 .FUNC $13 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [80])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $50($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [48])) = $0
	*(($4 + [56])) = (int_64)-1
	*(($4 + [64])) = (int_64)0
	*(($4 + [72])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [40]) = $0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( ($5 & [1]) ){ goto $label$8 }
	CALL void $3((int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL void $3((int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $53($2)
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$5 = *(($4 + [64]))
	if ( ($5 == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$3 = ($4 + [68])
	$2 = *($3)
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$7 = *($2)
	*($2) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	CALL _ZdlPv($7)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [64]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $5
	
.LABEL $label$9
	*($3) = $5
	CALL _ZdlPv($2)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
	return [1]
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $48(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8908])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $48(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $53($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $50($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8908])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $50($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $17($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [8623])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [8623])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $21(CALL $22($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [8623])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [8623])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $50 (int_32 $0)
{
	return CALL $51([8928], $0)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $53($0)
	
.LABEL $label$1
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8920]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8924])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8920]) = [1]
	$2 = ($2 << [16])
	*([0] + [8924]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8924])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8924]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8920]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8920]) = [1]
	$3 = ($3 << [16])
	*([0] + [8924]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8924])
	
.LABEL $label$10
	*([0] + [8924]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $53 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [17312])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [17120]
	$3 = (((int_32)$1 * (int_32)[12]) + [17120])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}