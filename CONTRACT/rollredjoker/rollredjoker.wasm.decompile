(data (i32.const 4) "\e0f\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "transfer\00")
(data (i32.const 128) "eosio.token\00")
(data (i32.const 144) "read\00")
(data (i32.const 160) "get\00")
(data (i32.const 176) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 240) "invalid symbol name\00")
(data (i32.const 272) "Invalid token transferr\00")
(data (i32.const 304) "Quantity must be > 0.1 EOS \00")
(data (i32.const 352) "memo must be red/black/heart/spade/diamond/club !!!\00")
(data (i32.const 416) "active\00")
(data (i32.const 432) "Winner!! website: http://rollgame.github.io/ and memo:red/black/spade/heart/diamond/club ! payout: 100X,25X,10X,6.66X,4X,2.22X\00")
(data (i32.const 560) "Can\'t use your own account as an inviter\00")
(data (i32.const 608) "invite fee\00")
(data (i32.const 624) "next primary key in table is at autoincrement limit\00")
(data (i32.const 688) "cannot create objects in table of another contract\00")
(data (i32.const 752) "receipt\00")
(data (i32.const 768) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 832) "cannot pass end iterator to erase\00")
(data (i32.const 880) "cannot increment end iterator\00")
(data (i32.const 912) "only accepts EOS\00")
(data (i32.const 944) "object passed to erase is not in multi_index\00")
(data (i32.const 992) "cannot erase objects in table of another contract\00")
(data (i32.const 1056) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1120) "write\00")
(data (i32.const 1136) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1200) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1248) "error reading iterator\00")
(data (i32.const 1280) "red\00")
(data (i32.const 1296) "black\00")
(data (i32.const 1312) "heart\00")
(data (i32.const 1328) "spade\00")
(data (i32.const 1344) "diamond\00")
(data (i32.const 1360) "club\00")
(data (i32.const 1376) "r\00")
(data (i32.const 1392) "b\00")
(data (i32.const 1408) "h\00")
(data (i32.const 1424) "s\00")
(data (i32.const 1440) "d\00")
(data (i32.const 1456) "c\00")
(data (i32.const 9856) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$12 (param i32 i32)))
(import "env" "is_account" (func $fimport$13 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(import "env" "sha256" (func $fimport$19 (param i32 i32 i32)))
(import "env" "tapos_block_num" (func $fimport$20 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$21 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN4roll8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE" (func $7))
(export "_ZN4roll7receiptEyyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_y" (func $9))
(export "malloc" (func $33))
(export "free" (func $36))
(export "llabs" (func $47))
(export "memchr" (func $48))
(export "memcmp" (func $49))
(export "strlen" (func $50))
(table $0 3 3 anyfunc)
(elem (i32.const 0) $51 $7 $9)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $45(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $45(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $38(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $38(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $28(*($1), ($0 + [32]))
}

void .FUNC $39 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $28(CALL $28($0, ($1 + [24])), ($1 + [36]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1120])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1120])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1248])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $37([72])) + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [56]) = $0
	CALL $30(($8 + [32]), $6)
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $24(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$10 }
	CALL $38(*(($4 + [44])))
	
.LABEL $label$10
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$11 }
	CALL $38(*(($4 + [32])))
	
.LABEL $label$11
	CALL $38($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $16($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1120])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1120])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $32(CALL $31($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	$8 = *($0 + [4])
	$3 = *($8)
	$6 = ($3 + [168])
	$7 = *($6)
	if ( ((int_64)$7 != (int_64)-1) ){ goto $label$1 }
	$7 = (int_64)0
	$4 = ($3 + [152])
	$5 = CALL db_lowerbound_i64(*($4), *(($3 + [160])), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $21($4, $5)
	*($10 + [4]) = [0]
	*($10) = $4
	$7 = *(*(CALL $22($10) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($3 + [168])) = $7
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($7 <= (int_64)-2), [624])
	*($1) = *($6)
	CALL $40(($1 + [36]), *($8 + [4]))
	*($1 + [8]) = *(*($8 + [8]))
	*($1 + [16]) = *(*($8 + [12]))
	CALL $40(($1 + [24]), *($8 + [16]))
	*($1 + [48]) = *(*($8 + [20]))
	$8 = *($1 + [24])
	$3 = ( *(($1 + [28])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($3 + [32])
	$7 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	$3 = *(($1 + [36]))
	$3 = ( *(($1 + [40])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$8 = ($3 + $8)
	$7 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	if ( ($8 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($8)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $8)
	CALL $29($10, $1)
	$7 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-6030912142679474176, *(*($0 + [8])), $7, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1200])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-6030912142679474176)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1136])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1136])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $21(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	*(($2 = *($1))) = (*($2) + [8])
	$2 = *($0)
	*(($0 = *($1))) = (*($0) + [8])
	*(($0 = *($1))) = (*($0) + [8])
	$0 = *($2 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [28])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$1:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($3) = $0
	$4 = *(($2 + [24]))
	$4 = ( *(($2 + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$2 }
	*($3) = ($4 + $0)
	
.LABEL $label$2
	$0 = *($2 + [36])
	$5 = (CASTING uint_64)(uint_32 ( *(($2 + [40])) ? uint_32($0 >> [1]) : ($0 & [1]) ))
	$3 = *($1)
	$0 = *($3)
	
.LOOP $label$3:
	$0 = ($0 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	*($3) = $0
	$2 = *(($2 + [36]))
	$2 = ( *(($2 + [40])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	*($3) = ($2 + $0)
	
.LABEL $label$4
	*(($0 = *($1))) = (*($0) + [8])
}

void .FUNC $24 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $37(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $44($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL $38(*(($1 + [44])))
	
.LABEL $label$11
	if ( ((*($1 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $38(*(($1 + [32])))
	
.LABEL $label$12
	CALL $38($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $38($6)
	
.LABEL $label$13
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [944])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [992])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$4 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$2) ){ goto $label$1 }
	$7 = $4
	$8 = ($4 + [-24])
	$4 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1056])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$7 }
	CALL $38(*(($4 + [44])))
	
.LABEL $label$7
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL $38(*(($4 + [32])))
	
.LABEL $label$8
	CALL $38($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$11 }
	CALL $38(*(($4 + [44])))
	
.LABEL $label$11
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$12 }
	CALL $38(*(($4 + [32])))
	
.LABEL $label$12
	CALL $38($4)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [60]))
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $28(*($1), ($3 + [24]))
	CALL $28(*($1), ($3 + [36]))
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [1120])
	CALL memcpy(*($1 + [4]), ($3 + [48]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC $43 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $37(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $38($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $41 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $37($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $38($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $41($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_64 .FUNC llabs (int_64 $0)
{
	int_64 $1
	$1 = (int_64)$0 >> (int_64)63
	return ((int_64)((int_64)$0 + (int_64)$1)) ^ (int_64)$1)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $37($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $37($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $44 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $51 ()
{
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [176])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [240])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $17(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $18(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $38(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

void .FUNC _ZN4roll7receiptEyyyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_y (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6)
{
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0 + [8]) = [0]
	*($0) = $1
	*(($0 + [12])) = (int_64)0
	$4 = ($0 + [8])
	$2 = CALL strlen([1280])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$15 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [8])) = ($3 | [1])
	*(($0 + [16])) = $4
	*(($0 + [12])) = $2
	
.LABEL $label$14
	CALL memcpy($4, [1280], $2)
	
.LABEL $label$13
	*(($4 + $2)) = [0]
	*(($0 + [28])) = [0]
	*($0 + [20 align=4]) = (int_64)0
	$4 = ($0 + [20])
	$2 = CALL strlen([1296])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$18 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [20])) = ($3 | [1])
	*(($0 + [28])) = $4
	*(($0 + [24])) = $2
	
.LABEL $label$17
	CALL memcpy($4, [1296], $2)
	
.LABEL $label$16
	*(($4 + $2)) = [0]
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	$4 = ($0 + [32])
	$2 = CALL strlen([1312])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$21 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [32])) = ($3 | [1])
	*(($0 + [40])) = $4
	*(($0 + [36])) = $2
	
.LABEL $label$20
	CALL memcpy($4, [1312], $2)
	
.LABEL $label$19
	*(($4 + $2)) = [0]
	*(($0 + [52])) = [0]
	*($0 + [44 align=4]) = (int_64)0
	$4 = ($0 + [44])
	$2 = CALL strlen([1328])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$24 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [44])) = ($3 | [1])
	*(($0 + [52])) = $4
	*(($0 + [48])) = $2
	
.LABEL $label$23
	CALL memcpy($4, [1328], $2)
	
.LABEL $label$22
	*(($4 + $2)) = [0]
	*(($0 + [64])) = [0]
	*($0 + [56 align=4]) = (int_64)0
	$4 = ($0 + [56])
	$2 = CALL strlen([1344])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$27 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [56])) = ($3 | [1])
	*(($0 + [64])) = $4
	*(($0 + [60])) = $2
	
.LABEL $label$26
	CALL memcpy($4, [1344], $2)
	
.LABEL $label$25
	*(($4 + $2)) = [0]
	*(($0 + [76])) = [0]
	*($0 + [68 align=4]) = (int_64)0
	$4 = ($0 + [68])
	$2 = CALL strlen([1360])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$30 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$30
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [68])) = ($3 | [1])
	*(($0 + [76])) = $4
	*(($0 + [72])) = $2
	
.LABEL $label$29
	CALL memcpy($4, [1360], $2)
	
.LABEL $label$28
	*(($4 + $2)) = [0]
	*(($0 + [88])) = [0]
	*($0 + [80 align=4]) = (int_64)0
	$4 = ($0 + [80])
	$2 = CALL strlen([1376])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$33 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [80])) = ($3 | [1])
	*(($0 + [88])) = $4
	*(($0 + [84])) = $2
	
.LABEL $label$32
	CALL memcpy($4, [1376], $2)
	
.LABEL $label$31
	*(($4 + $2)) = [0]
	*(($0 + [100])) = [0]
	*($0 + [92 align=4]) = (int_64)0
	$4 = ($0 + [92])
	$2 = CALL strlen([1392])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$36 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [92])) = ($3 | [1])
	*(($0 + [100])) = $4
	*(($0 + [96])) = $2
	
.LABEL $label$35
	CALL memcpy($4, [1392], $2)
	
.LABEL $label$34
	*(($4 + $2)) = [0]
	*(($0 + [112])) = [0]
	*($0 + [104 align=4]) = (int_64)0
	$4 = ($0 + [104])
	$2 = CALL strlen([1408])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$39 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [104])) = ($3 | [1])
	*(($0 + [112])) = $4
	*(($0 + [108])) = $2
	
.LABEL $label$38
	CALL memcpy($4, [1408], $2)
	
.LABEL $label$37
	*(($4 + $2)) = [0]
	*(($0 + [124])) = [0]
	*($0 + [116 align=4]) = (int_64)0
	$4 = ($0 + [116])
	$2 = CALL strlen([1424])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$42 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [116])) = ($3 | [1])
	*(($0 + [124])) = $4
	*(($0 + [120])) = $2
	
.LABEL $label$41
	CALL memcpy($4, [1424], $2)
	
.LABEL $label$40
	*(($4 + $2)) = [0]
	*(($0 + [136])) = [0]
	*($0 + [128 align=4]) = (int_64)0
	$4 = ($0 + [128])
	$2 = CALL strlen([1440])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$45 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [128])) = ($3 | [1])
	*(($0 + [136])) = $4
	*(($0 + [132])) = $2
	
.LABEL $label$44
	CALL memcpy($4, [1440], $2)
	
.LABEL $label$43
	*(($4 + $2)) = [0]
	*(($0 + [148])) = [0]
	*($0 + [140 align=4]) = (int_64)0
	$4 = ($0 + [140])
	$2 = CALL strlen([1456])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$48 }
	*($4) = ($2 << [1])
	$4 = ($4 + [1])
	if ( $2 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$3 = (($2 + [16]) & [-16])
	$4 = CALL $37($3)
	*(($0 + [140])) = ($3 | [1])
	*(($0 + [148])) = $4
	*(($0 + [144])) = $2
	
.LABEL $label$47
	CALL memcpy($4, [1456], $2)
	
.LABEL $label$46
	*(($4 + $2)) = [0]
	*(($0 + [168])) = (int_64)-1
	*(($0 + [176])) = (int_64)0
	*(($0 + [184])) = [0]
	$1 = *($0)
	*($0 + [152]) = $1
	*(($0 + [160])) = $1
	return $0
	
.LABEL $label$12
	CALL $39($4)
	
.LABEL $label$11
	CALL $39($4)
	
.LABEL $label$10
	CALL $39($4)
	
.LABEL $label$9
	CALL $39($4)
	
.LABEL $label$8
	CALL $39($4)
	
.LABEL $label$7
	CALL $39($4)
	
.LABEL $label$6
	CALL $39($4)
	
.LABEL $label$5
	CALL $39($4)
	
.LABEL $label$4
	CALL $39($4)
	
.LABEL $label$3
	CALL $39($4)
	
.LABEL $label$2
	CALL $39($4)
	
.LABEL $label$1
	CALL $39($4)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC _ZN4roll8transferEyyN5eosio5assetENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	float_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	$22 = (*([0] + [4]) - [224])
	*([0] + [4]) = $22
	*($22 + [184]) = $1
	$19 = *($0)
	if ( ((int_64)$19 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$19 != (int_64)$2) ){ goto $label$1 }
	$1 = *($3 + [8])
	CALL eosio_assert(((int_64)$1 == (int_64)1397703940), [912])
	$21 = [0]
	$2 = *($3)
	if ( ((uint_64)((int_64)$2 + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$21 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$21 = [0]
	
.LABEL $label$2
	CALL eosio_assert($21, [272])
	CALL eosio_assert(((int_64)$2 > (int_64)999), [304])
	*($22 + [80]) = ((int_32)CALL tapos_block_prefix() * (int_32)CALL $fimport$20())
	CALL sha256(($22 + [80]), [4], $22)
	$1 = *($22 + [2])
	*($22 + [176]) = $2
	*(($22 + [160])) = [0]
	*($22 + [152]) = (int_64)0
	$1 = ((int_64)CALL llabs($1) % (int_64)100)
	$3 = CALL strlen([336])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$10 }
	*($22 + [152]) = ($3 << [1])
	$21 = (($22 + [152]) | [1])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$10 = (($3 + [16]) & [-16])
	$21 = CALL $37($10)
	*($22 + [152]) = ($10 | [1])
	*($22 + [160]) = $21
	*($22 + [156]) = $3
	
.LABEL $label$9
	CALL memcpy($21, [336], $3)
	
.LABEL $label$8
	*(($21 + $3)) = [0]
	$10 = CALL $43($4, [45], [0])
	CALL $46(($22 + [136]), $4, [0], $10, $4)
	*(($22 + [128])) = [0]
	*($22 + [120]) = (int_64)0
	$3 = CALL strlen([336])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$11 }
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$14 }
	*($22 + [120]) = ($3 << [1])
	$21 = (($22 + [120]) | [1])
	if ( $3 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$8 = (($3 + [16]) & [-16])
	$21 = CALL $37($8)
	*($22 + [120]) = ($8 | [1])
	*($22 + [128]) = $21
	*($22 + [124]) = $3
	
.LABEL $label$13
	CALL memcpy($21, [336], $3)
	
.LABEL $label$12
	$8 = (CASTING uint_32)(uint_64 $1)
	*(($21 + $3)) = [0]
	if ( ((int_32)$10 == (int_32)[-1]) ){ goto $label$15 }
	CALL $46($22, $4, ($10 + [1]), [-1], $4)
	if ( (*($22 + [120]) & [1]) ){ goto $label$17 }
	*($22 + [120]) = [0]
	goto $label$16 
	
.LABEL $label$17
	*(*($22 + [128])) = [0]
	*($22 + [124]) = [0]
	
.LABEL $label$16
	CALL $42(($22 + [120]), [0])
	*((($22 + [120]) + [8])) = *(($22 + [8]))
	*($22 + [120]) = *($22)
	
.LABEL $label$15
	$12 = ($8 + [1])
	$13 = ($0 + [8])
	$3 = ($3 & [1])
	$3 = *($0 + [8])
	$8 = ($10 & [1])
	$10 = *($22 + [136])
	$11 = uint_32($10 >> [1])
	$9 = *($22 + [140])
	$14 = ( $9 ? $11 : $8 )
	if ( ((int_32)$14 != (int_32)( *(($0 + [12])) ? uint_32($3 >> [1]) : $3 )) ){ goto $label$35 }
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [16])) ? ($13 + [1]) : $3 )
	if ( $8 ){ goto $label$36 }
	if ( ($14 == 0) ){ goto $label$34 }
	$8 = ([0] - $11)
	
.LOOP $label$37:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$35 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$37 }
	goto $label$18 
	
.LABEL $label$36
	$3 = [1]
	if ( ($14 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $8 ), $21, $14) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$35
	$21 = ($3 & [1])
	$3 = *($0 + [20])
	$8 = ($10 & [1])
	$11 = (uint_32($10 >> [1]) & [127])
	$14 = ( $9 ? $11 : $8 )
	if ( ((int_32)$14 != (int_32)( *(($0 + [24])) ? uint_32($3 >> [1]) : $21 )) ){ goto $label$38 }
	$3 = [1]
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [28])) ? (($0 + [20]) + [1]) : $21 )
	if ( $8 ){ goto $label$39 }
	if ( ($14 == 0) ){ goto $label$18 }
	$8 = ([0] - $11)
	
.LOOP $label$40:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$38 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$40 }
	goto $label$18 
	
.LABEL $label$39
	if ( ($14 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $8 ), $21, $14) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$38
	$3 = ($3 & [1])
	$3 = *($0 + [44])
	$8 = ($10 & [1])
	$11 = (uint_32($10 >> [1]) & [127])
	$14 = ( $9 ? $11 : $8 )
	if ( ((int_32)$14 != (int_32)( *(($0 + [48])) ? uint_32($3 >> [1]) : $3 )) ){ goto $label$41 }
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [52])) ? (($0 + [44]) + [1]) : $3 )
	if ( $8 ){ goto $label$42 }
	if ( ($14 == 0) ){ goto $label$31 }
	$8 = ([0] - $11)
	
.LOOP $label$43:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$41 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$43 }
	goto $label$18 
	
.LABEL $label$42
	$3 = [1]
	if ( ($14 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $8 ), $21, $14) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$41
	$21 = ($3 & [1])
	$3 = *($0 + [32])
	$8 = ($10 & [1])
	$11 = (uint_32($10 >> [1]) & [127])
	$14 = ( $9 ? $11 : $8 )
	if ( ((int_32)$14 != (int_32)( *(($0 + [36])) ? uint_32($3 >> [1]) : $21 )) ){ goto $label$32 }
	$3 = [1]
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [40])) ? (($0 + [32]) + [1]) : $21 )
	if ( $8 ){ goto $label$33 }
	if ( ($14 == 0) ){ goto $label$18 }
	$8 = ([0] - $11)
	
.LOOP $label$44:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$32 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$44 }
	goto $label$18 
	
.LABEL $label$34
	$3 = [1]
	goto $label$18 
	
.LABEL $label$33
	if ( ($14 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $8 ), $21, $14) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$32
	$3 = ($3 & [1])
	$3 = *($0 + [56])
	$14 = ($10 & [1])
	$11 = (uint_32($10 >> [1]) & [127])
	$8 = ( $9 ? $11 : $14 )
	if ( ((int_32)$8 != (int_32)( *(($0 + [60])) ? uint_32($3 >> [1]) : $3 )) ){ goto $label$45 }
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [64])) ? (($0 + [56]) + [1]) : $3 )
	if ( $14 ){ goto $label$46 }
	if ( ($8 == 0) ){ goto $label$28 }
	$8 = ([0] - $11)
	
.LOOP $label$47:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$45 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$47 }
	goto $label$18 
	
.LABEL $label$46
	$3 = [1]
	if ( ($8 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $14 ), $21, $8) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$45
	$21 = ($3 & [1])
	$3 = *($0 + [68])
	$8 = ($10 & [1])
	$11 = (uint_32($10 >> [1]) & [127])
	$14 = ( $9 ? $11 : $8 )
	if ( ((int_32)$14 != (int_32)( *(($0 + [72])) ? uint_32($3 >> [1]) : $21 )) ){ goto $label$29 }
	$3 = [1]
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [76])) ? (($0 + [68]) + [1]) : $21 )
	if ( $8 ){ goto $label$30 }
	if ( ($14 == 0) ){ goto $label$18 }
	$8 = ([0] - $11)
	
.LOOP $label$48:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$29 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$48 }
	goto $label$18 
	
.LABEL $label$31
	$3 = [1]
	goto $label$18 
	
.LABEL $label$30
	if ( ($14 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $8 ), $21, $14) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$29
	$3 = ($3 & [1])
	$3 = *($0 + [80])
	$8 = ($10 & [1])
	$11 = (uint_32($10 >> [1]) & [127])
	$14 = ( $9 ? $11 : $8 )
	if ( ((int_32)$14 != (int_32)( *(($0 + [84])) ? uint_32($3 >> [1]) : $3 )) ){ goto $label$49 }
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [88])) ? (($0 + [80]) + [1]) : $3 )
	if ( $8 ){ goto $label$50 }
	if ( ($14 == 0) ){ goto $label$25 }
	$8 = ([0] - $11)
	
.LOOP $label$51:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$49 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$51 }
	goto $label$18 
	
.LABEL $label$50
	$3 = [1]
	if ( ($14 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $8 ), $21, $14) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$49
	$21 = ($3 & [1])
	$3 = *($0 + [92])
	$8 = ($10 & [1])
	$11 = (uint_32($10 >> [1]) & [127])
	$14 = ( $9 ? $11 : $8 )
	if ( ((int_32)$14 != (int_32)( *(($0 + [96])) ? uint_32($3 >> [1]) : $21 )) ){ goto $label$26 }
	$3 = [1]
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [100])) ? (($0 + [92]) + [1]) : $21 )
	if ( $8 ){ goto $label$27 }
	if ( ($14 == 0) ){ goto $label$18 }
	$8 = ([0] - $11)
	
.LOOP $label$52:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$26 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$52 }
	goto $label$18 
	
.LABEL $label$28
	$3 = [1]
	goto $label$18 
	
.LABEL $label$27
	if ( ($14 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $8 ), $21, $14) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$26
	$3 = ($3 & [1])
	$3 = *($0 + [104])
	$8 = ($10 & [1])
	$11 = (uint_32($10 >> [1]) & [127])
	$14 = ( $9 ? $11 : $8 )
	if ( ((int_32)$14 != (int_32)( *(($0 + [108])) ? uint_32($3 >> [1]) : $3 )) ){ goto $label$53 }
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [112])) ? (($0 + [104]) + [1]) : $3 )
	if ( $8 ){ goto $label$54 }
	if ( ($14 == 0) ){ goto $label$22 }
	$8 = ([0] - $11)
	
.LOOP $label$55:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$53 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$55 }
	goto $label$18 
	
.LABEL $label$54
	$3 = [1]
	if ( ($14 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $8 ), $21, $14) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$53
	$21 = ($3 & [1])
	$3 = *($0 + [116])
	$8 = ($10 & [1])
	$11 = (uint_32($10 >> [1]) & [127])
	$14 = ( $9 ? $11 : $8 )
	if ( ((int_32)$14 != (int_32)( *(($0 + [120])) ? uint_32($3 >> [1]) : $21 )) ){ goto $label$23 }
	$3 = [1]
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [124])) ? (($0 + [116]) + [1]) : $21 )
	if ( $8 ){ goto $label$24 }
	if ( ($14 == 0) ){ goto $label$18 }
	$8 = ([0] - $11)
	
.LOOP $label$56:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$23 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$56 }
	goto $label$18 
	
.LABEL $label$25
	$3 = [1]
	goto $label$18 
	
.LABEL $label$24
	if ( ($14 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $8 ), $21, $14) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$23
	$3 = ($3 & [1])
	$3 = *($0 + [128])
	$8 = ($10 & [1])
	$11 = (uint_32($10 >> [1]) & [127])
	$14 = ( $9 ? $11 : $8 )
	if ( ((int_32)$14 != (int_32)( *(($0 + [132])) ? uint_32($3 >> [1]) : $3 )) ){ goto $label$57 }
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [136])) ? (($0 + [128]) + [1]) : $3 )
	if ( $8 ){ goto $label$58 }
	if ( ($14 == 0) ){ goto $label$20 }
	$8 = ([0] - $11)
	
.LOOP $label$59:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$57 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$59 }
	goto $label$18 
	
.LABEL $label$58
	$3 = [1]
	if ( ($14 == 0) ){ goto $label$18 }
	if ( (CALL memcmp(( *($22 + [144]) ? $4 : $8 ), $21, $14) == 0) ){ goto $label$18 }
	$9 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$57
	$3 = [0]
	$21 = ($4 & [1])
	$4 = *($0 + [140])
	$10 = ($10 & [1])
	$14 = (uint_32($10 >> [1]) & [127])
	$8 = ( $9 ? $14 : $10 )
	if ( ((int_32)$8 != (int_32)( *(($0 + [144])) ? uint_32($4 >> [1]) : $21 )) ){ goto $label$18 }
	$3 = [1]
	$4 = (($22 + [136]) | [1])
	$21 = ( *(($0 + [148])) ? (($0 + [140]) + [1]) : $21 )
	if ( $10 ){ goto $label$21 }
	if ( ($8 == 0) ){ goto $label$18 }
	$10 = ([0] - $14)
	
.LOOP $label$60:
	if ( ((int_32)*($4) != (int_32)*($21)) ){ goto $label$19 }
	$3 = [1]
	$21 = ($21 + [1])
	$4 = ($4 + [1])
	$10 = ($10 + [1])
	if ( $10 ){ goto $label$60 }
	goto $label$18 
	
.LABEL $label$22
	$3 = [1]
	goto $label$18 
	
.LABEL $label$21
	if ( ($8 == 0) ){ goto $label$18 }
	$3 = (CALL memcmp(( *($22 + [144]) ? $4 : $10 ), $21, $8) == 0)
	goto $label$18 
	
.LABEL $label$20
	$3 = [1]
	goto $label$18 
	
.LABEL $label$19
	$3 = [0]
	
.LABEL $label$18
	CALL eosio_assert($3, [352])
	if ( ((uint_32)$12 > (uint_32)[1]) ){ goto $label$86 }
	CALL $40(($22 + [152]), $13)
	$4 = ($3 & [1])
	$3 = *(($0 + [8]))
	$21 = ($10 & [1])
	$10 = *($22 + [136])
	$12 = uint_32($10 >> [1])
	$8 = *($22 + [140])
	$9 = ( $8 ? $12 : $21 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [12])) ? uint_32($3 >> [1]) : $4 )) ){ goto $label$84 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [16])) ? ($13 + [1]) : $4 )
	if ( $21 ){ goto $label$85 }
	if ( ($9 == 0) ){ goto $label$81 }
	$21 = ([0] - $12)
	
.LOOP $label$87:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$84 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$87 }
	goto $label$81 
	
.LABEL $label$86
	if ( ((uint_32)$12 > (uint_32)[5]) ){ goto $label$88 }
	$4 = ($0 + [20])
	CALL $40(($22 + [152]), $4)
	$12 = ($3 & [1])
	$3 = *($0 + [20])
	$9 = ($10 & [1])
	$10 = *($22 + [136])
	$13 = uint_32($10 >> [1])
	$8 = *($22 + [140])
	$21 = ( $8 ? $13 : $9 )
	if ( ((int_32)$21 != (int_32)( *(($0 + [24])) ? uint_32($3 >> [1]) : $12 )) ){ goto $label$79 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [28])) ? ($4 + [1]) : $12 )
	if ( $9 ){ goto $label$80 }
	if ( ($21 == 0) ){ goto $label$76 }
	$21 = ([0] - $13)
	
.LOOP $label$89:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$79 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$89 }
	goto $label$76 
	
.LABEL $label$88
	if ( ((uint_32)$12 > (uint_32)[15]) ){ goto $label$83 }
	$4 = ($0 + [32])
	CALL $40(($22 + [152]), $4)
	$12 = ($3 & [1])
	$3 = *($0 + [32])
	$21 = ($10 & [1])
	$10 = *($22 + [136])
	$13 = uint_32($10 >> [1])
	$8 = *($22 + [140])
	$9 = ( $8 ? $13 : $21 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [36])) ? uint_32($3 >> [1]) : $12 )) ){ goto $label$74 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [40])) ? ($4 + [1]) : $12 )
	if ( $21 ){ goto $label$75 }
	if ( ($9 == 0) ){ goto $label$71 }
	$21 = ([0] - $13)
	
.LOOP $label$90:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$74 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$90 }
	goto $label$71 
	
.LABEL $label$85
	if ( ($9 == 0) ){ goto $label$81 }
	if ( (CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $9) == 0) ){ goto $label$81 }
	$8 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$84
	$15 = (float_64)0
	$4 = ($3 & [1])
	$3 = *($0 + [80])
	$21 = ($10 & [1])
	$9 = (uint_32($10 >> [1]) & [127])
	$10 = ( $8 ? $9 : $21 )
	if ( ((int_32)$10 != (int_32)( *(($0 + [84])) ? uint_32($3 >> [1]) : $4 )) ){ goto $label$61 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [88])) ? (($0 + [80]) + [1]) : $4 )
	if ( $21 ){ goto $label$82 }
	if ( ($10 == 0) ){ goto $label$81 }
	$21 = ([0] - $9)
	
.LOOP $label$91:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$61 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$91 }
	goto $label$81 
	
.LABEL $label$83
	if ( ((uint_32)$12 > (uint_32)[30]) ){ goto $label$78 }
	$4 = ($0 + [44])
	CALL $40(($22 + [152]), $4)
	$12 = ($3 & [1])
	$3 = *($0 + [44])
	$21 = ($10 & [1])
	$10 = *($22 + [136])
	$13 = uint_32($10 >> [1])
	$8 = *($22 + [140])
	$9 = ( $8 ? $13 : $21 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [48])) ? uint_32($3 >> [1]) : $12 )) ){ goto $label$69 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [52])) ? ($4 + [1]) : $12 )
	if ( $21 ){ goto $label$70 }
	if ( ($9 == 0) ){ goto $label$68 }
	$21 = ([0] - $13)
	
.LOOP $label$92:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$69 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$92 }
	goto $label$68 
	
.LABEL $label$82
	if ( ($10 == 0) ){ goto $label$81 }
	if ( CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $10) ){ goto $label$61 }
	
.LABEL $label$81
	$15 = (float_64)100
	goto $label$61 
	
.LABEL $label$80
	if ( ($21 == 0) ){ goto $label$76 }
	if ( (CALL memcmp(( *($22 + [144]) ? $3 : $9 ), $4, $21) == 0) ){ goto $label$76 }
	$8 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$79
	$15 = (float_64)0
	$4 = ($3 & [1])
	$3 = *($0 + [92])
	$21 = ($10 & [1])
	$9 = (uint_32($10 >> [1]) & [127])
	$10 = ( $8 ? $9 : $21 )
	if ( ((int_32)$10 != (int_32)( *(($0 + [96])) ? uint_32($3 >> [1]) : $4 )) ){ goto $label$61 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [100])) ? (($0 + [92]) + [1]) : $4 )
	if ( $21 ){ goto $label$77 }
	if ( ($10 == 0) ){ goto $label$76 }
	$21 = ([0] - $9)
	
.LOOP $label$93:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$61 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$93 }
	goto $label$76 
	
.LABEL $label$78
	if ( ((uint_32)$12 > (uint_32)[55]) ){ goto $label$73 }
	$4 = ($0 + [56])
	CALL $40(($22 + [152]), $4)
	$12 = ($3 & [1])
	$3 = *($0 + [56])
	$21 = ($10 & [1])
	$10 = *($22 + [136])
	$13 = uint_32($10 >> [1])
	$8 = *($22 + [140])
	$9 = ( $8 ? $13 : $21 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [60])) ? uint_32($3 >> [1]) : $12 )) ){ goto $label$66 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [64])) ? ($4 + [1]) : $12 )
	if ( $21 ){ goto $label$67 }
	if ( ($9 == 0) ){ goto $label$65 }
	$21 = ([0] - $13)
	
.LOOP $label$94:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$66 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$94 }
	goto $label$65 
	
.LABEL $label$77
	if ( ($10 == 0) ){ goto $label$76 }
	if ( CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $10) ){ goto $label$61 }
	
.LABEL $label$76
	$15 = (float_64)25
	goto $label$61 
	
.LABEL $label$75
	if ( ($9 == 0) ){ goto $label$71 }
	if ( (CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $9) == 0) ){ goto $label$71 }
	$8 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$74
	$15 = (float_64)0
	$4 = ($3 & [1])
	$3 = *($0 + [104])
	$21 = ($10 & [1])
	$9 = (uint_32($10 >> [1]) & [127])
	$10 = ( $8 ? $9 : $21 )
	if ( ((int_32)$10 != (int_32)( *(($0 + [108])) ? uint_32($3 >> [1]) : $4 )) ){ goto $label$61 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [112])) ? (($0 + [104]) + [1]) : $4 )
	if ( $21 ){ goto $label$72 }
	if ( ($10 == 0) ){ goto $label$71 }
	$21 = ([0] - $9)
	
.LOOP $label$95:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$61 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$95 }
	goto $label$71 
	
.LABEL $label$73
	$15 = (float_64)0
	if ( ((uint_32)$12 > (uint_32)[100]) ){ goto $label$61 }
	$4 = ($0 + [68])
	CALL $40(($22 + [152]), $4)
	$12 = ($3 & [1])
	$3 = *($0 + [68])
	$21 = ($10 & [1])
	$10 = *($22 + [136])
	$13 = uint_32($10 >> [1])
	$8 = *($22 + [140])
	$9 = ( $8 ? $13 : $21 )
	if ( ((int_32)$9 != (int_32)( *(($0 + [72])) ? uint_32($3 >> [1]) : $12 )) ){ goto $label$63 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [76])) ? ($4 + [1]) : $12 )
	if ( $21 ){ goto $label$64 }
	if ( ($9 == 0) ){ goto $label$62 }
	$21 = ([0] - $13)
	
.LOOP $label$96:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$63 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$96 }
	goto $label$62 
	
.LABEL $label$72
	if ( ($10 == 0) ){ goto $label$71 }
	if ( CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $10) ){ goto $label$61 }
	
.LABEL $label$71
	$15 = (float_64)10
	goto $label$61 
	
.LABEL $label$70
	if ( ($9 == 0) ){ goto $label$68 }
	if ( (CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $9) == 0) ){ goto $label$68 }
	$8 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$69
	$15 = (float_64)0
	$4 = ($3 & [1])
	$3 = *($0 + [116])
	$21 = ($10 & [1])
	$9 = (uint_32($10 >> [1]) & [127])
	$10 = ( $8 ? $9 : $21 )
	if ( ((int_32)$10 != (int_32)( *(($0 + [120])) ? uint_32($3 >> [1]) : $4 )) ){ goto $label$61 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [124])) ? (($0 + [116]) + [1]) : $4 )
	if ( $21 ){ goto $label$97 }
	if ( ($10 == 0) ){ goto $label$68 }
	$21 = ([0] - $9)
	
.LOOP $label$98:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$61 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$98 }
	goto $label$68 
	
.LABEL $label$97
	if ( ($10 == 0) ){ goto $label$68 }
	if ( CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $10) ){ goto $label$61 }
	
.LABEL $label$68
	$15 = (float_64)6.666666666666667
	goto $label$61 
	
.LABEL $label$67
	if ( ($9 == 0) ){ goto $label$65 }
	if ( (CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $9) == 0) ){ goto $label$65 }
	$8 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$66
	$15 = (float_64)0
	$4 = ($3 & [1])
	$3 = *($0 + [128])
	$21 = ($10 & [1])
	$9 = (uint_32($10 >> [1]) & [127])
	$10 = ( $8 ? $9 : $21 )
	if ( ((int_32)$10 != (int_32)( *(($0 + [132])) ? uint_32($3 >> [1]) : $4 )) ){ goto $label$61 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [136])) ? (($0 + [128]) + [1]) : $4 )
	if ( $21 ){ goto $label$99 }
	if ( ($10 == 0) ){ goto $label$65 }
	$21 = ([0] - $9)
	
.LOOP $label$100:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$61 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$100 }
	goto $label$65 
	
.LABEL $label$99
	if ( ($10 == 0) ){ goto $label$65 }
	if ( CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $10) ){ goto $label$61 }
	
.LABEL $label$65
	$15 = (float_64)4
	goto $label$61 
	
.LABEL $label$64
	if ( ($9 == 0) ){ goto $label$62 }
	if ( (CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $9) == 0) ){ goto $label$62 }
	$8 = *($22 + [140])
	$10 = *($22 + [136])
	
.LABEL $label$63
	$4 = ($3 & [1])
	$3 = *($0 + [140])
	$21 = ($10 & [1])
	$9 = (uint_32($10 >> [1]) & [127])
	$10 = ( $8 ? $9 : $21 )
	if ( ((int_32)$10 != (int_32)( *(($0 + [144])) ? uint_32($3 >> [1]) : $4 )) ){ goto $label$61 }
	$3 = (($22 + [136]) | [1])
	$4 = ( *(($0 + [148])) ? (($0 + [140]) + [1]) : $4 )
	if ( $21 ){ goto $label$101 }
	if ( ($10 == 0) ){ goto $label$62 }
	$21 = ([0] - $9)
	
.LOOP $label$102:
	if ( ((int_32)*($3) != (int_32)*($4)) ){ goto $label$61 }
	$4 = ($4 + [1])
	$3 = ($3 + [1])
	$21 = ($21 + [1])
	if ( $21 ){ goto $label$102 }
	goto $label$62 
	
.LABEL $label$101
	if ( ($10 == 0) ){ goto $label$62 }
	if ( CALL memcmp(( *($22 + [144]) ? $3 : $21 ), $4, $10) ){ goto $label$61 }
	
.LABEL $label$62
	$15 = (float_64)2.2222222222222223
	
.LABEL $label$61
	$1 = *($22 + [176])
	$18 = (Rounds 0)(((float_64)((float_64)$15 * (float_64)(CASTING float_64)(uint_64 $1)) * (float_64)(float_64)0.98))
	*($22 + [168]) = $18
	if ( (int_64)($18 == 0) ){ goto $label$104 }
	$7 = *($0)
	$1 = (int_64)0
	$19 = (int_64)59
	$3 = [416]
	$17 = (int_64)0
	
.LOOP $label$105:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$110 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$109 }
	$4 = ($4 + [165])
	goto $label$108 
	
.LABEL $label$110
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$109
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$108
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$107
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$106
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$2 | (int_64)$17)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$105 }
	$1 = (int_64)0
	$19 = (int_64)59
	$3 = [128]
	$20 = (int_64)0
	
.LOOP $label$111:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$116 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$115 }
	$4 = ($4 + [165])
	goto $label$114 
	
.LABEL $label$116
	$2 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$115
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$114
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$113
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$112
	$3 = ($3 + [1])
	$19 = ((int_64)$19 + (int_64)-5)
	$20 = ((int_64)$2 | (int_64)$20)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$111 }
	$1 = (int_64)0
	$19 = (int_64)59
	$3 = [112]
	$16 = (int_64)0
	
.LOOP $label$117:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$122 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$121 }
	$4 = ($4 + [165])
	goto $label$120 
	
.LABEL $label$122
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$119 }
	goto $label$118 
	
.LABEL $label$121
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$120
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$119
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$118
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$117 }
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [176])
	$1 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$125:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$124 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$126 }
	
.LOOP $label$127:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$124 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$127 }
	
.LABEL $label$126
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$125 }
	goto $label$123 
	
.LABEL $label$124
	$4 = [0]
	
.LABEL $label$123
	CALL eosio_assert($4, [240])
	*(($22 + [72])) = [0]
	*($22 + [64]) = (int_64)0
	$3 = CALL strlen([432])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$103 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$130 }
	*($22 + [64]) = ($3 << [1])
	$4 = (($22 + [64]) | [1])
	if ( $3 ){ goto $label$129 }
	goto $label$128 
	
.LABEL $label$130
	$21 = (($3 + [16]) & [-16])
	$4 = CALL $37($21)
	*($22 + [64]) = ($21 | [1])
	*($22 + [72]) = $4
	*($22 + [68]) = $3
	
.LABEL $label$129
	CALL memcpy($4, [432], $3)
	
.LABEL $label$128
	*(($4 + $3)) = [0]
	*(($22 + [24])) = (int_64)1397703940
	*($22) = *($0)
	*($22 + [8]) = *($22 + [184])
	$3 = ($22 + [72])
	*(($22 + [40])) = *($3)
	*($22 + [16]) = $18
	*($22 + [32]) = *($22 + [64])
	*($22 + [64]) = [0]
	*($22 + [68]) = [0]
	*($3) = [0]
	*($22 + [80]) = $20
	*($22 + [88]) = $16
	*($22 + [96]) = [0]
	*(($4 = ($22 + [100]))) = [0]
	*(($21 = (($22 + [80]) + [24]))) = [0]
	*(($3 = CALL $37([16]))) = $7
	*($3 + [8]) = $17
	*((($22 + [80]) + [32])) = [0]
	$10 = ($3 + [16])
	*($21) = $10
	*($4) = $10
	*($22 + [96]) = $3
	*($22 + [108]) = [0]
	*((($22 + [80]) + [36])) = [0]
	$3 = *($22 + [32])
	$4 = ( *(($22 + [36])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$1 = (CASTING uint_64)(uint_32 $4)
	$4 = ($22 + [108])
	
.LOOP $label$131:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$131 }
	if ( ($3 == 0) ){ goto $label$133 }
	CALL $16($4, $3)
	$4 = *(($22 + [112]))
	$3 = *(($22 + [108]))
	goto $label$132 
	
.LABEL $label$133
	$4 = [0]
	$3 = [0]
	
.LABEL $label$132
	*($22 + [212]) = $3
	*($22 + [208]) = $3
	*($22 + [216]) = $4
	*($22 + [192]) = ($22 + [208])
	*($22 + [200]) = $22
	CALL $19(($22 + [200]), ($22 + [192]))
	CALL $20(($22 + [208]), ($22 + [80]))
	$3 = *($22 + [208])
	CALL send_inline($3, (*($22 + [212]) - $3))
	$3 = *($22 + [208])
	if ( ($3 == 0) ){ goto $label$134 }
	*($22 + [212]) = $3
	CALL $38($3)
	
.LABEL $label$134
	$3 = *($22 + [108])
	if ( ($3 == 0) ){ goto $label$135 }
	*(($22 + [112])) = $3
	CALL $38($3)
	
.LABEL $label$135
	$3 = *($22 + [96])
	if ( ($3 == 0) ){ goto $label$136 }
	*(($22 + [100])) = $3
	CALL $38($3)
	
.LABEL $label$136
	if ( ((*(($22 + [32])) & [1]) == 0) ){ goto $label$137 }
	CALL $38(*(($22 + [40])))
	
.LABEL $label$137
	if ( ((*($22 + [64]) & [1]) == 0) ){ goto $label$138 }
	CALL $38(*(($22 + [72])))
	
.LABEL $label$138
	$1 = *($22 + [176])
	
.LABEL $label$104
	$8 = (($22 + [120]) | [1])
	$3 = ( *($22 + [128]) ? $8 : (*($22 + [120]) & [1]) )
	$15 = ((float_64)(CASTING float_64)(uint_64 $1) * (float_64)(float_64)0.005)
	$4 = [-1]
	$16 = *($22 + [184])
	
.LOOP $label$139:
	$21 = ($3 + $4)
	$10 = ($4 + [1])
	$4 = $10
	if ( *(($21 + [1])) ){ goto $label$139 }
	$20 = (CASTING uint_64)(uint_32 $10)
	$5 = (Rounds 0)($15)
	$1 = (int_64)0
	$2 = (int_64)59
	$17 = (int_64)0
	
.LOOP $label$140:
	$19 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$20) ){ goto $label$141 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$143 }
	$4 = ($4 + [165])
	goto $label$142 
	
.LABEL $label$143
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$142
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$141
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$145 }
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$144 
	
.LABEL $label$145
	$19 = ((int_64)$19 & (int_64)15)
	
.LABEL $label$144
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$19 | (int_64)$17)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$140 }
	CALL eosio_assert(((int_64)$16 != (int_64)$17), [560])
	if ( (int_64)($5 == 0) ){ goto $label$147 }
	$3 = ($3 & [1])
	$3 = *($22 + [120])
	if ( (( *($22 + [124]) ? uint_32($3 >> [1]) : $3 ) == 0) ){ goto $label$147 }
	$3 = ( *(($22 + [128])) ? $8 : $3 )
	$4 = [-1]
	
.LOOP $label$148:
	$21 = ($3 + $4)
	$10 = ($4 + [1])
	$4 = $10
	if ( *(($21 + [1])) ){ goto $label$148 }
	$20 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$2 = (int_64)59
	$17 = (int_64)0
	
.LOOP $label$149:
	$19 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$20) ){ goto $label$150 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$152 }
	$4 = ($4 + [165])
	goto $label$151 
	
.LABEL $label$152
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$151
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$150
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$154 }
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$153 
	
.LABEL $label$154
	$19 = ((int_64)$19 & (int_64)15)
	
.LABEL $label$153
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$19 | (int_64)$17)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$149 }
	if ( (CALL is_account($17) == 0) ){ goto $label$147 }
	$6 = *($0)
	$1 = (int_64)0
	$19 = (int_64)59
	$3 = [416]
	$17 = (int_64)0
	
.LOOP $label$155:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$160 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$159 }
	$4 = ($4 + [165])
	goto $label$158 
	
.LABEL $label$160
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$157 }
	goto $label$156 
	
.LABEL $label$159
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$158
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$157
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$156
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$2 | (int_64)$17)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$155 }
	$1 = (int_64)0
	$19 = (int_64)59
	$3 = [128]
	$20 = (int_64)0
	
.LOOP $label$161:
	if ( ((uint_64)$1 > (uint_64)(int_64)10) ){ goto $label$166 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$165 }
	$4 = ($4 + [165])
	goto $label$164 
	
.LABEL $label$166
	$2 = (int_64)0
	if ( ((int_64)$1 == (int_64)11) ){ goto $label$163 }
	goto $label$162 
	
.LABEL $label$165
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$164
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$163
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$162
	$3 = ($3 + [1])
	$19 = ((int_64)$19 + (int_64)-5)
	$20 = ((int_64)$2 | (int_64)$20)
	$1 = ((int_64)$1 + (int_64)1)
	if ( ((int_64)$1 != (int_64)13) ){ goto $label$161 }
	$1 = (int_64)0
	$19 = (int_64)59
	$3 = [112]
	$16 = (int_64)0
	
.LOOP $label$167:
	if ( ((uint_64)$1 > (uint_64)(int_64)7) ){ goto $label$172 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$171 }
	$4 = ($4 + [165])
	goto $label$170 
	
.LABEL $label$172
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$171
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$170
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$169
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$168
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$167 }
	$3 = ( *(($22 + [128])) ? $8 : (*($22 + [120]) & [1]) )
	$4 = [-1]
	
.LOOP $label$173:
	$21 = ($3 + $4)
	$10 = ($4 + [1])
	$4 = $10
	if ( *(($21 + [1])) ){ goto $label$173 }
	$7 = (CASTING uint_64)(uint_32 $10)
	$1 = (int_64)0
	$2 = (int_64)59
	$18 = (int_64)0
	
.LOOP $label$174:
	$19 = (int_64)0
	if ( ((uint_64)$1 >= (uint_64)$7) ){ goto $label$175 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$177 }
	$4 = ($4 + [165])
	goto $label$176 
	
.LABEL $label$177
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$176
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$175
	if ( ((uint_64)$1 > (uint_64)(int_64)11) ){ goto $label$179 }
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$2 & (int_64)4294967295))
	goto $label$178 
	
.LABEL $label$179
	$19 = ((int_64)$19 & (int_64)15)
	
.LABEL $label$178
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$2 = ((int_64)$2 + (int_64)-5)
	if ( ((int_64)$2 != (int_64)-6) ){ goto $label$174 }
	CALL eosio_assert((uint_64)(((int_64)$5 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [176])
	$1 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$182:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$181 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$183 }
	
.LOOP $label$184:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$181 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$184 }
	
.LABEL $label$183
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$182 }
	goto $label$180 
	
.LABEL $label$181
	$4 = [0]
	
.LABEL $label$180
	CALL eosio_assert($4, [240])
	*(($22 + [72])) = [0]
	*($22 + [64]) = (int_64)0
	$3 = CALL strlen([608])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$146 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$187 }
	*($22 + [64]) = ($3 << [1])
	$4 = (($22 + [64]) | [1])
	if ( $3 ){ goto $label$186 }
	goto $label$185 
	
.LABEL $label$187
	$21 = (($3 + [16]) & [-16])
	$4 = CALL $37($21)
	*($22 + [64]) = ($21 | [1])
	*($22 + [72]) = $4
	*($22 + [68]) = $3
	
.LABEL $label$186
	CALL memcpy($4, [608], $3)
	
.LABEL $label$185
	*(($4 + $3)) = [0]
	*(($22 + [24])) = (int_64)1397703940
	*(($4 = ($22 + [36]))) = *($22 + [68])
	*($22 + [8]) = $18
	$3 = ($22 + [72])
	*(($22 + [40])) = *($3)
	*($22) = *($0)
	*($22 + [16]) = $5
	*($22 + [32]) = *($22 + [64])
	*($22 + [64]) = [0]
	*($22 + [68]) = [0]
	*($3) = [0]
	*($22 + [80]) = $20
	*($22 + [88]) = $16
	*($22 + [96]) = [0]
	*(($21 = ($22 + [100]))) = [0]
	*(($10 = (($22 + [80]) + [24]))) = [0]
	*(($3 = CALL $37([16]))) = $6
	*($3 + [8]) = $17
	*((($22 + [80]) + [32])) = [0]
	$8 = ($3 + [16])
	*($10) = $8
	*($21) = $8
	*($22 + [96]) = $3
	*($22 + [108]) = [0]
	*((($22 + [80]) + [36])) = [0]
	$3 = *($22 + [32])
	$4 = ( *($4) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($4 + [32])
	$1 = (CASTING uint_64)(uint_32 $4)
	$4 = ($22 + [108])
	
.LOOP $label$188:
	$3 = ($3 + [1])
	$1 = (uint_64)$1 >> (uint_64)(int_64)7
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$188 }
	if ( ($3 == 0) ){ goto $label$190 }
	CALL $16($4, $3)
	$4 = *(($22 + [112]))
	$3 = *(($22 + [108]))
	goto $label$189 
	
.LABEL $label$190
	$4 = [0]
	$3 = [0]
	
.LABEL $label$189
	*($22 + [212]) = $3
	*($22 + [208]) = $3
	*($22 + [216]) = $4
	*($22 + [192]) = ($22 + [208])
	*($22 + [200]) = $22
	CALL $19(($22 + [200]), ($22 + [192]))
	CALL $20(($22 + [208]), ($22 + [80]))
	$3 = *($22 + [208])
	CALL send_inline($3, (*($22 + [212]) - $3))
	$3 = *($22 + [208])
	if ( ($3 == 0) ){ goto $label$191 }
	*($22 + [212]) = $3
	CALL $38($3)
	
.LABEL $label$191
	$3 = *($22 + [108])
	if ( ($3 == 0) ){ goto $label$192 }
	*(($22 + [112])) = $3
	CALL $38($3)
	
.LABEL $label$192
	$3 = *($22 + [96])
	if ( ($3 == 0) ){ goto $label$193 }
	*(($22 + [100])) = $3
	CALL $38($3)
	
.LABEL $label$193
	if ( ((*(($22 + [32])) & [1]) == 0) ){ goto $label$194 }
	CALL $38(*(($22 + [40])))
	
.LABEL $label$194
	if ( ((*($22 + [64]) & [1]) == 0) ){ goto $label$147 }
	CALL $38(*(($22 + [72])))
	
.LABEL $label$147
	$11 = ($0 + [160])
	$8 = ($0 + [152])
	$1 = *(CALL $21($8, CALL $fimport$7(*($0 + [152]), *($11), (int_64)-6030912142679474176, (int_64)0)))
	$12 = ($0 + [168])
	$13 = ($0 + [176])
	$14 = ($0 + [180])
	
.LOOP $label$195:
	$2 = *($12)
	if ( ((int_64)$2 != (int_64)-1) ){ goto $label$196 }
	$2 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($8), *($11), (int_64)-6030912142679474176, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$197 }
	CALL $21($8, $3)
	*($22 + [4]) = [0]
	*($22) = $8
	$2 = *(*(CALL $22($22) + [4]))
	$2 = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$197
	*($12) = $2
	
.LABEL $label$196
	CALL eosio_assert((uint_64)($2 <= (int_64)-2), [624])
	if ( ((uint_64)$1 > (uint_64)((int_64)*($12) + (int_64)-20)) ){ goto $label$199 }
	$9 = *($13)
	$21 = *($14)
	if ( ((int_32)$21 == (int_32)$9) ){ goto $label$198 }
	$3 = ($21 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$200:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$198 }
	$21 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $10) != (int_32)[-24]) ){ goto $label$200 }
	goto $label$198 
	
.LABEL $label$199
	$1 = *($0)
	*($22) = $0
	*($22 + [4]) = ($22 + [152])
	*($22 + [8]) = ($22 + [184])
	*($22 + [12]) = ($22 + [176])
	*($22 + [16]) = ($22 + [136])
	*($22 + [20]) = ($22 + [168])
	*($22 + [208]) = $1
	CALL eosio_assert(((int_64)*(($0 + [152])) == (int_64)CALL $fimport$2()), [688])
	*($22 + [80]) = $8
	*($22 + [84]) = $22
	*($22 + [88]) = ($22 + [208])
	*(($21 = CALL $37([72])) + [24 align=4]) = (int_64)0
	*($21 + [32 align=4]) = (int_64)0
	*($21 + [40 align=4]) = (int_64)0
	*($21 + [56]) = $8
	CALL $23(($22 + [80]), $21)
	*($22 + [64]) = $21
	$1 = *($21)
	*($22 + [80]) = $1
	$4 = *($21 + [60])
	*($22 + [200]) = $4
	$10 = ($0 + [180])
	$3 = *($10)
	if ( ((uint_32)$3 >= (uint_32)*(($0 + [184]))) ){ goto $label$202 }
	*($3 + [8]) = $1
	*($3 + [16]) = $4
	*($22 + [64]) = [0]
	*($3) = $21
	*($10) = ($3 + [24])
	goto $label$201 
	
.LABEL $label$202
	CALL $24(($0 + [176]), ($22 + [64]), ($22 + [80]), ($22 + [200]))
	
.LABEL $label$201
	$3 = *($22 + [64])
	*($22 + [64]) = [0]
	if ( ($3 == 0) ){ goto $label$203 }
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$204 }
	CALL $38(*(($3 + [44])))
	
.LABEL $label$204
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$205 }
	CALL $38(*(($3 + [32])))
	
.LABEL $label$205
	CALL $38($3)
	
.LABEL $label$203
	$1 = (int_64)0
	$19 = (int_64)59
	$3 = [416]
	$16 = *($22 + [184])
	$17 = (int_64)0
	
.LOOP $label$206:
	if ( ((uint_64)$1 > (uint_64)(int_64)5) ){ goto $label$211 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$210 }
	$4 = ($4 + [165])
	goto $label$209 
	
.LABEL $label$211
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$208 }
	goto $label$207 
	
.LABEL $label$210
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$209
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$208
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$207
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$17 = ((int_64)$2 | (int_64)$17)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$206 }
	$18 = *($0)
	$1 = (int_64)0
	$19 = (int_64)59
	$3 = [752]
	$20 = (int_64)0
	
.LOOP $label$212:
	if ( ((uint_64)$1 > (uint_64)(int_64)6) ){ goto $label$217 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$216 }
	$4 = ($4 + [165])
	goto $label$215 
	
.LABEL $label$217
	$2 = (int_64)0
	if ( ((uint_64)$1 <= (uint_64)(int_64)11) ){ goto $label$214 }
	goto $label$213 
	
.LABEL $label$216
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$215
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$214
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$213
	$3 = ($3 + [1])
	$1 = ((int_64)$1 + (int_64)1)
	$20 = ((int_64)$2 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$212 }
	*($22) = *($21)
	*($22 + [8]) = $16
	*($22 + [16]) = *($22 + [176])
	CALL $45(($22 + [24]), ($22 + [136]))
	CALL $45(($22 + [36]), ($22 + [152]))
	*($22 + [88]) = $20
	*($22 + [48]) = *($22 + [168])
	*($22 + [80]) = $18
	*(($3 = CALL $37([16]))) = $16
	*($3 + [8]) = $17
	$4 = [0]
	*(($10 = ($22 + [112]))) = [0]
	$21 = ($3 + [16])
	*((($22 + [80]) + [24])) = $21
	*(($22 + [100])) = $21
	*($22 + [96]) = $3
	*($22 + [108]) = [0]
	*((($22 + [80]) + [36])) = [0]
	*($22 + [200]) = [0]
	*($22 + [64]) = ($22 + [200])
	*($22 + [208]) = $22
	CALL $25(($22 + [208]), ($22 + [64]))
	$3 = *($22 + [200])
	if ( ($3 == 0) ){ goto $label$219 }
	$21 = ($22 + [108])
	CALL $16($21, $3)
	$4 = *($10)
	$3 = *($21)
	goto $label$218 
	
.LABEL $label$219
	$3 = [0]
	
.LABEL $label$218
	*($22 + [212]) = $3
	*($22 + [208]) = $3
	*($22 + [216]) = $4
	*($22 + [200]) = ($22 + [208])
	*($22 + [64]) = $22
	CALL $26(($22 + [64]), ($22 + [200]))
	CALL $20(($22 + [208]), ($22 + [80]))
	$3 = *($22 + [208])
	CALL send_inline($3, (*($22 + [212]) - $3))
	$3 = *($22 + [208])
	if ( ($3 == 0) ){ goto $label$220 }
	*($22 + [212]) = $3
	CALL $38($3)
	
.LABEL $label$220
	$3 = *($22 + [108])
	if ( ($3 == 0) ){ goto $label$221 }
	*(($22 + [112])) = $3
	CALL $38($3)
	
.LABEL $label$221
	$3 = *($22 + [96])
	if ( ($3 == 0) ){ goto $label$222 }
	*(($22 + [100])) = $3
	CALL $38($3)
	
.LABEL $label$222
	if ( ((*($22 + [36]) & [1]) == 0) ){ goto $label$223 }
	CALL $38(*(($22 + [44])))
	
.LABEL $label$223
	if ( ((*($22 + [24]) & [1]) == 0) ){ goto $label$224 }
	CALL $38(*(($22 + [32])))
	
.LABEL $label$224
	if ( ((*($22 + [120]) & [1]) == 0) ){ goto $label$225 }
	CALL $38(*(($22 + [128])))
	
.LABEL $label$225
	if ( ((*($22 + [136]) & [1]) == 0) ){ goto $label$226 }
	CALL $38(*($22 + [144]))
	
.LABEL $label$226
	if ( ((*($22 + [152]) & [1]) == 0) ){ goto $label$1 }
	CALL $38(*($22 + [160]))
	goto $label$1 
	
.LABEL $label$198
	if ( ((int_32)$21 == (int_32)$9) ){ goto $label$229 }
	$3 = *(($21 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$8), [768])
	if ( $3 ){ goto $label$228 }
	goto $label$227 
	
.LABEL $label$229
	$3 = CALL db_find_i64(*($8), *($11), (int_64)-6030912142679474176, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$227 }
	$3 = CALL $21($8, $3)
	CALL eosio_assert(((int_32)*($3 + [56]) == (int_32)$8), [768])
	
.LABEL $label$228
	CALL eosio_assert([1], [832])
	CALL eosio_assert([1], [880])
	$4 = CALL db_next_i64(*($3 + [60]), $22)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$230 }
	CALL $21($8, $4)
	
.LABEL $label$230
	CALL $27($8, $3)
	
.LABEL $label$227
	$1 = ((int_64)$1 + (int_64)1)
	goto $label$195 
	
.LABEL $label$146
	CALL $39(($22 + [64]))
	
.LABEL $label$103
	CALL $39(($22 + [64]))
	
.LABEL $label$11
	CALL $39(($22 + [120]))
	
.LABEL $label$7
	CALL $39(($22 + [152]))
	
.LABEL $label$1
	*([0] + [4]) = ($22 + [224])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [224])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$16 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$17:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$22 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$3 = ($3 + [165])
	goto $label$20 
	
.LABEL $label$22
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$21
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$19
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$15 }
	
.LABEL $label$16
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$28 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$3 = ($3 + [165])
	goto $label$26 
	
.LABEL $label$28
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$23 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$15 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$34 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$3 = ($3 + [165])
	goto $label$32 
	
.LABEL $label$34
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$30
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$29 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$14 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$40 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$3 = ($3 + [165])
	goto $label$38 
	
.LABEL $label$40
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$36
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$35 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = CALL $6(($9 + [32]), $0)
	if ( ((int_64)$2 == (int_64)-5003315193367756800) ){ goto $label$42 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$41 }
	*($9 + [28]) = [0]
	*($9 + [24]) = [1]
	*($9) = *($9 + [24])
	CALL $8($4, $9)
	goto $label$41 
	
.LABEL $label$42
	*($9 + [20]) = [0]
	*($9 + [16]) = [2]
	*($9 + [8 align=4]) = *($9 + [16])
	CALL $10($4, ($9 + [8]))
	
.LABEL $label$41
	CALL $11($4)
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [224])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $15($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $42($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $37($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $42($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $38($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $39($7)
	return (unreachable)
}

int_32 .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [160])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $16($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [144])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $37($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $44($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $38($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [144])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [144])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $14(*($1), ($0 + [32]))
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [112])
	*([0] + [4]) = $3
	*(($2 = $3) + [76]) = $0
	*($2 + [64]) = *($1)
	*($2 + [68]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [40])) = (int_64)0
	*(($2 + [48])) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*(($2 + [52])) = [0]
	*($2 + [56]) = (int_64)0
	*($2 + [84]) = $1
	*($2 + [80]) = $1
	*($2 + [88]) = ($1 + $0)
	*($2 + [96]) = ($2 + [80])
	*($2 + [104]) = ($2 + [8])
	CALL $12(($2 + [104]), ($2 + [96]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [84]) = ($2 + [64])
	*($2 + [80]) = ($2 + [76])
	CALL $13(($2 + [80]), ($2 + [8]))
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$5 }
	CALL $38(*(($2 + [52])))
	
.LABEL $label$5
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $38(*(($2 + [40])))
	
.LABEL $label$6
	*([0] + [4]) = ($2 + [112])
	return [1]
}

int_32 .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [176]))
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = ($0 + [180])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((*($2 + [36]) & [1]) == 0) ){ goto $label$6 }
	CALL $38(*(($2 + [44])))
	
.LABEL $label$6
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $38(*(($2 + [32])))
	
.LABEL $label$7
	CALL $38($2)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$2 = *(($0 + [176]))
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	
.LABEL $label$2
	*($3) = $1
	CALL $38($2)
	
.LABEL $label$1
	if ( ((*($0 + [140]) & [1]) == 0) ){ goto $label$8 }
	CALL $38(*(($0 + [148])))
	
.LABEL $label$8
	if ( ((*($0 + [128]) & [1]) == 0) ){ goto $label$9 }
	CALL $38(*(($0 + [136])))
	
.LABEL $label$9
	if ( ((*($0 + [116]) & [1]) == 0) ){ goto $label$10 }
	CALL $38(*(($0 + [124])))
	
.LABEL $label$10
	if ( ((*($0 + [104]) & [1]) == 0) ){ goto $label$11 }
	CALL $38(*(($0 + [112])))
	
.LABEL $label$11
	if ( ((*($0 + [92]) & [1]) == 0) ){ goto $label$12 }
	CALL $38(*(($0 + [100])))
	
.LABEL $label$12
	if ( ((*($0 + [80]) & [1]) == 0) ){ goto $label$13 }
	CALL $38(*(($0 + [88])))
	
.LABEL $label$13
	if ( ((*($0 + [68]) & [1]) == 0) ){ goto $label$14 }
	CALL $38(*(($0 + [76])))
	
.LABEL $label$14
	if ( ((*($0 + [56]) & [1]) == 0) ){ goto $label$15 }
	CALL $38(*(($0 + [64])))
	
.LABEL $label$15
	if ( ((*($0 + [44]) & [1]) == 0) ){ goto $label$16 }
	CALL $38(*(($0 + [52])))
	
.LABEL $label$16
	if ( ((*($0 + [32]) & [1]) == 0) ){ goto $label$17 }
	CALL $38(*(($0 + [40])))
	
.LABEL $label$17
	if ( ((*($0 + [20]) & [1]) == 0) ){ goto $label$18 }
	CALL $38(*(($0 + [28])))
	
.LABEL $label$18
	if ( ((*($0 + [8]) & [1]) == 0) ){ goto $label$19 }
	CALL $38(*(($0 + [16])))
	
.LABEL $label$19
	return $0
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [144])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [144])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $14(*($1), ($3 + [24]))
	CALL $14(*($1), ($3 + [36]))
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [144])
	CALL memcpy(($3 + [48]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC $13 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $45(($7 + [16]), ($1 + [24]))
	CALL $45($7, ($1 + [36]))
	$5 = *($1 + [48])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $45(($7 + [48]), ($7 + [16]))
	CALL $45(($7 + [32]), $7)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $4), (int_64 ($7 + [48])), (int_32 ($7 + [32])), (int_32 $5), (int_64 $1))
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$2 }
	CALL $38(*($7 + [40]))
	
.LABEL $label$2
	if ( ((*($7 + [48]) & [1]) == 0) ){ goto $label$3 }
	CALL $38(*($7 + [56]))
	
.LABEL $label$3
	if ( ((*($7) & [1]) == 0) ){ goto $label$4 }
	CALL $38(*($7 + [8]))
	
.LABEL $label$4
	if ( ((*($7 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL $38(*($7 + [24]))
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [64])
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9844])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9652]
	$1 = (((int_32)$2 * (int_32)[12]) + [9652])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9948])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $35($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9856])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9942]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9944])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9942]) = [1]
	$7 = ($7 << [16])
	*([0] + [9944]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9944])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9944]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9942]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9942]) = [1]
	$3 = ($3 << [16])
	*([0] + [9944]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9944])
	
.LABEL $label$8
	*([0] + [9944]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1120])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1120])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $34([1460], $0)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [144])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [144])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $14(CALL $14($0, ($1 + [24])), ($1 + [36]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [144])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1120])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1120])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1120])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $38 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}