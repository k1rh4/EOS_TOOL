(data (i32.const 8244) "failed to allocate pages\00-+   0X0x\00Assertion failed: %s (%s: %s: %d)\n\00")
(data (i32.const 8320) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 8416) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(data (i32.const 10220) "(null)\00invalid symbol name\00")
(data (i32.const 10256) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 10720) "0123456789ABCDEF")
(data (i32.const 10736) "-0X+0X 0X-0x+0x 0x\00max-supply must be positive\00")
(data (i32.const 10783) "inf\00token with symbol already exists\00")
(data (i32.const 10820) "INF\00token with symbol does not exist, create token before issue\00")
(data (i32.const 10884) "nan\00symbol precision mismatch\00")
(data (i32.const 10914) "NAN\00max-supply cannot be less than actual supply\00")
(data (i32.const 10963) ".\00memo has more than 256 bytes\00")
(data (i32.const 11000) "\05\00\00\00\00\00\00\00\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\03\00\00\004 \00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\00\00\00\00\00\00\00\00\00\00\00\00\00\00\ff\ff\ff\ff\ff\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\a73\00\00")
(data (i32.const 11148) "\f8*\00\00")
(data (i32.const 11152) "invalid supply\00")
(data (i32.const 11167) "invalid quantity\00")
(data (i32.const 11184) "must issue positive quantity\00")
(data (i32.const 11213) "quantity exceeds available supply\00")
(data (i32.const 11247) "symbol does not exist\00")
(data (i32.const 11269) "cannot transfer to self\00")
(data (i32.const 11293) "to account does not exist\00")
(data (i32.const 11319) "unable to find key\00")
(data (i32.const 11338) "must transfer positive quantity\00")
(data (i32.const 11370) "must store positive quantity\00")
(data (i32.const 11399) "ZKSPLAY\00")
(data (i32.const 11407) "ZKS\00")
(data (i32.const 11411) "Converted \00")
(data (i32.const 11422) "issuer\00")
(data (i32.const 11429) "transfer\00")
(data (i32.const 11438) "Surplus ZKSPLAY from swapping to ZKS\00")
(data (i32.const 11475) "ZKSPLAY to ZKS\00")
(data (i32.const 11490) "ZKS to ZKSPLAY\00")
(data (i32.const 11505) "Swap must be greater than 0\00")
(data (i32.const 11533) "no balance object found\00")
(data (i32.const 11557) "overdrawn balance\00")
(data (i32.const 11575) "string is too long to be a valid symbol_code\00")
(data (i32.const 11620) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 11673) "write\00")
(data (i32.const 11679) "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\00")
(data (i32.const 11744) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 11795) "error reading iterator\00")
(data (i32.const 11818) "read\00")
(data (i32.const 11823) "ipfs://z\00")
(data (i32.const 11832) "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\00")
(data (i32.const 11891) "carry == 0\00")
(data (i32.const 11902) "base58.hpp\00")
(data (i32.const 11913) "EncodeBase58\00")
(data (i32.const 11926) "base58 decode failed\00")
(data (i32.const 11952) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\ff\ff\ff\ff\ff\ff\ff\t\n\0b\0c\0d\0e\0f\10\ff\11\12\13\14\15\ff\16\17\18\19\1a\1b\1c\1d\1e\1f \ff\ff\ff\ff\ff\ff!\"#$%&\'()*+\ff,-./0123456789\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 12208) "DecodeBase58\00")
(data (i32.const 12221) "cannot pass end iterator to erase\00")
(data (i32.const 12255) "cannot increment end iterator\00")
(data (i32.const 12285) "object passed to erase is not in multi_index\00")
(data (i32.const 12330) "cannot erase objects in table of another contract\00")
(data (i32.const 12380) "attempt to remove object that was not in multi_index\00")
(data (i32.const 12433) "commit\00")
(data (i32.const 12440) "cleanup\00")
(data (i32.const 12448) "wrong uri\00")
(data (i32.const 12458) "cannot create objects in table of another contract\00")
(data (i32.const 12509) "next primary key in table is at autoincrement limit\00")
(data (i32.const 12561) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 12615) "cannot decrement iterator at beginning of table\00")
(data (i32.const 12663) "warmup\00")
(data (i32.const 12670) "logevent\00")
(data (i32.const 12679) "logclear\00")
(data (i32.const 12688) "string is too long to be a valid name\00")
(data (i32.const 12726) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 12793) "character is not in allowed character set for names\00")
(data (i32.const 12845) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 12894) "object passed to modify is not in multi_index\00")
(data (i32.const 12940) "cannot modify objects in table of another contract\00")
(data (i32.const 12991) "updater cannot change primary key when modifying an object\00")
(data (i32.const 13050) "attempt to add asset with different symbol\00")
(data (i32.const 13093) "addition underflow\00")
(data (i32.const 13112) "addition overflow\00")
(data (i32.const 13130) "attempt to subtract asset with different symbol\00")
(data (i32.const 13178) "subtraction underflow\00")
(data (i32.const 13200) "subtraction overflow\00")
(data (i32.const 13221) "-\00")
(data (i32.const 13223) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 13256) "{\00")
(data (i32.const 13258) "version\00")
(data (i32.const 13266) "1.0\00")
(data (i32.const 13270) ",\00")
(data (i32.const 13272) "etype\00")
(data (i32.const 13278) "service_request\00")
(data (i32.const 13294) "payer\00")
(data (i32.const 13300) "service\00")
(data (i32.const 13308) "action\00")
(data (i32.const 13315) "provider\00")
(data (i32.const 13324) "data\00")
(data (i32.const 13329) "}\n\00")
(data (i32.const 13332) "required service\00")
(data (i32.const 13349) "get\00")
(data (i32.const 13353) "key already exists\00")
(data (i32.const 13372) "shard not found\00")
(data (i32.const 13388) "cannot pass end iterator to modify\00")
(data (i32.const 13423) "key not found\00")
(data (i32.const 0) "\804\00\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "abort" (func $fimport$1))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$3 (result i64)))
(import "env" "send_inline" (func $fimport$4 (param i32 i32)))
(import "env" "memcpy" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "sha256" (func $fimport$6 (param i32 i32 i32)))
(import "env" "memmove" (func $fimport$7 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$8 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$9 (param i32 i32)))
(import "env" "__multf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$11 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$14 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$18 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$19 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$20 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$21 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$22 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$23 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$24 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "eosio_exit" (func $fimport$26 (param i32)))
(import "env" "action_data_size" (func $fimport$27 (result i32)))
(import "env" "read_action_data" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$29 (param i64)))
(import "env" "db_find_i64" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_store_i64" (func $fimport$31 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$32 (param i64) (result i32)))
(import "env" "require_recipient" (func $fimport$33 (param i64)))
(import "env" "db_update_i64" (func $fimport$34 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$35 (param i32)))
(import "env" "eosio_assert_code" (func $fimport$36 (param i32 i64)))
(import "env" "db_idx256_lowerbound" (func $fimport$37 (param i64 i64 i64 i32 i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$38 (param i32 i32 i32) (result i32)))
(import "env" "db_idx256_find_primary" (func $fimport$39 (param i64 i64 i64 i32 i32 i64) (result i32)))
(import "env" "db_idx256_next" (func $fimport$40 (param i32 i32) (result i32)))
(import "env" "db_idx256_remove" (func $fimport$41 (param i32)))
(import "env" "db_lowerbound_i64" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_idx256_store" (func $fimport$43 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$44 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$45 (param i64 i64 i64) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$46 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$47 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_next" (func $fimport$48 (param i32 i32) (result i32)))
(import "env" "prints" (func $fimport$49 (param i32)))
(import "env" "printn" (func $fimport$50 (param i64)))
(export "apply" (func $62))
(table $0 18 18 anyfunc)
(elem (i32.const 1) $51 $52 $53 $63 $65 $67 $68 $70 $72 $74 $75 $77 $79 $80 $81 $83 $84)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 13437))
(global $global$2 i32 (i32.const 13437))


int_32 .FUNC $174 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = CALL $176($0, $1)
	*((($2 + [88]) + [16])) = *(($3 + [16]))
	*((($2 + [88]) + [8])) = *(($3 + [8]))
	*($2 + [88]) = *($3)
	CALL $177(($2 + [72]), $0, ($2 + [88]), [1])
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$0 = (*($2 + [76]) - *($2 + [72]))
	if ( ($0 == 0) ){ goto $label$6 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = CALL $8($0)
	*(($2 + [24])) = ($3 + $0)
	*($2 + [16]) = $3
	*($2 + [20]) = $3
	$4 = *($2 + [72])
	$0 = (*($2 + [76]) - $4)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($3, $4, $0)
	*($2 + [20]) = (*($2 + [20]) + $0)
	
.LABEL $label$6
	CALL $178(($2 + [32]), ($2 + [16]), *($2 + [104]), *($2 + [96]))
	$0 = *($2 + [16])
	if ( ($0 == 0) ){ goto $label$7 }
	*($2 + [20]) = $0
	CALL $10($0)
	
.LABEL $label$7
	if ( (*($2 + [68]) == 0) ){ goto $label$8 }
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$0 = (*(($2 + [60])) - *($2 + [56]))
	if ( ($0 == 0) ){ goto $label$9 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$4 }
	$3 = CALL $8($0)
	*(($2 + [8])) = ($3 + $0)
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *(($2 + [56]))
	$0 = (*(($2 + [60])) - $4)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($3, $4, $0)
	*($2 + [4]) = (*($2 + [4]) + $0)
	
.LABEL $label$9
	*(($0 = CALL $8([12])) + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($2)
	$4 = (*($2 + [4]) - $3)
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$5 = CALL $8($4)
	*($0) = $5
	*(($6 = ($0 + [4]))) = $5
	*(($0 + [8])) = ($5 + $4)
	$3 = *($2)
	$4 = (*($2 + [4]) - $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $3, $4)
	*($6) = (*($6) + $4)
	$3 = *($2)
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$11 }
	*($2 + [4]) = $3
	CALL $10($3)
	
.LABEL $label$11
	$3 = *($2 + [56])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	$0 = [0]
	$3 = *($2 + [56])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL $16(($2 + [16]))
	
.LABEL $label$4
	CALL $16($2)
	
.LABEL $label$3
	CALL $16($0)
	
.LABEL $label$2
	*(($2 + [60])) = $3
	CALL $10($3)
	
.LABEL $label$1
	$3 = *($2 + [72])
	if ( ($3 == 0) ){ goto $label$12 }
	*($2 + [76]) = $3
	CALL $10($3)
	
.LABEL $label$12
	$global$0 = ($2 + [112])
	(unreachable)
	(unreachable)
	(unreachable)
	return $0
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $2($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $2(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $3($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $176 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = *($0 + [8])
	if ( ((int_64)$3 == (int_64)0) ){ goto $label$4 }
	$4 = [0]
	$5 = *([0] + [11144])
	
.LOOP $label$6:
	*((($2 + [96]) + ($6 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$4 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$5 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$3 }
	*($2 + [32]) = ($4 << [1])
	$5 = (($2 + [32]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	*($2 + [32]) = [0]
	$6 = (($2 + [32]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$7 = (($4 + [16]) & [-16])
	$5 = CALL $8($7)
	*($2 + [32]) = ($7 | [1])
	*($2 + [40]) = $5
	*($2 + [36]) = $4
	
.LABEL $label$2
	$7 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$7:
	*(($5 + $6)) = *((($2 + [96]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$7 }
	$6 = ($5 + $4)
	
.LABEL $label$1
	$4 = [0]
	*($6) = [0]
	$6 = CALL $46(($2 + [32]), [13221])
	$5 = ($6 + [8])
	*((($2 + [48]) + [8])) = *($5)
	*($2 + [48]) = *($6)
	*($6) = (int_64)0
	*($5) = [0]
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$11 }
	$5 = *([0] + [11144])
	$3 = $1
	
.LOOP $label$13:
	*((($2 + [96]) + ($6 = $4))) = *(($5 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$3 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$6 == (int_32)[12]) )))))
	$4 = ($6 + [1])
	if ( ((uint_32)$6 > (uint_32)[11]) ){ goto $label$12 }
	$3 = ((int_64)$3 << (int_64)5)
	if ( ((int_64)$3 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$12
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$10 }
	*($2 + [16]) = ($4 << [1])
	$5 = (($2 + [16]) | [1])
	goto $label$9 
	
.LABEL $label$11
	*((($2 + [16]) + [8])) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [16]) = [0]
	$6 = (($2 + [16]) | [1])
	$4 = $6
	goto $label$8 
	
.LABEL $label$10
	$7 = (($4 + [16]) & [-16])
	$5 = CALL $8($7)
	*($2 + [16]) = ($7 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $4
	
.LABEL $label$9
	$7 = ($6 + [1])
	$6 = [0]
	
.LOOP $label$14:
	*(($5 + $6)) = *((($2 + [96]) + $6))
	$6 = ($6 + [1])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$14 }
	$4 = ($5 + $4)
	$6 = (($2 + [16]) | [1])
	
.LABEL $label$8
	*($4) = [0]
	$4 = *($2 + [16])
	$5 = ($4 & [1])
	$6 = CALL $48(($2 + [48]), ( *($2 + [24]) ? $6 : $5 ), ( *($2 + [20]) ? uint_32($4 >> [1]) : $5 ))
	$4 = ($6 + [8])
	*((($2 + [64]) + [8])) = *($4)
	*($2 + [64]) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	$7 = CALL $41(($2 + [96]), ($2 + [64]))
	*($2 + [80]) = (int_64)0
	*($2 + [88]) = [0]
	$6 = ($6 & [1])
	$6 = *($2 + [96])
	$4 = ( *($7 + [4]) ? uint_32($6 >> [1]) : $6 )
	if ( ($4 == 0) ){ goto $label$21 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$20 }
	$6 = ( *($7 + [8]) ? ($7 + [1]) : $6 )
	$5 = CALL $8($4)
	*(($2 + [88])) = ($5 + $4)
	*($2 + [80]) = $5
	*($2 + [84]) = $5
	
.LOOP $label$22:
	*($5) = *($6)
	$5 = (*($2 + [84]) + [1])
	*($2 + [84]) = $5
	$6 = ($6 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$22 }
	$6 = (*($2 + [96]) & [1])
	
.LABEL $label$21
	if ( ($6 == 0) ){ goto $label$23 }
	CALL $10(*(($7 + [8])))
	
.LABEL $label$23
	if ( (*($2 + [64]) & [1]) ){ goto $label$25 }
	if ( (*($2 + [16]) & [1]) ){ goto $label$24 }
	goto $label$19 
	
.LABEL $label$25
	CALL $10(*($2 + [72]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$19 }
	
.LABEL $label$24
	CALL $10(*(($2 + [24])))
	$6 = [1]
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	CALL $16(($2 + [80]))
	
.LABEL $label$19
	$6 = [1]
	if ( (*($2 + [48]) & [1]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( ((*($2 + [32]) & $6) == 0) ){ goto $label$15 }
	goto $label$16 
	
.LABEL $label$17
	CALL $10(*($2 + [56]))
	if ( ((*($2 + [32]) & $6) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL $10(*($2 + [40]))
	
.LABEL $label$15
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$6 = (*($2 + [84]) - *($2 + [80]))
	if ( ($6 == 0) ){ goto $label$27 }
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$26 }
	$4 = CALL $8($6)
	*(($2 + [8])) = ($4 + $6)
	*($2) = $4
	*($2 + [4]) = $4
	$5 = *($2 + [80])
	$6 = (*($2 + [84]) - $5)
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$27 }
	CALL memcpy($4, $5, $6)
	*($2 + [4]) = (*($2 + [4]) + $6)
	
.LABEL $label$27
	$3 = CALL $61($2)
	$6 = *($2)
	if ( ($6 == 0) ){ goto $label$28 }
	*($2 + [4]) = $6
	CALL $10($6)
	
.LABEL $label$28
	$4 = *($0)
	$8 = *(($0 + [8]))
	$5 = *($0 + [4])
	*(($6 = CALL $8([24])) + [4]) = (($4 + [-1]) & (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)6)))
	*($6) = (($5 + [-1]) & (CASTING uint_32)(uint_64 $3))
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	$4 = *($2 + [80])
	if ( ($4 == 0) ){ goto $label$29 }
	*($2 + [84]) = $4
	CALL $10($4)
	
.LABEL $label$29
	$global$0 = ($2 + [112])
	return $6
	
.LABEL $label$26
	CALL $16($2)
	(unreachable)
	return (unreachable)
}

void .FUNC $177 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($global$0 - [240])
	$global$0 = $4
	$5 = CALL current_receiver()
	$6 = CALL current_receiver()
	*(($4 + [216])) = [0]
	*($4 + [192]) = $6
	*($4 + [184]) = $5
	*($4 + [200]) = (int_64)-1
	*($4 + [208]) = (int_64)0
	$7 = CALL db_find_i64($5, $6, (int_64)-2769561580919062528, *($2 + [4]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$16 }
	$7 = CALL $182(($4 + [184]), $7)
	if ( ((int_32)*($7 + [24]) == (int_32)($4 + [184])) ){ goto $label$17 }
	CALL eosio_assert([0], [11744])
	
.LABEL $label$17
	*($4 + [224]) = (int_64)0
	*($4 + [232]) = [0]
	$8 = [0]
	$9 = [0]
	$10 = (*($7 + [4]) - *($7))
	if ( ($10 == 0) ){ goto $label$18 }
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$11 }
	$8 = CALL $8($10)
	*(($4 + [232])) = ($8 + $10)
	*($4 + [228]) = $8
	*($4 + [224]) = $8
	$10 = *($7)
	$7 = (*(($7 + [4])) - $10)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($8, $10, $7)
	$9 = (*($4 + [228]) + $7)
	*($4 + [228]) = $9
	$8 = *($4 + [224])
	
.LABEL $label$18
	*($4 + [48]) = [0]
	*($4 + [40]) = (int_64)0
	$7 = ($9 - $8)
	if ( ($7 == 0) ){ goto $label$9 }
	goto $label$10 
	
.LABEL $label$16
	*($4 + [144]) = [0]
	*($4 + [136]) = (int_64)0
	CALL $131(($4 + [152]), ($4 + [136]), [1])
	CALL $132(($4 + [168]), ($4 + [152]))
	if ( ((*($4 + [152]) & [1]) == 0) ){ goto $label$19 }
	CALL $10(*($4 + [160]))
	
.LABEL $label$19
	$7 = *($4 + [136])
	if ( ($7 == 0) ){ goto $label$20 }
	*($4 + [140]) = $7
	CALL $10($7)
	
.LABEL $label$20
	*($4 + [120]) = (int_64)0
	*($4 + [128]) = [0]
	if ( (*($1 + [4]) == 0) ){ goto $label$21 }
	CALL $183(($4 + [120]), [0], ($4 + [168]))
	$7 = ($1 + [4])
	if ( (*($7) <= [2]) ){ goto $label$21 }
	$1 = [1]
	
.LOOP $label$22:
	CALL $183(($4 + [120]), *($4 + [124]), ($4 + [168]))
	$1 = ($1 + [1])
	if ( ($1 <= *($7)) ){ goto $label$22 }
	
.LABEL $label$21
	$8 = CALL $184(($4 + [88]), ($4 + [120]))
	CALL $185(($4 + [224]), $8)
	CALL $131(($4 + [104]), ($4 + [224]), [1])
	$1 = *($4 + [224])
	if ( ($1 == 0) ){ goto $label$23 }
	*($4 + [228]) = $1
	CALL $10($1)
	
.LABEL $label$23
	CALL $132(($4 + [224]), ($4 + [104]))
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$24 }
	CALL $10(*($4 + [112]))
	
.LABEL $label$24
	$10 = *($8)
	if ( ($10 == 0) ){ goto $label$12 }
	$7 = *($8 + [4])
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$14 }
	
.LOOP $label$25:
	$1 = ($7 + [-12])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$26 }
	*(($7 + [-8])) = $3
	CALL $10($3)
	
.LABEL $label$26
	$7 = $1
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$25 }
	$1 = *($8)
	goto $label$13 
	
.LABEL $label$15
	*($4 + [48]) = [0]
	*($4 + [40]) = (int_64)0
	$7 = ($8 - $8)
	if ( $7 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$14
	$1 = $10
	
.LABEL $label$13
	*(($8 + [4])) = $10
	CALL $10($1)
	
.LABEL $label$12
	*($4 + [84]) = $2
	*($4 + [80]) = ($4 + [224])
	CALL $186(($4 + [72]), ($4 + [184]), $5, ($4 + [80]))
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$1 = *($4 + [224])
	if ( ($1 == 0) ){ goto $label$27 }
	*($4 + [228]) = $1
	CALL $10($1)
	
.LABEL $label$27
	$10 = *($4 + [120])
	if ( ($10 == 0) ){ goto $label$28 }
	$7 = *($4 + [124])
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$30 }
	
.LOOP $label$31:
	$1 = ($7 + [-12])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$32 }
	*(($7 + [-8])) = $3
	CALL $10($3)
	
.LABEL $label$32
	$7 = $1
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$31 }
	$1 = *($4 + [120])
	goto $label$29 
	
.LABEL $label$30
	$1 = $10
	
.LABEL $label$29
	*($4 + [124]) = $10
	CALL $10($1)
	
.LABEL $label$28
	$1 = *($4 + [168])
	if ( ($1 == 0) ){ goto $label$4 }
	*($4 + [172]) = $1
	CALL $10($1)
	goto $label$4 
	
.LABEL $label$11
	CALL $16(($4 + [224]))
	
.LABEL $label$10
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$8 }
	$10 = CALL $8($7)
	*(($4 + [48])) = ($10 + $7)
	*($4 + [40]) = $10
	*($4 + [44]) = $10
	$8 = *($4 + [224])
	$7 = (*($4 + [228]) - $8)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($10, $8, $7)
	*($4 + [44]) = (*($4 + [44]) + $7)
	
.LABEL $label$9
	CALL $158(($4 + [56]), ($4 + [40]))
	CALL $187(($4 + [168]), ($4 + [56]), (((int_32)*($1 + [16]) != (int_32)[0]) & $3))
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$33 }
	CALL $10(*($4 + [64]))
	
.LABEL $label$33
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$34 }
	*($4 + [44]) = $7
	CALL $10($7)
	
.LABEL $label$34
	*($4 + [120]) = [0]
	*($4 + [124 align=4]) = (int_64)0
	$8 = [0]
	$9 = [0]
	$7 = (*($4 + [168]) + ((int_32)*($2) * (int_32)[12]))
	$10 = (*($7 + [4]) - *($7))
	if ( ($10 == 0) ){ goto $label$36 }
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$7 }
	$2 = CALL $8($10)
	*(($4 + [128])) = ($2 + $10)
	*($4 + [120]) = $2
	*($4 + [124]) = $2
	$10 = *($7)
	$7 = (*(($7 + [4])) - $10)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$35 }
	CALL memcpy($2, $10, $7)
	$9 = (*($4 + [124]) + $7)
	*($4 + [124]) = $9
	$8 = *($4 + [120])
	
.LABEL $label$36
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$7 = ($9 - $8)
	if ( ($7 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$35
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$7 = ($2 - $2)
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	CALL $16(($4 + [40]))
	
.LABEL $label$7
	CALL $16(($4 + [120]))
	
.LABEL $label$6
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$10 = CALL $8($7)
	*(($4 + [16])) = ($10 + $7)
	*($4 + [8]) = $10
	*($4 + [12]) = $10
	$2 = *($4 + [120])
	$7 = (*($4 + [124]) - $2)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($10, $2, $7)
	*($4 + [12]) = (*($4 + [12]) + $7)
	
.LABEL $label$5
	CALL $158(($4 + [24]), ($4 + [8]))
	CALL $175($0, ($4 + [24]), (((int_32)*($1 + [17]) != (int_32)[0]) & $3))
	if ( ((*($4 + [24]) & [1]) == 0) ){ goto $label$37 }
	CALL $10(*($4 + [32]))
	
.LABEL $label$37
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$38 }
	*($4 + [12]) = $1
	CALL $10($1)
	
.LABEL $label$38
	$1 = *($4 + [120])
	if ( ($1 == 0) ){ goto $label$39 }
	*($4 + [124]) = $1
	CALL $10($1)
	
.LABEL $label$39
	$10 = *($4 + [168])
	if ( ($10 == 0) ){ goto $label$40 }
	$7 = *($4 + [172])
	if ( ((int_32)$7 == (int_32)$10) ){ goto $label$42 }
	
.LOOP $label$43:
	$1 = ($7 + [-12])
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$44 }
	*(($7 + [-8])) = $3
	CALL $10($3)
	
.LABEL $label$44
	$7 = $1
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$43 }
	$1 = *($4 + [168])
	goto $label$41 
	
.LABEL $label$42
	$1 = $10
	
.LABEL $label$41
	*($4 + [172]) = $10
	CALL $10($1)
	
.LABEL $label$40
	$1 = *($4 + [224])
	if ( ($1 == 0) ){ goto $label$4 }
	*($4 + [228]) = $1
	CALL $10($1)
	$10 = *($4 + [208])
	if ( $10 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$10 = *($4 + [208])
	if ( ($10 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($4 + [212])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$10) ){ goto $label$46 }
	
.LOOP $label$47:
	$1 = ($1 + [-24])
	$7 = *($1)
	*($1) = [0]
	if ( ($7 == 0) ){ goto $label$48 }
	$3 = *($7)
	if ( ($3 == 0) ){ goto $label$49 }
	*($7 + [4]) = $3
	CALL $10($3)
	
.LABEL $label$49
	CALL $10($7)
	
.LABEL $label$48
	if ( ((int_32)$10 != (int_32)$1) ){ goto $label$47 }
	$1 = *(($4 + [208]))
	goto $label$45 
	
.LABEL $label$46
	$1 = $10
	
.LABEL $label$45
	*($2) = $10
	CALL $10($1)
	
.LABEL $label$2
	$global$0 = ($4 + [240])
	return (unreachable)
	
.LABEL $label$1
	CALL $16(($4 + [8]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $170 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [4])
	$4 = ( *(($1 + [8])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-4] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [4])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $56($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	if ( ((int_32)($4 - $3) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [11673])
	
.LABEL $label$4
	CALL memcpy($3, $1, [4])
	*($2 + [4]) = ($3 + [4])
	CALL $164($2, $6)
	$global$0 = ($2 + [16])
}

void .FUNC $171 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [32])
	$global$0 = $6
	$0 = *($0 + [4])
	$7 = *($0 + [4])
	$8 = (*($0) + int_32($7 >> [1]))
	$9 = *($0)
	if ( (($7 & [1]) == 0) ){ goto $label$1 }
	$9 = *((*($8) + $9))
	
.LABEL $label$1
	$0 = CALL $41(($6 + [16]), $4)
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	$4 = (*($5 + [4]) - *($5))
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$7 = CALL $8($4)
	*(($6 + [8])) = ($7 + $4)
	*($6) = $7
	*($6 + [4]) = $7
	$4 = *($5)
	$5 = (*(($5 + [4])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $4, $5)
	*($6 + [4]) = (*($6 + [4]) + $5)
	
.LABEL $label$3
	CALL void $8((int_32 $1), (int_64 $2), (int_64 $3), (int_32 $0), (int_32 $6), (int_32 $9))
	$5 = *($6)
	if ( ($5 == 0) ){ goto $label$4 }
	*($6 + [4]) = $5
	CALL $10($5)
	
.LABEL $label$4
	if ( ((*($0) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*($0 + [8]))
	
.LABEL $label$5
	$global$0 = ($6 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $16($6)
}

void .FUNC $172 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11818])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11818])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11818])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11818])
	$6 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$0 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $178 (int_32 $0, int_32 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$4 = ($global$0 - [64])
	$global$0 = $4
	*($0 + [24 align=4]) = (int_64)0
	*($0 + [36]) = [0]
	*(($0 + [32])) = [0]
	$5 = *($1)
	$6 = *($1 + [4])
	*($4 + [56]) = [0]
	*($4 + [48]) = (int_64)0
	$7 = ($6 - $5)
	$8 = ($0 + [24])
	if ( ((int_32)$8 == (int_32)($4 + [48])) ){ goto $label$1 }
	CALL $169($8, [0], [0])
	
.LABEL $label$1
	*($0 + [4]) = $1
	*($0 + [8]) = $3
	*($0 + [16]) = $2
	*($0) = ($4 + [48])
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$2 }
	$1 = [0]
	$7 = $5
	
.LOOP $label$4:
	$9 = *($7)
	if ( ((uint_64)$9 > (uint_64)$2) ){ goto $label$5 }
	$10 = ($5 + $1)
	$11 = *(($10 + [8]))
	if ( ((uint_64)$11 >= (uint_64)$3) ){ goto $label$3 }
	
.LABEL $label$5
	$7 = (($5 + $1) + [52])
	$1 = ($1 + [52])
	if ( ((uint_32)$6 > (uint_32)($5 + $1)) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	$12 = ($7 - $5)
	if ( ($12 == 0) ){ goto $label$10 }
	if ( ((int_32)$12 <= (int_32)[-1]) ){ goto $label$9 }
	$13 = CALL $8($12)
	*(($4 + [40])) = ($13 + $12)
	*($4 + [32]) = $13
	*($4 + [36]) = $13
	if ( ($1 == 0) ){ goto $label$10 }
	$14 = $1
	$12 = $5
	
.LOOP $label$11:
	*($13) = *($12)
	$13 = (*($4 + [36]) + [1])
	*($4 + [36]) = $13
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	if ( $14 ){ goto $label$11 }
	
.LABEL $label$10
	*(($0 + [4])) = ($4 + [32])
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$12 }
	if ( ((int_64)$11 != (int_64)$3) ){ goto $label$12 }
	$12 = [0]
	*($4 + [24]) = [0]
	*($4 + [16]) = [0]
	*(($10 = CALL $8([36]))) = *($7 + [16])
	*($10 + [1]) = *($7 + [17])
	*($10 + [2]) = *($7 + [18])
	*($10 + [3]) = *($7 + [19])
	*($10 + [4]) = *($7 + [20])
	*($10 + [5]) = *($7 + [21])
	*($10 + [6]) = *($7 + [22])
	*($10 + [7]) = *($7 + [23])
	*($10 + [8]) = *($7 + [24])
	*($10 + [9]) = *($7 + [25])
	*($10 + [10]) = *($7 + [26])
	*($10 + [11]) = *($7 + [27])
	*($10 + [12]) = *($7 + [28])
	*($10 + [13]) = *($7 + [29])
	*($10 + [14]) = *($7 + [30])
	*($10 + [15]) = *($7 + [31])
	*($10 + [16]) = *($7 + [32])
	*($10 + [17]) = *($7 + [33])
	*($10 + [18]) = *($7 + [34])
	*($10 + [19]) = *($7 + [35])
	*($10 + [20]) = *($7 + [36])
	*($10 + [21]) = *($7 + [37])
	*($10 + [22]) = *($7 + [38])
	*($10 + [23]) = *($7 + [39])
	*($10 + [24]) = *($7 + [40])
	*($10 + [25]) = *($7 + [41])
	*($10 + [26]) = *($7 + [42])
	*($10 + [27]) = *($7 + [43])
	*($10 + [28]) = *($7 + [44])
	*($10 + [29]) = *($7 + [45])
	*($10 + [30]) = *($7 + [46])
	*($10 + [31]) = *($7 + [47])
	*($10 + [32]) = *($7 + [48])
	*($10 + [33]) = *($7 + [49])
	*($10 + [34]) = *($7 + [50])
	*($10 + [35]) = *($7 + [51])
	*($4 + [16]) = $10
	$7 = ($10 + [36])
	*($4 + [24]) = $7
	*($4 + [20]) = $7
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$7 = ($7 - *($4 + [16]))
	if ( ($7 == 0) ){ goto $label$13 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$7 }
	$12 = CALL $8($7)
	*(($4 + [8])) = ($12 + $7)
	*($4) = $12
	*($4 + [4]) = $12
	$10 = *($4 + [16])
	$7 = (*($4 + [20]) - $10)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($12, $10, $7)
	$12 = (*($4 + [4]) + $7)
	*($4 + [4]) = $12
	
.LABEL $label$13
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$14 }
	CALL $169($8, *($4), $12)
	
.LABEL $label$14
	*(($0 + [36])) = [1]
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$15 }
	*($4 + [4]) = $7
	CALL $10($7)
	
.LABEL $label$15
	$5 = ($5 + $1)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$16 }
	*($4 + [20]) = $1
	CALL $10($1)
	
.LABEL $label$16
	$10 = ($5 + [52])
	
.LABEL $label$12
	*($4 + [24]) = [0]
	*($4 + [16]) = (int_64)0
	$5 = ($6 - $10)
	if ( ($5 == 0) ){ goto $label$17 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$8 }
	$1 = CALL $8($5)
	*(($4 + [24])) = ($1 + $5)
	*($4 + [16]) = $1
	*($4 + [20]) = $1
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$18 }
	
.LOOP $label$19:
	*($1) = *($10)
	$1 = (*($4 + [20]) + [1])
	*($4 + [20]) = $1
	$10 = ($10 + [1])
	if ( ((int_32)$6 != (int_32)$10) ){ goto $label$19 }
	$1 = *($4 + [16])
	
.LABEL $label$18
	*($0) = ($4 + [16])
	if ( ($1 == 0) ){ goto $label$20 }
	*($4 + [20]) = $1
	CALL $10($1)
	
.LABEL $label$20
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$2 }
	goto $label$6 
	
.LABEL $label$17
	*($0) = ($4 + [16])
	$1 = *($4 + [32])
	if ( $1 ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$9
	CALL $16(($4 + [32]))
	
.LABEL $label$8
	CALL $16(($4 + [16]))
	
.LABEL $label$7
	CALL $16($4)
	
.LABEL $label$6
	*($4 + [36]) = $1
	CALL $10($1)
	
.LABEL $label$2
	$1 = *($4 + [48])
	if ( ($1 == 0) ){ goto $label$21 }
	*($4 + [52]) = $1
	CALL $10($1)
	
.LABEL $label$21
	$global$0 = ($4 + [64])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $4 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

int_32 .FUNC $5 ()
{
	return [8208]
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$3 = ($global$0 - [32])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*(($1 + [20])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12894])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12940])
	
.LABEL $label$2
	$5 = *($1 + [8])
	$2 = *($2)
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$3 }
	CALL eosio_assert([0], [13130])
	
.LABEL $label$3
	$6 = (int_64)
	*($1) = $6(*($1) - *($2)))
	if ( ((int_64)$6 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [13178])
	$6 = *($1)
	
.LABEL $label$4
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [13200])
	
.LABEL $label$5
	if ( ((int_64)$5 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [12991])
	
.LABEL $label$6
	$2 = $3
	$3 = ($2 + [-32])
	$global$0 = $3
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($2 + [-15])
	*($4 + [16]) = $4
	*($4 + [24]) = $1
	*($4 + [28]) = ($1 + [16])
	CALL $125(($4 + [24]), ($4 + [16]))
	CALL db_update_i64(*($1 + [24]), (int_64)0, $3, [17])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($4 + [32])
}

void .FUNC $3 (int_32 $0)
{
}

void .FUNC $189 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$1 }
	CALL $169($1, *($6), *($6 + [4]))
	
.LABEL $label$1
	*($1 + [16]) = *(*($5 + [4]) + [4])
	$7 = ($1 + [16])
	$8 = *($1)
	$5 = *($1 + [4])
	$6 = (($5 + [8]) - $8)
	$9 = (CASTING uint_64)(uint_32 ($5 - $8))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ($6 <= [513]) ){ goto $label$4 }
	$2 = CALL $2($6)
	goto $label$3 
	
.LABEL $label$4
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$3
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $6)
	CALL $147($3, $1)
	$5 = *($3 + [4])
	if ( ((int_32)(*($3 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11673])
	$5 = *($3 + [4])
	
.LABEL $label$5
	CALL memcpy($5, $7, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$9 = *(($1 + [16]))
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-2769561580919062528, *(*($0 + [8])), $9, $2, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$8 }
	if ( ((uint_64)$9 >= (uint_64)*($4 + [16])) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $3($2)
	if ( (uint_64)($9 <= *($4 + [16])) ){ goto $label$6 }
	
.LABEL $label$7
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$global$0 = ($3 + [16])
}

void .FUNC $188 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [12458])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL $8([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $192(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $193(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [12])) = $1
	CALL $10($1)
	
.LABEL $label$5
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

int_32 .FUNC $49 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$4 = *($0)
	$3 = (($4 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	if ( (([-17] - $3) <= ($1 - $3)) ){ goto $label$6 }
	if ( $5 ){ goto $label$8 }
	$6 = ($0 + [1])
	if ( ($3 <= [2147483623]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$8
	$6 = *($0 + [8])
	if ( ((uint_32)$3 >= (uint_32)[2147483623]) ){ goto $label$5 }
	
.LABEL $label$7
	$4 = ($3 << [1])
	$4 = ( $4 ? $1 : ((uint_32)$4 > (uint_32)$1) )
	$4 = ( [11] ? (($4 + [16]) & [-16]) : ($4 <= [11]) )
	$5 = CALL $8($4)
	if ( ((int_32)$3 == (int_32)[10]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	CALL abort()
	
.LABEL $label$5
	$4 = [-17]
	$5 = CALL $8([-17])
	
.LABEL $label$4
	CALL $10($6)
	
.LABEL $label$3
	*($0 + [8]) = $5
	$4 = ($4 | [1])
	*($0) = $4
	
.LABEL $label$2
	if ( ($4 & [1]) ){ goto $label$11 }
	$3 = ($0 + [1])
	if ( $1 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = *($0 + [8])
	if ( ($1 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL memset($3, ($2 & [255]), $1)
	
.LABEL $label$9
	*(($3 + $1)) = [0]
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($1 << [1])
	return $0
	
.LABEL $label$12
	*($0 + [4]) = $1
	(unreachable)
	return $0
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $43($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $0 ()
{
	CALL $4()
}

void .FUNC $43 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $10($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $43($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $40 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $45($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $1($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $43($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $10($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)8455373400698781696, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $152($6, $8)
	*($3 + [20]) = [0]
	*($3 + [16]) = $6
	$7 = *(*(CALL $168(($3 + [16])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [16])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [12509])
	$7 = *(($6 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	$6 = *($5 + [4])
	$8 = ($1 + [8])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$5 }
	CALL $169($8, *($6), *($6 + [4]))
	
.LABEL $label$5
	$9 = *($1 + [8])
	$5 = *(($1 + [12]))
	$6 = (($5 + [8]) - $9)
	$7 = (CASTING uint_64)(uint_32 ($5 - $9))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ($6 <= [513]) ){ goto $label$8 }
	$2 = CALL $2($6)
	goto $label$7 
	
.LABEL $label$8
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$7
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $6)
	$5 = $2
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [11673])
	$5 = *($3 + [4])
	
.LABEL $label$9
	CALL memcpy($5, $1, [8])
	*($3 + [4]) = ($5 + [8])
	CALL $147($3, $8)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($4 + [8]), (int_64)8455373400698781696, *(*($0 + [8])), $7, $2, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL $3($2)
	
.LABEL $label$10
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$11 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$7 = *(($4 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	CALL $153(($3 + [16]), $1)
	*($1 + [28]) = CALL db_idx256_store($7, (int_64)8455373400698781696, $10, $11, ($3 + [16]), [2])
	$global$0 = ($3 + [48])
}

void .FUNC $166 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [12458])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL $8([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $167(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $154(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [12])) = $1
	CALL $10($1)
	
.LABEL $label$5
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $165 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [4])
	$4 = ( *(($1 + [8])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-4] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [4])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $56($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	if ( ((int_32)($4 - $3) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [11673])
	
.LABEL $label$4
	CALL memcpy($3, $1, [4])
	*($2 + [4]) = ($3 + [4])
	CALL $164($2, $6)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11673])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [11673])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $163 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11673])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, $2, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11673])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [16])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11673])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [24])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11673])
	$4 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($4, $2, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	CALL $147(*($1), ($3 + [32]))
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1 + [4])
	$4 = ( *(($1 + [8])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ([-4] - $4)
	$5 = (CASTING uint_64)(uint_32 $4)
	$6 = ($1 + [4])
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	$4 = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $56($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	
.LABEL $label$2
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	if ( ((int_32)($4 - $3) > (int_32)[3]) ){ goto $label$4 }
	CALL eosio_assert([0], [11673])
	
.LABEL $label$4
	CALL memcpy($3, $1, [4])
	*($2 + [4]) = ($3 + [4])
	CALL $164($2, $6)
	$global$0 = ($2 + [16])
}

void .FUNC $161 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $8($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $16($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $10($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $160 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = *($0)
	$3 = *($0 + [8])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$4 }
	if ( ($4 == 0) ){ goto $label$5 }
	*($0 + [4]) = $4
	CALL $10($4)
	$3 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = [2147483647]
	if ( ((uint_32)$3 > (uint_32)[1073741822]) ){ goto $label$6 }
	$4 = ($3 << [1])
	$5 = ( $1 ? $4 : ($4 <= $1) )
	
.LABEL $label$6
	$4 = CALL $8($5)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $5)
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($4) = *($2)
	$4 = (*($0) + [1])
	*($0) = $4
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$4
	$3 = (*($0 + [4]) - $4)
	$5 = ( $3 ? $1 : ($3 <= $1) )
	if ( ($5 == 0) ){ goto $label$8 }
	CALL memset($4, *($2), $5)
	
.LABEL $label$8
	if ( ((uint_32)$3 >= (uint_32)$1) ){ goto $label$2 }
	$1 = ($3 - $1)
	$4 = ($0 + [4])
	$0 = *($4)
	
.LOOP $label$9:
	*($0) = *($2)
	$0 = (*($4) + [1])
	*($4) = $0
	$1 = ($1 + [1])
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = (*($0) + $1)
	return (unreachable)
	
.LABEL $label$1
	CALL $16($0)
}

void .FUNC $169 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ($2 - $1)
	if ( ((uint_32)$3 <= (uint_32)($4 - $5)) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $10($5)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = [2147483647]
	if ( ((uint_32)$4 > (uint_32)[1073741822]) ){ goto $label$6 }
	$5 = ($4 << [1])
	$2 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$6
	$5 = CALL $8($2)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $2)
	CALL memcpy($5, $1, $3)
	$1 = ($0 + [4])
	$0 = (*($0 + [4]) + $3)
	goto $label$3 
	
.LABEL $label$4
	$4 = (*($0 + [4]) - $5)
	$6 = ( ($1 + $4) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	$7 = ($6 - $1)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $7)
	
.LABEL $label$7
	$1 = ($0 + [4])
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$8 }
	$0 = ($2 - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy(*($1), $6, $0)
	$0 = (*($1) + $0)
	goto $label$3 
	
.LABEL $label$8
	$0 = ($5 + $7)
	
.LABEL $label$3
	*($1) = $0
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $16($0)
}

int_32 .FUNC $168 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [24]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12615])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)8455373400698781696)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [12561])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12561])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $152(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $175 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = CALL current_receiver()
	*(($3 + [136])) = [0]
	*($3 + [112]) = $4
	*($3 + [104]) = $4
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	*($3 + [140]) = [0]
	*($3 + [96]) = ($3 + [104])
	$5 = CALL $41(($3 + [32]), $1)
	CALL $148(($3 + [48]), $5)
	CALL $179(($3 + [88]), ($3 + [96]), ($3 + [48]))
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($5 + [8]))
	
.LABEL $label$1
	$5 = *($3 + [92])
	if ( ($5 == 0) ){ goto $label$4 }
	if ( $2 ){ goto $label$3 }
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$1 = (*(($5 + [12])) - *($5 + [8]))
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	$2 = CALL $8($1)
	*(($3 + [8])) = ($2 + $1)
	*($3) = $2
	*($3 + [4]) = $2
	$1 = *(($5 + [8]))
	$5 = (*(($5 + [12])) - $1)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $1, $5)
	*($3 + [4]) = (*($3 + [4]) + $5)
	
.LABEL $label$5
	CALL $180($3)
	$5 = *($3)
	if ( ($5 == 0) ){ goto $label$3 }
	*($3 + [4]) = $5
	CALL $10($5)
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $41(($3 + [16]), $1)
	CALL $181($5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$3 }
	CALL $10(*($5 + [8]))
	
.LABEL $label$3
	*($0 + [4 align=4]) = (int_64)0
	*($0) = [0]
	$5 = *($3 + [92])
	$1 = (*(($5 + [12])) - *($5 + [8]))
	if ( ($1 == 0) ){ goto $label$7 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$6 }
	$2 = CALL $8($1)
	*($0) = $2
	*(($0 + [8])) = ($2 + $1)
	*(($0 = ($0 + [4]))) = $2
	$1 = *(($5 + [8]))
	$5 = (*(($5 + [12])) - $1)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($2, $1, $5)
	*($0) = (*($0) + $5)
	
.LABEL $label$7
	$2 = *($3 + [128])
	if ( ($2 == 0) ){ goto $label$8 }
	$6 = ($3 + [132])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$12 }
	$1 = *($5 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	*(($5 + [12])) = $1
	CALL $10($1)
	
.LABEL $label$13
	CALL $10($5)
	
.LABEL $label$12
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($3 + [128]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $2
	
.LABEL $label$9
	*($6) = $2
	CALL $10($0)
	
.LABEL $label$8
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$6
	CALL $16($0)
	
.LABEL $label$2
	CALL $16($3)
	(unreachable)
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $147(CALL $146($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11673])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11673])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = [0]
	$4 = [0]
	$5 = (*($1 + [4]) - *($1))
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$1 }
	$3 = CALL $8($5)
	*(($2 + [8])) = ($3 + $5)
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *($1)
	$1 = (*(($1 + [4])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $4, $1)
	$4 = ($3 + $1)
	*($2 + [4]) = $4
	goto $label$2 
	
.LABEL $label$3
	$4 = $3
	
.LABEL $label$2
	$4 = ($4 - $3)
	$1 = CALL $2((($4 + [1]) - $3))
	CALL memcpy($1, $3, $4)
	*(($1 + $4)) = [0]
	$4 = CALL $2([32])
	$3 = *($2)
	CALL sha256($1, (*($2 + [4]) - $3), $4)
	$5 = CALL $2([32])
	CALL memcpy($5, $4, [32])
	$1 = CALL $8([32])
	*($0) = $1
	$4 = ($1 + [32])
	*($0 + [8]) = $4
	CALL memcpy($1, $5, [32])
	*($0 + [4]) = $4
	if ( ($3 == 0) ){ goto $label$4 }
	*($2 + [4]) = $3
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $16($2)
}

void .FUNC $50 (int_32 $0)
{
}

int_32 .FUNC $51 (int_32 $0)
{
	return [0]
}

int_32 .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = *($0 + [28])
	CALL prints_l($3, (*($0 + [20]) - $3))
	CALL prints_l($1, $2)
	return ((*($0 + [20]) + $2) - *($0 + [28]))
}

int_64 .FUNC $53 (int_32 $0, int_64 $1, int_32 $2)
{
	return (int_64)-1
}

int_32 .FUNC $54 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$5 }
	$1 = CALL $23($0)
	
.LABEL $label$5
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$6 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( (*(($0 + [20])) == 0) ){ goto $label$3 }
	
.LABEL $label$6
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$7 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$7
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($1 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	if ( (*([0] + [8232]) == 0) ){ goto $label$8 }
	$4 = CALL $54(*([0] + [8232]))
	
.LABEL $label$8
	$0 = *(CALL $21())
	if ( ($0 == 0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = [0]
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$11 }
	$1 = CALL $23($0)
	
.LABEL $label$11
	$3 = *($0 + [28])
	$2 = *($0 + [20])
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$12 }
	$5 = [0]
	if ( ((int_32)*(($0 + [76])) < (int_32)[0]) ){ goto $label$13 }
	$5 = CALL $23($0)
	$3 = *(($0 + [28]))
	$2 = *(($0 + [20]))
	
.LABEL $label$13
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$16 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	if ( *(($0 + [20])) ){ goto $label$16 }
	$2 = [-1]
	if ( $5 ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = *($0 + [8])
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$17 }
	CALL int_64 $0((int_32 (CASTING int_64)(int_32 ($2 - $3))), (int_64 [1]), (int_32 *($0 + [40])))
	
.LABEL $label$17
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*(($0 + [28])) = [0]
	*(($0 + [4])) = (int_64)0
	if ( ($5 == 0) ){ goto $label$14 }
	
.LABEL $label$15
	CALL $24($0)
	
.LABEL $label$14
	$4 = ($2 | $4)
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$18 }
	CALL $24($0)
	
.LABEL $label$18
	$0 = *($0 + [56])
	if ( $0 ){ goto $label$10 }
	
.LABEL $label$9
	CALL $22()
	return $4
	
.LABEL $label$3
	$2 = [-1]
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL $24($0)
	
.LABEL $label$1
	return $2
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = ($global$0 - [16])
	$global$0 = $4
	*($4 + [12]) = $2
	*($4 + [8]) = $3
	*($4 + [4]) = $1
	*($4) = $0
	CALL $39(*([0] + [11148]), [8279], $4)
	CALL $54([0])
	CALL abort()
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $16($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $56($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $58(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL $10($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $173 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11818])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11818])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$6 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert([0], [11818])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [7]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($6) = ((int_32)*($2 + [7]) != (int_32)[0])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11795])
	
.LABEL $label$5
	$4 = CALL $2($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $6)
	*(($5 = CALL $8([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	$8 = ($5 + [8])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11818])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $137(($3 + [32]), $8)
	*($5 + [28]) = [-1]
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $154(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $3($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [12])) = $4
	CALL $10($4)
	
.LABEL $label$12
	CALL $10($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $8($3)
	*(($2 + [8])) = ($4 + $3)
	*($2) = $4
	*($2 + [4]) = $4
	$3 = *(($1 + [8]))
	$1 = (*(($1 + [12])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $3, $1)
	*($2 + [4]) = ($4 + $1)
	
.LABEL $label$2
	CALL $155(($2 + [16]), $2)
	CALL $148($0, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $10(*($2 + [24]))
	
.LABEL $label$3
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL $10($1)
	
.LABEL $label$4
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $16($2)
}

int_32 .FUNC $150 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$3 }
	$3 = *($2 + [28])
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL eosio_assert([0], [12255])
	$2 = *(($0 + [4]))
	$3 = *($2 + [28])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	*(($1 + [24])) = (int_64)0
	*(($1 + [16])) = (int_64)0
	*($1 + [8]) = (int_64)0
	*($1) = (int_64)0
	$3 = *(*($0))
	$2 = CALL db_idx256_find_primary(*($3), *($3 + [8]), (int_64)8455373400698781696, $1, [2], *($2))
	*(($3 = *(($0 + [4]))) + [28]) = $2
	$3 = *($3 + [28])
	
.LABEL $label$1
	*($1) = (int_64)0
	$4 = [0]
	$5 = CALL db_idx256_next($3, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$6 = *($1)
	$3 = *(($7 + [28]))
	$7 = *(*($0))
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$8:
	$2 = ($3 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$7 }
	$3 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$6 }
	if ( ((int_32)*($4 + [20]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [11744])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL $152($7, CALL $fimport$30(*($7), *($7 + [8]), (int_64)8455373400698781696, $6))
	if ( ((int_32)*($4 + [20]) == (int_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [11744])
	
.LABEL $label$5
	*($4 + [28]) = $5
	
.LABEL $label$4
	*(($0 + [4])) = $4
	$global$0 = ($1 + [32])
	return $0
}

void .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12285])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12330])
	
.LABEL $label$2
	$4 = ($0 + [28])
	$5 = *($4)
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	$6 = $5
	$7 = *($1)
	if ( ((int_64)*(*(($5 + [-24]))) == (int_64)$7) ){ goto $label$9 }
	$8 = ($3 + [24])
	$9 = $5
	
.LOOP $label$10:
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	$10 = ($9 + [-48])
	$6 = ($9 + [-24])
	$9 = $6
	if ( ((int_64)*(*($10)) != (int_64)$7) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$7 }
	$10 = [-24]
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$6 = $3
	
.LABEL $label$7
	CALL eosio_assert([0], [12380])
	$10 = [-24]
	$5 = *($4)
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$3 = ($6 + $10)
	goto $label$4 
	
.LABEL $label$5
	$9 = $6
	
.LOOP $label$11:
	$8 = *($9)
	*($9) = [0]
	$3 = ($9 + $10)
	$6 = *($3)
	*($3) = $8
	if ( ($6 == 0) ){ goto $label$12 }
	$8 = *($6 + [8])
	if ( ($8 == 0) ){ goto $label$13 }
	*(($6 + [12])) = $8
	CALL $10($8)
	
.LABEL $label$13
	CALL $10($6)
	
.LABEL $label$12
	*(($9 + [-8])) = *(($9 + [16]))
	*(($9 + [-16])) = *(($9 + [8]))
	$9 = ($9 + [24])
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$11 }
	$3 = ($9 + [-24])
	$6 = *(($0 + [28]))
	if ( ((int_32)($6 + [24]) == (int_32)$9) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$6 = ($6 + $10)
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$15 }
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$16 }
	*(($9 + [12])) = $8
	CALL $10($8)
	
.LABEL $label$16
	CALL $10($9)
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $3
	CALL db_remove_i64(*($1 + [24]))
	$9 = *($1 + [28])
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$18 }
	*(($2 + [24])) = (int_64)0
	*(($2 + [16])) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	$9 = CALL db_idx256_find_primary(*($0), *($0 + [8]), (int_64)8455373400698781696, $2, [2], *($1))
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$17 }
	
.LABEL $label$18
	CALL db_idx256_remove($9)
	
.LABEL $label$17
	$global$0 = ($2 + [32])
}

void .FUNC $156 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $8($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $16($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $10($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ($2 - $3)
	$5 = ($4 + [1])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = [2147483647]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)$7 > (uint_32)[1073741822]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL $8($6)
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $16($0)
	
.LABEL $label$1
	*(($4 = ($5 + $4))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + $6)
	$5 = ($4 + [1])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $10($3)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $154 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $16($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL $10($2)
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $10($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $155 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [64])
	$global$0 = $2
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	$4 = CALL $8($3)
	*(($2 + [8])) = ($4 + $3)
	*($2) = $4
	*($2 + [4]) = $4
	$3 = *($1)
	$1 = (*(($1 + [4])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $3, $1)
	*($2 + [4]) = ($4 + $1)
	
.LABEL $label$3
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	*($2 + [48]) = [1]
	CALL $156(($2 + [16]), ($2 + [48]))
	*($2 + [48]) = [85]
	$1 = *($2 + [20])
	if ( ((uint_32)$1 >= (uint_32)*($2 + [24])) ){ goto $label$5 }
	*($1) = [85]
	$1 = (*($2 + [20]) + [1])
	*($2 + [20]) = $1
	goto $label$4 
	
.LABEL $label$5
	CALL $156(($2 + [16]), ($2 + [48]))
	$1 = *($2 + [20])
	
.LABEL $label$4
	*($2 + [48]) = [18]
	if ( ((uint_32)$1 >= (uint_32)*(($2 + [24]))) ){ goto $label$7 }
	*($1) = [18]
	$1 = (*($2 + [20]) + [1])
	*($2 + [20]) = $1
	goto $label$6 
	
.LABEL $label$7
	CALL $156(($2 + [16]), ($2 + [48]))
	$1 = *($2 + [20])
	
.LABEL $label$6
	*($2 + [48]) = [32]
	if ( ((uint_32)$1 >= (uint_32)*(($2 + [24]))) ){ goto $label$9 }
	*($1) = [32]
	*($2 + [20]) = (*($2 + [20]) + [1])
	goto $label$8 
	
.LABEL $label$9
	CALL $156(($2 + [16]), ($2 + [48]))
	
.LABEL $label$8
	*($2 + [40]) = [0]
	*($2 + [32]) = (int_64)0
	$1 = (*($2 + [4]) - *($2))
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$1 }
	$3 = CALL $8($1)
	*(($2 + [40])) = ($3 + $1)
	*($2 + [32]) = $3
	*($2 + [36]) = $3
	$4 = *($2)
	$1 = (*($2 + [4]) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($3, $4, $1)
	*($2 + [36]) = (*($2 + [36]) + $1)
	
.LABEL $label$10
	CALL $59(($2 + [48]), ($2 + [32]))
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$11 }
	*($2 + [36]) = $1
	CALL $10($1)
	
.LABEL $label$11
	$6 = *($2 + [52])
	$5 = *($2 + [48])
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$12 }
	$7 = ($2 + [24])
	$1 = $5
	
.LOOP $label$13:
	$3 = ($1 + [1])
	$4 = *($2 + [20])
	if ( ((int_32)$4 == (int_32)*($7)) ){ goto $label$14 }
	*($4) = *($1)
	*($2 + [20]) = (*($2 + [20]) + [1])
	$1 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	CALL $157(($2 + [16]), $1)
	$1 = $3
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$15 }
	*($2 + [52]) = $5
	CALL $10($5)
	
.LABEL $label$15
	CALL $158($0, ($2 + [16]))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$16 }
	*($2 + [20]) = $1
	CALL $10($1)
	
.LABEL $label$16
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$17 }
	*($2 + [4]) = $1
	CALL $10($1)
	
.LABEL $label$17
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$2
	CALL $16($2)
	
.LABEL $label$1
	CALL $16(($2 + [32]))
	(unreachable)
}

void .FUNC $158 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [80])
	$global$0 = $2
	*(($2 + [40])) = [0]
	*($2 + [32]) = (int_64)0
	$3 = CALL $1([11823])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$9 }
	*($2 + [32]) = ($3 << [1])
	$4 = (($2 + [32]) | [1])
	if ( $3 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $8($5)
	*($2 + [32]) = ($5 | [1])
	*($2 + [40]) = $4
	*($2 + [36]) = $3
	
.LABEL $label$8
	CALL memcpy($4, [11823], $3)
	
.LABEL $label$7
	$5 = [0]
	*(($4 + $3)) = [0]
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$4 = [0]
	$3 = (*($1 + [4]) - *($1))
	if ( ($3 == 0) ){ goto $label$10 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$5 }
	$5 = CALL $8($3)
	*(($2 + [24])) = ($5 + $3)
	*($2 + [16]) = $5
	*($2 + [20]) = $5
	$1 = *($1)
	$3 = (*(($1 + [4])) - $1)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($5, $1, $3)
	$4 = (*($2 + [20]) + $3)
	*($2 + [20]) = $4
	$5 = *($2 + [16])
	goto $label$10 
	
.LABEL $label$11
	$4 = $5
	
.LABEL $label$10
	$4 = CALL $2((($4 + [1]) - $5))
	$1 = *($2 + [20])
	$5 = *($2 + [16])
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$12 }
	$3 = $4
	
.LOOP $label$13:
	*($3) = *($5)
	$3 = ($3 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$13 }
	$5 = *($2 + [16])
	$1 = *($2 + [20])
	
.LABEL $label$12
	$3 = [0]
	*(($4 + ($1 - $5))) = [0]
	$5 = (*($2 + [20]) - *($2 + [16]))
	$6 = ($4 + $5)
	if ( ($5 == 0) ){ goto $label$15 }
	$7 = [0]
	
.LOOP $label$16:
	$8 = ($4 + $7)
	if ( *($8) ){ goto $label$14 }
	$7 = ($7 + [1])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$16 }
	$8 = $6
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	$8 = $4
	
.LABEL $label$14
	*($2 + [72]) = [0]
	*($2 + [64]) = (int_64)0
	$5 = ((int_32)($6 - $8) * (int_32)[138])
	$9 = ((int_32)$5 / (int_32)[100])
	$10 = ($9 + [1])
	if ( ($10 == 0) ){ goto $label$17 }
	if ( ((int_32)$5 <= (int_32)[-200]) ){ goto $label$4 }
	$3 = CALL $8($10)
	*(($2 + [72])) = ($3 + $10)
	*($2 + [64]) = $3
	*($2 + [68]) = $3
	$5 = ((int_32)$9 ^ (int_32)[-1])
	
.LOOP $label$18:
	*($3) = [0]
	$3 = (*($2 + [68]) + [1])
	*($2 + [68]) = $3
	$5 = ($5 + [1])
	if ( $5 ){ goto $label$18 }
	
.LABEL $label$17
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$19 }
	$11 = [0]
	$4 = *($8)
	if ( ([0] == 0) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$19
	$1 = [0]
	$12 = [10]
	goto $label$1 
	
.LABEL $label$6
	CALL $40(($2 + [32]))
	
.LABEL $label$5
	CALL $16(($2 + [16]))
	
.LABEL $label$4
	CALL $16(($2 + [64]))
	
.LABEL $label$3
	$12 = [3]
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	
.LABEL $label$1
	
.LOOP $label$20:
	goto $label$115 
	
.LABEL $label$116
	$3 = *($2 + [68])
	$4 = *($8)
	$11 = $1
	if ( $11 ){ goto $label$60 }
	$12 = [0]
	goto $label$20 
	
.LABEL $label$115
	$1 = [0]
	if ( ($4 == 0) ){ goto $label$59 }
	$12 = [3]
	goto $label$20 
	
.LABEL $label$114
	$1 = [0]
	$12 = [4]
	goto $label$20 
	
.LABEL $label$113
	if ( ((int_32)$3 == (int_32)*($2 + [64])) ){ goto $label$53 }
	$12 = [5]
	goto $label$20 
	
.LABEL $label$112
	$4 = ((int_32)$5 / (int_32)[58])
	$5 = ((*($3) << [8]) + $4)
	*(($3 = ($3 + [-1]))) = ($5 - ((int_32)$4 * (int_32)[58]))
	$1 = ($1 + [1])
	if ( ($1 <= $11) ){ goto $label$54 }
	$12 = [6]
	goto $label$20 
	
.LABEL $label$111
	if ( ((uint_32)($5 + [57]) > (uint_32)[114]) ){ goto $label$58 }
	goto $label$57 
	
.LABEL $label$110
	if ( $4 ){ goto $label$56 }
	$12 = [1]
	goto $label$20 
	
.LABEL $label$109
	$8 = ($8 + [1])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$55 }
	$12 = [9]
	goto $label$20 
	
.LABEL $label$108
	$3 = *($2 + [68])
	goto $label$52 
	
.LABEL $label$107
	$11 = *($2 + [64])
	$4 = ($11 + ($10 - $1))
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$51 }
	$12 = [11]
	goto $label$20 
	
.LABEL $label$106
	$5 = $4
	if ( *($4) ){ goto $label$50 }
	$12 = [50]
	goto $label$20 
	
.LABEL $label$105
	$5 = ($11 + (($9 + [2]) - $1))
	$12 = [51]
	goto $label$20 
	
.LABEL $label$104
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$21 }
	$12 = [52]
	goto $label$20 
	
.LABEL $label$103
	$1 = *($5)
	$4 = ($5 + [1])
	$5 = $4
	if ( ($1 == 0) ){ goto $label$22 }
	$12 = [53]
	goto $label$20 
	
.LABEL $label$102
	$5 = ($4 + [-1])
	$4 = $5
	goto $label$49 
	
.LABEL $label$101
	$5 = $3
	goto $label$48 
	
.LABEL $label$100
	$5 = $3
	$4 = $3
	$12 = [12]
	goto $label$20 
	
.LABEL $label$99
	*($2 + [56]) = [0]
	*($2 + [48]) = (int_64)0
	CALL $44(($2 + [48]), (($7 + $3) - $4))
	CALL $49(($2 + [48]), $7, [49])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$47 }
	$12 = [13]
	goto $label$20 
	
.LABEL $label$98
	$12 = [14]
	goto $label$20 
	
.LABEL $label$97
	CALL $47(($2 + [48]), *((*($5) + [11832])))
	$5 = ($5 + [1])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$46 }
	$12 = [15]
	goto $label$20 
	
.LABEL $label$96
	if ( ($11 == 0) ){ goto $label$45 }
	$12 = [16]
	goto $label$20 
	
.LABEL $label$95
	*($2 + [68]) = $11
	CALL $10($11)
	$12 = [17]
	goto $label$20 
	
.LABEL $label$94
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = [0]
	$3 = ($3 & [1])
	$3 = *($2 + [48])
	$5 = ( *($2 + [52]) ? uint_32($3 >> [1]) : $3 )
	if ( ($5 == 0) ){ goto $label$44 }
	$12 = [18]
	goto $label$20 
	
.LABEL $label$93
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$43 }
	$12 = [19]
	goto $label$20 
	
.LABEL $label$92
	$3 = ( *(($2 + [56])) ? (($2 + [48]) | [1]) : $3 )
	$1 = CALL $8($5)
	*(($2 + [72])) = ($1 + $5)
	*($2 + [64]) = $1
	*($2 + [68]) = $1
	$12 = [20]
	goto $label$20 
	
.LABEL $label$91
	*($1) = *($3)
	$1 = (*($2 + [68]) + [1])
	*($2 + [68]) = $1
	$3 = ($3 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$42 }
	$12 = [21]
	goto $label$20 
	
.LABEL $label$90
	$3 = (*($2 + [48]) & [1])
	$12 = [22]
	goto $label$20 
	
.LABEL $label$89
	if ( ($3 == 0) ){ goto $label$41 }
	$12 = [23]
	goto $label$20 
	
.LABEL $label$88
	CALL $10(*(($2 + [56])))
	$12 = [24]
	goto $label$20 
	
.LABEL $label$87
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$40 }
	$12 = [25]
	goto $label$20 
	
.LABEL $label$86
	*($2 + [20]) = $3
	CALL $10($3)
	$12 = [26]
	goto $label$20 
	
.LABEL $label$85
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$3 = *($2 + [64])
	$1 = *($2 + [68])
	$11 = ($1 - $3)
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$39 }
	$12 = [27]
	goto $label$20 
	
.LABEL $label$84
	if ( ((uint_32)$11 > (uint_32)[10]) ){ goto $label$38 }
	$12 = [47]
	goto $label$20 
	
.LABEL $label$83
	*($2 + [48]) = ($11 << [1])
	$4 = (($2 + [48]) | [1])
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$35 }
	goto $label$36 
	
.LABEL $label$82
	$5 = (($11 + [16]) & [-16])
	$4 = CALL $8($5)
	*($2 + [48]) = ($5 | [1])
	*($2 + [56]) = $4
	*($2 + [52]) = $11
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$37 }
	$12 = [29]
	goto $label$20 
	
.LABEL $label$81
	$5 = $4
	$12 = [30]
	goto $label$20 
	
.LABEL $label$80
	*($5) = *($3)
	$5 = ($5 + [1])
	$3 = ($3 + [1])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$34 }
	$12 = [31]
	goto $label$20 
	
.LABEL $label$79
	$4 = ($4 + $11)
	$12 = [32]
	goto $label$20 
	
.LABEL $label$78
	*($4) = [0]
	CALL $159($2, ($2 + [32]), ($2 + [48]))
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	$1 = ( *($2 + [8]) ? ($2 | [1]) : (*($2) & [1]) )
	$3 = CALL $1($1)
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$33 }
	$12 = [33]
	goto $label$20 
	
.LABEL $label$77
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$32 }
	$12 = [45]
	goto $label$20 
	
.LABEL $label$76
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$30 }
	goto $label$31 
	
.LABEL $label$75
	$4 = (($3 + [16]) & [-16])
	$5 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	$12 = [35]
	goto $label$20 
	
.LABEL $label$74
	CALL memcpy($5, $1, $3)
	$12 = [36]
	goto $label$20 
	
.LABEL $label$73
	*(($5 + $3)) = [0]
	if ( (*($2) & [1]) ){ goto $label$29 }
	$12 = [44]
	goto $label$20 
	
.LABEL $label$72
	if ( (*($2 + [48]) & [1]) ){ goto $label$28 }
	$12 = [43]
	goto $label$20 
	
.LABEL $label$71
	$3 = *($2 + [64])
	if ( ($3 == 0) ){ goto $label$26 }
	$12 = [39]
	goto $label$20 
	
.LABEL $label$70
	*($2 + [68]) = $3
	CALL $10($3)
	$12 = [40]
	goto $label$20 
	
.LABEL $label$69
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$23 }
	$12 = [41]
	goto $label$20 
	
.LABEL $label$68
	CALL $10(*($2 + [40]))
	$12 = [42]
	goto $label$20 
	
.LABEL $label$67
	$global$0 = ($2 + [80])
	return (unreachable)
	
.LABEL $label$66
	CALL $10(*(($2 + [8])))
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$27 }
	$12 = [38]
	goto $label$20 
	
.LABEL $label$65
	CALL $10(*($2 + [56]))
	$3 = *($2 + [64])
	if ( $3 ){ goto $label$24 }
	goto $label$25 
	
.LABEL $label$64
	CALL $55([11891], [11902], [107], [11913])
	
.LABEL $label$63
	CALL $40(($2 + [48]))
	
.LABEL $label$62
	CALL $40($0)
	
.LABEL $label$61
	CALL $16(($2 + [64]))
	
.LABEL $label$60
	$12 = [3]
	goto $label$20 
	
.LABEL $label$59
	$12 = [1]
	goto $label$20 
	
.LABEL $label$58
	$12 = [4]
	goto $label$20 
	
.LABEL $label$57
	$12 = [1]
	goto $label$20 
	
.LABEL $label$56
	$12 = [8]
	goto $label$20 
	
.LABEL $label$55
	$12 = [2]
	goto $label$20 
	
.LABEL $label$54
	$12 = [4]
	goto $label$20 
	
.LABEL $label$53
	$12 = [7]
	goto $label$20 
	
.LABEL $label$52
	$12 = [10]
	goto $label$20 
	
.LABEL $label$51
	$12 = [55]
	goto $label$20 
	
.LABEL $label$50
	$12 = [12]
	goto $label$20 
	
.LABEL $label$49
	$12 = [12]
	goto $label$20 
	
.LABEL $label$48
	$12 = [12]
	goto $label$20 
	
.LABEL $label$47
	$12 = [15]
	goto $label$20 
	
.LABEL $label$46
	$12 = [14]
	goto $label$20 
	
.LABEL $label$45
	$12 = [17]
	goto $label$20 
	
.LABEL $label$44
	$12 = [22]
	goto $label$20 
	
.LABEL $label$43
	$12 = [49]
	goto $label$20 
	
.LABEL $label$42
	$12 = [20]
	goto $label$20 
	
.LABEL $label$41
	$12 = [24]
	goto $label$20 
	
.LABEL $label$40
	$12 = [26]
	goto $label$20 
	
.LABEL $label$39
	$12 = [48]
	goto $label$20 
	
.LABEL $label$38
	$12 = [28]
	goto $label$20 
	
.LABEL $label$37
	$12 = [32]
	goto $label$20 
	
.LABEL $label$36
	$12 = [32]
	goto $label$20 
	
.LABEL $label$35
	$12 = [29]
	goto $label$20 
	
.LABEL $label$34
	$12 = [30]
	goto $label$20 
	
.LABEL $label$33
	$12 = [46]
	goto $label$20 
	
.LABEL $label$32
	$12 = [34]
	goto $label$20 
	
.LABEL $label$31
	$12 = [36]
	goto $label$20 
	
.LABEL $label$30
	$12 = [35]
	goto $label$20 
	
.LABEL $label$29
	$12 = [37]
	goto $label$20 
	
.LABEL $label$28
	$12 = [38]
	goto $label$20 
	
.LABEL $label$27
	$12 = [43]
	goto $label$20 
	
.LABEL $label$26
	$12 = [40]
	goto $label$20 
	
.LABEL $label$25
	$12 = [40]
	goto $label$20 
	
.LABEL $label$24
	$12 = [39]
	goto $label$20 
	
.LABEL $label$23
	$12 = [42]
	goto $label$20 
	
.LABEL $label$22
	$12 = [51]
	goto $label$20 
	
.LABEL $label$21
	$12 = [54]
	goto $label$20 
	(unreachable)
	(unreachable)
	(unreachable)
	$12
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $159 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = ($3 & [1])
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : $5 )
	$3 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$6 = ($4 + $3)
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$6 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$6 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($6 + [16]) & [-16])
	$6 = CALL $8($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $6
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($6, ( $7 ? ($1 + [1]) : $5 ), $3)
	
.LABEL $label$2
	*(($6 + $3)) = [0]
	CALL $48($0, ( *($2 + [8]) ? ($2 + [1]) : (*($2) & [1]) ), $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $40($0)
}

void .FUNC $179 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$5 = [0]
	$6 = *($1)
	$7 = CALL db_idx256_lowerbound(*($6), *($6 + [8]), (int_64)8455373400698781696, $3, [2], ($3 + [40]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = *($3 + [40])
	$11 = *(($9 + [28]))
	$9 = *($1)
	$10 = *($9 + [24])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($11 + [-24])
	$5 = *($6)
	if ( ((int_64)*($5) == (int_64)$8) ){ goto $label$4 }
	$11 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$3 }
	if ( ((int_32)*($5 + [20]) == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert([0], [11744])
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	$6 = CALL db_find_i64(*($9), *($9 + [8]), (int_64)8455373400698781696, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $195($9, $6)
	if ( ((int_32)*($5 + [20]) == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert([0], [11744])
	
.LABEL $label$2
	*($5 + [28]) = $7
	
.LABEL $label$1
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $196($3, $5)
	if ( ((int_64)(((int_64)((int_64)*($2) ^ (int_64)*($3)) | (int_64)((int_64)*(($2 + [8])) ^ (int_64)*($3 + [8]))) == 0) == 0) ){ goto $label$6 }
	$4 = ( $5 ? [0] : (int_64)(((int_64)((int_64)*($2 + [16]) ^ (int_64)*($3 + [16])) | (int_64)((int_64)*(($2 + [24])) ^ (int_64)*(($3 + [24])))) == 0) )
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

int_32 .FUNC $183 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = *($0 + [8])
	$3 = *($0 + [4])
	if ( ((uint_32)$3 >= (uint_32)$4) ){ goto $label$9 }
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	$5 = ($3 - ($1 + [12]))
	$6 = ((int_32)$5 / (int_32)[12])
	$7 = ($1 + ((int_32)$6 * (int_32)[12]))
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$10 }
	$8 = ($0 + [4])
	$4 = $3
	$9 = $7
	
.LOOP $label$11:
	*($4) = (int_64)0
	*($4 + [8]) = [0]
	*($4) = *($9)
	$10 = ($9 + [8])
	*($4 + [8]) = *($10)
	*($10) = [0]
	*($9) = (int_64)0
	$4 = (*($8) + [12])
	*($8) = $4
	$9 = ($9 + [12])
	if ( ($9 <= $3) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$12 }
	$11 = ((int_32)$6 * (int_32)[-12])
	$4 = [0]
	$9 = $3
	
.LOOP $label$13:
	$8 = ($3 + $4)
	$10 = ($8 + [-12])
	$5 = *($10)
	if ( ($5 == 0) ){ goto $label$15 }
	*(($8 = ($8 + [-8]))) = $5
	CALL $10($5)
	*($10) = [0]
	*($8) = (int_64)0
	$6 = ($9 + [-4])
	$12 = ($9 + [-8])
	goto $label$14 
	
.LABEL $label$15
	$6 = ($8 + [-4])
	$12 = ($8 + [-8])
	
.LABEL $label$14
	$9 = ($9 + [-12])
	$8 = ($7 + $4)
	$5 = ($8 + [-12])
	*($10) = *($5)
	*($12) = *(($8 + [-8]))
	$8 = ($8 + [-4])
	*($6) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$4 = ($4 + [-12])
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((uint_32)$1 > (uint_32)$2) ){ goto $label$16 }
	$2 = ( ($2 + [12]) ? $2 : ((uint_32)*(($0 + [4])) > (uint_32)$2) )
	
.LABEL $label$16
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$5 }
	CALL $169($1, *($2), *($2 + [4]))
	return $1
	
.LABEL $label$9
	$9 = *($0)
	$8 = (((int_32)($3 - $9) / (int_32)[12]) + [1])
	if ( ((uint_32)$8 >= (uint_32)[357913942]) ){ goto $label$4 }
	$4 = ((int_32)($4 - $9) / (int_32)[12])
	if ( ((uint_32)$4 >= (uint_32)[178956970]) ){ goto $label$19 }
	$9 = ((int_32)($1 - $9) / (int_32)[12])
	$4 = ($4 << [1])
	$4 = ( $8 ? $4 : ($4 <= $8) )
	if ( $4 ){ goto $label$18 }
	$4 = [0]
	$8 = [0]
	goto $label$17 
	
.LABEL $label$19
	$9 = ((int_32)($1 - $9) / (int_32)[12])
	$4 = [357913941]
	
.LABEL $label$18
	$8 = CALL $8(((int_32)$4 * (int_32)[12]))
	
.LABEL $label$17
	$6 = ($8 + ((int_32)$4 * (int_32)[12]))
	$10 = ((int_32)$9 * (int_32)[12])
	$5 = ($8 + $10)
	if ( ((int_32)$9 != (int_32)$4) ){ goto $label$6 }
	$4 = ((int_32)$10 / (int_32)[12])
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$7 }
	$5 = ($5 + ((int_32)((int_32)($4 + [1]) / (int_32)[-2]) * (int_32)[12]))
	goto $label$6 
	
.LABEL $label$8
	*($1) = (int_64)0
	*($1 + [8]) = [0]
	$4 = (*($2 + [4]) - *($2))
	if ( ($4 == 0) ){ goto $label$20 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$9 = CALL $8($4)
	*(($8 = ($1 + [4]))) = $9
	*(($1 + [8])) = ($9 + $4)
	*($1) = $9
	$10 = *($2)
	$4 = (*(($2 + [4])) - $10)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($9, $10, $4)
	*($8) = (*($8) + $4)
	
.LABEL $label$20
	*(($4 = ($0 + [4]))) = (*($4) + [12])
	return $1
	
.LABEL $label$7
	$4 = ( ($4 << [1]) ? [1] : $10 )
	if ( ($4 == 0) ){ goto $label$22 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$1 }
	$9 = CALL $8(((int_32)$4 * (int_32)[12]))
	goto $label$21 
	
.LABEL $label$22
	$9 = [0]
	
.LABEL $label$21
	$6 = ($9 + ((int_32)$4 * (int_32)[12]))
	$5 = ($9 + ((int_32)uint_32($4 >> [2]) * (int_32)[12]))
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $10($8)
	
.LABEL $label$6
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	$4 = (*($2 + [4]) - *($2))
	if ( ($4 == 0) ){ goto $label$23 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$9 = CALL $8($4)
	*($5) = $9
	*(($8 = ($5 + [4]))) = $9
	*(($5 + [8])) = ($9 + $4)
	$10 = *($2)
	$4 = (*(($2 + [4])) - $10)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$23 }
	CALL memcpy($9, $10, $4)
	*($8) = (*($8) + $4)
	
.LABEL $label$23
	$3 = *($0)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$25 }
	$8 = $5
	$10 = $1
	
.LOOP $label$26:
	*(($9 = ($8 + [-12]))) = (int_64)0
	*(($8 = ($8 + [-4]))) = [0]
	$4 = ($10 + [-12])
	*($9) = *($4)
	$10 = ($10 + [-4])
	*($8) = *($10)
	*($10) = [0]
	*($4) = (int_64)0
	$8 = $9
	$10 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$25
	$9 = $5
	
.LABEL $label$24
	$4 = ($5 + [12])
	$3 = *(($0 + [4]))
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$27 }
	
.LOOP $label$28:
	*($4) = (int_64)0
	*(($8 = ($4 + [8]))) = [0]
	*($4) = *($1)
	$10 = ($1 + [8])
	*($8) = *($10)
	*($10) = [0]
	*($1) = (int_64)0
	$4 = ($4 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$28 }
	$1 = *(($0 + [4]))
	
.LABEL $label$27
	*(($0 + [4])) = $4
	$8 = *($0)
	*($0) = $9
	*(($0 + [8])) = $6
	if ( ((int_32)$1 == (int_32)$8) ){ goto $label$29 }
	
.LOOP $label$30:
	$4 = ($1 + [-12])
	$9 = *($4)
	if ( ($9 == 0) ){ goto $label$31 }
	*(($1 + [-8])) = $9
	CALL $10($9)
	
.LABEL $label$31
	$1 = $4
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$30 }
	
.LABEL $label$29
	if ( ($8 == 0) ){ goto $label$32 }
	CALL $10($8)
	
.LABEL $label$32
	$1 = $5
	
.LABEL $label$5
	return $1
	
.LABEL $label$4
	CALL $16($0)
	
.LABEL $label$3
	CALL $16($5)
	
.LABEL $label$2
	CALL $16($1)
	
.LABEL $label$1
	CALL abort()
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $69 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $114(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $115(($4 + [144]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $3($2)
	
.LABEL $label$4
	$2 = *(($4 + [104]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [108])) = $2
	CALL $10($2)
	
.LABEL $label$5
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*(($4 + [100])))
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $68 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$6 = ($global$0 - [80])
	$global$0 = $6
	$7 = CALL $41(($6 + [48]), $4)
	*($6 + [40]) = [0]
	*($6 + [32]) = (int_64)0
	$8 = (*($5 + [4]) - *($5))
	if ( ($8 == 0) ){ goto $label$5 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$4 }
	$9 = CALL $8($8)
	*(($6 + [40])) = ($9 + $8)
	*($6 + [32]) = $9
	*($6 + [36]) = $9
	$8 = *($5)
	$5 = (*(($5 + [4])) - $8)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($9, $8, $5)
	*($6 + [36]) = (*($6 + [36]) + $5)
	
.LABEL $label$5
	CALL $116($0, $3, $7, ($6 + [32]), $1)
	$5 = *($6 + [32])
	if ( ($5 == 0) ){ goto $label$6 }
	*($6 + [36]) = $5
	CALL $10($5)
	
.LABEL $label$6
	if ( ((*($7) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*($7 + [8]))
	
.LABEL $label$7
	$5 = CALL $41($6, $4)
	*((($6 + [16]) + [12])) = [0]
	*($6 + [20 align=4]) = (int_64)0
	*($6 + [16]) = $3
	$7 = (($6 + [16]) | [4])
	CALL $42($7, $5)
	*($6 + [64]) = *($6 + [16])
	$7 = CALL $41((($6 + [64]) | [4]), $7)
	CALL $117((int_64)8455380941646468112, $1, $2, ($6 + [64]))
	if ( (*($7) & [1]) ){ goto $label$9 }
	$7 = [1]
	if ( (*($6 + [20]) & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	CALL $10(*((($6 + [64]) + [12])))
	$7 = [1]
	if ( ((*($6 + [20]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $10(*(($6 + [28])))
	if ( ((*($5) & $7) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $16(($6 + [32]))
	
.LABEL $label$3
	if ( (*($5) & $7) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$1
	CALL $10(*($5 + [8]))
	$global$0 = ($6 + [80])
	(unreachable)
}

void .FUNC $65 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [112])
	$global$0 = $5
	$6 = *($3 + [8])
	*(($5 + [104])) = [0]
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [80]) = $7)
	*($5 + [88]) = (int_64)-1
	*($5 + [96]) = (int_64)0
	*($5 + [72]) = *($0)
	$8 = CALL $97(($5 + [72]), $7, [11319])
	CALL require_auth(*($8 + [32]))
	CALL require_recipient($1)
	CALL require_recipient($2)
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$10 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $11
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $11
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $12 ){ goto $label$5 }
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [11167])
	
.LABEL $label$1
	if ( ((int_64)$9 <= (int_64)0) ){ goto $label$8 }
	if ( ((int_64)$6 == (int_64)*($8 + [8])) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [11370])
	if ( ((int_64)$6 == (int_64)*($8 + [8])) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [10888])
	
.LABEL $label$6
	$10 = ($3 + [8])
	$11 = *($10)
	*((($5 + [56]) + [8])) = $11
	$7 = *($3)
	*((($5 + [24]) + [8])) = $11
	*($5 + [56]) = $7
	*($5 + [24]) = $7
	CALL $103($0, $1, ($5 + [24]))
	$11 = *($10)
	*((($5 + [40]) + [8])) = $11
	$7 = *($3)
	*((($5 + [8]) + [8])) = $11
	*($5 + [8]) = $7
	*($5 + [40]) = $7
	CALL $107($0, $2, ($5 + [8]), $1)
	$13 = *($5 + [96])
	if ( ($13 == 0) ){ goto $label$9 }
	$3 = ($5 + [100])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$11 }
	
.LOOP $label$12:
	$10 = ($10 + [-24])
	$12 = *($10)
	*($10) = [0]
	if ( ($12 == 0) ){ goto $label$13 }
	CALL $10($12)
	
.LABEL $label$13
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$12 }
	$10 = *(($5 + [96]))
	goto $label$10 
	
.LABEL $label$11
	$10 = $13
	
.LABEL $label$10
	*($3) = $13
	CALL $10($10)
	
.LABEL $label$9
	$global$0 = ($5 + [112])
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$3 = CALL $2($2)
	goto $label$2 
	
.LABEL $label$4
	$3 = [0]
	goto $label$1 
	
.LABEL $label$3
	$3 = ($3 - (($2 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$2
	CALL read_action_data($3, $2)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $3
	*($4 + [56]) = $3
	*($4 + [64]) = ($3 + $2)
	*($4 + [128]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $108(($4 + [24]), ($4 + [128]))
	*(($5 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [112]) + [8]))) = *($5)
	*($4 + [112]) = *($4 + [8])
	$5 = *($6)
	*((($4 + [128]) + [8])) = $5
	*((($4 + [24]) + [24])) = $5
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [112])
	*($4 + [40]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [24])
	CALL $109(($4 + [128]), ($4 + [72]))
	if ( ((uint_32)$2 >= (uint_32)[513]) ){ goto $label$7 }
	$3 = [1]
	if ( (*($4 + [92]) & [1]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $3($3)
	$3 = [1]
	if ( ((*($4 + [92]) & [1]) == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $10(*(($4 + [100])))
	$global$0 = ($4 + [144])
	return $3
	
.LABEL $label$5
	$global$0 = ($4 + [144])
	return $3
}

void .FUNC $67 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [144])
	$global$0 = $5
	if ( ((int_64)$1 != (int_64)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [11269])
	
.LABEL $label$1
	CALL require_auth($1)
	if ( CALL is_account($2) ){ goto $label$2 }
	CALL eosio_assert([0], [11293])
	
.LABEL $label$2
	$6 = *($3 + [8])
	*(($5 + [136])) = [0]
	$7 = (uint_64)$6 >> (uint_64)(int_64)8
	*($5 + [112]) = $7)
	*($5 + [120]) = (int_64)-1
	*($5 + [128]) = (int_64)0
	*($5 + [104]) = *($0)
	$8 = CALL $97(($5 + [104]), $7, [11319])
	CALL require_recipient($1)
	CALL require_recipient($2)
	$9 = *($3)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$4 }
	$10 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$11 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$7 = $11
	$12 = $10
	$10 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$6
	$7 = $11
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$12 = ((int_32)$10 < (int_32)[6])
	$13 = ($10 + [1])
	$10 = $13
	if ( $12 ){ goto $label$7 }
	$10 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[6]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert([0], [11167])
	
.LABEL $label$3
	if ( ((int_64)$9 <= (int_64)0) ){ goto $label$12 }
	if ( ((int_64)$6 != (int_64)*($8 + [8])) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL eosio_assert([0], [11338])
	if ( ((int_64)$6 == (int_64)*($8 + [8])) ){ goto $label$10 }
	
.LABEL $label$11
	CALL eosio_assert([0], [10888])
	if ( (*($4) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((*($4) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	if ( (*($4 + [4]) <= [257]) ){ goto $label$8 }
	CALL eosio_assert([0], [10965])
	
.LABEL $label$8
	$10 = ($3 + [8])
	$11 = *($10)
	*((($5 + [88]) + [8])) = $11
	$7 = *($3)
	*((($5 + [40]) + [8])) = $11
	*($5 + [88]) = $7
	*($5 + [40]) = $7
	CALL $103($0, $1, ($5 + [40]))
	$11 = *($10)
	*((($5 + [72]) + [8])) = $11
	$7 = *($3)
	*((($5 + [24]) + [8])) = $11
	*($5 + [24]) = $7
	*($5 + [72]) = $7
	CALL $94($0, $2, ($5 + [24]), $1)
	if ( ((int_64)*($0) != (int_64)$2) ){ goto $label$13 }
	$2 = *($10)
	*((($5 + [56]) + [8])) = $2
	$7 = *($3)
	*((($5 + [8]) + [8])) = $2
	*($5 + [56]) = $7
	*($5 + [8]) = $7
	CALL $104($0, $1, ($5 + [8]))
	
.LABEL $label$13
	$13 = *($5 + [128])
	if ( ($13 == 0) ){ goto $label$14 }
	$3 = ($5 + [132])
	$10 = *($3)
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$16 }
	
.LOOP $label$17:
	$10 = ($10 + [-24])
	$12 = *($10)
	*($10) = [0]
	if ( ($12 == 0) ){ goto $label$18 }
	CALL $10($12)
	
.LABEL $label$18
	if ( ((int_32)$13 != (int_32)$10) ){ goto $label$17 }
	$10 = *(($5 + [128]))
	goto $label$15 
	
.LABEL $label$16
	$10 = $13
	
.LABEL $label$15
	*($3) = $13
	CALL $10($10)
	
.LABEL $label$14
	$global$0 = ($5 + [144])
}

int_32 .FUNC $66 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [72]) + [24])) = (int_64)0
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $101(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $102(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [104]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $3($2)
	$2 = [1]
	if ( ((*($4 + [104]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*(($4 + [112])))
	$global$0 = ($4 + [160])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return $2
}

int_64 .FUNC $61 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$2 = [0]
	$3 = [0]
	$4 = (*($0 + [4]) - *($0))
	if ( ($4 == 0) ){ goto $label$2 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = CALL $8($4)
	*(($1 + [8])) = ($2 + $4)
	*($1) = $2
	*($1 + [4]) = $2
	$3 = *($0)
	$0 = (*(($0 + [4])) - $3)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($2, $3, $0)
	$3 = ($2 + $0)
	*($1 + [4]) = $3
	goto $label$2 
	
.LABEL $label$3
	$3 = $2
	
.LABEL $label$2
	$3 = ($3 - $2)
	$0 = CALL $2((($3 + [1]) - $2))
	CALL memcpy($0, $2, $3)
	*(($0 + $3)) = [0]
	$3 = CALL $2([32])
	$2 = *($1)
	CALL sha256($0, (*($1 + [4]) - $2), $3)
	$0 = CALL $2([32])
	CALL memcpy($0, $3, [32])
	$5 = *($0 + [24])
	if ( ($2 == 0) ){ goto $label$4 }
	*($1 + [4]) = $2
	CALL $10($2)
	
.LABEL $label$4
	$global$0 = ($1 + [16])
	return $5
	
.LABEL $label$1
	CALL $16($1)
	return (unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1 + [8])
	$4 = *($1 + [4])
	$5 = *($1)
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	$6 = CALL $1([11679])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = ($5 & [1])
	$4 = ( $4 ? uint_32($5 >> [1]) : $7 )
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$4 }
	*($2) = ($6 << [1])
	$8 = ($2 | [1])
	if ( $6 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($6 + [16]) & [-16])
	$8 = CALL $8($5)
	*($2) = ($5 | [1])
	*($2 + [8]) = $8
	*($2 + [4]) = $6
	
.LABEL $label$3
	CALL memcpy($8, [11679], $6)
	
.LABEL $label$2
	$5 = [0]
	*(($8 + $6)) = [0]
	$8 = CALL $2([3])
	$9 = CALL $2([4])
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	if ( ($4 == 0) ){ goto $label$5 }
	$6 = ( $3 ? ($1 + [1]) : $7 )
	$1 = ($2 | [1])
	$3 = ($2 + [8])
	
.LOOP $label$7:
	*(($8 + $5)) = *($6)
	$4 = ($4 + [-1])
	$5 = ($5 + [1])
	if ( ((int_32)$5 == (int_32)[3]) ){ goto $label$8 }
	$6 = ($6 + [1])
	if ( $4 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = uint_32(*($8) >> [2])
	*($9) = $5
	$10 = ($8 + [1])
	*(($7 = ($9 + [1]))) = (((*($8) << [4]) & [48]) | uint_32(*($10) >> [4]))
	$10 = ($8 + [2])
	*(($11 = ($9 + [2]))) = (((*($10) << [2]) & [60]) | uint_32(*($10) >> [6]))
	*(($12 = ($9 + [3]))) = (*($10) & [63])
	CALL $47($0, *((( *($3) ? $1 : (*($2) & [1]) ) + $5)))
	CALL $47($0, *((( *($3) ? $1 : (*($2) & [1]) ) + *($7))))
	CALL $47($0, *((( *($3) ? $1 : (*($2) & [1]) ) + *($11))))
	CALL $47($0, *((( *($3) ? $1 : (*($2) & [1]) ) + *($12))))
	$5 = [0]
	$6 = ($6 + [1])
	if ( $4 ){ goto $label$7 }
	
.LABEL $label$6
	if ( ($5 == 0) ){ goto $label$5 }
	if ( ((int_32)$5 > (int_32)[2]) ){ goto $label$9 }
	$4 = $5
	
.LOOP $label$10:
	*(($8 + $4)) = [0]
	$6 = ((int_32)$4 < (int_32)[2])
	$4 = ($4 + [1])
	if ( $6 ){ goto $label$10 }
	
.LABEL $label$9
	$3 = uint_32(*($8) >> [2])
	*($9) = $3
	$6 = ($8 + [1])
	*(($4 = ($9 + [1]))) = (((*($8) << [4]) & [48]) | uint_32(*($6) >> [4]))
	$6 = ($8 + [2])
	*(($9 + [2])) = (((*($6) << [2]) & [60]) | uint_32(*($6) >> [6]))
	*(($9 + [3])) = (*($6) & [63])
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$11 }
	$8 = ($2 + [8])
	CALL $47($0, *((( *($8) ? $1 : (*($2) & [1]) ) + ($3 & [255]))))
	$6 = $5
	
.LOOP $label$12:
	CALL $47($0, *((( *($8) ? $1 : (*($2) & [1]) ) + *($4))))
	$4 = ($4 + [1])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)$5 > (int_32)[2]) ){ goto $label$5 }
	$5 = ($5 + [-1])
	
.LOOP $label$13:
	CALL $47($0, [61])
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[2]) ){ goto $label$13 }
	
.LABEL $label$5
	if ( ((*($2) & [1]) == 0) ){ goto $label$14 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$14
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $40($2)
}

void .FUNC $63 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [64])
	$global$0 = $5
	$6 = CALL $41(($5 + [32]), $4)
	CALL $112($0, $3, $6, $1)
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$1
	$4 = CALL $41($5, $4)
	*((($5 + [16]) + [12])) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [16]) = $3
	$3 = (($5 + [16]) | [4])
	CALL $42($3, $4)
	*($5 + [48]) = *($5 + [16])
	$3 = CALL $41((($5 + [48]) | [4]), $3)
	CALL $113((int_64)8455380941646468112, $1, $2, ($5 + [48]))
	if ( (*($3) & [1]) ){ goto $label$6 }
	$3 = [1]
	if ( (*($5 + [20]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $10(*((($5 + [48]) + [12])))
	$3 = [1]
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*(($5 + [28])))
	if ( ((*($4) & $3) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($4) & $3) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$2
	CALL $10(*($4 + [8]))
	$global$0 = ($5 + [64])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [224])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$9 }
	if ( ((int_64)$2 > (int_64)-1411661409832927233) ){ goto $label$14 }
	if ( ((int_64)$2 <= (int_64)-3075276126730321921) ){ goto $label$13 }
	if ( ((int_64)$2 > (int_64)-1573681260872597505) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-3075276126730321920) ){ goto $label$8 }
	if ( ((int_64)$2 != (int_64)-1575517358502445056) ){ goto $label$9 }
	*($3 + [148]) = [0]
	*($3 + [144]) = [4]
	*($3 + [72]) = *($3 + [144])
	CALL $64($1, $1, ($3 + [72]))
	CALL eosio_exit([0])
	
.LABEL $label$14
	if ( ((int_64)$2 <= (int_64)4921564679018381311) ){ goto $label$12 }
	if ( ((int_64)$2 > (int_64)5031766152489992191) ){ goto $label$10 }
	if ( ((int_64)$2 == (int_64)4921564679018381312) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)4981707821528645632) ){ goto $label$9 }
	*($3 + [172]) = [0]
	*($3 + [168]) = [5]
	*($3 + [48]) = *($3 + [168])
	CALL $66($1, $1, ($3 + [48]))
	CALL eosio_exit([0])
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)-6533262907872903168) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-5003132314734034944) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$9 }
	*($3 + [188]) = [0]
	*($3 + [184]) = [6]
	*($3 + [32]) = *($3 + [184])
	CALL $66($1, $1, ($3 + [32]))
	CALL eosio_exit([0])
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-1411661409832927232) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-1288933729535787008) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)-1221186425089687552) ){ goto $label$9 }
	*($3 + [140]) = [0]
	*($3 + [136]) = [7]
	*($3 + [80]) = *($3 + [136])
	CALL $69($1, $1, ($3 + [80]))
	CALL eosio_exit([0])
	
.LABEL $label$11
	if ( ((int_64)$2 == (int_64)-1573681260872597504) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-1411662681362399232) ){ goto $label$9 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [8]
	*($3 + [96]) = *($3 + [120])
	CALL $71($1, $1, ($3 + [96]))
	CALL eosio_exit([0])
	
.LABEL $label$10
	if ( ((int_64)$2 == (int_64)8516769789752901632) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)5031766152489992192) ){ goto $label$9 }
	*($3 + [220]) = [0]
	*($3 + [216]) = [9]
	*($3) = *($3 + [216])
	CALL $73($1, $1, $3)
	
.LABEL $label$9
	CALL eosio_exit([0])
	
.LABEL $label$8
	*($3 + [212]) = [0]
	*($3 + [208]) = [10]
	*($3 + [8]) = *($3 + [208])
	CALL $73($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$7
	*($3 + [180]) = [0]
	*($3 + [176]) = [11]
	*($3 + [40]) = *($3 + [176])
	CALL $76($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [196]) = [0]
	*($3 + [192]) = [12]
	*($3 + [24]) = *($3 + [192])
	CALL $78($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [164]) = [0]
	*($3 + [160]) = [13]
	*($3 + [56]) = *($3 + [160])
	CALL $76($1, $1, ($3 + [56]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [132]) = [0]
	*($3 + [128]) = [14]
	*($3 + [88]) = *($3 + [128])
	CALL $71($1, $1, ($3 + [88]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [116]) = [0]
	*($3 + [112]) = [15]
	*($3 + [104]) = *($3 + [112])
	CALL $82($1, $1, ($3 + [104]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	*($3 + [156]) = [0]
	*($3 + [152]) = [16]
	*($3 + [64]) = *($3 + [152])
	CALL $64($1, $1, ($3 + [64]))
	CALL eosio_exit([0])
	
.LABEL $label$1
	*($3 + [204]) = [0]
	*($3 + [200]) = [17]
	*($3 + [16]) = *($3 + [200])
	CALL $85($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $16($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11673])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11673])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11673])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11673])
	$6 = *($5)
	
.LABEL $label$4
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$0 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11673])
	$5 = *(($4 + [4]))
	
.LABEL $label$5
	CALL memcpy($5, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11795])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [12]) = $4
	*($3 + [8]) = $4
	*($3 + [16]) = ($4 + $5)
	*(($5 = CALL $8([56])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [16])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [32])
	CALL $172(($3 + [32]), ($3 + [24]))
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [32]) = $7)
	*($3 + [4]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $89(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11818])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11818])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	$0 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $0
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11818])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [8]), $0, [8])
	*(($5 + [16])) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $85 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [80])) = (int_64)0
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	$6 = ($2 + $5)
	*($4 + [56]) = $6
	$3 = $2
	if ( ((uint_32)$5 > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11818])
	$6 = *(($4 + [56]))
	$3 = *($4 + [52])
	
.LABEL $label$4
	CALL memcpy(($4 + [64]), $3, [8])
	$3 = ($3 + [8])
	*($4 + [52]) = $3
	$7 = (($4 + [64]) + [8])
	if ( ((uint_32)($6 - $3) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	$6 = *((($4 + [48]) + [8]))
	$3 = *($4 + [52])
	
.LABEL $label$5
	CALL memcpy($7, $3, [8])
	$3 = ($3 + [8])
	*($4 + [52]) = $3
	*($4 + [16]) = (int_64)0
	if ( ((uint_32)($6 - $3) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	$3 = *($4 + [52])
	
.LABEL $label$6
	CALL memcpy(($4 + [16]), $3, [8])
	*(($4 + [80])) = *($4 + [16])
	*($4 + [52]) = ($3 + [8])
	CALL $91(($4 + [48]), (($4 + [64]) + [24]))
	*(($3 = ($4 + [8]))) = *((($4 + [48]) + [8]))
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*((($4 + [16]) + [24])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $92(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$9 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $3($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $10(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$7
	$global$0 = ($4 + [144])
	return $2
}

void .FUNC $84 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$4 = ($global$0 - [192])
	$global$0 = $4
	$5 = [0]
	$6 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$7 = $8
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$4 }
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$7 }
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$4 }
	
.LABEL $label$5
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	CALL eosio_assert([0], [10227])
	if ( ((*($3) & [1]) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	if ( (*($3 + [4]) <= [257]) ){ goto $label$1 }
	CALL eosio_assert([0], [10965])
	
.LABEL $label$1
	$11 = [0]
	*(($4 + [120])) = [0]
	*($4 + [104]) = (int_64)-1
	*($4 + [112]) = (int_64)0
	$7 = *($0)
	*($4 + [88]) = $7
	*($4 + [96]) = $6
	$5 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$9 }
	$11 = CALL $87(($4 + [88]), $5)
	if ( ((int_32)*($11 + [40]) == (int_32)($4 + [88])) ){ goto $label$8 }
	CALL eosio_assert([0], [11744])
	goto $label$8 
	
.LABEL $label$9
	CALL eosio_assert([0], [10824])
	
.LABEL $label$8
	CALL require_auth(*($11 + [32]))
	$6 = *($2)
	if ( ((uint_64)((int_64)$6 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$11 }
	$7 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$7 = $8
	$9 = $5
	$5 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$7 = $8
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$5 < (int_32)[6])
	$10 = ($5 + [1])
	$5 = $10
	if ( $9 ){ goto $label$14 }
	$5 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	CALL eosio_assert([0], [11167])
	$6 = *($2)
	
.LABEL $label$10
	if ( ((int_64)$6 > (int_64)0) ){ goto $label$15 }
	CALL eosio_assert([0], [11184])
	
.LABEL $label$15
	if ( ((int_64)*(($2 + [8])) == (int_64)*($11 + [8])) ){ goto $label$16 }
	CALL eosio_assert([0], [10888])
	
.LABEL $label$16
	if ( ((int_64)*($2) <= (int_64))(*($11 + [16]) - *($11))) ){ goto $label$17 }
	CALL eosio_assert([0], [11213])
	
.LABEL $label$17
	*($4 + [128]) = $2
	CALL $93(($4 + [88]), $11, ($4 + [128]))
	$5 = ($11 + [32])
	$7 = *($5)
	$10 = ($2 + [8])
	*(($9 = (($4 + [72]) + [8]))) = *($10)
	$8 = *($2)
	*((($4 + [8]) + [8])) = *($9)
	*($4 + [72]) = $8
	*($4 + [8]) = *($4 + [72])
	CALL $94($0, $7, ($4 + [8]), $7)
	$7 = *($5)
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$18 }
	*(($9 = (($4 + [24]) + [24]))) = *($10)
	*($4 + [24]) = $7
	*($4 + [32]) = $1
	*($4 + [40]) = *($2)
	$8 = *($0)
	CALL $41((($4 + [24]) + [32]), $3)
	*(($5 = CALL $8([16]))) = $7
	*($5 + [8]) = (int_64)8516770184889892864
	*((($4 + [128]) + [24])) = *($9)
	$9 = (($4 + [24]) + [40])
	*(($10 = (($4 + [128]) + [40]))) = *($9)
	*($9) = [0]
	*($4 + [176]) = $5
	$5 = ($5 + [16])
	*($4 + [184]) = $5
	*($4 + [180]) = $5
	*($4 + [128]) = *($4 + [24])
	*($4 + [136]) = *($4 + [32])
	*($4 + [144]) = *($4 + [40])
	*($4 + [160]) = *($4 + [56])
	*($4 + [56]) = (int_64)0
	CALL $95($8, (int_64)-3617168760277827584, ($4 + [176]), ($4 + [128]))
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$19 }
	CALL $10(*($10))
	
.LABEL $label$19
	$5 = *($4 + [176])
	if ( ($5 == 0) ){ goto $label$20 }
	*($4 + [180]) = $5
	CALL $10($5)
	
.LABEL $label$20
	if ( ((*(($4 + [56])) & [1]) == 0) ){ goto $label$18 }
	CALL $10(*(($4 + [64])))
	
.LABEL $label$18
	$10 = *($4 + [112])
	if ( ($10 == 0) ){ goto $label$21 }
	$2 = ($4 + [116])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$23 }
	
.LOOP $label$24:
	$5 = ($5 + [-24])
	$9 = *($5)
	*($5) = [0]
	if ( ($9 == 0) ){ goto $label$25 }
	CALL $10($9)
	
.LABEL $label$25
	if ( ((int_32)$10 != (int_32)$5) ){ goto $label$24 }
	$5 = *(($4 + [112]))
	goto $label$22 
	
.LABEL $label$23
	$5 = $10
	
.LABEL $label$22
	*($2) = $10
	CALL $10($5)
	
.LABEL $label$21
	$global$0 = ($4 + [192])
}

void .FUNC $83 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = ($global$0 - [64])
	$global$0 = $5
	$6 = CALL $41(($5 + [32]), $4)
	CALL $110($0, $3, $6, $1)
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$1
	$4 = CALL $41($5, $4)
	*((($5 + [16]) + [12])) = [0]
	*($5 + [20 align=4]) = (int_64)0
	*($5 + [16]) = $3
	$3 = (($5 + [16]) | [4])
	CALL $42($3, $4)
	*($5 + [48]) = *($5 + [16])
	$3 = CALL $41((($5 + [48]) | [4]), $3)
	CALL $111((int_64)8455380941646468112, $1, $2, ($5 + [48]))
	if ( (*($3) & [1]) ){ goto $label$6 }
	$3 = [1]
	if ( (*($5 + [20]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $10(*((($5 + [48]) + [12])))
	$3 = [1]
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*(($5 + [28])))
	if ( ((*($4) & $3) == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( (*($4) & $3) ){ goto $label$2 }
	
.LABEL $label$3
	$global$0 = ($5 + [64])
	return 
	
.LABEL $label$2
	CALL $10(*($4 + [8]))
	$global$0 = ($5 + [64])
}

int_32 .FUNC $82 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [112])) = [0]
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $122(($4 + [24]), ($4 + [144]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($6 = (($4 + [128]) + [8]))) = *($3)
	*($4 + [128]) = *($4 + [8])
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [128])
	*($4 + [40]) = $0
	*($4 + [144]) = $0
	*($4 + [148]) = ($4 + [120])
	*($4 + [144]) = ($4 + [24])
	CALL $123(($4 + [144]), ($4 + [72]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $3($2)
	
.LABEL $label$4
	$2 = *(($4 + [104]))
	if ( ($2 == 0) ){ goto $label$5 }
	*(($4 + [108])) = $2
	CALL $10($2)
	
.LABEL $label$5
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $81 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5)
{
	CALL require_recipient((int_64)5308437925463201152)
}

void .FUNC $80 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	$4 = CALL $41($5, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($4 + [8]))
	
.LABEL $label$1
	CALL $120((int_64)-8279439795025694704, $1, $2, $3)
	$global$0 = ($5 + [16])
}

int_32 .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11795])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL $8([40])) + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [24]) = $0
	CALL $137(($3 + [32]), $5)
	$2 = ($5 + [16])
	$7 = *($3 + [36])
	if ( ((uint_32)(*($3 + [40]) - $7) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11818])
	$7 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($2, $7, [8])
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	*($3 + [36]) = (*($3 + [36]) + [8])
	$8 = *($2)
	*($3 + [16]) = $8
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$2 = *($7)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($2 + [8]) = $8
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($7) = ($2 + [24])
	if ( $6 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $190(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $3($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	$4 = *($1)
	if ( ($4 == 0) ){ goto $label$12 }
	*($1 + [4]) = $4
	CALL $10($4)
	
.LABEL $label$12
	CALL $10($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $149 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [40]) = (int_64)0
	*(($3 + [24])) = *(($2 + [24]))
	*(($3 + [16])) = *(($2 + [16]))
	*($3 + [8]) = *(($2 + [8]))
	*($3) = *($2)
	$4 = [0]
	$5 = [0]
	$6 = *($1)
	$7 = CALL db_idx256_lowerbound(*($6), *($6 + [8]), (int_64)8455373400698781696, $3, [2], ($3 + [40]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = *($3 + [40])
	$11 = *(($9 + [28]))
	$9 = *($1)
	$10 = *($9 + [24])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$3 }
	
.LOOP $label$5:
	$6 = ($11 + [-24])
	$5 = *($6)
	if ( ((int_64)*($5) == (int_64)$8) ){ goto $label$4 }
	$11 = $6
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$3 }
	if ( ((int_32)*($5 + [20]) == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert([0], [11744])
	goto $label$2 
	
.LABEL $label$3
	$5 = [0]
	$6 = CALL db_find_i64(*($9), *($9 + [8]), (int_64)8455373400698781696, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	$5 = CALL $152($9, $6)
	if ( ((int_32)*($5 + [20]) == (int_32)$9) ){ goto $label$2 }
	CALL eosio_assert([0], [11744])
	
.LABEL $label$2
	*($5 + [28]) = $7
	
.LABEL $label$1
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $153($3, $5)
	if ( ((int_64)(((int_64)((int_64)*($2) ^ (int_64)*($3)) | (int_64)((int_64)*(($2 + [8])) ^ (int_64)*($3 + [8]))) == 0) == 0) ){ goto $label$6 }
	$4 = ( $5 ? [0] : (int_64)(((int_64)((int_64)*($2 + [16]) ^ (int_64)*($3 + [16])) | (int_64)((int_64)*(($2 + [24])) ^ (int_64)*(($3 + [24])))) == 0) )
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [48])
}

void .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [48])
	$global$0 = $2
	$1 = CALL $41(($2 + [16]), $1)
	CALL $132(($2 + [32]), $1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$1
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$1 = (*($2 + [36]) - *($2 + [32]))
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $8($1)
	*(($2 + [8])) = ($3 + $1)
	*($2) = $3
	*($2 + [4]) = $3
	$4 = *($2 + [32])
	$1 = (*($2 + [36]) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $4, $1)
	*($2 + [4]) = (*($2 + [4]) + $1)
	
.LABEL $label$3
	$1 = CALL $2([32])
	CALL memcpy($1, *($2), [32])
	*($0 + [8]) = *($1)
	*($0) = *($1 + [8])
	*(($0 + [24])) = *($1 + [16])
	*($0 + [16]) = *($1 + [24])
	$0 = *($2)
	if ( ($0 == 0) ){ goto $label$4 }
	*($2 + [4]) = $0
	CALL $10($0)
	
.LABEL $label$4
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$5 }
	*($2 + [36]) = $0
	CALL $10($0)
	
.LABEL $label$5
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $16($2)
}

void .FUNC $145 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	$5 = ($2 + $4)
	*($3 + [152]) = $5
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [128]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	$5 = *((($3 + [144]) + [8]))
	$2 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [128]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11818])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$7
	CALL memcpy(($3 + [112]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [11818])
	$2 = *($3 + [148])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*(($5 = (($3 + [112]) + [8]))) = *($3 + [64])
	*($3 + [148]) = ($2 + [8])
	*($3 + [104]) = [0]
	*($3 + [96]) = (int_64)0
	CALL $91(($3 + [144]), ($3 + [96]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [48]) = *($3 + [144])
	*(($4 = (($3 + [160]) + [8]))) = *($2)
	*($3 + [160]) = *($3 + [48])
	$2 = *($4)
	*((($3 + [176]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [160])
	*($3 + [80]) = $0
	*($3 + [176]) = $0
	*(($4 = (($3 + [32]) + [8]))) = *($5)
	*($3 + [32]) = *($3 + [112])
	$0 = *($3 + [128])
	$1 = *($3 + [136])
	$2 = CALL $41(($3 + [16]), ($3 + [96]))
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [32])
	CALL $67(($3 + [64]), $1, $0, $3, $2)
	if ( (*($2) & [1]) ){ goto $label$11 }
	if ( (*($3 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $10(*($2 + [8]))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $10(*(($3 + [104])))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [192])
}

void .FUNC $144 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [40]), $2, [8])
	*($3 + [32]) = (int_64)0
	*($3) = (int_64)0
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$6
	CALL memcpy($3, $6, [8])
	*($3 + [32]) = *($3)
	*(($3 + [24])) = $5
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $79($3, *($3 + [40]), ($3 + [32]))
	$global$0 = ($3 + [48])
}

int_32 .FUNC $147 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11673])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [11673])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [11673])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11673])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [11673])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $141 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$5
	CALL memcpy(($3 + [56]), $2, [8])
	*($3 + [48]) = (int_64)0
	*($3 + [8]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [8]), $5, [8])
	*($3 + [48]) = *($3 + [8])
	*($3 + [40]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $5, [8])
	*((($3 + [8]) + [24])) = $4
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [24])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	CALL $77(($3 + [8]), *($3 + [56]), ($3 + [48]), *($3 + [40]))
	$global$0 = ($3 + [64])
}

void .FUNC $140 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	$5 = ($2 + $4)
	*($3 + [152]) = $5
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [128]) = (int_64)0
	*($3 + [120]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	$5 = *((($3 + [144]) + [8]))
	$2 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [120]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [72]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11818])
	$2 = *($3 + [148])
	
.LABEL $label$7
	CALL memcpy(($3 + [72]), $2, [8])
	*(($4 = (($3 + [120]) + [8]))) = *($3 + [72])
	*($3 + [148]) = ($2 + [8])
	*($3 + [112]) = [0]
	*($3 + [104]) = (int_64)0
	CALL $91(($3 + [144]), ($3 + [104]))
	*(($2 = (($3 + [56]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [56]) = *($3 + [144])
	*(($5 = (($3 + [160]) + [8]))) = *($2)
	*($3 + [160]) = *($3 + [56])
	$2 = *($5)
	*((($3 + [176]) + [8])) = $2
	*(($3 + [96])) = $2
	*($3 + [72]) = $0
	*($3 + [80]) = $1
	$0 = *($3 + [160])
	*($3 + [88]) = $0
	*($3 + [176]) = $0
	*(($5 = (($3 + [40]) + [8]))) = *($4)
	*($3 + [40]) = *($3 + [120])
	$0 = *($3 + [136])
	$2 = CALL $41(($3 + [24]), ($3 + [104]))
	*((($3 + [8]) + [8])) = *($5)
	*($3 + [8]) = *($3 + [40])
	CALL $84(($3 + [72]), $0, ($3 + [8]), $2)
	if ( (*($2) & [1]) ){ goto $label$10 }
	if ( (*($3 + [104]) & [1]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $10(*($2 + [8]))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $10(*(($3 + [112])))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [192])
}

void .FUNC $143 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [40]), $2, [8])
	*($3 + [32]) = (int_64)0
	*($3) = (int_64)0
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$6
	CALL memcpy($3, $6, [8])
	*($3 + [32]) = *($3)
	*(($3 + [24])) = $5
	*($3 + [16]) = $2
	*(($3 + [20])) = ($2 + [16])
	*($3 + [8]) = $1
	*($3) = $0
	CALL $75($3, *($3 + [40]), ($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $142 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [148]) = $2
	*($3 + [144]) = $2
	$5 = ($2 + $4)
	*($3 + [152]) = $5
	*($3 + [136]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$5
	CALL memcpy(($3 + [136]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [128]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	$5 = *((($3 + [144]) + [8]))
	$2 = *($3 + [148])
	
.LABEL $label$6
	CALL memcpy(($3 + [128]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [120]) = (int_64)0
	*($3 + [112]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11818])
	$5 = *(($3 + [152]))
	$2 = *($3 + [148])
	
.LABEL $label$7
	CALL memcpy(($3 + [112]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [148]) = $2
	*($3 + [64]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [11818])
	$2 = *($3 + [148])
	
.LABEL $label$8
	CALL memcpy(($3 + [64]), $2, [8])
	*(($5 = (($3 + [112]) + [8]))) = *($3 + [64])
	*($3 + [148]) = ($2 + [8])
	*($3 + [104]) = [0]
	*($3 + [96]) = (int_64)0
	CALL $91(($3 + [144]), ($3 + [96]))
	*(($2 = (($3 + [48]) + [8]))) = *((($3 + [144]) + [8]))
	*($3 + [48]) = *($3 + [144])
	*(($4 = (($3 + [160]) + [8]))) = *($2)
	*($3 + [160]) = *($3 + [48])
	$2 = *($4)
	*((($3 + [176]) + [8])) = $2
	*(($3 + [88])) = $2
	*($3 + [64]) = $0
	*($3 + [72]) = $1
	$0 = *($3 + [160])
	*($3 + [80]) = $0
	*($3 + [176]) = $0
	*(($4 = (($3 + [32]) + [8]))) = *($5)
	*($3 + [32]) = *($3 + [112])
	$0 = *($3 + [128])
	$1 = *($3 + [136])
	$2 = CALL $41(($3 + [16]), ($3 + [96]))
	*(($3 + [8])) = *($4)
	*($3) = *($3 + [32])
	CALL $65(($3 + [64]), $1, $0, $3, $3)
	if ( (*($2) & [1]) ){ goto $label$11 }
	if ( (*($3 + [96]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $10(*($2 + [8]))
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $10(*(($3 + [104])))
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$9
	$global$0 = ($3 + [192])
}

void .FUNC $72 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	$3 = ($global$0 - [128])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = [0]
	$5 = *($2 + [8])
	$6 = (uint_64)$5 >> (uint_64)(int_64)8
	$7 = $6)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$7 = $8
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$5 }
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [10227])
	
.LABEL $label$1
	$11 = *($2)
	if ( ((uint_64)((int_64)$11 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$4 = [0]
	$7 = $6
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$7 = $8
	$9 = $4
	$4 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$7 = $8
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$9 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $9 ){ goto $label$10 }
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [11152])
	
.LABEL $label$6
	if ( ((int_64)$11 > (int_64)0) ){ goto $label$11 }
	CALL eosio_assert([0], [10755])
	
.LABEL $label$11
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$7 = *($0)
	*($3 + [8]) = $7
	*($3 + [16]) = $6
	$4 = CALL db_find_i64($7, $6, (int_64)-4157508551318700032, $6)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	if ( ((int_32)*(CALL $87(($3 + [8]), $4) + [40]) == (int_32)($3 + [8])) ){ goto $label$13 }
	CALL eosio_assert([0], [11744])
	
.LABEL $label$13
	CALL eosio_assert([0], [10787])
	
.LABEL $label$12
	$8 = *($0)
	if ( ((int_64)CALL current_receiver() == (int_64)*($3 + [8])) ){ goto $label$14 }
	CALL eosio_assert([0], [12458])
	
.LABEL $label$14
	*(($4 = CALL $8([56]))) = (int_64)0
	*($4 + [40]) = ($3 + [8])
	*($4 + [8]) = $5
	*($4 + [32]) = $1
	*($4 + [16]) = *($2)
	*(($4 + [24])) = *(($2 + [8]))
	*($3 + [96]) = (($3 + [48]) + [40])
	*($3 + [92]) = ($3 + [48])
	*($3 + [88]) = ($3 + [48])
	*($3 + [104]) = ($3 + [88])
	*($3 + [116]) = ($4 + [16])
	*($3 + [112]) = $4
	*($3 + [120]) = ($4 + [32])
	CALL $88(($3 + [112]), ($3 + [104]))
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	$10 = CALL db_store_i64(*((($3 + [8]) + [8])), (int_64)-4157508551318700032, $8, $7), ($3 + [48]), [40]
	*($4 + [44]) = $10)
	$9 = (($3 + [8]) + [16])
	if ( (uint_64)($7 <= *($9)) ){ goto $label$15 }
	*($9) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$15
	*($3 + [112]) = $4
	$7 = (uint_64)*(($4 + [8])) >> (uint_64)(int_64)8
	*($3 + [48]) = $7)
	*($3 + [88]) = $10
	$2 = ($3 + [36])
	$9 = *($2)
	if ( ((uint_32)$9 >= (uint_32)*((($3 + [8]) + [32]))) ){ goto $label$18 }
	*($9 + [8]) = $7
	*($9 + [16]) = $10
	*($3 + [112]) = [0]
	*($9) = $4
	*($2) = ($9 + [24])
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( $4 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $89(($3 + [32]), ($3 + [112]), ($3 + [48]), ($3 + [88]))
	$4 = *($3 + [112])
	*($3 + [112]) = [0]
	if ( ($4 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	CALL $10($4)
	
.LABEL $label$16
	$10 = *($3 + [32])
	if ( ($10 == 0) ){ goto $label$19 }
	$2 = ($3 + [36])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$21 }
	
.LOOP $label$22:
	$4 = ($4 + [-24])
	$9 = *($4)
	*($4) = [0]
	if ( ($9 == 0) ){ goto $label$23 }
	CALL $10($9)
	
.LABEL $label$23
	if ( ((int_32)$10 != (int_32)$4) ){ goto $label$22 }
	$4 = *(($3 + [32]))
	goto $label$20 
	
.LABEL $label$21
	$4 = $10
	
.LABEL $label$20
	*($2) = $10
	CALL $10($4)
	
.LABEL $label$19
	$global$0 = ($3 + [128])
}

int_32 .FUNC $73 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [160])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($8 = ($4 + [104]))) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [76]) = $2
	*($4 + [72]) = $2
	*($4 + [80]) = ($2 + $7)
	*($4 + [144]) = ($4 + [72])
	*($4 + [40]) = ($4 + [88])
	CALL $86(($4 + [40]), ($4 + [144]))
	*(($9 = (($4 + [24]) + [8]))) = *($4 + [80])
	*($4 + [24]) = *($4 + [72])
	*(($3 = (($4 + [128]) + [8]))) = *($9)
	*($4 + [128]) = *($4 + [24])
	$9 = *($3)
	*((($4 + [144]) + [8])) = $9
	*(($4 + [64])) = $9
	*($4 + [40]) = $0
	*($4 + [48]) = $1
	$0 = *($4 + [128])
	*($4 + [56]) = $0
	*($4 + [144]) = $0
	*(($9 = (($4 + [112]) + [8]))) = *($8)
	*($4 + [112]) = *($4 + [96])
	$0 = *($4 + [88])
	*($3) = *($9)
	*($4 + [128]) = *($4 + [112])
	$3 = (($4 + [40]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	$1 = *((($4 + [128]) + [8]))
	*((($4 + [144]) + [8])) = $1
	*((($4 + [8]) + [8])) = $1
	$1 = *($4 + [128])
	*($4 + [8]) = $1
	*($4 + [144]) = $1
	CALL void $3((int_32 $0), (int_64 ($4 + [8])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $3($2)
	
.LABEL $label$6
	$global$0 = ($4 + [160])
	return [1]
}

void .FUNC $70 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	$5 = ($global$0 - [16])
	$global$0 = $5
	$4 = CALL $41($5, $4)
	if ( ((*($4) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($4 + [8]))
	
.LABEL $label$1
	CALL $121((int_64)-8279439795025694704, $1, $2, $3)
	$global$0 = ($5 + [16])
}

int_32 .FUNC $71 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [144])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [96])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [64]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [52]) = $2
	*($4 + [48]) = $2
	*($4 + [56]) = ($2 + $5)
	*($4 + [128]) = ($4 + [48])
	*($4 + [16]) = ($4 + [64])
	CALL $118(($4 + [16]), ($4 + [128]))
	*(($3 = ($4 + [8]))) = *($4 + [56])
	*($4) = *($4 + [48])
	*(($6 = (($4 + [112]) + [8]))) = *($3)
	*($4 + [112]) = *($4)
	$3 = *($6)
	*((($4 + [128]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [112])
	*($4 + [32]) = $0
	*($4 + [128]) = $0
	*($4 + [132]) = ($4 + [104])
	*($4 + [128]) = ($4 + [16])
	CALL $119(($4 + [128]), ($4 + [64]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$6 }
	$2 = [1]
	if ( (*($4 + [88]) & [1]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $3($2)
	$2 = [1]
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*(($4 + [96])))
	$global$0 = ($4 + [144])
	return $2
	
.LABEL $label$4
	$global$0 = ($4 + [144])
	return $2
}

int_32 .FUNC $76 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [48]) = (int_64)0
	*($4 + [40]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$5
	$3 = ($2 + $7)
	CALL memcpy(($4 + [40]), $2, [8])
	*($4 + [8]) = (int_64)0
	$8 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$6
	CALL memcpy(($4 + [8]), $8, [8])
	$9 = *($4 + [8])
	*((($4 + [40]) + [8])) = $9
	*(($4 + [32])) = $3
	*($4 + [24]) = $2
	*(($4 + [28])) = ($2 + [16])
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	$0 = *($4 + [40])
	*($4 + [56]) = $9
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $0), (int_64 ($4 + [56])), (int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $3($2)
	
.LABEL $label$8
	$global$0 = ($4 + [64])
	return [1]
}

void .FUNC $77 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [128])
	$global$0 = $4
	CALL require_auth($3)
	$5 = *($2)
	*((($4 + [48]) + [32])) = [0]
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	*($4 + [56]) = $5)
	*($4 + [64]) = (int_64)-1
	*($4 + [72]) = (int_64)0
	*($4 + [48]) = *($0)
	if ( ((int_64)*(CALL $97(($4 + [48]), $5, [11247]) + [8]) == (int_64)*($2)) ){ goto $label$1 }
	CALL eosio_assert([0], [10888])
	
.LABEL $label$1
	*((($4 + [8]) + [32])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$6 = *($0)
	*($4 + [8]) = $6
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($6, $1, (int_64)3607749779137757184, $5)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	if ( ((int_32)*(CALL $98(($4 + [8]), $0) + [20]) == (int_32)($4 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [11744])
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($4) = $2
	*($4 + [120]) = $3
	if ( ((int_64)CALL current_receiver() == (int_64)*($4 + [8])) ){ goto $label$6 }
	CALL eosio_assert([0], [12458])
	
.LABEL $label$6
	*($4 + [100]) = $4
	*($4 + [96]) = ($4 + [8])
	*($4 + [104]) = ($4 + [120])
	*(($2 = CALL $8([32])) + [8]) = (int_64)0
	*($2) = (int_64)0
	*($2 + [16]) = [0]
	*($2 + [20]) = ($4 + [8])
	CALL $99(($4 + [96]), $2)
	*($4 + [112]) = $2
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	*($4 + [96]) = $1)
	$7 = *($2 + [24])
	*($4 + [92]) = $7
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((uint_32)$0 >= (uint_32)*((($4 + [8]) + [32]))) ){ goto $label$8 }
	*($0 + [8]) = $1
	*($0 + [16]) = $7
	*($4 + [112]) = [0]
	*($0) = $2
	*($8) = ($0 + [24])
	$2 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( $2 ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$8
	CALL $100(($4 + [32]), ($4 + [112]), ($4 + [96]), ($4 + [92]))
	$2 = *($4 + [112])
	*($4 + [112]) = [0]
	if ( ($2 == 0) ){ goto $label$4 }
	
.LABEL $label$7
	CALL $10($2)
	
.LABEL $label$4
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	CALL $10($0)
	
.LABEL $label$12
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($4 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $7
	
.LABEL $label$9
	*($8) = $7
	CALL $10($2)
	
.LABEL $label$2
	$7 = *($4 + [72])
	if ( ($7 == 0) ){ goto $label$13 }
	$8 = ($4 + [76])
	$2 = *($8)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$15 }
	
.LOOP $label$16:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$17 }
	CALL $10($0)
	
.LABEL $label$17
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$16 }
	$2 = *(($4 + [72]))
	goto $label$14 
	
.LABEL $label$15
	$2 = $7
	
.LABEL $label$14
	*($8) = $7
	CALL $10($2)
	
.LABEL $label$13
	$global$0 = ($4 + [128])
}

void .FUNC $74 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $1
	CALL require_auth(*($0))
	$4 = [0]
	$5 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	$1 = $5)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $6
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$5 }
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [10227])
	
.LABEL $label$1
	$9 = *($2)
	if ( ((uint_64)((int_64)$9 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$1 = (uint_64)*(($2 + [8])) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $6
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $6
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$8 = ($4 + [1])
	$4 = $8
	if ( $7 ){ goto $label$10 }
	$4 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [11152])
	$9 = *($2)
	
.LABEL $label$6
	if ( ((int_64)$9 > (int_64)0) ){ goto $label$11 }
	CALL eosio_assert([0], [10755])
	
.LABEL $label$11
	$4 = [0]
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$1 = *($0)
	*($3 + [16]) = $1
	*($3 + [24]) = $5
	$7 = CALL db_find_i64($1, $5, (int_64)-4157508551318700032, $5)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$13 }
	$4 = CALL $87(($3 + [16]), $7)
	if ( ((int_32)*($4 + [40]) == (int_32)($3 + [16])) ){ goto $label$12 }
	CALL eosio_assert([0], [11744])
	goto $label$12 
	
.LABEL $label$13
	CALL eosio_assert([0], [10824])
	
.LABEL $label$12
	if ( ((int_64)*(($2 + [8])) == (int_64)*($4 + [8])) ){ goto $label$14 }
	CALL eosio_assert([0], [10888])
	
.LABEL $label$14
	if ( ((int_64)*($4) <= (int_64)*($2)) ){ goto $label$15 }
	CALL eosio_assert([0], [10918])
	
.LABEL $label$15
	*($3 + [8]) = $2
	*($3 + [12]) = ($3 + [56])
	CALL $90(($3 + [16]), $4, ($3 + [8]))
	$8 = *($3 + [40])
	if ( ($8 == 0) ){ goto $label$16 }
	$2 = ($3 + [44])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$18 }
	
.LOOP $label$19:
	$4 = ($4 + [-24])
	$7 = *($4)
	*($4) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL $10($7)
	
.LABEL $label$20
	if ( ((int_32)$8 != (int_32)$4) ){ goto $label$19 }
	$4 = *(($3 + [40]))
	goto $label$17 
	
.LABEL $label$18
	$4 = $8
	
.LABEL $label$17
	*($2) = $8
	CALL $10($4)
	
.LABEL $label$16
	$global$0 = ($3 + [64])
}

void .FUNC $75 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL require_auth($1)
	$4 = *($2)
	*((($3 + [120]) + [32])) = [0]
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	*($3 + [128]) = $4)
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	*($3 + [120]) = *($0)
	CALL require_recipient($1)
	if ( ((int_64)*(CALL $97(($3 + [120]), $4, [11247]) + [8]) == (int_64)*($2)) ){ goto $label$1 }
	CALL eosio_assert([0], [10888])
	
.LABEL $label$1
	*(($3 + [88])) = $1
	*((($3 + [64]) + [32])) = [0]
	*(($3 + [112])) = [0]
	*($3 + [72]) = $1
	*($3 + [80]) = (int_64)274877907968
	*($3 + [104]) = (int_64)0
	*($3 + [64]) = *($0)
	$2 = *(CALL $105(($3 + [64]), $4) + [4])
	if ( $2 ){ goto $label$2 }
	CALL eosio_assert([0], [11533])
	
.LABEL $label$2
	$5 = ($2 + [8])
	$6 = *($5)
	*((($3 + [48]) + [8])) = $6
	$4 = *($2)
	*((($3 + [16]) + [8])) = $6
	*($3 + [48]) = $4
	*($3 + [16]) = $4
	CALL $106($0, $1, ($3 + [16]))
	$6 = *($5)
	*((($3 + [32]) + [8])) = $6
	$4 = *($2)
	*(($3 + [8])) = $6
	*($3) = $4
	*($3 + [32]) = $4
	CALL $94($0, $1, $3, $1)
	$5 = *($3 + [104])
	if ( ($5 == 0) ){ goto $label$3 }
	$7 = ($3 + [108])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $10($2)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [104]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($7) = $5
	CALL $10($0)
	
.LABEL $label$3
	$5 = *($3 + [144])
	if ( ($5 == 0) ){ goto $label$8 }
	$7 = ($3 + [148])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $10($2)
	
.LABEL $label$12
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($3 + [144]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $5
	
.LABEL $label$9
	*($7) = $5
	CALL $10($0)
	
.LABEL $label$8
	$global$0 = ($3 + [160])
}

int_32 .FUNC $78 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [128])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $2($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [80]) = (int_64)0
	*($4 + [72]) = (int_64)0
	*($4 + [88]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $7)
	*($4 + [112]) = ($4 + [56])
	*($4 + [24]) = ($4 + [72])
	CALL $96(($4 + [24]), ($4 + [112]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [64])
	*($4 + [8]) = *($4 + [56])
	*(($8 = (($4 + [96]) + [8]))) = *($3)
	*($4 + [96]) = *($4 + [8])
	$3 = *($8)
	*((($4 + [112]) + [8])) = $3
	*(($4 + [48])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$0 = *($4 + [96])
	*($4 + [40]) = $0
	*($4 + [112]) = $0
	$0 = *($4 + [88])
	$1 = *($4 + [72])
	*($4 + [112]) = *($4 + [80])
	$3 = (($4 + [24]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$5 }
	$6 = *((*($3) + $6))
	
.LABEL $label$5
	CALL void $3((int_32 $1), (int_64 ($4 + [112])), (int_32 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$6 }
	CALL $3($2)
	
.LABEL $label$6
	$global$0 = ($4 + [128])
	return [1]
}

void .FUNC $79 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [144])
	$global$0 = $3
	$4 = *($2)
	*(($3 + [136])) = [0]
	$4 = (uint_64)$4 >> (uint_64)(int_64)8
	*($3 + [112]) = $4)
	*($3 + [120]) = (int_64)-1
	*($3 + [128]) = (int_64)0
	$5 = *($0)
	*($3 + [104]) = $5
	$2 = CALL db_find_i64($5, $4, (int_64)-4157508551318700032, $4)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$6 = CALL $87(($3 + [104]), $2)
	if ( ((int_32)*($6 + [40]) == (int_32)($3 + [104])) ){ goto $label$2 }
	CALL eosio_assert([0], [11744])
	
.LABEL $label$2
	CALL require_auth(*($6 + [32]))
	$2 = [0]
	*((($3 + [64]) + [32])) = [0]
	*($3 + [80]) = (int_64)-1
	*($3 + [88]) = (int_64)0
	$5 = *($0)
	*($3 + [64]) = $5
	*($3 + [72]) = $1
	$7 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$2 = CALL $98(($3 + [64]), $7)
	if ( ((int_32)*($2 + [20]) == (int_32)($3 + [64])) ){ goto $label$3 }
	CALL eosio_assert([0], [11744])
	
.LABEL $label$3
	$7 = ($2 + [8])
	$5 = *($7)
	*((($3 + [48]) + [8])) = $5
	$4 = *($2)
	*((($3 + [16]) + [8])) = $5
	*($3 + [48]) = $4
	*($3 + [16]) = $4
	CALL $103($0, $1, ($3 + [16]))
	$1 = *(($6 + [32]))
	*(($6 = (($3 + [32]) + [8]))) = *($7)
	$4 = *($2)
	*(($3 + [8])) = *($6)
	*($3 + [32]) = $4
	*($3) = *($3 + [32])
	CALL $94($0, $1, $3, $1)
	$6 = *($3 + [88])
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = ($3 + [92])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $10($2)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($3 + [88]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL $10($0)
	
.LABEL $label$4
	$6 = *($3 + [128])
	if ( ($6 == 0) ){ goto $label$9 }
	$7 = ($3 + [132])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $10($2)
	
.LABEL $label$13
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($3 + [128]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $6
	
.LABEL $label$10
	*($7) = $6
	CALL $10($0)
	
.LABEL $label$9
	$global$0 = ($3 + [144])
	return (unreachable)
	
.LABEL $label$1
	CALL eosio_assert([0], [10824])
}

int_32 .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11795])
	
.LABEL $label$5
	$4 = CALL $2($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($4 + $5)
	*(($5 = CALL $8([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = [0]
	*($5 + [20]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [16])
	*($3 + [40]) = $5
	CALL $173(($3 + [40]), ($3 + [32]))
	*($5 + [24]) = $1
	*($3 + [32]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [40]) = $7)
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [32]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $100(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $3($4)
	
.LABEL $label$7
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$4 = *(*(*($0 + [4])))
	$5 = (uint_64)$4 >> (uint_64)(int_64)8)
	$6 = *($0)
	$7 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$5 = $8
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = $8
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$9 = ((int_32)$7 < (int_32)[6])
	$10 = ($7 + [1])
	$7 = $10
	if ( $9 ){ goto $label$5 }
	$7 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [10227])
	
.LABEL $label$1
	*($1 + [8]) = $4
	*($1) = (int_64)0
	$9 = $2
	$7 = ($9 + [-32])
	$global$0 = $7
	*($3 + [4]) = $7
	*($3) = $7
	*($3 + [8]) = ($9 + [-15])
	*($3 + [16]) = $3
	*($3 + [28]) = ($1 + [16])
	*($3 + [24]) = $1
	CALL $125(($3 + [24]), ($3 + [16]))
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [24]) = CALL db_store_i64(*($6 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $5), $7, [17])
	if ( (uint_64)($5 <= *($6 + [16])) ){ goto $label$6 }
	*(($6 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$6
	$global$0 = ($3 + [32])
}

void .FUNC $94 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [112])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	$6 = *($2 + [8])
	*($4 + [16]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $98(($4 + [8]), $0)
	if ( ((int_32)*($0 + [20]) == (int_32)($4 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [11744])
	
.LABEL $label$4
	*($4 + [48]) = $2
	CALL $124(($4 + [8]), $0, $3, ($4 + [48]))
	$7 = *($4 + [32])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((int_64)$5 == (int_64)CALL current_receiver()) ){ goto $label$5 }
	CALL eosio_assert([0], [12458])
	
.LABEL $label$5
	*(($0 = CALL $8([32])) + [20]) = ($4 + [8])
	*($0 + [16]) = [1]
	*($0 + [8]) = *(($2 + [8]))
	*($0) = *($2)
	*($4 + [88]) = (($4 + [48]) + [17])
	*($4 + [84]) = ($4 + [48])
	*($4 + [80]) = ($4 + [48])
	*($4 + [96]) = ($4 + [80])
	*($4 + [108]) = ($0 + [16])
	*($4 + [104]) = $0
	CALL $125(($4 + [104]), ($4 + [96]))
	$1 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8
	$7 = CALL db_store_i64(*((($4 + [8]) + [8])), (int_64)3607749779137757184, $3, $1), ($4 + [48]), [17]
	*($0 + [24]) = $7)
	$2 = (($4 + [8]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$6 }
	*($2) = ((int_64)$1 + (int_64)1)
	
.LABEL $label$6
	*($4 + [80]) = $0
	$1 = (uint_64)*(($0 + [8])) >> (uint_64)(int_64)8
	*($4 + [48]) = $1)
	*($4 + [104]) = $7
	$8 = ($4 + [36])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*((($4 + [8]) + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $1
	*($2 + [16]) = $7
	*($4 + [80]) = [0]
	*($2) = $0
	*($8) = ($2 + [24])
	$0 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( $0 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $100(($4 + [32]), ($4 + [80]), ($4 + [48]), ($4 + [104]))
	$0 = *($4 + [80])
	*($4 + [80]) = [0]
	if ( ($0 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $10($0)
	
.LABEL $label$7
	$7 = *($4 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($4 + [36])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$11 }
	
.LOOP $label$12:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $10($2)
	
.LABEL $label$13
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$12 }
	$0 = *(($4 + [32]))
	goto $label$10 
	
.LABEL $label$11
	$0 = $7
	
.LABEL $label$10
	*($8) = $7
	CALL $10($0)
	
.LABEL $label$1
	$global$0 = ($4 + [112])
}

void .FUNC $95 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL $8($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $56($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [68]) = $7
	*($4 + [64]) = $7
	*($4 + [72]) = $2
	*($4 + [80]) = ($4 + [64])
	*($4 + [88]) = $3
	CALL $130(($4 + [88]), ($4 + [80]))
	CALL $57(($4 + [24]))
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [56])) = $7
	CALL $10($7)
	
.LABEL $label$7
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $7
	CALL $10($7)
	
.LABEL $label$8
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [12]) = $7
	CALL $10($7)
	
.LABEL $label$9
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $16(($4 + [8]))
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11818])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = *($0)
	$4 = *($1)
	*($2 + [8]) = (int_64)0
	$5 = *($4 + [4])
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11818])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $5, [8])
	*($0 + [8]) = *($2 + [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($0 + [16])
	$1 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $1) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11818])
	$1 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $1, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $97 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*($6 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11744])
	return $6
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-4157508551318700032, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $87($0, $5)
	if ( ((int_32)*($6 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [11744])
	return $6
	
.LABEL $label$5
	CALL eosio_assert([0], $2)
	
.LABEL $label$1
	return $6
}

void .FUNC $90 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12894])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12940])
	
.LABEL $label$2
	$5 = *($2)
	*($1 + [16]) = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [32]) = *(*($2 + [4]))
	$6 = *($1 + [8])
	$3 = $3
	$2 = ($3 + [-48])
	$global$0 = $2
	*($4 + [12]) = $2
	*($4 + [8]) = $2
	*($4 + [16]) = ($3 + [-8])
	*($4 + [24]) = ($4 + [8])
	*($4 + [36]) = ($1 + [16])
	*($4 + [32]) = $1
	*($4 + [40]) = ($1 + [32])
	CALL $88(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [44]), (int_64)0, $2, [40])
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( (uint_64)($6) <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $137($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $44($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $44($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $40($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [16]))
	*($2 + [32]) = *($1 + [8])
	$4 = *($1)
	$1 = CALL $41(($2 + [16]), ($1 + [24]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$5 = *($0 + [4])
	$3 = (*($0) + int_32($5 >> [1]))
	$0 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($6 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$5 = CALL $41(($2 + [64]), $1)
	*(($2 + [8])) = *($6)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $4), (int_64 $2), (int_32 $5), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($5 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [40]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12894])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12940])
	
.LABEL $label$2
	$5 = *($1 + [8])
	$2 = *($2)
	if ( ((int_64)*($2 + [8]) == (int_64)$5) ){ goto $label$3 }
	CALL eosio_assert([0], [13050])
	
.LABEL $label$3
	$6 = ((int_64)*($1) + (int_64)*($2))
	*($1) = $6
	if ( ((int_64)$6 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [13093])
	$6 = *($1)
	
.LABEL $label$4
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)$6 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [13112])
	
.LABEL $label$5
	if ( ((int_64)$5 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [12991])
	
.LABEL $label$6
	$2 = $3
	$3 = ($2 + [-48])
	$global$0 = $3
	*($4 + [12]) = $3
	*($4 + [8]) = $3
	*($4 + [16]) = ($2 + [-8])
	*($4 + [24]) = ($4 + [8])
	*($4 + [32]) = $1
	*($4 + [36]) = ($1 + [16])
	*($4 + [40]) = ($1 + [32])
	CALL $88(($4 + [32]), ($4 + [24]))
	CALL db_update_i64(*($1 + [44]), (int_64)0, $3, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$5 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($4 + [48])
}

void .FUNC $138 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [88]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	*($3 + [80]) = (int_64)0
	*($3 + [72]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [72]), $5, [8])
	*($3 + [40]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $5, [8])
	*(($5 = (($3 + [72]) + [8]))) = *($3 + [40])
	*((($3 + [40]) + [24])) = $4
	$7 = *($5)
	*((($3 + [24]) + [8])) = $7
	*((($3 + [8]) + [8])) = $7
	*($3 + [56]) = $2
	*(($3 + [60])) = ($2 + [24])
	*($3 + [48]) = $1
	*($3 + [40]) = $0
	$0 = *($3 + [72])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $72(($3 + [40]), *($3 + [88]), ($3 + [8]))
	$global$0 = ($3 + [96])
}

void .FUNC $139 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [88]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$5
	CALL memcpy(($3 + [88]), $2, [8])
	*($3 + [80]) = (int_64)0
	*($3 + [72]) = (int_64)0
	$5 = ($2 + [8])
	$6 = ($4 & [-8])
	if ( ((int_32)$6 != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$6
	$4 = ($2 + $4)
	CALL memcpy(($3 + [72]), $5, [8])
	*($3 + [40]) = (int_64)0
	$5 = ($2 + [16])
	if ( ((int_32)$6 != (int_32)[16]) ){ goto $label$7 }
	CALL eosio_assert([0], [11818])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $5, [8])
	*(($5 = (($3 + [72]) + [8]))) = *($3 + [40])
	*((($3 + [40]) + [24])) = $4
	$7 = *($5)
	*((($3 + [24]) + [8])) = $7
	*((($3 + [8]) + [8])) = $7
	*($3 + [56]) = $2
	*(($3 + [60])) = ($2 + [24])
	*($3 + [48]) = $1
	*($3 + [40]) = $0
	$0 = *($3 + [72])
	*($3 + [24]) = $0
	*($3 + [8]) = $0
	CALL $74(($3 + [40]), *($3 + [88]), ($3 + [8]))
	$global$0 = ($3 + [96])
}

void .FUNC $130 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11673])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11673])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11673])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11673])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $164(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	$4 = CALL current_receiver()
	*(($3 + [152])) = [0]
	*($3 + [128]) = $4
	*($3 + [120]) = $4
	*($3 + [136]) = (int_64)-1
	*($3 + [144]) = (int_64)0
	*($3 + [156]) = [0]
	*($3 + [104]) = (int_64)0
	*($3 + [112]) = [0]
	$5 = (*($1 + [4]) - *($1))
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL $8($5)
	*(($3 + [112])) = ($6 + $5)
	*($3 + [104]) = $6
	*($3 + [108]) = $6
	$7 = *($1)
	$5 = (*(($1 + [4])) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $7, $5)
	*($3 + [108]) = ($6 + $5)
	
.LABEL $label$3
	CALL $155($0, ($3 + [104]))
	$5 = *($3 + [104])
	if ( ($5 == 0) ){ goto $label$4 }
	*($3 + [108]) = $5
	CALL $10($5)
	
.LABEL $label$4
	*($3 + [96]) = ($3 + [120])
	$0 = CALL $41(($3 + [32]), $0)
	CALL $148(($3 + [48]), $0)
	CALL $179(($3 + [88]), ($3 + [96]), ($3 + [48]))
	if ( ((*($0) & [1]) == 0) ){ goto $label$5 }
	CALL $10(*($0 + [8]))
	
.LABEL $label$5
	if ( *($3 + [92]) ){ goto $label$6 }
	*($3 + [52]) = $1
	*($3 + [48]) = ($3 + [120])
	CALL $188(($3 + [24]), ($3 + [120]), $4, ($3 + [48]))
	if ( $2 ){ goto $label$6 }
	*($3 + [16]) = [0]
	*($3 + [8]) = (int_64)0
	$0 = (*(($1 + [4])) - *($1))
	if ( ($0 == 0) ){ goto $label$7 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $8($0)
	*(($3 + [16])) = ($5 + $0)
	*($3 + [8]) = $5
	*($3 + [12]) = $5
	$0 = *($1)
	$1 = (*(($1 + [4])) - $0)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($5, $0, $1)
	*($3 + [12]) = (*($3 + [12]) + $1)
	
.LABEL $label$7
	CALL $180(($3 + [8]))
	$1 = *($3 + [8])
	if ( ($1 == 0) ){ goto $label$6 }
	*($3 + [12]) = $1
	CALL $10($1)
	
.LABEL $label$6
	$6 = *($3 + [144])
	if ( ($6 == 0) ){ goto $label$8 }
	$2 = ($3 + [148])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$10 }
	
.LOOP $label$11:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$12 }
	$5 = *($0 + [8])
	if ( ($5 == 0) ){ goto $label$13 }
	*(($0 + [12])) = $5
	CALL $10($5)
	
.LABEL $label$13
	CALL $10($0)
	
.LABEL $label$12
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$11 }
	$1 = *(($3 + [144]))
	goto $label$9 
	
.LABEL $label$10
	$1 = $6
	
.LABEL $label$9
	*($2) = $6
	CALL $10($1)
	
.LABEL $label$8
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$2
	CALL $16(($3 + [104]))
	
.LABEL $label$1
	CALL $16(($3 + [8]))
	(unreachable)
}

void .FUNC $132 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [64])
	$global$0 = $2
	$3 = *($1)
	if ( ($3 & [1]) ){ goto $label$2 }
	$4 = uint_32($3 >> [1])
	$5 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($1 + [4])
	$5 = *($1 + [8])
	
.LABEL $label$1
	$6 = [0]
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$1 = ($4 + [-8])
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$6 }
	$3 = CALL $8($1)
	*((($2 + [16]) + [8])) = ($3 + $1)
	*($2 + [16]) = $3
	*($2 + [20]) = $3
	if ( ((int_32)$4 != (int_32)[8]) ){ goto $label$8 }
	$5 = $3
	$4 = $3
	goto $label$7 
	
.LABEL $label$9
	$3 = [0]
	$5 = [0]
	$4 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = ($5 + [8])
	$4 = ($4 + [-8])
	
.LOOP $label$10:
	*($3) = *($1)
	$3 = (*($2 + [20]) + [1])
	*($2 + [20]) = $3
	$1 = ($1 + [1])
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$10 }
	$5 = *($2 + [16])
	$4 = $5
	
.LABEL $label$7
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$1 = [0]
	$4 = ($3 - $4)
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$5 }
	$1 = CALL $8($4)
	*(($2 + [8])) = ($1 + $4)
	*($2) = $1
	*($2 + [4]) = $1
	$3 = ($3 - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($1, $5, $3)
	$6 = ($1 + $3)
	*($2 + [4]) = $6
	goto $label$11 
	
.LABEL $label$12
	$6 = $1
	
.LABEL $label$11
	*(($2 + [56])) = [0]
	*($2 + [48]) = (int_64)0
	$5 = ($6 - $1)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$16 }
	*($2 + [48]) = ($5 << [1])
	$4 = (($2 + [48]) | [1])
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	$3 = (($5 + [16]) & [-16])
	$4 = CALL $8($3)
	*($2 + [48]) = ($3 | [1])
	*($2 + [56]) = $4
	*($2 + [52]) = $5
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$14 }
	
.LABEL $label$15
	$3 = $4
	
.LOOP $label$17:
	*($3) = *($1)
	$3 = ($3 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$17 }
	$4 = ($4 + $5)
	
.LABEL $label$14
	*($4) = [0]
	*($2 + [40]) = [0]
	*($2 + [32]) = (int_64)0
	$7 = ( *($2 + [56]) ? (($2 + [48]) | [1]) : (*($2 + [48]) & [1]) )
	$1 = *($7)
	if ( ((uint_32)($1 + [-9]) >= (uint_32)[5]) ){ goto $label$4 }
	$8 = [63]
	goto $label$3 
	
.LABEL $label$13
	CALL $40(($2 + [48]))
	
.LABEL $label$6
	CALL $16(($2 + [16]))
	
.LABEL $label$5
	CALL $16($2)
	
.LABEL $label$4
	$8 = [54]
	
.LABEL $label$3
	
.LOOP $label$18:
	goto $label$120 
	
.LABEL $label$130
	$7 = ($7 + [1])
	$1 = *($7)
	if ( (($1 + [-9]) <= [5]) ){ goto $label$23 }
	$8 = [54]
	goto $label$18 
	
.LABEL $label$129
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$66 }
	$8 = [55]
	goto $label$18 
	
.LABEL $label$128
	if ( ((int_32)$1 != (int_32)[49]) ){ goto $label$22 }
	$8 = [60]
	goto $label$18 
	
.LABEL $label$127
	$1 = [0]
	$8 = [61]
	goto $label$18 
	
.LABEL $label$126
	$3 = ($7 + $1)
	$9 = ($1 + [1])
	$1 = $9
	if ( ((int_32)*(($3 + [1])) == (int_32)[49]) ){ goto $label$19 }
	$8 = [62]
	goto $label$18 
	
.LABEL $label$125
	$7 = ($7 + $9)
	goto $label$21 
	
.LABEL $label$124
	$9 = [0]
	$8 = [57]
	goto $label$18 
	
.LABEL $label$123
	$3 = ((uint_32)((int_32)CALL $1($7) * (int_32)[733]) / (uint_32)[1000])
	$5 = ($3 + [1])
	$10 = CALL $8($5)
	$1 = [0]
	$8 = [58]
	goto $label$18 
	
.LABEL $label$122
	*(($10 + $1)) = [0]
	$1 = ($1 + [1])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$20 }
	$8 = [59]
	goto $label$18 
	
.LABEL $label$121
	$11 = ($7 + [1])
	$12 = ($10 + $5)
	$13 = ($10 + $3)
	$14 = [0]
	$1 = *($7)
	$3 = ($1 + [-9])
	if ( ((uint_32)$3 > (uint_32)[23]) ){ goto $label$63 }
	$8 = [0]
	goto $label$18 
	
.LABEL $label$120
	if ( ((([1] << $3) & [8388639]) == 0) ){ goto $label$64 }
	goto $label$65 
	
.LABEL $label$119
	$11 = ($11 + [1])
	$14 = $3
	$7 = ($7 + [1])
	$1 = *($7)
	$3 = ($1 + [-9])
	if ( ((uint_32)$3 <= (uint_32)[23]) ){ goto $label$62 }
	$8 = [1]
	goto $label$18 
	
.LABEL $label$118
	if ( ($1 == 0) ){ goto $label$61 }
	$8 = [2]
	goto $label$18 
	
.LABEL $label$117
	$4 = *(($1 + [11952]))
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$60 }
	$8 = [3]
	goto $label$18 
	
.LABEL $label$116
	if ( $14 ){ goto $label$59 }
	$8 = [4]
	goto $label$18 
	
.LABEL $label$115
	$3 = [0]
	if ( ((int_32)$1 == (int_32)[49]) ){ goto $label$58 }
	$8 = [6]
	goto $label$18 
	
.LABEL $label$114
	$3 = [0]
	$1 = $13
	$8 = [7]
	goto $label$18 
	
.LABEL $label$113
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$53 }
	$8 = [8]
	goto $label$18 
	
.LABEL $label$112
	$6 = (((int_32)*($1) * (int_32)[58]) + $4)
	*($1) = $6
	$1 = ($1 + [-1])
	$4 = ((int_32)$6 / (int_32)[256])
	$3 = ($3 + [1])
	if ( ($3 <= $14) ){ goto $label$54 }
	$8 = [9]
	goto $label$18 
	
.LABEL $label$111
	if ( ((uint_32)($6 + [255]) > (uint_32)[510]) ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$110
	if ( ($4 == 0) ){ goto $label$55 }
	$8 = [11]
	goto $label$18 
	
.LABEL $label$109
	CALL $55([11891], [11902], [62], [12208])
	
.LABEL $label$108
	$1 = *($11)
	$11 = ($11 + [1])
	$8 = [31]
	goto $label$18 
	
.LABEL $label$107
	$1 = ($1 & [255])
	if ( (($1 + [-9]) <= [5]) ){ goto $label$39 }
	$8 = [32]
	goto $label$18 
	
.LABEL $label$106
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$38 }
	$8 = [33]
	goto $label$18 
	
.LABEL $label$105
	if ( $1 ){ goto $label$52 }
	$8 = [34]
	goto $label$18 
	
.LABEL $label$104
	$3 = ($10 + ($5 - $14))
	if ( ((int_32)$3 == (int_32)$12) ){ goto $label$37 }
	$8 = [35]
	goto $label$18 
	
.LABEL $label$103
	$1 = $3
	if ( *($3) ){ goto $label$36 }
	$8 = [47]
	goto $label$18 
	
.LABEL $label$102
	$4 = ([0] - $14)
	$6 = $13
	$1 = [-1]
	$8 = [48]
	goto $label$18 
	
.LABEL $label$101
	$3 = $6
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$24 }
	$8 = [49]
	goto $label$18 
	
.LABEL $label$100
	$6 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( (*((($3 + $4) + [2])) == 0) ){ goto $label$25 }
	$8 = [50]
	goto $label$18 
	
.LABEL $label$99
	$1 = (($3 - $14) + [2])
	$3 = (($6 - $14) + [1])
	goto $label$35 
	
.LABEL $label$98
	$1 = [0]
	if ( ($10 == 0) ){ goto $label$49 }
	$8 = [13]
	goto $label$18 
	
.LABEL $label$97
	CALL $10($10)
	$8 = [14]
	goto $label$18 
	
.LABEL $label$96
	if ( $1 ){ goto $label$48 }
	$8 = [15]
	goto $label$18 
	
.LABEL $label$95
	CALL eosio_assert([0], [11926])
	$8 = [16]
	goto $label$18 
	
.LABEL $label$94
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$1 = *($2 + [32])
	$4 = *($2 + [36])
	$5 = ($4 - $1)
	if ( ($5 == 0) ){ goto $label$47 }
	$8 = [17]
	goto $label$18 
	
.LABEL $label$93
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$46 }
	$8 = [18]
	goto $label$18 
	
.LABEL $label$92
	$3 = CALL $8($5)
	*($0) = $3
	*(($6 = ($0 + [4]))) = $3
	*(($0 + [8])) = ($3 + $5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$45 }
	$8 = [19]
	goto $label$18 
	
.LABEL $label$91
	$8 = [20]
	goto $label$18 
	
.LABEL $label$90
	*($3) = *($1)
	$3 = (*($6) + [1])
	*($6) = $3
	$1 = ($1 + [1])
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$44 }
	$8 = [21]
	goto $label$18 
	
.LABEL $label$89
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$43 }
	$8 = [22]
	goto $label$18 
	
.LABEL $label$88
	*($2 + [36]) = $1
	CALL $10($1)
	$8 = [23]
	goto $label$18 
	
.LABEL $label$87
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$42 }
	$8 = [24]
	goto $label$18 
	
.LABEL $label$86
	CALL $10(*(($2 + [56])))
	$8 = [25]
	goto $label$18 
	
.LABEL $label$85
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$41 }
	$8 = [26]
	goto $label$18 
	
.LABEL $label$84
	*($2 + [4]) = $1
	CALL $10($1)
	$8 = [27]
	goto $label$18 
	
.LABEL $label$83
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$40 }
	$8 = [28]
	goto $label$18 
	
.LABEL $label$82
	*($2 + [20]) = $1
	CALL $10($1)
	$8 = [29]
	goto $label$18 
	
.LABEL $label$81
	$global$0 = ($2 + [64])
	return (unreachable)
	
.LABEL $label$80
	$1 = $12
	goto $label$34 
	
.LABEL $label$79
	$1 = (($3 - $14) + [2])
	$3 = $1
	$8 = [36]
	goto $label$18 
	
.LABEL $label$78
	$3 = (($12 - $3) + $9)
	$6 = *($2 + [32])
	if ( ((uint_32)(*(($2 + [40])) - $6) >= (uint_32)$3) ){ goto $label$33 }
	$8 = [43]
	goto $label$18 
	
.LABEL $label$77
	$4 = *($2 + [36])
	$6 = *($2 + [32])
	$4 = (*($2 + [36]) - $6)
	$14 = CALL $8($3)
	$7 = ($14 + ($4 - $6))
	$5 = ($7 - $4)
	$3 = ($14 + $3)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$26 }
	$8 = [46]
	goto $label$18 
	
.LABEL $label$76
	CALL memcpy($5, $6, $4)
	$6 = *($2 + [32])
	$8 = [44]
	goto $label$18 
	
.LABEL $label$75
	*(($2 + [40])) = $3
	*($2 + [36]) = $7
	*($2 + [32]) = $5
	if ( ($6 == 0) ){ goto $label$32 }
	$8 = [45]
	goto $label$18 
	
.LABEL $label$74
	CALL $10($6)
	$8 = [37]
	goto $label$18 
	
.LABEL $label$73
	*($2 + [63]) = [0]
	CALL $160(($2 + [32]), $9, ($2 + [63]))
	if ( ((int_32)$1 == (int_32)$12) ){ goto $label$31 }
	$8 = [38]
	goto $label$18 
	
.LABEL $label$72
	$4 = ($13 + [1])
	$5 = ($2 + [40])
	$8 = [39]
	goto $label$18 
	
.LABEL $label$71
	$3 = ($1 + [1])
	$6 = *($2 + [36])
	if ( ((int_32)$6 == (int_32)*($5)) ){ goto $label$27 }
	$8 = [40]
	goto $label$18 
	
.LABEL $label$70
	*($6) = *($1)
	*($2 + [36]) = (*($2 + [36]) + [1])
	$1 = $3
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$69
	CALL $161(($2 + [32]), $1)
	$1 = $3
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$30 }
	$8 = [41]
	goto $label$18 
	
.LABEL $label$68
	$1 = [1]
	if ( $10 ){ goto $label$50 }
	goto $label$51 
	
.LABEL $label$67
	CALL $16($0)
	
.LABEL $label$66
	$8 = [63]
	goto $label$18 
	
.LABEL $label$65
	$8 = [31]
	goto $label$18 
	
.LABEL $label$64
	$8 = [1]
	goto $label$18 
	
.LABEL $label$63
	$8 = [1]
	goto $label$18 
	
.LABEL $label$62
	$8 = [0]
	goto $label$18 
	
.LABEL $label$61
	$8 = [31]
	goto $label$18 
	
.LABEL $label$60
	$8 = [12]
	goto $label$18 
	
.LABEL $label$59
	$8 = [6]
	goto $label$18 
	
.LABEL $label$58
	$8 = [5]
	goto $label$18 
	
.LABEL $label$57
	$8 = [7]
	goto $label$18 
	
.LABEL $label$56
	$8 = [5]
	goto $label$18 
	
.LABEL $label$55
	$8 = [5]
	goto $label$18 
	
.LABEL $label$54
	$8 = [7]
	goto $label$18 
	
.LABEL $label$53
	$8 = [10]
	goto $label$18 
	
.LABEL $label$52
	$8 = [12]
	goto $label$18 
	
.LABEL $label$51
	$8 = [14]
	goto $label$18 
	
.LABEL $label$50
	$8 = [13]
	goto $label$18 
	
.LABEL $label$49
	$8 = [14]
	goto $label$18 
	
.LABEL $label$48
	$8 = [16]
	goto $label$18 
	
.LABEL $label$47
	$8 = [21]
	goto $label$18 
	
.LABEL $label$46
	$8 = [30]
	goto $label$18 
	
.LABEL $label$45
	$8 = [21]
	goto $label$18 
	
.LABEL $label$44
	$8 = [20]
	goto $label$18 
	
.LABEL $label$43
	$8 = [23]
	goto $label$18 
	
.LABEL $label$42
	$8 = [25]
	goto $label$18 
	
.LABEL $label$41
	$8 = [27]
	goto $label$18 
	
.LABEL $label$40
	$8 = [29]
	goto $label$18 
	
.LABEL $label$39
	$8 = [53]
	goto $label$18 
	
.LABEL $label$38
	$8 = [53]
	goto $label$18 
	
.LABEL $label$37
	$8 = [52]
	goto $label$18 
	
.LABEL $label$36
	$8 = [36]
	goto $label$18 
	
.LABEL $label$35
	$8 = [36]
	goto $label$18 
	
.LABEL $label$34
	$8 = [36]
	goto $label$18 
	
.LABEL $label$33
	$8 = [37]
	goto $label$18 
	
.LABEL $label$32
	$8 = [37]
	goto $label$18 
	
.LABEL $label$31
	$8 = [41]
	goto $label$18 
	
.LABEL $label$30
	$8 = [39]
	goto $label$18 
	
.LABEL $label$29
	$8 = [41]
	goto $label$18 
	
.LABEL $label$28
	$8 = [39]
	goto $label$18 
	
.LABEL $label$27
	$8 = [42]
	goto $label$18 
	
.LABEL $label$26
	$8 = [44]
	goto $label$18 
	
.LABEL $label$25
	$8 = [48]
	goto $label$18 
	
.LABEL $label$24
	$8 = [51]
	goto $label$18 
	
.LABEL $label$23
	$8 = [63]
	goto $label$18 
	
.LABEL $label$22
	$8 = [56]
	goto $label$18 
	
.LABEL $label$21
	$8 = [57]
	goto $label$18 
	
.LABEL $label$20
	$8 = [58]
	goto $label$18 
	
.LABEL $label$19
	$8 = [61]
	goto $label$18 
	(unreachable)
	(unreachable)
	(unreachable)
	$8
	(unreachable)
}

void .FUNC $133 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [176])
	$global$0 = $4
	$5 = CALL $176($0, $1)
	*((($4 + [152]) + [16])) = *(($5 + [16]))
	*((($4 + [152]) + [8])) = *(($5 + [8]))
	*($4 + [152]) = *($5)
	CALL $177(($4 + [136]), $0, ($4 + [152]), [0])
	*($4 + [88]) = [0]
	*($4 + [80]) = (int_64)0
	$5 = (*($4 + [140]) - *($4 + [136]))
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL $8($5)
	*(($4 + [88])) = ($6 + $5)
	*($4 + [80]) = $6
	*($4 + [84]) = $6
	$7 = *($4 + [136])
	$5 = (*($4 + [140]) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($6, $7, $5)
	*($4 + [84]) = (*($4 + [84]) + $5)
	
.LABEL $label$4
	CALL $178(($4 + [96]), ($4 + [80]), *($4 + [168]), *($4 + [160]))
	$5 = *($4 + [80])
	if ( ($5 == 0) ){ goto $label$5 }
	*($4 + [84]) = $5
	CALL $10($5)
	
.LABEL $label$5
	if ( *($4 + [132]) ){ goto $label$6 }
	CALL eosio_assert([0], [13423])
	
.LABEL $label$6
	$5 = (($4 + [96]) + [24])
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$7 }
	CALL $169($5, *($2), *($2 + [4]))
	
.LABEL $label$7
	*(($4 + [56])) = [0]
	*((($4 + [24]) + [16])) = *((($4 + [96]) + [16]))
	*((($4 + [24]) + [8])) = *((($4 + [96]) + [8]))
	*($4 + [48]) = (int_64)0
	*($4 + [24]) = *($4 + [96])
	$2 = (*(($4 + [124])) - *($4 + [120]))
	if ( ($2 == 0) ){ goto $label$8 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL $8($2)
	*((($4 + [24]) + [24])) = $5
	*(($6 = (($4 + [24]) + [28]))) = $5
	*(($4 + [56])) = ($5 + $2)
	$7 = *((($4 + [96]) + [24]))
	$2 = (*((($4 + [96]) + [28])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($5, $7, $2)
	*($6) = (*($6) + $2)
	
.LABEL $label$8
	*($4 + [60]) = *(($4 + [132]))
	CALL $202(($4 + [64]), ($4 + [24]))
	$2 = *($4 + [136])
	if ( ($2 == 0) ){ goto $label$10 }
	*($4 + [140]) = $2
	CALL $10($2)
	*($4 + [144]) = [0]
	*($4 + [136]) = (int_64)0
	$2 = ($4 + [144])
	goto $label$9 
	
.LABEL $label$10
	$2 = ($4 + [144])
	
.LABEL $label$9
	*($2) = *($4 + [72])
	$2 = *($4 + [64])
	*($4 + [136]) = $2
	$5 = *($4 + [68])
	*($4 + [140]) = $5
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	$6 = *($4 + [48])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($4 + [52])) = $6
	CALL $10($6)
	$2 = *($4 + [136])
	$5 = *($4 + [140])
	
.LABEL $label$11
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$2 = ($5 - $2)
	if ( ($2 == 0) ){ goto $label$12 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $8($2)
	*(($4 + [16])) = ($5 + $2)
	*($4 + [8]) = $5
	*($4 + [12]) = $5
	$6 = *($4 + [136])
	$2 = (*($4 + [140]) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($5, $6, $2)
	*($4 + [12]) = (*($4 + [12]) + $2)
	
.LABEL $label$12
	CALL $203($0, ($4 + [152]), ($4 + [8]))
	$0 = *($4 + [8])
	if ( ($0 == 0) ){ goto $label$13 }
	*($4 + [12]) = $0
	CALL $10($0)
	
.LABEL $label$13
	$0 = *($4 + [120])
	if ( ($0 == 0) ){ goto $label$14 }
	*(($4 + [124])) = $0
	CALL $10($0)
	
.LABEL $label$14
	$0 = *($4 + [136])
	if ( ($0 == 0) ){ goto $label$15 }
	*($4 + [140]) = $0
	CALL $10($0)
	
.LABEL $label$15
	$global$0 = ($4 + [176])
	return (unreachable)
	
.LABEL $label$3
	CALL $16(($4 + [80]))
	
.LABEL $label$2
	CALL $16((($4 + [24]) + [24]))
	
.LABEL $label$1
	CALL $16(($4 + [8]))
	(unreachable)
	(unreachable)
}

void .FUNC $134 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [176])
	$global$0 = $4
	$5 = CALL $176($0, $1)
	*((($4 + [152]) + [16])) = *(($5 + [16]))
	*((($4 + [152]) + [8])) = *(($5 + [8]))
	*($4 + [152]) = *($5)
	CALL $177(($4 + [136]), $0, ($4 + [152]), [0])
	*($4 + [88]) = [0]
	*($4 + [80]) = (int_64)0
	$5 = (*($4 + [140]) - *($4 + [136]))
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = CALL $8($5)
	*(($4 + [88])) = ($6 + $5)
	*($4 + [80]) = $6
	*($4 + [84]) = $6
	$7 = *($4 + [136])
	$5 = (*($4 + [140]) - $7)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($6, $7, $5)
	*($4 + [84]) = (*($4 + [84]) + $5)
	
.LABEL $label$4
	CALL $178(($4 + [96]), ($4 + [80]), *($4 + [168]), *($4 + [160]))
	$5 = *($4 + [80])
	if ( ($5 == 0) ){ goto $label$5 }
	*($4 + [84]) = $5
	CALL $10($5)
	
.LABEL $label$5
	if ( (*($4 + [132]) == 0) ){ goto $label$6 }
	CALL eosio_assert([0], [13353])
	
.LABEL $label$6
	$5 = (($4 + [96]) + [24])
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$7 }
	CALL $169($5, *($2), *($2 + [4]))
	
.LABEL $label$7
	*(($6 = ($4 + [132]))) = [1]
	*(($4 + [56])) = [0]
	*((($4 + [24]) + [16])) = *((($4 + [96]) + [16]))
	*((($4 + [24]) + [8])) = *((($4 + [96]) + [8]))
	*($4 + [48]) = (int_64)0
	*($4 + [24]) = *($4 + [96])
	$2 = (*(($4 + [124])) - *($4 + [120]))
	if ( ($2 == 0) ){ goto $label$8 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$2 }
	$5 = CALL $8($2)
	*((($4 + [24]) + [24])) = $5
	*(($7 = (($4 + [24]) + [28]))) = $5
	*(($4 + [56])) = ($5 + $2)
	$8 = *((($4 + [96]) + [24]))
	$2 = (*((($4 + [96]) + [28])) - $8)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($5, $8, $2)
	*($7) = (*($7) + $2)
	
.LABEL $label$8
	*($4 + [60]) = *($6)
	CALL $202(($4 + [64]), ($4 + [24]))
	$2 = *($4 + [136])
	if ( ($2 == 0) ){ goto $label$10 }
	*($4 + [140]) = $2
	CALL $10($2)
	*($4 + [144]) = [0]
	*($4 + [136]) = (int_64)0
	$2 = ($4 + [144])
	goto $label$9 
	
.LABEL $label$10
	$2 = ($4 + [144])
	
.LABEL $label$9
	*($2) = *($4 + [72])
	$2 = *($4 + [64])
	*($4 + [136]) = $2
	$5 = *($4 + [68])
	*($4 + [140]) = $5
	*($4 + [72]) = [0]
	*($4 + [64]) = (int_64)0
	$6 = *($4 + [48])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($4 + [52])) = $6
	CALL $10($6)
	$2 = *($4 + [136])
	$5 = *($4 + [140])
	
.LABEL $label$11
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$2 = ($5 - $2)
	if ( ($2 == 0) ){ goto $label$12 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $8($2)
	*(($4 + [16])) = ($5 + $2)
	*($4 + [8]) = $5
	*($4 + [12]) = $5
	$6 = *($4 + [136])
	$2 = (*($4 + [140]) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($5, $6, $2)
	*($4 + [12]) = (*($4 + [12]) + $2)
	
.LABEL $label$12
	CALL $203($0, ($4 + [152]), ($4 + [8]))
	$0 = *($4 + [8])
	if ( ($0 == 0) ){ goto $label$13 }
	*($4 + [12]) = $0
	CALL $10($0)
	
.LABEL $label$13
	$0 = *($4 + [120])
	if ( ($0 == 0) ){ goto $label$14 }
	*(($4 + [124])) = $0
	CALL $10($0)
	
.LABEL $label$14
	$0 = *($4 + [136])
	if ( ($0 == 0) ){ goto $label$15 }
	*($4 + [140]) = $0
	CALL $10($0)
	
.LABEL $label$15
	$global$0 = ($4 + [176])
	return (unreachable)
	
.LABEL $label$3
	CALL $16(($4 + [80]))
	
.LABEL $label$2
	CALL $16((($4 + [24]) + [24]))
	
.LABEL $label$1
	CALL $16(($4 + [8]))
	(unreachable)
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [176])
	$global$0 = $2
	$3 = CALL $176($0, $1)
	*((($2 + [152]) + [16])) = *(($3 + [16]))
	*((($2 + [152]) + [8])) = *(($3 + [8]))
	*($2 + [152]) = *($3)
	CALL $177(($2 + [136]), $0, ($2 + [152]), [0])
	*($2 + [88]) = [0]
	*($2 + [80]) = (int_64)0
	$3 = (*($2 + [140]) - *($2 + [136]))
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	$4 = CALL $8($3)
	*(($2 + [88])) = ($4 + $3)
	*($2 + [80]) = $4
	*($2 + [84]) = $4
	$5 = *($2 + [136])
	$3 = (*($2 + [140]) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $5, $3)
	*($2 + [84]) = (*($2 + [84]) + $3)
	
.LABEL $label$4
	CALL $178(($2 + [96]), ($2 + [80]), *($2 + [168]), *($2 + [160]))
	$3 = *($2 + [80])
	if ( ($3 == 0) ){ goto $label$5 }
	*($2 + [84]) = $3
	CALL $10($3)
	
.LABEL $label$5
	if ( *($2 + [132]) ){ goto $label$6 }
	CALL eosio_assert([0], [13423])
	
.LABEL $label$6
	*(($5 = ($2 + [132]))) = [0]
	*(($2 + [56])) = [0]
	*((($2 + [24]) + [16])) = *((($2 + [96]) + [16]))
	*((($2 + [24]) + [8])) = *((($2 + [96]) + [8]))
	*($2 + [48]) = (int_64)0
	*($2 + [24]) = *($2 + [96])
	$3 = (*(($2 + [124])) - *($2 + [120]))
	if ( ($3 == 0) ){ goto $label$7 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$2 }
	$4 = CALL $8($3)
	*((($2 + [24]) + [24])) = $4
	*(($6 = (($2 + [24]) + [28]))) = $4
	*(($2 + [56])) = ($4 + $3)
	$7 = *((($2 + [96]) + [24]))
	$3 = (*((($2 + [96]) + [28])) - $7)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $7, $3)
	*($6) = (*($6) + $3)
	
.LABEL $label$7
	*($2 + [60]) = *($5)
	CALL $202(($2 + [64]), ($2 + [24]))
	$3 = *($2 + [136])
	if ( ($3 == 0) ){ goto $label$9 }
	*($2 + [140]) = $3
	CALL $10($3)
	*($2 + [144]) = [0]
	*($2 + [136]) = (int_64)0
	$3 = ($2 + [144])
	goto $label$8 
	
.LABEL $label$9
	$3 = ($2 + [144])
	
.LABEL $label$8
	*($3) = *($2 + [72])
	$3 = *($2 + [64])
	*($2 + [136]) = $3
	$4 = *($2 + [68])
	*($2 + [140]) = $4
	*($2 + [72]) = [0]
	*($2 + [64]) = (int_64)0
	$5 = *($2 + [48])
	if ( ($5 == 0) ){ goto $label$10 }
	*(($2 + [52])) = $5
	CALL $10($5)
	$3 = *($2 + [136])
	$4 = *($2 + [140])
	
.LABEL $label$10
	*($2 + [16]) = [0]
	*($2 + [8]) = (int_64)0
	$3 = ($4 - $3)
	if ( ($3 == 0) ){ goto $label$11 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $8($3)
	*(($2 + [16])) = ($4 + $3)
	*($2 + [8]) = $4
	*($2 + [12]) = $4
	$5 = *($2 + [136])
	$3 = (*($2 + [140]) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$11 }
	CALL memcpy($4, $5, $3)
	*($2 + [12]) = (*($2 + [12]) + $3)
	
.LABEL $label$11
	CALL $203($0, ($2 + [152]), ($2 + [8]))
	$0 = *($2 + [8])
	if ( ($0 == 0) ){ goto $label$12 }
	*($2 + [12]) = $0
	CALL $10($0)
	
.LABEL $label$12
	$0 = *($2 + [120])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($2 + [124])) = $0
	CALL $10($0)
	
.LABEL $label$13
	$0 = *($2 + [136])
	if ( ($0 == 0) ){ goto $label$14 }
	*($2 + [140]) = $0
	CALL $10($0)
	
.LABEL $label$14
	$global$0 = ($2 + [176])
	return (unreachable)
	
.LABEL $label$3
	CALL $16(($2 + [80]))
	
.LABEL $label$2
	CALL $16(($2 + [48]))
	
.LABEL $label$1
	CALL $16(($2 + [8]))
	(unreachable)
	(unreachable)
}

void .FUNC $136 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [80])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $2($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [68]) = $2
	*($3 + [64]) = $2
	$5 = ($2 + $4)
	*($3 + [72]) = $5
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	$5 = *(($3 + [72]))
	$2 = *($3 + [68])
	
.LABEL $label$5
	CALL memcpy(($3 + [56]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [68]) = $2
	*($3 + [48]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [11818])
	$5 = *((($3 + [64]) + [8]))
	$2 = *($3 + [68])
	
.LABEL $label$6
	CALL memcpy(($3 + [48]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [68]) = $2
	*($3 + [40]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11818])
	$5 = *(($3 + [72]))
	$2 = *($3 + [68])
	
.LABEL $label$7
	CALL memcpy(($3 + [40]), $2, [8])
	$2 = ($2 + [8])
	*($3 + [68]) = $2
	*($3 + [32]) = (int_64)0
	if ( ((uint_32)($5 - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [11818])
	$2 = *($3 + [68])
	
.LABEL $label$8
	CALL memcpy(($3 + [32]), $2, [8])
	*($3 + [68]) = ($2 + [8])
	*($3 + [24]) = [0]
	*($3 + [16]) = (int_64)0
	CALL $137(($3 + [64]), ($3 + [16]))
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$2 = (*($3 + [20]) - *($3 + [16]))
	if ( ($2 == 0) ){ goto $label$10 }
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$9 }
	$5 = CALL $8($2)
	*(($3 + [8])) = ($5 + $2)
	*($3) = $5
	*($3 + [4]) = $5
	$4 = *($3 + [16])
	$2 = (*($3 + [20]) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($5, $4, $2)
	*($3 + [4]) = (*($3 + [4]) + $2)
	
.LABEL $label$10
	CALL require_recipient((int_64)5308437925463201152)
	$2 = *($3)
	if ( ($2 == 0) ){ goto $label$11 }
	*($3 + [4]) = $2
	CALL $10($2)
	
.LABEL $label$11
	$2 = *($3 + [16])
	if ( ($2 == 0) ){ goto $label$12 }
	*($3 + [20]) = $2
	CALL $10($2)
	
.LABEL $label$12
	$global$0 = ($3 + [80])
	return (unreachable)
	
.LABEL $label$9
	CALL $16($3)
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [13349])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $56($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [11818])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $202 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0) = [0]
	*($0 + [4 align=4]) = (int_64)0
	$4 = *($1 + [4])
	$5 = (*($4 + [4]) - *($4))
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $8($5)
	*(($6 = ($0 + [4]))) = $3
	*(($0 + [8])) = ($3 + $5)
	*($0) = $3
	$5 = *($4)
	$4 = (*(($4 + [4])) - $5)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $5, $4)
	$3 = (*($6) + $4)
	*($6) = $3
	
.LABEL $label$3
	if ( (*($1 + [36]) == 0) ){ goto $label$4 }
	$4 = ($1 + [16])
	CALL $204($0, $3, $4, ($1 + [24]))
	$3 = ($0 + [4])
	CALL $204($0, *($3), ($1 + [8]), $4)
	CALL $205($0, *($3), *($1 + [24]), *(($1 + [28])))
	
.LABEL $label$4
	*($2) = [0]
	*($2 + [4 align=4]) = (int_64)0
	$3 = *($1)
	$4 = (*($3 + [4]) - *($3))
	if ( ($4 == 0) ){ goto $label$5 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$1 = CALL $8($4)
	*(($2 + [8])) = ($1 + $4)
	*($2 + [4]) = $1
	*($2) = $1
	$4 = $1
	$5 = *($3)
	$3 = (*(($3 + [4])) - $5)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $3)
	$4 = ($1 + $3)
	*($2 + [4]) = $4
	
.LABEL $label$6
	CALL $205($0, *(($0 + [4])), $1, $4)
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [4]) = $1
	CALL $10($1)
	
.LABEL $label$7
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$5
	CALL $205($0, *(($0 + [4])), [0], [0])
	$global$0 = ($2 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $16($0)
	
.LABEL $label$1
	CALL $16($2)
}

void .FUNC $203 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [208])
	$global$0 = $3
	$4 = CALL current_receiver()
	$5 = CALL current_receiver()
	$6 = [0]
	*(($3 + [184])) = [0]
	*($3 + [160]) = $5
	*($3 + [152]) = $4
	*($3 + [168]) = (int_64)-1
	*($3 + [176]) = (int_64)0
	$7 = CALL db_find_i64($4, $5, (int_64)-2769561580919062528, *($1 + [4]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL $182(($3 + [152]), $7)
	if ( ((int_32)*($6 + [24]) == (int_32)($3 + [152])) ){ goto $label$1 }
	CALL eosio_assert([0], [11744])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [13372])
	
.LABEL $label$1
	*($3 + [136]) = (int_64)0
	*($3 + [144]) = [0]
	$8 = [0]
	$9 = [0]
	$7 = (*($6 + [4]) - *($6))
	if ( ($7 == 0) ){ goto $label$9 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$7 }
	$8 = CALL $8($7)
	*(($3 + [144])) = ($8 + $7)
	*($3 + [140]) = $8
	*($3 + [136]) = $8
	$9 = *($6)
	$7 = (*(($6 + [4])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($8, $9, $7)
	$9 = (*($3 + [140]) + $7)
	*($3 + [140]) = $9
	$8 = *($3 + [136])
	
.LABEL $label$9
	*($3 + [96]) = [0]
	*($3 + [88]) = (int_64)0
	$7 = ($9 - $8)
	if ( ($7 == 0) ){ goto $label$5 }
	goto $label$6 
	
.LABEL $label$8
	*($3 + [96]) = [0]
	*($3 + [88]) = (int_64)0
	$7 = ($8 - $8)
	if ( $7 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $16(($3 + [136]))
	
.LABEL $label$6
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$4 }
	$8 = CALL $8($7)
	*(($3 + [96])) = ($8 + $7)
	*($3 + [88]) = $8
	*($3 + [92]) = $8
	$9 = *($3 + [136])
	$7 = (*($3 + [140]) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $9, $7)
	*($3 + [92]) = (*($3 + [92]) + $7)
	
.LABEL $label$5
	CALL $158(($3 + [104]), ($3 + [88]))
	CALL $187(($3 + [120]), ($3 + [104]), [0])
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*($3 + [112]))
	
.LABEL $label$10
	$7 = *($3 + [88])
	if ( ($7 == 0) ){ goto $label$11 }
	*($3 + [92]) = $7
	CALL $10($7)
	
.LABEL $label$11
	*($3 + [48]) = [0]
	*($3 + [40]) = (int_64)0
	$7 = (*($2 + [4]) - *($2))
	if ( ($7 == 0) ){ goto $label$12 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$3 }
	$8 = CALL $8($7)
	*(($3 + [48])) = ($8 + $7)
	*($3 + [40]) = $8
	*($3 + [44]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$12 }
	CALL memcpy($8, $7, $2)
	*($3 + [44]) = (*($3 + [44]) + $2)
	
.LABEL $label$12
	CALL $131(($3 + [56]), ($3 + [40]), *($0 + [17]))
	CALL $132(($3 + [72]), ($3 + [56]))
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*($3 + [64]))
	
.LABEL $label$13
	$2 = *($3 + [40])
	if ( ($2 == 0) ){ goto $label$14 }
	*($3 + [44]) = $2
	CALL $10($2)
	
.LABEL $label$14
	$2 = (*($3 + [120]) + ((int_32)*($1) * (int_32)[12]))
	if ( ((int_32)$2 == (int_32)($3 + [72])) ){ goto $label$15 }
	CALL $169($2, *($3 + [72]), *($3 + [76]))
	
.LABEL $label$15
	$8 = CALL $184(($3 + [8]), ($3 + [120]))
	$2 = *($0 + [16])
	CALL $185(($3 + [192]), $8)
	CALL $131(($3 + [24]), ($3 + [192]), $2)
	$2 = *($3 + [192])
	if ( ($2 == 0) ){ goto $label$16 }
	*($3 + [196]) = $2
	CALL $10($2)
	
.LABEL $label$16
	CALL $132(($3 + [192]), ($3 + [24]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$17 }
	CALL $10(*($3 + [32]))
	
.LABEL $label$17
	$7 = *($8)
	if ( ($7 == 0) ){ goto $label$18 }
	$0 = *($8 + [4])
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($0 + [-12])
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$22 }
	*(($0 + [-8])) = $1
	CALL $10($1)
	
.LABEL $label$22
	$0 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$21 }
	$2 = *($8)
	goto $label$19 
	
.LABEL $label$20
	$2 = $7
	
.LABEL $label$19
	*(($8 + [4])) = $7
	CALL $10($2)
	
.LABEL $label$18
	*($3) = ($3 + [192])
	if ( $6 ){ goto $label$23 }
	CALL eosio_assert([0], [13388])
	
.LABEL $label$23
	CALL $206(($3 + [152]), $6, (int_64)0, $3)
	$2 = *($3 + [192])
	if ( ($2 == 0) ){ goto $label$24 }
	*($3 + [196]) = $2
	CALL $10($2)
	
.LABEL $label$24
	$2 = *($3 + [72])
	if ( ($2 == 0) ){ goto $label$25 }
	*($3 + [76]) = $2
	CALL $10($2)
	
.LABEL $label$25
	$7 = *($3 + [120])
	if ( ($7 == 0) ){ goto $label$26 }
	$0 = *($3 + [124])
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = ($0 + [-12])
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$30 }
	*(($0 + [-8])) = $1
	CALL $10($1)
	
.LABEL $label$30
	$0 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$29 }
	$2 = *($3 + [120])
	goto $label$27 
	
.LABEL $label$28
	$2 = $7
	
.LABEL $label$27
	*($3 + [124]) = $7
	CALL $10($2)
	
.LABEL $label$26
	$2 = *($3 + [136])
	if ( ($2 == 0) ){ goto $label$31 }
	*($3 + [140]) = $2
	CALL $10($2)
	
.LABEL $label$31
	$7 = *($3 + [176])
	if ( ($7 == 0) ){ goto $label$32 }
	$6 = ($3 + [180])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$34 }
	
.LOOP $label$35:
	$2 = ($2 + [-24])
	$0 = *($2)
	*($2) = [0]
	if ( ($0 == 0) ){ goto $label$36 }
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$37 }
	*($0 + [4]) = $1
	CALL $10($1)
	
.LABEL $label$37
	CALL $10($0)
	
.LABEL $label$36
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$35 }
	$2 = *(($3 + [176]))
	goto $label$33 
	
.LABEL $label$34
	$2 = $7
	
.LABEL $label$33
	*($6) = $7
	CALL $10($2)
	
.LABEL $label$32
	$global$0 = ($3 + [208])
	return (unreachable)
	
.LABEL $label$4
	CALL $16(($3 + [88]))
	
.LABEL $label$3
	CALL $16(($3 + [40]))
	(unreachable)
	(unreachable)
}

void .FUNC $200 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [56]) = [12663]
	*($3 + [60]) = CALL $1([12663])
	*($3) = *($3 + [56])
	$4 = CALL $128(($3 + [64]), $3)
	CALL $201(($3 + [40]), $2)
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$6 = *($3 + [40])
	$5 = *($3 + [44])
	$7 = ($5 - $6)
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$7 > (uint_32)[10]) ){ goto $label$7 }
	*($3 + [24]) = ($7 << [1])
	$8 = (($3 + [24]) | [1])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($7 + [16]) & [-16])
	$8 = CALL $8($9)
	*($3 + [24]) = ($9 | [1])
	*($3 + [32]) = $8
	*($3 + [28]) = $7
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$9 = $8
	
.LOOP $label$8:
	*($9) = *($6)
	$9 = ($9 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$8 }
	$8 = ($8 + $7)
	
.LABEL $label$5
	*($8) = [0]
	CALL $60(($3 + [8]), ($3 + [24]))
	CALL prints([13256])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13258])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13266])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13272])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13278])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13294])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL printn(CALL $fimport$3())
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13300])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL printn($0)
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13308])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL printn(*($4))
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13315])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL printn($1)
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13324])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints(( *($3 + [16]) ? (($3 + [8]) | [1]) : (*($3 + [8]) & [1]) ))
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13329])
	if ( (*($2 + [12]) == 0) ){ goto $label$9 }
	CALL eosio_assert([0], [13332])
	
.LABEL $label$9
	if ( (*($3 + [8]) & [1]) ){ goto $label$11 }
	if ( (*($3 + [24]) & [1]) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	CALL $10(*(($3 + [16])))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$10
	CALL $10(*($3 + [32]))
	$6 = *($3 + [40])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $40(($3 + [24]))
	
.LABEL $label$3
	$6 = *($3 + [40])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [44]) = $6
	CALL $10($6)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
	(unreachable)
}

void .FUNC $201 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = *($1)
	$4 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ((int_32)$4 ^ (int_32)[-1])
	$5 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$3 = ($3 + [-1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $56($0, ([0] - $3))
	$4 = *(($0 + [4]))
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	$3 = [0]
	
.LABEL $label$2
	*($2 + [4]) = $3
	*($2) = $3
	*($2 + [8]) = $4
	CALL $164($2, $1)
	*($2 + [15]) = *($1 + [12])
	$3 = *($2 + [4])
	if ( ((int_32)(*($2 + [8]) - $3) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [11673])
	$3 = *($2 + [4])
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [15]), [1])
	$global$0 = ($2 + [16])
}

void .FUNC $206 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12894])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12940])
	
.LABEL $label$2
	$6 = ($1 + [16])
	$7 = *($1 + [16])
	$3 = *($3)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$3 }
	CALL $169($1, *($3), *($3 + [4]))
	if ( ((int_64)$7 == (int_64)*($6)) ){ goto $label$3 }
	CALL eosio_assert([0], [12991])
	
.LABEL $label$3
	$9 = *($1)
	$8 = *($1 + [4])
	$3 = (($8 + [8]) - $9)
	$10 = (CASTING uint_64)(uint_32 ($8 - $9))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $2($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL $147($5, $1)
	$8 = *($5 + [4])
	if ( ((int_32)(*($5 + [8]) - $8) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11673])
	$8 = *($5 + [4])
	
.LABEL $label$7
	CALL memcpy($8, $6, [8])
	*($5 + [4]) = (*($5 + [4]) + [8])
	CALL db_update_i64(*(($1 + [28])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $3($4)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

int_32 .FUNC $204 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($3 - $2)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$2 }
	$6 = *($0 + [4])
	$5 = *($0 + [8])
	if ( ((int_32)$4 <= (int_32)($5 - $6)) ){ goto $label$7 }
	$7 = *($0)
	$4 = (($6 - $7) + $4)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$6 = ($5 - $7)
	if ( ((uint_32)$6 >= (uint_32)[1073741823]) ){ goto $label$6 }
	$7 = ($1 - $7)
	$6 = ($6 << [1])
	$5 = ( $4 ? $6 : ($6 <= $4) )
	if ( $5 ){ goto $label$5 }
	$5 = [0]
	$8 = [0]
	$6 = ([0] + $7)
	$4 = $6
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	$7 = ($6 - $1)
	if ( ((int_32)$4 <= (int_32)$7) ){ goto $label$9 }
	$5 = $6
	$8 = ($2 + $7)
	$3 = ($3 - $8)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($6, $8, $3)
	$5 = (*($5) + $3)
	*(($5 = ($0 + [4]))) = $5
	
.LABEL $label$10
	if ( ((int_32)$7 >= (int_32)[1]) ){ goto $label$8 }
	goto $label$2 
	
.LABEL $label$9
	$5 = $6
	$8 = $3
	
.LABEL $label$8
	$7 = ($5 - ($1 + $4))
	$4 = ($5 - $4)
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$11 }
	$3 = ($0 + [4])
	$0 = $5
	
.LOOP $label$12:
	*($0) = *($4)
	$0 = (*($3) + [1])
	*($3) = $0
	$4 = ($4 + [1])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($7 == 0) ){ goto $label$13 }
	CALL memmove(($5 - $7), $1, $7)
	
.LABEL $label$13
	$4 = ($8 - $2)
	if ( ($4 == 0) ){ goto $label$2 }
	CALL memmove($1, $2, $4)
	return $1
	
.LABEL $label$6
	$7 = ($1 - $7)
	$5 = [2147483647]
	
.LABEL $label$5
	$8 = CALL $8($5)
	$6 = ($8 + $7)
	$4 = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($3 + ($7 - $2))
	$4 = $6
	
.LOOP $label$14:
	*($4) = *($2)
	$4 = ($4 + [1])
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$14 }
	$4 = ($8 + $7)
	
.LABEL $label$3
	$7 = *($0)
	$2 = ($1 - $7)
	$3 = ($6 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($3, $7, $2)
	
.LABEL $label$15
	$5 = ($8 + $5)
	$7 = ($0 + [4])
	$2 = (*($7) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($4, $1, $2)
	$4 = ($4 + $2)
	
.LABEL $label$16
	*($7) = $4
	$2 = *($0)
	*($0) = $3
	*(($0 + [8])) = $5
	if ( ($2 == 0) ){ goto $label$17 }
	CALL $10($2)
	
.LABEL $label$17
	$1 = $6
	
.LABEL $label$2
	return $1
	
.LABEL $label$1
	CALL $16($0)
	return (unreachable)
}

int_32 .FUNC $205 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$4 = ($3 - $2)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$2 }
	$6 = *($0 + [4])
	$5 = *($0 + [8])
	if ( ((int_32)$4 <= (int_32)($5 - $6)) ){ goto $label$7 }
	$7 = *($0)
	$8 = (($6 - $7) + $4)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = ($5 - $7)
	if ( ((uint_32)$5 >= (uint_32)[1073741823]) ){ goto $label$6 }
	$6 = ($1 - $7)
	$5 = ($5 << [1])
	$8 = ( $8 ? $5 : ($5 <= $8) )
	if ( $8 ){ goto $label$5 }
	$8 = [0]
	$4 = [0]
	$7 = ([0] + $6)
	$5 = $7
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$7
	$9 = ($6 - $1)
	if ( ((int_32)$4 <= (int_32)$9) ){ goto $label$9 }
	$8 = $6
	$10 = ($2 + $9)
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$10 }
	$7 = ($0 + [4])
	$8 = $6
	$5 = $10
	
.LOOP $label$11:
	*($8) = *($5)
	$8 = (*($7) + [1])
	*($7) = $8
	$5 = ($5 + [1])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$9 >= (int_32)[1]) ){ goto $label$8 }
	goto $label$2 
	
.LABEL $label$9
	$8 = $6
	$10 = $3
	
.LABEL $label$8
	$9 = ($8 - ($1 + $4))
	$5 = ($8 - $4)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$12 }
	$3 = ($0 + [4])
	$7 = $8
	
.LOOP $label$13:
	*($7) = *($5)
	$7 = (*($3) + [1])
	*($3) = $7
	$5 = ($5 + [1])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($9 == 0) ){ goto $label$14 }
	CALL memmove(($8 - $9), $1, $9)
	
.LABEL $label$14
	$5 = ($10 - $2)
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memmove($1, $2, $5)
	return $1
	
.LABEL $label$6
	$6 = ($1 - $7)
	$8 = [2147483647]
	
.LABEL $label$5
	$4 = CALL $8($8)
	$7 = ($4 + $6)
	$5 = $7
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($3 + ($6 - $2))
	$5 = $7
	
.LOOP $label$15:
	*($5) = *($2)
	$5 = ($5 + [1])
	$2 = ($2 + [1])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$15 }
	$5 = ($4 + $6)
	
.LABEL $label$3
	$6 = *($0)
	$2 = ($1 - $6)
	$3 = ($7 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($3, $6, $2)
	
.LABEL $label$16
	$8 = ($4 + $8)
	$6 = ($0 + [4])
	$2 = (*($6) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($5, $1, $2)
	$5 = ($5 + $2)
	
.LABEL $label$17
	*($6) = $5
	$2 = *($0)
	*($0) = $3
	*(($0 + [8])) = $8
	if ( ($2 == 0) ){ goto $label$18 }
	CALL $10($2)
	
.LABEL $label$18
	$1 = $7
	
.LABEL $label$2
	return $1
	
.LABEL $label$1
	CALL $16($0)
	return (unreachable)
}

void .FUNC $181 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [48])
	$global$0 = $1
	$0 = CALL $41($1, $0)
	*($1 + [24]) = [0]
	*($1 + [16]) = (int_64)0
	*($1 + [28]) = [1]
	CALL $42(($1 + [16]), $0)
	CALL $41(($1 + [32]), ($1 + [16]))
	*($1 + [44]) = *($1 + [28])
	CALL $200((int_64)8455380941646468112, (int_64)0, ($1 + [32]))
	if ( (*($1 + [32]) & [1]) ){ goto $label$5 }
	if ( (*($1 + [16]) & [1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $10(*($1 + [40]))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $10(*(($1 + [24])))
	if ( ((*($0) & [1]) == 0) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( (*($0) & [1]) ){ goto $label$1 }
	
.LABEL $label$2
	$global$0 = ($1 + [48])
	return 
	
.LABEL $label$1
	CALL $10(*($0 + [8]))
	$global$0 = ($1 + [48])
}

void .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11673])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11673])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11673])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11673])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	$1 = *($1)
	*($2 + [7]) = ((int_32)*($5 + [32]) != (int_32)[0])
	$4 = *($1 + [4])
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [11673])
	$4 = *(($1 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, ($2 + [7]), [1])
	*(($1 = ($1 + [4]))) = (*($1) + [1])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $128 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [12688])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [12793])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [12726])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [12793])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $2($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $2($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2) = (int_64)0
	$3 = [0]
	*($2 + [8]) = [0]
	$4 = *($1 + [24])
	$5 = *($1 + [16])
	$6 = *($1 + [8])
	$7 = *($1)
	$8 = (*(($1 + [36])) - *($1 + [32]))
	if ( ($8 == 0) ){ goto $label$6 }
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	$9 = CALL $8($8)
	*(($2 + [8])) = ($9 + $8)
	*($2) = $9
	*($2 + [4]) = $9
	$3 = *(($1 + [32]))
	$1 = (*(($1 + [36])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($9, $3, $1)
	$3 = ($9 + $1)
	*($2 + [4]) = $3
	goto $label$4 
	
.LABEL $label$6
	$9 = [0]
	$8 = [0]
	goto $label$3 
	
.LABEL $label$5
	$3 = $9
	
.LABEL $label$4
	$8 = $9
	
.LABEL $label$3
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$10 = (*($0) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($10) + $1))
	
.LABEL $label$7
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$0 = ($3 - $8)
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$8 = CALL $8($0)
	*(($2 + [24])) = ($8 + $0)
	*($2 + [16]) = $8
	*($2 + [20]) = $8
	$3 = ($3 - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($8, $9, $3)
	*($2 + [20]) = ($8 + $3)
	
.LABEL $label$8
	CALL void $10((int_32 $7), (int_64 $6), (int_64 $5), (int_64 $4), (int_64 ($2 + [16])), (int_32 $1))
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$9 }
	*($2 + [20]) = $1
	CALL $10($1)
	
.LABEL $label$9
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$10 }
	*($2 + [4]) = $1
	CALL $10($1)
	
.LABEL $label$10
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $16($2)
	
.LABEL $label$1
	CALL $16(($2 + [16]))
	(unreachable)
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11818])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11818])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [16])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11818])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [24])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11818])
	$4 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	CALL $137(*($1), ($3 + [32]))
}

void .FUNC $121 (int_64 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [136]) = $3
	*($4 + [120]) = [12679]
	*($4 + [124]) = CALL $1([12679])
	*($4 + [8]) = *($4 + [120])
	$5 = CALL $128(($4 + [128]), ($4 + [8]))
	*($4 + [112]) = [0]
	*($4 + [104]) = (int_64)0
	CALL $56(($4 + [104]), [8])
	$6 = *($4 + [104])
	if ( ((int_32)(*($4 + [108]) - $6) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11673])
	
.LABEL $label$1
	CALL memcpy($6, ($4 + [136]), [8])
	$3 = CALL current_receiver()
	$7 = CALL current_receiver()
	*(($4 + [56])) = [0]
	*($4 + [16]) = $0
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [48]) = (int_64)0
	*($4 + [24]) = *($5)
	$5 = (*($4 + [108]) - *($4 + [104]))
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL $8($5)
	*(($4 + [48])) = $6
	*(($8 = ($4 + [52]))) = $6
	*(($4 + [56])) = ($6 + $5)
	$9 = *($4 + [104])
	$5 = (*($4 + [108]) - $9)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $9, $5)
	*($8) = (*($8) + $5)
	
.LABEL $label$3
	*($4 + [72]) = (int_64)-1288933729535787008
	*($4 + [64]) = $7
	*(($5 = CALL $8([16]))) = $3
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [64]) + [36])) = [0]
	$6 = ($5 + [16])
	*(($4 + [88])) = $6
	*(($4 + [84])) = $6
	*($4 + [80]) = $5
	*($4 + [92 align=4]) = (int_64)0
	$8 = *($4 + [48])
	$6 = *((($4 + [16]) + [36]))
	$5 = (($6 + [32]) - $8)
	$0 = (CASTING uint_64)(uint_32 ($6 - $8))
	$6 = ($4 + [92])
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $56($6, $5)
	$6 = *(($4 + [96]))
	$5 = *(($4 + [92]))
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	$5 = [0]
	
.LABEL $label$5
	*($4 + [148]) = $5
	*($4 + [144]) = $5
	*($4 + [152]) = $6
	*($4 + [160]) = ($4 + [144])
	*($4 + [168]) = ($4 + [16])
	CALL $163(($4 + [168]), ($4 + [160]))
	CALL $57(($4 + [64]))
	$5 = *($4 + [92])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [96])) = $5
	CALL $10($5)
	
.LABEL $label$7
	$5 = *($4 + [80])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($4 + [84])) = $5
	CALL $10($5)
	
.LABEL $label$8
	$5 = *($4 + [48])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($4 + [52])) = $5
	CALL $10($5)
	
.LABEL $label$9
	$5 = *($4 + [104])
	if ( ($5 == 0) ){ goto $label$10 }
	*($4 + [108]) = $5
	CALL $10($5)
	
.LABEL $label$10
	$global$0 = ($4 + [176])
	return (unreachable)
	
.LABEL $label$2
	CALL $16((($4 + [16]) + [32]))
}

void .FUNC $120 (int_64 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [176])
	$global$0 = $4
	*($4 + [136]) = $3
	*($4 + [120]) = [12670]
	*($4 + [124]) = CALL $1([12670])
	*($4 + [8]) = *($4 + [120])
	$5 = CALL $128(($4 + [128]), ($4 + [8]))
	*($4 + [112]) = [0]
	*($4 + [104]) = (int_64)0
	CALL $56(($4 + [104]), [8])
	$6 = *($4 + [104])
	if ( ((int_32)(*($4 + [108]) - $6) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11673])
	
.LABEL $label$1
	CALL memcpy($6, ($4 + [136]), [8])
	$3 = CALL current_receiver()
	$7 = CALL current_receiver()
	*(($4 + [56])) = [0]
	*($4 + [16]) = $0
	*($4 + [32]) = $1
	*($4 + [40]) = $2
	*($4 + [48]) = (int_64)0
	*($4 + [24]) = *($5)
	$5 = (*($4 + [108]) - *($4 + [104]))
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL $8($5)
	*(($4 + [48])) = $6
	*(($8 = ($4 + [52]))) = $6
	*(($4 + [56])) = ($6 + $5)
	$9 = *($4 + [104])
	$5 = (*($4 + [108]) - $9)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $9, $5)
	*($8) = (*($8) + $5)
	
.LABEL $label$3
	*($4 + [72]) = (int_64)-1288933729535787008
	*($4 + [64]) = $7
	*(($5 = CALL $8([16]))) = $3
	*($5 + [8]) = (int_64)3617214756542218240
	*((($4 + [64]) + [36])) = [0]
	$6 = ($5 + [16])
	*(($4 + [88])) = $6
	*(($4 + [84])) = $6
	*($4 + [80]) = $5
	*($4 + [92 align=4]) = (int_64)0
	$8 = *($4 + [48])
	$6 = *((($4 + [16]) + [36]))
	$5 = (($6 + [32]) - $8)
	$0 = (CASTING uint_64)(uint_32 ($6 - $8))
	$6 = ($4 + [92])
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$6 }
	CALL $56($6, $5)
	$6 = *(($4 + [96]))
	$5 = *(($4 + [92]))
	goto $label$5 
	
.LABEL $label$6
	$6 = [0]
	$5 = [0]
	
.LABEL $label$5
	*($4 + [148]) = $5
	*($4 + [144]) = $5
	*($4 + [152]) = $6
	*($4 + [160]) = ($4 + [144])
	*($4 + [168]) = ($4 + [16])
	CALL $163(($4 + [168]), ($4 + [160]))
	CALL $57(($4 + [64]))
	$5 = *($4 + [92])
	if ( ($5 == 0) ){ goto $label$7 }
	*(($4 + [96])) = $5
	CALL $10($5)
	
.LABEL $label$7
	$5 = *($4 + [80])
	if ( ($5 == 0) ){ goto $label$8 }
	*(($4 + [84])) = $5
	CALL $10($5)
	
.LABEL $label$8
	$5 = *($4 + [48])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($4 + [52])) = $5
	CALL $10($5)
	
.LABEL $label$9
	$5 = *($4 + [104])
	if ( ($5 == 0) ){ goto $label$10 }
	*($4 + [108]) = $5
	CALL $10($5)
	
.LABEL $label$10
	$global$0 = ($4 + [176])
	return (unreachable)
	
.LABEL $label$2
	CALL $16((($4 + [16]) + [32]))
}

int_32 .FUNC $2 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8244])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*(($1 + [20])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12285])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12330])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1 + [8])
	if ( (uint_64)(((int_64)*(*(($4 + [-24])) + [8]) ^ (int_64)$6) <= (int_64)256) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((uint_64)((int_64)*(*($9) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [12380])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL $10($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11673])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = *($3 + [8])
	if ( ((int_32)(*(($4 + [8])) - $6) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11673])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy($6, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	$4 = *($1)
	*($2 + [7]) = *(*($0 + [4]))
	$5 = *($4 + [4])
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert([0], [11673])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, ($2 + [7]), [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	$global$0 = ($2 + [16])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*(($1 + [20])) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [12894])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [12940])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [13050])
	
.LABEL $label$3
	$7 = ((int_64)*($1) + (int_64)*($3))
	*($1) = $7
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [13093])
	$7 = *($1)
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [13112])
	
.LABEL $label$5
	if ( ((int_64)$6 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [12991])
	
.LABEL $label$6
	$3 = $4
	$4 = ($3 + [-32])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-15])
	*($5 + [16]) = $5
	*($5 + [24]) = $1
	*($5 + [28]) = ($1 + [16])
	CALL $125(($5 + [24]), ($5 + [16]))
	CALL db_update_i64(*($1 + [24]), $2, $4, [17])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [32])
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

void .FUNC $16 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $3($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = *($1)
	$4 = *($1 + [4])
	$6 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[12]))
	$7 = $6
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = *($5 + [4])
	$8 = *($5)
	$9 = (($8 - $3) - $3)
	$7 = (CASTING uint_64)(uint_32 ($3 - $8))
	
.LOOP $label$6:
	$9 = ($9 + [-1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	$3 = ([0] - $9)
	$5 = ($5 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	$3 = [0]
	if ( ($9 == 0) ){ goto $label$3 }
	$3 = ([0] - $9)
	
.LABEL $label$4
	CALL $56($0, $3)
	$3 = *(($0 + [4]))
	$6 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [4])) - *($1)) / (int_32)[12]))
	$9 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	*($2 + [4]) = $9
	*($2) = $9
	*($2 + [8]) = $3
	$8 = ($2 + [8])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	*($2 + [15]) = ((((int_64)$6) != (int_64)0) << [7]) | ($5 & [127]))
	if ( ((int_32)($3 - $9) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [11673])
	$9 = *($2 + [4])
	
.LABEL $label$8
	CALL memcpy($9, ($2 + [15]), [1])
	$9 = ($9 + [1])
	*($2 + [4]) = $9
	if ( (int_64)($6 == 0) ){ goto $label$9 }
	$3 = *($8)
	goto $label$7 
	
.LABEL $label$9
	$3 = *(($1 + [4]))
	$9 = *($1)
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	CALL $147($2, $9)
	$9 = ($9 + [12])
	if ( ((int_32)$3 != (int_32)$9) ){ goto $label$11 }
	
.LABEL $label$10
	$global$0 = ($2 + [16])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $19 (int_32 $0)
{
	*($0) = [1]
}

int_32 .FUNC $184 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	$3 = ((int_32)$2 / (int_32)[12])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$2 = CALL $8($2)
	*(($4 = ($0 + [4]))) = $2
	*(($0 + [8])) = ($2 + ((int_32)$3 * (int_32)[12]))
	*($0) = $2
	$5 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	*($2) = (int_64)0
	*($2 + [8]) = [0]
	$6 = ($3 + [4])
	$1 = (*($6) - *($3))
	if ( ($1 == 0) ){ goto $label$5 }
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	$8 = CALL $8($1)
	*(($7 = ($2 + [4]))) = $8
	*(($2 + [8])) = ($8 + $1)
	*($2) = $8
	$1 = *($3)
	$2 = (*($6) - $1)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $1, $2)
	*($7) = (*($7) + $2)
	
.LABEL $label$5
	$2 = (*($4) + [12])
	*($4) = $2
	$3 = ($3 + [12])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	CALL $16($2)
	
.LABEL $label$1
	CALL $16($0)
	(unreachable)
	return (unreachable)
}

void .FUNC $187 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [48])
	$global$0 = $3
	$1 = CALL $41($3, $1)
	CALL $175(($3 + [16]), $1, $2)
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = *($3 + [20])
	$4 = *($3 + [16])
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = $2
	CALL $191(($3 + [32]), $0)
	$0 = *($3 + [16])
	if ( ($0 == 0) ){ goto $label$1 }
	*($3 + [20]) = $0
	CALL $10($0)
	
.LABEL $label$1
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$2
	$global$0 = ($3 + [48])
}

void .FUNC $186 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [12458])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL $8([40])) + [8]) = [0]
	*($3) = (int_64)0
	*($3 + [24]) = $1
	CALL $189(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3 + [16])
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $190(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	*($3 + [4]) = $1
	CALL $10($1)
	
.LABEL $label$5
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($4 + [48])
}

void .FUNC $180 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = ($global$0 - [48])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$2 = [0]
	$3 = [0]
	$4 = (*($0 + [4]) - *($0))
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $8($4)
	*(($1 + [8])) = ($3 + $4)
	*($1) = $3
	*($1 + [4]) = $3
	$4 = *($0)
	$0 = (*(($0 + [4])) - $4)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($3, $4, $0)
	$2 = ($3 + $0)
	*($1 + [4]) = $2
	goto $label$3 
	
.LABEL $label$4
	$2 = $3
	
.LABEL $label$3
	*($1 + [24]) = [0]
	*($1 + [16]) = (int_64)0
	*($1 + [28]) = [0]
	CALL $169(($1 + [16]), $3, $2)
	*($1 + [40]) = [0]
	*($1 + [32]) = (int_64)0
	$3 = (*($1 + [20]) - *($1 + [16]))
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$0 = CALL $8($3)
	*(($1 + [40])) = ($0 + $3)
	*($1 + [32]) = $0
	*($1 + [36]) = $0
	$4 = *($1 + [16])
	$3 = (*($1 + [20]) - $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($0, $4, $3)
	*($1 + [36]) = (*($1 + [36]) + $3)
	
.LABEL $label$5
	*($1 + [44]) = *(($1 + [28]))
	CALL $194((int_64)8455380941646468112, (int_64)0, ($1 + [32]))
	$3 = *($1 + [32])
	if ( ($3 == 0) ){ goto $label$6 }
	*($1 + [36]) = $3
	CALL $10($3)
	
.LABEL $label$6
	$3 = *($1 + [16])
	if ( ($3 == 0) ){ goto $label$7 }
	*($1 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$7
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$8 }
	*($1 + [4]) = $3
	CALL $10($3)
	
.LABEL $label$8
	$global$0 = ($1 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $16($1)
	
.LABEL $label$1
	CALL $16(($1 + [32]))
	(unreachable)
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = ($global$0 - [160])
	$global$0 = $5
	$6 = CALL current_receiver()
	*(($5 + [152])) = [0]
	*($5 + [128]) = $6
	*($5 + [120]) = $6
	*($5 + [136]) = (int_64)-1
	*($5 + [144]) = (int_64)0
	*($5 + [156]) = [0]
	*($5 + [96]) = [0]
	*($5 + [88]) = (int_64)0
	$7 = (*($3 + [4]) - *($3))
	if ( ($7 == 0) ){ goto $label$7 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$6 }
	$8 = CALL $8($7)
	*(($5 + [96])) = ($8 + $7)
	*($5 + [88]) = $8
	*($5 + [92]) = $8
	$9 = *($3)
	$7 = (*(($3 + [4])) - $9)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($8, $9, $7)
	*($5 + [92]) = ($8 + $7)
	
.LABEL $label$7
	CALL $155(($5 + [104]), ($5 + [88]))
	$7 = *($5 + [88])
	if ( ($7 == 0) ){ goto $label$8 }
	*($5 + [92]) = $7
	CALL $10($7)
	
.LABEL $label$8
	$8 = ($7 & [1])
	$7 = *($2)
	$9 = ($7 & [1])
	$7 = *($5 + [104])
	$10 = uint_32($7 >> [1])
	$11 = ( *($5 + [108]) ? $10 : $9 )
	if ( ((int_32)$11 != (int_32)( *($2 + [4]) ? uint_32($7 >> [1]) : $8 )) ){ goto $label$10 }
	$7 = (($5 + [104]) | [1])
	$8 = ( *($2 + [8]) ? ($2 + [1]) : $8 )
	if ( $9 ){ goto $label$11 }
	if ( ($11 == 0) ){ goto $label$9 }
	$9 = ([0] - $10)
	
.LOOP $label$12:
	if ( ((int_32)*($7) != (int_32)*($8)) ){ goto $label$10 }
	$8 = ($8 + [1])
	$7 = ($7 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$11
	if ( ($11 == 0) ){ goto $label$9 }
	if ( (CALL $18(( *($5 + [112]) ? $7 : $9 ), $8, $11) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL eosio_assert([0], [12448])
	
.LABEL $label$9
	*($5 + [80]) = ($5 + [120])
	$7 = CALL $41(($5 + [16]), $2)
	CALL $148(($5 + [32]), $7)
	CALL $149(($5 + [72]), ($5 + [80]), ($5 + [32]))
	if ( (*($7) & [1]) ){ goto $label$14 }
	if ( (*($5 + [76]) == 0) ){ goto $label$13 }
	goto $label$5 
	
.LABEL $label$14
	CALL $10(*($7 + [8]))
	if ( *($5 + [76]) ){ goto $label$5 }
	
.LABEL $label$13
	*($5 + [36]) = $3
	*($5 + [32]) = ($5 + [120])
	CALL $166(($5 + [8]), ($5 + [120]), $6, ($5 + [32]))
	if ( ((*($5 + [104]) & [1]) == 0) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	CALL $16(($5 + [88]))
	
.LABEL $label$5
	if ( (*($5 + [104]) & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = *($5 + [144])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $10(*($5 + [112]))
	$2 = *($5 + [144])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($5 + [148])
	$7 = *($3)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$18 }
	$9 = *($8 + [8])
	if ( ($9 == 0) ){ goto $label$19 }
	*(($8 + [12])) = $9
	CALL $10($9)
	
.LABEL $label$19
	CALL $10($8)
	
.LABEL $label$18
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$17 }
	$7 = *(($5 + [144]))
	goto $label$15 
	
.LABEL $label$16
	$7 = $2
	
.LABEL $label$15
	*($3) = $2
	CALL $10($7)
	$global$0 = ($5 + [160])
	return 
	
.LABEL $label$1
	$global$0 = ($5 + [160])
	(unreachable)
}

void .FUNC $117 (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [112]) = [12663]
	*($4 + [116]) = CALL $1([12663])
	*($4) = *($4 + [112])
	$5 = CALL $128(($4 + [120]), $4)
	CALL $170(($4 + [96]), $3)
	$6 = CALL current_receiver()
	$7 = CALL current_receiver()
	*(($4 + [48])) = [0]
	*($4 + [8]) = $0
	*($4 + [24]) = $1
	*($4 + [32]) = $2
	*($4 + [40]) = (int_64)0
	*($4 + [16]) = *($5)
	$3 = (*($4 + [100]) - *($4 + [96]))
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $8($3)
	*(($4 + [40])) = $5
	*(($8 = ($4 + [44]))) = $5
	*(($4 + [48])) = ($5 + $3)
	$9 = *($4 + [96])
	$3 = (*($4 + [100]) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $9, $3)
	*($8) = (*($8) + $3)
	
.LABEL $label$2
	*($4 + [64]) = (int_64)-1288933729535787008
	*($4 + [56]) = $7
	*(($3 = CALL $8([16]))) = $6
	*($3 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$5 = ($3 + [16])
	*(($4 + [80])) = $5
	*(($4 + [76])) = $5
	*($4 + [72]) = $3
	*($4 + [84 align=4]) = (int_64)0
	$8 = *($4 + [40])
	$5 = *((($4 + [8]) + [36]))
	$3 = (($5 + [32]) - $8)
	$2 = (CASTING uint_64)(uint_32 ($5 - $8))
	$5 = ($4 + [84])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $56($5, $3)
	$5 = *(($4 + [88]))
	$3 = *(($4 + [84]))
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	$3 = [0]
	
.LABEL $label$4
	*($4 + [132]) = $3
	*($4 + [128]) = $3
	*($4 + [136]) = $5
	*($4 + [144]) = ($4 + [128])
	*($4 + [152]) = ($4 + [8])
	CALL $163(($4 + [152]), ($4 + [144]))
	CALL $57(($4 + [56]))
	$3 = *($4 + [84])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($4 + [88])) = $3
	CALL $10($3)
	
.LABEL $label$6
	$3 = *($4 + [72])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($4 + [76])) = $3
	CALL $10($3)
	
.LABEL $label$7
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $3
	CALL $10($3)
	
.LABEL $label$8
	$3 = *($4 + [96])
	if ( ($3 == 0) ){ goto $label$9 }
	*($4 + [100]) = $3
	CALL $10($3)
	
.LABEL $label$9
	$global$0 = ($4 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $16((($4 + [8]) + [32]))
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11818])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	$2 = ($3 + [8])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11818])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [16])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [11818])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [4])
	*(($0 = ($0 + [4]))) = (*($0) + [4])
	CALL $91(*($1), ($3 + [20]))
	CALL $137(*($1), ($3 + [32]))
}

void .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$6 = CALL $41(($2 + [16]), ($1 + [20]))
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$7 = (*(($1 + [36])) - *($1 + [32]))
	if ( ($7 == 0) ){ goto $label$2 }
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$1 }
	$8 = CALL $8($7)
	*(($2 + [8])) = ($8 + $7)
	*($2) = $8
	*($2 + [4]) = $8
	$7 = *(($1 + [32]))
	$1 = (*(($1 + [36])) - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($8, $7, $1)
	*($2 + [4]) = (*($2 + [4]) + $1)
	
.LABEL $label$2
	CALL $171($0, $5, $4, $3, $6, $2)
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$3 }
	*($2 + [4]) = $1
	CALL $10($1)
	
.LABEL $label$3
	if ( ((*($6) & [1]) == 0) ){ goto $label$4 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$4
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $16($2)
}

void .FUNC $112 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = CALL current_receiver()
	*(($4 + [104])) = [0]
	*($4 + [80]) = $5
	*($4 + [72]) = $5
	*($4 + [88]) = (int_64)-1
	*($4 + [96]) = (int_64)0
	*($4 + [108]) = [0]
	*($4 + [64]) = ($4 + [72])
	$2 = CALL $41($4, $2)
	CALL $148(($4 + [16]), $2)
	CALL $149(($4 + [56]), ($4 + [64]), ($4 + [16]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$1
	if ( (*($4 + [60]) == 0) ){ goto $label$2 }
	$5 = *($4 + [56])
	*($4 + [16]) = $5
	$2 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( $2) ){ goto $label$3 }
	CALL eosio_assert([0], [12221])
	$2 = *($4 + [20])
	
.LABEL $label$3
	CALL $150(($4 + [16]))
	CALL $151(*($4 + [64]), $2)
	
.LABEL $label$2
	$6 = *($4 + [96])
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = ($4 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($2 + [-24])
	$8 = *($2)
	*($2) = [0]
	if ( ($8 == 0) ){ goto $label$8 }
	$9 = *($8 + [8])
	if ( ($9 == 0) ){ goto $label$9 }
	*(($8 + [12])) = $9
	CALL $10($9)
	
.LABEL $label$9
	CALL $10($8)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$7 }
	$2 = *(($4 + [96]))
	goto $label$5 
	
.LABEL $label$6
	$2 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL $10($2)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $113 (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [112]) = [12440]
	*($4 + [116]) = CALL $1([12440])
	*($4) = *($4 + [112])
	$5 = CALL $128(($4 + [120]), $4)
	CALL $165(($4 + [96]), $3)
	$6 = CALL current_receiver()
	$7 = CALL current_receiver()
	*(($4 + [48])) = [0]
	*($4 + [8]) = $0
	*($4 + [24]) = $1
	*($4 + [32]) = $2
	*($4 + [40]) = (int_64)0
	*($4 + [16]) = *($5)
	$3 = (*($4 + [100]) - *($4 + [96]))
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $8($3)
	*(($4 + [40])) = $5
	*(($8 = ($4 + [44]))) = $5
	*(($4 + [48])) = ($5 + $3)
	$9 = *($4 + [96])
	$3 = (*($4 + [100]) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $9, $3)
	*($8) = (*($8) + $3)
	
.LABEL $label$2
	*($4 + [64]) = (int_64)-1288933729535787008
	*($4 + [56]) = $7
	*(($3 = CALL $8([16]))) = $6
	*($3 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$5 = ($3 + [16])
	*(($4 + [80])) = $5
	*(($4 + [76])) = $5
	*($4 + [72]) = $3
	*($4 + [84 align=4]) = (int_64)0
	$8 = *($4 + [40])
	$5 = *((($4 + [8]) + [36]))
	$3 = (($5 + [32]) - $8)
	$2 = (CASTING uint_64)(uint_32 ($5 - $8))
	$5 = ($4 + [84])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $56($5, $3)
	$5 = *(($4 + [88]))
	$3 = *(($4 + [84]))
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	$3 = [0]
	
.LABEL $label$4
	*($4 + [132]) = $3
	*($4 + [128]) = $3
	*($4 + [136]) = $5
	*($4 + [144]) = ($4 + [128])
	*($4 + [152]) = ($4 + [8])
	CALL $163(($4 + [152]), ($4 + [144]))
	CALL $57(($4 + [56]))
	$3 = *($4 + [84])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($4 + [88])) = $3
	CALL $10($3)
	
.LABEL $label$6
	$3 = *($4 + [72])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($4 + [76])) = $3
	CALL $10($3)
	
.LABEL $label$7
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $3
	CALL $10($3)
	
.LABEL $label$8
	$3 = *($4 + [96])
	if ( ($3 == 0) ){ goto $label$9 }
	*($4 + [100]) = $3
	CALL $10($3)
	
.LABEL $label$9
	$global$0 = ($4 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $16((($4 + [8]) + [32]))
}

void .FUNC $110 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [112])
	$global$0 = $4
	$5 = CALL current_receiver()
	*(($4 + [104])) = [0]
	*($4 + [80]) = $5
	*($4 + [72]) = $5
	*($4 + [88]) = (int_64)-1
	*($4 + [96]) = (int_64)0
	*($4 + [108]) = [0]
	*($4 + [64]) = ($4 + [72])
	$2 = CALL $41($4, $2)
	CALL $148(($4 + [16]), $2)
	CALL $149(($4 + [56]), ($4 + [64]), ($4 + [16]))
	if ( ((*($2) & [1]) == 0) ){ goto $label$1 }
	CALL $10(*($2 + [8]))
	
.LABEL $label$1
	if ( (*($4 + [60]) == 0) ){ goto $label$2 }
	$5 = *($4 + [56])
	*($4 + [16]) = $5
	$2 = (CASTING uint_32)(uint_64 (uint_64)$5 >> (uint_64)(int_64)32)
	if ( $2) ){ goto $label$3 }
	CALL eosio_assert([0], [12221])
	$2 = *($4 + [20])
	
.LABEL $label$3
	CALL $150(($4 + [16]))
	CALL $151(*($4 + [64]), $2)
	
.LABEL $label$2
	$6 = *($4 + [96])
	if ( ($6 == 0) ){ goto $label$4 }
	$7 = ($4 + [100])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($2 + [-24])
	$8 = *($2)
	*($2) = [0]
	if ( ($8 == 0) ){ goto $label$8 }
	$9 = *($8 + [8])
	if ( ($9 == 0) ){ goto $label$9 }
	*(($8 + [12])) = $9
	CALL $10($9)
	
.LABEL $label$9
	CALL $10($8)
	
.LABEL $label$8
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$7 }
	$2 = *(($4 + [96]))
	goto $label$5 
	
.LABEL $label$6
	$2 = $6
	
.LABEL $label$5
	*($7) = $6
	CALL $10($2)
	
.LABEL $label$4
	$global$0 = ($4 + [112])
}

void .FUNC $111 (int_64 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [160])
	$global$0 = $4
	*($4 + [112]) = [12433]
	*($4 + [116]) = CALL $1([12433])
	*($4) = *($4 + [112])
	$5 = CALL $128(($4 + [120]), $4)
	CALL $162(($4 + [96]), $3)
	$6 = CALL current_receiver()
	$7 = CALL current_receiver()
	*(($4 + [48])) = [0]
	*($4 + [8]) = $0
	*($4 + [24]) = $1
	*($4 + [32]) = $2
	*($4 + [40]) = (int_64)0
	*($4 + [16]) = *($5)
	$3 = (*($4 + [100]) - *($4 + [96]))
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $8($3)
	*(($4 + [40])) = $5
	*(($8 = ($4 + [44]))) = $5
	*(($4 + [48])) = ($5 + $3)
	$9 = *($4 + [96])
	$3 = (*($4 + [100]) - $9)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($5, $9, $3)
	*($8) = (*($8) + $3)
	
.LABEL $label$2
	*($4 + [64]) = (int_64)-1288933729535787008
	*($4 + [56]) = $7
	*(($3 = CALL $8([16]))) = $6
	*($3 + [8]) = (int_64)3617214756542218240
	*((($4 + [56]) + [36])) = [0]
	$5 = ($3 + [16])
	*(($4 + [80])) = $5
	*(($4 + [76])) = $5
	*($4 + [72]) = $3
	*($4 + [84 align=4]) = (int_64)0
	$8 = *($4 + [40])
	$5 = *((($4 + [8]) + [36]))
	$3 = (($5 + [32]) - $8)
	$2 = (CASTING uint_64)(uint_32 ($5 - $8))
	$5 = ($4 + [84])
	
.LOOP $label$3:
	$3 = ($3 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$3 }
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $56($5, $3)
	$5 = *(($4 + [88]))
	$3 = *(($4 + [84]))
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	$3 = [0]
	
.LABEL $label$4
	*($4 + [132]) = $3
	*($4 + [128]) = $3
	*($4 + [136]) = $5
	*($4 + [144]) = ($4 + [128])
	*($4 + [152]) = ($4 + [8])
	CALL $163(($4 + [152]), ($4 + [144]))
	CALL $57(($4 + [56]))
	$3 = *($4 + [84])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($4 + [88])) = $3
	CALL $10($3)
	
.LABEL $label$6
	$3 = *($4 + [72])
	if ( ($3 == 0) ){ goto $label$7 }
	*(($4 + [76])) = $3
	CALL $10($3)
	
.LABEL $label$7
	$3 = *($4 + [40])
	if ( ($3 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $3
	CALL $10($3)
	
.LABEL $label$8
	$3 = *($4 + [96])
	if ( ($3 == 0) ){ goto $label$9 }
	*($4 + [100]) = $3
	CALL $10($3)
	
.LABEL $label$9
	$global$0 = ($4 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $16((($4 + [8]) + [32]))
}

void .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11818])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11818])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11818])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	CALL $91(*($1), ($0 + [24]))
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $41($2, ($1 + [24]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$6 = CALL $41(($2 + [16]), $1)
	CALL void $7((int_32 $5), (int_64 $4), (int_64 $3), (int_64 $6), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *($2 + [20])
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	if ( CALL $28($2) ){ goto $label$2 }
	$4 = *($2 + [20])
	if ( ((*(($2 + [16])) - $4) <= $1) ){ goto $label$1 }
	
.LABEL $label$3
	$6 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$5 }
	$6 = [0]
	$5 = $0
	$3 = [0]
	
.LOOP $label$6:
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$5 }
	$3 = ($3 + [1])
	$7 = ($5 + $1)
	$8 = ($5 + [-1])
	$5 = $8
	if ( ((int_32)*(($7 + [-1])) != (int_32)[10]) ){ goto $label$6 }
	$6 = (($1 - $3) + [1])
	$5 = CALL int_32 $2((int_32 $0), (int_32 $6), (int_32 *($2 + [36])))
	if ( ($5 <= $6) ){ goto $label$2 }
	$0 = (($8 + $1) + [1])
	$4 = *(($2 + [20]))
	$1 = ($3 + [-1])
	
.LABEL $label$5
	CALL memcpy($4, $0, $1)
	*(($3 = ($2 + [20]))) = (*($3) + $1)
	$5 = ($6 + $1)
	
.LABEL $label$2
	return $5
	return .LABEL $label$1
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $21 ()
{
	CALL $19([8220])
	return [8228]
}

void .FUNC $20 (int_32 $0)
{
	*($0) = [0]
}

int_32 .FUNC $23 (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC $22 ()
{
	CALL $20([8220])
}

int_32 .FUNC $25 (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [2] ? [3] : (int_64)(((int_64)$2 | (int_64)$0) == 0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

void .FUNC $24 (int_32 $0)
{
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL $26($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $26 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL $5()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL $5()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11818])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11818])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [11818])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [11818])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $91(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $16($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL $10($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $103 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$global$0 = $3
	$4 = [0]
	*(($3 + [40])) = [0]
	*($3 + [24]) = (int_64)-1
	*($3 + [32]) = (int_64)0
	$5 = *($0)
	*($3 + [8]) = $5
	$6 = *($2 + [8])
	*($3 + [16]) = $1
	$0 = CALL db_find_i64($5, $1, (int_64)3607749779137757184, (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_32)$0) < (int_32)[0]) ){ goto $label$7 }
	$4 = CALL $98(($3 + [8]), $0)
	if ( ((int_32)*($4 + [20]) == (int_32)($3 + [8])) ){ goto $label$8 }
	CALL eosio_assert([0], [11744])
	
.LABEL $label$8
	$5 = *($2)
	$1 = *($4)
	if ( ((int_64)$1 < (int_64)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL eosio_assert([0], [11533])
	$5 = *($2)
	$1 = *([0])
	if ( ((int_64)$1 >= (int_64)$5) ){ goto $label$5 }
	
.LABEL $label$6
	CALL eosio_assert([0], [11557])
	if ( ((int_64)*($4) == (int_64)*($2)) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_64)$1 != (int_64)$5) ){ goto $label$3 }
	
.LABEL $label$4
	CALL $126(($3 + [8]), $4)
	$0 = *($3 + [32])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	*($3) = $2
	CALL $127(($3 + [8]), $4, $3)
	$0 = *($3 + [32])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($3 + [36])
	$2 = *($7)
	if ( ((int_32)$2 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [-24])
	$4 = *($2)
	*($2) = [0]
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $10($4)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$2) ){ goto $label$11 }
	$2 = *(($3 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$2 = $0
	
.LABEL $label$9
	*($7) = $0
	CALL $10($2)
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	$global$0 = ($3 + [48])
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $41(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $41(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

int_32 .FUNC $105 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [112])
	$global$0 = $2
	$3 = CALL $174(($0 + [16]), $1)
	if ( ($3 == 0) ){ goto $label$2 }
	*($2 + [80]) = (int_64)0
	*($2 + [72]) = (int_64)0
	*($2 + [88]) = [0]
	*($2 + [24]) = (int_64)0
	*($2 + [32]) = [0]
	$4 = (*($3 + [4]) - *($3))
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $8($4)
	*(($2 + [32])) = ($5 + $4)
	*($2 + [28]) = $5
	*($2 + [24]) = $5
	$4 = *($3)
	$3 = (*(($3 + [4])) - $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $4, $3)
	*($2 + [28]) = ($5 + $3)
	
.LABEL $label$3
	CALL $158(($2 + [40]), ($2 + [24]))
	CALL $175(($2 + [56]), ($2 + [40]), [0])
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$4 }
	CALL $10(*($2 + [48]))
	
.LABEL $label$4
	$4 = (($2 + [72]) + [16])
	$3 = *($2 + [24])
	if ( ($3 == 0) ){ goto $label$5 }
	*($2 + [28]) = $3
	CALL $10($3)
	
.LABEL $label$5
	$3 = *($2 + [60])
	$5 = *($2 + [56])
	*($2 + [12]) = $5
	*($2 + [8]) = $5
	*($2 + [16]) = $3
	*($2 + [96]) = ($2 + [8])
	*($2 + [108]) = $4
	*($2 + [104]) = ($2 + [72])
	CALL $173(($2 + [104]), ($2 + [96]))
	$4 = CALL $8([8])
	$3 = CALL $8([24])
	*($4) = $0
	*($4 + [4]) = $3
	*(($3 + [16])) = *((($2 + [72]) + [16]))
	*(($3 + [8])) = *((($2 + [72]) + [8]))
	*($3) = *($2 + [72])
	$3 = *($2 + [56])
	if ( ($3 == 0) ){ goto $label$6 }
	*($2 + [60]) = $3
	CALL $10($3)
	
.LABEL $label$6
	$global$0 = ($2 + [112])
	return $4
	
.LABEL $label$2
	*(($3 = CALL $8([8])) + [4]) = [0]
	*($3) = $0
	$global$0 = ($2 + [112])
	return $3
	
.LABEL $label$1
	CALL $16(($2 + [24]))
	return (unreachable)
}

void .FUNC $104 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [336])
	$global$0 = $3
	$4 = CALL $1([11399])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [11575])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = (int_64)0
	
.LOOP $label$5:
	$6 = *(($4 + [11398]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [11620])
	
.LABEL $label$6
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$7 = ((int_64)$5 << (int_64)8)
	goto $label$1 
	
.LABEL $label$2
	$7 = (int_64)0
	
.LABEL $label$1
	$4 = CALL $1([11407])
	if ( ($4 <= [8]) ){ goto $label$10 }
	CALL eosio_assert([0], [11575])
	goto $label$9 
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$5 = (int_64)0
	
.LOOP $label$11:
	$6 = *(($4 + [11406]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$12 }
	CALL eosio_assert([0], [11620])
	
.LABEL $label$12
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$11 }
	$8 = ((int_64)$5 << (int_64)8)
	goto $label$7 
	
.LABEL $label$8
	$8 = (int_64)0
	
.LABEL $label$7
	*(($3 + [296])) = [0]
	*($3 + [288]) = (int_64)0
	$4 = CALL $1([11411])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$18 }
	$9 = ((int_64)$7 | (int_64)4)
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$21 }
	*($3 + [288]) = ($4 << [1])
	$6 = (($3 + [288]) | [1])
	if ( $4 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$10 = (($4 + [16]) & [-16])
	$6 = CALL $8($10)
	*($3 + [288]) = ($10 | [1])
	*($3 + [296]) = $6
	*($3 + [292]) = $4
	
.LABEL $label$20
	CALL memcpy($6, [11411], $4)
	
.LABEL $label$19
	*(($6 + $4)) = [0]
	if ( ((int_64)*($2 + [8]) != (int_64)$9) ){ goto $label$31 }
	$11 = ((int_64)$5 / (int_64)10000)
	$12 = ((int_64)$11 * (int_64)10000)
	$5 = *($2)
	$13 = (int_64)
	if ( (int_64)($13($5 - $12)) == 0) ){ goto $label$28 }
	$14 = *($0)
	*($3 + [272]) = [11422]
	*($3 + [276]) = CALL $1([11422])
	*($3 + [80]) = *($3 + [272])
	$4 = CALL $128(($3 + [280]), ($3 + [80]))
	$15 = *($0)
	$16 = *($4)
	*($3 + [256]) = [11429]
	*($3 + [260]) = CALL $1([11429])
	*($3 + [72]) = *($3 + [256])
	$10 = CALL $128(($3 + [264]), ($3 + [72]))
	if ( (uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$32 }
	CALL eosio_assert([0], [12845])
	
.LABEL $label$32
	$5 = (uint_64)$7 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$33:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$34 }
	$5 = $7
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$33 }
	goto $label$29 
	
.LABEL $label$34
	$5 = $7
	
.LOOP $label$35:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $6 ){ goto $label$35 }
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$33 }
	goto $label$29 
	
.LABEL $label$31
	$4 = CALL $1([11407])
	if ( ($4 <= [8]) ){ goto $label$27 }
	CALL eosio_assert([0], [11575])
	goto $label$26 
	
.LABEL $label$30
	CALL eosio_assert([0], [10227])
	
.LABEL $label$29
	*((($3 + [216]) + [24])) = $9
	*(($6 = (($3 + [88]) + [24]))) = [0]
	*($3 + [224]) = $1
	*($3 + [232]) = $13
	*($3 + [248]) = [11438]
	*($3 + [88]) = $15
	*($3 + [104]) = (int_64)0
	*($3 + [216]) = *($0)
	*($3 + [96]) = *($10)
	*(($4 = CALL $8([16]))) = $14
	*($4 + [8]) = $16
	*(($3 + [124])) = [0]
	$2 = ($4 + [16])
	*($6) = $2
	*(($3 + [108])) = $2
	*($3 + [104]) = $4
	*($3 + [116 align=4]) = (int_64)0
	CALL $56(($3 + [116]), [33])
	$2 = ($3 + [120])
	$4 = *($2)
	$6 = *($3 + [116])
	*($3 + [308]) = $6
	*($3 + [304]) = $6
	*($3 + [312]) = $4
	*($3 + [320]) = ($3 + [304])
	*($3 + [328]) = ($3 + [216])
	CALL $129(($3 + [328]), ($3 + [320]))
	CALL $57(($3 + [88]))
	$4 = *($3 + [116])
	if ( ($4 == 0) ){ goto $label$36 }
	*($2) = $4
	CALL $10($4)
	
.LABEL $label$36
	$4 = *($3 + [104])
	if ( ($4 == 0) ){ goto $label$28 }
	*(($3 + [108])) = $4
	CALL $10($4)
	
.LABEL $label$28
	*(($3 + [96])) = [0]
	*($3 + [88]) = (int_64)0
	$4 = CALL $1([11475])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$25 }
	*($3 + [88]) = ($4 << [1])
	$2 = (($3 + [88]) | [1])
	$6 = $2
	if ( $4 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$27
	if ( ($4 == 0) ){ goto $label$22 }
	
.LABEL $label$26
	$5 = (int_64)0
	
.LOOP $label$37:
	$6 = *(($4 + [11406]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$38 }
	CALL eosio_assert([0], [11620])
	
.LABEL $label$38
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$37 }
	$9 = ((int_64)$5 << (int_64)8)
	goto $label$16 
	
.LABEL $label$25
	$2 = (($4 + [16]) & [-16])
	$6 = CALL $8($2)
	*($3 + [88]) = ($2 | [1])
	*($3 + [96]) = $6
	*($3 + [92]) = $4
	$2 = (($3 + [88]) | [1])
	
.LABEL $label$24
	CALL memcpy($6, [11475], $4)
	
.LABEL $label$23
	*(($6 + $4)) = [0]
	$4 = *($3 + [88])
	$6 = ($4 & [1])
	CALL $48(($3 + [288]), ( *($3 + [96]) ? $2 : $6 ), ( *($3 + [92]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$39 }
	CALL $10(*(($3 + [96])))
	
.LABEL $label$39
	if ( ((int_64)$11 == (int_64)0) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$22
	$9 = (int_64)0
	goto $label$16 
	
.LABEL $label$18
	CALL $40(($3 + [288]))
	
.LABEL $label$17
	CALL $40(($3 + [88]))
	
.LABEL $label$16
	$4 = CALL $1([11399])
	if ( ($4 <= [8]) ){ goto $label$43 }
	CALL eosio_assert([0], [11575])
	goto $label$42 
	
.LABEL $label$43
	if ( ($4 == 0) ){ goto $label$41 }
	
.LABEL $label$42
	$5 = (int_64)0
	
.LOOP $label$44:
	$6 = *(($4 + [11398]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$45 }
	CALL eosio_assert([0], [11620])
	
.LABEL $label$45
	$5 = ((int_64)((int_64)$5 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$44 }
	$5 = ((int_64)$5 << (int_64)8)
	goto $label$40 
	
.LABEL $label$41
	$5 = (int_64)0
	
.LABEL $label$40
	$7 = *($2)
	*(($3 + [96])) = [0]
	*($3 + [88]) = (int_64)0
	$4 = CALL $1([11490])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$48 }
	*($3 + [88]) = ($4 << [1])
	$2 = (($3 + [88]) | [1])
	$6 = $2
	if ( $4 ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$48
	$2 = (($4 + [16]) & [-16])
	$6 = CALL $8($2)
	*($3 + [88]) = ($2 | [1])
	*($3 + [96]) = $6
	*($3 + [92]) = $4
	$2 = (($3 + [88]) | [1])
	
.LABEL $label$47
	CALL memcpy($6, [11490], $4)
	
.LABEL $label$46
	*(($6 + $4)) = [0]
	$4 = *($3 + [88])
	$6 = ($4 & [1])
	CALL $48(($3 + [288]), ( *($3 + [96]) ? $2 : $6 ), ( *($3 + [92]) ? uint_32($4 >> [1]) : $6 ))
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$49 }
	CALL $10(*(($3 + [96])))
	
.LABEL $label$49
	$8 = ((int_64)$5 | (int_64)4)
	$12 = (int_64)0
	$11 = ((int_64)$7 * (int_64)10000)
	if ( ((int_64)$11 != (int_64)0) ){ goto $label$13 }
	
.LABEL $label$15
	CALL eosio_assert([0], [11505])
	goto $label$13 
	
.LABEL $label$14
	CALL $40(($3 + [88]))
	
.LABEL $label$13
	if ( (uint_64)(((int_64)$12 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$50 }
	CALL eosio_assert([0], [12845])
	
.LABEL $label$50
	$5 = (uint_64)$9 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$53:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$52 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$54 }
	$5 = $7
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$54
	$5 = $7
	
.LOOP $label$55:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$52 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $6 ){ goto $label$55 }
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$53 }
	goto $label$51 
	
.LABEL $label$52
	CALL eosio_assert([0], [10227])
	
.LABEL $label$51
	$5 = *($0)
	*(($3 + [64])) = $9
	*($3 + [200]) = $12
	*($3 + [208]) = $9
	*($3 + [56]) = $12
	CALL $103($0, $5, ($3 + [56]))
	if ( (uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$56 }
	CALL eosio_assert([0], [12845])
	
.LABEL $label$56
	$4 = [0]
	$5 = (uint_64)$8 >> (uint_64)(int_64)8
	$7 = $5)
	
.LOOP $label$59:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$58 }
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$7 & (int_64)65280) == (int_64)0) ){ goto $label$60 }
	$7 = $9
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$60
	$7 = $9
	
.LOOP $label$61:
	if ( ((int_64)((int_64)$7 & (int_64)65280) != (int_64)0) ){ goto $label$58 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $6 ){ goto $label$61 }
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$59 }
	goto $label$57 
	
.LABEL $label$58
	CALL eosio_assert([0], [10227])
	
.LABEL $label$57
	$7 = *($0)
	*(($3 + [48])) = $8
	*($3 + [184]) = $11
	*($3 + [192]) = $8
	*($3 + [40]) = $11
	CALL $94($0, $7, ($3 + [40]), $7)
	*($3 + [176]) = $8
	*($3 + [168]) = (int_64)0
	$4 = [0]
	
.LOOP $label$64:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$63 }
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$5 & (int_64)65280) == (int_64)0) ){ goto $label$65 }
	$5 = $7
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$64 }
	goto $label$62 
	
.LABEL $label$65
	$5 = $7
	
.LOOP $label$66:
	if ( ((int_64)((int_64)$5 & (int_64)65280) != (int_64)0) ){ goto $label$63 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$2 = ($4 + [1])
	$4 = $2
	if ( $6 ){ goto $label$66 }
	$4 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$64 }
	goto $label$62 
	
.LABEL $label$63
	CALL eosio_assert([0], [10227])
	
.LABEL $label$62
	*((($3 + [24]) + [8])) = *((($3 + [168]) + [8]))
	*($3 + [24]) = *($3 + [168])
	CALL $94($0, $1, ($3 + [24]), $1)
	$5 = *($0)
	*($3 + [152]) = [11422]
	*($3 + [156]) = CALL $1([11422])
	*($3 + [16]) = *($3 + [152])
	$7 = *(CALL $128(($3 + [160]), ($3 + [16])))
	$9 = *($0)
	*($3 + [136]) = [11429]
	*($3 + [140]) = CALL $1([11429])
	*($3 + [8]) = *($3 + [136])
	$4 = CALL $128(($3 + [144]), ($3 + [8]))
	*((($3 + [88]) + [24])) = $8
	*($3 + [96]) = $1
	*($3 + [104]) = $11
	*($3 + [88]) = *($0)
	$6 = CALL $41((($3 + [88]) + [32]), ($3 + [288]))
	*($3 + [216]) = $9
	*($3 + [224]) = *($4)
	*(($4 = CALL $8([16]))) = $5
	*($4 + [8]) = $7
	*((($3 + [216]) + [36])) = [0]
	$2 = ($4 + [16])
	*((($3 + [216]) + [24])) = $2
	*(($3 + [236])) = $2
	*($3 + [232]) = $4
	*($3 + [244 align=4]) = (int_64)0
	$4 = *($6)
	$6 = ( *((($3 + [88]) + [36])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($6 + [32])
	$5 = (CASTING uint_64)(uint_32 $6)
	$6 = ($3 + [244])
	
.LOOP $label$67:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$67 }
	if ( ($4 == 0) ){ goto $label$69 }
	CALL $56($6, $4)
	$6 = *(($3 + [248]))
	$4 = *(($3 + [244]))
	goto $label$68 
	
.LABEL $label$69
	$6 = [0]
	$4 = [0]
	
.LABEL $label$68
	*($3 + [308]) = $4
	*($3 + [304]) = $4
	*($3 + [312]) = $6
	*($3 + [320]) = ($3 + [304])
	*($3 + [328]) = ($3 + [88])
	CALL $130(($3 + [328]), ($3 + [320]))
	CALL $57(($3 + [216]))
	$4 = *($3 + [244])
	if ( ($4 == 0) ){ goto $label$70 }
	*(($3 + [248])) = $4
	CALL $10($4)
	
.LABEL $label$70
	$4 = *($3 + [232])
	if ( ($4 == 0) ){ goto $label$71 }
	*(($3 + [236])) = $4
	CALL $10($4)
	
.LABEL $label$71
	if ( (*($3 + [120]) & [1]) ){ goto $label$74 }
	if ( (*($3 + [288]) & [1]) ){ goto $label$73 }
	goto $label$72 
	
.LABEL $label$74
	CALL $10(*(($3 + [128])))
	if ( ((*($3 + [288]) & [1]) == 0) ){ goto $label$72 }
	
.LABEL $label$73
	CALL $10(*($3 + [296]))
	$global$0 = ($3 + [336])
	return 
	
.LABEL $label$72
	$global$0 = ($3 + [336])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $107 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [176])
	$global$0 = $4
	*(($4 + [24])) = $1
	*(($4 + [32])) = [0]
	*(($4 + [48])) = [0]
	*($4 + [8]) = $1
	*($4 + [16]) = (int_64)274877907968
	*($4 + [40]) = (int_64)0
	*($4) = *($0)
	$1 = *($2 + [8])
	$0 = *(CALL $105($4, (uint_64)$1 >> (uint_64)(int_64)8)) + [4]
	if ( ($0) == 0) ){ goto $label$8 }
	if ( ((int_64)CALL current_receiver() == (int_64)*($4)) ){ goto $label$9 }
	CALL eosio_assert([0], [12940])
	
.LABEL $label$9
	$5 = *($0 + [8])
	if ( ((int_64)$1 == (int_64)$5) ){ goto $label$10 }
	CALL eosio_assert([0], [13050])
	
.LABEL $label$10
	$1 = ((int_64)*($0) + (int_64)*($2))
	*($0) = $1
	if ( ((int_64)$1 > (int_64)-4611686018427387904) ){ goto $label$11 }
	CALL eosio_assert([0], [13093])
	$1 = *($0)
	
.LABEL $label$11
	$5 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)$1 < (int_64)4611686018427387904) ){ goto $label$12 }
	CALL eosio_assert([0], [13112])
	
.LABEL $label$12
	if ( ((int_64)$5 == (int_64)(uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$13 }
	CALL eosio_assert([0], [12991])
	
.LABEL $label$13
	*($4 + [168]) = [0]
	*($4 + [160]) = (int_64)0
	CALL $56(($4 + [160]), [17])
	$2 = *($4 + [164])
	$6 = *($4 + [160])
	*($4 + [140]) = $6
	*($4 + [136]) = $6
	*($4 + [144]) = $2
	*($4 + [104]) = ($4 + [136])
	*($4 + [120]) = $0
	*($4 + [124]) = ($0 + [16])
	CALL $125(($4 + [120]), ($4 + [104]))
	*($4 + [128]) = [0]
	*($4 + [120]) = (int_64)0
	$0 = (*($4 + [164]) - *($4 + [160]))
	if ( ($0 == 0) ){ goto $label$14 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$4 }
	$2 = CALL $8($0)
	*(($4 + [128])) = ($2 + $0)
	*($4 + [120]) = $2
	*($4 + [124]) = $2
	$6 = *($4 + [160])
	$0 = (*($4 + [164]) - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($2, $6, $0)
	*($4 + [124]) = (*($4 + [124]) + $0)
	
.LABEL $label$14
	CALL $131(($4 + [136]), ($4 + [120]), [0])
	$0 = *($4 + [120])
	if ( ($0 == 0) ){ goto $label$15 }
	*($4 + [124]) = $0
	CALL $10($0)
	
.LABEL $label$15
	$0 = CALL $41(($4 + [88]), ($4 + [136]))
	CALL $132(($4 + [104]), $0)
	if ( ((*($4 + [88]) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*($0 + [8]))
	
.LABEL $label$16
	*($4 + [80]) = [0]
	*($4 + [72]) = (int_64)0
	$0 = (*($4 + [108]) - *($4 + [104]))
	if ( ($0 == 0) ){ goto $label$17 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$3 }
	$2 = CALL $8($0)
	*(($4 + [80])) = ($2 + $0)
	*($4 + [72]) = $2
	*($4 + [76]) = $2
	$6 = *($4 + [104])
	$0 = (*($4 + [108]) - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$17 }
	CALL memcpy($2, $6, $0)
	*($4 + [76]) = (*($4 + [76]) + $0)
	
.LABEL $label$17
	CALL $133(($4 + [16]), $5, ($4 + [72]), $3)
	$0 = *($4 + [72])
	if ( ($0 == 0) ){ goto $label$18 }
	*($4 + [76]) = $0
	CALL $10($0)
	
.LABEL $label$18
	$0 = *($4 + [104])
	if ( ($0 == 0) ){ goto $label$19 }
	*($4 + [108]) = $0
	CALL $10($0)
	
.LABEL $label$19
	if ( ((*($4 + [136]) & [1]) == 0) ){ goto $label$20 }
	CALL $10(*($4 + [144]))
	
.LABEL $label$20
	$0 = *($4 + [160])
	if ( ($0 == 0) ){ goto $label$7 }
	*($4 + [164]) = $0
	CALL $10($0)
	$6 = *($4 + [40])
	if ( $6 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	if ( ((int_64)CALL current_receiver() == (int_64)*($4)) ){ goto $label$21 }
	CALL eosio_assert([0], [12458])
	
.LABEL $label$21
	*(($0 = ($4 + [152]))) = (int_64)0
	*($0) = [0]
	*(($6 = (($4 + [136]) + [8]))) = *(($2 + [8]))
	*($4 + [136]) = *($2)
	*($4 + [128]) = [0]
	*($4 + [120]) = (int_64)0
	CALL $56(($4 + [120]), [17])
	$2 = *($4 + [124])
	$7 = *($4 + [120])
	*($4 + [164]) = $7
	*($4 + [160]) = $7
	*($4 + [168]) = $2
	*($4 + [88]) = ($4 + [160])
	*($4 + [108]) = $0
	*($4 + [104]) = ($4 + [136])
	CALL $125(($4 + [104]), ($4 + [88]))
	$1 = *($6)
	*($4 + [112]) = [0]
	*($4 + [104]) = (int_64)0
	$0 = (*($4 + [124]) - *($4 + [120]))
	if ( ($0 == 0) ){ goto $label$22 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$2 }
	$2 = CALL $8($0)
	*(($4 + [112])) = ($2 + $0)
	*($4 + [104]) = $2
	*($4 + [108]) = $2
	$6 = *($4 + [120])
	$0 = (*($4 + [124]) - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($2, $6, $0)
	*($4 + [108]) = (*($4 + [108]) + $0)
	
.LABEL $label$22
	CALL $131(($4 + [160]), ($4 + [104]), [0])
	$0 = *($4 + [104])
	if ( ($0 == 0) ){ goto $label$23 }
	*($4 + [108]) = $0
	CALL $10($0)
	
.LABEL $label$23
	$0 = CALL $41(($4 + [72]), ($4 + [160]))
	CALL $132(($4 + [88]), $0)
	if ( ((*($4 + [72]) & [1]) == 0) ){ goto $label$24 }
	CALL $10(*($0 + [8]))
	
.LABEL $label$24
	*($4 + [64]) = [0]
	*($4 + [56]) = (int_64)0
	$0 = (*($4 + [92]) - *($4 + [88]))
	if ( ($0 == 0) ){ goto $label$25 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = CALL $8($0)
	*(($4 + [64])) = ($2 + $0)
	*($4 + [56]) = $2
	*($4 + [60]) = $2
	$6 = *($4 + [88])
	$0 = (*($4 + [92]) - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$25 }
	CALL memcpy($2, $6, $0)
	*($4 + [60]) = (*($4 + [60]) + $0)
	
.LABEL $label$25
	CALL $134(($4 + [16]), (uint_64)$1 >> (uint_64)(int_64)8), ($4 + [56]), $3)
	$0 = *($4 + [56])
	if ( ($0 == 0) ){ goto $label$26 }
	*($4 + [60]) = $0
	CALL $10($0)
	
.LABEL $label$26
	$0 = *($4 + [88])
	if ( ($0 == 0) ){ goto $label$27 }
	*($4 + [92]) = $0
	CALL $10($0)
	
.LABEL $label$27
	if ( ((*($4 + [160]) & [1]) == 0) ){ goto $label$28 }
	CALL $10(*($4 + [168]))
	
.LABEL $label$28
	$0 = *($4 + [120])
	if ( ($0 == 0) ){ goto $label$7 }
	*($4 + [124]) = $0
	CALL $10($0)
	
.LABEL $label$7
	$6 = *($4 + [40])
	if ( ($6 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($4 + [44])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$30 }
	
.LOOP $label$31:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$32 }
	CALL $10($2)
	
.LABEL $label$32
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$31 }
	$0 = *(($4 + [40]))
	goto $label$29 
	
.LABEL $label$30
	$0 = $6
	
.LABEL $label$29
	*($7) = $6
	CALL $10($0)
	
.LABEL $label$5
	$global$0 = ($4 + [176])
	return (unreachable)
	
.LABEL $label$4
	CALL $16(($4 + [120]))
	
.LABEL $label$3
	CALL $16(($4 + [72]))
	
.LABEL $label$2
	CALL $16(($4 + [104]))
	
.LABEL $label$1
	CALL $16(($4 + [56]))
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $106 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($3 + [32])) = $1
	*(($3 + [40])) = [0]
	*(($3 + [56])) = [0]
	*($3 + [16]) = $1
	*($3 + [24]) = (int_64)274877907968
	*($3 + [48]) = (int_64)0
	*($3 + [8]) = *($0)
	$4 = *($2 + [8])
	$0 = *(CALL $105(($3 + [8]), (uint_64)$4 >> (uint_64)(int_64)8)) + [4]
	if ( ($0) == 0) ){ goto $label$9 }
	$1 = *($2)
	$5 = *($0)
	if ( ((int_64)$5 < (int_64)$1) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL eosio_assert([0], [11533])
	$1 = *($2)
	$5 = *($0)
	if ( ((int_64)$5 >= (int_64)$1) ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [11557])
	if ( ((int_64)*($0) == (int_64)$1) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	if ( ((int_64)$5 != (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	CALL $135(($3 + [24]), (uint_64)*($0 + [8]) >> (uint_64)(int_64)8))
	$6 = *($3 + [48])
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_64)CALL current_receiver() == (int_64)*($3 + [8])) ){ goto $label$10 }
	CALL eosio_assert([0], [12940])
	
.LABEL $label$10
	$5 = *($0 + [8])
	if ( ((int_64)$4 == (int_64)$5) ){ goto $label$11 }
	CALL eosio_assert([0], [13130])
	
.LABEL $label$11
	$1 = (int_64)
	*($0) = $1(*($0) - $1))
	if ( ((int_64)$1 > (int_64)-4611686018427387904) ){ goto $label$12 }
	CALL eosio_assert([0], [13178])
	$1 = *($0)
	
.LABEL $label$12
	$4 = (uint_64)$5 >> (uint_64)(int_64)8)
	if ( ((int_64)$1 < (int_64)4611686018427387904) ){ goto $label$13 }
	CALL eosio_assert([0], [13200])
	
.LABEL $label$13
	if ( ((int_64)$4 == (int_64)(uint_64)*(($0 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$14 }
	CALL eosio_assert([0], [12991])
	
.LABEL $label$14
	*($3 + [136]) = [0]
	*($3 + [128]) = (int_64)0
	CALL $56(($3 + [128]), [17])
	$2 = *($3 + [132])
	$6 = *($3 + [128])
	*($3 + [148]) = $6
	*($3 + [144]) = $6
	*($3 + [152]) = $2
	*($3 + [96]) = ($3 + [144])
	*($3 + [112]) = $0
	*($3 + [116]) = ($0 + [16])
	CALL $125(($3 + [112]), ($3 + [96]))
	*($3 + [120]) = [0]
	*($3 + [112]) = (int_64)0
	$0 = (*($3 + [132]) - *($3 + [128]))
	if ( ($0 == 0) ){ goto $label$15 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$2 }
	$2 = CALL $8($0)
	*(($3 + [120])) = ($2 + $0)
	*($3 + [112]) = $2
	*($3 + [116]) = $2
	$6 = *($3 + [128])
	$0 = (*($3 + [132]) - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$15 }
	CALL memcpy($2, $6, $0)
	*($3 + [116]) = (*($3 + [116]) + $0)
	
.LABEL $label$15
	CALL $131(($3 + [144]), ($3 + [112]), [0])
	$0 = *($3 + [112])
	if ( ($0 == 0) ){ goto $label$16 }
	*($3 + [116]) = $0
	CALL $10($0)
	
.LABEL $label$16
	$0 = CALL $41(($3 + [80]), ($3 + [144]))
	CALL $132(($3 + [96]), $0)
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$17 }
	CALL $10(*($0 + [8]))
	
.LABEL $label$17
	*($3 + [72]) = [0]
	*($3 + [64]) = (int_64)0
	$0 = (*($3 + [100]) - *($3 + [96]))
	if ( ($0 == 0) ){ goto $label$18 }
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$1 }
	$2 = CALL $8($0)
	*(($3 + [72])) = ($2 + $0)
	*($3 + [64]) = $2
	*($3 + [68]) = $2
	$6 = *($3 + [96])
	$0 = (*($3 + [100]) - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$18 }
	CALL memcpy($2, $6, $0)
	*($3 + [68]) = (*($3 + [68]) + $0)
	
.LABEL $label$18
	CALL $133(($3 + [24]), $4, ($3 + [64]), (int_64)0)
	$0 = *($3 + [64])
	if ( ($0 == 0) ){ goto $label$19 }
	*($3 + [68]) = $0
	CALL $10($0)
	
.LABEL $label$19
	$0 = *($3 + [96])
	if ( ($0 == 0) ){ goto $label$20 }
	*($3 + [100]) = $0
	CALL $10($0)
	
.LABEL $label$20
	if ( ((*($3 + [144]) & [1]) == 0) ){ goto $label$21 }
	CALL $10(*($3 + [152]))
	
.LABEL $label$21
	$0 = *($3 + [128])
	if ( ($0 == 0) ){ goto $label$22 }
	*($3 + [132]) = $0
	CALL $10($0)
	
.LABEL $label$22
	$6 = *($3 + [48])
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($3 + [52])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$24 }
	
.LOOP $label$25:
	$0 = ($0 + [-24])
	$2 = *($0)
	*($0) = [0]
	if ( ($2 == 0) ){ goto $label$26 }
	CALL $10($2)
	
.LABEL $label$26
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$25 }
	$0 = *(($3 + [48]))
	goto $label$23 
	
.LABEL $label$24
	$0 = $6
	
.LABEL $label$23
	*($7) = $6
	CALL $10($0)
	
.LABEL $label$3
	$global$0 = ($3 + [160])
	return (unreachable)
	
.LABEL $label$2
	CALL $16(($3 + [112]))
	
.LABEL $label$1
	CALL $16(($3 + [64]))
	(unreachable)
}

void .FUNC $109 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $41($2, ($1 + [20]))
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$7 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	$6 = CALL $41(($2 + [16]), $1)
	CALL void $7((int_32 $5), (int_64 $4), (int_64 $3), (int_32 $6), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [11818])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$0 = *($0)
	$2 = ($0 + [8])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [11818])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$2 = ($0 + [16])
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [11818])
	$4 = *(($3 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [4])
	*(($3 = ($3 + [4]))) = (*($3) + [4])
	CALL $91(*($1), ($0 + [20]))
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	
.LABEL $label$18
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$16
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$15
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$9
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$7
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$3
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$2
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($3, *($1))
	*($0 + [8]) = *(($3 + [8]))
	*($0) = *($3)
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$1
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$4 = *($1)
	*($0 + [8]) = *($1 + [8])
	*($0) = $4
	$global$0 = ($3 + [16])
	$1
}

int_32 .FUNC $39 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $36($0, $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

int_32 .FUNC $36 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [288])
	$global$0 = $3
	*($3 + [284]) = $2
	*(($3 + [272])) = (int_64)0
	*(($3 + [264])) = (int_64)0
	*(($3 + [256])) = (int_64)0
	*($3 + [248]) = (int_64)0
	*($3 + [240]) = (int_64)0
	*($3 + [280]) = *($3 + [284])
	$4 = [0]
	$2 = [-1]
	if ( ((int_32)CALL $37([0], $1, ($3 + [280]), ($3 + [80]), ($3 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$4 = CALL $23($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) <= (int_32)[0]) ){ goto $label$6 }
	$5 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	*($0) = ($2 & [-33])
	$5 = ($2 & [32])
	if ( *($0 + [48]) ){ goto $label$4 }
	
.LABEL $label$5
	*(($6 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($3 + [80])
	*($0 + [28]) = $3
	*($0 + [20]) = $3
	$7 = *($0 + [44])
	*($0 + [44]) = $3
	$2 = CALL $37($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	if ( ($7 == 0) ){ goto $label$3 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $7
	*($6) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$7 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $7 )
	goto $label$3 
	
.LABEL $label$4
	$2 = CALL $37($0, $1, ($3 + [280]), ($3 + [80]), ($3 + [240]))
	
.LABEL $label$3
	$1 = *($0)
	*($0) = ($1 | $5)
	$1 = ($1 & [32])
	if ( ($4 == 0) ){ goto $label$7 }
	CALL $24($0)
	
.LABEL $label$7
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	$global$0 = ($3 + [288])
	return $2
}

int_32 .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_64 $29
	int_64 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	$5 = ($global$0 - [8128])
	$global$0 = $5
	$6 = (($5 + [704]) | [8])
	$7 = (($5 + [704]) | [9])
	$8 = ([-2] - ($5 + [704]))
	$9 = ($5 + [7664])
	$10 = (($5 + [692]) + [12])
	$11 = (($5 + [352]) + [54])
	$12 = (($5 + [352]) + [55])
	$13 = [0]
	$14 = [0]
	$15 = [0]
	
.LOOP $label$4:
	if ( ($0 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$1 = *($17)
	if ( ($1 == 0) ){ goto $label$1 }
	$15 = $17
	$1 = ($1 & [255])
	if ( ($1 == 0) ){ goto $label$24 }
	
.LOOP $label$25:
	if ( ((int_32)$1 == (int_32)[37]) ){ goto $label$23 }
	$1 = *($15 + [1])
	$15 = ($15 + [1])
	$1 = ($1 & [255])
	if ( $1 ){ goto $label$25 }
	
.LABEL $label$24
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$22 }
	goto $label$3 
	
.LABEL $label$23
	$18 = $15
	
.LOOP $label$27:
	if ( ((int_32)*(($18 + [1])) != (int_32)[37]) ){ goto $label$26 }
	$15 = ($15 + [1])
	$19 = *($18 + [2])
	$1 = ($18 + [2])
	$18 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$27 }
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$22 
	
.LABEL $label$26
	$1 = $18
	$18 = ([2147483647] - $14)
	$15 = ($15 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	
.LABEL $label$22
	if ( (*($0) & [32]) ){ goto $label$28 }
	CALL $29($17, $15, $0)
	
.LABEL $label$28
	if ( $15 ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	
.LOOP $label$29:
	$17 = $1
	if ( ((int_32)$15 > (int_32)([2147483647] - $14)) ){ goto $label$3 }
	$14 = ($15 + $14)
	$15 = *($17)
	if ( ($15 == 0) ){ goto $label$31 }
	$1 = $17
	$15 = ($15 & [255])
	if ( ($15 == 0) ){ goto $label$33 }
	
.LOOP $label$34:
	if ( ((int_32)$15 == (int_32)[37]) ){ goto $label$32 }
	$15 = *($1 + [1])
	$1 = ($1 + [1])
	$15 = ($15 & [255])
	if ( $15 ){ goto $label$34 }
	
.LABEL $label$33
	$18 = ([2147483647] - $14)
	$15 = ($1 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$32
	$18 = $1
	$15 = $1
	
.LOOP $label$36:
	if ( ((int_32)*(($15 + [1])) != (int_32)[37]) ){ goto $label$35 }
	$18 = ($18 + [1])
	$19 = *($15 + [2])
	$1 = ($15 + [2])
	$15 = $1
	if ( ((int_32)$19 == (int_32)[37]) ){ goto $label$36 }
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	goto $label$30 
	
.LABEL $label$35
	$1 = $15
	$18 = ([2147483647] - $14)
	$15 = ($18 - $17)
	if ( ((int_32)$15 <= (int_32)$18) ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$31
	if ( $0 ){ goto $label$1 }
	if ( ($13 == 0) ){ goto $label$46 }
	$1 = [1]
	$15 = *($4 + [4])
	if ( ($15 == 0) ){ goto $label$37 }
	CALL $38(($3 + [16]), $15, $2)
	$15 = *($4 + [8])
	if ( ($15 == 0) ){ goto $label$45 }
	CALL $38(($3 + [32]), $15, $2)
	$15 = *($4 + [12])
	if ( ($15 == 0) ){ goto $label$44 }
	CALL $38(($3 + [48]), $15, $2)
	$15 = *($4 + [16])
	if ( ($15 == 0) ){ goto $label$43 }
	CALL $38(($3 + [64]), $15, $2)
	$15 = *($4 + [20])
	if ( ($15 == 0) ){ goto $label$42 }
	CALL $38(($3 + [80]), $15, $2)
	$15 = *($4 + [24])
	if ( ($15 == 0) ){ goto $label$41 }
	CALL $38(($3 + [96]), $15, $2)
	$15 = *($4 + [28])
	if ( ($15 == 0) ){ goto $label$40 }
	CALL $38(($3 + [112]), $15, $2)
	$15 = *($4 + [32])
	if ( ($15 == 0) ){ goto $label$39 }
	CALL $38(($3 + [128]), $15, $2)
	$15 = *($4 + [36])
	if ( ($15 == 0) ){ goto $label$38 }
	CALL $38(($3 + [144]), $15, $2)
	$global$0 = ($5 + [8128])
	return [1]
	
.LABEL $label$46
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$45
	$1 = [2]
	goto $label$37 
	
.LABEL $label$44
	$1 = [3]
	goto $label$37 
	
.LABEL $label$43
	$1 = [4]
	goto $label$37 
	
.LABEL $label$42
	$1 = [5]
	goto $label$37 
	
.LABEL $label$41
	$1 = [6]
	goto $label$37 
	
.LABEL $label$40
	$1 = [7]
	goto $label$37 
	
.LABEL $label$39
	$1 = [8]
	goto $label$37 
	
.LABEL $label$38
	$1 = [9]
	
.LABEL $label$37
	$15 = ($4 + ($1 << [2]))
	
.LOOP $label$47:
	if ( *($15) ){ goto $label$18 }
	$15 = ($15 + [4])
	$14 = [1]
	$1 = ($1 + [1])
	if ( ((uint_32)$1 <= (uint_32)[9]) ){ goto $label$47 }
	goto $label$1 
	
.LABEL $label$30
	if ( $15 ){ goto $label$29 }
	
.LABEL $label$19
	$15 = ($1 + [1])
	$16 = *($1 + [1])
	$20 = ($16 + [-48])
	if ( ((uint_32)$20 > (uint_32)[9]) ){ goto $label$50 }
	$19 = ((int_32)*($1 + [2]) == (int_32)[36])
	$15 = ( ($1 + [3]) ? $15 : $19 )
	$21 = ( $20 ? [-1] : $19 )
	$13 = ( [1] ? $13 : $19 )
	$22 = [0]
	$16 = *(($1 + ( [3] ? [1] : $19 )))
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	goto $label$49 
	
.LABEL $label$50
	$21 = [-1]
	$22 = [0]
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$48 }
	
.LABEL $label$49
	$1 = ([1] << $1)
	if ( (($1 & [75913]) == 0) ){ goto $label$48 }
	$19 = ($15 + [1])
	$22 = [0]
	
.LOOP $label$51:
	$22 = ($1 | $22)
	$15 = $19
	$16 = *($15)
	$1 = ($16 + [-32])
	if ( ((uint_32)$1 >= (uint_32)[32]) ){ goto $label$48 }
	$19 = ($15 + [1])
	$1 = ([1] << $1)
	if ( ($1 & [75913]) ){ goto $label$51 }
	
.LABEL $label$48
	if ( ((int_32)$16 != (int_32)[42]) ){ goto $label$57 }
	$1 = (*($15 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$56 }
	if ( ((int_32)*($15 + [2]) != (int_32)[36]) ){ goto $label$56 }
	*(($4 + ($1 << [2]))) = [10]
	$23 = ($15 + [3])
	$13 = [1]
	$20 = *((($3 + (*(($15 + [1])) << [4])) + [-768]))
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	goto $label$55 
	
.LABEL $label$57
	$20 = [0]
	$19 = ($16 + [-48])
	if ( ((uint_32)$19 > (uint_32)[9]) ){ goto $label$54 }
	$1 = [0]
	
.LOOP $label$58:
	$20 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$59 }
	$1 = ((int_32)$1 * (int_32)[10])
	$20 = ( [-1] ? ($1 + $19) : ((int_32)$19 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$59
	$19 = *($15 + [1])
	$23 = ($15 + [1])
	$15 = $23
	$1 = $20
	$19 = ($19 + [-48])
	if ( ($19 <= [10]) ){ goto $label$58 }
	if ( ((int_32)$20 >= (int_32)[0]) ){ goto $label$52 }
	goto $label$3 
	
.LABEL $label$56
	if ( $13 ){ goto $label$18 }
	$23 = ($15 + [1])
	if ( ($0 == 0) ){ goto $label$53 }
	$15 = *($2)
	*($2) = ($15 + [4])
	$13 = [0]
	$20 = *($15)
	if ( ((int_32)$20 > (int_32)[-1]) ){ goto $label$52 }
	
.LABEL $label$55
	$20 = ([0] - $20)
	$22 = ($22 | [8192])
	goto $label$52 
	
.LABEL $label$54
	$23 = $15
	goto $label$52 
	
.LABEL $label$53
	$13 = [0]
	$20 = [0]
	
.LABEL $label$52
	$15 = [0]
	$16 = [-1]
	if ( ((int_32)*($23) != (int_32)[46]) ){ goto $label$66 }
	$19 = *($23 + [1])
	if ( ((int_32)$19 != (int_32)[42]) ){ goto $label$65 }
	$1 = (*($23 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$64 }
	if ( ((int_32)*($23 + [3]) != (int_32)[36]) ){ goto $label$64 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($23 + [4])
	$16 = *((($3 + (*(($23 + [2])) << [4])) + [-768]))
	goto $label$61 
	
.LABEL $label$66
	$1 = $23
	$24 = [0]
	goto $label$60 
	
.LABEL $label$65
	$1 = ($23 + [1])
	$25 = ($19 + [-48])
	if ( ((uint_32)$25 > (uint_32)[9]) ){ goto $label$63 }
	$23 = [0]
	$19 = $1
	
.LOOP $label$67:
	$16 = [-1]
	if ( ((uint_32)$23 > (uint_32)[214748364]) ){ goto $label$68 }
	$1 = ((int_32)$23 * (int_32)[10])
	$16 = ( [-1] ? ($1 + $25) : ((int_32)$25 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$68
	$24 = [1]
	$25 = *($19 + [1])
	$1 = ($19 + [1])
	$19 = $1
	$23 = $16
	$25 = ($25 + [-48])
	if ( ($25 <= [10]) ){ goto $label$67 }
	goto $label$60 
	
.LABEL $label$64
	if ( $13 ){ goto $label$18 }
	$1 = ($23 + [2])
	if ( ($0 == 0) ){ goto $label$62 }
	$19 = *($2)
	*($2) = ($19 + [4])
	$16 = *($19)
	goto $label$61 
	
.LABEL $label$63
	$24 = [1]
	$16 = [0]
	goto $label$60 
	
.LABEL $label$62
	$16 = [0]
	
.LABEL $label$61
	$24 = ((int_32)uint_32($16 >> [31]) ^ (int_32)[1])
	
.LABEL $label$60
	
.LOOP $label$69:
	$19 = $15
	$15 = (*($1) + [-65])
	if ( ((uint_32)$15 > (uint_32)[57]) ){ goto $label$18 }
	$1 = ($1 + [1])
	$15 = *(((((int_32)$19 * (int_32)[58]) + $15) + [10256]))
	if ( (($15 + [-1]) <= [8]) ){ goto $label$69 }
	if ( ($15 == 0) ){ goto $label$18 }
	if ( ((int_32)$15 != (int_32)[27]) ){ goto $label$72 }
	if ( ((int_32)$21 > (int_32)[-1]) ){ goto $label$18 }
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$72
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$73 }
	*(($4 + ($21 << [2]))) = $15
	$15 = ($3 + ($21 << [4]))
	*($5 + [424]) = *(($15 + [8]))
	*($5 + [416]) = *($15)
	$15 = [0]
	if ( ($0 == 0) ){ goto $label$4 }
	goto $label$71 
	
.LABEL $label$73
	if ( ($0 == 0) ){ goto $label$70 }
	CALL $38(($5 + [416]), $15, $2)
	
.LABEL $label$71
	$23 = ($22 & [-65537])
	$21 = ( $23 ? $22 : ($22 & [8192]) )
	$26 = [0]
	$27 = [8269]
	$15 = *(($1 + [-1]))
	$28 = ( ( ($15 & [-33]) ? $15 : ((int_32)($15 & [15]) == (int_32)[3]) ) ? $15 : $19 )
	$15 = ($28 + [-65])
	if ( ((uint_32)$15 > (uint_32)[55]) ){ goto $label$9 }
	$22 = $12
	goto $label$101 
	
.LABEL $label$101
	if ( ((int_32)$16 > (int_32)[-1]) ){ goto $label$102 }
	if ( $24 ){ goto $label$3 }
	
.LABEL $label$102
	$29 = *($5 + [424])
	$30 = *($5 + [416])
	*($5 + [748]) = [0]
	if ( (CALL $30($30, $29) == 0) ){ goto $label$103 }
	$31 = [1]
	$32 = [10736]
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	if ( ((int_32)CALL $25($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$103
	if ( ($21 & [2048]) ){ goto $label$99 }
	$31 = ($21 & [1])
	$32 = ( [10742] ? [10737] : $31 )
	if ( ((int_32)CALL $25($30, $29) > (int_32)[1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$100
	$29 = *($5 + [416])
	if ( ((int_64)$29 <= (int_64)-1) ){ goto $label$86 }
	if ( ($21 & [2048]) ){ goto $label$84 }
	$26 = ($21 & [1])
	$27 = ( [8271] ? [8269] : $26 )
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$99
	$31 = [1]
	$32 = [10739]
	if ( ((int_32)CALL $25($30, $29) <= (int_32)[1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$98
	*((($5 + [344]) + [4])) = [0]
	*($5 + [344]) = *($5 + [416])
	*($5 + [416]) = ($5 + [344])
	$16 = [-1]
	$17 = ($5 + [344])
	goto $label$96 
	
.LABEL $label$97
	$17 = *($5 + [416])
	if ( ($16 == 0) ){ goto $label$80 }
	
.LABEL $label$96
	$15 = [0]
	$18 = $17
	
.LOOP $label$104:
	$19 = *($18)
	if ( ($19 == 0) ){ goto $label$82 }
	$19 = CALL $27(($5 + [340]), $19)
	$22 = ((int_32)$19 < (int_32)[0])
	if ( $22 ){ goto $label$83 }
	if ( ((uint_32)$19 > (uint_32)($16 - $15)) ){ goto $label$83 }
	$18 = ($18 + [4])
	$15 = ($19 + $15)
	if ( ((uint_32)$16 > (uint_32)$15) ){ goto $label$104 }
	goto $label$82 
	
.LABEL $label$95
	*((($5 + [352]) + [54])) = *($5 + [416])
	$16 = [1]
	$17 = $11
	$22 = $12
	$21 = $23
	goto $label$8 
	
.LABEL $label$94
	$17 = CALL $33(*(CALL $5()))
	goto $label$88 
	
.LABEL $label$93
	$15 = [0]
	$18 = ($19 & [255])
	if ( ((uint_32)$18 > (uint_32)[7]) ){ goto $label$4 }
	goto $label$105 
	
.LABEL $label$105
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$92
	$17 = $12
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$106 }
	$17 = $12
	
.LOOP $label$107:
	*(($17 = ($17 + [-1]))) = (((CASTING uint_32)(uint_64 $29) & [7]) | [48])
	$29 = (uint_64)$29 >> (uint_64)(int_64)3
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$107 }
	
.LABEL $label$106
	if ( ($21 & [8]) ){ goto $label$81 }
	$26 = [0]
	$27 = [8269]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$91
	$16 = ( $16 ? [8] : ((uint_32)$16 > (uint_32)[8]) )
	$21 = ($21 | [8])
	$28 = [120]
	
.LABEL $label$90
	$26 = [0]
	$27 = [8269]
	$29 = *($5 + [416])
	if ( (int_64)($29 == 0) ){ goto $label$108 }
	$15 = ($28 & [32])
	$17 = $12
	
.LOOP $label$109:
	*(($17 = ($17 + [-1]))) = (*((((CASTING uint_32)(uint_64 $29) & [15]) + [10720])) | $15)
	$29 = (uint_64)$29 >> (uint_64)(int_64)4
	if ( ((int_64)$29) != (int_64)0) ){ goto $label$109 }
	if ( (($21 & [8]) == 0) ){ goto $label$12 }
	if ( (int_64)(*($5 + [416]) == 0) ){ goto $label$12 }
	$27 = (int_32($28 >> [4]) + [8269])
	$26 = [2]
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$108
	$17 = $12
	if ( $24 ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$89
	$15 = *($5 + [416])
	$17 = ( $15 ? [10220] : $15 )
	
.LABEL $label$88
	$26 = [0]
	$15 = CALL $34($17, ( [2147483647] ? $16 : ((int_32)$16 < (int_32)[0]) ))
	$22 = ($17 + $15)
	if ( ((int_32)$16 <= (int_32)[-1]) ){ goto $label$85 }
	$21 = $23
	$16 = $15
	goto $label$8 
	
.LABEL $label$87
	$26 = [0]
	$27 = [8269]
	$29 = *($5 + [416])
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$86
	$29 = (int_64)
	*($5 + [416]) = $29((int_64)0 - $29))
	$26 = [1]
	$27 = [8269]
	if ( ((uint_64)$29 >= (uint_64)(int_64)4294967296) ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$85
	$21 = $23
	$16 = $15
	if ( (*($22) == 0) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$84
	$26 = [1]
	$27 = [8270]
	if ( (uint_64)($29 <= (int_64)4294967296) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$83
	if ( $22 ){ goto $label$2 }
	
.LABEL $label$82
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$3 }
	$23 = ($21 & [73728])
	if ( $23 ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$81
	$15 = ($12 - $17)
	$27 = ( [8269] ? [8274] : ((int_32)$16 > (int_32)$15) )
	$26 = ((int_32)$16 <= (int_32)$15)
	goto $label$12 
	
.LABEL $label$80
	$15 = [0]
	$23 = ($21 & [73728])
	if ( ($23 == 0) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$79
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$78
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$77
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$76
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$75
	*(*($5 + [416])) = $14
	goto $label$4 
	
.LABEL $label$74
	*(*($5 + [416])) = (CASTING int_64)(int_32 $14)
	goto $label$4 
	
.LABEL $label$70
	$global$0 = ($5 + [8128])
	return [0]
	
.LABEL $label$18
	*(CALL $5()) = [22]
	goto $label$2 
	
.LABEL $label$17
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$16 }
	$18 = ($25 <= [256])
	$25 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $25 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$111 }
	$18 = ($19 == 0)
	$19 = $25
	
.LOOP $label$112:
	if ( (($18 & [1]) == 0) ){ goto $label$113 }
	CALL $29(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$113
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$112 }
	if ( $22 ){ goto $label$16 }
	$25 = ($25 & [255])
	goto $label$110 
	
.LABEL $label$111
	if ( $19 ){ goto $label$16 }
	
.LABEL $label$110
	CALL $29(($5 + [432]), $25, $0)
	
.LABEL $label$16
	if ( ($15 == 0) ){ goto $label$114 }
	$18 = [0]
	
.LOOP $label$115:
	$19 = *($17)
	if ( ($19 == 0) ){ goto $label$114 }
	$19 = CALL $27(($5 + [340]), $19)
	$18 = ($19 + $18)
	if ( ((uint_32)$18 > (uint_32)$15) ){ goto $label$114 }
	if ( (*($0) & [32]) ){ goto $label$116 }
	CALL $29(($5 + [340]), $19, $0)
	
.LABEL $label$116
	$17 = ($17 + [4])
	if ( ($18 <= $15) ){ goto $label$115 }
	
.LABEL $label$114
	if ( ((int_32)$23 != (int_32)[8192]) ){ goto $label$117 }
	if ( ((int_32)$20 <= (int_32)$15) ){ goto $label$117 }
	$18 = ($22 <= [256])
	$22 = ($20 - $15)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$119 }
	$18 = ($19 == 0)
	$19 = $22
	
.LOOP $label$120:
	if ( (($18 & [1]) == 0) ){ goto $label$121 }
	CALL $29(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$121
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$120 }
	if ( $16 ){ goto $label$117 }
	$22 = ($22 & [255])
	goto $label$118 
	
.LABEL $label$119
	if ( $19 ){ goto $label$117 }
	
.LABEL $label$118
	CALL $29(($5 + [432]), $22, $0)
	
.LABEL $label$117
	$15 = ( $20 ? $15 : ((int_32)$20 > (int_32)$15) )
	goto $label$4 
	
.LABEL $label$15
	$30 = $29
	$17 = $12
	goto $label$13 
	
.LABEL $label$14
	$17 = $12
	
.LOOP $label$122:
	$30 = ((uint_64)$29 / (uint_64)(int_64)10)
	*(($17 = ($17 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($29 - ((int_64)$30 * (int_64)10))) | [48])
	$15 = ((uint_64)$29 > (uint_64)(int_64)42949672959)
	$29 = $30
	if ( $15 ){ goto $label$122 }
	
.LABEL $label$13
	$15 = (CASTING uint_32)(uint_64 $30)
	if ( ($15 == 0) ){ goto $label$12 }
	
.LOOP $label$123:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$123 }
	
.LABEL $label$12
	if ( ($24 == 0) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$10
	$21 = ( ($21 & [-65537]) ? $21 : ((int_32)$16 > (int_32)[-1]) )
	$29 = *($5 + [416])
	if ( $16 ){ goto $label$124 }
	if ( ((int_64)($29 == 0) == 0) ){ goto $label$124 }
	$17 = $12
	$22 = $12
	$16 = [0]
	goto $label$8 
	
.LABEL $label$124
	$15 = (($12 - $17) + (int_64)($29 == 0))
	$16 = ( $16 ? $15 : ((int_32)$16 > (int_32)$15) )
	
.LABEL $label$9
	$22 = $12
	
.LABEL $label$8
	$24 = ($22 - $17)
	$28 = ( $24 ? $16 : ((int_32)$16 < (int_32)$24) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$3 }
	$25 = ($26 + $28)
	$15 = ( $25 ? $20 : ((int_32)$20 < (int_32)$25) )
	if ( ((int_32)$15 > (int_32)$18) ){ goto $label$3 }
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$125 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$125 }
	$18 = ($31 <= [256])
	$31 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $31 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$127 }
	$18 = ($19 == 0)
	$19 = $31
	
.LOOP $label$128:
	if ( (($18 & [1]) == 0) ){ goto $label$129 }
	CALL $29(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$129
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$128 }
	if ( $23 ){ goto $label$125 }
	$31 = ($31 & [255])
	goto $label$126 
	
.LABEL $label$127
	if ( $19 ){ goto $label$125 }
	
.LABEL $label$126
	CALL $29(($5 + [432]), $31, $0)
	
.LABEL $label$125
	if ( (*($0) & [32]) ){ goto $label$130 }
	CALL $29($27, $26, $0)
	
.LABEL $label$130
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$131 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$131 }
	$18 = ($26 <= [256])
	$26 = ($15 - $25)
	CALL memset(($5 + [432]), [48], ( $26 ? [256] : $18 ))
	$22 = *($0)
	$19 = ($22 & [32])
	if ( $18 ){ goto $label$133 }
	$18 = ($19 == 0)
	$19 = $26
	
.LOOP $label$134:
	if ( (($18 & [1]) == 0) ){ goto $label$135 }
	CALL $29(($5 + [432]), [256], $0)
	$22 = *($0)
	
.LABEL $label$135
	$23 = ($22 & [32])
	$18 = ($23 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$134 }
	if ( $23 ){ goto $label$131 }
	$26 = ($26 & [255])
	goto $label$132 
	
.LABEL $label$133
	if ( $19 ){ goto $label$131 }
	
.LABEL $label$132
	CALL $29(($5 + [432]), $26, $0)
	
.LABEL $label$131
	if ( ((int_32)$24 >= (int_32)$16) ){ goto $label$136 }
	$18 = ($23 <= [256])
	$23 = ($28 - $24)
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $18 ))
	$16 = *($0)
	$19 = ($16 & [32])
	if ( $18 ){ goto $label$138 }
	$18 = ($19 == 0)
	$19 = $23
	
.LOOP $label$139:
	if ( (($18 & [1]) == 0) ){ goto $label$140 }
	CALL $29(($5 + [432]), [256], $0)
	$16 = *($0)
	
.LABEL $label$140
	$22 = ($16 & [32])
	$18 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$139 }
	if ( $22 ){ goto $label$136 }
	$23 = ($23 & [255])
	goto $label$137 
	
.LABEL $label$138
	if ( $19 ){ goto $label$136 }
	
.LABEL $label$137
	CALL $29(($5 + [432]), $23, $0)
	
.LABEL $label$136
	if ( (*($0) & [32]) ){ goto $label$141 }
	CALL $29($17, $24, $0)
	
.LABEL $label$141
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$4 }
	if ( ((int_32)$25 >= (int_32)$20) ){ goto $label$4 }
	$18 = ($16 <= [256])
	$16 = ($15 - $25)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$143 }
	$18 = ($19 == 0)
	$19 = $16
	
.LOOP $label$144:
	if ( (($18 & [1]) == 0) ){ goto $label$145 }
	CALL $29(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$145
	$20 = ($17 & [32])
	$18 = ($20 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$144 }
	if ( $20 ){ goto $label$4 }
	$16 = ($16 & [255])
	goto $label$142 
	
.LABEL $label$143
	if ( $19 ){ goto $label$4 }
	
.LABEL $label$142
	CALL $29(($5 + [432]), $16, $0)
	goto $label$4 
	
.LABEL $label$7
	$23 = CALL __unordtf2($30, $29, $30, $29)
	$16 = ($31 + [3])
	if ( ($21 & [8192]) ){ goto $label$146 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$146 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$148 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$149:
	if ( (($15 & [1]) == 0) ){ goto $label$150 }
	CALL $29(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$150
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$149 }
	if ( $17 ){ goto $label$146 }
	$22 = ($22 & [255])
	goto $label$147 
	
.LABEL $label$148
	if ( $18 ){ goto $label$146 }
	
.LABEL $label$147
	CALL $29(($5 + [432]), $22, $0)
	
.LABEL $label$146
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$155 }
	CALL $29($32, $31, $0)
	if ( ((*($0) & [32]) == 0) ){ goto $label$154 }
	goto $label$153 
	
.LABEL $label$155
	if ( ($15 & [32]) ){ goto $label$153 }
	
.LABEL $label$154
	$15 = uint_32(($28 & [32]) >> [5])
	CALL $29(( ( [10884] ? [10914] : $15 ) ? ( [10783] ? [10820] : $15 ) : $23 ), [3], $0)
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	goto $label$152 
	
.LABEL $label$153
	if ( ((int_32)($21 & [73728]) != (int_32)[8192]) ){ goto $label$151 }
	
.LABEL $label$152
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$151 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$157 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$158:
	if ( (($15 & [1]) == 0) ){ goto $label$159 }
	CALL $29(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$159
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$158 }
	if ( $17 ){ goto $label$151 }
	$22 = ($22 & [255])
	goto $label$156 
	
.LABEL $label$157
	if ( $18 ){ goto $label$151 }
	
.LABEL $label$156
	CALL $29(($5 + [432]), $22, $0)
	
.LABEL $label$151
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	goto $label$5 
	
.LABEL $label$6
	CALL $35(($5 + [320]), $30, $29, ($5 + [748]))
	$30 = *($5 + [328])
	$29 = *($5 + [320])
	CALL __addtf3(($5 + [304]), $29, $30, $29, $30)
	$30 = *((($5 + [304]) + [8]))
	$29 = *($5 + [304])
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$160 }
	*($5 + [748]) = (*($5 + [748]) + [-1])
	
.LABEL $label$160
	$33 = ($28 | [32])
	if ( ((int_32)$33 != (int_32)[97]) ){ goto $label$173 }
	$22 = ($28 & [32])
	$26 = ( ($32 + [9]) ? $32 : $22 )
	if ( ((uint_32)$16 > (uint_32)[26]) ){ goto $label$171 }
	if ( (([27] - $16) == 0) ){ goto $label$171 }
	$15 = ($16 + [-27])
	$34 = (int_64)4612248968380809216
	$35 = (int_64)0
	
.LOOP $label$174:
	CALL __multf3(($5 + [208]), $35, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($5 + [208]) + [8]))
	$35 = *($5 + [208])
	$15 = ($15 + [1])
	if ( $15 ){ goto $label$174 }
	if ( ((int_32)*($26) != (int_32)[45]) ){ goto $label$172 }
	CALL __subtf3(($5 + [160]), $29, ((int_64)$30 ^ (int_64)-9223372036854775808), $35, $34)
	CALL __addtf3(($5 + [144]), $35, $34, *($5 + [160]), *((($5 + [160]) + [8])))
	$30 = ((int_64)*((($5 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$29 = *($5 + [144])
	goto $label$171 
	
.LABEL $label$173
	$15 = ((int_32)$16 < (int_32)[0])
	if ( (CALL __netf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$176 }
	CALL __multf3(($5 + [288]), $29, $30, (int_64)0, (int_64)4619285842798575616)
	$17 = (*($5 + [748]) + [-28])
	*($5 + [748]) = $17
	$30 = *((($5 + [288]) + [8]))
	$29 = *($5 + [288])
	goto $label$175 
	
.LABEL $label$176
	$17 = *($5 + [748])
	
.LABEL $label$175
	$26 = ( [6] ? $16 : $15 )
	$27 = ( ($5 + [752]) ? $9 : ((int_32)$17 < (int_32)[0]) )
	$19 = $27
	
.LOOP $label$177:
	$15 = CALL __fixunstfsi($29, $30)
	CALL __floatunsitf(($5 + [272]), $15)
	CALL __subtf3(($5 + [256]), $29, $30, *($5 + [272]), *((($5 + [272]) + [8])))
	CALL __multf3(($5 + [240]), *($5 + [256]), *((($5 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($19) = $15
	$19 = ($19 + [4])
	$30 = *((($5 + [240]) + [8]))
	$29 = *($5 + [240])
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$177 }
	if ( ((int_32)$17 < (int_32)[1]) ){ goto $label$179 }
	$18 = $27
	
.LOOP $label$180:
	$17 = ( $17 ? [29] : ((int_32)$17 < (int_32)[29]) )
	$15 = ($19 + [-4])
	if ( ($15 <= $18) ){ goto $label$181 }
	$30 = (CASTING uint_64)(uint_32 $17)
	$29 = (int_64)0
	
.LOOP $label$182:
	$29 = ((uint_64)$29 / (uint_64)(int_64)1000000000)
	$29 = ((int_64)((int_64)*($15) << (int_64)$30) + (int_64)((int_64)$29 & (int_64)4294967295))
	*($15) = (int_64))($29 - ((int_64)$29 * (int_64)1000000000))
	$15 = ($15 + [-4])
	if ( ((uint_32)$15 >= (uint_32)$18) ){ goto $label$182 }
	$15 = (CASTING uint_32)(uint_64 $29)
	if ( ($15 == 0) ){ goto $label$181 }
	*(($18 = ($18 + [-4]))) = $15
	
.LABEL $label$181
	
.LOOP $label$184:
	$15 = $19
	if ( ((uint_32)$15 <= (uint_32)$18) ){ goto $label$183 }
	$19 = ($15 + [-4])
	if ( (*($19) == 0) ){ goto $label$184 }
	
.LABEL $label$183
	$17 = (*($5 + [748]) - $17)
	*($5 + [748]) = $17
	$19 = $15
	if ( ((int_32)$17 > (int_32)[0]) ){ goto $label$180 }
	goto $label$178 
	
.LABEL $label$179
	$15 = $19
	$18 = $27
	
.LABEL $label$178
	if ( ((int_32)$17 > (int_32)[-1]) ){ goto $label$185 }
	$24 = (((uint_32)($26 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$33 != (int_32)[102]) ){ goto $label$186 }
	$36 = ($27 + ($24 << [2]))
	
.LOOP $label$187:
	$19 = ([0] - $17)
	$22 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$189 }
	$23 = uint_32([1000000000] >> $22)
	$25 = ((int_32)([-1] << $22) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$190:
	$16 = *($19)
	*($19) = (uint_32($16 >> $22) + $17)
	$17 = ((int_32)($16 & $25) * (int_32)$23)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$190 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$188 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$188 
	
.LABEL $label$189
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$188
	$17 = (*($5 + [748]) + $22)
	*($5 + [748]) = $17
	$15 = ( $36 ? $15 : ((int_32)int_32(($15 - $27) >> [2]) > (int_32)$24) )
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$187 }
	goto $label$185 
	
.LABEL $label$186
	
.LOOP $label$191:
	$19 = ([0] - $17)
	$22 = ( $19 ? [9] : ((int_32)$19 < (int_32)[9]) )
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$193 }
	$23 = uint_32([1000000000] >> $22)
	$25 = ((int_32)([-1] << $22) ^ (int_32)[-1])
	$17 = [0]
	$19 = $18
	
.LOOP $label$194:
	$16 = *($19)
	*($19) = (uint_32($16 >> $22) + $17)
	$17 = ((int_32)($16 & $25) * (int_32)$23)
	$19 = ($19 + [4])
	if ( ($19 <= $15) ){ goto $label$194 }
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	if ( ($17 == 0) ){ goto $label$192 }
	*($15) = $17
	$15 = ($15 + [4])
	goto $label$192 
	
.LABEL $label$193
	$18 = ( $18 ? ($18 + [4]) : *($18) )
	
.LABEL $label$192
	$17 = (*($5 + [748]) + $22)
	*($5 + [748]) = $17
	$15 = ( ($18 + ($24 << [2])) ? $15 : ((int_32)int_32(($15 - $18) >> [2]) > (int_32)$24) )
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$191 }
	
.LABEL $label$185
	$19 = [0]
	if ( ((uint_32)$18 >= (uint_32)$15) ){ goto $label$195 }
	$19 = ((int_32)int_32(($27 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$195 }
	$17 = [10]
	
.LOOP $label$196:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$196 }
	
.LABEL $label$195
	$23 = ((int_32)$33 == (int_32)[103])
	$25 = (((int_32)$26 != (int_32)[0]) & $23)
	$16 = ( [0] ? $19 : ((int_32)$33 == (int_32)[102]) )
	$17 = (($26 - $16) - $25)
	if ( ((int_32)$17 >= (int_32)(((int_32)int_32(($15 - $27) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$197 }
	$24 = ($17 + [147456])
	$36 = ((int_32)$24 / (int_32)[9])
	$33 = ($27 + ($36 << [2]))
	$22 = ($33 + [-65532])
	$17 = [10]
	$36 = ((int_32)$36 * (int_32)[9])
	if ( ((int_32)($24 - $36) > (int_32)[7]) ){ goto $label$198 }
	$16 = (((($26 + ([0] - $25)) + [147455]) - $16) - $36)
	$17 = [10]
	
.LOOP $label$199:
	$17 = ((int_32)$17 * (int_32)[10])
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$199 }
	
.LABEL $label$198
	$24 = ((uint_32)$25 / (uint_32)$17)
	$25 = *($22)
	$16 = ($25 - ((int_32)$24 * (int_32)$17))
	$36 = ($22 + [4])
	if ( ((int_32)$36 != (int_32)$15) ){ goto $label$201 }
	if ( ($16 == 0) ){ goto $label$200 }
	
.LABEL $label$201
	if ( ($24 & [1]) ){ goto $label$203 }
	$29 = (int_64)4643211215818981376
	$30 = (int_64)0
	if ( ((uint_32)$22 <= (uint_32)$18) ){ goto $label$202 }
	if ( ((int_32)$17 != (int_32)[1000000000]) ){ goto $label$202 }
	if ( ((*(($22 + [-4])) & [1]) == 0) ){ goto $label$202 }
	
.LABEL $label$203
	$29 = (int_64)4643211215818981376
	$30 = (int_64)1
	
.LABEL $label$202
	$34 = (int_64)4611123068473966592
	$24 = uint_32($17 >> [1])
	if ( ($16 <= $24) ){ goto $label$204 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$16 == (int_32)$24) ) ? (int_64)4611545280939032576 : ((int_32)$36 == (int_32)$15) )
	
.LABEL $label$204
	if ( ($31 == 0) ){ goto $label$205 }
	if ( ((int_32)*($32) != (int_32)[45]) ){ goto $label$205 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$29 = ((int_64)$29 ^ (int_64)-9223372036854775808)
	
.LABEL $label$205
	CALL __addtf3(($5 + [224]), $30, $29, (int_64)0, $34)
	$16 = ($25 - $16)
	*($22) = $16
	if ( (CALL __eqtf2(*($5 + [224]), *((($5 + [224]) + [8])), $30, $29) == 0) ){ goto $label$200 }
	$19 = ($16 + $17)
	*($22) = $19
	if ( ($19 <= [1000000000]) ){ goto $label$206 }
	$19 = ($33 + [-65536])
	
.LOOP $label$207:
	*(($19 + [4])) = [0]
	if ( ((uint_32)$19 >= (uint_32)$18) ){ goto $label$208 }
	*(($18 = ($18 + [-4]))) = [0]
	
.LABEL $label$208
	$17 = (*($19) + [1])
	*($19) = $17
	$19 = ($19 + [-4])
	if ( ((uint_32)$17 > (uint_32)[999999999]) ){ goto $label$207 }
	$22 = ($19 + [4])
	
.LABEL $label$206
	$19 = ((int_32)int_32(($27 - $18) >> [2]) * (int_32)[9])
	$16 = *($18)
	if ( ($16 <= [10]) ){ goto $label$200 }
	$17 = [10]
	
.LOOP $label$209:
	$19 = ($19 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( ((uint_32)$16 >= (uint_32)$17) ){ goto $label$209 }
	
.LABEL $label$200
	$17 = ($22 + [4])
	$15 = ( $17 ? $15 : ((uint_32)$15 > (uint_32)$17) )
	
.LABEL $label$197
	$22 = ([0] - $19)
	
.LOOP $label$212:
	$16 = $15
	if ( ((uint_32)$16 <= (uint_32)$18) ){ goto $label$211 }
	$15 = ($16 + [-4])
	if ( (*($15) == 0) ){ goto $label$212 }
	$24 = [1]
	if ( $23 ){ goto $label$210 }
	goto $label$162 
	
.LABEL $label$211
	$24 = [0]
	if ( ($23 == 0) ){ goto $label$162 }
	
.LABEL $label$210
	$15 = ($26 + ($26 == 0))
	if ( ((int_32)$15 <= (int_32)$19) ){ goto $label$170 }
	if ( ((int_32)$19 < (int_32)[-4]) ){ goto $label$170 }
	$28 = ($28 + [-1])
	$26 = (($15 + [-1]) - $19)
	$23 = ($21 & [8])
	if ( ($23 == 0) ){ goto $label$169 }
	goto $label$161 
	
.LABEL $label$172
	CALL __addtf3(($5 + [192]), $29, $30, $35, $34)
	CALL __subtf3(($5 + [176]), *($5 + [192]), *((($5 + [192]) + [8])), $35, $34)
	$30 = *((($5 + [176]) + [8]))
	$29 = *($5 + [176])
	
.LABEL $label$171
	$19 = $10
	$15 = int_32($23 >> [31])
	$23 = *($5 + [748])
	$15 = ((int_32)($23 + $15) ^ (int_32)$15)
	if ( ($15 == 0) ){ goto $label$214 }
	$18 = [0]
	
.LOOP $label$215:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [692]) + $18) + [11])) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$215 }
	$19 = ((($5 + [692]) + $18) + [12])
	if ( $18 ){ goto $label$213 }
	
.LABEL $label$214
	*(($19 = ($19 + [-1]))) = [48]
	
.LABEL $label$213
	$25 = ($31 | [2])
	*(($24 = ($19 + [-2]))) = ($28 + [15])
	*(($19 + [-1])) = ( [45] ? [43] : ((int_32)$23 < (int_32)[0]) )
	if ( ($21 & [8]) ){ goto $label$216 }
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$168 }
	$15 = ($5 + [704])
	
.LOOP $label$217:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [80]), $18)
	CALL __subtf3(($5 + [64]), $29, $30, *($5 + [80]), *((($5 + [80]) + [8])))
	CALL __multf3(($5 + [48]), *($5 + [64]), *((($5 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [10720])) | $22)
	$30 = *((($5 + [48]) + [8]))
	$29 = *($5 + [48])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$218 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$218
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$217 }
	goto $label$167 
	
.LABEL $label$216
	$15 = ($5 + [704])
	
.LOOP $label$219:
	$18 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [128]), $18)
	CALL __subtf3(($5 + [112]), $29, $30, *($5 + [128]), *((($5 + [128]) + [8])))
	CALL __multf3(($5 + [96]), *($5 + [112]), *((($5 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($15) = (*(($18 + [10720])) | $22)
	$30 = *((($5 + [96]) + [8]))
	$29 = *($5 + [96])
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$220 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$220
	$15 = $18
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$219 }
	goto $label$167 
	
.LABEL $label$170
	$26 = ($15 + [-1])
	$28 = ($28 + [-2])
	$23 = ($21 & [8])
	if ( $23 ){ goto $label$161 }
	
.LABEL $label$169
	$15 = [9]
	if ( ($24 == 0) ){ goto $label$221 }
	$23 = *(($16 + [-4]))
	if ( ($23 == 0) ){ goto $label$221 }
	$15 = [0]
	if ( ((uint_32)$23 % (uint_32)[10]) ){ goto $label$221 }
	$17 = [10]
	$15 = [0]
	
.LOOP $label$222:
	$15 = ($15 + [1])
	$17 = ((int_32)$17 * (int_32)[10])
	if ( (((uint_32)$23 % (uint_32)$17) == 0) ){ goto $label$222 }
	
.LABEL $label$221
	$17 = (((int_32)int_32(($16 - $27) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($28 | [32]) != (int_32)[102]) ){ goto $label$166 }
	$23 = [0]
	$15 = ($17 - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$26 = ( $26 ? $15 : ((int_32)$26 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$168
	$18 = ($5 + [704])
	
.LOOP $label$223:
	$19 = CALL __fixtfsi($29, $30)
	CALL __floatsitf(($5 + [32]), $19)
	CALL __subtf3(($5 + [16]), $29, $30, *($5 + [32]), *((($5 + [32]) + [8])))
	CALL __multf3($5, *($5 + [16]), *((($5 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($15 = $18)) = (*(($19 + [10720])) | $22)
	$30 = *(($5 + [8]))
	$29 = *($5)
	$18 = ($15 + [1])
	if ( ((int_32)($18 - ($5 + [704])) != (int_32)[1]) ){ goto $label$224 }
	if ( (CALL __eqtf2($29, $30, (int_64)0, (int_64)0) == 0) ){ goto $label$224 }
	*(($15 + [1])) = [46]
	$18 = ($15 + [2])
	
.LABEL $label$224
	if ( CALL __netf2($29, $30, (int_64)0, (int_64)0) ){ goto $label$223 }
	
.LABEL $label$167
	$15 = [-1]
	$22 = ($10 - $24)
	if ( ((int_32)(([2147483645] - $25) - $22) < (int_32)$16) ){ goto $label$5 }
	$23 = ($18 - ($5 + [704]))
	$28 = ( ( ($16 + [2]) ? $23 : ((int_32)($8 + $18) < (int_32)$16) ) ? $23 : $16 )
	$16 = (($22 + $25) + $28)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$163 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$163 }
	$15 = ($27 <= [256])
	$27 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $27 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$165 }
	$15 = ($18 == 0)
	$18 = $27
	
.LOOP $label$225:
	if ( (($15 & [1]) == 0) ){ goto $label$226 }
	CALL $29(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$226
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$225 }
	if ( $17 ){ goto $label$163 }
	$27 = ($27 & [255])
	goto $label$164 
	
.LABEL $label$166
	$23 = [0]
	$15 = (($17 + $19) - $15)
	$15 = ( $15 ? [0] : ((int_32)$15 > (int_32)[0]) )
	$26 = ( $26 ? $15 : ((int_32)$26 < (int_32)$15) )
	goto $label$161 
	
.LABEL $label$165
	if ( $18 ){ goto $label$163 }
	
.LABEL $label$164
	CALL $29(($5 + [432]), $27, $0)
	
.LABEL $label$163
	if ( (*($0) & [32]) ){ goto $label$227 }
	CALL $29($26, $25, $0)
	
.LABEL $label$227
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$228 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$228 }
	$15 = ($25 <= [256])
	$25 = ($20 - $16)
	CALL memset(($5 + [432]), [48], ( $25 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$230 }
	$15 = ($18 == 0)
	$18 = $25
	
.LOOP $label$231:
	if ( (($15 & [1]) == 0) ){ goto $label$232 }
	CALL $29(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$232
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$231 }
	if ( $17 ){ goto $label$228 }
	$25 = ($25 & [255])
	goto $label$229 
	
.LABEL $label$230
	if ( $18 ){ goto $label$228 }
	
.LABEL $label$229
	CALL $29(($5 + [432]), $25, $0)
	
.LABEL $label$228
	if ( (*($0) & [32]) ){ goto $label$233 }
	CALL $29(($5 + [704]), $23, $0)
	
.LABEL $label$233
	$23 = ($28 - $23)
	if ( ((int_32)$23 < (int_32)[1]) ){ goto $label$234 }
	$15 = ($23 <= [256])
	CALL memset(($5 + [432]), [48], ( $23 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$236 }
	$15 = ($18 == 0)
	$18 = $23
	
.LOOP $label$237:
	if ( (($15 & [1]) == 0) ){ goto $label$238 }
	CALL $29(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$238
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$237 }
	if ( $17 ){ goto $label$234 }
	$23 = ($23 & [255])
	goto $label$235 
	
.LABEL $label$236
	if ( $18 ){ goto $label$234 }
	
.LABEL $label$235
	CALL $29(($5 + [432]), $23, $0)
	
.LABEL $label$234
	if ( (*($0) & [32]) ){ goto $label$239 }
	CALL $29($24, $22, $0)
	
.LABEL $label$239
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$240 }
	if ( ((int_32)$20 <= (int_32)$16) ){ goto $label$240 }
	$15 = ($22 <= [256])
	$22 = ($20 - $16)
	CALL memset(($5 + [432]), [32], ( $22 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$242 }
	$15 = ($18 == 0)
	$18 = $22
	
.LOOP $label$243:
	if ( (($15 & [1]) == 0) ){ goto $label$244 }
	CALL $29(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$244
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$243 }
	if ( $17 ){ goto $label$240 }
	$22 = ($22 & [255])
	goto $label$241 
	
.LABEL $label$242
	if ( $18 ){ goto $label$240 }
	
.LABEL $label$241
	CALL $29(($5 + [432]), $22, $0)
	
.LABEL $label$240
	$15 = ( $20 ? $16 : ((int_32)$20 > (int_32)$16) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$162
	$23 = ($21 & [8])
	
.LABEL $label$161
	$15 = [-1]
	$25 = ($26 | $23)
	if ( ((int_32)$26 > (int_32)( [2147483645] ? [2147483646] : $25 )) ){ goto $label$5 }
	$36 = (($26 + ((int_32)$25 != (int_32)[0])) + [1])
	$37 = ((int_32)($28 | [32]) != (int_32)[102])
	if ( $37 ){ goto $label$246 }
	if ( ((int_32)$19 > (int_32)([2147483647] - $36)) ){ goto $label$5 }
	$19 = ( $19 ? [0] : ((int_32)$19 > (int_32)[0]) )
	goto $label$245 
	
.LABEL $label$246
	$17 = $10
	$38 = ((int_32)$19 < (int_32)[0])
	$15 = ( $22 ? $19 : $38 )
	if ( ($15 == 0) ){ goto $label$247 }
	
.LOOP $label$248:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($17 = ($17 + [-1]))) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$22 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $22 ){ goto $label$248 }
	
.LABEL $label$247
	if ( ((int_32)($10 - $17) > (int_32)[1]) ){ goto $label$249 }
	$15 = ($17 + [-1])
	
.LOOP $label$250:
	*($15) = [48]
	$19 = ($10 - $15)
	$17 = ($15 + [-1])
	$15 = $17
	if ( ((int_32)$19 < (int_32)[2]) ){ goto $label$250 }
	$17 = ($17 + [1])
	
.LABEL $label$249
	*(($33 = ($17 + [-2]))) = $28
	$15 = [-1]
	*(($17 + [-1])) = ( [45] ? [43] : $38 )
	$19 = ($10 - $33)
	if ( ((int_32)$19 > (int_32)([2147483647] - $36)) ){ goto $label$5 }
	
.LABEL $label$245
	$15 = [-1]
	$19 = ($19 + $36)
	if ( ((int_32)$19 > (int_32)((int_32)$31 ^ (int_32)[2147483647])) ){ goto $label$5 }
	$28 = ($19 + $31)
	$21 = ($21 & [73728])
	if ( $21 ){ goto $label$251 }
	if ( ((int_32)$20 <= (int_32)$28) ){ goto $label$251 }
	$15 = ($36 <= [256])
	$36 = ($20 - $28)
	CALL memset(($5 + [432]), [32], ( $36 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$253 }
	$15 = ($19 == 0)
	$19 = $36
	
.LOOP $label$254:
	if ( (($15 & [1]) == 0) ){ goto $label$255 }
	CALL $29(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$255
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$254 }
	if ( $22 ){ goto $label$251 }
	$36 = ($36 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $19 ){ goto $label$251 }
	
.LABEL $label$252
	CALL $29(($5 + [432]), $36, $0)
	
.LABEL $label$251
	if ( (*($0) & [32]) ){ goto $label$256 }
	CALL $29($32, $31, $0)
	
.LABEL $label$256
	if ( ((int_32)$21 != (int_32)[65536]) ){ goto $label$257 }
	if ( ((int_32)$20 <= (int_32)$28) ){ goto $label$257 }
	$15 = ($31 <= [256])
	$31 = ($20 - $28)
	CALL memset(($5 + [432]), [48], ( $31 ? [256] : $15 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $15 ){ goto $label$259 }
	$15 = ($19 == 0)
	$19 = $31
	
.LOOP $label$260:
	if ( (($15 & [1]) == 0) ){ goto $label$261 }
	CALL $29(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$261
	$22 = ($17 & [32])
	$15 = ($22 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$260 }
	if ( $22 ){ goto $label$257 }
	$31 = ($31 & [255])
	goto $label$258 
	
.LABEL $label$259
	if ( $19 ){ goto $label$257 }
	
.LABEL $label$258
	CALL $29(($5 + [432]), $31, $0)
	
.LABEL $label$257
	if ( $37 ){ goto $label$272 }
	$23 = ( $27 ? $18 : ((uint_32)$18 > (uint_32)$27) )
	$22 = $23
	
.LOOP $label$273:
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$275 }
	$18 = [0]
	
.LOOP $label$276:
	$19 = ((uint_32)$15 / (uint_32)[10])
	*(($6 + $18)) = (($15 - ((int_32)$19 * (int_32)[10])) | [48])
	$18 = ($18 + [-1])
	$17 = ((uint_32)$15 > (uint_32)[9])
	$15 = $19
	if ( $17 ){ goto $label$276 }
	goto $label$274 
	
.LABEL $label$275
	$18 = [0]
	
.LABEL $label$274
	$15 = ($7 + $18)
	if ( ((int_32)$22 == (int_32)$23) ){ goto $label$280 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$279 }
	
.LOOP $label$281:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$281 }
	$15 = ($5 + [704])
	if ( ((*($0) & [32]) == 0) ){ goto $label$278 }
	goto $label$277 
	
.LABEL $label$280
	if ( $18 ){ goto $label$279 }
	*(($15 = ($15 + [-1]))) = [48]
	
.LABEL $label$279
	if ( (*($0) & [32]) ){ goto $label$277 }
	
.LABEL $label$278
	CALL $29($15, ($7 - $15), $0)
	
.LABEL $label$277
	$22 = ($22 + [4])
	if ( ((uint_32)$22 <= (uint_32)$27) ){ goto $label$273 }
	if ( ($25 == 0) ){ goto $label$282 }
	if ( (*($0) & [32]) ){ goto $label$282 }
	CALL $29([10963], [1], $0)
	
.LABEL $label$282
	if ( ((int_32)$26 < (int_32)[1]) ){ goto $label$271 }
	if ( ((uint_32)$22 >= (uint_32)$16) ){ goto $label$270 }
	
.LOOP $label$283:
	$15 = $7
	$18 = *($22)
	if ( ($18 == 0) ){ goto $label$285 }
	$15 = $7
	
.LOOP $label$286:
	$19 = ((uint_32)$18 / (uint_32)[10])
	*(($15 = ($15 + [-1]))) = (($18 - ((int_32)$19 * (int_32)[10])) | [48])
	$17 = ((uint_32)$18 > (uint_32)[9])
	$18 = $19
	if ( $17 ){ goto $label$286 }
	if ( ((uint_32)$15 <= (uint_32)($5 + [704])) ){ goto $label$284 }
	
.LABEL $label$285
	
.LOOP $label$287:
	*(($15 = ($15 + [-1]))) = [48]
	if ( ((uint_32)$15 > (uint_32)($5 + [704])) ){ goto $label$287 }
	
.LABEL $label$284
	if ( (*($0) & [32]) ){ goto $label$288 }
	CALL $29($15, ( $26 ? [9] : ((int_32)$26 < (int_32)[9]) ), $0)
	
.LABEL $label$288
	$15 = ($26 + [-9])
	if ( ((int_32)$26 < (int_32)[10]) ){ goto $label$269 }
	$26 = $15
	$22 = ($22 + [4])
	if ( ($22 <= $16) ){ goto $label$283 }
	goto $label$269 
	
.LABEL $label$272
	if ( ((int_32)$26 <= (int_32)[-1]) ){ goto $label$265 }
	$25 = ( $16 ? ($18 + [4]) : $24 )
	if ( ($23 == 0) ){ goto $label$267 }
	$22 = $18
	
.LOOP $label$289:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$291 }
	$19 = [0]
	
.LOOP $label$292:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$292 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$290 }
	
.LABEL $label$291
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$290
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$294 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$293 }
	
.LOOP $label$295:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$295 }
	goto $label$293 
	
.LABEL $label$294
	$15 = *($0)
	if ( ($15 & [32]) ){ goto $label$296 }
	CALL $29($17, [1], $0)
	$15 = *($0)
	
.LABEL $label$296
	$17 = ($17 + [1])
	if ( ($15 & [32]) ){ goto $label$293 }
	CALL $29([10963], [1], $0)
	
.LABEL $label$293
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$297 }
	CALL $29($17, ( $15 ? $26 : ((int_32)$26 > (int_32)$15) ), $0)
	
.LABEL $label$297
	$26 = ($26 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$266 }
	if ( ((int_32)$26 > (int_32)[-1]) ){ goto $label$289 }
	goto $label$266 
	
.LABEL $label$271
	$15 = $26
	if ( ((int_32)$15 >= (int_32)[1]) ){ goto $label$268 }
	goto $label$264 
	
.LABEL $label$270
	$15 = $26
	
.LABEL $label$269
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$264 }
	
.LABEL $label$268
	$18 = ($15 <= [256])
	CALL memset(($5 + [432]), [48], ( $15 ? [256] : $18 ))
	$17 = *($0)
	$19 = ($17 & [32])
	if ( $18 ){ goto $label$299 }
	$18 = ($19 == 0)
	$19 = $15
	
.LOOP $label$300:
	if ( (($18 & [1]) == 0) ){ goto $label$301 }
	CALL $29(($5 + [432]), [256], $0)
	$17 = *($0)
	
.LABEL $label$301
	$16 = ($17 & [32])
	$18 = ($16 == 0)
	$19 = ($19 + [-256])
	if ( ((uint_32)$19 > (uint_32)[255]) ){ goto $label$300 }
	if ( $16 ){ goto $label$264 }
	$15 = ($15 & [255])
	goto $label$298 
	
.LABEL $label$299
	if ( $19 ){ goto $label$264 }
	
.LABEL $label$298
	CALL $29(($5 + [432]), $15, $0)
	if ( ((int_32)$21 == (int_32)[8192]) ){ goto $label$263 }
	goto $label$262 
	
.LABEL $label$267
	$22 = $18
	
.LOOP $label$302:
	$17 = $7
	$15 = *($22)
	if ( ($15 == 0) ){ goto $label$304 }
	$19 = [0]
	
.LOOP $label$305:
	$17 = ((uint_32)$15 / (uint_32)[10])
	*(((($5 + [704]) + $19) + [8])) = (($15 - ((int_32)$17 * (int_32)[10])) | [48])
	$19 = ($19 + [-1])
	$16 = ((uint_32)$15 > (uint_32)[9])
	$15 = $17
	if ( $16 ){ goto $label$305 }
	$17 = ((($5 + [704]) + $19) + [9])
	if ( $19 ){ goto $label$303 }
	
.LABEL $label$304
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$303
	if ( ((int_32)$22 == (int_32)$18) ){ goto $label$307 }
	if ( ((uint_32)$17 <= (uint_32)($5 + [704])) ){ goto $label$306 }
	
.LOOP $label$308:
	*(($17 = ($17 + [-1]))) = [48]
	if ( ((uint_32)$17 > (uint_32)($5 + [704])) ){ goto $label$308 }
	goto $label$306 
	
.LABEL $label$307
	if ( (*($0) & [32]) ){ goto $label$309 }
	CALL $29($17, [1], $0)
	
.LABEL $label$309
	$17 = ($17 + [1])
	if ( ((int_32)$26 < (int_32)[1]) ){ goto $label$306 }
	if ( (*($0) & [32]) ){ goto $label$306 }
	CALL $29([10963], [1], $0)
	
.LABEL $label$306
	$15 = ($7 - $17)
	if ( (*($0) & [32]) ){ goto $label$310 }
	CALL $29($17, ( $15 ? $26 : ((int_32)$26 > (int_32)$15) ), $0)
	
.LABEL $label$310
	$26 = ($26 - $15)
	$22 = ($22 + [4])
	if ( ((uint_32)$22 >= (uint_32)$25) ){ goto $label$266 }
	if ( ((int_32)$26 > (int_32)[-1]) ){ goto $label$302 }
	
.LABEL $label$266
	if ( ((int_32)$26 < (int_32)[1]) ){ goto $label$265 }
	$18 = ($26 <= [256])
	CALL memset(($5 + [432]), [48], ( $26 ? [256] : $18 ))
	$19 = *($0)
	$15 = ($19 & [32])
	if ( $18 ){ goto $label$312 }
	$15 = ($15 == 0)
	$18 = $26
	
.LOOP $label$313:
	if ( (($15 & [1]) == 0) ){ goto $label$314 }
	CALL $29(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$314
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$313 }
	if ( $17 ){ goto $label$265 }
	$26 = ($26 & [255])
	goto $label$311 
	
.LABEL $label$312
	if ( $15 ){ goto $label$265 }
	
.LABEL $label$311
	CALL $29(($5 + [432]), $26, $0)
	
.LABEL $label$265
	if ( (*($0) & [32]) ){ goto $label$264 }
	CALL $29($33, ($10 - $33), $0)
	
.LABEL $label$264
	if ( ((int_32)$21 != (int_32)[8192]) ){ goto $label$262 }
	
.LABEL $label$263
	if ( ((int_32)$20 <= (int_32)$28) ){ goto $label$262 }
	$15 = ($16 <= [256])
	$16 = ($20 - $28)
	CALL memset(($5 + [432]), [32], ( $16 ? [256] : $15 ))
	$19 = *($0)
	$18 = ($19 & [32])
	if ( $15 ){ goto $label$316 }
	$15 = ($18 == 0)
	$18 = $16
	
.LOOP $label$317:
	if ( (($15 & [1]) == 0) ){ goto $label$318 }
	CALL $29(($5 + [432]), [256], $0)
	$19 = *($0)
	
.LABEL $label$318
	$17 = ($19 & [32])
	$15 = ($17 == 0)
	$18 = ($18 + [-256])
	if ( ((uint_32)$18 > (uint_32)[255]) ){ goto $label$317 }
	if ( $17 ){ goto $label$262 }
	$16 = ($16 & [255])
	goto $label$315 
	
.LABEL $label$316
	if ( $18 ){ goto $label$262 }
	
.LABEL $label$315
	CALL $29(($5 + [432]), $16, $0)
	
.LABEL $label$262
	$15 = ( $20 ? $28 : ((int_32)$20 > (int_32)$28) )
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$4 }
	
.LABEL $label$3
	*(CALL $5()) = [75]
	
.LABEL $label$2
	$14 = [-1]
	
.LABEL $label$1
	$global$0 = ($5 + [8128])
	$15
	$18
	return $14
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL $17($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC $35 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$6 = ($5) & [32767]
	if ( ((int_32)$6) == (int_32)[32767]) ){ goto $label$1 }
	if ( $6 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($4, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL $35(($4 + [16]), *($4), *(($4 + [8])), $3)
	$5 = (*($3) + [-120])
	$2 = *($4 + [24])
	$1 = *($4 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($5 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($5 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	
.LABEL $label$2
	*($3) = $5
	
.LABEL $label$1
	*($0) = $1
	*($0 + [8]) = $2
	$global$0 = ($4 + [32])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	return CALL $31($0, $1)
}

int_32 .FUNC $33 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL $32([8416], *([0] + [20]))
	$1 = [0]
	
.LOOP $label$4:
	if ( ((int_32)*(($1 + [8320])) == (int_32)$0) ){ goto $label$3 }
	$2 = [87]
	$1 = ($1 + [1])
	if ( ((int_32)$1 != (int_32)[87]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$2 = $1
	if ( ($1 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$1 = [8416]
	
.LOOP $label$5:
	$0 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $0 ){ goto $label$5 }
	$1 = $3
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	return CALL $32($3, *([0] + [20]))
	return .LABEL $label$1
}

int_32 .FUNC $30 (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	return $0
}

void .FUNC $198 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($1 + [4])
	$3 = *($1)
	$5 = (($3 + [-1]) - $4)
	$6 = (CASTING uint_64)(uint_32 ($4 - $3))
	
.LOOP $label$1:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $56($0, ([0] - $5))
	$3 = *(($0 + [4]))
	$5 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = [0]
	$5 = [0]
	
.LABEL $label$2
	*($2 + [4]) = $5
	*($2) = $5
	*($2 + [8]) = $3
	CALL $147($2, $1)
	*($2 + [15]) = *($1 + [12])
	$5 = *($2 + [4])
	if ( ((int_32)(*($2 + [8]) - $5) > (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert([0], [11673])
	$5 = *($2 + [4])
	
.LABEL $label$4
	CALL memcpy($5, ($2 + [15]), [1])
	$global$0 = ($2 + [16])
}

void .FUNC $199 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL $8(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $16($0)
	
.LABEL $label$1
	$5 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$7 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	*(($4 = ($3 + [-12]))) = (int_64)0
	*(($3 = ($3 + [-4]))) = [0]
	$6 = ($1 + [-12])
	*($4) = *($6)
	$1 = ($1 + [-4])
	*($3) = *($1)
	*($1) = [0]
	*($6) = (int_64)0
	$3 = $4
	$1 = $6
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	$3 = $4
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $7
	*(($0 + [8])) = $5
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	$3 = *($6)
	if ( ($3 == 0) ){ goto $label$13 }
	*(($2 + [-8])) = $3
	CALL $10($3)
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL $10($1)
	
.LABEL $label$14
}

void .FUNC $196 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [8]) = [0]
	*($2) = (int_64)0
	$3 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($3 == 0) ){ goto $label$2 }
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$1 }
	$4 = CALL $8($3)
	*(($2 + [8])) = ($4 + $3)
	*($2) = $4
	*($2 + [4]) = $4
	$3 = *(($1 + [8]))
	$1 = (*(($1 + [12])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($4, $3, $1)
	*($2 + [4]) = ($4 + $1)
	
.LABEL $label$2
	CALL $155(($2 + [16]), $2)
	CALL $148($0, ($2 + [16]))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $10(*($2 + [24]))
	
.LABEL $label$3
	$1 = *($2)
	if ( ($1 == 0) ){ goto $label$4 }
	*($2 + [4]) = $1
	CALL $10($1)
	
.LABEL $label$4
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $16($2)
}

int_32 .FUNC $197 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [24]), ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12615])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)8455373400698781696)
	if ( ((int_32)$2 != (int_32)[-1]) ){ goto $label$3 }
	CALL eosio_assert([0], [12561])
	
.LABEL $label$3
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$1 }
	CALL eosio_assert([0], [12561])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $195(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $194 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [80])
	$global$0 = $3
	*($3 + [56]) = [12433]
	*($3 + [60]) = CALL $1([12433])
	*($3) = *($3 + [56])
	$4 = CALL $128(($3 + [64]), $3)
	CALL $198(($3 + [40]), $2)
	*(($3 + [32])) = [0]
	*($3 + [24]) = (int_64)0
	$6 = *($3 + [40])
	$5 = *($3 + [44])
	$7 = ($5 - $6)
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$7 > (uint_32)[10]) ){ goto $label$7 }
	*($3 + [24]) = ($7 << [1])
	$8 = (($3 + [24]) | [1])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$9 = (($7 + [16]) & [-16])
	$8 = CALL $8($9)
	*($3 + [24]) = ($9 | [1])
	*($3 + [32]) = $8
	*($3 + [28]) = $7
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$6
	$9 = $8
	
.LOOP $label$8:
	*($9) = *($6)
	$9 = ($9 + [1])
	$6 = ($6 + [1])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$8 }
	$8 = ($8 + $7)
	
.LABEL $label$5
	*($8) = [0]
	CALL $60(($3 + [8]), ($3 + [24]))
	CALL prints([13256])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13258])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13266])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13272])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13278])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13294])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL printn(CALL $fimport$3())
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13300])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL printn($0)
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13308])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL printn(*($4))
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13315])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL printn($1)
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13270])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13324])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [58]
	CALL prints_l(($3 + [79]), [1])
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints(( *($3 + [16]) ? (($3 + [8]) | [1]) : (*($3 + [8]) & [1]) ))
	*($3 + [79]) = [34]
	CALL prints_l(($3 + [79]), [1])
	CALL prints([13329])
	if ( (*($2 + [12]) == 0) ){ goto $label$9 }
	CALL eosio_assert([0], [13332])
	
.LABEL $label$9
	if ( (*($3 + [8]) & [1]) ){ goto $label$11 }
	if ( (*($3 + [24]) & [1]) ){ goto $label$10 }
	goto $label$3 
	
.LABEL $label$11
	CALL $10(*(($3 + [16])))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$10
	CALL $10(*($3 + [32]))
	$6 = *($3 + [40])
	if ( $6 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL $40(($3 + [24]))
	
.LABEL $label$3
	$6 = *($3 + [40])
	if ( ($6 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	*($3 + [44]) = $6
	CALL $10($6)
	
.LABEL $label$1
	$global$0 = ($3 + [80])
	(unreachable)
}

int_32 .FUNC $195 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $4
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [11795])
	
.LABEL $label$5
	$4 = CALL $2($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $6)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $6)
	*(($5 = CALL $8([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	$8 = ($5 + [8])
	$2 = $4
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [11818])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $137(($3 + [32]), $8)
	*($5 + [28]) = [-1]
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $193(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $3($4)
	
.LABEL $label$8
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	$4 = *($1 + [8])
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [12])) = $4
	CALL $10($4)
	
.LABEL $label$12
	CALL $10($1)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $192 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	$7 = *($6 + [16])
	if ( ((int_64)$7 == (int_64)-1) ){ goto $label$4 }
	if ( ((uint_64)$7 >= (uint_64)(int_64)-2) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$7 = (int_64)0
	$8 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)8455373400698781696, (int_64)0)
	if ( ((int_32)$8 <= (int_32)[-1]) ){ goto $label$2 }
	CALL $195($6, $8)
	*($3 + [20]) = [0]
	*($3 + [16]) = $6
	$7 = *(*(CALL $197(($3 + [16])) + [4]))
	$7 = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	*(($6 + [16])) = $7
	if ( (uint_64)($7 <= (int_64)-2) ){ goto $label$1 }
	
.LABEL $label$3
	CALL eosio_assert([0], [12509])
	$7 = *(($6 + [16]))
	goto $label$1 
	
.LABEL $label$2
	*(($6 + [16])) = (int_64)0
	
.LABEL $label$1
	*($1) = $7
	$6 = *($5 + [4])
	$8 = ($1 + [8])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$5 }
	CALL $169($8, *($6), *($6 + [4]))
	
.LABEL $label$5
	$9 = *($1 + [8])
	$5 = *(($1 + [12]))
	$6 = (($5 + [8]) - $9)
	$7 = (CASTING uint_64)(uint_32 ($5 - $9))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	if ( ($6 <= [513]) ){ goto $label$8 }
	$2 = CALL $2($6)
	goto $label$7 
	
.LABEL $label$8
	$2 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$7
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $6)
	$5 = $2
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [11673])
	$5 = *($3 + [4])
	
.LABEL $label$9
	CALL memcpy($5, $1, [8])
	*($3 + [4]) = ($5 + [8])
	CALL $147($3, $8)
	$7 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($4 + [8]), (int_64)8455373400698781696, *(*($0 + [8])), $7, $2, $6)
	if ( ($6 <= [513]) ){ goto $label$10 }
	CALL $3($2)
	
.LABEL $label$10
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$11 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$11
	$7 = *(($4 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	CALL $196(($3 + [16]), $1)
	*($1 + [28]) = CALL db_idx256_store($7, (int_64)8455373400698781696, $10, $11, ($3 + [16]), [2])
	$global$0 = ($3 + [48])
}

void .FUNC $193 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $16($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1 + [8])
	if ( ($2 == 0) ){ goto $label$11 }
	*(($1 + [12])) = $2
	CALL $10($2)
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $10($4)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $190 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $16($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$11 }
	*($1 + [4]) = $2
	CALL $10($2)
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$12 }
	CALL $10($4)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $191 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [13349])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$5 = *($1)
	$7 = *($1 + [4])
	$6 = ((int_32)($7 - $5) / (int_32)[12])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $199($1, ($2 - $6))
	$7 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($5 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)$5 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$2 = ($7 + [-12])
	$6 = *($2)
	if ( ($6 == 0) ){ goto $label$9 }
	*(($7 + [-8])) = $6
	CALL $10($6)
	
.LABEL $label$9
	$7 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $5
	$7 = $5
	
.LABEL $label$6
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$10:
	CALL $137($0, $2)
	$2 = ($2 + [12])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$10 }
	
.LABEL $label$3
	return $0
}