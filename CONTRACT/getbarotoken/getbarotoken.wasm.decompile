(data (i32.const 4) "@h\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "\e2\96\a0BR31 : Invalid EOS info. \00")
(data (i32.const 160) "\e2\96\a0BR31 : At least 0.1 EOS. \00")
(data (i32.const 192) "\e2\96\a0BR31 : Only EOS! \00")
(data (i32.const 224) "There isn\'t sale information. Do salestart().\00")
(data (i32.const 272) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 336) "attempt to add asset with different symbol\00")
(data (i32.const 384) "addition underflow\00")
(data (i32.const 416) "addition overflow\00")
(data (i32.const 448) "cannot increment end iterator\00")
(data (i32.const 480) "cannot pass end iterator to erase\00")
(data (i32.const 528) "object passed to erase is not in multi_index\00")
(data (i32.const 576) "cannot erase objects in table of another contract\00")
(data (i32.const 640) "attempt to remove object that was not in multi_index\00")
(data (i32.const 704) "attempt to subtract asset with different symbol\00")
(data (i32.const 752) "subtraction underflow\00")
(data (i32.const 784) "subtraction overflow\00")
(data (i32.const 816) "invalid symbol name\00")
(data (i32.const 848) "\e2\97\8f : \00")
(data (i32.const 864) " \ec\97\90\ea\b2\8c \00")
(data (i32.const 880) " \00")
(data (i32.const 896) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 960) "This order exceed salecap\00")
(data (i32.const 992) "cannot pass end iterator to modify\00")
(data (i32.const 1040) "active\00")
(data (i32.const 1056) "transfer\00")
(data (i32.const 1072) "Lucky BR31\00")
(data (i32.const 1088) "multiplication overflow or underflow\00")
(data (i32.const 1136) "multiplication underflow\00")
(data (i32.const 1168) "multiplication overflow\00")
(data (i32.const 1200) "You lose at BR31\00")
(data (i32.const 1232) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1296) "write\00")
(data (i32.const 1312) "object passed to modify is not in multi_index\00")
(data (i32.const 1360) "cannot modify objects in table of another contract\00")
(data (i32.const 1424) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1488) ".\00")
(data (i32.const 1504) ",\00")
(data (i32.const 1520) "cannot create objects in table of another contract\00")
(data (i32.const 1584) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1648) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1712) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1760) "error reading iterator\00")
(data (i32.const 1792) "read\00")
(data (i32.const 1808) "get\00")
(data (i32.const 10208) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$15 (param i64)))
(import "env" "printn" (func $fimport$16 (param i64)))
(import "env" "prints" (func $fimport$17 (param i32)))
(import "env" "prints_l" (func $fimport$18 (param i32 i32)))
(import "env" "printui" (func $fimport$19 (param i64)))
(import "env" "read_action_data" (func $fimport$20 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$21 (param i64)))
(import "env" "require_auth2" (func $fimport$22 (param i64 i64)))
(import "env" "send_inline" (func $fimport$23 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $43))
(export "free" (func $46))
(export "memcmp" (func $53))
(export "strlen" (func $54))
(table $0 3 3 anyfunc)
(elem (i32.const 0) $55 $6 $8)



void .FUNC $18 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [528])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [576])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [640])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $48($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $48($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [44]))
}

void .FUNC $19 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([1488])
	CALL prints_l($2, $3)
	CALL prints([880])
	CALL $28($1, [0])
	*([0] + [4]) = $10
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1808])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $21($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [1792])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$6 = *($4 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = CALL db_lowerbound_i64(*($4), *($4 + [8]), (int_64)4451269583868788736, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $14($4, $5)
	*($7 + [4]) = [0]
	*($7) = $4
	$6 = *(*(CALL $31($7) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1584])
	*($1) = *(($4 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	$3 = *($3 + [8])
	*($1 + [24]) = *($3)
	*(($1 + [32])) = *(($3 + [8]))
	$4 = $8
	$3 = ($4 + [-48])
	*([0] + [4]) = $3
	*($7 + [4]) = $3
	*($7) = $3
	*($7 + [8]) = ($4 + [-8])
	CALL $32($7, $1)
	$6 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)4451269583868788736, *(*($0 + [8])), $6, $3, [40])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([1504])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $47($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $51($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $48($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [1312])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1360])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [336])
	$5 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [384])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [416])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [1424])
	*($6 + [56]) = ($6 + [44])
	*($6 + [52]) = $6
	*($6 + [48]) = $6
	CALL $27(($6 + [48]), $1)
	CALL db_update_i64(*($1 + [48]), $2, $6, [44])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $21($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [1296])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [1296])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $25(CALL $24($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1296])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1296])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [1296])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [1296])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $26(*($1), ($0 + [32]))
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1296])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1296])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [1296])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1296])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [1296])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1296])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1296])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1296])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1296])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1296])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1296])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[1]), [1296])
	CALL memcpy(*($0 + [4]), ($1 + [42]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [1296])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [1296])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $49 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $48 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $44([1812], $0)
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)*($1 + [44]) == (int_32)$0), [1312])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [1360])
	$4 = *($1)
	$5 = *(*($3))
	*($1) = $5
	$6 = *($3 + [4])
	*($1 + [8]) = *($6)
	*(($1 + [16])) = *(($6 + [8]))
	$6 = *($3 + [4])
	*($1 + [24]) = *($6)
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = (int_64)0
	*($1 + [40]) = *(*($3 + [8]))
	*($1 + [42]) = *(*($3 + [12]))
	CALL eosio_assert(((int_64)$4 == (int_64)$5), [1424])
	*($7 + [56]) = ($7 + [44])
	*($7 + [52]) = $7
	*($7 + [48]) = $7
	CALL $27(($7 + [48]), $1)
	CALL db_update_i64(*($1 + [48]), $2, $7, [44])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [64])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1520])
	$4 = CALL $47([56])
	$6 = CALL $34($4)
	*($4 + [44]) = $1
	*($4) = *(*($3))
	$7 = *($3 + [4])
	*(($4 + [20])) = *(($7 + [12]))
	$8 = ($7 + [8])
	*(($4 + [16])) = *($8)
	*(($4 + [12])) = *(($7 + [4]))
	*($4 + [8]) = *($7)
	*(($4 + [32])) = *($8)
	*($4 + [24]) = *($7)
	*($4 + [24]) = (int_64)0
	*($4 + [40]) = *(*($3 + [8]))
	*($4 + [42]) = *(*($3 + [12]))
	*($9 + [72]) = (($9 + [16]) + [44])
	*($9 + [68]) = ($9 + [16])
	*($9 + [64]) = ($9 + [16])
	CALL $27(($9 + [64]), $6)
	$5 = *($4)
	*($4 + [48]) = CALL db_store_i64(*($1 + [8]), (int_64)-4493853556301889536, $2, $5, ($9 + [16]), [44])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($9 + [64]) = $4
	$5 = *($4)
	*($9 + [16]) = $5
	$7 = *($4 + [48])
	*($9 + [12]) = $7
	$6 = ($1 + [28])
	$3 = *($6)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $7
	*($9 + [64]) = [0]
	*($3) = $4
	*($6) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $36(($1 + [24]), ($9 + [64]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($9 + [64])
	*($9 + [64]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $48($4)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1792])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [1792])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [1792])
	CALL memcpy(($0 + [24]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[1]), [1792])
	CALL memcpy(($0 + [26]), *($3 + [4]), [2])
	*($3 + [4]) = (*($3 + [4]) + [2])
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10300])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [10196])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [10004]
	$1 = (((int_32)$2 * (int_32)[12]) + [10004])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10294]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10296])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10294]) = [1]
	$7 = ($7 << [16])
	*([0] + [10296]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10296])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10296]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10294]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10294]) = [1]
	$3 = ($3 << [16])
	*([0] + [10296]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10296])
	
.LABEL $label$8
	*([0] + [10296]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $45($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [10208])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

void .FUNC $51 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*($5 + [72]) = $1
	*($5 + [70]) = $3
	*($5 + [68]) = $4
	CALL require_auth(*($0))
	$4 = [0]
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	$1 = *($0)
	*($5 + [24]) = $1
	*($5 + [32]) = $1
	*($5 + [48]) = (int_64)0
	$3 = CALL db_lowerbound_i64($1, $1, (int_64)-4493853556301889536, (int_64)0)
	if ( ((int_32)$3 <= (int_32)[-1]) ){ goto $label$3 }
	CALL $13(($5 + [24]), $3)
	$0 = CALL db_lowerbound_i64(*($5 + [24]), *(($5 + [32])), (int_64)-4493853556301889536, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$4 = CALL $13(($5 + [24]), $0)
	
.LABEL $label$4
	*($5 + [12]) = $2
	*($5 + [8]) = ($5 + [72])
	*($5 + [16]) = ($5 + [70])
	*($5 + [20]) = ($5 + [68])
	CALL eosio_assert(((int_32)$4 != (int_32)[0]), [992])
	CALL $42(($5 + [24]), $4, (int_64)0, ($5 + [8]))
	$3 = *($5 + [48])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$1 = *($0)
	*($5 + [12]) = $2
	*($5 + [8]) = ($5 + [72])
	*($5 + [16]) = ($5 + [70])
	*($5 + [20]) = ($5 + [68])
	CALL $41($5, ($5 + [24]), $1, ($5 + [8]))
	$3 = *($5 + [48])
	if ( ($3 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$2 = ($5 + [52])
	$0 = *($2)
	if ( ((int_32)$0 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $48($4)
	
.LABEL $label$8
	if ( ((int_32)$3 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($5 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $3
	
.LABEL $label$5
	*($2) = $3
	CALL $48($0)
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [80])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = [0]
	$4 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $3)
	
.LABEL $label$1
	*(($8 + [24])) = (int_64)1398362884
	*($8 + [16]) = (int_64)0
	*($8 + [8]) = (int_64)0
	CALL eosio_assert([1], [1232])
	$5 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	CALL eosio_assert($6, [816])
	*($8 + [32]) = [0]
	*($8 + [68]) = $4
	*($8 + [64]) = $4
	*($8 + [72]) = ($4 + $3)
	*($8 + [40]) = ($8 + [64])
	*($8 + [48]) = ($8 + [8])
	CALL $40(($8 + [48]), ($8 + [40]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($4)
	
.LABEL $label$9
	*(($1 = (($8 + [48]) + [8]))) = *(($8 + [24]))
	$5 = *($8 + [8])
	*($8 + [48]) = *($8 + [16])
	$4 = *(($8 + [34]))
	$6 = *(($8 + [32]))
	*((($8 + [64]) + [8])) = *($1)
	*($8 + [64]) = *($8 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$7 = *((*($1) + $7))
	
.LABEL $label$10
	CALL void $1((int_32 $5), (int_64 ($8 + [64])), (int_32 ($6 & [65535])), (int_32 ($4 & [65535])), (int_32 $7))
	*([0] + [4]) = ($8 + [80])
	return [1]
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	CALL require_auth(*($0))
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	$2 = *($0)
	*($5) = $2
	*($5 + [8]) = $2
	*($5 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)4451269583868788736, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $14($5, $0)
	
.LOOP $label$2:
	CALL eosio_assert([1], [480])
	CALL eosio_assert([1], [448])
	$0 = [0]
	$1 = CALL db_next_i64(*($4 + [44]), ($5 + [40]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $14($5, $1)
	
.LABEL $label$3
	CALL $18($5, $4)
	$4 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($5 + [24])
	if ( ($1 == 0) ){ goto $label$4 }
	$3 = ($5 + [28])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $48($4)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($5 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $1
	
.LABEL $label$5
	*($3) = $1
	CALL $48($0)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [48])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$17 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$23 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$3 = ($3 + [165])
	goto $label$21 
	
.LABEL $label$23
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$19
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$18 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$16 }
	
.LABEL $label$17
	*($9 + [40]) = $0
	if ( ((int_64)$2 == (int_64)-4493839929045417984) ){ goto $label$15 }
	if ( ((int_64)$2 != (int_64)4923678922967252992) ){ goto $label$14 }
	*($9 + [36]) = [0]
	*($9 + [32]) = [1]
	*($9 + [8 align=4]) = *($9 + [32])
	CALL $7(($9 + [40]), ($9 + [8]))
	goto $label$14 
	
.LABEL $label$16
	*($9 + [40]) = $0
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$14 }
	CALL $10(($9 + [40]), $0, $1)
	goto $label$14 
	
.LABEL $label$15
	*($9 + [28]) = [0]
	*($9 + [24]) = [2]
	*($9 + [16 align=4]) = *($9 + [24])
	CALL $9(($9 + [40]), ($9 + [16]))
	
.LABEL $label$14
	*([0] + [4]) = ($9 + [48])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [1760])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $47([56])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [1232])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [816])
	*($4 + [40]) = $0
	CALL $33(($8 + [32]), $4)
	*($4 + [44]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [44])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $30($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $48($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [1520])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $47([56])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [1232])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [816])
	*($4 + [40]) = $1
	CALL $29(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [44])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $30(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $48($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4)
{
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	float_32 $14
	float_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_64 $30
	int_64 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_32 $35
	$35 = (*([0] + [4]) - [240])
	*([0] + [4]) = $35
	*((($35 + [168]) + [32])) = [0]
	*($35 + [184]) = (int_64)-1
	*($35 + [192]) = (int_64)0
	$30 = *($0)
	*($35 + [168]) = $30
	*($35 + [176]) = $30
	$32 = *($3)
	$31 = *($2)
	$5 = *($3 + [8])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)$5), [704])
	$31 = ((int_64)$32 + (int_64))((int_64)310000 - $31)
	CALL eosio_assert(((int_64)$31) > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)$31 < (int_64)4611686018427387904), [784])
	$32 = *($2)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($2 + [8])), [704])
	$32 = (int_64)
	CALL eosio_assert(((int_64)$32($32 - *($3))) > (int_64)-4611686018427387904), [752])
	CALL eosio_assert(((int_64)$32 < (int_64)4611686018427387904), [784])
	*((($35 + [128]) + [32])) = [0]
	*($35 + [144]) = (int_64)-1
	*($35 + [152]) = (int_64)0
	$32 = *($0)
	*($35 + [128]) = $32
	*($35 + [136]) = $32
	$2 = CALL $13(($35 + [128]), CALL $fimport$7($32, $32, (int_64)-4493853556301889536, (int_64)0))
	$32 = *($2 + [42])
	$11 = *($2 + [40])
	$9 = *($2 + [24])
	$7 = *($2 + [8])
	$6 = *($2)
	$10 = *(($2 + [32]))
	$8 = *(($2 + [16]))
	$2 = CALL db_lowerbound_i64($30, $30, (int_64)4451269583868788736, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$3 }
	$15 = (CASTING float_32)(int_64 ((int_64)$32 * (int_64)((int_64)$31 / (int_64)100)))
	$18 = ($35 + [100])
	$17 = (($35 + [24]) + [32])
	$16 = (($35 + [216]) | [1])
	$14 = (CASTING float_32)(uint_64 $4)
	$12 = (($35 + [8]) | [1])
	$22 = CALL $14(($35 + [168]), $2)
	$26 = (($35 + [112]) + [8])
	$13 = (($35 + [24]) + [16])
	$27 = ($13 + [4])
	$28 = ($35 + [92])
	$29 = ($35 + [64])
	
.LOOP $label$4:
	CALL eosio_assert([1], [1232])
	$30 = (int_64)5462355
	$2 = [0]
	
.LOOP $label$7:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $30) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$30 = (uint_64)$30 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$30) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	
.LOOP $label$9:
	$30 = (uint_64)$30 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$30) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$9 }
	
.LABEL $label$8
	$21 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$21 = [0]
	
.LABEL $label$5
	CALL eosio_assert($21, [816])
	CALL eosio_assert([1], [448])
	$2 = CALL db_next_i64(*($22 + [44]), ($35 + [24]))
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$22 }
	CALL $14(($35 + [168]), $2)
	$32 = *(($22 + [32]))
	$30 = *($22 + [24])
	CALL eosio_assert([1], [1088])
	CALL eosio_assert([1], [1136])
	CALL eosio_assert([1], [1168])
	CALL eosio_assert(((int_64)$32 == (int_64)$5), [336])
	$19 = ((int_64)$30 + (int_64)(Rounds 0)(((float_32)$15 * (float_32)((float_32)(CASTING float_32)(int_64 ((uint_64)((int_64)$30 * (int_64)$30) / (uint_64)(int_64)100000000)) / (float_32)$14))))
	CALL eosio_assert(((int_64)$19 > (int_64)-4611686018427387904), [384])
	CALL eosio_assert(((int_64)$19 < (int_64)4611686018427387904), [416])
	*(($23 = (($35 + [216]) + [8]))) = [0]
	*($35 + [216]) = (int_64)0
	$2 = CALL strlen([1200])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$21 }
	*($35 + [216]) = ($2 << [1])
	$21 = $16
	if ( $2 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	*($26) = (int_64)1398362884
	*($35 + [112]) = (int_64)0
	CALL eosio_assert([1], [1232])
	$30 = (uint_64)*($26) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $30) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$24 }
	$30 = (uint_64)$30 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$30) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$30 = (uint_64)$30 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$30) & (int_64)255) != (int_64)0) ){ goto $label$24 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$21 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$25 }
	goto $label$23 
	
.LABEL $label$24
	$21 = [0]
	
.LABEL $label$23
	CALL eosio_assert($21, [816])
	*($26) = $8
	*($35 + [112]) = ((int_64)*($3) * (int_64)$11)
	$30 = *($22 + [8])
	CALL prints([848])
	CALL printn($30)
	CALL prints([864])
	CALL $19(($35 + [112]))
	CALL prints([880])
	$30 = *($35 + [112])
	$32 = *($26)
	CALL eosio_assert(((int_64)$10 == (int_64)$32), [336])
	$30 = ((int_64)$30 + (int_64)$9)
	CALL eosio_assert(((int_64)$30 > (int_64)-4611686018427387904), [384])
	CALL eosio_assert(((int_64)$30 < (int_64)4611686018427387904), [416])
	CALL eosio_assert(((int_64)$32 == (int_64)$8), [896])
	CALL eosio_assert(((int_64)$30 <= (int_64)$7), [960])
	$2 = [0]
	$21 = CALL db_lowerbound_i64(*($35 + [128]), *((($35 + [128]) + [8])), (int_64)-4493853556301889536, (int_64)0)
	if ( ((int_32)$21 < (int_32)[0]) ){ goto $label$28 }
	$2 = CALL $13(($35 + [128]), $21)
	
.LABEL $label$28
	*($35 + [24]) = ($35 + [112])
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [992])
	$30 = (int_64)0
	CALL $20(($35 + [128]), $2, (int_64)0, ($35 + [24]))
	$34 = *($0)
	$31 = (int_64)59
	$2 = [1040]
	$4 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$30 > (uint_64)(int_64)5) ){ goto $label$34 }
	$21 = *($2)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$21 = ($21 + [165])
	goto $label$32 
	
.LABEL $label$34
	$32 = (int_64)0
	if ( ((uint_64)$30 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$30
	$2 = ($2 + [1])
	$30 = ((int_64)$30 + (int_64)1)
	$4 = ((int_64)$32 | (int_64)$4)
	$31 = ((int_64)$31 + (int_64)-5)
	if ( ((int_64)$31 != (int_64)-6) ){ goto $label$29 }
	$30 = (int_64)0
	$31 = (int_64)59
	$2 = [1056]
	$33 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$30 > (uint_64)(int_64)7) ){ goto $label$40 }
	$21 = *($2)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$21 = ($21 + [165])
	goto $label$38 
	
.LABEL $label$40
	$32 = (int_64)0
	if ( ((uint_64)$30 <= (uint_64)(int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$36
	$2 = ($2 + [1])
	$30 = ((int_64)$30 + (int_64)1)
	$33 = ((int_64)$32 | (int_64)$33)
	$31 = ((int_64)$31 + (int_64)-5)
	if ( ((int_64)$31 != (int_64)-6) ){ goto $label$35 }
	*(($21 = (($35 + [8]) + [8]))) = [0]
	*($35 + [8]) = (int_64)0
	$2 = CALL strlen([1072])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$18 }
	*($35 + [8]) = ($2 << [1])
	$23 = $12
	if ( $2 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$21
	$25 = (($2 + [16]) & [-16])
	$21 = CALL $47($25)
	*($23) = $21
	*($35 + [216]) = ($25 | [1])
	*($35 + [220]) = $2
	
.LABEL $label$20
	CALL memcpy($21, [1200], $2)
	
.LABEL $label$19
	*(($21 + $2)) = [0]
	if ( ((int_64)$19 < (int_64)1) ){ goto $label$13 }
	$20 = *($0)
	$30 = (int_64)0
	$31 = (int_64)59
	$2 = [1040]
	$4 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$30 > (uint_64)(int_64)5) ){ goto $label$46 }
	$21 = *($2)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$21 = ($21 + [165])
	goto $label$44 
	
.LABEL $label$46
	$32 = (int_64)0
	if ( ((uint_64)$30 <= (uint_64)(int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$42
	$2 = ($2 + [1])
	$30 = ((int_64)$30 + (int_64)1)
	$4 = ((int_64)$32 | (int_64)$4)
	$31 = ((int_64)$31 + (int_64)-5)
	if ( ((int_64)$31 != (int_64)-6) ){ goto $label$41 }
	$30 = (int_64)0
	$31 = (int_64)59
	$2 = [112]
	$33 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$30 > (uint_64)(int_64)10) ){ goto $label$52 }
	$21 = *($2)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$21 = ($21 + [165])
	goto $label$50 
	
.LABEL $label$52
	$32 = (int_64)0
	if ( ((int_64)$30 == (int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$48
	$2 = ($2 + [1])
	$31 = ((int_64)$31 + (int_64)-5)
	$33 = ((int_64)$32 | (int_64)$33)
	$30 = ((int_64)$30 + (int_64)1)
	if ( ((int_64)$30 != (int_64)13) ){ goto $label$47 }
	$30 = (int_64)0
	$31 = (int_64)59
	$2 = [1056]
	$34 = (int_64)0
	
.LOOP $label$53:
	if ( ((uint_64)$30 > (uint_64)(int_64)7) ){ goto $label$58 }
	$21 = *($2)
	if ( ((uint_32)(($21 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$57 }
	$21 = ($21 + [165])
	goto $label$56 
	
.LABEL $label$58
	$32 = (int_64)0
	if ( ((uint_64)$30 <= (uint_64)(int_64)11) ){ goto $label$55 }
	goto $label$54 
	
.LABEL $label$57
	$21 = ( ($21 + [208]) ? [0] : ((($21 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$56
	$32 = (int_64)((int_64)(CASTING uint_64)(uint_32 $21) << (int_64)56) >> (int_64)56)
	
.LABEL $label$55
	$32 = ((int_64)((int_64)$32 & (int_64)31) << (int_64)((int_64)$31 & (int_64)4294967295))
	
.LABEL $label$54
	$2 = ($2 + [1])
	$30 = ((int_64)$30 + (int_64)1)
	$34 = ((int_64)$32 | (int_64)$34)
	$31 = ((int_64)$31 + (int_64)-5)
	if ( ((int_64)$31 != (int_64)-6) ){ goto $label$53 }
	$30 = *($22 + [8])
	*($13) = $19
	*((($35 + [24]) + [24])) = $5
	*((($35 + [24]) + [8])) = $30
	*($35 + [24]) = $20
	CALL $52($17, ($35 + [216]))
	*((($35 + [72]) + [8])) = $34
	*(($21 = (($35 + [72]) + [16]))) = (int_64)0
	*(($24 = (($35 + [72]) + [24]))) = [0]
	*($35 + [72]) = $33
	$2 = CALL $47([16])
	*($21) = $2
	*($2) = $20
	*($2 + [8]) = $4
	*($18) = [0]
	*(($25 = (($35 + [72]) + [32]))) = [0]
	$2 = ($2 + [16])
	*($24) = $2
	*($28) = $2
	*((($35 + [72]) + [36])) = [0]
	$2 = *($17)
	$24 = ( *((($35 + [24]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($24 + [32])
	$30 = (CASTING uint_64)(uint_32 $24)
	
.LOOP $label$59:
	$2 = ($2 + [1])
	$30 = (uint_64)$30 >> (uint_64)(int_64)7
	if ( ((int_64)$30) != (int_64)0) ){ goto $label$59 }
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $21($18, $2)
	$24 = *($25)
	$2 = *($18)
	goto $label$14 
	
.LABEL $label$18
	$25 = (($2 + [16]) & [-16])
	$23 = CALL $47($25)
	*($21) = $23
	*($35 + [8]) = ($25 | [1])
	*($35 + [12]) = $2
	
.LABEL $label$17
	CALL memcpy($23, [1072], $2)
	
.LABEL $label$16
	*(($23 + $2)) = [0]
	*((($35 + [24]) + [8])) = $1
	*($27) = *($35 + [116])
	*(($13 + [12])) = *((($35 + [112]) + [12]))
	*(($13 + [8])) = *($26)
	*($35 + [24]) = *($0)
	*($13) = *($35 + [112])
	*(($17 + [8])) = *($21)
	*($17) = *($35 + [8])
	*($35 + [8]) = [0]
	*($35 + [12]) = [0]
	*($21) = [0]
	*((($35 + [72]) + [8])) = $33
	*($35 + [72]) = $6
	*(($23 = (($35 + [72]) + [16]))) = [0]
	*($28) = [0]
	*(($24 = (($35 + [72]) + [24]))) = [0]
	$2 = CALL $47([16])
	*($23) = $2
	*($2) = $34
	*($2 + [8]) = $4
	*($18) = [0]
	*(($25 = (($35 + [72]) + [32]))) = [0]
	$2 = ($2 + [16])
	*($24) = $2
	*($28) = $2
	*((($35 + [72]) + [36])) = [0]
	$2 = *($17)
	$24 = ( *((($35 + [24]) + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($24 + [32])
	$30 = (CASTING uint_64)(uint_32 $24)
	
.LOOP $label$60:
	$2 = ($2 + [1])
	$30 = (uint_64)$30 >> (uint_64)(int_64)7
	if ( ((int_64)$30) != (int_64)0) ){ goto $label$60 }
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $21($18, $2)
	$24 = *($25)
	$2 = *($18)
	goto $label$11 
	
.LABEL $label$15
	$24 = [0]
	$2 = [0]
	
.LABEL $label$14
	*($26) = $24
	*($35 + [116]) = $2
	*($35 + [112]) = $2
	*($35 + [232]) = ($35 + [112])
	*($35 + [8]) = ($35 + [24])
	CALL $22(($35 + [8]), ($35 + [232]))
	CALL $23(($35 + [112]), ($35 + [72]))
	$2 = *($35 + [112])
	CALL send_inline($2, (*($35 + [116]) - $2))
	$2 = *($35 + [112])
	if ( ($2 == 0) ){ goto $label$61 }
	*($35 + [116]) = $2
	CALL $48($2)
	
.LABEL $label$61
	$2 = *($18)
	if ( ($2 == 0) ){ goto $label$62 }
	*($25) = $2
	CALL $48($2)
	
.LABEL $label$62
	$2 = *($21)
	if ( ($2 == 0) ){ goto $label$63 }
	*($28) = $2
	CALL $48($2)
	
.LABEL $label$63
	if ( ((*($17) & [1]) == 0) ){ goto $label$13 }
	CALL $48(*($29))
	
.LABEL $label$13
	if ( ((*($35 + [216]) & [1]) == 0) ){ goto $label$10 }
	CALL $48(*($23))
	goto $label$10 
	
.LABEL $label$12
	$24 = [0]
	$2 = [0]
	
.LABEL $label$11
	*((($35 + [216]) + [8])) = $24
	*($35 + [220]) = $2
	*($35 + [216]) = $2
	*($35 + [208]) = ($35 + [216])
	*($35 + [232]) = ($35 + [24])
	CALL $22(($35 + [232]), ($35 + [208]))
	CALL $23(($35 + [216]), ($35 + [72]))
	$2 = *($35 + [216])
	CALL send_inline($2, (*($35 + [220]) - $2))
	$2 = *($35 + [216])
	if ( ($2 == 0) ){ goto $label$64 }
	*($35 + [220]) = $2
	CALL $48($2)
	
.LABEL $label$64
	$2 = *($18)
	if ( ($2 == 0) ){ goto $label$65 }
	*($25) = $2
	CALL $48($2)
	
.LABEL $label$65
	$2 = *($23)
	if ( ($2 == 0) ){ goto $label$66 }
	*($28) = $2
	CALL $48($2)
	
.LABEL $label$66
	if ( ((*($17) & [1]) == 0) ){ goto $label$67 }
	CALL $48(*($29))
	
.LABEL $label$67
	if ( ((*($35 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $48(*($21))
	
.LABEL $label$10
	CALL eosio_assert([1], [448])
	$2 = CALL db_next_i64(*(($22 + [44])), ($35 + [24]))
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$3 }
	$22 = CALL $14(($35 + [168]), $2)
	goto $label$4 
	
.LABEL $label$3
	$22 = *($35 + [152])
	if ( ($22 == 0) ){ goto $label$68 }
	$17 = ($35 + [156])
	$2 = *($17)
	if ( ((int_32)$2 == (int_32)$22) ){ goto $label$70 }
	
.LOOP $label$71:
	$2 = ($2 + [-24])
	$21 = *($2)
	*($2) = [0]
	if ( ($21 == 0) ){ goto $label$72 }
	CALL $48($21)
	
.LABEL $label$72
	if ( ((int_32)$22 != (int_32)$2) ){ goto $label$71 }
	$2 = *(($35 + [152]))
	goto $label$69 
	
.LABEL $label$70
	$2 = $22
	
.LABEL $label$69
	*($17) = $22
	CALL $48($2)
	
.LABEL $label$68
	$22 = *($35 + [192])
	if ( ($22 == 0) ){ goto $label$73 }
	$17 = ($35 + [196])
	$2 = *($17)
	if ( ((int_32)$2 == (int_32)$22) ){ goto $label$75 }
	
.LOOP $label$76:
	$2 = ($2 + [-24])
	$21 = *($2)
	*($2) = [0]
	if ( ($21 == 0) ){ goto $label$77 }
	CALL $48($21)
	
.LABEL $label$77
	if ( ((int_32)$22 != (int_32)$2) ){ goto $label$76 }
	$2 = *(($35 + [192]))
	goto $label$74 
	
.LABEL $label$75
	$2 = $22
	
.LABEL $label$74
	*($17) = $22
	CALL $48($2)
	
.LABEL $label$73
	*([0] + [4]) = ($35 + [240])
	return (unreachable)
	
.LABEL $label$2
	CALL $49(($35 + [216]))
	
.LABEL $label$1
	CALL $49(($35 + [8]))
	(unreachable)
}

void .FUNC $17 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	*(($5 + [32])) = [0]
	*($5 + [16]) = (int_64)-1
	$2 = *($0)
	*($5) = $2
	*($5 + [8]) = $2
	*($5 + [24]) = (int_64)0
	$0 = CALL db_lowerbound_i64($2, $2, (int_64)4451269583868788736, (int_64)0)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $14($5, $0)
	
.LOOP $label$2:
	CALL eosio_assert([1], [480])
	CALL eosio_assert([1], [448])
	$0 = [0]
	$1 = CALL db_next_i64(*($4 + [44]), ($5 + [40]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$3 }
	$0 = CALL $14($5, $1)
	
.LABEL $label$3
	CALL $18($5, $4)
	$4 = $0
	if ( $0 ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($5 + [24])
	if ( ($1 == 0) ){ goto $label$4 }
	$3 = ($5 + [28])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $48($4)
	
.LABEL $label$8
	if ( ((int_32)$1 != (int_32)$0) ){ goto $label$7 }
	$0 = *(($5 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$0 = $1
	
.LABEL $label$5
	*($3) = $1
	CALL $48($0)
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [48])
}

void .FUNC $10 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [48])
	*([0] + [4]) = $10
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [112]
	$8 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$7 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($5)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$9 = (int_64)0
	if ( ((int_64)$7 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$6 = ((int_64)$6 + (int_64)-5)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$7 }
	CALL $11($10)
	$7 = *($0)
	if ( ((int_64)*($10) == (int_64)$7) ){ goto $label$8 }
	if ( ((int_64)*($10 + [8]) != (int_64)$7) ){ goto $label$8 }
	$5 = ($10 + [24])
	CALL eosio_assert(((int_64)*($5) == (int_64)1397703940), [192])
	$3 = [0]
	$4 = ($10 + [16])
	if ( ((uint_64)((int_64)*($4) + (int_64)4611686018427387903) >= (uint_64)(int_64)9223372036854775807) ){ goto $label$9 }
	$7 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$3 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$3 = [0]
	
.LABEL $label$9
	CALL eosio_assert($3, [128])
	CALL eosio_assert(((int_64)*($4) > (int_64)0), [160])
	CALL $12($0, *($10), $4)
	
.LABEL $label$8
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $48(*(($10 + [40])))
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $11 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1232])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [816])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $37($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $12 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [112])
	*([0] + [4]) = $11
	*($11 + [96]) = $1
	$10 = [0]
	*((($11 + [56]) + [32])) = [0]
	*($11 + [72]) = (int_64)-1
	*($11 + [80]) = (int_64)0
	$5 = *($0)
	*($11 + [56]) = $5
	*($11 + [64]) = $5
	CALL require_auth($1)
	*((($11 + [16]) + [32])) = [0]
	*($11 + [32]) = (int_64)-1
	*($11 + [40]) = (int_64)0
	$1 = *($0)
	*($11 + [16]) = $1
	*($11 + [24]) = $1
	$7 = CALL db_lowerbound_i64($1, $1, (int_64)-4493853556301889536, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL $13(($11 + [16]), $7)
	$10 = [1]
	
.LABEL $label$1
	CALL eosio_assert($10, [224])
	$3 = *(($11 + [80]))
	$8 = *(($11 + [84]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$2 }
	$10 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$3:
	if ( (int_64)(*(*($10)) == 0) ){ goto $label$2 }
	$8 = $10
	$7 = ($10 + [-24])
	$10 = $7
	if ( ((int_32)($7 + $4) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*(*(($8 + [-24])) + [40]) == (int_32)($11 + [56])), [272])
	goto $label$4 
	
.LABEL $label$5
	$10 = CALL db_find_i64(*($11 + [56]), *(($11 + [64])), (int_64)4451269583868788736, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $14(($11 + [56]), $10) + [40]) == (int_32)($11 + [56])), [272])
	
.LABEL $label$4
	$1 = *($0)
	*($11 + [8]) = $2
	*($11 + [4]) = ($11 + [96])
	*($11) = ($11 + [56])
	CALL $15(($11 + [104]), ($11 + [56]), $1, $11)
	$10 = [0]
	$7 = (($11 + [56]) + [8])
	$8 = CALL db_lowerbound_i64(*($11 + [56]), *($7), (int_64)4451269583868788736, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$6 }
	$10 = CALL $14(($11 + [56]), $8)
	
.LABEL $label$6
	*(($11 + [8])) = *(($10 + [32]))
	*($11) = *($10 + [24])
	*($11) = (int_64)0
	$10 = CALL db_lowerbound_i64(*($11 + [56]), *($7), (int_64)4451269583868788736, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$10 = CALL $14(($11 + [56]), $10)
	$6 = (int_64)0
	$8 = ($11 + [8])
	$1 = (int_64)0
	
.LOOP $label$8:
	$5 = *($10 + [16])
	CALL eosio_assert(((int_64)*(($10 + [32])) == (int_64)*($8)), [336])
	$9 = ((int_64)*($11) + (int_64)*($10 + [24]))
	*($11) = $9
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [384])
	CALL eosio_assert(((int_64)*($11) < (int_64)4611686018427387904), [416])
	CALL eosio_assert([1], [448])
	$7 = CALL db_next_i64(*($10 + [44]), ($11 + [104]))
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$9 }
	CALL $14(($11 + [56]), $7)
	$9 = *(($10 + [16]))
	$6 = ((int_64)((uint_64)((int_64)$9 * (int_64)$9) / (uint_64)(int_64)100000000) + (int_64)$6)
	
.LABEL $label$9
	CALL eosio_assert([1], [448])
	$1 = ((int_64)$5 + (int_64)$1)
	$10 = CALL db_next_i64(*($10 + [44]), ($11 + [104]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$10 }
	$10 = CALL $14(($11 + [56]), $10)
	goto $label$8 
	
.LABEL $label$10
	if ( ((uint_64)$1 <= (uint_64)(int_64)309999) ){ goto $label$7 }
	CALL $16($0, *($11 + [96]), $11, $2, $6)
	CALL $17($0)
	
.LABEL $label$7
	$8 = *($11 + [40])
	if ( ($8 == 0) ){ goto $label$11 }
	$4 = ($11 + [44])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$15 }
	CALL $48($7)
	
.LABEL $label$15
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$14 }
	$10 = *(($11 + [40]))
	goto $label$12 
	
.LABEL $label$13
	$10 = $8
	
.LABEL $label$12
	*($4) = $8
	CALL $48($10)
	
.LABEL $label$11
	$8 = *($11 + [80])
	if ( ($8 == 0) ){ goto $label$16 }
	$4 = ($11 + [84])
	$10 = *($4)
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$18 }
	
.LOOP $label$19:
	$10 = ($10 + [-24])
	$7 = *($10)
	*($10) = [0]
	if ( ($7 == 0) ){ goto $label$20 }
	CALL $48($7)
	
.LABEL $label$20
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$19 }
	$10 = *(($11 + [80]))
	goto $label$17 
	
.LABEL $label$18
	$10 = $8
	
.LABEL $label$17
	*($4) = $8
	CALL $48($10)
	
.LABEL $label$16
	*([0] + [4]) = ($11 + [112])
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [1760])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $47([56])
	$4 = CALL $34($6)
	*($6 + [44]) = $0
	CALL $35(($8 + [32]), $4)
	*($6 + [48]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [48])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $36(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $48($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $36 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $47(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $48($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $48($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $38($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1792])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $34 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [1232])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [816])
	*(($2 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [1232])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [816])
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1792])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1792])
	CALL memcpy(($1 + [40]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [1792])
	CALL memcpy(($1 + [42]), *($0 + [4]), [2])
	*($0 + [4]) = (*($0 + [4]) + [2])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [1296])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1296])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1296])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1296])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [1296])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [1792])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [1792])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $47(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $51($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $48($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $48($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [44]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1712])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4451269583868788736)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1648])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1648])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $14(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $47(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $48($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $39($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $50($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $47($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $50($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $48($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $49($7)
	return (unreachable)
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $47($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $55 ()
{
	(unreachable)
}