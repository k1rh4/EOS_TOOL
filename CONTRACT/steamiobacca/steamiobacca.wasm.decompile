(data (i32.const 8192) "EOS\00")
(data (i32.const 16628) "deposit\00")
(data (i32.const 16636) "wrong actor\00")
(data (i32.const 16648) "transfer\00: no conversion\00")
(data (i32.const 16673) "wrong transaction\00: out of range\00")
(data (i32.const 16706) "game is not active!\00")
(data (i32.const 16726) "quantity invalid\00")
(data (i32.const 16743) "Do not support the token transfered\00")
(data (i32.const 16779) "balance reached the risk line\00")
(data (i32.const 16809) "can\'t less than min bet asset\00")
(data (i32.const 16839) "can\'t larger than max bet asset\00")
(data (i32.const 16871) "wrong game\00")
(data (i32.const 16882) "inviter can\'t be _self\00")
(data (i32.const 16905) "referral does not exist\00")
(data (i32.const 16929) "banker\00")
(data (i32.const 16936) "player\00")
(data (i32.const 16943) "tie\00")
(data (i32.const 16947) "banker_pair\00")
(data (i32.const 16959) "player_pair\00")
(data (i32.const 16971) "Unable to find this game\00")
(data (i32.const 16996) "Unable to find this bet\00")
(data (i32.const 17020) "Unable to find the token\00")
(data (i32.const 17045) "Wager, Game: baccarat\00")
(data (i32.const 17068) "baccarat\00")
(data (i32.const 17077) "Unable to find the game\00")
(data (i32.const 17101) "cannot find token factor\00")
(data (i32.const 17126) "STEAM\00")
(data (i32.const 17132) "Game Token for player. [https://betsteam.io]\00")
(data (i32.const 17177) "game: baccarat, game id: %lld, bet id: %lld. Refund! \00")
(data (i32.const 17231) "eosio.token\00")
(data (i32.const 17243) "Incorrect action\00")
(data (i32.const 17260) "string is too long to be a valid symbol_code\00")
(data (i32.const 17305) "only uppercase letters allowed in symbol_code string\00")
(data (i32.const 17358) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17407) "invalid symbol name\00")
(data (i32.const 17427) "get_action size failed\00")
(data (i32.const 17450) "get_action failed\00")
(data (i32.const 17468) "get\00")
(data (i32.const 17472) "read\00")
(data (i32.const 17477) "string is too long to be a valid name\00")
(data (i32.const 17515) "thirteenth character in name cannot be a letter that comes after j\00")
(data (i32.const 17582) "character is not in allowed character set for names\00")
(data (i32.const 17634) "cannot pass end iterator to modify\00")
(data (i32.const 17669) "object passed to modify is not in multi_index\00")
(data (i32.const 17715) "cannot modify objects in table of another contract\00")
(data (i32.const 17766) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17825) "attempt to add asset with different symbol\00")
(data (i32.const 17868) "addition underflow\00")
(data (i32.const 17887) "addition overflow\00")
(data (i32.const 17905) "write\00")
(data (i32.const 17911) "Incorrect memo for baccarat\00")
(data (i32.const 17939) "tradetoken unlock error\00")
(data (i32.const 17963) "attempt to subtract asset with different symbol\00")
(data (i32.const 18011) "subtraction underflow\00")
(data (i32.const 18033) "subtraction overflow\00")
(data (i32.const 18054) "unable to find key\00")
(data (i32.const 18073) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 18124) "error reading iterator\00")
(data (i32.const 18147) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18206) "multiplication overflow\00")
(data (i32.const 18230) "multiplication underflow\00")
(data (i32.const 18255) "cannot create objects in table of another contract\00")
(data (i32.const 18306) "cannot pass end iterator to erase\00")
(data (i32.const 18340) "cannot increment end iterator\00")
(data (i32.const 18370) "object passed to erase is not in multi_index\00")
(data (i32.const 18415) "cannot erase objects in table of another contract\00")
(data (i32.const 18465) "attempt to remove object that was not in multi_index\00")
(data (i32.const 18518) "stoi\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 18624) "\00\00\00\00\00\00\f0?\00\00\00\00\00\00$@\00\00\00\00\00\00Y@\00\00\00\00\00@\8f@\00\00\00\00\00\88\c3@\00\00\00\00\00j\f8@\00\00\00\00\80\84.A\00\00\00\00\d0\12cA\00\00\00\00\84\d7\97A\00\00\00\00e\cd\cdA")
(data (i32.const 18704) "\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\00\01\02\03\04\05\06\07\08\t\ff\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\n\0b\0c\0d\0e\0f\10\11\12\13\14\15\16\17\18\19\1a\1b\1c\1d\1e\1f !\"#\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff\ff")
(data (i32.const 18961) "\00\01\02\04\07\03\06\05\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "eosio_assert" (func $fimport$1 (param i32 i32)))
(import "env" "memset" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "ripemd160" (func $fimport$4 (param i32 i32 i32)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "current_receiver" (func $fimport$8 (result i64)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_next_i64" (func $fimport$10 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$11 (param i64) (result i32)))
(import "env" "get_action" (func $fimport$12 (param i32 i32 i32 i32) (result i32)))
(import "env" "send_inline" (func $fimport$13 (param i32 i32)))
(import "env" "__multi3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "require_auth2" (func $fimport$15 (param i64 i64)))
(import "env" "send_deferred" (func $fimport$16 (param i32 i64 i32 i32 i32)))
(import "env" "eosio_exit" (func $fimport$17 (param i32)))
(import "env" "action_data_size" (func $fimport$18 (result i32)))
(import "env" "read_action_data" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "abort" (func $fimport$20))
(import "env" "db_update_i64" (func $fimport$21 (param i32 i64 i32 i32)))
(import "env" "db_get_i64" (func $fimport$22 (param i32 i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$23 (param i32)))
(import "env" "__floatditf" (func $fimport$24 (param i32 i64)))
(import "env" "db_idx_long_double_store" (func $fimport$25 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx_long_double_find_primary" (func $fimport$26 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx_long_double_update" (func $fimport$27 (param i32 i64 i32)))
(import "env" "prints_l" (func $fimport$28 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$39 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$40 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$41 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$43 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$45 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$46 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$47 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $63))
(export "_Znwj" (func $104))
(export "_ZdlPv" (func $106))
(export "_Znaj" (func $105))
(export "_ZdaPv" (func $107))
(export "_ZnwjSt11align_val_t" (func $108))
(export "_ZnajSt11align_val_t" (func $109))
(export "_ZdlPvSt11align_val_t" (func $110))
(export "_ZdaPvSt11align_val_t" (func $111))
(table $0 10 10 anyfunc)
(elem (i32.const 1) $17 $51 $6 $34 $61 $7 $8 $127 $130)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18970))
(global $global$2 i32 (i32.const 18970))


void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17905])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17905])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $3, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17905])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($0) = (*($0) + [8])
	CALL $90(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [2])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [2])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$6 = [1073741823]
	if ( ((uint_32)int_32($5 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [1])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [2])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [2])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [2]) << [2]))
	return (unreachable)
	
.LABEL $label$1
	CALL $124($0)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $95(*($1), *($0))
	CALL $95(*($1), *($0 + [4]))
	$3 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [17472])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy(($2 + [15]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($3) = ((int_32)*($2 + [15]) != (int_32)[0])
	$3 = *($0 + [12])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)*($4 + [8]) != (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert([0], [17472])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy(($2 + [14]), $5, [1])
	*(($4 = ($4 + [4]))) = (*($4) + [1])
	*($3) = ((int_32)*($2 + [14]) != (int_32)[0])
	CALL $87(*($1), *($0 + [16]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [17468])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$5 = *($1 + [4])
	$6 = int_32(($5 - $7) >> [2])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $96($1, ($2 - $6))
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$5 = ($7 + ($2 << [2]))
	*(($1 + [4])) = $5
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($0 + [4])
	$2 = *($6)
	$4 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($4) - $2) > (uint_32)[3]) ){ goto $label$8 }
	CALL eosio_assert([0], [17472])
	$2 = *($6)
	
.LABEL $label$8
	CALL memcpy($7, $2, [4])
	$2 = (*($6) + [4])
	*($6) = $2
	$7 = ($7 + [4])
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [2])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($2 >> [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $124($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [2]))
	$3 = ($2 + ($3 << [2]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [2]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $97 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0 + [4])
	$1 = *($0 + [8])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$1 }
	$3 = ($0 + [8])
	
.LOOP $label$2:
	$4 = ($1 + [-24])
	*($3) = $4
	$1 = *($4)
	*($4) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	if ( ((*(($1 + [44])) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($1 + [52])))
	
.LABEL $label$4
	$4 = *(($1 + [28]))
	if ( ($4 == 0) ){ goto $label$5 }
	*(($1 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$5
	$4 = *($1 + [16])
	if ( ($4 == 0) ){ goto $label$6 }
	*(($1 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$1 = *($3)
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$7 }
	CALL _ZdlPv($1)
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [17905])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17472])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17472])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [24])) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17472])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [40])) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$1 = ($1 + [48])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [17472])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($1, $4, [4])
	*(($1 = ($0 + [4]))) = (*($1) + [4])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17905])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($1 + [24]))
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [32])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *(($1 + [40]))
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$1 = ($1 + [48])
	if ( ((int_32)(*($5) - $4) > (int_32)[3]) ){ goto $label$7 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, $1, [4])
	*(($1 = ($0 + [4]))) = (*($1) + [4])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17472])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [8])
	if ( ((uint_32)(*(($0 + [8])) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($5, $4, [8])
	*($3) = (*($3) + [8])
	*($2) = $0
	*($2 + [12]) = ($1 + [28])
	*($2 + [8]) = ($1 + [16])
	*($2 + [16]) = ($1 + [40])
	*($2 + [20]) = ($1 + [41])
	*($2 + [24]) = ($1 + [44])
	CALL $94(($2 + [8]), $2)
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $138 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $123 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $115 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $122 ()
{
	CALL abort()
	(unreachable)
}

void .FUNC $130 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	if ( ((uint_32)$2 >= (uint_32)$3) ){ goto $label$1 }
	*(($1 + $2)) = $0
	
.LABEL $label$1
}

int_32 .FUNC $131 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [-1]) | $1)
	if ( ((uint_32)*($0 + [20]) <= (uint_32)*($0 + [28])) ){ goto $label$1 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	
.LABEL $label$1
	*($0 + [16]) = (int_64)0
	*(($0 + [28])) = [0]
	$1 = *($0)
	if ( ($1 & [4]) ){ goto $label$2 }
	$2 = (*($0 + [44]) + *($0 + [48]))
	*($0 + [8]) = $2
	*($0 + [4]) = $2
	return int_32(($1 << [27]) >> [31])
	
.LABEL $label$2
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = [-1]
	if ( CALL $131($0) ){ goto $label$1 }
	if ( ((int_32)CALL int_32 $0((int_32 ($1 + [15])), (int_32 [1]), (int_32 *($0 + [32]))) != (int_32)[1]) ){ goto $label$1 }
	$2 = *($1 + [15])
	
.LABEL $label$1
	$global$0 = ($1 + [16])
	return $2
}

void .FUNC $133 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	*($0 + [112]) = $1
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	$4 = (CASTING int_64)(int_32 ($2 - $3))
	*($0 + [120]) = $4
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	if ( ((int_64)$4 <= (int_64)$1) ){ goto $label$1 }
	*($0 + [104]) = ($3 + (CASTING uint_32)(uint_64 $1))
	return 
	
.LABEL $label$1
	*($0 + [104]) = $2
}

int_32 .FUNC $134 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [112])
	if ( (int_64)($1 == 0) ){ goto $label$6 }
	if ( ((int_64)*($0 + [120]) >= (int_64)$1) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = CALL $132($0)
	if ( ((int_32)$2 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($0 + [8])
	$1 = *(($0 + [112]))
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$7 }
	$4 = *($0 + [4])
	$1 = (int_64)
	if ( ((int_64)$1($1 - *($0 + [120]))) <= (int_64)(CASTING int_64)(int_32 ($3 - $4))) ){ goto $label$4 }
	
.LABEL $label$7
	*($0 + [104]) = $3
	if ( ($3 == 0) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	*($0 + [104]) = [0]
	return [-1]
	
.LABEL $label$4
	*($0 + [104]) = (($4 + (CASTING uint_32)(uint_64 $1)) + [-1])
	if ( $3 ){ goto $label$2 }
	
.LABEL $label$3
	$3 = *(($0 + [4]))
	goto $label$1 
	
.LABEL $label$2
	$3 = *(($0 + [4]))
	*($0 + [120]) = ((int_64)*($0 + [120]) + (int_64)(CASTING int_64)(int_32 (($3 + [1]) - $3)))
	
.LABEL $label$1
	$0 = ($3 + [-1])
	if ( ((int_32)$2 == (int_32)*($0)) ){ goto $label$8 }
	*($0) = $2
	
.LABEL $label$8
	return $2
}

void .FUNC $121 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $138($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$8 = (($5 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$1 = *($0)
	$5 = ($1 & [1])
	if ( $5 ){ goto $label$9 }
	$3 = [10]
	$1 = uint_32($1 >> [1])
	if ( (([10] - $1) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$1 = *(($0 + [4]))
	$3 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($3 - $1) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $115($0, $3, (($1 + $4) - $3), $1, $1, [0], $4, $2)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$3 = ( *(($0 + [8])) ? ($0 + [1]) : $5 )
	CALL memcpy(($3 + $1), $2, $4)
	$1 = ($1 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($1 << [1])
	*(($3 + $1)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $1
	*(($3 + $1)) = [0]
	(unreachable)
}

int_32 .FUNC $136 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [144])
	$global$0 = $3
	*($3 + [4]) = $0
	*($3 + [44]) = $0
	*($3) = [0]
	*($3 + [76]) = [-1]
	*($3 + [8]) = ( [-1] ? ($0 + [2147483647]) : ((int_32)$0 < (int_32)[0]) )
	CALL $133($3, (int_64)0)
	$4 = CALL $135($3, $2, [1], (int_64)2147483648)
	if ( ($1 == 0) ){ goto $label$1 }
	*($1) = ($0 + ((*($3 + [4]) + *($3 + [120])) - *(($3 + [8]))))
	
.LABEL $label$1
	$global$0 = ($3 + [144])
	return (CASTING uint_32)(uint_64 $4)
}

int_32 .FUNC $137 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $120 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $121($1, $0, [16657])
	CALL $123()
	(unreachable)
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17905])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	$3 = ($4 + [8])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$3 = ($4 + [16])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17905])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $3, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$5 = ($4 + [24])
	$0 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $0) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17905])
	$0 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $5, [8])
	$0 = (*($0) + [8])
	*(($0 = ($1 + [4]))) = $0
	*($2 + [8]) = *(($4 + [32]))
	if ( ((int_32)(*(($1 + [8])) - $0) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17905])
	$0 = *(($1 + [4]))
	
.LABEL $label$5
	CALL memcpy($0, ($2 + [8]), [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

int_32 .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	float_64 $17
	int_32 $18
	int_32 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	float_64 $24
	float_64 $25
	float_64 $26
	int_32 $27
	$5 = ($global$0 - [32])
	$global$0 = $5
	$6 = ( $0 ? [8] : $1 )
	$7 = [0]
	
.LOOP $label$1:
	$9 = $7
	$10 = ([0] - $9)
	$0 = ($3 + [2])
	$11 = [0]
	$7 = *(($3 + [0]))
	if ( ($7 == 0) ){ goto $label$5 }
	
.LOOP $label$7:
	$12 = ($9 + $11)
	if ( ((int_32)$7 == (int_32)[37]) ){ goto $label$6 }
	CALL void int_32(($7 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$10 = ($10 + [-1])
	$0 = ($0 + [1])
	$11 = ($11 + [1])
	$7 = *(($3 + $11))
	if ( $7 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$13 = [0]
	
.LOOP $label$9:
	$8 = ($0 + [-1])
	$7 = *($8)
	$14 = ($7 + [-32])
	if ( ((uint_32)$14 > (uint_32)[16]) ){ goto $label$8 }
	$3 = [1]
	goto $label$14 
	
.LABEL $label$14
	$3 = [8]
	goto $label$10 
	
.LABEL $label$13
	$3 = [16]
	goto $label$10 
	
.LABEL $label$12
	$3 = [4]
	goto $label$10 
	
.LABEL $label$11
	$3 = [2]
	
.LABEL $label$10
	$0 = ($0 + [1])
	$13 = ($13 | $3)
	goto $label$9 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$15 }
	$3 = [0]
	
.LOOP $label$16:
	$3 = ((((int_32)$3 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$16 }
	$14 = [0]
	if ( ((int_32)($7 & [255]) != (int_32)[46]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$15
	$3 = [0]
	if ( ((int_32)$7 != (int_32)[42]) ){ goto $label$17 }
	$7 = *($4)
	$13 = ( ($13 | [2]) ? $13 : ((int_32)$7 < (int_32)[0]) )
	$3 = int_32($7 >> [31])
	$3 = ((int_32)($7 + $3) ^ (int_32)$3)
	$4 = ($4 + [4])
	$14 = [0]
	$7 = *($0)
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$17
	$0 = $8
	$14 = [0]
	if ( ((int_32)($7 & [255]) == (int_32)[46]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	$0 = ($9 + $11)
	CALL void [0]((int_32 $1), (int_32 ( $0 ? ($2 + [-1]) : ($0 <= $2) )), (int_32 $2), (int_32 $6))
	$global$0 = ($5 + [32])
	return $0
	
.LABEL $label$4
	$8 = $0
	goto $label$2 
	
.LABEL $label$3
	$8 = ($0 + [1])
	$13 = ($13 | [1024])
	$7 = *($0 + [1])
	if ( ((uint_32)(($7 + [-48]) & [255]) > (uint_32)[9]) ){ goto $label$18 }
	$14 = [0]
	
.LOOP $label$19:
	$14 = ((((int_32)$14 * (int_32)[10]) + int_32(($7 << [24]) >> [24])) + [-48])
	$7 = *($8 + [1])
	$0 = ($8 + [1])
	$8 = $0
	if ( ((($7 + [-48]) & [255]) <= [10]) ){ goto $label$19 }
	$8 = $0
	goto $label$2 
	
.LABEL $label$18
	if ( ((int_32)($7 & [255]) != (int_32)[42]) ){ goto $label$2 }
	$7 = *($4)
	$14 = ( $7 ? [0] : ((int_32)$7 > (int_32)[0]) )
	$8 = ($0 + [2])
	$4 = ($4 + [4])
	$7 = *($0 + [2])
	
.LABEL $label$2
	$0 = (rotl((int_32) (int_32(($7 << [24]) >> [24]) + [-104])))
	if ( ((uint_32)$0 > (uint_32)[31]) ){ goto $label$23 }
	goto $label$26 
	
.LABEL $label$27
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	goto $label$23 
	
.LABEL $label$26
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[104]) ){ goto $label$22 }
	$8 = ($8 + [2])
	$13 = ($13 | [192])
	goto $label$23 
	
.LABEL $label$25
	$8 = ($8 + [1])
	$13 = ($13 | [512])
	goto $label$23 
	
.LABEL $label$24
	$0 = *($8 + [1])
	if ( ((int_32)$0 != (int_32)[108]) ){ goto $label$21 }
	$8 = ($8 + [2])
	$13 = ($13 | [768])
	
.LABEL $label$23
	$0 = *($8)
	goto $label$20 
	
.LABEL $label$22
	$8 = ($8 + [1])
	$13 = ($13 | [128])
	goto $label$20 
	
.LABEL $label$21
	$8 = ($8 + [1])
	$13 = ($13 | [256])
	
.LABEL $label$20
	$15 = int_32(($0 << [24]) >> [24])
	$7 = ($15 + [-37])
	if ( ((uint_32)$7 > (uint_32)[83]) ){ goto $label$51 }
	goto $label$55 
	
.LABEL $label$62
	$11 = ($0 & [255])
	$7 = ($11 + [-88])
	if ( ((uint_32)$7 > (uint_32)[32]) ){ goto $label$60 }
	$0 = [8]
	$10 = [16]
	goto $label$59 
	
.LABEL $label$63
	$0 = [2]
	goto $label$58 
	
.LABEL $label$61
	$18 = ((float_64)$17 < (float_64)(float_64)0)
	$16 = (($4 + [7]) & [-8])
	$17 = *($16)
	$17 = ( (float_64))((float_64)0 - $17) ? $17 : $18 )
	$0 = ( $14 ? [6] : ($13 & [1024]) )
	if ( ($0 <= [10]) ){ goto $label$48 }
	$14 = [1]
	
.LOOP $label$65:
	*((($5 + ($7 = $14)) + [-1])) = [48]
	$14 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$64 }
	if ( ((uint_32)$0 > (uint_32)[9]) ){ goto $label$65 }
	
.LABEL $label$64
	$19 = ($7 <= [32])
	$14 = ($14 + [-1])
	goto $label$47 
	
.LABEL $label$60
	$13 = ($13 & [-17])
	$10 = [10]
	
.LABEL $label$59
	$13 = ( ($13 | [32]) ? $13 : ((int_32)$11 == (int_32)[88]) )
	if ( ((int_32)$11 == (int_32)[100]) ){ goto $label$57 }
	$0 = $10
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$56 }
	
.LABEL $label$58
	$13 = ($13 & [-13])
	goto $label$56 
	
.LABEL $label$57
	$0 = $10
	
.LABEL $label$56
	$7 = ( ($13 & [-2]) ? $13 : ($13 & [1024]) )
	if ( ((int_32)$11 == (int_32)[105]) ){ goto $label$70 }
	if ( ((int_32)$11 != (int_32)[100]) ){ goto $label$69 }
	
.LABEL $label$70
	if ( ($7 & [512]) ){ goto $label$68 }
	if ( ($7 & [256]) ){ goto $label$67 }
	if ( ($7 & [64]) ){ goto $label$46 }
	$11 = *($4)
	$15 = ( int_32(($11 << [16]) >> [16]) ? $11 : ($7 & [128]) )
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$29 }
	goto $label$30 
	
.LABEL $label$69
	if ( ($7 & [512]) ){ goto $label$66 }
	if ( ($7 & [256]) ){ goto $label$45 }
	if ( ($7 & [64]) ){ goto $label$44 }
	$11 = *($4)
	$11 = ( ($11 & [65535]) ? $11 : ($7 & [128]) )
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( ($11 == 0) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$68
	$9 = (($4 + [7]) & [-8])
	$20 = *($9)
	$11 = ((int_64)$20 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$72 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$71 }
	
.LABEL $label$72
	$21 = (CASTING uint_64)(uint_32 $0)
	$22 = (int_64)$20 >> (int_64)63
	$22 = ((int_64)((int_64)$20 + (int_64)$22)) ^ (int_64)$22)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$73:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$71 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$73 }
	
.LABEL $label$71
	$4 = ($9 + [8])
	$7 = CALL $128($6, $1, $12, $2, $5, $11, (CASTING uint_32)(uint_64 (uint_64)$20 >> (uint_64)(int_64)63)), $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$67
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( $15 ){ goto $label$75 }
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$74 }
	
.LABEL $label$75
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$76:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$74 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$76 }
	
.LABEL $label$74
	$4 = ($4 + [4])
	$7 = CALL $128($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$66
	$9 = (($4 + [7]) & [-8])
	$22 = *($9)
	$11 = ((int_64)$22 != (int_64)0)
	$13 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$78 }
	$11 = [0]
	if ( ($13 & [1024]) ){ goto $label$77 }
	
.LABEL $label$78
	$21 = (CASTING uint_64)(uint_32 $0)
	$10 = (((int_32)($13 & [32]) ^ (int_32)[97]) + [246])
	$11 = [0]
	
.LOOP $label$79:
	$23 = ((uint_64)$22 / (uint_64)$21)
	$7 = (CASTING uint_32)(uint_64 (int_64))($22 - ((int_64)$23 * (int_64)$21))
	*(($5 + $11)) = (( [48] ? $10 : ((int_32)($7) << [24]) < (int_32)[167772160]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$77 }
	$7 = ((uint_64)$22 >= (uint_64)$21)
	$22 = $23
	if ( $7 ){ goto $label$79 }
	
.LABEL $label$77
	$4 = ($9 + [8])
	$7 = CALL $128($6, $1, $12, $2, $5, $11, [0], $0, $14, $3, $13)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$55
	CALL void [37]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	goto $label$50 
	
.LABEL $label$54
	$10 = [1]
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$80 }
	$10 = [2]
	if ( ($3 <= [2]) ){ goto $label$80 }
	$0 = ($3 + [-1])
	$10 = ($3 + [1])
	
.LOOP $label$81:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$81 }
	$12 = ((($3 + $9) + $11) + [-1])
	
.LABEL $label$80
	CALL void *($4)((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$7 = ($12 + [1])
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$49 }
	if ( ((uint_32)$10 >= (uint_32)$3) ){ goto $label$49 }
	$0 = ($3 - $10)
	$11 = ($7 + $3)
	
.LOOP $label$82:
	CALL void [32]((int_32 $1), (int_32 $7), (int_32 $2), (int_32 $6))
	$7 = ($7 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$82 }
	$7 = ($11 - $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$53
	$0 = *($4)
	$0 = ($13 | [33])
	$10 = ( $0 ? ($0 & [-17]) : $0 )
	if ( $0 ){ goto $label$84 }
	$11 = [0]
	if ( ($10 & [1024]) ){ goto $label$83 }
	
.LABEL $label$84
	$11 = [0]
	
.LOOP $label$85:
	$7 = ($0 & [15])
	*(($5 + $11)) = (( [48] ? [55] : ($7 <= [10]) ) + $7)
	$11 = ($11 + [1])
	if ( ((uint_32)$11 > (uint_32)[31]) ){ goto $label$83 }
	$7 = ((uint_32)$0 > (uint_32)[15])
	$0 = uint_32($0 >> [4])
	if ( $7 ){ goto $label$85 }
	
.LABEL $label$83
	$4 = ($4 + [4])
	$7 = CALL $128($6, $1, $12, $2, $5, $11, [0], [16], $14, [8], $10)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$52
	$10 = *($4)
	$0 = ($10 + [-1])
	
.LOOP $label$86:
	$0 = ($0 + [1])
	if ( *($0) ){ goto $label$86 }
	$15 = ($13 & [1024])
	$0 = ($0 - $10)
	$7 = ( ( $0 ? $14 : ($0 <= $14) ) ? $0 : uint_32($15 >> [10]) )
	$13 = ($13 & [2])
	if ( $13 ){ goto $label$39 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$40 }
	$0 = (($9 + ($3 - $7)) + $11)
	
.LOOP $label$87:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$7 = ($7 + [1])
	if ( ($7 <= $3) ){ goto $label$87 }
	$7 = ($3 + [1])
	$12 = $0
	$0 = *($10)
	if ( $0 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$51
	CALL void $15((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	
.LABEL $label$50
	$7 = ($12 + [1])
	
.LABEL $label$49
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$48
	$19 = [1]
	$14 = [0]
	
.LABEL $label$47
	$24 = *((($0 << [3]) + [18624]))
	$25 = ((float_64)(float_64))($17 - (Rounds 0)($17)) * (float_64)$24
	$26 = (float_64)
	$7 = ((float_64)$26($25) - (Rounds 0)($25))) > (float_64)(float_64)0.5)
	if ( (((float_64)$25 < (float_64)(float_64)4294967296) & ((float_64)$25 >= (float_64)(float_64)0)) ){ goto $label$89 }
	$4 = [0]
	goto $label$88 
	
.LABEL $label$89
	$4 = (CASTING uint_32)(float_64 $25)
	
.LABEL $label$88
	$7 = ((int_32)$7 ^ (int_32)[1])
	if ( ((float_64)(float_64)|$17| < (float_64)(float_64)2147483648) ){ goto $label$91 }
	$15 = [-2147483648]
	if ( ($7 == 0) ){ goto $label$90 }
	goto $label$36 
	
.LABEL $label$91
	$15 = (CASTING int_32)(float_64 $17)
	if ( $7 ){ goto $label$36 }
	
.LABEL $label$90
	$4 = ($4 + [1])
	if ( ((int_32)((float_64)$24 <= (float_64)(CASTING float_64)(uint_32 $4)) ^ (int_32)[1]) ){ goto $label$35 }
	$15 = ($15 + [1])
	$4 = [0]
	goto $label$35 
	
.LABEL $label$46
	$15 = *($4)
	$19 = ( $7 ? ($7 & [-17]) : $15 )
	if ( ($15 == 0) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$45
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$93 }
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$92 }
	
.LABEL $label$93
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$94:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$92 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$94 }
	
.LABEL $label$92
	$4 = ($4 + [4])
	$7 = CALL $128($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$44
	$11 = *($4)
	$15 = ( $7 ? ($7 & [-17]) : $11 )
	if ( $11 ){ goto $label$42 }
	
.LABEL $label$43
	$7 = [0]
	if ( ($15 & [1024]) ){ goto $label$41 }
	
.LABEL $label$42
	$9 = (((int_32)($15 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$95:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$41 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$95 }
	
.LABEL $label$41
	$4 = ($4 + [4])
	$7 = CALL $128($6, $1, $12, $2, $5, $7, [0], $0, $14, $3, $15)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$40
	$7 = ($7 + [1])
	
.LABEL $label$39
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$37 }
	
.LABEL $label$38
	if ( ($15 == 0) ){ goto $label$96 }
	$11 = ($10 + [1])
	
.LOOP $label$97:
	if ( ($14 == 0) ){ goto $label$37 }
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$14 = ($14 + [-1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$97 }
	goto $label$37 
	
.LABEL $label$96
	$11 = ($10 + [1])
	
.LOOP $label$98:
	CALL void int_32(($0 << [24]) >> [24])((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = *($11)
	$11 = ($11 + [1])
	if ( $0 ){ goto $label$98 }
	
.LABEL $label$37
	$4 = ($4 + [4])
	if ( ($13 == 0) ){ goto $label$100 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$99 }
	$0 = ($3 - $7)
	$11 = ($12 + $3)
	
.LOOP $label$101:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$101 }
	$7 = ($11 - $7)
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$100
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$99
	$7 = $12
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$36
	if ( ((float_64)$26 != (float_64)(float_64)0.5) ){ goto $label$35 }
	$4 = ((($4 & [1]) | ($4 == 0)) + $4)
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	goto $label$34 
	
.LABEL $label$35
	$7 = [0]
	if ( ((float_64)$17 > (float_64)(float_64)2147483647) ){ goto $label$33 }
	
.LABEL $label$34
	if ( ($0 == 0) ){ goto $label$105 }
	$7 = [32]
	if ( ($19 == 0) ){ goto $label$102 }
	
.LOOP $label$107:
	$7 = ((uint_32)$4 / (uint_32)[10])
	*(($5 + $14)) = (($4 - ((int_32)$7 * (int_32)[10])) | [48])
	$0 = ($0 + [-1])
	$14 = ($14 + [1])
	if ( ($4 <= [10]) ){ goto $label$106 }
	$4 = $7
	if ( ($14 <= [32]) ){ goto $label$107 }
	
.LABEL $label$106
	$4 = ($14 <= [32])
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$108 }
	if ( ($0 == 0) ){ goto $label$108 }
	$19 = ($0 + [-1])
	$27 = ($5 + $14)
	$0 = [0]
	
.LOOP $label$110:
	*(($27 + $0)) = [48]
	$7 = ($0 + [1])
	$4 = (($14 + $0) + [1])
	if ( ((int_32)$19 == (int_32)$0) ){ goto $label$109 }
	$0 = $7
	if ( ($4 <= [32]) ){ goto $label$110 }
	
.LABEL $label$109
	$4 = ($4 <= [32])
	$14 = ($14 + $7)
	
.LABEL $label$108
	if ( ($4 == 0) ){ goto $label$103 }
	*(($5 + $14)) = [46]
	$7 = [32]
	$14 = ($14 + [1])
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$105
	$17 = (float_64)
	if ( ((int_32)((float_64)$17($17 - (CASTING float_64)(int_32 $15))) > (float_64)(float_64)0.5) ^ (int_32)[1]) ){ goto $label$111 }
	$15 = ($15 + [1])
	$7 = [32]
	if ( ((uint_32)$14 <= (uint_32)[31]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$111
	$15 = ($15 + ($15 & ((float_64)$17 == (float_64)(float_64)0.5)))
	$7 = [32]
	if ( ((uint_32)$14 > (uint_32)[31]) ){ goto $label$102 }
	
.LABEL $label$104
	$7 = $14
	
.LOOP $label$112:
	$0 = ((int_32)$15 / (int_32)[10])
	*(($5 + $7)) = (($15 - ((int_32)$0 * (int_32)[10])) + [48])
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$102 }
	$14 = ($15 + [9])
	$15 = $0
	if ( ((uint_32)$14 > (uint_32)[18]) ){ goto $label$112 }
	goto $label$102 
	
.LABEL $label$103
	$7 = $14
	
.LABEL $label$102
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ((int_32)($13 & [3]) != (int_32)[1]) ){ goto $label$113 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$113 }
	
.LOOP $label$114:
	*(($5 + $7)) = [48]
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$113 }
	if ( ($7 <= $3) ){ goto $label$114 }
	
.LABEL $label$113
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$115 }
	$7 = ($3 - (((int_32)($13 & [12]) != (int_32)[0]) | $18))
	
.LABEL $label$115
	$0 = ($13 & [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$116 }
	if ( ((int_32)$18 ^ (int_32)[1]) ){ goto $label$118 }
	*(($5 + $7)) = [45]
	goto $label$117 
	
.LABEL $label$118
	if ( ($13 & [4]) ){ goto $label$119 }
	if ( (($13 & [8]) == 0) ){ goto $label$116 }
	*(($5 + $7)) = [32]
	goto $label$117 
	
.LABEL $label$119
	*(($5 + $7)) = [43]
	
.LABEL $label$117
	$7 = ($7 + [1])
	
.LABEL $label$116
	$14 = ($13 & [2])
	if ( $0 ){ goto $label$120 }
	if ( $14 ){ goto $label$120 }
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$120 }
	$0 = ($3 - $7)
	
.LOOP $label$121:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [-1])
	if ( $0 ){ goto $label$121 }
	$12 = (($9 + ($3 - $7)) + $11)
	
.LABEL $label$120
	if ( ($7 == 0) ){ goto $label$122 }
	$0 = ($7 + [-1])
	$13 = $12
	
.LOOP $label$123:
	CALL void *(($5 + $0))((int_32 $1), (int_32 $13), (int_32 $2), (int_32 $6))
	$13 = ($13 + [1])
	$0 = ($0 + [-1])
	if ( ((int_32)$0 != (int_32)[-1]) ){ goto $label$123 }
	$12 = ($12 + $7)
	
.LABEL $label$122
	if ( ($14 == 0) ){ goto $label$31 }
	if ( ((uint_32)(($12 - $9) - $11) >= (uint_32)$3) ){ goto $label$32 }
	$0 = ($12 + $10)
	
.LOOP $label$124:
	CALL void [32]((int_32 $1), (int_32 $12), (int_32 $2), (int_32 $6))
	$12 = ($12 + [1])
	$0 = ($0 + [1])
	if ( ($0 <= $3) ){ goto $label$124 }
	$7 = (($3 + $9) + $11)
	
.LABEL $label$33
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$32
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$31
	$7 = $12
	$4 = ($16 + [8])
	$3 = ($8 + [1])
	goto $label$1 
	
.LABEL $label$30
	$7 = [0]
	if ( ($19 & [1024]) ){ goto $label$28 }
	
.LABEL $label$29
	$11 = int_32($15 >> [31])
	$11 = ((int_32)($15 + $11) ^ (int_32)$11)
	$9 = (((int_32)($19 & [32]) ^ (int_32)[97]) + [246])
	$7 = [0]
	
.LOOP $label$125:
	$13 = ((uint_32)$11 / (uint_32)$0)
	$10 = ($11 - ((int_32)$13 * (int_32)$0))
	*(($5 + $7)) = (( [48] ? $9 : ((int_32)($10 << [24]) < (int_32)[167772160]) ) + $10)
	$7 = ($7 + [1])
	if ( ((uint_32)$7 > (uint_32)[31]) ){ goto $label$28 }
	$10 = ((uint_32)$11 >= (uint_32)$0)
	$11 = $13
	if ( $10 ){ goto $label$125 }
	
.LABEL $label$28
	$4 = ($4 + [4])
	$7 = CALL $128($6, $1, $12, $2, $5, $7, uint_32($15 >> [31]), $0, $14, $3, $19)
	$3 = ($8 + [1])
	goto $label$1 
	$14
	[9]
	$0
	$7
	return $7
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $79(CALL $78($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $2) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17905])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $1, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((int_32)(*(($0 + [8])) - $3) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($3, $4, [8])
	return *($2) = (*($2) + [8])
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [56]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18370])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18415])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [18465])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$2 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*(($5 + [44])) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($5 + [52])))
	
.LABEL $label$13
	$7 = *(($5 + [28]))
	if ( ($7 == 0) ){ goto $label$14 }
	*(($5 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$14
	$7 = *($5 + [16])
	if ( ($7 == 0) ){ goto $label$15 }
	*(($5 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$15
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$2 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$16:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$17 }
	if ( ((*(($8 + [44])) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*(($8 + [52])))
	
.LABEL $label$18
	$7 = *(($8 + [28]))
	if ( ($7 == 0) ){ goto $label$19 }
	*(($8 + [32])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$19
	$7 = *($8 + [16])
	if ( ($7 == 0) ){ goto $label$20 }
	*(($8 + [20])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$20
	CALL _ZdlPv($8)
	
.LABEL $label$17
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$16 }
	
.LABEL $label$3
	*(($0 + [28])) = $2
	CALL db_remove_i64(*($1 + [60]))
}

int_32 .FUNC $125 ()
{
	return [8216]
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [120]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*(($3 + [24])) == (int_64)*(($1 + [64]))) ){ goto $label$3 }
	CALL eosio_assert([0], [17825])
	
.LABEL $label$3
	$7 = ((int_64)*($1 + [56]) + (int_64)*($3 + [16]))
	*($1 + [56]) = $7
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [17868])
	$7 = *(($1 + [56]))
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [17887])
	
.LABEL $label$5
	*($1 + [112]) = ((int_64)*($1 + [112]) + (int_64)1)
	if ( ((int_64)$6 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [17766])
	
.LABEL $label$6
	$3 = $4
	$4 = ($3 + [-128])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-8])
	CALL $77($5, $1)
	CALL db_update_i64(*($1 + [124]), $2, $4, [120])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ($0 + [72])
	$4 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	
.LOOP $label$6:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)(uint_64)*($8 + [8]) >> (uint_64)(int_64)8) == (int_64)$4) ){ goto $label$5 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$4 }
	if ( ((int_32)*($8 + [120]) == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert([0], [18073])
	$4 = *($0)
	*($2 + [8]) = $1
	if ( $8 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	$7 = CALL db_find_i64(*($3), *(($0 + [80])), (int_64)-3617352132944662528, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $12($3, $7)
	if ( ((int_32)*($8 + [120]) == (int_32)$3) ){ goto $label$3 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$3
	$4 = *($0)
	*($2 + [8]) = $1
	if ( $8 ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [17634])
	
.LABEL $label$1
	CALL $50($3, $8, $4, ($2 + [8]))
	CALL eosio_assert(((int_32)(CASTING uint_32)(uint_64 (uint_64)*($8 + [88]) >> (uint_64)(int_64)63)) ^ (int_32)[1]), [17939])
	$global$0 = ($2 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [52]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	CALL __floatditf(($5 + [16]), (int_64))((int_64)0 - *(($1 + [16]))))
	*($5 + [56]) = *(($5 + [24]))
	*($5 + [48]) = *($5 + [16])
	$6 = *($1)
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [40]))) ){ goto $label$3 }
	CALL eosio_assert([0], [17825])
	
.LABEL $label$3
	$7 = ((int_64)*($1 + [32]) + (int_64)*($3))
	*($1 + [32]) = $7
	if ( ((int_64)$7 <= (int_64)-4611686018427387904) ){ goto $label$8 }
	if ( ((int_64)$7 >= (int_64)4611686018427387904) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL eosio_assert([0], [17868])
	if ( ((int_64)*(($1 + [32])) < (int_64)4611686018427387904) ){ goto $label$6 }
	
.LABEL $label$7
	CALL eosio_assert([0], [17887])
	if ( ((int_64)$6 != (int_64)*($1)) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$4 }
	
.LABEL $label$5
	CALL eosio_assert([0], [17766])
	
.LABEL $label$4
	$3 = $4
	$4 = ($3 + [-64])
	$global$0 = $4
	*($5 + [36]) = $4
	*($5 + [32]) = $4
	*($5 + [40]) = ($3 + [-12])
	CALL $92(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [56]), $2, $4, [52])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$9 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$9
	CALL __floatditf($5, (int_64))((int_64)0 - *(($1 + [16]))))
	*($5 + [88]) = *(($5 + [8]))
	*($5 + [80]) = *($5)
	if ( (CALL $137(($5 + [48]), ($5 + [80]), [16]) == 0) ){ goto $label$10 }
	$4 = *($1 + [60])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$11 }
	$4 = CALL db_idx_long_double_find_primary(*($0), *($0 + [8]), (int_64)-6030912129794572288, ($5 + [64]), $6)
	*(($1 + [60])) = $4
	
.LABEL $label$11
	CALL db_idx_long_double_update($4, $2, ($5 + [80]))
	
.LABEL $label$10
	$global$0 = ($5 + [96])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [120]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [80]))) ){ goto $label$3 }
	CALL eosio_assert([0], [17825])
	
.LABEL $label$3
	$7 = ((int_64)*($1 + [72]) + (int_64)*($3))
	*($1 + [72]) = $7
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [17868])
	$7 = *(($1 + [72]))
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [17887])
	
.LABEL $label$5
	if ( ((int_64)$6 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [17766])
	
.LABEL $label$6
	$3 = $4
	$4 = ($3 + [-128])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-8])
	CALL $77($5, $1)
	CALL db_update_i64(*($1 + [124]), $2, $4, [120])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18370])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18415])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$7 }
	$5 = $4
	$6 = *($1)
	if ( ((int_64)*(*(($4 + [-24]))) == (int_64)$6) ){ goto $label$8 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$9:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$7 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9)) != (int_64)$6) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$6 }
	$7 = [-24]
	$10 = ($5 + [-24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$5 = $2
	
.LABEL $label$6
	CALL eosio_assert([0], [18465])
	$7 = [-24]
	$10 = ($5 + [-24])
	$4 = *($3)
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LABEL $label$5
	
.LOOP $label$10:
	$8 = *($5)
	*($5) = [0]
	$3 = *($10)
	*($10) = $8
	if ( ($3 == 0) ){ goto $label$11 }
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$12 }
	$11 = ($3 + [12])
	$8 = *($11)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$14 }
	
.LOOP $label$15:
	$9 = ($8 + [-56])
	if ( ((*(($8 + $7)) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($8 + [-16])))
	
.LABEL $label$16
	$8 = $9
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$15 }
	$8 = *(($3 + [8]))
	goto $label$13 
	
.LABEL $label$14
	$8 = $2
	
.LABEL $label$13
	*($11) = $2
	CALL _ZdlPv($8)
	
.LABEL $label$12
	CALL _ZdlPv($3)
	
.LABEL $label$11
	*($10 + [8]) = *($5 + [8])
	*(($10 + [16])) = *(($5 + [16]))
	$10 = ($10 + [24])
	$5 = ($5 + [24])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$10 }
	$5 = *(($0 + [28]))
	if ( ((int_32)$5 == (int_32)$10) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$17:
	$5 = ($5 + $7)
	$3 = *($5)
	*($5) = [0]
	if ( ($3 == 0) ){ goto $label$18 }
	$2 = *($3 + [8])
	if ( ($2 == 0) ){ goto $label$19 }
	$4 = ($3 + [12])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$21 }
	
.LOOP $label$22:
	$9 = ($8 + [-56])
	if ( ((*(($8 + $7)) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($8 + [-16])))
	
.LABEL $label$23
	$8 = $9
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$22 }
	$8 = *(($3 + [8]))
	goto $label$20 
	
.LABEL $label$21
	$8 = $2
	
.LABEL $label$20
	*($4) = $2
	CALL _ZdlPv($8)
	
.LABEL $label$19
	CALL _ZdlPv($3)
	
.LABEL $label$18
	if ( ((int_32)$5 != (int_32)$10) ){ goto $label$17 }
	
.LABEL $label$3
	*(($0 + [28])) = $10
	CALL db_remove_i64(*($1 + [24]))
}

void .FUNC $46 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	$5 = *($1)
	$8 = *(($1 + [12]))
	$6 = *($1 + [8])
	$7 = ($6 + [56])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	$9 = ($8 + [-56])
	
.LOOP $label$6:
	*(($6 + [24])) = *(($6 + [80]))
	*(($6 + [16])) = *(($6 + [72]))
	*(($6 + [8])) = *(($6 + [64]))
	$8 = ($6 + [56])
	*($6) = *($8)
	$7 = ($6 + [32])
	if ( (*($7) & [1]) ){ goto $label$8 }
	*($7) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*(($6 + [40]))) = [0]
	*(($6 + [36])) = [0]
	
.LABEL $label$7
	CALL $116($7, [0])
	$10 = ($6 + [96])
	*(($7 + [8])) = *($10)
	$11 = ($6 + [88])
	*($7) = *($11)
	*($11) = (int_64)0
	*($10) = [0]
	*(($6 + [48])) = *(($6 + [104]))
	$6 = $8
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$6 }
	$7 = *(($1 + [12]))
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = $6
	
.LABEL $label$4
	
.LOOP $label$9:
	$6 = ($7 + [-56])
	if ( ((*(($7 + [-24])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($7 + [-16])))
	
.LABEL $label$10
	$7 = $6
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$3
	*(($6 = ($1 + [12]))) = $8
	if ( ((int_64)$5 == (int_64)*($1)) ){ goto $label$11 }
	CALL eosio_assert([0], [17766])
	$8 = *($6)
	
.LABEL $label$11
	$7 = *($1 + [8])
	$12 = (CASTING uint_64)(uint_32 ((int_32)($8 - $7) / (int_32)[56]))
	$6 = [8]
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$10 = *($7 + [32])
	$10 = ( *(($7 + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$6 = (($10 + $6) + [40])
	$12 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$15 }
	$7 = ($7 + [56])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($6 <= [513]) ){ goto $label$17 }
	$11 = CALL $141($6)
	goto $label$16 
	
.LABEL $label$17
	$11 = ($3 - (($6 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$16
	*($4 + [4]) = $11
	*($4) = $11
	*($4 + [8]) = ($11 + $6)
	$8 = $11
	if ( ((int_32)$6 > (int_32)[7]) ){ goto $label$18 }
	CALL eosio_assert([0], [17905])
	$8 = *($4 + [4])
	
.LABEL $label$18
	CALL memcpy($8, $1, [8])
	$8 = ($8 + [8])
	*($4 + [4]) = $8
	$12 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *(($1 + [8]))) / (int_32)[56]))
	
.LOOP $label$19:
	$7 = (CASTING uint_32)(uint_64 $12)
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	$10 = ((int_64)$12) != (int_64)0
	*($4 + [24]) = (($10) << [7]) | ($7 & [127]))
	if ( ((int_32)(*(($4 + [8])) - $8) > (int_32)[0]) ){ goto $label$20 }
	CALL eosio_assert([0], [17905])
	$8 = *($4 + [4])
	
.LABEL $label$20
	CALL memcpy($8, ($4 + [24]), [1])
	$8 = ($8 + [1])
	*($4 + [4]) = $8
	if ( $10 ){ goto $label$19 }
	$7 = *(($1 + [12]))
	$8 = *(($1 + [8]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$21 }
	$10 = (($4 + [24]) + [12])
	
.LOOP $label$22:
	*($4 + [16]) = $4
	*($4 + [24]) = $8
	*((($4 + [24]) + [8])) = ($8 + [16])
	*($10) = ($8 + [32])
	*((($4 + [24]) + [16])) = ($8 + [48])
	*($4 + [28]) = ($8 + [8])
	CALL $89(($4 + [24]), ($4 + [16]))
	$8 = ($8 + [56])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$22 }
	
.LABEL $label$21
	CALL db_update_i64(*($1 + [24]), $2, $11, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$25 }
	if ( ((uint_64)$5 >= (uint_64)*($0 + [16])) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL $144($11)
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$23 }
	
.LABEL $label$24
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$23
	$global$0 = ($4 + [48])
}

void .FUNC $45 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	float_64 $12
	int_64 $13
	int_64 $14
	$4 = ($global$0 - [128])
	$global$0 = $4
	$5 = ($0 + [32])
	$7 = *(($0 + [60]))
	$6 = *(($0 + [56]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)103) ){ goto $label$3 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	if ( ((int_32)*($9 + [16]) == (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [18073])
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	$8 = CALL db_find_i64(*($5), *(($0 + [40])), (int_64)7235159550150574080, (int_64)103)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $9($5, $8)
	if ( ((int_32)*($9 + [16]) == (int_32)$5) ){ goto $label$1 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [17101])
	$10 = *($3)
	$11 = *($9 + [8])
	$8 = CALL $138([17126])
	$7 = ($8 <= [8])
	$12 = ((float_64)((float_64)(CASTING float_64)(uint_64 $11) / (float_64)(float_64)1e4) * (float_64)(CASTING float_64)(int_64 $10))
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$13 = (int_64)-9223372036854775808
	if ( ($7 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$13 = (Rounds 0)($12)
	if ( $7 ){ goto $label$7 }
	
.LABEL $label$8
	CALL eosio_assert([0], [17260])
	goto $label$6 
	
.LABEL $label$7
	if ( $8 ){ goto $label$6 }
	$10 = (int_64)0
	goto $label$5 
	
.LABEL $label$6
	$10 = (int_64)0
	
.LOOP $label$10:
	$7 = *(($8 + [17125]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$11 }
	CALL eosio_assert([0], [17305])
	
.LABEL $label$11
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$10 }
	$10 = ((int_64)$10 << (int_64)8)
	
.LABEL $label$5
	$14 = ((int_64)$10 | (int_64)4)
	*($4 + [56]) = $14
	*($4 + [48]) = $13
	if ( (uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$12 }
	CALL eosio_assert([0], [17358])
	
.LABEL $label$12
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$19 }
	$10 = $11
	$7 = $8
	$8 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	$10 = $11
	
.LOOP $label$20:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$16 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$9 = ($8 + [1])
	$8 = $9
	if ( $7 ){ goto $label$20 }
	$8 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$17 }
	
.LABEL $label$18
	if ( ((int_64)$13 >= (int_64)1) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$16
	CALL eosio_assert([0], [17407])
	if ( ((int_64)$13 < (int_64)1) ){ goto $label$14 }
	
.LABEL $label$15
	$8 = CALL $138([17126])
	if ( ($8 <= [8]) ){ goto $label$24 }
	CALL eosio_assert([0], [17260])
	goto $label$23 
	
.LABEL $label$24
	if ( ($8 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$10 = (int_64)0
	
.LOOP $label$25:
	$7 = *(($8 + [17125]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$26 }
	CALL eosio_assert([0], [17305])
	
.LABEL $label$26
	$10 = ((int_64)((int_64)$10 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$25 }
	$10 = ((int_64)$10 & (int_64)72057594037927935)
	goto $label$21 
	
.LABEL $label$22
	$10 = (int_64)0
	
.LABEL $label$21
	CALL $20(($4 + [32]), (int_64)-4155580855749438160, (int_64)-4155580855981124736, $10)
	if ( ((int_64)$14 == (int_64)*($4 + [40])) ){ goto $label$27 }
	CALL eosio_assert([0], [18147])
	
.LABEL $label$27
	$8 = ( ($4 + [32]) ? ($4 + [48]) : ((int_64)*($4 + [32]) < (int_64)$13) )
	$10 = *($8)
	CALL __multi3($4, $10, (int_64)$10 >> (int_64)63), (int_64)10, (int_64)0)
	$13 = *(($8 + [8]))
	*((($4 + [48]) + [8])) = $13
	*($4 + [48]) = $10
	$11 = *(($4 + [8]))
	$10 = *($4)
	if ( (( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ) == 0) ){ goto $label$29 }
	if ( ( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ) ){ goto $label$30 }
	CALL eosio_assert([0], [18230])
	
.LABEL $label$30
	$11 = ((int_64)$10 / (int_64)10)
	if ( ((int_64)$10 >= (int_64)10) ){ goto $label$28 }
	goto $label$14 
	
.LABEL $label$29
	CALL eosio_assert([0], [18206])
	$11 = ((int_64)$10 / (int_64)10)
	if ( ((int_64)$10 < (int_64)10) ){ goto $label$14 }
	
.LABEL $label$28
	*(($4 + [24])) = [0]
	*($4 + [16]) = (int_64)0
	$8 = CALL $138([17132])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$33 }
	*($4 + [16]) = ($8 << [1])
	$7 = (($4 + [16]) | [1])
	if ( $8 ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$9 = (($8 + [16]) & [-16])
	$7 = CALL _Znwj($9)
	*($4 + [16]) = ($9 | [1])
	*($4 + [24]) = $7
	*($4 + [20]) = $8
	
.LABEL $label$32
	CALL memcpy($7, [17132], $8)
	
.LABEL $label$31
	*(($7 + $8)) = [0]
	$10 = *($4 + [16])
	*($4 + [16]) = (int_64)0
	$7 = *($4 + [24])
	*($4 + [24]) = [0]
	*(($8 = CALL _Znwj([16]))) = (int_64)-4155580855981124736
	*($8 + [8]) = (int_64)-4992121821055506944
	*(($4 + [88])) = $13
	*(($9 = ($4 + [104]))) = $7
	*($4 + [112]) = $8
	*($4 + [64]) = (int_64)-4155580855981124736
	*($4 + [72]) = $1
	*($4 + [80]) = $11
	*($4 + [96]) = $10
	$8 = ($8 + [16])
	*($4 + [120]) = $8
	*($4 + [116]) = $8
	CALL $36((int_64)-4155580855749438160, (int_64)-3617168760277827584, ($4 + [112]), ($4 + [64]))
	if ( ((*($4 + [96]) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*($9))
	
.LABEL $label$34
	$8 = *($4 + [112])
	if ( ($8 == 0) ){ goto $label$35 }
	*($4 + [116]) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$35
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($4 + [24])))
	
.LABEL $label$14
	$global$0 = ($4 + [128])
	return (unreachable)
	
.LABEL $label$13
	CALL $112(($4 + [16]))
}

void .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17905])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $0) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$0 = ($5 + [16])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((int_32)(*($1 + [8]) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17905])
	$4 = *(($1 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $0, [8])
	$0 = (*($4) + [8])
	*(($4 = ($1 + [4]))) = $0
	*($2 + [8]) = *(($5 + [24]))
	if ( ((int_32)(*(($1 + [8])) - $0) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17905])
	$0 = *($4)
	
.LABEL $label$4
	CALL memcpy($0, ($2 + [8]), [8])
	*($4) = (*($4) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $124 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	$11 = ($10 & [2])
	if ( $11 ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$1 }
	
.LOOP $label$2:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$8) ){ goto $label$1 }
	if ( ($5 <= [32]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)($10 & [3]) != (int_32)[1]) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$3 }
	
.LOOP $label$4:
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$3 }
	if ( ($5 <= [32]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( (($10 & [16]) == 0) ){ goto $label$5 }
	if ( ($10 & [1024]) ){ goto $label$11 }
	if ( ($5 == 0) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$10 }
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$10 }
	
.LABEL $label$11
	if ( ((int_32)$7 != (int_32)[16]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = ($5 + [-1])
	$5 = ( ( ($5 + [-2]) ? $5 : $5 ) ? $5 : ((int_32)$7 == (int_32)[16]) )
	if ( ((int_32)$7 == (int_32)[16]) ){ goto $label$8 }
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)[2]) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [98]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ($10 & [32])
	if ( $8 ){ goto $label$12 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$12 }
	*(($4 + $5)) = [120]
	$5 = ($5 + [1])
	if ( ((uint_32)$5 <= (uint_32)[31]) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$12
	if ( ($8 == 0) ){ goto $label$7 }
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$7 }
	*(($4 + $5)) = [88]
	$5 = ($5 + [1])
	
.LABEL $label$7
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + $5)) = [48]
	$5 = ($5 + [1])
	
.LABEL $label$5
	if ( ($5 == 0) ){ goto $label$13 }
	if ( ((int_32)$5 != (int_32)$9) ){ goto $label$13 }
	$5 = ($9 - (((int_32)($10 & [12]) != (int_32)[0]) | $6))
	
.LABEL $label$13
	$8 = ($10 & [1])
	if ( ((uint_32)$5 > (uint_32)[31]) ){ goto $label$16 }
	if ( ($6 == 0) ){ goto $label$17 }
	*(($4 + $5)) = [45]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	if ( ($10 & [4]) ){ goto $label$18 }
	if ( (($10 & [8]) == 0) ){ goto $label$16 }
	*(($4 + $5)) = [32]
	$5 = ($5 + [1])
	$6 = $2
	if ( ($8 == 0) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$18
	*(($4 + $5)) = [43]
	$5 = ($5 + [1])
	
.LABEL $label$16
	$6 = $2
	if ( $8 ){ goto $label$14 }
	
.LABEL $label$15
	$6 = $2
	if ( $11 ){ goto $label$14 }
	$6 = $2
	if ( ((uint_32)$5 >= (uint_32)$9) ){ goto $label$14 }
	$10 = ($9 - $5)
	$6 = ($9 + $2)
	$8 = $2
	
.LOOP $label$19:
	CALL void [32]((int_32 $1), (int_32 $8), (int_32 $3), (int_32 $0))
	$8 = ($8 + [1])
	$10 = ($10 + [-1])
	if ( $10 ){ goto $label$19 }
	$6 = ($6 - $5)
	
.LABEL $label$14
	if ( ($5 == 0) ){ goto $label$20 }
	$8 = ($5 + [-1])
	$10 = $6
	
.LOOP $label$21:
	CALL void *(($4 + $8))((int_32 $1), (int_32 $10), (int_32 $3), (int_32 $0))
	$10 = ($10 + [1])
	$8 = ($8 + [-1])
	if ( ((int_32)$8 != (int_32)[-1]) ){ goto $label$21 }
	$6 = ($5 + $6)
	
.LABEL $label$20
	if ( ($11 == 0) ){ goto $label$22 }
	if ( ((uint_32)($6 - $2) >= (uint_32)$9) ){ goto $label$22 }
	$5 = ([0] - $2)
	
.LOOP $label$23:
	CALL void [32]((int_32 $1), (int_32 $6), (int_32 $3), (int_32 $0))
	$6 = ($6 + [1])
	if ( (($5 + $6) <= $9) ){ goto $label$23 }
	$6 = ($9 + $2)
	
.LABEL $label$22
	return $6
}

void .FUNC $8 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$6 = ($global$0 - [80])
	$global$0 = $6
	*($6 + [24]) = $5
	*($6 + [32]) = $2
	CALL require_auth(*($0))
	$7 = ($0 + [72])
	$5 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8)
	$9 = *(($0 + [100]))
	$8 = *(($0 + [96]))
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	
.LOOP $label$10:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8) == (int_64)$5) ){ goto $label$9 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$8 }
	if ( ((int_32)*($11 + [120]) == (int_32)$7) ){ goto $label$7 }
	CALL eosio_assert([0], [18073])
	if ( ((int_64)$2 != (int_64)0) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$8
	$10 = CALL db_find_i64(*($7), *(($0 + [80])), (int_64)-3617352132944662528, $5)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$5 }
	$11 = CALL $12($7, $10)
	if ( ((int_32)*($11 + [120]) == (int_32)$7) ){ goto $label$7 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)0) ){ goto $label$4 }
	
.LABEL $label$6
	$5 = *($0)
	*($6) = $1
	*($6 + [8]) = $3
	*($6 + [12]) = $4
	*($6 + [4]) = ($6 + [32])
	*($6 + [16]) = ($6 + [24])
	CALL $13($7, $11, $5, $6)
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$5
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	$5 = *($0)
	*($6) = $1
	*($6 + [8]) = $3
	*($6 + [12]) = $4
	*($6 + [4]) = ($6 + [32])
	*($6 + [16]) = ($6 + [24])
	*($6 + [72]) = $5
	if ( ((int_64)*(($0 + [72])) == (int_64)CALL current_receiver()) ){ goto $label$11 }
	CALL eosio_assert([0], [18255])
	
.LABEL $label$11
	*($6 + [48]) = $7
	*($6 + [52]) = $6
	*($6 + [56]) = ($6 + [72])
	*(($10 = CALL _Znwj([136])) + [8]) = (int_64)0
	*($10) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [24]) = (int_64)0
	*($10 + [32]) = (int_64)0
	*($10 + [40]) = (int_64)0
	*($10 + [48]) = (int_64)0
	*($10 + [56]) = (int_64)0
	*($10 + [64]) = (int_64)0
	*($10 + [72]) = (int_64)0
	*($10 + [80]) = (int_64)0
	*($10 + [88]) = (int_64)0
	*($10 + [96]) = (int_64)0
	*($10 + [120]) = $7
	CALL $14(($6 + [48]), $10)
	*($6 + [64]) = $10
	$5 = (uint_64)*($10 + [8]) >> (uint_64)(int_64)8
	*($6 + [48]) = $5)
	$11 = *($10 + [124])
	*($6 + [44]) = $11
	$8 = ($0 + [100])
	$9 = *($8)
	if ( ((uint_32)$9 >= (uint_32)*(($0 + [104]))) ){ goto $label$3 }
	*($9 + [8]) = $5
	*($9 + [16]) = $11
	*($6 + [64]) = [0]
	*($9) = $10
	*($8) = ($9 + [24])
	$10 = *($6 + [64])
	*($6 + [64]) = [0]
	if ( $10 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$10 = CALL db_next_i64(*($11 + [124]), $6)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	CALL $12($7, $10)
	
.LABEL $label$12
	CALL $15($7, $11)
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$3
	CALL $16(($0 + [96]), ($6 + [64]), ($6 + [48]), ($6 + [44]))
	$10 = *($6 + [64])
	*($6 + [64]) = [0]
	if ( ($10 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL _ZdlPv($10)
	$global$0 = ($6 + [80])
	return 
	
.LABEL $label$1
	$global$0 = ($6 + [80])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18124])
	
.LABEL $label$5
	$2 = CALL $141($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17472])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	$7 = ($5 + [8])
	$8 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [17472])
	
.LABEL $label$8
	CALL memcpy($7, $8, [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$9 = *($5)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $9
	*($4 + [16]) = $1
	*($3 + [24]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $11(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $144($2)
	
.LABEL $label$9
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [96])
	$global$0 = $1
	CALL require_auth(*($0))
	CALL $7($0, (int_64)101, (int_64)0)
	CALL $7($0, (int_64)102, (int_64)1)
	CALL $7($0, (int_64)103, (int_64)100000)
	CALL $7($0, (int_64)104, (int_64)0)
	CALL $7($0, (int_64)105, (int_64)50)
	CALL $7($0, (int_64)106, (int_64)50)
	CALL $7($0, (int_64)107, (int_64)86400000000)
	CALL $7($0, (int_64)108, (int_64)0)
	CALL $7($0, (int_64)109, (int_64)0)
	$2 = CALL $138([8192])
	if ( ($2 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17260])
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = (int_64)0
	
.LOOP $label$5:
	$4 = *(($2 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17305])
	
.LABEL $label$6
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$5 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$3 = (int_64)4
	
.LABEL $label$1
	*($1 + [80]) = (int_64)10000000
	*($1 + [88]) = $3
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$3 = $5
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$3 = $5
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$11 }
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [17407])
	
.LABEL $label$7
	$2 = CALL $138([8192])
	if ( ($2 <= [8]) ){ goto $label$15 }
	CALL eosio_assert([0], [17260])
	goto $label$14 
	
.LABEL $label$15
	if ( ($2 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$3 = (int_64)0
	
.LOOP $label$16:
	$4 = *(($2 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$17 }
	CALL eosio_assert([0], [17305])
	
.LABEL $label$17
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$16 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$12 
	
.LABEL $label$13
	$3 = (int_64)4
	
.LABEL $label$12
	*($1 + [64]) = (int_64)1000
	*($1 + [72]) = $3
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$20:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$19 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$21 }
	$3 = $5
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$21
	$3 = $5
	
.LOOP $label$22:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$19 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$22 }
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$20 }
	goto $label$18 
	
.LABEL $label$19
	CALL eosio_assert([0], [17407])
	
.LABEL $label$18
	$2 = CALL $138([8192])
	if ( ($2 <= [8]) ){ goto $label$26 }
	CALL eosio_assert([0], [17260])
	goto $label$25 
	
.LABEL $label$26
	if ( ($2 == 0) ){ goto $label$24 }
	
.LABEL $label$25
	$3 = (int_64)0
	
.LOOP $label$27:
	$4 = *(($2 + [8191]))
	if ( ((($4 + [-65]) & [255]) <= [26]) ){ goto $label$28 }
	CALL eosio_assert([0], [17305])
	
.LABEL $label$28
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56))
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$27 }
	$3 = ((int_64)((int_64)$3 << (int_64)8) | (int_64)4)
	goto $label$23 
	
.LABEL $label$24
	$3 = (int_64)4
	
.LABEL $label$23
	*($1 + [48]) = (int_64)5000000
	*($1 + [56]) = $3
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$3 = $5
	$4 = $2
	$2 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$3 = $5
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$4 = ((int_32)$2 < (int_32)[6])
	$6 = ($2 + [1])
	$2 = $6
	if ( $4 ){ goto $label$33 }
	$2 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	CALL eosio_assert([0], [17407])
	
.LABEL $label$29
	*((($1 + [32]) + [8])) = *((($1 + [80]) + [8]))
	*((($1 + [16]) + [8])) = *((($1 + [64]) + [8]))
	*(($1 + [8])) = *((($1 + [48]) + [8]))
	*($1 + [32]) = *($1 + [80])
	*($1 + [16]) = *($1 + [64])
	*($1) = *($1 + [48])
	CALL $8($0, ($1 + [32]), (int_64)6138663591592764928, ($1 + [16]), $1, (int_64)10)
	$global$0 = ($1 + [96])
}

void .FUNC $7 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$3 = ($global$0 - [48])
	$global$0 = $3
	*($3 + [8]) = $2
	CALL require_auth(*($0))
	$4 = ($0 + [32])
	$6 = *(($0 + [60]))
	$5 = *(($0 + [56]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	if ( ((int_32)*($8 + [16]) == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [18073])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [40])), (int_64)7235159550150574080, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $9($4, $7)
	if ( ((int_32)*($8 + [16]) == (int_32)$4) ){ goto $label$2 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [32]) = ($3 + [8])
	CALL $10($4, $8, $1, ($3 + [32]))
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$1
	$9 = *($0)
	if ( ((int_64)*(($0 + [32])) == (int_64)CALL current_receiver()) ){ goto $label$6 }
	CALL eosio_assert([0], [18255])
	
.LABEL $label$6
	*(($7 = CALL _Znwj([32])) + [16]) = $4
	*($7 + [8]) = $2
	*($7) = $1
	CALL memcpy(($3 + [32]), $7, [8])
	CALL memcpy((($3 + [32]) | [8]), ($7 + [8]), [8])
	$1 = *($7)
	$8 = CALL db_store_i64(*(($0 + [40])), (int_64)7235159550150574080, $9, $1, ($3 + [32]), [16])
	*($7 + [20]) = $8
	$6 = ($0 + [48])
	if ( (uint_64)($1 <= *($6)) ){ goto $label$7 }
	*($6) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*($3 + [24]) = $7
	$1 = *($7)
	*($3 + [32]) = $1
	*($3 + [20]) = $8
	$5 = ($0 + [60])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [64]))) ){ goto $label$10 }
	*($6 + [8]) = $1
	*($6 + [16]) = $8
	*($3 + [24]) = [0]
	*($6) = $7
	*($5) = ($6 + [24])
	$7 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $11(($0 + [56]), ($3 + [24]), ($3 + [32]), ($3 + [20]))
	$7 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$global$0 = ($3 + [48])
}

int_32 .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((*(($3 + [44])) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*(($3 + [52])))
	
.LABEL $label$6
	$4 = *(($3 + [28]))
	if ( ($4 == 0) ){ goto $label$7 }
	*(($3 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$4 = *($3 + [16])
	if ( ($4 == 0) ){ goto $label$8 }
	*(($3 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$8
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = ($3 + [12])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($6 + [-56])
	if ( ((*(($6 + [-24])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($6 + [-16])))
	
.LABEL $label$10
	$6 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$9 }
	$6 = *(($3 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$6 = $4
	
.LABEL $label$7
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$6
	CALL _ZdlPv($3)
	
.LABEL $label$5
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$4 }
	$6 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$6 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL _ZdlPv($6)
	
.LABEL $label$1
	return $0
}

void .FUNC $2 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	*(($3 = ($7 + ((int_32)$4 * (int_32)[12])))) = (int_64)0
	*(($3 + [8])) = [0]
	$1 = *($1)
	$2 = *($2)
	$8 = ($2 - $1)
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[10]) ){ goto $label$8 }
	*($3) = ($8 << [1])
	$5 = ($3 + [1])
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$9 = (($8 + [16]) & [-16])
	$5 = CALL _Znwj($9)
	*($3) = ($9 | [1])
	*(($4 = ($7 + ((int_32)$4 * (int_32)[12]))) + [8]) = $5
	*($4 + [4]) = $8
	$4 = ((int_32)$6 * (int_32)[12])
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($1)
	$6 = ($6 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$9 }
	$5 = ($5 + $8)
	
.LABEL $label$6
	$8 = ($7 + $4)
	*($5) = [0]
	$5 = ($3 + [12])
	$6 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$12:
	$2 = ($1 + [-4])
	*(($3 + [-4])) = *($2)
	$1 = ($1 + [-12])
	*(($3 = ($3 + [-12]))) = *($1)
	*($1) = (int_64)0
	*($2) = [0]
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$12 }
	$6 = *(($0 + [4]))
	$2 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$2 = $6
	
.LABEL $label$10
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $8
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($6 + [-12])
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($6 + [-4])))
	
.LABEL $label$15
	$6 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($2 == 0) ){ goto $label$16 }
	CALL _ZdlPv($2)
	
.LABEL $label$16
	return (unreachable)
	
.LABEL $label$5
	CALL $112($3)
	(unreachable)
}

int_32 .FUNC $3 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *(($0 + [216]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [220])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [216]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	CALL $4(($0 + [176]))
	CALL $5(($0 + [136]))
	$1 = *(($0 + [96]))
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [100])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$10 }
	CALL _ZdlPv($4)
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$9 }
	$3 = *(($0 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [56]))
	if ( ($1 == 0) ){ goto $label$11 }
	$2 = ($0 + [60])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$13 }
	
.LOOP $label$14:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$15 }
	CALL _ZdlPv($4)
	
.LABEL $label$15
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$14 }
	$3 = *(($0 + [56]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $1
	
.LABEL $label$12
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$11
	return $0
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = ($global$0 - [32])
	$global$0 = $3
	$4 = *($1)
	if ( ($4 & [1]) ){ goto $label$5 }
	$5 = ($1 + [1])
	*($3 + [24]) = $5
	$4 = uint_32($4 >> [1])
	$1 = ($5 + $4)
	*($3 + [16]) = $1
	*($3 + [8]) = $5
	if ( $4 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($1 + [8])
	*($3 + [24]) = $5
	$4 = *($1 + [4])
	$1 = ($5 + $4)
	*($3 + [16]) = $1
	*($3 + [8]) = $5
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = ($2 & [255])
	$7 = ($0 + [8])
	$8 = ($0 + [4])
	$2 = $5
	
.LOOP $label$6:
	if ( ((int_32)*($2) != (int_32)$6) ){ goto $label$12 }
	$1 = *($8)
	if ( ((uint_32)$1 >= (uint_32)*($7)) ){ goto $label$11 }
	*($1) = (int_64)0
	*(($1 + [8])) = [0]
	$9 = ($2 - $5)
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$9 > (uint_32)[10]) ){ goto $label$10 }
	*($1) = ($9 << [1])
	$4 = ($1 + [1])
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$12
	$2 = ($2 + [1])
	*($3 + [8]) = $2
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	goto $label$3 
	
.LABEL $label$11
	CALL $2($0, ($3 + [24]), ($3 + [8]))
	goto $label$7 
	
.LABEL $label$10
	$10 = (($9 + [16]) & [-16])
	$4 = CALL _Znwj($10)
	*($1) = ($10 | [1])
	*($1 + [8]) = $4
	*($1 + [4]) = $9
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = $4
	
.LOOP $label$13:
	*($1) = *($5)
	$1 = ($1 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$13 }
	$4 = ($4 + $9)
	
.LABEL $label$8
	*($4) = [0]
	*($8) = (*($8) + [12])
	
.LABEL $label$7
	$2 = (*($3 + [8]) + [1])
	*($3 + [24]) = $2
	$1 = *($3 + [16])
	$5 = $2
	*($3 + [8]) = $2
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$6 }
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$16 }
	$2 = *($0 + [4])
	if ( ((uint_32)$2 >= (uint_32)*($0 + [8])) ){ goto $label$17 }
	*($2) = (int_64)0
	*(($2 + [8])) = [0]
	$4 = ($1 - $5)
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$15 }
	*($2) = ($4 << [1])
	$6 = ($2 + [1])
	goto $label$14 
	
.LABEL $label$17
	CALL $2($0, ($3 + [24]), ($3 + [16]))
	
.LABEL $label$16
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$15
	$8 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($8)
	*($2) = ($8 | [1])
	*($2 + [8]) = $6
	*($2 + [4]) = $4
	
.LABEL $label$14
	$2 = $6
	
.LOOP $label$18:
	*($2) = *($5)
	$2 = ($2 + [1])
	$5 = ($5 + [1])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$18 }
	*(($6 + $4)) = [0]
	*(($5 = ($0 + [4]))) = (*($5) + [12])
	$global$0 = ($3 + [32])
	return (unreachable)
	
.LABEL $label$2
	CALL $112($1)
	
.LABEL $label$1
	CALL $112($2)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *($0 + [4])
	$6 = *($5)
	*($1) = *($6)
	*(($1 + [8])) = *(($6 + [8]))
	*($1 + [16]) = *(*($5 + [4]))
	$6 = *($5 + [8])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	$6 = *($5 + [12])
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	$7 = *(*($5) + [8])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$8 = $9
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$8 = $9
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $10 ){ goto $label$5 }
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [17407])
	
.LABEL $label$1
	*($1 + [56]) = (int_64)0
	*(($1 + [64])) = $7
	$7 = *(*($5) + [8])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$8 = $9
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$8 = $9
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $10 ){ goto $label$10 }
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	CALL eosio_assert([0], [17407])
	
.LABEL $label$6
	*($1 + [72]) = (int_64)0
	*(($1 + [80])) = $7
	$7 = *(*($5) + [8])
	$8 = (uint_64)$7 >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$8 = $9
	$10 = $6
	$6 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$8 = $9
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$10 = ((int_32)$6 < (int_32)[6])
	$11 = ($6 + [1])
	$6 = $11
	if ( $10 ){ goto $label$15 }
	$6 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	CALL eosio_assert([0], [17407])
	
.LABEL $label$11
	*($1 + [88]) = (int_64)0
	*(($1 + [96])) = $7
	*($1 + [104]) = *(*($5 + [16]))
	*($1 + [112]) = (int_64)0
	$10 = $2
	$6 = ($10 + [-128])
	$global$0 = $6
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($10 + [-8])
	CALL $77($3, $1)
	$8 = (uint_64)*($1 + [8]) >> (uint_64)(int_64)8
	*($1 + [124]) = CALL db_store_i64(*($4 + [8]), (int_64)-3617352132944662528, *(*($0 + [8])), $8), $6, [120])
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$16 }
	*(($4 + [16])) = ((int_64)$8 + (int_64)1)
	
.LABEL $label$16
	$global$0 = ($3 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [120]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [18370])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [18415])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1 + [8])
	if ( (uint_64)(((int_64)*(*(($4 + [-24])) + [8]) ^ (int_64)$6) <= (int_64)256) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((uint_64)((int_64)*(*($9) + [8]) ^ (int_64)$6) >= (uint_64)(int_64)256) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [18465])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	CALL _ZdlPv($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$13:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$14 }
	CALL _ZdlPv($8)
	
.LABEL $label$14
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$13 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*($1 + [124]))
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $17 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [256])
	$global$0 = $5
	*($5 + [208]) = $1
	if ( ((int_64)$1 == (int_64)6138663591134630912) ){ goto $label$1 }
	if ( ((int_64)$1 == (int_64)6138663590285017088) ){ goto $label$1 }
	$6 = *($0)
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$1 }
	if ( ((int_64)$6 != (int_64)$2) ){ goto $label$1 }
	$8 = *($4)
	$7 = CALL $138([16628])
	if ( ((int_32)$7 != (int_32)( *($4 + [4]) ? uint_32($8 >> [1]) : ($8 & [1]) )) ){ goto $label$2 }
	if ( (CALL $117($4, [0], [-1], [16628], $7) == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = [0]
	CALL $18(($5 + [168]), [1], [0])
	CALL eosio_assert(((int_64)*((*(($5 + [188])) + [-16])) == (int_64)$1), [16636])
	$1 = *($5 + [176])
	*($5 + [160]) = [16648]
	*($5 + [164]) = CALL $138([16648])
	*($5 + [8]) = *($5 + [160])
	CALL $19(($5 + [40]), ($5 + [8]))
	if ( ((int_64)$1 != (int_64)-3617168760277827584) ){ goto $label$3 }
	$8 = ((int_64)*($5 + [168]) == (int_64)*($0 + [232]))
	
.LABEL $label$3
	CALL eosio_assert($8, [16673])
	$9 = ($0 + [32])
	$7 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$7:
	$8 = ($7 + [-24])
	$11 = *($8)
	if ( ((int_64)*($11) == (int_64)101) ){ goto $label$6 }
	$7 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$5 }
	if ( ((int_32)*($11 + [16]) == (int_32)$9) ){ goto $label$4 }
	CALL eosio_assert([0], [18073])
	goto $label$4 
	
.LABEL $label$5
	$11 = CALL $9($9, CALL $fimport$7(*($9), *(($0 + [40])), (int_64)7235159550150574080, (int_64)101))
	if ( ((int_32)*($11 + [16]) == (int_32)$9) ){ goto $label$4 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)1), [16706])
	$7 = [0]
	if ( ((uint_64)((int_64)*($3) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$8 }
	$1 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$1 = $2
	$7 = [1]
	$11 = $8
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$1 = $2
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$7 = ((int_32)$8 < (int_32)[6])
	$11 = ($8 + [1])
	$8 = $11
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$8 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [16726])
	$12 = ($0 + [72])
	$1 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$7 = *(($0 + [100]))
	$10 = *(($0 + [96]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$16:
	$8 = ($7 + [-24])
	$11 = *($8)
	if ( ((int_64)(uint_64)*($11 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$15 }
	$7 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$14 }
	if ( ((int_32)*($11 + [120]) == (int_32)$12) ){ goto $label$13 }
	CALL eosio_assert([0], [18073])
	goto $label$13 
	
.LABEL $label$14
	$11 = [0]
	$8 = CALL db_find_i64(*($12), *(($0 + [80])), (int_64)-3617352132944662528, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$13 }
	$11 = CALL $12($12, $8)
	if ( ((int_32)*($11 + [120]) == (int_32)$12) ){ goto $label$13 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$13
	$13 = [0]
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [16743])
	CALL $20(($5 + [144]), *($11 + [16]), (int_64)-4155580856058716144, (uint_64)*($11 + [8]) >> (uint_64)(int_64)8))
	CALL eosio_assert(((int_64)*($5 + [144]) > (int_64)*($11)), [16779])
	CALL eosio_assert(((int_64)*($3) >= (int_64)*($11 + [24])), [16809])
	CALL eosio_assert(((int_64)*($3) <= (int_64)*($11 + [40])), [16839])
	$1 = (uint_64)*(($3 + [8])) >> (uint_64)(int_64)8)
	$7 = *(($0 + [100]))
	$11 = *(($0 + [96]))
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$19 }
	
.LOOP $label$21:
	$8 = ($7 + [-24])
	$10 = *($8)
	if ( ((int_64)(uint_64)*($10 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$20 }
	$7 = $8
	if ( ((int_32)$11 != (int_32)$8) ){ goto $label$21 }
	goto $label$19 
	
.LABEL $label$20
	if ( ((int_32)$11 == (int_32)$7) ){ goto $label$19 }
	if ( ((int_32)*($10 + [120]) == (int_32)$12) ){ goto $label$22 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$22
	$1 = *($0)
	*($5 + [40]) = $3
	$13 = $10
	if ( $13 ){ goto $label$17 }
	goto $label$18 
	
.LABEL $label$19
	$8 = CALL db_find_i64(*(($0 + [72])), *(($0 + [80])), (int_64)-3617352132944662528, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$23 }
	$13 = CALL $12($12, $8)
	if ( ((int_32)*($13 + [120]) == (int_32)$12) ){ goto $label$23 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$23
	$1 = *($0)
	*($5 + [40]) = $3
	if ( $13 ){ goto $label$17 }
	
.LABEL $label$18
	CALL eosio_assert([0], [17634])
	
.LABEL $label$17
	CALL $21($12, $13, $1, ($5 + [40]))
	$8 = CALL $113(($5 + [96]), $4)
	CALL $22(($5 + [112]), $0, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$24
	$7 = *(($0 + [60]))
	$10 = *(($0 + [56]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$26 }
	
.LOOP $label$28:
	$8 = ($7 + [-24])
	$11 = *($8)
	if ( ((int_64)*($11) == (int_64)102) ){ goto $label$27 }
	$7 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$26 }
	if ( ((int_32)*($11 + [16]) == (int_32)$9) ){ goto $label$25 }
	CALL eosio_assert([0], [18073])
	goto $label$25 
	
.LABEL $label$26
	$11 = CALL $9($9, CALL $fimport$7(*(($0 + [32])), *(($0 + [40])), (int_64)7235159550150574080, (int_64)102))
	if ( ((int_32)*($11 + [16]) == (int_32)$9) ){ goto $label$25 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$25
	CALL eosio_assert(((int_64)*($11 + [8]) == (int_64)*($5 + [136])), [16871])
	$1 = *($5 + [128])
	if ( (int_64)($1 == 0) ){ goto $label$30 }
	CALL eosio_assert(((int_64)*($5 + [208]) != (int_64)$1), [16882])
	CALL eosio_assert(CALL eosio_assert1($1), [16905])
	goto $label$29 
	
.LABEL $label$30
	$1 = (int_64)-4155580855754841072
	
.LABEL $label$29
	*(($5 + [64])) = *(($3 + [8]))
	*($5 + [48]) = $1
	*($5 + [40]) = *($5 + [208])
	*($5 + [56]) = *($3)
	$9 = CALL $113(($5 + [72]), ($5 + [112]))
	if ( (*([0] + [8208]) == 0) ){ goto $label$32 }
	$1 = *([0] + [8200])
	goto $label$31 
	
.LABEL $label$32
	$1 = CALL current_time()
	*([0] + [8208]) = [1]
	*([0] + [8200]) = $1
	
.LABEL $label$31
	*($5 + [88]) = $1
	$4 = ($0 + [112])
	$1 = *(($5 + [136]))
	$7 = *(($0 + [140]))
	$10 = *(($0 + [136]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$36 }
	
.LOOP $label$38:
	$8 = ($7 + [-24])
	$11 = *($8)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$37 }
	$7 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$36 }
	if ( ((int_32)*($11 + [20]) == (int_32)$4) ){ goto $label$39 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$39
	if ( $11 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$8 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)4229865212519383040, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$34 }
	$11 = CALL $23($4, $8)
	if ( ((int_32)*($11 + [20]) == (int_32)$4) ){ goto $label$35 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$35
	$1 = *($0)
	*($5 + [224]) = ($5 + [40])
	CALL $24($4, $11, $1, ($5 + [224]))
	goto $label$33 
	
.LABEL $label$34
	*($5 + [32]) = [0]
	*($5 + [24]) = (int_64)0
	CALL $25(($5 + [24]), ($5 + [40]))
	$1 = *($0)
	*($5 + [20]) = ($5 + [24])
	*($5 + [16]) = ($5 + [112])
	*($5 + [248]) = $1
	if ( ((int_64)*(($0 + [112])) == (int_64)CALL current_receiver()) ){ goto $label$40 }
	CALL eosio_assert([0], [18255])
	
.LABEL $label$40
	*($5 + [224]) = $4
	*($5 + [228]) = ($5 + [16])
	*($5 + [232]) = ($5 + [248])
	*(($8 = CALL _Znwj([32])) + [16]) = [0]
	*($8 + [8 align=4]) = (int_64)0
	*($8 + [20]) = $4
	CALL $26(($5 + [224]), $8)
	*($5 + [240]) = $8
	$1 = *($8)
	*($5 + [224]) = $1
	$11 = *($8 + [24])
	*($5 + [220]) = $11
	$10 = ($0 + [140])
	$7 = *($10)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [144]))) ){ goto $label$43 }
	*($7 + [8]) = $1
	*($7 + [16]) = $11
	*($5 + [240]) = [0]
	*($7) = $8
	*($10) = ($7 + [24])
	$10 = *($5 + [240])
	*($5 + [240]) = [0]
	if ( $10 ){ goto $label$42 }
	goto $label$41 
	
.LABEL $label$43
	CALL $27(($0 + [136]), ($5 + [240]), ($5 + [224]), ($5 + [220]))
	$10 = *($5 + [240])
	*($5 + [240]) = [0]
	if ( ($10 == 0) ){ goto $label$41 }
	
.LABEL $label$42
	$11 = *($10 + [8])
	if ( ($11 == 0) ){ goto $label$44 }
	$4 = ($10 + [12])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$46 }
	
.LOOP $label$47:
	$7 = ($8 + [-56])
	if ( ((*(($8 + [-24])) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($8 + [-16])))
	
.LABEL $label$48
	$8 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$47 }
	$8 = *(($10 + [8]))
	goto $label$45 
	
.LABEL $label$46
	$8 = $11
	
.LABEL $label$45
	*($4) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$44
	CALL _ZdlPv($10)
	
.LABEL $label$41
	$11 = *($5 + [24])
	if ( ($11 == 0) ){ goto $label$33 }
	$8 = *($5 + [28])
	if ( ((int_32)$8 == (int_32)$11) ){ goto $label$50 }
	
.LOOP $label$51:
	$7 = ($8 + [-56])
	if ( ((*(($8 + [-24])) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*(($8 + [-16])))
	
.LABEL $label$52
	$8 = $7
	if ( ((int_32)$11 != (int_32)$7) ){ goto $label$51 }
	$8 = *($5 + [24])
	goto $label$49 
	
.LABEL $label$50
	$8 = $11
	
.LABEL $label$49
	*($5 + [28]) = $11
	CALL _ZdlPv($8)
	
.LABEL $label$33
	$8 = CALL $138([8192])
	if ( ($8 <= [8]) ){ goto $label$56 }
	CALL eosio_assert([0], [17260])
	goto $label$55 
	
.LABEL $label$56
	if ( ($8 == 0) ){ goto $label$54 }
	
.LABEL $label$55
	$1 = (int_64)0
	
.LOOP $label$57:
	$7 = *(($8 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$58 }
	CALL eosio_assert([0], [17305])
	
.LABEL $label$58
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$57 }
	$1 = ((int_64)((int_64)$1 << (int_64)8) | (int_64)4)
	goto $label$53 
	
.LABEL $label$54
	$1 = (int_64)4
	
.LABEL $label$53
	if ( ((int_64)*(($3 + [8])) != (int_64)$1) ){ goto $label$65 }
	$4 = ($0 + [192])
	$1 = *($5 + [208])
	$7 = *(($0 + [220]))
	$10 = *(($0 + [216]))
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$68 }
	
.LOOP $label$70:
	$8 = ($7 + [-24])
	$11 = *($8)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$69 }
	$7 = $8
	if ( ((int_32)$10 != (int_32)$8) ){ goto $label$70 }
	goto $label$68 
	
.LABEL $label$69
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$68 }
	if ( ((int_32)*($11 + [52]) == (int_32)$4) ){ goto $label$71 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$71
	if ( $11 ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	$8 = CALL db_find_i64(*($4), *(($0 + [200])), (int_64)-6030912129794572288, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$66 }
	$11 = CALL $28($4, $8)
	if ( ((int_32)*($11 + [52]) == (int_32)$4) ){ goto $label$67 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$67
	$1 = *($0)
	*($5 + [224]) = $3
	CALL $29($4, $11, $1, ($5 + [224]))
	$8 = [1]
	if ( ((*($9) & [1]) == 0) ){ goto $label$64 }
	goto $label$63 
	
.LABEL $label$66
	$1 = *($0)
	*($5 + [252]) = $3
	*($5 + [248]) = ($5 + [208])
	*($5 + [24]) = $1
	if ( ((int_64)*(($0 + [192])) == (int_64)CALL current_receiver()) ){ goto $label$72 }
	CALL eosio_assert([0], [18255])
	
.LABEL $label$72
	*($5 + [224]) = $4
	*($5 + [228]) = ($5 + [248])
	*($5 + [232]) = ($5 + [24])
	*(($8 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($8) = (int_64)0
	*($8 + [24]) = (int_64)0
	*($8 + [32]) = (int_64)0
	*($8 + [40]) = (int_64)0
	*($8 + [48]) = [0]
	*($8 + [52]) = $4
	CALL $30(($5 + [224]), $8)
	*($5 + [16]) = $8
	$1 = *($8)
	*($5 + [224]) = $1
	$11 = *($8 + [56])
	*($5 + [240]) = $11
	$3 = ($0 + [220])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [224]))) ){ goto $label$74 }
	*($7 + [8]) = $1
	*($7 + [16]) = $11
	*($5 + [16]) = [0]
	*($7) = $8
	*($3) = ($7 + [24])
	$8 = *($5 + [16])
	*($5 + [16]) = [0]
	if ( ($8 == 0) ){ goto $label$65 }
	goto $label$73 
	
.LABEL $label$74
	CALL $31(($0 + [216]), ($5 + [16]), ($5 + [224]), ($5 + [240]))
	$8 = *($5 + [16])
	*($5 + [16]) = [0]
	if ( ($8 == 0) ){ goto $label$65 }
	
.LABEL $label$73
	CALL _ZdlPv($8)
	
.LABEL $label$65
	$8 = [1]
	if ( (*($9) & [1]) ){ goto $label$63 }
	
.LABEL $label$64
	if ( (*($5 + [112]) & $8) ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	CALL _ZdlPv(*(($5 + [80])))
	if ( ((*($5 + [112]) & $8) == 0) ){ goto $label$61 }
	
.LABEL $label$62
	CALL _ZdlPv(*($5 + [120]))
	$8 = *($5 + [196])
	if ( $8 ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$61
	$8 = *($5 + [196])
	if ( ($8 == 0) ){ goto $label$59 }
	
.LABEL $label$60
	*(($5 + [200])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$59
	$8 = *($5 + [184])
	if ( ($8 == 0) ){ goto $label$1 }
	*(($5 + [188])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$1
	$global$0 = ($5 + [256])
}

void .FUNC $10 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	*($1 + [8]) = *(*($3))
	$6 = *($1)
	$4 = $4
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL memcpy(($4 + [-8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $11 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18124])
	
.LABEL $label$5
	$4 = CALL $141($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([136])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = (int_64)0
	*($5 + [56]) = (int_64)0
	*($5 + [64]) = (int_64)0
	*($5 + [72]) = (int_64)0
	*($5 + [80]) = (int_64)0
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [120]) = $0
	CALL $83(($3 + [32]), $5)
	*($5 + [124]) = $1
	*($3 + [24]) = $5
	$7 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8
	*($3 + [16]) = $7)
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $16(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $144($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $13 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [120]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	$6 = *($3)
	*($1) = *($6)
	$7 = *($1 + [8])
	*($1 + [8]) = *(($6 + [8]))
	*($1 + [16]) = *(*($3 + [4]))
	$6 = *($3 + [8])
	*(($1 + [32])) = *(($6 + [8]))
	*($1 + [24]) = *($6)
	$6 = *($3 + [12])
	*($1 + [40]) = *($6)
	*(($1 + [48])) = *(($6 + [8]))
	*($1 + [104]) = *(*($3 + [16]))
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)$7) == (int_64)(uint_64)*($1 + [8]) >> (uint_64)(int_64)8)) ){ goto $label$3 }
	CALL eosio_assert([0], [17766])
	
.LABEL $label$3
	$4 = $4
	$3 = ($4 + [-128])
	$global$0 = $3
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($4 + [-8])
	CALL $77($5, $1)
	CALL db_update_i64(*($1 + [124]), $2, $3, [120])
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ((int_64)$7 + (int_64)1)
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [17468])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $37($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [17472])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ($global$0 - [16])
	$4 = $3
	$global$0 = $3
	$5 = CALL get_action($1, $2, [0], [0])
	if ( ((int_32)$5 <= (int_32)[0]) ){ goto $label$5 }
	if ( ($5 <= [513]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL eosio_assert([0], [17427])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$3 }
	
.LABEL $label$4
	$3 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $3
	if ( ((int_32)$5 == (int_32)CALL get_action($1, $2, $3, $5)) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$3
	$3 = CALL $141($5)
	if ( ((int_32)$5 == (int_32)CALL get_action($1, $2, $3, $5)) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [17450])
	
.LABEL $label$1
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*($4 + [4]) = $3
	*($4) = $3
	*($4 + [8]) = ($3 + $5)
	CALL $32($4, $0)
	$global$0 = ($4 + [16])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0) = (int_64)0
	$2 = *($1 + [4])
	if ( ($2 <= [14]) ){ goto $label$5 }
	CALL eosio_assert([0], [17477])
	$3 = [12]
	goto $label$4 
	
.LABEL $label$5
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = ( $2 ? [12] : ($2 <= [12]) )
	if ( ($3 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = *($0)
	$5 = *($1)
	$6 = [0]
	
.LOOP $label$6:
	$4 = ((int_64)$4 << (int_64)5)
	*($0) = $4
	$7 = *(($5 + $6))
	if ( ((int_32)$7 != (int_32)[46]) ){ goto $label$8 }
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)(($7 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$9 }
	$7 = ($7 + [-48])
	goto $label$7 
	
.LABEL $label$9
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$7 = ($7 + [-91])
	goto $label$7 
	
.LABEL $label$10
	$7 = [0]
	CALL eosio_assert([0], [17582])
	$4 = *($0)
	
.LABEL $label$7
	$4 = ((int_64)$4 | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)255))
	*($0) = $4
	$6 = ($6 + [1])
	if ( ($6 <= $3) ){ goto $label$6 }
	goto $label$2 
	
.LABEL $label$3
	$4 = *($0)
	$3 = [0]
	
.LABEL $label$2
	*($0) = ((int_64)$4 << (int_64)(CASTING uint_64)(uint_32 (((int_32)([12] - $3) * (int_32)[5]) + [4])))
	if ( ((int_32)$2 != (int_32)[13]) ){ goto $label$1 }
	$4 = (int_64)0
	$6 = *(*($1) + [12])
	if ( ((int_32)$6 == (int_32)[46]) ){ goto $label$11 }
	if ( ((uint_32)(($6 + [-49]) & [255]) > (uint_32)[4]) ){ goto $label$12 }
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($6 + [-48])) & (int_64)255)
	goto $label$11 
	
.LABEL $label$12
	if ( ((uint_32)(($6 + [-97]) & [255]) >= (uint_32)[26]) ){ goto $label$13 }
	$6 = ($6 + [-91])
	$4 = ((int_64)(CASTING uint_64)(uint_32 $6) & (int_64)255)
	if ( (($6 & [255]) <= [16]) ){ goto $label$11 }
	CALL eosio_assert([0], [17515])
	goto $label$11 
	
.LABEL $label$13
	CALL eosio_assert([0], [17582])
	
.LABEL $label$11
	*($0) = ((int_64)*($0) | (int_64)$4)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0)
	*($0) = ($2 + [10])
	$2 = ($2 + [11])
	$3 = *($1 + [12])
	
.LOOP $label$1:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$1 }
	*($0) = $2
	$3 = *($1 + [20])
	
.LOOP $label$2:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$2 }
	*($0) = $2
	$5 = *($1 + [24])
	$4 = *(($1 + [28]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$3:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$3 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$6:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$7 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$7
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$8:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$8 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	*($0) = $2
	
.LABEL $label$4
	$5 = *($1 + [36])
	$4 = *(($1 + [40]))
	$3 = (CASTING uint_64)(uint_32 ((int_32)($4 - $5) / (int_32)[40]))
	
.LOOP $label$9:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$9 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$2 = ($2 + [16])
	$7 = *($5 + [16])
	$6 = *(($5 + [20]))
	$8 = ($6 - $7)
	$3 = (CASTING uint_64)(uint_32 int_32($8 >> [4]))
	
.LOOP $label$12:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$13 }
	$2 = (($8 & [-16]) + $2)
	
.LABEL $label$13
	$7 = *($5 + [28])
	$6 = *(($5 + [32]))
	$2 = (($2 + $6) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$14:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$14 }
	$5 = ($5 + [40])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$11 }
	*($0) = $2
	
.LABEL $label$10
	$5 = *($1 + [48])
	$8 = *(($1 + [52]))
	$3 = (CASTING uint_64)(uint_32 int_32(($8 - $5) >> [4]))
	
.LOOP $label$15:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$15 }
	*($0) = $2
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$16 }
	
.LOOP $label$17:
	$7 = *($5 + [4])
	$6 = *(($5 + [8]))
	$2 = ((($2 + $6) + [2]) - $7)
	$3 = (CASTING uint_64)(uint_32 ($6 - $7))
	
.LOOP $label$18:
	$2 = ($2 + [1])
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	if ( ((int_64)$3) != (int_64)0) ){ goto $label$18 }
	$5 = ($5 + [16])
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$17 }
	*($0) = $2
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $80($0, $1)
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [28])) - *($1 + [24])) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [14]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *(($1 + [28]))
	$6 = *(($1 + [24]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $49($0, $6)
	$6 = ($6 + [40])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$4 }
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [40])) - *($1 + [36])) / (int_32)[40]))
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$5:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [17905])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$5 }
	$6 = *(($1 + [40]))
	$4 = *(($1 + [36]))
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $49($0, $4)
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = CALL $81($0, ($1 + [48]))
	$global$0 = ($2 + [16])
	return $4
}

void .FUNC $50 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [120]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [96]))) ){ goto $label$3 }
	CALL eosio_assert([0], [17963])
	
.LABEL $label$3
	$7 = (int_64)
	*($1 + [88]) = $7(*($1 + [88]) - *($3)))
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [18011])
	$7 = *(($1 + [88]))
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [18033])
	
.LABEL $label$5
	if ( ((int_64)$6 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [17766])
	
.LABEL $label$6
	$3 = $4
	$4 = ($3 + [-128])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-8])
	CALL $77($5, $1)
	CALL db_update_i64(*($1 + [124]), $2, $4, [120])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $51 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$7 = ($global$0 - [176])
	$global$0 = $7
	*($7 + [160]) = $1
	*($7 + [152]) = [17068]
	*($7 + [156]) = CALL $138([17068])
	*($7) = *($7 + [152])
	CALL $19(($7 + [48]), $7)
	CALL require_auth2((int_64)-4155580689349431776, (int_64)4147959691609112576)
	$8 = ($0 + [32])
	$10 = *(($0 + [60]))
	$9 = *(($0 + [56]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	
.LOOP $label$4:
	$11 = ($10 + [-24])
	$12 = *($11)
	if ( ((int_64)*($12) == (int_64)102) ){ goto $label$3 }
	$10 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$2 }
	if ( ((int_32)*($12 + [16]) == (int_32)$8) ){ goto $label$1 }
	CALL eosio_assert([0], [18073])
	goto $label$1 
	
.LABEL $label$2
	$12 = [0]
	$11 = CALL db_find_i64(*($8), *(($0 + [40])), (int_64)7235159550150574080, (int_64)102)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$1 }
	$12 = CALL $9($8, $11)
	if ( ((int_32)*($12 + [16]) == (int_32)$8) ){ goto $label$1 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$1
	CALL eosio_assert(((int_64)*($12 + [8]) == (int_64)*($7 + [160])), [17077])
	$1 = *($0)
	*($7 + [48]) = ($7 + [160])
	if ( $12 ){ goto $label$5 }
	CALL eosio_assert([0], [17634])
	
.LABEL $label$5
	CALL $52($8, $12, $1, ($7 + [48]))
	$8 = ($0 + [112])
	$1 = *($7 + [160])
	$12 = *(($0 + [140]))
	$9 = *(($0 + [136]))
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$10 }
	
.LOOP $label$12:
	$11 = ($12 + [-24])
	$10 = *($11)
	if ( ((int_64)*($10) == (int_64)$1) ){ goto $label$11 }
	$12 = $11
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$10 }
	if ( ((int_32)*($10 + [20]) == (int_32)$8) ){ goto $label$9 }
	CALL eosio_assert([0], [18073])
	goto $label$9 
	
.LABEL $label$10
	$11 = CALL db_find_i64(*($8), *(($0 + [120])), (int_64)4229865212519383040, $1)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $23($8, $11)
	if ( ((int_32)*($10 + [20]) == (int_32)$8) ){ goto $label$9 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$9
	*($7 + [120]) = [0]
	*($7 + [112]) = (int_64)0
	$11 = (*($2 + [4]) - *($2))
	if ( ($11 == 0) ){ goto $label$13 }
	$12 = int_32($11 >> [2])
	if ( ((uint_32)$12 >= (uint_32)[1073741824]) ){ goto $label$7 }
	$11 = CALL _Znwj($11)
	*(($7 + [120])) = ($11 + ($12 << [2]))
	*($7 + [112]) = $11
	*($7 + [116]) = $11
	$9 = *($2)
	$12 = (*(($2 + [4])) - $9)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$13 }
	CALL memcpy($11, $9, $12)
	*($7 + [116]) = (*($7 + [116]) + $12)
	
.LABEL $label$13
	*(($7 + [132])) = [0]
	*($7 + [124 align=4]) = (int_64)0
	$11 = (*($3 + [4]) - *($3))
	if ( ($11 == 0) ){ goto $label$14 }
	$9 = int_32($11 >> [2])
	if ( ((uint_32)$9 >= (uint_32)[1073741824]) ){ goto $label$6 }
	$11 = CALL _Znwj($11)
	*(($7 + [124])) = $11
	*(($12 = ($7 + [128]))) = $11
	*(($7 + [132])) = ($11 + ($9 << [2]))
	$8 = *($3)
	$9 = (*(($3 + [4])) - $8)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$14 }
	CALL memcpy($11, $8, $9)
	*($12) = (*($12) + $9)
	
.LABEL $label$14
	*($7 + [137]) = $5
	*($7 + [136]) = $4
	$5 = CALL $113(($7 + [140]), $6)
	$1 = *($0)
	*($7 + [12]) = ($7 + [112])
	*($7 + [8]) = ($7 + [160])
	*($7 + [32]) = $1
	$12 = ($0 + [152])
	if ( ((int_64)*($0 + [152]) == (int_64)CALL current_receiver()) ){ goto $label$15 }
	CALL eosio_assert([0], [18255])
	
.LABEL $label$15
	*($7 + [48]) = $12
	*($7 + [52]) = ($7 + [8])
	*($7 + [56]) = ($7 + [32])
	*(($11 = CALL _Znwj([72])) + [16 align=4]) = (int_64)0
	*($11 + [24 align=4]) = (int_64)0
	*($11 + [32 align=4]) = (int_64)0
	*($11 + [44 align=4]) = (int_64)0
	*($11 + [52]) = [0]
	*($11 + [56]) = $12
	CALL $53(($7 + [48]), $11)
	*($7 + [24]) = $11
	$1 = *($11)
	*($7 + [48]) = $1
	$9 = *($11 + [60])
	*($7 + [172]) = $9
	$8 = ($0 + [180])
	$12 = *($8)
	if ( ((uint_32)$12 >= (uint_32)*(($0 + [184]))) ){ goto $label$18 }
	*($12 + [8]) = $1
	*($12 + [16]) = $9
	*($7 + [24]) = [0]
	*($12) = $11
	*($8) = ($12 + [24])
	$11 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( $11 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL $54(($0 + [176]), ($7 + [24]), ($7 + [48]), ($7 + [172]))
	$11 = *($7 + [24])
	*($7 + [24]) = [0]
	if ( ($11 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	if ( ((*(($11 + [44])) & [1]) == 0) ){ goto $label$19 }
	CALL _ZdlPv(*(($11 + [52])))
	
.LABEL $label$19
	$12 = *(($11 + [28]))
	if ( ($12 == 0) ){ goto $label$20 }
	*(($11 + [32])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$20
	$12 = *($11 + [16])
	if ( ($12 == 0) ){ goto $label$21 }
	*(($11 + [20])) = $12
	CALL _ZdlPv($12)
	
.LABEL $label$21
	CALL _ZdlPv($11)
	
.LABEL $label$16
	$9 = ($10 + [12])
	if ( ((int_32)*($9) == (int_32)*($10 + [8])) ){ goto $label$22 }
	$11 = ($7 + [84])
	$8 = ($7 + [64])
	$12 = ($7 + [68])
	$2 = ($7 + [76])
	$3 = ($7 + [92])
	$4 = ($7 + [100])
	$1 = (int_64)0
	
.LOOP $label$23:
	$13 = CALL current_time()
	*((($7 + [48]) + [12])) = [0]
	*($8) = [0]
	*($12) = (int_64)0
	*($2) = (int_64)0
	*($11) = (int_64)0
	*($3) = (int_64)0
	*($4) = (int_64)0
	*($7 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$13 / (uint_64)(int_64)1000000)) + [60])
	*((($7 + [32]) + [8])) = (int_64)3617214756542218240
	*($7 + [32]) = *($0)
	*($7 + [24]) = (int_64)-6215964313320947712
	*((($7 + [8]) + [8])) = $1
	*($7 + [8]) = *($7 + [160])
	CALL $55($11, ($7 + [32]), $0, ($7 + [24]), ($7 + [8]))
	$13 = *($0)
	$14 = *($7 + [160])
	*($12) = [1]
	*($7 + [40]) = $14
	*($7 + [32]) = $1
	CALL $56(($7 + [48]), ($7 + [32]), $13, [0])
	CALL $57(($7 + [48]))
	$1 = ((int_64)$1 + (int_64)1)
	if ( (uint_64)($1 <= (CASTING uint_64)(uint_32 ((int_32)(*($9) - *(($10 + [8]))) / (int_32)[56]))) ){ goto $label$23 }
	
.LABEL $label$22
	if ( ((*($5) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($7 + [148])))
	
.LABEL $label$24
	$0 = *($7 + [124])
	if ( ($0 == 0) ){ goto $label$25 }
	*(($7 + [128])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$25
	$0 = *($7 + [112])
	if ( ($0 == 0) ){ goto $label$8 }
	*($7 + [116]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$global$0 = ($7 + [176])
	return (unreachable)
	
.LABEL $label$7
	CALL $124(($7 + [112]))
	
.LABEL $label$6
	CALL $124(($7 + [124]))
	(unreachable)
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = $global$0
	$5 = $4
	if ( ((int_32)*($1 + [16]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	*($1 + [8]) = ((int_64)*(*($3)) + (int_64)1)
	$6 = *($1)
	$4 = $4
	$3 = ($4 + [-16])
	$global$0 = $3
	CALL memcpy($3, $1, [8])
	CALL memcpy(($4 + [-8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $3, [16])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$3 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = $5
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$4 = *(($4 + [4]))
	$6 = ($1 + [16])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$2 }
	CALL $99($6, *($4), *($4 + [4]))
	$7 = ($1 + [28])
	CALL $99($7, *($4 + [12]), *(($4 + [16])))
	goto $label$1 
	
.LABEL $label$2
	$7 = ($1 + [28])
	
.LABEL $label$1
	*(($8 = ($1 + [40]))) = *($4 + [24])
	$9 = ($1 + [44])
	CALL $114($9, ($4 + [28]))
	*($1 + [8]) = CALL current_time()
	*($3 + [16]) = [16]
	*($3) = ($3 + [16])
	*($3 + [28]) = $7
	*($3 + [24]) = $6
	*($3 + [32]) = $8
	$10 = ($1 + [41])
	*($3 + [36]) = $10
	*($3 + [40]) = $9
	CALL $100(($3 + [24]), $3)
	$11 = *($3 + [16])
	if ( ($11 <= [513]) ){ goto $label$4 }
	$4 = CALL $141($11)
	goto $label$3 
	
.LABEL $label$4
	$4 = ($2 - (($11 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$3
	*($3 + [4]) = $4
	*($3) = $4
	$12 = ($4 + $11)
	*($3 + [8]) = $12
	$2 = $4
	if ( ((int_32)$11 > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17905])
	$12 = *(($3 + [8]))
	$2 = *($3 + [4])
	
.LABEL $label$5
	$13 = ($1 + [8])
	CALL memcpy($2, $1, [8])
	$2 = ($2 + [8])
	*($3 + [4]) = $2
	if ( ((int_32)($12 - $2) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17905])
	$2 = *($3 + [4])
	
.LABEL $label$6
	CALL memcpy($2, $13, [8])
	*($3 + [4]) = ($2 + [8])
	*($3 + [16]) = $3
	*($3 + [28]) = $7
	*($3 + [24]) = $6
	*($3 + [32]) = $8
	*($3 + [36]) = $10
	*($3 + [40]) = $9
	CALL $101(($3 + [24]), ($3 + [16]))
	$14 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)7035937633859534848, *(*($0 + [8])), $14, $4, $11)
	if ( ((uint_32)$11 >= (uint_32)[513]) ){ goto $label$9 }
	if ( ((uint_64)$14 >= (uint_64)*($5 + [16])) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $144($4)
	if ( (uint_64)($14 <= *($5 + [16])) ){ goto $label$7 }
	
.LABEL $label$8
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$14 + (int_64)1) : ((uint_64)$14 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$7
	$global$0 = ($3 + [48])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[24])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[178956971]) ){ goto $label$2 }
	$8 = ($0 + [8])
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[24])
	if ( ((uint_32)$5 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($4 + [24])) = $8
	$8 = [0]
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$5 = ($5 << [1])
	$5 = ( $7 ? $5 : ($5 <= $7) )
	if ( ($5 == 0) ){ goto $label$3 }
	$8 = $5
	goto $label$4 
	
.LABEL $label$5
	*(($4 + [24])) = $8
	*($4 + [20]) = [0]
	$9 = ($4 + [20])
	$8 = [178956970]
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$7 = *($1)
	*($1) = [0]
	*($4 + [8]) = $5
	*(($4 + [20])) = ($5 + ((int_32)$8 * (int_32)[24]))
	*(($5 = ($5 + ((int_32)$6 * (int_32)[24])))) = $7
	*($5 + [8]) = *($2)
	*($5 + [16]) = *($3)
	*($4 + [12]) = $5
	$1 = ($5 + [24])
	*($4 + [16]) = $1
	$3 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *($4 + [12])
	
.LOOP $label$8:
	$1 = ($5 + [-24])
	$2 = *($1)
	*($1) = [0]
	*(($8 + [-24])) = $2
	*(($8 + [-8])) = *(($5 + [-8]))
	*(($8 + [-16])) = *(($5 + [-16]))
	$8 = (*($4 + [12]) + [-24])
	*($4 + [12]) = $8
	$5 = $1
	if ( ((int_32)$3 != (int_32)$1) ){ goto $label$8 }
	$5 = *(($0 + [4]))
	$3 = *($0)
	$1 = *(($4 + [16]))
	goto $label$6 
	
.LABEL $label$7
	$8 = *($4 + [12])
	
.LABEL $label$6
	*($0) = $8
	*(($0 + [4])) = $1
	*((($4 + [8]) + [8])) = $5
	*($4 + [12]) = $3
	$5 = ($0 + [8])
	$8 = *($5)
	*($5) = *($9)
	*($9) = $8
	*($4 + [8]) = $3
	CALL $97(($4 + [8]))
	$global$0 = ($4 + [32])
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	float_64 $24
	$3 = ($global$0 - [192])
	$global$0 = $3
	CALL require_auth(*($0))
	$4 = ($0 + [152])
	$6 = *(($0 + [180]))
	$5 = *(($0 + [176]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*($8 + [56]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [18073])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [160])), (int_64)7035937633859534848, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $35($4, $7)
	if ( ((int_32)*($8 + [56]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$1
	$9 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [16971])
	$10 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$11 = *($7)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	if ( ((int_32)*($11 + [20]) == (int_32)$10) ){ goto $label$9 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$9
	$9 = $11
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL db_find_i64(*($10), *(($0 + [120])), (int_64)4229865212519383040, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $23($10, $7)
	if ( ((int_32)*($9 + [20]) == (int_32)$10) ){ goto $label$5 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$5
	$12 = [0]
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [16996])
	$13 = ($0 + [72])
	$11 = *($9 + [8])
	$14 = (uint_64)*(($11 + [24])) >> (uint_64)(int_64)8)
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$11 }
	
.LOOP $label$13:
	$7 = ($6 + [-24])
	$15 = *($7)
	if ( ((int_64)(uint_64)*($15 + [8]) >> (uint_64)(int_64)8) == (int_64)$14) ){ goto $label$12 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$11 }
	if ( ((int_32)*($15 + [120]) == (int_32)$13) ){ goto $label$14 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$14
	$12 = $15
	goto $label$10 
	
.LABEL $label$11
	$7 = CALL db_find_i64(*($13), *(($0 + [80])), (int_64)-3617352132944662528, $14)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$10 }
	$12 = CALL $12($13, $7)
	if ( ((int_32)*($12 + [120]) == (int_32)$13) ){ goto $label$10 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$10
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [17020])
	$14 = *($0)
	$16 = *($12 + [16])
	*(($3 + [88])) = [0]
	*($3 + [80]) = (int_64)0
	$7 = CALL $138([17045])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$18 }
	$15 = ($11 + [16])
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$21 }
	*($3 + [80]) = ($7 << [1])
	$6 = (($3 + [80]) | [1])
	if ( $7 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$5 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [80]) = ($5 | [1])
	*($3 + [88]) = $6
	*($3 + [84]) = $7
	
.LABEL $label$20
	CALL memcpy($6, [17045], $7)
	
.LABEL $label$19
	*(($6 + $7)) = [0]
	*(($6 = (($3 + [96]) + [8]))) = *(($15 + [8]))
	*($3 + [96]) = *($15)
	$5 = *($3 + [88])
	*($3 + [88]) = [0]
	$17 = *($3 + [80])
	*($3 + [80]) = (int_64)0
	$18 = *($0)
	*(($7 = CALL _Znwj([16]))) = $14
	*($7 + [8]) = (int_64)3617214756542218240
	*(($19 = ($3 + [184]))) = $5
	*(($3 + [168])) = *($6)
	*($3 + [40]) = $7
	*($3 + [144]) = $18
	*($3 + [152]) = (int_64)-4155580856058716144
	*($3 + [176]) = $17
	$7 = ($7 + [16])
	*($3 + [48]) = $7
	*($3 + [44]) = $7
	*($3 + [160]) = *($3 + [96])
	CALL $36($16, (int_64)-3617168760277827584, ($3 + [40]), ($3 + [144]))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($19))
	
.LABEL $label$22
	$7 = *($3 + [40])
	if ( ($7 == 0) ){ goto $label$23 }
	*($3 + [44]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$23
	if ( ((*($3 + [80]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($3 + [88])))
	
.LABEL $label$24
	$14 = *(($11 + [24]))
	*($3 + [88]) = $14
	*($3 + [80]) = (int_64)0
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$16 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$28 }
	$14 = $16
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$28
	$14 = $16
	
.LOOP $label$29:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$26 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$29 }
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	CALL eosio_assert([0], [17407])
	
.LABEL $label$25
	$19 = ($11 + [32])
	$7 = ($7 & [1])
	$23 = ($8 + [44])
	$7 = *($23)
	$5 = ($7 & [1])
	$7 = *($11 + [32])
	$21 = uint_32($7 >> [1])
	$20 = ($11 + [36])
	$22 = ( *($20) ? $21 : $5 )
	if ( ((int_32)$22 != (int_32)( *(($8 + [48])) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$30 }
	$7 = ( *(($8 + [52])) ? ($23 + [1]) : $7 )
	$6 = ($19 + [1])
	if ( $5 ){ goto $label$31 }
	if ( ($22 == 0) ){ goto $label$16 }
	$5 = ([0] - $21)
	
.LOOP $label$32:
	if ( ((int_32)*($6) != (int_32)*($7)) ){ goto $label$30 }
	$7 = ($7 + [1])
	$6 = ($6 + [1])
	$5 = ($5 + [1])
	if ( $5 ){ goto $label$32 }
	goto $label$16 
	
.LABEL $label$31
	if ( ($22 == 0) ){ goto $label$16 }
	if ( (CALL $137(( *(($11 + [40])) ? $6 : $5 ), $7, $22) == 0) ){ goto $label$16 }
	
.LABEL $label$30
	$7 = *($19)
	$6 = CALL $138([16947])
	if ( ((int_32)$6 != (int_32)( *($20) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$17 }
	if ( CALL $117($19, [0], [-1], [16947], $6) ){ goto $label$17 }
	if ( *(($8 + [40])) ){ goto $label$16 }
	goto $label$17 
	
.LABEL $label$18
	CALL $112(($3 + [80]))
	
.LABEL $label$17
	$5 = ($11 + [32])
	$7 = *($5)
	$6 = ($11 + [36])
	$20 = CALL $138([16959])
	if ( ((int_32)$20 != (int_32)( *($6) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$33 }
	if ( CALL $117($19, [0], [-1], [16959], $20) ){ goto $label$33 }
	if ( *(($8 + [41])) ){ goto $label$16 }
	
.LABEL $label$33
	$7 = *($5)
	$20 = CALL $138([16929])
	if ( ((int_32)$20 != (int_32)( *($6) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$35 }
	if ( (CALL $117($19, [0], [-1], [16929], $20) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	$20 = [0]
	$7 = *(($11 + [32]))
	$6 = CALL $138([16936])
	if ( ((int_32)$6 != (int_32)( *(($11 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$15 }
	$20 = [0]
	if ( CALL $117($19, [0], [-1], [16936], $6) ){ goto $label$15 }
	
.LABEL $label$34
	$20 = [0]
	$7 = *(($8 + [44]))
	$6 = CALL $138([16943])
	if ( ((int_32)$6 != (int_32)( *(($8 + [48])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$15 }
	$20 = [0]
	if ( CALL $117($23, [0], [-1], [16943], $6) ){ goto $label$15 }
	
.LABEL $label$16
	$17 = CALL $33($3, ($8 + [40]), ($8 + [41]), $23, $19, $15)
	$18 = *(($11 + [24]))
	if ( (uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$36 }
	CALL eosio_assert([0], [17358])
	
.LABEL $label$36
	$14 = (uint_64)$18 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$16 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$14 = $16
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$40
	$14 = $16
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$41 }
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	CALL eosio_assert([0], [17407])
	
.LABEL $label$37
	*(($7 = ($3 + [88]))) = $18
	*($3 + [80]) = $17
	$14 = *($0)
	*(($6 = ($3 + [168]))) = [0]
	$16 = *($11)
	*((($3 + [40]) + [32])) = *($7)
	*($3 + [48]) = $1
	*($3 + [40]) = (int_64)-4155580856058900384
	*($3 + [160]) = (int_64)0
	*($3 + [64]) = *($3 + [80])
	*($3 + [144]) = (int_64)-4155580856058716144
	*($3 + [152]) = (int_64)-6215714484557185024
	*($3 + [56]) = $16
	*(($7 = CALL _Znwj([16]))) = $14
	*($7 + [8]) = (int_64)3617214756542218240
	*(($3 + [180])) = [0]
	$5 = ($7 + [16])
	*($6) = $5
	*(($3 + [164])) = $5
	*($3 + [160]) = $7
	*($3 + [172 align=4]) = (int_64)0
	CALL $37(($3 + [172]), [40])
	$5 = (($3 + [144]) + [32])
	$7 = *($5)
	$6 = *($3 + [172])
	*($3 + [116]) = $6
	*($3 + [112]) = $6
	*($3 + [120]) = $7
	*($3 + [128]) = ($3 + [112])
	*($3 + [136]) = ($3 + [40])
	CALL $38(($3 + [136]), ($3 + [128]))
	CALL $39(($3 + [144]))
	$7 = *($3 + [172])
	if ( ($7 == 0) ){ goto $label$42 }
	*($5) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$42
	$7 = *($3 + [160])
	if ( ($7 == 0) ){ goto $label$43 }
	*(($3 + [164])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$43
	$14 = *($0)
	*($3 + [144]) = ($3 + [80])
	if ( $12 ){ goto $label$44 }
	CALL eosio_assert([0], [17634])
	
.LABEL $label$44
	CALL $40($13, $12, $14, ($3 + [144]))
	$7 = CALL $138([8192])
	if ( ($7 <= [8]) ){ goto $label$48 }
	CALL eosio_assert([0], [17260])
	goto $label$47 
	
.LABEL $label$48
	if ( ($7 == 0) ){ goto $label$46 }
	
.LABEL $label$47
	$14 = (int_64)0
	
.LOOP $label$49:
	$6 = *(($7 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$50 }
	CALL eosio_assert([0], [17305])
	
.LABEL $label$50
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$49 }
	$14 = ((int_64)$14 << (int_64)8)
	goto $label$45 
	
.LABEL $label$46
	$14 = (int_64)0
	
.LABEL $label$45
	$20 = [1]
	if ( ((int_64)*(($11 + [24])) != (int_64)((int_64)$14 | (int_64)4)) ){ goto $label$15 }
	$14 = *($11)
	if ( ((int_64)$14 == (int_64)-4155580622883343856) ){ goto $label$15 }
	$23 = ($0 + [192])
	$6 = *(($0 + [220]))
	$19 = *(($0 + [216]))
	if ( ((int_32)$19 == (int_32)$6) ){ goto $label$53 }
	
.LOOP $label$55:
	$7 = ($6 + [-24])
	$5 = *($7)
	if ( ((int_64)*($5) == (int_64)$14) ){ goto $label$54 }
	$6 = $7
	if ( ((int_32)$19 != (int_32)$7) ){ goto $label$55 }
	goto $label$53 
	
.LABEL $label$54
	if ( ((int_32)$19 == (int_32)$6) ){ goto $label$53 }
	if ( ((int_32)*($5 + [52]) == (int_32)$23) ){ goto $label$56 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$56
	$14 = *($0)
	*($3 + [144]) = ($3 + [80])
	if ( $5 ){ goto $label$51 }
	goto $label$52 
	
.LABEL $label$53
	$7 = CALL db_find_i64(*($23), *(($0 + [200])), (int_64)-6030912129794572288, $14)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$57 }
	$5 = CALL $28($23, $7)
	if ( ((int_32)*($5 + [52]) == (int_32)$23) ){ goto $label$58 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$58
	$14 = *($0)
	*($3 + [144]) = ($3 + [80])
	goto $label$51 
	
.LABEL $label$57
	$14 = *($0)
	*($3 + [144]) = ($3 + [80])
	
.LABEL $label$52
	$5 = [0]
	CALL eosio_assert([0], [17634])
	
.LABEL $label$51
	CALL $41($23, $5, $14, ($3 + [144]))
	
.LABEL $label$15
	CALL $42($0, $15)
	$14 = *($0)
	*($3 + [144]) = $11
	if ( $12 ){ goto $label$59 }
	CALL eosio_assert([0], [17634])
	
.LABEL $label$59
	CALL $43($13, $12, $14, ($3 + [144]))
	$24 = ((float_64)(CASTING float_64)(int_64 *(($11 + [16]))) * (float_64)(float_64)0.003)
	if ( ((float_64)(float_64)|$24| < (float_64)(float_64)9223372036854775808) ){ goto $label$61 }
	$17 = (int_64)-9223372036854775808
	goto $label$60 
	
.LABEL $label$61
	$17 = (Rounds 0)($24)
	
.LABEL $label$60
	$18 = *(($11 + [24]))
	if ( (uint_64)(((int_64)$17 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$62 }
	CALL eosio_assert([0], [17358])
	
.LABEL $label$62
	$14 = (uint_64)$18 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$65:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$64 }
	$16 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$66 }
	$14 = $16
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$66
	$14 = $16
	
.LOOP $label$67:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$64 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$67 }
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$65 }
	goto $label$63 
	
.LABEL $label$64
	CALL eosio_assert([0], [17407])
	
.LABEL $label$63
	$14 = *($0)
	*((($3 + [40]) + [24])) = $18
	*(($6 = (($3 + [144]) + [24]))) = [0]
	*($3 + [48]) = $1
	*($3 + [40]) = (int_64)-4155580856058900384
	*($3 + [56]) = $17
	*($3 + [144]) = (int_64)-4155580856058716144
	*($3 + [152]) = (int_64)-6215926882680963072
	*($3 + [160]) = (int_64)0
	*(($7 = CALL _Znwj([16]))) = $14
	*($7 + [8]) = (int_64)3617214756542218240
	*(($3 + [180])) = [0]
	$5 = ($7 + [16])
	*($6) = $5
	*(($3 + [164])) = $5
	*($3 + [160]) = $7
	*($3 + [172 align=4]) = (int_64)0
	CALL $37(($3 + [172]), [32])
	$5 = (($3 + [144]) + [32])
	$7 = *($5)
	$6 = *($3 + [172])
	*($3 + [116]) = $6
	*($3 + [112]) = $6
	*($3 + [120]) = $7
	*($3 + [128]) = ($3 + [112])
	*($3 + [136]) = ($3 + [40])
	CALL $44(($3 + [136]), ($3 + [128]))
	CALL $39(($3 + [144]))
	$7 = *($3 + [172])
	if ( ($7 == 0) ){ goto $label$68 }
	*($5) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$68
	$7 = *($3 + [160])
	if ( ($7 == 0) ){ goto $label$69 }
	*(($3 + [164])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$69
	$14 = *($11 + [8])
	if ( ((int_64)$14 == (int_64)-4155580855754841072) ){ goto $label$70 }
	if ( (CALL is_account($14) == 0) ){ goto $label$70 }
	$14 = *($15)
	if ( ((int_64)$14 < (int_64)2000) ){ goto $label$70 }
	$24 = ((float_64)(CASTING float_64)(int_64 $14) * (float_64)(float_64)0.0005)
	if ( ((float_64)(float_64)|$24| < (float_64)(float_64)9223372036854775808) ){ goto $label$72 }
	$16 = (int_64)-9223372036854775808
	goto $label$71 
	
.LABEL $label$72
	$16 = (Rounds 0)($24)
	
.LABEL $label$71
	$17 = *(($11 + [24]))
	if ( (uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$73 }
	CALL eosio_assert([0], [17358])
	
.LABEL $label$73
	$14 = (uint_64)$17 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$76:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$75 }
	$1 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$77 }
	$14 = $1
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$76 }
	goto $label$74 
	
.LABEL $label$77
	$14 = $1
	
.LOOP $label$78:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$75 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$78 }
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$76 }
	goto $label$74 
	
.LABEL $label$75
	CALL eosio_assert([0], [17407])
	
.LABEL $label$74
	$14 = *($0)
	*(($6 = ($3 + [168]))) = [0]
	$1 = *(($11 + [8]))
	*((($3 + [40]) + [32])) = $17
	*($3 + [48]) = $2
	*($3 + [40]) = (int_64)-4155580856058900384
	*($3 + [160]) = (int_64)0
	*($3 + [64]) = $16
	*($3 + [144]) = (int_64)-4155580856058716144
	*($3 + [152]) = (int_64)-6215683073095654912
	*($3 + [56]) = $1
	*(($7 = CALL _Znwj([16]))) = $14
	*($7 + [8]) = (int_64)3617214756542218240
	*(($3 + [180])) = [0]
	$5 = ($7 + [16])
	*($6) = $5
	*(($3 + [164])) = $5
	*($3 + [160]) = $7
	*($3 + [172 align=4]) = (int_64)0
	CALL $37(($3 + [172]), [40])
	$5 = (($3 + [144]) + [32])
	$7 = *($5)
	$6 = *($3 + [172])
	*($3 + [116]) = $6
	*($3 + [112]) = $6
	*($3 + [120]) = $7
	*($3 + [128]) = ($3 + [112])
	*($3 + [136]) = ($3 + [40])
	CALL $38(($3 + [136]), ($3 + [128]))
	CALL $39(($3 + [144]))
	$7 = *($3 + [172])
	if ( ($7 == 0) ){ goto $label$79 }
	*($5) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$79
	$7 = *($3 + [160])
	if ( ($7 == 0) ){ goto $label$70 }
	*(($3 + [164])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$70
	$24 = ((float_64)(CASTING float_64)(int_64 *(($11 + [16]))) * (float_64)(float_64)0.003)
	if ( ((float_64)(float_64)|$24| < (float_64)(float_64)9223372036854775808) ){ goto $label$81 }
	$16 = (int_64)-9223372036854775808
	goto $label$80 
	
.LABEL $label$81
	$16 = (Rounds 0)($24)
	
.LABEL $label$80
	$17 = *(($11 + [24]))
	if ( (uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$82 }
	CALL eosio_assert([0], [17358])
	
.LABEL $label$82
	$14 = (uint_64)$17 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$85:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$84 }
	$1 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$86 }
	$14 = $1
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$85 }
	goto $label$83 
	
.LABEL $label$86
	$14 = $1
	
.LOOP $label$87:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$84 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$87 }
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$85 }
	goto $label$83 
	
.LABEL $label$84
	CALL eosio_assert([0], [17407])
	
.LABEL $label$83
	$14 = *(($12 + [16]))
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$7 = CALL $138([17067])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$90 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$93 }
	*($3 + [112]) = ($7 << [1])
	$6 = (($3 + [112]) | [1])
	if ( $7 ){ goto $label$92 }
	goto $label$91 
	
.LABEL $label$93
	$5 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [112]) = ($5 | [1])
	*($3 + [120]) = $6
	*($3 + [116]) = $7
	
.LABEL $label$92
	CALL memcpy($6, [17067], $7)
	
.LABEL $label$91
	*(($6 + $7)) = [0]
	$1 = *($3 + [112])
	*($3 + [112]) = (int_64)0
	$6 = *($3 + [120])
	*($3 + [120]) = [0]
	*(($7 = CALL _Znwj([16]))) = (int_64)-4155580856058716144
	*($7 + [8]) = (int_64)3617214756542218240
	*(($3 + [168])) = $17
	*(($5 = ($3 + [184]))) = $6
	*($3 + [40]) = $7
	*($3 + [144]) = (int_64)-4155580856058716144
	*($3 + [152]) = (int_64)-4155580855950593888
	*($3 + [160]) = $16
	*($3 + [176]) = $1
	$7 = ($7 + [16])
	*($3 + [48]) = $7
	*($3 + [44]) = $7
	CALL $36($14, (int_64)-3617168760277827584, ($3 + [40]), ($3 + [144]))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$94 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$94
	$7 = *($3 + [40])
	if ( ($7 == 0) ){ goto $label$95 }
	*($3 + [44]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$95
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$96 }
	CALL _ZdlPv(*(($3 + [120])))
	
.LABEL $label$96
	$24 = ((float_64)(CASTING float_64)(int_64 *(($11 + [16]))) * (float_64)(float_64)0.0025)
	if ( ((float_64)(float_64)|$24| < (float_64)(float_64)9223372036854775808) ){ goto $label$98 }
	$16 = (int_64)-9223372036854775808
	goto $label$97 
	
.LABEL $label$98
	$16 = (Rounds 0)($24)
	
.LABEL $label$97
	$17 = *(($11 + [24]))
	if ( (uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807) ){ goto $label$99 }
	CALL eosio_assert([0], [17358])
	
.LABEL $label$99
	$14 = (uint_64)$17 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$102:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $14) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$101 }
	$1 = (uint_64)$14 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$14 & (int_64)65280) == (int_64)0) ){ goto $label$103 }
	$14 = $1
	$6 = $7
	$7 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$103
	$14 = $1
	
.LOOP $label$104:
	if ( ((int_64)((int_64)$14 & (int_64)65280) != (int_64)0) ){ goto $label$101 }
	$14 = (uint_64)$14 >> (uint_64)(int_64)8)
	$6 = ((int_32)$7 < (int_32)[6])
	$5 = ($7 + [1])
	$7 = $5
	if ( $6 ){ goto $label$104 }
	$7 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$102 }
	goto $label$100 
	
.LABEL $label$101
	CALL eosio_assert([0], [17407])
	
.LABEL $label$100
	$14 = *(($12 + [16]))
	*(($3 + [120])) = [0]
	*($3 + [112]) = (int_64)0
	$7 = CALL $138([17067])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$89 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$107 }
	*($3 + [112]) = ($7 << [1])
	$6 = (($3 + [112]) | [1])
	if ( $7 ){ goto $label$106 }
	goto $label$105 
	
.LABEL $label$107
	$5 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [112]) = ($5 | [1])
	*($3 + [120]) = $6
	*($3 + [116]) = $7
	
.LABEL $label$106
	CALL memcpy($6, [17067], $7)
	
.LABEL $label$105
	*(($6 + $7)) = [0]
	$1 = *($3 + [112])
	*($3 + [112]) = (int_64)0
	$6 = *($3 + [120])
	*($3 + [120]) = [0]
	*(($7 = CALL _Znwj([16]))) = (int_64)-4155580856058716144
	*($7 + [8]) = (int_64)3617214756542218240
	*(($3 + [168])) = $17
	*(($5 = ($3 + [184]))) = $6
	*($3 + [40]) = $7
	*($3 + [144]) = (int_64)-4155580856058716144
	*($3 + [152]) = (int_64)-4155580856058716112
	*($3 + [160]) = $16
	*($3 + [176]) = $1
	$7 = ($7 + [16])
	*($3 + [48]) = $7
	*($3 + [44]) = $7
	CALL $36($14, (int_64)-3617168760277827584, ($3 + [40]), ($3 + [144]))
	if ( ((*($3 + [176]) & [1]) == 0) ){ goto $label$108 }
	CALL _ZdlPv(*($5))
	
.LABEL $label$108
	$7 = *($3 + [40])
	if ( ($7 == 0) ){ goto $label$109 }
	*($3 + [44]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$109
	if ( ((*($3 + [112]) & [1]) == 0) ){ goto $label$110 }
	CALL _ZdlPv(*(($3 + [120])))
	
.LABEL $label$110
	$7 = CALL $138([8192])
	if ( ($7 <= [8]) ){ goto $label$113 }
	CALL eosio_assert([0], [17260])
	goto $label$112 
	
.LABEL $label$113
	if ( ($7 == 0) ){ goto $label$111 }
	
.LABEL $label$112
	$14 = (int_64)0
	
.LOOP $label$114:
	$6 = *(($7 + [8191]))
	if ( ((($6 + [-65]) & [255]) <= [26]) ){ goto $label$115 }
	CALL eosio_assert([0], [17305])
	
.LABEL $label$115
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $6) << (int_64)56) >> (int_64)56))
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$114 }
	$14 = ((int_64)((int_64)$14 << (int_64)8) | (int_64)4)
	goto $label$88 
	
.LABEL $label$111
	$14 = (int_64)4
	goto $label$88 
	
.LABEL $label$90
	CALL $112(($3 + [112]))
	
.LABEL $label$89
	CALL $112(($3 + [112]))
	
.LABEL $label$88
	if ( ($20 | ((int_64)*(($11 + [24])) != (int_64)$14)) ){ goto $label$116 }
	$1 = *(($15 + [8]))
	*((($3 + [24]) + [8])) = $1
	$16 = *($11)
	$14 = *($15)
	*((($3 + [8]) + [8])) = $1
	*($3 + [24]) = $14
	*($3 + [8]) = $14
	CALL $45($0, $16, $14, ($3 + [8]))
	
.LABEL $label$116
	$14 = *($0)
	if ( $9 ){ goto $label$117 }
	CALL eosio_assert([0], [17634])
	
.LABEL $label$117
	CALL $46($10, $9, $14)
	if ( ((int_32)*(($9 + [12])) != (int_32)*($9 + [8])) ){ goto $label$118 }
	if ( $9 ){ goto $label$119 }
	CALL eosio_assert([0], [18306])
	CALL eosio_assert([0], [18340])
	
.LABEL $label$119
	$7 = CALL db_next_i64(*($9 + [24]), ($3 + [144]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$120 }
	CALL $23($10, $7)
	
.LABEL $label$120
	CALL $47($10, $9)
	if ( $8 ){ goto $label$121 }
	CALL eosio_assert([0], [18306])
	CALL eosio_assert([0], [18340])
	
.LABEL $label$121
	$7 = CALL db_next_i64(*($8 + [60]), ($3 + [144]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$122 }
	CALL $35($4, $7)
	
.LABEL $label$122
	CALL $48($4, $8)
	
.LABEL $label$118
	$global$0 = ($3 + [192])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = ($global$0 - [32])
	$global$0 = $4
	$5 = [0]
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	*($4 + [16]) = [0]
	CALL $58(($4 + [16]), $0)
	$6 = *($4 + [16])
	if ( ($6 == 0) ){ goto $label$2 }
	CALL $37($4, $6)
	$5 = *($4 + [4])
	$6 = *($4)
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	*($4 + [20]) = $6
	*($4 + [16]) = $6
	*($4 + [24]) = $5
	CALL $59(($4 + [16]), $0)
	$0 = *($4)
	CALL send_deferred($1, $2, $0, (*($4 + [4]) - $0), $3)
	$0 = *($4)
	if ( ($0 == 0) ){ goto $label$3 }
	*($4 + [4]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($4 + [32])
}

int_32 .FUNC $57 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [52])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$4 = ($3 + [-16])
	$5 = *(($3 + [-12]))
	if ( ($5 == 0) ){ goto $label$5 }
	*(($3 + [-8])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$5
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$4 }
	$3 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$2 = ($0 + [40])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$8 }
	
.LOOP $label$9:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$10 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$11 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$11
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$9 }
	$3 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$2 = ($0 + [28])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$14 }
	
.LOOP $label$15:
	$4 = *(($3 + [-12]))
	if ( ($4 == 0) ){ goto $label$16 }
	*(($3 + [-8])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$16
	$4 = ($3 + [-40])
	$5 = *(($3 + [-24]))
	if ( ($5 == 0) ){ goto $label$17 }
	*(($3 + [-20])) = $5
	CALL _ZdlPv($5)
	
.LABEL $label$17
	$3 = $4
	if ( ((int_32)$1 != (int_32)$4) ){ goto $label$15 }
	$3 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$3 = $1
	
.LABEL $label$13
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$12
	return $0
}

void .FUNC $116 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $117 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$5 }
	$5 = uint_32($5 >> [1])
	if ( ((int_32)$4 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	
.LABEL $label$4
	if ( ($5 <= $1) ){ goto $label$3 }
	$5 = ($5 - $1)
	$2 = ( $5 ? $2 : ($5 <= $2) )
	if ( $6 ){ goto $label$6 }
	$0 = ($0 + [1])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( ($5 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$6
	$0 = *($0 + [8])
	$6 = ((uint_32)$2 > (uint_32)$4)
	$5 = ( $4 ? $2 : $6 )
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$1 = CALL $137(($0 + $1), $3, $5)
	if ( ($1 == 0) ){ goto $label$1 }
	return $1
	
.LABEL $label$1
	(unreachable)
	return ( [-1] ? $6 : ($2 <= $4) )
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $115($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18124])
	
.LABEL $label$5
	$4 = CALL $141($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([72])) + [16 align=4]) = (int_64)0
	*($5 + [24 align=4]) = (int_64)0
	*($5 + [32 align=4]) = (int_64)0
	*($5 + [44 align=4]) = (int_64)0
	*($5 + [52]) = [0]
	*($5 + [56]) = $0
	CALL $93(($3 + [32]), $5)
	*($5 + [60]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $54(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $144($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*(($1 + [44])) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [52])))
	
.LABEL $label$11
	$4 = *(($1 + [28]))
	if ( ($4 == 0) ){ goto $label$12 }
	*(($1 + [32])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$12
	$4 = *($1 + [16])
	if ( ($4 == 0) ){ goto $label$13 }
	*(($1 + [20])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$13
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $112 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC _ZdlPvSt11align_val_t (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $144($0)
	
.LABEL $label$1
}

void .FUNC _ZdaPvSt11align_val_t (int_32 $0, int_32 $1)
{
	CALL _ZdlPvSt11align_val_t($0, $1)
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $125())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $140($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

int_32 .FUNC $118 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [16])
	$global$0 = $3
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $138([18518])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$6 }
	*($3) = ($4 << [1])
	$5 = ($3 | [1])
	if ( $4 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($3) = ($6 | [1])
	*($3 + [8]) = $5
	*($3 + [4]) = $4
	
.LABEL $label$5
	CALL memcpy($5, [18518], $4)
	
.LABEL $label$4
	*(($5 + $4)) = [0]
	*($3 + [12]) = [0]
	$4 = *($0 + [8])
	$5 = *($0)
	$6 = *(CALL $125())
	*(CALL $125()) = [0]
	$4 = ( $4 ? ($0 + [1]) : ($5 & [1]) )
	$0 = CALL $136($4, ($3 + [12]), $2)
	$5 = CALL $125()
	$2 = *($5)
	*($5) = $6
	if ( ((int_32)$2 == (int_32)[34]) ){ goto $label$2 }
	$5 = *($3 + [12])
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$1 }
	if ( ($1 == 0) ){ goto $label$7 }
	*($1) = ($5 - $4)
	
.LABEL $label$7
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return $0
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	CALL $119($3)
	
.LABEL $label$1
	CALL $120($3)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $119 (int_32 $0)
{
	int_32 $1
	$1 = ($global$0 - [16])
	$global$0 = $1
	CALL $121($1, $0, [16691])
	CALL $122()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$4 = ($global$0 - [96])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [52]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	*($1 + [8]) = ((int_64)*($1 + [8]) + (int_64)1)
	$6 = ($1 + [16])
	$7 = *($6)
	CALL __floatditf(($5 + [16]), (int_64))((int_64)0 - $7))
	*($5 + [56]) = *(($5 + [24]))
	*($5 + [48]) = *($5 + [16])
	$8 = *($1)
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [24]))) ){ goto $label$3 }
	CALL eosio_assert([0], [17825])
	$7 = *($6)
	
.LABEL $label$3
	$7 = ((int_64)$7 + (int_64)*($3))
	*($6) = $7
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [17868])
	$7 = *(($1 + [16]))
	
.LABEL $label$4
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [17887])
	
.LABEL $label$5
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ((int_64)$8 == (int_64)*($1)) ){ goto $label$6 }
	CALL eosio_assert([0], [17766])
	
.LABEL $label$6
	$6 = $4
	$4 = ($6 + [-64])
	$global$0 = $4
	*($5 + [36]) = $4
	*($5 + [32]) = $4
	*($5 + [40]) = ($6 + [-12])
	CALL $92(($5 + [32]), $1)
	CALL db_update_i64(*($1 + [56]), $2, $4, [52])
	if ( (uint_64)($8 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	CALL __floatditf($5, (int_64))((int_64)0 - *(($1 + [16]))))
	*($5 + [88]) = *(($5 + [8]))
	*($5 + [80]) = *($5)
	if ( (CALL $137(($5 + [48]), ($5 + [80]), [16]) == 0) ){ goto $label$8 }
	$4 = *($1 + [60])
	if ( ((int_32)$4 > (int_32)[-1]) ){ goto $label$9 }
	$4 = CALL db_idx_long_double_find_primary(*($0), *($0 + [8]), (int_64)-6030912129794572288, ($5 + [64]), $8)
	*(($1 + [60])) = $4
	
.LABEL $label$9
	CALL db_idx_long_double_update($4, $2, ($5 + [80]))
	
.LABEL $label$8
	$global$0 = ($5 + [96])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$5 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$5 }
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18124])
	
.LABEL $label$5
	$4 = CALL $141($5)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	*(($5 = CALL _Znwj([64])) + [16]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [24]) = (int_64)0
	*($5 + [32]) = (int_64)0
	*($5 + [40]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [52]) = $0
	CALL $91(($3 + [32]), $5)
	*($5 + [60]) = [-1]
	*($5 + [56]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($2 + [8]) = $7
	*($2 + [16]) = $1
	*($3 + [24]) = [0]
	*($2) = $5
	*($8) = ($2 + [24])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $31(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $144($4)
	
.LABEL $label$7
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$6 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$7 = ($6 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$5 = ((int_32)(*($0 + [8]) - $5) / (int_32)[40])
	if ( ((uint_32)$5 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($5 << [1])
	$8 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	*(($6 = ($5 + ((int_32)$6 * (int_32)[40])))) = *($2)
	*($6 + [8]) = *($3)
	*($6 + [16 align=4]) = (int_64)0
	*(($3 = ($6 + [24]))) = [0]
	$2 = CALL _Znwj([16])
	*($6 + [16]) = $2
	*($6 + [28 align=4]) = (int_64)0
	*(($6 + [36])) = [0]
	$7 = ($2 + [16])
	*($3) = $7
	*($2) = *($1)
	*(($2 + [8])) = *(($1 + [8]))
	*(($6 + [20])) = $7
	CALL $37(($6 + [28]), [16])
	$2 = *($6 + [28])
	$1 = (*(($6 + [32])) - $2)
	if ( ((int_32)$1 > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17905])
	
.LABEL $label$5
	$8 = ((int_32)$8 * (int_32)[40])
	CALL memcpy($2, $4, [8])
	$4 = ($4 + [8])
	$2 = ($2 + [8])
	if ( ((int_32)($1 + [-8]) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17905])
	
.LABEL $label$6
	$9 = ($5 + $8)
	CALL memcpy($2, $4, [8])
	$10 = ($6 + [40])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$11 = ($2 - $7)
	$1 = [0]
	
.LOOP $label$9:
	$8 = ($7 + $1)
	*((($2 = ($6 + $1)) + [-32])) = *(($8 + [-32]))
	*(($2 + [-40])) = *(($8 + [-40]))
	*(($4 = ($2 + [-24]))) = (int_64)0
	*(($5 = ($2 + [-16]))) = [0]
	$3 = ($8 + [-24])
	*($4) = *($3)
	$4 = ($8 + [-16])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($2 + [-12]))) = (int_64)0
	*(($2 = ($2 + [-4]))) = [0]
	$5 = ($8 + [-12])
	*($4) = *($5)
	*($3) = (int_64)0
	$8 = ($8 + [-4])
	*($2) = *($8)
	*($8) = [0]
	*($5) = (int_64)0
	$1 = ($1 + [-40])
	if ( ((int_32)$11 != (int_32)$1) ){ goto $label$9 }
	$6 = ($6 + $1)
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$4 = $2
	
.LABEL $label$7
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = *(($2 + [-12]))
	if ( ($8 == 0) ){ goto $label$12 }
	*(($2 + [-8])) = $8
	CALL _ZdlPv($8)
	
.LABEL $label$12
	$8 = ($2 + [-40])
	$1 = *(($2 + [-24]))
	if ( ($1 == 0) ){ goto $label$13 }
	*(($2 + [-20])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$2 = $8
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($4 == 0) ){ goto $label$14 }
	CALL _ZdlPv($4)
	
.LABEL $label$14
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $144($0)
	
.LABEL $label$1
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [120]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	$6 = *($1 + [8])
	$3 = *($3)
	if ( ((int_64)*($3 + [8]) == (int_64)*(($1 + [96]))) ){ goto $label$3 }
	CALL eosio_assert([0], [17825])
	
.LABEL $label$3
	$7 = ((int_64)*($1 + [88]) + (int_64)*($3))
	*($1 + [88]) = $7
	if ( ((int_64)$7 > (int_64)-4611686018427387904) ){ goto $label$4 }
	CALL eosio_assert([0], [17868])
	$7 = *(($1 + [88]))
	
.LABEL $label$4
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)$7 < (int_64)4611686018427387904) ){ goto $label$5 }
	CALL eosio_assert([0], [17887])
	
.LABEL $label$5
	if ( ((int_64)$6 == (int_64)(uint_64)*(($1 + [8])) >> (uint_64)(int_64)8)) ){ goto $label$6 }
	CALL eosio_assert([0], [17766])
	
.LABEL $label$6
	$3 = $4
	$4 = ($3 + [-128])
	$global$0 = $4
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($3 + [-8])
	CALL $77($5, $1)
	CALL db_update_i64(*($1 + [124]), $2, $4, [120])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ((int_64)$6 + (int_64)1)
	
.LABEL $label$7
	$global$0 = ($5 + [16])
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	*($4 + [16]) = $2
	*($4 + [8]) = $1
	$5 = CALL db_find_i64($1, $2, (int_64)3607749779137757184, $3)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $60(($4 + [8]), $5)
	if ( ((int_32)*($5 + [16]) == (int_32)($4 + [8])) ){ goto $label$5 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$5
	*($0) = *($5)
	*(($0 + [8])) = *(($5 + [8]))
	$6 = *($4 + [32])
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ($4 + [36])
	$0 = *($7)
	if ( ((int_32)$0 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$5 = *($0)
	*($0) = [0]
	if ( ($5 == 0) ){ goto $label$7 }
	CALL _ZdlPv($5)
	
.LABEL $label$7
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($4 + [32]))
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([0], [18054])
	*(($0 + [8])) = *([0] + [8])
	*($0) = *([0])
	
.LABEL $label$3
	$global$0 = ($4 + [48])
	return 
	
.LABEL $label$2
	$0 = $6
	
.LABEL $label$1
	*($7) = $6
	CALL _ZdlPv($0)
	$global$0 = ($4 + [48])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$5 }
	$5 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $5
	$7 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18124])
	
.LABEL $label$5
	$5 = CALL $141($6)
	$7 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $5, $6)
	*($3 + [36]) = $5
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + $6)
	*(($4 = CALL _Znwj([32])) + [16]) = [0]
	*($4 + [8 align=4]) = (int_64)0
	*($4 + [20]) = $0
	$8 = ($4 + [8])
	$2 = $5
	if ( ((uint_32)$6 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17472])
	$2 = *($3 + [36])
	
.LABEL $label$7
	CALL memcpy($4, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $84(($3 + [32]), $8)
	*($4 + [24]) = $1
	*($3 + [24]) = $4
	$9 = *($4)
	*($3 + [16]) = $9
	*($3 + [12]) = $1
	$2 = ($0 + [28])
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$10 }
	*($6 + [8]) = $9
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $4
	*($2) = ($6 + [24])
	if ( $7 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $27(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($7 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $144($5)
	
.LABEL $label$8
	$6 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	$0 = *($6 + [8])
	if ( ($0 == 0) ){ goto $label$12 }
	$2 = ($6 + [12])
	$5 = *($2)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = ($5 + [-56])
	if ( ((*(($5 + [-24])) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($5 + [-16])))
	
.LABEL $label$16
	$5 = $1
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$15 }
	$5 = *(($6 + [8]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $0
	
.LABEL $label$13
	*($2) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$12
	CALL _ZdlPv($6)
	
.LABEL $label$11
	$global$0 = ($3 + [48])
	return $4
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$3 = ($global$0 - [48])
	$global$0 = $3
	*(($4 = ($0 + [8]))) = (int_64)0
	*($0) = (int_64)0
	*(($0 + [24])) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*($4) = [0]
	*($3 + [40]) = [0]
	*($3 + [32]) = (int_64)0
	CALL $1(($3 + [32]), $2, [44])
	CALL eosio_assert(((int_32)(*($3 + [36]) - *($3 + [32])) == (int_32)[36]), [17911])
	CALL $114($0, *($3 + [32]))
	$2 = *($3 + [32])
	if ( (*($2 + [12]) & [1]) ){ goto $label$2 }
	$2 = (($2 + [12]) + [1])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(($2 + [20]))
	
.LABEL $label$1
	*($3 + [16]) = $2
	*($3 + [20]) = CALL $138($2)
	*($3 + [8]) = *($3 + [16])
	*(($0 + [16])) = *(CALL $19(($3 + [24]), ($3 + [8])))
	*($0 + [24]) = (CASTING int_64)(int_32 CALL $118((*($3 + [32]) + [24]), [0], [10]))
	$4 = *($3 + [32])
	if ( ($4 == 0) ){ goto $label$3 }
	$2 = *($3 + [36])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($2 + [-12])
	if ( ((*($0) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$7
	$2 = $0
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *($3 + [32])
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($3 + [36]) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [48])
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[56])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[76695845]) ){ goto $label$2 }
	$5 = [76695844]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[56])
	if ( ((uint_32)$2 > (uint_32)[38347921]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[56]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	*(($6 = ($2 + ((int_32)$3 * (int_32)[56])))) = *($1)
	*(($6 + [24])) = *(($1 + [24]))
	*(($6 + [16])) = *(($1 + [16]))
	*(($6 + [8])) = *(($1 + [8]))
	CALL $113(($6 + [32]), ($1 + [32]))
	*($6 + [48]) = *($1 + [48])
	$7 = ($2 + ((int_32)$5 * (int_32)[56]))
	$8 = ($6 + [56])
	$1 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$6 }
	$10 = ($1 - $9)
	$2 = [0]
	
.LOOP $label$7:
	$5 = ($9 + $2)
	*((($1 = ($6 + $2)) + [-32])) = *(($5 + [-32]))
	*(($1 + [-40])) = *(($5 + [-40]))
	*(($1 + [-48])) = *(($5 + [-48]))
	*(($1 + [-56])) = *(($5 + [-56]))
	$3 = ($5 + [-16])
	*(($1 + [-16])) = *($3)
	$4 = ($5 + [-24])
	*(($1 + [-24])) = *($4)
	*($4) = (int_64)0
	*($3) = [0]
	*(($1 + [-8])) = *(($5 + [-8]))
	$2 = ($2 + [-56])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$7 }
	$6 = ($6 + $2)
	$1 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $1
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($1 + [-56])
	if ( ((*(($1 + [-24])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [-16])))
	
.LABEL $label$10
	$1 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	$3 = *($3)
	$6 = *($1)
	$7 = ($1 + [12])
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)*(($1 + [16]))) ){ goto $label$5 }
	*($8) = *($3)
	*(($8 + [24])) = *(($3 + [24]))
	*(($8 + [16])) = *(($3 + [16]))
	*(($8 + [8])) = *(($3 + [8]))
	CALL $113(($8 + [32]), ($3 + [32]))
	*($8 + [48]) = *($3 + [48])
	*($7) = (*($7) + [56])
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	CALL $25(($1 + [8]), $3)
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$3 }
	
.LABEL $label$4
	CALL eosio_assert([0], [17766])
	
.LABEL $label$3
	$8 = *($1 + [8])
	$9 = *(($1 + [12]))
	$10 = (CASTING uint_64)(uint_32 ((int_32)($9 - $8) / (int_32)[56]))
	$3 = [8]
	
.LOOP $label$6:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$7 }
	
.LOOP $label$8:
	$7 = *($8 + [32])
	$7 = ( *(($8 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = (($7 + $3) + [40])
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$9:
	$3 = ($3 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$9 }
	$8 = ($8 + [56])
	if ( ((int_32)$8 != (int_32)$9) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 <= [513]) ){ goto $label$11 }
	$4 = CALL $141($3)
	goto $label$10 
	
.LABEL $label$11
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$10
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	$8 = $4
	if ( ((int_32)$3 > (int_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [17905])
	$8 = *($5 + [4])
	
.LABEL $label$12
	CALL memcpy($8, $1, [8])
	$8 = ($8 + [8])
	*($5 + [4]) = $8
	$10 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *(($1 + [8]))) / (int_32)[56]))
	
.LOOP $label$13:
	$7 = (CASTING uint_32)(uint_64 $10)
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	$9 = ((int_64)$10) != (int_64)0
	*($5 + [24]) = (($9) << [7]) | ($7 & [127]))
	if ( ((int_32)(*(($5 + [8])) - $8) > (int_32)[0]) ){ goto $label$14 }
	CALL eosio_assert([0], [17905])
	$8 = *($5 + [4])
	
.LABEL $label$14
	CALL memcpy($8, ($5 + [24]), [1])
	$8 = ($8 + [1])
	*($5 + [4]) = $8
	if ( $9 ){ goto $label$13 }
	$7 = *(($1 + [12]))
	$8 = *(($1 + [8]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$15 }
	$9 = (($5 + [24]) + [12])
	
.LOOP $label$16:
	*($5 + [16]) = $5
	*($5 + [24]) = $8
	*((($5 + [24]) + [8])) = ($8 + [16])
	*($9) = ($8 + [32])
	*((($5 + [24]) + [16])) = ($8 + [48])
	*($5 + [28]) = ($8 + [8])
	CALL $89(($5 + [24]), ($5 + [16]))
	$8 = ($8 + [56])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$16 }
	
.LABEL $label$15
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$19 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	CALL $144($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$17 }
	
.LABEL $label$18
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$17
	$global$0 = ($5 + [48])
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($5 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$6 = ($4 + ((int_32)$7 * (int_32)[24]))
	$8 = ($1 + [24])
	$2 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$1 = (($4 + $5) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$2 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $2
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$2 = ($2 + [-24])
	$3 = *($2)
	*($2) = [0]
	if ( ($3 == 0) ){ goto $label$10 }
	$4 = *($3 + [8])
	if ( ($4 == 0) ){ goto $label$11 }
	$0 = ($3 + [12])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($1 + [-56])
	if ( ((*(($1 + [-24])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($1 + [-16])))
	
.LABEL $label$15
	$1 = $7
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$14 }
	$1 = *(($3 + [8]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $4
	
.LABEL $label$12
	*($0) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($3)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *((*($4) + [24]))
	$5 = [8]
	$6 = *($0)
	$4 = *(($4 + [4]))
	$7 = ($1 + [8])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$1 }
	CALL $88($7, *($4), *($4 + [4]))
	
.LABEL $label$1
	$4 = *($1 + [8])
	$8 = *(($1 + [12]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($8 - $4) / (int_32)[56]))
	
.LOOP $label$2:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$4 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$4:
	$7 = *($4 + [32])
	$7 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$5 = (($7 + $5) + [40])
	$9 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	$4 = ($4 + [56])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($5 <= [513]) ){ goto $label$7 }
	$2 = CALL $141($5)
	goto $label$6 
	
.LABEL $label$7
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$6
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	$4 = $2
	if ( ((int_32)$5 > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [17905])
	$4 = *($3 + [4])
	
.LABEL $label$8
	CALL memcpy($4, $1, [8])
	$4 = ($4 + [8])
	*($3 + [4]) = $4
	$9 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *(($1 + [8]))) / (int_32)[56]))
	
.LOOP $label$9:
	$7 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$8 = ((int_64)$9) != (int_64)0
	*($3 + [24]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*(($3 + [8])) - $4) > (int_32)[0]) ){ goto $label$10 }
	CALL eosio_assert([0], [17905])
	$4 = *($3 + [4])
	
.LABEL $label$10
	CALL memcpy($4, ($3 + [24]), [1])
	$4 = ($4 + [1])
	*($3 + [4]) = $4
	if ( $8 ){ goto $label$9 }
	$7 = *(($1 + [12]))
	$4 = *(($1 + [8]))
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$11 }
	$8 = (($3 + [24]) + [12])
	
.LOOP $label$12:
	*($3 + [16]) = $3
	*($3 + [24]) = $4
	*((($3 + [24]) + [8])) = ($4 + [16])
	*($8) = ($4 + [32])
	*((($3 + [24]) + [16])) = ($4 + [48])
	*($3 + [28]) = ($4 + [8])
	CALL $89(($3 + [24]), ($3 + [16]))
	$4 = ($4 + [56])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$12 }
	
.LABEL $label$11
	$9 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($6 + [8]), (int_64)4229865212519383040, *(*($0 + [8])), $9, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$15 }
	if ( ((uint_64)$9 >= (uint_64)*($6 + [16])) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	CALL $144($2)
	if ( (uint_64)($9 <= *($6 + [16])) ){ goto $label$13 }
	
.LABEL $label$14
	*(($6 + [16])) = ( (int_64)-2 ? ((int_64)$9 + (int_64)1) : ((uint_64)$9 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [48])
	return 
	
.LABEL $label$13
	$global$0 = ($3 + [48])
}

int_32 .FUNC _ZnajSt11align_val_t (int_32 $0, int_32 $1)
{
	return CALL _ZnwjSt11align_val_t($0, $1)
}

int_64 .FUNC $135 (int_32 $0, int_32 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_32 $14
	if ( ((uint_32)$1 > (uint_32)[36]) ){ goto $label$17 }
	if ( ((int_32)$1 == (int_32)[1]) ){ goto $label$17 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$18:
	$6 = *($5)
	if ( ($6 <= *($4)) ){ goto $label$20 }
	$6 = CALL $134($0)
	if ( ((uint_32)($6 + [-9]) >= (uint_32)[5]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( (($6 + [-9]) <= [5]) ){ goto $label$18 }
	
.LABEL $label$19
	if ( ((int_32)$6 == (int_32)[32]) ){ goto $label$18 }
	$5 = ((int_32)$6 == (int_32)[45])
	if ( $5 ){ goto $label$21 }
	if ( ((int_32)$6 != (int_32)[43]) ){ goto $label$16 }
	
.LABEL $label$21
	$7 = ( [-1] ? [0] : $5 )
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$15 }
	*($5) = ($6 + [1])
	$6 = *($6)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	goto $label$14 
	
.LABEL $label$17
	*(CALL $125()) = [22]
	return (int_64)0
	
.LABEL $label$16
	$7 = [0]
	if ( ((int_32)($1 | [16]) == (int_32)[16]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL $134($0)
	if ( ((int_32)($1 | [16]) != (int_32)[16]) ){ goto $label$13 }
	
.LABEL $label$14
	if ( ((int_32)$6 != (int_32)[48]) ){ goto $label$13 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$12 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$11 
	
.LABEL $label$13
	$1 = ( $1 ? [10] : $1 )
	if ( ((uint_32)$1 > (uint_32)*(($6 + [18705]))) ){ goto $label$10 }
	if ( (*(($0 + [104])) == 0) ){ goto $label$22 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$22
	CALL $133($0, (int_64)0)
	*(CALL $125()) = [22]
	return (int_64)0
	
.LABEL $label$12
	$6 = CALL $134($0)
	
.LABEL $label$11
	if ( ((int_32)($6 | [32]) != (int_32)[120]) ){ goto $label$23 }
	$5 = ($0 + [4])
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [104]))) ){ goto $label$9 }
	*($5) = ($6 + [1])
	$6 = *($6)
	goto $label$8 
	
.LABEL $label$23
	if ( ($1 == 0) ){ goto $label$7 }
	
.LABEL $label$10
	if ( ((int_32)$1 != (int_32)[10]) ){ goto $label$6 }
	$8 = (int_64)0
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$5 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$25:
	$6 = ((int_32)$5 * (int_32)[10])
	$1 = *($2)
	if ( ((uint_32)$1 >= (uint_32)*($9)) ){ goto $label$27 }
	*($2) = ($1 + [1])
	$5 = ($6 + $4)
	$6 = *($1)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 <= (uint_32)[9]) ){ goto $label$26 }
	goto $label$24 
	
.LABEL $label$27
	$5 = ($6 + $4)
	$6 = CALL $134($0)
	$4 = ($6 + [-48])
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$24 }
	
.LABEL $label$26
	if ( ($5 <= [429496729]) ){ goto $label$25 }
	
.LABEL $label$24
	$8 = (CASTING uint_64)(uint_32 $5)
	if ( ((uint_32)$4 > (uint_32)[9]) ){ goto $label$2 }
	$1 = [10]
	$11 = (CASTING int_64)(int_32 $4)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$28:
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$30 }
	*($4) = ($6 + [1])
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = *($6)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 <= (uint_32)[9]) ){ goto $label$29 }
	goto $label$4 
	
.LABEL $label$30
	$8 = ((int_64)$10 + (int_64)$11)
	$6 = CALL $134($0)
	$5 = ($6 + [-48])
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$4 }
	
.LABEL $label$29
	if ( ((uint_64)$8 >= (uint_64)(int_64)1844674407370955162) ){ goto $label$4 }
	$11 = (CASTING int_64)(int_32 $5)
	$10 = ((int_64)$8 * (int_64)10)
	if ( ((uint_64)$10 <= (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$28 }
	goto $label$3 
	
.LABEL $label$9
	$6 = CALL $134($0)
	
.LABEL $label$8
	$1 = [16]
	if ( (*(($6 + [18705])) <= [16]) ){ goto $label$6 }
	$6 = *(($0 + [104]))
	if ( ($6 == 0) ){ goto $label$31 }
	*(($5 = ($0 + [4]))) = (*($5) + [-1])
	
.LABEL $label$31
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = (int_64)0
	if ( ($6 == 0) ){ goto $label$1 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	return (int_64)0
	
.LABEL $label$7
	$1 = [8]
	
.LABEL $label$6
	if ( ((($1 + [-1]) & $1) == 0) ){ goto $label$32 }
	$8 = (int_64)0
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$33 }
	$4 = [0]
	$9 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$35:
	$4 = ($5 + ((int_32)$4 * (int_32)$1))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($9)) ){ goto $label$37 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$4 <= (uint_32)[119304646]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$6 = CALL $134($0)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$4 > (uint_32)[119304646]) ){ goto $label$34 }
	
.LABEL $label$36
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$33
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$12 = (CASTING uint_64)(uint_32 $1)
	$13 = ((uint_64)(int_64)-1 / (uint_64)$12)
	if ( ((uint_64)$8 > (uint_64)$13) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$38:
	$11 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$10 = ((int_64)$8 * (int_64)$12)
	if ( ((uint_64)$10 > (uint_64)((int_64)$11 ^ (int_64)-1)) ){ goto $label$3 }
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$40 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$6 = CALL $134($0)
	
.LABEL $label$39
	$8 = ((int_64)$10 + (int_64)$11)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$13) ){ goto $label$38 }
	goto $label$3 
	
.LABEL $label$32
	$9 = *(((uint_32(((int_32)$1 * (int_32)[23]) >> [5]) & [7]) + [18961]))
	$8 = (int_64)0
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$41 }
	$4 = [0]
	$14 = ($0 + [104])
	$2 = ($0 + [4])
	
.LOOP $label$43:
	$4 = ($5 | ($4 << $9))
	$6 = *($2)
	if ( ((uint_32)$6 >= (uint_32)*($14)) ){ goto $label$45 }
	*($2) = ($6 + [1])
	$6 = *($6)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$4 <= (uint_32)[134217727]) ){ goto $label$44 }
	goto $label$42 
	
.LABEL $label$45
	$6 = CALL $134($0)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$4 > (uint_32)[134217727]) ){ goto $label$42 }
	
.LABEL $label$44
	if ( ((uint_32)$1 > (uint_32)$5) ){ goto $label$43 }
	
.LABEL $label$42
	$8 = (CASTING uint_64)(uint_32 $4)
	
.LABEL $label$41
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	$11 = (CASTING uint_64)(uint_32 $9)
	$12 = (uint_64)(int_64)-1 >> (uint_64)$11
	if ( (uint_64)($12) <= $8) ){ goto $label$3 }
	$2 = ($0 + [104])
	$4 = ($0 + [4])
	
.LOOP $label$46:
	$8 = ((int_64)$8 << (int_64)$11)
	$10 = ((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)255)
	$6 = *($4)
	if ( ((uint_32)$6 >= (uint_32)*($2)) ){ goto $label$48 }
	*($4) = ($6 + [1])
	$6 = *($6)
	goto $label$47 
	
.LABEL $label$48
	$6 = CALL $134($0)
	
.LABEL $label$47
	$8 = ((int_64)$8 | (int_64)$10)
	$5 = *(($6 + [18705]))
	if ( ((uint_32)$1 <= (uint_32)$5) ){ goto $label$3 }
	if ( ((uint_64)$8 <= (uint_64)$12) ){ goto $label$46 }
	goto $label$3 
	
.LABEL $label$5
	CALL $133($0, (int_64)0)
	return (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$2 }
	
.LABEL $label$3
	if ( ((uint_32)$1 <= (uint_32)*(($6 + [18705]))) ){ goto $label$2 }
	$4 = ($0 + [104])
	$5 = ($0 + [4])
	
.LOOP $label$50:
	$6 = *($5)
	if ( ((uint_32)$6 >= (uint_32)*($4)) ){ goto $label$51 }
	*($5) = ($6 + [1])
	if ( ((uint_32)$1 > (uint_32)*((*($6) + [18705]))) ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	if ( ((uint_32)$1 > (uint_32)*((CALL $134($0) + [18705]))) ){ goto $label$50 }
	
.LABEL $label$49
	*(CALL $125()) = [34]
	$7 = ( $7 ? [0] : (int_64)(((int_64)$3 & (int_64)1) == 0) )
	$8 = $3
	
.LABEL $label$2
	if ( (*(($0 + [104])) == 0) ){ goto $label$52 }
	*(($6 = ($0 + [4]))) = (*($6) + [-1])
	
.LABEL $label$52
	if ( (uint_64)($8 <= $3) ){ goto $label$53 }
	if ( (CASTING uint_32)(uint_64 ((int_64)$3 & (int_64)1)) ){ goto $label$54 }
	if ( $7 ){ goto $label$54 }
	*(CALL $125()) = [34]
	return ((int_64)$3 + (int_64)-1)
	
.LABEL $label$54
	if ( ((uint_64)$8 <= (uint_64)$3) ){ goto $label$53 }
	*(CALL $125()) = [34]
	return $3
	
.LABEL $label$53
	$10 = (CASTING int_64)(int_32 $7)
	$8 = (int_64))(((int_64)$8 ^ (int_64)$10) - $10)
	
.LABEL $label$1
	return $8
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17472])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$5 = *($0)
	$3 = ($5 + [8])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17472])
	$0 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $0, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = ($5 + [16])
	$0 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $0) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17472])
	$0 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $0, [8])
	$3 = (*($0) + [8])
	*(($0 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17472])
	$3 = *($0)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*(($5 + [24])) = *($2 + [8])
	*($0) = (*($0) + [8])
	CALL $87(*($1), ($5 + [32]))
	$global$0 = ($2 + [16])
}

int_32 .FUNC $68 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	$3 = ($global$0 - [528])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($3 = ($4 + [352]))) = (int_64)0
	*(($8 = (($4 + [320]) + [48]))) = (int_64)0
	*($4 + [328]) = (int_64)0
	*($4 + [320]) = (int_64)0
	*($4 + [336]) = (int_64)0
	*($4 + [344]) = (int_64)0
	*($4 + [360]) = (int_64)0
	*($4 + [376]) = (int_64)0
	*($4 + [308]) = $2
	*($4 + [304]) = $2
	*($4 + [312]) = ($2 + $7)
	*($4 + [512]) = ($4 + [304])
	*($4 + [64]) = ($4 + [320])
	CALL $71(($4 + [64]), ($4 + [512]))
	*(($9 = (($4 + [48]) + [8]))) = *($4 + [312])
	*($4 + [48]) = *($4 + [304])
	$9 = *($9)
	*((($4 + [480]) + [8])) = $9
	*(($10 = (($4 + [496]) + [8]))) = $9
	$11 = *($4 + [48])
	*($4 + [496]) = $11
	*($4 + [480]) = $11
	$9 = *($10)
	*((($4 + [512]) + [8])) = $9
	*(($4 + [88])) = $9
	*($4 + [64]) = $0
	*($4 + [72]) = $1
	$11 = *($4 + [496])
	*($4 + [80]) = $11
	*($4 + [512]) = $11
	*(($4 + [104])) = $0
	*((($4 + [64]) + [48])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*(($4 + [200])) = (int_64)0
	*(($4 + [208])) = [0]
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*($4 + [216]) = $0
	*(($4 + [248])) = [0]
	*(($4 + [240])) = (int_64)0
	*(($4 + [264])) = $0
	*(($4 + [272])) = (int_64)-1
	*(($4 + [280])) = (int_64)0
	*(($4 + [288])) = [0]
	*(($4 + [292])) = [0]
	*($4 + [256]) = $0
	*($4 + [296]) = $1
	*(($9 = (($4 + [416]) + [8]))) = *($4 + [328])
	*(($10 = (($4 + [400]) + [8]))) = *($3)
	*(($3 = (($4 + [384]) + [8]))) = *($8)
	*($4 + [416]) = *($4 + [320])
	*($4 + [400]) = *($4 + [344])
	*($4 + [384]) = *($4 + [360])
	$0 = *($4 + [336])
	$1 = *($4 + [376])
	*((($4 + [464]) + [8])) = *($3)
	*((($4 + [448]) + [8])) = *($10)
	*((($4 + [432]) + [8])) = *($9)
	*($4 + [464]) = *($4 + [384])
	*($4 + [448]) = *($4 + [400])
	*($4 + [432]) = *($4 + [416])
	$3 = (($4 + [64]) + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	$11 = *((($4 + [432]) + [8]))
	*((($4 + [512]) + [8])) = $11
	$12 = *((($4 + [448]) + [8]))
	*((($4 + [496]) + [8])) = $12
	$13 = *((($4 + [464]) + [8]))
	*((($4 + [480]) + [8])) = $13
	*((($4 + [32]) + [8])) = $11
	*((($4 + [16]) + [8])) = $12
	*(($4 + [8])) = $13
	$11 = *($4 + [432])
	*($4 + [512]) = $11
	$12 = *($4 + [448])
	*($4 + [496]) = $12
	*($4 + [32]) = $11
	*($4 + [16]) = $12
	$11 = *($4 + [464])
	*($4) = $11
	*($4 + [480]) = $11
	CALL void $3((int_32 ($4 + [32])), (int_32 $0), (int_64 ($4 + [16])), (int_32 $4), (int_32 $1), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $144($2)
	
.LABEL $label$5
	CALL $3(($4 + [64]))
	$global$0 = ($4 + [528])
	return [1]
}

int_32 .FUNC _ZnwjSt11align_val_t (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $139(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8212])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $139(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $65 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [384])
	$global$0 = $3
	*(($4 = $3) + [328]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [296])) = (int_64)0
	*((($4 + [280]) + [24])) = (int_64)0
	*(($4 + [324])) = [0]
	*($4 + [280]) = (int_64)0
	*($4 + [288]) = (int_64)0
	*($4 + [312]) = [0]
	*($4 + [316 align=4]) = (int_64)0
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $5)
	*($4 + [368]) = ($4 + [264])
	*($4 + [24]) = ($4 + [280])
	CALL $72(($4 + [24]), ($4 + [368]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [272])
	*($4 + [8]) = *($4 + [264])
	$3 = *($3)
	*((($4 + [336]) + [8])) = $3
	*(($6 = (($4 + [352]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [352]) = $7
	*($4 + [336]) = $7
	$3 = *($6)
	*((($4 + [368]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [352])
	*($4 + [40]) = $7
	*($4 + [368]) = $7
	*(($4 + [64])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [252])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $1
	*($4 + [372]) = ($4 + [328])
	*($4 + [368]) = ($4 + [24])
	CALL $73(($4 + [368]), ($4 + [280]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $144($2)
	
.LABEL $label$4
	CALL $3(($4 + [24]))
	if ( ((*($4 + [316]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [324])))
	
.LABEL $label$5
	$2 = *(($4 + [300]))
	if ( ($2 == 0) ){ goto $label$6 }
	*(($4 + [304])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$6
	$2 = *(($4 + [288]))
	if ( ($2 == 0) ){ goto $label$7 }
	*(($4 + [292])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$global$0 = ($4 + [384])
	return [1]
}

int_32 .FUNC $64 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [384])
	$global$0 = $3
	*(($4 = $3) + [328]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*((($4 + [280]) + [24])) = (int_64)0
	*((($4 + [280]) + [40])) = [0]
	*($4 + [288]) = (int_64)0
	*($4 + [280]) = (int_64)0
	*($4 + [296]) = (int_64)0
	*($4 + [312]) = (int_64)0
	*($4 + [268]) = $2
	*($4 + [264]) = $2
	*($4 + [272]) = ($2 + $5)
	*($4 + [368]) = ($4 + [264])
	*($4 + [24]) = ($4 + [280])
	CALL $69(($4 + [24]), ($4 + [368]))
	*(($3 = (($4 + [8]) + [8]))) = *($4 + [272])
	*($4 + [8]) = *($4 + [264])
	$3 = *($3)
	*((($4 + [336]) + [8])) = $3
	*(($6 = (($4 + [352]) + [8]))) = $3
	$7 = *($4 + [8])
	*($4 + [352]) = $7
	*($4 + [336]) = $7
	$3 = *($6)
	*((($4 + [368]) + [8])) = $3
	*((($4 + [24]) + [24])) = $3
	*($4 + [24]) = $0
	*($4 + [32]) = $1
	$7 = *($4 + [352])
	*($4 + [40]) = $7
	*($4 + [368]) = $7
	*((($4 + [24]) + [40])) = $0
	*(($4 + [72])) = (int_64)-1
	*(($4 + [80])) = (int_64)0
	*(($4 + [88])) = [0]
	*(($4 + [104])) = $0
	*(($4 + [112])) = (int_64)-1
	*(($4 + [120])) = (int_64)0
	*(($4 + [128])) = [0]
	*(($4 + [144])) = $0
	*(($4 + [152])) = (int_64)-1
	*(($4 + [160])) = (int_64)0
	*(($4 + [168])) = [0]
	*(($4 + [184])) = $0
	*(($4 + [192])) = (int_64)-1
	*($4 + [56]) = $0
	*($4 + [96]) = $0
	*($4 + [136]) = $0
	*($4 + [176]) = $0
	*(($4 + [208])) = [0]
	*(($4 + [200])) = (int_64)0
	*(($4 + [224])) = $0
	*(($4 + [232])) = (int_64)-1
	*(($4 + [240])) = (int_64)0
	*(($4 + [248])) = [0]
	*(($4 + [252])) = [0]
	*($4 + [216]) = $0
	*($4 + [256]) = $1
	*($4 + [372]) = ($4 + [328])
	*($4 + [368]) = ($4 + [24])
	CALL $70(($4 + [368]), ($4 + [280]))
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL $144($2)
	
.LABEL $label$4
	CALL $3(($4 + [24]))
	if ( ((*($4 + [312]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($4 + [320])))
	
.LABEL $label$5
	$global$0 = ($4 + [384])
	return [1]
}

int_32 .FUNC $67 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [256])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [248]) = (int_64)0
	*($4 + [240]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17472])
	
.LABEL $label$5
	$3 = ($2 + $7)
	$8 = (($4 + [240]) + [8])
	CALL memcpy(($4 + [240]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [17472])
	
.LABEL $label$6
	CALL memcpy($8, $9, [8])
	*(($4 + [24])) = $3
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [16]) = $2
	*(($4 + [20])) = ($2 + [16])
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [228])) = [0]
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $1
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *((($4 + [240]) + [8]))
	$1 = *($4 + [240])
	if ( (($5 & [1]) == 0) ){ goto $label$7 }
	$6 = *((*($3) + $6))
	
.LABEL $label$7
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $144($2)
	
.LABEL $label$8
	CALL $3($4)
	$global$0 = ($4 + [256])
	return [1]
}

int_32 .FUNC $66 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [240])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $141($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [20])) = $2
	*(($4 + [24])) = ($2 + $7)
	*(($4 + [40])) = $0
	*(($4 + [48])) = (int_64)-1
	*(($4 + [56])) = (int_64)0
	*(($4 + [64])) = [0]
	*(($4 + [80])) = $0
	*(($4 + [88])) = (int_64)-1
	*(($4 + [96])) = (int_64)0
	*(($4 + [104])) = [0]
	*(($4 + [120])) = $0
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [32]) = $0
	*($4 + [72]) = $0
	*($4 + [112]) = $0
	*(($4 + [128])) = (int_64)-1
	*(($4 + [136])) = (int_64)0
	*(($4 + [144])) = [0]
	*(($4 + [160])) = $0
	*(($4 + [168])) = (int_64)-1
	*(($4 + [176])) = (int_64)0
	*(($4 + [184])) = [0]
	*(($4 + [200])) = $0
	*(($4 + [208])) = (int_64)-1
	*(($4 + [216])) = (int_64)0
	*(($4 + [224])) = [0]
	*(($4 + [228])) = [0]
	*($4 + [152]) = $0
	*($4 + [192]) = $0
	*($4 + [232]) = $1
	$3 = ($4 + int_32($5 >> [1]))
	if ( (($5 & [1]) == 0) ){ goto $label$4 }
	$6 = *((*($3) + $6))
	
.LABEL $label$4
	CALL void $3((int_32 $6))
	if ( ($7 <= [513]) ){ goto $label$5 }
	CALL $144($2)
	
.LABEL $label$5
	CALL $3($4)
	$global$0 = ($4 + [240])
	return [1]
}

void .FUNC $61 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_64 $15
	int_64 $16
	$3 = ($global$0 - [256])
	$global$0 = $3
	*($3 + [184]) = $2
	CALL require_auth(*($0))
	$4 = ($0 + [112])
	$6 = *(($0 + [140]))
	$5 = *(($0 + [136]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	if ( ((int_32)*($8 + [20]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [18073])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($0 + [120])), (int_64)4229865212519383040, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $23($4, $7)
	if ( ((int_32)*($8 + [20]) == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$1
	$9 = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [16971])
	CALL eosio_assert(((uint_64)(CASTING uint_64)(uint_32 ((int_32)(*(($8 + [12])) - *($8 + [8])) / (int_32)[56])) > (uint_64)$2), [16996])
	$10 = ($0 + [72])
	$12 = (CASTING uint_32)(uint_64 $2)
	$11 = *($8 + [8])
	$13 = (uint_64)*((($11 + ((int_32)$12 * (int_32)[56])) + [24])) >> (uint_64)(int_64)8)
	$6 = *(($0 + [100]))
	$5 = *(($0 + [96]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$8:
	$7 = ($6 + [-24])
	$14 = *($7)
	if ( ((int_64)(uint_64)*($14 + [8]) >> (uint_64)(int_64)8) == (int_64)$13) ){ goto $label$7 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$6 }
	if ( ((int_32)*($14 + [120]) == (int_32)$10) ){ goto $label$9 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$9
	$9 = $14
	goto $label$5 
	
.LABEL $label$6
	$7 = CALL db_find_i64(*($10), *(($0 + [80])), (int_64)-3617352132944662528, $13)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$9 = CALL $12($10, $7)
	if ( ((int_32)*($9 + [120]) == (int_32)$10) ){ goto $label$5 }
	CALL eosio_assert([0], [18073])
	
.LABEL $label$5
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [17020])
	*($3 + [8]) = $2
	*($3) = $1
	CALL $129(($3 + [48]), [17177], $3)
	$1 = *($0)
	$13 = *($9 + [16])
	*(($3 + [24])) = [0]
	*($3 + [16]) = (int_64)0
	$7 = CALL $138(($3 + [48]))
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$13 }
	*($3 + [16]) = ($7 << [1])
	$6 = (($3 + [16]) | [1])
	if ( $7 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$5 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3 + [16]) = ($5 | [1])
	*($3 + [24]) = $6
	*($3 + [20]) = $7
	
.LABEL $label$12
	CALL memcpy($6, ($3 + [48]), $7)
	
.LABEL $label$11
	*(($6 + $7)) = [0]
	$7 = ($11 + ((int_32)$12 * (int_32)[56]))
	*(($6 = ($3 + [40]))) = *(($7 + [24]))
	$2 = *($7)
	$15 = *($7 + [16])
	$16 = *($3 + [16])
	*($3 + [16]) = (int_64)0
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	*($3 + [32]) = $15
	$15 = *($0)
	*(($7 = CALL _Znwj([16]))) = $1
	*($7 + [8]) = (int_64)3617214756542218240
	*(($14 = ($3 + [232]))) = $5
	*((($3 + [192]) + [24])) = *($6)
	*($3 + [240]) = $7
	*($3 + [192]) = $15
	*($3 + [200]) = $2
	*($3 + [224]) = $16
	$7 = ($7 + [16])
	*($3 + [248]) = $7
	*($3 + [244]) = $7
	*($3 + [208]) = *($3 + [32])
	CALL $36($13, (int_64)-3617168760277827584, ($3 + [240]), ($3 + [192]))
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*($14))
	
.LABEL $label$14
	$7 = *($3 + [240])
	if ( ($7 == 0) ){ goto $label$15 }
	*($3 + [244]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$15
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$16 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$16
	$1 = *($0)
	*($3 + [192]) = ($3 + [184])
	if ( $8 ){ goto $label$17 }
	CALL eosio_assert([0], [17634])
	
.LABEL $label$17
	CALL $62($4, $8, $1, ($3 + [192]))
	if ( ((int_32)*(($8 + [12])) != (int_32)*(($8 + [8]))) ){ goto $label$18 }
	if ( $8 ){ goto $label$19 }
	CALL eosio_assert([0], [18306])
	CALL eosio_assert([0], [18340])
	
.LABEL $label$19
	$7 = CALL db_next_i64(*($8 + [24]), ($3 + [192]))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$20 }
	CALL $23($4, $7)
	
.LABEL $label$20
	CALL $47($4, $8)
	
.LABEL $label$18
	$global$0 = ($3 + [256])
	return (unreachable)
	
.LABEL $label$10
	CALL $112(($3 + [16]))
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	$6 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [18124])
	
.LABEL $label$5
	$2 = CALL $141($4)
	$6 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = $0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17472])
	
.LABEL $label$7
	CALL memcpy($5, $2, [8])
	*($3 + [24]) = (int_64)0
	$7 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$8 }
	CALL eosio_assert([0], [17472])
	
.LABEL $label$8
	CALL memcpy(($3 + [24]), $7, [8])
	$8 = *($3 + [24])
	*(($5 + [8])) = $8
	*($5 + [20]) = $1
	*($3 + [16]) = $5
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	*($3 + [24]) = $8)
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$4 = *($7)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$11 }
	*($4 + [8]) = $8
	*($4 + [16]) = $1
	*($3 + [16]) = [0]
	*($4) = $5
	*($7) = ($4 + [24])
	if ( $6 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $82(($0 + [24]), ($3 + [16]), ($3 + [24]), ($3 + [12]))
	if ( ($6 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $144($2)
	
.LABEL $label$9
	$1 = *($3 + [16])
	*($3 + [16]) = [0]
	if ( ($1 == 0) ){ goto $label$12 }
	CALL _ZdlPv($1)
	
.LABEL $label$12
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [160])
	$global$0 = $3
	CALL memory()
	*($3 + [144]) = [17231]
	*($3 + [148]) = CALL $138([17231])
	*($3 + [64]) = *($3 + [144])
	CALL $19(($3 + [152]), ($3 + [64]))
	if ( ((int_64)$1 != (int_64)6138663591592764928) ){ goto $label$1 }
	*($3 + [128]) = [16648]
	*($3 + [132]) = CALL $138([16648])
	*($3 + [56]) = *($3 + [128])
	CALL $19(($3 + [136]), ($3 + [56]))
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$1 }
	*($3 + [124]) = [0]
	*($3 + [120]) = [1]
	*($3 + [48]) = *($3 + [120])
	CALL $64($0, (int_64)6138663591592764928, ($3 + [48]))
	
.LABEL $label$1
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$8 }
	if ( ((int_64)$2 > (int_64)-4417247484950609921) ){ goto $label$7 }
	if ( ((int_64)$2 == (int_64)-6215964313320947712) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)-5001342335392940032) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)-4994130327958978560) ){ goto $label$2 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [2]
	*($3 + [32]) = *($3 + [80])
	CALL $65($1, $1, ($3 + [32]))
	
.LABEL $label$8
	CALL eosio_exit([0])
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4417247484950609920) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4417017204164263936) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$2 }
	*($3 + [116]) = [0]
	*($3 + [112]) = [3]
	*($3) = *($3 + [112])
	CALL $66($1, $1, $3)
	CALL eosio_exit([0])
	
.LABEL $label$6
	*($3 + [92]) = [0]
	*($3 + [88]) = [4]
	*($3 + [24]) = *($3 + [88])
	CALL $67($1, $1, ($3 + [24]))
	CALL eosio_exit([0])
	
.LABEL $label$5
	*($3 + [76]) = [0]
	*($3 + [72]) = [5]
	*($3 + [40]) = *($3 + [72])
	CALL $67($1, $1, ($3 + [40]))
	CALL eosio_exit([0])
	
.LABEL $label$4
	*($3 + [108]) = [0]
	*($3 + [104]) = [6]
	*($3 + [8]) = *($3 + [104])
	CALL $67($1, $1, ($3 + [8]))
	CALL eosio_exit([0])
	
.LABEL $label$3
	*($3 + [100]) = [0]
	*($3 + [96]) = [7]
	*($3 + [16]) = *($3 + [96])
	CALL $68($1, $1, ($3 + [16]))
	CALL eosio_exit([0])
	
.LABEL $label$2
	CALL eosio_assert([0], [17243])
	CALL eosio_exit([0])
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	$4 = ($global$0 - [48])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [20]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [17669])
	
.LABEL $label$1
	if ( ((int_64)*($0) == (int_64)CALL current_receiver()) ){ goto $label$2 }
	CALL eosio_assert([0], [17715])
	
.LABEL $label$2
	$6 = *($1)
	$8 = *(($1 + [12]))
	$3 = (*($1 + [8]) + ((int_32)*(*($3)) * (int_32)[56]))
	$7 = ($3 + [56])
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	$9 = ($8 + [-56])
	
.LOOP $label$6:
	*(($3 + [24])) = *(($3 + [80]))
	*(($3 + [16])) = *(($3 + [72]))
	*(($3 + [8])) = *(($3 + [64]))
	$8 = ($3 + [56])
	*($3) = *($8)
	$7 = ($3 + [32])
	if ( (*($7) & [1]) ){ goto $label$8 }
	*($7) = [0]
	goto $label$7 
	
.LABEL $label$8
	*(*(($3 + [40]))) = [0]
	*(($3 + [36])) = [0]
	
.LABEL $label$7
	CALL $116($7, [0])
	$10 = ($3 + [96])
	*(($7 + [8])) = *($10)
	$11 = ($3 + [88])
	*($7) = *($11)
	*($11) = (int_64)0
	*($10) = [0]
	*(($3 + [48])) = *(($3 + [104]))
	$3 = $8
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$6 }
	$7 = *(($1 + [12]))
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$8 = $3
	
.LABEL $label$4
	
.LOOP $label$9:
	$3 = ($7 + [-56])
	if ( ((*(($7 + [-24])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($7 + [-16])))
	
.LABEL $label$10
	$7 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$3
	*(($3 = ($1 + [12]))) = $8
	if ( ((int_64)$6 == (int_64)*($1)) ){ goto $label$11 }
	CALL eosio_assert([0], [17766])
	$8 = *($3)
	
.LABEL $label$11
	$7 = *($1 + [8])
	$12 = (CASTING uint_64)(uint_32 ((int_32)($8 - $7) / (int_32)[56]))
	$3 = [8]
	
.LOOP $label$12:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$13 }
	
.LOOP $label$14:
	$10 = *($7 + [32])
	$10 = ( *(($7 + [36])) ? uint_32($10 >> [1]) : ($10 & [1]) )
	$3 = (($10 + $3) + [40])
	$12 = (CASTING uint_64)(uint_32 $10)
	
.LOOP $label$15:
	$3 = ($3 + [1])
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	if ( ((int_64)$12) != (int_64)0) ){ goto $label$15 }
	$7 = ($7 + [56])
	if ( ((int_32)$7 != (int_32)$8) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($3 <= [513]) ){ goto $label$17 }
	$11 = CALL $141($3)
	goto $label$16 
	
.LABEL $label$17
	$11 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $11
	
.LABEL $label$16
	*($5 + [4]) = $11
	*($5) = $11
	*($5 + [8]) = ($11 + $3)
	$8 = $11
	if ( ((int_32)$3 > (int_32)[7]) ){ goto $label$18 }
	CALL eosio_assert([0], [17905])
	$8 = *($5 + [4])
	
.LABEL $label$18
	CALL memcpy($8, $1, [8])
	$8 = ($8 + [8])
	*($5 + [4]) = $8
	$12 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [12])) - *(($1 + [8]))) / (int_32)[56]))
	
.LOOP $label$19:
	$7 = (CASTING uint_32)(uint_64 $12)
	$12 = (uint_64)$12 >> (uint_64)(int_64)7
	$10 = ((int_64)$12) != (int_64)0
	*($5 + [24]) = (($10) << [7]) | ($7 & [127]))
	if ( ((int_32)(*(($5 + [8])) - $8) > (int_32)[0]) ){ goto $label$20 }
	CALL eosio_assert([0], [17905])
	$8 = *($5 + [4])
	
.LABEL $label$20
	CALL memcpy($8, ($5 + [24]), [1])
	$8 = ($8 + [1])
	*($5 + [4]) = $8
	if ( $10 ){ goto $label$19 }
	$7 = *(($1 + [12]))
	$8 = *(($1 + [8]))
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$21 }
	$10 = (($5 + [24]) + [12])
	
.LOOP $label$22:
	*($5 + [16]) = $5
	*($5 + [24]) = $8
	*((($5 + [24]) + [8])) = ($8 + [16])
	*($10) = ($8 + [32])
	*((($5 + [24]) + [16])) = ($8 + [48])
	*($5 + [28]) = ($8 + [8])
	CALL $89(($5 + [24]), ($5 + [16]))
	$8 = ($8 + [56])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$22 }
	
.LABEL $label$21
	CALL db_update_i64(*($1 + [24]), $2, $11, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$25 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	CALL $144($11)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$23 }
	
.LABEL $label$24
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [48])
	return 
	
.LABEL $label$23
	$global$0 = ($5 + [48])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = ($global$0 - [16])
	$global$0 = $2
	CALL $102(*($1), *($0))
	CALL $102(*($1), *($0 + [4]))
	$3 = *($1)
	*($2 + [15]) = *(*($0 + [8]))
	$4 = *($3 + [4])
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert([0], [17905])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($4, ($2 + [15]), [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	$3 = *($1)
	*($2 + [14]) = *(*($0 + [12]))
	$4 = *($3 + [4])
	if ( ((int_32)(*($3 + [8]) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$4 = *(($3 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [14]), [1])
	*(($3 = ($3 + [4]))) = (*($3) + [1])
	CALL $90(*($1), *($0 + [16]))
	$global$0 = ($2 + [16])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = *($2)
	$2 = *($0)
	$3 = *($2 + [4])
	$5 = ($3 - $4)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [2]))
	$2 = *($1)
	$1 = *($2)
	
.LOOP $label$1:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$1 = (($5 & [-4]) + $1)
	
.LABEL $label$2
	*($2) = $1
	$3 = *($3)
	$3 = *($0 + [4])
	$4 = *($3 + [4])
	$5 = ($4 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($5 >> [2]))
	
.LOOP $label$3:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$4 }
	$1 = (($5 & [-4]) + $1)
	
.LABEL $label$4
	$1 = ($1 + [2])
	*($2) = $1
	$3 = *($0)
	$0 = *($0 + [16])
	$6 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	
.LOOP $label$5:
	$1 = ($1 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$5 }
	*($2) = $1
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($2) = ($0 + $1)
	
.LABEL $label$6
}

void .FUNC $103 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$7 = ($global$0 - [48])
	$global$0 = $7
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$9 = (*($0) + int_32($8 >> [1]))
	$0 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($9) + $0))
	
.LABEL $label$1
	*($7 + [40]) = [0]
	*($7 + [32]) = (int_64)0
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$4 }
	$10 = int_32($8 >> [2])
	if ( ((uint_32)$10 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$8 = CALL _Znwj($8)
	*(($7 + [40])) = ($8 + ($10 << [2]))
	*($7 + [32]) = $8
	*($7 + [36]) = $8
	$10 = *($2)
	$2 = (*(($2 + [4])) - $10)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($8, $10, $2)
	*($7 + [36]) = ($8 + $2)
	
.LABEL $label$4
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$2 = (*($3 + [4]) - *($3))
	if ( ($2 == 0) ){ goto $label$5 }
	$8 = int_32($2 >> [2])
	if ( ((uint_32)$8 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$2 = CALL _Znwj($2)
	*(($7 + [24])) = ($2 + ($8 << [2]))
	*($7 + [16]) = $2
	*($7 + [20]) = $2
	$8 = *($3)
	$3 = (*(($3 + [4])) - $8)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($2, $8, $3)
	*($7 + [20]) = ($2 + $3)
	
.LABEL $label$5
	$2 = CALL $113($7, $6)
	CALL void $9((int_32 $1), (int_64 ($7 + [32])), (int_32 ($7 + [16])), (int_32 $4), (int_32 $5), (int_32 $2), (int_32 $0))
	if ( ((*($2) & [1]) == 0) ){ goto $label$6 }
	CALL _ZdlPv(*($2 + [8]))
	
.LABEL $label$6
	$2 = *($7 + [16])
	if ( ($2 == 0) ){ goto $label$7 }
	*($7 + [20]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$7
	$2 = *($7 + [32])
	if ( ($2 == 0) ){ goto $label$8 }
	*($7 + [36]) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$global$0 = ($7 + [48])
	return (unreachable)
	
.LABEL $label$3
	CALL $124(($7 + [32]))
	
.LABEL $label$2
	CALL $124(($7 + [16]))
	(unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$8 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$3 }
	$5 = ($0 + [8])
	$7 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[3]) ){ goto $label$5 }
	CALL eosio_assert([0], [17905])
	$4 = *($7)
	
.LABEL $label$5
	CALL memcpy($4, $6, [4])
	$4 = (*($7) + [4])
	*($7) = $4
	$6 = ($6 + [4])
	if ( ((int_32)$8 != (int_32)$6) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $141($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8212])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $141($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17905])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($5, $3, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((int_32)(*($4 + [8]) - $5) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17905])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($5, $6, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = *($6 + [8])
	if ( ((int_32)(*(($4 + [8])) - $3) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17905])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy($3, ($2 + [8]), [8])
	*($5) = (*($5) + [8])
	CALL $90(*($1), *($0 + [12]))
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)(*($0 + [8]) - $1) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17905])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $88 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[56])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[56])) ){ goto $label$6 }
	if ( ($5 == 0) ){ goto $label$3 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$7:
	$6 = ($4 + [-56])
	if ( ((*(($4 + [-24])) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($4 + [-16])))
	
.LABEL $label$8
	$4 = $6
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$7 }
	$4 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$7 = ((int_32)(*($0 + [4]) - $5) / (int_32)[56])
	$6 = ( ($1 + ((int_32)$7 * (int_32)[56])) ? $2 : ((uint_32)$3 > (uint_32)$7) )
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$9 }
	$4 = $1
	
.LOOP $label$10:
	*($5) = *($4)
	*(($5 + [24])) = *(($4 + [24]))
	*(($5 + [16])) = *(($4 + [16]))
	*(($5 + [8])) = *(($4 + [8]))
	CALL $114(($5 + [32]), ($4 + [32]))
	*(($5 + [48])) = *(($4 + [48]))
	$5 = ($5 + [56])
	$4 = ($4 + [56])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$11 }
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$2 }
	$5 = (($1 + ((int_32)$7 * (int_32)[56])) + [32])
	$4 = ($0 + [4])
	$1 = *($4)
	
.LOOP $label$12:
	*(($1 + [24])) = *(($5 + [-8]))
	*(($1 + [16])) = *(($5 + [-16]))
	*(($1 + [8])) = *(($5 + [-24]))
	*($1) = *(($5 + [-32]))
	CALL $113(($1 + [32]), $5)
	*($1 + [48]) = *(($5 + [16]))
	$1 = (*($4) + [56])
	*($4) = $1
	$6 = ($5 + [24])
	$5 = ($5 + [56])
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$6 = ($0 + [4])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($1 + [-56])
	if ( ((*(($1 + [-24])) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($1 + [-16])))
	
.LABEL $label$15
	$1 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$14 }
	
.LABEL $label$13
	*($6) = $5
	return 
	
.LABEL $label$5
	$4 = $5
	
.LABEL $label$4
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[76695845]) ){ goto $label$1 }
	$5 = [76695844]
	$4 = ((int_32)$4 / (int_32)[56])
	if ( ((uint_32)$4 > (uint_32)[38347921]) ){ goto $label$16 }
	$5 = ($4 << [1])
	$5 = ( $3 ? $5 : ($5 <= $3) )
	
.LABEL $label$16
	$4 = ((int_32)$5 * (int_32)[56])
	$5 = CALL _Znwj($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$17:
	*($5) = *($1)
	*(($5 + [24])) = *(($1 + [24]))
	*(($5 + [16])) = *(($1 + [16]))
	*(($5 + [8])) = *(($1 + [8]))
	CALL $113(($5 + [32]), ($1 + [32]))
	*($5 + [48]) = *(($1 + [48]))
	$5 = (*($4) + [56])
	*($4) = $5
	$1 = ($1 + [56])
	if ( ((int_32)$1 != (int_32)$2) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $124($0)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $75($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $116($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $116($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $112($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17472])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$3 = *($0 + [4])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17472])
	$5 = *(($4 + [4]))
	
.LABEL $label$2
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$6 = *($0 + [8])
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17472])
	$5 = *(($4 + [4]))
	
.LABEL $label$3
	CALL memcpy($6, $5, [8])
	$3 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $3
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17472])
	$3 = *($5)
	
.LABEL $label$4
	CALL memcpy(($2 + [8]), $3, [8])
	*($6 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	CALL $87(*($1), *($0 + [12]))
	$4 = *($0 + [16])
	$1 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17472])
	$1 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, $1, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[56]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[56])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[76695845]) ){ goto $label$3 }
	$3 = [76695844]
	$2 = ((int_32)($2 - $4) / (int_32)[56])
	if ( ((uint_32)$2 > (uint_32)[38347921]) ){ goto $label$6 }
	$3 = ($2 << [1])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$4 = CALL _Znwj(((int_32)$3 * (int_32)[56]))
	goto $label$2 
	
.LABEL $label$5
	$2 = ($0 + [4])
	
.LOOP $label$7:
	*(($4 = ($3 + [40]))) = (int_64)0
	*($3 + [48]) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*($4) = [0]
	$3 = (*($2) + [56])
	*($2) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$3 = [0]
	$4 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $124($0)
	
.LABEL $label$2
	$7 = ($4 + ((int_32)$3 * (int_32)[56]))
	$5 = ($4 + ((int_32)$5 * (int_32)[56]))
	$3 = $5
	
.LOOP $label$8:
	*(($2 = ($3 + [40]))) = (int_64)0
	*($3) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [32])) = (int_64)0
	*(($3 + [48])) = (int_64)0
	*($2) = [0]
	$3 = ($3 + [56])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$8 = ($4 + ((int_32)$6 * (int_32)[56]))
	$3 = *($0)
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$10 }
	$10 = ($3 - $9)
	$2 = [0]
	
.LOOP $label$11:
	$1 = ($9 + $2)
	*((($3 = ($5 + $2)) + [-32])) = *(($1 + [-32]))
	*(($3 + [-40])) = *(($1 + [-40]))
	*(($3 + [-48])) = *(($1 + [-48]))
	*(($3 + [-56])) = *(($1 + [-56]))
	$4 = ($1 + [-16])
	*(($3 + [-16])) = *($4)
	$6 = ($1 + [-24])
	*(($3 + [-24])) = *($6)
	*($6) = (int_64)0
	*($4) = [0]
	*(($3 + [-8])) = *(($1 + [-8]))
	$2 = ($2 + [-56])
	if ( ((int_32)$10 != (int_32)$2) ){ goto $label$11 }
	$5 = ($5 + $2)
	$3 = *(($0 + [4]))
	$2 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LABEL $label$9
	*($0) = $5
	*(($0 + [4])) = $8
	*(($0 + [8])) = $7
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($3 + [-56])
	if ( ((*(($3 + [-24])) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($3 + [-16])))
	
.LABEL $label$14
	$3 = $1
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($2 == 0) ){ goto $label$1 }
	CALL _ZdlPv($2)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	$7 = [0]
	
.LOOP $label$1:
	if ( ($3 <= *($5)) ){ goto $label$2 }
	CALL eosio_assert([0], [17468])
	$3 = *($6)
	
.LABEL $label$2
	$8 = *($3)
	$3 = ($3 + [1])
	*($6) = $3
	$7 = ($7 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($8 & [127]) << $7)))
	$7 = ($7 + [7])
	$3 = $3
	if ( ($8 & [128]) ){ goto $label$1 }
	$3 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$8 = *($1 + [4])
	$7 = ((int_32)($8 - $6) / (int_32)[56])
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	CALL $85($1, ($3 - $7))
	$8 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$6 }
	$7 = ($6 + ((int_32)$3 * (int_32)[56]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = ($8 + [-56])
	if ( ((*(($8 + [-24])) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($8 + [-16])))
	
.LABEL $label$9
	$8 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$8 }
	
.LABEL $label$7
	*(($1 + [4])) = $7
	$8 = $7
	
.LABEL $label$6
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($2 + [20])
	
.LOOP $label$10:
	*($2) = $0
	*($2 + [8]) = $3
	*((($2 + [8]) + [8])) = ($3 + [16])
	*($7) = ($3 + [32])
	*((($2 + [8]) + [16])) = ($3 + [48])
	*($2 + [12]) = ($3 + [8])
	CALL $86(($2 + [8]), $2)
	$3 = ($3 + [56])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$10 }
	
.LABEL $label$3
	$global$0 = ($2 + [32])
	return $0
}

int_32 .FUNC $83 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17472])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = (int_64)0
	$5 = ($0 + [8])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $4, [8])
	*($1 + [8]) = *($2 + [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((uint_32)(*($5) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17472])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($3, $4, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17472])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [32])) = *($2 + [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [40])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17472])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [48])) = *($2 + [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [56])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [17472])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [64])) = *($2 + [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [72])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$10
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [17472])
	$4 = *(($0 + [4]))
	
.LABEL $label$11
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [80])) = *($2 + [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [88])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$12
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [17472])
	$4 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy(($2 + [8]), $4, [8])
	*(($1 + [96])) = *($2 + [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [104])
	$6 = ($0 + [8])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$14 }
	CALL eosio_assert([0], [17472])
	$4 = *($3)
	
.LABEL $label$14
	CALL memcpy($5, $4, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$1 = ($1 + [112])
	if ( ((uint_32)(*($6) - $4) > (uint_32)[7]) ){ goto $label$15 }
	CALL eosio_assert([0], [17472])
	$4 = *(($0 + [4]))
	
.LABEL $label$15
	CALL memcpy($1, $4, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $82 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = ($0 + [8])
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$5 }
	$8 = [2]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	goto $label$3 
	
.LABEL $label$4
	$8 = [3]
	
.LABEL $label$3
	
.LOOP $label$6:
	goto $label$10 
	
.LABEL $label$12
	$4 = *($7)
	if ( ((int_32)(*($1) - $4) > (int_32)[1]) ){ goto $label$7 }
	$8 = [2]
	goto $label$6 
	
.LABEL $label$11
	CALL eosio_assert([0], [17905])
	$4 = *($7)
	$8 = [0]
	goto $label$6 
	
.LABEL $label$10
	CALL memcpy($4, $6, [2])
	*($7) = (*($7) + [2])
	CALL $79($0, ($6 + [4]))
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$8 }
	$8 = [3]
	goto $label$6 
	
.LABEL $label$9
	$global$0 = ($2 + [16])
	return $0
	
.LABEL $label$8
	$8 = [1]
	goto $label$6 
	
.LABEL $label$7
	$8 = [0]
	goto $label$6 
	return $8
}

int_32 .FUNC $80 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[3]) ){ goto $label$1 }
	CALL eosio_assert([0], [17905])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [4])
	$4 = (*($3) + [4])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [4])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[1]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, $5, [2])
	$4 = (*($3) + [2])
	*($3) = $4
	$3 = ($1 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[3]) ){ goto $label$3 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [4])
	$3 = (*($4) + [4])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [12])
	$8 = ($0 + [8])
	
.LOOP $label$4:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [14]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$5 }
	CALL eosio_assert([0], [17905])
	$3 = *($4)
	
.LABEL $label$5
	CALL memcpy($3, ($2 + [14]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$4 }
	$4 = ($1 + [16])
	$8 = ($0 + [8])
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert([0], [17905])
	$3 = *(($0 + [4]))
	
.LABEL $label$6
	CALL memcpy($3, $4, [1])
	$3 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $3
	$7 = *($1 + [20])
	
.LOOP $label$7:
	$5 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$6 = ((int_64)$7) != (int_64)0
	*($2 + [15]) = (($6) << [7]) | ($5 & [127]))
	if ( ((int_32)(*($8) - $3) > (int_32)[0]) ){ goto $label$8 }
	CALL eosio_assert([0], [17905])
	$3 = *($4)
	
.LABEL $label$8
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($4) + [1])
	*($4) = $3
	if ( $6 ){ goto $label$7 }
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $144 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16616])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16424]
	$3 = (((int_32)$1 * (int_32)[12]) + [16424])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $141 (int_32 $0)
{
	return CALL $142([8232], $0)
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $141($1)
	
.LABEL $label$2
	*(CALL $125()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $141(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $144($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $143 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8224]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8228])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8224]) = [1]
	$2 = ($2 << [16])
	*([0] + [8228]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8228])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8228]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8224]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8224]) = [1]
	$3 = ($3 << [16])
	*([0] + [8228]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8228])
	
.LABEL $label$10
	*([0] + [8228]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $143($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	if ( ((int_32)*(($1 + [8200])) == (int_32)*($9)) ){ goto $label$10 }
	CALL eosio_assert([0], [18523])
	
.LABEL $label$10
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$11:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$12 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$13 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$13 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$14 }
	
.LABEL $label$13
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$15 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$15
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$12
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$11 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17472])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	*(($4 = ($4 + [4]))) = (*($4) + [8])
	$4 = *($0)
	CALL $95(*($1), ($4 + [8]))
	CALL $95(*($1), ($4 + [20]))
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert([0], [17472])
	$5 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy(($2 + [15]), $5, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*(($4 + [32])) = ((int_32)*($2 + [15]) != (int_32)[0])
	$5 = *($0 + [4])
	$0 = *($1)
	if ( ((int_32)*($0 + [8]) != (int_32)$5) ){ goto $label$3 }
	CALL eosio_assert([0], [17472])
	$5 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy(($2 + [14]), $5, [1])
	*(($0 = ($0 + [4]))) = (*($0) + [1])
	*(($4 + [33])) = ((int_32)*($2 + [14]) != (int_32)[0])
	CALL $87(*($1), ($4 + [36]))
	$global$0 = ($2 + [16])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = [0]
	$3 = *($1)
	$4 = (*(($1 + [12])) - *($1 + [8]))
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = int_32($4 >> [2])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$4 = CALL _Znwj($4)
	*((($2 + [32]) + [8])) = ($4 + ($5 << [2]))
	*($2 + [32]) = $4
	*($2 + [36]) = $4
	$6 = *(($1 + [8]))
	$5 = (*(($1 + [12])) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $6, $5)
	*($2 + [36]) = ($4 + $5)
	
.LABEL $label$3
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$4 = (*(($1 + [24])) - *($1 + [20]))
	if ( ($4 == 0) ){ goto $label$4 }
	$5 = int_32($4 >> [2])
	if ( ((uint_32)$5 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$4 = CALL _Znwj($4)
	*(($2 + [24])) = ($4 + ($5 << [2]))
	*($2 + [16]) = $4
	*($2 + [20]) = $4
	$6 = *(($1 + [20]))
	$5 = (*(($1 + [24])) - $6)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($4, $6, $5)
	*($2 + [20]) = ($4 + $5)
	
.LABEL $label$4
	$1 = CALL $113($2, ($1 + [36]))
	CALL $103($0, $3, ($2 + [32]), ($2 + [16]), *($1 + [32]), *($1 + [33]), $1)
	if ( ((*($1) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*($1 + [8]))
	
.LABEL $label$5
	$1 = *($2 + [16])
	if ( ($1 == 0) ){ goto $label$6 }
	*($2 + [20]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$1 = *($2 + [32])
	if ( ($1 == 0) ){ goto $label$7 }
	*($2 + [36]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$7
	$global$0 = ($2 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $124(($2 + [32]))
	
.LABEL $label$1
	CALL $124(($2 + [16]))
	(unreachable)
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $113(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*($0) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $113(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0)
	$5 = *($4 + [4])
	$4 = *($1)
	if ( ((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17472])
	$5 = *(($4 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $5, [8])
	$6 = (*($5) + [8])
	*(($5 = ($4 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($4 + [8])) - $6) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17472])
	$6 = *($5)
	
.LABEL $label$2
	CALL memcpy(($2 + [8]), $6, [8])
	*($3 + [8]) = *($2 + [8])
	*($5) = (*($5) + [8])
	$4 = *($0)
	$0 = ($4 + [16])
	$6 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $6) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17472])
	$6 = *(($5 + [4]))
	
.LABEL $label$3
	CALL memcpy($0, $6, [8])
	*(($5 = ($5 + [4]))) = (*($5) + [8])
	$0 = ($4 + [24])
	$6 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $6) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17472])
	$6 = *(($5 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $6, [8])
	$6 = (*($6) + [8])
	*(($6 = ($5 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($5 + [8])) - $6) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17472])
	$6 = *(($5 + [4]))
	
.LABEL $label$5
	CALL memcpy(($2 + [8]), $6, [8])
	*(($4 + [32])) = *($2 + [8])
	*(($5 = ($5 + [4]))) = (*($5) + [8])
	$0 = ($4 + [40])
	$6 = *($5 + [4])
	$5 = *($1)
	if ( ((uint_32)(*($5 + [8]) - $6) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17472])
	$6 = *(($5 + [4]))
	
.LABEL $label$6
	CALL memcpy($0, $6, [8])
	$6 = (*($6) + [8])
	*(($6 = ($5 + [4]))) = $6
	*($2 + [8]) = (int_64)0
	if ( ((uint_32)(*(($5 + [8])) - $6) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17472])
	$6 = *(($5 + [4]))
	
.LABEL $label$7
	CALL memcpy(($2 + [8]), $6, [8])
	*(($4 + [48])) = *($2 + [8])
	*(($5 = ($5 + [4]))) = (*($5) + [8])
	$5 = ($4 + [56])
	$4 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $4) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [17472])
	$4 = *(($1 + [4]))
	
.LABEL $label$8
	CALL memcpy($5, $4, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$3 = int_32(($3 - $4) >> [4])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($2 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL _Znwj(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	*(($0 + [4])) = ($3 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $124($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$4 = ($2 + ($6 << [4]))
	$3 = ($2 + ($3 << [4]))
	$6 = $3
	$2 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [8])) = (int_64)0
	$6 = ($6 + [16])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$8 }
	$5 = ($3 + ($1 << [4]))
	$6 = *($0)
	$7 = ($0 + [4])
	$2 = (*($7) - $6)
	$1 = ($3 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $2)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($7) = $5
	*(($0 + [8])) = $4
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($0 + [4])
	if ( ((int_32)(*($0 + [8]) - $3) > (int_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17905])
	$3 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($3, $1, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	*($2 + [8]) = *($1 + [8])
	$5 = ($0 + [8])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$3 = ($1 + [16])
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $3, [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [24])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$4
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = *(($1 + [32]))
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [40])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$6
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = *(($1 + [48]))
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$7
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [56])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$8
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = *(($1 + [64]))
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$9
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [72])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$10 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$10
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = *(($1 + [80]))
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$11 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$11
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [88])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$12 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$12
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	*($2 + [8]) = *(($1 + [96]))
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$13 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$13
	CALL memcpy($4, ($2 + [8]), [8])
	$4 = (*($3) + [8])
	*(($3 = ($0 + [4]))) = $4
	$5 = ($1 + [104])
	$6 = ($0 + [8])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$14 }
	CALL eosio_assert([0], [17905])
	$4 = *($3)
	
.LABEL $label$14
	CALL memcpy($4, $5, [8])
	$4 = (*($3) + [8])
	*($3) = $4
	$1 = ($1 + [112])
	if ( ((int_32)(*($6) - $4) > (int_32)[7]) ){ goto $label$15 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$15
	CALL memcpy($4, $1, [8])
	*(($1 = ($0 + [4]))) = (*($1) + [8])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [17468])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$2 = ($2 + [1])
	*($5) = $2
	$6 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $6)))
	$6 = ($6 + [7])
	$2 = $2
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $3)
	$7 = *($1)
	$4 = *($1 + [4])
	$6 = int_32(($4 - $7) >> [4])
	if ( ((uint_32)$6 >= (uint_32)$2) ){ goto $label$5 }
	CALL $76($1, ($2 - $6))
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((uint_32)$6 <= (uint_32)$2) ){ goto $label$6 }
	$4 = ($7 + ($2 << [4]))
	*(($1 + [4])) = $4
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = ($0 + [4])
	$6 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$7:
	if ( ((uint_32)(*($5) - $6) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [17472])
	$6 = *($2)
	
.LABEL $label$8
	CALL memcpy($7, $6, [8])
	$6 = (*($2) + [8])
	*($2) = $6
	if ( ((uint_32)(*($5) - $6) > (uint_32)[7]) ){ goto $label$9 }
	CALL eosio_assert([0], [17472])
	$6 = *($2)
	
.LABEL $label$9
	CALL memcpy(($7 + [8]), $6, [8])
	$6 = (*($2) + [8])
	*($2) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	
.LABEL $label$3
	return $0
}

void .FUNC $39 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$1 = ($global$0 - [32])
	$global$0 = $1
	*($1 + [8]) = [0]
	*($1) = (int_64)0
	$3 = *($0 + [16])
	$2 = *(($0 + [20]))
	$4 = ($2 - $3)
	$5 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	$6 = [16]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$2 }
	$6 = (($4 & [-16]) + $6)
	
.LABEL $label$2
	$3 = *($0 + [28])
	$2 = *(($0 + [32]))
	$6 = (($6 + $2) - $3)
	$5 = (CASTING uint_64)(uint_32 ($2 - $3))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$3 }
	if ( ($6 == 0) ){ goto $label$5 }
	CALL $37($1, $6)
	$2 = *($1 + [4])
	$6 = *($1)
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	$6 = [0]
	
.LABEL $label$4
	*($1 + [20]) = $6
	*($1 + [16]) = $6
	*($1 + [24]) = $2
	CALL $49(($1 + [16]), $0)
	$6 = *($1)
	CALL send_inline($6, (*($1 + [4]) - $6))
	$6 = *($1)
	if ( ($6 == 0) ){ goto $label$6 }
	*($1 + [4]) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($1 + [32])
}

void .FUNC $36 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [96])
	$global$0 = $4
	*($4 + [16]) = [0]
	*($4 + [8]) = (int_64)0
	$5 = [0]
	$6 = [0]
	$7 = [0]
	$8 = (*($2 + [4]) - *($2))
	if ( ($8 == 0) ){ goto $label$2 }
	$5 = int_32($8 >> [4])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$7 = CALL _Znwj($8)
	$5 = ($7 + ($5 << [4]))
	*(($4 + [16])) = $5
	*($4 + [8]) = $7
	*($4 + [12]) = $7
	$6 = *($2)
	$2 = (*(($2 + [4])) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($7, $6, $2)
	$6 = ($7 + $2)
	*($4 + [12]) = $6
	goto $label$2 
	
.LABEL $label$3
	$6 = $7
	
.LABEL $label$2
	*(($4 + [44])) = $6
	*(($4 + [48])) = $5
	*(($4 + [16])) = [0]
	*((($4 + [24]) + [36])) = [0]
	*($4 + [32]) = $1
	*($4 + [24]) = $0
	*($4 + [40]) = $7
	*($4 + [8]) = (int_64)0
	*($4 + [52 align=4]) = (int_64)0
	$7 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($4 + [52])
	
.LOOP $label$4:
	$7 = ($7 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($7 == 0) ){ goto $label$6 }
	CALL $37($2, $7)
	$2 = *(($4 + [56]))
	$7 = *(($4 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$7 = [0]
	
.LABEL $label$5
	*($4 + [68]) = $7
	*($4 + [64]) = $7
	*($4 + [72]) = $2
	*($4 + [80]) = ($4 + [64])
	*($4 + [88]) = $3
	CALL $98(($4 + [88]), ($4 + [80]))
	CALL $39(($4 + [24]))
	$7 = *($4 + [52])
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [56])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$7
	$7 = *($4 + [40])
	if ( ($7 == 0) ){ goto $label$8 }
	*(($4 + [44])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$8
	$7 = *($4 + [8])
	if ( ($7 == 0) ){ goto $label$9 }
	*($4 + [12]) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$9
	$global$0 = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $124(($4 + [8]))
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $124($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($4) + [1])
	*(($4 = ($0 + [4]))) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$3 }
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$4:
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [17905])
	$4 = *($6)
	
.LABEL $label$5
	CALL memcpy($4, $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	if ( ((int_32)(*($5) - $4) > (int_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [17905])
	$4 = *($6)
	
.LABEL $label$6
	CALL memcpy($4, ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$4 }
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $4) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [17905])
	$4 = *($6)
	
.LABEL $label$2
	CALL memcpy($4, ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	if ( ((int_32)(*(($0 + [8])) - $4) >= (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert([0], [17905])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($4, $7, $6)
	*(($4 = ($0 + [4]))) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	CALL $75(CALL $74($0, ($1 + [16])), ($1 + [28]))
	$2 = *($0 + [4])
	if ( ((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [17472])
	$2 = *(($0 + [4]))
	
.LABEL $label$1
	CALL memcpy($1, $2, [8])
	$3 = (*($2) + [8])
	*(($2 = ($0 + [4]))) = $3
	$4 = ($1 + [8])
	if ( ((uint_32)(*(($0 + [8])) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [17472])
	$3 = *($2)
	
.LABEL $label$2
	CALL memcpy($4, $3, [8])
	return *($2) = (*($2) + [8])
}

int_64 .FUNC $33 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	float_64 $8
	$7 = *($4)
	$6 = CALL $138([16929])
	if ( ((int_32)$6 != (int_32)( *($4 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$5 }
	if ( (CALL $117($4, [0], [-1], [16929], $6) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	$7 = *($4)
	$6 = CALL $138([16936])
	if ( ((int_32)$6 != (int_32)( *(($4 + [4])) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$3 }
	if ( CALL $117($4, [0], [-1], [16936], $6) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = *($3)
	$6 = CALL $138([16943])
	if ( ((int_32)$6 != (int_32)( *($3 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$3 }
	if ( (CALL $117($3, [0], [-1], [16943], $6) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = *($4)
	$3 = ($4 + [4])
	$6 = CALL $138([16929])
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$9 }
	if ( (CALL $117($4, [0], [-1], [16929], $6) == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$7 = *($4)
	$6 = CALL $138([16936])
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$10 }
	if ( (CALL $117($4, [0], [-1], [16936], $6) == 0) ){ goto $label$7 }
	
.LABEL $label$10
	$7 = *($4)
	$3 = ($4 + [4])
	$6 = CALL $138([16943])
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$11 }
	if ( (CALL $117($4, [0], [-1], [16943], $6) == 0) ){ goto $label$6 }
	
.LABEL $label$11
	$7 = *($4)
	$6 = CALL $138([16947])
	if ( ((int_32)$6 != (int_32)( *($3) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$12 }
	if ( CALL $117($4, [0], [-1], [16947], $6) ){ goto $label$12 }
	$8 = (float_64)12
	if ( (*($1) & [255]) ){ goto $label$1 }
	
.LABEL $label$12
	$7 = [1]
	$3 = *($4)
	$6 = CALL $138([16959])
	if ( ((int_32)$6 != (int_32)( *(($4 + [4])) ? uint_32($3 >> [1]) : ($3 & [1]) )) ){ goto $label$13 }
	$7 = ((int_32)CALL $117($4, [0], [-1], [16959], $6) != (int_32)[0])
	
.LABEL $label$13
	$8 = ( (float_64)1 ? ( (float_64)12 ? (float_64)1 : *($2) ) : $7 )
	goto $label$1 
	
.LABEL $label$8
	$8 = (float_64)1.95
	goto $label$1 
	
.LABEL $label$7
	$8 = (float_64)2
	goto $label$1 
	
.LABEL $label$6
	$8 = (float_64)9
	goto $label$1 
	
.LABEL $label$2
	$8 = (float_64)1
	
.LABEL $label$1
	$8 = ((float_64)$8 * (float_64)(CASTING float_64)(int_64 *($5)))
	if ( ((float_64)(float_64)|$8| < (float_64)(float_64)9223372036854775808) ){ goto $label$14 }
	return (int_64)-9223372036854775808
	
.LABEL $label$14
	return (Rounds 0)($8)
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = (int_64)1
	$5 = *($0)
	$4 = *($4 + [4])
	*(($1 + [24])) = *(($4 + [8]))
	*($1 + [16]) = *($4)
	$4 = CALL $138([8192])
	if ( ($4 <= [8]) ){ goto $label$4 }
	CALL eosio_assert([0], [17260])
	goto $label$3 
	
.LABEL $label$4
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$6 = (int_64)0
	
.LOOP $label$5:
	$7 = *(($4 + [8191]))
	if ( ((($7 + [-65]) & [255]) <= [26]) ){ goto $label$6 }
	CALL eosio_assert([0], [17305])
	
.LABEL $label$6
	$6 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56))
	$4 = ($4 + [-1])
	if ( $4 ){ goto $label$5 }
	$8 = ((int_64)((int_64)$6 << (int_64)8) | (int_64)4)
	goto $label$1 
	
.LABEL $label$2
	$8 = (int_64)4
	
.LABEL $label$1
	$6 = (uint_64)$8 >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$9 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$6 = $9
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$10
	$6 = $9
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$10 = ($4 + [1])
	$4 = $10
	if ( $7 ){ goto $label$11 }
	$4 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[6]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	CALL eosio_assert([0], [17407])
	
.LABEL $label$7
	*($1 + [32]) = (int_64)0
	*(($1 + [40])) = $8
	*($1 + [48]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$7 = $2
	$4 = ($7 + [-64])
	$global$0 = $4
	*($3 + [20]) = $4
	*($3 + [16]) = $4
	*($3 + [24]) = ($7 + [-12])
	CALL $92(($3 + [16]), $1)
	$6 = *($1)
	*($1 + [56]) = CALL db_store_i64(*($5 + [8]), (int_64)-6030912129794572288, *(*($0 + [8])), $6, $4, [52])
	if ( (uint_64)($6 <= *($5 + [16])) ){ goto $label$12 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$12
	$6 = *(($5 + [8]))
	$9 = *(*(($0 + [8])))
	$8 = *($1)
	CALL __floatditf($3, (int_64))((int_64)0 - *($1 + [16])))
	*($3 + [40]) = *(($3 + [8]))
	*($3 + [32]) = *($3)
	*($1 + [60]) = CALL db_idx_long_double_store($6, (int_64)-6030912129794572288, $9, $8, ($3 + [32]))
	$global$0 = ($3 + [48])
}

void .FUNC $31 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $124($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $129 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$2 = CALL $126([9], $0, [-1], $1, $2)
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $127 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
}