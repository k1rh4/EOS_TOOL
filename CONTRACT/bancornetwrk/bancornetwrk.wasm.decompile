(data (i32.const 4) "\80e\00\00")
(data (i32.const 32) ",\00")
(data (i32.const 48) " \00")
(data (i32.const 64) "invalid quantity in transfer\00")
(data (i32.const 96) "zero quantity is disallowed in transfer\00")
(data (i32.const 144) "bad path format\00")
(data (i32.const 160) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 224) "unknown token\00")
(data (i32.const 240) "unknown converter\00")
(data (i32.const 272) "token disabled\00")
(data (i32.const 288) "convertor disabled\00")
(data (i32.const 320) "active\00")
(data (i32.const 336) "transfer\00")
(data (i32.const 352) "write\00")
(data (i32.const 368) "error reading iterator\00")
(data (i32.const 400) "read\00")
(data (i32.const 416) "cannot pass end iterator to erase\00")
(data (i32.const 464) "cannot increment end iterator\00")
(data (i32.const 496) "object passed to erase is not in multi_index\00")
(data (i32.const 544) "cannot erase objects in table of another contract\00")
(data (i32.const 608) "attempt to remove object that was not in multi_index\00")
(data (i32.const 672) "cannot pass end iterator to modify\00")
(data (i32.const 720) "object passed to modify is not in multi_index\00")
(data (i32.const 768) "cannot modify objects in table of another contract\00")
(data (i32.const 832) "updater cannot change primary key when modifying an object\00")
(data (i32.const 896) "cannot create objects in table of another contract\00")
(data (i32.const 960) "regtoken\00")
(data (i32.const 976) "regconverter\00")
(data (i32.const 992) "clear\00")
(data (i32.const 1008) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 1072) "invalid symbol name\00")
(data (i32.const 1104) "get\00")
(data (i32.const 9504) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_find_i64" (func $fimport$4 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$5 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$7 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$8 (param i32)))
(import "env" "db_store_i64" (func $fimport$9 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$10 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$11 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$12 (param i32)))
(import "env" "memcpy" (func $fimport$13 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$16 (param i64)))
(import "env" "require_auth2" (func $fimport$17 (param i64 i64)))
(import "env" "send_inline" (func $fimport$18 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_" (func $5))
(export "_Z9buildMemo20memoConvertStructure" (func $7))
(export "_Z9parseMemoNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE" (func $8))
(export "_Z7nextHop20memoConvertStructure" (func $10))
(export "_ZN13BancorNetwork2onERKN5eosio8currency8transferEy" (func $11))
(export "_ZN13BancorNetwork7onclearERKNS_5clearE" (func $22))
(export "_ZN13BancorNetwork14onregconverterERKNS_12regconverterE" (func $25))
(export "_ZN13BancorNetwork10onregtokenERKNS_8regtokenE" (func $26))
(export "_ZN13BancorNetwork5applyEyy" (func $27))
(export "apply" (func $35))
(export "malloc" (func $36))
(export "free" (func $39))
(export "memchr" (func $52))
(export "memcmp" (func $53))
(export "strlen" (func $54))
(table $0 0 anyfunc)




int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [352])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [352])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [352])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [352])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9492])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9300]
	$1 = (((int_32)$2 * (int_32)[12]) + [9300])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [16])
	$3 = $2
	*([0] + [4]) = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [400])
	CALL memcpy($0, $2, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [400])
	CALL memcpy(($3 + [15]), ($2 + [8]), [1])
	*($0 + [8]) = ((int_32)*($3 + [15]) != (int_32)[0])
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [1008])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [1072])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $32($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $40(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $49($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $41($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $41($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $40(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $49($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $41($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $41($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [608])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $41($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $41($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC _ZN13BancorNetwork7onclearERKNS_5clearE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	$5 = CALL db_lowerbound_i64(*($0 + [56]), *(($0 + [64])), (int_64)4983150933051965440, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$2 = ($0 + [56])
	$4 = CALL $12($2, $5)
	
.LOOP $label$2:
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$5 = [0]
	$3 = CALL db_next_i64(*($4 + [20]), ($6 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $12($2, $3)
	
.LABEL $label$3
	CALL $23($2, $4)
	$4 = $5
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$1
	$5 = CALL db_lowerbound_i64(*($0 + [16]), *(($0 + [24])), (int_64)-3665743729458675712, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$2 = ($0 + [16])
	$4 = CALL $13($2, $5)
	
.LOOP $label$5:
	CALL eosio_assert([1], [416])
	CALL eosio_assert([1], [464])
	$5 = [0]
	$3 = CALL db_next_i64(*($4 + [20]), ($6 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	$5 = CALL $13($2, $3)
	
.LABEL $label$6
	CALL $24($2, $4)
	$4 = $5
	if ( $5 ){ goto $label$5 }
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN13BancorNetwork14onregconverterERKNS_12regconverterE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	$2 = *($1)
	$3 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$5), [160])
	$9 = *($0)
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4983150933051965440, $2)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $12($5, $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$5), [160])
	$9 = *($0)
	
.LABEL $label$6
	CALL eosio_assert([1], [672])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$5), [720])
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [768])
	$2 = *($7)
	$6 = *($1)
	*($7) = $6
	*($7 + [8]) = *($1 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)$6), [832])
	CALL eosio_assert([1], [352])
	CALL memcpy($10, $7, [8])
	*($10 + [24]) = *($7 + [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($10 | [8]), ($10 + [24]), [1])
	CALL db_update_i64(*($7 + [20]), $9, $10, [9])
	$7 = ($0 + [72])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$5
	$9 = *($0)
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*(($0 + [56])) == (int_64)CALL $fimport$2()), [896])
	*(($7 = CALL $40([32])) + [16]) = $5
	*($7) = *($1)
	*($7 + [8]) = *($1 + [8])
	CALL eosio_assert([1], [352])
	CALL memcpy($10, $7, [8])
	*($10 + [24]) = *($7 + [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($10 | [8]), ($10 + [24]), [1])
	$2 = *($7)
	$8 = CALL db_store_i64(*(($0 + [64])), (int_64)4983150933051965440, $9, $2, $10, [9])
	*($7 + [20]) = $8
	$5 = ($0 + [72])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$8 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($10 + [24]) = $7
	$2 = *($7)
	*($10) = $2
	*($10 + [20]) = $8
	$4 = ($0 + [84])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [88]))) ){ goto $label$10 }
	*($5 + [8]) = $2
	*($5 + [16]) = $8
	*($10 + [24]) = [0]
	*($5) = $7
	*($4) = ($5 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $21(($0 + [80]), ($10 + [24]), $10, ($10 + [20]))
	
.LABEL $label$9
	$7 = *($10 + [24])
	*($10 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $41($7)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [496])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [544])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [608])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $41($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $41($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC _ZN13BancorNetwork5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [336]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$10 }
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$9 }
	
.LABEL $label$10
	if ( ((int_64)*($0 + [8]) != (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [960]
	$7 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$16 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$3 = ($3 + [165])
	goto $label$14 
	
.LABEL $label$16
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$12
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$11 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $29($9)
	CALL _ZN13BancorNetwork10onregtokenERKNS_8regtokenE($0, $9)
	goto $label$7 
	
.LABEL $label$9
	CALL $28($9)
	CALL _ZN13BancorNetwork2onERKN5eosio8currency8transferEy($0, $9, $1)
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $41(*(($9 + [40])))
	goto $label$7 
	
.LABEL $label$8
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [976]
	$7 = (int_64)0
	
.LOOP $label$17:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$18 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$18
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$17 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$21 }
	CALL $30($9)
	CALL _ZN13BancorNetwork14onregconverterERKNS_12regconverterE($0, $9)
	goto $label$7 
	
.LABEL $label$21
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [992]
	$7 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$27 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$3 = ($3 + [165])
	goto $label$25 
	
.LABEL $label$27
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$23
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$22 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	CALL $31()
	CALL _ZN13BancorNetwork7onclearERKNS_5clearE($0, $4)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

void .FUNC _ZN13BancorNetwork10onregtokenERKNS_8regtokenE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	CALL require_auth(*($0))
	$2 = *($1)
	$3 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$1 }
	$7 = ($8 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$8 = $7
	$5 = ($7 + [-24])
	$7 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$3) ){ goto $label$7 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$5), [160])
	$9 = *($0)
	if ( $7 ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$7 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3665743729458675712, $2)
	if ( ((int_32)$7 <= (int_32)[-1]) ){ goto $label$5 }
	$7 = CALL $13($5, $7)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$5), [160])
	$9 = *($0)
	
.LABEL $label$6
	CALL eosio_assert([1], [672])
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$5), [720])
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [768])
	$2 = *($7)
	$6 = *($1)
	*($7) = $6
	*($7 + [8]) = *($1 + [8])
	CALL eosio_assert(((int_64)$2 == (int_64)$6), [832])
	CALL eosio_assert([1], [352])
	CALL memcpy($10, $7, [8])
	*($10 + [24]) = *($7 + [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($10 | [8]), ($10 + [24]), [1])
	CALL db_update_i64(*($7 + [20]), $9, $10, [9])
	$7 = ($0 + [32])
	if ( (uint_64)($2 <= *($7)) ){ goto $label$3 }
	*($7) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	goto $label$3 
	
.LABEL $label$5
	$9 = *($0)
	
.LABEL $label$4
	CALL eosio_assert(((int_64)*(($0 + [16])) == (int_64)CALL $fimport$2()), [896])
	*(($7 = CALL $40([32])) + [16]) = $5
	*($7) = *($1)
	*($7 + [8]) = *($1 + [8])
	CALL eosio_assert([1], [352])
	CALL memcpy($10, $7, [8])
	*($10 + [24]) = *($7 + [8])
	CALL eosio_assert([1], [352])
	CALL memcpy(($10 | [8]), ($10 + [24]), [1])
	$2 = *($7)
	$8 = CALL db_store_i64(*(($0 + [24])), (int_64)-3665743729458675712, $9, $2, $10, [9])
	*($7 + [20]) = $8
	$5 = ($0 + [32])
	if ( (uint_64)($2 <= *($5)) ){ goto $label$8 }
	*($5) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*($10 + [24]) = $7
	$2 = *($7)
	*($10) = $2
	*($10 + [20]) = $8
	$4 = ($0 + [44])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [48]))) ){ goto $label$10 }
	*($5 + [8]) = $2
	*($5 + [16]) = $8
	*($10 + [24]) = [0]
	*($5) = $7
	*($4) = ($5 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $20(($0 + [40]), ($10 + [24]), $10, ($10 + [20]))
	
.LABEL $label$9
	$7 = *($10 + [24])
	*($10 + [24]) = [0]
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $41($7)
	
.LABEL $label$3
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $49 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $48 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $44($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $42 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $41 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $40 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9596])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	return CALL $46($0, $1, CALL $54($1))
}

int_32 .FUNC $46 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $44($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $40(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $41($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $40($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $41($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $51 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $40($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC _Z9parseMemoNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	*(($0 + [40])) = [0]
	*(($0 + [44])) = [0]
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$4 = CALL strlen([32])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*($5 + [32]) = ($4 << [1])
	$2 = (($5 + [32]) | [1])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $40($3)
	*($5 + [32]) = ($3 | [1])
	*($5 + [40]) = $2
	*($5 + [36]) = $4
	
.LABEL $label$6
	CALL memcpy($2, [32], $4)
	
.LABEL $label$5
	*(($2 + $4)) = [0]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_(($5 + [48]), $1, ($5 + [32]))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $41(*($5 + [40]))
	
.LABEL $label$8
	CALL $43(($0 + [12]), *($5 + [48]))
	$2 = *($5 + [48])
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$4 = CALL strlen([48])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	$1 = ($2 + [12])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [16]) = ($4 << [1])
	$2 = (($5 + [16]) | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $40($3)
	*($5 + [16]) = ($3 | [1])
	*($5 + [24]) = $2
	*($5 + [20]) = $4
	
.LABEL $label$10
	CALL memcpy($2, [48], $4)
	
.LABEL $label$9
	*(($2 + $4)) = [0]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_(($5 + [32]), $1, ($5 + [16]))
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$12 }
	CALL $41(*($5 + [24]))
	
.LABEL $label$12
	$4 = *($5 + [32])
	if ( ((int_32)(*($5 + [36]) - $4) != (int_32)[12]) ){ goto $label$14 }
	$2 = *($4)
	$1 = CALL strlen([16])
	if ( ((int_32)$1 != (int_32)( *($4 + [4]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$14 }
	if ( (CALL $48($4, [0], [-1], [16], $1) == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = *($5 + [48])
	*(($5 + [8])) = [0]
	*($5) = (int_64)0
	$4 = CALL strlen([48])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	$1 = ($2 + [12])
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$17 }
	*($5) = ($4 << [1])
	$2 = ($5 | [1])
	if ( $4 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$3 = (($4 + [16]) & [-16])
	$2 = CALL $40($3)
	*($5) = ($3 | [1])
	*($5 + [8]) = $2
	*($5 + [4]) = $4
	
.LABEL $label$16
	CALL memcpy($2, [48], $4)
	
.LABEL $label$15
	*(($2 + $4)) = [0]
	CALL _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_(($5 + [16]), $1, _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_)
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$18 }
	$3 = ($0 + [4])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$20 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$21:
	if ( ((*($4) & [1]) == 0) ){ goto $label$22 }
	CALL $41(*(($4 + [8])))
	
.LABEL $label$22
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$21 }
	$4 = *($0)
	goto $label$19 
	
.LABEL $label$20
	$4 = $1
	
.LABEL $label$19
	*($3) = $1
	CALL $41($4)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$18
	*($0) = *($5 + [16])
	*(($0 + [8])) = *($5 + [24])
	*($5 + [20]) = [0]
	*($5 + [24]) = [0]
	*($5 + [16]) = [0]
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL $41(*($5 + [8]))
	goto $label$1 
	
.LABEL $label$13
	CALL $9($0, [0], [0])
	goto $label$1 
	
.LABEL $label$4
	CALL $42(($5 + [32]))
	
.LABEL $label$3
	CALL $42(($5 + [16]))
	
.LABEL $label$2
	CALL $42($5)
	
.LABEL $label$1
	CALL $43(($0 + [36]), (*($5 + [48]) + [24]))
	CALL $43(($0 + [24]), (*($5 + [48]) + [36]))
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$23 }
	$4 = *($5 + [36])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$25 }
	$0 = ([0] - $2)
	$4 = ($4 + [-12])
	
.LOOP $label$26:
	if ( ((*($4) & [1]) == 0) ){ goto $label$27 }
	CALL $41(*(($4 + [8])))
	
.LABEL $label$27
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $0) != (int_32)[-12]) ){ goto $label$26 }
	$4 = *($5 + [32])
	goto $label$24 
	
.LABEL $label$25
	$4 = $2
	
.LABEL $label$24
	*($5 + [36]) = $2
	CALL $41($4)
	
.LABEL $label$23
	$2 = *($5 + [48])
	if ( ($2 == 0) ){ goto $label$28 }
	$4 = *($5 + [52])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$30 }
	$0 = ([0] - $2)
	$4 = ($4 + [-12])
	
.LOOP $label$31:
	if ( ((*($4) & [1]) == 0) ){ goto $label$32 }
	CALL $41(*(($4 + [8])))
	
.LABEL $label$32
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $0) != (int_32)[-12]) ){ goto $label$31 }
	$4 = *($5 + [48])
	goto $label$29 
	
.LABEL $label$30
	$4 = $2
	
.LABEL $label$29
	*($5 + [52]) = $2
	CALL $41($4)
	
.LABEL $label$28
	*([0] + [4]) = ($5 + [64])
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$7 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[12])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($7 - $6) / (int_32)[12])) ){ goto $label$6 }
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = *($0 + [4])
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$5 }
	$5 = ([0] - $6)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL $41(*(($7 + [8])))
	
.LABEL $label$8
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $5) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *($0)
	goto $label$4 
	
.LABEL $label$6
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$7 = ($1 + ((int_32)$4 * (int_32)[12]))
	$5 = ( $7 ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$9 }
	
.LOOP $label$10:
	CALL $43($6, $1)
	$6 = ($6 + [12])
	$1 = ($1 + [12])
	if ( ((int_32)$5 != (int_32)$1) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$11 }
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$2 }
	$1 = ($0 + [4])
	$6 = *($1)
	
.LOOP $label$12:
	CALL $50($6, $7)
	$6 = (*($1) + [12])
	*($1) = $6
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$12 }
	goto $label$2 
	
.LABEL $label$11
	$2 = ($0 + [4])
	$1 = *($2)
	if ( ((int_32)$1 == (int_32)$6) ){ goto $label$13 }
	$7 = ([0] - $6)
	$1 = ($1 + [-12])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $41(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $7) != (int_32)[-12]) ){ goto $label$14 }
	
.LABEL $label$13
	*($2) = $6
	return 
	
.LABEL $label$5
	$7 = $6
	
.LABEL $label$4
	*(($0 + [4])) = $6
	CALL $41($7)
	$7 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$6 = [357913941]
	$7 = ((int_32)$7 / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$16 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	
.LABEL $label$16
	$7 = ((int_32)$6 * (int_32)[12])
	$6 = CALL $40($7)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $7)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$2 }
	$7 = ($0 + [4])
	
.LOOP $label$17:
	CALL $50($6, $1)
	$6 = (*($7) + [12])
	*($7) = $6
	$1 = ($1 + [12])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$17 }
	
.LABEL $label$2
	return (unreachable)
	
.LABEL $label$1
	CALL $49($0)
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $40(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $49($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $50($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $41(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $41($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z9buildMemo20memoConvertStructure (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = CALL strlen([16])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$5 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $40($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$4
	CALL memcpy($6, [16], $2)
	
.LABEL $label$3
	$5 = [0]
	*(($6 + $2)) = [0]
	$2 = *($1)
	if ( ((int_32)*($1 + [4]) == (int_32)$2) ){ goto $label$6 }
	$6 = [0]
	
.LOOP $label$7:
	if ( ($5 == 0) ){ goto $label$8 }
	CALL $47($7, [48])
	$2 = *($1)
	
.LABEL $label$8
	$3 = *($2)
	$4 = ($3 & [1])
	$2 = ($2 + $5)
	CALL $46($7, ( *(($2 + [8])) ? ($2 + [1]) : $4 ), ( *(($2 + [4])) ? uint_32($3 >> [1]) : $4 ))
	$5 = ($5 + [12])
	$2 = *($1)
	$6 = ($6 + [1])
	if ( ($6 <= ((int_32)(*(($1 + [4])) - $2) / (int_32)[12])) ){ goto $label$7 }
	
.LABEL $label$6
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = CALL strlen([16])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$11 }
	*($0) = ($5 << [1])
	$2 = ($0 + [1])
	if ( $5 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$6 = (($5 + [16]) & [-16])
	$2 = CALL $40($6)
	*($0) = ($6 | [1])
	*($0 + [8]) = $2
	*($0 + [4]) = $5
	
.LABEL $label$10
	CALL memcpy($2, [16], $5)
	
.LABEL $label$9
	*(($2 + $5)) = [0]
	$5 = *($1 + [12])
	$2 = ($5 & [1])
	CALL $46($0, ( *(($1 + [20])) ? ($1 + [13]) : $2 ), ( *(($1 + [16])) ? uint_32($5 >> [1]) : $2 ))
	CALL $47($0, [32])
	$5 = *($7)
	$2 = ($5 & [1])
	CALL $46($0, ( *($7 + [8]) ? ($7 | [1]) : $2 ), ( *($7 + [4]) ? uint_32($5 >> [1]) : $2 ))
	CALL $47($0, [32])
	$5 = *($1 + [36])
	$2 = ($5 & [1])
	CALL $46($0, ( *(($1 + [44])) ? ($1 + [37]) : $2 ), ( *(($1 + [40])) ? uint_32($5 >> [1]) : $2 ))
	CALL $47($0, [32])
	$5 = *($1 + [24])
	$2 = ($5 & [1])
	CALL $46($0, ( *(($1 + [32])) ? ($1 + [25]) : $2 ), ( *(($1 + [28])) ? uint_32($5 >> [1]) : $2 ))
	if ( ((*($7) & [1]) == 0) ){ goto $label$12 }
	CALL $41(*(($7 + [8])))
	
.LABEL $label$12
	*([0] + [4]) = ($7 + [16])
	return (unreachable)
	
.LABEL $label$2
	CALL $42($7)
	
.LABEL $label$1
	CALL $42($0)
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z5splitRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [16])
	*([0] + [4]) = $14
	$11 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($2 + [1])
	$3 = ($1 + [1])
	$12 = *($1 + [4])
	$7 = *($1)
	$8 = ($2 + [4])
	
.LOOP $label$1:
	$9 = ($7 & [1])
	$12 = ( $12 ? uint_32(($7 & [254]) >> [1]) : $9 )
	if ( ($12 <= $11) ){ goto $label$3 }
	$13 = $11
	$10 = ($7 & [1])
	$7 = *($2)
	$7 = ( *($8) ? uint_32($7 >> [1]) : $10 )
	if ( ($7 == 0) ){ goto $label$2 }
	$12 = ($5 + $11)
	$5 = ( *(($1 + [8])) ? $3 : $9 )
	$9 = ($5 + $12)
	$13 = ($9 - $12)
	if ( ((int_32)$13 < (int_32)$7) ){ goto $label$3 }
	$6 = ( *(($2 + [8])) ? $4 : $10 )
	$10 = *($6)
	
.LOOP $label$4:
	$13 = (($13 - $7) + [1])
	if ( ($13 == 0) ){ goto $label$3 }
	$13 = CALL memchr($12, $10, $13)
	if ( ($13 == 0) ){ goto $label$3 }
	if ( (CALL memcmp($13, $6, $7) == 0) ){ goto $label$5 }
	$12 = ($13 + [1])
	$13 = ($9 - $12)
	if ( ((int_32)$13 >= (int_32)$7) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$3 }
	$13 = ($13 - $5)
	if ( ((int_32)$13 != (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = *($1)
	if ( ($7 & [1]) ){ goto $label$6 }
	$13 = uint_32($7 >> [1])
	goto $label$2 
	
.LABEL $label$6
	$13 = *(($1 + [4]))
	
.LABEL $label$2
	CALL $51($14, $1, $11, ($13 - $11), $1)
	$11 = ($0 + [4])
	$7 = *($11)
	if ( ((int_32)$7 == (int_32)*(($0 + [8]))) ){ goto $label$8 }
	CALL $50($7, $14)
	*($11) = (*($11) + [12])
	goto $label$7 
	
.LABEL $label$8
	CALL $6($0, $14)
	
.LABEL $label$7
	$11 = *($2)
	$9 = *($8)
	if ( ((*($14) & [1]) == 0) ){ goto $label$9 }
	CALL $41(*(($14 + [8])))
	
.LABEL $label$9
	$7 = *($1)
	$12 = *(($1 + [4]))
	$10 = ( $12 ? uint_32($7 >> [1]) : ($7 & [1]) )
	if ( ((uint_32)$13 >= (uint_32)$10) ){ goto $label$10 }
	$11 = (( $9 ? uint_32($11 >> [1]) : ($11 & [1]) ) + $13)
	if ( ($11 <= $10) ){ goto $label$1 }
	
.LABEL $label$10
	*([0] + [4]) = ($14 + [16])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $40($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $49($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $41($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [352])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $19(*($1), ($0 + [32]))
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $14($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [352])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [352])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $18(CALL $17($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [352])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [352])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [352])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC _Z7nextHop20memoConvertStructure (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($0) = (int_64)0
	*($0 + [8 align=4]) = (int_64)0
	*($0 + [24 align=4]) = (int_64)0
	*(($0 + [16])) = (int_64)0
	*(($0 + [32])) = (int_64)0
	$6 = [0]
	*(($0 + [40])) = [0]
	*(($0 + [44])) = [0]
	*($10 + [8]) = [0]
	*($10) = (int_64)0
	$3 = (*($1 + [4]) - *($1))
	$9 = ((int_32)$3 / (int_32)[12])
	$7 = [0]
	$8 = [0]
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ((uint_32)$9 >= (uint_32)[357913942]) ){ goto $label$1 }
	$8 = CALL $40($3)
	$6 = ($8 + ((int_32)$9 * (int_32)[12]))
	*(($10 + [8])) = $6
	*($10) = $8
	*($10 + [4]) = $8
	$9 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$9) ){ goto $label$5 }
	$7 = $8
	
.LOOP $label$6:
	CALL $50($7, $3)
	$7 = ($7 + [12])
	$3 = ($3 + [12])
	if ( ((int_32)$9 != (int_32)$3) ){ goto $label$6 }
	*($10 + [4]) = $7
	$2 = *($0)
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$7 = $8
	
.LABEL $label$4
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$3 = *($4)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$8 }
	$9 = ([0] - $2)
	$3 = ($3 + [-12])
	
.LOOP $label$9:
	if ( ((*($3) & [1]) == 0) ){ goto $label$10 }
	CALL $41(*(($3 + [8])))
	
.LABEL $label$10
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $9) != (int_32)[-12]) ){ goto $label$9 }
	$3 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$3 = $2
	
.LABEL $label$7
	*($4) = $2
	CALL $41($3)
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$2
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	$9 = ($8 + [36])
	if ( ((int_32)$7 == (int_32)$9) ){ goto $label$12 }
	$9 = ($7 + [-36])
	
.LOOP $label$13:
	if ( (*($8) & [1]) ){ goto $label$15 }
	*($8) = [0]
	goto $label$14 
	
.LABEL $label$15
	*(*(($8 + [8]))) = [0]
	*(($8 + [4])) = [0]
	
.LABEL $label$14
	CALL $45($8, [0])
	$3 = ($8 + [36])
	$5 = *($3)
	*(($8 + [40])) = [0]
	*($3) = [0]
	$3 = ($8 + [44])
	*(($8 + [8])) = *($3)
	*($8) = $5
	*($3) = [0]
	$8 = ($8 + [12])
	if ( ((int_32)$9 != (int_32)$8) ){ goto $label$13 }
	$9 = *(($0 + [4]))
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$11 }
	
.LABEL $label$12
	
.LOOP $label$16:
	$3 = ($9 + [-12])
	if ( ((*($3) & [1]) == 0) ){ goto $label$17 }
	CALL $41(*(($9 + [-4])))
	
.LABEL $label$17
	$9 = $3
	if ( ((int_32)$8 != (int_32)$3) ){ goto $label$16 }
	
.LABEL $label$11
	*(($0 + [4])) = $8
	CALL $43(($0 + [12]), ($1 + [12]))
	CALL $43(($0 + [36]), ($1 + [36]))
	CALL $43(($0 + [24]), ($1 + [24]))
	*([0] + [4]) = ($10 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $49($10)
}

void .FUNC _ZN13BancorNetwork2onERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_32 $17
	$17 = (*([0] + [4]) - [192])
	*([0] + [4]) = $17
	if ( ((int_64)*($1 + [8]) != (int_64)*($0 + [8])) ){ goto $label$1 }
	$8 = [0]
	$15 = *($1 + [16])
	if ( ((uint_64)((int_64)$15 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$10 = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$10 = (uint_64)$10 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$10) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$8 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$8 = [0]
	
.LABEL $label$2
	CALL eosio_assert($8, [64])
	CALL eosio_assert(((int_64)$15 != (int_64)0), [96])
	$4 = ($1 + [32])
	CALL $50(($17 + [96]), $4)
	CALL _Z9parseMemoNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(($17 + [112]), ($17 + [96]))
	if ( ((*($17 + [96]) & [1]) == 0) ){ goto $label$7 }
	CALL $41(*($17 + [104]))
	
.LABEL $label$7
	CALL eosio_assert(((uint_32)((int_32)(*($17 + [116]) - *($17 + [112])) / (int_32)[12]) > (uint_32)[2]), [144])
	$9 = *($17 + [112])
	if ( (*($9) & [1]) ){ goto $label$9 }
	$9 = ($9 + [1])
	goto $label$8 
	
.LABEL $label$9
	$9 = *($9 + [8])
	
.LABEL $label$8
	$3 = ($1 + [16])
	$1 = [-1]
	
.LOOP $label$10:
	$8 = ($9 + $1)
	$5 = ($1 + [1])
	$1 = $5
	if ( *(($8 + [1])) ){ goto $label$10 }
	$14 = (CASTING uint_64)(uint_32 $5)
	$10 = (int_64)0
	$15 = (int_64)59
	$11 = (int_64)0
	
.LOOP $label$11:
	$13 = (int_64)0
	if ( ((uint_64)$10 >= (uint_64)$14) ){ goto $label$12 }
	$1 = *($9)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$1 = ($1 + [165])
	goto $label$13 
	
.LABEL $label$14
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$12
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$16 }
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$15 
	
.LABEL $label$16
	$13 = ((int_64)$13 & (int_64)15)
	
.LABEL $label$15
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$13 | (int_64)$11)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$11 }
	$12 = *(($0 + [80]))
	$8 = *(($0 + [84]))
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$17 }
	$9 = ($8 + [-24])
	$5 = ([0] - $12)
	
.LOOP $label$18:
	if ( ((int_64)*(*($9)) == (int_64)$11) ){ goto $label$17 }
	$8 = $9
	$1 = ($9 + [-24])
	$9 = $1
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$18 }
	
.LABEL $label$17
	$9 = ($0 + [56])
	if ( ((int_32)$8 == (int_32)$12) ){ goto $label$20 }
	$12 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($12 + [16]) == (int_32)$9), [160])
	goto $label$19 
	
.LABEL $label$20
	$12 = [0]
	$1 = CALL db_find_i64(*(($0 + [56])), *(($0 + [64])), (int_64)4983150933051965440, $11)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$19 }
	$12 = CALL $12($9, $1)
	CALL eosio_assert(((int_32)*($12 + [16]) == (int_32)$9), [160])
	
.LABEL $label$19
	$6 = *(($0 + [40]))
	$8 = *(($0 + [44]))
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$21 }
	$9 = ($8 + [-24])
	$5 = ([0] - $6)
	
.LOOP $label$22:
	if ( ((int_64)*(*($9)) == (int_64)$2) ){ goto $label$21 }
	$8 = $9
	$1 = ($9 + [-24])
	$9 = $1
	if ( ((int_32)($1 + $5) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	$1 = ($0 + [16])
	if ( ((int_32)$8 == (int_32)$6) ){ goto $label$24 }
	$9 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$1), [160])
	goto $label$23 
	
.LABEL $label$24
	$9 = [0]
	$8 = CALL db_find_i64(*(($0 + [16])), *(($0 + [24])), (int_64)-3665743729458675712, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$23 }
	$9 = CALL $13($1, $8)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$1), [160])
	
.LABEL $label$23
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [224])
	CALL eosio_assert(((int_32)$12 != (int_32)[0]), [240])
	CALL eosio_assert(*($9 + [8]), [272])
	CALL eosio_assert(*($12 + [8]), [288])
	$7 = *($0)
	$10 = (int_64)0
	$13 = (int_64)59
	$9 = [320]
	$14 = (int_64)0
	
.LOOP $label$25:
	if ( ((uint_64)$10 > (uint_64)(int_64)5) ){ goto $label$30 }
	$1 = *($9)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$1 = ($1 + [165])
	goto $label$28 
	
.LABEL $label$30
	$15 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$29
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$27
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$26
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$25 }
	$10 = (int_64)0
	$13 = (int_64)59
	$9 = [336]
	$16 = (int_64)0
	
.LOOP $label$31:
	if ( ((uint_64)$10 > (uint_64)(int_64)7) ){ goto $label$36 }
	$1 = *($9)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$35 }
	$1 = ($1 + [165])
	goto $label$34 
	
.LABEL $label$36
	$15 = (int_64)0
	if ( ((uint_64)$10 <= (uint_64)(int_64)11) ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$35
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$34
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$33
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$32
	$9 = ($9 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$16 = ((int_64)$15 | (int_64)$16)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$31 }
	*((($17 + [8]) + [28])) = *(($3 + [12]))
	*((($17 + [8]) + [24])) = *(($3 + [8]))
	*((($17 + [8]) + [20])) = *(($3 + [4]))
	*($17 + [16]) = $11
	*($17 + [8]) = $7
	*($17 + [24]) = *($3)
	CALL $50((($17 + [8]) + [32]), $4)
	*($17 + [64]) = $16
	*($17 + [56]) = $2
	*(($9 = CALL $40([16]))) = $7
	*($9 + [8]) = $14
	*((($17 + [56]) + [32])) = [0]
	$1 = ($9 + [16])
	*((($17 + [56]) + [24])) = $1
	*((($17 + [56]) + [20])) = $1
	*($17 + [72]) = $9
	*($17 + [84]) = [0]
	*((($17 + [56]) + [36])) = [0]
	$9 = *($17 + [40])
	$1 = ( *((($17 + [8]) + [36])) ? uint_32($9 >> [1]) : ($9 & [1]) )
	$9 = ($1 + [32])
	$10 = (CASTING uint_64)(uint_32 $1)
	$1 = (($17 + [56]) + [28])
	
.LOOP $label$37:
	$9 = ($9 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$37 }
	if ( ($9 == 0) ){ goto $label$39 }
	CALL $14($1, $9)
	$1 = *(($17 + [88]))
	$9 = *(($17 + [84]))
	goto $label$38 
	
.LABEL $label$39
	$1 = [0]
	$9 = [0]
	
.LABEL $label$38
	*($17 + [164]) = $9
	*($17 + [160]) = $9
	*($17 + [168]) = $1
	*($17 + [176]) = ($17 + [160])
	*($17 + [184]) = ($17 + [8])
	CALL $15(($17 + [184]), ($17 + [176]))
	CALL $16(($17 + [160]), ($17 + [56]))
	$9 = *($17 + [160])
	CALL send_inline($9, (*($17 + [164]) - $9))
	$9 = *($17 + [160])
	if ( ($9 == 0) ){ goto $label$40 }
	*($17 + [164]) = $9
	CALL $41($9)
	
.LABEL $label$40
	$9 = *($17 + [84])
	if ( ($9 == 0) ){ goto $label$41 }
	*(($17 + [88])) = $9
	CALL $41($9)
	
.LABEL $label$41
	$9 = *($17 + [72])
	if ( ($9 == 0) ){ goto $label$42 }
	*(($17 + [76])) = $9
	CALL $41($9)
	
.LABEL $label$42
	if ( ((*($17 + [40]) & [1]) == 0) ){ goto $label$43 }
	CALL $41(*(($17 + [48])))
	
.LABEL $label$43
	if ( ((*($17 + [148]) & [1]) == 0) ){ goto $label$44 }
	CALL $41(*(($17 + [156])))
	
.LABEL $label$44
	if ( ((*($17 + [136]) & [1]) == 0) ){ goto $label$45 }
	CALL $41(*(($17 + [144])))
	
.LABEL $label$45
	if ( ((*($17 + [124]) & [1]) == 0) ){ goto $label$46 }
	CALL $41(*(($17 + [132])))
	
.LABEL $label$46
	$8 = *($17 + [112])
	if ( ($8 == 0) ){ goto $label$1 }
	$9 = *($17 + [116])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$48 }
	$1 = ([0] - $8)
	$9 = ($9 + [-12])
	
.LOOP $label$49:
	if ( ((*($9) & [1]) == 0) ){ goto $label$50 }
	CALL $41(*(($9 + [8])))
	
.LABEL $label$50
	$9 = ($9 + [-12])
	if ( ((int_32)($9 + $1) != (int_32)[-12]) ){ goto $label$49 }
	$9 = *($17 + [112])
	goto $label$47 
	
.LABEL $label$48
	$9 = $8
	
.LABEL $label$47
	*($17 + [116]) = $8
	CALL $41($9)
	
.LABEL $label$1
	*([0] + [4]) = ($17 + [192])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [368])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $40([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [400])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [400])
	CALL memcpy(($8 + [16]), ($7 + [8]), [1])
	*($6 + [8]) = ((int_32)*($8 + [16]) != (int_32)[0])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $21(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $41($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [368])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $40([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [400])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [400])
	CALL memcpy(($8 + [16]), ($7 + [8]), [1])
	*($6 + [8]) = ((int_32)*($8 + [16]) != (int_32)[0])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $20(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $41($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $37([1108], $0)
}

int_32 .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $38($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9504])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1104])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $14($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [400])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [96])
	*([0] + [4]) = $3
	*(($3 + [24])) = $0
	*(($3 + [32])) = (int_64)-1
	*(($3 + [40])) = (int_64)0
	*($3 + [8]) = $0
	*($3) = $0
	*($3 + [16]) = $0
	*(($3 + [48])) = [0]
	*($3 + [56]) = $0
	*(($3 + [64])) = $0
	*(($3 + [72])) = (int_64)-1
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*(($3 + [88])) = [0]
	CALL _ZN13BancorNetwork5applyEyy($3, $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $33($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [400])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [400])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [400])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [400])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $34($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $45($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $40($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $45($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $41($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $42($7)
	return (unreachable)
}

void .FUNC $30 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [16])
	$3 = $2
	*([0] + [4]) = $2
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [400])
	CALL memcpy($0, $2, [8])
	CALL eosio_assert(((int_32)$1 != (int_32)[8]), [400])
	CALL memcpy(($3 + [15]), ($2 + [8]), [1])
	*($0 + [8]) = ((int_32)*($3 + [15]) != (int_32)[0])
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $31 ()
{
	int_32 $0
	int_32 $1
	int_32 $2
	$1 = *([0] + [4])
	$2 = $1
	$0 = CALL action_data_size()
	if ( ($0 <= [513]) ){ goto $label$2 }
	$1 = CALL malloc($0)
	goto $label$1 
	
.LABEL $label$2
	$1 = ($1 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$1
	CALL read_action_data($1, $0)
	*([0] + [4]) = $2
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $40($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $38 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9590]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9592])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9590]) = [1]
	$7 = ($7 << [16])
	*([0] + [9592]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9592])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9592]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9590]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9590]) = [1]
	$3 = ($3 << [16])
	*([0] + [9592]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9592])
	
.LABEL $label$8
	*([0] + [9592]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}