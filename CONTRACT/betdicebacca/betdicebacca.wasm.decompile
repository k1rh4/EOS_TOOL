(data (i32.const 4) "`v\00\00")
(data (i32.const 16) "transfer\00")
(data (i32.const 32) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 96) "invalid symbol name\00")
(data (i32.const 128) "read\00")
(data (i32.const 144) "get\00")
(data (i32.const 160) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 224) "Game not found\00")
(data (i32.const 240) "Game not revealed\00")
(data (i32.const 272) "Bets not found or paid\00")
(data (i32.const 304) "cannot pass end iterator to erase\00")
(data (i32.const 352) "cannot increment end iterator\00")
(data (i32.const 384) "object passed to erase is not in multi_index\00")
(data (i32.const 432) "cannot erase objects in table of another contract\00")
(data (i32.const 496) "attempt to remove object that was not in multi_index\00")
(data (i32.const 560) "error reading iterator\00")
(data (i32.const 592) "betdicegroup\00")
(data (i32.const 608) "baccaserver\00")
(data (i32.const 624) "Do: \00")
(data (i32.const 640) "Remove: \00")
(data (i32.const 656) "Nothing to do\00")
(data (i32.const 672) "Symbol amount is not valid\00")
(data (i32.const 704) "Symbol is not valid\00")
(data (i32.const 736) "contract is not supported\00")
(data (i32.const 768) "cannot pass end iterator to modify\00")
(data (i32.const 816) "object passed to modify is not in multi_index\00")
(data (i32.const 864) "cannot modify objects in table of another contract\00")
(data (i32.const 928) "updater cannot change primary key when modifying an object\00")
(data (i32.const 992) "write\00")
(data (i32.const 1008) "cannot create objects in table of another contract\00")
(data (i32.const 1072) "next primary key in table is at autoincrement limit\00")
(data (i32.const 1136) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 1200) "cannot decrement iterator at beginning of table\00")
(data (i32.const 1248) "Cannot new game as there is active game\00")
(data (i32.const 1288) "\00\00\00\d9\\\83\909")
(data (i32.const 1296) ":\00")
(data (i32.const 1300) " \05\00\00")
(data (i32.const 1312) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1360) "DO:\00")
(data (i32.const 1376) "ClearBet:\00")
(data (i32.const 1392) "pay\00")
(data (i32.const 1408) "No action\00")
(data (i32.const 1424) "lose\00")
(data (i32.const 1440) "player\00")
(data (i32.const 1456) "banker\00")
(data (i32.const 1472) "tie\00")
(data (i32.const 1488) "playerPair\00")
(data (i32.const 1504) "bankerPair\00")
(data (i32.const 1520) "win\00")
(data (i32.const 1536) "tierefund\00")
(data (i32.const 1552) "[\00")
(data (i32.const 1568) "] Payout for gameId: \00")
(data (i32.const 1600) ", Item: \00")
(data (i32.const 1616) "betdicehouse\00")
(data (i32.const 1632) "payout\00")
(data (i32.const 1648) "onpayout\00")
(data (i32.const 1664) "onbet3\00")
(data (i32.const 1680) "] Tie for gameId: \00")
(data (i32.const 1728) "\e2\99\a6\00")
(data (i32.const 1744) "\e2\99\a3\ef\b8\8f\00")
(data (i32.const 1760) "\e2\99\a5\00")
(data (i32.const 1776) "\e2\99\a0\00")
(data (i32.const 1792) "J\00")
(data (i32.const 1808) "Q\00")
(data (i32.const 1824) "K\00")
(data (i32.const 1840) "active\00")
(data (i32.const 1856) "betreceipt\00")
(data (i32.const 1872) "cannot find game\00")
(data (i32.const 1904) "game not available\00")
(data (i32.const 1936) "game not yet finished\00")
(data (i32.const 1968) "banker cards is not correct\00")
(data (i32.const 2000) "player cards is not correct\00")
(data (i32.const 2032) "Result is not correct\00")
(data (i32.const 2064) "Invalid token transfer\00")
(data (i32.const 2096) "Quantity must be positive\00")
(data (i32.const 2128) "action\00")
(data (i32.const 2144) "Not supported symbol\00")
(data (i32.const 2176) "bet\00")
(data (i32.const 2192) "gameId\00")
(data (i32.const 2208) "game ended\00")
(data (i32.const 2224) "symbol is not matched\00")
(data (i32.const 2256) "Cannot find symbolvar\00")
(data (i32.const 2288) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 2352) "smaller than min amount\00")
(data (i32.const 2384) "ref\00")
(data (i32.const 2400) "item\00")
(data (i32.const 2416) "cannot find item\00")
(data (i32.const 2448) "unable to find key\00")
(data (i32.const 2480) "attempt to subtract asset with different symbol\00")
(data (i32.const 2528) "subtraction underflow\00")
(data (i32.const 2560) "subtraction overflow\00")
(data (i32.const 2592) "Amount too large\00")
(data (i32.const 2624) "Wager, Game: \00")
(data (i32.const 2640) " Memo: \00")
(data (i32.const 2656) ".\00")
(data (i32.const 2672) " \00")
(data (i32.const 2688) ",\00")
(data (i32.const 2704) "eosio.bpay\00")
(data (i32.const 2720) "eosio.msig\00")
(data (i32.const 2736) "eosio.names\00")
(data (i32.const 2752) "eosio.ram\00")
(data (i32.const 2768) "eosio.ramfee\00")
(data (i32.const 2784) "eosio.saving\00")
(data (i32.const 2800) "eosio.stake\00")
(data (i32.const 2816) "eosio.token\00")
(data (i32.const 2832) "eosio.vpay\00")
(data (i32.const 11248) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11344) "%lu\00")
(data (i32.const 11360) "%llu\00")
(data (i32.const 11376) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 11840) "0123456789ABCDEF")
(data (i32.const 11856) "-+   0X0x\00")
(data (i32.const 11872) "(null)\00")
(data (i32.const 11888) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 11920) "inf\00")
(data (i32.const 11936) "INF\00")
(data (i32.const 11952) "nan\00")
(data (i32.const 11968) "NAN\00")
(data (i32.const 11984) ".\00")
(data (i32.const 12000) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 12096) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$8 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$9 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$11))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "cancel_deferred" (func $fimport$13 (param i32) (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "db_end_i64" (func $fimport$16 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$18 (param i32 i32 i32) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$19 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$20 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_remove" (func $fimport$21 (param i32)))
(import "env" "db_idx128_store" (func $fimport$22 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_update" (func $fimport$23 (param i32 i64 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$24 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$25 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$26 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$27 (param i32)))
(import "env" "db_idx64_store" (func $fimport$28 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$29 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$32 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$33 (param i32)))
(import "env" "db_store_i64" (func $fimport$34 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$35 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$36 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$37 (param i32)))
(import "env" "is_account" (func $fimport$38 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$39 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$40 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$41 (param i32 i32 i32) (result i32)))
(import "env" "printi" (func $fimport$42 (param i64)))
(import "env" "prints" (func $fimport$43 (param i32)))
(import "env" "prints_l" (func $fimport$44 (param i32 i32)))
(import "env" "printui" (func $fimport$45 (param i64)))
(import "env" "read_action_data" (func $fimport$46 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$47 (param i64)))
(import "env" "require_auth2" (func $fimport$48 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$49 (param i64)))
(import "env" "send_deferred" (func $fimport$50 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$51 (param i32 i32)))
(import "env" "sha256" (func $fimport$52 (param i32 i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $128))
(export "free" (func $131))
(export "_ZNSt3__19to_stringEm" (func $145))
(export "_ZNSt3__19to_stringEy" (func $148))
(export "floor" (func $152))
(export "log10" (func $153))
(export "snprintf" (func $154))
(export "vsnprintf" (func $155))
(export "__errno_location" (func $157))
(export "vfprintf" (func $158))
(export "__lockfile" (func $160))
(export "__unlockfile" (func $161))
(export "__fwritex" (func $162))
(export "strerror" (func $164))
(export "strnlen" (func $165))
(export "wctomb" (func $166))
(export "__signbitl" (func $167))
(export "__fpclassifyl" (func $168))
(export "frexpl" (func $169))
(export "wcrtomb" (func $170))
(export "memchr" (func $171))
(export "__lctrans" (func $172))
(export "__lctrans_impl" (func $173))
(export "__mo_lookup" (func $174))
(export "strcmp" (func $175))
(export "__towrite" (func $176))
(export "atoi" (func $177))
(export "memcmp" (func $178))
(export "strlen" (func $179))
(table $0 10 10 anyfunc)
(elem (i32.const 0) $180 $18 $16 $19 $15 $13 $9 $11 $20 $156)



int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

void .FUNC $6 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [176])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $7(($9 + [128]))
	CALL $8($0, $1, ($9 + [128]))
	if ( ((*($9 + [160]) & [1]) == 0) ){ goto $label$7 }
	CALL $133(*(($9 + [168])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)-4992623624440512513) ){ goto $label$15 }
	if ( ((int_64)$2 > (int_64)-6216093385678127105) ){ goto $label$14 }
	if ( ((int_64)$2 == (int_64)-8966374192761569280) ){ goto $label$12 }
	if ( ((int_64)$2 != (int_64)-7954134664302947328) ){ goto $label$7 }
	*($9 + [84]) = [0]
	*($9 + [80]) = [1]
	*($9 + [40 align=4]) = *($9 + [80])
	CALL $14($0, ($9 + [40]))
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_64)$2 > (int_64)4229853260945440767) ){ goto $label$13 }
	if ( ((int_64)$2 == (int_64)-4992623624440512512) ){ goto $label$11 }
	if ( ((int_64)$2 != (int_64)-4417029266016907920) ){ goto $label$7 }
	*($9 + [92]) = [0]
	*($9 + [88]) = [2]
	*($9 + [32 align=4]) = *($9 + [88])
	CALL $17($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$14
	if ( ((int_64)$2 == (int_64)-6216093385678127104) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)-4997502816157171712) ){ goto $label$7 }
	*($9 + [76]) = [0]
	*($9 + [72]) = [3]
	*($9 + [48 align=4]) = *($9 + [72])
	CALL $12($0, ($9 + [48]))
	goto $label$7 
	
.LABEL $label$13
	if ( ((int_64)$2 == (int_64)4229853260945440768) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$7 }
	*($9 + [100]) = [0]
	*($9 + [96]) = [4]
	*($9 + [24 align=4]) = *($9 + [96])
	CALL $14($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$12
	*($9 + [108]) = [0]
	*($9 + [104]) = [5]
	*($9 + [16 align=4]) = *($9 + [104])
	CALL $14($0, ($9 + [16]))
	goto $label$7 
	
.LABEL $label$11
	*($9 + [124]) = [0]
	*($9 + [120]) = [6]
	*($9) = *($9 + [120])
	CALL $10($0, $9)
	goto $label$7 
	
.LABEL $label$10
	*($9 + [116]) = [0]
	*($9 + [112]) = [7]
	*($9 + [8 align=4]) = *($9 + [112])
	CALL $12($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [68]) = [0]
	*($9 + [64]) = [8]
	*($9 + [56 align=4]) = *($9 + [64])
	CALL $21($0, ($9 + [56]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [176])
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

void .FUNC $7 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [32])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [96])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $127($6, $0)
	if ( ($1 <= [513]) ){ goto $label$8 }
	CALL free($2)
	
.LABEL $label$8
	*([0] + [4]) = ($6 + [16])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [128])
	*([0] + [4]) = $3
	*(($3 + [16])) = $0
	*(($3 + [24])) = (int_64)-1
	*(($3 + [32])) = (int_64)0
	*(($3 + [40])) = [0]
	*($3 + [8]) = $0
	*($3) = $0
	*(($3 + [46])) = [0]
	*(($3 + [44])) = [0]
	*($3 + [48]) = $0
	*(($3 + [56])) = $0
	*(($3 + [64])) = (int_64)-1
	*(($3 + [72])) = [0]
	*(($3 + [76])) = [0]
	*(($3 + [80])) = [0]
	*(($3 + [84])) = [0]
	*($3 + [88]) = $0
	*(($3 + [96])) = $0
	*(($3 + [104])) = (int_64)-1
	*(($3 + [112])) = [0]
	*(($3 + [116])) = [0]
	*(($3 + [120])) = [0]
	CALL $6($3, $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC $127 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $28($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC $49 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $132(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $133($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $133($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [432])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [496])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $133($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $133($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [92]))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $31($0, ($1 + [76]))
	CALL $31($0, ($1 + [88]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [128])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*(($1 + [100])) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [128])
	CALL memcpy(($3 + [14]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*(($1 + [101])) = ((int_32)*($3 + [14]) != (int_32)[0])
	CALL $28($0, ($1 + [104]))
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $132(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [76]) & [1]) == 0) ){ goto $label$11 }
	CALL $133(*(($1 + [84])))
	
.LABEL $label$11
	CALL $133($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $133($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $28($0, ($1 + [76]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [64]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [68]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [128])
	CALL memcpy(($1 + [72]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [432])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [496])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	if ( ((*($4 + [76]) & [1]) == 0) ){ goto $label$7 }
	CALL $133(*(($4 + [84])))
	
.LABEL $label$7
	CALL $133($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$8:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4 + [76]) & [1]) == 0) ){ goto $label$10 }
	CALL $133(*(($4 + [84])))
	
.LABEL $label$10
	CALL $133($4)
	
.LABEL $label$9
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [92])))
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [304])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [20]) = $4
	*($8 + [16]) = $4
	$7 = ($4 + $6)
	*($8 + [24]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [24]))
	$4 = *($8 + [20])
	
.LABEL $label$7
	*(($6 = CALL $132([104])) + [88]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [128])
	CALL memcpy($6, $4, [8])
	*($8 + [20]) = ($4 + [8])
	*($8 + [32]) = ($8 + [16])
	*($8 + [44]) = ($6 + [9])
	*($8 + [40]) = ($6 + [8])
	*($8 + [48]) = ($6 + [10])
	*($8 + [52]) = ($6 + [11])
	*($8 + [56]) = ($6 + [12])
	*($8 + [60]) = ($6 + [13])
	*($8 + [64]) = ($6 + [14])
	*($8 + [68]) = ($6 + [15])
	*($8 + [72]) = ($6 + [16])
	*($8 + [76]) = ($6 + [17])
	*($8 + [80]) = ($6 + [18])
	*($8 + [84]) = ($6 + [19])
	*($8 + [88]) = ($6 + [20])
	*($8 + [92]) = ($6 + [21])
	*($8 + [96]) = ($6 + [22])
	*($8 + [100]) = ($6 + [23])
	*($8 + [104]) = ($6 + [24])
	*($8 + [108]) = ($6 + [25])
	*($8 + [112]) = ($6 + [26])
	*($8 + [116]) = ($6 + [27])
	*($8 + [120]) = ($6 + [28])
	*($8 + [124]) = ($6 + [29])
	*($8 + [128]) = ($6 + [30])
	*($8 + [132]) = ($6 + [31])
	*($8 + [136]) = ($6 + [32])
	*($8 + [140]) = ($6 + [33])
	*($8 + [144]) = ($6 + [34])
	*($8 + [148]) = ($6 + [35])
	*($8 + [152]) = ($6 + [36])
	*($8 + [156]) = ($6 + [37])
	*($8 + [160]) = ($6 + [38])
	*($8 + [164]) = ($6 + [39])
	*($8 + [168]) = ($6 + [40])
	*($8 + [172]) = ($6 + [41])
	*($8 + [176]) = ($6 + [42])
	*($8 + [180]) = ($6 + [43])
	*($8 + [184]) = ($6 + [44])
	*($8 + [188]) = ($6 + [45])
	*($8 + [192]) = ($6 + [46])
	*($8 + [196]) = ($6 + [47])
	*($8 + [200]) = ($6 + [48])
	*($8 + [204]) = ($6 + [49])
	*($8 + [208]) = ($6 + [50])
	*($8 + [212]) = ($6 + [51])
	*($8 + [216]) = ($6 + [52])
	*($8 + [220]) = ($6 + [53])
	*($8 + [224]) = ($6 + [54])
	*($8 + [228]) = ($6 + [55])
	*($8 + [232]) = ($6 + [56])
	*($8 + [236]) = ($6 + [57])
	*($8 + [240]) = ($6 + [58])
	*($8 + [244]) = ($6 + [59])
	*($8 + [248]) = ($6 + [60])
	*($8 + [252]) = ($6 + [61])
	*($8 + [256]) = ($6 + [62])
	*($8 + [260]) = ($6 + [63])
	*($8 + [264]) = ($6 + [64])
	*($8 + [268]) = ($6 + [65])
	*($8 + [272]) = ($6 + [66])
	*($8 + [276]) = ($6 + [67])
	*($8 + [280]) = ($6 + [68])
	*($8 + [284]) = ($6 + [69])
	*($8 + [288]) = ($6 + [70])
	*($8 + [292]) = ($6 + [71])
	*($8 + [296]) = ($6 + [72])
	*($8 + [300]) = ($6 + [73])
	CALL $30(($8 + [40]), ($8 + [32]))
	CALL eosio_assert(((uint_32)(*((($8 + [16]) + [8])) - *($8 + [20])) > (uint_32)[7]), [128])
	CALL memcpy(($6 + [80]), *($8 + [20]), [8])
	*($6 + [92]) = $1
	*($8 + [32]) = $6
	*($8 + [20]) = (*($8 + [20]) + [8])
	$5 = *($6)
	*($8 + [40]) = $5
	$7 = *($6 + [92])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [32]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $49(($0 + [24]), ($8 + [32]), ($8 + [40]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [32])
	*($8 + [32]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $133($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [304])
	return $6
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [384])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [432])
	$3 = *($0 + [24])
	$4 = ($0 + [28])
	$7 = *($4)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$5 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$2) ){ goto $label$1 }
	$7 = $6
	$8 = ($6 + [-24])
	$6 = $8
	if ( ((int_32)($8 + $5) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [496])
	$8 = ($7 + [-24])
	$6 = *($4)
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$4 }
	$3 = ([0] - $6)
	$6 = $8
	
.LOOP $label$5:
	$8 = ($6 + [24])
	$5 = *($8)
	*($8) = [0]
	$7 = *($6)
	*($6) = $5
	if ( ($7 == 0) ){ goto $label$6 }
	if ( ((*(($7 + [104])) & [1]) == 0) ){ goto $label$7 }
	CALL $133(*(($7 + [112])))
	
.LABEL $label$7
	$5 = *(($7 + [88]))
	if ( ($5 == 0) ){ goto $label$8 }
	*(($7 + [92])) = $5
	CALL $133($5)
	
.LABEL $label$8
	$5 = *($7 + [76])
	if ( ($5 == 0) ){ goto $label$9 }
	*(($7 + [80])) = $5
	CALL $133($5)
	
.LABEL $label$9
	CALL $133($7)
	
.LABEL $label$6
	*(($6 + [16])) = *(($6 + [40]))
	*(($6 + [8])) = *(($6 + [32]))
	$6 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$10:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((*(($6 + [104])) & [1]) == 0) ){ goto $label$12 }
	CALL $133(*(($6 + [112])))
	
.LABEL $label$12
	$5 = *(($6 + [88]))
	if ( ($5 == 0) ){ goto $label$13 }
	*(($6 + [92])) = $5
	CALL $133($5)
	
.LABEL $label$13
	$5 = *($6 + [76])
	if ( ($5 == 0) ){ goto $label$14 }
	*(($6 + [80])) = $5
	CALL $133($5)
	
.LABEL $label$14
	CALL $133($6)
	
.LABEL $label$11
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$10 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*(($1 + [120])))
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [8]) = $9
	CALL $50(($9 + [8]), ($0 + [36]), ($0 + [37]), ($0 + [38]))
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	$1 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$1 }
	$4 = ($0 + [8])
	
.LOOP $label$2:
	$3 = ($2 + [-24])
	*($4) = $3
	$2 = *($3)
	*($3) = [0]
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((*(($2 + [104])) & [1]) == 0) ){ goto $label$4 }
	CALL $133(*(($2 + [112])))
	
.LABEL $label$4
	$3 = *(($2 + [88]))
	if ( ($3 == 0) ){ goto $label$5 }
	*(($2 + [92])) = $3
	CALL $133($3)
	
.LABEL $label$5
	$3 = *($2 + [76])
	if ( ($3 == 0) ){ goto $label$6 }
	*(($2 + [80])) = $3
	CALL $133($3)
	
.LABEL $label$6
	CALL $133($2)
	
.LABEL $label$3
	$2 = *($4)
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$2 }
	
.LABEL $label$1
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $133($2)
	
.LABEL $label$7
	return $0
}

void .FUNC $44 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	$9 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $9) / (int_32)[24])
	$8 = ($4 + [1])
	if ( ((uint_32)$8 >= (uint_32)[178956971]) ){ goto $label$2 }
	$5 = ($0 + [8])
	$9 = ((int_32)(*($0 + [8]) - $9) / (int_32)[24])
	if ( ((uint_32)$9 >= (uint_32)[89478485]) ){ goto $label$5 }
	*(($10 + [24])) = $5
	$5 = [0]
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$9 = ($9 << [1])
	$9 = ( $8 ? $9 : ($9 <= $8) )
	if ( ($9 == 0) ){ goto $label$3 }
	$5 = $9
	goto $label$4 
	
.LABEL $label$5
	*(($10 + [24])) = $5
	*($10 + [20]) = [0]
	$7 = ($10 + [20])
	$5 = [178956970]
	
.LABEL $label$4
	$8 = CALL $132(((int_32)$5 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	*($10 + [8]) = $8
	$9 = ($8 + ((int_32)$4 * (int_32)[24]))
	*($10 + [12]) = $9
	$5 = ($8 + ((int_32)$5 * (int_32)[24]))
	*($7) = $5
	$8 = *($1)
	*($1) = [0]
	$1 = *($3)
	$6 = *($2)
	*($9) = $8
	*($9 + [8]) = $6
	*($9 + [16]) = $1
	$1 = ($9 + [24])
	*($10 + [16]) = $1
	$2 = *($0)
	$8 = *(($0 + [4]))
	if ( ((int_32)$8 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$5 = ($8 + [-24])
	$1 = *($5)
	*($5) = [0]
	*(($9 + [-24])) = $1
	*(($9 + [-8])) = *(($8 + [-8]))
	*(($9 + [-12])) = *(($8 + [-12]))
	*(($9 + [-16])) = *(($8 + [-16]))
	$9 = (*($10 + [12]) + [-24])
	*($10 + [12]) = $9
	$8 = $5
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$5 = *($7)
	$2 = *($0)
	$1 = *(($10 + [16]))
	
.LABEL $label$6
	*($0) = $9
	*(($0 + [4])) = $1
	*((($10 + [8]) + [8])) = $8
	$9 = ($0 + [8])
	$8 = *($9)
	*($9) = $5
	*($10 + [12]) = $2
	*($7) = $8
	*($10 + [8]) = $2
	CALL $45(($10 + [8]))
	*([0] + [4]) = ($10 + [32])
	(unreachable)
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [12000])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [12096]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [12096]
	return .LABEL $label$1
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$8 = (*([0] + [4]) - [16])
	$12 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$4 = *($3)
	$7 = ($4 + [64])
	$6 = *($7)
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$9 = ($4 + [48])
	$5 = CALL db_lowerbound_i64(*($9), *(($4 + [56])), (int_64)-4060986516896743424, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$2 }
	CALL $54($9, $5)
	*($12 + [4]) = [0]
	*($12) = $9
	$6 = *(*(CALL $59($12) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($4 + [64])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [1072])
	*($1) = *($7)
	$4 = *($3 + [4])
	$6 = *($4)
	*(($7 = ($1 + [24]))) = *(($4 + [8]))
	*($1 + [16]) = $6
	$3 = *($3 + [8])
	*($1 + [32]) = *($3)
	*(($4 = ($1 + [40]))) = *(($3 + [8]))
	$8 = $8
	$3 = ($8 + [-48])
	*([0] + [4]) = $3
	CALL eosio_assert([1], [992])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert([1], [992])
	$9 = ($1 + [16])
	CALL memcpy(($8 + [-40]), $9, [16])
	CALL eosio_assert([1], [992])
	CALL memcpy(($8 + [-24]), ($1 + [32]), [8])
	CALL eosio_assert([1], [992])
	CALL memcpy(($8 + [-16]), $4, [8])
	$6 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-4060986516896743424, *(*($0 + [8])), $6, $3, [40])
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$6 = *(($2 + [8]))
	$10 = *(*(($0 + [8])))
	$11 = *($1)
	*($12 + [8]) = *($7)
	*($12) = *($9)
	*($1 + [56]) = CALL db_idx128_store($6, (int_64)-4060986516896743424, $10, $11, $12)
	*([0] + [4]) = ($12 + [16])
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1200])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-4060986516896743424)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1136])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1136])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $54(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = *($0)
	$4 = *($5 + [4])
	$6 = *($4 + [124])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = *($5)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001536, $7, *($4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL db_idx64_remove($6)
	
.LABEL $label$1
	$5 = *($0)
	$4 = *($5 + [4])
	$6 = *(($4 + [128]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = *($5)
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001537, $7, *($4))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	
.LABEL $label$4
	CALL db_idx64_remove($6)
	
.LABEL $label$3
	$6 = *($0)
	$5 = *($6 + [4])
	$0 = *(($5 + [132]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = *($6)
	$0 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)7035924439720001538, $7, *($5))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$5 }
	
.LABEL $label$6
	CALL db_idx128_remove($0)
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $51 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	$13 = (*([0] + [4]) - [48])
	*([0] + [4]) = $13
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [592]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [592]
	$11 = (int_64)0
	
.LOOP $label$5:
	$10 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$3 = ($3 + [165])
	goto $label$7 
	
.LABEL $label$8
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$6
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$5 }
	$12 = [0]
	*(($13 + [32])) = [0]
	*($13 + [16]) = (int_64)-1
	*($13 + [8]) = $11
	*($13) = $9
	*($13 + [24]) = (int_64)0
	$6 = CALL db_lowerbound_i64($9, $11, (int_64)-4057297639048043008, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$12 = [1]
	$6 = CALL $60($13, $6)
	if ( (int_64)(((int_64)((int_64)*($6 + [32]) ^ (int_64)$1) | (int_64)((int_64)*(($6 + [40])) ^ (int_64)$2)) == 0) ){ goto $label$11 }
	
.LOOP $label$13:
	CALL eosio_assert([1], [352])
	$6 = CALL db_next_i64(*($6 + [52]), ($13 + [40]))
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$12 }
	$6 = CALL $60($13, $6)
	if ( ((int_64)((int_64)((int_64)*($6 + [32]) ^ (int_64)$1) | (int_64)((int_64)*(($6 + [40])) ^ (int_64)$2)) != (int_64)0) ){ goto $label$13 }
	$12 = [1]
	$4 = *($13 + [24])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$12 = [0]
	
.LABEL $label$11
	$4 = *($13 + [24])
	if ( ($4 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$5 = ($13 + [28])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$15 }
	
.LOOP $label$16:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$17 }
	CALL $133($3)
	
.LABEL $label$17
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$16 }
	$6 = *(($13 + [24]))
	goto $label$14 
	
.LABEL $label$15
	$6 = $4
	
.LABEL $label$14
	*($5) = $4
	CALL $133($6)
	
.LABEL $label$9
	*([0] + [4]) = ($13 + [48])
	return $12
}

void .FUNC $52 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx128_lowerbound(*($8), *($8 + [8]), (int_64)-4060986516896743424, $10, ($10 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [24])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [160])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $54($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)-4060986516896743424, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [160])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1008])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $132([64])) + [40]) = (int_64)1398362884
	*($4 + [32]) = (int_64)0
	CALL eosio_assert([1], [32])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [96])
	*($4 + [48]) = $1
	CALL $58(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [52])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $57(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $133($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [560])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $132([64])) + [40]) = (int_64)1398362884
	*($4 + [32]) = (int_64)0
	CALL eosio_assert([1], [32])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [96])
	*($4 + [48]) = $0
	CALL $56(($8 + [32]), $4)
	*($4 + [56]) = [-1]
	*($4 + [52]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [52])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $57($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $133($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [96])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [816])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [864])
	*($6 + [56]) = *(($1 + [24]))
	*($6 + [48]) = *($1 + [16])
	$3 = *($3)
	*($1 + [32]) = *($3)
	*(($1 + [44])) = *(($3 + [12]))
	*(($5 = ($1 + [40]))) = *(($3 + [8]))
	*(($1 + [36])) = *(($3 + [4]))
	$4 = *($1)
	CALL eosio_assert([1], [928])
	CALL eosio_assert([1], [992])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [992])
	$3 = ($1 + [16])
	CALL memcpy(($6 | [8]), $3, [16])
	CALL eosio_assert([1], [992])
	CALL memcpy(($6 + [24]), ($1 + [32]), [8])
	CALL eosio_assert([1], [992])
	CALL memcpy(($6 + [32]), $5, [8])
	CALL db_update_i64(*($1 + [52]), $2, $6, [40])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($6 + [80]) = *($3)
	*($6 + [88]) = *(($3 + [8]))
	if ( (CALL memcmp(($6 + [48]), ($6 + [80]), [16]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx128_find_primary(*($0), *($0 + [8]), (int_64)-4060986516896743424, ($6 + [64]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx128_update($1, $2, ($6 + [80]))
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [96])
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $132(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $133($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $133($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_64 .FUNC floor (float_64 $0)
{
	int_64 $1
	int_32 $2
	float_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	if ( ((float_64)$0 == (float_64)(float_64)0) ){ goto $label$1 }
	$1 = (CASTING int_64)(float_64 $0)
	$2 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)52)) & [2047]
	if ( ((uint_32)$2) > (uint_32)[1074]) ){ goto $label$1 }
	$4 = ((int_64)$1 < (int_64)0)
	$3 = (float_64))(((float_64)( (float_64)4503599627370496 ? (float_64)-4503599627370496 : $4 ) + (float_64)((float_64)( (float_64)-4503599627370496 ? (float_64)4503599627370496 : $4 ) + (float_64)$0)) - $0)
	if ( ((uint_32)$2 > (uint_32)[1022]) ){ goto $label$2 }
	*($5 + [8]) = $3
	return (CASTING float_64)(int_32 (CASTING uint_32)(uint_64 (int_64)$1 >> (int_64)63)))
	
.LABEL $label$2
	$0 = ((float_64)$3 + (float_64)$0)
	if ( (((float_64)$3 <= (float_64)(float_64)0) | ((float_64)$3 != (float_64)$3)) ){ goto $label$1 }
	$0 = ((float_64)$0 + (float_64)(float_64)-1)
	
.LABEL $label$1
	return $0
}

int_64 .FUNC log10 (float_64 $0)
{
	float_64 $1
	float_64 $2
	float_64 $3
	float_64 $4
	float_64 $5
	float_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$7 = (CASTING int_64)(float_64 $0)
	if ( ((int_64)$7 < (int_64)0) ){ goto $label$5 }
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32)
	if ( ((uint_32)$8) <= (uint_32)[1048575]) ){ goto $label$5 }
	if ( ((uint_32)$8 > (uint_32)[2146435071]) ){ goto $label$3 }
	$9 = [-1023]
	if ( ((int_64)((int_64)$7 & (int_64)4294967295) != (int_64)0) ){ goto $label$4 }
	$0 = (float_64)0
	if ( ((int_32)$8 == (int_32)[1072693248]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_64)((int_64)$7 & (int_64)9223372036854775807) == (int_64)0) ){ goto $label$2 }
	if ( ((int_64)$7 <= (int_64)-1) ){ goto $label$1 }
	$7 = (CASTING int_64)(float_64 ((float_64)$0 * (float_64)(float_64)18014398509481984))
	$8 = (CASTING uint_32)(uint_64 (uint_64)$7 >> (uint_64)(int_64)32))
	$9 = [-1077]
	
.LABEL $label$4
	$1 = ((float_64)$0 * (float_64)$0)
	$0 = ((float_64)$1 * (float_64)$1)
	$0 = ((float_64)$0 / (float_64)((float_64)$0 + (float_64)(float_64)2))
	$0 = ((float_64)(float_64))((float_64))($0 - $3) - $2
	$2 = ((float_64)$0 * (float_64)((float_64)$0 * (float_64)(float_64)0.5))
	$0 = ((float_64)(CASTING float_64)(int_64 ((int_64)((int_64)(CASTING uint_64)(uint_32 (($8 & [1048575]) + [1072079006])) << (int_64)32) | (int_64)((int_64)$7 & (int_64)4294967295))) + (float_64)(float_64)-1)
	$3 = (CASTING float_64)(int_64 ((int_64)(CASTING int_64)(float_64 (float_64))($0 - $2)) & (int_64)-4294967296)
	$5 = ((float_64)$3) * (float_64)(float_64)0.4342944818781689
	$8 = ($8 + [614242])
	$4 = (CASTING float_64)(int_32 ($9 + uint_32($8 >> [20])))
	$1 = ((float_64)$4 * (float_64)(float_64)0.30102999566361177)
	$6 = ((float_64)$1 + (float_64)$5)
	$0 = ((float_64)$6) + (float_64)((float_64)((float_64)$5 + (float_64)(float_64))($1 - $6)) + (float_64)((float_64)((float_64)$0 + (float_64)((float_64)$0 * (float_64)((float_64)$2 + (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.15313837699209373) + (float_64)(float_64)0.22222198432149784)) + (float_64)(float_64)0.3999999999940942)) + (float_64)((float_64)$1 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)((float_64)((float_64)$0 * (float_64)(float_64)0.14798198605116586) + (float_64)(float_64)0.1818357216161805)) + (float_64)(float_64)0.2857142874366239)) + (float_64)(float_64)0.6666666666666735))))))) * (float_64)(float_64)0.4342944818781689) + (float_64)((float_64)((float_64)$4 * (float_64)(float_64)3.694239077158931e-13) + (float_64)((float_64)((float_64)$3 + (float_64)$0) * (float_64)(float_64)2.5082946711645275e-11)))))
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	return ((float_64)(float_64)-1 / (float_64)((float_64)$0 * (float_64)$0))
	
.LABEL $label$1
	return ((float_64)(float_64))($0 - $0) / (float_64)(float_64)0)
}

int_32 .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $132($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $132($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $156 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC __errno_location ()
{
	return [13900]
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [9]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $159([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $159($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $159($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $159 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [11376]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $163(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [11856]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [11888]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [11894] ? [11889] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [11858] ? [11856] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [11891]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $157()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [11856]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [11856]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [11840])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [11856])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [11872] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [11856]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [11952] ? [11968] : $30 ) ? ( [11920] ? [11936] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [11856]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [11857]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [11856] ? [11861] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [11840])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [11840])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [11840])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([11984], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([11984], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([11984], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $163(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $163(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $163(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $163(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $163(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $163(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $163(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $163(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $163(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1008])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $132([144])) + [76 align=4]) = (int_64)0
	*($3 + [84 align=4]) = (int_64)0
	*($3 + [92 align=4]) = (int_64)0
	*($3 + [104 align=4]) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [116]) = $1
	CALL $70(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [120])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $44(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*(($3 + [104])) & [1]) == 0) ){ goto $label$4 }
	CALL $133(*(($3 + [112])))
	
.LABEL $label$4
	$1 = *(($3 + [88]))
	if ( ($1 == 0) ){ goto $label$5 }
	*(($3 + [92])) = $1
	CALL $133($1)
	
.LABEL $label$5
	$1 = *($3 + [76])
	if ( ($1 == 0) ){ goto $label$6 }
	*(($3 + [80])) = $1
	CALL $133($1)
	
.LABEL $label$6
	CALL $133($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $132([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1300]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $151($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $137($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)7035924439720001536, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$4), [160])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $38($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)7035924439720001536, $5))
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$4), [160])
	
.LABEL $label$4
	*($2 + [124]) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $64 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [144])
	*([0] + [4]) = $6
	*($6 + [136]) = $2
	*($6 + [128]) = $1
	$3 = ($0 + [8])
	*($6 + [120]) = $3
	*($6 + [24]) = (int_64)0
	CALL $65(($6 + [112]), ($6 + [120]), ($6 + [24]))
	$5 = *($6 + [116])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	if ( ((int_64)*($5 + [64]) != (int_64)0) ){ goto $label$1 }
	if ( ((int_64)((int_64)((int_64)*($5 + [16]) ^ (int_64)*($6 + [128])) | (int_64)((int_64)*(($5 + [24])) ^ (int_64)*($6 + [136]))) != (int_64)0) ){ goto $label$3 }
	CALL eosio_assert([0], [1248])
	
.LABEL $label$3
	CALL $66(($6 + [112]))
	$5 = *($6 + [116])
	if ( $5 ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [24])
	$1 = *($5)
	if ( ((int_64)$1 != (int_64)-1) ){ goto $label$4 }
	$1 = (int_64)0
	$4 = CALL db_lowerbound_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$5 }
	CALL $38($3, $4)
	*($6 + [28]) = [0]
	*($6 + [24]) = $3
	$1 = *(*(CALL $67(($6 + [24])) + [4]))
	$1 = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*(($0 + [24])) = $1
	
.LABEL $label$4
	CALL eosio_assert((uint_64)($1 <= (int_64)-2), [1072])
	$1 = *($5)
	CALL $68(($6 + [64]), [1288])
	$5 = CALL $140(($6 + [64]), [1296])
	$4 = ($5 + [8])
	*((($6 + [24]) + [8])) = *($4)
	*($6 + [24]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	CALL _ZNSt3__19to_stringEy(($6 + [8]), $1)
	$5 = *($6 + [8])
	$4 = ($5 & [1])
	$5 = CALL $139(($6 + [24]), ( *($6 + [16]) ? (($6 + [8]) | [1]) : $4 ), ( *($6 + [12]) ? uint_32($5 >> [1]) : $4 ))
	$4 = ($5 + [8])
	*((($6 + [96]) + [8])) = *($4)
	*($6 + [96]) = *($5)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$6 }
	CALL $133(*((($6 + [8]) + [8])))
	
.LABEL $label$6
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL $133(*($6 + [32]))
	
.LABEL $label$7
	if ( ((*($6 + [64]) & [1]) == 0) ){ goto $label$8 }
	CALL $133(*($6 + [72]))
	
.LABEL $label$8
	$5 = *($6 + [96])
	$4 = ($5 & [1])
	CALL sha256(( *($6 + [104]) ? (($6 + [96]) | [1]) : $4 ), ( *($6 + [100]) ? uint_32($5 >> [1]) : $4 ), ($6 + [64]))
	*(($6 + [40])) = (int_64)0
	*(($5 = ($6 + [60]))) = [0]
	*($6 + [24]) = (int_64)0
	*($6 + [32]) = (int_64)0
	*($6 + [52 align=4]) = (int_64)0
	$1 = *($0)
	*($6 + [8]) = $0
	*($6 + [12]) = ($6 + [128])
	*($6 + [16]) = ($6 + [64])
	*($6 + [20]) = ($6 + [24])
	CALL $69($6, $3, $1, ($6 + [8]))
	if ( ((*($6 + [52]) & [1]) == 0) ){ goto $label$9 }
	CALL $133(*($5))
	
.LABEL $label$9
	$5 = *(($6 + [36]))
	if ( ($5 == 0) ){ goto $label$10 }
	*(($6 + [40])) = $5
	CALL $133($5)
	
.LABEL $label$10
	$5 = *($6 + [24])
	if ( ($5 == 0) ){ goto $label$11 }
	*($6 + [28]) = $5
	CALL $133($5)
	
.LABEL $label$11
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$12 }
	CALL $133(*(($6 + [104])))
	
.LABEL $label$12
	*([0] + [4]) = ($6 + [144])
}

int_32 .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [120]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1200])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7035924439720001536)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1136])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1136])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $38(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $66 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$7 = [0]
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [352])
	$8 = *($0 + [4])
	$6 = *($8 + [124])
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$1 }
	$6 = *(*($0))
	$6 = CALL db_idx64_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001536, ($9 + [8]), *($8))
	*(*(($0 + [4])) + [124]) = $6
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($6, ($9 + [8]))
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$2 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$3 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$4:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$3 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)$2), [160])
	goto $label$5 
	
.LABEL $label$6
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *($2 + [8]), (int_64)7035924439720001536, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$7 = CALL $38($2, $6)
	CALL eosio_assert(((int_32)*($7 + [116]) == (int_32)$2), [160])
	
.LABEL $label$5
	*($7 + [124]) = $1
	
.LABEL $label$2
	*(($0 + [4])) = $7
	*([0] + [4]) = ($9 + [16])
	return $0
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [128])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [128])
	CALL memcpy(($1 + [32]), *($0 + [4]), [16])
	*($0 + [4]) = (*($0 + [4]) + [16])
	return $0
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $132([64])) + [48]) = $0
	*($6 + [8]) = (int_64)0
	CALL $61(($8 + [32]), $6)
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $62(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $133($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx128_lowerbound(*($8), *($8 + [8]), (int_64)7035924439720001538, $10, ($10 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [24])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$4), [160])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $38($4, CALL $fimport$17(*($4), *($4 + [8]), (int_64)7035924439720001536, $5))
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$4), [160])
	
.LABEL $label$4
	*(($2 + [132])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $132(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $133($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $133($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [992])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [992])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [992])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [992])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [992])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $87 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [992])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [992])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $88($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [992])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [992])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [992])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $88(CALL $89($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [992])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [992])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [992])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [992])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

void .FUNC $83 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$4 = *($0)
	$5 = *($4)
	*($7 + [16]) = *(*($4 + [4]) + [64])
	if ( (CALL memcmp(*($4 + [8]), ($7 + [16]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [124])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7035924439720001536, $7, *(*($4 + [16])))
	*(*(($4 + [12])) + [124]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$1
	$4 = *($0)
	$5 = *($4)
	*($7 + [16]) = *(*($4 + [4]) + [72])
	if ( (CALL memcmp((*($4 + [8]) + [8]), ($7 + [16]), [8]) == 0) ){ goto $label$3 }
	$6 = *((*($4 + [12]) + [128]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7035924439720001537, $7, *(*($4 + [16])))
	*((*(($4 + [12])) + [128])) = $6
	
.LABEL $label$4
	CALL db_idx64_update($6, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$3
	$4 = *($0)
	$6 = *($4)
	$0 = *($4 + [4])
	*($7 + [24]) = *(($0 + [24]))
	*($7 + [16]) = *($0 + [16])
	if ( (CALL memcmp((*($4 + [8]) + [16]), ($7 + [16]), [16]) == 0) ){ goto $label$5 }
	$0 = *((*($4 + [12]) + [132]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = CALL db_idx128_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001538, $7, *(*($4 + [16])))
	*((*(($4 + [12])) + [132])) = $0
	
.LABEL $label$6
	CALL db_idx128_update($0, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($6 = $5) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [816])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [864])
	*((($6 + [48]) + [24])) = *(($1 + [24]))
	*($6 + [64]) = *($1 + [16])
	*($6 + [48]) = *($1 + [64])
	*($6 + [56]) = *($1 + [72])
	*($1 + [64]) = (int_64)2
	*($6 + [40]) = *($1)
	CALL eosio_assert([1], [928])
	*($6 + [88]) = [68]
	*($6 + [24]) = ($6 + [88])
	*($6 + [4]) = ($1 + [88])
	*($6) = ($1 + [76])
	*($6 + [8]) = ($1 + [100])
	*($6 + [12]) = ($1 + [101])
	*($6 + [16]) = ($1 + [104])
	CALL $72($6, ($6 + [24]))
	$4 = *($6 + [88])
	if ( ($4 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($4)
	$2 = *($6 + [80])
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6 + [28]) = $5
	*($6 + [24]) = $5
	*($6 + [32]) = ($5 + $4)
	CALL $73(($6 + [24]), $1)
	CALL db_update_i64(*(($1 + [120])), $2, $5, $4)
	if ( ($4 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	$5 = ($0 + [36])
	$2 = *($6 + [40])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$4 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*($6 + [4]) = $1
	*($6) = $0
	*($6 + [12]) = $1
	*($6 + [8]) = ($6 + [48])
	*($6 + [16]) = ($6 + [40])
	*($6 + [20]) = ($6 + [80])
	*($6 + [88]) = $6
	CALL $83(($6 + [88]), $5, ($5 + [1]), ($5 + [2]))
	*([0] + [4]) = ($6 + [96])
}

void .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$3 = int_32(($6 - $5) >> [2])
	$7 = ($3 + [1])
	if ( ((uint_32)$7 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$4 = [1073741823]
	$2 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($2 >> [2]) > (uint_32)[536870910]) ){ goto $label$5 }
	$4 = int_32($2 >> [1])
	$4 = ( $7 ? $4 : ($4 <= $7) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $132(($4 << [2]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $149($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($3 << [2])))) = *($1)
	$6 = ($6 - $5)
	$1 = ($3 - $6)
	$4 = ($7 + ($4 << [2]))
	$7 = ($3 + [4])
	if ( ((int_32)$6 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $5, $6)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $133($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $133($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $133($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $133($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $133($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $133($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $133($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $133($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $133($5)
	
.LABEL $label$12
	return $0
}

void .FUNC $149 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [11360], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $146(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $146(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC _ZNSt3__19to_stringEm (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [11344], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $146(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $146(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

int_32 .FUNC $144 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $132($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $133($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $146 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $147($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $141 (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL $142($0, $1, $2, CALL $179($2))
}

int_32 .FUNC $140 (int_32 $0, int_32 $1)
{
	return CALL $139($0, $1, CALL $179($1))
}

int_32 .FUNC $143 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	$4 = *($0)
	if ( ($4 & [1]) ){ goto $label$2 }
	$4 = uint_32($4 >> [1])
	$3 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$2
	$4 = *($0 + [4])
	$3 = *($0 + [8])
	
.LABEL $label$1
	$0 = [-1]
	if ( ((uint_32)$4 <= (uint_32)$2) ){ goto $label$3 }
	$0 = ($4 - $2)
	if ( ($0 == 0) ){ goto $label$5 }
	$0 = CALL memchr(($3 + $2), ($1 & [255]), $0)
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	$0 = ( ($0 - $3) ? [-1] : $0 )
	
.LABEL $label$3
	return $0
}

int_32 .FUNC $142 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$4 = uint_32($5 >> [1])
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [4])
	if ( ($4 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	if ( $6 ){ goto $label$5 }
	$6 = [10]
	goto $label$4 
	
.LABEL $label$5
	$5 = *($0)
	$6 = (($5 & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)($6 - $4) >= (uint_32)$3) ){ goto $label$6 }
	CALL $136($0, $6, (($4 + $3) - $6), $4, $1, [0], $3, $2)
	return $0
	
.LABEL $label$6
	if ( ($3 == 0) ){ goto $label$9 }
	if ( ($5 & [1]) ){ goto $label$8 }
	$5 = ($0 + [1])
	goto $label$7 
	
.LABEL $label$9
	return $0
	
.LABEL $label$8
	$5 = *($0 + [8])
	
.LABEL $label$7
	$6 = ($5 + $1)
	$1 = ($4 - $1)
	if ( ($1 == 0) ){ goto $label$10 }
	CALL memmove(($6 + $3), $6, $1)
	$2 = ( ( ($2 + $3) ? $2 : ((uint_32)($5 + $4) > (uint_32)$2) ) ? $2 : ((uint_32)$6 <= (uint_32)$2) )
	
.LABEL $label$10
	CALL memmove($6, $2, $3)
	$3 = ($4 + $3)
	if ( (*($0) & [1]) ){ goto $label$12 }
	*($0) = ($3 << [1])
	goto $label$11 
	
.LABEL $label$12
	*($0 + [4]) = $3
	
.LABEL $label$11
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

void .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$4 = *($6)
	$6 = *($0)
	$3 = *($6 + [4])
	$5 = ($3 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [2]))
	$2 = *($1)
	$6 = *($2)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	$6 = (($5 & [-4]) + $6)
	
.LABEL $label$2
	*($2) = $6
	$4 = *($6)
	$6 = *($0 + [4])
	$3 = *($6 + [4])
	$5 = ($3 - $4)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [2]))
	$2 = *($1)
	$6 = *($2)
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$4 }
	$6 = (($5 & [-4]) + $6)
	
.LABEL $label$4
	*($2) = $6
	*(($6 = *($1))) = (*($6) + [1])
	*(($6 = *($1))) = (*($6) + [1])
	$6 = *($0)
	$0 = *($0 + [16])
	$7 = (CASTING uint_64)(uint_32 ( *($0 + [4]) ? uint_32($6 >> [1]) : ($6 & [1]) ))
	$1 = *($1)
	$6 = *($1)
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$5 }
	*($1) = $6
	$0 = *($0)
	$0 = ( *(($0 + [4])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	if ( ($0 == 0) ){ goto $label$6 }
	*($1) = ($0 + $6)
	
.LABEL $label$6
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	CALL $74($0, ($1 + [76]))
	CALL $74($0, ($1 + [88]))
	*($3 + [15]) = *(($1 + [100]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($3 + [14]) = *(($1 + [101]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [992])
	CALL memcpy(*($0 + [4]), ($3 + [14]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $75($0, ($1 + [104]))
	*([0] + [4]) = ($3 + [16])
	return $0
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [64])
	*([0] + [4]) = $7
	$2 = *($0)
	CALL $71(*($0 + [4]), $1)
	*(($8 = $7) + [24]) = [68]
	*($8 + [8]) = ($8 + [24])
	*($8 + [36]) = ($1 + [88])
	*($8 + [32]) = ($1 + [76])
	*($8 + [40]) = ($1 + [100])
	*($8 + [44]) = ($1 + [101])
	*($8 + [48]) = ($1 + [104])
	CALL $72(($8 + [32]), ($8 + [8]))
	$3 = *($8 + [24])
	if ( ($3 <= [513]) ){ goto $label$2 }
	$7 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$7 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$1
	*($8 + [12]) = $7
	*($8 + [8]) = $7
	*($8 + [16]) = ($7 + $3)
	CALL $73(($8 + [8]), $1)
	$4 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($2 + [8]), (int_64)7035924439720001536, *(*($0 + [8])), $4, $7, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($7)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	$7 = ($2 + [8])
	$4 = *($7)
	$0 = *(($0 + [8]))
	$5 = *($0)
	$6 = *($1)
	*($8 + [32]) = *($1 + [64])
	*($1 + [124]) = CALL db_idx64_store($4, (int_64)7035924439720001536, $5, $6, ($8 + [32]))
	$4 = *($0)
	$5 = *($7)
	$6 = *($1)
	*($8 + [32]) = *($1 + [72])
	*(($1 + [128])) = CALL db_idx64_store($5, (int_64)7035924439720001537, $4, $6, ($8 + [32]))
	$4 = *($0)
	$5 = *($7)
	$6 = *($1)
	*($8 + [40]) = *(($1 + [24]))
	*($8 + [32]) = *($1 + [16])
	*(($1 + [132])) = CALL db_idx128_store($5, (int_64)7035924439720001538, $4, $6, ($8 + [32]))
	*([0] + [4]) = ($8 + [64])
}

void .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$5 = *($0)
	$4 = ($5 + [24])
	$8 = *($4)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$1 }
	$8 = (int_64)0
	$2 = ($5 + [8])
	$3 = CALL db_lowerbound_i64(*($2), *(($5 + [16])), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $38($2, $3)
	*($9 + [12]) = [0]
	*($9 + [8]) = $2
	$8 = *(*(CALL $67(($9 + [8])) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [24])) = $8
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [1072])
	*($1) = *($4)
	$5 = *($0 + [4])
	$8 = *($5)
	*(($1 + [24])) = *(($5 + [8]))
	*($1 + [16]) = $8
	$5 = *($0 + [8])
	*($1 + [32]) = *($5)
	$8 = *(($5 + [8]))
	$6 = *(($5 + [16]))
	$7 = *(($5 + [24]))
	*($1 + [64]) = (int_64)0
	*(($1 + [56])) = $7
	*(($1 + [48])) = $6
	*(($1 + [40])) = $8
	*($1 + [72]) = (CASTING uint_32)(float_64 ((float_64)((float_64)CALL floor((CASTING float_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000)) / (uint_32)[60]))) * (float_64)(float_64)60) + (float_64)(float_64)60))
	$0 = *($0 + [12])
	$5 = ($1 + [76])
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$3 }
	CALL $76($5, *($0), *($0 + [4]))
	CALL $76(($1 + [88]), *($0 + [12]), *(($0 + [16])))
	
.LABEL $label$3
	*(($1 + [100])) = *($0 + [24])
	CALL $135(($1 + [104]), ($0 + [28]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [2])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [2])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $133($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = [1073741823]
	if ( ((uint_32)int_32($8 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [1])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [2])
	$5 = CALL $132($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [2])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [2])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [2]))
	return (unreachable)
	
.LABEL $label$1
	CALL $149($0)
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [88]) == (int_32)$0), [816])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [864])
	*($1 + [64]) = (*($1 + [64]) + [1])
	$4 = *($1)
	*($1 + [68]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [928])
	$6 = *($1 + [76])
	$5 = ( *(($1 + [80])) ? uint_32($6 >> [1]) : ($6 & [1]) )
	$6 = ($5 + [76])
	$7 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($6 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($6)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL $90($9, $1)
	CALL db_update_i64(*(($1 + [92])), $2, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [2]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [992])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[3]), [992])
	$2 = ($0 + [4])
	CALL memcpy(*($2), $5, [4])
	$7 = (*($2) + [4])
	*($2) = $7
	$5 = ($5 + [4])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [992])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [992])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $78 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$7 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$7 = ( $6 ? $8 : ($8 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $132(((int_32)$7 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	*(($8 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $132([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $37(($8 + [28]), [16])
	$2 = *($8 + [28])
	$1 = (*($2) - $2)
	CALL eosio_assert(((int_32)$1 > (int_32)[7]), [992])
	CALL memcpy($2, $4, [8])
	CALL eosio_assert(((int_32)($1 + [-8]) > (int_32)[7]), [992])
	CALL memcpy(($2 + [8]), ($4 + [8]), [8])
	$3 = ($6 + ((int_32)$7 * (int_32)[40]))
	$5 = ($8 + [40])
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($7 = ($8 + [-16]))) = [0]
	$4 = ($2 + [-4])
	*($1) = *($4)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($7) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($4) = (int_64)0
	*(($7 = ($8 + [-4]))) = [0]
	$4 = ($2 + [8])
	*($1) = *($4)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($7) = *($1)
	*($1) = [0]
	*($4) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$8 }
	$1 = ([0] - $7)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $133($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $133($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$12 }
	CALL $133($7)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $84($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $37($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $85($4, $1)
	CALL $87(CALL $86(CALL $86($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $98 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[31]), [992])
	CALL memcpy(*($3 + [4]), ($2 + [48]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($0)
	*($4) = *($1)
	*($4 + [12]) = ($3 + [81])
	*($4 + [8]) = ($3 + [80])
	*($4 + [16]) = ($3 + [82])
	*($4 + [20]) = ($3 + [83])
	*($4 + [24]) = ($3 + [84])
	*($4 + [28]) = ($3 + [85])
	*($4 + [32]) = ($3 + [86])
	*($4 + [36]) = ($3 + [87])
	*($4 + [40]) = ($3 + [88])
	*($4 + [44]) = ($3 + [89])
	*($4 + [48]) = ($3 + [90])
	*($4 + [52]) = ($3 + [91])
	*($4 + [56]) = ($3 + [92])
	*($4 + [60]) = ($3 + [93])
	*($4 + [64]) = ($3 + [94])
	*($4 + [68]) = ($3 + [95])
	*($4 + [72]) = ($3 + [96])
	*($4 + [76]) = ($3 + [97])
	*($4 + [80]) = ($3 + [98])
	*($4 + [84]) = ($3 + [99])
	*($4 + [88]) = ($3 + [100])
	*($4 + [92]) = ($3 + [101])
	*($4 + [96]) = ($3 + [102])
	*($4 + [100]) = ($3 + [103])
	*($4 + [104]) = ($3 + [104])
	*($4 + [108]) = ($3 + [105])
	*($4 + [112]) = ($3 + [106])
	*($4 + [116]) = ($3 + [107])
	*($4 + [120]) = ($3 + [108])
	*($4 + [124]) = ($3 + [109])
	*($4 + [128]) = ($3 + [110])
	*($4 + [132]) = ($3 + [111])
	*($4 + [136]) = ($3 + [112])
	*($4 + [140]) = ($3 + [113])
	*($4 + [144]) = ($3 + [114])
	*($4 + [148]) = ($3 + [115])
	*($4 + [152]) = ($3 + [116])
	*($4 + [156]) = ($3 + [117])
	*($4 + [160]) = ($3 + [118])
	*($4 + [164]) = ($3 + [119])
	*($4 + [168]) = ($3 + [120])
	*($4 + [172]) = ($3 + [121])
	*($4 + [176]) = ($3 + [122])
	*($4 + [180]) = ($3 + [123])
	*($4 + [184]) = ($3 + [124])
	*($4 + [188]) = ($3 + [125])
	*($4 + [192]) = ($3 + [126])
	*($4 + [196]) = ($3 + [127])
	*($4 + [200]) = ($3 + [128])
	*($4 + [204]) = ($3 + [129])
	*($4 + [208]) = ($3 + [130])
	*($4 + [212]) = ($3 + [131])
	*($4 + [216]) = ($3 + [132])
	*($4 + [220]) = ($3 + [133])
	*($4 + [224]) = ($3 + [134])
	*($4 + [228]) = ($3 + [135])
	*($4 + [232]) = ($3 + [136])
	*($4 + [236]) = ($3 + [137])
	*($4 + [240]) = ($3 + [138])
	*($4 + [244]) = ($3 + [139])
	*($4 + [248]) = ($3 + [140])
	*($4 + [252]) = ($3 + [141])
	*($4 + [256]) = ($3 + [142])
	*($4 + [260]) = ($3 + [143])
	*($4 + [264]) = ($3 + [144])
	*($4 + [268]) = ($3 + [145])
	CALL $99(($4 + [8]), $4)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($3 + [152]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL $74($0, ($3 + [160]))
	CALL $74($0, ($3 + [172]))
	*($4 + [8]) = *(($3 + [184]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($4 + [8]) = *(($3 + [185]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [992])
	CALL memcpy(*($0 + [4]), ($4 + [8]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	CALL $75($0, ($3 + [188]))
	*($4 + [8]) = $3
	CALL $100(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [272])
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($2 + [4]), $3, [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [992])
	CALL memcpy(*($0 + [4]), $2, [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($2 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $2
	CALL $103(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $132(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $150($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $133(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $133($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [272])
	*([0] + [4]) = $6
	*(($4 = *($1))) = (*($4) + [8])
	$0 = *($0)
	*(($4 = *($1))) = (*($4) + [8])
	*(($4 = *($1))) = (*($4) + [8])
	$4 = *($0 + [24])
	$5 = (CASTING uint_64)(uint_32 ( *(($0 + [28])) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	$2 = *($1)
	$4 = *($2)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	*($2) = $4
	$3 = *(($0 + [24]))
	$3 = ( *(($0 + [28])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	if ( ($3 == 0) ){ goto $label$2 }
	*($2) = ($3 + $4)
	
.LABEL $label$2
	*(($4 = *($1))) = (*($4) + [32])
	*($6) = *($1)
	*($6 + [12]) = ($0 + [81])
	*($6 + [8]) = ($0 + [80])
	*($6 + [16]) = ($0 + [82])
	*($6 + [20]) = ($0 + [83])
	*($6 + [24]) = ($0 + [84])
	*($6 + [28]) = ($0 + [85])
	*($6 + [32]) = ($0 + [86])
	*($6 + [36]) = ($0 + [87])
	*($6 + [40]) = ($0 + [88])
	*($6 + [44]) = ($0 + [89])
	*($6 + [48]) = ($0 + [90])
	*($6 + [52]) = ($0 + [91])
	*($6 + [56]) = ($0 + [92])
	*($6 + [60]) = ($0 + [93])
	*($6 + [64]) = ($0 + [94])
	*($6 + [68]) = ($0 + [95])
	*($6 + [72]) = ($0 + [96])
	*($6 + [76]) = ($0 + [97])
	*($6 + [80]) = ($0 + [98])
	*($6 + [84]) = ($0 + [99])
	*($6 + [88]) = ($0 + [100])
	*($6 + [92]) = ($0 + [101])
	*($6 + [96]) = ($0 + [102])
	*($6 + [100]) = ($0 + [103])
	*($6 + [104]) = ($0 + [104])
	*($6 + [108]) = ($0 + [105])
	*($6 + [112]) = ($0 + [106])
	*($6 + [116]) = ($0 + [107])
	*($6 + [120]) = ($0 + [108])
	*($6 + [124]) = ($0 + [109])
	*($6 + [128]) = ($0 + [110])
	*($6 + [132]) = ($0 + [111])
	*($6 + [136]) = ($0 + [112])
	*($6 + [140]) = ($0 + [113])
	*($6 + [144]) = ($0 + [114])
	*($6 + [148]) = ($0 + [115])
	*($6 + [152]) = ($0 + [116])
	*($6 + [156]) = ($0 + [117])
	*($6 + [160]) = ($0 + [118])
	*($6 + [164]) = ($0 + [119])
	*($6 + [168]) = ($0 + [120])
	*($6 + [172]) = ($0 + [121])
	*($6 + [176]) = ($0 + [122])
	*($6 + [180]) = ($0 + [123])
	*($6 + [184]) = ($0 + [124])
	*($6 + [188]) = ($0 + [125])
	*($6 + [192]) = ($0 + [126])
	*($6 + [196]) = ($0 + [127])
	*($6 + [200]) = ($0 + [128])
	*($6 + [204]) = ($0 + [129])
	*($6 + [208]) = ($0 + [130])
	*($6 + [212]) = ($0 + [131])
	*($6 + [216]) = ($0 + [132])
	*($6 + [220]) = ($0 + [133])
	*($6 + [224]) = ($0 + [134])
	*($6 + [228]) = ($0 + [135])
	*($6 + [232]) = ($0 + [136])
	*($6 + [236]) = ($0 + [137])
	*($6 + [240]) = ($0 + [138])
	*($6 + [244]) = ($0 + [139])
	*($6 + [248]) = ($0 + [140])
	*($6 + [252]) = ($0 + [141])
	*($6 + [256]) = ($0 + [142])
	*($6 + [260]) = ($0 + [143])
	*($6 + [264]) = ($0 + [144])
	*($6 + [268]) = ($0 + [145])
	CALL $101(($6 + [8]), $6)
	*(($4 = *($1))) = (*($4) + [8])
	*($6) = *($1)
	*($6 + [12]) = ($0 + [172])
	*($6 + [8]) = ($0 + [160])
	*($6 + [16]) = ($0 + [184])
	*($6 + [20]) = ($0 + [185])
	*($6 + [24]) = ($0 + [188])
	CALL $72(($6 + [8]), $6)
	*($6 + [8]) = $0
	CALL $102(($6 + [8]), $1)
	*([0] + [4]) = ($6 + [272])
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), $3, [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $75(*($1), ($2 + [24]))
	*($4 + [8]) = $2
	CALL $98(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $75($0, ($1 + [76]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [68]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [992])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $75(*($1), ($0 + [32]))
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $37($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [992])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [992])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $88(CALL $89($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($0 + [4]), ($3 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($1 + [4]), ($3 + [32]), [8])
	$0 = (*($1 + [4]) + [8])
	*($1 + [4]) = $0
	CALL eosio_assert(((int_32)(*($1 + [8]) - $0) > (int_32)[7]), [992])
	CALL memcpy(*($1 + [4]), ($3 + [40]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $136($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $139 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $136($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

int_32 .FUNC $130 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11334]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11336])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11334]) = [1]
	$7 = ($7 << [16])
	*([0] + [11336]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11336])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11336]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11334]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11334]) = [1]
	$3 = ($3 << [16])
	*([0] + [11336]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11336])
	
.LABEL $label$8
	*([0] + [11336]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11228])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11036]
	$1 = (((int_32)$2 * (int_32)[12]) + [11036])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11340])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $133 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $134 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $135 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $136($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $136 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $132($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $133($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $132(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $133($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $130($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11248])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $129([2844], $0)
}

void .FUNC $8 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	float_64 $13
	float_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_32 $19
	$19 = (*([0] + [4]) - [464])
	*([0] + [4]) = $19
	$8 = *($2)
	*($19 + [432]) = $8
	$16 = *($2 + [8])
	*(($19 + [424])) = *(($2 + [24]))
	*($19 + [416]) = *($2 + [16])
	CALL $150(($19 + [400]), ($2 + [32]))
	CALL require_auth($8)
	$15 = *($0)
	if ( ((int_64)$8 == (int_64)$15) ){ goto $label$6 }
	if ( ((int_64)$16 != (int_64)$15) ){ goto $label$6 }
	$11 = [0]
	if ( ((uint_64)((int_64)*($19 + [416]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$7 }
	$8 = (uint_64)*($19 + [424]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$11 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$11 = [0]
	
.LABEL $label$7
	CALL eosio_assert($11, [2064])
	CALL eosio_assert(((int_64)*($19 + [416]) > (int_64)0), [2096])
	if ( CALL $110($0, *($19 + [432])) ){ goto $label$6 }
	*($19 + [392]) = [0]
	*($19 + [388]) = [0]
	$3 = (($19 + [384]) | [4])
	*($19 + [384]) = $3
	CALL $111(($19 + [368]), $0, ($19 + [400]), [44])
	$11 = *($19 + [368])
	if ( ((int_32)*($19 + [372]) == (int_32)$11) ){ goto $label$13 }
	$7 = (($19 + [384]) + [8])
	$2 = [0]
	$9 = [0]
	
.LOOP $label$14:
	$11 = CALL $143(($11 + $2), [58], [0])
	if ( ((int_32)$11 == (int_32)[-1]) ){ goto $label$12 }
	$6 = (*($19 + [368]) + $2)
	CALL $151($19, $6, [0], $11, $6)
	$6 = (*($19 + [368]) + $2)
	CALL $151(($19 + [248]), $6, ($11 + [1]), [-1], $6)
	$6 = CALL $112(($19 + [384]), ($19 + [208]), $19)
	$11 = *($6)
	if ( $11 ){ goto $label$15 }
	$11 = CALL $132([40])
	CALL $150(($11 + [16]), $19)
	*($11) = (int_64)0
	*($11 + [8]) = *($19 + [208])
	*($11 + [32]) = [0]
	*($11 + [28]) = [0]
	*($11 + [36]) = [0]
	*($6) = $11
	$10 = $11
	$4 = *(*($19 + [384]))
	if ( ($4 == 0) ){ goto $label$16 }
	*($19 + [384]) = $4
	$10 = *($6)
	
.LABEL $label$16
	CALL $113(*($19 + [388]), $10)
	*($7) = (*($7) + [1])
	
.LABEL $label$15
	CALL $135(($11 + [28]), ($19 + [248]))
	if ( ((*($19 + [248]) & [1]) == 0) ){ goto $label$17 }
	CALL $133(*((($19 + [248]) + [8])))
	
.LABEL $label$17
	if ( ((*($19) & [1]) == 0) ){ goto $label$18 }
	CALL $133(*(($19 + [8])))
	
.LABEL $label$18
	$2 = ($2 + [12])
	$11 = *($19 + [368])
	$9 = ($9 + [1])
	if ( ($9 <= ((int_32)(*($19 + [372]) - $11) / (int_32)[12])) ){ goto $label$14 }
	
.LABEL $label$13
	*(($19 + [8])) = [0]
	*($19) = (int_64)0
	$2 = CALL strlen([2128])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$21 }
	*($19) = ($2 << [1])
	$11 = ($19 | [1])
	if ( $2 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$9 = (($2 + [16]) & [-16])
	$11 = CALL $132($9)
	*($19) = ($9 | [1])
	*($19 + [8]) = $11
	*($19 + [4]) = $2
	
.LABEL $label$20
	CALL memcpy($11, [2128], $2)
	
.LABEL $label$19
	*(($11 + $2)) = [0]
	$2 = CALL $114(($19 + [384]), $19)
	if ( ((*($19) & [1]) == 0) ){ goto $label$22 }
	CALL $133(*($19 + [8]))
	
.LABEL $label$22
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$12 }
	CALL $150(($19 + [352]), ($2 + [28]))
	$8 = *($19 + [424])
	*($19 + [336]) = $8
	*($19 + [344]) = $1
	CALL eosio_assert(CALL $51($0, $8, $1), [2144])
	$2 = *($19 + [352])
	$11 = CALL strlen([2176])
	if ( ((int_32)$11 != (int_32)( *($19 + [356]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$23 }
	if ( CALL $144(($19 + [352]), [0], [-1], [2176], $11) ){ goto $label$23 }
	*($19 + [328]) = (int_64)0
	*(($19 + [8])) = [0]
	*($19) = (int_64)0
	$2 = CALL strlen([2192])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$26 }
	*($19) = ($2 << [1])
	$11 = ($19 | [1])
	if ( $2 ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$9 = (($2 + [16]) & [-16])
	$11 = CALL $132($9)
	*($19) = ($9 | [1])
	*($19 + [8]) = $11
	*($19 + [4]) = $2
	
.LABEL $label$25
	CALL memcpy($11, [2192], $2)
	
.LABEL $label$24
	*(($11 + $2)) = [0]
	$2 = CALL $114(($19 + [384]), $19)
	if ( ((*($19) & [1]) == 0) ){ goto $label$27 }
	CALL $133(*($19 + [8]))
	
.LABEL $label$27
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$31 }
	if ( (*($2 + [28]) & [1]) ){ goto $label$30 }
	$2 = (($2 + [28]) + [1])
	goto $label$29 
	
.LABEL $label$31
	$8 = *($19 + [328])
	goto $label$28 
	
.LABEL $label$30
	$2 = *($2 + [36])
	
.LABEL $label$29
	$8 = (CASTING int_64)(int_32 CALL atoi($2))
	*($19 + [328]) = $8
	
.LABEL $label$28
	$10 = *(($0 + [32]))
	$9 = *(($0 + [36]))
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$32 }
	$2 = ($9 + [-24])
	$6 = ([0] - $10)
	
.LOOP $label$33:
	if ( ((int_64)*(*($2)) == (int_64)$8) ){ goto $label$32 }
	$9 = $2
	$11 = ($2 + [-24])
	$2 = $11
	if ( ((int_32)($11 + $6) != (int_32)[-24]) ){ goto $label$33 }
	
.LABEL $label$32
	$11 = ($0 + [8])
	if ( ((int_32)$9 == (int_32)$10) ){ goto $label$35 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$11), [160])
	goto $label$34 
	
.LABEL $label$35
	$2 = [0]
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, $8)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$34 }
	$2 = CALL $38($11, $9)
	CALL eosio_assert(((int_32)*($2 + [116]) == (int_32)$11), [160])
	
.LABEL $label$34
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1872])
	CALL eosio_assert((int_64)(*($2 + [64]) == 0), [1904])
	CALL eosio_assert(((CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000)) <= *($2 + [72])), [2208])
	CALL eosio_assert((int_64)(((int_64)((int_64)*($19 + [336]) ^ (int_64)*($2 + [16])) | (int_64)((int_64)*($19 + [344]) ^ (int_64)*(($2 + [24])))) == 0), [2224])
	*($19 + [320]) = ($0 + [48])
	CALL $52($19, ($19 + [320]), ($19 + [336]))
	$2 = [0]
	$11 = *($19 + [4])
	if ( ($11 == 0) ){ goto $label$36 }
	$2 = ( $11 ? [0] : (int_64)(((int_64)((int_64)*($19 + [336]) ^ (int_64)*($11 + [16])) | (int_64)((int_64)*($19 + [344]) ^ (int_64)*(($11 + [24])))) == 0) )
	
.LABEL $label$36
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [2256])
	CALL eosio_assert(((int_64)*((($19 + [416]) + [8])) == (int_64)*(($2 + [40]))), [2288])
	CALL eosio_assert(((int_64)*($19 + [416]) >= (int_64)*($2 + [32])), [2352])
	*((($19 + [304]) + [8])) = [0]
	*($19 + [304]) = (int_64)0
	$2 = CALL strlen([1712])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$39 }
	*($19 + [304]) = ($2 << [1])
	$11 = (($19 + [304]) | [1])
	if ( $2 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$9 = (($2 + [16]) & [-16])
	$11 = CALL $132($9)
	*($19 + [304]) = ($9 | [1])
	*($19 + [312]) = $11
	*($19 + [308]) = $2
	
.LABEL $label$38
	CALL memcpy($11, [1712], $2)
	
.LABEL $label$37
	*(($11 + $2)) = [0]
	*(($19 + [8])) = [0]
	*($19) = (int_64)0
	$2 = CALL strlen([2384])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$42 }
	*($19) = ($2 << [1])
	$11 = ($19 | [1])
	if ( $2 ){ goto $label$41 }
	goto $label$40 
	
.LABEL $label$42
	$9 = (($2 + [16]) & [-16])
	$11 = CALL $132($9)
	*($19) = ($9 | [1])
	*($19 + [8]) = $11
	*($19 + [4]) = $2
	
.LABEL $label$41
	CALL memcpy($11, [2384], $2)
	
.LABEL $label$40
	*(($11 + $2)) = [0]
	$2 = CALL $114(($19 + [384]), $19)
	if ( ((*($19) & [1]) == 0) ){ goto $label$43 }
	CALL $133(*($19 + [8]))
	
.LABEL $label$43
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$44 }
	CALL $135(($19 + [304]), ($2 + [28]))
	$2 = ( *($19 + [312]) ? (($19 + [304]) | [1]) : (*($19 + [304]) & [1]) )
	$11 = [-1]
	
.LOOP $label$45:
	$9 = ($2 + $11)
	$6 = ($11 + [1])
	$11 = $6
	if ( *(($9 + [1])) ){ goto $label$45 }
	$17 = (CASTING uint_64)(uint_32 $6)
	$8 = (int_64)0
	$16 = (int_64)59
	$12 = (int_64)0
	
.LOOP $label$46:
	$15 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$17) ){ goto $label$47 }
	$11 = *($2)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$11 = ($11 + [165])
	goto $label$48 
	
.LABEL $label$49
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$47
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$51 }
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	goto $label$50 
	
.LABEL $label$51
	$15 = ((int_64)$15 & (int_64)15)
	
.LABEL $label$50
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$15 | (int_64)$12)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$46 }
	$2 = CALL is_account($12)
	if ( ((int_64)$12 == (int_64)*($19 + [432])) ){ goto $label$52 }
	if ( ((int_32)$2 ^ (int_32)[1]) ){ goto $label$52 }
	if ( (CALL $110($0, $12) == 0) ){ goto $label$44 }
	
.LABEL $label$52
	CALL $138(($19 + [304]), [1712])
	
.LABEL $label$44
	*(($19 + [296])) = [0]
	*($19 + [288]) = (int_64)0
	$2 = CALL strlen([1712])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$55 }
	*($19 + [288]) = ($2 << [1])
	$11 = (($19 + [288]) | [1])
	if ( $2 ){ goto $label$54 }
	goto $label$53 
	
.LABEL $label$55
	$9 = (($2 + [16]) & [-16])
	$11 = CALL $132($9)
	*($19 + [288]) = ($9 | [1])
	*($19 + [296]) = $11
	*($19 + [292]) = $2
	
.LABEL $label$54
	CALL memcpy($11, [1712], $2)
	
.LABEL $label$53
	*(($11 + $2)) = [0]
	*(($19 + [8])) = [0]
	*($19) = (int_64)0
	$2 = CALL strlen([2400])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$58 }
	*($19) = ($2 << [1])
	$11 = ($19 | [1])
	if ( $2 ){ goto $label$57 }
	goto $label$56 
	
.LABEL $label$58
	$9 = (($2 + [16]) & [-16])
	$11 = CALL $132($9)
	*($19) = ($9 | [1])
	*($19 + [8]) = $11
	*($19 + [4]) = $2
	
.LABEL $label$57
	CALL memcpy($11, [2400], $2)
	
.LABEL $label$56
	*(($11 + $2)) = [0]
	$2 = CALL $114(($19 + [384]), $19)
	if ( ((*($19) & [1]) == 0) ){ goto $label$59 }
	CALL $133(*($19 + [8]))
	
.LABEL $label$59
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$60 }
	CALL $135(($19 + [288]), ($2 + [28]))
	
.LABEL $label$60
	$2 = [1]
	$11 = *($19 + [288])
	$9 = CALL strlen([1440])
	if ( ((int_32)$9 != (int_32)( *($19 + [292]) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$62 }
	if ( (CALL $144(($19 + [288]), [0], [-1], [1440], $9) == 0) ){ goto $label$61 }
	
.LABEL $label$62
	$2 = *($19 + [288])
	$11 = CALL strlen([1456])
	if ( ((int_32)$11 != (int_32)( *($19 + [292]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$64 }
	if ( (CALL $144(($19 + [288]), [0], [-1], [1456], $11) == 0) ){ goto $label$63 }
	
.LABEL $label$64
	$2 = [1]
	$11 = *($19 + [288])
	$9 = CALL strlen([1472])
	if ( ((int_32)$9 != (int_32)( *($19 + [292]) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$65 }
	if ( (CALL $144(($19 + [288]), [0], [-1], [1472], $9) == 0) ){ goto $label$61 }
	
.LABEL $label$65
	$2 = *($19 + [288])
	$11 = CALL strlen([1488])
	if ( ((int_32)$11 != (int_32)( *($19 + [292]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$66 }
	if ( (CALL $144(($19 + [288]), [0], [-1], [1488], $11) == 0) ){ goto $label$63 }
	
.LABEL $label$66
	$2 = [0]
	$11 = *($19 + [288])
	$9 = CALL strlen([1504])
	if ( ((int_32)$9 != (int_32)( *($19 + [292]) ? uint_32($11 >> [1]) : ($11 & [1]) )) ){ goto $label$61 }
	$2 = (CALL $144(($19 + [288]), [0], [-1], [1504], $9) == 0)
	goto $label$61 
	
.LABEL $label$63
	$2 = [1]
	
.LABEL $label$61
	CALL eosio_assert($2, [2416])
	$8 = (int_64)0
	$16 = (int_64)59
	$2 = [1616]
	$12 = (int_64)0
	
.LOOP $label$67:
	$15 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$68 }
	$11 = *($2)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$11 = ($11 + [165])
	goto $label$69 
	
.LABEL $label$70
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$68
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$15 | (int_64)$12)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$67 }
	$11 = [0]
	*((($19 + [248]) + [32])) = [0]
	*($19 + [256]) = $12
	*($19 + [248]) = $1
	*($19 + [264]) = (int_64)-1
	$2 = ($19 + [424])
	$8 = *($2)
	*($19 + [272]) = (int_64)0
	$9 = CALL $115(($19 + [248]), (uint_64)$8 >> (uint_64)(int_64)8), [2448]
	$8 = *($9))
	$15 = *($9 + [8])
	CALL eosio_assert(((int_64)*($2) == (int_64)$15), [2480])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($8 - *($19 + [416]))) > (int_64)-4611686018427387904), [2528])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [2560])
	*($19 + [224]) = (int_64)-1
	*($19 + [232]) = [0]
	$16 = *($19 + [328])
	$12 = *($0)
	*($19 + [208]) = $12
	*($19 + [216]) = $16
	*(($19 + [236])) = [0]
	*((($19 + [208]) + [32])) = [0]
	$2 = CALL db_lowerbound_i64($12, $16, (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$71 }
	$2 = CALL $39(($19 + [208]), $2)
	
.LOOP $label$72:
	CALL eosio_assert(((int_64)*(($2 + [56])) == (int_64)$15), [2480])
	$8 = (int_64)
	CALL eosio_assert(((int_64)$8($8 - *($2 + [48]))) > (int_64)-4611686018427387904), [2528])
	CALL eosio_assert(((int_64)$8 < (int_64)4611686018427387904), [2560])
	CALL eosio_assert([1], [352])
	$2 = CALL db_next_i64(*($2 + [92]), $19)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$71 }
	$2 = CALL $39(($19 + [208]), $2)
	goto $label$72 
	
.LABEL $label$71
	$13 = (CASTING float_64)(int_64 $8)
	$8 = (Rounds 0)(CALL floor(((float_64)((float_64)((float_64)$13 / (float_64)CALL floor(((float_64)CALL $153((float_64)1e-06) / (float_64)CALL $153((float_64)0.446246609343597)))) * (float_64)(float_64)0.446246609343597) / (float_64)(float_64)0.5537533906564029)))
	*($19 + [192]) = $8
	*($19 + [200]) = $15
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$8 = (uint_64)$15 >> (uint_64)(int_64)8
	$16 = $8)
	
.LOOP $label$75:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$74 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$76 }
	
.LOOP $label$77:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$74 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$77 }
	
.LABEL $label$76
	$9 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$75 }
	goto $label$73 
	
.LABEL $label$74
	$9 = [0]
	
.LABEL $label$73
	CALL eosio_assert($9, [96])
	$14 = CALL floor(((float_64)((float_64)((float_64)$13 / (float_64)CALL floor(((float_64)CALL $153((float_64)1e-06) / (float_64)CALL $153((float_64)0.458597422632763)))) * (float_64)(float_64)0.458597422632763) / (float_64)(float_64)0.5414025773672371))
	*($19 + [184]) = $15
	$16 = (Rounds 0)($14)
	*($19 + [176]) = $16
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$16 = $8
	
.LOOP $label$80:
	$11 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$79 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$81 }
	
.LOOP $label$82:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$79 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$82 }
	
.LABEL $label$81
	$9 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$80 }
	goto $label$78 
	
.LABEL $label$79
	$9 = [0]
	
.LABEL $label$78
	CALL eosio_assert($9, [96])
	$14 = CALL floor(((float_64)((float_64)((float_64)$13 / (float_64)CALL floor(((float_64)CALL $153((float_64)1e-06) / (float_64)CALL $153((float_64)0.095155968023641)))) * (float_64)(float_64)0.095155968023641) / (float_64)(float_64)0.904844031976359))
	*($19 + [168]) = $15
	$16 = (Rounds 0)($14)
	*($19 + [160]) = $16
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$16 = $8
	
.LOOP $label$85:
	$2 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$84 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$86 }
	
.LOOP $label$87:
	$16 = (uint_64)$16 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$16) & (int_64)255) != (int_64)0) ){ goto $label$84 }
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$87 }
	
.LABEL $label$86
	$9 = [1]
	$11 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[7]) ){ goto $label$85 }
	goto $label$83 
	
.LABEL $label$84
	$9 = [0]
	
.LABEL $label$83
	CALL eosio_assert($9, [96])
	$13 = CALL floor(((float_64)((float_64)((float_64)$13 / (float_64)CALL floor(((float_64)CALL $153((float_64)1e-06) / (float_64)CALL $153((float_64)0.074698795180723)))) * (float_64)(float_64)0.074698795180723) / (float_64)(float_64)0.925301204819277))
	*($19 + [152]) = $15
	$16 = (Rounds 0)($13)
	*($19 + [144]) = $16
	CALL eosio_assert((uint_64)(((int_64)$16 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	
.LOOP $label$90:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$89 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$91 }
	
.LOOP $label$92:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$89 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$92 }
	
.LABEL $label$91
	$11 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$90 }
	goto $label$88 
	
.LABEL $label$89
	$11 = [0]
	
.LABEL $label$88
	CALL eosio_assert($11, [96])
	$2 = CALL db_lowerbound_i64(*($19 + [208]), *(($19 + [216])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$94 }
	$11 = CALL $39(($19 + [208]), $2)
	$14 = (float_64)100
	
.LOOP $label$95:
	$2 = ($11 + [76])
	$6 = *($11 + [76])
	$9 = ($11 + [80])
	$10 = CALL strlen([1504])
	if ( ((int_32)$10 != (int_32)( *($9) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$98 }
	if ( (CALL $144($2, [0], [-1], [1504], $10) == 0) ){ goto $label$97 }
	
.LABEL $label$98
	$13 = (float_64)0
	$6 = *($2)
	$10 = CALL strlen([1488])
	if ( ((int_32)$10 != (int_32)( *($9) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$96 }
	if ( CALL $144($2, [0], [-1], [1488], $10) ){ goto $label$96 }
	
.LABEL $label$97
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 *($11 + [48])) / (float_64)(CASTING float_64)(int_64 *($19 + [144]))) * (float_64)(float_64)100)
	
.LABEL $label$96
	$6 = *($2)
	$10 = CALL strlen([1456])
	if ( ((int_32)$10 != (int_32)( *($9) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$99 }
	if ( CALL $144($2, [0], [-1], [1456], $10) ){ goto $label$99 }
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 *($11 + [48])) / (float_64)(CASTING float_64)(int_64 *($19 + [176]))) * (float_64)(float_64)100)
	
.LABEL $label$99
	$6 = *($2)
	$10 = CALL strlen([1440])
	if ( ((int_32)$10 != (int_32)( *($9) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$100 }
	if ( CALL $144($2, [0], [-1], [1440], $10) ){ goto $label$100 }
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 *($11 + [48])) / (float_64)(CASTING float_64)(int_64 *($19 + [192]))) * (float_64)(float_64)100)
	
.LABEL $label$100
	$9 = *($2)
	$6 = CALL strlen([1472])
	if ( ((int_32)$6 != (int_32)( *($9) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$101 }
	if ( CALL $144($2, [0], [-1], [1472], $6) ){ goto $label$101 }
	$13 = ((float_64)((float_64)(CASTING float_64)(int_64 *($11 + [48])) / (float_64)(CASTING float_64)(int_64 *($19 + [160]))) * (float_64)(float_64)100)
	
.LABEL $label$101
	CALL eosio_assert([1], [352])
	$14 = (float_64))($14 - $13)
	$2 = CALL db_next_i64(*($11 + [92]), $19)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$93 }
	$11 = CALL $39(($19 + [208]), $2)
	goto $label$95 
	
.LABEL $label$94
	$14 = (float_64)100
	
.LABEL $label$93
	*($19 + [136]) = $15
	*($19 + [128]) = (int_64)0
	CALL eosio_assert([1], [32])
	$8 = (uint_64)*($19 + [136]) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$104:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$103 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$105 }
	
.LOOP $label$106:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$103 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$106 }
	
.LABEL $label$105
	$11 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$104 }
	goto $label$102 
	
.LABEL $label$103
	$11 = [0]
	
.LABEL $label$102
	CALL eosio_assert($11, [96])
	$2 = *($19 + [288])
	$11 = CALL strlen([1504])
	if ( ((int_32)$11 != (int_32)( *($19 + [292]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$109 }
	if ( (CALL $144(($19 + [288]), [0], [-1], [1504], $11) == 0) ){ goto $label$108 }
	
.LABEL $label$109
	$2 = *($19 + [288])
	$11 = CALL strlen([1488])
	if ( ((int_32)$11 != (int_32)( *($19 + [292]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$107 }
	if ( CALL $144(($19 + [288]), [0], [-1], [1488], $11) ){ goto $label$107 }
	
.LABEL $label$108
	*($19 + [128]) = (Rounds 0)(CALL floor(((float_64)((float_64)$14 * (float_64)(CASTING float_64)(int_64 *($19 + [144]))) / (float_64)(float_64)100)))
	
.LABEL $label$107
	$2 = *($19 + [288])
	$11 = CALL strlen([1456])
	if ( ((int_32)$11 != (int_32)( *($19 + [292]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$110 }
	if ( CALL $144(($19 + [288]), [0], [-1], [1456], $11) ){ goto $label$110 }
	*($19 + [128]) = (Rounds 0)(CALL floor(((float_64)((float_64)$14 * (float_64)(CASTING float_64)(int_64 *($19 + [176]))) / (float_64)(float_64)100)))
	
.LABEL $label$110
	$2 = *($19 + [288])
	$11 = CALL strlen([1440])
	if ( ((int_32)$11 != (int_32)( *($19 + [292]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$111 }
	if ( CALL $144(($19 + [288]), [0], [-1], [1440], $11) ){ goto $label$111 }
	*($19 + [128]) = (Rounds 0)(CALL floor(((float_64)((float_64)$14 * (float_64)(CASTING float_64)(int_64 *($19 + [192]))) / (float_64)(float_64)100)))
	
.LABEL $label$111
	$2 = *($19 + [288])
	$11 = CALL strlen([1472])
	if ( ((int_32)$11 != (int_32)( *($19 + [292]) ? uint_32($2 >> [1]) : ($2 & [1]) )) ){ goto $label$112 }
	if ( CALL $144(($19 + [288]), [0], [-1], [1472], $11) ){ goto $label$112 }
	*($19 + [128]) = (Rounds 0)(CALL floor(((float_64)((float_64)$14 * (float_64)(CASTING float_64)(int_64 *($19 + [160]))) / (float_64)(float_64)100)))
	
.LABEL $label$112
	CALL $116(($19 + [144]))
	CALL $116(($19 + [176]))
	CALL $116(($19 + [192]))
	CALL $116(($19 + [160]))
	CALL $116(($19 + [128]))
	CALL eosio_assert(((int_64)*((($19 + [416]) + [8])) == (int_64)*((($19 + [128]) + [8]))), [2288])
	CALL eosio_assert(((int_64)*($19 + [416]) <= (int_64)*($19 + [128])), [2592])
	$2 = ($19 + [224])
	$8 = *($2)
	if ( ((int_64)$8 != (int_64)-1) ){ goto $label$113 }
	$8 = (int_64)0
	$11 = CALL db_lowerbound_i64(*($19 + [208]), *((($19 + [208]) + [8])), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$11 < (int_32)[0]) ){ goto $label$114 }
	CALL $39(($19 + [208]), $11)
	*($19 + [4]) = [0]
	*($19) = ($19 + [208])
	$8 = *(*(CALL $117($19) + [4]))
	$8 = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$114
	*(($19 + [224])) = $8
	
.LABEL $label$113
	CALL eosio_assert((uint_64)($8 <= (int_64)-2), [1072])
	*($19 + [120]) = *($2)
	$8 = *($0)
	*($19 + [4]) = ($19 + [328])
	*($19) = ($19 + [120])
	*($19 + [8]) = ($19 + [432])
	*($19 + [12]) = ($19 + [304])
	*($19 + [16]) = ($19 + [336])
	*($19 + [20]) = ($19 + [416])
	*($19 + [24]) = ($19 + [288])
	CALL $118(($19 + [48]), ($19 + [208]), $8, $19)
	CALL $68(($19 + [448]), [1288])
	$2 = CALL $141(($19 + [448]), [0], [2624])
	$11 = ($2 + [8])
	*((($19 + [48]) + [8])) = *($11)
	*($19 + [48]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($11) = [0]
	$2 = CALL $140(($19 + [48]), [2640])
	$11 = ($2 + [8])
	*(($19 + [8])) = *($11)
	*($19) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($11) = [0]
	CALL _ZNSt3__19to_stringEy(($19 + [88]), *($19 + [120]))
	$2 = *($19 + [88])
	$11 = ($2 & [1])
	$2 = CALL $139($19, ( *($19 + [96]) ? (($19 + [88]) | [1]) : $11 ), ( *($19 + [92]) ? uint_32($2 >> [1]) : $11 ))
	$11 = ($2 + [8])
	*((($19 + [104]) + [8])) = *($11)
	*($19 + [104]) = *($2)
	*($2) = [0]
	*(($2 + [4])) = [0]
	*($11) = [0]
	if ( ((*($19 + [88]) & [1]) == 0) ){ goto $label$115 }
	CALL $133(*(($19 + [96])))
	
.LABEL $label$115
	if ( ((*($19) & [1]) == 0) ){ goto $label$116 }
	CALL $133(*($19 + [8]))
	
.LABEL $label$116
	if ( ((*($19 + [48]) & [1]) == 0) ){ goto $label$117 }
	CALL $133(*($19 + [56]))
	
.LABEL $label$117
	if ( ((*($19 + [448]) & [1]) == 0) ){ goto $label$118 }
	CALL $133(*($19 + [456]))
	
.LABEL $label$118
	$5 = *($0)
	$8 = (int_64)0
	$15 = (int_64)59
	$2 = [1840]
	$12 = (int_64)0
	
.LOOP $label$119:
	if ( ((uint_64)$8 > (uint_64)(int_64)5) ){ goto $label$124 }
	$11 = *($2)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$123 }
	$11 = ($11 + [165])
	goto $label$122 
	
.LABEL $label$124
	$16 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$123
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$122
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$121
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$120
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$16 | (int_64)$12)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$119 }
	$8 = (int_64)0
	$15 = (int_64)59
	$2 = [16]
	$17 = (int_64)0
	
.LOOP $label$125:
	if ( ((uint_64)$8 > (uint_64)(int_64)7) ){ goto $label$130 }
	$11 = *($2)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$129 }
	$11 = ($11 + [165])
	goto $label$128 
	
.LABEL $label$130
	$16 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$127 }
	goto $label$126 
	
.LABEL $label$129
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$128
	$16 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$127
	$16 = ((int_64)((int_64)$16 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$126
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$17 = ((int_64)$16 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$125 }
	$8 = (int_64)0
	$16 = (int_64)59
	$2 = [1616]
	$18 = (int_64)0
	
.LOOP $label$131:
	$15 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$132 }
	$11 = *($2)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$134 }
	$11 = ($11 + [165])
	goto $label$133 
	
.LABEL $label$134
	$11 = ( ($11 + [208]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$133
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($11 & [31])) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$132
	$2 = ($2 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$18 = ((int_64)$15 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$131 }
	*(($19 + [20])) = *($19 + [420])
	*($19 + [8]) = $18
	*(($19 + [28])) = *(($19 + [428]))
	*(($19 + [24])) = *(($19 + [424]))
	*($19) = $5
	*($19 + [16]) = *($19 + [416])
	CALL $150(($19 + [32]), ($19 + [104]))
	*(($11 = (($19 + [48]) + [24]))) = [0]
	*($19 + [56]) = $17
	*($19 + [48]) = $1
	*($19 + [64]) = (int_64)0
	*(($2 = CALL $132([16]))) = $5
	*($2 + [8]) = $12
	*((($19 + [48]) + [32])) = [0]
	$9 = ($2 + [16])
	*($11) = $9
	*((($19 + [48]) + [20])) = $9
	*($19 + [64]) = $2
	*($19 + [76]) = [0]
	*((($19 + [48]) + [36])) = [0]
	$2 = *($19 + [32])
	$11 = ( *(($19 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	$2 = ($11 + [32])
	$8 = (CASTING uint_64)(uint_32 $11)
	$11 = (($19 + [48]) + [28])
	
.LOOP $label$135:
	$2 = ($2 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$135 }
	if ( ($2 == 0) ){ goto $label$137 }
	CALL $37($11, $2)
	$11 = *(($19 + [80]))
	$2 = *(($19 + [76]))
	goto $label$136 
	
.LABEL $label$137
	$11 = [0]
	$2 = [0]
	
.LABEL $label$136
	*($19 + [452]) = $2
	*($19 + [448]) = $2
	*($19 + [456]) = $11
	*($19 + [440]) = ($19 + [448])
	*($19 + [88]) = $19
	CALL $119(($19 + [88]), ($19 + [440]))
	CALL $92(($19 + [448]), ($19 + [48]))
	$2 = *($19 + [448])
	CALL send_inline($2, (*($19 + [452]) - $2))
	$2 = *($19 + [448])
	if ( ($2 == 0) ){ goto $label$138 }
	*($19 + [452]) = $2
	CALL $133($2)
	
.LABEL $label$138
	$2 = *($19 + [76])
	if ( ($2 == 0) ){ goto $label$139 }
	*(($19 + [80])) = $2
	CALL $133($2)
	
.LABEL $label$139
	$2 = *($19 + [64])
	if ( ($2 == 0) ){ goto $label$140 }
	*(($19 + [68])) = $2
	CALL $133($2)
	
.LABEL $label$140
	if ( ((*($19 + [32]) & [1]) == 0) ){ goto $label$141 }
	CALL $133(*(($19 + [40])))
	
.LABEL $label$141
	if ( ((*($19 + [104]) & [1]) == 0) ){ goto $label$142 }
	CALL $133(*($19 + [112]))
	
.LABEL $label$142
	$9 = *($19 + [232])
	if ( ($9 == 0) ){ goto $label$143 }
	$6 = ($19 + [236])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$145 }
	
.LOOP $label$146:
	$2 = ($2 + [-24])
	$11 = *($2)
	*($2) = [0]
	if ( ($11 == 0) ){ goto $label$147 }
	if ( ((*($11 + [76]) & [1]) == 0) ){ goto $label$148 }
	CALL $133(*(($11 + [84])))
	
.LABEL $label$148
	CALL $133($11)
	
.LABEL $label$147
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$146 }
	$2 = *(($19 + [232]))
	goto $label$144 
	
.LABEL $label$145
	$2 = $9
	
.LABEL $label$144
	*($6) = $9
	CALL $133($2)
	
.LABEL $label$143
	$9 = *($19 + [272])
	if ( ($9 == 0) ){ goto $label$149 }
	$6 = ($19 + [276])
	$2 = *($6)
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$151 }
	
.LOOP $label$152:
	$2 = ($2 + [-24])
	$11 = *($2)
	*($2) = [0]
	if ( ($11 == 0) ){ goto $label$153 }
	CALL $133($11)
	
.LABEL $label$153
	if ( ((int_32)$9 != (int_32)$2) ){ goto $label$152 }
	$2 = *(($19 + [272]))
	goto $label$150 
	
.LABEL $label$151
	$2 = $9
	
.LABEL $label$150
	*($6) = $9
	CALL $133($2)
	
.LABEL $label$149
	if ( ((*($19 + [288]) & [1]) == 0) ){ goto $label$154 }
	CALL $133(*($19 + [296]))
	
.LABEL $label$154
	if ( ((*($19 + [304]) & [1]) == 0) ){ goto $label$23 }
	CALL $133(*($19 + [312]))
	
.LABEL $label$23
	if ( ((*($19 + [352]) & [1]) == 0) ){ goto $label$12 }
	CALL $133(*($19 + [360]))
	
.LABEL $label$12
	$9 = *($19 + [368])
	if ( ($9 == 0) ){ goto $label$155 }
	$2 = *($19 + [372])
	if ( ((int_32)$2 == (int_32)$9) ){ goto $label$157 }
	$11 = ([0] - $9)
	$2 = ($2 + [-12])
	
.LOOP $label$158:
	if ( ((*($2) & [1]) == 0) ){ goto $label$159 }
	CALL $133(*(($2 + [8])))
	
.LABEL $label$159
	$2 = ($2 + [-12])
	if ( ((int_32)($2 + $11) != (int_32)[-12]) ){ goto $label$158 }
	$2 = *($19 + [368])
	goto $label$156 
	
.LABEL $label$157
	$2 = $9
	
.LABEL $label$156
	*($19 + [372]) = $9
	CALL $133($2)
	
.LABEL $label$155
	CALL $120(($19 + [384]), *($19 + [388]))
	
.LABEL $label$6
	if ( ((*($19 + [400]) & [1]) == 0) ){ goto $label$160 }
	CALL $133(*($19 + [408]))
	
.LABEL $label$160
	*([0] + [4]) = ($19 + [464])
	return (unreachable)
	
.LABEL $label$5
	CALL $134($19)
	
.LABEL $label$4
	CALL $134(($19 + [304]))
	
.LABEL $label$3
	CALL $134($19)
	
.LABEL $label$2
	CALL $134(($19 + [288]))
	
.LABEL $label$1
	CALL $134($19)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7, int_32 $8)
{
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [80])
	*([0] + [4]) = $19
	*($19 + [72]) = $1
	*($19 + [64]) = $2
	$2 = (int_64)0
	$17 = (int_64)59
	$13 = [592]
	$14 = (int_64)0
	
.LOOP $label$1:
	$15 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$9 = *($13)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$9 = ($9 + [165])
	goto $label$3 
	
.LABEL $label$4
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($9 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$2
	$13 = ($13 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$1 }
	$2 = (int_64)0
	$15 = (int_64)59
	$13 = [608]
	$16 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$10 }
	$9 = *($13)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$9 = ($9 + [165])
	goto $label$8 
	
.LABEL $label$10
	$17 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$6
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$5 }
	CALL require_auth2($14, $16)
	$10 = *(($0 + [32]))
	$18 = *(($0 + [36]))
	if ( ((int_32)$18 == (int_32)$10) ){ goto $label$11 }
	$13 = ($18 + [-24])
	$11 = ([0] - $10)
	
.LOOP $label$12:
	if ( ((int_64)*(*($13)) == (int_64)$1) ){ goto $label$11 }
	$18 = $13
	$9 = ($13 + [-24])
	$13 = $9
	if ( ((int_32)($9 + $11) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$11 = ($0 + [8])
	if ( ((int_32)$18 == (int_32)$10) ){ goto $label$14 }
	$13 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [116]) == (int_32)$11), [160])
	goto $label$13 
	
.LABEL $label$14
	$13 = [0]
	$9 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$13 }
	$13 = CALL $38($11, $9)
	CALL eosio_assert(((int_32)*($13 + [116]) == (int_32)$11), [160])
	
.LABEL $label$13
	$10 = ((int_32)$13 != (int_32)[0])
	CALL eosio_assert($10, [1872])
	CALL eosio_assert((int_64)(*($13 + [64]) == 0), [1904])
	CALL eosio_assert(((uint_32)*($13 + [72]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL $fimport$15() / (uint_64)(int_64)1000000))), [1936])
	CALL eosio_assert(((int_32)(int_32((*($4 + [4]) - *($4)) >> [2]) & [-2]) == (int_32)[2]), [1968])
	CALL eosio_assert(((int_32)(int_32((*($5 + [4]) - *($5)) >> [2]) & [-2]) == (int_32)[2]), [2000])
	$9 = [1]
	$18 = *($8)
	$12 = CALL strlen([1472])
	if ( ((int_32)$12 != (int_32)( *($8 + [4]) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$16 }
	if ( (CALL $144($8, [0], [-1], [1472], $12) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$9 = *($8)
	$18 = ($8 + [4])
	$12 = CALL strlen([1440])
	if ( ((int_32)$12 != (int_32)( *($18) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$18 }
	if ( (CALL $144($8, [0], [-1], [1440], $12) == 0) ){ goto $label$17 }
	
.LABEL $label$18
	$9 = [1]
	$18 = *($8)
	$12 = CALL strlen([1456])
	if ( ((int_32)$12 != (int_32)( *($18) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$19 }
	if ( (CALL $144($8, [0], [-1], [1456], $12) == 0) ){ goto $label$15 }
	
.LABEL $label$19
	$9 = *($8)
	$18 = ($8 + [4])
	$12 = CALL strlen([1488])
	if ( ((int_32)$12 != (int_32)( *($18) ? uint_32($9 >> [1]) : ($9 & [1]) )) ){ goto $label$20 }
	if ( (CALL $144($8, [0], [-1], [1488], $12) == 0) ){ goto $label$17 }
	
.LABEL $label$20
	$9 = [0]
	$18 = *($8)
	$12 = CALL strlen([1504])
	if ( ((int_32)$12 != (int_32)( *($18) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$15 }
	$9 = (CALL $144($8, [0], [-1], [1504], $12) == 0)
	goto $label$15 
	
.LABEL $label$17
	$9 = [1]
	
.LABEL $label$15
	CALL eosio_assert($9, [2032])
	*($19 + [32]) = [0]
	*($19 + [24]) = (int_64)0
	$9 = (*(($4 + [4])) - *($4))
	$18 = int_32($9 >> [2])
	if ( ($18 == 0) ){ goto $label$23 }
	if ( ((uint_32)$18 >= (uint_32)[1073741824]) ){ goto $label$22 }
	$9 = CALL $132($9)
	*(($19 + [32])) = ($9 + ($18 << [2]))
	*($19 + [24]) = $9
	*($19 + [28]) = $9
	$4 = *($4)
	$18 = (*(($4 + [4])) - $4)
	if ( ((int_32)$18 < (int_32)[1]) ){ goto $label$23 }
	CALL memcpy($9, $4, $18)
	*($19 + [28]) = ($9 + $18)
	
.LABEL $label$23
	*(($19 + [44])) = [0]
	*($19 + [36 align=4]) = (int_64)0
	$9 = (*(($5 + [4])) - *($5))
	$18 = int_32($9 >> [2])
	if ( ($18 == 0) ){ goto $label$24 }
	if ( ((uint_32)$18 >= (uint_32)[1073741824]) ){ goto $label$21 }
	$9 = CALL $132($9)
	*(($19 + [36])) = $9
	*(($4 = ($19 + [40]))) = $9
	*(($19 + [44])) = ($9 + ($18 << [2]))
	$5 = *($5)
	$18 = (*(($5 + [4])) - $5)
	if ( ((int_32)$18 < (int_32)[1]) ){ goto $label$24 }
	CALL memcpy($9, $5, $18)
	*($4) = ($9 + $18)
	
.LABEL $label$24
	*($19 + [49]) = $7
	*($19 + [48]) = $6
	CALL $150(($19 + [52]), $8)
	*($19 + [8]) = ($19 + [24])
	CALL eosio_assert($10, [768])
	CALL $106($11, $13, (int_64)0, ($19 + [8]))
	$2 = *($0)
	*($19 + [12]) = $3
	*($19 + [8]) = ($19 + [72])
	*($19 + [16]) = ($19 + [64])
	CALL $107($19, ($0 + [88]), $2, ($19 + [8]))
	CALL $64($0, *($13 + [16]), *(($13 + [24])))
	if ( ((*($19 + [52]) & [1]) == 0) ){ goto $label$25 }
	CALL $133(*(($19 + [60])))
	
.LABEL $label$25
	$13 = *($19 + [36])
	if ( ($13 == 0) ){ goto $label$26 }
	*(($19 + [40])) = $13
	CALL $133($13)
	
.LABEL $label$26
	$13 = *($19 + [24])
	if ( ($13 == 0) ){ goto $label$27 }
	*($19 + [28]) = $13
	CALL $133($13)
	
.LABEL $label$27
	*([0] + [4]) = ($19 + [80])
	return (unreachable)
	
.LABEL $label$22
	CALL $149(($19 + [24]))
	
.LABEL $label$21
	CALL $149(($19 + [36]))
	(unreachable)
}

void .FUNC $123 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([2688])
	
.LABEL $label$1
	$2 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)8)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)16)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)24)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)32)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)40)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	*($3 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)56)
	*($3 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($3 + [15]), [1])
	
.LABEL $label$2
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $122 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	*($1) = *(*($0))
	*($1 + [8]) = *(*($0 + [4]))
	*($1 + [16]) = *(*($0 + [8]))
	$6 = *($0 + [12])
	if ( (*($6) & [1]) ){ goto $label$2 }
	$6 = ($6 + [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($6 + [8])
	
.LABEL $label$1
	$5 = [-1]
	
.LOOP $label$3:
	$4 = ($6 + $5)
	$2 = ($5 + [1])
	$5 = $2
	if ( *(($4 + [1])) ){ goto $label$3 }
	$3 = (CASTING uint_64)(uint_32 $2)
	$8 = (int_64)0
	$7 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$4:
	$10 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$3) ){ goto $label$5 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$5 = ($5 + [165])
	goto $label$6 
	
.LABEL $label$7
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$9 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$8
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$4 }
	*($1 + [24]) = $9
	$6 = *($0 + [16])
	$8 = *($6)
	*(($1 + [40])) = *(($6 + [8]))
	*($1 + [32]) = $8
	$6 = *($0 + [20])
	*($1 + [48]) = *($6)
	*(($1 + [56])) = *(($6 + [8]))
	*($1 + [64]) = (int_64)0
	*($1 + [72]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL $135(($1 + [76]), *($0 + [24]))
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$6 = (*([0] + [4]) - [16])
	$7 = $6
	*([0] + [4]) = $6
	$2 = *($0)
	CALL $122(*($0 + [4]), $1)
	$4 = *($1 + [76])
	$3 = ( *(($1 + [80])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($3 + [76])
	$5 = (CASTING uint_64)(uint_32 $3)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($4)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($6 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($6 + $4)
	CALL $90($7, $1)
	$5 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($2 + [8]), (int_64)4229443000054317056, *(*($0 + [8])), $5, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$4 }
	CALL free($6)
	
.LABEL $label$4
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [16])
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $120($0, *($1))
	CALL $120($0, *($1 + [4]))
	if ( ((*(($1 + [28])) & [1]) == 0) ){ goto $label$2 }
	CALL $133(*(($1 + [36])))
	
.LABEL $label$2
	if ( ((*(($1 + [16])) & [1]) == 0) ){ goto $label$3 }
	CALL $133(*(($1 + [24])))
	
.LABEL $label$3
	CALL $133($1)
	
.LABEL $label$1
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $132(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $133(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $133($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $132(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $133($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $133($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	$9 = $10
	*([0] + [4]) = $10
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$4 = ([0] - $3)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$5 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [560])
	if ( ((uint_32)$7 <= (uint_32)[512]) ){ goto $label$6 }
	$3 = CALL malloc($7)
	CALL db_get_i64($1, $3, $7)
	CALL free($3)
	goto $label$5 
	
.LABEL $label$6
	$3 = ($10 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $3
	CALL db_get_i64($1, $3, $7)
	
.LABEL $label$5
	$2 = ($0 + [24])
	*(($5 = CALL $132([32])) + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [32])
	$10 = ($5 + [8])
	$8 = (int_64)5462355
	$6 = [0]
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$4 = [0]
	
.LABEL $label$7
	CALL eosio_assert($4, [96])
	*($5 + [16]) = $0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [128])
	CALL memcpy($5, $3, [8])
	CALL eosio_assert(((int_32)($7 & [-8]) != (int_32)[8]), [128])
	CALL memcpy($10, ($3 + [8]), [8])
	*($5 + [20]) = $1
	*($9 + [24]) = $5
	$8 = (uint_64)*(($5 + [8])) >> (uint_64)(int_64)8
	*($9 + [16]) = $8)
	$7 = *($5 + [20])
	*($9 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($6 + [8]) = $8
	*($6 + [16]) = $7
	*($9 + [24]) = [0]
	*($6) = $5
	*($1) = ($6 + [24])
	goto $label$12 
	
.LABEL $label$13
	CALL $125($2, ($9 + [24]), ($9 + [16]), ($9 + [12]))
	
.LABEL $label$12
	$6 = *($9 + [24])
	*($9 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $133($6)
	
.LABEL $label$3
	*([0] + [4]) = ($9 + [32])
	return $5
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $15 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL require_auth(*($0))
	$5 = CALL db_lowerbound_i64(*($0 + [48]), *(($0 + [56])), (int_64)-4060986516896743424, (int_64)0)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$2 = ($0 + [8])
	$1 = ($0 + [48])
	$5 = CALL $54($1, $5)
	
.LOOP $label$2:
	if ( (CALL $51($0, *($5 + [16]), *(($5 + [24]))) == 0) ){ goto $label$3 }
	*($6) = $2
	$3 = ($5 + [16])
	CALL $63(($6 + [8]), $6, $3)
	$4 = *($6 + [12])
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_64)(((int_64)((int_64)*($3) ^ (int_64)*($4 + [16])) | (int_64)((int_64)*(($3 + [8])) ^ (int_64)*(($4 + [24])))) == 0) == 0) ){ goto $label$4 }
	if ( $4 ){ goto $label$3 }
	
.LABEL $label$4
	CALL $64($0, *($3), *(($3 + [8])))
	
.LABEL $label$3
	CALL eosio_assert([1], [352])
	$5 = CALL db_next_i64(*($5 + [52]), ($6 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$5 = CALL $54($1, $5)
	goto $label$2 
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	*([0] + [4]) = $11
	CALL require_auth(*($0))
	$7 = *($2)
	CALL eosio_assert(((int_64)$7 > (int_64)0), [672])
	$3 = *($2 + [8])
	$9 = [0]
	if ( ((uint_64)((int_64)$7 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$7 = (uint_64)$3 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$9 = [0]
	
.LABEL $label$1
	CALL eosio_assert($9, [704])
	*($11 + [40]) = $1
	*($11 + [32]) = $3
	CALL eosio_assert(CALL $51($0, $3, $1), [736])
	$4 = ($0 + [48])
	*($11 + [24]) = $4
	CALL $52(($11 + [8]), ($11 + [24]), ($11 + [32]))
	$8 = *($11 + [12])
	if ( ($8 == 0) ){ goto $label$9 }
	if ( ((int_64)(((int_64)((int_64)*($11 + [32]) ^ (int_64)*($8 + [16])) | (int_64)((int_64)*($11 + [40]) ^ (int_64)*(($8 + [24])))) == 0) == 0) ){ goto $label$9 }
	if ( ($8 == 0) ){ goto $label$9 }
	$7 = *($8)
	$5 = *(($0 + [72]))
	$10 = *(($0 + [76]))
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$10 }
	$8 = ($10 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$11:
	if ( ((int_64)*(*($8)) == (int_64)$7) ){ goto $label$10 }
	$10 = $8
	$9 = ($8 + [-24])
	$8 = $9
	if ( ((int_32)($9 + $6) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$8 }
	$8 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [160])
	goto $label$7 
	
.LABEL $label$9
	$7 = *($0)
	*($11 + [8]) = $0
	*($11 + [16]) = $2
	*($11 + [12]) = ($11 + [32])
	CALL $53($11, $4, $7, ($11 + [8]))
	goto $label$6 
	
.LABEL $label$8
	$8 = [0]
	$0 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)-4060986516896743424, $7)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$7 }
	$8 = CALL $54($4, $0)
	CALL eosio_assert(((int_32)*($8 + [48]) == (int_32)$4), [160])
	
.LABEL $label$7
	*($11 + [8]) = $2
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [768])
	CALL $55($4, $8, (int_64)0, ($11 + [8]))
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [48])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = (*([0] + [4]) - [96])
	$9 = $7
	*([0] + [4]) = $7
	$2 = *($1 + [4])
	$8 = *($1)
	$1 = [0]
	$5 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$5 = ($7 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($9 + [40])) = (int_64)1398362884
	*($9 + [32]) = (int_64)0
	*($9 + [24]) = (int_64)0
	CALL eosio_assert([1], [32])
	$6 = (int_64)5462355
	
.LOOP $label$5:
	$7 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = (uint_64)$6 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$6) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$7 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($7, [96])
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [128])
	CALL memcpy(($9 + [24]), $5, [8])
	$7 = ($3 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [128])
	$1 = (($9 + [24]) + [8])
	CALL memcpy($1, ($5 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [128])
	CALL memcpy((($9 + [24]) + [16]), ($5 + [16]), [8])
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($5)
	
.LABEL $label$8
	*(($7 = (($9 + [48]) + [8]))) = *(($1 + [8]))
	$6 = *($9 + [24])
	*($9 + [48]) = *($1)
	*((($9 + [64]) + [8])) = *($7)
	*($9 + [64]) = *($9 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$8 = *((*($1) + $8))
	
.LABEL $label$9
	$4 = *((($9 + [64]) + [8]))
	*((($9 + [80]) + [8])) = $4
	*((($9 + [8]) + [8])) = $4
	$4 = *($9 + [64])
	*($9 + [80]) = $4
	*($9 + [8]) = $4
	CALL void $1((int_32 $6), (int_64 ($9 + [8])), (int_32 $8))
	*([0] + [4]) = ($9 + [96])
	return [1]
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [176])
	*([0] + [4]) = $3
	*(($2 = $3) + [140]) = $0
	*($2 + [128]) = *($1)
	*($2 + [132]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*($2 + [8]) = (int_64)0
	*($2) = (int_64)0
	CALL memset(($2 + [16]), [0], [66])
	*(($2 + [92])) = (int_64)0
	*(($2 + [100])) = (int_64)0
	*(($2 + [120])) = [0]
	*($2 + [84 align=4]) = (int_64)0
	*($2 + [108]) = [0]
	*($2 + [112]) = (int_64)0
	*($2 + [148]) = $1
	*($2 + [144]) = $1
	*($2 + [152]) = ($1 + $0)
	*($2 + [160]) = ($2 + [144])
	*($2 + [168]) = $2
	CALL $104(($2 + [168]), ($2 + [160]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [148]) = ($2 + [128])
	*($2 + [144]) = ($2 + [140])
	CALL $105(($2 + [144]), $2)
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$5 }
	CALL $133(*(($2 + [120])))
	
.LABEL $label$5
	$1 = *(($2 + [96]))
	if ( ($1 == 0) ){ goto $label$6 }
	*(($2 + [100])) = $1
	CALL $133($1)
	
.LABEL $label$6
	$1 = *(($2 + [84]))
	if ( ($1 == 0) ){ goto $label$7 }
	*(($2 + [88])) = $1
	CALL $133($1)
	
.LABEL $label$7
	*([0] + [4]) = ($2 + [176])
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	float_64 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_32 $28
	int_32 $29
	int_32 $30
	$30 = (*([0] + [4]) - [448])
	*([0] + [4]) = $30
	$21 = (int_64)0
	$23 = (int_64)59
	$18 = [592]
	$19 = (int_64)0
	
.LOOP $label$1:
	$20 = (int_64)0
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$2 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$28 = ($28 + [165])
	goto $label$3 
	
.LABEL $label$4
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($28 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$2
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$1 }
	$21 = (int_64)0
	$20 = (int_64)59
	$18 = [608]
	$22 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$21 > (uint_64)(int_64)10) ){ goto $label$10 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$28 = ($28 + [165])
	goto $label$8 
	
.LABEL $label$10
	$23 = (int_64)0
	if ( ((int_64)$21 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$6
	$18 = ($18 + [1])
	$20 = ((int_64)$20 + (int_64)-5)
	$22 = ((int_64)$23 | (int_64)$22)
	$21 = ((int_64)$21 + (int_64)1)
	if ( ((int_64)$21 != (int_64)13) ){ goto $label$5 }
	CALL require_auth2($19, $22)
	$16 = *(($0 + [32]))
	$29 = *(($0 + [36]))
	if ( ((int_32)$29 == (int_32)$16) ){ goto $label$11 }
	$18 = ($29 + [-24])
	$15 = ([0] - $16)
	
.LOOP $label$12:
	if ( ((int_64)*(*($18)) == (int_64)$1) ){ goto $label$11 }
	$29 = $18
	$28 = ($18 + [-24])
	$18 = $28
	if ( ((int_32)($28 + $15) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$18 = ($0 + [8])
	if ( ((int_32)$29 == (int_32)$16) ){ goto $label$14 }
	$3 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [116]) == (int_32)$18), [160])
	goto $label$13 
	
.LABEL $label$14
	$3 = [0]
	$28 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$13 }
	$3 = CALL $38($18, $28)
	CALL eosio_assert(((int_32)*($3 + [116]) == (int_32)$18), [160])
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [224])
	CALL eosio_assert(((int_64)*($3 + [64]) != (int_64)0), [240])
	*(($30 + [424])) = [0]
	*($30 + [408]) = (int_64)-1
	*($30 + [416]) = (int_64)0
	$21 = *($0)
	*($30 + [392]) = $21
	*($30 + [400]) = $1
	$4 = [0]
	$18 = CALL db_find_i64($21, $1, (int_64)4229443000054317056, $2)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$15 }
	$4 = CALL $39(($30 + [392]), $18)
	CALL eosio_assert(((int_32)*($4 + [88]) == (int_32)($30 + [392])), [160])
	
.LABEL $label$15
	$5 = ((int_32)$4 != (int_32)[0])
	CALL eosio_assert($5, [272])
	CALL eosio_assert(((int_64)*($4 + [8]) == (int_64)$1), [272])
	*(($30 + [384])) = [0]
	*($30 + [376]) = (int_64)0
	$18 = CALL strlen([1424])
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$21 }
	*($30 + [376]) = ($18 << [1])
	$28 = (($30 + [376]) | [1])
	if ( $18 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$29 = (($18 + [16]) & [-16])
	$28 = CALL $132($29)
	*($30 + [376]) = ($29 | [1])
	*($30 + [384]) = $28
	*($30 + [380]) = $18
	
.LABEL $label$20
	CALL memcpy($28, [1424], $18)
	
.LABEL $label$19
	*(($28 + $18)) = [0]
	$25 = *($3 + [16])
	CALL eosio_assert([1], [32])
	$21 = (uint_64)$25 >> (uint_64)(int_64)8)
	$18 = [0]
	
.LOOP $label$24:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$23 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$25 }
	
.LOOP $label$26:
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$23 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$26 }
	
.LABEL $label$25
	$28 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$24 }
	goto $label$22 
	
.LABEL $label$23
	$28 = [0]
	
.LABEL $label$22
	CALL eosio_assert($28, [96])
	$6 = ($4 + [76])
	$18 = *($4 + [76])
	$28 = ($4 + [80])
	$29 = CALL strlen([1440])
	if ( ((int_32)$29 != (int_32)( *($28) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$32 }
	if ( (CALL $144($6, [0], [-1], [1440], $29) == 0) ){ goto $label$31 }
	
.LABEL $label$32
	$18 = *($6)
	$29 = CALL strlen([1456])
	if ( ((int_32)$29 != (int_32)( *($28) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$33 }
	if ( (CALL $144($6, [0], [-1], [1456], $29) == 0) ){ goto $label$30 }
	
.LABEL $label$33
	$29 = ($4 + [76])
	$18 = *($29)
	$28 = ($4 + [80])
	$15 = CALL strlen([1472])
	if ( ((int_32)$15 != (int_32)( *($28) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$34 }
	if ( (CALL $144($6, [0], [-1], [1472], $15) == 0) ){ goto $label$29 }
	
.LABEL $label$34
	$18 = *($29)
	$15 = CALL strlen([1488])
	if ( ((int_32)$15 != (int_32)( *($28) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$35 }
	if ( (CALL $144($6, [0], [-1], [1488], $15) == 0) ){ goto $label$28 }
	
.LABEL $label$35
	$14 = (float_64)0
	$18 = *(($4 + [76]))
	$28 = CALL strlen([1504])
	if ( ((int_32)$28 != (int_32)( *(($4 + [80])) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$27 }
	$14 = ( (float_64)0 ? (float_64)10.36 : CALL $144($6, [0], [-1], [1504], $28) )
	goto $label$27 
	
.LABEL $label$31
	$14 = (float_64)1.24
	goto $label$27 
	
.LABEL $label$30
	$14 = (float_64)1.06
	goto $label$27 
	
.LABEL $label$29
	$14 = (float_64)14.36
	goto $label$27 
	
.LABEL $label$28
	$14 = (float_64)10.36
	
.LABEL $label$27
	$14 = CALL floor(((float_64)((float_64)$14 * (float_64)(CASTING float_64)(int_64 *($4 + [48]))) / (float_64)(float_64)100))
	$8 = *(($3 + [16]))
	$7 = (Rounds 0)($14)
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$21 = (uint_64)$8 >> (uint_64)(int_64)8)
	$18 = [0]
	
.LOOP $label$38:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$37 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$39 }
	
.LOOP $label$40:
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$40 }
	
.LABEL $label$39
	$28 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$38 }
	goto $label$36 
	
.LABEL $label$37
	$28 = [0]
	
.LABEL $label$36
	CALL eosio_assert($28, [96])
	$18 = ($3 + [104])
	$28 = *($18)
	$29 = ($3 + [108])
	$15 = CALL strlen([1472])
	if ( ((int_32)$15 != (int_32)( *($29) ? uint_32($28 >> [1]) : ($28 & [1]) )) ){ goto $label$43 }
	if ( (CALL $144($18, [0], [-1], [1472], $15) == 0) ){ goto $label$42 }
	
.LABEL $label$43
	$24 = (int_64)0
	$28 = *($18)
	$15 = CALL strlen([1456])
	if ( ((int_32)$15 != (int_32)( *($29) ? uint_32($28 >> [1]) : ($28 & [1]) )) ){ goto $label$44 }
	if ( CALL $144($18, [0], [-1], [1456], $15) ){ goto $label$44 }
	$28 = *(($4 + [76]))
	$29 = CALL strlen([1456])
	if ( ((int_32)$29 != (int_32)( *(($4 + [80])) ? uint_32($28 >> [1]) : ($28 & [1]) )) ){ goto $label$44 }
	$28 = [0]
	if ( CALL $144($6, [0], [-1], [1456], $29) ){ goto $label$44 }
	CALL $138(($30 + [376]), [1520])
	$14 = CALL floor(((float_64)(CASTING float_64)(int_64 *(($4 + [48]))) * (float_64)(float_64)1.95))
	$25 = *(($3 + [16]))
	$24 = (Rounds 0)($14)
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$21 = (uint_64)$25 >> (uint_64)(int_64)8)
	
.LOOP $label$46:
	$29 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$45 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	
.LOOP $label$48:
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$45 }
	$28 = ($28 + [1])
	if ( ((int_32)$28 < (int_32)[7]) ){ goto $label$48 }
	
.LABEL $label$47
	$29 = [1]
	$28 = ($28 + [1])
	if ( ((int_32)$28 < (int_32)[7]) ){ goto $label$46 }
	
.LABEL $label$45
	CALL eosio_assert($29, [96])
	
.LABEL $label$44
	$28 = *(($3 + [104]))
	$29 = CALL strlen([1440])
	if ( ((int_32)$29 != (int_32)( *(($3 + [108])) ? uint_32($28 >> [1]) : ($28 & [1]) )) ){ goto $label$41 }
	if ( CALL $144($18, [0], [-1], [1440], $29) ){ goto $label$41 }
	$18 = *(($4 + [76]))
	$28 = CALL strlen([1440])
	if ( ((int_32)$28 != (int_32)( *(($4 + [80])) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$41 }
	$18 = [0]
	if ( CALL $144($6, [0], [-1], [1440], $28) ){ goto $label$41 }
	CALL $138(($30 + [376]), [1520])
	$14 = CALL floor((CASTING float_64)(int_64 ((int_64)*(($4 + [48])) << (int_64)1)))
	$25 = *(($3 + [16]))
	$24 = (Rounds 0)($14)
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$21 = (uint_64)$25 >> (uint_64)(int_64)8)
	
.LOOP $label$50:
	$28 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$51 }
	
.LOOP $label$52:
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$52 }
	
.LABEL $label$51
	$28 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$50 }
	
.LABEL $label$49
	CALL eosio_assert($28, [96])
	goto $label$41 
	
.LABEL $label$42
	$29 = ($4 + [76])
	$18 = *($29)
	$28 = ($4 + [80])
	$15 = CALL strlen([1472])
	if ( ((int_32)$15 != (int_32)( *($28) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$54 }
	$18 = [0]
	if ( (CALL $144($6, [0], [-1], [1472], $15) == 0) ){ goto $label$53 }
	
.LABEL $label$54
	$18 = *($29)
	$15 = CALL strlen([1456])
	if ( ((int_32)$15 != (int_32)( *($28) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$56 }
	if ( (CALL $144($6, [0], [-1], [1456], $15) == 0) ){ goto $label$55 }
	
.LABEL $label$56
	$24 = (int_64)0
	$18 = *(($4 + [76]))
	$28 = CALL strlen([1440])
	if ( ((int_32)$28 != (int_32)( *(($4 + [80])) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$41 }
	if ( CALL $144($6, [0], [-1], [1440], $28) ){ goto $label$41 }
	
.LABEL $label$55
	CALL $138(($30 + [376]), [1536])
	$24 = (int_64)0
	goto $label$41 
	
.LABEL $label$53
	CALL $138(($30 + [376]), [1520])
	$14 = CALL floor((CASTING float_64)(int_64 ((int_64)*(($4 + [48])) * (int_64)9)))
	$25 = *(($3 + [16]))
	$24 = (Rounds 0)($14)
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$21 = (uint_64)$25 >> (uint_64)(int_64)8)
	
.LOOP $label$58:
	$28 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$59 }
	
.LOOP $label$60:
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$57 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$60 }
	
.LABEL $label$59
	$28 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$58 }
	
.LABEL $label$57
	CALL eosio_assert($28, [96])
	
.LABEL $label$41
	if ( (*(($3 + [100])) == 0) ){ goto $label$61 }
	$18 = *(($4 + [76]))
	$28 = CALL strlen([1504])
	if ( ((int_32)$28 != (int_32)( *(($4 + [80])) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$61 }
	$18 = [0]
	if ( CALL $144($6, [0], [-1], [1504], $28) ){ goto $label$61 }
	CALL $138(($30 + [376]), [1520])
	$14 = CALL floor((CASTING float_64)(int_64 ((int_64)*(($4 + [48])) * (int_64)12)))
	$25 = *(($3 + [16]))
	$24 = (Rounds 0)($14)
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$21 = (uint_64)$25 >> (uint_64)(int_64)8)
	
.LOOP $label$63:
	$28 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$62 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$64 }
	
.LOOP $label$65:
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$62 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$65 }
	
.LABEL $label$64
	$28 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$63 }
	
.LABEL $label$62
	CALL eosio_assert($28, [96])
	
.LABEL $label$61
	if ( (*(($3 + [101])) == 0) ){ goto $label$66 }
	$18 = *(($4 + [76]))
	$28 = CALL strlen([1488])
	if ( ((int_32)$28 != (int_32)( *(($4 + [80])) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$66 }
	$18 = [0]
	if ( CALL $144($6, [0], [-1], [1488], $28) ){ goto $label$66 }
	CALL $138(($30 + [376]), [1520])
	$14 = CALL floor((CASTING float_64)(int_64 ((int_64)*(($4 + [48])) * (int_64)12)))
	$25 = *(($3 + [16]))
	$24 = (Rounds 0)($14)
	CALL eosio_assert((uint_64)(((int_64)$24 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [32])
	$21 = (uint_64)$25 >> (uint_64)(int_64)8)
	
.LOOP $label$68:
	$28 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $21) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$67 }
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$69 }
	
.LOOP $label$70:
	$21 = (uint_64)$21 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$21) & (int_64)255) != (int_64)0) ){ goto $label$67 }
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$70 }
	
.LABEL $label$69
	$28 = [1]
	$18 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[7]) ){ goto $label$68 }
	
.LABEL $label$67
	CALL eosio_assert($28, [96])
	
.LABEL $label$66
	$18 = *($30 + [376])
	$28 = CALL strlen([1520])
	if ( ((int_32)$28 != (int_32)( *($30 + [380]) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$71 }
	if ( CALL $144(($30 + [376]), [0], [-1], [1520], $28) ){ goto $label$71 }
	CALL $68(($30 + [328]), [1288])
	$18 = CALL $141(($30 + [328]), [0], [1552])
	$28 = ($18 + [8])
	*((($30 + [344]) + [8])) = *($28)
	*($30 + [344]) = *($18)
	*($18) = [0]
	*(($18 + [4])) = [0]
	*($28) = [0]
	$18 = CALL $140(($30 + [344]), [1568])
	$28 = ($18 + [8])
	*((($30 + [432]) + [8])) = *($28)
	*($30 + [432]) = *($18)
	*($18) = [0]
	*(($18 + [4])) = [0]
	*($28) = [0]
	CALL _ZNSt3__19to_stringEy(($30 + [312]), *($3))
	$18 = *($30 + [312])
	$28 = ($18 & [1])
	$18 = CALL $139(($30 + [432]), ( *($30 + [320]) ? (($30 + [312]) | [1]) : $28 ), ( *($30 + [316]) ? uint_32($18 >> [1]) : $28 ))
	$28 = ($18 + [8])
	*((($30 + [272]) + [8])) = *($28)
	*($30 + [272]) = *($18)
	*($18) = [0]
	*(($18 + [4])) = [0]
	*($28) = [0]
	$18 = CALL $140(($30 + [272]), [1600])
	$28 = ($18 + [8])
	*(($30 + [8])) = *($28)
	*($30) = *($18)
	*($18) = [0]
	*(($18 + [4])) = [0]
	*($28) = [0]
	$18 = *(($4 + [76]))
	$28 = ($18 & [1])
	$18 = CALL $139($30, ( *(($4 + [84])) ? ($6 + [1]) : $28 ), ( *(($4 + [80])) ? uint_32($18 >> [1]) : $28 ))
	$28 = ($18 + [8])
	*((($30 + [360]) + [8])) = *($28)
	*($30 + [360]) = *($18)
	*($18) = [0]
	*(($18 + [4])) = [0]
	*($28) = [0]
	if ( ((*($30) & [1]) == 0) ){ goto $label$72 }
	CALL $133(*($30 + [8]))
	
.LABEL $label$72
	if ( ((*($30 + [272]) & [1]) == 0) ){ goto $label$73 }
	CALL $133(*($30 + [280]))
	
.LABEL $label$73
	if ( ((*($30 + [312]) & [1]) == 0) ){ goto $label$74 }
	CALL $133(*(($30 + [320])))
	
.LABEL $label$74
	if ( ((*($30 + [432]) & [1]) == 0) ){ goto $label$75 }
	CALL $133(*($30 + [440]))
	
.LABEL $label$75
	if ( ((*($30 + [344]) & [1]) == 0) ){ goto $label$76 }
	CALL $133(*($30 + [352]))
	
.LABEL $label$76
	if ( ((*($30 + [328]) & [1]) == 0) ){ goto $label$77 }
	CALL $133(*($30 + [336]))
	
.LABEL $label$77
	$21 = (int_64)0
	$23 = (int_64)59
	$18 = [1616]
	$19 = (int_64)0
	
.LOOP $label$78:
	$20 = (int_64)0
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$79 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$81 }
	$28 = ($28 + [165])
	goto $label$80 
	
.LABEL $label$81
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$80
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($28 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$79
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$78 }
	$21 = (int_64)0
	$20 = (int_64)59
	$18 = [1632]
	$22 = (int_64)0
	
.LOOP $label$82:
	if ( ((uint_64)$21 > (uint_64)(int_64)5) ){ goto $label$87 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$86 }
	$28 = ($28 + [165])
	goto $label$85 
	
.LABEL $label$87
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$84 }
	goto $label$83 
	
.LABEL $label$86
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$85
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$84
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$83
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$22 = ((int_64)$23 | (int_64)$22)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$82 }
	$9 = *(($3 + [24]))
	$21 = (int_64)0
	$20 = (int_64)59
	$18 = [16]
	$27 = (int_64)0
	
.LOOP $label$88:
	if ( ((uint_64)$21 > (uint_64)(int_64)7) ){ goto $label$93 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$92 }
	$28 = ($28 + [165])
	goto $label$91 
	
.LABEL $label$93
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$90 }
	goto $label$89 
	
.LABEL $label$92
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$91
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$90
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$89
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$27 = ((int_64)$23 | (int_64)$27)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$88 }
	$21 = (int_64)0
	$23 = (int_64)59
	$18 = [1616]
	$26 = (int_64)0
	
.LOOP $label$94:
	$20 = (int_64)0
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$95 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$28 = ($28 + [165])
	goto $label$96 
	
.LABEL $label$97
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($28 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$95
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$26 = ((int_64)$20 | (int_64)$26)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$94 }
	$21 = *($4 + [16])
	*(($30 + [24])) = $25
	*($30) = $26
	*($30 + [16]) = $24
	*($30 + [8]) = $21
	CALL $150(($30 + [32]), ($30 + [360]))
	*(($28 = (($30 + [272]) + [24]))) = [0]
	*($30 + [280]) = $27
	*($30 + [272]) = $9
	*($30 + [288]) = (int_64)0
	*(($18 = CALL $132([16]))) = $19
	*($18 + [8]) = $22
	*((($30 + [272]) + [32])) = [0]
	$29 = ($18 + [16])
	*($28) = $29
	*(($30 + [292])) = $29
	*($30 + [288]) = $18
	*($30 + [300]) = [0]
	*((($30 + [272]) + [36])) = [0]
	$18 = *($30 + [32])
	$28 = ( *(($30 + [36])) ? uint_32($18 >> [1]) : ($18 & [1]) )
	$18 = ($28 + [32])
	$21 = (CASTING uint_64)(uint_32 $28)
	$28 = ($30 + [300])
	
.LOOP $label$98:
	$18 = ($18 + [1])
	$21 = (uint_64)$21 >> (uint_64)(int_64)7
	if ( ((int_64)$21) != (int_64)0) ){ goto $label$98 }
	if ( ($18 == 0) ){ goto $label$100 }
	CALL $37($28, $18)
	$28 = *(($30 + [304]))
	$18 = *(($30 + [300]))
	goto $label$99 
	
.LABEL $label$100
	$28 = [0]
	$18 = [0]
	
.LABEL $label$99
	*($30 + [436]) = $18
	*($30 + [432]) = $18
	*($30 + [440]) = $28
	*($30 + [328]) = ($30 + [432])
	*($30 + [344]) = $30
	CALL $91(($30 + [344]), ($30 + [328]))
	CALL $92(($30 + [432]), ($30 + [272]))
	$18 = *($30 + [432])
	CALL send_inline($18, (*($30 + [436]) - $18))
	$18 = *($30 + [432])
	if ( ($18 == 0) ){ goto $label$101 }
	*($30 + [436]) = $18
	CALL $133($18)
	
.LABEL $label$101
	$18 = *($30 + [300])
	if ( ($18 == 0) ){ goto $label$102 }
	*(($30 + [304])) = $18
	CALL $133($18)
	
.LABEL $label$102
	$18 = *($30 + [288])
	if ( ($18 == 0) ){ goto $label$103 }
	*(($30 + [292])) = $18
	CALL $133($18)
	
.LABEL $label$103
	if ( ((*($30 + [32]) & [1]) == 0) ){ goto $label$104 }
	CALL $133(*(($30 + [40])))
	
.LABEL $label$104
	$21 = (int_64)0
	$23 = (int_64)59
	$18 = [592]
	$19 = (int_64)0
	
.LOOP $label$105:
	$20 = (int_64)0
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$106 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$108 }
	$28 = ($28 + [165])
	goto $label$107 
	
.LABEL $label$108
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$107
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($28 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$106
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$105 }
	$21 = (int_64)0
	$20 = (int_64)59
	$18 = [1648]
	$22 = (int_64)0
	
.LOOP $label$109:
	if ( ((uint_64)$21 > (uint_64)(int_64)7) ){ goto $label$114 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$113 }
	$28 = ($28 + [165])
	goto $label$112 
	
.LABEL $label$114
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$111 }
	goto $label$110 
	
.LABEL $label$113
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$112
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$111
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$110
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$22 = ((int_64)$23 | (int_64)$22)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$109 }
	$21 = (int_64)0
	$23 = (int_64)59
	$18 = [592]
	$27 = (int_64)0
	
.LOOP $label$115:
	$20 = (int_64)0
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$116 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$118 }
	$28 = ($28 + [165])
	goto $label$117 
	
.LABEL $label$118
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$117
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($28 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$116
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$27 = ((int_64)$20 | (int_64)$27)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$115 }
	$21 = (int_64)0
	$20 = (int_64)59
	$18 = [1648]
	$26 = (int_64)0
	
.LOOP $label$119:
	if ( ((uint_64)$21 > (uint_64)(int_64)7) ){ goto $label$124 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$123 }
	$28 = ($28 + [165])
	goto $label$122 
	
.LABEL $label$124
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$121 }
	goto $label$120 
	
.LABEL $label$123
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$122
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$121
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$120
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$26 = ((int_64)$23 | (int_64)$26)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$119 }
	$21 = *(($3 + [24]))
	$23 = *(($4 + [16]))
	*(($30 + [40])) = $25
	*($30) = (int_64)4147959691609112576
	*($30 + [8]) = *($0)
	*($30 + [16]) = $23
	*($30 + [32]) = $24
	*($30 + [272]) = $27
	*($30 + [280]) = $26
	*($30 + [24]) = $21
	*($30 + [288]) = [0]
	*(($28 = ($30 + [292]))) = [0]
	*(($29 = (($30 + [272]) + [24]))) = [0]
	*(($18 = CALL $132([16]))) = $19
	*($18 + [8]) = $22
	*(($15 = ($30 + [304]))) = [0]
	$16 = ($18 + [16])
	*($29) = $16
	*($28) = $16
	*($30 + [288]) = $18
	*($30 + [300]) = [0]
	*(($30 + [308])) = [0]
	CALL $37(($30 + [300]), [48])
	$18 = *($15)
	$28 = *($30 + [300])
	*($30 + [436]) = $28
	*($30 + [432]) = $28
	*($30 + [440]) = $18
	*($30 + [328]) = ($30 + [432])
	*($30 + [344]) = $30
	CALL $93(($30 + [344]), ($30 + [328]))
	CALL $92(($30 + [432]), ($30 + [272]))
	$18 = *($30 + [432])
	CALL send_inline($18, (*($30 + [436]) - $18))
	$18 = *($30 + [432])
	if ( ($18 == 0) ){ goto $label$125 }
	*($30 + [436]) = $18
	CALL $133($18)
	
.LABEL $label$125
	$18 = *($30 + [300])
	if ( ($18 == 0) ){ goto $label$126 }
	*(($30 + [304])) = $18
	CALL $133($18)
	
.LABEL $label$126
	$18 = *($30 + [288])
	if ( ($18 == 0) ){ goto $label$127 }
	*(($30 + [292])) = $18
	CALL $133($18)
	
.LABEL $label$127
	if ( ((*($30 + [360]) & [1]) == 0) ){ goto $label$71 }
	CALL $133(*($30 + [368]))
	
.LABEL $label$71
	$18 = *($30 + [376])
	$28 = CALL strlen([1520])
	if ( ((int_32)$28 != (int_32)( *($30 + [380]) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$130 }
	if ( (CALL $144(($30 + [376]), [0], [-1], [1520], $28) == 0) ){ goto $label$129 }
	
.LABEL $label$130
	$18 = *($30 + [376])
	$28 = CALL strlen([1424])
	if ( ((int_32)$28 != (int_32)( *($30 + [380]) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$128 }
	if ( CALL $144(($30 + [376]), [0], [-1], [1424], $28) ){ goto $label$128 }
	
.LABEL $label$129
	$21 = (int_64)0
	$23 = (int_64)59
	$18 = [592]
	$19 = (int_64)0
	
.LOOP $label$131:
	$20 = (int_64)0
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$132 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$134 }
	$28 = ($28 + [165])
	goto $label$133 
	
.LABEL $label$134
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$133
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($28 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$132
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$131 }
	$26 = *($0)
	$21 = (int_64)0
	$23 = (int_64)59
	$18 = [592]
	$22 = (int_64)0
	
.LOOP $label$135:
	$20 = (int_64)0
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$136 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$138 }
	$28 = ($28 + [165])
	goto $label$137 
	
.LABEL $label$138
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$137
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($28 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$136
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$22 = ((int_64)$20 | (int_64)$22)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$135 }
	$21 = (int_64)0
	$20 = (int_64)59
	$18 = [1664]
	$27 = (int_64)0
	
.LOOP $label$139:
	if ( ((uint_64)$21 > (uint_64)(int_64)5) ){ goto $label$144 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$143 }
	$28 = ($28 + [165])
	goto $label$142 
	
.LABEL $label$144
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$141 }
	goto $label$140 
	
.LABEL $label$143
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$142
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$141
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$140
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$27 = ((int_64)$23 | (int_64)$27)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$139 }
	$21 = *(($3 + [24]))
	CALL _ZNSt3__19to_stringEy(($30 + [360]), *($3))
	*($30) = (int_64)4147959691609112576
	*($30 + [8]) = *($0)
	*($30 + [24]) = $21
	*($30 + [16]) = *($4 + [16])
	*(($30 + [36])) = *(($4 + [52]))
	*(($30 + [44])) = *(($4 + [60]))
	*($30 + [32]) = *($4 + [48])
	*($30 + [48]) = $7
	*(($30 + [56])) = $8
	*($30 + [64]) = *($4 + [24])
	*(($28 = ($30 + [76]))) = *($30 + [364 align=4])
	*($30 + [72]) = *($30 + [360])
	*($30 + [360]) = [0]
	*($30 + [364]) = [0]
	*(($30 + [368])) = [0]
	*($30 + [272]) = $22
	*($30 + [280]) = $27
	*($30 + [288]) = [0]
	*(($29 = ($30 + [292]))) = [0]
	*(($15 = (($30 + [272]) + [24]))) = [0]
	*(($18 = CALL $132([16]))) = $19
	*($18 + [8]) = $26
	*(($30 + [304])) = [0]
	$16 = ($18 + [16])
	*($15) = $16
	*($29) = $16
	*($30 + [288]) = $18
	*($30 + [300]) = [0]
	*((($30 + [272]) + [36])) = [0]
	$18 = *($30 + [72])
	$28 = ( *($28) ? uint_32($18 >> [1]) : ($18 & [1]) )
	$18 = ($28 + [72])
	$21 = (CASTING uint_64)(uint_32 $28)
	$28 = ($30 + [300])
	
.LOOP $label$145:
	$18 = ($18 + [1])
	$21 = (uint_64)$21 >> (uint_64)(int_64)7
	if ( ((int_64)$21) != (int_64)0) ){ goto $label$145 }
	if ( ($18 == 0) ){ goto $label$147 }
	CALL $37($28, $18)
	$28 = *(($30 + [304]))
	$18 = *(($30 + [300]))
	goto $label$146 
	
.LABEL $label$147
	$28 = [0]
	$18 = [0]
	
.LABEL $label$146
	*($30 + [436]) = $18
	*($30 + [432]) = $18
	*($30 + [440]) = $28
	*($30 + [328]) = ($30 + [432])
	*($30 + [344]) = $30
	CALL $94(($30 + [344]), ($30 + [328]))
	CALL $92(($30 + [432]), ($30 + [272]))
	$18 = *($30 + [432])
	CALL send_inline($18, (*($30 + [436]) - $18))
	$18 = *($30 + [432])
	if ( ($18 == 0) ){ goto $label$148 }
	*($30 + [436]) = $18
	CALL $133($18)
	
.LABEL $label$148
	$18 = *($30 + [300])
	if ( ($18 == 0) ){ goto $label$149 }
	*(($30 + [304])) = $18
	CALL $133($18)
	
.LABEL $label$149
	$18 = *($30 + [288])
	if ( ($18 == 0) ){ goto $label$150 }
	*(($30 + [292])) = $18
	CALL $133($18)
	
.LABEL $label$150
	if ( ((*(($30 + [72])) & [1]) == 0) ){ goto $label$151 }
	CALL $133(*(($30 + [80])))
	
.LABEL $label$151
	if ( ((*($30 + [360]) & [1]) == 0) ){ goto $label$128 }
	CALL $133(*(($30 + [368])))
	
.LABEL $label$128
	$18 = *($30 + [376])
	$28 = CALL strlen([1536])
	if ( ((int_32)$28 != (int_32)( *($30 + [380]) ? uint_32($18 >> [1]) : ($18 & [1]) )) ){ goto $label$152 }
	if ( CALL $144(($30 + [376]), [0], [-1], [1536], $28) ){ goto $label$152 }
	CALL $68(($30 + [328]), [1288])
	$18 = CALL $141(($30 + [328]), [0], [1552])
	$28 = ($18 + [8])
	*((($30 + [344]) + [8])) = *($28)
	*($30 + [344]) = *($18)
	*($18) = [0]
	*(($18 + [4])) = [0]
	*($28) = [0]
	$18 = CALL $140(($30 + [344]), [1680])
	$28 = ($18 + [8])
	*((($30 + [432]) + [8])) = *($28)
	*($30 + [432]) = *($18)
	*($18) = [0]
	*(($18 + [4])) = [0]
	*($28) = [0]
	CALL _ZNSt3__19to_stringEy(($30 + [312]), *($3))
	$18 = *($30 + [312])
	$28 = ($18 & [1])
	$18 = CALL $139(($30 + [432]), ( *($30 + [320]) ? (($30 + [312]) | [1]) : $28 ), ( *($30 + [316]) ? uint_32($18 >> [1]) : $28 ))
	$28 = ($18 + [8])
	*((($30 + [272]) + [8])) = *($28)
	*($30 + [272]) = *($18)
	*($18) = [0]
	*(($18 + [4])) = [0]
	*($28) = [0]
	$18 = CALL $140(($30 + [272]), [1600])
	$28 = ($18 + [8])
	*(($30 + [8])) = *($28)
	*($30) = *($18)
	*($18) = [0]
	*(($18 + [4])) = [0]
	*($28) = [0]
	$18 = *(($4 + [76]))
	$28 = ($18 & [1])
	$18 = CALL $139($30, ( *(($4 + [84])) ? ($6 + [1]) : $28 ), ( *(($4 + [80])) ? uint_32($18 >> [1]) : $28 ))
	$28 = ($18 + [8])
	*((($30 + [360]) + [8])) = *($28)
	*($30 + [360]) = *($18)
	*($18) = [0]
	*(($18 + [4])) = [0]
	*($28) = [0]
	if ( ((*($30) & [1]) == 0) ){ goto $label$153 }
	CALL $133(*($30 + [8]))
	
.LABEL $label$153
	if ( ((*($30 + [272]) & [1]) == 0) ){ goto $label$154 }
	CALL $133(*($30 + [280]))
	
.LABEL $label$154
	if ( ((*($30 + [312]) & [1]) == 0) ){ goto $label$155 }
	CALL $133(*(($30 + [320])))
	
.LABEL $label$155
	if ( ((*($30 + [432]) & [1]) == 0) ){ goto $label$156 }
	CALL $133(*($30 + [440]))
	
.LABEL $label$156
	if ( ((*($30 + [344]) & [1]) == 0) ){ goto $label$157 }
	CALL $133(*($30 + [352]))
	
.LABEL $label$157
	if ( ((*($30 + [328]) & [1]) == 0) ){ goto $label$158 }
	CALL $133(*($30 + [336]))
	
.LABEL $label$158
	$25 = *(($4 + [56]))
	$24 = *(($4 + [48]))
	$21 = (int_64)0
	$23 = (int_64)59
	$18 = [1616]
	$19 = (int_64)0
	
.LOOP $label$159:
	$20 = (int_64)0
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$160 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$162 }
	$28 = ($28 + [165])
	goto $label$161 
	
.LABEL $label$162
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$161
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($28 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$160
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$19 = ((int_64)$20 | (int_64)$19)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$159 }
	$21 = (int_64)0
	$20 = (int_64)59
	$18 = [1632]
	$22 = (int_64)0
	
.LOOP $label$163:
	if ( ((uint_64)$21 > (uint_64)(int_64)5) ){ goto $label$168 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$167 }
	$28 = ($28 + [165])
	goto $label$166 
	
.LABEL $label$168
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$165 }
	goto $label$164 
	
.LABEL $label$167
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$166
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$165
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$164
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$22 = ((int_64)$23 | (int_64)$22)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$163 }
	$8 = *(($3 + [24]))
	$21 = (int_64)0
	$20 = (int_64)59
	$18 = [16]
	$27 = (int_64)0
	
.LOOP $label$169:
	if ( ((uint_64)$21 > (uint_64)(int_64)7) ){ goto $label$174 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$173 }
	$28 = ($28 + [165])
	goto $label$172 
	
.LABEL $label$174
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$171 }
	goto $label$170 
	
.LABEL $label$173
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$172
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$171
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$170
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$27 = ((int_64)$23 | (int_64)$27)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$169 }
	$21 = (int_64)0
	$23 = (int_64)59
	$18 = [1616]
	$26 = (int_64)0
	
.LOOP $label$175:
	$20 = (int_64)0
	if ( ((uint_64)$21 > (uint_64)(int_64)11) ){ goto $label$176 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$178 }
	$28 = ($28 + [165])
	goto $label$177 
	
.LABEL $label$178
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$177
	$20 = ((int_64)(CASTING uint_64)(uint_32 ($28 & [31])) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$176
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$26 = ((int_64)$20 | (int_64)$26)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$175 }
	$21 = *($4 + [16])
	*(($30 + [28])) = *(($4 + [60]))
	*(($30 + [24])) = *(($4 + [56]))
	*(($30 + [20])) = *(($4 + [52]))
	*($30) = $26
	*($30 + [8]) = $21
	*($30 + [16]) = *($4 + [48])
	CALL $150(($30 + [32]), ($30 + [360]))
	*(($28 = (($30 + [272]) + [24]))) = [0]
	*($30 + [280]) = $27
	*($30 + [272]) = $8
	*($30 + [288]) = (int_64)0
	*(($18 = CALL $132([16]))) = $19
	*($18 + [8]) = $22
	*((($30 + [272]) + [32])) = [0]
	$29 = ($18 + [16])
	*($28) = $29
	*((($30 + [272]) + [20])) = $29
	*($30 + [288]) = $18
	*($30 + [300]) = [0]
	*((($30 + [272]) + [36])) = [0]
	$18 = *($30 + [32])
	$28 = ( *(($30 + [36])) ? uint_32($18 >> [1]) : ($18 & [1]) )
	$18 = ($28 + [32])
	$21 = (CASTING uint_64)(uint_32 $28)
	$28 = (($30 + [272]) + [28])
	
.LOOP $label$179:
	$18 = ($18 + [1])
	$21 = (uint_64)$21 >> (uint_64)(int_64)7
	if ( ((int_64)$21) != (int_64)0) ){ goto $label$179 }
	if ( ($18 == 0) ){ goto $label$181 }
	CALL $37($28, $18)
	$28 = *(($30 + [304]))
	$18 = *(($30 + [300]))
	goto $label$180 
	
.LABEL $label$181
	$28 = [0]
	$18 = [0]
	
.LABEL $label$180
	*($30 + [436]) = $18
	*($30 + [432]) = $18
	*($30 + [440]) = $28
	*($30 + [328]) = ($30 + [432])
	*($30 + [344]) = $30
	CALL $91(($30 + [344]), ($30 + [328]))
	CALL $92(($30 + [432]), ($30 + [272]))
	$18 = *($30 + [432])
	CALL send_inline($18, (*($30 + [436]) - $18))
	$18 = *($30 + [432])
	if ( ($18 == 0) ){ goto $label$182 }
	*($30 + [436]) = $18
	CALL $133($18)
	
.LABEL $label$182
	$18 = *($30 + [300])
	if ( ($18 == 0) ){ goto $label$183 }
	*(($30 + [304])) = $18
	CALL $133($18)
	
.LABEL $label$183
	$18 = *($30 + [288])
	if ( ($18 == 0) ){ goto $label$184 }
	*(($30 + [292])) = $18
	CALL $133($18)
	
.LABEL $label$184
	if ( ((*($30 + [32]) & [1]) == 0) ){ goto $label$185 }
	CALL $133(*(($30 + [40])))
	
.LABEL $label$185
	if ( ((*($30 + [360]) & [1]) == 0) ){ goto $label$152 }
	CALL $133(*($30 + [368]))
	
.LABEL $label$152
	$16 = *(($0 + [112]))
	$29 = *(($0 + [116]))
	if ( ((int_32)$29 == (int_32)$16) ){ goto $label$186 }
	$18 = ($29 + [-24])
	$15 = ([0] - $16)
	
.LOOP $label$187:
	if ( ((int_64)*(*($18)) == (int_64)$1) ){ goto $label$186 }
	$29 = $18
	$28 = ($18 + [-24])
	$18 = $28
	if ( ((int_32)($28 + $15) != (int_32)[-24]) ){ goto $label$187 }
	
.LABEL $label$186
	$18 = ($0 + [88])
	if ( ((int_32)$29 == (int_32)$16) ){ goto $label$192 }
	$10 = *(($29 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [88]) == (int_32)$18), [160])
	if ( $10 ){ goto $label$191 }
	goto $label$190 
	
.LABEL $label$192
	$28 = CALL db_find_i64(*(($0 + [88])), *(($0 + [96])), (int_64)7035937270569123840, $1)
	if ( ((int_32)$28 < (int_32)[0]) ){ goto $label$190 }
	$10 = CALL $47($18, $28)
	CALL eosio_assert(((int_32)*($10 + [88]) == (int_32)$18), [160])
	
.LABEL $label$191
	*($30 + [368]) = [0]
	*($30 + [360]) = (int_64)0
	*($30 + [352]) = [0]
	*($30 + [344]) = (int_64)0
	$11 = *(($3 + [80]))
	$28 = *($3 + [76])
	if ( ((int_32)$28 == (int_32)$11) ){ goto $label$193 }
	$13 = (($30 + [272]) | [1])
	$12 = ($30 | [1])
	$16 = ($30 + [8])
	
.LOOP $label$194:
	$14 = CALL floor((CASTING float_64)(uint_32 ((uint_32)(*($28) + [-1]) / (uint_32)[13])))
	$18 = *($28)
	*($16) = [0]
	*($30) = (int_64)0
	$15 = ((uint_32)($18 + [-1]) % (uint_32)[13])
	$18 = CALL strlen([1712])
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$189 }
	$14 = ((float_64)$14 + (float_64)(float_64)1)
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$197 }
	*($30) = ($18 << [1])
	$29 = $12
	if ( $18 ){ goto $label$196 }
	goto $label$195 
	
.LABEL $label$197
	$17 = (($18 + [16]) & [-16])
	$29 = CALL $132($17)
	*($16) = $29
	*($30) = ($17 | [1])
	*($30 + [4]) = $18
	
.LABEL $label$196
	CALL memcpy($29, [1712], $18)
	
.LABEL $label$195
	*(($29 + $18)) = [0]
	if ( ((float_64)$14 != (float_64)(float_64)1) ){ goto $label$199 }
	CALL $138($30, [1728])
	goto $label$198 
	
.LABEL $label$199
	if ( ((float_64)$14 != (float_64)(float_64)2) ){ goto $label$200 }
	CALL $138($30, [1744])
	goto $label$198 
	
.LABEL $label$200
	if ( ((float_64)$14 != (float_64)(float_64)3) ){ goto $label$201 }
	CALL $138($30, [1760])
	goto $label$198 
	
.LABEL $label$201
	CALL $138($30, [1776])
	
.LABEL $label$198
	$18 = ($15 & [15])
	if ( ((int_32)$18 == (int_32)[12]) ){ goto $label$204 }
	if ( ((int_32)$18 == (int_32)[11]) ){ goto $label$205 }
	if ( ((int_32)$18 != (int_32)[10]) ){ goto $label$203 }
	CALL $140($30, [1792])
	goto $label$202 
	
.LABEL $label$205
	CALL $140($30, [1808])
	goto $label$202 
	
.LABEL $label$204
	CALL $140($30, [1824])
	goto $label$202 
	
.LABEL $label$203
	CALL _ZNSt3__19to_stringEm(($30 + [272]), ($15 + [1]))
	$18 = *($30 + [272])
	$29 = ($18 & [1])
	$15 = (($30 + [272]) + [8])
	CALL $139($30, ( *($15) ? $13 : $29 ), ( *($30 + [276]) ? uint_32($18 >> [1]) : $29 ))
	if ( ((*($30 + [272]) & [1]) == 0) ){ goto $label$202 }
	CALL $133(*($15))
	
.LABEL $label$202
	$18 = *($30 + [364])
	if ( ((int_32)$18 == (int_32)*((($30 + [360]) + [8]))) ){ goto $label$207 }
	CALL $150($18, $30)
	*($30 + [364]) = (*($30 + [364]) + [12])
	goto $label$206 
	
.LABEL $label$207
	CALL $95(($30 + [360]), $30)
	
.LABEL $label$206
	if ( ((*($30) & [1]) == 0) ){ goto $label$208 }
	CALL $133(*($16))
	
.LABEL $label$208
	$28 = ($28 + [4])
	if ( ((int_32)$11 != (int_32)$28) ){ goto $label$194 }
	
.LABEL $label$193
	$11 = *(($3 + [92]))
	$28 = *(($3 + [88]))
	if ( ((int_32)$28 == (int_32)$11) ){ goto $label$209 }
	$13 = (($30 + [272]) | [1])
	$12 = ($30 | [1])
	$16 = ($30 + [8])
	
.LOOP $label$210:
	$14 = CALL floor((CASTING float_64)(uint_32 ((uint_32)(*($28) + [-1]) / (uint_32)[13])))
	$18 = *($28)
	*($16) = [0]
	*($30) = (int_64)0
	$15 = ((uint_32)($18 + [-1]) % (uint_32)[13])
	$18 = CALL strlen([1712])
	if ( ((uint_32)$18 >= (uint_32)[-16]) ){ goto $label$188 }
	$14 = ((float_64)$14 + (float_64)(float_64)1)
	if ( ((uint_32)$18 >= (uint_32)[11]) ){ goto $label$213 }
	*($30) = ($18 << [1])
	$29 = $12
	if ( $18 ){ goto $label$212 }
	goto $label$211 
	
.LABEL $label$213
	$17 = (($18 + [16]) & [-16])
	$29 = CALL $132($17)
	*($16) = $29
	*($30) = ($17 | [1])
	*($30 + [4]) = $18
	
.LABEL $label$212
	CALL memcpy($29, [1712], $18)
	
.LABEL $label$211
	*(($29 + $18)) = [0]
	if ( ((float_64)$14 != (float_64)(float_64)1) ){ goto $label$215 }
	CALL $138($30, [1728])
	goto $label$214 
	
.LABEL $label$215
	if ( ((float_64)$14 != (float_64)(float_64)2) ){ goto $label$216 }
	CALL $138($30, [1744])
	goto $label$214 
	
.LABEL $label$216
	if ( ((float_64)$14 != (float_64)(float_64)3) ){ goto $label$217 }
	CALL $138($30, [1760])
	goto $label$214 
	
.LABEL $label$217
	CALL $138($30, [1776])
	
.LABEL $label$214
	$18 = ($15 & [15])
	if ( ((int_32)$18 == (int_32)[12]) ){ goto $label$221 }
	if ( ((int_32)$18 == (int_32)[11]) ){ goto $label$220 }
	if ( ((int_32)$18 != (int_32)[10]) ){ goto $label$219 }
	CALL $140($30, [1792])
	goto $label$218 
	
.LABEL $label$221
	CALL $140($30, [1824])
	goto $label$218 
	
.LABEL $label$220
	CALL $140($30, [1808])
	goto $label$218 
	
.LABEL $label$219
	CALL _ZNSt3__19to_stringEm(($30 + [272]), ($15 + [1]))
	$18 = *($30 + [272])
	$29 = ($18 & [1])
	$15 = (($30 + [272]) + [8])
	CALL $139($30, ( *($15) ? $13 : $29 ), ( *($30 + [276]) ? uint_32($18 >> [1]) : $29 ))
	if ( ((*($30 + [272]) & [1]) == 0) ){ goto $label$218 }
	CALL $133(*($15))
	
.LABEL $label$218
	$18 = *($30 + [348])
	if ( ((int_32)$18 == (int_32)*((($30 + [344]) + [8]))) ){ goto $label$223 }
	CALL $150($18, $30)
	*($30 + [348]) = (*($30 + [348]) + [12])
	goto $label$222 
	
.LABEL $label$223
	CALL $95(($30 + [344]), $30)
	
.LABEL $label$222
	if ( ((*($30) & [1]) == 0) ){ goto $label$224 }
	CALL $133(*($16))
	
.LABEL $label$224
	$28 = ($28 + [4])
	if ( ((int_32)$11 != (int_32)$28) ){ goto $label$210 }
	
.LABEL $label$209
	$27 = *($0)
	$21 = (int_64)0
	$20 = (int_64)59
	$18 = [1840]
	$19 = (int_64)0
	
.LOOP $label$225:
	if ( ((uint_64)$21 > (uint_64)(int_64)5) ){ goto $label$230 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$229 }
	$28 = ($28 + [165])
	goto $label$228 
	
.LABEL $label$230
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$227 }
	goto $label$226 
	
.LABEL $label$229
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$228
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$227
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$226
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$19 = ((int_64)$23 | (int_64)$19)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$225 }
	$21 = (int_64)0
	$20 = (int_64)59
	$18 = [1856]
	$22 = (int_64)0
	
.LOOP $label$231:
	if ( ((uint_64)$21 > (uint_64)(int_64)9) ){ goto $label$236 }
	$28 = *($18)
	if ( ((uint_32)(($28 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$235 }
	$28 = ($28 + [165])
	goto $label$234 
	
.LABEL $label$236
	$23 = (int_64)0
	if ( ((uint_64)$21 <= (uint_64)(int_64)11) ){ goto $label$233 }
	goto $label$232 
	
.LABEL $label$235
	$28 = ( ($28 + [208]) ? [0] : ((($28 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$234
	$23 = (int_64)((int_64)(CASTING uint_64)(uint_32 $28) << (int_64)56) >> (int_64)56)
	
.LABEL $label$233
	$23 = ((int_64)((int_64)$23 & (int_64)31) << (int_64)((int_64)$20 & (int_64)4294967295))
	
.LABEL $label$232
	$18 = ($18 + [1])
	$21 = ((int_64)$21 + (int_64)1)
	$22 = ((int_64)$23 | (int_64)$22)
	$20 = ((int_64)$20 + (int_64)-5)
	if ( ((int_64)$20 != (int_64)-6) ){ goto $label$231 }
	*($30 + [8]) = $1
	*($30 + [16]) = $2
	*($30) = *($4 + [16])
	CALL $150(($30 + [24]), $6)
	*(($30 + [72])) = *(($3 + [56]))
	*(($30 + [64])) = *(($3 + [48]))
	*(($30 + [56])) = *(($3 + [40]))
	*($30 + [48]) = *($3 + [32])
	CALL memcpy(($30 + [80]), ($10 + [8]), [66])
	*($30 + [152]) = *($10 + [80])
	CALL $25(($30 + [160]), ($3 + [76]))
	*(($30 + [208])) = [0]
	*($30 + [200]) = (int_64)0
	$18 = (*($30 + [364]) - *($30 + [360]))
	$15 = ((int_32)$18 / (int_32)[12])
	if ( ($18 == 0) ){ goto $label$237 }
	if ( ((uint_32)$15 >= (uint_32)[357913942]) ){ goto $label$17 }
	$28 = CALL $132($18)
	*(($30 + [200])) = $28
	*(($29 = ($30 + [204]))) = $28
	*(($30 + [208])) = ($28 + ((int_32)$15 * (int_32)[12]))
	$15 = *($30 + [364])
	$18 = *($30 + [360])
	if ( ((int_32)$18 == (int_32)$15) ){ goto $label$237 }
	
.LOOP $label$238:
	CALL $150($28, $18)
	$28 = (*($29) + [12])
	*($29) = $28
	$18 = ($18 + [12])
	if ( ((int_32)$15 != (int_32)$18) ){ goto $label$238 }
	
.LABEL $label$237
	*(($30 + [220])) = [0]
	*($30 + [212 align=4]) = (int_64)0
	$18 = (*($30 + [348]) - *($30 + [344]))
	$15 = ((int_32)$18 / (int_32)[12])
	if ( ($18 == 0) ){ goto $label$239 }
	if ( ((uint_32)$15 >= (uint_32)[357913942]) ){ goto $label$16 }
	$28 = CALL $132($18)
	*(($30 + [212])) = $28
	*(($29 = ($30 + [216]))) = $28
	*(($30 + [220])) = ($28 + ((int_32)$15 * (int_32)[12]))
	$15 = *($30 + [348])
	$18 = *($30 + [344])
	if ( ((int_32)$18 == (int_32)$15) ){ goto $label$239 }
	
.LOOP $label$240:
	CALL $150($28, $18)
	$28 = (*($29) + [12])
	*($29) = $28
	$18 = ($18 + [12])
	if ( ((int_32)$15 != (int_32)$18) ){ goto $label$240 }
	
.LABEL $label$239
	CALL $150(($30 + [224]), ($30 + [376]))
	$18 = ($4 + [48])
	*(($30 + [248])) = *(($18 + [8]))
	$21 = *($18)
	*(($30 + [264])) = $25
	*($30 + [256]) = $24
	*($30 + [240]) = $21
	*($30 + [272]) = $27
	*($30 + [280]) = $22
	$28 = [0]
	*($30 + [288]) = [0]
	*(($29 = ($30 + [292]))) = [0]
	*(($15 = ($30 + [296]))) = [0]
	*(($18 = CALL $132([16]))) = $27
	*($18 + [8]) = $19
	*(($3 = ($30 + [304]))) = [0]
	$16 = ($18 + [16])
	*($15) = $16
	*($29) = $16
	*($30 + [288]) = $18
	*($30 + [300]) = [0]
	*(($30 + [308])) = [0]
	*($30 + [312]) = [0]
	*($30 + [328]) = ($30 + [312])
	*($30 + [432]) = $30
	CALL $96(($30 + [432]), ($30 + [328]))
	$18 = *($30 + [312])
	if ( ($18 == 0) ){ goto $label$242 }
	$29 = ($30 + [300])
	CALL $37($29, $18)
	$28 = *($3)
	$18 = *($29)
	goto $label$241 
	
.LABEL $label$242
	$18 = [0]
	
.LABEL $label$241
	*($30 + [436]) = $18
	*($30 + [432]) = $18
	*($30 + [440]) = $28
	*($30 + [312]) = ($30 + [432])
	*($30 + [328]) = $30
	CALL $97(($30 + [328]), ($30 + [312]))
	CALL $92(($30 + [432]), ($30 + [272]))
	$18 = *($30 + [432])
	CALL send_inline($18, (*($30 + [436]) - $18))
	$18 = *($30 + [432])
	if ( ($18 == 0) ){ goto $label$243 }
	*($30 + [436]) = $18
	CALL $133($18)
	
.LABEL $label$243
	$18 = *($30 + [300])
	if ( ($18 == 0) ){ goto $label$244 }
	*(($30 + [304])) = $18
	CALL $133($18)
	
.LABEL $label$244
	$18 = *($30 + [288])
	if ( ($18 == 0) ){ goto $label$245 }
	*(($30 + [292])) = $18
	CALL $133($18)
	
.LABEL $label$245
	CALL $24($30)
	$29 = *($30 + [344])
	if ( ($29 == 0) ){ goto $label$246 }
	$18 = *($30 + [348])
	if ( ((int_32)$18 == (int_32)$29) ){ goto $label$248 }
	$28 = ([0] - $29)
	$18 = ($18 + [-12])
	
.LOOP $label$249:
	if ( ((*($18) & [1]) == 0) ){ goto $label$250 }
	CALL $133(*(($18 + [8])))
	
.LABEL $label$250
	$18 = ($18 + [-12])
	if ( ((int_32)($18 + $28) != (int_32)[-12]) ){ goto $label$249 }
	$18 = *($30 + [344])
	goto $label$247 
	
.LABEL $label$248
	$18 = $29
	
.LABEL $label$247
	*($30 + [348]) = $29
	CALL $133($18)
	
.LABEL $label$246
	$29 = *($30 + [360])
	if ( ($29 == 0) ){ goto $label$190 }
	$18 = *($30 + [364])
	if ( ((int_32)$18 == (int_32)$29) ){ goto $label$252 }
	$28 = ([0] - $29)
	$18 = ($18 + [-12])
	
.LOOP $label$253:
	if ( ((*($18) & [1]) == 0) ){ goto $label$254 }
	CALL $133(*(($18 + [8])))
	
.LABEL $label$254
	$18 = ($18 + [-12])
	if ( ((int_32)($18 + $28) != (int_32)[-12]) ){ goto $label$253 }
	$18 = *($30 + [360])
	goto $label$251 
	
.LABEL $label$252
	$18 = $29
	
.LABEL $label$251
	*($30 + [364]) = $29
	CALL $133($18)
	
.LABEL $label$190
	CALL eosio_assert($5, [304])
	CALL eosio_assert($5, [352])
	$18 = CALL db_next_i64(*($4 + [92]), $30)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$255 }
	CALL $39(($30 + [392]), $18)
	
.LABEL $label$255
	CALL $40(($30 + [392]), $4)
	if ( ((*($30 + [376]) & [1]) == 0) ){ goto $label$256 }
	CALL $133(*($30 + [384]))
	
.LABEL $label$256
	$29 = *($30 + [416])
	if ( ($29 == 0) ){ goto $label$257 }
	$15 = ($30 + [420])
	$18 = *($15)
	if ( ((int_32)$18 == (int_32)$29) ){ goto $label$259 }
	
.LOOP $label$260:
	$18 = ($18 + [-24])
	$28 = *($18)
	*($18) = [0]
	if ( ($28 == 0) ){ goto $label$261 }
	if ( ((*($28 + [76]) & [1]) == 0) ){ goto $label$262 }
	CALL $133(*(($28 + [84])))
	
.LABEL $label$262
	CALL $133($28)
	
.LABEL $label$261
	if ( ((int_32)$29 != (int_32)$18) ){ goto $label$260 }
	$18 = *(($30 + [416]))
	goto $label$258 
	
.LABEL $label$259
	$18 = $29
	
.LABEL $label$258
	*($15) = $29
	CALL $133($18)
	
.LABEL $label$257
	*([0] + [4]) = ($30 + [448])
	return (unreachable)
	
.LABEL $label$189
	CALL $134($30)
	
.LABEL $label$188
	CALL $134($30)
	
.LABEL $label$18
	CALL $134(($30 + [376]))
	
.LABEL $label$17
	CALL $149(($30 + [200]))
	
.LABEL $label$16
	CALL $149(($30 + [212]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [128])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [128])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $13 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_64 $24
	int_64 $25
	int_64 $26
	int_64 $27
	int_32 $28
	$28 = (*([0] + [4]) - [192])
	*([0] + [4]) = $28
	$24 = (int_64)0
	$26 = (int_64)59
	$22 = [592]
	$27 = (int_64)0
	
.LOOP $label$1:
	$23 = (int_64)0
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($22)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [165])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$23 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$2
	$22 = ($22 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$27 = ((int_64)$23 | (int_64)$27)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$1 }
	$24 = (int_64)0
	$23 = (int_64)59
	$22 = [608]
	$25 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$24 > (uint_64)(int_64)10) ){ goto $label$10 }
	$7 = *($22)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [165])
	goto $label$8 
	
.LABEL $label$10
	$26 = (int_64)0
	if ( ((int_64)$24 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$26 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$26 = ((int_64)((int_64)$26 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$6
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)-5)
	$25 = ((int_64)$26 | (int_64)$25)
	$24 = ((int_64)$24 + (int_64)1)
	if ( ((int_64)$24 != (int_64)13) ){ goto $label$5 }
	CALL require_auth2($27, $25)
	$4 = [0]
	*($28 + [184]) = [0]
	*($28 + [176]) = (int_64)0
	$1 = ($0 + [8])
	*($28 + [168]) = $1
	*($28 + [48]) = (int_64)1
	CALL $65(($28 + [160]), ($28 + [168]), ($28 + [48]))
	$22 = *($28 + [164])
	if ( ($22 == 0) ){ goto $label$11 }
	$3 = ($28 + [84])
	$2 = (($28 + [48]) | [1])
	$8 = (($28 + [48]) + [8])
	$9 = (($28 + [120]) + [16])
	$11 = (($28 + [120]) + [24])
	$12 = (($28 + [120]) + [28])
	$13 = (($28 + [120]) + [32])
	$14 = ($28 + [60])
	$15 = ($28 + [68])
	$16 = ($28 + [88])
	$17 = ($28 + [92])
	$18 = ($28 + [96])
	$19 = ($28 + [100])
	$20 = ($28 + [104])
	$4 = [0]
	$5 = [0]
	
.LOOP $label$12:
	if ( ((uint_32)$5 > (uint_32)[9]) ){ goto $label$11 }
	if ( ((uint_64)*($22 + [64]) > (uint_64)(int_64)1) ){ goto $label$11 }
	CALL prints([1360])
	CALL _ZNSt3__19to_stringEy(($28 + [48]), *(*($28 + [164])))
	CALL prints(( *($8) ? $2 : (*($28 + [48]) & [1]) ))
	if ( ((*($28 + [48]) & [1]) == 0) ){ goto $label$13 }
	CALL $133(*($8))
	
.LABEL $label$13
	*($9) = (int_64)-1
	$24 = *(*($28 + [164]))
	*(($10 = (($28 + [120]) + [8]))) = $24
	$26 = *($0)
	*($28 + [120]) = $26
	*($11) = [0]
	*($12) = [0]
	*($13) = [0]
	$22 = CALL db_lowerbound_i64($26, $24, (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$14 }
	$21 = CALL $39(($28 + [120]), $22)
	
.LOOP $label$15:
	if ( ((uint_32)(*($21 + [68]) + [5]) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$16 }
	if ( ((uint_32)*($21 + [64]) > (uint_32)[999999999]) ){ goto $label$16 }
	CALL eosio_assert([1], [768])
	CALL $77(($28 + [120]), $21, (int_64)0, ($28 + [48]))
	CALL prints([1376])
	CALL _ZNSt3__19to_stringEy(($28 + [48]), *($21))
	CALL prints(( *($8) ? $2 : (*($28 + [48]) & [1]) ))
	if ( ((*($28 + [48]) & [1]) == 0) ){ goto $label$17 }
	CALL $133(*($8))
	
.LABEL $label$17
	$26 = *($21)
	$23 = *($21 + [8])
	$24 = (int_64)0
	*($28 + [56]) = (int_64)0
	$6 = ((int_64)$26 | (int_64)((int_64)$23 << (int_64)32))
	*($28 + [48]) = $6
	CALL cancel_deferred(($28 + [48]))
	$26 = CALL current_time()
	*($14) = [0]
	*((($28 + [48]) + [16])) = [0]
	*($15) = [0]
	*((($28 + [48]) + [24])) = [0]
	*((($28 + [48]) + [28])) = [0]
	*((($28 + [48]) + [32])) = [0]
	*($28 + [48]) = ((CASTING uint_32)(uint_64 ((uint_64)$26 / (uint_64)(int_64)1000000)) + [60])
	*($3) = [0]
	*($16) = [0]
	*($17) = [0]
	*($18) = [0]
	*($19) = [0]
	*($20) = [0]
	$26 = (int_64)59
	$22 = [592]
	$27 = (int_64)0
	
.LOOP $label$18:
	$23 = (int_64)0
	if ( ((uint_64)$24 > (uint_64)(int_64)11) ){ goto $label$19 }
	$7 = *($22)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$21 }
	$7 = ($7 + [165])
	goto $label$20 
	
.LABEL $label$21
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$20
	$23 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$26 & (int_64)4294967295))
	
.LABEL $label$19
	$22 = ($22 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$27 = ((int_64)$23 | (int_64)$27)
	$26 = ((int_64)$26 + (int_64)-5)
	if ( ((int_64)$26 != (int_64)-6) ){ goto $label$18 }
	$24 = (int_64)0
	$23 = (int_64)59
	$22 = [608]
	$25 = (int_64)0
	
.LOOP $label$22:
	if ( ((uint_64)$24 > (uint_64)(int_64)10) ){ goto $label$27 }
	$7 = *($22)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$7 = ($7 + [165])
	goto $label$25 
	
.LABEL $label$27
	$26 = (int_64)0
	if ( ((int_64)$24 == (int_64)11) ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$26
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$26 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$24
	$26 = ((int_64)((int_64)$26 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$23
	$22 = ($22 + [1])
	$23 = ((int_64)$23 + (int_64)-5)
	$25 = ((int_64)$26 | (int_64)$25)
	$24 = ((int_64)$24 + (int_64)1)
	if ( ((int_64)$24 != (int_64)13) ){ goto $label$22 }
	*((($28 + [32]) + [8])) = $25
	*($28 + [32]) = $27
	$24 = (int_64)0
	$23 = (int_64)59
	$22 = [1392]
	$27 = (int_64)0
	
.LOOP $label$28:
	if ( ((uint_64)$24 > (uint_64)(int_64)2) ){ goto $label$33 }
	$7 = *($22)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$7 = ($7 + [165])
	goto $label$31 
	
.LABEL $label$33
	$26 = (int_64)0
	if ( ((uint_64)$24 <= (uint_64)(int_64)11) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$32
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$26 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$30
	$26 = ((int_64)((int_64)$26 & (int_64)31) << (int_64)((int_64)$23 & (int_64)4294967295))
	
.LABEL $label$29
	$22 = ($22 + [1])
	$24 = ((int_64)$24 + (int_64)1)
	$27 = ((int_64)$26 | (int_64)$27)
	$23 = ((int_64)$23 + (int_64)-5)
	if ( ((int_64)$23 != (int_64)-6) ){ goto $label$28 }
	*($28 + [24]) = $27
	*((($28 + [8]) + [8])) = *($21)
	*($28 + [8]) = *(($21 + [8]))
	CALL $78($3, ($28 + [32]), $0, ($28 + [24]), ($28 + [8]))
	$24 = *($0)
	*($15) = [0]
	*($28 + [40]) = (int_64)0
	*($28 + [32]) = $6
	CALL $79(($28 + [8]), ($28 + [48]))
	$22 = *($28 + [8])
	CALL send_deferred(($28 + [32]), $24, $22, (*($28 + [12]) - $22), [1])
	$22 = *($28 + [8])
	if ( ($22 == 0) ){ goto $label$34 }
	*($28 + [12]) = $22
	CALL $133($22)
	
.LABEL $label$34
	CALL $80(($28 + [48]))
	$4 = [1]
	
.LABEL $label$16
	CALL eosio_assert([1], [352])
	$22 = CALL db_next_i64(*($21 + [92]), ($28 + [48]))
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$14 }
	$21 = CALL $39(($28 + [120]), $22)
	goto $label$15 
	
.LABEL $label$14
	$22 = CALL db_lowerbound_i64(*($28 + [120]), *($10), (int_64)4229443000054317056, (int_64)0)
	if ( ((int_32)$22 < (int_32)[0]) ){ goto $label$36 }
	CALL $39(($28 + [120]), $22)
	goto $label$35 
	
.LABEL $label$36
	$7 = *(*($28 + [164]))
	*($28 + [48]) = $7
	$22 = *($28 + [180])
	if ( ((uint_32)$22 >= (uint_32)*((($28 + [176]) + [8]))) ){ goto $label$37 }
	*($22) = $7
	*($28 + [180]) = ($22 + [4])
	goto $label$35 
	
.LABEL $label$37
	CALL $81(($28 + [176]), ($28 + [48]))
	
.LABEL $label$35
	CALL $66(($28 + [160]))
	$21 = *($11)
	if ( ($21 == 0) ){ goto $label$38 }
	$22 = *($12)
	if ( ((int_32)$22 == (int_32)$21) ){ goto $label$40 }
	
.LOOP $label$41:
	$22 = ($22 + [-24])
	$7 = *($22)
	*($22) = [0]
	if ( ($7 == 0) ){ goto $label$42 }
	if ( ((*($7 + [76]) & [1]) == 0) ){ goto $label$43 }
	CALL $133(*(($7 + [84])))
	
.LABEL $label$43
	CALL $133($7)
	
.LABEL $label$42
	if ( ((int_32)$21 != (int_32)$22) ){ goto $label$41 }
	$22 = *($11)
	goto $label$39 
	
.LABEL $label$40
	$22 = $21
	
.LABEL $label$39
	*($12) = $21
	CALL $133($22)
	
.LABEL $label$38
	$5 = ($5 + [1])
	$22 = *($28 + [164])
	if ( $22 ){ goto $label$12 }
	
.LABEL $label$11
	$8 = *($28 + [180])
	$3 = *($28 + [176])
	if ( ((int_32)$3 == (int_32)$8) ){ goto $label$44 }
	$2 = ($0 + [32])
	$4 = ($0 + [36])
	$14 = ($0 + [16])
	$16 = ($0 + [8])
	
.LOOP $label$45:
	$24 = *($3)
	$15 = *($2)
	$21 = *($4)
	if ( ((int_32)$21 == (int_32)$15) ){ goto $label$46 }
	$22 = ($21 + [-24])
	$0 = ([0] - $15)
	
.LOOP $label$47:
	if ( ((int_64)*(*($22)) == (int_64)$24) ){ goto $label$46 }
	$21 = $22
	$7 = ($22 + [-24])
	$22 = $7
	if ( ((int_32)($7 + $0) != (int_32)[-24]) ){ goto $label$47 }
	
.LABEL $label$46
	if ( ((int_32)$21 == (int_32)$15) ){ goto $label$49 }
	$22 = *(($21 + [-24]))
	CALL eosio_assert(((int_32)*($22 + [116]) == (int_32)$1), [160])
	goto $label$48 
	
.LABEL $label$49
	$22 = [0]
	$7 = CALL db_find_i64(*($16), *($14), (int_64)7035924439720001536, $24)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$48 }
	$22 = CALL $38($1, $7)
	CALL eosio_assert(((int_32)*($22 + [116]) == (int_32)$1), [160])
	
.LABEL $label$48
	CALL eosio_assert(((int_32)$22 != (int_32)[0]), [768])
	CALL $82($1, $22, (int_64)0, ($28 + [48]))
	$3 = ($3 + [4])
	if ( ((int_32)$3 != (int_32)$8) ){ goto $label$45 }
	$4 = [1]
	
.LABEL $label$44
	CALL eosio_assert(($4 & [1]), [1408])
	$22 = *($28 + [176])
	if ( ($22 == 0) ){ goto $label$50 }
	*($28 + [180]) = $22
	CALL $133($22)
	
.LABEL $label$50
	*([0] + [4]) = ($28 + [192])
}

void .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_32 $19
	$19 = (*([0] + [4]) - [16])
	*([0] + [4]) = $19
	$4 = (int_64)0
	$17 = (int_64)59
	$18 = [592]
	$14 = (int_64)0
	
.LOOP $label$1:
	$15 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($18)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [165])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$2
	$18 = ($18 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$1 }
	$4 = (int_64)0
	$15 = (int_64)59
	$18 = [608]
	$16 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$10 }
	$7 = *($18)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$7 = ($7 + [165])
	goto $label$8 
	
.LABEL $label$10
	$17 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$17 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$17 = ((int_64)((int_64)$17 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$6
	$18 = ($18 + [1])
	$15 = ((int_64)$15 + (int_64)-5)
	$16 = ((int_64)$17 | (int_64)$16)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$5 }
	CALL require_auth2($14, $16)
	$3 = ($0 + [88])
	$1 = ($0 + [8])
	$2 = ($19 | [1])
	$8 = ($0 + [16])
	$9 = ($0 + [32])
	$10 = ($0 + [36])
	$11 = ($0 + [112])
	$12 = ($0 + [116])
	$13 = ($0 + [96])
	$17 = (int_64)0
	
.LOOP $label$13:
	$18 = CALL db_lowerbound_i64(*($1), *($8), (int_64)7035924439720001536, (int_64)0)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$12 }
	$18 = CALL $38($1, $18)
	CALL prints([624])
	CALL _ZNSt3__19to_stringEy($19, *($18))
	$7 = ($19 + [8])
	CALL prints(( *($7) ? $2 : (*($19) & [1]) ))
	if ( ((*($19) & [1]) == 0) ){ goto $label$14 }
	CALL $133(*($7))
	
.LABEL $label$14
	if ( ((int_64)*($18 + [64]) != (int_64)2) ){ goto $label$12 }
	if ( ((uint_32)(*($18 + [72]) + [86400]) >= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$12 }
	$4 = *($18)
	CALL prints([640])
	CALL _ZNSt3__19to_stringEy($19, $4)
	CALL prints(( *($7) ? $2 : (*($19) & [1]) ))
	if ( ((*($19) & [1]) == 0) ){ goto $label$15 }
	CALL $133(*($7))
	
.LABEL $label$15
	$5 = *($9)
	$0 = *($10)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$16 }
	$18 = ($0 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$17:
	if ( ((int_64)*(*($18)) == (int_64)$4) ){ goto $label$16 }
	$0 = $18
	$7 = ($18 + [-24])
	$18 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$19 }
	$18 = *(($0 + [-24]))
	CALL eosio_assert(((int_32)*($18 + [116]) == (int_32)$1), [160])
	goto $label$18 
	
.LABEL $label$19
	$18 = [0]
	$7 = CALL db_find_i64(*($1), *($8), (int_64)7035924439720001536, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$18 }
	$18 = CALL $38($1, $7)
	CALL eosio_assert(((int_32)*($18 + [116]) == (int_32)$1), [160])
	
.LABEL $label$18
	$7 = ((int_32)$18 != (int_32)[0])
	CALL eosio_assert($7, [304])
	CALL eosio_assert($7, [352])
	$7 = CALL db_next_i64(*($18 + [120]), $19)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$20 }
	CALL $38($1, $7)
	
.LABEL $label$20
	CALL $46($1, $18)
	$5 = *($11)
	$0 = *($12)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$21 }
	$18 = ($0 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$22:
	if ( ((int_64)*(*($18)) == (int_64)$4) ){ goto $label$21 }
	$0 = $18
	$7 = ($18 + [-24])
	$18 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	$17 = ((int_64)$17 + (int_64)1)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$25 }
	$18 = *(($0 + [-24]))
	CALL eosio_assert(((int_32)*($18 + [88]) == (int_32)$3), [160])
	if ( $18 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$18 = CALL db_find_i64(*($3), *($13), (int_64)7035937270569123840, $4)
	if ( ((int_32)$18 < (int_32)[0]) ){ goto $label$23 }
	$18 = CALL $47($3, $18)
	CALL eosio_assert(((int_32)*($18 + [88]) == (int_32)$3), [160])
	
.LABEL $label$24
	CALL eosio_assert([1], [304])
	CALL eosio_assert([1], [352])
	$7 = CALL db_next_i64(*($18 + [92]), $19)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$26 }
	CALL $47($3, $7)
	
.LABEL $label$26
	CALL $48($3, $18)
	
.LABEL $label$23
	if ( ((uint_64)$17 <= (uint_64)(int_64)99) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_64)$17 != (int_64)0) ){ goto $label$11 }
	CALL eosio_assert([0], [656])
	
.LABEL $label$11
	*([0] + [4]) = ($19 + [16])
}

void .FUNC $19 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	CALL require_auth(*($0))
	$3 = *(($0 + [32]))
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$1 }
	$8 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$1) ){ goto $label$1 }
	$5 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$6 = ($0 + [8])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$8 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [116]) == (int_32)$6), [160])
	goto $label$3 
	
.LABEL $label$4
	$8 = [0]
	$5 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7035924439720001536, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$8 = CALL $38($6, $5)
	CALL eosio_assert(((int_32)*($8 + [116]) == (int_32)$6), [160])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [224])
	CALL eosio_assert(((int_64)*($8 + [64]) != (int_64)0), [240])
	*(($9 + [32])) = [0]
	*($9 + [16]) = (int_64)-1
	*($9 + [24]) = (int_64)0
	$7 = *($0)
	*($9) = $7
	*($9 + [8]) = $1
	$8 = [0]
	$6 = CALL db_find_i64($7, $1, (int_64)4229443000054317056, $2)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $39($9, $6)
	CALL eosio_assert(((int_32)*($8 + [88]) == (int_32)$9), [160])
	
.LABEL $label$5
	$6 = ((int_32)$8 != (int_32)[0])
	CALL eosio_assert($6, [272])
	CALL eosio_assert(((int_64)*($8 + [8]) == (int_64)$1), [272])
	CALL eosio_assert($6, [304])
	CALL eosio_assert($6, [352])
	$6 = CALL db_next_i64(*($8 + [92]), ($9 + [40]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL $39($9, $6)
	
.LABEL $label$6
	CALL $40($9, $8)
	$5 = *($9 + [24])
	if ( ($5 == 0) ){ goto $label$7 }
	$4 = ($9 + [28])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$9 }
	
.LOOP $label$10:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$11 }
	if ( ((*($6 + [76]) & [1]) == 0) ){ goto $label$12 }
	CALL $133(*(($6 + [84])))
	
.LABEL $label$12
	CALL $133($6)
	
.LABEL $label$11
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$10 }
	$8 = *(($9 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$8 = $5
	
.LABEL $label$8
	*($4) = $5
	CALL $133($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [48])
}

void .FUNC $180 ()
{
	(unreachable)
}

void .FUNC $116 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = *([0] + [4])
	$10 = $2
	$7 = (int_64)1
	$8 = *($0 + [8])
	$5 = (int_64)($8 == 0)
	if ( $5 ){ goto $label$1 }
	$9 = ((int_64)$8 + (int_64)1)
	$7 = (int_64)1
	
.LOOP $label$2:
	$7 = ((int_64)$7 * (int_64)10)
	$9 = ((int_64)$9 + (int_64)-1)
	if ( ((int_64)$9 > (int_64)1) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [8])
	$2 = ($2 - (((CASTING uint_32)(uint_64 ((int_64)$8 + (int_64)1)) + [15]) & [1008]))
	*([0] + [4]) = $2
	*(($6 = ($2 + ($3 = (CASTING uint_32)(uint_64 $8))))) = [0]
	$4 = *($0)
	if ( $5 ){ goto $label$3 }
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$4 % (int_64)$7)
	$0 = ($6 + [-1])
	
.LOOP $label$4:
	*($0) = ((int_64)((int_64)$9 % (int_64)10) + (int_64)48)
	$0 = ($0 + [-1])
	$9 = ((int_64)$9 / (int_64)10)
	$8 = ((int_64)$8 + (int_64)-1)
	if ( ((int_64)$8 > (int_64)1) ){ goto $label$4 }
	
.LABEL $label$3
	CALL printi(((int_64)$4 / (int_64)$7))
	CALL prints([2656])
	CALL prints_l($2, $3)
	CALL prints([2672])
	CALL $123($1, [0])
	*([0] + [4]) = $10
}

int_32 .FUNC $117 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [92]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1200])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)4229443000054317056)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [1136])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [1136])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $39(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $114 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$2 }
	$3 = ($1 + [1])
	$10 = ($1 + [4])
	$11 = ($1 + [8])
	$0 = $2
	
.LOOP $label$4:
	$4 = $0
	$0 = $6
	
.LOOP $label$7:
	$7 = ($8 & [1])
	$8 = *($0 + [16])
	$8 = ( *(($0 + [20])) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($1)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$9 }
	$5 = CALL memcmp(( *(($0 + [24])) ? (($0 + [16]) + [1]) : $7 ), ( *($11) ? $3 : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$9 }
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$6 }
	
.LABEL $label$8
	$0 = *($0 + [4])
	if ( $0 ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	$6 = *($0)
	if ( $6 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$3
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$2 }
	$7 = ($8 & [1])
	$8 = *($1)
	$8 = ( *(($1 + [4])) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($0 + [16])
	$6 = ( *($0 + [20]) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$10 }
	$5 = CALL memcmp(( *(($1 + [8])) ? $3 : $7 ), ( *($0 + [24]) ? (($0 + [16]) + [1]) : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$10
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$1 }
	
.LABEL $label$2
	$0 = $2
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $115 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [160])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $124($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [160])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC $112 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$13 = ($0 + [4])
	$0 = *($0 + [4])
	if ( ($0 == 0) ){ goto $label$2 }
	$3 = ($2 + [1])
	$12 = ($2 + [8])
	
.LOOP $label$4:
	$4 = ($0 + [16])
	$7 = ($8 & [1])
	$8 = *($2)
	$10 = ($2 + [4])
	$8 = ( *($10) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($0 + [16])
	$11 = ($0 + [20])
	$6 = ( *($11) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$8 }
	$5 = CALL memcmp(( *($12) ? $3 : $7 ), ( *(($0 + [24])) ? ($4 + [1]) : $5 ), $9)
	if ( ($5 == 0) ){ goto $label$8 }
	if ( ((int_32)$5 > (int_32)[-1]) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$8
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$6 }
	
.LABEL $label$7
	$6 = *($0)
	if ( $6 ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$6
	$7 = ($8 & [1])
	$8 = *($4)
	$8 = ( *($11) ? uint_32($8 >> [1]) : $7 )
	$5 = ($6 & [1])
	$6 = *($2)
	$6 = ( *($10) ? uint_32($6 >> [1]) : $5 )
	$9 = ( $6 ? $8 : ($6 <= $8) )
	if ( ($9 == 0) ){ goto $label$10 }
	$4 = CALL memcmp(( *(($0 + [24])) ? ($4 + [1]) : $7 ), ( *($12) ? $3 : $5 ), $9)
	if ( ($4 == 0) ){ goto $label$10 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$9 }
	goto $label$3 
	
.LABEL $label$10
	if ( ((uint_32)$8 >= (uint_32)$6) ){ goto $label$3 }
	
.LABEL $label$9
	$13 = ($0 + [4])
	$6 = *($0 + [4])
	if ( ($6 == 0) ){ goto $label$3 }
	$0 = $13
	
.LABEL $label$5
	$13 = $0
	$0 = $6
	goto $label$4 
	
.LABEL $label$3
	*($1) = $0
	return $13
	
.LABEL $label$2
	*($1) = $13
	return $13
	
.LABEL $label$1
	*($1) = $0
	return $0
}

void .FUNC $113 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = ((int_32)$1 == (int_32)$0)
	*($1 + [12]) = $3
	if ( $3 ){ goto $label$3 }
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( *($2 + [12]) ){ goto $label$3 }
	$3 = *($2 + [8])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$10 }
	if ( ($4 == 0) ){ goto $label$8 }
	if ( *($4 + [12]) ){ goto $label$8 }
	$4 = ($4 + [12])
	goto $label$9 
	
.LABEL $label$10
	$4 = *($3 + [4])
	if ( ($4 == 0) ){ goto $label$6 }
	if ( *($4 + [12]) ){ goto $label$6 }
	$4 = ($4 + [12])
	
.LABEL $label$9
	*(($2 + [12])) = [1]
	$2 = ((int_32)$3 == (int_32)$0)
	*($3 + [12]) = $2
	*($4) = [1]
	$1 = $3
	if ( ($2 == 0) ){ goto $label$7 }
	goto $label$3 
	
.LABEL $label$8
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$5 }
	$4 = $2
	goto $label$4 
	
.LABEL $label$6
	if ( ((int_32)*($2) == (int_32)$1) ){ goto $label$2 }
	$4 = *($2 + [4])
	$1 = *($4)
	*($2 + [4]) = $1
	if ( ($1 == 0) ){ goto $label$11 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$11
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*($4) = $2
	$3 = *($4 + [8])
	goto $label$1 
	
.LABEL $label$5
	$4 = *($2)
	$1 = *($4 + [4])
	*($2) = $1
	if ( ($1 == 0) ){ goto $label$12 }
	*($1 + [8]) = $2
	$3 = *(($2 + [8]))
	
.LABEL $label$12
	*($4 + [8]) = $3
	*(( ($3 = *(($1 = ($2 + [8])))) ? ($3 + [4]) : ((int_32)*($3) == (int_32)$2) )) = $4
	*($1) = $4
	*(($4 + [4])) = $2
	$3 = *($4 + [8])
	
.LABEL $label$4
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3 + [4])
	$4 = *($2)
	*($3 + [4]) = $4
	if ( ($4 == 0) ){ goto $label$13 }
	*($4 + [8]) = $3
	
.LABEL $label$13
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*($2) = $3
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	$4 = $2
	
.LABEL $label$1
	*($4 + [12]) = [1]
	*($3 + [12]) = [0]
	$2 = *($3)
	$4 = *($2 + [4])
	*($3) = $4
	if ( ($4 == 0) ){ goto $label$14 }
	*($4 + [8]) = $3
	
.LABEL $label$14
	*($2 + [8]) = *($3 + [8])
	*(( ($4 = *($3 + [8])) ? ($4 + [4]) : ((int_32)*($4) == (int_32)$3) )) = $2
	*($3 + [8]) = $2
	*(($2 + [4])) = $3
}

int_32 .FUNC $110 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2704]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$6 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$2 = ($2 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2720]
	$6 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$14 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$2 = ($2 + [165])
	goto $label$12 
	
.LABEL $label$14
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$10
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2736]
	$6 = (int_64)0
	
.LOOP $label$15:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$20 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$19 }
	$2 = ($2 + [165])
	goto $label$18 
	
.LABEL $label$20
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$19
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$18
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$17
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$16
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$15 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2752]
	$6 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$5 > (uint_64)(int_64)8) ){ goto $label$26 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$2 = ($2 + [165])
	goto $label$24 
	
.LABEL $label$26
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$22
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$21 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [2768]
	$6 = (int_64)0
	
.LOOP $label$27:
	$4 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$28 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$2 = ($2 + [165])
	goto $label$29 
	
.LABEL $label$30
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$28
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$27 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [2784]
	$6 = (int_64)0
	
.LOOP $label$31:
	$4 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$32 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$2 = ($2 + [165])
	goto $label$33 
	
.LABEL $label$34
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$32
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$31 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2800]
	$6 = (int_64)0
	
.LOOP $label$35:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$40 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$39 }
	$2 = ($2 + [165])
	goto $label$38 
	
.LABEL $label$40
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$37 }
	goto $label$36 
	
.LABEL $label$39
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$38
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$37
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$36
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$35 }
	if ( ((int_64)$6 == (int_64)$1) ){ goto $label$8 }
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2816]
	$6 = (int_64)0
	
.LOOP $label$41:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$46 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$45 }
	$2 = ($2 + [165])
	goto $label$44 
	
.LABEL $label$46
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$45
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$44
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$43
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$42
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$41 }
	if ( ((int_64)$6 != (int_64)$1) ){ goto $label$7 }
	
.LABEL $label$8
	return [1]
	
.LABEL $label$7
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [2832]
	$6 = (int_64)0
	
.LOOP $label$47:
	if ( ((uint_64)$5 > (uint_64)(int_64)9) ){ goto $label$52 }
	$2 = *($3)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$51 }
	$2 = ($2 + [165])
	goto $label$50 
	
.LABEL $label$52
	$7 = (int_64)0
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$49 }
	goto $label$48 
	
.LABEL $label$51
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$50
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $2) << (int_64)56) >> (int_64)56)
	
.LABEL $label$49
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$48
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$7 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)-5)
	if ( ((int_64)$4 != (int_64)-6) ){ goto $label$47 }
	return ((int_64)$6 == (int_64)$1)
}

void .FUNC $111 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$6 = CALL $143($2, $3, [0])
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$2 }
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$7 = [0]
	
.LOOP $label$3:
	CALL $151($8, $2, $7, ($6 - $7), $2)
	$7 = *($5)
	if ( ((uint_32)$7 >= (uint_32)*($4)) ){ goto $label$5 }
	*($7) = *($8)
	$7 = ($8 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($8) = [0]
	*($8 + [4]) = [0]
	*($5) = (*($5) + [12])
	goto $label$4 
	
.LABEL $label$5
	CALL $126($0, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$4 }
	CALL $133(*(($8 + [8])))
	
.LABEL $label$4
	$7 = ($6 + [1])
	$6 = CALL $143($2, $3, $7)
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL $151($8, $2, $7, [-1], $2)
	$2 = ($0 + [4])
	$7 = *($2)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [8]))) ){ goto $label$7 }
	*($7) = *($8)
	$7 = ($8 + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($8) = [0]
	*($8 + [4]) = [0]
	*($2) = (*($2) + [12])
	goto $label$6 
	
.LABEL $label$7
	CALL $126($0, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$6 }
	CALL $133(*($8 + [8]))
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $118 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1008])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $132([112])) + [24]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [32])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [96])
	*($4 + [84]) = [0]
	*($4 + [76 align=4]) = (int_64)0
	*($4 + [88]) = $1
	CALL $121(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [92])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $42(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3 + [76]) & [1]) == 0) ){ goto $label$9 }
	CALL $133(*(($3 + [84])))
	
.LABEL $label$9
	CALL $133($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [992])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $75(*($1), ($0 + [32]))
}

void .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [128])
	CALL memcpy(($2 + [48]), *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$3 = *($0)
	*($4) = *($1)
	*($4 + [12]) = ($3 + [81])
	*($4 + [8]) = ($3 + [80])
	*($4 + [16]) = ($3 + [82])
	*($4 + [20]) = ($3 + [83])
	*($4 + [24]) = ($3 + [84])
	*($4 + [28]) = ($3 + [85])
	*($4 + [32]) = ($3 + [86])
	*($4 + [36]) = ($3 + [87])
	*($4 + [40]) = ($3 + [88])
	*($4 + [44]) = ($3 + [89])
	*($4 + [48]) = ($3 + [90])
	*($4 + [52]) = ($3 + [91])
	*($4 + [56]) = ($3 + [92])
	*($4 + [60]) = ($3 + [93])
	*($4 + [64]) = ($3 + [94])
	*($4 + [68]) = ($3 + [95])
	*($4 + [72]) = ($3 + [96])
	*($4 + [76]) = ($3 + [97])
	*($4 + [80]) = ($3 + [98])
	*($4 + [84]) = ($3 + [99])
	*($4 + [88]) = ($3 + [100])
	*($4 + [92]) = ($3 + [101])
	*($4 + [96]) = ($3 + [102])
	*($4 + [100]) = ($3 + [103])
	*($4 + [104]) = ($3 + [104])
	*($4 + [108]) = ($3 + [105])
	*($4 + [112]) = ($3 + [106])
	*($4 + [116]) = ($3 + [107])
	*($4 + [120]) = ($3 + [108])
	*($4 + [124]) = ($3 + [109])
	*($4 + [128]) = ($3 + [110])
	*($4 + [132]) = ($3 + [111])
	*($4 + [136]) = ($3 + [112])
	*($4 + [140]) = ($3 + [113])
	*($4 + [144]) = ($3 + [114])
	*($4 + [148]) = ($3 + [115])
	*($4 + [152]) = ($3 + [116])
	*($4 + [156]) = ($3 + [117])
	*($4 + [160]) = ($3 + [118])
	*($4 + [164]) = ($3 + [119])
	*($4 + [168]) = ($3 + [120])
	*($4 + [172]) = ($3 + [121])
	*($4 + [176]) = ($3 + [122])
	*($4 + [180]) = ($3 + [123])
	*($4 + [184]) = ($3 + [124])
	*($4 + [188]) = ($3 + [125])
	*($4 + [192]) = ($3 + [126])
	*($4 + [196]) = ($3 + [127])
	*($4 + [200]) = ($3 + [128])
	*($4 + [204]) = ($3 + [129])
	*($4 + [208]) = ($3 + [130])
	*($4 + [212]) = ($3 + [131])
	*($4 + [216]) = ($3 + [132])
	*($4 + [220]) = ($3 + [133])
	*($4 + [224]) = ($3 + [134])
	*($4 + [228]) = ($3 + [135])
	*($4 + [232]) = ($3 + [136])
	*($4 + [236]) = ($3 + [137])
	*($4 + [240]) = ($3 + [138])
	*($4 + [244]) = ($3 + [139])
	*($4 + [248]) = ($3 + [140])
	*($4 + [252]) = ($3 + [141])
	*($4 + [256]) = ($3 + [142])
	*($4 + [260]) = ($3 + [143])
	*($4 + [264]) = ($3 + [144])
	*($4 + [268]) = ($3 + [145])
	CALL $30(($4 + [8]), $4)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($3 + [152]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL $31($0, ($3 + [160]))
	CALL $31($0, ($3 + [172]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [128])
	CALL memcpy(($4 + [8]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*(($3 + [184])) = ((int_32)*($4 + [8]) != (int_32)[0])
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [128])
	CALL memcpy(($4 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*(($3 + [185])) = ((int_32)*($4 + [8]) != (int_32)[0])
	CALL $28($0, ($3 + [188]))
	*($4 + [8]) = $3
	CALL $32(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [272])
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $36($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $137($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $132($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $137($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $133($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $134($7)
	return (unreachable)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = (*([0] + [4]) - [304])
	*([0] + [4]) = $2
	*(($3 = $2) + [300]) = $0
	*($3 + [288]) = *($1)
	*($3 + [292]) = *($1 + [4])
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	CALL $22(($3 + [16]), $2, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($2)
	
.LABEL $label$5
	*($3 + [12]) = ($3 + [288])
	*($3 + [8]) = ($3 + [300])
	CALL $23(($3 + [8]), ($3 + [16]))
	CALL $24(($3 + [16]))
	*([0] + [4]) = ($3 + [304])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	CALL require_auth(*($0))
	CALL require_recipient($1)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [384])
	*([0] + [4]) = $10
	$4 = *($1 + [16])
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $150(($10 + [368]), ($1 + [24]))
	*((($10 + [336]) + [24])) = *(($1 + [72]))
	*(($10 + [352])) = *(($1 + [64]))
	*($10 + [344]) = *(($1 + [56]))
	*($10 + [336]) = *($1 + [48])
	CALL memcpy(($10 + [264]), ($1 + [80]), [66])
	$5 = *($1 + [152])
	$6 = CALL $25(($10 + [224]), ($1 + [160]))
	*($10 + [216]) = [0]
	*($10 + [208]) = (int_64)0
	$9 = (*(($1 + [204])) - *($1 + [200]))
	$7 = ((int_32)$9 / (int_32)[12])
	if ( ($9 == 0) ){ goto $label$3 }
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$2 }
	$8 = CALL $132($9)
	*(($10 + [216])) = ($8 + ((int_32)$7 * (int_32)[12]))
	*($10 + [208]) = $8
	*($10 + [212]) = $8
	$7 = *(($1 + [204]))
	$9 = *(($1 + [200]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $150($8, $9)
	$8 = (*($10 + [212]) + [12])
	*($10 + [212]) = $8
	$9 = ($9 + [12])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$4 }
	
.LABEL $label$3
	*($10 + [200]) = [0]
	*($10 + [192]) = (int_64)0
	$9 = (*(($1 + [216])) - *($1 + [212]))
	$7 = ((int_32)$9 / (int_32)[12])
	if ( ($9 == 0) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[357913942]) ){ goto $label$1 }
	$8 = CALL $132($9)
	*(($10 + [200])) = ($8 + ((int_32)$7 * (int_32)[12]))
	*($10 + [192]) = $8
	*($10 + [196]) = $8
	$7 = *(($1 + [216]))
	$9 = *(($1 + [212]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $150($8, $9)
	$8 = (*($10 + [196]) + [12])
	*($10 + [196]) = $8
	$9 = ($9 + [12])
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$6 }
	
.LABEL $label$5
	CALL $150(($10 + [176]), ($1 + [224]))
	*(($9 = (($10 + [160]) + [8]))) = *(($1 + [248]))
	*(($8 = (($10 + [144]) + [8]))) = *(($1 + [264]))
	*($10 + [160]) = *($1 + [240])
	*($10 + [144]) = *($1 + [256])
	*((($10 + [112]) + [24])) = *((($10 + [336]) + [24]))
	*((($10 + [112]) + [16])) = *((($10 + [336]) + [16]))
	*($10 + [112]) = *($10 + [336])
	*($10 + [120]) = *($10 + [344])
	CALL memcpy(($10 + [46]), ($10 + [264]), [66])
	*((($10 + [24]) + [8])) = *($9)
	*((($10 + [8]) + [8])) = *($8)
	*($10 + [24]) = *($10 + [160])
	*($10 + [8]) = *($10 + [144])
	CALL $26($0, $2, $3, $4, ($10 + [368]), ($10 + [112]), ($10 + [46]), $5, $6, ($10 + [208]), ($10 + [192]), ($10 + [176]), ($10 + [24]), ($10 + [8]))
	if ( ((*($10 + [176]) & [1]) == 0) ){ goto $label$7 }
	CALL $133(*($10 + [184]))
	
.LABEL $label$7
	$1 = *($10 + [192])
	if ( ($1 == 0) ){ goto $label$8 }
	$9 = *($10 + [196])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$10 }
	$8 = ([0] - $1)
	$9 = ($9 + [-12])
	
.LOOP $label$11:
	if ( ((*($9) & [1]) == 0) ){ goto $label$12 }
	CALL $133(*(($9 + [8])))
	
.LABEL $label$12
	$9 = ($9 + [-12])
	if ( ((int_32)($9 + $8) != (int_32)[-12]) ){ goto $label$11 }
	$9 = *($10 + [192])
	goto $label$9 
	
.LABEL $label$10
	$9 = $1
	
.LABEL $label$9
	*($10 + [196]) = $1
	CALL $133($9)
	
.LABEL $label$8
	$1 = *($10 + [208])
	if ( ($1 == 0) ){ goto $label$13 }
	$9 = *($10 + [212])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$15 }
	$8 = ([0] - $1)
	$9 = ($9 + [-12])
	
.LOOP $label$16:
	if ( ((*($9) & [1]) == 0) ){ goto $label$17 }
	CALL $133(*(($9 + [8])))
	
.LABEL $label$17
	$9 = ($9 + [-12])
	if ( ((int_32)($9 + $8) != (int_32)[-12]) ){ goto $label$16 }
	$9 = *($10 + [208])
	goto $label$14 
	
.LABEL $label$15
	$9 = $1
	
.LABEL $label$14
	*($10 + [212]) = $1
	CALL $133($9)
	
.LABEL $label$13
	if ( ((*($6 + [28]) & [1]) == 0) ){ goto $label$18 }
	CALL $133(*(($6 + [36])))
	
.LABEL $label$18
	$9 = *($6 + [12])
	if ( ($9 == 0) ){ goto $label$19 }
	*(($6 + [16])) = $9
	CALL $133($9)
	
.LABEL $label$19
	$9 = *($6)
	if ( ($9 == 0) ){ goto $label$20 }
	*($6 + [4]) = $9
	CALL $133($9)
	
.LABEL $label$20
	if ( ((*($10 + [368]) & [1]) == 0) ){ goto $label$21 }
	CALL $133(*($10 + [376]))
	
.LABEL $label$21
	*([0] + [4]) = ($10 + [384])
	return (unreachable)
	
.LABEL $label$2
	CALL $149(($10 + [208]))
	
.LABEL $label$1
	CALL $149(($10 + [192]))
	(unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	*($0) = (int_64)0
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	$4 = [0]
	*(($0 + [32])) = [0]
	*($0 + [48]) = (int_64)0
	*(($0 + [72])) = [0]
	*(($0 + [64])) = (int_64)0
	*(($0 + [56])) = (int_64)0
	*(($0 + [76])) = [0]
	CALL memset(($0 + [80]), [0], [66])
	*($0 + [152]) = (int_64)0
	*($0 + [160]) = (int_64)0
	*(($0 + [168])) = (int_64)0
	*(($0 + [176])) = (int_64)0
	*(($0 + [184])) = (int_64)0
	*(($0 + [192])) = [0]
	*(($0 + [196])) = [0]
	*($0 + [200]) = [0]
	*(($0 + [204])) = [0]
	*(($0 + [208])) = [0]
	*($0 + [212]) = [0]
	*(($0 + [216])) = [0]
	*(($0 + [220])) = [0]
	*($0 + [224]) = [0]
	*(($0 + [228])) = [0]
	*(($0 + [232])) = [0]
	*($0 + [240]) = (int_64)0
	*(($5 = ($0 + [248]))) = (int_64)1398362884
	CALL eosio_assert([1], [32])
	$3 = (uint_64)*($5) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [96])
	*(($4 = ($0 + [264]))) = (int_64)1398362884
	*($0 + [256]) = (int_64)0
	CALL eosio_assert([1], [32])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [96])
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $27(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$3 = (*($1 + [4]) - *($1))
	$2 = int_32($3 >> [2])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$3 = CALL $132($3)
	*(($5 = ($0 + [4]))) = $3
	*(($0 + [8])) = ($3 + ($2 << [2]))
	*($0) = $3
	$4 = *($1)
	$2 = (*(($1 + [4])) - $4)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($3, $4, $2)
	*($5) = (*($5) + $2)
	
.LABEL $label$3
	*($0 + [12 align=4]) = (int_64)0
	*(($0 + [20])) = [0]
	$3 = (*(($1 + [16])) - *($1 + [12]))
	$2 = int_32($3 >> [2])
	if ( ($2 == 0) ){ goto $label$4 }
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$3 = CALL $132($3)
	*(($0 + [12])) = $3
	*(($0 + [20])) = ($3 + ($2 << [2]))
	*(($2 = ($0 + [16]))) = $3
	$4 = *(($1 + [12]))
	$5 = (*(($1 + [16])) - $4)
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($3, $4, $5)
	*($2) = (*($2) + $5)
	
.LABEL $label$4
	*($0 + [24]) = *($1 + [24])
	CALL $150(($0 + [28]), ($1 + [28]))
	return $0
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	CALL $149(($0 + [12]))
	(unreachable)
	return (unreachable)
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	if ( ((*($0 + [224]) & [1]) == 0) ){ goto $label$1 }
	CALL $133(*(($0 + [232])))
	
.LABEL $label$1
	$1 = *($0 + [212])
	if ( ($1 == 0) ){ goto $label$2 }
	$3 = ($0 + [216])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$4 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $133(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$5 }
	$4 = *(($0 + [212]))
	goto $label$3 
	
.LABEL $label$4
	$4 = $1
	
.LABEL $label$3
	*($3) = $1
	CALL $133($4)
	
.LABEL $label$2
	$1 = *($0 + [200])
	if ( ($1 == 0) ){ goto $label$7 }
	$3 = ($0 + [204])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$1) ){ goto $label$9 }
	$2 = ([0] - $1)
	$4 = ($4 + [-12])
	
.LOOP $label$10:
	if ( ((*($4) & [1]) == 0) ){ goto $label$11 }
	CALL $133(*(($4 + [8])))
	
.LABEL $label$11
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $2) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [200]))
	goto $label$8 
	
.LABEL $label$9
	$4 = $1
	
.LABEL $label$8
	*($3) = $1
	CALL $133($4)
	
.LABEL $label$7
	if ( ((*(($0 + [188])) & [1]) == 0) ){ goto $label$12 }
	CALL $133(*(($0 + [196])))
	
.LABEL $label$12
	$4 = *(($0 + [172]))
	if ( ($4 == 0) ){ goto $label$13 }
	*(($0 + [176])) = $4
	CALL $133($4)
	
.LABEL $label$13
	$4 = *($0 + [160])
	if ( ($4 == 0) ){ goto $label$14 }
	*(($0 + [164])) = $4
	CALL $133($4)
	
.LABEL $label$14
	if ( ((*($0 + [24]) & [1]) == 0) ){ goto $label$15 }
	CALL $133(*(($0 + [32])))
	
.LABEL $label$15
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($3, *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $28(*($1), ($2 + [24]))
	*($4 + [8]) = $2
	CALL $29(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_32 $8, int_32 $9, int_32 $10, int_32 $11, int_32 $12, int_32 $13)
{
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [384])
	*([0] + [4]) = $17
	$0 = *($0 + [4])
	$16 = *($0 + [4])
	$14 = (*(*($0)) + int_32($16 >> [1]))
	$15 = *($0)
	if ( (($16 & [1]) == 0) ){ goto $label$1 }
	$15 = *((*($14) + $15))
	
.LABEL $label$1
	CALL $150(($17 + [368]), $4)
	*((($17 + [336]) + [24])) = *(($5 + [24]))
	*((($17 + [336]) + [16])) = *(($5 + [16]))
	*($17 + [344]) = *(($5 + [8]))
	*($17 + [336]) = *($5)
	CALL memcpy(($17 + [264]), $6, [66])
	$4 = CALL $25(($17 + [224]), $8)
	*($17 + [216]) = [0]
	*($17 + [208]) = (int_64)0
	$5 = (*($9 + [4]) - *($9))
	$6 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$3 }
	$0 = CALL $132($5)
	*(($17 + [216])) = ($0 + ((int_32)$6 * (int_32)[12]))
	*($17 + [208]) = $0
	*($17 + [212]) = $0
	$9 = *(($9 + [4]))
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$4 }
	
.LOOP $label$5:
	CALL $150($0, $5)
	$0 = (*($17 + [212]) + [12])
	*($17 + [212]) = $0
	$5 = ($5 + [12])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	*($17 + [200]) = [0]
	*($17 + [192]) = (int_64)0
	$5 = (*($10 + [4]) - *($10))
	$9 = ((int_32)$5 / (int_32)[12])
	if ( ($5 == 0) ){ goto $label$6 }
	if ( ((uint_32)$9 >= (uint_32)[357913942]) ){ goto $label$2 }
	$0 = CALL $132($5)
	*(($17 + [200])) = ($0 + ((int_32)$9 * (int_32)[12]))
	*($17 + [192]) = $0
	*($17 + [196]) = $0
	$9 = *(($10 + [4]))
	$5 = *($10)
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$6 }
	
.LOOP $label$7:
	CALL $150($0, $5)
	$0 = (*($17 + [196]) + [12])
	*($17 + [196]) = $0
	$5 = ($5 + [12])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$6
	CALL $150(($17 + [176]), $11)
	*(($5 = (($17 + [160]) + [8]))) = *(($12 + [8]))
	*(($0 = (($17 + [144]) + [8]))) = *(($13 + [8]))
	*($17 + [160]) = *($12)
	*($17 + [144]) = *($13)
	*((($17 + [112]) + [24])) = *((($17 + [336]) + [24]))
	*((($17 + [112]) + [16])) = *((($17 + [336]) + [16]))
	*($17 + [112]) = *($17 + [336])
	*($17 + [120]) = *($17 + [344])
	CALL memcpy(($17 + [46]), ($17 + [264]), [66])
	*((($17 + [24]) + [8])) = *($5)
	*((($17 + [8]) + [8])) = *($0)
	*($17 + [24]) = *($17 + [160])
	*($17 + [8]) = *($17 + [144])
	CALL void $14((int_32 $1), (int_64 $2), (int_64 $3), (int_64 ($17 + [368])), (int_32 ($17 + [112])), (int_32 ($17 + [46])), (int_32 $7), (int_64 $4), (int_32 ($17 + [208])), (int_32 ($17 + [192])), (int_32 ($17 + [176])), (int_32 ($17 + [24])), (int_32 ($17 + [8])), (int_32 $15))
	if ( ((*($17 + [176]) & [1]) == 0) ){ goto $label$8 }
	CALL $133(*($17 + [184]))
	
.LABEL $label$8
	$9 = *($17 + [192])
	if ( ($9 == 0) ){ goto $label$9 }
	$5 = *($17 + [196])
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$11 }
	$0 = ([0] - $9)
	$5 = ($5 + [-12])
	
.LOOP $label$12:
	if ( ((*($5) & [1]) == 0) ){ goto $label$13 }
	CALL $133(*(($5 + [8])))
	
.LABEL $label$13
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $0) != (int_32)[-12]) ){ goto $label$12 }
	$5 = *($17 + [192])
	goto $label$10 
	
.LABEL $label$11
	$5 = $9
	
.LABEL $label$10
	*($17 + [196]) = $9
	CALL $133($5)
	
.LABEL $label$9
	$9 = *($17 + [208])
	if ( ($9 == 0) ){ goto $label$14 }
	$5 = *($17 + [212])
	if ( ((int_32)$5 == (int_32)$9) ){ goto $label$16 }
	$0 = ([0] - $9)
	$5 = ($5 + [-12])
	
.LOOP $label$17:
	if ( ((*($5) & [1]) == 0) ){ goto $label$18 }
	CALL $133(*(($5 + [8])))
	
.LABEL $label$18
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $0) != (int_32)[-12]) ){ goto $label$17 }
	$5 = *($17 + [208])
	goto $label$15 
	
.LABEL $label$16
	$5 = $9
	
.LABEL $label$15
	*($17 + [212]) = $9
	CALL $133($5)
	
.LABEL $label$14
	if ( ((*($4 + [28]) & [1]) == 0) ){ goto $label$19 }
	CALL $133(*(($4 + [36])))
	
.LABEL $label$19
	$5 = *($4 + [12])
	if ( ($5 == 0) ){ goto $label$20 }
	*(($4 + [16])) = $5
	CALL $133($5)
	
.LABEL $label$20
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$21 }
	*($4 + [4]) = $5
	CALL $133($5)
	
.LABEL $label$21
	if ( ((*($17 + [368]) & [1]) == 0) ){ goto $label$22 }
	CALL $133(*($17 + [376]))
	
.LABEL $label$22
	*([0] + [4]) = ($17 + [384])
	return (unreachable)
	
.LABEL $label$3
	CALL $149(($17 + [208]))
	
.LABEL $label$2
	CALL $149(($17 + [192]))
	(unreachable)
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($2 = *($1))) = (*($2) + [1])
	*(($1 = *($1))) = (*($1) + [1])
}

void .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	$3 = *($0)
	$9 = (CASTING uint_64)(uint_32 ((int_32)(*(($3 + [204])) - *($3 + [200])) / (int_32)[12]))
	$2 = *($1)
	$8 = *($2 + [4])
	$6 = ($2 + [8])
	$7 = ($2 + [4])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$5 = ((int_64)$9) != (int_64)0
	*($10 + [14]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $8) > (int_32)[0]), [992])
	CALL memcpy(*($7), ($10 + [14]), [1])
	$8 = (*($7) + [1])
	*($7) = $8
	if ( $5 ){ goto $label$1 }
	$8 = *(($3 + [204]))
	$7 = *(($3 + [200]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $75($2, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$2
	$3 = *($0)
	$9 = (CASTING uint_64)(uint_32 ((int_32)(*(($3 + [216])) - *($3 + [212])) / (int_32)[12]))
	$2 = *($1)
	$8 = *($2 + [4])
	$6 = ($2 + [8])
	$7 = ($2 + [4])
	
.LOOP $label$4:
	$4 = (CASTING uint_32)(uint_64 $9)
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	$5 = ((int_64)$9) != (int_64)0
	*($10 + [15]) = (($5) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $8) > (int_32)[0]), [992])
	CALL memcpy(*($7), ($10 + [15]), [1])
	$8 = (*($7) + [1])
	*($7) = $8
	if ( $5 ){ goto $label$4 }
	$8 = *(($3 + [216]))
	$7 = *(($3 + [212]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $75($2, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$5
	CALL $75(*($1), ($3 + [224]))
	$7 = *($1)
	CALL eosio_assert(((int_32)(*($7 + [8]) - *($7 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($7 + [4]), ($3 + [240]), [8])
	$8 = (*($7 + [4]) + [8])
	*($7 + [4]) = $8
	CALL eosio_assert(((int_32)(*($7 + [8]) - $8) > (int_32)[7]), [992])
	CALL memcpy(*($7 + [4]), ($3 + [248]), [8])
	*($7 + [4]) = (*($7 + [4]) + [8])
	$7 = *($1)
	CALL eosio_assert(((int_32)(*($7 + [8]) - *($7 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($7 + [4]), ($3 + [256]), [8])
	$8 = (*($7 + [4]) + [8])
	*($7 + [4]) = $8
	CALL eosio_assert(((int_32)(*($7 + [8]) - $8) > (int_32)[7]), [992])
	CALL memcpy(*($7 + [4]), ($3 + [264]), [8])
	*($7 + [4]) = (*($7 + [4]) + [8])
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), ($3 + [32]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), ($3 + [40]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), ($0 + [48]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((int_32)(*($2 + [8]) - $3) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), ($0 + [56]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($2 + [4]), ($0 + [64]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	CALL $75(*($1), ($0 + [72]))
}

void .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$6 = *($5 + [200])
	$5 = *($0)
	$3 = *(($5 + [204]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $6) / (int_32)[12]))
	$2 = *($1)
	$5 = *($2)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	*($2) = $5
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($6)
	$7 = (CASTING uint_64)(uint_32 ( *($6 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$4:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$4 }
	*($2) = $5
	$4 = *($6)
	$4 = ( *(($6 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$5 }
	$5 = ($4 + $5)
	*($2) = $5
	
.LABEL $label$5
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	$6 = *($0 + [212])
	$0 = *($0)
	$3 = *(($0 + [216]))
	$7 = (CASTING uint_64)(uint_32 ((int_32)($3 - $6) / (int_32)[12]))
	$2 = *($1)
	$5 = *($2)
	
.LOOP $label$6:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$6 }
	*($2) = $5
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = *($6)
	$7 = (CASTING uint_64)(uint_32 ( *($6 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) ))
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$9 }
	*($2) = $5
	$4 = *($6)
	$4 = ( *(($6 + [4])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$10 }
	$5 = ($4 + $5)
	*($2) = $5
	
.LABEL $label$10
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)$3) ){ goto $label$8 }
	
.LABEL $label$7
	$5 = *($0 + [224])
	$7 = (CASTING uint_64)(uint_32 ( *(($0 + [228])) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($1)
	$5 = *($6)
	
.LOOP $label$11:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$11 }
	*($6) = $5
	$4 = *(($0 + [224]))
	$4 = ( *(($0 + [228])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	if ( ($4 == 0) ){ goto $label$12 }
	*($6) = ($4 + $5)
	
.LABEL $label$12
	*(($5 = *($1))) = (*($5) + [16])
	*(($5 = *($1))) = (*($5) + [16])
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [352])
	*([0] + [4]) = $7
	$3 = *($1 + [8])
	$2 = *($1)
	CALL memcpy(($7 + [126]), ($1 + [16]), [66])
	*($7 + [120]) = [0]
	*($7 + [112]) = (int_64)0
	$5 = (*(($1 + [88])) - *($1 + [84]))
	$4 = int_32($5 >> [2])
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$2 }
	$5 = CALL $132($5)
	*(($7 + [120])) = ($5 + ($4 << [2]))
	*($7 + [112]) = $5
	*($7 + [116]) = $5
	$6 = *(($1 + [84]))
	$4 = (*(($1 + [88])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $6, $4)
	*($7 + [116]) = ($5 + $4)
	
.LABEL $label$3
	*($7 + [104]) = [0]
	*($7 + [96]) = (int_64)0
	$5 = (*(($1 + [100])) - *($1 + [96]))
	$4 = int_32($5 >> [2])
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[1073741824]) ){ goto $label$1 }
	$5 = CALL $132($5)
	*(($7 + [104])) = ($5 + ($4 << [2]))
	*($7 + [96]) = $5
	*($7 + [100]) = $5
	$6 = *(($1 + [96]))
	$4 = (*(($1 + [100])) - $6)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($5, $6, $4)
	*($7 + [100]) = ($5 + $4)
	
.LABEL $label$4
	$5 = *($1 + [109])
	$4 = *($1 + [108])
	CALL $150(($7 + [80]), ($1 + [112]))
	CALL memcpy(($7 + [192]), ($7 + [126]), [66])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*(*($0)) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$5 }
	$1 = *((*($0) + $1))
	
.LABEL $label$5
	CALL memcpy(($7 + [280]), ($7 + [192]), [66])
	CALL $150(($7 + [264]), ($7 + [80]))
	CALL memcpy(($7 + [14]), ($7 + [280]), [66])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($7 + [14])), (int_32 ($7 + [112])), (int_32 ($7 + [96])), (int_32 ((int_32)($4 & [255]) != (int_32)[0])), (int_32 ((int_32)($5 & [255]) != (int_32)[0])), (int_32 ($7 + [264])), (int_32 $1))
	if ( ((*($7 + [264]) & [1]) == 0) ){ goto $label$6 }
	CALL $133(*($7 + [272]))
	
.LABEL $label$6
	if ( ((*($7 + [80]) & [1]) == 0) ){ goto $label$7 }
	CALL $133(*($7 + [88]))
	
.LABEL $label$7
	$1 = *($7 + [96])
	if ( ($1 == 0) ){ goto $label$8 }
	*($7 + [100]) = $1
	CALL $133($1)
	
.LABEL $label$8
	$1 = *($7 + [112])
	if ( ($1 == 0) ){ goto $label$9 }
	*($7 + [116]) = $1
	CALL $133($1)
	
.LABEL $label$9
	*([0] + [4]) = ($7 + [352])
	return (unreachable)
	
.LABEL $label$2
	CALL $149(($7 + [112]))
	
.LABEL $label$1
	CALL $149(($7 + [96]))
	(unreachable)
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [272])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [128])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4) = *($1)
	*($4 + [12]) = ($3 + [17])
	*($4 + [8]) = ($3 + [16])
	*($4 + [16]) = ($3 + [18])
	*($4 + [20]) = ($3 + [19])
	*($4 + [24]) = ($3 + [20])
	*($4 + [28]) = ($3 + [21])
	*($4 + [32]) = ($3 + [22])
	*($4 + [36]) = ($3 + [23])
	*($4 + [40]) = ($3 + [24])
	*($4 + [44]) = ($3 + [25])
	*($4 + [48]) = ($3 + [26])
	*($4 + [52]) = ($3 + [27])
	*($4 + [56]) = ($3 + [28])
	*($4 + [60]) = ($3 + [29])
	*($4 + [64]) = ($3 + [30])
	*($4 + [68]) = ($3 + [31])
	*($4 + [72]) = ($3 + [32])
	*($4 + [76]) = ($3 + [33])
	*($4 + [80]) = ($3 + [34])
	*($4 + [84]) = ($3 + [35])
	*($4 + [88]) = ($3 + [36])
	*($4 + [92]) = ($3 + [37])
	*($4 + [96]) = ($3 + [38])
	*($4 + [100]) = ($3 + [39])
	*($4 + [104]) = ($3 + [40])
	*($4 + [108]) = ($3 + [41])
	*($4 + [112]) = ($3 + [42])
	*($4 + [116]) = ($3 + [43])
	*($4 + [120]) = ($3 + [44])
	*($4 + [124]) = ($3 + [45])
	*($4 + [128]) = ($3 + [46])
	*($4 + [132]) = ($3 + [47])
	*($4 + [136]) = ($3 + [48])
	*($4 + [140]) = ($3 + [49])
	*($4 + [144]) = ($3 + [50])
	*($4 + [148]) = ($3 + [51])
	*($4 + [152]) = ($3 + [52])
	*($4 + [156]) = ($3 + [53])
	*($4 + [160]) = ($3 + [54])
	*($4 + [164]) = ($3 + [55])
	*($4 + [168]) = ($3 + [56])
	*($4 + [172]) = ($3 + [57])
	*($4 + [176]) = ($3 + [58])
	*($4 + [180]) = ($3 + [59])
	*($4 + [184]) = ($3 + [60])
	*($4 + [188]) = ($3 + [61])
	*($4 + [192]) = ($3 + [62])
	*($4 + [196]) = ($3 + [63])
	*($4 + [200]) = ($3 + [64])
	*($4 + [204]) = ($3 + [65])
	*($4 + [208]) = ($3 + [66])
	*($4 + [212]) = ($3 + [67])
	*($4 + [216]) = ($3 + [68])
	*($4 + [220]) = ($3 + [69])
	*($4 + [224]) = ($3 + [70])
	*($4 + [228]) = ($3 + [71])
	*($4 + [232]) = ($3 + [72])
	*($4 + [236]) = ($3 + [73])
	*($4 + [240]) = ($3 + [74])
	*($4 + [244]) = ($3 + [75])
	*($4 + [248]) = ($3 + [76])
	*($4 + [252]) = ($3 + [77])
	*($4 + [256]) = ($3 + [78])
	*($4 + [260]) = ($3 + [79])
	*($4 + [264]) = ($3 + [80])
	*($4 + [268]) = ($3 + [81])
	CALL $30(($4 + [8]), $4)
	CALL $31(*($1), ($3 + [84]))
	CALL $31(*($1), ($3 + [96]))
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [128])
	CALL memcpy(($4 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($3 + [108]) = ((int_32)*($4 + [8]) != (int_32)[0])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [128])
	CALL memcpy(($4 + [8]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	*($3 + [109]) = ((int_32)*($4 + [8]) != (int_32)[0])
	CALL $28(*($1), ($3 + [112]))
	*([0] + [4]) = ($4 + [272])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1008])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $132([104])) + [88]) = $1
	CALL $108(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [92])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $49(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $133($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $106 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [96])
	*([0] + [4]) = $10
	*(($9 = $10) + [80]) = $2
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [816])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [864])
	*((($9 + [48]) + [24])) = *(($1 + [24]))
	*($9 + [64]) = *($1 + [16])
	*($9 + [48]) = *($1 + [64])
	*($9 + [56]) = *($1 + [72])
	*($1 + [64]) = (int_64)1
	$4 = *($1)
	*($9 + [40]) = $4
	$3 = *($3)
	$5 = ($1 + [76])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	CALL $76($5, *($3), *($3 + [4]))
	$8 = ($1 + [88])
	CALL $76($8, *($3 + [12]), *(($3 + [16])))
	goto $label$1 
	
.LABEL $label$2
	$8 = ($1 + [88])
	
.LABEL $label$1
	*(($6 = ($1 + [100]))) = *($3 + [24])
	$7 = ($1 + [104])
	CALL $135($7, ($3 + [28]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [928])
	*($9 + [88]) = [68]
	*($9 + [24]) = ($9 + [88])
	*($9 + [4]) = $8
	*($9) = $5
	*($9 + [8]) = $6
	*($9 + [12]) = ($1 + [101])
	*($9 + [16]) = $7
	CALL $72($9, ($9 + [24]))
	$5 = *($9 + [88])
	if ( ($5 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($5)
	$2 = *($9 + [80])
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9 + [28]) = $3
	*($9 + [24]) = $3
	*($9 + [32]) = ($3 + $5)
	CALL $73(($9 + [24]), $1)
	CALL db_update_i64(*(($1 + [120])), $2, $3, $5)
	if ( ($5 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	$3 = ($0 + [36])
	$2 = *($9 + [40])
	if ( (uint_64)($2 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*($9 + [4]) = $1
	*($9) = $0
	*($9 + [12]) = $1
	*($9 + [8]) = ($9 + [48])
	*($9 + [16]) = ($9 + [40])
	*($9 + [20]) = ($9 + [80])
	*($9 + [88]) = $9
	CALL $109(($9 + [88]), $3, ($3 + [1]), ($3 + [2]))
	*([0] + [4]) = ($9 + [96])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	$4 = *($0)
	$5 = *($4)
	*($7 + [16]) = *(*($4 + [4]) + [64])
	if ( (CALL memcmp(*($4 + [8]), ($7 + [16]), [8]) == 0) ){ goto $label$1 }
	$6 = *(*($4 + [12]) + [124])
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$2 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7035924439720001536, $7, *(*($4 + [16])))
	*(*(($4 + [12])) + [124]) = $6
	
.LABEL $label$2
	CALL db_idx64_update($6, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$1
	$4 = *($0)
	$5 = *($4)
	*($7 + [16]) = *(*($4 + [4]) + [72])
	if ( (CALL memcmp((*($4 + [8]) + [8]), ($7 + [16]), [8]) == 0) ){ goto $label$3 }
	$6 = *((*($4 + [12]) + [128]))
	if ( ((int_32)$6 > (int_32)[-1]) ){ goto $label$4 }
	$6 = CALL db_idx64_find_primary(*($5), *($5 + [8]), (int_64)7035924439720001537, $7, *(*($4 + [16])))
	*((*(($4 + [12])) + [128])) = $6
	
.LABEL $label$4
	CALL db_idx64_update($6, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$3
	$4 = *($0)
	$6 = *($4)
	$0 = *($4 + [4])
	*($7 + [24]) = *(($0 + [24]))
	*($7 + [16]) = *($0 + [16])
	if ( (CALL memcmp((*($4 + [8]) + [16]), ($7 + [16]), [16]) == 0) ){ goto $label$5 }
	$0 = *((*($4 + [12]) + [132]))
	if ( ((int_32)$0 > (int_32)[-1]) ){ goto $label$6 }
	$0 = CALL db_idx128_find_primary(*($6), *($6 + [8]), (int_64)7035924439720001538, $7, *(*($4 + [16])))
	*((*(($4 + [12])) + [132])) = $0
	
.LABEL $label$6
	CALL db_idx128_update($0, *(*($4 + [20])), ($7 + [16]))
	
.LABEL $label$5
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_32 $33
	int_32 $34
	int_32 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	int_32 $40
	int_32 $41
	int_32 $42
	int_32 $43
	int_32 $44
	int_32 $45
	int_32 $46
	int_32 $47
	int_32 $48
	int_32 $49
	int_32 $50
	int_32 $51
	int_32 $52
	int_32 $53
	int_32 $54
	int_32 $55
	int_32 $56
	int_32 $57
	int_32 $58
	int_32 $59
	int_32 $60
	int_32 $61
	int_32 $62
	int_32 $63
	int_32 $64
	int_32 $65
	int_32 $66
	int_32 $67
	int_32 $68
	int_32 $69
	int_32 $70
	int_32 $71
	int_64 $72
	int_32 $73
	int_32 $74
	$73 = (*([0] + [4]) - [288])
	*([0] + [4]) = $73
	$74 = *($0 + [4])
	*($1) = *(*($74))
	$3 = *($0)
	$2 = CALL memcpy(($1 + [8]), *($74 + [4]), [66])
	*($1 + [80]) = *(*($74 + [8]))
	*(($74 = $73) + [16]) = [8]
	*($74) = ($74 + [16])
	$5 = ($1 + [9])
	*($74 + [28]) = $5
	*($74 + [24]) = $2
	$6 = ($1 + [10])
	*($74 + [32]) = $6
	$7 = ($1 + [11])
	*($74 + [36]) = $7
	$8 = ($1 + [12])
	*($74 + [40]) = $8
	$9 = ($1 + [13])
	*($74 + [44]) = $9
	$10 = ($1 + [14])
	*($74 + [48]) = $10
	$11 = ($1 + [15])
	*($74 + [52]) = $11
	$12 = ($1 + [16])
	*($74 + [56]) = $12
	$13 = ($1 + [17])
	*($74 + [60]) = $13
	$14 = ($1 + [18])
	*($74 + [64]) = $14
	$15 = ($1 + [19])
	*($74 + [68]) = $15
	$16 = ($1 + [20])
	*($74 + [72]) = $16
	$17 = ($1 + [21])
	*($74 + [76]) = $17
	$18 = ($1 + [22])
	*($74 + [80]) = $18
	$19 = ($1 + [23])
	*($74 + [84]) = $19
	$20 = ($1 + [24])
	*($74 + [88]) = $20
	$21 = ($1 + [25])
	*($74 + [92]) = $21
	$22 = ($1 + [26])
	*($74 + [96]) = $22
	$23 = ($1 + [27])
	*($74 + [100]) = $23
	$24 = ($1 + [28])
	*($74 + [104]) = $24
	$25 = ($1 + [29])
	*($74 + [108]) = $25
	$26 = ($1 + [30])
	*($74 + [112]) = $26
	$27 = ($1 + [31])
	*($74 + [116]) = $27
	$28 = ($1 + [32])
	*($74 + [120]) = $28
	$29 = ($1 + [33])
	*($74 + [124]) = $29
	$30 = ($1 + [34])
	*($74 + [128]) = $30
	$31 = ($1 + [35])
	*($74 + [132]) = $31
	$32 = ($1 + [36])
	*($74 + [136]) = $32
	$33 = ($1 + [37])
	*($74 + [140]) = $33
	$34 = ($1 + [38])
	*($74 + [144]) = $34
	$35 = ($1 + [39])
	*($74 + [148]) = $35
	$36 = ($1 + [40])
	*($74 + [152]) = $36
	$37 = ($1 + [41])
	*($74 + [156]) = $37
	$38 = ($1 + [42])
	*($74 + [160]) = $38
	$39 = ($1 + [43])
	*($74 + [164]) = $39
	$40 = ($1 + [44])
	*($74 + [168]) = $40
	$41 = ($1 + [45])
	*($74 + [172]) = $41
	$42 = ($1 + [46])
	*($74 + [176]) = $42
	$43 = ($1 + [47])
	*($74 + [180]) = $43
	$44 = ($1 + [48])
	*($74 + [184]) = $44
	$45 = ($1 + [49])
	*($74 + [188]) = $45
	$46 = ($1 + [50])
	*($74 + [192]) = $46
	$47 = ($1 + [51])
	*($74 + [196]) = $47
	$48 = ($1 + [52])
	*($74 + [200]) = $48
	$49 = ($1 + [53])
	*($74 + [204]) = $49
	$50 = ($1 + [54])
	*($74 + [208]) = $50
	$51 = ($1 + [55])
	*($74 + [212]) = $51
	$52 = ($1 + [56])
	*($74 + [216]) = $52
	$53 = ($1 + [57])
	*($74 + [220]) = $53
	$54 = ($1 + [58])
	*($74 + [224]) = $54
	$55 = ($1 + [59])
	*($74 + [228]) = $55
	$56 = ($1 + [60])
	*($74 + [232]) = $56
	$57 = ($1 + [61])
	*($74 + [236]) = $57
	$58 = ($1 + [62])
	*($74 + [240]) = $58
	$59 = ($1 + [63])
	*($74 + [244]) = $59
	$60 = ($1 + [64])
	*($74 + [248]) = $60
	$61 = ($1 + [65])
	*($74 + [252]) = $61
	$62 = ($1 + [66])
	*($74 + [256]) = $62
	$63 = ($1 + [67])
	*($74 + [260]) = $63
	$64 = ($1 + [68])
	*($74 + [264]) = $64
	$65 = ($1 + [69])
	*($74 + [268]) = $65
	$66 = ($1 + [70])
	*($74 + [272]) = $66
	$67 = ($1 + [71])
	*($74 + [276]) = $67
	$68 = ($1 + [72])
	*($74 + [280]) = $68
	$69 = ($1 + [73])
	*($74 + [284]) = $69
	$4 = ($1 + [80])
	CALL $101(($74 + [24]), $74)
	$70 = *($74 + [16])
	$71 = ($70 + [8])
	if ( ($71 <= [513]) ){ goto $label$2 }
	$73 = CALL malloc($71)
	goto $label$1 
	
.LABEL $label$2
	$73 = ($73 - (($71 + [15]) & [-16]))
	*([0] + [4]) = $73
	
.LABEL $label$1
	*($74) = $73
	*($74 + [8]) = ($73 + $71)
	CALL eosio_assert(((int_32)($70 + [8]) > (int_32)[7]), [992])
	CALL memcpy($73, $1, [8])
	*($74 + [4]) = ($73 + [8])
	*($74 + [16]) = $74
	*($74 + [28]) = $5
	*($74 + [24]) = $2
	*($74 + [32]) = $6
	*($74 + [36]) = $7
	*($74 + [40]) = $8
	*($74 + [44]) = $9
	*($74 + [48]) = $10
	*($74 + [52]) = $11
	*($74 + [56]) = $12
	*($74 + [60]) = $13
	*($74 + [64]) = $14
	*($74 + [68]) = $15
	*($74 + [72]) = $16
	*($74 + [76]) = $17
	*($74 + [80]) = $18
	*($74 + [84]) = $19
	*($74 + [88]) = $20
	*($74 + [92]) = $21
	*($74 + [96]) = $22
	*($74 + [100]) = $23
	*($74 + [104]) = $24
	*($74 + [108]) = $25
	*($74 + [112]) = $26
	*($74 + [116]) = $27
	*($74 + [120]) = $28
	*($74 + [124]) = $29
	*($74 + [128]) = $30
	*($74 + [132]) = $31
	*($74 + [136]) = $32
	*($74 + [140]) = $33
	*($74 + [144]) = $34
	*($74 + [148]) = $35
	*($74 + [152]) = $36
	*($74 + [156]) = $37
	*($74 + [160]) = $38
	*($74 + [164]) = $39
	*($74 + [168]) = $40
	*($74 + [172]) = $41
	*($74 + [176]) = $42
	*($74 + [180]) = $43
	*($74 + [184]) = $44
	*($74 + [188]) = $45
	*($74 + [192]) = $46
	*($74 + [196]) = $47
	*($74 + [200]) = $48
	*($74 + [204]) = $49
	*($74 + [208]) = $50
	*($74 + [212]) = $51
	*($74 + [216]) = $52
	*($74 + [220]) = $53
	*($74 + [224]) = $54
	*($74 + [228]) = $55
	*($74 + [232]) = $56
	*($74 + [236]) = $57
	*($74 + [240]) = $58
	*($74 + [244]) = $59
	*($74 + [248]) = $60
	*($74 + [252]) = $61
	*($74 + [256]) = $62
	*($74 + [260]) = $63
	*($74 + [264]) = $64
	*($74 + [268]) = $65
	*($74 + [272]) = $66
	*($74 + [276]) = $67
	*($74 + [280]) = $68
	*($74 + [284]) = $69
	CALL $99(($74 + [24]), ($74 + [16]))
	CALL eosio_assert(((int_32)(*($74 + [8]) - *($74 + [4])) > (int_32)[7]), [992])
	CALL memcpy(*($74 + [4]), $4, [8])
	*($74 + [4]) = (*($74 + [4]) + [8])
	$72 = *($1)
	*($1 + [92]) = CALL db_store_i64(*($3 + [8]), (int_64)7035937270569123840, *(*($0 + [8])), $72, $73, $71)
	if ( ($71 <= [513]) ){ goto $label$3 }
	CALL free($73)
	
.LABEL $label$3
	if ( (uint_64)($72 <= *($3 + [16])) ){ goto $label$4 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$72 + (int_64)1) : ((uint_64)$72 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($74 + [288])
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [560])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $132([144])) + [76 align=4]) = (int_64)0
	*($6 + [84 align=4]) = (int_64)0
	*($6 + [92 align=4]) = (int_64)0
	*($6 + [104 align=4]) = (int_64)0
	*($6 + [112]) = [0]
	*($6 + [116]) = $0
	CALL $43(($8 + [32]), $6)
	*($6 + [124]) = [-1]
	*($6 + [120]) = $1
	*($6 + [128]) = [-1]
	*($6 + [132]) = [-1]
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [120])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $44(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*(($4 + [104])) & [1]) == 0) ){ goto $label$10 }
	CALL $133(*(($4 + [112])))
	
.LABEL $label$10
	$7 = *(($4 + [88]))
	if ( ($7 == 0) ){ goto $label$11 }
	*(($4 + [92])) = $7
	CALL $133($7)
	
.LABEL $label$11
	$7 = *($4 + [76])
	if ( ($7 == 0) ){ goto $label$12 }
	*(($4 + [80])) = $7
	CALL $133($7)
	
.LABEL $label$12
	CALL $133($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [560])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $132([112])) + [24]) = (int_64)0
	*($4 + [16]) = (int_64)0
	*($4 + [48]) = (int_64)0
	*($4 + [56]) = (int_64)1398362884
	CALL eosio_assert([1], [32])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [96])
	*($4 + [84]) = [0]
	*($4 + [76 align=4]) = (int_64)0
	*($4 + [88]) = $0
	CALL $41(($8 + [32]), $4)
	*($4 + [92]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [92])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $42($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((*($5 + [76]) & [1]) == 0) ){ goto $label$15 }
	CALL $133(*(($5 + [84])))
	
.LABEL $label$15
	CALL $133($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [144])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $37($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [128])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $132($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $149($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $133($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$5 = *($0 + [4])
	$6 = *($0 + [8])
	if ( ((uint_32)((int_32)($6 - $5) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$2 = *($0)
	$5 = ((int_32)($5 - $2) / (int_32)[12])
	$3 = ($5 + $1)
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$4 = [357913941]
	$6 = ((int_32)($6 - $2) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$5 }
	$4 = ($6 << [1])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$6 = CALL $132(((int_32)$4 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$4 = $5
	$6 = $1
	
.LOOP $label$6:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$6 = ($6 + [-1])
	if ( $6 ){ goto $label$6 }
	*(($0 + [4])) = ($5 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$4 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $149($0)
	
.LABEL $label$1
	$2 = ($6 + ((int_32)$4 * (int_32)[12]))
	$6 = ($6 + ((int_32)$5 * (int_32)[12]))
	$4 = $6
	$5 = $1
	
.LOOP $label$7:
	*($4) = (int_64)0
	*(($4 + [8])) = [0]
	$4 = ($4 + [12])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$7 }
	$3 = ($6 + ((int_32)$1 * (int_32)[12]))
	$4 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$9 }
	$1 = ([0] - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$10:
	*(($6 + [-12])) = *($4)
	$5 = ($4 + [8])
	*(($6 + [-4])) = *($5)
	*($4) = [0]
	*(($4 + [4])) = [0]
	*($5) = [0]
	$6 = ($6 + [-12])
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $1) != (int_32)[-12]) ){ goto $label$10 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$5 = $4
	
.LABEL $label$8
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$11 }
	$6 = ([0] - $5)
	$4 = ($4 + [-12])
	
.LOOP $label$12:
	if ( ((*($4) & [1]) == 0) ){ goto $label$13 }
	CALL $133(*(($4 + [8])))
	
.LABEL $label$13
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $6) != (int_32)[-12]) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($5 == 0) ){ goto $label$14 }
	CALL $133($5)
	
.LABEL $label$14
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [2]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [2])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[1073741824]) ){ goto $label$3 }
	$6 = [1073741823]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [2]) > (uint_32)[536870910]) ){ goto $label$6 }
	$6 = int_32($7 >> [1])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[1073741824]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $132(($6 << [2]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [2]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $149($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [2]))
	$2 = ($7 + ($4 << [2]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [4])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [2]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $133($6)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	CALL $33(*($1), (*($0) + [200]))
	$2 = *($0)
	CALL $33(*($1), ($2 + [212]))
	CALL $28(*($1), ($2 + [224]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [240]), *($0 + [4]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $3) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [248]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [256]), *($0 + [4]), [8])
	$1 = (*($0 + [4]) + [8])
	*($0 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $1) > (uint_32)[7]), [128])
	CALL memcpy(($2 + [264]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [144])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$5 = *($1 + [4])
	$7 = ((int_32)($5 - $3) / (int_32)[12])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $34($1, ($4 - $7))
	$5 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[12])
	$2 = ($3 + $4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$4 }
	$7 = (([0] - $3) - $4)
	$4 = ($5 + [-12])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $133(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-12])
	if ( ((int_32)($4 + $7) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$5 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	CALL $28($0, $4)
	$4 = ($4 + [12])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [4])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [12])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [16])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [20])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [24])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [28])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [32])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [36])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [40])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [44])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [48])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [52])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [56])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [60])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [64])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [68])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [72])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [76])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [80])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [84])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [88])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [92])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [96])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [100])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [104])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [108])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [112])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [116])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [120])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [124])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [128])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [132])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [136])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [140])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [144])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [148])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [152])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [156])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [160])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [164])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [168])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [172])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [176])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [180])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [184])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [188])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [192])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [196])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [200])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [204])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [208])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [212])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [216])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [220])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [224])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [228])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [232])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [236])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [240])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [244])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [248])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [252])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$3 = *($0 + [256])
	$2 = *($1)
	CALL eosio_assert(((int_32)*($2 + [8]) != (int_32)*($2 + [4])), [128])
	CALL memcpy($3, *($2 + [4]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0 + [260])
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [128])
	CALL memcpy($2, *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [144])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [2])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $35($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [2]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	$2 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($2) - $7) > (uint_32)[3]), [128])
	CALL memcpy($4, *($5), [4])
	$7 = (*($5) + [4])
	*($5) = $7
	$4 = ($4 + [4])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}