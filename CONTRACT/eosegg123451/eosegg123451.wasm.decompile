(data (i32.const 8192) "eosio.token\00")
(data (i32.const 8204) "invalid token publisher\00malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 8314) "Invalid token transfer\00")
(data (i32.const 8337) "Only core token allowed\00")
(data (i32.const 8361) "must bet a positive amount\00")
(data (i32.const 8388) "transfer\00")
(data (i32.const 8397) "quantity is not allowed\00")
(data (i32.const 8421) "maxpoolprize\00")
(data (i32.const 8434) "max pool prize not set!\00")
(data (i32.const 8458) "=======================max pool prize\00")
(data (i32.const 8496) "-----------egg_id: \00")
(data (i32.const 8516) "-------------timestamp: \00")
(data (i32.const 8541) "----------remain to buy count: \00")
(data (i32.const 8573) "==================is full\00")
(data (i32.const 8599) "lottery id reach the egg id\00")
(data (i32.const 8627) "lottery_id==============: \00")
(data (i32.const 8654) "no egg to lottery\00")
(data (i32.const 8672) "cur pool prize not equal max pool prize\00")
(data (i32.const 8712) "next lottery is not react specific time\00")
(data (i32.const 8752) "level1 not set\00")
(data (i32.const 8767) "level2 not set\00")
(data (i32.const 8782) "level3 not set\00")
(data (i32.const 8797) "level4 not set\00")
(data (i32.const 8812) "key not exist\00")
(data (i32.const 8826) "val: \00")
(data (i32.const 8832) "contract must extend the kh::contract\00")
(data (i32.const 8870) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8934) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 8993) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 9042) "invalid symbol name\00")
(data (i32.const 9062) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 9113) "error reading iterator\00")
(data (i32.const 9136) "get\00")
(data (i32.const 9140) "read\00")
(data (i32.const 9145) "counter not exist\00")
(data (i32.const 9163) "cannot pass end iterator to modify\00")
(data (i32.const 9198) "object passed to modify is not in multi_index\00")
(data (i32.const 9244) "cannot modify objects in table of another contract\00")
(data (i32.const 9295) "updater cannot change primary key when modifying an object\00")
(data (i32.const 9354) "attempt to subtract asset with different symbol\00")
(data (i32.const 9402) "subtraction underflow\00")
(data (i32.const 9424) "subtraction overflow\00")
(data (i32.const 9445) "write\00")
(data (i32.const 9451) "===eggs: \00")
(data (i32.const 9461) "divide by zero\00")
(data (i32.const 9476) "cannot create objects in table of another contract\00")
(data (i32.const 9527) "signed division overflow\00")
(data (i32.const 9552) "multiplication overflow\00")
(data (i32.const 9576) "multiplication underflow\00")
(data (i32.const 9601) "ppppppppp======: \00")
(data (i32.const 9619) ".\00")
(data (i32.const 9621) " \00")
(data (i32.const 9623) ",\00")
(data (i32.const 9625) "attempt to add asset with different symbol\00")
(data (i32.const 9668) "addition underflow\00")
(data (i32.const 9687) "addition overflow\00")
(data (i32.const 9708) "\00\00\00\00\00\00\00\00\06\00\00\00\07\00\00\00")
(data (i32.const 9724) "lotteryv2\00")
(data (i32.const 9734) "true\00")
(data (i32.const 9739) "game paused\00")
(data (i32.const 9751) "buycount\00")
(data (i32.const 9760) "transcal is undefined.\00")
(data (i32.const 9783) "protect_transfer\00")
(data (i32.const 9800) "protect transfer succeed\00")
(data (i32.const 9825) "ptquantity\00")
(data (i32.const 9836) "ptreceiver\00")
(data (i32.const 9847) "unable to find key\00")
(data (i32.const 9866) "false\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "require_auth" (func $fimport$1 (param i64)))
(import "env" "memcpy" (func $fimport$2 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$3 (param i32)))
(import "env" "printui" (func $fimport$4 (param i64)))
(import "env" "current_time" (func $fimport$5 (result i64)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "printi" (func $fimport$7 (param i64)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "sha256" (func $fimport$9 (param i32 i32 i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "prints_l" (func $fimport$11 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$12 (result i32)))
(import "env" "read_action_data" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "db_get_i64" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$15 (result i64)))
(import "env" "db_update_i64" (func $fimport$16 (param i32 i64 i32 i32)))
(import "env" "memmove" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$18 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$19))
(import "env" "memset" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$23 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$24 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$25 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$26 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$27 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$28 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$29 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$30 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$31 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$32 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$35 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$36 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$37 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$38 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$39 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $40))
(export "_Znwj" (func $95))
(export "_ZdlPv" (func $97))
(export "_Znaj" (func $96))
(export "_ZdaPv" (func $98))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $42 $37 $39 $1 $22 $83 $84)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18280))
(global $global$2 i32 (i32.const 18280))


void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $99 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [4])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$4 }
	$3 = [268435455]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$3 = int_32($2 >> [3])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL _Znwj(($3 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$5 = ($0 + [4])
	
.LOOP $label$8:
	*($3 + [8]) = (int_64)1398362884
	*($3) = (int_64)0
	CALL eosio_assert([1], [8993])
	$10 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$12 }
	$10 = $11
	$2 = [1]
	$4 = $3
	$3 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$12
	$10 = $11
	
.LOOP $label$13:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$10 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$4 = ($3 + [1])
	$3 = $4
	if ( $2 ){ goto $label$13 }
	$2 = [1]
	$3 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$2 = [0]
	
.LABEL $label$9
	CALL eosio_assert($2, [9042])
	$3 = (*($5) + [16])
	*($5) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $106($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$8 = ($7 + ($3 << [4]))
	$9 = ($7 + ($5 << [4]))
	$5 = $9
	
.LOOP $label$14:
	*($5 + [8]) = (int_64)1398362884
	*($5) = (int_64)0
	CALL eosio_assert([1], [8993])
	$10 = (uint_64)*($5 + [8]) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$18:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $10) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$11 = (uint_64)$10 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$10 & (int_64)65280) == (int_64)0) ){ goto $label$20 }
	$10 = $11
	$12 = [1]
	$2 = $3
	$3 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$18 }
	goto $label$19 
	
.LABEL $label$20
	$10 = $11
	
.LOOP $label$21:
	if ( ((int_64)((int_64)$10 & (int_64)65280) != (int_64)0) ){ goto $label$17 }
	$10 = (uint_64)$10 >> (uint_64)(int_64)8)
	$2 = ((int_32)$3 < (int_32)[6])
	$4 = ($3 + [1])
	$3 = $4
	if ( $2 ){ goto $label$21 }
	$12 = [1]
	$3 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$18 }
	
.LABEL $label$19
	CALL eosio_assert($12, [9042])
	$5 = ($5 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$17
	CALL eosio_assert([0], [9042])
	$5 = ($5 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	goto $label$15 
	
.LABEL $label$16
	CALL eosio_assert([0], [9042])
	$5 = ($5 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	
.LABEL $label$15
	$5 = ($7 + ($6 << [4]))
	$3 = *($0)
	$1 = ($0 + [4])
	$2 = (*($1) - $3)
	$4 = ($9 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($4, $3, $2)
	$3 = *($0)
	
.LABEL $label$22
	*($0) = $4
	*($1) = $5
	*(($0 + [8])) = $8
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $111($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9872])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $111($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $114($0)
	
.LABEL $label$1
}

int_32 .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $91($0, ($1 + [44]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9140])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9140])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9140])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9140])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9140])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [9140])
	CALL memcpy(($1 + [40]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9136])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$3 = *($1)
	$6 = *($1 + [4])
	$2 = ((int_32)($6 - $3) / (int_32)[40])
	if ( ((uint_32)$2 >= (uint_32)$7) ){ goto $label$4 }
	CALL $92($1, ($7 - $2))
	$6 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$2 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($3 + ((int_32)$7 * (int_32)[40]))
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($6 + [-40])
	$2 = *(($6 + [-16]))
	if ( ($2 == 0) ){ goto $label$8 }
	*(($6 + [-12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$8
	$6 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$6 = $3
	
.LABEL $label$5
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	
.LOOP $label$9:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - *($7)) > (uint_32)[7]), [9140])
	CALL memcpy($2, *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($3) - $5) > (uint_32)[7]), [9140])
	CALL memcpy(($2 + [8]), *($7), [8])
	$5 = (*($7) + [8])
	*($7) = $5
	CALL eosio_assert(((uint_32)(*($3) - $5) > (uint_32)[7]), [9140])
	CALL memcpy(($2 + [16]), *($7), [8])
	*($7) = (*($7) + [8])
	CALL $93($0, ($2 + [24]))
	$2 = ($2 + [40])
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $92 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($3 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$7 = [107374182]
	$2 = ((int_32)($2 - $4) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$6 }
	$7 = ($2 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL _Znwj(((int_32)$7 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$11 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = (int_64)0
	*(($10 = ($3 + [32]))) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($7 = ($3 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [8993])
	$12 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$9:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$12 = $13
	$5 = [1]
	$2 = $7
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$12 = $13
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$8 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$2 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $2 ){ goto $label$11 }
	$5 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$9 }
	
.LABEL $label$8
	CALL eosio_assert($5, [9042])
	*($10) = [0]
	*($3 + [24 align=4]) = (int_64)0
	$3 = (*($11) + [40])
	*($11) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	$9 = ($8 + ((int_32)$7 * (int_32)[40]))
	$10 = ($8 + ((int_32)$5 * (int_32)[40]))
	$3 = $10
	
.LOOP $label$12:
	*($3) = (int_64)0
	*(($11 = ($3 + [32]))) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	*(($7 = ($3 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [8993])
	$12 = (uint_64)*($7) >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$14:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$12 = $13
	$5 = [1]
	$2 = $7
	$7 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$12 = $13
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$2 = ((int_32)$7 < (int_32)[6])
	$4 = ($7 + [1])
	$7 = $4
	if ( $2 ){ goto $label$16 }
	$5 = [1]
	$7 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$14 }
	
.LABEL $label$13
	CALL eosio_assert($5, [9042])
	*($11) = [0]
	*($3 + [24 align=4]) = (int_64)0
	$3 = ($3 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$12 }
	$8 = ($8 + ((int_32)$6 * (int_32)[40]))
	$7 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$18 }
	$11 = ($7 - $1)
	$4 = [0]
	
.LOOP $label$19:
	$2 = ($1 + $4)
	*((($7 = ($10 + $4)) + [-24])) = *(($2 + [-24]))
	*(($7 + [-32])) = *(($2 + [-32]))
	*(($7 + [-40])) = *(($2 + [-40]))
	*(($5 = ($7 + [-16]))) = (int_64)0
	*(($7 = ($7 + [-8]))) = [0]
	$3 = ($2 + [-16])
	*($5) = *($3)
	$2 = ($2 + [-8])
	*($7) = *($2)
	*($2) = [0]
	*($3) = (int_64)0
	$4 = ($4 + [-40])
	if ( ((int_32)$11 != (int_32)$4) ){ goto $label$19 }
	$10 = ($10 + $4)
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$17 
	
.LABEL $label$18
	$5 = $7
	
.LABEL $label$17
	*($0) = $10
	*(($0 + [4])) = $8
	*(($0 + [8])) = $9
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$20 }
	
.LOOP $label$21:
	$2 = ($7 + [-40])
	$4 = *(($7 + [-16]))
	if ( ($4 == 0) ){ goto $label$22 }
	*(($7 + [-12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$22
	$7 = $2
	if ( ((int_32)$5 != (int_32)$2) ){ goto $label$21 }
	
.LABEL $label$20
	if ( ($5 == 0) ){ goto $label$1 }
	CALL _ZdlPv($5)
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $93 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9136])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$2 = *($1)
	$5 = *($1 + [4])
	$3 = int_32(($5 - $2) >> [4])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $94($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$5 = ($2 + ($7 << [4]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	$7 = ($0 + [4])
	$3 = *($7)
	
.LOOP $label$6:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9140])
	CALL memcpy($2, *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [9140])
	CALL memcpy(($2 + [8]), *($7), [8])
	$3 = (*($7) + [8])
	*($7) = $3
	$2 = ($2 + [16])
	if ( ((int_32)$2 != (int_32)$5) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $38 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	CALL require_auth(*($0))
	$4 = ($0 + [16])
	$6 = *(($0 + [44]))
	$5 = *(($0 + [40]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$4), [9062])
	if ( $8 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [24])), (int_64)3923610676896333824, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $12($4, $7)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$4), [9062])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [16]) = $2
	CALL eosio_assert([1], [9163])
	CALL $80($4, $8, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = ($3 + [24])
	CALL $81(($3 + [8]), $4, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $49 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [9476])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $86($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $57(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $48 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	*($0) = [9716]
	$1 = *(($0 + [264]))
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = ($0 + [268])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$5 }
	CALL _ZdlPv($4)
	
.LABEL $label$5
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$4 }
	$3 = *(($0 + [264]))
	goto $label$2 
	
.LABEL $label$3
	$3 = $1
	
.LABEL $label$2
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$5 = *(($0 + [208]))
	if ( ($5 == 0) ){ goto $label$6 }
	$6 = ($0 + [212])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$8 = *($7)
	*($7) = [0]
	if ( ($8 == 0) ){ goto $label$10 }
	$2 = *($8 + [44])
	if ( ($2 == 0) ){ goto $label$11 }
	$9 = ($8 + [48])
	$3 = *($9)
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$4 = ($3 + [-40])
	$1 = *(($3 + [-16]))
	if ( ($1 == 0) ){ goto $label$15 }
	*(($3 + [-12])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$3 = $4
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$14 }
	$3 = *(($8 + [44]))
	goto $label$12 
	
.LABEL $label$13
	$3 = $2
	
.LABEL $label$12
	*($9) = $2
	CALL _ZdlPv($3)
	
.LABEL $label$11
	CALL _ZdlPv($8)
	
.LABEL $label$10
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$9 }
	$3 = *(($0 + [208]))
	goto $label$7 
	
.LABEL $label$8
	$3 = $5
	
.LABEL $label$7
	*($6) = $5
	CALL _ZdlPv($3)
	
.LABEL $label$6
	$1 = *(($0 + [144]))
	if ( ($1 == 0) ){ goto $label$16 }
	$2 = ($0 + [148])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$18 }
	
.LOOP $label$19:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$20 }
	CALL _ZdlPv($4)
	
.LABEL $label$20
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$19 }
	$3 = *(($0 + [144]))
	goto $label$17 
	
.LABEL $label$18
	$3 = $1
	
.LABEL $label$17
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$16
	$1 = *(($0 + [80]))
	if ( ($1 == 0) ){ goto $label$21 }
	$2 = ($0 + [84])
	$3 = *($2)
	if ( ((int_32)$3 == (int_32)$1) ){ goto $label$23 }
	
.LOOP $label$24:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$25 }
	CALL _ZdlPv($4)
	
.LABEL $label$25
	if ( ((int_32)$1 != (int_32)$3) ){ goto $label$24 }
	$3 = *(($0 + [80]))
	goto $label$22 
	
.LABEL $label$23
	$3 = $1
	
.LABEL $label$22
	*($2) = $1
	CALL _ZdlPv($3)
	
.LABEL $label$21
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $111($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [8993])
	$6 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [9042])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $50(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $114($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $51(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $42 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$5 = ($global$0 - [160])
	$global$0 = $5
	*(($5 + [152])) = [0]
	*($5 + [144]) = (int_64)0
	$6 = CALL $108([9783])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*($5 + [144]) = ($6 << [1])
	$7 = (($5 + [144]) | [1])
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$8 = (($6 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($5 + [144]) = ($8 | [1])
	*($5 + [152]) = $7
	*($5 + [148]) = $6
	
.LABEL $label$7
	CALL memcpy($7, [9783], $6)
	
.LABEL $label$6
	$9 = [0]
	*(($7 + $6)) = [0]
	$12 = ($6 & [1])
	$6 = *($5 + [144])
	$8 = ($6 & [1])
	$6 = *($4)
	$10 = uint_32($6 >> [1])
	$11 = ( *($4 + [4]) ? $10 : $8 )
	if ( ((int_32)$11 != (int_32)( *($5 + [148]) ? uint_32($6 >> [1]) : $12 )) ){ goto $label$11 }
	$6 = ( *($5 + [152]) ? (($5 + [144]) | [1]) : $12 )
	$7 = ($4 + [1])
	if ( $8 ){ goto $label$13 }
	if ( ($11 == 0) ){ goto $label$12 }
	$9 = [0]
	$8 = ([0] - $10)
	
.LOOP $label$14:
	if ( ((int_32)*($7) != (int_32)*($6)) ){ goto $label$11 }
	$6 = ($6 + [1])
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	if ( $8 ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ($11 == 0) ){ goto $label$12 }
	$9 = (CALL $109(( *($4 + [8]) ? $7 : $8 ), $6, $11) == 0)
	if ( (*($5 + [144]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$9 = [1]
	
.LABEL $label$11
	if ( ($12 == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL _ZdlPv(*($5 + [152]))
	
.LABEL $label$9
	if ( ($9 == 0) ){ goto $label$15 }
	CALL prints([9800])
	$global$0 = ($5 + [160])
	return (unreachable)
	
.LABEL $label$15
	$6 = *($4)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$16 }
	$8 = ($4 + [1])
	if ( (uint_32($6 >> [1]) <= [5]) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$16
	$8 = *($4 + [8])
	if ( ((uint_32)*(($4 + [4])) >= (uint_32)[5]) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	CALL $99(($5 + [144]))
	
.LABEL $label$4
	$6 = *($8)
	if ( ((int_32)$6 == (int_32)[64]) ){ goto $label$17 }
	if ( ((int_32)$6 != (int_32)[35]) ){ goto $label$3 }
	
.LABEL $label$17
	if ( $7 ){ goto $label$19 }
	if ( ((int_32)*(($4 + [1]) + [1]) != (int_32)[91]) ){ goto $label$3 }
	goto $label$18 
	
.LABEL $label$19
	if ( ((int_32)*(*($4 + [8]) + [1]) != (int_32)[91]) ){ goto $label$3 }
	
.LABEL $label$18
	if ( $7 ){ goto $label$20 }
	$7 = [93]
	if ( ((int_32)*(($4 + [1]) + [2]) == (int_32)[93]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$20
	$7 = [93]
	if ( ((int_32)*(*($4 + [8]) + [2]) != (int_32)[93]) ){ goto $label$2 }
	
.LABEL $label$3
	*(($7 = (($5 + [48]) + [8]))) = *(($3 + [8]))
	*($5 + [48]) = *($3)
	$6 = CALL $100(($5 + [32]), $4)
	$4 = *(*($0))
	*(($5 + [8])) = *($7)
	*($5) = *($5 + [48])
	CALL void $0((int_32 $1), (int_64 $2), (int_64 $5), (int_32 $6), (int_32 $4))
	if ( ((*($6) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($6 + [8]))
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL $105($4, [58], [0])
	$9 = CALL $105($4, $7, [0])
	*($5 + [152]) = [0]
	*($5 + [144]) = (int_64)0
	*($5 + [136]) = [0]
	*($5 + [128]) = (int_64)0
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$26 }
	CALL $101(($5 + [112]), $4, [2], ($6 + [-2]), $4)
	if ( (*($5 + [144]) & [1]) ){ goto $label$25 }
	*($5 + [144]) = [0]
	goto $label$24 
	
.LABEL $label$26
	CALL $101(($5 + [112]), $4, [2], ($9 + [-2]), $4)
	if ( (*($5 + [144]) & [1]) ){ goto $label$23 }
	*($5 + [144]) = [0]
	goto $label$22 
	
.LABEL $label$25
	*(*(($5 + [152]))) = [0]
	*($5 + [148]) = [0]
	
.LABEL $label$24
	CALL $104(($5 + [144]), [0])
	*((($5 + [144]) + [8])) = *((($5 + [112]) + [8]))
	*($5 + [144]) = *($5 + [112])
	$7 = ($6 + [1])
	$6 = CALL $105($4, [44], $7)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$27 }
	if ( ((uint_32)$6 >= (uint_32)$9) ){ goto $label$27 }
	$12 = (($5 + [128]) + [8])
	
.LOOP $label$28:
	$8 = CALL $101(($5 + [112]), $4, $7, ($6 - $7), $4)
	$7 = *($5 + [132])
	if ( ((uint_32)$7 >= (uint_32)*($12)) ){ goto $label$30 }
	*($7) = *($5 + [112])
	$7 = (($5 + [112]) + [8])
	*(($7 + [8])) = *($7)
	*($7) = [0]
	*($5 + [112]) = (int_64)0
	*($5 + [132]) = (*($5 + [132]) + [12])
	$7 = ($6 + [1])
	$6 = CALL $105($4, [44], $7)
	if ( ((int_32)$6 != (int_32)[-1]) ){ goto $label$29 }
	goto $label$27 
	
.LABEL $label$30
	CALL $24(($5 + [128]), $8)
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*((($5 + [112]) + [8])))
	
.LABEL $label$31
	$7 = ($6 + [1])
	$6 = CALL $105($4, [44], $7)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$27 }
	
.LABEL $label$29
	if ( ($6 <= $9) ){ goto $label$28 }
	
.LABEL $label$27
	$6 = CALL $101(($5 + [112]), $4, $7, ($9 - $7), $4)
	$7 = *($5 + [132])
	if ( ((uint_32)$7 >= (uint_32)*((($5 + [128]) + [8]))) ){ goto $label$32 }
	*($7) = *($5 + [112])
	*(($7 + [8])) = *((($5 + [112]) + [8]))
	*($6 + [8]) = [0]
	*($6) = (int_64)0
	*($5 + [132]) = (*($5 + [132]) + [12])
	goto $label$21 
	
.LABEL $label$32
	CALL $24(($5 + [128]), $6)
	if ( ((*($5 + [112]) & [1]) == 0) ){ goto $label$21 }
	CALL _ZdlPv(*($6 + [8]))
	goto $label$21 
	
.LABEL $label$23
	*(*(($5 + [152]))) = [0]
	*($5 + [148]) = [0]
	
.LABEL $label$22
	CALL $104(($5 + [144]), [0])
	*((($5 + [144]) + [8])) = *((($5 + [112]) + [8]))
	*($5 + [144]) = *($5 + [112])
	
.LABEL $label$21
	*(($9 = (($5 + [96]) + [8]))) = *(($3 + [8]))
	*($5 + [96]) = *($3)
	$8 = CALL $100(($5 + [80]), ($5 + [144]))
	*($5 + [72]) = [0]
	*($5 + [64]) = (int_64)0
	$6 = (*($5 + [132]) - *($5 + [128]))
	$4 = ((int_32)$6 / (int_32)[12])
	if ( ($6 == 0) ){ goto $label$34 }
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$33 }
	$7 = CALL _Znwj($6)
	*(($5 + [72])) = ($7 + ((int_32)$4 * (int_32)[12]))
	*($5 + [64]) = $7
	*($5 + [68]) = $7
	$4 = *($5 + [132])
	$6 = *($5 + [128])
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$34 }
	
.LOOP $label$35:
	CALL $100($7, $6)
	$7 = (*($5 + [68]) + [12])
	*($5 + [68]) = $7
	$6 = ($6 + [12])
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$35 }
	
.LABEL $label$34
	$6 = *(*($0) + [4])
	*((($5 + [16]) + [8])) = *($9)
	*($5 + [16]) = *($5 + [96])
	CALL void $0((int_32 $1), (int_64 $2), (int_64 ($5 + [16])), (int_32 $8), (int_32 ($5 + [64])), (int_32 $6))
	$4 = *($5 + [64])
	if ( ($4 == 0) ){ goto $label$36 }
	$7 = *($5 + [68])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$38 }
	
.LOOP $label$39:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$40
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$39 }
	$6 = *($5 + [64])
	goto $label$37 
	
.LABEL $label$38
	$6 = $4
	
.LABEL $label$37
	*($5 + [68]) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$36
	if ( ((*($8) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($8 + [8]))
	
.LABEL $label$41
	$4 = *($5 + [128])
	if ( ($4 == 0) ){ goto $label$42 }
	$7 = *($5 + [132])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$44 }
	
.LOOP $label$45:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$46
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$45 }
	$6 = *($5 + [128])
	goto $label$43 
	
.LABEL $label$44
	$6 = $4
	
.LABEL $label$43
	*($5 + [132]) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$42
	if ( ((*($5 + [144]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($5 + [152])))
	goto $label$1 
	
.LABEL $label$33
	CALL $106(($5 + [64]))
	
.LABEL $label$1
	CALL $52($0, $2)
	$global$0 = ($5 + [160])
	(unreachable)
}

int_32 .FUNC $41 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = $1
	*($0 + [24]) = $2
	*($0 + [32]) = [0]
	*($0) = [9716]
	$4 = ($0 + [40])
	$2 = (int_64)5
	
.LOOP $label$1:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$1 }
	*(($0 + [48])) = $1
	*(($0 + [40])) = $1
	*(($5 = ($0 + [56]))) = $1
	*(($0 + [64])) = $1
	*(($0 + [72])) = (int_64)-1
	*(($0 + [80])) = (int_64)0
	*(($0 + [88])) = [0]
	*(($0 + [96])) = (int_64)5988011793123901440
	$6 = CALL db_find_i64($1, $1, (int_64)4986958867385548800, (int_64)5988011793123901440)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*(CALL $13($5, $6) + [16]) == (int_32)$5), [9062])
	goto $label$2 
	
.LABEL $label$3
	$2 = *($4)
	*($3 + [56]) = $4
	CALL $49(($3 + [40]), $5, $2, ($3 + [56]))
	
.LABEL $label$2
	$6 = ($0 + [104])
	$7 = *(($0 + [16]))
	$2 = (int_64)0
	$8 = (int_64)59
	$5 = [9724]
	$9 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$2 > (uint_64)(int_64)8) ){ goto $label$9 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$4 = ($4 + [-91])
	goto $label$7 
	
.LABEL $label$9
	$1 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$1 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$1 = ((int_64)((int_64)$1 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$5
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$1 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$4 }
	*(($0 + [112])) = $7
	*(($0 + [104])) = $7
	*(($5 = ($0 + [120]))) = $7
	*(($0 + [128])) = $7
	*(($0 + [136])) = (int_64)-1
	*(($0 + [144])) = (int_64)0
	*(($0 + [152])) = [0]
	*(($0 + [160])) = $9
	$4 = CALL db_find_i64($7, $7, (int_64)4986958867385548800, $9)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	CALL eosio_assert(((int_32)*(CALL $13($5, $4) + [16]) == (int_32)$5), [9062])
	goto $label$10 
	
.LABEL $label$11
	$2 = *($6)
	*($3 + [56]) = $6
	CALL $49(($3 + [40]), $5, $2, ($3 + [56]))
	
.LABEL $label$10
	*(($0 + [200])) = (int_64)-1
	$2 = (int_64)0
	*(($0 + [208])) = (int_64)0
	*(($0 + [216])) = [0]
	*(($0 + [256])) = (int_64)-1
	*(($0 + [264])) = (int_64)0
	*(($0 + [272])) = [0]
	$1 = *(($0 + [16]))
	*($0 + [168]) = $1
	*(($0 + [176])) = $1
	*(($0 + [184])) = $1
	*(($0 + [192])) = $1
	*($0 + [224]) = $1
	*(($0 + [232])) = $1
	*(($0 + [240])) = $1
	*(($0 + [248])) = $1
	$10 = ($0 + [168])
	$1 = (int_64)59
	$5 = [8421]
	$9 = (int_64)0
	
.LOOP $label$12:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$13 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$4 = ($4 + [-91])
	goto $label$14 
	
.LABEL $label$15
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$13
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$1 = ((int_64)$1 + (int_64)4294967291)
	if ( ((int_64)$1 != (int_64)55834574842) ){ goto $label$12 }
	if ( (CALL $2($0, $9) == 0) ){ goto $label$18 }
	$2 = (int_64)0
	$1 = (int_64)59
	$5 = [8421]
	$9 = (int_64)0
	
.LOOP $label$19:
	$8 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$20 }
	$4 = *($5)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$4 = ($4 + [-91])
	goto $label$21 
	
.LABEL $label$22
	$4 = ( ($4 + [-48]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $4) & (int_64)31) << (int_64)((int_64)$1 & (int_64)4294967295))
	
.LABEL $label$20
	$5 = ($5 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$1 = ((int_64)$1 + (int_64)4294967291)
	if ( ((int_64)$1 != (int_64)55834574842) ){ goto $label$19 }
	$4 = ($0 + [32])
	$5 = *($4)
	if ( $5 ){ goto $label$23 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($4) = $5
	$2 = *(($0 + [16]))
	*($5) = $2
	*($5 + [8]) = $2
	*($5 + [16]) = $2
	*($5 + [24]) = $2
	
.LABEL $label$23
	CALL $3(($3 + [40]), $5, $9)
	$1 = (int_64)0
	$5 = ($5 & [1])
	$5 = *($3 + [40])
	$4 = ( *($3 + [44]) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$24 }
	$5 = ( *($3 + [48]) ? (($3 + [40]) | [1]) : $5 )
	$4 = ($5 + $4)
	$1 = (int_64)0
	
.LOOP $label$25:
	$1 = ((int_64)((int_64)((int_64)$1 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $4) ){ goto $label$25 }
	
.LABEL $label$24
	CALL eosio_assert((uint_64)(((int_64)$1 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8993])
	$2 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$28:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$27 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$29 }
	$2 = $8
	$4 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$29
	$2 = $8
	
.LOOP $label$30:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$27 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $4 ){ goto $label$30 }
	$4 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$4 = [0]
	
.LABEL $label$26
	CALL eosio_assert($4, [9042])
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($3 + [48])))
	
.LABEL $label$31
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)1397703940
	*($3 + [40]) = (int_64)0
	CALL eosio_assert([1], [8993])
	$2 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$2 = $8
	$4 = [1]
	$6 = $5
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$2 = $8
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$6 = ($5 + [1])
	$5 = $6
	if ( $4 ){ goto $label$36 }
	$4 = [1]
	$5 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$4 = [0]
	
.LABEL $label$32
	CALL eosio_assert($4, [9042])
	$11 = ($0 + [184])
	$4 = *(($0 + [212]))
	$6 = *(($0 + [208]))
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$17 }
	
.LOOP $label$38:
	$5 = ($4 + [-24])
	$12 = *($5)
	if ( ((int_64)*($12) == (int_64)1) ){ goto $label$37 }
	$4 = $5
	if ( ((int_32)$6 != (int_32)$5) ){ goto $label$38 }
	goto $label$17 
	
.LABEL $label$37
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$17 }
	CALL eosio_assert(((int_32)*($12 + [56]) == (int_32)$11), [9062])
	if ( ($12 == 0) ){ goto $label$16 }
	
.LABEL $label$18
	$global$0 = ($3 + [64])
	return $0
	
.LABEL $label$17
	$5 = CALL db_find_i64(*($11), *(($0 + [192])), (int_64)5987990370900770816, (int_64)1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$16 }
	CALL eosio_assert(((int_32)*(CALL $6($11, $5) + [56]) == (int_32)$11), [9062])
	$global$0 = ($3 + [64])
	return $0
	
.LABEL $label$16
	*(($3 + [16])) = (int_64)1397703940
	*($3 + [32]) = (int_64)1397703940
	*($3 + [8]) = $1
	*($3 + [24]) = $1
	CALL $8($10, (int_64)1, ($3 + [40]), ($3 + [8]), ($3 + [56]))
	$global$0 = ($3 + [64])
	return $0
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	$3 = ($global$0 - [368])
	$global$0 = $3
	CALL memory()
	CALL eosio_assert([1], [8832])
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8870])
	
.LABEL $label$2
	$5 = [0]
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$4 }
	$4 = (int_64)0
	$6 = (int_64)59
	$7 = [8388]
	$8 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$10 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$9 = ($9 + [-91])
	goto $label$8 
	
.LABEL $label$10
	$10 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$6
	$7 = ($7 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$8 = ((int_64)$10 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$5 }
	$5 = ((int_64)$8 != (int_64)$2)
	
.LABEL $label$4
	$4 = (int_64)0
	$6 = (int_64)59
	$7 = [8388]
	$8 = (int_64)0
	
.LOOP $label$11:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$16 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$9 = ($9 + [-91])
	goto $label$14 
	
.LABEL $label$16
	$10 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$15
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$13
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$12
	$7 = ($7 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$8 = ((int_64)$10 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$11 }
	$7 = [0]
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$17 }
	$4 = (int_64)0
	$6 = (int_64)59
	$7 = [8192]
	$8 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$23 }
	$9 = *($7)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$9 = ($9 + [-91])
	goto $label$21 
	
.LABEL $label$23
	$10 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$19
	$7 = ($7 + [1])
	$6 = ((int_64)$6 + (int_64)4294967291)
	$8 = ((int_64)$10 | (int_64)$8)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$18 }
	$7 = ((int_64)$8 == (int_64)$1)
	
.LABEL $label$17
	if ( ($5 | $7) ){ goto $label$25 }
	$4 = (int_64)7
	
.LOOP $label$26:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$26 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$24 }
	
.LABEL $label$25
	$7 = CALL $41(($3 + [88]), $0, $1)
	if ( ((int_64)$2 <= (int_64)-3617168760277827585) ){ goto $label$31 }
	if ( ((int_64)$2 == (int_64)7111898826740334592) ){ goto $label$30 }
	if ( ((int_64)$2 == (int_64)4520640315874344960) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$27 }
	*($3 + [84]) = [0]
	*($3 + [80]) = [1]
	*($3 + [8]) = *($3 + [80])
	CALL $43($7, ($3 + [8]))
	goto $label$27 
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)-8272103852073811968) ){ goto $label$28 }
	if ( ((int_64)$2 != (int_64)-4417316219328135168) ){ goto $label$27 }
	*($3 + [60]) = [0]
	*($3 + [56]) = [2]
	*($3 + [32]) = *($3 + [56])
	CALL $44($7, ($3 + [32]))
	goto $label$27 
	
.LABEL $label$30
	*($3 + [52]) = [0]
	*($3 + [48]) = [3]
	*($3 + [40]) = *($3 + [48])
	CALL $45($7, ($3 + [40]))
	goto $label$27 
	
.LABEL $label$29
	*($3 + [76]) = [0]
	*($3 + [72]) = [4]
	*($3 + [16]) = *($3 + [72])
	CALL $46($7, ($3 + [16]))
	goto $label$27 
	
.LABEL $label$28
	*($3 + [68]) = [0]
	*($3 + [64]) = [5]
	*($3 + [24]) = *($3 + [64])
	CALL $47($7, ($3 + [24]))
	
.LABEL $label$27
	CALL $48($7)
	
.LABEL $label$24
	CALL $107([0])
	$global$0 = ($3 + [368])
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = $global$0
	$3 = $2
	$4 = *($1 + [4])
	$1 = *($1)
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ((uint_32)$5 <= (uint_32)[512]) ){ goto $label$2 }
	$2 = CALL $111($5)
	CALL read_action_data($2, $5)
	CALL $114($2)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	$5 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($5) + $1))
	
.LABEL $label$3
	CALL void $5((int_32 $1))
	$global$0 = $3
	return [1]
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = [0]
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $111($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*(($3 + [40])) = (int_64)1398362884
	*($3 + [32]) = (int_64)0
	*($3 + [24]) = (int_64)0
	CALL eosio_assert([1], [8993])
	$8 = (int_64)5462355
	
.LOOP $label$5:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$10 = (uint_64)$8 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$8 & (int_64)65280) == (int_64)0) ){ goto $label$6 }
	$8 = $10
	$9 = [1]
	$2 = $1
	$1 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$8 = $10
	
.LOOP $label$7:
	if ( ((int_64)((int_64)$8 & (int_64)65280) != (int_64)0) ){ goto $label$4 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$11 = ($1 + [1])
	$1 = $11
	if ( $2 ){ goto $label$7 }
	$9 = [1]
	$1 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($9, [9042])
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [9140])
	CALL memcpy(($3 + [24]), $6, [8])
	$2 = ($7 & [-8])
	CALL eosio_assert(((int_32)$2 != (int_32)[8]), [9140])
	$1 = (($3 + [24]) + [8])
	CALL memcpy($1, ($6 + [8]), [8])
	CALL eosio_assert(((int_32)$2 != (int_32)[16]), [9140])
	CALL memcpy((($3 + [24]) + [16]), ($6 + [16]), [8])
	if ( ($7 <= [513]) ){ goto $label$8 }
	CALL $114($6)
	
.LABEL $label$8
	*(($2 = (($3 + [48]) + [8]))) = *(($1 + [8]))
	*($3 + [48]) = *($1)
	$8 = *($3 + [24])
	*((($3 + [64]) + [8])) = *($2)
	*($3 + [64]) = *($3 + [48])
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$9 }
	$5 = *((*($1) + $5))
	
.LABEL $label$9
	$10 = *((($3 + [64]) + [8]))
	*((($3 + [80]) + [8])) = $10
	*((($3 + [8]) + [8])) = $10
	$10 = *($3 + [64])
	*($3 + [8]) = $10
	*($3 + [80]) = $10
	CALL void $1((int_32 $8), (int_64 ($3 + [8])), (int_32 $5))
	$global$0 = ($3 + [96])
	return [1]
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $111($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [9140])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $114($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [64])
	$global$0 = $2
	*(($3 = $2) + [44]) = $0
	*($3 + [32]) = *($1)
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL $111($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($2 - (($0 + [15]) & [-16]))
	$global$0 = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [24])) = [0]
	*($3 + [8]) = (int_64)0
	*($3 + [16]) = (int_64)0
	*($3 + [56]) = ($1 + $0)
	*($3 + [48]) = $1
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [9140])
	CALL memcpy(($3 + [8]), $1, [8])
	*($3 + [52]) = ($1 + [8])
	CALL $53(($3 + [48]), (($3 + [8]) + [8]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL $114($1)
	
.LABEL $label$4
	*($3 + [52]) = ($3 + [32])
	*($3 + [48]) = ($3 + [44])
	CALL $54(($3 + [48]), ($3 + [8]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$5 }
	CALL _ZdlPv(*(($3 + [24])))
	
.LABEL $label$5
	$global$0 = ($3 + [64])
	return [1]
}

int_32 .FUNC $8 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = ($global$0 - [64])
	$global$0 = $5
	*($5 + [56]) = $1
	$1 = *($3)
	CALL eosio_assert(((int_64)$1 != (int_64)0), [9461])
	CALL eosio_assert(((int_64)*($2 + [8]) == (int_64)*($3 + [8])), [8934])
	$1 = ((int_64)*($2) / (int_64)$1)
	*($5 + [48]) = $1
	CALL prints([9451])
	CALL printi($1)
	*($5 + [44]) = [0]
	$6 = ($0 + [16])
	if ( (int_64)($1 == 0) ){ goto $label$1 }
	$7 = ($5 + [16])
	
.LOOP $label$2:
	$1 = *($0)
	*($7) = $3
	*($5 + [12]) = ($5 + [44])
	*($5 + [8]) = ($5 + [56])
	CALL $15(($5 + [32]), $6, $1, ($5 + [8]))
	$8 = (*($5 + [44]) + [1])
	*($5 + [44]) = $8
	if ( ((int_64)*($5 + [48]) != (int_64)(CASTING int_64)(int_32 $8)) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = *($0)
	*($5 + [16]) = $3
	*($5 + [20]) = $2
	*($5 + [24]) = $4
	*($5 + [12]) = ($5 + [48])
	*($5 + [8]) = ($5 + [56])
	CALL $16(($5 + [32]), $6, $1, ($5 + [8]))
	$8 = *($5 + [48])
	$global$0 = ($5 + [64])
	return $8
}

void .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($5 + [20]) = $4
	*($5 + [24]) = $1
	*($5 + [16]) = [0]
	$6 = ($3 + [1])
	if ( ($6 == 0) ){ goto $label$1 }
	$7 = ($0 + [16])
	$8 = ($0 + [44])
	$9 = ($0 + [40])
	$10 = ($0 + [24])
	$11 = ($5 + [8])
	$3 = [0]
	
.LOOP $label$2:
	$1 = ((int_64)(CASTING int_64)(int_32 $3) + (int_64)$2)
	$4 = *($8)
	$12 = *($9)
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$4 }
	
.LOOP $label$6:
	$3 = ($4 + [-24])
	$13 = *($3)
	if ( ((int_64)*($13) == (int_64)$1) ){ goto $label$5 }
	$4 = $3
	if ( ((int_32)$12 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	if ( ((int_32)$12 == (int_32)$4) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*($13 + [56]) == (int_32)$7), [9062])
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL db_find_i64(*($7), *($10), (int_64)5987990370900770816, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$13 = CALL $6($7, $3)
	CALL eosio_assert(((int_32)*($13 + [56]) == (int_32)$7), [9062])
	
.LABEL $label$3
	$1 = *($0)
	*($11) = ($5 + [24])
	*($5 + [4]) = ($5 + [16])
	*($5) = ($5 + [20])
	CALL eosio_assert([1], [9163])
	CALL $17($7, $13, $1, $5)
	$3 = (*($5 + [16]) + [1])
	*($5 + [16]) = $3
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$1
	$global$0 = ($5 + [32])
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [9113])
	if ( ($5 <= [513]) ){ goto $label$5 }
	$4 = CALL $111($5)
	goto $label$4 
	
.LABEL $label$5
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$4
	CALL db_get_i64($1, $4, $5)
	*($3 + [36]) = $4
	*($3 + [32]) = $4
	*($3 + [40]) = ($4 + $5)
	$2 = CALL _Znwj([72])
	$6 = CALL $65($2)
	*($2 + [56]) = $0
	CALL $90(($3 + [32]), $6)
	*($2 + [60]) = $1
	*($3 + [24]) = $2
	$7 = *($2)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $2
	*($8) = ($6 + [24])
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $67(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($5 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $114($4)
	
.LABEL $label$6
	$6 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	$0 = *($6 + [44])
	if ( ($0 == 0) ){ goto $label$10 }
	$8 = ($6 + [48])
	$5 = *($8)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$12 }
	
.LOOP $label$13:
	$1 = ($5 + [-40])
	$4 = *(($5 + [-16]))
	if ( ($4 == 0) ){ goto $label$14 }
	*(($5 + [-12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$14
	$5 = $1
	if ( ((int_32)$0 != (int_32)$1) ){ goto $label$13 }
	$5 = *(($6 + [44]))
	goto $label$11 
	
.LABEL $label$12
	$5 = $0
	
.LABEL $label$11
	*($8) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$10
	CALL _ZdlPv($6)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $2
}

int_32 .FUNC $7 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$5 = ($global$0 - [48])
	$global$0 = $5
	*($5 + [32]) = $4
	*($5 + [40]) = $1
	$6 = ($0 + [16])
	$8 = *(($0 + [44]))
	$7 = *(($0 + [40]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LOOP $label$5:
	$9 = ($8 + [-24])
	$10 = *($9)
	if ( ((int_64)*($10) == (int_64)$2) ){ goto $label$4 }
	$8 = $9
	if ( ((int_32)$7 != (int_32)$9) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [9062])
	goto $label$2 
	
.LABEL $label$3
	$9 = CALL db_find_i64(*($6), *(($0 + [24])), (int_64)5987990370900770816, $2)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$1 }
	$10 = CALL $6($6, $9)
	CALL eosio_assert(((int_32)*($10 + [56]) == (int_32)$6), [9062])
	
.LABEL $label$2
	*($5 + [28]) = $10
	*($5 + [24]) = $6
	$2 = *($0)
	*($5 + [23]) = [0]
	$9 = *($5 + [28])
	*($5) = $3
	*($5 + [4]) = ($5 + [24])
	*($5 + [8]) = ($5 + [32])
	*($5 + [12]) = ($5 + [23])
	*($5 + [16]) = ($5 + [40])
	CALL eosio_assert(((int_32)$9 != (int_32)[0]), [9163])
	CALL $14($6, $9, $2, $5)
	$9 = *($5 + [23])
	$global$0 = ($5 + [48])
	return ((int_32)$9 != (int_32)[0])
	
.LABEL $label$1
	*($5 + [28]) = [0]
	*($5 + [24]) = $6
	*($5 + [23]) = [0]
	$global$0 = ($5 + [48])
	return [0]
}

void .FUNC $4 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$1 = $global$0
	$2 = $1
	$3 = *($0 + [8])
	$4 = (int_64)($3 == 0)
	if ( $4 ){ goto $label$2 }
	$5 = ((int_64)$3 + (int_64)1)
	$6 = (int_64)1
	
.LOOP $label$3:
	$6 = ((int_64)$6 * (int_64)10)
	$5 = ((int_64)$5 + (int_64)-1)
	if ( ((int_64)$5 > (int_64)1) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = (int_64)1
	
.LABEL $label$1
	$7 = ($0 + [8])
	$8 = (CASTING uint_32)(uint_64 $3)
	$1 = ($1 - (($8 + [16]) & [496]))
	$global$0 = $1
	*(($9 = ($1 + $8))) = [0]
	$10 = *($0)
	if ( $4 ){ goto $label$4 }
	$3 = ((int_64)$3 + (int_64)1)
	$5 = ((int_64)$10 % (int_64)$6)
	$0 = ($9 + [-1])
	
.LOOP $label$5:
	$11 = ((int_64)$5 / (int_64)10)
	*($0) = ((CASTING uint_32)(uint_64 (int_64))($5 - ((int_64)$11 * (int_64)10))) + [48])
	$0 = ($0 + [-1])
	$5 = $11
	$3 = ((int_64)$3 + (int_64)-1)
	if ( ((int_64)$3 > (int_64)1) ){ goto $label$5 }
	
.LABEL $label$4
	CALL printi(((int_64)$10 / (int_64)$6))
	CALL prints([9619])
	CALL prints_l($1, $8)
	CALL prints([9621])
	CALL $74($7, [0])
	$global$0 = $2
}

int_32 .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = ($0 + [16])
	$3 = *($0 + [56])
	$5 = *(($0 + [44]))
	$4 = *(($0 + [40]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$4:
	$6 = ($5 + [-24])
	$7 = *($6)
	if ( ((int_64)*($7) == (int_64)$3) ){ goto $label$3 }
	$5 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$2), [9062])
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	$6 = CALL db_find_i64(*($2), *(($0 + [24])), (int_64)4986958867385548800, $3)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$1 }
	$7 = CALL $13($2, $6)
	CALL eosio_assert(((int_32)*($7 + [16]) == (int_32)$2), [9062])
	
.LABEL $label$1
	*(($1 + [8])) = [0]
	*($1) = (int_64)0
	$6 = CALL $108([9145])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$8 }
	*($1) = ($6 << [1])
	$4 = ($1 | [1])
	$5 = $4
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$4 = (($6 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($1) = ($4 | [1])
	*($1 + [8]) = $5
	*($1 + [4]) = $6
	$4 = ($1 | [1])
	
.LABEL $label$7
	CALL memcpy($5, [9145], $6)
	
.LABEL $label$6
	*(($5 + $6)) = [0]
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), ( *($1 + [8]) ? $4 : (*($1) & [1]) ))
	if ( ((*($1) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($1 + [8])))
	
.LABEL $label$9
	$6 = *($7 + [8])
	$global$0 = ($1 + [16])
	return $6
	
.LABEL $label$5
	CALL $99($1)
	return (unreachable)
}

int_32 .FUNC $2 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [32])
	if ( $2 ){ goto $label$1 }
	*(($2 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($2 + [40 align=4]) = (int_64)0
	*($2 + [48]) = [0]
	*(($0 + [32])) = $2
	$3 = *($0 + [16])
	*($2) = $3
	*($2 + [8]) = $3
	*($2 + [16]) = $3
	*($2 + [24]) = $3
	
.LABEL $label$1
	$4 = ($2 + [16])
	$6 = *(($2 + [44]))
	$5 = *(($2 + [40]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$0 = ($6 + [-24])
	$7 = *($0)
	if ( ((int_64)*($7) == (int_64)$1) ){ goto $label$3 }
	$6 = $0
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($7 + [20]) == (int_32)$4), [9062])
	return ((int_32)$7 != (int_32)[0])
	
.LABEL $label$2
	$0 = [0]
	$6 = CALL db_find_i64(*($4), *(($2 + [24])), (int_64)3923610676896333824, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$0 = CALL $12($4, $6)
	CALL eosio_assert(((int_32)*($0 + [20]) == (int_32)$4), [9062])
	
.LABEL $label$5
	return ((int_32)$0 != (int_32)[0])
}

void .FUNC $3 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	$4 = ($1 + [16])
	$6 = *(($1 + [44]))
	$5 = *(($1 + [40]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	
.LOOP $label$4:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$2) ){ goto $label$3 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$4), [9062])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$7 = CALL db_find_i64(*($4), *(($1 + [24])), (int_64)3923610676896333824, $2)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $12($4, $7)
	CALL eosio_assert(((int_32)*($8 + [20]) == (int_32)$4), [9062])
	
.LABEL $label$1
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$7 = CALL $108([8812])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$8 }
	*($3) = ($7 << [1])
	$5 = ($3 | [1])
	$6 = $5
	if ( $7 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$5 = (($7 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($3) = ($5 | [1])
	*($3 + [8]) = $6
	*($3 + [4]) = $7
	$5 = ($3 | [1])
	
.LABEL $label$7
	CALL memcpy($6, [8812], $7)
	
.LABEL $label$6
	*(($6 + $7)) = [0]
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), ( *($3 + [8]) ? $5 : (*($3) & [1]) ))
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($3 + [8])))
	
.LABEL $label$9
	CALL $100($0, ($8 + [8]))
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$5
	CALL $99($3)
}

void .FUNC memory ()
{
}

void .FUNC $1 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$3 = ($global$0 - [256])
	$global$0 = $3
	CALL require_auth(*($0 + [8]))
	*((($3 + [240]) + [8])) = *(($2 + [8]))
	*($3 + [240]) = *($2)
	CALL eosio_assert([1], [8993])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$4 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9042])
	$9 = ((int_64)*($3 + [248]) == (int_64)1397703940)
	CALL eosio_assert($9, [8934])
	$10 = *($3 + [240])
	if ( ((int_64)$10 == (int_64)10000) ){ goto $label$7 }
	CALL eosio_assert([1], [8993])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$11 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$11
	$4 = $6
	
.LOOP $label$12:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$9 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$12 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [9042])
	CALL eosio_assert($9, [8934])
	if ( ((int_64)$10 == (int_64)30000) ){ goto $label$7 }
	CALL eosio_assert([1], [8993])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$15:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$14 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$16 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$16
	$4 = $6
	
.LOOP $label$17:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$14 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$17 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$15 }
	goto $label$13 
	
.LABEL $label$14
	$7 = [0]
	
.LABEL $label$13
	CALL eosio_assert($7, [9042])
	CALL eosio_assert($9, [8934])
	if ( ((int_64)$10 == (int_64)50000) ){ goto $label$7 }
	*(($3 + [232])) = [0]
	*($3 + [224]) = (int_64)0
	$5 = CALL $108([8397])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$20 }
	*($3 + [224]) = ($5 << [1])
	$8 = (($3 + [224]) | [1])
	$7 = $8
	if ( $5 ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	$8 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($3 + [224]) = ($8 | [1])
	*($3 + [232]) = $7
	*($3 + [228]) = $5
	$8 = (($3 + [224]) | [1])
	
.LABEL $label$19
	CALL memcpy($7, [8397], $5)
	
.LABEL $label$18
	*(($7 + $5)) = [0]
	CALL eosio_assert([0], ( *($3 + [232]) ? $8 : (*($3 + [224]) & [1]) ))
	if ( ((*($3 + [224]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($3 + [232])))
	
.LABEL $label$7
	$4 = (int_64)0
	$6 = (int_64)59
	$5 = [8421]
	$11 = (int_64)0
	
.LOOP $label$21:
	$10 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$22 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$7 = ($7 + [-91])
	goto $label$23 
	
.LABEL $label$24
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$22
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$21 }
	if ( CALL $2($0, $11) ){ goto $label$26 }
	*(($3 + [216])) = [0]
	*($3 + [208]) = (int_64)0
	$5 = CALL $108([8434])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$25 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$29 }
	*($3 + [208]) = ($5 << [1])
	$8 = (($3 + [208]) | [1])
	$7 = $8
	if ( $5 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	$8 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($8)
	*($3 + [208]) = ($8 | [1])
	*($3 + [216]) = $7
	*($3 + [212]) = $5
	$8 = (($3 + [208]) | [1])
	
.LABEL $label$28
	CALL memcpy($7, [8434], $5)
	
.LABEL $label$27
	*(($7 + $5)) = [0]
	CALL eosio_assert([0], ( *($3 + [216]) ? $8 : (*($3 + [208]) & [1]) ))
	if ( ((*($3 + [208]) & [1]) == 0) ){ goto $label$26 }
	CALL _ZdlPv(*(($3 + [216])))
	
.LABEL $label$26
	$4 = (int_64)0
	$6 = (int_64)59
	$5 = [8421]
	$11 = (int_64)0
	
.LOOP $label$30:
	$10 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$31 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$7 = ($7 + [-91])
	goto $label$32 
	
.LABEL $label$33
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$31
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$11 = ((int_64)$10 | (int_64)$11)
	$6 = ((int_64)$6 + (int_64)4294967291)
	if ( ((int_64)$6 != (int_64)55834574842) ){ goto $label$30 }
	$5 = *($0 + [32])
	if ( $5 ){ goto $label$34 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*(($0 + [32])) = $5
	$4 = *($0 + [16])
	*($5) = $4
	*($5 + [8]) = $4
	*($5 + [16]) = $4
	*($5 + [24]) = $4
	
.LABEL $label$34
	CALL $3(($3 + [96]), $5, $11)
	$4 = (int_64)0
	$5 = ($5 & [1])
	$5 = *($3 + [96])
	$7 = ( *($3 + [100]) ? uint_32($5 >> [1]) : $5 )
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$35 }
	$5 = ( *($3 + [104]) ? (($3 + [96]) | [1]) : $5 )
	$7 = ($5 + $7)
	$4 = (int_64)0
	
.LOOP $label$36:
	$4 = ((int_64)((int_64)((int_64)$4 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $7) ){ goto $label$36 }
	
.LABEL $label$35
	*($3 + [200]) = (int_64)1397703940
	*($3 + [192]) = $4
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8993])
	$4 = (uint_64)*($3 + [200]) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$39:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$38 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$40 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$40
	$4 = $6
	
.LOOP $label$41:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$38 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$41 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$39 }
	goto $label$37 
	
.LABEL $label$38
	$7 = [0]
	
.LABEL $label$37
	CALL eosio_assert($7, [9042])
	if ( ((*($3 + [96]) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*(($3 + [104])))
	
.LABEL $label$42
	CALL prints([8458])
	CALL $4(($3 + [192]))
	$12 = ($0 + [40])
	$13 = CALL $5($12)
	CALL prints([8496])
	$6 = (CASTING uint_64)(uint_32 $13)
	CALL printui($6)
	$14 = ($0 + [184])
	$15 = ($0 + [168])
	$4 = ((int_64)$6 + (int_64)-1)
	$16 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	$7 = *(($0 + [212]))
	$9 = *(($0 + [208]))
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$45 }
	
.LOOP $label$47:
	$5 = ($7 + [-24])
	$8 = *($5)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$46 }
	$7 = $5
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$47 }
	goto $label$45 
	
.LABEL $label$46
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$45 }
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$14), [9062])
	if ( $8 ){ goto $label$44 }
	goto $label$43 
	
.LABEL $label$45
	$5 = CALL db_find_i64(*($14), *(($0 + [192])), (int_64)5987990370900770816, $4)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$43 }
	$8 = CALL $6($14, $5)
	CALL eosio_assert(((int_32)*($8 + [56]) == (int_32)$14), [9062])
	
.LABEL $label$44
	$5 = (*($8 + [40]) + [7])
	$16 = ( $5 ? $16 : ((uint_32)$5 > (uint_32)$16) )
	
.LABEL $label$43
	CALL prints([8516])
	$4 = (CASTING uint_64)(uint_32 $16)
	CALL printui($4)
	*($3 + [191]) = CALL $7($15, $1, $6, ($3 + [240]), $4)
	CALL prints([8541])
	CALL $4(($3 + [240]))
	CALL eosio_assert([1], [8993])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$50:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$49 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$51 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$51
	$4 = $6
	
.LOOP $label$52:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$49 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$52 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$50 }
	goto $label$48 
	
.LABEL $label$49
	$7 = [0]
	
.LABEL $label$48
	CALL eosio_assert($7, [9042])
	CALL eosio_assert(((int_64)*((($3 + [240]) + [8])) == (int_64)1397703940), [8934])
	if ( (int_64)(*($3 + [240]) == 0) ){ goto $label$54 }
	$4 = *((($3 + [192]) + [8]))
	*((($3 + [168]) + [8])) = $4
	*((($3 + [48]) + [8])) = $4
	$4 = *($3 + [192])
	*($3 + [48]) = $4
	*($3 + [168]) = $4
	$5 = (CALL $8($15, $4, ($3 + [240]), ($3 + [48]), ($3 + [191])) + [1])
	$13 = ($13 + [1])
	$4 = (CASTING uint_64)(uint_32 $13)
	CALL $9($15, $1, $4, $5, $16)
	goto $label$53 
	
.LABEL $label$54
	$5 = [0]
	
.LABEL $label$53
	CALL prints([8573])
	CALL prints(( [9734] ? [9866] : *($3 + [191]) ))
	if ( (*($3 + [191]) == 0) ){ goto $label$55 }
	$4 = *((($3 + [192]) + [8]))
	*((($3 + [152]) + [8])) = $4
	*((($3 + [32]) + [8])) = $4
	$4 = *($3 + [192])
	*($3 + [32]) = $4
	*($3 + [152]) = $4
	$5 = ($5 + [1])
	CALL $8($15, (CASTING uint_64)(uint_32 ($5 + $13)), ($3 + [240]), ($3 + [32]), ($3 + [191]))
	
.LABEL $label$55
	$7 = ($0 + [8])
	CALL $10($12, *($7), $5)
	$4 = CALL current_time()
	*(($3 + [128])) = (int_64)-1
	*(($3 + [136])) = (int_64)0
	*(($3 + [144])) = [0]
	$4 = (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$4 / (uint_64)(int_64)1000000)) / (uint_32)[86400]))
	*((($3 + [96]) + [24])) = $4
	*($3 + [80]) = (int_64)0
	*($3 + [88]) = (int_64)1397703940
	$6 = *($7)
	*($3 + [96]) = $6
	*($3 + [112]) = $6
	*($3 + [104]) = $4
	CALL eosio_assert([1], [8993])
	$4 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$58:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $4) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$57 }
	$6 = (uint_64)$4 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$4 & (int_64)65280) == (int_64)0) ){ goto $label$59 }
	$4 = $6
	$7 = [1]
	$8 = $5
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$59
	$4 = $6
	
.LOOP $label$60:
	if ( ((int_64)((int_64)$4 & (int_64)65280) != (int_64)0) ){ goto $label$57 }
	$4 = (uint_64)$4 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$8 = ($5 + [1])
	$5 = $8
	if ( $7 ){ goto $label$60 }
	$7 = [1]
	$5 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$58 }
	goto $label$56 
	
.LABEL $label$57
	$7 = [0]
	
.LABEL $label$56
	CALL eosio_assert($7, [9042])
	$6 = *(($2 + [8]))
	*((($3 + [64]) + [8])) = $6
	$4 = *($2)
	*((($3 + [16]) + [8])) = *((($3 + [80]) + [8]))
	*(($3 + [8])) = $6
	*($3 + [64]) = $4
	*($3 + [16]) = *($3 + [80])
	*($3) = $4
	CALL $11(($3 + [96]), $1, ($3 + [16]), $3)
	$8 = *(($3 + [136]))
	if ( ($8 == 0) ){ goto $label$61 }
	$0 = ($3 + [140])
	$5 = *($0)
	if ( ((int_32)$5 == (int_32)$8) ){ goto $label$63 }
	
.LOOP $label$64:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$65 }
	CALL _ZdlPv($7)
	
.LABEL $label$65
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$64 }
	$5 = *(($3 + [136]))
	goto $label$62 
	
.LABEL $label$63
	$5 = $8
	
.LABEL $label$62
	*($0) = $8
	CALL _ZdlPv($5)
	
.LABEL $label$61
	$global$0 = ($3 + [256])
	return (unreachable)
	
.LABEL $label$25
	CALL $99(($3 + [208]))
	
.LABEL $label$6
	CALL $99(($3 + [224]))
	(unreachable)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [9244])
	$6 = *($1)
	CALL $58($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9295])
	$8 = *($1 + [44])
	$7 = *(($1 + [48]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($7 - $8) / (int_32)[40]))
	$3 = [44]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$3:
	$3 = ($3 + [24])
	$11 = *($8 + [24])
	$10 = *(($8 + [28]))
	$12 = ($10 - $11)
	$9 = (CASTING uint_64)(uint_32 int_32($12 >> [4]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$5 }
	$3 = (($12 & [-16]) + $3)
	
.LABEL $label$5
	$8 = ($8 + [40])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$7 }
	$8 = CALL $111($3)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$6
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($8 + $3)
	CALL $59($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $8, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $114($8)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [9476])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([72])
	CALL $65($3)
	*($3 + [56]) = $1
	CALL $66(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $67(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$5 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$7 = *($5 + [44])
	if ( ($7 == 0) ){ goto $label$4 }
	$6 = ($5 + [48])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($1 + [-40])
	$0 = *(($1 + [-16]))
	if ( ($0 == 0) ){ goto $label$8 }
	*(($1 + [-12])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$1 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$7 }
	$1 = *(($5 + [44]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($6) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [9476])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([72])
	CALL $65($3)
	*($3 + [56]) = $1
	CALL $68(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $67(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$5 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$7 = *($5 + [44])
	if ( ($7 == 0) ){ goto $label$4 }
	$6 = ($5 + [48])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($1 + [-40])
	$0 = *(($1 + [-16]))
	if ( ($0 == 0) ){ goto $label$8 }
	*(($1 + [-12])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$8
	$1 = $3
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$7 }
	$1 = *(($5 + [44]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $7
	
.LABEL $label$5
	*($6) = $7
	CALL _ZdlPv($1)
	
.LABEL $label$4
	CALL _ZdlPv($5)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $17 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [9244])
	$6 = *($1)
	CALL $69($3, $1)
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9295])
	$8 = *($1 + [44])
	$7 = *(($1 + [48]))
	$9 = (CASTING uint_64)(uint_32 ((int_32)($7 - $8) / (int_32)[40]))
	$3 = [44]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$3:
	$3 = ($3 + [24])
	$11 = *($8 + [24])
	$10 = *(($8 + [28]))
	$12 = ($10 - $11)
	$9 = (CASTING uint_64)(uint_32 int_32($12 >> [4]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$11 == (int_32)$10) ){ goto $label$5 }
	$3 = (($12 & [-16]) + $3)
	
.LABEL $label$5
	$8 = ($8 + [40])
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$7 }
	$8 = CALL $111($3)
	goto $label$6 
	
.LABEL $label$7
	$8 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $8
	
.LABEL $label$6
	*($5 + [4]) = $8
	*($5) = $8
	*($5 + [8]) = ($8 + $3)
	CALL $59($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $8, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $114($8)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [12]) = $2
	$4 = ($0 + [16])
	$5 = *($0 + [56])
	$7 = *(($0 + [44]))
	$6 = *(($0 + [40]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$4:
	$2 = ($7 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$3 }
	$7 = $2
	if ( ((int_32)$6 != (int_32)$2) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [9062])
	goto $label$1 
	
.LABEL $label$2
	$8 = [0]
	$2 = CALL db_find_i64(*($4), *(($0 + [24])), (int_64)4986958867385548800, $5)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $13($4, $2)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)$4), [9062])
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3 + [4]) = ($3 + [8])
	*($3) = ($3 + [12])
	CALL eosio_assert(((int_32)$8 != (int_32)[0]), [9163])
	CALL $18($4, $8, $1, $3)
	$2 = *($3 + [8])
	$global$0 = ($3 + [16])
	return $2
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$4 = ($global$0 - [32])
	$global$0 = $4
	*($4 + [24]) = $1
	$5 = ($0 + [16])
	$7 = *(($0 + [44]))
	$6 = *(($0 + [40]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	
.LOOP $label$5:
	$8 = ($7 + [-24])
	$9 = *($8)
	if ( ((int_64)*($9) == (int_64)$1) ){ goto $label$4 }
	$7 = $8
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$5), [9062])
	goto $label$2 
	
.LABEL $label$3
	$8 = CALL db_find_i64(*($5), *(($0 + [24])), (int_64)5313531926794913280, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$1 }
	$9 = CALL $19($5, $8)
	CALL eosio_assert(((int_32)*($9 + [40]) == (int_32)$5), [9062])
	
.LABEL $label$2
	$1 = *($0)
	*($4 + [12]) = $3
	*($4 + [8]) = $2
	CALL eosio_assert([1], [9163])
	CALL $20($5, $9, $1, ($4 + [8]))
	$global$0 = ($4 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($4 + [12]) = $2
	*($4 + [16]) = $3
	*($4 + [8]) = ($4 + [24])
	CALL $21($4, $5, $1, ($4 + [8]))
	$global$0 = ($4 + [32])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9113])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $111($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [40]) = ($2 + $4)
	*($3 + [32]) = $2
	*(($5 = CALL _Znwj([32])) + [16]) = [0]
	*($5 + [8 align=4]) = (int_64)0
	*($5 + [20]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9140])
	CALL memcpy($5, $2, [8])
	*($3 + [36]) = ($2 + [8])
	CALL $53(($3 + [32]), ($5 + [8]))
	*($5 + [24]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $55(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $114($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$10
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9113])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $111($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [9140])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-4]) != (int_32)[8]), [9140])
	CALL memcpy(($5 + [8]), ($2 + [8]), [4])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $57(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $114($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [9445])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [9445])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $18 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [9198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [9244])
	$5 = (*($1 + [8]) + *(*($3)))
	*($1 + [8]) = $5
	*(*($3 + [4])) = $5
	$6 = *($1)
	CALL eosio_assert([1], [9295])
	CALL eosio_assert([1], [9445])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9445])
	CALL memcpy(($4 | [8]), ($1 + [8]), [4])
	CALL db_update_i64(*($1 + [20]), $2, $4, [12])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [9113])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $111($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [36]) = $2
	*($3 + [32]) = $2
	*($3 + [40]) = ($2 + $4)
	$5 = CALL _Znwj([56])
	$6 = CALL $70($5)
	*($5 + [40]) = $0
	CALL $73(($3 + [32]), $6)
	*($5 + [44]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $72(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $114($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$2 = ($global$0 - [64])
	$global$0 = $2
	CALL eosio_assert([1], [8993])
	$3 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9042])
	$4 = *($0)
	$3 = *($4)
	$5 = *($4 + [8])
	$6 = *(*($0 + [4]) + [4])
	CALL eosio_assert(((int_64)*(($6 + [32])) == (int_64)$5), [9625])
	$3 = ((int_64)$3 + (int_64)*($6 + [24]))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9668])
	CALL eosio_assert(((int_64)$3 < (int_64)4611686018427387904), [9687])
	$4 = *(*($0 + [4]) + [4])
	CALL eosio_assert(((int_64)$5 == (int_64)*(($4 + [16]))), [8934])
	if ( ((int_64)$3 >= (int_64)*($4 + [8])) ){ goto $label$7 }
	$4 = *($0)
	$8 = *($4 + [8])
	$9 = *($4)
	goto $label$6 
	
.LABEL $label$7
	$4 = *(*(($0 + [4])) + [4])
	$3 = *($4 + [8])
	$8 = *(($4 + [16]))
	CALL eosio_assert(((int_64)*(($4 + [32])) == (int_64)$8), [9354])
	$9 = (int_64)
	CALL eosio_assert(((int_64)$9($3 - *($4 + [24]))) > (int_64)-4611686018427387904), [9402])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [9424])
	*(*($0 + [12])) = [1]
	*($1 + [40]) = *(*($0 + [8]))
	$4 = *($0)
	
.LABEL $label$6
	CALL eosio_assert(((int_64)$8 == (int_64)*($4 + [8])), [9354])
	$3 = (int_64)
	*($4) = $3(*($4) - $9))
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9402])
	CALL eosio_assert(((int_64)*($4) < (int_64)4611686018427387904), [9424])
	CALL eosio_assert(((int_64)$8 == (int_64)*(($1 + [32]))), [9625])
	$3 = ((int_64)*($1 + [24]) + (int_64)$9)
	*($1 + [24]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9668])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [9687])
	$6 = *($10 + [4])
	$10 = CALL $23(($2 + [48]), (*(*(($0 + [4])) + [4]) + [44]))
	$4 = *($10)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$12 }
	$3 = *(*(($0 + [16])))
	
.LOOP $label$13:
	if ( ((int_64)*($4) == (int_64)$3) ){ goto $label$12 }
	$4 = ($4 + [40])
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$11 }
	CALL eosio_assert(((int_64)$8 == (int_64)*(($4 + [16]))), [9625])
	$3 = ((int_64)*($4 + [8]) + (int_64)$9)
	*($4 + [8]) = $3
	CALL eosio_assert(((int_64)$3 > (int_64)-4611686018427387904), [9668])
	CALL eosio_assert(((int_64)*($4 + [8]) < (int_64)4611686018427387904), [9687])
	$4 = ($1 + [44])
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$10 }
	CALL $60($4, *($10), *(($10 + [4])))
	$0 = *($10)
	if ( $0 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	*(($2 + [24])) = (int_64)1398362884
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [8993])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$3 = $5
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$18 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$6 = [0]
	
.LABEL $label$14
	CALL eosio_assert($6, [9042])
	*(($2 + [40])) = [0]
	$3 = *(*(($0 + [16])))
	*(($6 = (($2 + [8]) + [8]))) = $9
	*(($7 = (($2 + [8]) + [16]))) = $8
	*($2 + [32]) = (int_64)0
	*($2 + [8]) = $3
	$4 = *(($1 + [48]))
	if ( ((int_32)$4 == (int_32)*(($1 + [52]))) ){ goto $label$21 }
	*($4) = *($2 + [8])
	*(($4 + [28])) = (int_64)0
	*(($4 + [16])) = *($7)
	*(($4 + [8])) = *($6)
	*($4 + [24]) = [0]
	$6 = (*((($2 + [8]) + [28])) - *($2 + [32]))
	if ( ($6 == 0) ){ goto $label$22 }
	$7 = int_32($6 >> [4])
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$20 }
	$6 = CALL _Znwj($6)
	*(($4 + [24])) = $6
	*(($4 + [32])) = ($6 + ($7 << [4]))
	*(($4 = ($4 + [28]))) = $6
	$0 = *((($2 + [8]) + [24]))
	$7 = (*((($2 + [8]) + [28])) - $0)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($6, $0, $7)
	*($4) = (*($4) + $7)
	
.LABEL $label$22
	*(($4 = ($1 + [48]))) = (*($4) + [40])
	$4 = *(($2 + [32]))
	if ( ($4 == 0) ){ goto $label$10 }
	goto $label$19 
	
.LABEL $label$21
	CALL $61(($1 + [44]), ($2 + [8]))
	$4 = *(($2 + [32]))
	if ( $4 ){ goto $label$19 }
	goto $label$10 
	
.LABEL $label$20
	CALL $106(($4 + [24]))
	
.LABEL $label$19
	*(($2 + [36])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$10
	$0 = *($10)
	if ( ($0 == 0) ){ goto $label$8 }
	
.LABEL $label$9
	$1 = ($10 + [4])
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$24 }
	
.LOOP $label$25:
	$6 = ($4 + [-40])
	$7 = *(($4 + [-16]))
	if ( ($7 == 0) ){ goto $label$26 }
	*(($4 + [-12])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$26
	$4 = $6
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$25 }
	$4 = *($10)
	goto $label$23 
	
.LABEL $label$24
	$4 = $0
	
.LABEL $label$23
	*($1) = $0
	CALL _ZdlPv($4)
	$global$0 = ($2 + [64])
	return 
	
.LABEL $label$8
	$global$0 = ($2 + [64])
	(unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $62($0, ($1 + [44]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9445])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9445])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9445])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9445])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9445])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [9445])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9140])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9140])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [9140])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [9140])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $53(*($1), ($0 + [32]))
}

void .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $100(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $100(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $52 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	$2 = ($global$0 - [144])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8192]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$6 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$7 = ($7 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$6 = ((int_64)$8 | (int_64)$6)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$1 }
	*(($2 + [136])) = [0]
	*($2 + [112]) = $1
	*($2 + [104]) = $6
	*($2 + [120]) = (int_64)-1
	$3 = (int_64)0
	*($2 + [128]) = (int_64)0
	$5 = CALL $87(($2 + [104]), (int_64)5459781, [9847])
	$9 = *($5 + [8])
	$10 = *($5)
	$11 = *($2 + [128])
	if ( ($11 == 0) ){ goto $label$7 }
	$12 = ($2 + [132])
	$5 = *($12)
	if ( ((int_32)$5 == (int_32)$11) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$11 }
	CALL _ZdlPv($7)
	
.LABEL $label$11
	if ( ((int_32)$11 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($2 + [128]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $11
	
.LABEL $label$8
	*($12) = $11
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$4 = (int_64)59
	$5 = [9825]
	$6 = (int_64)0
	
.LOOP $label$12:
	if ( ((uint_64)$3 > (uint_64)(int_64)9) ){ goto $label$17 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$16 }
	$7 = ($7 + [-91])
	goto $label$15 
	
.LABEL $label$17
	$8 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$16
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$15
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$14
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$13
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$8 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$12 }
	if ( (CALL $2($0, $6) == 0) ){ goto $label$20 }
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [9836]
	$6 = (int_64)0
	
.LOOP $label$21:
	if ( ((uint_64)$3 > (uint_64)(int_64)9) ){ goto $label$26 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$7 = ($7 + [-91])
	goto $label$24 
	
.LABEL $label$26
	$8 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$23
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$22
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$8 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$21 }
	if ( (CALL $2($0, $6) == 0) ){ goto $label$20 }
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [9825]
	$6 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$3 > (uint_64)(int_64)9) ){ goto $label$32 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$7 = ($7 + [-91])
	goto $label$30 
	
.LABEL $label$32
	$8 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$28
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$8 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$27 }
	$5 = *($0 + [32])
	if ( $5 ){ goto $label$33 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*(($0 + [32])) = $5
	$3 = *($0 + [16])
	*($5) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	*($5 + [24]) = $3
	
.LABEL $label$33
	CALL $3(($2 + [104]), $5, $6)
	$12 = *($2 + [112])
	$11 = ($5 & [1])
	$5 = *($2 + [104])
	$7 = ( *($2 + [108]) ? uint_32($5 >> [1]) : $11 )
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$36 }
	$5 = ( $12 ? (($2 + [104]) | [1]) : $11 )
	$7 = ($5 + $7)
	$13 = (int_64)0
	
.LOOP $label$37:
	$13 = ((int_64)((int_64)((int_64)$13 * (int_64)10) + (int_64)*($5)) + (int_64)-48)
	$5 = ($5 + [1])
	if ( ($5 <= $7) ){ goto $label$37 }
	if ( ($11 == 0) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$36
	$13 = (int_64)0
	if ( ($11 == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv($12)
	
.LABEL $label$34
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [8993])
	$3 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$40:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$39 }
	$8 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$41 }
	$3 = $8
	$7 = [1]
	$11 = $5
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$41
	$3 = $8
	
.LOOP $label$42:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$39 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$7 = ((int_32)$5 < (int_32)[6])
	$11 = ($5 + [1])
	$5 = $11
	if ( $7 ){ goto $label$42 }
	$7 = [1]
	$5 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$7 = [0]
	
.LABEL $label$38
	CALL eosio_assert($7, [9042])
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [9836]
	$6 = (int_64)0
	
.LOOP $label$43:
	if ( ((uint_64)$3 > (uint_64)(int_64)9) ){ goto $label$48 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$47 }
	$7 = ($7 + [-91])
	goto $label$46 
	
.LABEL $label$48
	$8 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$45 }
	goto $label$44 
	
.LABEL $label$47
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$46
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$45
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$44
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$8 | (int_64)$6)
	$4 = ((int_64)$4 + (int_64)4294967291)
	if ( ((int_64)$4 != (int_64)55834574842) ){ goto $label$43 }
	$7 = ($0 + [32])
	$5 = *($7)
	if ( $5 ){ goto $label$49 }
	*(($5 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($5 + [40 align=4]) = (int_64)0
	*($5 + [48]) = [0]
	*($7) = $5
	$3 = *($0 + [16])
	*($5) = $3
	*($5 + [8]) = $3
	*($5 + [16]) = $3
	*($5 + [24]) = $3
	
.LABEL $label$49
	CALL $3(($2 + [104]), $5, $6)
	$5 = ( *($2 + [112]) ? (($2 + [104]) | [1]) : (*($2 + [104]) & [1]) )
	$7 = [0]
	
.LOOP $label$50:
	$11 = ($5 + $7)
	$12 = ($7 + [1])
	$7 = $12
	if ( *($11) ){ goto $label$50 }
	$14 = (CASTING uint_64)(uint_32 ($12 + [-1]))
	$3 = (int_64)0
	$8 = (int_64)59
	$6 = (int_64)0
	
.LOOP $label$51:
	$4 = (int_64)0
	if ( ((uint_64)$3 >= (uint_64)$14) ){ goto $label$52 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$54 }
	$7 = ($7 + [-91])
	goto $label$53 
	
.LABEL $label$54
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$53
	$4 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$52
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$56 }
	$4 = ((int_64)((int_64)$4 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	goto $label$55 
	
.LABEL $label$56
	$4 = ((int_64)$4 & (int_64)15)
	
.LABEL $label$55
	$5 = ($5 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$51 }
	CALL eosio_assert(((int_64)$9 == (int_64)1397703940), [8934])
	if ( ((int_64)$10 < (int_64)$13) ){ goto $label$57 }
	if ( (int_64)($13 == 0) ){ goto $label$57 }
	$5 = *($2 + [104])
	if ( (( *($2 + [108]) ? uint_32($5 >> [1]) : ($5 & [1]) ) == 0) ){ goto $label$57 }
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8192]
	$14 = (int_64)0
	
.LOOP $label$58:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$63 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$62 }
	$7 = ($7 + [-91])
	goto $label$61 
	
.LABEL $label$63
	$8 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$60 }
	goto $label$59 
	
.LABEL $label$62
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$61
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$60
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$59
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$14 = ((int_64)$8 | (int_64)$14)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$58 }
	*(($2 + [80])) = [0]
	*($2 + [96]) = (int_64)1397703940
	*($2 + [88]) = $13
	*($2 + [72]) = (int_64)0
	$5 = CALL $108([9783])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$66 }
	*($2 + [72]) = ($5 << [1])
	$7 = (($2 + [72]) | [1])
	if ( $5 ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$11 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($2 + [72]) = ($11 | [1])
	*($2 + [80]) = $7
	*($2 + [76]) = $5
	
.LABEL $label$65
	CALL memcpy($7, [9783], $5)
	
.LABEL $label$64
	*(($7 + $5)) = [0]
	*((($2 + [24]) + [8])) = *((($2 + [88]) + [8]))
	*($2 + [24]) = *($2 + [88])
	CALL $27($0, $14, $1, ($2 + [24]), ($2 + [72]))
	if ( ((*($2 + [72]) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*($2 + [80]))
	
.LABEL $label$67
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [8192]
	$14 = (int_64)0
	
.LOOP $label$68:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$73 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$72 }
	$7 = ($7 + [-91])
	goto $label$71 
	
.LABEL $label$73
	$8 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$70 }
	goto $label$69 
	
.LABEL $label$72
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$71
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$70
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$69
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$14 = ((int_64)$8 | (int_64)$14)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$68 }
	*(($2 + [48])) = [0]
	*($2 + [64]) = (int_64)1397703940
	*($2 + [56]) = $13
	*($2 + [40]) = (int_64)0
	$5 = CALL $108([9783])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$76 }
	*($2 + [40]) = ($5 << [1])
	$7 = (($2 + [40]) | [1])
	if ( $5 ){ goto $label$75 }
	goto $label$74 
	
.LABEL $label$76
	$11 = (($5 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($2 + [40]) = ($11 | [1])
	*($2 + [48]) = $7
	*($2 + [44]) = $5
	
.LABEL $label$75
	CALL memcpy($7, [9783], $5)
	
.LABEL $label$74
	*(($7 + $5)) = [0]
	*((($2 + [8]) + [8])) = *((($2 + [56]) + [8]))
	*($2 + [8]) = *($2 + [56])
	CALL $27($0, $6, $14, ($2 + [8]), ($2 + [40]))
	if ( ((*($2 + [40]) & [1]) == 0) ){ goto $label$57 }
	CALL _ZdlPv(*($2 + [48]))
	
.LABEL $label$57
	if ( ((*($2 + [104]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($2 + [112])))
	
.LABEL $label$20
	$global$0 = ($2 + [144])
	return (unreachable)
	
.LABEL $label$19
	CALL $99(($2 + [72]))
	
.LABEL $label$18
	CALL $99(($2 + [40]))
	(unreachable)
}

int_32 .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $56($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $104($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $104($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $99($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$1 = CALL $100($2, ($1 + [8]))
	$0 = *($0 + [4])
	$4 = *($0 + [4])
	$5 = (*(*($0)) + int_32($4 >> [1]))
	$0 = *($0)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($5) + $0))
	
.LABEL $label$1
	$4 = CALL $100(($2 + [16]), $1)
	CALL void $5((int_32 $3), (int_64 $4), (int_32 $0))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9113])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $111($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($9 + [8]) = (int_64)0
	CALL eosio_assert([1], [8993])
	$10 = ($9 + [16])
	$11 = ($9 + [8])
	$12 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$12 = $13
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$12 = $13
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9042])
	*($9 + [24]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [9140])
	CALL memcpy($9, $7, [8])
	$5 = ($6 & [-8])
	CALL eosio_assert(((int_32)$5 != (int_32)[8]), [9140])
	CALL memcpy($11, ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$5 != (int_32)[16]), [9140])
	CALL memcpy($10, ($7 + [16]), [8])
	*($9 + [28]) = $1
	*($3 + [24]) = $9
	$12 = *($9)
	*($3 + [16]) = $12
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $12
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $79($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $114($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

int_32 .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [9136])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $31($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [9140])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $114 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [18268])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [18076]
	$3 = (((int_32)$1 * (int_32)[12]) + [18076])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

void .FUNC $35 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [32])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [9198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [9244])
	$5 = *($1)
	$6 = ($1 + [16])
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*($6)), [9625])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9668])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9687])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9295])
	CALL eosio_assert([1], [9445])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [9445])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9445])
	CALL memcpy(($4 + [16]), $6, [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [32])
}

int_32 .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $113($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [8228])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $113 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9876]) == 0) ){ goto $label$2 }
	$2 = *([0] + [9880])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [9876]) = [1]
	$2 = ($2 << [16])
	*([0] + [9880]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9880])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [9880]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [9876]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [9876]) = [1]
	$3 = ($3 << [16])
	*([0] + [9880]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9880])
	
.LABEL $label$10
	*([0] + [9880]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

int_32 .FUNC $110 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $111 (int_32 $0)
{
	return CALL $112([9884], $0)
}

void .FUNC $29 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$3 = ($global$0 - [32])
	$global$0 = $3
	*($3 + [24]) = $1
	$4 = ($0 + [16])
	$6 = *(($0 + [44]))
	$5 = *(($0 + [40]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$1) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [9062])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($4), *(($0 + [24])), (int_64)-5069070907531148288, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $34($4, $7)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$4), [9062])
	
.LABEL $label$2
	$1 = *($0)
	*($3 + [16]) = $2
	CALL eosio_assert([1], [9163])
	CALL $35($4, $8, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$1
	$1 = *($0)
	*($3 + [20]) = $2
	*($3 + [16]) = ($3 + [24])
	CALL $36(($3 + [8]), $4, $1, ($3 + [16]))
	$global$0 = ($3 + [32])
}

void .FUNC $28 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [56]) == (int_32)$0), [9198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [9244])
	$6 = [44]
	$7 = *($1)
	$8 = $7
	$3 = *($3)
	$9 = ($1 + [44])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$1 }
	CALL $60($9, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$7 == (int_64)$8), [9295])
	$3 = *($1 + [44])
	$10 = *(($1 + [48]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($10 - $3) / (int_32)[40]))
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$3 == (int_32)$10) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [24])
	$11 = *($3 + [24])
	$9 = *(($3 + [28]))
	$12 = ($9 - $11)
	$8 = (CASTING uint_64)(uint_32 int_32($12 >> [4]))
	
.LOOP $label$5:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$11 == (int_32)$9) ){ goto $label$6 }
	$6 = (($12 & [-16]) + $6)
	
.LABEL $label$6
	$3 = ($3 + [40])
	if ( ((int_32)$3 != (int_32)$10) ){ goto $label$4 }
	
.LABEL $label$3
	if ( ($6 <= [513]) ){ goto $label$8 }
	$3 = CALL $111($6)
	goto $label$7 
	
.LABEL $label$8
	$3 = ($4 - (($6 + [15]) & [-16]))
	$global$0 = $3
	
.LABEL $label$7
	*($5 + [4]) = $3
	*($5) = $3
	*($5 + [8]) = ($3 + $6)
	CALL $59($5, $1)
	CALL db_update_i64(*($1 + [60]), $2, $3, $6)
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$11 }
	if ( ((uint_64)$7 >= (uint_64)*($0 + [16])) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $114($3)
	if ( (uint_64)($7 <= *($0 + [16])) ){ goto $label$9 }
	
.LABEL $label$10
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$9
	$global$0 = ($5 + [16])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL _ZdlPv(*(($1 + [16])))
	
.LABEL $label$11
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL _ZdlPv($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $107 (int_32 $0)
{
}

void .FUNC $106 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [9476])
	$5 = CALL _Znwj([56])
	$6 = CALL $70($5)
	*($5 + [40]) = $1
	*($5) = *(*($3))
	$7 = *($3 + [4])
	*(($5 + [16])) = *(($7 + [8]))
	*($5 + [8]) = *($7)
	$3 = *($3 + [8])
	*(($5 + [32])) = *(($3 + [8]))
	*($5 + [24]) = *($3)
	*($4 + [72]) = (($4 + [16]) + [40])
	*($4 + [68]) = ($4 + [16])
	*($4 + [64]) = ($4 + [16])
	CALL $71(($4 + [64]), $6)
	$8 = *($5)
	$6 = CALL db_store_i64(*($1 + [8]), (int_64)5313531926794913280, $2, $8, ($4 + [16]), [40])
	*($5 + [44]) = $6
	if ( (uint_64)($8 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [64]) = $5
	$8 = *($5)
	*($4 + [16]) = $8
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $8
	*($3 + [16]) = $6
	*($4 + [64]) = [0]
	*($3) = $5
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $72(($1 + [24]), ($4 + [64]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $5
	*($0) = $1
	$5 = *($4 + [64])
	*($4 + [64]) = [0]
	if ( ($5 == 0) ){ goto $label$4 }
	CALL _ZdlPv($5)
	
.LABEL $label$4
	$global$0 = ($4 + [80])
}

void .FUNC $20 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	$4 = ($global$0 - [64])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [9198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [9244])
	$5 = *($1)
	$6 = *($3)
	CALL eosio_assert(((int_64)*($6 + [8]) == (int_64)*(($1 + [16]))), [9625])
	$7 = ((int_64)*($1 + [8]) + (int_64)*($6))
	*($1 + [8]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9668])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [9687])
	$3 = *($3 + [4])
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [32]))), [9625])
	$7 = ((int_64)*($1 + [24]) + (int_64)*($3))
	*($1 + [24]) = $7
	CALL eosio_assert(((int_64)$7 > (int_64)-4611686018427387904), [9668])
	CALL eosio_assert(((int_64)*($1 + [24]) < (int_64)4611686018427387904), [9687])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [9295])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	CALL $71(($4 + [48]), $1)
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [64])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	$3 = ((int_32)$2 / (int_32)[40])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$1 }
	$2 = CALL _Znwj($2)
	*(($4 = ($0 + [4]))) = $2
	*(($0 + [8])) = ($2 + ((int_32)$3 * (int_32)[40]))
	*($0) = $2
	$5 = *(($1 + [4]))
	$3 = *($1)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$3 }
	
.LOOP $label$4:
	*($2) = *($3)
	*(($2 + [16])) = *(($3 + [16]))
	*(($2 + [8])) = *(($3 + [8]))
	*($2 + [24]) = [0]
	*(($1 = ($2 + [28]))) = (int_64)0
	$7 = ($3 + [24])
	$6 = ($3 + [28])
	$8 = (*($6) - *($7))
	if ( ($8 == 0) ){ goto $label$5 }
	$9 = ($2 + [24])
	$10 = int_32($8 >> [4])
	if ( ((uint_32)$10 >= (uint_32)[268435456]) ){ goto $label$2 }
	$8 = CALL _Znwj($8)
	*($9) = $8
	*(($2 + [32])) = ($8 + ($10 << [4]))
	*($1) = $8
	$6 = *($7)
	$2 = (*($6) - $6)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($8, $6, $2)
	*($1) = (*($1) + $2)
	
.LABEL $label$5
	$2 = (*($4) + [40])
	*($4) = $2
	$3 = ($3 + [40])
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$4 }
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	CALL $106($9)
	
.LABEL $label$1
	CALL $106($0)
	(unreachable)
	return (unreachable)
}

void .FUNC $22 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_64 $24
	int_64 $25
	int_32 $26
	$1 = ($global$0 - [464])
	$global$0 = $1
	CALL require_auth(*($0 + [8]))
	$2 = ($0 + [104])
	$3 = CALL $5($2)
	if ( ((uint_32)$3 <= (uint_32)CALL $5(($0 + [40]))) ){ goto $label$7 }
	*(($1 + [456])) = [0]
	*($1 + [448]) = (int_64)0
	$4 = CALL $108([8599])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$10 }
	*($1 + [448]) = ($4 << [1])
	$5 = (($1 + [448]) | [1])
	$6 = $5
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$5 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($1 + [448]) = ($5 | [1])
	*($1 + [456]) = $6
	*($1 + [452]) = $4
	$5 = (($1 + [448]) | [1])
	
.LABEL $label$9
	CALL memcpy($6, [8599], $4)
	
.LABEL $label$8
	*(($6 + $4)) = [0]
	CALL eosio_assert([0], ( *($1 + [456]) ? $5 : (*($1 + [448]) & [1]) ))
	if ( ((*($1 + [448]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($1 + [456])))
	
.LABEL $label$7
	CALL prints([8627])
	$7 = (CASTING uint_64)(uint_32 $3)
	CALL printui($7)
	$8 = ($0 + [184])
	$3 = *(($0 + [212]))
	$6 = *(($0 + [208]))
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	
.LOOP $label$14:
	$4 = ($3 + [-24])
	$9 = *($4)
	if ( ((int_64)*($9) == (int_64)$7) ){ goto $label$13 }
	$3 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$8), [9062])
	goto $label$11 
	
.LABEL $label$12
	$9 = [0]
	$4 = CALL db_find_i64(*($8), *(($0 + [192])), (int_64)5987990370900770816, $7)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$11 }
	$9 = CALL $6($8, $4)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)$8), [9062])
	
.LABEL $label$11
	*(($1 + [440])) = [0]
	*($1 + [432]) = (int_64)0
	$4 = CALL $108([8654])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$19 }
	*($1 + [432]) = ($4 << [1])
	$6 = (($1 + [432]) | [1])
	$3 = $6
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$6 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($6)
	*($1 + [432]) = ($6 | [1])
	*($1 + [440]) = $3
	*($1 + [436]) = $4
	$6 = (($1 + [432]) | [1])
	
.LABEL $label$18
	CALL memcpy($3, [8654], $4)
	
.LABEL $label$17
	*(($3 + $4)) = [0]
	$10 = ((int_32)$9 != (int_32)[0])
	CALL eosio_assert($10, ( *($1 + [440]) ? $6 : (*($1 + [432]) & [1]) ))
	if ( ((*($1 + [432]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($1 + [440])))
	
.LABEL $label$20
	*(($1 + [424])) = [0]
	*($1 + [416]) = (int_64)0
	$4 = CALL $108([8672])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$23 }
	*($1 + [416]) = ($4 << [1])
	$6 = (($1 + [416]) | [1])
	$3 = $6
	if ( $4 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$6 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($6)
	*($1 + [416]) = ($6 | [1])
	*($1 + [424]) = $3
	*($1 + [420]) = $4
	$6 = (($1 + [416]) | [1])
	
.LABEL $label$22
	CALL memcpy($3, [8672], $4)
	
.LABEL $label$21
	*(($3 + $4)) = [0]
	CALL eosio_assert(((int_64)*(($9 + [16])) == (int_64)*(($9 + [32]))), [8934])
	CALL eosio_assert(((int_64)*($9 + [8]) == (int_64)*($9 + [24])), ( *($1 + [424]) ? $6 : (*($1 + [416]) & [1]) ))
	if ( ((*($1 + [416]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*(($1 + [424])))
	
.LABEL $label$24
	if ( ((uint_32)*($9 + [40]) <= (uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))) ){ goto $label$25 }
	*(($1 + [408])) = [0]
	*($1 + [400]) = (int_64)0
	$4 = CALL $108([8712])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$28 }
	*($1 + [400]) = ($4 << [1])
	$6 = (($1 + [400]) | [1])
	$3 = $6
	if ( $4 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$6 = (($4 + [16]) & [-16])
	$3 = CALL _Znwj($6)
	*($1 + [400]) = ($6 | [1])
	*($1 + [408]) = $3
	*($1 + [404]) = $4
	$6 = (($1 + [400]) | [1])
	
.LABEL $label$27
	CALL memcpy($3, [8712], $4)
	
.LABEL $label$26
	*(($3 + $4)) = [0]
	CALL eosio_assert([0], ( *($1 + [408]) ? $6 : (*($1 + [400]) & [1]) ))
	if ( ((*($1 + [400]) & [1]) == 0) ){ goto $label$25 }
	CALL _ZdlPv(*(($1 + [408])))
	
.LABEL $label$25
	$4 = ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)) / (uint_32)[86400])
	if ( ((int_64)*([0]) != (int_64)0) ){ goto $label$29 }
	*([0]) = ((int_64)*(($0 + [8])) + (int_64)CALL current_time())
	
.LABEL $label$29
	$3 = ($0 + [168])
	$11 = (CASTING uint_64)(uint_32 $4)
	*((($1 + [384]) + [8])) = *([0])
	*($1 + [384]) = *([0])
	$12 = *(($9 + [24]))
	CALL __multi3(($1 + [96]), $12, (int_64)$12 >> (int_64)63), (int_64)95, (int_64)0)
	$13 = *(($9 + [32]))
	$14 = *(($9 + [8]))
	$12 = *((($1 + [96]) + [8]))
	$15 = *($1 + [96])
	CALL eosio_assert(( (uint_64)($15 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [9552])
	CALL eosio_assert(( ((uint_64)$15 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [9576])
	CALL eosio_assert([1], [9461])
	CALL eosio_assert([1], [9527])
	$16 = CALL $23(($1 + [368]), ($9 + [44]))
	*($1 + [360]) = [0]
	*($1 + [352]) = (int_64)0
	$17 = ((int_64)$14 / (int_64)10000)
	$15 = ((int_64)$15 / (int_64)100)
	$12 = (int_64)6
	
.LOOP $label$30:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$30 }
	if ( CALL $2($0, (int_64)-8451382365825007616) ){ goto $label$31 }
	*(($1 + [344])) = [0]
	*($1 + [336]) = (int_64)0
	$4 = CALL $108([8752])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$34 }
	*($1 + [336]) = ($4 << [1])
	$5 = (($1 + [336]) | [1])
	$6 = $5
	if ( $4 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$5 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($1 + [336]) = ($5 | [1])
	*($1 + [344]) = $6
	*($1 + [340]) = $4
	$5 = (($1 + [336]) | [1])
	
.LABEL $label$33
	CALL memcpy($6, [8752], $4)
	
.LABEL $label$32
	*(($6 + $4)) = [0]
	CALL eosio_assert([0], ( *($1 + [344]) ? $5 : (*($1 + [336]) & [1]) ))
	if ( ((*($1 + [336]) & [1]) == 0) ){ goto $label$31 }
	CALL _ZdlPv(*(($1 + [344])))
	
.LABEL $label$31
	$12 = (int_64)6
	
.LOOP $label$35:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$35 }
	if ( CALL $2($0, (int_64)-8451382348645138432) ){ goto $label$36 }
	*(($1 + [328])) = [0]
	*($1 + [320]) = (int_64)0
	$4 = CALL $108([8767])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$39 }
	*($1 + [320]) = ($4 << [1])
	$5 = (($1 + [320]) | [1])
	$6 = $5
	if ( $4 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$5 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($1 + [320]) = ($5 | [1])
	*($1 + [328]) = $6
	*($1 + [324]) = $4
	$5 = (($1 + [320]) | [1])
	
.LABEL $label$38
	CALL memcpy($6, [8767], $4)
	
.LABEL $label$37
	*(($6 + $4)) = [0]
	CALL eosio_assert([0], ( *($1 + [328]) ? $5 : (*($1 + [320]) & [1]) ))
	if ( ((*($1 + [320]) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($1 + [328])))
	
.LABEL $label$36
	$12 = (int_64)6
	
.LOOP $label$40:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$40 }
	if ( CALL $2($0, (int_64)-8451382331465269248) ){ goto $label$41 }
	*(($1 + [312])) = [0]
	*($1 + [304]) = (int_64)0
	$4 = CALL $108([8782])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$44 }
	*($1 + [304]) = ($4 << [1])
	$5 = (($1 + [304]) | [1])
	$6 = $5
	if ( $4 ){ goto $label$43 }
	goto $label$42 
	
.LABEL $label$44
	$5 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($1 + [304]) = ($5 | [1])
	*($1 + [312]) = $6
	*($1 + [308]) = $4
	$5 = (($1 + [304]) | [1])
	
.LABEL $label$43
	CALL memcpy($6, [8782], $4)
	
.LABEL $label$42
	*(($6 + $4)) = [0]
	CALL eosio_assert([0], ( *($1 + [312]) ? $5 : (*($1 + [304]) & [1]) ))
	if ( ((*($1 + [304]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($1 + [312])))
	
.LABEL $label$41
	$12 = (int_64)6
	
.LOOP $label$45:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$45 }
	if ( CALL $2($0, (int_64)-8451382314285400064) ){ goto $label$46 }
	*(($1 + [296])) = [0]
	*($1 + [288]) = (int_64)0
	$4 = CALL $108([8797])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$49 }
	*($1 + [288]) = ($4 << [1])
	$5 = (($1 + [288]) | [1])
	$6 = $5
	if ( $4 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$5 = (($4 + [16]) & [-16])
	$6 = CALL _Znwj($5)
	*($1 + [288]) = ($5 | [1])
	*($1 + [296]) = $6
	*($1 + [292]) = $4
	$5 = (($1 + [288]) | [1])
	
.LABEL $label$48
	CALL memcpy($6, [8797], $4)
	
.LABEL $label$47
	*(($6 + $4)) = [0]
	CALL eosio_assert([0], ( *($1 + [296]) ? $5 : (*($1 + [288]) & [1]) ))
	if ( ((*($1 + [288]) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($1 + [296])))
	
.LABEL $label$46
	$12 = (int_64)6
	
.LOOP $label$50:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$50 }
	$4 = *($0 + [32])
	if ( $4 ){ goto $label$51 }
	*(($4 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*(($0 + [32])) = $4
	$12 = *($0 + [16])
	*($4) = $12
	*($4 + [8]) = $12
	*($4 + [16]) = $12
	*($4 + [24]) = $12
	
.LABEL $label$51
	CALL $3(($1 + [160]), $4, (int_64)-8451382365825007616)
	$4 = *($1 + [356])
	if ( ((uint_32)$4 >= (uint_32)*((($1 + [352]) + [8]))) ){ goto $label$53 }
	*($4) = *($1 + [160])
	$4 = (($1 + [160]) + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($1 + [160]) = (int_64)0
	*($1 + [356]) = (*($1 + [356]) + [12])
	goto $label$52 
	
.LABEL $label$53
	CALL $24(($1 + [352]), ($1 + [160]))
	if ( ((*($1 + [160]) & [1]) == 0) ){ goto $label$52 }
	CALL _ZdlPv(*($1 + [168]))
	
.LABEL $label$52
	$12 = (int_64)6
	
.LOOP $label$54:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$54 }
	$6 = ($0 + [32])
	$4 = *($6)
	if ( $4 ){ goto $label$55 }
	*(($4 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($6) = $4
	$12 = *($0 + [16])
	*($4) = $12
	*($4 + [8]) = $12
	*($4 + [16]) = $12
	*($4 + [24]) = $12
	
.LABEL $label$55
	CALL $3(($1 + [160]), $4, (int_64)-8451382348645138432)
	$4 = *($1 + [356])
	if ( ((uint_32)$4 >= (uint_32)*((($1 + [352]) + [8]))) ){ goto $label$57 }
	*($4) = *($1 + [160])
	$4 = (($1 + [160]) + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($1 + [160]) = (int_64)0
	*($1 + [356]) = (*($1 + [356]) + [12])
	goto $label$56 
	
.LABEL $label$57
	CALL $24(($1 + [352]), ($1 + [160]))
	if ( ((*($1 + [160]) & [1]) == 0) ){ goto $label$56 }
	CALL _ZdlPv(*($1 + [168]))
	
.LABEL $label$56
	$12 = (int_64)6
	
.LOOP $label$58:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$58 }
	$6 = ($0 + [32])
	$4 = *($6)
	if ( $4 ){ goto $label$59 }
	*(($4 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($6) = $4
	$12 = *($0 + [16])
	*($4) = $12
	*($4 + [8]) = $12
	*($4 + [16]) = $12
	*($4 + [24]) = $12
	
.LABEL $label$59
	CALL $3(($1 + [160]), $4, (int_64)-8451382331465269248)
	$4 = *($1 + [356])
	if ( ((uint_32)$4 >= (uint_32)*((($1 + [352]) + [8]))) ){ goto $label$61 }
	*($4) = *($1 + [160])
	$4 = (($1 + [160]) + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($1 + [160]) = (int_64)0
	*($1 + [356]) = (*($1 + [356]) + [12])
	goto $label$60 
	
.LABEL $label$61
	CALL $24(($1 + [352]), ($1 + [160]))
	if ( ((*($1 + [160]) & [1]) == 0) ){ goto $label$60 }
	CALL _ZdlPv(*($1 + [168]))
	
.LABEL $label$60
	$12 = (int_64)6
	
.LOOP $label$62:
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$62 }
	$6 = ($0 + [32])
	$4 = *($6)
	if ( $4 ){ goto $label$63 }
	*(($4 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($4 + [40 align=4]) = (int_64)0
	*($4 + [48]) = [0]
	*($6) = $4
	$12 = *($0 + [16])
	*($4) = $12
	*($4 + [8]) = $12
	*($4 + [16]) = $12
	*($4 + [24]) = $12
	
.LABEL $label$63
	CALL $3(($1 + [160]), $4, (int_64)-8451382314285400064)
	$4 = *($1 + [356])
	if ( ((uint_32)$4 >= (uint_32)*((($1 + [352]) + [8]))) ){ goto $label$65 }
	*($4) = *($1 + [160])
	$4 = (($1 + [160]) + [8])
	*(($4 + [8])) = *($4)
	*($4) = [0]
	*($1 + [160]) = (int_64)0
	*($1 + [356]) = (*($1 + [356]) + [12])
	goto $label$64 
	
.LABEL $label$65
	CALL $24(($1 + [352]), ($1 + [160]))
	if ( ((*($1 + [160]) & [1]) == 0) ){ goto $label$64 }
	CALL _ZdlPv(*($1 + [168]))
	
.LABEL $label$64
	*((($1 + [80]) + [8])) = $13
	*($1 + [264]) = $13
	*($1 + [80]) = $15
	*($1 + [256]) = $15
	CALL $25(($1 + [272]), $3, ($1 + [80]), ($1 + [352]))
	if ( (uint_64)(((int_64)$14 + (int_64)9999) <= (int_64)19999) ){ goto $label$66 }
	$5 = (($1 + [384]) + [8])
	$4 = [0]
	$14 = $17
	
.LOOP $label$67:
	CALL sha256($5, [8], ($1 + [160]))
	$13 = ((int_64)((int_64)*($1 + [161]) << (int_64)32) | (int_64)*($1 + [160]))
	*($5) = $13
	$6 = *($1 + [272])
	$3 = ($6 + $4)
	$12 = *($3)
	$6 = ($6 + ((CASTING uint_32)(uint_64 ((uint_64)$13 % (uint_64)$17)) << [4]))
	*($3) = *($6)
	$3 = ($3 + [8])
	$13 = *($3)
	$18 = ($6 + [8])
	*($3) = *($18)
	*((($1 + [160]) + [8])) = $13
	*($18) = $13
	*($6) = $12
	*($1 + [160]) = $12
	$4 = ($4 + [16])
	$14 = ((int_64)$14 + (int_64)-1)
	if ( ((int_64)($14 == 0) == 0) ){ goto $label$67 }
	
.LABEL $label$66
	$18 = *($16)
	if ( ((int_32)$18 == (int_32)*($16 + [4])) ){ goto $label$69 }
	$19 = ($1 + [180])
	$20 = (($1 + [224]) | [1])
	$21 = (($1 + [160]) + [40])
	$22 = ($1 + [204])
	
.LOOP $label$70:
	$12 = *($18 + [8])
	CALL eosio_assert([1], [8993])
	$14 = ((int_64)$12 / (int_64)10000)
	$12 = (int_64)5459781
	$4 = [0]
	
.LOOP $label$72:
	$5 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$71 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$73 }
	$12 = $13
	$5 = [1]
	$3 = $4
	$4 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[6]) ){ goto $label$72 }
	goto $label$71 
	
.LABEL $label$73
	$12 = $13
	
.LOOP $label$74:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$71 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $3 ){ goto $label$74 }
	$5 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$72 }
	
.LABEL $label$71
	CALL eosio_assert($5, [9042])
	$12 = (int_64)0
	$3 = ($18 + [28])
	if ( ((int_64)$14 <= (int_64)(CASTING uint_64)(uint_32 int_32((*($3) - *($18 + [24])) >> [4]))) ){ goto $label$76 }
	$23 = ($18 + [24])
	$4 = (((CASTING uint_32)(uint_64 $17) << [4]) + [-16])
	$24 = (int_64)0
	
.LOOP $label$77:
	$6 = (*($1 + [272]) + $4)
	$13 = *(($6 + [8]))
	*(($5 = (($1 + [160]) + [8]))) = $13
	*($1 + [160]) = *($6)
	CALL eosio_assert(((int_64)$13 == (int_64)1397703940), [9625])
	$24 = ((int_64)*($1 + [160]) + (int_64)$24)
	CALL eosio_assert(((int_64)$24 > (int_64)-4611686018427387904), [9668])
	CALL eosio_assert(((int_64)$24 < (int_64)4611686018427387904), [9687])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)*(($18 + [32]))) ){ goto $label$79 }
	*($6) = *($1 + [160])
	*(($6 + [8])) = *($5)
	$6 = (*($3) + [16])
	*($3) = $6
	goto $label$78 
	
.LABEL $label$79
	CALL $26($23, ($1 + [160]))
	$6 = *($3)
	
.LABEL $label$78
	$17 = ((int_64)$17 + (int_64)-1)
	$4 = ($4 + [-16])
	if ( ((int_64)$14 > (int_64)(CASTING uint_64)(uint_32 int_32(($6 - *($23)) >> [4]))) ){ goto $label$77 }
	goto $label$75 
	
.LABEL $label$76
	$24 = (int_64)0
	
.LABEL $label$75
	$25 = *($18)
	$14 = (int_64)59
	$4 = [8192]
	$15 = (int_64)0
	
.LOOP $label$80:
	if ( ((uint_64)$12 > (uint_64)(int_64)10) ){ goto $label$85 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$3 = ($3 + [-91])
	goto $label$83 
	
.LABEL $label$85
	$13 = (int_64)0
	if ( ((int_64)$12 == (int_64)11) ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$84
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$82
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$81
	$4 = ($4 + [1])
	$14 = ((int_64)$14 + (int_64)4294967291)
	$15 = ((int_64)$13 | (int_64)$15)
	$12 = ((int_64)$12 + (int_64)1)
	if ( ((int_64)$12 != (int_64)13) ){ goto $label$80 }
	*(($5 = (($1 + [240]) + [8]))) = (int_64)1397703940
	*($1 + [240]) = $24
	*($19) = [0]
	$4 = $19
	$12 = $7
	
.LOOP $label$86:
	$13 = ((uint_64)$12 / (uint_64)(int_64)10)
	*(($4 = ($4 + [-1]))) = ((CASTING uint_32)(uint_64 (int_64))($12 - ((int_64)$13 * (int_64)10))) | [48])
	$3 = ((uint_64)$12 > (uint_64)(int_64)9)
	$12 = $13
	if ( $3 ){ goto $label$86 }
	*(($23 = (($1 + [224]) + [8]))) = [0]
	*($1 + [224]) = (int_64)0
	$3 = CALL $108($4)
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$68 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$89 }
	*($1 + [224]) = ($3 << [1])
	$6 = $20
	if ( $3 ){ goto $label$88 }
	goto $label$87 
	
.LABEL $label$89
	$26 = (($3 + [16]) & [-16])
	$6 = CALL _Znwj($26)
	*($23) = $6
	*($1 + [224]) = ($26 | [1])
	*($1 + [228]) = $3
	
.LABEL $label$88
	CALL memcpy($6, $4, $3)
	
.LABEL $label$87
	*(($6 + $3)) = [0]
	*((($1 + [64]) + [8])) = *($5)
	*($1 + [64]) = *($1 + [240])
	CALL $27($0, $25, $15, ($1 + [64]), ($1 + [224]))
	if ( ((*($1 + [224]) & [1]) == 0) ){ goto $label$90 }
	CALL _ZdlPv(*($23))
	
.LABEL $label$90
	*((($1 + [160]) + [8])) = $11
	*((($1 + [160]) + [24])) = $11
	*((($1 + [160]) + [32])) = (int_64)-1
	*($21) = (int_64)0
	*((($1 + [160]) + [48])) = [0]
	$14 = *($18)
	*(($23 = (($1 + [144]) + [8]))) = (int_64)1397703940
	$12 = *(($0 + [8]))
	*((($1 + [160]) + [16])) = $12
	*($1 + [160]) = $12
	CALL eosio_assert(((int_64)*(($18 + [16])) == (int_64)1397703940), [9354])
	$12 = (int_64)
	*($1 + [144]) = $12($24 - *($18 + [8])))
	CALL eosio_assert(((int_64)$12 > (int_64)-4611686018427387904), [9402])
	CALL eosio_assert(((int_64)$12 < (int_64)4611686018427387904), [9424])
	*(($5 = (($1 + [128]) + [8]))) = (int_64)1397703940
	*($1 + [128]) = (int_64)0
	CALL eosio_assert([1], [8993])
	$12 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$93:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$92 }
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$12 & (int_64)65280) == (int_64)0) ){ goto $label$94 }
	$12 = $13
	$3 = [1]
	$6 = $4
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$93 }
	goto $label$91 
	
.LABEL $label$94
	$12 = $13
	
.LOOP $label$95:
	if ( ((int_64)((int_64)$12 & (int_64)65280) != (int_64)0) ){ goto $label$92 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8)
	$3 = ((int_32)$4 < (int_32)[6])
	$6 = ($4 + [1])
	$4 = $6
	if ( $3 ){ goto $label$95 }
	$3 = [1]
	$4 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[6]) ){ goto $label$93 }
	goto $label$91 
	
.LABEL $label$92
	$3 = [0]
	
.LABEL $label$91
	CALL eosio_assert($3, [9042])
	*((($1 + [48]) + [8])) = *($23)
	*((($1 + [32]) + [8])) = *($5)
	*($1 + [48]) = *($1 + [144])
	*($1 + [32]) = *($1 + [128])
	CALL $11(($1 + [160]), $14, ($1 + [48]), ($1 + [32]))
	$6 = *($21)
	if ( ($6 == 0) ){ goto $label$96 }
	$4 = *($22)
	if ( ((int_32)$4 == (int_32)$6) ){ goto $label$98 }
	
.LOOP $label$99:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$100 }
	CALL _ZdlPv($3)
	
.LABEL $label$100
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$99 }
	$4 = *($21)
	goto $label$97 
	
.LABEL $label$98
	$4 = $6
	
.LABEL $label$97
	*($22) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$96
	$18 = ($18 + [40])
	if ( ((int_32)$18 != (int_32)*(($16 + [4]))) ){ goto $label$70 }
	
.LABEL $label$69
	$4 = ($0 + [8])
	$12 = *($4)
	*($1 + [160]) = $16
	CALL eosio_assert($10, [9163])
	CALL $28($8, $9, $12, ($1 + [160]))
	CALL $10($2, *($4), [1])
	$12 = *(($9 + [24]))
	CALL __multi3($1, $12, (int_64)$12 >> (int_64)63), (int_64)5, (int_64)0)
	$14 = *(($9 + [32]))
	$12 = *(($1 + [8]))
	$13 = *($1)
	CALL eosio_assert(( (uint_64)($13 <= (int_64)4611686018427387904) ? ((int_64)$12 < (int_64)0) : (int_64)($12 == 0) ), [9552])
	CALL eosio_assert(( ((uint_64)$13 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$12 > (int_64)-1) : ((int_64)$12 == (int_64)-1) ), [9576])
	*($1 + [120]) = $14
	CALL eosio_assert([1], [9461])
	CALL eosio_assert([1], [9527])
	*((($1 + [16]) + [8])) = *($1 + [120])
	$12 = ((int_64)$13 / (int_64)200)
	*($1 + [16]) = $12
	*($1 + [112]) = $12
	CALL $29(($0 + [224]), $11, ($1 + [16]))
	$4 = *($1 + [272])
	if ( ($4 == 0) ){ goto $label$101 }
	*($1 + [276]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$101
	$6 = *($1 + [352])
	if ( ($6 == 0) ){ goto $label$102 }
	$3 = *($1 + [356])
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$104 }
	
.LOOP $label$105:
	$4 = ($3 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$106 }
	CALL _ZdlPv(*(($3 + [-4])))
	
.LABEL $label$106
	$3 = $4
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$105 }
	$4 = *($1 + [352])
	goto $label$103 
	
.LABEL $label$104
	$4 = $6
	
.LABEL $label$103
	*($1 + [356]) = $6
	CALL _ZdlPv($4)
	
.LABEL $label$102
	$5 = *($16)
	if ( ($5 == 0) ){ goto $label$107 }
	$18 = ($16 + [4])
	$4 = *($18)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$109 }
	
.LOOP $label$110:
	$3 = ($4 + [-40])
	$6 = *(($4 + [-16]))
	if ( ($6 == 0) ){ goto $label$111 }
	*(($4 + [-12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$111
	$4 = $3
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$110 }
	$4 = *($16)
	goto $label$108 
	
.LABEL $label$109
	$4 = $5
	
.LABEL $label$108
	*($18) = $5
	CALL _ZdlPv($4)
	
.LABEL $label$107
	$global$0 = ($1 + [464])
	return (unreachable)
	
.LABEL $label$68
	CALL $99(($1 + [224]))
	
.LABEL $label$16
	CALL $99(($1 + [432]))
	
.LABEL $label$15
	CALL $99(($1 + [416]))
	
.LABEL $label$6
	CALL $99(($1 + [448]))
	
.LABEL $label$5
	CALL $99(($1 + [400]))
	
.LABEL $label$4
	CALL $99(($1 + [336]))
	
.LABEL $label$3
	CALL $99(($1 + [320]))
	
.LABEL $label$2
	CALL $99(($1 + [304]))
	
.LABEL $label$1
	CALL $99(($1 + [288]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

void .FUNC $25 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_64 $19
	$4 = ($global$0 - [80])
	$global$0 = $4
	*($0 + [8]) = [0]
	$5 = (int_64)0
	*($0) = (int_64)0
	*($4 + [40]) = [0]
	*($4 + [32]) = (int_64)0
	if ( ((int_64)*([0]) != (int_64)0) ){ goto $label$1 }
	*([0]) = ((int_64)*($1) + (int_64)CALL current_time())
	
.LABEL $label$1
	*(($1 = (($4 + [16]) + [8]))) = *([0])
	*($4 + [16]) = *([0])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)*($3 + [4])) ){ goto $label$2 }
	$7 = (($4 + [48]) | [1])
	$5 = (int_64)0
	$8 = ($3 + [4])
	
.LOOP $label$3:
	$10 = CALL $105($6, [44], [0])
	$13 = ($10 + [1])
	$12 = CALL $105($6, [44], $13)
	CALL $101(($4 + [48]), $6, [0], $10, $6)
	$14 = (($4 + [48]) + [8])
	$15 = *($14)
	$16 = (int_64)0
	$17 = ($3 & [1])
	$3 = *($4 + [48])
	$18 = ( *($4 + [52]) ? uint_32($3 >> [1]) : $17 )
	if ( ((int_32)$18 < (int_32)[1]) ){ goto $label$4 }
	$3 = ( $15 ? $7 : $17 )
	$18 = ($3 + $18)
	$16 = (int_64)0
	
.LOOP $label$5:
	$16 = ((int_64)((int_64)((int_64)$16 * (int_64)10) + (int_64)*($3)) + (int_64)-48)
	$3 = ($3 + [1])
	if ( ($3 <= $18) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($17 == 0) ){ goto $label$6 }
	CALL _ZdlPv($15)
	
.LABEL $label$6
	CALL $101(($4 + [48]), $6, $13, ($12 + ((int_32)$10 ^ (int_32)[-1])), $6)
	$17 = *($14)
	$10 = ($3 & [1])
	$3 = *($4 + [48])
	$18 = ( *($4 + [52]) ? uint_32($3 >> [1]) : $10 )
	if ( ((int_32)$18 >= (int_32)[1]) ){ goto $label$9 }
	$9 = (int_64)0
	if ( $10 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$3 = ( $17 ? $7 : $10 )
	$18 = ($3 + $18)
	$9 = (int_64)0
	
.LOOP $label$10:
	$9 = ((int_64)((int_64)((int_64)$9 * (int_64)10) + (int_64)*($3)) + (int_64)-48)
	$3 = ($3 + [1])
	if ( ($3 <= $18) ){ goto $label$10 }
	if ( ($10 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL _ZdlPv($17)
	
.LABEL $label$7
	$3 = ($12 + [1])
	$18 = *($6)
	if ( ($18 & [1]) ){ goto $label$12 }
	$18 = uint_32($18 >> [1])
	goto $label$11 
	
.LABEL $label$12
	$18 = *($6 + [4])
	
.LABEL $label$11
	CALL $101(($4 + [48]), $6, $3, ($18 + ((int_32)$12 ^ (int_32)[-1])), $6)
	$14 = *($14)
	$12 = ($3 & [1])
	$3 = *($4 + [48])
	$18 = ( *($4 + [52]) ? uint_32($3 >> [1]) : $12 )
	if ( ((int_32)$18 >= (int_32)[1]) ){ goto $label$15 }
	$11 = (int_64)0
	if ( $12 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$3 = ( $14 ? $7 : $12 )
	$18 = ($3 + $18)
	$11 = (int_64)0
	
.LOOP $label$16:
	$11 = ((int_64)((int_64)((int_64)$11 * (int_64)10) + (int_64)*($3)) + (int_64)-48)
	$3 = ($3 + [1])
	if ( ($3 <= $18) ){ goto $label$16 }
	if ( ($12 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	CALL _ZdlPv($14)
	
.LABEL $label$13
	if ( (int_64)($11 == 0) ){ goto $label$17 }
	$19 = (int_64))($9 - $16)
	
.LOOP $label$18:
	CALL sha256($1, [8], ($4 + [48]))
	$9 = ((int_64)((int_64)*($4 + [49]) << (int_64)32) | (int_64)*($4 + [48]))
	*($1) = $9
	$9 = ((int_64)((uint_64)$9 % (uint_64)$19) + (int_64)$16)
	*($4 + [48]) = $9
	$3 = *($4 + [36])
	if ( ((int_32)$3 == (int_32)*((($4 + [32]) + [8]))) ){ goto $label$20 }
	*($3) = $9
	*($4 + [36]) = ($3 + [8])
	goto $label$19 
	
.LABEL $label$20
	CALL $30(($4 + [32]), ($4 + [48]))
	
.LABEL $label$19
	$5 = ((int_64)*($4 + [48]) + (int_64)$5)
	$11 = ((int_64)$11 + (int_64)-1)
	if ( ((int_64)($11 == 0) == 0) ){ goto $label$18 }
	
.LABEL $label$17
	$6 = ($6 + [12])
	if ( ((int_32)$6 != (int_32)*($8)) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert([1], [8993])
	$11 = (int_64)5459781
	$3 = [0]
	
.LOOP $label$23:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$22 }
	$16 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$24 }
	$11 = $16
	$1 = [1]
	$18 = $3
	$3 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$24
	$11 = $16
	
.LOOP $label$25:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$22 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$1 = ((int_32)$3 < (int_32)[6])
	$18 = ($3 + [1])
	$3 = $18
	if ( $1 ){ goto $label$25 }
	$1 = [1]
	$3 = ($18 + [1])
	if ( ((int_32)$18 < (int_32)[6]) ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	$1 = [0]
	
.LABEL $label$21
	CALL eosio_assert($1, [9042])
	$3 = *($4 + [32])
	if ( ((int_32)$3 == (int_32)(*($4 + [36]) + [-8])) ){ goto $label$27 }
	$12 = ((int_64)$5 != (int_64)0)
	$18 = ($0 + [4])
	$9 = (int_64)0
	
.LOOP $label$28:
	$11 = *($3)
	$11 = *($2)
	CALL __multi3($4, $11, (int_64)$11 >> (int_64)63), $11, (int_64)$11 >> (int_64)63))
	$19 = *(($2 + [8]))
	$16 = *(($4 + [8]))
	$11 = *($4)
	CALL eosio_assert(( (uint_64)($11 <= (int_64)4611686018427387904) ? ((int_64)$16 < (int_64)0) : (int_64)($16 == 0) ), [9552])
	CALL eosio_assert(( ((uint_64)$11 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$16 > (int_64)-1) : ((int_64)$16 == (int_64)-1) ), [9576])
	*(($1 = (($4 + [48]) + [8]))) = $19
	CALL eosio_assert($12, [9461])
	CALL eosio_assert((((int_64)$5 != (int_64)-1) | ((int_64)$11 != (int_64)-9223372036854775808)), [9527])
	*($4 + [48]) = ((int_64)$11 / (int_64)$5)
	CALL eosio_assert(((int_64)*($1) == (int_64)1397703940), [9625])
	$9 = ((int_64)*($4 + [48]) + (int_64)$9)
	CALL eosio_assert(((int_64)$9 > (int_64)-4611686018427387904), [9668])
	CALL eosio_assert(((int_64)$9 < (int_64)4611686018427387904), [9687])
	$6 = *($18)
	if ( ((int_32)$6 == (int_32)*(($0 + [8]))) ){ goto $label$30 }
	*($6) = *($4 + [48])
	*(($6 + [8])) = *($1)
	*($18) = (*($18) + [16])
	goto $label$29 
	
.LABEL $label$30
	CALL $26($0, ($4 + [48]))
	
.LABEL $label$29
	CALL prints([9601])
	CALL $4(($4 + [48]))
	$3 = ($3 + [8])
	if ( ((int_32)$3 != (int_32)(*($4 + [36]) + [-8])) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$9 = (int_64)0
	
.LABEL $label$26
	$11 = *(($2 + [8]))
	*(($18 = (($4 + [48]) + [8]))) = $11
	*($4 + [48]) = *($2)
	CALL eosio_assert(((int_64)$11 == (int_64)1397703940), [9354])
	$11 = (int_64)
	*($4 + [48]) = $11(*($4 + [48]) - $9))
	CALL eosio_assert(((int_64)$11 > (int_64)-4611686018427387904), [9402])
	CALL eosio_assert(((int_64)$11 < (int_64)4611686018427387904), [9424])
	$3 = ($0 + [4])
	$1 = *($3)
	if ( ((int_32)$1 == (int_32)*(($0 + [8]))) ){ goto $label$33 }
	*($1) = *($4 + [48])
	*(($1 + [8])) = *($18)
	*($3) = (*($3) + [16])
	$3 = *($4 + [32])
	if ( ($3 == 0) ){ goto $label$31 }
	goto $label$32 
	
.LABEL $label$33
	CALL $26($0, ($4 + [48]))
	$3 = *($4 + [32])
	if ( ($3 == 0) ){ goto $label$31 }
	
.LABEL $label$32
	*($4 + [36]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$31
	$global$0 = ($4 + [80])
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = ((int_32)($2 - $3) / (int_32)[12])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$7 = ((int_32)(*($0 + [8]) - $3) / (int_32)[12])
	if ( ((uint_32)$7 > (uint_32)[178956969]) ){ goto $label$4 }
	$6 = ($7 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$5 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$8 = *($1)
	*($1) = (int_64)0
	*(($4 = ($5 + ((int_32)$4 * (int_32)[12])))) = $8
	$1 = ($1 + [8])
	$7 = *($1)
	*($1) = [0]
	*(($4 + [8])) = $7
	$6 = ($5 + ((int_32)$6 * (int_32)[12]))
	$5 = ($4 + [12])
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	$1 = ($2 + [-4])
	*(($4 + [-4])) = *($1)
	$2 = ($2 + [-12])
	*(($4 = ($4 + [-12]))) = *($2)
	*($2) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	$2 = *(($0 + [4]))
	$3 = *($0)
	
.LABEL $label$5
	*($0) = $4
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$7 }
	
.LOOP $label$8:
	$4 = ($2 + [-12])
	if ( ((*($4) & [1]) == 0) ){ goto $label$9 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$9
	$2 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($3 == 0) ){ goto $label$10 }
	CALL _ZdlPv($3)
	
.LABEL $label$10
	(unreachable)
}

void .FUNC $27 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	$5 = ($global$0 - [128])
	$global$0 = $5
	$6 = *($0 + [8])
	$7 = (int_64)6
	
.LOOP $label$1:
	$7 = ((int_64)$7 + (int_64)1)
	if ( ((int_64)$7 != (int_64)13) ){ goto $label$1 }
	$7 = (int_64)0
	$8 = (int_64)59
	$0 = [8388]
	$9 = (int_64)0
	
.LOOP $label$2:
	if ( ((uint_64)$7 > (uint_64)(int_64)7) ){ goto $label$7 }
	$10 = *($0)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$6 }
	$10 = ($10 + [-91])
	goto $label$5 
	
.LABEL $label$7
	$11 = (int_64)0
	if ( ((uint_64)$7 <= (uint_64)(int_64)11) ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$6
	$10 = ( ($10 + [-48]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$5
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $10) << (int_64)56) >> (int_64)56)
	
.LABEL $label$4
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$9 = ((int_64)$11 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$2 }
	*((($5 + [8]) + [24])) = *(($3 + [8]))
	*($5 + [16]) = $1
	*($5 + [8]) = $6
	*($5 + [24]) = *($3)
	$10 = CALL $100((($5 + [8]) + [32]), $4)
	*($5 + [64]) = $9
	*($5 + [56]) = $2
	*(($0 = CALL _Znwj([16]))) = $6
	*($0 + [8]) = (int_64)3617214756542218240
	*((($5 + [56]) + [36])) = [0]
	$3 = ($0 + [16])
	*((($5 + [56]) + [24])) = $3
	*(($5 + [76])) = $3
	*($5 + [72]) = $0
	*($5 + [84 align=4]) = (int_64)0
	$0 = *($10)
	$10 = ( *((($5 + [8]) + [36])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($10 + [32])
	$7 = (CASTING uint_64)(uint_32 $10)
	$10 = ($5 + [84])
	
.LOOP $label$8:
	$0 = ($0 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$8 }
	if ( ($0 == 0) ){ goto $label$10 }
	CALL $31($10, $0)
	$10 = *(($5 + [88]))
	$0 = *(($5 + [84]))
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	$0 = [0]
	
.LABEL $label$9
	*($5 + [100]) = $0
	*($5 + [96]) = $0
	*($5 + [104]) = $10
	*($5 + [112]) = ($5 + [96])
	*($5 + [120]) = ($5 + [8])
	CALL $32(($5 + [120]), ($5 + [112]))
	CALL $33(($5 + [96]), ($5 + [56]))
	$0 = *($5 + [96])
	CALL send_inline($0, (*($5 + [100]) - $0))
	$0 = *($5 + [96])
	if ( ($0 == 0) ){ goto $label$11 }
	*($5 + [100]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$11
	$0 = *($5 + [84])
	if ( ($0 == 0) ){ goto $label$12 }
	*(($5 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$12
	$0 = *($5 + [72])
	if ( ($0 == 0) ){ goto $label$13 }
	*(($5 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$13
	if ( ((*($5 + [40]) & [1]) == 0) ){ goto $label$14 }
	CALL _ZdlPv(*(($5 + [48])))
	
.LABEL $label$14
	$global$0 = ($5 + [128])
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [4])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$6 = int_32($7 >> [3])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [4]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [4])))) = *($1)
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_32 .FUNC $109 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [48])
	$global$0 = $2
	*($1 + [40]) = (((int_32)*(*($0 + [4])) * (int_32)[7]) + *(*($0)))
	*(($2 + [24])) = (int_64)1398362884
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [8993])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$5 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $5
	$6 = [1]
	$7 = $4
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $5
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$6 = ((int_32)$4 < (int_32)[6])
	$7 = ($4 + [1])
	$4 = $7
	if ( $6 ){ goto $label$5 }
	$6 = [1]
	$4 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [9042])
	*((($2 + [8]) + [32])) = [0]
	$3 = *(*($0 + [8]))
	*(($6 = (($2 + [8]) + [16]))) = *(($1 + [32]))
	*($2 + [32]) = (int_64)0
	*($2 + [8]) = $3
	*($2 + [16]) = *($1 + [24])
	$4 = *(($1 + [48]))
	if ( ((int_32)$4 == (int_32)*(($1 + [52]))) ){ goto $label$9 }
	*($4) = *($2 + [8])
	*(($4 + [28])) = (int_64)0
	*(($4 + [16])) = *($6)
	*(($4 + [8])) = *((($2 + [8]) + [8]))
	*($4 + [24]) = [0]
	$6 = *($2 + [32])
	$7 = (*((($2 + [8]) + [28])) - $6)
	if ( ($7 == 0) ){ goto $label$10 }
	$6 = int_32($7 >> [4])
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$8 }
	$7 = CALL _Znwj($7)
	*(($4 + [24])) = $7
	*(($4 + [32])) = ($7 + ($6 << [4]))
	*(($4 = ($4 + [28]))) = $7
	$6 = *((($2 + [8]) + [24]))
	$0 = (*((($2 + [8]) + [28])) - $6)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($7, $6, $0)
	*($4) = (*($4) + $0)
	
.LABEL $label$10
	*(($4 = ($1 + [48]))) = (*($4) + [40])
	if ( ($6 == 0) ){ goto $label$6 }
	goto $label$7 
	
.LABEL $label$9
	CALL $61(($1 + [44]), ($2 + [8]))
	$6 = *(($2 + [32]))
	if ( $6 ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $106(($4 + [24]))
	
.LABEL $label$7
	*(($2 + [36])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$6
	$global$0 = ($2 + [48])
	(unreachable)
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = ((int_64)*(*($3 + [4])) + (int_64)*(*($3)))
	$4 = *($0)
	$6 = *($3 + [8])
	*(($5 = ($1 + [16]))) = *(($6 + [8]))
	*($1 + [8]) = *($6)
	$8 = *(*($3 + [4]))
	$6 = *($3 + [8])
	$8 = *($6)
	$7 = $2
	CALL __multi3($7, $8, (int_64)$8 >> (int_64)63), $8, (int_64)$8 >> (int_64)63))
	$9 = *($6 + [8])
	$6 = *($3 + [12])
	$8 = *(($7 + [8]))
	$10 = *($7)
	CALL eosio_assert(( (uint_64)($10 <= (int_64)4611686018427387904) ? ((int_64)$8 < (int_64)0) : (int_64)($8 == 0) ), [9552])
	CALL eosio_assert(( ((uint_64)$10 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$8 > (int_64)-1) : ((int_64)$8 == (int_64)-1) ), [9576])
	$11 = *($6)
	$8 = *($6 + [8])
	CALL eosio_assert(((int_64)$9 == (int_64)$8), [9354])
	$10 = (int_64)
	CALL eosio_assert(((int_64)$10($11 - $10)) > (int_64)-4611686018427387904), [9402])
	CALL eosio_assert(((int_64)$10 < (int_64)4611686018427387904), [9424])
	*(($1 + [32])) = $8
	*($1 + [24]) = $10
	CALL eosio_assert(((int_64)$8 == (int_64)*($5)), [8934])
	*(*($3 + [16])) = ((int_64)*($1 + [8]) == (int_64)*($1 + [24]))
	$6 = *($1 + [44])
	$12 = *(($1 + [48]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($12 - $6) / (int_32)[40]))
	$3 = [44]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$12) ){ goto $label$2 }
	
.LOOP $label$3:
	$3 = ($3 + [24])
	$13 = *($6 + [24])
	$5 = *(($6 + [28]))
	$14 = ($5 - $13)
	$8 = (CASTING uint_64)(uint_32 int_32($14 >> [4]))
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$13 == (int_32)$5) ){ goto $label$5 }
	$3 = (($14 & [-16]) + $3)
	
.LABEL $label$5
	$6 = ($6 + [40])
	if ( ((int_32)$6 != (int_32)$12) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$7 }
	$6 = CALL $111($3)
	goto $label$6 
	
.LABEL $label$7
	$6 = ($2 - (($3 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$6
	*($7 + [20]) = $6
	*($7 + [16]) = $6
	*($7 + [24]) = ($6 + $3)
	CALL $59(($7 + [16]), $1)
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)5987990370900770816, *(*($0 + [8])), $8, $6, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$8 >= (uint_64)*($4 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $114($6)
	if ( (uint_64)($8 <= *($4 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($7 + [32])
	return 
	
.LABEL $label$8
	$global$0 = ($7 + [32])
}

int_32 .FUNC $108 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $65 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [8993])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9042])
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [8993])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$2 = $3
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9042])
	*(($0 + [52])) = [0]
	*($0 + [44 align=4]) = (int_64)0
	return $0
}

int_32 .FUNC $64 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9445])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9445])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9445])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($5 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$6 = ($4 + ((int_32)$7 * (int_32)[24]))
	$8 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	$1 = (($4 + $5) + [-24])
	
.LOOP $label$7:
	$4 = ($7 + [-24])
	$2 = *($4)
	*($4) = [0]
	*($1) = $2
	*(($1 + [16])) = *(($7 + [-8]))
	*(($1 + [8])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $4
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$3 = *(($0 + [4]))
	$5 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$5 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $8
	*(($0 + [8])) = $6
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$8 }
	
.LOOP $label$9:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	$2 = *($0 + [44])
	if ( ($2 == 0) ){ goto $label$11 }
	$6 = ($0 + [48])
	$1 = *($6)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$13 }
	
.LOOP $label$14:
	$7 = ($1 + [-40])
	$4 = *(($1 + [-16]))
	if ( ($4 == 0) ){ goto $label$15 }
	*(($1 + [-12])) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$15
	$1 = $7
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$14 }
	$1 = *(($0 + [44]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $2
	
.LABEL $label$12
	*($6) = $2
	CALL _ZdlPv($1)
	
.LABEL $label$11
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($5 == 0) ){ goto $label$16 }
	CALL _ZdlPv($5)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = ((int_64)*(*($4)) + (int_64)*(*($4 + [4])))
	$5 = *($0)
	$6 = *($4 + [8])
	*(($1 + [16])) = *(($6 + [8]))
	*($1 + [8]) = *($6)
	$4 = *($4 + [8])
	*($1 + [24]) = *($4)
	*(($1 + [32])) = *(($4 + [8]))
	$6 = *($1 + [44])
	$7 = *(($1 + [48]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($7 - $6) / (int_32)[40]))
	$4 = [44]
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = ($4 + [24])
	$10 = *($6 + [24])
	$9 = *(($6 + [28]))
	$11 = ($9 - $10)
	$8 = (CASTING uint_64)(uint_32 int_32($11 >> [4]))
	
.LOOP $label$4:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	if ( ((int_32)$10 == (int_32)$9) ){ goto $label$5 }
	$4 = (($11 & [-16]) + $4)
	
.LABEL $label$5
	$6 = ($6 + [40])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($4 <= [513]) ){ goto $label$7 }
	$6 = CALL $111($4)
	goto $label$6 
	
.LABEL $label$7
	$6 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$6
	*($3 + [4]) = $6
	*($3) = $6
	*($3 + [8]) = ($6 + $4)
	CALL $59($3, $1)
	$8 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($5 + [8]), (int_64)5987990370900770816, *(*($0 + [8])), $8, $6, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $114($6)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($3 + [16])
}

void .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = *($0)
	$3 = ((int_32)(*($0 + [4]) - $2) / (int_32)[40])
	$4 = ($3 + [1])
	if ( ((uint_32)$4 >= (uint_32)[107374183]) ){ goto $label$2 }
	$5 = [107374182]
	$2 = ((int_32)(*($0 + [8]) - $2) / (int_32)[40])
	if ( ((uint_32)$2 > (uint_32)[53687090]) ){ goto $label$4 }
	$5 = ($2 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$2 = CALL _Znwj(((int_32)$5 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	*(($6 = ($2 + ((int_32)$3 * (int_32)[40])))) = *($1)
	*($6 + [24 align=4]) = (int_64)0
	*(($6 + [16])) = *(($1 + [16]))
	*(($6 + [8])) = *(($1 + [8]))
	*(($4 = ($6 + [32]))) = [0]
	$3 = (*(($1 + [28])) - *($1 + [24]))
	if ( ($3 == 0) ){ goto $label$6 }
	$7 = ($6 + [24])
	$8 = int_32($3 >> [4])
	if ( ((uint_32)$8 >= (uint_32)[268435456]) ){ goto $label$5 }
	$3 = CALL _Znwj($3)
	*($7) = $3
	*(($7 = ($6 + [28]))) = $3
	*($4) = ($3 + ($8 << [4]))
	$4 = *(($1 + [24]))
	$1 = (*(($1 + [28])) - $4)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($3, $4, $1)
	*($7) = (*($7) + $1)
	
.LABEL $label$6
	$9 = ($2 + ((int_32)$5 * (int_32)[40]))
	$10 = ($6 + [40])
	$1 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$8 }
	$8 = ($1 - $7)
	$2 = [0]
	
.LOOP $label$9:
	$5 = ($7 + $2)
	*((($1 = ($6 + $2)) + [-24])) = *(($5 + [-24]))
	*(($1 + [-32])) = *(($5 + [-32]))
	*(($1 + [-40])) = *(($5 + [-40]))
	*(($3 = ($1 + [-16]))) = (int_64)0
	*(($1 = ($1 + [-8]))) = [0]
	$4 = ($5 + [-16])
	*($3) = *($4)
	$5 = ($5 + [-8])
	*($1) = *($5)
	*($5) = [0]
	*($4) = (int_64)0
	$2 = ($2 + [-40])
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$9 }
	$6 = ($6 + $2)
	$1 = *(($0 + [4]))
	$3 = *($0)
	goto $label$7 
	
.LABEL $label$8
	$3 = $1
	
.LABEL $label$7
	*($0) = $6
	*(($0 + [4])) = $10
	*(($0 + [8])) = $9
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$10 }
	
.LOOP $label$11:
	$5 = ($1 + [-40])
	$2 = *(($1 + [-16]))
	if ( ($2 == 0) ){ goto $label$12 }
	*(($1 + [-12])) = $2
	CALL _ZdlPv($2)
	
.LABEL $label$12
	$1 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($3 == 0) ){ goto $label$13 }
	CALL _ZdlPv($3)
	
.LABEL $label$13
	return (unreachable)
	
.LABEL $label$5
	CALL $106($7)
	(unreachable)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$5 = *($0)
	$4 = *($0 + [8])
	$3 = ((int_32)($2 - $1) / (int_32)[40])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($4 - $5) / (int_32)[40])) ){ goto $label$8 }
	if ( ($5 == 0) ){ goto $label$5 }
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$9:
	$6 = ($4 + [-40])
	$7 = *(($4 + [-16]))
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [-12])) = $7
	CALL _ZdlPv($7)
	
.LABEL $label$10
	$4 = $6
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$9 }
	$4 = *($0)
	goto $label$6 
	
.LABEL $label$8
	$8 = ((int_32)(*($0 + [4]) - $5) / (int_32)[40])
	$9 = ($1 + ((int_32)$8 * (int_32)[40]))
	$10 = ( $9 ? $2 : ((uint_32)$3 > (uint_32)$8) )
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$11 }
	$11 = ($10 - $1)
	$6 = [0]
	
.LOOP $label$12:
	$4 = ($1 + $6)
	*(($7 = ($5 + $6))) = *($4)
	*(($7 + [16])) = *(($4 + [16]))
	*(($7 + [8])) = *(($4 + [8]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$13 }
	CALL $63(($7 + [24]), *(($4 + [24])), *(($4 + [28])))
	
.LABEL $label$13
	$6 = ($6 + [40])
	if ( ((int_32)$11 != (int_32)$6) ){ goto $label$12 }
	$5 = ($5 + $6)
	
.LABEL $label$11
	if ( ((uint_32)$3 <= (uint_32)$8) ){ goto $label$14 }
	if ( ((int_32)$10 == (int_32)$2) ){ goto $label$4 }
	$7 = ($0 + [4])
	$1 = *($7)
	
.LOOP $label$15:
	*($1) = *($9)
	*(($1 + [16])) = *(($9 + [16]))
	*(($1 + [8])) = *(($9 + [8]))
	*($1 + [24]) = [0]
	*(($4 = ($1 + [28]))) = (int_64)0
	$0 = ($9 + [24])
	$5 = ($9 + [28])
	$6 = (*($5) - *($0))
	if ( ($6 == 0) ){ goto $label$16 }
	$11 = ($1 + [24])
	$3 = int_32($6 >> [4])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$2 }
	$6 = CALL _Znwj($6)
	*($11) = $6
	*(($1 + [32])) = ($6 + ($3 << [4]))
	*($4) = $6
	$5 = *($0)
	$1 = (*($5) - $5)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$16 }
	CALL memcpy($6, $5, $1)
	*($4) = (*($4) + $1)
	
.LABEL $label$16
	$1 = (*($7) + [40])
	*($7) = $1
	$9 = ($9 + [40])
	if ( ((int_32)$2 != (int_32)$9) ){ goto $label$15 }
	goto $label$4 
	
.LABEL $label$14
	$7 = ($0 + [4])
	$1 = *($7)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($1 + [-40])
	$6 = *(($1 + [-16]))
	if ( ($6 == 0) ){ goto $label$19 }
	*(($1 + [-12])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$19
	$1 = $4
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$18 }
	
.LABEL $label$17
	*($7) = $5
	return (unreachable)
	
.LABEL $label$7
	$4 = $5
	
.LABEL $label$6
	*(($0 + [4])) = $5
	CALL _ZdlPv($4)
	$4 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$3 >= (uint_32)[107374183]) ){ goto $label$1 }
	$6 = [107374182]
	$4 = ((int_32)$4 / (int_32)[40])
	if ( ((uint_32)$4 > (uint_32)[53687090]) ){ goto $label$20 }
	$4 = ($4 << [1])
	$6 = ( $3 ? $4 : ($4 <= $3) )
	
.LABEL $label$20
	$6 = ((int_32)$6 * (int_32)[40])
	$4 = CALL _Znwj($6)
	*($0) = $4
	*($0 + [4]) = $4
	*(($0 + [8])) = ($4 + $6)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$21:
	*($4) = *($1)
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	*($4 + [24]) = [0]
	*(($6 = ($4 + [28]))) = (int_64)0
	$5 = ($1 + [24])
	$9 = ($1 + [28])
	$7 = (*($9) - *($5))
	if ( ($7 == 0) ){ goto $label$22 }
	$11 = ($4 + [24])
	$3 = int_32($7 >> [4])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$7 = CALL _Znwj($7)
	*($11) = $7
	*(($4 + [32])) = ($7 + ($3 << [4]))
	*($6) = $7
	$9 = *($5)
	$4 = (*($9) - $9)
	if ( ((int_32)$4 < (int_32)[1]) ){ goto $label$22 }
	CALL memcpy($7, $9, $4)
	*($6) = (*($6) + $4)
	
.LABEL $label$22
	$4 = (*($4) + [40])
	*(($4 = ($0 + [4]))) = $4
	$1 = ($1 + [40])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$21 }
	
.LABEL $label$4
	return (unreachable)
	
.LABEL $label$3
	CALL $106($11)
	
.LABEL $label$2
	CALL $106($11)
	
.LABEL $label$1
	CALL $106($0)
	(unreachable)
}

void .FUNC $63 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$5 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($5 - $6) >> [4])) ){ goto $label$4 }
	if ( ($6 == 0) ){ goto $label$5 }
	*($0 + [4]) = $6
	CALL _ZdlPv($6)
	$5 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$6 = [268435455]
	if ( ((uint_32)int_32($5 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = $4
	$2 = int_32($5 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$6 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($6 << [4])
	$6 = CALL _Znwj($4)
	*($0) = $6
	*($0 + [4]) = $6
	*(($0 + [8])) = ($6 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($6, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	goto $label$3 
	
.LABEL $label$4
	$5 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $6)
	$7 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$5) )
	$3 = ($7 - $1)
	if ( ($3 == 0) ){ goto $label$7 }
	CALL memmove($6, $1, $3)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$2 }
	$1 = ($2 - $7)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $7, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($6 + (int_32($3 >> [4]) << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $106($0)
}

int_32 .FUNC $62 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9445])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$5 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$8 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9445])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9445])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($8) - $4) > (int_32)[7]), [9445])
	CALL memcpy(*($6), ($7 + [16]), [8])
	*($6) = (*($6) + [8])
	CALL $64($0, ($7 + [24]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$2 }
	$4 = *($6)
	goto $label$3 
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $101 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $100 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $103($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $110(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

void .FUNC $89 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [9113])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $111($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1398362884
	*($9) = (int_64)0
	CALL eosio_assert([1], [8993])
	$10 = ($9 + [8])
	$11 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [9042])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [9140])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [9140])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	$11 = (uint_64)*(($9 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $11)
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $89($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $114($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

int_32 .FUNC $87 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [9062])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $88($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [9062])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $86 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	*($0 + [8]) = [1]
	*($0) = *(*(*($2 + [4])) + [56])
	$1 = *($2)
	CALL eosio_assert([1], [9445])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [9445])
	CALL memcpy(($3 | [8]), ($0 + [8]), [4])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)4986958867385548800, *(*($2 + [8])), $4, $3, [12])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = *($0 + [8])
	$5 = (int_64)6
	
.LOOP $label$1:
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	$0 = [0]
	
.LOOP $label$2:
	$6 = ($1 + $0)
	$7 = ($0 + [1])
	$0 = $7
	if ( *($6) ){ goto $label$2 }
	$8 = (CASTING uint_64)(uint_32 ($7 + [-1]))
	$5 = (int_64)0
	$9 = (int_64)59
	$10 = (int_64)0
	
.LOOP $label$3:
	$11 = (int_64)0
	if ( (uint_64)($5 <= $8) ){ goto $label$7 }
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$0 = *($1)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$0 = ($0 + [-91])
	goto $label$8 
	
.LABEL $label$9
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	if ( ((uint_64)$5 <= (uint_64)(int_64)11) ){ goto $label$5 }
	
.LABEL $label$6
	$11 = ((int_64)$11 & (int_64)15)
	goto $label$4 
	
.LABEL $label$5
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$4
	$1 = ($1 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$3 }
	*($3 + [16]) = $10
	*($3 + [8]) = $4
	*(($1 = CALL _Znwj([16]))) = $4
	*($1 + [8]) = (int_64)3617214756542218240
	*(($3 + [44])) = [0]
	$0 = ($1 + [16])
	*((($3 + [8]) + [24])) = $0
	*(($3 + [28])) = $0
	*($3 + [24]) = $1
	*($3 + [36 align=4]) = (int_64)0
	$1 = *($2 + [24])
	$0 = ( *(($2 + [28])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($0 + [24])
	$5 = (CASTING uint_64)(uint_32 $0)
	$6 = ($2 + [24])
	$0 = (($3 + [8]) + [28])
	
.LOOP $label$10:
	$1 = ($1 + [1])
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	if ( ((int_64)$5) != (int_64)0) ){ goto $label$10 }
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $31($0, $1)
	$0 = *(($3 + [40]))
	$1 = *(($3 + [36]))
	goto $label$11 
	
.LABEL $label$12
	$0 = [0]
	$1 = [0]
	
.LABEL $label$11
	*($3 + [48]) = $1
	*($3 + [56]) = $0
	$0 = ($0 - $1)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9445])
	CALL memcpy($1, $2, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9445])
	CALL memcpy(($1 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)($0 + [-16]) > (int_32)[7]), [9445])
	CALL memcpy(($1 + [16]), ($2 + [16]), [8])
	*($3 + [52]) = ($1 + [24])
	CALL $75(($3 + [48]), $6)
	CALL $33(($3 + [48]), ($3 + [8]))
	$1 = *($3 + [48])
	CALL send_inline($1, (*($3 + [52]) - $1))
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$13 }
	*($3 + [52]) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$13
	$1 = *($3 + [36])
	if ( ($1 == 0) ){ goto $label$14 }
	*(($3 + [40])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$14
	$1 = *($3 + [24])
	if ( ($1 == 0) ){ goto $label$15 }
	*(($3 + [28])) = $1
	CALL _ZdlPv($1)
	
.LABEL $label$15
	$global$0 = ($3 + [64])
}

void .FUNC $84 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	$6 = ($global$0 - [96])
	$global$0 = $6
	if ( ((int_64)*($0 + [16]) != (int_64)$2) ){ goto $label$2 }
	CALL require_auth($1)
	CALL printi((int_64)111)
	$2 = (int_64)5
	
.LOOP $label$3:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$3 }
	if ( (CALL $2($0, (int_64)-6217917475468607488) == 0) ){ goto $label$4 }
	$2 = (int_64)5
	
.LOOP $label$5:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$5 }
	$7 = *($0 + [32])
	if ( $7 ){ goto $label$6 }
	*(($7 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($7 + [40 align=4]) = (int_64)0
	*($7 + [48]) = [0]
	*(($0 + [32])) = $7
	$2 = *(($0 + [16]))
	*($7) = $2
	*($7 + [8]) = $2
	*($7 + [16]) = $2
	*($7 + [24]) = $2
	
.LABEL $label$6
	CALL $3(($6 + [24]), $7, (int_64)-6217917475468607488)
	CALL prints(( *($6 + [32]) ? (($6 + [24]) | [1]) : (*($6 + [24]) & [1]) ))
	if ( ((*($6 + [24]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($6 + [32])))
	
.LABEL $label$7
	*(($6 + [32])) = [0]
	*($6 + [24]) = (int_64)0
	$7 = CALL $108([9734])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$14 }
	*($6 + [24]) = ($7 << [1])
	$8 = (($6 + [24]) | [1])
	if ( $7 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [24]) = ($9 | [1])
	*($6 + [32]) = $8
	*($6 + [28]) = $7
	
.LABEL $label$13
	CALL memcpy($8, [9734], $7)
	
.LABEL $label$12
	*(($8 + $7)) = [0]
	$2 = (int_64)5
	
.LOOP $label$15:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$15 }
	$8 = ($0 + [32])
	$7 = *($8)
	if ( $7 ){ goto $label$16 }
	*(($7 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($7 + [40 align=4]) = (int_64)0
	*($7 + [48]) = [0]
	*($8) = $7
	$2 = *(($0 + [16]))
	*($7) = $2
	*($7 + [8]) = $2
	*($7 + [16]) = $2
	*($7 + [24]) = $2
	
.LABEL $label$16
	CALL $3(($6 + [80]), $7, (int_64)-6217917475468607488)
	*(($6 + [72])) = [0]
	*($6 + [64]) = (int_64)0
	$7 = CALL $108([9739])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$10 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$19 }
	*($6 + [64]) = ($7 << [1])
	$8 = (($6 + [64]) | [1])
	if ( $7 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [64]) = ($9 | [1])
	*($6 + [72]) = $8
	*($6 + [68]) = $7
	
.LABEL $label$18
	CALL memcpy($8, [9739], $7)
	
.LABEL $label$17
	*(($8 + $7)) = [0]
	$10 = [1]
	$7 = ($7 & [1])
	$7 = *($6 + [80])
	$9 = ($7 & [1])
	$7 = *($6 + [24])
	$11 = uint_32($7 >> [1])
	$12 = ( *($6 + [28]) ? $11 : $9 )
	if ( ((int_32)$12 != (int_32)( *($6 + [84]) ? uint_32($7 >> [1]) : $7 )) ){ goto $label$20 }
	$7 = ( *($6 + [88]) ? (($6 + [80]) | [1]) : $7 )
	$8 = (($6 + [24]) | [1])
	if ( $9 ){ goto $label$22 }
	if ( ($12 == 0) ){ goto $label$21 }
	$9 = ([0] - $11)
	$10 = [1]
	
.LOOP $label$23:
	if ( ((int_32)*($8) != (int_32)*($7)) ){ goto $label$20 }
	$7 = ($7 + [1])
	$8 = ($8 + [1])
	$9 = ($9 + [1])
	if ( $9 ){ goto $label$23 }
	goto $label$21 
	
.LABEL $label$22
	if ( ($12 == 0) ){ goto $label$21 }
	$10 = ((int_32)CALL $109(( *($6 + [32]) ? $8 : $9 ), $7, $12) != (int_32)[0])
	goto $label$20 
	
.LABEL $label$21
	$10 = [0]
	
.LABEL $label$20
	CALL eosio_assert($10, ( *($6 + [72]) ? (($6 + [64]) | [1]) : (*($6 + [64]) & [1]) ))
	if ( (*($6 + [64]) & [1]) ){ goto $label$25 }
	$7 = [1]
	if ( (*($6 + [80]) & [1]) ){ goto $label$24 }
	goto $label$9 
	
.LABEL $label$25
	CALL _ZdlPv(*(($6 + [72])))
	$7 = [1]
	if ( ((*($6 + [80]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$24
	CALL _ZdlPv(*($6 + [88]))
	if ( (*($6 + [24]) & $7) ){ goto $label$8 }
	goto $label$4 
	
.LABEL $label$11
	CALL $99(($6 + [24]))
	
.LABEL $label$10
	CALL $99(($6 + [64]))
	
.LABEL $label$9
	if ( ((*($6 + [24]) & $7) == 0) ){ goto $label$4 }
	
.LABEL $label$8
	CALL _ZdlPv(*($6 + [32]))
	
.LABEL $label$4
	$13 = *($0 + [24])
	$14 = (int_64)0
	$15 = (int_64)59
	$7 = [8192]
	$16 = (int_64)0
	
.LOOP $label$26:
	if ( ((uint_64)$14 > (uint_64)(int_64)10) ){ goto $label$31 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$30 }
	$8 = ($8 + [-91])
	goto $label$29 
	
.LABEL $label$31
	$2 = (int_64)0
	if ( ((int_64)$15 == (int_64)47244640260) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$29
	$2 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$28
	$2 = ((int_64)((int_64)$2 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$27
	$7 = ($7 + [1])
	$14 = ((int_64)$14 + (int_64)1)
	$16 = ((int_64)$2 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$26 }
	CALL eosio_assert(((int_64)$16 == (int_64)$13), [8204])
	$14 = *($3 + [8])
	$8 = [0]
	$16 = *($3)
	if ( ((uint_64)((int_64)$16 + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$32 }
	$2 = (uint_64)$14 >> (uint_64)(int_64)8)
	$7 = [0]
	
.LOOP $label$34:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$33 }
	$15 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$35 }
	$2 = $15
	$8 = [1]
	$9 = $7
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$35
	$2 = $15
	
.LOOP $label$36:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$33 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$8 = ((int_32)$7 < (int_32)[6])
	$9 = ($7 + [1])
	$7 = $9
	if ( $8 ){ goto $label$36 }
	$8 = [1]
	$7 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[6]) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	$8 = [0]
	
.LABEL $label$32
	CALL eosio_assert($8, [8314])
	CALL eosio_assert(((int_64)$14 == (int_64)1397703940), [8337])
	CALL eosio_assert(((int_64)$16 > (int_64)0), [8361])
	if ( (*($4) & [1]) ){ goto $label$38 }
	$7 = ($4 + [1])
	goto $label$37 
	
.LABEL $label$38
	$7 = *($4 + [8])
	
.LABEL $label$37
	$8 = [0]
	
.LOOP $label$39:
	$9 = ($7 + $8)
	$4 = ($8 + [1])
	$8 = $4
	if ( *($9) ){ goto $label$39 }
	$13 = (CASTING uint_64)(uint_32 ($4 + [-1]))
	$2 = (int_64)0
	$15 = (int_64)59
	$16 = (int_64)0
	
.LOOP $label$40:
	$14 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$13) ){ goto $label$41 }
	$8 = *($7)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$8 = ($8 + [-91])
	goto $label$42 
	
.LABEL $label$43
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$41
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$45 }
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$15 & (int_64)4294967295))
	goto $label$44 
	
.LABEL $label$45
	$14 = ((int_64)$14 & (int_64)15)
	
.LABEL $label$44
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$16 = ((int_64)$14 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)4294967291)
	if ( ((int_64)$15 != (int_64)55834574842) ){ goto $label$40 }
	if ( ((int_64)$16 != (int_64)4520640315874344960) ){ goto $label$46 }
	*(($6 + [40])) = *(($3 + [8]))
	*($6 + [24]) = $1
	*($6 + [32]) = *($3)
	CALL $100(($6 + [48]), *($5))
	CALL $85($0, [9751], ($6 + [24]))
	if ( ((*($6 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($6 + [56])))
	$global$0 = ($6 + [96])
	return 
	
.LABEL $label$46
	*(($6 + [16])) = [0]
	*($6 + [8]) = (int_64)0
	$7 = CALL $108([9760])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$49 }
	*($6 + [8]) = ($7 << [1])
	$9 = (($6 + [8]) | [1])
	$8 = $9
	if ( $7 ){ goto $label$48 }
	goto $label$47 
	
.LABEL $label$49
	$9 = (($7 + [16]) & [-16])
	$8 = CALL _Znwj($9)
	*($6 + [8]) = ($9 | [1])
	*($6 + [16]) = $8
	*($6 + [12]) = $7
	$9 = (($6 + [8]) | [1])
	
.LABEL $label$48
	CALL memcpy($8, [9760], $7)
	
.LABEL $label$47
	*(($8 + $7)) = [0]
	CALL eosio_assert([0], ( *($6 + [16]) ? $9 : (*($6 + [8]) & [1]) ))
	if ( ((*($6 + [8]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($6 + [16])))
	
.LABEL $label$2
	$global$0 = ($6 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $99(($6 + [8]))
	(unreachable)
	(unreachable)
}

void .FUNC $83 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0 + [4])
	*($1) = *(*($4))
	$5 = *($0)
	$6 = ($1 + [8])
	CALL $102($6, *($4 + [4]))
	$4 = *($1 + [8])
	$7 = ( *(($1 + [12])) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$4 = ($7 + [8])
	$8 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$1:
	$4 = ($4 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ($4 <= [513]) ){ goto $label$3 }
	$2 = CALL $111($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3) = $2
	*($3 + [8]) = ($2 + $4)
	CALL eosio_assert(((int_32)$4 > (int_32)[7]), [9445])
	CALL memcpy($2, $1, [8])
	*($3 + [4]) = ($2 + [8])
	CALL $75($3, $6)
	$8 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($5 + [8]), (int_64)3923610676896333824, *(*($0 + [8])), $8, $2, $4)
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$8 >= (uint_64)*($5 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $114($2)
	if ( (uint_64)($8 <= *($5 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($3 + [16])
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [9476])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $82(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [24])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $55(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL _ZdlPv(*(($3 + [16])))
	
.LABEL $label$4
	CALL _ZdlPv($3)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $80 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [9198])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$15()), [9244])
	$6 = *($1)
	$7 = ($1 + [8])
	CALL $102($7, *($3))
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [9295])
	$3 = *($1 + [8])
	$8 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [8])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$4 = CALL $111($3)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [9445])
	CALL memcpy($4, $1, [8])
	*($5 + [4]) = ($4 + [8])
	CALL $75($5, $7)
	CALL db_update_i64(*($1 + [24]), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$6 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	CALL $114($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$4 }
	
.LABEL $label$5
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$4
	$global$0 = ($5 + [16])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [9140])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9140])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9140])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9140])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [9140])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $70 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	*($0 + [8]) = (int_64)0
	*(($1 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [8993])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $3
	$4 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $3
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$5 }
	$4 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$4 = [0]
	
.LABEL $label$1
	CALL eosio_assert($4, [9042])
	*(($1 = ($0 + [32]))) = (int_64)1398362884
	*($0 + [24]) = (int_64)0
	CALL eosio_assert([1], [8993])
	$2 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$6 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$10 }
	$2 = $3
	$6 = [1]
	$4 = $1
	$1 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$9 
	
.LABEL $label$10
	$2 = $3
	
.LOOP $label$11:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$4 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $4 ){ goto $label$11 }
	$6 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL eosio_assert($6, [9042])
	return $0
	
.LABEL $label$7
	CALL eosio_assert([0], [9042])
	return $0
	
.LABEL $label$6
	CALL eosio_assert([0], [9042])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [9445])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9445])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9445])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9445])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [9445])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $76 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9445])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9445])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [9445])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $77 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [9445])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [9445])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	if ( ($1 == 0) ){ goto $label$1 }
	CALL printui(*($0))
	CALL prints([9623])
	
.LABEL $label$1
	$3 = *($0)
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)8)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)16)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)24)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)32)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)40)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)48)
	*($2 + [15]) = $0)
	if ( (($0 & [255]) == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	$0 = (CASTING uint_32)(uint_64 (uint_64)$3 >> (uint_64)(int_64)56)
	*($2 + [15]) = $0)
	if ( ($0 == 0) ){ goto $label$2 }
	CALL prints_l(($2 + [15]), [1])
	
.LABEL $label$2
	$global$0 = ($2 + [16])
}

void .FUNC $39 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	CALL require_auth(*($0 + [8]))
	if ( CALL $2($0, $1) ){ goto $label$2 }
	*(($2 + [24])) = [0]
	*($2 + [16]) = (int_64)0
	$3 = CALL $108([8812])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($2 + [16]) = ($3 << [1])
	$4 = (($2 + [16]) | [1])
	$5 = $4
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($4)
	*($2 + [16]) = ($4 | [1])
	*($2 + [24]) = $5
	*($2 + [20]) = $3
	$4 = (($2 + [16]) | [1])
	
.LABEL $label$4
	CALL memcpy($5, [8812], $3)
	
.LABEL $label$3
	*(($5 + $3)) = [0]
	CALL eosio_assert([0], ( *($2 + [24]) ? $4 : (*($2 + [16]) & [1]) ))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL _ZdlPv(*(($2 + [24])))
	
.LABEL $label$2
	$3 = *($0 + [32])
	if ( $3 ){ goto $label$6 }
	*(($3 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*(($0 + [32])) = $3
	$6 = *($0 + [16])
	*($3) = $6
	*($3 + [8]) = $6
	*($3 + [16]) = $6
	*($3 + [24]) = $6
	
.LABEL $label$6
	CALL $3($2, $3, $1)
	CALL prints([8826])
	$3 = *($2)
	$0 = ($3 & [1])
	CALL prints_l(( *($2 + [8]) ? ($2 | [1]) : $0 ), ( *($2 + [4]) ? uint_32($3 >> [1]) : $0 ))
	if ( ((*($2) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*(($2 + [8])))
	
.LABEL $label$7
	$global$0 = ($2 + [32])
	return (unreachable)
	
.LABEL $label$1
	CALL $99(($2 + [16]))
}

void .FUNC $36 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$15()), [9476])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($5 = CALL _Znwj([40])) + [16]) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	CALL eosio_assert([1], [8993])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$6 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$2 = $6
	$7 = [1]
	$8 = $3
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$2 = $6
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$3 < (int_32)[6])
	$8 = ($3 + [1])
	$3 = $8
	if ( $7 ){ goto $label$5 }
	$7 = [1]
	$3 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$7 = [0]
	
.LABEL $label$1
	CALL eosio_assert($7, [9042])
	*($5 + [24]) = $1
	CALL $78(($4 + [16]), $5)
	*($4 + [32]) = $5
	$2 = *($5)
	*($4 + [16]) = $2
	$7 = *($5 + [28])
	*($4 + [12]) = $7
	$8 = ($1 + [28])
	$3 = *($8)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $7
	*($4 + [32]) = [0]
	*($3) = $5
	*($8) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $79(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $5
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL _ZdlPv($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [32])
	$global$0 = $3
	CALL require_auth(*($0 + [8]))
	$4 = CALL $100($3, $2)
	CALL require_auth(*($0 + [24]))
	$2 = *($0 + [32])
	if ( $2 ){ goto $label$1 }
	*(($2 = CALL _Znwj([56])) + [32]) = (int_64)-1
	*($2 + [40 align=4]) = (int_64)0
	*($2 + [48]) = [0]
	*(($0 + [32])) = $2
	$5 = *($0 + [16])
	*($2) = $5
	*($2 + [8]) = $5
	*($2 + [16]) = $5
	*($2 + [24]) = $5
	
.LABEL $label$1
	$0 = CALL $100(($3 + [16]), $4)
	CALL $38($2, $1, $0)
	if ( (*($3 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($0 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($4 + [8]))
	$global$0 = ($3 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($3 + [32])
}

void .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	$3 = *($3 + [4])
	*(($5 = ($1 + [16]))) = *(($3 + [8]))
	*($1 + [8]) = *($3)
	CALL eosio_assert([1], [9445])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [9445])
	CALL memcpy(($2 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [9445])
	CALL memcpy(($2 + [16]), $5, [8])
	$6 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)-5069070907531148288, *(*($0 + [8])), $6, $2, [24])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [32])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $106($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9445])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9445])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [9445])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [9445])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $75(*($1), ($0 + [32]))
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $31($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [9445])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [9445])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $77(CALL $76($2, $4), $7)
	$global$0 = ($2 + [16])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [3])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$5 }
	$6 = int_32($7 >> [2])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [3]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [3])))) = *($1)
	$2 = ($2 - $3)
	$1 = ($4 - $2)
	$6 = ($5 + ($6 << [3]))
	$5 = ($4 + [8])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($1, $3, $2)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $106($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}