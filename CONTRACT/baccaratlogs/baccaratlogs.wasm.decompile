(data (i32.const 8192) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 8256) "fairbaccarat\00")
(data (i32.const 8269) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 8318) "invalid symbol name\00")
(data (i32.const 8338) "read\00")
(data (i32.const 8343) "get\00")
(data (i32.const 16756) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "read_action_data" (func $fimport$2 (param i32 i32) (result i32)))
(import "env" "memset" (func $fimport$3 (param i32 i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$5 (param i64)))
(import "env" "require_recipient" (func $fimport$6 (param i64)))
(import "env" "abort" (func $fimport$7))
(import "env" "memmove" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$10 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$12 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$14 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$15 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$16 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$17 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$18 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$19 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$20 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$21 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$22 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$23 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$25 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$26 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$27 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $1))
(export "_Znwj" (func $17))
(export "_ZdlPv" (func $19))
(export "_Znaj" (func $18))
(export "_ZdaPv" (func $20))
(table $0 3 3 anyfunc)
(elem (i32.const 1) $2 $4)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 16842))
(global $global$2 i32 (i32.const 16842))


void .FUNC $29 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16744])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16552]
	$3 = (((int_32)$1 * (int_32)[12]) + [16552])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $28 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8352]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8356])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8352]) = [1]
	$2 = ($2 << [16])
	*([0] + [8356]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8356])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8356]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8352]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8352]) = [1]
	$3 = ($3 << [16])
	*([0] + [8356]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8356])
	
.LABEL $label$10
	*([0] + [8356]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $25 (int_32 $0)
{
}

void .FUNC $24 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*($0 + [8]) = [0]
	$2 = (*($1 + [4]) - *($1))
	$3 = ((int_32)$2 / (int_32)[12])
	if ( ($2 == 0) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = CALL _Znwj($2)
	*(($4 = ($0 + [4]))) = $5
	*(($0 + [8])) = ($5 + ((int_32)$3 * (int_32)[12]))
	*($0) = $5
	$3 = *(($1 + [4]))
	$2 = *($1)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	CALL $22($5, $2)
	$5 = (*($4) + [12])
	*($4) = $5
	$2 = ($2 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$4 }
	
.LABEL $label$3
	*($0 + [12 align=4]) = (int_64)0
	*(($0 + [20])) = [0]
	$2 = (*(($1 + [16])) - *($1 + [12]))
	$3 = ((int_32)$2 / (int_32)[12])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[357913942]) ){ goto $label$1 }
	$5 = CALL _Znwj($2)
	*(($4 = ($0 + [16]))) = $5
	*(($0 + [20])) = ($5 + ((int_32)$3 * (int_32)[12]))
	*(($0 + [12])) = $5
	$3 = *(($1 + [16]))
	$2 = *(($1 + [12]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $22($5, $2)
	$5 = (*($4) + [12])
	*($4) = $5
	$2 = ($2 + [12])
	if ( ((int_32)$3 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$5
	CALL $22(($0 + [24]), ($1 + [24]))
	return $0
	
.LABEL $label$2
	CALL $24($0)
	
.LABEL $label$1
	CALL $24(($0 + [12]))
	(unreachable)
	return (unreachable)
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [8338])
	CALL memcpy($2, *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [8338])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[31]), [8338])
	CALL memcpy($2, *($3 + [4]), [32])
	*($3 + [4]) = (*($3 + [4]) + [32])
	CALL $13(*($1), *($0 + [28]))
	$0 = *($0 + [32])
	$1 = *($1)
	CALL $14($1, $0)
	CALL $14($1, ($0 + [12]))
	CALL $10($1, ($0 + [24]))
}

int_32 .FUNC $6 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	*($0 + [16 align=4]) = (int_64)0
	*($0 + [56]) = (int_64)0
	$1 = [0]
	*(($0 + [24])) = [0]
	*(($2 = ($0 + [64]))) = (int_64)1398362884
	CALL eosio_assert([1], [8269])
	$3 = (uint_64)*($2) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$3 = $4
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$5 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$2 = [0]
	
.LABEL $label$1
	CALL eosio_assert($2, [8318])
	*(($1 = ($0 + [120]))) = (int_64)1398362884
	*($0 + [112]) = (int_64)0
	CALL eosio_assert([1], [8269])
	$3 = (uint_64)*($1) >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$4 = (uint_64)$3 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$3 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$3 = $4
	$2 = [1]
	$5 = $1
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$3 = $4
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$3 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$5 = ($1 + [1])
	$1 = $5
	if ( $2 ){ goto $label$10 }
	$2 = [1]
	$1 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$2 = [0]
	
.LABEL $label$6
	CALL eosio_assert($2, [8318])
	*(($0 + [240])) = (int_64)0
	*(($0 + [248])) = (int_64)0
	*(($0 + [256])) = (int_64)0
	*(($0 + [264])) = (int_64)0
	*(($0 + [272])) = (int_64)0
	*(($0 + [280])) = (int_64)0
	return $0
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = *($0)
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [4])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	CALL $10(*($1), *($0 + [8]))
	$3 = *($0 + [12])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [16])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [20])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($3, *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [24])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8338])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8338])
	CALL memcpy(($3 + [16]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$3 = *($0 + [28])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[19]), [8338])
	CALL memcpy($3, *($4 + [4]), [20])
	*($4 + [4]) = (*($4 + [4]) + [20])
	$3 = *($0 + [32])
	$4 = *($1)
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [8338])
	CALL memcpy($3, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [8338])
	CALL memcpy(($3 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	$4 = *($0 + [36])
	*($2) = *($1)
	*($2 + [12]) = ($4 + [8])
	*($2 + [8]) = $4
	*($2 + [16]) = ($4 + [16])
	*($2 + [20]) = ($4 + [24])
	*($2 + [24]) = ($4 + [32])
	*($2 + [28]) = ($4 + [48])
	*($2 + [32]) = ($4 + [80])
	*($2 + [36]) = ($4 + [112])
	*($2 + [40]) = ($4 + [124])
	CALL $9(($2 + [8]), $2)
	$global$0 = ($2 + [48])
}

void .FUNC $4 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [8256]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($5)
}

int_32 .FUNC $5 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [496])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $26($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	*((($1 = CALL memset($3, [0], [112])) + [120])) = (int_64)0
	*(($1 + [128])) = (int_64)0
	*(($1 + [136])) = (int_64)0
	*(($1 + [144])) = (int_64)0
	*(($1 + [152])) = (int_64)0
	*($1 + [112]) = (int_64)0
	*($1 + [180]) = $6
	*($1 + [176]) = $6
	*($1 + [184]) = ($6 + $7)
	*($1 + [168]) = ($1 + [176])
	*($1 + [340]) = ($1 | [8])
	*($1 + [344]) = ($1 + [16])
	*($1 + [348]) = ($1 + [24])
	*($1 + [352]) = ($1 + [32])
	*($1 + [356]) = ($1 + [48])
	*($1 + [360]) = ($1 + [80])
	$2 = ($1 + [112])
	*($1 + [364]) = $2
	$3 = ($1 + [124])
	*($1 + [368]) = $3
	*($1 + [336]) = $1
	CALL $9(($1 + [336]), ($1 + [168]))
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL $29($6)
	
.LABEL $label$4
	CALL memcpy(($1 + [176]), $1, [112])
	*((($1 + [176]) + [120])) = [0]
	*($1 + [288]) = (int_64)0
	$6 = (*(($1 + [116])) - *($2))
	if ( ($6 == 0) ){ goto $label$7 }
	$2 = int_32($6 >> [5])
	if ( ((uint_32)$2 >= (uint_32)[134217728]) ){ goto $label$6 }
	$6 = CALL _Znwj($6)
	*((($1 + [176]) + [112])) = $6
	*(($7 = (($1 + [176]) + [116]))) = $6
	*(($1 + [296])) = ($6 + ($2 << [5]))
	$8 = *(($1 + [112]))
	$2 = (*(($1 + [116])) - $8)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($6, $8, $2)
	*($7) = (*($7) + $2)
	
.LABEL $label$7
	$2 = CALL $8(($1 + [300]), $3)
	$6 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$8 }
	$5 = *((*($6) + $5))
	
.LABEL $label$8
	CALL memcpy(($1 + [336]), ($1 + [176]), [112])
	*(($1 + [456])) = [0]
	*($1 + [448]) = (int_64)0
	$7 = (*(($1 + [292])) - *((($1 + [176]) + [112])))
	if ( ($7 == 0) ){ goto $label$9 }
	$0 = int_32($7 >> [5])
	if ( ((uint_32)$0 >= (uint_32)[134217728]) ){ goto $label$5 }
	$7 = CALL _Znwj($7)
	*((($1 + [336]) + [112])) = $7
	*(($4 = (($1 + [336]) + [116]))) = $7
	*(($1 + [456])) = ($7 + ($0 << [5]))
	$3 = *((($1 + [176]) + [112]))
	$0 = (*((($1 + [176]) + [116])) - $3)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($7, $3, $0)
	*($4) = (*($4) + $0)
	
.LABEL $label$9
	$0 = CALL $8(($1 + [460]), $2)
	CALL void $6((int_32 ($1 + [336])), (int_32 $5))
	if ( ((*(($1 + [484])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [492])))
	
.LABEL $label$10
	$4 = *(($1 + [472]))
	if ( ($4 == 0) ){ goto $label$11 }
	$5 = ($1 + [476])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$15
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$14 }
	$6 = *(($1 + [472]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $4
	
.LABEL $label$12
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$11
	$4 = *($0)
	if ( ($4 == 0) ){ goto $label$16 }
	$5 = ($1 + [464])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$18 }
	
.LOOP $label$19:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$20
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	$6 = *($0)
	goto $label$17 
	
.LABEL $label$18
	$6 = $4
	
.LABEL $label$17
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$6 = *($1 + [448])
	if ( ($6 == 0) ){ goto $label$21 }
	*(($1 + [452])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( ((*(($1 + [324])) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($1 + [332])))
	
.LABEL $label$22
	$4 = *(($1 + [312]))
	if ( ($4 == 0) ){ goto $label$23 }
	$5 = ($1 + [316])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$25 }
	
.LOOP $label$26:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$27 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$27
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$26 }
	$6 = *(($1 + [312]))
	goto $label$24 
	
.LABEL $label$25
	$6 = $4
	
.LABEL $label$24
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$23
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$28 }
	$5 = ($1 + [304])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$30 }
	
.LOOP $label$31:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$32 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$32
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$31 }
	$6 = *($2)
	goto $label$29 
	
.LABEL $label$30
	$6 = $4
	
.LABEL $label$29
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$28
	$6 = *($1 + [288])
	if ( ($6 == 0) ){ goto $label$33 }
	*(($1 + [292])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$33
	if ( ((*(($1 + [148])) & [1]) == 0) ){ goto $label$34 }
	CALL _ZdlPv(*(($1 + [156])))
	
.LABEL $label$34
	$4 = *(($1 + [136]))
	if ( ($4 == 0) ){ goto $label$35 }
	$2 = ($1 + [140])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$37 }
	
.LOOP $label$38:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$39 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$39
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$38 }
	$6 = *(($1 + [136]))
	goto $label$36 
	
.LABEL $label$37
	$6 = $4
	
.LABEL $label$36
	*($2) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$35
	$4 = *(($1 + [124]))
	if ( ($4 == 0) ){ goto $label$40 }
	$2 = ($1 + [128])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$42 }
	
.LOOP $label$43:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$44 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$44
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$43 }
	$6 = *(($1 + [124]))
	goto $label$41 
	
.LABEL $label$42
	$6 = $4
	
.LABEL $label$41
	*($2) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$40
	$6 = *(($1 + [112]))
	if ( ($6 == 0) ){ goto $label$45 }
	*(($1 + [116])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$45
	$global$0 = ($1 + [496])
	return [1]
	
.LABEL $label$6
	CALL $24((($1 + [176]) + [112]))
	
.LABEL $label$5
	CALL $24((($1 + [336]) + [112]))
	(unreachable)
	return (unreachable)
}

void .FUNC $2 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [8256]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$1 }
	CALL require_auth($5)
	CALL require_recipient(*($1 + [40]))
}

int_32 .FUNC $3 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [880])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$6 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$6 = CALL $26($7)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($2 - (($7 + [15]) & [-16]))
	$global$0 = $6
	
.LABEL $label$2
	CALL read_action_data($6, $7)
	
.LABEL $label$1
	$1 = CALL memset($3, [0], [288])
	CALL $6($1)
	*($1 + [308]) = $6
	*($1 + [304]) = $6
	*($1 + [312]) = ($6 + $7)
	*($1 + [296]) = ($1 + [304])
	*($1 + [596]) = ($1 | [8])
	$2 = ($1 + [16])
	*($1 + [600]) = $2
	$8 = ($1 + [32])
	*($1 + [604]) = $8
	*($1 + [608]) = ($1 + [40])
	*($1 + [612]) = ($1 + [48])
	*($1 + [616]) = ($1 + [56])
	*($1 + [620]) = ($1 + [80])
	*($1 + [624]) = ($1 + [112])
	$9 = ($1 + [128])
	*($1 + [628]) = $9
	*($1 + [592]) = $1
	CALL $7(($1 + [592]), ($1 + [296]))
	if ( ($7 <= [513]) ){ goto $label$4 }
	CALL $29($6)
	
.LABEL $label$4
	*($1 + [312]) = *($1 + [8])
	*($1 + [304]) = *($1)
	$3 = CALL $22((($1 + [304]) + [16]), $2)
	$7 = CALL memcpy((($1 + [304]) + [32]), $8, [96])
	$8 = CALL memcpy((($1 + [304]) + [128]), $9, [112])
	*(($1 + [552])) = [0]
	*(($2 = (($1 + [304]) + [240]))) = (int_64)0
	$6 = (*(($1 + [244])) - *(($1 + [240])))
	if ( ($6 == 0) ){ goto $label$7 }
	$9 = int_32($6 >> [5])
	if ( ((uint_32)$9 >= (uint_32)[134217728]) ){ goto $label$6 }
	$6 = CALL _Znwj($6)
	*((($1 + [304]) + [240])) = $6
	*(($2 = (($1 + [304]) + [244]))) = $6
	*(($1 + [552])) = ($6 + ($9 << [5]))
	$10 = *(($1 + [240]))
	$9 = (*(($1 + [244])) - $10)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($6, $10, $9)
	*($2) = (*($2) + $9)
	
.LABEL $label$7
	$2 = CALL $8((($1 + [304]) + [252]), ($1 + [252]))
	$6 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$8 }
	$5 = *((*($6) + $5))
	
.LABEL $label$8
	*($1 + [600]) = *($1 + [312])
	*($1 + [592]) = *($1 + [304])
	$9 = CALL $22(($1 + [608]), $3)
	CALL memcpy(($1 + [624]), $7, [96])
	CALL memcpy(($1 + [720]), $8, [112])
	*(($1 + [840])) = [0]
	*(($4 = (($1 + [592]) + [240]))) = (int_64)0
	$7 = (*(($1 + [548])) - *((($1 + [304]) + [240])))
	if ( ($7 == 0) ){ goto $label$9 }
	$0 = int_32($7 >> [5])
	if ( ((uint_32)$0 >= (uint_32)[134217728]) ){ goto $label$5 }
	$7 = CALL _Znwj($7)
	*((($1 + [592]) + [240])) = $7
	*(($4 = (($1 + [592]) + [244]))) = $7
	*(($1 + [840])) = ($7 + ($0 << [5]))
	$8 = *((($1 + [304]) + [240]))
	$0 = (*((($1 + [304]) + [244])) - $8)
	if ( ((int_32)$0 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($7, $8, $0)
	*($4) = (*($4) + $0)
	
.LABEL $label$9
	$0 = CALL $8(($1 + [844]), $2)
	CALL void $6((int_32 ($1 + [592])), (int_32 $5))
	if ( ((*(($1 + [868])) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($1 + [876])))
	
.LABEL $label$10
	$4 = *(($1 + [856]))
	if ( ($4 == 0) ){ goto $label$11 }
	$5 = ($1 + [860])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$15
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$14 }
	$6 = *(($1 + [856]))
	goto $label$12 
	
.LABEL $label$13
	$6 = $4
	
.LABEL $label$12
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$11
	$4 = *($0)
	if ( ($4 == 0) ){ goto $label$16 }
	$5 = ($1 + [848])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$18 }
	
.LOOP $label$19:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$20
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$19 }
	$6 = *($0)
	goto $label$17 
	
.LABEL $label$18
	$6 = $4
	
.LABEL $label$17
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$16
	$6 = *(($1 + [832]))
	if ( ($6 == 0) ){ goto $label$21 }
	*(($1 + [836])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$21
	if ( ((*($9) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*(($1 + [616])))
	
.LABEL $label$22
	if ( ((*(($1 + [580])) & [1]) == 0) ){ goto $label$23 }
	CALL _ZdlPv(*(($1 + [588])))
	
.LABEL $label$23
	$4 = *(($1 + [568]))
	if ( ($4 == 0) ){ goto $label$24 }
	$5 = ($1 + [572])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$26 }
	
.LOOP $label$27:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$28 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$28
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$27 }
	$6 = *(($1 + [568]))
	goto $label$25 
	
.LABEL $label$26
	$6 = $4
	
.LABEL $label$25
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$24
	$4 = *($2)
	if ( ($4 == 0) ){ goto $label$29 }
	$5 = ($1 + [560])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$31 }
	
.LOOP $label$32:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$33 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$33
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$32 }
	$6 = *($2)
	goto $label$30 
	
.LABEL $label$31
	$6 = $4
	
.LABEL $label$30
	*($5) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$29
	$6 = *(($1 + [544]))
	if ( ($6 == 0) ){ goto $label$34 }
	*(($1 + [548])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$34
	if ( ((*($3) & [1]) == 0) ){ goto $label$35 }
	CALL _ZdlPv(*(($1 + [328])))
	
.LABEL $label$35
	if ( ((*(($1 + [276])) & [1]) == 0) ){ goto $label$36 }
	CALL _ZdlPv(*(($1 + [284])))
	
.LABEL $label$36
	$4 = *(($1 + [264]))
	if ( ($4 == 0) ){ goto $label$37 }
	$2 = ($1 + [268])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$39 }
	
.LOOP $label$40:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$41
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$40 }
	$6 = *(($1 + [264]))
	goto $label$38 
	
.LABEL $label$39
	$6 = $4
	
.LABEL $label$38
	*($2) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$37
	$4 = *(($1 + [252]))
	if ( ($4 == 0) ){ goto $label$42 }
	$2 = ($1 + [256])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$44 }
	
.LOOP $label$45:
	$6 = ($7 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$46 }
	CALL _ZdlPv(*(($7 + [-4])))
	
.LABEL $label$46
	$7 = $6
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$45 }
	$6 = *(($1 + [252]))
	goto $label$43 
	
.LABEL $label$44
	$6 = $4
	
.LABEL $label$43
	*($2) = $4
	CALL _ZdlPv($6)
	
.LABEL $label$42
	$6 = *(($1 + [240]))
	if ( ($6 == 0) ){ goto $label$47 }
	*(($1 + [244])) = $6
	CALL _ZdlPv($6)
	
.LABEL $label$47
	if ( ((*(($1 + [16])) & [1]) == 0) ){ goto $label$48 }
	CALL _ZdlPv(*(($1 + [24])))
	
.LABEL $label$48
	$global$0 = ($1 + [880])
	return [1]
	
.LABEL $label$6
	CALL $24($2)
	
.LABEL $label$5
	CALL $24($4)
	(unreachable)
	return (unreachable)
}

void .FUNC memory ()
{
}

void .FUNC apply (int_64 $0, int_64 apply, int_64 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [48])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [8192])
	
.LABEL $label$2
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$5 }
	$4 = (int_64)7
	
.LOOP $label$6:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$6 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*($3 + [40]) = $0
	if ( ((int_64)$2 == (int_64)7035937269232844800) ){ goto $label$7 }
	if ( ((int_64)$2 != (int_64)-4994024814571159552) ){ goto $label$4 }
	*($3 + [36]) = [0]
	*($3 + [32]) = [1]
	*($3 + [8]) = *($3 + [32])
	CALL $3(($3 + [40]), ($3 + [8]))
	goto $label$4 
	
.LABEL $label$7
	*($3 + [28]) = [0]
	*($3 + [24]) = [2]
	*($3 + [16]) = *($3 + [24])
	CALL $5(($3 + [40]), ($3 + [16]))
	
.LABEL $label$4
	CALL $25([0])
	$global$0 = ($3 + [48])
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8343])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$7 = (CASTING uint_32)(uint_64 $4)
	$6 = *($1)
	$2 = *($1 + [4])
	$3 = ((int_32)($2 - $6) / (int_32)[12])
	if ( ((uint_32)$3 >= (uint_32)$7) ){ goto $label$4 }
	CALL $16($1, ($7 - $3))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$7) ){ goto $label$5 }
	$3 = ($6 + ((int_32)$7 * (int_32)[12]))
	if ( ((int_32)$3 == (int_32)$2) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = ($2 + [-12])
	if ( ((*($7) & [1]) == 0) ){ goto $label$8 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$8
	$2 = $7
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$6
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$5
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$9:
	CALL $10($0, $7)
	$7 = ($7 + [12])
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$2
	return $0
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $3) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$4 = *($0)
	$5 = int_32(($3 - $4) >> [5])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$4 }
	$3 = [134217727]
	$2 = ($2 - $4)
	if ( ((uint_32)int_32($2 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$3 = int_32($2 >> [4])
	$3 = ( $6 ? $3 : ($3 <= $6) )
	if ( ($3 == 0) ){ goto $label$5 }
	if ( ((uint_32)$3 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$2 = CALL _Znwj(($3 << [5]))
	goto $label$2 
	
.LABEL $label$6
	$0 = ($0 + [4])
	
.LOOP $label$8:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = (*($0) + [32])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$3 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $24($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$4 = ($2 + ($3 << [5]))
	$5 = ($2 + ($5 << [5]))
	$3 = $5
	
.LOOP $label$9:
	*($3) = (int_64)0
	*(($3 + [24])) = (int_64)0
	*(($3 + [16])) = (int_64)0
	*(($3 + [8])) = (int_64)0
	$3 = ($3 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$6 = ($2 + ($6 << [5]))
	$3 = *($0)
	$7 = ($0 + [4])
	$1 = (*($7) - $3)
	$2 = ($5 - $1)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$10 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$10
	*($0) = $2
	*($7) = $6
	*(($0 + [8])) = $4
	if ( ($3 == 0) ){ goto $label$1 }
	CALL _ZdlPv($3)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

void .FUNC $16 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)((int_32)($2 - $3) / (int_32)[12]) >= (uint_32)$1) ){ goto $label$4 }
	$4 = *($0)
	$3 = ((int_32)($3 - $4) / (int_32)[12])
	$5 = ($3 + $1)
	if ( ((uint_32)$5 >= (uint_32)[357913942]) ){ goto $label$2 }
	$6 = [357913941]
	$2 = ((int_32)($2 - $4) / (int_32)[12])
	if ( ((uint_32)$2 > (uint_32)[178956969]) ){ goto $label$5 }
	$6 = ($2 << [1])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$5
	$2 = CALL _Znwj(((int_32)$6 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$4
	$6 = $3
	$2 = $1
	
.LOOP $label$6:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$6 }
	*(($0 + [4])) = ($3 + ((int_32)$1 * (int_32)[12]))
	return (unreachable)
	
.LABEL $label$3
	$6 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $24($0)
	
.LABEL $label$1
	$4 = ($2 + ((int_32)$6 * (int_32)[12]))
	$3 = ($2 + ((int_32)$3 * (int_32)[12]))
	$6 = $3
	$2 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	*(($6 + [8])) = [0]
	$6 = ($6 + [12])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$7 }
	$5 = ($3 + ((int_32)$1 * (int_32)[12]))
	$2 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = ($6 + [-4])
	*(($3 + [-4])) = *($1)
	$6 = ($6 + [-12])
	*(($3 = ($3 + [-12]))) = *($6)
	*($6) = (int_64)0
	*($1) = [0]
	if ( ((int_32)$2 != (int_32)$6) ){ goto $label$10 }
	$2 = *(($0 + [4]))
	$1 = *($0)
	goto $label$8 
	
.LABEL $label$9
	$1 = $2
	
.LABEL $label$8
	*($0) = $3
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$11 }
	
.LOOP $label$12:
	$6 = ($2 + [-12])
	if ( ((*($6) & [1]) == 0) ){ goto $label$13 }
	CALL _ZdlPv(*(($2 + [-4])))
	
.LABEL $label$13
	$2 = $6
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ($1 == 0) ){ goto $label$14 }
	CALL _ZdlPv($1)
	
.LABEL $label$14
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $26($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8348])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $26($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $11($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $23($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $23($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $21($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8343])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $12($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [8338])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $24($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [8343])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$2 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$6 = *($1 + [4])
	$3 = int_32(($6 - $7) >> [5])
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$4 }
	CALL $15($1, ($2 - $3))
	$6 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$5 }
	$6 = ($7 + ($2 << [5]))
	*(($1 + [4])) = $6
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = ($0 + [4])
	$3 = *($2)
	$5 = ($0 + [8])
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*($5) - $3) > (uint_32)[19]), [8338])
	CALL memcpy($7, *($2), [20])
	$3 = (*($2) + [20])
	*($2) = $3
	$7 = ($7 + [32])
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $21 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $29($0)
	
.LABEL $label$1
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $28($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [16756])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $26 (int_32 $0)
{
	return CALL $27([8360], $0)
}