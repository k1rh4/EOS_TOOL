(data (i32.const 4) "pe\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "read\00")
(data (i32.const 128) "creator should be _self \00")
(data (i32.const 160) "cannot pass end iterator to erase\00")
(data (i32.const 208) "cannot increment end iterator\00")
(data (i32.const 240) "object passed to erase is not in multi_index\00")
(data (i32.const 288) "cannot erase objects in table of another contract\00")
(data (i32.const 352) "attempt to remove object that was not in multi_index\00")
(data (i32.const 416) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 480) "cannot decrement iterator at beginning of table\00")
(data (i32.const 528) "error reading iterator\00")
(data (i32.const 560) "get\00")
(data (i32.const 576) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 640) "the rate has canceled rating the dapp\00")
(data (i32.const 688) "the dapp\'s score table doesn\'t exist\00")
(data (i32.const 736) "cannot pass end iterator to modify\00")
(data (i32.const 784) "object passed to modify is not in multi_index\00")
(data (i32.const 832) "cannot modify objects in table of another contract\00")
(data (i32.const 896) "updater cannot change primary key when modifying an object\00")
(data (i32.const 960) "write\00")
(data (i32.const 976) "score should be from 0 to 5\00")
(data (i32.const 1008) "the rate has rate the dapp\00")
(data (i32.const 1040) "cannot create objects in table of another contract\00")
(data (i32.const 9488) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$10 (param i32)))
(import "env" "db_store_i64" (func $fimport$11 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$12 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$13 (param i32 i32)))
(import "env" "memcpy" (func $fimport$14 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$15 (param i32)))
(import "env" "read_action_data" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$17 (param i64)))
(import "env" "require_auth2" (func $fimport$18 (param i64 i64)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "_ZN9dappspace8dapptalk4rateEyyy" (func $6))
(export "_ZN9dappspace8dapptalk10cancelrateEyy" (func $8))
(export "_ZN9dappspace8dapptalk4postEyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_yS7_S7_" (func $10))
(export "_ZN9dappspace8dapptalk4apprEyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $12))
(export "_ZN9dappspace8dapptalk10cancelapprEyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $14))
(export "_ZN9dappspace8dapptalk5opposEyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $15))
(export "_ZN9dappspace8dapptalk11cancelopposEyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy" (func $16))
(export "_ZN9dappspace8dapptalk5cleanEy" (func $17))
(export "malloc" (func $33))
(export "free" (func $36))
(export "memcmp" (func $43))
(table $0 9 9 anyfunc)
(elem (i32.const 0) $44 $10 $16 $12 $17 $15 $14 $6 $8)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [112])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [528])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $37([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [112])
	CALL memcpy($6, $7, [8])
	$4 = ($4 & [-8])
	CALL eosio_assert(((int_32)$4 != (int_32)[8]), [112])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((int_32)$4 != (int_32)[16]), [112])
	CALL memcpy(($6 + [16]), ($7 + [16]), [8])
	*($6 + [28]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [28])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $22(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $38($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $39 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $29 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$0 = *($0 + [4])
	$9 = *($0 + [4])
	$8 = (*(*($0)) + int_32($9 >> [1]))
	$0 = *($0)
	if ( (($9 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($8) + $0))
	
.LABEL $label$1
	CALL $42(($10 + [48]), $3)
	CALL $42(($10 + [32]), $4)
	CALL $42(($10 + [16]), $6)
	CALL $42($10, $7)
	CALL void $8((int_32 $1), (int_64 $2), (int_64 ($10 + [48])), (int_32 ($10 + [32])), (int_32 $5), (int_64 ($10 + [16])), (int_32 $10), (int_32 $0))
	if ( ((*($10) & [1]) == 0) ){ goto $label$2 }
	CALL $38(*($10 + [8]))
	
.LABEL $label$2
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $38(*($10 + [24]))
	
.LABEL $label$3
	if ( ((*($10 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $38(*($10 + [40]))
	
.LABEL $label$4
	if ( ((*($10 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $38(*($10 + [56]))
	
.LABEL $label$5
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	$2 = *($1 + [8])
	$3 = *($1)
	CALL $42(($5 + [48]), ($1 + [16]))
	CALL $42(($5 + [32]), ($1 + [28]))
	$4 = *($1 + [40])
	CALL $42(($5 + [16]), ($1 + [48]))
	CALL $42($5, ($1 + [60]))
	CALL $29($0, $3, $2, ($5 + [48]), ($5 + [32]), $4, ($5 + [16]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$1 }
	CALL $38(*($5 + [8]))
	
.LABEL $label$1
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $38(*($5 + [24]))
	
.LABEL $label$2
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$3 }
	CALL $38(*($5 + [40]))
	
.LABEL $label$3
	if ( ((*($5 + [48]) & [1]) == 0) ){ goto $label$4 }
	CALL $38(*($5 + [56]))
	
.LABEL $label$4
	*([0] + [4]) = ($5 + [64])
}

void .FUNC $21 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [352])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $38($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $38($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [28]))
}

int_32 .FUNC $20 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [28]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [480])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)7235159537265672192)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [416])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [416])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $19(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $25($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $40($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $37($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $40($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $38($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $39($7)
	return (unreachable)
}

void .FUNC $22 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $37(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $41($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $38($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $38($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [560])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $26($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [112])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $42($6, ($1 + [16]))
	$4 = *($1 + [32])
	$1 = *($0 + [4])
	$5 = *($1 + [4])
	$0 = (*(*($0)) + int_32($5 >> [1]))
	$1 = *($1)
	if ( (($5 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $42(($6 + [16]), $6)
	CALL void $0((int_32 $2), (int_64 $3), (int_64 ($6 + [16])), (int_32 $4), (int_64 $1))
	if ( ((*($6 + [16]) & [1]) == 0) ){ goto $label$2 }
	CALL $38(*($6 + [24]))
	
.LABEL $label$2
	if ( ((*($6) & [1]) == 0) ){ goto $label$3 }
	CALL $38(*($6 + [8]))
	
.LABEL $label$3
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [112])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $23(*($1), ($3 + [16]))
	CALL $23(*($1), ($3 + [28]))
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [112])
	CALL memcpy(($3 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $23(*($1), ($3 + [48]))
	CALL $23(*($1), ($3 + [60]))
}

void .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $37($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $41($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $38($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $37($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $41 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $37(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $38($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $44 ()
{
	(unreachable)
}

void .FUNC _ZN9dappspace8dapptalk10cancelrateEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	CALL require_auth($1)
	*(($9 + [40])) = [0]
	*($9 + [16]) = $2
	*($9 + [24]) = (int_64)-1
	*($9 + [32]) = (int_64)0
	$7 = *($0)
	*($9 + [8]) = $7
	$8 = CALL db_find_i64($7, $2, (int_64)-5065797652277362688, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$8 = CALL $30(($9 + [8]), $8)
	CALL eosio_assert(((int_32)*($8 + [16]) == (int_32)($9 + [8])), [576])
	$1 = *($8 + [8])
	CALL eosio_assert([1], [160])
	CALL eosio_assert([1], [208])
	$6 = CALL db_next_i64(*($8 + [20]), ($9 + [48]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$9 }
	CALL $30(($9 + [8]), $6)
	
.LABEL $label$9
	CALL $31(($9 + [8]), $8)
	$3 = *(($0 + [32]))
	$5 = *(($0 + [36]))
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$10 }
	$8 = ($5 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$11:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$10 }
	$5 = $8
	$6 = ($8 + [-24])
	$8 = $6
	if ( ((int_32)($6 + $4) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = ($0 + [8])
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$7 }
	$8 = *(($5 + [-24]))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [576])
	if ( $8 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	CALL prints([640])
	$5 = *($9 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$8 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159537265672192, $2)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$5 }
	$8 = CALL $19($6, $8)
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [576])
	
.LABEL $label$6
	if ( (uint_64)(*($8 + [16]) <= (int_64)2) ){ goto $label$4 }
	CALL eosio_assert([1], [736])
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [784])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [832])
	$2 = *($8 + [16])
	$7 = ((int_64)$2 + (int_64)-1)
	*($8 + [16]) = $7
	*($8 + [8]) = ((uint_64)((int_64)((int_64)$2 * (int_64)*($8 + [8])) + (int_64)((int_64)$1 * (int_64)-100)) / (uint_64)$7)
	$2 = *($8)
	CALL eosio_assert([1], [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($9 + [48]), $8, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($9 + [48]) | [8]), ($8 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($9 + [48]) + [16]), ($8 + [16]), [8])
	CALL db_update_i64(*($8 + [28]), (int_64)0, ($9 + [48]), [24])
	$8 = ($0 + [24])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$3 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$5 = *($9 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	CALL prints([688])
	$5 = *($9 + [32])
	if ( $5 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	CALL eosio_assert([1], [160])
	CALL eosio_assert([1], [208])
	$5 = CALL db_next_i64(*($8 + [28]), ($9 + [48]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$12 }
	CALL $19($6, $5)
	
.LABEL $label$12
	CALL $21($6, $8)
	
.LABEL $label$3
	$5 = *($9 + [32])
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$4 = ($9 + [36])
	$8 = *($4)
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$14 }
	
.LOOP $label$15:
	$8 = ($8 + [-24])
	$6 = *($8)
	*($8) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	CALL $38($6)
	
.LABEL $label$16
	if ( ((int_32)$5 != (int_32)$8) ){ goto $label$15 }
	$8 = *(($9 + [32]))
	goto $label$13 
	
.LABEL $label$14
	$8 = $5
	
.LABEL $label$13
	*($4) = $5
	CALL $38($8)
	
.LABEL $label$1
	*([0] + [4]) = ($9 + [80])
}

int_32 .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [112])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [112])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC _ZN9dappspace8dapptalk4rateEyyy (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	CALL require_auth($1)
	CALL eosio_assert((uint_64)($3 <= (int_64)6), [976])
	*((($11 + [8]) + [32])) = [0]
	*($11 + [16]) = $2
	*($11 + [24]) = (int_64)-1
	*($11 + [32]) = (int_64)0
	$4 = *($0)
	*($11 + [8]) = $4
	$10 = CALL db_find_i64($4, $2, (int_64)-5065797652277362688, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	CALL eosio_assert(((int_32)*(CALL $30(($11 + [8]), $10) + [16]) == (int_32)($11 + [8])), [576])
	CALL prints([1008])
	goto $label$3 
	
.LABEL $label$4
	CALL eosio_assert(((int_64)$4 == (int_64)CALL $fimport$2()), [1040])
	*(($10 = CALL $37([32])) + [16]) = ($11 + [8])
	*($10 + [8]) = $3
	*($10) = $1
	CALL eosio_assert([1], [960])
	CALL memcpy(($11 + [64]), $10, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($11 + [64]) | [8]), ($10 + [8]), [8])
	$4 = *($10)
	$7 = CALL db_store_i64(*((($11 + [8]) + [8])), (int_64)-5065797652277362688, $1, $4, ($11 + [64]), [16])
	*($10 + [20]) = $7
	$8 = (($11 + [8]) + [16])
	if ( (uint_64)($4 <= *($8)) ){ goto $label$5 }
	*($8) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($11 + [56]) = $10
	$1 = *($10)
	*($11 + [64]) = $1
	*($11 + [52]) = $7
	$6 = ($11 + [36])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*(($11 + [40]))) ){ goto $label$7 }
	*($8 + [8]) = $1
	*($8 + [16]) = $7
	*($11 + [56]) = [0]
	*($8) = $10
	*($6) = ($8 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $32(($11 + [32]), ($11 + [56]), ($11 + [64]), ($11 + [52]))
	
.LABEL $label$6
	$10 = *($11 + [56])
	*($11 + [56]) = [0]
	if ( ($10 == 0) ){ goto $label$8 }
	CALL $38($10)
	
.LABEL $label$8
	$5 = *(($0 + [32]))
	$7 = *(($0 + [36]))
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$9 }
	$10 = ($7 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$10:
	if ( ((int_64)*(*($10)) == (int_64)$2) ){ goto $label$9 }
	$7 = $10
	$8 = ($10 + [-24])
	$10 = $8
	if ( ((int_32)($8 + $6) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$8 = ($0 + [8])
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$13 }
	$10 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$8), [576])
	if ( $10 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$10 = CALL db_find_i64(*(($0 + [8])), *(($0 + [16])), (int_64)7235159537265672192, $2)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$11 }
	$10 = CALL $19($8, $10)
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$8), [576])
	
.LABEL $label$12
	CALL eosio_assert([1], [736])
	CALL eosio_assert(((int_32)*($10 + [24]) == (int_32)$8), [784])
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [832])
	$1 = *($10)
	*($10) = $2
	$4 = *($10 + [16])
	$9 = ((int_64)$4 + (int_64)1)
	*($10 + [16]) = $9
	*($10 + [8]) = ((uint_64)((int_64)((int_64)$4 * (int_64)*($10 + [8])) + (int_64)((int_64)$3 * (int_64)100)) / (uint_64)$9)
	CALL eosio_assert(((int_64)$1 == (int_64)$2), [896])
	CALL eosio_assert([1], [960])
	CALL memcpy(($11 + [64]), $10, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($11 + [64]) | [8]), ($10 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($11 + [64]) + [16]), ($10 + [16]), [8])
	CALL db_update_i64(*($10 + [28]), (int_64)0, ($11 + [64]), [24])
	$10 = ($0 + [24])
	if ( (uint_64)($1 <= *($10)) ){ goto $label$3 }
	*($10) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	$7 = *($11 + [32])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$11
	$1 = *($0)
	CALL eosio_assert(((int_64)*(($0 + [8])) == (int_64)CALL $fimport$2()), [1040])
	*(($10 = CALL $37([40])) + [24]) = $8
	*($10 + [8]) = ((int_64)$3 * (int_64)100)
	*($10) = $2
	*($10 + [16]) = (int_64)1
	CALL eosio_assert([1], [960])
	CALL memcpy(($11 + [64]), $10, [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($11 + [64]) | [8]), ($10 + [8]), [8])
	CALL eosio_assert([1], [960])
	CALL memcpy((($11 + [64]) + [16]), ($10 + [16]), [8])
	$2 = *($10)
	$7 = CALL db_store_i64(*(($0 + [16])), (int_64)7235159537265672192, $1, $2, ($11 + [64]), [24])
	*($10 + [28]) = $7
	$8 = ($0 + [24])
	if ( (uint_64)($2 <= *($8)) ){ goto $label$14 }
	*($8) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$14
	*($11 + [56]) = $10
	$2 = *($10)
	*($11 + [64]) = $2
	*($11 + [52]) = $7
	$6 = ($0 + [36])
	$8 = *($6)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [40]))) ){ goto $label$16 }
	*($8 + [8]) = $2
	*($8 + [16]) = $7
	*($11 + [56]) = [0]
	*($8) = $10
	*($6) = ($8 + [24])
	goto $label$15 
	
.LABEL $label$16
	CALL $22(($0 + [32]), ($11 + [56]), ($11 + [64]), ($11 + [52]))
	
.LABEL $label$15
	$10 = *($11 + [56])
	*($11 + [56]) = [0]
	if ( ($10 == 0) ){ goto $label$3 }
	CALL $38($10)
	$7 = *($11 + [32])
	if ( $7 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$7 = *($11 + [32])
	if ( ($7 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$0 = ($11 + [36])
	$10 = *($0)
	if ( ((int_32)$10 == (int_32)$7) ){ goto $label$18 }
	
.LOOP $label$19:
	$10 = ($10 + [-24])
	$8 = *($10)
	*($10) = [0]
	if ( ($8 == 0) ){ goto $label$20 }
	CALL $38($8)
	
.LABEL $label$20
	if ( ((int_32)$7 != (int_32)$10) ){ goto $label$19 }
	$10 = *(($11 + [32]))
	goto $label$17 
	
.LABEL $label$18
	$10 = $7
	
.LABEL $label$17
	*($0) = $7
	CALL $38($10)
	
.LABEL $label$1
	*([0] + [4]) = ($11 + [96])
}

int_32 .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [32])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	*($10 + [16]) = (int_64)0
	*($10 + [8]) = (int_64)0
	*($10 + [24]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [112])
	CALL memcpy(($10 + [8]), $8, [8])
	$6 = ($1 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [112])
	$7 = (($10 + [8]) + [8])
	CALL memcpy($7, ($8 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [112])
	$6 = (($10 + [8]) + [16])
	CALL memcpy($6, ($8 + [16]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$5 = *($6)
	$4 = *($7)
	$3 = *($10 + [8])
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $5), (int_64 $9))
	*([0] + [4]) = ($10 + [32])
	return [1]
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [176])
	*([0] + [4]) = $11
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [32]
	$9 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$8 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$9
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$9 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$8 = (int_64)0
	$7 = (int_64)59
	$6 = [16]
	$9 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$8 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$10 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$17
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	*(($11 + [144])) = $0
	*(($11 + [152])) = (int_64)-1
	*(($11 + [160])) = (int_64)0
	*(($11 + [168])) = [0]
	*($11 + [136]) = $0
	*($11 + [128]) = $0
	if ( ((int_64)$2 > (int_64)4730614989288488959) ){ goto $label$29 }
	if ( ((int_64)$2 > (int_64)-5065810708977942529) ){ goto $label$28 }
	if ( ((int_64)$2 == (int_64)-6527039672059691008) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)-5966829701614796800) ){ goto $label$22 }
	*($11 + [108]) = [0]
	*($11 + [104]) = [1]
	*($11 + [16 align=4]) = *($11 + [104])
	CALL $11(($11 + [128]), ($11 + [16]))
	goto $label$22 
	
.LABEL $label$29
	if ( ((int_64)$2 > (int_64)4730614998165520383) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)4730614989288488960) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)4730614996804644864) ){ goto $label$22 }
	*($11 + [76]) = [0]
	*($11 + [72]) = [2]
	*($11 + [48 align=4]) = *($11 + [72])
	CALL $13(($11 + [128]), ($11 + [48]))
	goto $label$22 
	
.LABEL $label$28
	if ( ((int_64)$2 == (int_64)-5065810708977942528) ){ goto $label$24 }
	if ( ((int_64)$2 != (int_64)3849293451820531712) ){ goto $label$22 }
	*($11 + [100]) = [0]
	*($11 + [96]) = [3]
	*($11 + [24 align=4]) = *($11 + [96])
	CALL $13(($11 + [128]), ($11 + [24]))
	goto $label$22 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)4730614998165520384) ){ goto $label$23 }
	if ( ((int_64)$2 != (int_64)4923676291099525120) ){ goto $label$22 }
	*($11 + [68]) = [0]
	*($11 + [64]) = [4]
	*($11 + [56 align=4]) = *($11 + [64])
	CALL $18(($11 + [128]), ($11 + [56]))
	goto $label$22 
	
.LABEL $label$26
	*($11 + [84]) = [0]
	*($11 + [80]) = [5]
	*($11 + [40 align=4]) = *($11 + [80])
	CALL $13(($11 + [128]), ($11 + [40]))
	goto $label$22 
	
.LABEL $label$25
	*($11 + [92]) = [0]
	*($11 + [88]) = [6]
	*($11 + [32 align=4]) = *($11 + [88])
	CALL $13(($11 + [128]), ($11 + [32]))
	goto $label$22 
	
.LABEL $label$24
	*($11 + [124]) = [0]
	*($11 + [120]) = [7]
	*($11) = *($11 + [120])
	CALL $7(($11 + [128]), $11)
	goto $label$22 
	
.LABEL $label$23
	*($11 + [116]) = [0]
	*($11 + [112]) = [8]
	*($11 + [8 align=4]) = *($11 + [112])
	CALL $9(($11 + [128]), ($11 + [8]))
	
.LABEL $label$22
	$4 = *(($11 + [160]))
	if ( ($4 == 0) ){ goto $label$14 }
	$5 = ($11 + [164])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$31 }
	
.LOOP $label$32:
	$6 = ($6 + [-24])
	$3 = *($6)
	*($6) = [0]
	if ( ($3 == 0) ){ goto $label$33 }
	CALL $38($3)
	
.LABEL $label$33
	if ( ((int_32)$4 != (int_32)$6) ){ goto $label$32 }
	$6 = *(($11 + [160]))
	goto $label$30 
	
.LABEL $label$31
	$6 = $4
	
.LABEL $label$30
	*($5) = $4
	CALL $38($6)
	
.LABEL $label$14
	*([0] + [4]) = ($11 + [176])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC _ZN9dappspace8dapptalk10cancelapprEyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	CALL require_auth($2)
}

void .FUNC _ZN9dappspace8dapptalk5opposEyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	CALL require_auth($2)
}

void .FUNC _ZN9dappspace8dapptalk11cancelopposEyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	CALL require_auth($2)
}

void .FUNC _ZN9dappspace8dapptalk5cleanEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_64)*($0) == (int_64)$1), [128])
	CALL require_auth(*($0))
	$3 = ($0 + [16])
	$2 = CALL db_lowerbound_i64(*($0 + [8]), *($3), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$0 = ($0 + [8])
	
.LOOP $label$2:
	CALL $19($0, $2)
	*($5) = $0
	*($5 + [4]) = [0]
	$1 = *(CALL $20($5))
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$4 = ((int_32)$2) != (int_32)[0]
	CALL eosio_assert($4), [160])
	CALL eosio_assert($4, [208])
	$4 = CALL db_next_i64(*($2 + [28]), ($5 + [8]))
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$3 }
	CALL $19((CASTING uint_32)(uint_64 $1), $4)
	
.LABEL $label$3
	CALL $21($0, $2)
	$2 = CALL db_lowerbound_i64(*($0), *($3), (int_64)7235159537265672192, (int_64)0)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$2 }
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC _ZN9dappspace8dapptalk4postEyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_yS7_S7_ (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_64 $5, int_32 $6, int_32 $7)
{
	CALL require_auth($2)
}

int_32 .FUNC $11 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [128])
	*([0] + [4]) = $3
	*(($2 = $3) + [92]) = $0
	*($2 + [80]) = *($1)
	*($2 + [84]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [32])) = (int_64)0
	*(($2 + [40])) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [8]) = (int_64)0
	*($2 + [24]) = (int_64)0
	*($2 + [48]) = (int_64)0
	*($2 + [56]) = [0]
	*(($2 + [60])) = [0]
	*(($2 + [64])) = [0]
	*($2 + [68]) = [0]
	*(($2 + [72])) = [0]
	*(($2 + [76])) = [0]
	*($2 + [100]) = $1
	*($2 + [96]) = $1
	*($2 + [104]) = ($1 + $0)
	*($2 + [112]) = ($2 + [96])
	*($2 + [120]) = ($2 + [8])
	CALL $27(($2 + [120]), ($2 + [112]))
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [100]) = ($2 + [80])
	*($2 + [96]) = ($2 + [92])
	CALL $28(($2 + [96]), ($2 + [8]))
	if ( ((*($2 + [68]) & [1]) == 0) ){ goto $label$5 }
	CALL $38(*(($2 + [76])))
	
.LABEL $label$5
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$6 }
	CALL $38(*(($2 + [64])))
	
.LABEL $label$6
	if ( ((*($2 + [36]) & [1]) == 0) ){ goto $label$7 }
	CALL $38(*(($2 + [44])))
	
.LABEL $label$7
	if ( ((*($2 + [24]) & [1]) == 0) ){ goto $label$8 }
	CALL $38(*(($2 + [32])))
	
.LABEL $label$8
	*([0] + [4]) = ($2 + [128])
	return [1]
}

void .FUNC _ZN9dappspace8dapptalk4apprEyyNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEy (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4)
{
	CALL require_auth($2)
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [80])
	*([0] + [4]) = $4
	*(($3 = $4) + [60]) = $0
	*($3 + [48]) = *($1)
	*($3 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($4 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($3 + [32])) = [0]
	*($3 + [16]) = (int_64)0
	*($3 + [8]) = (int_64)0
	*($3 + [24]) = (int_64)0
	*($3 + [40]) = (int_64)0
	*($3 + [64]) = $1
	$4 = ($1 + $0)
	*($3 + [72]) = $4
	CALL eosio_assert(((uint_32)$0 > (uint_32)[7]), [112])
	CALL memcpy(($3 + [8]), $1, [8])
	$2 = ($1 + [8])
	CALL eosio_assert(((uint_32)($4 - $2) > (uint_32)[7]), [112])
	CALL memcpy((($3 + [8]) + [8]), $2, [8])
	*($3 + [68]) = ($1 + [16])
	CALL $23(($3 + [64]), (($3 + [8]) + [16]))
	CALL eosio_assert(((uint_32)(*($3 + [72]) - *($3 + [68])) > (uint_32)[7]), [112])
	CALL memcpy(($3 + [40]), *($3 + [68]), [8])
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $24(($3 + [64]), ($3 + [8]))
	if ( ((*($3 + [24]) & [1]) == 0) ){ goto $label$5 }
	CALL $38(*(($3 + [32])))
	
.LABEL $label$5
	*([0] + [4]) = ($3 + [80])
	return [1]
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9476])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9284]
	$1 = (((int_32)$2 * (int_32)[12]) + [9284])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $37 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9580])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $35($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9488])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $35 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9574]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9576])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9574]) = [1]
	$7 = ($7 << [16])
	*([0] + [9576]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9576])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9576]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9574]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9574]) = [1]
	$3 = ($3 << [16])
	*([0] + [9576]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9576])
	
.LABEL $label$8
	*([0] + [9576]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $37(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $41($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $38($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $38($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $34([1092], $0)
}

int_32 .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [528])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $37([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [112])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [112])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $32(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $38($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [240])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [288])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [352])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $38($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $38($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [20]))
}

void .FUNC $38 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}