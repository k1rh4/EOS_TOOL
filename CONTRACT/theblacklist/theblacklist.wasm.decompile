(data (i32.const 4) "\00f\00\00")
(data (i32.const 16) "onerror\00")
(data (i32.const 32) "eosio\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 112) "read\00")
(data (i32.const 128) "cannot pass end iterator to erase\00")
(data (i32.const 176) "object passed to erase is not in multi_index\00")
(data (i32.const 224) "cannot erase objects in table of another contract\00")
(data (i32.const 288) "attempt to remove object that was not in multi_index\00")
(data (i32.const 352) "cannot increment end iterator\00")
(data (i32.const 384) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 448) "error reading iterator\00")
(data (i32.const 480) "user is not a producer\00")
(data (i32.const 512) "user is not an active producer\00")
(data (i32.const 544) "cannot pass end iterator to modify\00")
(data (i32.const 592) "cannot create objects in table of another contract\00")
(data (i32.const 656) "next primary key in table is at autoincrement limit\00")
(data (i32.const 720) "write\00")
(data (i32.const 736) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 800) "cannot decrement iterator at beginning of table\00")
(data (i32.const 848) "object passed to modify is not in multi_index\00")
(data (i32.const 896) "cannot modify objects in table of another contract\00")
(data (i32.const 960) "updater cannot change primary key when modifying an object\00")
(data (i32.const 1024) "get\00")
(data (i32.const 1040) "invalid action\00")
(data (i32.const 1056) "invalid type\00")
(data (i32.const 1072) "add\00")
(data (i32.const 1088) "remove\00")
(data (i32.const 1104) "actor-blacklist\00")
(data (i32.const 1120) "actor-whitelist\00")
(data (i32.const 1136) "contract-blacklist\00")
(data (i32.const 1168) "contract-whitelist\00")
(data (i32.const 1200) "key-blacklist\00")
(data (i32.const 1216) "action-blacklist\00")
(data (i32.const 9632) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "abort" (func $fimport$0))
(import "env" "action_data_size" (func $fimport$1 (result i32)))
(import "env" "current_receiver" (func $fimport$2 (result i64)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "db_end_i64" (func $fimport$4 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$5 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$6 (param i32 i32 i32) (result i32)))
(import "env" "db_idx64_find_primary" (func $fimport$7 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$8 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_next" (func $fimport$9 (param i32 i32) (result i32)))
(import "env" "db_idx64_remove" (func $fimport$10 (param i32)))
(import "env" "db_idx64_store" (func $fimport$11 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_update" (func $fimport$12 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$13 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$14 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$15 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$16 (param i32)))
(import "env" "db_store_i64" (func $fimport$17 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$18 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$19 (param i32 i32)))
(import "env" "memcpy" (func $fimport$20 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$21 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$22 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$23 (param i64)))
(import "env" "require_auth2" (func $fimport$24 (param i64 i64)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "apply" (func $5))
(export "malloc" (func $48))
(export "free" (func $51))
(export "memcmp" (func $60))
(export "strlen" (func $61))
(table $0 5 5 anyfunc)
(elem (i32.const 0) $62 $7 $13 $11 $9)



int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [448])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $52([64])) + [48]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [112])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [112])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	CALL eosio_assert(((uint_32)($4 + [-16]) > (uint_32)[31]), [112])
	CALL memcpy(($6 + [16]), ($7 + [16]), [32])
	*($6 + [56]) = [-1]
	*($6 + [52]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [52])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $19(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $53($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $62 ()
{
	(unreachable)
}

void .FUNC $19 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $52(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $53($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $53($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	CALL $59(($4 + [80]), $1)
	CALL $59(($4 + [64]), ($1 + [12]))
	CALL $59(($4 + [48]), ($1 + [24]))
	CALL $59(($4 + [32]), ($1 + [36]))
	CALL $59(($4 + [16]), ($1 + [48]))
	*($4 + [8]) = [0]
	*($4) = (int_64)0
	$3 = (*(($1 + [64])) - *($1 + [60]))
	$2 = int_32($3 >> [3])
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	$3 = CALL $52($3)
	*(($4 + [8])) = ($3 + ($2 << [3]))
	*($4) = $3
	*($4 + [4]) = $3
	$2 = *(($1 + [60]))
	$1 = (*(($1 + [64])) - $2)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($3, $2, $1)
	*($4 + [4]) = (*($4 + [4]) + $1)
	
.LABEL $label$2
	CALL $40($0, ($4 + [80]), ($4 + [64]), ($4 + [48]), ($4 + [32]), ($4 + [16]), $4)
	$1 = *($4)
	if ( ($1 == 0) ){ goto $label$3 }
	*($4 + [4]) = $1
	CALL $53($1)
	
.LABEL $label$3
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$4 }
	CALL $53(*($4 + [24]))
	
.LABEL $label$4
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $53(*($4 + [40]))
	
.LABEL $label$5
	if ( ((*($4 + [48]) & [1]) == 0) ){ goto $label$6 }
	CALL $53(*($4 + [56]))
	
.LABEL $label$6
	if ( ((*($4 + [64]) & [1]) == 0) ){ goto $label$7 }
	CALL $53(*($4 + [72]))
	
.LABEL $label$7
	if ( ((*($4 + [80]) & [1]) == 0) ){ goto $label$8 }
	CALL $53(*($4 + [88]))
	
.LABEL $label$8
	*([0] + [4]) = ($4 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $58($4)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1024])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $30($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [112])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $29($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $57($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $52($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $57($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $53($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $54($7)
	return (unreachable)
}

void .FUNC $21 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [848])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [896])
	$3 = *($3)
	*($1 + [16]) = *($3)
	*(($1 + [44])) = *(($3 + [28]))
	*(($1 + [40])) = *(($3 + [24]))
	*(($1 + [36])) = *(($3 + [20]))
	*(($1 + [32])) = *(($3 + [16]))
	*(($1 + [28])) = *(($3 + [12]))
	*(($1 + [24])) = *(($3 + [8]))
	*(($1 + [20])) = *(($3 + [4]))
	*($5 + [56]) = *($1 + [8])
	$4 = *($1)
	CALL eosio_assert([1], [960])
	CALL eosio_assert([1], [720])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [720])
	$3 = ($1 + [8])
	CALL memcpy(($5 | [8]), $3, [8])
	CALL eosio_assert([1], [720])
	CALL memcpy(($5 + [16]), ($1 + [16]), [32])
	CALL db_update_i64(*($1 + [52]), $2, $5, [48])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($5 + [72]) = *($3)
	if ( (CALL memcmp(($5 + [56]), ($5 + [72]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [56])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5915305344025120560, ($5 + [64]), $4)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($5 + [72]))
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [80])
}

int_32 .FUNC $20 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*(($6 + [92])) == (int_32)$0), [384])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-5915305344019464192, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $25($0, $5)
	CALL eosio_assert(((int_32)*($6 + [92]) == (int_32)$0), [384])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	$2 = *($0)
	$3 = *($0 + [4])
	$6 = *($3)
	$5 = *($6 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-5915305344025120560, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $18($6, $4)
	*($9 + [12]) = [0]
	*($9 + [8]) = $6
	$5 = *(*(CALL $24(($9 + [8])) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [656])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	$6 = *($3 + [8])
	*($1 + [16]) = *($6)
	*(($1 + [40])) = *(($6 + [24]))
	*(($1 + [32])) = *(($6 + [16]))
	*(($1 + [24])) = *(($6 + [8]))
	$6 = $10
	$10 = ($6 + [-48])
	*([0] + [4]) = $10
	CALL eosio_assert([1], [720])
	CALL memcpy($10, $1, [8])
	CALL eosio_assert([1], [720])
	$3 = ($1 + [8])
	CALL memcpy(($6 + [-40]), $3, [8])
	CALL eosio_assert([1], [720])
	CALL memcpy(($6 + [-32]), ($1 + [16]), [32])
	$5 = *($1)
	*($1 + [52]) = CALL db_store_i64(*($2 + [8]), (int_64)-5915305344025120560, *(*($0 + [8])), $5, $10, [48])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$5 = *(($2 + [8]))
	$7 = *(*(($0 + [8])))
	$8 = *($1)
	*($9 + [8]) = *($3)
	*($1 + [56]) = CALL db_idx64_store($5, (int_64)-5915305344025120560, $7, $8, ($9 + [8]))
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $22 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [592])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $52([64])) + [48]) = $1
	CALL $23(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [52])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $19(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $53($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [448])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $52([104])) + [16]) = [0]
	*($6 + [8]) = (int_64)0
	*($6 + [56]) = [1]
	*($6 + [60]) = [0]
	*($6 + [64]) = [0]
	*($6 + [68]) = [0]
	*($6 + [72]) = [0]
	*($6 + [80]) = (int_64)0
	*($6 + [88]) = [0]
	*($6 + [92]) = $0
	CALL $26(($8 + [32]), $6)
	*($6 + [96]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [96])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $27(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [60]) & [1]) == 0) ){ goto $label$10 }
	CALL $53(*(($4 + [68])))
	
.LABEL $label$10
	CALL $53($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $24 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [52]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [800])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-5915305344025120560)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [736])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [736])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $18(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $27 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $52(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [60]) & [1]) == 0) ){ goto $label$11 }
	CALL $53(*(($1 + [68])))
	
.LABEL $label$11
	CALL $53($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $53($6)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [112])
	CALL memcpy($1, *($0 + [4]), [8])
	$6 = (*($0 + [4]) + [8])
	*($0 + [4]) = $6
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $6) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$6 = (*($0 + [4]) + [8])
	*($0 + [4]) = $6
	$3 = [0]
	$4 = (int_64)0
	$2 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($6 <= *(($0 + [8]))), [1024])
	$6 = *($2)
	$5 = *($6)
	$6 = ($6 + [1])
	*($2) = $6
	$3 = ($3 & [255])
	$4 = ((int_64)(CASTING uint_64)(uint_32 (($5 & [127]) << $3)) | (int_64)$4)
	$3 = ($3 + [7])
	if ( uint_32($5 >> [7]) ){ goto $label$1 }
	*($1 + [16]) = $4
	$5 = [20]
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$2:
	CALL eosio_assert(((int_32)*($2) != (int_32)$6), [112])
	CALL memcpy(($1 + $5), *($3), [1])
	$6 = (*($3) + [1])
	*($3) = $6
	$5 = ($5 + [1])
	if ( ((int_32)$5 != (int_32)[53]) ){ goto $label$2 }
	CALL eosio_assert(((int_32)*(($0 + [8])) != (int_32)$6), [112])
	$6 = ($0 + [4])
	CALL memcpy(($7 + [15]), *($6), [1])
	*($6) = (*($6) + [1])
	*($1 + [56]) = ((int_32)*($7 + [15]) != (int_32)[0])
	$6 = CALL $28($0, ($1 + [60]))
	CALL eosio_assert(((uint_32)(*($6 + [8]) - *($6 + [4])) > (uint_32)[3]), [112])
	CALL memcpy(($1 + [72]), *($6 + [4]), [4])
	$5 = (*($6 + [4]) + [4])
	*($6 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($6 + [8]) - $5) > (uint_32)[7]), [112])
	CALL memcpy(($1 + [80]), *($6 + [4]), [8])
	$5 = (*($6 + [4]) + [8])
	*($6 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($6 + [8]) - $5) > (uint_32)[1]), [112])
	CALL memcpy(($1 + [88]), *($6 + [4]), [2])
	*($6 + [4]) = (*($6 + [4]) + [2])
	*([0] + [4]) = ($7 + [16])
	return $6
}

int_32 .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $50($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9632])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $49([1236], $0)
}

void .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$2 = *($0)
	$4 = *($2 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$3 = CALL db_lowerbound_i64(*($2), *($2 + [8]), (int_64)-3795275987163565680, (int_64)0)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$2 }
	CALL $31($2, $3)
	*($5 + [12]) = [0]
	*($5 + [8]) = $2
	$4 = *(*(CALL $32(($5 + [8])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($2 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [656])
	*($1) = *(($2 + [16]))
	CALL $55(($1 + [8]), *($0 + [4]))
	CALL $55(($1 + [20]), *($0 + [8]))
	CALL $55(($1 + [32]), *($0 + [12]))
	CALL $55(($1 + [44]), *($0 + [16]))
	CALL $55(($1 + [56]), *($0 + [20]))
	$1 = *($0 + [24])
	$2 = ($1 + [68])
	if ( ((int_32)$2 == (int_32)$1) ){ goto $label$3 }
	CALL $47($2, *($1), *($1 + [4]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $42 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	$2 = *($0)
	CALL $43(*($0 + [4]), $1)
	*(($6 = $5)) = [0]
	CALL $44($6, $1)
	$3 = *($6)
	if ( ($3 <= [513]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$1
	*($6) = $5
	*($6 + [8]) = ($5 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [720])
	CALL memcpy($5, $1, [8])
	*($6 + [4]) = ($5 + [8])
	CALL $46(CALL $45(CALL $45(CALL $45(CALL $45(CALL $45($6, ($1 + [8])), ($1 + [20])), ($1 + [32])), ($1 + [44])), ($1 + [56])), ($1 + [68]))
	$4 = *($1)
	*($1 + [84]) = CALL db_store_i64(*($2 + [8]), (int_64)-3795275987163565680, *(*($0 + [8])), $4, $5, $3)
	if ( ($3 <= [513]) ){ goto $label$3 }
	CALL free($5)
	
.LABEL $label$3
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$4 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$4
	*([0] + [4]) = ($6 + [16])
}

void .FUNC $41 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$2()), [592])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $52([96])) + [8 align=4]) = (int_64)0
	*($3 + [16 align=4]) = (int_64)0
	*($3 + [24 align=4]) = (int_64)0
	*($3 + [32 align=4]) = (int_64)0
	*($3 + [40 align=4]) = (int_64)0
	*($3 + [48]) = [0]
	*($3 + [52]) = [0]
	*($3 + [56]) = [0]
	*($3 + [60]) = [0]
	*($3 + [64]) = [0]
	*($3 + [68]) = [0]
	*($3 + [72]) = [0]
	*($3 + [76]) = [0]
	*($3 + [80]) = $1
	CALL $42(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [84])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $37(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [68])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [72])) = $1
	CALL $53($1)
	
.LABEL $label$4
	if ( ((*($3 + [56]) & [1]) == 0) ){ goto $label$5 }
	CALL $53(*(($3 + [64])))
	
.LABEL $label$5
	if ( ((*($3 + [44]) & [1]) == 0) ){ goto $label$6 }
	CALL $53(*(($3 + [52])))
	
.LABEL $label$6
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $53(*(($3 + [40])))
	
.LABEL $label$7
	if ( ((*($3 + [20]) & [1]) == 0) ){ goto $label$8 }
	CALL $53(*(($3 + [28])))
	
.LABEL $label$8
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$9 }
	CALL $53(*(($3 + [16])))
	
.LABEL $label$9
	CALL $53($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $40 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [80])
	*([0] + [4]) = $9
	$0 = *($0 + [4])
	$8 = *($0 + [4])
	$7 = (*(*($0)) + int_32($8 >> [1]))
	$0 = *($0)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($7) + $0))
	
.LABEL $label$1
	CALL $59(($9 + [64]), $1)
	CALL $59(($9 + [48]), $2)
	CALL $59(($9 + [32]), $3)
	CALL $59(($9 + [16]), $4)
	CALL $59($9, $5)
	CALL void $7((int_32 ($9 + [64])), (int_32 ($9 + [48])), (int_32 ($9 + [32])), (int_32 ($9 + [16])), (int_32 $9), (int_32 $6), (int_32 $0))
	if ( ((*($9) & [1]) == 0) ){ goto $label$2 }
	CALL $53(*($9 + [8]))
	
.LABEL $label$2
	if ( ((*($9 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $53(*($9 + [24]))
	
.LABEL $label$3
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$4 }
	CALL $53(*($9 + [40]))
	
.LABEL $label$4
	if ( ((*($9 + [48]) & [1]) == 0) ){ goto $label$5 }
	CALL $53(*($9 + [56]))
	
.LABEL $label$5
	if ( ((*($9 + [64]) & [1]) == 0) ){ goto $label$6 }
	CALL $53(*($9 + [72]))
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [80])
}

void .FUNC $47 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [3])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [3])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $53($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[536870912]) ){ goto $label$1 }
	$5 = [536870911]
	if ( ((uint_32)int_32($8 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [2])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [3])
	$5 = CALL $52($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [3])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [3])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [3]))
	return (unreachable)
	
.LABEL $label$1
	CALL $58($0)
}

int_32 .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [3]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [720])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$2 }
	$2 = ($0 + [4])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $7) > (int_32)[7]), [720])
	CALL memcpy(*($2), $5, [8])
	$7 = (*($2) + [8])
	*($2) = $7
	$5 = ($5 + [8])
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $45 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [720])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [720])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $44 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	$5 = (*($0) + [8])
	*($0) = $5
	$2 = *($1 + [8])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [12])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$1 }
	*($0) = $5
	$2 = *(($1 + [8]))
	$2 = ( *(($1 + [12])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$2 }
	$5 = ($2 + $5)
	*($0) = $5
	
.LABEL $label$2
	$2 = *($1 + [20])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$3:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$3 }
	*($0) = $5
	$2 = *(($1 + [20]))
	$2 = ( *(($1 + [24])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$4 }
	$5 = ($2 + $5)
	*($0) = $5
	
.LABEL $label$4
	$2 = *($1 + [32])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$5:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$5 }
	*($0) = $5
	$2 = *(($1 + [32]))
	$2 = ( *(($1 + [36])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$6 }
	$5 = ($2 + $5)
	*($0) = $5
	
.LABEL $label$6
	$2 = *($1 + [44])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [48])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$7:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$7 }
	*($0) = $5
	$2 = *(($1 + [44]))
	$2 = ( *(($1 + [48])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$8 }
	$5 = ($2 + $5)
	*($0) = $5
	
.LABEL $label$8
	$2 = *($1 + [56])
	$4 = (CASTING uint_64)(uint_32 ( *(($1 + [60])) ? uint_32($2 >> [1]) : ($2 & [1]) ))
	
.LOOP $label$9:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$9 }
	*($0) = $5
	$2 = *(($1 + [56]))
	$2 = ( *(($1 + [60])) ? uint_32($2 >> [1]) : ($2 & [1]) )
	if ( ($2 == 0) ){ goto $label$10 }
	$5 = ($2 + $5)
	*($0) = $5
	
.LABEL $label$10
	$1 = *($1 + [68])
	$2 = *(($1 + [72]))
	$3 = ($2 - $1)
	$4 = (CASTING uint_64)(uint_32 int_32($3 >> [3]))
	
.LOOP $label$11:
	$5 = ($5 + [1])
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	if ( ((int_64)$4) != (int_64)0) ){ goto $label$11 }
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$12 }
	$5 = (($3 & [-8]) + $5)
	
.LABEL $label$12
	*($0) = $5
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9620])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9428]
	$1 = (((int_32)$2 * (int_32)[12]) + [9428])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC $8 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [112])
	*([0] + [4]) = $3
	*(($2 = $3) + [92]) = $0
	*($2 + [80]) = *($1)
	*($2 + [84]) = *($1 + [4])
	$1 = [0]
	$0 = CALL action_data_size()
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ($0 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($0)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($3 - (($0 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $0)
	
.LABEL $label$1
	*(($2 + [24])) = (int_64)0
	*(($2 + [40])) = (int_64)0
	*(($2 + [48])) = [0]
	*($2 + [8]) = (int_64)0
	*($2 + [16]) = (int_64)0
	*($2 + [32]) = (int_64)0
	*(($2 + [52])) = [0]
	*($2 + [56]) = [0]
	*(($2 + [60])) = [0]
	*(($2 + [64])) = [0]
	*($2 + [68]) = [0]
	*(($2 + [72])) = [0]
	*(($2 + [76])) = [0]
	*($2 + [100]) = $1
	*($2 + [96]) = $1
	*($2 + [104]) = ($1 + $0)
	CALL $28(($2 + [96]), ($2 + [8]))
	CALL $28(($2 + [96]), ($2 + [20]))
	CALL $28(($2 + [96]), ($2 + [32]))
	CALL $28(($2 + [96]), ($2 + [44]))
	CALL $28(($2 + [96]), ($2 + [56]))
	$3 = ($2 + [68])
	CALL $36(($2 + [96]), $3)
	if ( ($0 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	*($2 + [100]) = ($2 + [80])
	*($2 + [96]) = ($2 + [92])
	CALL $39(($2 + [96]), ($2 + [8]))
	$1 = *($3)
	if ( ($1 == 0) ){ goto $label$5 }
	*(($2 + [72])) = $1
	CALL $53($1)
	
.LABEL $label$5
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$6 }
	CALL $53(*(($2 + [64])))
	
.LABEL $label$6
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$7 }
	CALL $53(*(($2 + [52])))
	
.LABEL $label$7
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$8 }
	CALL $53(*(($2 + [40])))
	
.LABEL $label$8
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$9 }
	CALL $53(*(($2 + [28])))
	
.LABEL $label$9
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $53(*(($2 + [16])))
	
.LABEL $label$10
	*([0] + [4]) = ($2 + [112])
	return [1]
}

void .FUNC $9 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [64])
	*([0] + [4]) = $6
	CALL require_auth((int_64)-3795275987163565680)
	*(($6 + [48])) = [0]
	*($6 + [24]) = (int_64)-3795275987163565680
	*($6 + [16]) = (int_64)-3795275987163565680
	*($6 + [32]) = (int_64)-1
	*($6 + [40]) = (int_64)0
	$2 = CALL db_lowerbound_i64((int_64)-3795275987163565680, (int_64)-3795275987163565680, (int_64)-3795275987163565680, (int_64)0)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$1 }
	$4 = ($6 + [24])
	
.LOOP $label$2:
	CALL $31(($6 + [16]), $2)
	*($6 + [8]) = ($6 + [16])
	*($6 + [12]) = [0]
	CALL $32(($6 + [8]))
	$1 = *($6 + [8])
	$2 = (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)32)
	$3 = ((int_32)$2) != (int_32)[0]
	CALL eosio_assert($3), [128])
	CALL eosio_assert($3, [352])
	$3 = CALL db_next_i64(*($2 + [84]), ($6 + [56]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$3 }
	CALL $31((CASTING uint_32)(uint_64 $1), $3)
	
.LABEL $label$3
	CALL $33(($6 + [16]), $2)
	$2 = CALL db_lowerbound_i64(*($6 + [16]), *($4), (int_64)-3795275987163565680, (int_64)0)
	if ( ((int_32)$2 > (int_32)[-1]) ){ goto $label$2 }
	$4 = *($6 + [40])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($6 + [44])
	$2 = *($5)
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	$2 = ($2 + [-24])
	
.LOOP $label$6:
	$3 = CALL $34($2)
	$2 = ($2 + [-24])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	$2 = *(($6 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$2 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL $53($2)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [64])
}

int_32 .FUNC $6 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [80])
	*([0] + [4]) = $5
	*($0) = $1
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	$4 = CALL strlen([1072])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$8 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$11 }
	*($5 + [8]) = ($4 << [1])
	$3 = (($5 + [8]) | [1])
	if ( $4 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $52($2)
	*($5 + [8]) = ($2 | [1])
	*($5 + [16]) = $3
	*($5 + [12]) = $4
	
.LABEL $label$10
	CALL memcpy($3, [1072], $4)
	
.LABEL $label$9
	*(($3 + $4)) = [0]
	*(($5 + [28])) = [0]
	*($5 + [20 align=4]) = (int_64)0
	$3 = ($5 + [20])
	$4 = CALL strlen([1088])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$7 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$14 }
	*(($5 + [20])) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$13 }
	goto $label$12 
	
.LABEL $label$14
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $52($2)
	*(($5 + [20])) = ($2 | [1])
	*(($5 + [28])) = $3
	*((($5 + [8]) + [16])) = $4
	
.LABEL $label$13
	CALL memcpy($3, [1088], $4)
	
.LABEL $label$12
	*(($3 + $4)) = [0]
	*(($2 = ($0 + [16]))) = [0]
	*(($4 = ($0 + [8]))) = (int_64)0
	$3 = CALL $52([24])
	*($4) = $3
	*(($4 = ($0 + [12]))) = $3
	*($2) = ($3 + [24])
	CALL $59($3, ($5 + [8]))
	$3 = (*($4) + [12])
	*($4) = $3
	CALL $59($3, (($5 + [8]) + [12]))
	*($4) = (*($4) + [12])
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$15 }
	CALL $53(*(($5 + [28])))
	
.LABEL $label$15
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$16 }
	CALL $53(*($5 + [16]))
	
.LABEL $label$16
	*(($5 + [16])) = [0]
	*($5 + [8]) = (int_64)0
	$4 = CALL strlen([1104])
	if ( ((uint_32)$4 > (uint_32)[-17]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$19 }
	*($5 + [8]) = ($4 << [1])
	$3 = (($5 + [8]) | [1])
	if ( $4 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $52($2)
	*($5 + [8]) = ($2 | [1])
	*($5 + [16]) = $3
	*($5 + [12]) = $4
	
.LABEL $label$18
	CALL memcpy($3, [1104], $4)
	
.LABEL $label$17
	*(($3 + $4)) = [0]
	*(($5 + [28])) = [0]
	*($5 + [20 align=4]) = (int_64)0
	$3 = ($5 + [20])
	$4 = CALL strlen([1120])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$22 }
	*(($5 + [20])) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $52($2)
	*(($5 + [20])) = ($2 | [1])
	*(($5 + [28])) = $3
	*((($5 + [8]) + [16])) = $4
	
.LABEL $label$21
	CALL memcpy($3, [1120], $4)
	
.LABEL $label$20
	*(($3 + $4)) = [0]
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	$3 = ($5 + [32])
	$4 = CALL strlen([1136])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$25 }
	*(($5 + [32])) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $52($2)
	*(($5 + [32])) = ($2 | [1])
	*(($5 + [40])) = $3
	*(($5 + [36])) = $4
	
.LABEL $label$24
	CALL memcpy($3, [1136], $4)
	
.LABEL $label$23
	*(($3 + $4)) = [0]
	*(($5 + [52])) = [0]
	*($5 + [44 align=4]) = (int_64)0
	$3 = ($5 + [44])
	$4 = CALL strlen([1168])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$28 }
	*(($5 + [44])) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $52($2)
	*(($5 + [44])) = ($2 | [1])
	*(($5 + [52])) = $3
	*(($5 + [48])) = $4
	
.LABEL $label$27
	CALL memcpy($3, [1168], $4)
	
.LABEL $label$26
	*(($3 + $4)) = [0]
	*(($5 + [64])) = [0]
	*($5 + [56]) = (int_64)0
	$3 = ($5 + [56])
	$4 = CALL strlen([1200])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$31 }
	*(($5 + [56])) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $52($2)
	*(($5 + [56])) = ($2 | [1])
	*(($5 + [64])) = $3
	*(($5 + [60])) = $4
	
.LABEL $label$30
	CALL memcpy($3, [1200], $4)
	
.LABEL $label$29
	*(($3 + $4)) = [0]
	*(($5 + [76])) = [0]
	*($5 + [68 align=4]) = (int_64)0
	$3 = ($5 + [68])
	$4 = CALL strlen([1216])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$34 }
	*(($5 + [68])) = ($4 << [1])
	$3 = ($3 + [1])
	if ( $4 ){ goto $label$33 }
	goto $label$32 
	
.LABEL $label$34
	$2 = (($4 + [16]) & [-16])
	$3 = CALL $52($2)
	*(($5 + [68])) = ($2 | [1])
	*(($5 + [76])) = $3
	*(($5 + [72])) = $4
	
.LABEL $label$33
	CALL memcpy($3, [1216], $4)
	
.LABEL $label$32
	*(($3 + $4)) = [0]
	*(($2 = ($0 + [28]))) = [0]
	*(($4 = ($0 + [20]))) = (int_64)0
	$3 = CALL $52([72])
	*($4) = $3
	*(($4 = ($0 + [24]))) = $3
	*($2) = ($3 + [72])
	CALL $59($3, ($5 + [8]))
	$3 = (*($4) + [12])
	*($4) = $3
	CALL $59($3, (($5 + [8]) + [12]))
	$3 = (*($4) + [12])
	*($4) = $3
	CALL $59($3, (($5 + [8]) + [24]))
	$3 = (*($4) + [12])
	*($4) = $3
	CALL $59($3, ($5 + [44]))
	$3 = (*($4) + [12])
	*($4) = $3
	CALL $59($3, ($5 + [56]))
	$3 = (*($4) + [12])
	*($4) = $3
	CALL $59($3, ($5 + [68]))
	*($4) = (*($4) + [12])
	if ( ((*($5 + [68]) & [1]) == 0) ){ goto $label$35 }
	CALL $53(*(($5 + [76])))
	
.LABEL $label$35
	if ( ((*($5 + [56]) & [1]) == 0) ){ goto $label$36 }
	CALL $53(*(($5 + [64])))
	
.LABEL $label$36
	if ( ((*($5 + [44]) & [1]) == 0) ){ goto $label$37 }
	CALL $53(*(($5 + [52])))
	
.LABEL $label$37
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$38 }
	CALL $53(*(($5 + [40])))
	
.LABEL $label$38
	if ( ((*($5 + [20]) & [1]) == 0) ){ goto $label$39 }
	CALL $53(*(($5 + [28])))
	
.LABEL $label$39
	if ( ((*($5 + [8]) & [1]) == 0) ){ goto $label$40 }
	CALL $53(*($5 + [16]))
	
.LABEL $label$40
	*([0] + [4]) = ($5 + [80])
	return $0
	
.LABEL $label$8
	CALL $54(($5 + [8]))
	
.LABEL $label$7
	CALL $54($3)
	
.LABEL $label$6
	CALL $54(($5 + [8]))
	
.LABEL $label$5
	CALL $54($3)
	
.LABEL $label$4
	CALL $54($3)
	
.LABEL $label$3
	CALL $54($3)
	
.LABEL $label$2
	CALL $54($3)
	
.LABEL $label$1
	CALL $54($3)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	return (unreachable)
}

void .FUNC $7 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [112])
	*([0] + [4]) = $17
	CALL require_auth((int_64)-3795275987163565680)
	CALL $59(($17 + [96]), $4)
	$14 = ($0 + [12])
	$7 = *($14)
	$9 = *($0 + [8])
	if ( ((int_32)$9 == (int_32)$7) ){ goto $label$1 }
	$8 = (($17 + [96]) | [1])
	$15 = ($17 + [104])
	
.LOOP $label$2:
	$16 = ($16 & [1])
	$16 = *($17 + [96])
	$10 = ($16 & [1])
	$16 = *($9)
	$11 = uint_32($16 >> [1])
	$12 = ( *($9 + [4]) ? $11 : $10 )
	if ( ((int_32)$12 != (int_32)( *($17 + [100]) ? uint_32($16 >> [1]) : $16 )) ){ goto $label$3 }
	$13 = ( *($15) ? $8 : $16 )
	if ( $10 ){ goto $label$4 }
	if ( ($12 == 0) ){ goto $label$1 }
	$16 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*((($9 + $16) + [1])) != (int_32)*(($13 + $16))) ){ goto $label$3 }
	$16 = ($16 + [1])
	if ( ((int_32)$11 != (int_32)$16) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	if ( ($12 == 0) ){ goto $label$1 }
	if ( (CALL memcmp(( *($9 + [8]) ? ($9 + [1]) : $10 ), $13, $12) == 0) ){ goto $label$1 }
	
.LABEL $label$3
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$7) ){ goto $label$2 }
	$9 = $7
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$9 != (int_32)*($14)), [1040])
	if ( ((*($17 + [96]) & [1]) == 0) ){ goto $label$6 }
	CALL $53(*($17 + [104]))
	
.LABEL $label$6
	CALL $59(($17 + [80]), $5)
	$15 = ($0 + [24])
	$0 = *($15)
	$9 = *($0 + [20])
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$7 }
	$7 = (($17 + [80]) | [1])
	$8 = ($17 + [88])
	
.LOOP $label$8:
	$16 = ($16 & [1])
	$16 = *($17 + [80])
	$10 = ($16 & [1])
	$16 = *($9)
	$11 = uint_32($16 >> [1])
	$12 = ( *($9 + [4]) ? $11 : $10 )
	if ( ((int_32)$12 != (int_32)( *($17 + [84]) ? uint_32($16 >> [1]) : $16 )) ){ goto $label$9 }
	$13 = ( *($8) ? $7 : $16 )
	if ( $10 ){ goto $label$10 }
	if ( ($12 == 0) ){ goto $label$7 }
	$16 = [0]
	
.LOOP $label$11:
	if ( ((int_32)*((($9 + $16) + [1])) != (int_32)*(($13 + $16))) ){ goto $label$9 }
	$16 = ($16 + [1])
	if ( ((int_32)$11 != (int_32)$16) ){ goto $label$11 }
	goto $label$7 
	
.LABEL $label$10
	if ( ($12 == 0) ){ goto $label$7 }
	if ( (CALL memcmp(( *($9 + [8]) ? ($9 + [1]) : $10 ), $13, $12) == 0) ){ goto $label$7 }
	
.LABEL $label$9
	$9 = ($9 + [12])
	if ( ((int_32)$9 != (int_32)$0) ){ goto $label$8 }
	$9 = $0
	
.LABEL $label$7
	CALL eosio_assert(((int_32)$9 != (int_32)*($15)), [1056])
	if ( ((*($17 + [80]) & [1]) == 0) ){ goto $label$12 }
	CALL $53(*($17 + [88]))
	
.LABEL $label$12
	*(($17 + [72])) = [0]
	*($17 + [48]) = (int_64)-3795275987163565680
	*($17 + [40]) = (int_64)-3795275987163565680
	*($17 + [56]) = (int_64)-1
	*($17 + [64]) = (int_64)0
	*($17 + [12]) = $1
	*($17 + [16]) = $2
	*($17 + [20]) = $3
	*($17 + [24]) = $4
	*($17 + [28]) = $5
	*($17 + [32]) = $6
	*($17 + [8]) = ($17 + [40])
	CALL $41($17, ($17 + [40]), (int_64)-3795275987163565680, ($17 + [8]))
	$11 = *($17 + [64])
	if ( ($11 == 0) ){ goto $label$13 }
	$13 = ($17 + [68])
	$16 = *($13)
	if ( ((int_32)$16 == (int_32)$11) ){ goto $label$15 }
	$16 = ($16 + [-24])
	
.LOOP $label$16:
	$9 = CALL $34($16)
	$16 = ($16 + [-24])
	if ( ((int_32)$9 != (int_32)$11) ){ goto $label$16 }
	$16 = *(($17 + [64]))
	goto $label$14 
	
.LABEL $label$15
	$16 = $11
	
.LABEL $label$14
	*($13) = $11
	CALL $53($16)
	
.LABEL $label$13
	*([0] + [4]) = ($17 + [112])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_32 $12
	$12 = (*([0] + [4]) - [96])
	*([0] + [4]) = $12
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$6 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$7 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [32]
	$10 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$9 > (uint_64)(int_64)4) ){ goto $label$13 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$9
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$8 }
	CALL eosio_assert(((int_64)$10 == (int_64)$1), [48])
	
.LABEL $label$7
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$15 }
	$9 = (int_64)0
	$8 = (int_64)59
	$7 = [16]
	$10 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$9 > (uint_64)(int_64)6) ){ goto $label$21 }
	$3 = *($7)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$3 = ($3 + [165])
	goto $label$19 
	
.LABEL $label$21
	$11 = (int_64)0
	if ( ((uint_64)$9 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$17
	$7 = ($7 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$16 }
	if ( ((int_64)$10 != (int_64)$2) ){ goto $label$14 }
	
.LABEL $label$15
	$4 = CALL $6(($12 + [64]), $0)
	if ( ((int_64)$2 > (int_64)4923678490122780671) ){ goto $label$27 }
	if ( ((int_64)$2 == (int_64)-4417235868247392256) ){ goto $label$26 }
	if ( ((int_64)$2 != (int_64)-4417103636019019776) ){ goto $label$24 }
	*($12 + [60]) = [0]
	*($12 + [56]) = [1]
	*($12) = *($12 + [56])
	CALL $8($4, $12)
	$5 = *($4 + [20])
	if ( $5 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$27
	if ( ((int_64)$2 == (int_64)4923678490122780672) ){ goto $label$25 }
	if ( ((int_64)$2 != (int_64)5378093321283436544) ){ goto $label$24 }
	*($12 + [36]) = [0]
	*($12 + [32]) = [2]
	*($12 + [24 align=4]) = *($12 + [32])
	CALL $14($4, ($12 + [24]))
	$5 = *($4 + [20])
	if ( $5 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$26
	*($12 + [44]) = [0]
	*($12 + [40]) = [3]
	*($12 + [16 align=4]) = *($12 + [40])
	CALL $12($4, ($12 + [16]))
	$5 = *($4 + [20])
	if ( $5 ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$25
	*($12 + [52]) = [0]
	*($12 + [48]) = [4]
	*($12 + [8 align=4]) = *($12 + [48])
	CALL $10($4, ($12 + [8]))
	
.LABEL $label$24
	$5 = *($4 + [20])
	if ( ($5 == 0) ){ goto $label$22 }
	
.LABEL $label$23
	$6 = ($4 + [24])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$29 }
	$3 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$30:
	if ( ((*($7) & [1]) == 0) ){ goto $label$31 }
	CALL $53(*(($7 + [8])))
	
.LABEL $label$31
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $3) != (int_32)[-12]) ){ goto $label$30 }
	$7 = *(($4 + [20]))
	goto $label$28 
	
.LABEL $label$29
	$7 = $5
	
.LABEL $label$28
	*($6) = $5
	CALL $53($7)
	
.LABEL $label$22
	$5 = *($4 + [8])
	if ( ($5 == 0) ){ goto $label$14 }
	$6 = ($4 + [12])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$33 }
	$3 = ([0] - $5)
	$7 = ($7 + [-12])
	
.LOOP $label$34:
	if ( ((*($7) & [1]) == 0) ){ goto $label$35 }
	CALL $53(*(($7 + [8])))
	
.LABEL $label$35
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $3) != (int_32)[-12]) ){ goto $label$34 }
	$7 = *(($4 + [8]))
	goto $label$32 
	
.LABEL $label$33
	$7 = $5
	
.LABEL $label$32
	*($6) = $5
	CALL $53($7)
	
.LABEL $label$14
	*([0] + [4]) = ($12 + [96])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [112])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

void .FUNC $15 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [8]) = (int_64)0
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx64_lowerbound(*($8), *($8 + [8]), (int_64)-5915305344025120560, $10, ($10 + [8]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [8])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [384])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $18($4, CALL $fimport$5(*($4), *($4 + [8]), (int_64)-5915305344025120560, $5))
	CALL eosio_assert(((int_32)*($2 + [48]) == (int_32)$4), [384])
	
.LABEL $label$4
	*(($2 + [56])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($0 + [4]) != (int_32)[0]), [352])
	$6 = *($0 + [4])
	$7 = *($6 + [56])
	if ( ((int_32)$7 != (int_32)[-1]) ){ goto $label$1 }
	$7 = *(*($0))
	$7 = CALL db_idx64_find_primary(*($7), *($7 + [8]), (int_64)-5915305344025120560, ($9 + [8]), *($6))
	*(*(($0 + [4])) + [56]) = $7
	
.LABEL $label$1
	*($9 + [8]) = (int_64)0
	$1 = CALL db_idx64_next($7, ($9 + [8]))
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$5 }
	$3 = *($9 + [8])
	$4 = *($2 + [24])
	$2 = *(*($0))
	$8 = *(($2 + [28]))
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$6 }
	$7 = ($8 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$7:
	if ( ((int_64)*(*($7)) == (int_64)$3) ){ goto $label$6 }
	$8 = $7
	$6 = ($7 + [-24])
	$7 = $6
	if ( ((int_32)($6 + $5) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$8 == (int_32)$4) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [384])
	goto $label$3 
	
.LABEL $label$5
	*(($0 + [4])) = [0]
	goto $label$2 
	
.LABEL $label$4
	$7 = CALL $18($2, CALL $fimport$5(*($2), *($2 + [8]), (int_64)-5915305344025120560, $3))
	CALL eosio_assert(((int_32)*($7 + [48]) == (int_32)$2), [384])
	
.LABEL $label$3
	*(($0 + [4])) = $7
	*(($7 + [56])) = $1
	
.LABEL $label$2
	*([0] + [4]) = ($9 + [16])
	return $0
}

void .FUNC $17 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [48]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [224])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [288])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $53($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $53($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [52]))
	$7 = *(($1 + [56]))
	if ( ((int_32)$7 > (int_32)[-1]) ){ goto $label$10 }
	$7 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-5915305344025120560, ($9 + [8]), *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL db_idx64_remove($7)
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $10 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [224])
	*([0] + [4]) = $10
	*($10 + [216]) = $1
	CALL require_auth($1)
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$9 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$12 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$3 = ($3 + [165])
	goto $label$10 
	
.LABEL $label$12
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$8 | (int_64)$9)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$7 }
	*((($10 + [176]) + [32])) = [0]
	*($10 + [184]) = $9
	*($10 + [176]) = $7
	*($10 + [192]) = (int_64)-1
	*($10 + [200]) = (int_64)0
	$4 = CALL $20(($10 + [176]), $1, [480])
	CALL memcpy(($10 + [80]), $4, [57])
	CALL $59((($10 + [80]) + [60]), ($4 + [60]))
	*((($10 + [80]) + [88])) = *(($4 + [88]))
	*((($10 + [80]) + [80])) = *(($4 + [80]))
	*($10 + [152]) = *($4 + [72])
	CALL eosio_assert(*($10 + [136]), [512])
	CALL eosio_assert(((float_64)*($10 + [88]) > (float_64)(float_64)0), [512])
	*((($10 + [40]) + [32])) = [0]
	*($10 + [56]) = (int_64)-1
	*($10 + [64]) = (int_64)0
	$6 = *($0)
	*($10 + [40]) = $6
	*($10 + [48]) = $6
	*($10 + [76]) = [0]
	*($10 + [32]) = ($10 + [40])
	CALL $15(($10 + [16]), ($10 + [32]), ($10 + [216]))
	$4 = *($10 + [20])
	if ( ($4 == 0) ){ goto $label$15 }
	if ( ((int_64)*($10 + [216]) != (int_64)*($4 + [8])) ){ goto $label$15 }
	if ( ($4 == 0) ){ goto $label$15 }
	$6 = *($10 + [216])
	*($10 + [16]) = $2
	CALL eosio_assert([1], [544])
	CALL $21(*($10 + [32]), $4, $6, ($10 + [16]))
	$0 = *($10 + [64])
	if ( $0 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = *($0)
	*($10 + [24]) = $2
	*($10 + [20]) = ($10 + [216])
	*($10 + [16]) = ($10 + [40])
	CALL $22(($10 + [8]), ($10 + [40]), $6, ($10 + [16]))
	$0 = *($10 + [64])
	if ( ($0 == 0) ){ goto $label$13 }
	
.LABEL $label$14
	$2 = ($10 + [68])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$17 }
	
.LOOP $label$18:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$19 }
	CALL $53($3)
	
.LABEL $label$19
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$18 }
	$4 = *(($10 + [64]))
	goto $label$16 
	
.LABEL $label$17
	$4 = $0
	
.LABEL $label$16
	*($2) = $0
	CALL $53($4)
	
.LABEL $label$13
	if ( ((*(($10 + [140])) & [1]) == 0) ){ goto $label$20 }
	CALL $53(*(($10 + [148])))
	
.LABEL $label$20
	$0 = *($10 + [200])
	if ( ($0 == 0) ){ goto $label$21 }
	$2 = ($10 + [204])
	$4 = *($2)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$23 }
	
.LOOP $label$24:
	$4 = ($4 + [-24])
	$3 = *($4)
	*($4) = [0]
	if ( ($3 == 0) ){ goto $label$25 }
	if ( ((*($3 + [60]) & [1]) == 0) ){ goto $label$26 }
	CALL $53(*(($3 + [68])))
	
.LABEL $label$26
	CALL $53($3)
	
.LABEL $label$25
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$24 }
	$4 = *(($10 + [200]))
	goto $label$22 
	
.LABEL $label$23
	$4 = $0
	
.LABEL $label$22
	*($2) = $0
	CALL $53($4)
	
.LABEL $label$21
	*([0] + [4]) = ($10 + [224])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [112])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($7 + [40])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*($7 + [16]) = (int_64)0
	*($7) = (int_64)0
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [112])
	CALL memcpy($7, $5, [8])
	CALL eosio_assert(((uint_32)($3 + [-8]) > (uint_32)[31]), [112])
	$1 = ($7 + [16])
	CALL memcpy($1, ($5 + [8]), [32])
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($3 = (($7 + [48]) + [24]))) = *(($1 + [24]))
	*(($5 = (($7 + [48]) + [16]))) = *(($1 + [16]))
	$4 = *($7)
	*($7 + [48]) = *($1)
	*($7 + [60]) = *(($1 + [12]))
	*($7 + [56]) = *(($1 + [8]))
	*((($7 + [80]) + [24])) = *($3)
	*((($7 + [80]) + [16])) = *($5)
	*($7 + [88]) = *($7 + [56])
	*($7 + [80]) = *($7 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	CALL void $1((int_32 $4), (int_64 ($7 + [80])), (int_32 $6))
	*([0] + [4]) = ($7 + [112])
	return [1]
}

void .FUNC $13 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [64])
	*([0] + [4]) = $5
	*($5 + [48]) = $1
	CALL require_auth($1)
	*(($5 + [40])) = [0]
	*($5 + [24]) = (int_64)-1
	*($5 + [32]) = (int_64)0
	$1 = *($0)
	*($5 + [8]) = $1
	*($5 + [16]) = $1
	*($5 + [44]) = [0]
	*($5) = ($5 + [8])
	CALL $15(($5 + [56]), $5, ($5 + [48]))
	$0 = *($5 + [60])
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((int_64)*($5 + [48]) != (int_64)*($0 + [8])) ){ goto $label$1 }
	if ( ($0 == 0) ){ goto $label$1 }
	*($5 + [56]) = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)32) | (int_64)*($5 + [56]))
	CALL eosio_assert([1], [128])
	CALL $16(($5 + [56]))
	CALL $17(*($5), $0)
	
.LABEL $label$1
	$2 = *($5 + [32])
	if ( ($2 == 0) ){ goto $label$2 }
	$4 = ($5 + [36])
	$0 = *($4)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$0 = ($0 + [-24])
	$3 = *($0)
	*($0) = [0]
	if ( ($3 == 0) ){ goto $label$6 }
	CALL $53($3)
	
.LABEL $label$6
	if ( ((int_32)$2 != (int_32)$0) ){ goto $label$5 }
	$0 = *(($5 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$0 = $2
	
.LABEL $label$3
	*($4) = $2
	CALL $53($0)
	
.LABEL $label$2
	*([0] + [4]) = ($5 + [64])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1024])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$3 = *($1 + [4])
	$7 = int_32(($3 - $4) >> [3])
	$5 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$5 <= (uint_32)$7) ){ goto $label$4 }
	CALL $38($1, ($5 - $7))
	$3 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$5 }
	$3 = ($4 + ($5 << [3]))
	*(($1 + [4])) = $3
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$2 }
	
.LABEL $label$3
	$5 = ($0 + [4])
	$7 = *($5)
	
.LOOP $label$6:
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $7) > (uint_32)[7]), [112])
	CALL memcpy($4, *($5), [8])
	$7 = (*($5) + [8])
	*($5) = $7
	$4 = ($4 + [8])
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

void .FUNC $37 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $52(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $58($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$3 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$6 }
	
.LOOP $label$7:
	$6 = ($7 + [-24])
	$2 = *($6)
	*($6) = [0]
	*(($1 + [-24])) = $2
	*(($1 + [-8])) = *(($7 + [-8]))
	*(($1 + [-12])) = *(($7 + [-12]))
	*(($1 + [-16])) = *(($7 + [-16]))
	$1 = ($1 + [-24])
	$7 = $6
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$7 }
	$3 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $3
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$3 == (int_32)$6) ){ goto $label$8 }
	$1 = ($3 + [-24])
	
.LOOP $label$9:
	$7 = CALL $34($1)
	$1 = ($1 + [-24])
	if ( ((int_32)$7 != (int_32)$6) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $53($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($1 + [68])
	if ( ($2 == 0) ){ goto $label$2 }
	*(($1 + [72])) = $2
	CALL $53($2)
	
.LABEL $label$2
	if ( ((*($1 + [56]) & [1]) == 0) ){ goto $label$3 }
	CALL $53(*(($1 + [64])))
	
.LABEL $label$3
	if ( ((*($1 + [44]) & [1]) == 0) ){ goto $label$4 }
	CALL $53(*(($1 + [52])))
	
.LABEL $label$4
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $53(*(($1 + [40])))
	
.LABEL $label$5
	if ( ((*($1 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL $53(*(($1 + [28])))
	
.LABEL $label$6
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $53(*(($1 + [16])))
	
.LABEL $label$7
	CALL $53($1)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	*($1) = [0]
	$2 = *($0)
	*($0) = $3
	if ( ($2 == 0) ){ goto $label$1 }
	$3 = *($2 + [68])
	if ( ($3 == 0) ){ goto $label$2 }
	*(($2 + [72])) = $3
	CALL $53($3)
	
.LABEL $label$2
	if ( ((*($2 + [56]) & [1]) == 0) ){ goto $label$3 }
	CALL $53(*(($2 + [64])))
	
.LABEL $label$3
	if ( ((*($2 + [44]) & [1]) == 0) ){ goto $label$4 }
	CALL $53(*(($2 + [52])))
	
.LABEL $label$4
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $53(*(($2 + [40])))
	
.LABEL $label$5
	if ( ((*($2 + [20]) & [1]) == 0) ){ goto $label$6 }
	CALL $53(*(($2 + [28])))
	
.LABEL $label$6
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$7 }
	CALL $53(*(($2 + [16])))
	
.LABEL $label$7
	CALL $53($2)
	
.LABEL $label$1
	*($0 + [8]) = *($1 + [8])
	*(($0 + [16])) = *(($1 + [16]))
	return $0
}

int_32 .FUNC $32 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [84]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [800])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-3795275987163565680)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [736])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [736])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $31(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [176])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$2()), [224])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$6 = *($5)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$4 = ([0] - $3)
	$7 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($7)) == (int_64)$2) ){ goto $label$1 }
	$6 = $7
	$8 = ($7 + [-24])
	$7 = $8
	if ( ((int_32)($8 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$6 != (int_32)$3), [288])
	$8 = ($6 + [-24])
	$4 = *($5)
	if ( ((int_32)$6 == (int_32)$4) ){ goto $label$4 }
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	CALL $35($7, $8)
	$6 = ($7 + [48])
	$7 = $8
	if ( ((int_32)$6 != (int_32)$4) ){ goto $label$5 }
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = ($6 + [-24])
	
.LOOP $label$6:
	$6 = CALL $34($7)
	$7 = ($7 + [-24])
	if ( ((int_32)$6 != (int_32)$8) ){ goto $label$6 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [84]))
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $52($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $58($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $53($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [448])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $52([96])) + [8 align=4]) = (int_64)0
	*($6 + [16 align=4]) = (int_64)0
	*($6 + [24 align=4]) = (int_64)0
	*($6 + [32 align=4]) = (int_64)0
	*($6 + [40 align=4]) = (int_64)0
	*($6 + [48]) = [0]
	*($6 + [52]) = [0]
	*($6 + [56]) = [0]
	*($6 + [60]) = [0]
	*($6 + [64]) = [0]
	*($6 + [68]) = [0]
	*($6 + [72]) = [0]
	*($6 + [76]) = [0]
	*($6 + [80]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [112])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $36(CALL $28(CALL $28(CALL $28(CALL $28(CALL $28(($8 + [32]), ($6 + [8])), ($6 + [20])), ($6 + [32])), ($6 + [44])), ($6 + [56])), ($6 + [68]))
	*($6 + [84]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [84])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $37(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [68])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [72])) = $7
	CALL $53($7)
	
.LABEL $label$10
	if ( ((*($4 + [56]) & [1]) == 0) ){ goto $label$11 }
	CALL $53(*(($4 + [64])))
	
.LABEL $label$11
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$12 }
	CALL $53(*(($4 + [52])))
	
.LABEL $label$12
	if ( ((*($4 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $53(*(($4 + [40])))
	
.LABEL $label$13
	if ( ((*($4 + [20]) & [1]) == 0) ){ goto $label$14 }
	CALL $53(*(($4 + [28])))
	
.LABEL $label$14
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$15 }
	CALL $53(*(($4 + [16])))
	
.LABEL $label$15
	CALL $53($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $58 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $52($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC $50 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [9718]) == 0) ){ goto $label$2 }
	$7 = *([0] + [9720])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [9718]) = [1]
	$7 = ($7 << [16])
	*([0] + [9720]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [9720])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [9720]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [9718]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [9718]) = [1]
	$3 = ($3 << [16])
	*([0] + [9720]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [9720])
	
.LABEL $label$8
	*([0] + [9720]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $2) >> [3]) >= (uint_32)$1) ){ goto $label$5 }
	$3 = *($0)
	$4 = int_32(($2 - $3) >> [3])
	$2 = ($4 + $1)
	if ( ((uint_32)$2 >= (uint_32)[536870912]) ){ goto $label$3 }
	$6 = [536870911]
	$7 = ($7 - $3)
	if ( ((uint_32)int_32($7 >> [3]) > (uint_32)[268435454]) ){ goto $label$6 }
	$6 = int_32($7 >> [2])
	$6 = ( $2 ? $6 : ($6 <= $2) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[536870912]) ){ goto $label$2 }
	
.LABEL $label$6
	$7 = CALL $52(($6 << [3]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $2
	$7 = $1
	
.LOOP $label$7:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$7 }
	*(($0 + [4])) = ($2 + ($1 << [3]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $58($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$3 = ($7 + ($6 << [3]))
	$2 = ($7 + ($4 << [3]))
	$6 = $2
	$7 = $1
	
.LOOP $label$8:
	*($6) = (int_64)0
	$6 = ($6 + [8])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$4 = ($2 + ($1 << [3]))
	$6 = *($0)
	$5 = ($0 + [4])
	$7 = (*($5) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$9
	*($0) = $1
	*($5) = $4
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$10 }
	CALL $53($6)
	
.LABEL $label$10
	(unreachable)
}

int_32 .FUNC $52 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [9724])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC $53 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

void .FUNC $54 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $56($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $52($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $53($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $52(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $53($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}