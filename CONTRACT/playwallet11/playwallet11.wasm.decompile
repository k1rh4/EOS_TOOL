(data (i32.const 16980) "generalPlay:\00")
(data (i32.const 16993) "miningPlay:\00")
(data (i32.const 17005) "|\00")
(data (i32.const 17007) "@\00")
(data (i32.const 17010) "0123456789\00")
(data (i32.const 17021) ",\00")
(data (i32.const 17023) "eosio.token\00")
(data (i32.const 17035) "no balance object found\00")
(data (i32.const 17059) "onerror action\'s are only valid from the \"eosio\" system account\00")
(data (i32.const 17123) "transfer\00")
(data (i32.const 17132) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 17181) "invalid symbol name\00")
(data (i32.const 17201) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 17252) "error reading iterator\00")
(data (i32.const 17275) "read\00")
(data (i32.const 17280) "cannot create objects in table of another contract\00")
(data (i32.const 17331) "write\00")
(data (i32.const 17337) "playwallet11\00")
(data (i32.const 17350) "playwallet22\00")
(data (i32.const 17363) "\e6\8a\bd\e6\b0\b4\00")
(data (i32.const 17370) "username account does not exist\00")
(data (i32.const 17402) "playwallet21\00")
(data (i32.const 17415) "share reward\00")
(data (i32.const 17428) "next primary key in table is at autoincrement limit\00")
(data (i32.const 17480) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 17534) "cannot decrement iterator at beginning of table\00")
(data (i32.const 17582) "unable to find key\00")
(data (i32.const 17616) "\c4\"\00\00\00\00\00\00\86\03!Y\c8:\c5@9\d1\aeB\16\ce\c4@\00\00\00\00\00\00\00\00\94\11\00\00\00\00\00\00\c1\ca\a1E\16\ce\d4@vO\1e\162~\d4@vO\1e\162~\d4@\d9\0b\00\00\00\00\00\00\be\c1\17&K\bd\ee@P6\e5\nAG\ee@P6\e5\nAG\ee@\98\08\00\00\00\00\00\00Gr\f9\0fAG\0eAz\c7):\fc\d2\0dAz\c7):\fc\d2\0dAW\05\00\00\00\00\00\00\f6(\\/=^6A5^\baiX\086A5^\baiX\086A\b6\03\00\00\00\00\00\00\d7\a3pmX\08fAH\e1z|\bd\b3eAH\e1z|\bd\b3eA")
(data (i32.const 17808) "cannot pass end iterator to modify\00")
(data (i32.const 17843) "object passed to modify is not in multi_index\00")
(data (i32.const 17889) "cannot modify objects in table of another contract\00")
(data (i32.const 17940) "updater cannot change primary key when modifying an object\00")
(data (i32.const 17999) "cannot decrement end iterator when the index is empty\00")
(data (i32.const 18053) "cannot decrement iterator at beginning of index\00")
(data (i32.const 18101) "addbancor\00")
(data (i32.const 18111) "calcreward\00")
(data (i32.const 18122) "mining award\00")
(data (i32.const 18135) "playwallet33\00")
(data (i32.const 18148) "main account balance\00")
(data (i32.const 18169) "directorplay\00")
(data (i32.const 18182) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 18241) "can not continue\00")
(data (i32.const 18258) "receive award\00")
(data (i32.const 18272) "can not receive award\00")
(data (i32.const 18294) "unable to find configinfo\00")
(data (i32.const 18320) "directorwal3\00")
(data (i32.const 18333) "ranking reward\00")
(data (i32.const 18348) "cannot increment end iterator\00")
(data (i32.const 18378) "get\00")
(data (i32.const 18382) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "memcpy" (func $fimport$0 (param i32 i32 i32) (result i32)))
(import "env" "tapos_block_num" (func $fimport$1 (result i32)))
(import "env" "tapos_block_prefix" (func $fimport$2 (result i32)))
(import "env" "current_time" (func $fimport$3 (result i64)))
(import "env" "sha256" (func $fimport$4 (param i32 i32 i32)))
(import "env" "eosio_assert" (func $fimport$5 (param i32 i32)))
(import "env" "db_find_i64" (func $fimport$6 (param i64 i64 i64 i64) (result i32)))
(import "env" "action_data_size" (func $fimport$7 (result i32)))
(import "env" "read_action_data" (func $fimport$8 (param i32 i32) (result i32)))
(import "env" "is_account" (func $fimport$9 (param i64) (result i32)))
(import "env" "send_inline" (func $fimport$10 (param i32 i32)))
(import "env" "require_auth" (func $fimport$11 (param i64)))
(import "env" "db_lowerbound_i64" (func $fimport$12 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$13 (param i32 i32) (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "db_get_i64" (func $fimport$15 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$16 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_end_i64" (func $fimport$18 (param i64 i64 i64) (result i32)))
(import "env" "db_update_i64" (func $fimport$19 (param i32 i64 i32 i32)))
(import "env" "db_idx64_find_primary" (func $fimport$20 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx64_update" (func $fimport$21 (param i32 i64 i32)))
(import "env" "db_idx64_store" (func $fimport$22 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx64_lowerbound" (func $fimport$23 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx64_previous" (func $fimport$24 (param i32 i32) (result i32)))
(import "env" "db_idx64_end" (func $fimport$25 (param i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$26))
(import "env" "memset" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "__unordtf2" (func $fimport$29 (param i64 i64 i64 i64) (result i32)))
(import "env" "__eqtf2" (func $fimport$30 (param i64 i64 i64 i64) (result i32)))
(import "env" "__multf3" (func $fimport$31 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$32 (param i32 i64 i64 i64 i64)))
(import "env" "__subtf3" (func $fimport$33 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$34 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$35 (param i64 i64) (result i32)))
(import "env" "__floatunsitf" (func $fimport$36 (param i32 i32)))
(import "env" "__fixtfsi" (func $fimport$37 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$38 (param i32 i32)))
(import "env" "__extenddftf2" (func $fimport$39 (param i32 f64)))
(import "env" "__extendsftf2" (func $fimport$40 (param i32 f32)))
(import "env" "__divtf3" (func $fimport$41 (param i32 i64 i64 i64 i64)))
(import "env" "__letf2" (func $fimport$42 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfdf2" (func $fimport$43 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$44 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$45 (param i64 i64) (result f32)))
(import "env" "set_blockchain_parameters_packed" (func $fimport$46 (param i32 i32)))
(import "env" "get_blockchain_parameters_packed" (func $fimport$47 (param i32 i32) (result i32)))
(export "memory" (memory $0))
(export "__heap_base" (global $global$1))
(export "__data_end" (global $global$2))
(export "apply" (func $13))
(export "_ZdlPv" (func $115))
(export "_Znwj" (func $113))
(export "_Znaj" (func $114))
(export "_ZdaPv" (func $116))
(table $0 9 9 anyfunc)
(elem (i32.const 1) $16 $18 $20 $22 $1 $2 $3 $4)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 18468))
(global $global$2 i32 (i32.const 18468))


int_32 .FUNC $98 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($0 + [48]) = $1
	$4 = *($2 + [4])
	$1 = *($4 + [4])
	*($0 + [8]) = *($1 + [8])
	*($0 + [16]) = *($1 + [16])
	*($0 + [24]) = *($1 + [56])
	*($0 + [32]) = *($1 + [64])
	*($0) = (int_64))((int_64)9999999999 - *(*(*($4) + [4])))
	$1 = *($2)
	*($0 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [56]) = ($3 + [48])
	*($3 + [52]) = $3
	*($3 + [48]) = $3
	*($3 + [64]) = ($3 + [48])
	*($3 + [76]) = ($0 + [8])
	*($3 + [72]) = $0
	*($3 + [80]) = ($0 + [16])
	*($3 + [84]) = ($0 + [24])
	*($3 + [88]) = ($0 + [32])
	*($3 + [92]) = ($0 + [40])
	CALL $101(($3 + [72]), ($3 + [64]))
	$5 = *($0)
	*($0 + [52]) = CALL db_store_i64(*($1 + [8]), (int_64)7035937260545130496, *(*($2 + [8])), $5, $3, [48])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [96])
	return $0
}

void .FUNC $99 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $126($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([64])
	CALL $100($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $99(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($0 + [4]), ($3 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($0 + [4]), ($3 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	CALL $96(*($1), ($3 + [24]))
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($0 + [4]), ($3 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($1 + [4]), ($3 + [48]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $96 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$5 = *($0 + [4])
	$6 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($6) - $5) > (int_32)[0]), [17331])
	CALL memcpy(*($3), ($2 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $8 ){ goto $label$1 }
	$7 = ($3 & [1])
	$3 = *($1)
	$3 = ( *(($1 + [4])) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$2 }
	$8 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) >= (int_32)$3), [17331])
	$5 = ($0 + [4])
	CALL memcpy(*($5), ( $8 ? ($1 + [1]) : $7 ), $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)4982871462359400448, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $14($5, $7)
	*($3 + [12]) = [0]
	*($3 + [8]) = $5
	$6 = *(*(CALL $59(($3 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [17428])
	*($1) = *(($5 + [16]))
	$2 = $2
	$5 = ($2 + [-16])
	$global$0 = $5
	CALL eosio_assert([1], [17331])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [17331])
	CALL memcpy(($2 + [-8]), ($1 + [8]), [8])
	$6 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)4982871462359400448, *(*($0 + [8])), $6, $5, [16])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $90 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $91 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $92 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = $1
	CALL $97(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $45(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $93 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([64])
	CALL $98($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [52])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $99(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $138 (int_32 $0, int_32 $1)
{
	$1 = ((int_32)$1 * (int_32)$0)
	$0 = CALL $136([8584], $1)
	CALL memset($0, [0], $1)
	return $0
}

int_32 .FUNC $123 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $132($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $120($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC _ZdlPv (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $139($0)
	
.LABEL $label$1
}

void .FUNC $122 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$7 = ($0 + [1])
	$8 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = *($0 + [8])
	$8 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$8 = [11]
	$2 = ($2 + $1)
	$9 = ($1 << [1])
	$2 = ( $9 ? $2 : ($2 <= $9) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$8 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($8)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $7, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($7 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($8 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $130 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $131 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

int_32 .FUNC $132 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

void .FUNC $133 (int_32 $0)
{
	*($0) = [1]
}

void .FUNC $134 (int_32 $0)
{
	*($0) = [0]
}

void .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL _Znwj(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL _ZdlPv($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $136 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$2 = *($0 + [8384])
	if ( $2 ){ goto $label$2 }
	$2 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$3 = (($1 + [4]) & [7])
	$3 = ( (($1 + [8]) - $3) ? $1 : $3 )
	$4 = *($0 + [8388])
	if ( ((uint_32)$4 >= (uint_32)$2) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$4 * (int_32)[12])) + [8192])
	if ( $4 ){ goto $label$6 }
	$2 = ($0 + [8196])
	if ( *($2) ){ goto $label$6 }
	*($1) = [8192]
	*($2) = $0
	
.LABEL $label$6
	$4 = ($3 + [4])
	
.LOOP $label$7:
	$2 = *($1 + [8])
	if ( ((uint_32)($2 + $4) > (uint_32)*($1)) ){ goto $label$8 }
	*(($2 = (*($1 + [4]) + $2))) = ((*($2) & [-2147483648]) | $3)
	*(($1 = ($1 + [8]))) = (*($1) + $4)
	*($2) = (*($2) | [-2147483648])
	$1 = ($2 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $137($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$5 = ([2147483644] - $3)
	$6 = ($0 + [8392])
	$7 = ($0 + [8384])
	$8 = *($0 + [8392])
	$2 = $8
	
.LOOP $label$9:
	$9 = ($1 + [8192])
	$1 = ($0 + ((int_32)$2 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($9)), [18382])
	$10 = *(($1 + [8196]))
	$2 = ($10 + [4])
	
.LOOP $label$10:
	$11 = ($10 + *($9))
	$12 = ($2 + [-4])
	$13 = *($12)
	$1 = ($13 & [2147483647])
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$12 }
	
.LOOP $label$13:
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)$11) ){ goto $label$12 }
	$4 = *($4)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($4 & [2147483647])) + [4])
	if ( ($1 <= $3) ){ goto $label$13 }
	
.LABEL $label$12
	*($12) = (( $1 ? $3 : ($1 <= $3) ) | ($13 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$3) ){ goto $label$14 }
	*(($2 + $3)) = (($5 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$3) ){ goto $label$3 }
	
.LABEL $label$11
	$2 = (($2 + $1) + [4])
	if ( ($2 <= $11) ){ goto $label$10 }
	$1 = [0]
	$2 = (*($6) + [1])
	$2 = ( [0] ? $2 : ((int_32)$2 == (int_32)*($7)) )
	*($6) = $2
	if ( ((int_32)$2 != (int_32)$8) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($12) = (*($12) | [-2147483648])
	return $2
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $137 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [8576]) == 0) ){ goto $label$2 }
	$2 = *([0] + [8580])
	goto $label$1 
	
.LABEL $label$2
	$2 = (current_memory)
	*([0] + [8576]) = [1]
	$2 = ($2 << [16])
	*([0] + [8580]) = $2
	
.LABEL $label$1
	$3 = $2
	$5 = (current_memory)
	$4 = uint_32(($2 + [65535]) >> [16])
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$6 }
	($4 - $5)
	$5 = [0]
	if ( ((int_32)$4 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [8580])
	
.LABEL $label$6
	$5 = [0]
	*([0] + [8580]) = $3
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$5 }
	$4 = ((int_32)$1 * (int_32)[12])
	$5 = ($2 & [65535])
	if ( ((uint_32)$5 > (uint_32)[64512]) ){ goto $label$8 }
	$5 = (($2 + [65536]) - $5)
	goto $label$7 
	
.LABEL $label$8
	$5 = (($2 + [131072]) - ($2 & [131071]))
	
.LABEL $label$7
	$4 = ($0 + $4)
	$2 = ($5 - $2)
	if ( *([0] + [8576]) ){ goto $label$9 }
	$3 = (current_memory)
	*([0] + [8576]) = [1]
	$3 = ($3 << [16])
	*([0] + [8580]) = $3
	
.LABEL $label$9
	$4 = ($4 + [8192])
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$8 = (current_memory)
	$7 = (($2 + [7]) & [-8])
	$5 = uint_32((($7 + $3) + [65535]) >> [16])
	if ( ((uint_32)$5 <= (uint_32)$8) ){ goto $label$10 }
	($5 - $8)
	if ( ((int_32)$5 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [8580])
	
.LABEL $label$10
	*([0] + [8580]) = ($6 + $7)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$5 = *($4)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $5) == (int_32)$3) ){ goto $label$3 }
	$7 = ($1 + [8200])
	$1 = *($7)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$11 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $5))
	*($7) = *($4)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$11
	$4 = (*($4) + [1])
	*(($4 = ($0 + [8388]))) = $4
	*(($5 = (($0 = ($0 + ((int_32)$4 * (int_32)[12]))) + [8192]))) = $2
	*(($0 + [8196])) = $3
	
.LABEL $label$5
	return $5
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$2 = *($1)
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$2) ){ goto $label$12 }
	*(($3 = (*(($3 + [8196])) + $2))) = ((*($3) & [-2147483648]) | (([-4] - $2) + $5))
	*($1) = *($4)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$12
	$2 = ($0 + [8388])
	$3 = (*($2) + [1])
	*($0 + [8384]) = $3
	*($2) = $3
	return [0]
	
.LABEL $label$3
	*($4) = ($5 + $2)
	return $4
}

void .FUNC $120 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL _Znwj($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL _ZdlPv($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $38 (int_32 $0, int_64 $1, int_64 $2, int_64 $3)
{
	int_32 $4
	int_32 $5
	float_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [80])
	$global$0 = $4
	$5 = CALL $31(($0 + [8]), $3, [17582])
	$3 = *($5 + [16])
	if ( (uint_64)($3 <= (int_64)2) ){ goto $label$2 }
	$6 = ((float_64)*($5 + [48]) * (float_64)*((((CASTING uint_32)(uint_64 $3) << [5]) + [17568])))
	goto $label$1 
	
.LABEL $label$2
	$6 = (CASTING float_64)(int_64 *($5 + [24]))
	
.LABEL $label$1
	$7 = *($0)
	$3 = (int_64)6
	
.LOOP $label$3:
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$3 }
	$3 = (int_64)0
	$8 = (int_64)59
	$0 = [17350]
	$9 = (int_64)0
	
.LOOP $label$4:
	$10 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$5 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$5 = ($5 + [-91])
	goto $label$6 
	
.LABEL $label$7
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $5) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$5
	$0 = ($0 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$4 }
	$3 = (int_64)0
	$10 = (int_64)59
	$0 = [18111]
	$11 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$3 > (uint_64)(int_64)9) ){ goto $label$13 }
	$5 = *($0)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$5 = ($5 + [-91])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$3 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$5 = ( ($5 + [-48]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$9
	$0 = ($0 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$11 = ((int_64)$8 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$8 }
	*($4 + [8]) = $2
	*($4) = $1
	*($4 + [16]) = $6
	*($4 + [24]) = $9
	*($4 + [32]) = $11
	*(($0 = CALL _Znwj([16]))) = $7
	*($0 + [8]) = (int_64)3617214756542218240
	*(($4 + [60])) = [0]
	$5 = ($0 + [16])
	*((($4 + [24]) + [24])) = $5
	*(($4 + [44])) = $5
	*($4 + [40]) = $0
	*($4 + [52 align=4]) = (int_64)0
	CALL $49(($4 + [52]), [24])
	$0 = *($4 + [52])
	$5 = (*(($4 + [56])) - $0)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [17331])
	CALL memcpy($0, $4, [8])
	CALL eosio_assert(((int_32)($5 + [-8]) > (int_32)[7]), [17331])
	CALL memcpy(($0 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)($5 + [-16]) > (int_32)[7]), [17331])
	CALL memcpy(($0 + [16]), ($4 + [16]), [8])
	CALL $30(($4 + [64]), ($4 + [24]))
	$0 = *($4 + [64])
	CALL send_inline($0, (*($4 + [68]) - $0))
	$0 = *($4 + [64])
	if ( ($0 == 0) ){ goto $label$14 }
	*($4 + [68]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$14
	$0 = *($4 + [52])
	if ( ($0 == 0) ){ goto $label$15 }
	*(($4 + [56])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$15
	$0 = *($4 + [40])
	if ( ($0 == 0) ){ goto $label$16 }
	*(($4 + [44])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$16
	$global$0 = ($4 + [80])
}

void .FUNC $126 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL _Znwj($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $126($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL _ZdlPv($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $48 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$6 = ($global$0 - [144])
	$global$0 = $6
	CALL $9(($6 + [96]), $3)
	$7 = *($0)
	$8 = (int_64)6
	
.LOOP $label$1:
	$8 = ((int_64)$8 + (int_64)1)
	if ( ((int_64)$8 != (int_64)13) ){ goto $label$1 }
	$8 = (int_64)0
	$9 = (int_64)59
	$0 = [17350]
	$10 = (int_64)0
	
.LOOP $label$2:
	$11 = (int_64)0
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$3 }
	$3 = *($0)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [-91])
	goto $label$4 
	
.LABEL $label$5
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$11 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $3) & (int_64)31) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$3
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$9 = ((int_64)$9 + (int_64)4294967291)
	if ( ((int_64)$9 != (int_64)55834574842) ){ goto $label$2 }
	$8 = (int_64)0
	$11 = (int_64)59
	$0 = [18101]
	$12 = (int_64)0
	
.LOOP $label$6:
	if ( ((uint_64)$8 > (uint_64)(int_64)8) ){ goto $label$11 }
	$3 = *($0)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$3 = ($3 + [-91])
	goto $label$9 
	
.LABEL $label$11
	$9 = (int_64)0
	if ( ((uint_64)$8 <= (uint_64)(int_64)11) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$10
	$3 = ( ($3 + [-48]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$8
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$7
	$0 = ($0 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$12 = ((int_64)$9 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)4294967291)
	if ( ((int_64)$11 != (int_64)55834574842) ){ goto $label$6 }
	*($6 + [8]) = $1
	*($6) = $1
	*($6 + [16]) = $2
	$3 = CALL $118(($6 + [24]), ($6 + [96]))
	*($6 + [48]) = $5
	*($6 + [40]) = $4
	*($6 + [56]) = $10
	*($6 + [64]) = $12
	*(($0 = CALL _Znwj([16]))) = $7
	*($0 + [8]) = (int_64)3617214756542218240
	*(($6 + [92])) = [0]
	$13 = ($0 + [16])
	*((($6 + [56]) + [24])) = $13
	*(($6 + [76])) = $13
	*($6 + [72]) = $0
	*($6 + [84 align=4]) = (int_64)0
	$0 = *($3)
	$3 = ( *(($6 + [28])) ? uint_32($0 >> [1]) : ($0 & [1]) )
	$0 = ($3 + [40])
	$8 = (CASTING uint_64)(uint_32 $3)
	$3 = (($6 + [56]) + [28])
	
.LOOP $label$12:
	$0 = ($0 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ($0 == 0) ){ goto $label$14 }
	CALL $49($3, $0)
	$3 = *(($6 + [88]))
	$0 = *(($6 + [84]))
	goto $label$13 
	
.LABEL $label$14
	$3 = [0]
	$0 = [0]
	
.LABEL $label$13
	*($6 + [132]) = $0
	*($6 + [128]) = $0
	*($6 + [136]) = $3
	*($6 + [112]) = ($6 + [128])
	*($6 + [120]) = $6
	CALL $95(($6 + [120]), ($6 + [112]))
	CALL $30(($6 + [128]), ($6 + [56]))
	$0 = *($6 + [128])
	CALL send_inline($0, (*($6 + [132]) - $0))
	$0 = *($6 + [128])
	if ( ($0 == 0) ){ goto $label$15 }
	*($6 + [132]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$15
	$0 = *($6 + [84])
	if ( ($0 == 0) ){ goto $label$16 }
	*(($6 + [88])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$16
	$0 = *($6 + [72])
	if ( ($0 == 0) ){ goto $label$17 }
	*(($6 + [76])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$17
	if ( (*($6 + [24]) & [1]) ){ goto $label$20 }
	if ( (*($6 + [96]) & [1]) ){ goto $label$19 }
	goto $label$18 
	
.LABEL $label$20
	CALL _ZdlPv(*(($6 + [32])))
	if ( ((*($6 + [96]) & [1]) == 0) ){ goto $label$18 }
	
.LABEL $label$19
	CALL _ZdlPv(*($6 + [104]))
	$global$0 = ($6 + [144])
	return 
	
.LABEL $label$18
	$global$0 = ($6 + [144])
}

int_32 .FUNC $125 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $120($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $43 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $108($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $45(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [16])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [17843])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [17889])
	$5 = *($1)
	*($1 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17940])
	CALL eosio_assert([1], [17331])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [17331])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $4, [16])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [16])
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$3 = ($global$0 - [192])
	$global$0 = $3
	*($3 + [168]) = $2
	$4 = [0]
	*(($3 + [160])) = [0]
	*($3 + [136]) = (int_64)0
	*($3 + [144]) = (int_64)-1
	*($3 + [152]) = (int_64)0
	*($3 + [164]) = [0]
	$2 = *($0)
	*($3 + [128]) = $2
	$5 = CALL db_find_i64($2, (int_64)0, (int_64)-3020376800539181056, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$5 = CALL $71(($3 + [128]), $5)
	CALL eosio_assert(((int_32)*($5 + [24]) == (int_32)($3 + [128])), [17201])
	$2 = *($0)
	*($3 + [24]) = ($3 + [168])
	CALL eosio_assert([1], [17808])
	CALL $107(($3 + [128]), $5, $2, ($3 + [24]))
	$6 = *([0] + [8192])
	$7 = *($3 + [168])
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17132])
	$2 = (uint_64)$6 >> (uint_64)(int_64)8)
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$8 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$2 = $8
	$0 = [1]
	$5 = $4
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$2 = $8
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$0 = ((int_32)$4 < (int_32)[6])
	$5 = ($4 + [1])
	$4 = $5
	if ( $0 ){ goto $label$8 }
	$0 = [1]
	$4 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$0 = [0]
	
.LABEL $label$4
	CALL eosio_assert($0, [17181])
	$2 = (int_64)0
	$8 = (int_64)59
	$4 = [18320]
	$9 = (int_64)0
	
.LOOP $label$9:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$10 }
	$0 = *($4)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$0 = ($0 + [-91])
	goto $label$11 
	
.LABEL $label$12
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$10
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$9 }
	$2 = (int_64)6
	
.LOOP $label$13:
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$13 }
	*($3 + [80]) = (int_64)3617214756542218240
	*($3 + [72]) = $9
	$2 = (int_64)0
	$10 = (int_64)59
	$4 = [17023]
	$9 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$19 }
	$0 = *($4)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$0 = ($0 + [-91])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$9 = ((int_64)$8 | (int_64)$9)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$14 }
	$2 = (int_64)0
	$10 = (int_64)59
	$4 = [17123]
	$11 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$25 }
	$0 = *($4)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$0 = ($0 + [-91])
	goto $label$23 
	
.LABEL $label$25
	$8 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $0) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$21
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$11 = ((int_64)$8 | (int_64)$11)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$20 }
	$2 = (int_64)0
	$8 = (int_64)59
	$4 = [18320]
	$12 = (int_64)0
	
.LOOP $label$26:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$27 }
	$0 = *($4)
	if ( ((uint_32)(($0 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$0 = ($0 + [-91])
	goto $label$28 
	
.LABEL $label$29
	$0 = ( ($0 + [-48]) ? [0] : ((($0 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $0) & (int_64)31) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$27
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$12 = ((int_64)$10 | (int_64)$12)
	$8 = ((int_64)$8 + (int_64)4294967291)
	if ( ((int_64)$8 != (int_64)55834574842) ){ goto $label$26 }
	*(($3 + [16])) = [0]
	*($3 + [8]) = (int_64)0
	$4 = CALL $132([18333])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$32 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$35 }
	*($3 + [8]) = ($4 << [1])
	$0 = (($3 + [8]) | [1])
	if ( $4 ){ goto $label$34 }
	goto $label$33 
	
.LABEL $label$35
	$5 = (($4 + [16]) & [-16])
	$0 = CALL _Znwj($5)
	*($3 + [8]) = ($5 | [1])
	*($3 + [16]) = $0
	*($3 + [12]) = $4
	
.LABEL $label$34
	CALL memcpy($0, [18333], $4)
	
.LABEL $label$33
	*(($0 + $4)) = [0]
	*(($3 + [48])) = $6
	$4 = ($3 + [16])
	*(($3 + [64])) = *($4)
	*($4) = [0]
	*($3 + [32]) = $1
	*($3 + [24]) = $12
	*($3 + [40]) = $7
	*($3 + [56]) = *($3 + [8])
	*($3 + [8]) = (int_64)0
	$4 = CALL $29(($3 + [88]), ($3 + [72]), $9, $11, ($3 + [24]))
	CALL $30(($3 + [176]), $4)
	$0 = *($3 + [176])
	CALL send_inline($0, (*($3 + [180]) - $0))
	$0 = *($3 + [176])
	if ( ($0 == 0) ){ goto $label$36 }
	*($3 + [180]) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$36
	$0 = *($4 + [28])
	if ( ($0 == 0) ){ goto $label$37 }
	*(($4 + [32])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$37
	$0 = *($4 + [16])
	if ( ($0 == 0) ){ goto $label$38 }
	*(($4 + [20])) = $0
	CALL _ZdlPv($0)
	
.LABEL $label$38
	if ( (*(($3 + [56])) & [1]) ){ goto $label$40 }
	if ( (*($3 + [8]) & [1]) ){ goto $label$39 }
	goto $label$31 
	
.LABEL $label$40
	CALL _ZdlPv(*(($3 + [64])))
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$31 }
	
.LABEL $label$39
	CALL _ZdlPv(*(($3 + [16])))
	$5 = *($3 + [152])
	if ( $5 ){ goto $label$30 }
	goto $label$3 
	
.LABEL $label$32
	CALL $117(($3 + [8]))
	
.LABEL $label$31
	$5 = *($3 + [152])
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$30
	$13 = ($3 + [156])
	$4 = *($13)
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$41:
	$4 = ($4 + [-24])
	$0 = *($4)
	*($4) = [0]
	if ( ($0 == 0) ){ goto $label$42 }
	CALL _ZdlPv($0)
	
.LABEL $label$42
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$41 }
	$4 = *(($3 + [152]))
	goto $label$1 
	
.LABEL $label$3
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$2
	$4 = $5
	
.LABEL $label$1
	*($13) = $5
	CALL _ZdlPv($4)
	$global$0 = ($3 + [192])
	(unreachable)
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17252])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [12]) = $2
	*($3 + [8]) = $2
	*($3 + [16]) = ($2 + $4)
	*(($5 = CALL _Znwj([48])) + [32]) = $0
	*($3 + [24]) = ($3 + [8])
	*($3 + [36]) = ($5 + [8])
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + [16])
	*($3 + [44]) = ($5 + [24])
	CALL $88(($3 + [32]), ($3 + [24]))
	*($5 + [36]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [32]) = $6
	*($3 + [4]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $85(($0 + [24]), ($3 + [24]), ($3 + [32]), ($3 + [4]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [48])
	return $5
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0)
	$2 = *($0 + [4])
	$4 = int_32(($2 - $3) >> [5])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$3 }
	$6 = [134217727]
	$7 = (*($0 + [8]) - $3)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$6 = int_32($7 >> [4])
	$6 = ( $5 ? $6 : ($6 <= $5) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$5 = CALL _Znwj(($6 << [5]))
	$2 = *(($0 + [4]))
	$3 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $126($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($4 = ($5 + ($4 << [5])))) = *($1)
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*(($4 + [8])) = *(($1 + [8]))
	$1 = ($2 - $3)
	$2 = ($4 - $1)
	$6 = ($5 + ($6 << [5]))
	$4 = ($4 + [32])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($2, $3, $1)
	$3 = *($0)
	
.LABEL $label$6
	*($0) = $2
	*(($0 + [4])) = $4
	*(($0 + [8])) = $6
	if ( ($3 == 0) ){ goto $label$7 }
	CALL _ZdlPv($3)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

int_64 .FUNC $46 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, float_64 $4, int_64 $5, int_64 $6, int_64 $7, int_64 $8, int_64 $9, int_64 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$11 = ($global$0 - [208])
	$global$0 = $11
	*($11 + [192]) = $2
	*($11 + [200]) = $1
	*($11 + [184]) = $3
	*($11 + [176]) = $4
	*($11 + [168]) = $5
	*($11 + [160]) = $6
	*($11 + [152]) = $7
	*($11 + [144]) = $8
	*($11 + [136]) = $9
	*($11 + [128]) = $10
	*((($11 + [88]) + [32])) = [0]
	*($11 + [96]) = (int_64)0
	*($11 + [104]) = (int_64)-1
	*($11 + [112]) = (int_64)0
	$10 = *($0)
	*($11 + [88]) = $10
	*($11 + [24]) = ($11 + [88])
	CALL $51(($11 + [80]), ($11 + [88]), $10, ($11 + [24]))
	$10 = *($0)
	*($11 + [28]) = ($11 + [192])
	*($11 + [24]) = ($11 + [80])
	*($11 + [32]) = ($11 + [160])
	*($11 + [36]) = ($11 + [184])
	*($11 + [40]) = ($11 + [168])
	*($11 + [44]) = ($11 + [176])
	*($11 + [48]) = ($11 + [152])
	*($11 + [52]) = ($11 + [144])
	*($11 + [56]) = ($11 + [136])
	*($11 + [60]) = ($11 + [128])
	*($11 + [64]) = ($11 + [200])
	CALL $52(($11 + [72]), ($0 + [8]), $10, ($11 + [24]))
	*((($11 + [24]) + [32])) = [0]
	*($11 + [40]) = (int_64)-1
	*($11 + [48]) = (int_64)0
	$10 = *($0)
	*($11 + [24]) = $10
	*($11 + [32]) = *($11 + [192])
	*($11 + [16]) = ($11 + [72])
	CALL $53(($11 + [8]), ($11 + [24]), $10, ($11 + [16]))
	$10 = *(*($11 + [76]))
	$12 = *($11 + [48])
	if ( ($12 == 0) ){ goto $label$1 }
	$13 = ($11 + [52])
	$0 = *($13)
	if ( ((int_32)$0 == (int_32)$12) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$14 = *($0)
	*($0) = [0]
	if ( ($14 == 0) ){ goto $label$5 }
	CALL _ZdlPv($14)
	
.LABEL $label$5
	if ( ((int_32)$12 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($11 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $12
	
.LABEL $label$2
	*($13) = $12
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$12 = *($11 + [112])
	if ( ($12 == 0) ){ goto $label$6 }
	$13 = ($11 + [116])
	$0 = *($13)
	if ( ((int_32)$0 == (int_32)$12) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$14 = *($0)
	*($0) = [0]
	if ( ($14 == 0) ){ goto $label$10 }
	CALL _ZdlPv($14)
	
.LABEL $label$10
	if ( ((int_32)$12 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($11 + [112]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $12
	
.LABEL $label$7
	*($13) = $12
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($11 + [208])
	return $10
}

void .FUNC $45 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $126($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $44 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2)
	*($0 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [17331])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [17331])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)4982871462359400448, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $124 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$3 = ($2 & [1])
	if ( ($3 == 0) ){ goto $label$6 }
	$4 = ((*($0) & [-2]) + [-1])
	$2 = *($0 + [4])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$4 = [10]
	$2 = uint_32($2 >> [1])
	if ( ((int_32)$2 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $122($0, $4, [1], $4, $4, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($2 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($2 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $2)) + [1]) = [0]
	*($0) = $1
}

int_32 .FUNC $128 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	CALL $133([8300])
	$3 = *([0] + [8308])
	if ( ($3 == 0) ){ goto $label$4 }
	$4 = *([0] + [8312])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$4
	$3 = [8316]
	*([0] + [8308]) = [8316]
	$4 = *([0] + [8312])
	if ( ((int_32)$4 != (int_32)[32]) ){ goto $label$2 }
	
.LABEL $label$3
	$3 = CALL $138([260], [1])
	if ( ($3 == 0) ){ goto $label$1 }
	$4 = [0]
	*($3) = *([0] + [8308])
	*([0] + [8308]) = $3
	*([0] + [8312]) = [0]
	
.LABEL $label$2
	*([0] + [8312]) = ($4 + [1])
	*((($3 = ($3 + ($4 << [2]))) + [132])) = $1
	*(($3 + [4])) = $0
	CALL $134([8300])
	return [0]
	
.LABEL $label$1
	CALL $134([8300])
	return [-1]
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$1 = ($global$0 - [64])
	$global$0 = $1
	$2 = CALL $118(($1 + [48]), [8248])
	$3 = CALL $118(($1 + [32]), [8260])
	$4 = CALL $118(($1 + [16]), [8272])
	$5 = CALL $118($1, [8284])
	$6 = [1]
	$8 = ($7 & [1])
	$7 = *($1 + [48])
	$7 = ( *($2 + [4]) ? uint_32($7 >> [1]) : $8 )
	if ( ($7 == 0) ){ goto $label$1 }
	$9 = ($0 + [1])
	$6 = ($10 & [1])
	$10 = *($0)
	$10 = ( *($0 + [4]) ? uint_32($10 >> [1]) : $6 )
	if ( ((int_32)$10 < (int_32)$7) ){ goto $label$2 }
	$11 = ( *($0 + [8]) ? $9 : $6 )
	$12 = ($11 + $10)
	$13 = ( *($2 + [8]) ? ($2 + [1]) : $8 )
	$6 = *($13)
	$8 = $11
	
.LOOP $label$3:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$2 }
	$10 = CALL $130($8, $6, $10)
	if ( ($10 == 0) ){ goto $label$2 }
	if ( (CALL $131($10, $13, $7) == 0) ){ goto $label$4 }
	$8 = ($10 + [1])
	$10 = ($12 - $8)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$2 }
	$6 = [1]
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$1 }
	
.LABEL $label$2
	$10 = *($0)
	$8 = ($10 & [1])
	$13 = *(($0 + [8]))
	$12 = ($7 & [1])
	$7 = *($1 + [32])
	$7 = ( *($3 + [4]) ? uint_32($7 >> [1]) : $12 )
	if ( ($7 == 0) ){ goto $label$5 }
	$6 = [0]
	$10 = ( *(($0 + [4])) ? uint_32($10 >> [1]) : $8 )
	if ( ((int_32)$10 < (int_32)$7) ){ goto $label$1 }
	$14 = ( $13 ? $9 : $8 )
	$11 = ($14 + $10)
	$12 = ( *($3 + [8]) ? ($3 + [1]) : $12 )
	$13 = *($12)
	$8 = $14
	
.LOOP $label$6:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$1 }
	$10 = CALL $130($8, $13, $10)
	if ( ($10 == 0) ){ goto $label$1 }
	if ( (CALL $131($10, $12, $7) == 0) ){ goto $label$7 }
	$8 = ($10 + [1])
	$10 = ($11 - $8)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$1 }
	if ( ((int_32)$10 != (int_32)$14) ){ goto $label$1 }
	$10 = *($0)
	$8 = ($10 & [1])
	$13 = *(($0 + [8]))
	
.LABEL $label$5
	$6 = [2]
	$11 = ($7 & [1])
	$7 = *($1 + [16])
	$7 = ( *($4 + [4]) ? uint_32($7 >> [1]) : $11 )
	if ( ($7 == 0) ){ goto $label$1 }
	$10 = ( *(($0 + [4])) ? uint_32($10 >> [1]) : $8 )
	if ( ((int_32)$10 < (int_32)$7) ){ goto $label$8 }
	$9 = ( $13 ? $9 : $8 )
	$12 = ($9 + $10)
	$13 = ( *($4 + [8]) ? ($4 + [1]) : $11 )
	$0 = *($13)
	$8 = $9
	
.LOOP $label$9:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$8 }
	$10 = CALL $130($8, $0, $10)
	if ( ($10 == 0) ){ goto $label$8 }
	if ( (CALL $131($10, $13, $7) == 0) ){ goto $label$10 }
	$8 = ($10 + [1])
	$10 = ($12 - $8)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( ((int_32)$10 == (int_32)$12) ){ goto $label$8 }
	if ( ((int_32)($10 - $9) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$8
	$6 = [0]
	
.LABEL $label$1
	if ( (*($1) & [1]) ){ goto $label$17 }
	$7 = [1]
	if ( (*($1 + [16]) & [1]) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	CALL _ZdlPv(*($5 + [8]))
	$7 = [1]
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$15 }
	
.LABEL $label$16
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($1 + [32]) & $7) == 0) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	if ( (*($1 + [32]) & $7) ){ goto $label$13 }
	
.LABEL $label$14
	if ( (*($1 + [48]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL _ZdlPv(*($3 + [8]))
	if ( ((*($1 + [48]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL _ZdlPv(*(($2 + [8])))
	$global$0 = ($1 + [64])
	return $6
	
.LABEL $label$11
	$global$0 = ($1 + [64])
	return $6
}

void .FUNC $9 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_64 $22
	float_64 $23
	float_64 $24
	int_64 $25
	int_32 $26
	int_32 $27
	int_32 $28
	$2 = ($global$0 - [160])
	$global$0 = $2
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $132([17009])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($4, [17009], $3)
	
.LABEL $label$2
	*(($4 + $3)) = [0]
	$6 = *($1 + [4])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$5 }
	$7 = (($2 + [144]) | [1])
	$8 = ($2 | [1])
	$9 = (($2 + [16]) | [1])
	$10 = (($2 + [32]) | [1])
	$11 = (($2 + [48]) | [1])
	$12 = ($0 + [4])
	$13 = (($2 + [48]) + [8])
	
.LOOP $label$6:
	$3 = *($0)
	if ( (( *($12) ? uint_32($3 >> [1]) : ($3 & [1]) ) == 0) ){ goto $label$7 }
	CALL $123($0, [17005])
	
.LABEL $label$7
	$22 = *($5 + [16])
	$23 = *($5)
	$24 = *($5 + [8])
	*($13) = [0]
	*($2 + [48]) = (int_64)0
	CALL $121(($2 + [48]), [20])
	$23 = ((float_64)$23 * (float_64)(float_64)10)
	if ( ((float_64)(float_64)|$23| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$25 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$9
	$25 = (Rounds 0)($23)
	
.LABEL $label$8
	$23 = ((float_64)$24 * (float_64)(float_64)10)
	$3 = (CASTING uint_32)(uint_64 $25)
	
.LOOP $label$10:
	$4 = ((int_32)$3 / (int_32)[10])
	CALL $124(($2 + [48]), *((($3 - ((int_32)$4 * (int_32)[10])) + [17010])))
	$1 = ($3 + [9])
	$3 = $4
	if ( ((uint_32)$1 > (uint_32)[18]) ){ goto $label$10 }
	$3 = ($3 & [1])
	$3 = *($2 + [48])
	$4 = ( *($2 + [52]) ? uint_32($3 >> [1]) : $3 )
	$1 = *($13)
	if ( ((float_64)(float_64)|$23| < (float_64)(float_64)9223372036854775808) ){ goto $label$13 }
	$25 = (int_64)-9223372036854775808
	if ( $4 ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	$25 = (Rounds 0)($23)
	if ( ($4 == 0) ){ goto $label$11 }
	
.LABEL $label$12
	$3 = ( $1 ? $11 : $3 )
	$4 = (($3 + $4) + [-1])
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$11 }
	
.LOOP $label$14:
	$1 = *($3)
	*($3) = *($4)
	*($4) = $1
	$4 = ($4 + [-1])
	$3 = ($3 + [1])
	if ( ($3 <= $4) ){ goto $label$14 }
	
.LABEL $label$11
	$3 = CALL $123(($2 + [48]), [17021])
	$4 = ($3 + [8])
	*(($21 = (($2 + [64]) + [8]))) = *($4)
	*($2 + [64]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	*(($20 = (($2 + [32]) + [8]))) = [0]
	*($2 + [32]) = (int_64)0
	CALL $121(($2 + [32]), [20])
	$3 = (CASTING uint_32)(uint_64 $25)
	
.LOOP $label$15:
	$4 = ((int_32)$3 / (int_32)[10])
	CALL $124(($2 + [32]), *((($3 - ((int_32)$4 * (int_32)[10])) + [17010])))
	$1 = ($3 + [9])
	$3 = $4
	if ( ((uint_32)$1 > (uint_32)[18]) ){ goto $label$15 }
	$26 = *($20)
	$1 = ($3 & [1])
	$3 = *($2 + [32])
	$14 = uint_32($3 >> [1])
	$17 = *($2 + [36])
	$4 = ( $17 ? $14 : $1 )
	if ( ($4 == 0) ){ goto $label$16 }
	$3 = ( $26 ? $10 : $1 )
	$4 = (($3 + $4) + [-1])
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$16 }
	
.LOOP $label$17:
	$1 = *($3)
	*($3) = *($4)
	*($4) = $1
	$4 = ($4 + [-1])
	$3 = ($3 + [1])
	if ( ($3 <= $4) ){ goto $label$17 }
	$3 = *($2 + [32])
	$14 = uint_32($3 >> [1])
	$1 = ($3 & [1])
	$26 = *($20)
	$17 = *($2 + [36])
	
.LABEL $label$16
	$3 = CALL $125(($2 + [64]), ( $26 ? $10 : $1 ), ( $17 ? $14 : $1 ))
	$4 = ($3 + [8])
	*(($19 = (($2 + [80]) + [8]))) = *($4)
	*($2 + [80]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = CALL $123(($2 + [80]), [17021])
	$4 = ($3 + [8])
	*(($18 = (($2 + [96]) + [8]))) = *($4)
	*($2 + [96]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	*(($17 = (($2 + [16]) + [8]))) = [0]
	*($2 + [16]) = (int_64)0
	CALL $121(($2 + [16]), [20])
	$3 = (CASTING uint_32)(uint_64 $22)
	
.LOOP $label$18:
	$4 = ((int_32)$3 / (int_32)[10])
	CALL $124(($2 + [16]), *((($3 - ((int_32)$4 * (int_32)[10])) + [17010])))
	$1 = ($3 + [9])
	$3 = $4
	if ( ((uint_32)$1 > (uint_32)[18]) ){ goto $label$18 }
	$26 = *($17)
	$1 = ($3 & [1])
	$3 = *($2 + [16])
	$27 = uint_32($3 >> [1])
	$14 = *($2 + [20])
	$4 = ( $14 ? $27 : $1 )
	if ( ($4 == 0) ){ goto $label$19 }
	$3 = ( $26 ? $9 : $1 )
	$4 = (($3 + $4) + [-1])
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$19 }
	
.LOOP $label$20:
	$1 = *($3)
	*($3) = *($4)
	*($4) = $1
	$4 = ($4 + [-1])
	$3 = ($3 + [1])
	if ( ($3 <= $4) ){ goto $label$20 }
	$3 = *($2 + [16])
	$27 = uint_32($3 >> [1])
	$1 = ($3 & [1])
	$26 = *($17)
	$14 = *($2 + [20])
	
.LABEL $label$19
	$3 = CALL $125(($2 + [96]), ( $26 ? $9 : $1 ), ( $14 ? $27 : $1 ))
	$4 = ($3 + [8])
	*(($16 = (($2 + [112]) + [8]))) = *($4)
	*($2 + [112]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	$3 = CALL $123(($2 + [112]), [17021])
	$4 = ($3 + [8])
	*(($15 = (($2 + [128]) + [8]))) = *($4)
	*($2 + [128]) = *($3)
	*($3) = (int_64)0
	*($4) = [0]
	*(($14 = ($2 + [8]))) = [0]
	*($2) = (int_64)0
	$3 = *($5 + [24])
	CALL $121($2, [20])
	
.LOOP $label$21:
	$4 = ((int_32)$3 / (int_32)[10])
	CALL $124($2, *((($3 - ((int_32)$4 * (int_32)[10])) + [17010])))
	$1 = ($3 + [9])
	$3 = $4
	if ( ((uint_32)$1 > (uint_32)[18]) ){ goto $label$21 }
	$26 = *($14)
	$1 = ($3 & [1])
	$3 = *($2)
	$28 = uint_32($3 >> [1])
	$27 = *($2 + [4])
	$4 = ( $27 ? $28 : $1 )
	if ( ($4 == 0) ){ goto $label$22 }
	$3 = ( $26 ? $8 : $1 )
	$4 = (($3 + $4) + [-1])
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$22 }
	
.LOOP $label$23:
	$1 = *($3)
	*($3) = *($4)
	*($4) = $1
	$4 = ($4 + [-1])
	$3 = ($3 + [1])
	if ( ($3 <= $4) ){ goto $label$23 }
	$3 = *($2)
	$28 = uint_32($3 >> [1])
	$1 = ($3 & [1])
	$26 = *($14)
	$27 = *($2 + [4])
	
.LABEL $label$22
	$3 = CALL $125(($2 + [128]), ( $26 ? $8 : $1 ), ( $27 ? $28 : $1 ))
	$1 = ($3 + [8])
	*(($4 = (($2 + [144]) + [8]))) = *($1)
	*($2 + [144]) = *($3)
	*($3) = (int_64)0
	*($1) = [0]
	if ( ((*($2) & [1]) == 0) ){ goto $label$40 }
	CALL _ZdlPv(*($14))
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$38 }
	goto $label$39 
	
.LABEL $label$40
	if ( ((*($2 + [128]) & [1]) == 0) ){ goto $label$38 }
	
.LABEL $label$39
	CALL _ZdlPv(*($15))
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$36 }
	goto $label$37 
	
.LABEL $label$38
	if ( ((*($2 + [112]) & [1]) == 0) ){ goto $label$36 }
	
.LABEL $label$37
	CALL _ZdlPv(*($16))
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$34 }
	goto $label$35 
	
.LABEL $label$36
	if ( ((*($2 + [16]) & [1]) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL _ZdlPv(*($17))
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$32 }
	goto $label$33 
	
.LABEL $label$34
	if ( ((*($2 + [96]) & [1]) == 0) ){ goto $label$32 }
	
.LABEL $label$33
	CALL _ZdlPv(*($18))
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$30 }
	goto $label$31 
	
.LABEL $label$32
	if ( ((*($2 + [80]) & [1]) == 0) ){ goto $label$30 }
	
.LABEL $label$31
	CALL _ZdlPv(*($19))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$30
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$28 }
	
.LABEL $label$29
	CALL _ZdlPv(*($20))
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$26 }
	goto $label$27 
	
.LABEL $label$28
	if ( ((*($2 + [64]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*($21))
	if ( (*($2 + [48]) & [1]) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$24 }
	
.LABEL $label$25
	CALL _ZdlPv(*($13))
	
.LABEL $label$24
	$3 = *($2 + [144])
	$1 = ($3 & [1])
	CALL $125($0, ( *($4) ? $7 : $1 ), ( *($2 + [148]) ? uint_32($3 >> [1]) : $1 ))
	if ( ((*($2 + [144]) & [1]) == 0) ){ goto $label$41 }
	CALL _ZdlPv(*($4))
	
.LABEL $label$41
	$5 = ($5 + [32])
	if ( ((int_32)$5 != (int_32)$6) ){ goto $label$6 }
	
.LABEL $label$5
	$global$0 = ($2 + [160])
	return (unreachable)
	
.LABEL $label$1
	CALL $117($0)
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = CALL $118(($2 + [64]), [8272])
	$4 = CALL $118(($2 + [48]), [8284])
	$5 = ($3 + [1])
	$6 = ($1 + [1])
	$7 = [0]
	$9 = ($8 & [1])
	$8 = *($2 + [64])
	$10 = ( *($3 + [4]) ? uint_32($8 >> [1]) : $9 )
	if ( ($10 == 0) ){ goto $label$1 }
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $7 )
	$8 = *($1)
	$7 = ($8 & [1])
	$11 = ( *($1 + [8]) ? $6 : $7 )
	$12 = ($11 + $8)
	if ( ((int_32)$8 < (int_32)$10) ){ goto $label$3 }
	$13 = ( *($3 + [8]) ? $5 : $9 )
	$9 = *($13)
	$7 = $11
	
.LOOP $label$4:
	$8 = (($8 - $10) + [1])
	if ( ($8 == 0) ){ goto $label$3 }
	$8 = CALL $130($7, $9, $8)
	if ( ($8 == 0) ){ goto $label$3 }
	if ( (CALL $131($8, $13, $10) == 0) ){ goto $label$2 }
	$7 = ($8 + [1])
	$8 = ($12 - $7)
	if ( ((int_32)$8 >= (int_32)$10) ){ goto $label$4 }
	
.LABEL $label$3
	$8 = $12
	
.LABEL $label$2
	$7 = ( [-1] ? ($8 - $11) : ((int_32)$8 == (int_32)$12) )
	
.LABEL $label$1
	$8 = *([0] + [8260])
	if ( ($8 & [1]) ){ goto $label$6 }
	$8 = uint_32($8 >> [1])
	goto $label$5 
	
.LABEL $label$6
	$8 = *([0] + [8264])
	
.LABEL $label$5
	$14 = CALL $119(($2 + [32]), $1, $8, ($7 - $8), $1)
	$15 = CALL $129(( *($14 + [8]) ? ($14 + [1]) : (*($2 + [32]) & [1]) ))
	$11 = [0]
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	$7 = *($1)
	$8 = ($7 & [1])
	$12 = *(($1 + [8]))
	$9 = ($10 & [1])
	$10 = *([0] + [8284])
	$10 = ( *([0] + [8288]) ? uint_32($10 >> [1]) : $9 )
	if ( ($10 == 0) ){ goto $label$8 }
	$8 = ( *($1 + [4]) ? uint_32($7 >> [1]) : $8 )
	$16 = ( $12 ? $6 : $8 )
	$12 = ($16 + $8)
	if ( ((int_32)$8 < (int_32)$10) ){ goto $label$10 }
	$13 = ( *([0] + [8292]) ? [8285] : $9 )
	$9 = *($13)
	$7 = $16
	
.LOOP $label$11:
	$8 = (($8 - $10) + [1])
	if ( ($8 == 0) ){ goto $label$10 }
	$8 = CALL $130($7, $9, $8)
	if ( ($8 == 0) ){ goto $label$10 }
	if ( (CALL $131($8, $13, $10) == 0) ){ goto $label$9 }
	$7 = ($8 + [1])
	$8 = ($12 - $7)
	if ( ((int_32)$8 >= (int_32)$10) ){ goto $label$11 }
	
.LABEL $label$10
	$8 = $12
	
.LABEL $label$9
	$13 = ( [-1] ? ($8 - $16) : ((int_32)$8 == (int_32)$12) )
	$7 = *($1)
	$8 = ($7 & [1])
	$12 = *(($1 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$13 = [0]
	
.LABEL $label$7
	$9 = ($10 & [1])
	$10 = *($2 + [64])
	$10 = ( *(($3 + [4])) ? uint_32($10 >> [1]) : $9 )
	if ( ($10 == 0) ){ goto $label$12 }
	$8 = ( *($1 + [4]) ? uint_32($7 >> [1]) : $8 )
	$11 = ( $12 ? $6 : $8 )
	$12 = ($11 + $8)
	if ( ((int_32)$8 < (int_32)$10) ){ goto $label$14 }
	$6 = ( *(($3 + [8])) ? $5 : $9 )
	$9 = *($6)
	$7 = $11
	
.LOOP $label$15:
	$8 = (($8 - $10) + [1])
	if ( ($8 == 0) ){ goto $label$14 }
	$8 = CALL $130($7, $9, $8)
	if ( ($8 == 0) ){ goto $label$14 }
	if ( (CALL $131($8, $6, $10) == 0) ){ goto $label$13 }
	$7 = ($8 + [1])
	$8 = ($12 - $7)
	if ( ((int_32)$8 >= (int_32)$10) ){ goto $label$15 }
	
.LABEL $label$14
	$8 = $12
	
.LABEL $label$13
	$11 = ( [-1] ? ($8 - $11) : ((int_32)$8 == (int_32)$12) )
	
.LABEL $label$12
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$21 }
	$8 = ($11 + [1])
	CALL $119($2, $1, $8, ($13 - $8), $1)
	if ( (*($2 + [16]) & [1]) ){ goto $label$20 }
	*($2 + [16]) = [0]
	goto $label$19 
	
.LABEL $label$21
	$8 = *($2 + [64])
	CALL $119($2, $1, (( *(($3 + [4])) ? uint_32($8 >> [1]) : ($8 & [1]) ) + $11), [-1], $1)
	if ( (*($2 + [16]) & [1]) ){ goto $label$18 }
	*($2 + [16]) = [0]
	goto $label$17 
	
.LABEL $label$20
	*(*(($2 + [24]))) = [0]
	*($2 + [20]) = [0]
	
.LABEL $label$19
	CALL $121(($2 + [16]), [0])
	*((($2 + [16]) + [8])) = *(($2 + [8]))
	*($2 + [16]) = *($2)
	goto $label$16 
	
.LABEL $label$18
	*(*(($2 + [24]))) = [0]
	*($2 + [20]) = [0]
	
.LABEL $label$17
	CALL $121(($2 + [16]), [0])
	*((($2 + [16]) + [8])) = *(($2 + [8]))
	*($2 + [16]) = *($2)
	
.LABEL $label$16
	$1 = ($2 + [24])
	*($0 + [8]) = CALL $129(( *($1) ? (($2 + [16]) | [1]) : (*($2 + [16]) & [1]) ))
	*($0) = $15
	if ( (*($2 + [16]) & [1]) ){ goto $label$28 }
	if ( (*($2 + [32]) & [1]) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	CALL _ZdlPv(*($1))
	if ( ((*($2 + [32]) & [1]) == 0) ){ goto $label$26 }
	
.LABEL $label$27
	CALL _ZdlPv(*(($14 + [8])))
	$1 = [1]
	if ( ((*($2 + [48]) & [1]) == 0) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$26
	$1 = [1]
	if ( (*($2 + [48]) & [1]) ){ goto $label$24 }
	
.LABEL $label$25
	if ( (*($2 + [64]) & $1) ){ goto $label$23 }
	goto $label$22 
	
.LABEL $label$24
	CALL _ZdlPv(*($4 + [8]))
	if ( ((*($2 + [64]) & $1) == 0) ){ goto $label$22 }
	
.LABEL $label$23
	CALL _ZdlPv(*(($3 + [8])))
	$global$0 = ($2 + [80])
	return 
	
.LABEL $label$22
	$global$0 = ($2 + [80])
}

void .FUNC $7 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $132([17009])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$6 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$5 = (($3 + [16]) & [-16])
	$4 = CALL _Znwj($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$5
	CALL memcpy($4, [17009], $3)
	
.LABEL $label$4
	$6 = [0]
	*(($4 + $3)) = [0]
	$4 = *($1)
	$5 = ($4 & [1])
	$7 = ($3 & [1])
	$3 = *([0] + [8284])
	$3 = ( *([0] + [8288]) ? uint_32($3 >> [1]) : $7 )
	if ( ($3 == 0) ){ goto $label$8 }
	$4 = ( *($1 + [4]) ? uint_32($4 >> [1]) : $5 )
	if ( ((int_32)$4 < (int_32)$3) ){ goto $label$1 }
	$8 = ($1 + [4])
	$9 = ( *($1 + [8]) ? ($1 + [1]) : $5 )
	$10 = ($9 + $4)
	$7 = ( *([0] + [8292]) ? [8285] : $7 )
	$6 = *($7)
	$5 = $9
	
.LOOP $label$9:
	$4 = (($4 - $3) + [1])
	if ( ($4 == 0) ){ goto $label$1 }
	$4 = CALL $130($5, $6, $4)
	if ( ($4 == 0) ){ goto $label$1 }
	if ( (CALL $131($4, $7, $3) == 0) ){ goto $label$7 }
	$5 = ($4 + [1])
	$4 = ($10 - $5)
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$9 }
	goto $label$1 
	
.LABEL $label$8
	$8 = ($1 + [4])
	goto $label$2 
	
.LABEL $label$7
	if ( ((int_32)$4 == (int_32)$10) ){ goto $label$1 }
	$6 = ($4 - $9)
	if ( ((int_32)$6 == (int_32)[-1]) ){ goto $label$1 }
	$4 = *($1)
	$5 = ($4 & [1])
	goto $label$2 
	
.LABEL $label$3
	CALL $117($0)
	
.LABEL $label$2
	if ( ((uint_32)(( *($8) ? uint_32($4 >> [1]) : $5 ) + [-1]) <= (uint_32)$6) ){ goto $label$1 }
	CALL $119($2, $1, ($6 + [1]), [-1], $1)
	if ( (*($0) & [1]) ){ goto $label$11 }
	*($0) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($0 + [8])) = [0]
	*($0 + [4]) = [0]
	
.LABEL $label$10
	CALL $121($0, [0])
	*(($0 + [8])) = *(($2 + [8]))
	*($0) = *($2)
	
.LABEL $label$1
	$global$0 = ($2 + [16])
	(unreachable)
}

void .FUNC $4 (int_32 $0)
{
	if ( ((*([0] + [8284]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8292]))
	
.LABEL $label$1
}

int_64 .FUNC $5 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$1 = ($global$0 - [32])
	$global$0 = $1
	$2 = [0]
	$3 = ($0 + [1])
	$4 = *($0)
	$5 = ($4 & [1])
	$6 = *($0 + [8])
	$8 = ($7 & [1])
	$7 = *([0] + [8248])
	$7 = ( *([0] + [8252]) ? uint_32($7 >> [1]) : $8 )
	if ( ($7 == 0) ){ goto $label$2 }
	$9 = (int_64)0
	$4 = ( *($0 + [4]) ? uint_32($4 >> [1]) : $5 )
	if ( ((int_32)$4 < (int_32)$7) ){ goto $label$1 }
	$10 = ( $6 ? $3 : $5 )
	$11 = ($10 + $4)
	$8 = ( *([0] + [8256]) ? [8249] : $8 )
	$6 = *($8)
	$5 = $10
	
.LOOP $label$3:
	$4 = (($4 - $7) + [1])
	if ( ($4 == 0) ){ goto $label$1 }
	$4 = CALL $130($5, $6, $4)
	if ( ($4 == 0) ){ goto $label$1 }
	if ( (CALL $131($4, $8, $7) == 0) ){ goto $label$4 }
	$5 = ($4 + [1])
	$4 = ($11 - $5)
	if ( ((int_32)$4 >= (int_32)$7) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$1 }
	if ( ((int_32)$4 != (int_32)$10) ){ goto $label$1 }
	$4 = *($0)
	$5 = ($4 & [1])
	$6 = *(($0 + [8]))
	
.LABEL $label$2
	$8 = ($7 & [1])
	$7 = *([0] + [8284])
	$7 = ( *([0] + [8288]) ? uint_32($7 >> [1]) : $8 )
	if ( ($7 == 0) ){ goto $label$5 }
	$4 = ( *($0 + [4]) ? uint_32($4 >> [1]) : $5 )
	if ( ((int_32)$4 < (int_32)$7) ){ goto $label$6 }
	$2 = ( $6 ? $3 : $5 )
	$11 = ($2 + $4)
	$8 = ( *([0] + [8292]) ? [8285] : $8 )
	$6 = *($8)
	$5 = $2
	
.LOOP $label$7:
	$4 = (($4 - $7) + [1])
	if ( ($4 == 0) ){ goto $label$6 }
	$4 = CALL $130($5, $6, $4)
	if ( ($4 == 0) ){ goto $label$6 }
	if ( (CALL $131($4, $8, $7) == 0) ){ goto $label$8 }
	$5 = ($4 + [1])
	$4 = ($11 - $5)
	if ( ((int_32)$4 >= (int_32)$7) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	if ( ((int_32)$4 == (int_32)$11) ){ goto $label$6 }
	$2 = ($4 - $2)
	goto $label$5 
	
.LABEL $label$6
	$2 = [-1]
	
.LABEL $label$5
	*($1 + [24]) = [0]
	*($1 + [16]) = (int_64)0
	if ( ((int_32)$2 == (int_32)[-1]) ){ goto $label$14 }
	$7 = *([0] + [8248])
	$7 = ( *([0] + [8252]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	CALL $119($1, $0, $7, ($2 - $7), $0)
	if ( (*($1 + [16]) & [1]) ){ goto $label$13 }
	*($1 + [16]) = [0]
	goto $label$12 
	
.LABEL $label$14
	$7 = *([0] + [8248])
	CALL $119($1, $0, ( *([0] + [8252]) ? uint_32($7 >> [1]) : ($7 & [1]) ), [-1], $0)
	if ( (*($1 + [16]) & [1]) ){ goto $label$11 }
	*($1 + [16]) = [0]
	goto $label$10 
	
.LABEL $label$13
	*(*(($1 + [24]))) = [0]
	*($1 + [20]) = [0]
	
.LABEL $label$12
	CALL $121(($1 + [16]), [0])
	*((($1 + [16]) + [8])) = *(($1 + [8]))
	*($1 + [16]) = *($1)
	goto $label$9 
	
.LABEL $label$11
	*(*(($1 + [24]))) = [0]
	*($1 + [20]) = [0]
	
.LABEL $label$10
	CALL $121(($1 + [16]), [0])
	*((($1 + [16]) + [8])) = *(($1 + [8]))
	*($1 + [16]) = *($1)
	
.LABEL $label$9
	$7 = ($1 + [24])
	$9 = CALL $129(( *($7) ? (($1 + [16]) | [1]) : (*($1 + [16]) & [1]) ))
	if ( ((*($1 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*($7))
	
.LABEL $label$1
	$global$0 = ($1 + [32])
	return $9
}

void .FUNC $2 (int_32 $0)
{
	if ( ((*([0] + [8260]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8268]))
	
.LABEL $label$1
}

void .FUNC $3 (int_32 $0)
{
	if ( ((*([0] + [8272]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8280]))
	
.LABEL $label$1
}

void .FUNC memory ()
{
	CALL $112()
}

void .FUNC $1 (int_32 $0)
{
	if ( ((*([0] + [8248]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*([0] + [8256]))
	
.LABEL $label$1
}

int_32 .FUNC $14 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17252])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17275])
	CALL memcpy($5, $2, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [17275])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	*($5 + [20]) = $1
	*($3 + [24]) = $5
	$6 = *($5)
	*($3 + [16]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [24]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $45(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $15 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([32])
	CALL $44($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $45(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $16 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	float_64 $11
	float_64 $12
	int_32 $13
	int_32 $14
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = (int_64)0
	$4 = ($0 + [48])
	$5 = *(CALL $39($4, (int_64)0, [18294]) + [8])
	if ( (uint_64)((int_64))(((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295) - $5) <= (int_64)82801) ){ goto $label$1 }
	$5 = (int_64)59
	$6 = [18320]
	$7 = (int_64)0
	
.LOOP $label$2:
	$8 = (int_64)0
	if ( ((uint_64)$3 > (uint_64)(int_64)11) ){ goto $label$3 }
	$9 = *($6)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$9 = ($9 + [-91])
	goto $label$4 
	
.LABEL $label$5
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$3
	$6 = ($6 + [1])
	$3 = ((int_64)$3 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$2 }
	CALL $10(($2 + [56]), $7)
	$3 = CALL current_time()
	$6 = [0]
	*(($2 + [48])) = [0]
	*($2 + [32]) = (int_64)-1
	$5 = *($0)
	*($2 + [16]) = $5
	$9 = ((CASTING uint_32)(uint_64 ((uint_64)$3 / (uint_64)(int_64)1000000)) + [-86400])
	$3 = (int_64)
	*($2 + [24]) = $3((CASTING uint_64)(uint_32 $9) - (CASTING uint_64)(uint_32 ((uint_32)$9 % (uint_32)[86400]))))
	*($2 + [40]) = (int_64)0
	$9 = CALL db_lowerbound_i64($5, $3, (int_64)-5069074825895811056, (int_64)0)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$6 }
	$6 = CALL $40(($2 + [16]), $9)
	
.LABEL $label$6
	*(($10 = CALL _Znwj([80])) + [8]) = (int_64)4596373779694328218
	*($10) = (int_64)4600877379321698714
	*($10 + [16]) = (int_64)4591870180066957722
	*($10 + [24]) = (int_64)4589708452245819884
	*($10 + [32]) = (int_64)4587366580439587226
	*($10 + [40]) = (int_64)4584304132692975288
	*($10 + [48]) = (int_64)4581421828931458171
	*($10 + [56]) = (int_64)4579800533065604792
	*($10 + [64]) = (int_64)4576918229304087675
	*($10 + [72]) = (int_64)4572414629676717179
	if ( ($6 == 0) ){ goto $label$7 }
	$11 = (CASTING float_64)(int_64 *($2 + [56]))
	$12 = ((float_64)*($10) * (float_64)$11)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$9 }
	$3 = (int_64)-9223372036854775808
	goto $label$8 
	
.LABEL $label$9
	$3 = (Rounds 0)($12)
	
.LABEL $label$8
	CALL $41($0, *($6 + [8]), $3)
	CALL eosio_assert([1], [18348])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $40(($2 + [16]), $6)
	$12 = ((float_64)*($10 + [8]) * (float_64)$11)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$11 }
	$3 = (int_64)-9223372036854775808
	goto $label$10 
	
.LABEL $label$11
	$3 = (Rounds 0)($12)
	
.LABEL $label$10
	CALL $41($0, *($6 + [8]), $3)
	CALL eosio_assert([1], [18348])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $40(($2 + [16]), $6)
	$12 = ((float_64)*($10 + [16]) * (float_64)$11)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$13 }
	$3 = (int_64)-9223372036854775808
	goto $label$12 
	
.LABEL $label$13
	$3 = (Rounds 0)($12)
	
.LABEL $label$12
	CALL $41($0, *($6 + [8]), $3)
	CALL eosio_assert([1], [18348])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $40(($2 + [16]), $6)
	$12 = ((float_64)*($10 + [24]) * (float_64)$11)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$15 }
	$3 = (int_64)-9223372036854775808
	goto $label$14 
	
.LABEL $label$15
	$3 = (Rounds 0)($12)
	
.LABEL $label$14
	CALL $41($0, *($6 + [8]), $3)
	CALL eosio_assert([1], [18348])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $40(($2 + [16]), $6)
	$12 = ((float_64)*($10 + [32]) * (float_64)$11)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$17 }
	$3 = (int_64)-9223372036854775808
	goto $label$16 
	
.LABEL $label$17
	$3 = (Rounds 0)($12)
	
.LABEL $label$16
	CALL $41($0, *($6 + [8]), $3)
	CALL eosio_assert([1], [18348])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $40(($2 + [16]), $6)
	$12 = ((float_64)*($10 + [40]) * (float_64)$11)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$19 }
	$3 = (int_64)-9223372036854775808
	goto $label$18 
	
.LABEL $label$19
	$3 = (Rounds 0)($12)
	
.LABEL $label$18
	CALL $41($0, *($6 + [8]), $3)
	CALL eosio_assert([1], [18348])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $40(($2 + [16]), $6)
	$12 = ((float_64)*($10 + [48]) * (float_64)$11)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$21 }
	$3 = (int_64)-9223372036854775808
	goto $label$20 
	
.LABEL $label$21
	$3 = (Rounds 0)($12)
	
.LABEL $label$20
	CALL $41($0, *($6 + [8]), $3)
	CALL eosio_assert([1], [18348])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $40(($2 + [16]), $6)
	$12 = ((float_64)*($10 + [56]) * (float_64)$11)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$23 }
	$3 = (int_64)-9223372036854775808
	goto $label$22 
	
.LABEL $label$23
	$3 = (Rounds 0)($12)
	
.LABEL $label$22
	CALL $41($0, *($6 + [8]), $3)
	CALL eosio_assert([1], [18348])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $40(($2 + [16]), $6)
	$12 = ((float_64)*($10 + [64]) * (float_64)$11)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$25 }
	$3 = (int_64)-9223372036854775808
	goto $label$24 
	
.LABEL $label$25
	$3 = (Rounds 0)($12)
	
.LABEL $label$24
	CALL $41($0, *($6 + [8]), $3)
	CALL eosio_assert([1], [18348])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	$6 = CALL $40(($2 + [16]), $6)
	$11 = ((float_64)*($10 + [72]) * (float_64)$11)
	if ( ((float_64)(float_64)|$11| < (float_64)(float_64)9223372036854775808) ){ goto $label$27 }
	$3 = (int_64)-9223372036854775808
	goto $label$26 
	
.LABEL $label$27
	$3 = (Rounds 0)($11)
	
.LABEL $label$26
	CALL $41($0, *($6 + [8]), $3)
	CALL eosio_assert([1], [18348])
	$6 = CALL db_next_i64(*($6 + [36]), ($2 + [72]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$7 }
	CALL $40(($2 + [16]), $6)
	
.LABEL $label$7
	$9 = *(($0 + [76]))
	$13 = *(($0 + [72]))
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$32 }
	
.LOOP $label$34:
	$6 = ($9 + [-24])
	$14 = *($6)
	if ( (int_64)(*($14) == 0) ){ goto $label$33 }
	$9 = $6
	if ( ((int_32)$13 != (int_32)$6) ){ goto $label$34 }
	goto $label$32 
	
.LABEL $label$33
	if ( ((int_32)$13 == (int_32)$9) ){ goto $label$32 }
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$4), [17201])
	goto $label$31 
	
.LABEL $label$32
	$6 = CALL db_find_i64(*(($0 + [48])), *(($0 + [56])), (int_64)4982871462359400448, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$30 }
	$14 = CALL $14($4, $6)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$4), [17201])
	
.LABEL $label$31
	$3 = *($0)
	CALL eosio_assert([1], [17808])
	CALL $42($4, $14, $3, ($2 + [72]))
	if ( ($10 == 0) ){ goto $label$28 }
	goto $label$29 
	
.LABEL $label$30
	CALL $43(($2 + [72]), $4, *($0), ($2 + [8]))
	if ( ($10 == 0) ){ goto $label$28 }
	
.LABEL $label$29
	CALL _ZdlPv($10)
	
.LABEL $label$28
	$10 = *($2 + [40])
	if ( ($10 == 0) ){ goto $label$1 }
	$14 = ($2 + [44])
	$6 = *($14)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$36 }
	
.LOOP $label$37:
	$6 = ($6 + [-24])
	$9 = *($6)
	*($6) = [0]
	if ( ($9 == 0) ){ goto $label$38 }
	CALL _ZdlPv($9)
	
.LABEL $label$38
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$37 }
	$6 = *(($2 + [40]))
	goto $label$35 
	
.LABEL $label$36
	$6 = $10
	
.LABEL $label$35
	*($14) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [17275])
	CALL memcpy(($3 + [8]), $2, [8])
	$6 = *($3 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $139($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $6), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $10 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = (int_64)0
	$4 = (int_64)59
	$5 = [17023]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$3 > (uint_64)(int_64)10) ){ goto $label$6 }
	$7 = *($5)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$7 = ($7 + [-91])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((int_64)$3 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $7) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$4 = ((int_64)$4 + (int_64)4294967291)
	$6 = ((int_64)$8 | (int_64)$6)
	$3 = ((int_64)$3 + (int_64)1)
	if ( ((int_64)$3 != (int_64)13) ){ goto $label$1 }
	*(($2 + [40])) = [0]
	*($2 + [16]) = $1
	*($2 + [8]) = $6
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$5 = CALL $11(($2 + [8]), (uint_64)*([0] + [8192]) >> (uint_64)(int_64)8), [17035]
	*($0) = *($5))
	*(($0 + [8])) = *(($5 + [8]))
	$0 = *($2 + [32])
	if ( ($0 == 0) ){ goto $label$7 }
	$9 = ($2 + [36])
	$5 = *($9)
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$5 = ($5 + [-24])
	$7 = *($5)
	*($5) = [0]
	if ( ($7 == 0) ){ goto $label$11 }
	CALL _ZdlPv($7)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$5) ){ goto $label$10 }
	$5 = *(($2 + [32]))
	goto $label$8 
	
.LABEL $label$9
	$5 = $0
	
.LABEL $label$8
	*($9) = $0
	CALL _ZdlPv($5)
	
.LABEL $label$7
	$global$0 = ($2 + [48])
}

int_32 .FUNC $11 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)(uint_64)*($6 + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [17201])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $12($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [17201])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [17252])
	if ( ($6 <= [513]) ){ goto $label$5 }
	$7 = CALL $135($6)
	goto $label$4 
	
.LABEL $label$5
	$7 = ($2 - (($6 + [15]) & [-16]))
	$global$0 = $7
	
.LABEL $label$4
	$8 = ($0 + [24])
	CALL db_get_i64($1, $7, $6)
	*(($9 = CALL _Znwj([32])) + [8]) = (int_64)1397703940
	*($9) = (int_64)0
	CALL eosio_assert([1], [17132])
	$10 = ($9 + [8])
	$11 = (int_64)5459781
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$12 = (uint_64)$11 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$11 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$11 = $12
	$4 = [1]
	$2 = $5
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$11 = $12
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$11 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8)
	$4 = ((int_32)$5 < (int_32)[6])
	$2 = ($5 + [1])
	$5 = $2
	if ( $4 ){ goto $label$10 }
	$4 = [1]
	$5 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$4 = [0]
	
.LABEL $label$6
	CALL eosio_assert($4, [17181])
	*($9 + [16]) = $0
	CALL eosio_assert(((uint_32)$6 > (uint_32)[7]), [17275])
	CALL memcpy($9, $7, [8])
	CALL eosio_assert(((int_32)($6 & [-8]) != (int_32)[8]), [17275])
	CALL memcpy($10, ($7 + [8]), [8])
	*($9 + [20]) = $1
	*($3 + [24]) = $9
	$11 = (uint_64)*(($9 + [8])) >> (uint_64)(int_64)8
	*($3 + [16]) = $11)
	*($3 + [12]) = $1
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$13 }
	*($5 + [8]) = $11
	*($5 + [16]) = $1
	*($3 + [24]) = [0]
	*($5) = $9
	*($4) = ($5 + [24])
	if ( ((uint_32)$6 >= (uint_32)[513]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $109($8, ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($6 <= [513]) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $139($7)
	
.LABEL $label$11
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$14 }
	CALL _ZdlPv($5)
	
.LABEL $label$14
	$global$0 = ($3 + [32])
	return $9
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [176])
	$global$0 = $3
	CALL memory()
	$4 = (int_64)7
	
.LOOP $label$1:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$2 }
	$4 = (int_64)5
	
.LOOP $label$3:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$3 }
	CALL eosio_assert(((int_64)6138663577826885632 == (int_64)$1), [17059])
	
.LABEL $label$2
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$6 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17123]
	$7 = (int_64)0
	
.LOOP $label$7:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$12 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$8 = ($8 + [-91])
	goto $label$10 
	
.LABEL $label$12
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$11
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$9
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$8
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$7 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$6
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17023]
	$7 = (int_64)0
	
.LOOP $label$13:
	if ( ((uint_64)$4 > (uint_64)(int_64)10) ){ goto $label$18 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$17 }
	$8 = ($8 + [-91])
	goto $label$16 
	
.LABEL $label$18
	$9 = (int_64)0
	if ( ((int_64)$4 == (int_64)11) ){ goto $label$15 }
	goto $label$14 
	
.LABEL $label$17
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$16
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$15
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$14
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)4294967291)
	$7 = ((int_64)$9 | (int_64)$7)
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$13 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$19 }
	$4 = (int_64)0
	$5 = (int_64)59
	$6 = [17123]
	$7 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$4 > (uint_64)(int_64)7) ){ goto $label$25 }
	$8 = *($6)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$8 = ($8 + [-91])
	goto $label$23 
	
.LABEL $label$25
	$9 = (int_64)0
	if ( ((uint_64)$4 <= (uint_64)(int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$8 = ( ($8 + [-48]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$9 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$9 = ((int_64)((int_64)$9 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$21
	$6 = ($6 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$7 = ((int_64)$9 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$20 }
	if ( ((int_64)$7 == (int_64)$2) ){ goto $label$5 }
	
.LABEL $label$19
	$4 = (int_64)7
	
.LOOP $label$26:
	$4 = ((int_64)$4 + (int_64)1)
	if ( ((int_64)$4 != (int_64)13) ){ goto $label$26 }
	if ( ((int_64)-6569208335818555392 != (int_64)$2) ){ goto $label$4 }
	
.LABEL $label$5
	*(($3 + [88])) = (int_64)0
	*(($3 + [96])) = (int_64)-1
	*(($3 + [104])) = (int_64)0
	*(($3 + [112])) = [0]
	*(($3 + [128])) = (int_64)0
	*(($3 + [136])) = (int_64)-1
	*(($3 + [144])) = (int_64)0
	*(($3 + [152])) = [0]
	*($3 + [80]) = $0
	*($3 + [72]) = $0
	*($3 + [120]) = $0
	$6 = ($3 + [120])
	$8 = CALL db_find_i64($0, (int_64)0, (int_64)4982871462359400448, (int_64)0)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$33 }
	CALL eosio_assert(((int_32)*(CALL $14($6, $8) + [16]) == (int_32)$6), [17201])
	if ( ((int_64)$2 > (int_64)4983117879514866847) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	CALL $15(($3 + [160]), $6, $0, ($3 + [168]))
	if ( ((int_64)$2 <= (int_64)4983117879514866847) ){ goto $label$31 }
	
.LABEL $label$32
	if ( ((int_64)$2 == (int_64)4983117879514866848) ){ goto $label$34 }
	if ( ((int_64)$2 != (int_64)8426980779361414800) ){ goto $label$30 }
	*($3 + [44]) = [0]
	*($3 + [40]) = [1]
	*($3 + [32]) = *($3 + [40])
	CALL $17(($3 + [72]), ($3 + [32]))
	goto $label$30 
	
.LABEL $label$34
	*($3 + [60]) = [0]
	*($3 + [56]) = [2]
	*($3 + [16]) = *($3 + [56])
	CALL $19(($3 + [72]), ($3 + [16]))
	$10 = *(($3 + [144]))
	if ( $10 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$31
	if ( ((int_64)$2 == (int_64)-5003315098226151792) ){ goto $label$29 }
	if ( ((int_64)$2 != (int_64)-3617168760277827584) ){ goto $label$30 }
	*($3 + [68]) = [0]
	*($3 + [64]) = [3]
	*($3 + [8]) = *($3 + [64])
	CALL $21(($3 + [72]), ($3 + [8]))
	$10 = *(($3 + [144]))
	if ( $10 ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$30
	$10 = *(($3 + [144]))
	if ( ($10 == 0) ){ goto $label$27 }
	goto $label$28 
	
.LABEL $label$29
	*($3 + [52]) = [0]
	*($3 + [48]) = [4]
	*($3 + [24]) = *($3 + [48])
	CALL $19(($3 + [72]), ($3 + [24]))
	$10 = *(($3 + [144]))
	if ( ($10 == 0) ){ goto $label$27 }
	
.LABEL $label$28
	$11 = ($3 + [148])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$36 }
	
.LOOP $label$37:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$38 }
	CALL _ZdlPv($8)
	
.LABEL $label$38
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$37 }
	$6 = *(($3 + [144]))
	goto $label$35 
	
.LABEL $label$36
	$6 = $10
	
.LABEL $label$35
	*($11) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$27
	$10 = *(($3 + [104]))
	if ( ($10 == 0) ){ goto $label$4 }
	$11 = ($3 + [108])
	$6 = *($11)
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$40 }
	
.LOOP $label$41:
	$6 = ($6 + [-24])
	$8 = *($6)
	*($6) = [0]
	if ( ($8 == 0) ){ goto $label$42 }
	CALL _ZdlPv($8)
	
.LABEL $label$42
	if ( ((int_32)$10 != (int_32)$6) ){ goto $label$41 }
	$6 = *(($3 + [104]))
	goto $label$39 
	
.LABEL $label$40
	$6 = $10
	
.LABEL $label$39
	*($11) = $10
	CALL _ZdlPv($6)
	
.LABEL $label$4
	CALL $127([0])
	$global$0 = ($3 + [176])
}

void .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = (int_64)0
	$3 = *($0)
	CALL eosio_assert([1], [17331])
	CALL memcpy($2, $1, [8])
	CALL eosio_assert([1], [17331])
	$4 = ($1 + [8])
	CALL memcpy(($2 | [8]), $4, [8])
	CALL eosio_assert([1], [17331])
	CALL memcpy(($2 + [16]), ($1 + [16]), [8])
	$5 = *($1)
	*($1 + [28]) = CALL db_store_i64(*($3 + [8]), (int_64)-3020376800539181056, *(*($0 + [8])), $5, $2, [24])
	if ( (uint_64)($5 <= *($3 + [16])) ){ goto $label$1 }
	*(($3 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$5 = *(($3 + [8]))
	$6 = *(*(($0 + [8])))
	$7 = *($1)
	*($2 + [24]) = *($4)
	*($1 + [32]) = CALL db_idx64_store($5, (int_64)-3020376800539181056, $6, $7, ($2 + [24]))
	$global$0 = ($2 + [32])
}

void .FUNC $18 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	float_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$3 = ($global$0 - [320])
	$global$0 = $3
	$4 = ($0 + [8])
	CALL memcpy(($3 + [104]), CALL $31($4, $1, [17582]), [104])
	CALL require_auth(*($3 + [112]))
	$5 = [0]
	if ( ((int_64)*($3 + [168]) != (int_64)1) ){ goto $label$1 }
	if ( ((int_64)*($3 + [184]) != (int_64)0) ){ goto $label$1 }
	$5 = (uint_64)(*($3 + [120]) <= (int_64)6)
	
.LABEL $label$1
	CALL eosio_assert($5, [18241])
	$6 = ((float_64)(CASTING float_64)(int_64 *($3 + [160])) * (float_64)(float_64)0.015)
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$7 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$7 = (Rounds 0)($6)
	
.LABEL $label$2
	$8 = *([0] + [8192])
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17132])
	$9 = (uint_64)$8 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$9 = $10
	$11 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$9 = $10
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $11 ){ goto $label$8 }
	$11 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$11 = [0]
	
.LABEL $label$4
	CALL eosio_assert($11, [17181])
	$9 = (int_64)0
	$10 = (int_64)59
	$5 = [17350]
	$13 = (int_64)0
	
.LOOP $label$9:
	$14 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$10 }
	$11 = *($5)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$11 = ($11 + [-91])
	goto $label$11 
	
.LABEL $label$12
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$14 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$10
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$9 }
	*(($3 + [80])) = [0]
	*($3 + [96]) = $8
	*($3 + [88]) = $7
	*($3 + [72]) = (int_64)0
	$5 = CALL $132([17363])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$14 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$17 }
	*($3 + [72]) = ($5 << [1])
	$11 = (($3 + [72]) | [1])
	if ( $5 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$12 = (($5 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($3 + [72]) = ($12 | [1])
	*($3 + [80]) = $11
	*($3 + [76]) = $5
	
.LABEL $label$16
	CALL memcpy($11, [17363], $5)
	
.LABEL $label$15
	*(($11 + $5)) = [0]
	*((($3 + [24]) + [8])) = *((($3 + [88]) + [8]))
	*($3 + [24]) = *($3 + [88])
	CALL $28($0, $13, ($3 + [24]), ($3 + [72]))
	if ( ((*($3 + [72]) & [1]) == 0) ){ goto $label$18 }
	CALL _ZdlPv(*($3 + [80]))
	
.LABEL $label$18
	*($3 + [200]) = $2
	$9 = *($3 + [120])
	*($3 + [120]) = ((int_64)$9 + (int_64)(CASTING uint_64)(uint_32 (uint_64)($9 <= (int_64)6)))
	$6 = ((float_64)*((((CASTING uint_32)(uint_64 $9) << [5]) + [17600])) * (float_64)*($3 + [152]))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$20 }
	$9 = (int_64)-9223372036854775808
	goto $label$19 
	
.LABEL $label$20
	$9 = (Rounds 0)($6)
	
.LABEL $label$19
	*($3 + [136]) = $9
	CALL $32($0, ($3 + [104]))
	$5 = *($3 + [120])
	$12 = CALL tapos_block_num()
	$15 = CALL tapos_block_prefix()
	$11 = ($5 << [5])
	$5 = *(($11 + [17584]))
	if ( ((int_64)*([0]) != (int_64)0) ){ goto $label$21 }
	*([0]) = ((int_64)(uint_64)((int_64)CALL current_time() + (int_64)(CASTING int_64)(int_32 ((int_32)$15 * (int_32)$12))) >> (uint_64)(int_64)15) & (int_64)562949953421310)
	
.LABEL $label$21
	CALL sha256([0], [8], ($3 + [208]))
	$9 = ((int_64)((int_64)*($3 + [209]) << (int_64)32) | (int_64)*($3 + [208]))
	*([0]) = $9
	if ( ((int_32)$5 <= (int_32)(CASTING uint_32)(uint_64 ((uint_64)$9 % (uint_64)(int_64)10000))) ){ goto $label$25 }
	$5 = (uint_64)(*(($3 + [120])) <= (int_64)6)
	$6 = *(($11 + [17592]))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$28 }
	$7 = (int_64)-9223372036854775808
	if ( ($5 == 0) ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$7 = (Rounds 0)($6)
	if ( $5 ){ goto $label$26 }
	
.LABEL $label$27
	$6 = *(($3 + [152]))
	$9 = (int_64)0
	$10 = (int_64)59
	$5 = [17337]
	$13 = (int_64)0
	
.LOOP $label$29:
	$14 = (int_64)0
	if ( ((uint_64)$9 > (uint_64)(int_64)11) ){ goto $label$30 }
	$11 = *($5)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$32 }
	$11 = ($11 + [-91])
	goto $label$31 
	
.LABEL $label$32
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$31
	$14 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$30
	$5 = ($5 + [1])
	$9 = ((int_64)$9 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$29 }
	CALL $10(($3 + [208]), $13)
	if ( ((float_64)((float_64)$6 * (float_64)(CASTING float_64)(int_64 $7)) > (float_64)(CASTING float_64)(int_64 *($3 + [208]))) ){ goto $label$25 }
	
.LABEL $label$26
	CALL memcpy(($3 + [208]), CALL $31($4, $1, [17582]), [104])
	$6 = ((float_64)*(((*($3 + [224]) << [5]) + [17600])) * (float_64)*($3 + [256]))
	if ( ((float_64)(float_64)|$6| < (float_64)(float_64)9223372036854775808) ){ goto $label$24 }
	$9 = (int_64)-9223372036854775808
	goto $label$23 
	
.LABEL $label$25
	CALL memcpy(($3 + [208]), CALL $31($4, $1, [17582]), [104])
	*($3 + [264]) = (int_64)0
	*($3 + [272]) = (int_64)0
	CALL $32($0, ($3 + [208]))
	CALL $33($0, *($3 + [216]), *($3 + [224]), *($3 + [256]))
	CALL memcpy(($3 + [208]), CALL $31($4, $1, [17582]), [104])
	*($3 + [288]) = (int_64)1
	CALL $32($0, ($3 + [208]))
	CALL $34($0, $1, $2)
	CALL $35($0, ($3 + [208]))
	goto $label$22 
	
.LABEL $label$24
	$9 = (Rounds 0)($6)
	
.LABEL $label$23
	*($3 + [264]) = $9
	CALL $32($0, ($3 + [208]))
	if ( ((int_64)*($3 + [224]) != (int_64)6) ){ goto $label$33 }
	CALL $36($0, ($3 + [208]))
	
.LABEL $label$33
	if ( ((int_64)*(($3 + [120])) != (int_64)6) ){ goto $label$22 }
	CALL memcpy(($3 + [104]), CALL $31($4, $1, [17582]), [104])
	$14 = *([0] + [8192])
	$13 = *(($3 + [160]))
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17132])
	$9 = (uint_64)$14 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$35 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$37 }
	$9 = $10
	$11 = [1]
	$12 = $5
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$37
	$9 = $10
	
.LOOP $label$38:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$35 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$5 < (int_32)[6])
	$12 = ($5 + [1])
	$5 = $12
	if ( $11 ){ goto $label$38 }
	$11 = [1]
	$5 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$36 }
	goto $label$34 
	
.LABEL $label$35
	$11 = [0]
	
.LABEL $label$34
	CALL eosio_assert($11, [17181])
	*((($3 + [40]) + [8])) = [0]
	*($3 + [56]) = $13
	*($3 + [64]) = $14
	*($3 + [40]) = (int_64)0
	$9 = *((($3 + [104]) + [8]))
	$5 = CALL $132([18258])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$41 }
	*($3 + [40]) = ($5 << [1])
	$11 = (($3 + [40]) | [1])
	if ( $5 ){ goto $label$40 }
	goto $label$39 
	
.LABEL $label$41
	$12 = (($5 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($3 + [40]) = ($12 | [1])
	*($3 + [48]) = $11
	*($3 + [44]) = $5
	
.LABEL $label$40
	CALL memcpy($11, [18258], $5)
	
.LABEL $label$39
	*(($11 + $5)) = [0]
	*((($3 + [8]) + [8])) = *((($3 + [56]) + [8]))
	*($3 + [8]) = *($3 + [56])
	CALL $28($0, $9, ($3 + [8]), ($3 + [40]))
	if ( ((*($3 + [40]) & [1]) == 0) ){ goto $label$42 }
	CALL _ZdlPv(*($3 + [48]))
	
.LABEL $label$42
	*($3 + [176]) = (int_64)1
	CALL $32($0, ($3 + [104]))
	CALL memcpy(($3 + [208]), CALL $31($4, $1, [17582]), [104])
	*($3 + [288]) = (int_64)1
	CALL $32($0, ($3 + [208]))
	CALL $34($0, $1, $2)
	CALL $35($0, ($3 + [208]))
	
.LABEL $label$22
	CALL $37($0, $1, $2)
	CALL $38($0, *(($3 + [112])), $2, $1)
	$global$0 = ($3 + [320])
	return (unreachable)
	
.LABEL $label$14
	CALL $117(($3 + [72]))
	
.LABEL $label$13
	CALL $117(($3 + [40]))
	(unreachable)
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$2 = CALL $135($1)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($1 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $1)
	
.LABEL $label$1
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [17275])
	CALL memcpy($3, $2, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [17275])
	$6 = ($3 + [8])
	CALL memcpy($6, ($2 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL $139($2)
	
.LABEL $label$5
	$1 = ($0 + int_32($4 >> [1]))
	$7 = *($6)
	$8 = *($3)
	if ( (($4 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $8), (int_64 $7), (int_64 $5))
	$global$0 = ($3 + [16])
	return [1]
}

void .FUNC $58 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [192])
	$global$0 = $2
	$3 = *(*(*($0 + [4])) + [4])
	*($1) = *($3)
	*($1 + [8]) = *($3 + [8])
	*($1 + [16]) = *($3 + [16])
	*($1 + [24]) = *($3 + [24])
	*($1 + [32]) = *($3 + [32])
	*($1 + [40]) = *($3 + [40])
	*($1 + [48]) = *($3 + [48])
	$4 = *($0)
	*($1 + [56]) = *($3 + [56])
	*($1 + [64]) = *($3 + [64])
	*($1 + [72]) = *($3 + [72])
	*($1 + [80]) = *($3 + [80])
	*($1 + [88]) = *($3 + [88])
	*($1 + [96]) = *($3 + [96])
	*($2 + [120]) = ($2 + [104])
	*($2 + [116]) = $2
	*($2 + [112]) = $2
	*($2 + [128]) = ($2 + [112])
	*($2 + [140]) = ($1 + [8])
	*($2 + [136]) = $1
	*($2 + [144]) = ($1 + [16])
	*($2 + [148]) = ($1 + [24])
	*($2 + [152]) = ($1 + [32])
	*($2 + [156]) = ($1 + [40])
	*($2 + [160]) = ($1 + [48])
	*($2 + [164]) = ($1 + [56])
	*($2 + [168]) = ($1 + [64])
	*($2 + [172]) = ($1 + [72])
	*($2 + [176]) = ($1 + [80])
	*($2 + [180]) = ($1 + [88])
	*($2 + [184]) = ($1 + [96])
	CALL $60(($2 + [136]), ($2 + [128]))
	$5 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($4 + [8]), (int_64)-3020378119791651280, *(*($0 + [8])), $5, $2, [104])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [192])
}

int_32 .FUNC $59 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ($global$0 - [16])
	$global$0 = $1
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$2 = CALL db_previous_i64(*($2 + [20]), ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17534])
	goto $label$1 
	
.LABEL $label$2
	$2 = *($0)
	$2 = CALL db_end_i64(*($2), *($2 + [8]), (int_64)4982871462359400448)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17480])
	$2 = CALL db_previous_i64($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($2 >> [31]) ^ (int_32)[1]), [17480])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $14(*($0), $2)
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $96(*($1), ($0 + [32]))
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = $1
	CALL $55(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $45(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $52 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([120])) + [104]) = $1
	CALL $56(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [108])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $57(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $53 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([120])) + [104]) = $1
	CALL $58(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [108])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $57(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([72])
	CALL $102($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [60])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $103(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $34 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	float_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	float_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$3 = ($global$0 - [64])
	$global$0 = $3
	$4 = CALL $31(($0 + [8]), $1, [17582])
	$5 = *($4 + [48])
	$6 = *($4 + [40])
	$7 = *($4 + [8])
	$8 = *($4 + [16])
	$9 = *($4 + [56])
	$1 = *($4 + [24])
	*($3 + [56]) = [0]
	*($3 + [48]) = (int_64)0
	*($3 + [24]) = (int_64)0
	$10 = (CASTING float_64)(int_64 $1)
	*($3 + [16]) = $10
	*($3 + [32]) = $9
	*($3 + [40]) = (int_64)1
	CALL $47(($3 + [48]), ($3 + [16]))
	if ( (uint_64)($8 <= (int_64)2) ){ goto $label$1 }
	$11 = [17632]
	$12 = (($3 + [16]) + [16])
	$13 = (($3 + [16]) + [24])
	$1 = (int_64)1
	
.LOOP $label$2:
	*(($14 = (($3 + [16]) + [8]))) = ((float_64)$5 * (float_64)*($11))
	*($12) = $9
	$1 = ((int_64)$1 + (int_64)1)
	*($13) = $1
	*($3 + [16]) = $10
	$4 = *($3 + [52])
	if ( ((int_32)$4 == (int_32)*((($3 + [48]) + [8]))) ){ goto $label$3 }
	*($4) = *($3 + [16])
	*(($4 + [24])) = *($13)
	*(($4 + [16])) = *($12)
	*(($4 + [8])) = *($14)
	*($3 + [52]) = ($4 + [32])
	$11 = ($11 + [32])
	if ( ((int_64)$8 != (int_64)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $47(($3 + [48]), ($3 + [16]))
	$11 = ($11 + [32])
	if ( ((int_64)$8 != (int_64)$1) ){ goto $label$2 }
	
.LABEL $label$1
	*($3 + [8]) = [0]
	*($3) = (int_64)0
	$4 = (*($3 + [52]) - *($3 + [48]))
	if ( ($4 == 0) ){ goto $label$5 }
	$11 = int_32($4 >> [5])
	if ( ((uint_32)$11 >= (uint_32)[134217728]) ){ goto $label$4 }
	$4 = CALL _Znwj($4)
	*(($3 + [8])) = ($4 + ($11 << [5]))
	*($3) = $4
	*($3 + [4]) = $4
	$12 = *($3 + [48])
	$11 = (*($3 + [52]) - $12)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($4, $12, $11)
	*($3 + [4]) = (*($3 + [4]) + $11)
	
.LABEL $label$5
	CALL $48($0, $2, $7, $3, (int_64)0, $6)
	$4 = *($3)
	if ( ($4 == 0) ){ goto $label$6 }
	*($3 + [4]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$6
	$4 = *($3 + [48])
	if ( ($4 == 0) ){ goto $label$7 }
	*($3 + [52]) = $4
	CALL _ZdlPv($4)
	
.LABEL $label$7
	$global$0 = ($3 + [64])
	return (unreachable)
	
.LABEL $label$4
	CALL $126($3)
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [192])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = (int_64))((int_64)9999999999 - *(*(*($3) + [4])))
	*($1 + [8]) = *(*($3 + [4]))
	*($1 + [16]) = *(*($3 + [8]))
	*($1 + [24]) = *(*($3 + [12]))
	*($1 + [32]) = (int_64)0
	*($1 + [40]) = *(*($3 + [16]))
	$4 = *($0)
	*($1 + [48]) = *(*($3 + [20]))
	*($1 + [56]) = *(*($3 + [24]))
	*($1 + [64]) = *(*($3 + [28]))
	*($1 + [72]) = *(*($3 + [32]))
	*($1 + [80]) = *(*($3 + [36]))
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [96]) = *(*($3 + [40]))
	*($2 + [120]) = ($2 + [104])
	*($2 + [116]) = $2
	*($2 + [112]) = $2
	*($2 + [128]) = ($2 + [112])
	*($2 + [140]) = ($1 + [8])
	*($2 + [136]) = $1
	*($2 + [144]) = ($1 + [16])
	*($2 + [148]) = ($1 + [24])
	*($2 + [152]) = ($1 + [32])
	*($2 + [156]) = ($1 + [40])
	*($2 + [160]) = ($1 + [48])
	*($2 + [164]) = ($1 + [56])
	*($2 + [168]) = ($1 + [64])
	*($2 + [172]) = ($1 + [72])
	*($2 + [176]) = ($1 + [80])
	*($2 + [180]) = ($1 + [88])
	*($2 + [184]) = ($1 + [96])
	CALL $60(($2 + [136]), ($2 + [128]))
	$5 = *($1)
	*($1 + [108]) = CALL db_store_i64(*($4 + [8]), (int_64)-3020378119791651280, *(*($0 + [8])), $5, $2, [104])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [192])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $126($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _ZdaPv (int_32 $0)
{
	CALL _ZdlPv($0)
}

void .FUNC $117 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC _Znaj (int_32 $0)
{
	return CALL _Znwj($0)
}

void .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [144])
	$global$0 = $2
	*((($2 + [104]) + [32])) = [0]
	*($2 + [112]) = (int_64)2
	*($2 + [120]) = (int_64)-1
	*($2 + [128]) = (int_64)0
	$3 = *($0)
	*($2 + [104]) = $3
	*($2 + [56]) = ($2 + [104])
	CALL $92(($2 + [96]), ($2 + [104]), $3, ($2 + [56]))
	*((($2 + [56]) + [32])) = [0]
	*($2 + [64]) = (int_64)0
	*($2 + [72]) = (int_64)-1
	*($2 + [80]) = (int_64)0
	$3 = *($0)
	*($2 + [56]) = $3
	*($2 + [12]) = $1
	*($2 + [8]) = ($2 + [96])
	CALL $93(($2 + [48]), ($2 + [56]), $3, ($2 + [8]))
	*((($2 + [8]) + [32])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$3 = *($0)
	*($2 + [8]) = $3
	*($2 + [16]) = *($1 + [8])
	*($2 + [52]) = $1
	*($2 + [48]) = ($2 + [96])
	CALL $94($2, ($2 + [8]), $3, ($2 + [48]))
	$4 = *($2 + [32])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [36])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$5 }
	CALL _ZdlPv($0)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$4 }
	$1 = *(($2 + [32]))
	goto $label$2 
	
.LABEL $label$3
	$1 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$1
	$4 = *($2 + [80])
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = ($2 + [84])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$10 }
	CALL _ZdlPv($0)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$9 }
	$1 = *(($2 + [80]))
	goto $label$7 
	
.LABEL $label$8
	$1 = $4
	
.LABEL $label$7
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$6
	$4 = *($2 + [128])
	if ( ($4 == 0) ){ goto $label$11 }
	$5 = ($2 + [132])
	$1 = *($5)
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$13 }
	
.LOOP $label$14:
	$1 = ($1 + [-24])
	$0 = *($1)
	*($1) = [0]
	if ( ($0 == 0) ){ goto $label$15 }
	CALL _ZdlPv($0)
	
.LABEL $label$15
	if ( ((int_32)$4 != (int_32)$1) ){ goto $label$14 }
	$1 = *(($2 + [128]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $4
	
.LABEL $label$12
	*($5) = $4
	CALL _ZdlPv($1)
	
.LABEL $label$11
	$global$0 = ($2 + [144])
}

void .FUNC $112 ()
{
	int_32 $0
	int_64 $1
	int_64 $2
	int_32 $3
	int_32 $4
	$0 = [0]
	*([0] + [8200]) = (int_64)10000
	*([0] + [8192]) = (int_64)1397703940
	*([0] + [8208]) = (int_64)1397703940
	CALL eosio_assert([1], [17132])
	$1 = (uint_64)*([0] + [8208]) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$1 = $2
	$3 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$1 = $2
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$5 }
	$3 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [17181])
	*([0] + [8216]) = (int_64)150000000
	*([0] + [8224]) = *([0] + [8192])
	CALL eosio_assert([1], [17132])
	$1 = (uint_64)*([0] + [8224]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$9 }
	$1 = $2
	$3 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	$1 = $2
	
.LOOP $label$10:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$10 }
	$3 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [17181])
	*([0] + [8232]) = (int_64)100000000
	*([0] + [8240]) = *([0] + [8192])
	CALL eosio_assert([1], [17132])
	$1 = (uint_64)*([0] + [8240]) >> (uint_64)(int_64)8)
	$0 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$2 = (uint_64)$1 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$1 & (int_64)65280) == (int_64)0) ){ goto $label$14 }
	$1 = $2
	$3 = [1]
	$4 = $0
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$14
	$1 = $2
	
.LOOP $label$15:
	if ( ((int_64)((int_64)$1 & (int_64)65280) != (int_64)0) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8)
	$3 = ((int_32)$0 < (int_32)[6])
	$4 = ($0 + [1])
	$0 = $4
	if ( $3 ){ goto $label$15 }
	$3 = [1]
	$0 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [17181])
	*([0] + [8248 align=4]) = (int_64)0
	*([0] + [8256]) = [0]
	$0 = CALL $132([16980])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$19 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$22 }
	*([0] + [8248]) = ($0 << [1])
	$3 = [8249]
	if ( $0 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$4 = (($0 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*([0] + [8248]) = ($4 | [1])
	*([0] + [8256]) = $3
	*([0] + [8252]) = $0
	
.LABEL $label$21
	CALL memcpy($3, [16980], $0)
	
.LABEL $label$20
	*(($3 + $0)) = [0]
	CALL $128([5], [0], [8192])
	*([0] + [8260 align=4]) = (int_64)0
	*([0] + [8268]) = [0]
	$0 = CALL $132([16993])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$18 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$25 }
	*([0] + [8260]) = ($0 << [1])
	$3 = [8261]
	if ( $0 ){ goto $label$24 }
	goto $label$23 
	
.LABEL $label$25
	$4 = (($0 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*([0] + [8260]) = ($4 | [1])
	*([0] + [8268]) = $3
	*([0] + [8264]) = $0
	
.LABEL $label$24
	CALL memcpy($3, [16993], $0)
	
.LABEL $label$23
	*(($3 + $0)) = [0]
	CALL $128([6], [0], [8192])
	*([0] + [8272 align=4]) = (int_64)0
	*([0] + [8280]) = [0]
	$0 = CALL $132([17005])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$17 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$28 }
	*([0] + [8272]) = ($0 << [1])
	$3 = [8273]
	if ( $0 ){ goto $label$27 }
	goto $label$26 
	
.LABEL $label$28
	$4 = (($0 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*([0] + [8272]) = ($4 | [1])
	*([0] + [8280]) = $3
	*([0] + [8276]) = $0
	
.LABEL $label$27
	CALL memcpy($3, [17005], $0)
	
.LABEL $label$26
	*(($3 + $0)) = [0]
	CALL $128([7], [0], [8192])
	*([0] + [8284 align=4]) = (int_64)0
	*([0] + [8292]) = [0]
	$0 = CALL $132([17007])
	if ( ((uint_32)$0 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$0 >= (uint_32)[11]) ){ goto $label$31 }
	*([0] + [8284]) = ($0 << [1])
	$3 = [8285]
	if ( $0 ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	$4 = (($0 + [16]) & [-16])
	$3 = CALL _Znwj($4)
	*([0] + [8284]) = ($4 | [1])
	*([0] + [8292]) = $3
	*([0] + [8288]) = $0
	
.LABEL $label$30
	CALL memcpy($3, [17007], $0)
	
.LABEL $label$29
	*(($3 + $0)) = [0]
	CALL $128([8], [0], [8192])
	return (unreachable)
	
.LABEL $label$19
	CALL $117([8248])
	
.LABEL $label$18
	CALL $117([8260])
	
.LABEL $label$17
	CALL $117([8272])
	
.LABEL $label$16
	CALL $117([8284])
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC _Znwj (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $135($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8296])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $135($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $110 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $111($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL _Znwj($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $121($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $121($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $117($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL _ZdlPv($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $111 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = *($0 + [4])
	$3 = [0]
	$4 = (int_64)0
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($2 <= *($5)), [18378])
	$2 = *($6)
	$7 = *($2)
	$2 = ($2 + [1])
	*($6) = $2
	$3 = ($3 & [255])
	$4 = ((int_64)$4 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $3)))
	$3 = ($3 + [7])
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $4)
	$7 = *($1)
	$3 = *($1 + [4])
	$5 = ($3 - $7)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$3 }
	CALL $49($1, ($6 - $5))
	$2 = *(($0 + [4]))
	$3 = *(($1 + [4]))
	$7 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$2 }
	$3 = ($7 + $6)
	*(($1 + [4])) = $3
	
.LABEL $label$2
	$2 = ($3 - $7)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $2) >= (uint_32)$2), [17275])
	$3 = ($0 + [4])
	CALL memcpy($7, *($3), $2)
	*($3) = (*($3) + $2)
	return $0
}

void .FUNC $139 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$1 = *([0] + [16968])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = [16776]
	$3 = (((int_32)$1 * (int_32)[12]) + [16776])
	
.LOOP $label$3:
	$1 = *(($2 + [4]))
	if ( ($1 == 0) ){ goto $label$2 }
	if ( ((uint_32)($1 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($1 + *($2)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$2 = ($2 + [12])
	if ( ($2 <= $3) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($2 = ($0 + [-4]))) = (*($2) & [2147483647])
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL _Znwj($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $119 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL _Znwj($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = ($global$0 - [32])
	$global$0 = $5
	*($0 + [8]) = $3
	*($0) = $2
	*($0 + [16 align=4]) = (int_64)0
	*(($6 = ($0 + [24]))) = [0]
	$7 = CALL _Znwj([16])
	*($0 + [16]) = $7
	*(($8 = ($0 + [20]))) = $7
	$9 = ($7 + [16])
	*($6) = $9
	$2 = *(($1 + [8]))
	$3 = *($1)
	*($8) = $9
	*(($7 + [8])) = $2
	*($7) = $3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$7 = *($4 + [32])
	$1 = ( *(($4 + [36])) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$7 = ($1 + [32])
	$2 = (CASTING uint_64)(uint_32 $1)
	$1 = ($0 + [28])
	
.LOOP $label$1:
	$7 = ($7 + [1])
	$2 = (uint_64)$2 >> (uint_64)(int_64)7
	if ( ((int_64)$2) != (int_64)0) ){ goto $label$1 }
	if ( ($7 == 0) ){ goto $label$3 }
	CALL $49($1, $7)
	$1 = *(($0 + [32]))
	$7 = *(($0 + [28]))
	goto $label$2 
	
.LABEL $label$3
	$1 = [0]
	$7 = [0]
	
.LABEL $label$2
	*($5 + [4]) = $7
	*($5) = $7
	*($5 + [8]) = $1
	*($5 + [16]) = $5
	*($5 + [24]) = $4
	CALL $50(($5 + [24]), ($5 + [16]))
	$global$0 = ($5 + [32])
	return $0
}

void .FUNC $28 (int_32 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_64 $11
	$4 = ($global$0 - [128])
	$global$0 = $4
	if ( ((int_64)*($2) < (int_64)1) ){ goto $label$1 }
	$5 = *($0)
	$6 = (int_64)6
	
.LOOP $label$2:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$2 }
	*($4 + [64]) = (int_64)3617214756542218240
	*($4 + [56]) = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [17023]
	$8 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$8 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [-91])
	goto $label$6 
	
.LABEL $label$8
	$5 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$4
	$0 = ($0 + [1])
	$7 = ((int_64)$7 + (int_64)4294967291)
	$8 = ((int_64)$5 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$3 }
	$6 = (int_64)0
	$7 = (int_64)59
	$0 = [17123]
	$10 = (int_64)0
	
.LOOP $label$9:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$14 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$9 = ($9 + [-91])
	goto $label$12 
	
.LABEL $label$14
	$5 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$13
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$5 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	$5 = ((int_64)((int_64)$5 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$10 = ((int_64)$5 | (int_64)$10)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$9 }
	$6 = (int_64)0
	$5 = (int_64)59
	$0 = [17337]
	$11 = (int_64)0
	
.LOOP $label$15:
	$7 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$16 }
	$9 = *($0)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$9 = ($9 + [-91])
	goto $label$17 
	
.LABEL $label$18
	$9 = ( ($9 + [-48]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$7 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $9) & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$16
	$0 = ($0 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$11 = ((int_64)$7 | (int_64)$11)
	$5 = ((int_64)$5 + (int_64)4294967291)
	if ( ((int_64)$5 != (int_64)55834574842) ){ goto $label$15 }
	*(($4 + [32])) = *(($2 + [8]))
	*($4 + [16]) = $1
	*($4 + [8]) = $11
	*($4 + [24]) = *($2)
	CALL $118(($4 + [40]), $3)
	$0 = CALL $29(($4 + [72]), ($4 + [56]), $8, $10, ($4 + [8]))
	CALL $30(($4 + [112]), $0)
	$9 = *($4 + [112])
	CALL send_inline($9, (*($4 + [116]) - $9))
	$9 = *($4 + [112])
	if ( ($9 == 0) ){ goto $label$19 }
	*($4 + [116]) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$19
	$9 = *($0 + [28])
	if ( ($9 == 0) ){ goto $label$20 }
	*(($0 + [32])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$20
	$9 = *($0 + [16])
	if ( ($9 == 0) ){ goto $label$21 }
	*(($0 + [20])) = $9
	CALL _ZdlPv($9)
	
.LABEL $label$21
	if ( ((*($4 + [40]) & [1]) == 0) ){ goto $label$1 }
	CALL _ZdlPv(*(($4 + [48])))
	
.LABEL $label$1
	$global$0 = ($4 + [128])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)4982871462359400448, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $14($5, $7)
	*($3 + [12]) = [0]
	*($3 + [8]) = $5
	$6 = *(*(CALL $59(($3 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [17428])
	*($1) = *(($5 + [16]))
	$2 = $2
	$5 = ($2 + [-16])
	$global$0 = $5
	CALL eosio_assert([1], [17331])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [17331])
	CALL memcpy(($2 + [-8]), ($1 + [8]), [8])
	$6 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)4982871462359400448, *(*($0 + [8])), $6, $5, [16])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $107 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [17843])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [17889])
	*($4 + [24]) = *($1 + [8])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [17940])
	CALL eosio_assert([1], [17331])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [17331])
	$3 = ($1 + [8])
	CALL memcpy(($4 | [8]), $3, [8])
	CALL eosio_assert([1], [17331])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [40]) = *($3)
	if ( (CALL $131(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [32])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020376800539181056, ($4 + [32]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [40]))
	
.LABEL $label$2
	$global$0 = ($4 + [48])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$8 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17331])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $8 ){ goto $label$1 }
	$7 = *($1)
	$6 = (*(($1 + [4])) - $7)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) >= (int_32)$6), [17331])
	$4 = ($0 + [4])
	CALL memcpy(*($4), $7, $6)
	*($4) = (*($4) + $6)
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = $2) + [60]) = $0
	*($3 + [48]) = *($1)
	$1 = [0]
	$4 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$4 = CALL $135($5)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$2
	CALL read_action_data($4, $5)
	
.LABEL $label$1
	*(($3 + [24])) = (int_64)1397703940
	*($3 + [8]) = (int_64)0
	*($3) = (int_64)0
	*($3 + [16]) = (int_64)0
	CALL eosio_assert([1], [17132])
	$6 = (int_64)5459781
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$7 }
	$6 = $7
	$2 = [1]
	$0 = $1
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$7
	$6 = $7
	
.LOOP $label$8:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$5 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$2 = ((int_32)$1 < (int_32)[6])
	$0 = ($1 + [1])
	$1 = $0
	if ( $2 ){ goto $label$8 }
	$2 = [1]
	$1 = ($0 + [1])
	if ( ((int_32)$0 < (int_32)[6]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	CALL eosio_assert($2, [17181])
	*(($3 + [40])) = [0]
	*($3 + [32]) = (int_64)0
	*($3 + [68]) = $4
	*($3 + [64]) = $4
	*($3 + [72]) = ($4 + $5)
	*($3 + [80]) = ($3 + [64])
	*($3 + [88]) = $3
	CALL $23(($3 + [88]), ($3 + [80]))
	if ( ($5 <= [513]) ){ goto $label$9 }
	CALL $139($4)
	
.LABEL $label$9
	*($3 + [68]) = ($3 + [48])
	*($3 + [64]) = ($3 + [60])
	CALL $24(($3 + [64]), $3)
	if ( ((*($3 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*(($3 + [40])))
	
.LABEL $label$10
	$global$0 = ($3 + [96])
	return [1]
}

void .FUNC $20 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	float_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$5 = ($global$0 - [208])
	$global$0 = $5
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [17337]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$11 = ($11 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$1 }
	if ( ((int_64)$9 != (int_64)$2) ){ goto $label$7 }
	$8 = CALL $8($4)
	CALL $7(($5 + [176]), $4)
	$11 = *($5 + [176])
	$6 = (CASTING uint_64)(uint_32 ((int_32)( *($5 + [180]) ? uint_32($11 >> [1]) : ($11 & [1]) ) != (int_32)[0]))
	if ( ((int_32)$8 == (int_32)[1]) ){ goto $label$9 }
	if ( ((int_32)$8 != (int_32)[2]) ){ goto $label$8 }
	CALL $6(($5 + [40]), $4)
	$10 = *($3)
	$7 = *($5 + [48])
	CALL $25($0, $1, *($5 + [40]), $7, ((int_64)$10 / (int_64)$7), ((float_64)((float_64)(CASTING float_64)(int_64 $10) / (float_64)(CASTING float_64)(int_64 $7)) / (float_64)(CASTING float_64)(int_64 *([0] + [8200]))), $6)
	goto $label$8 
	
.LABEL $label$9
	$7 = *($3)
	CALL $26($0, $1, CALL $5($4), $7, ((float_64)(CASTING float_64)(int_64 $7) / (float_64)(CASTING float_64)(int_64 *([0] + [8200]))), $6)
	
.LABEL $label$8
	CALL $27($0)
	$12 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.02)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$11 }
	$2 = (int_64)-9223372036854775808
	goto $label$10 
	
.LABEL $label$11
	$2 = (Rounds 0)($12)
	
.LABEL $label$10
	$1 = *([0] + [8192])
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17132])
	$6 = (uint_64)$1 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$14:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$13 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$15 }
	$6 = $7
	$11 = [1]
	$4 = $8
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$15
	$6 = $7
	
.LOOP $label$16:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$13 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$4 = ($8 + [1])
	$8 = $4
	if ( $11 ){ goto $label$16 }
	$11 = [1]
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$14 }
	goto $label$12 
	
.LABEL $label$13
	$11 = [0]
	
.LABEL $label$12
	CALL eosio_assert($11, [17181])
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [17350]
	$9 = (int_64)0
	
.LOOP $label$17:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$18 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$11 = ($11 + [-91])
	goto $label$19 
	
.LABEL $label$20
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$18
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$17 }
	*(($5 + [152])) = [0]
	*($5 + [168]) = $1
	*($5 + [160]) = $2
	*($5 + [144]) = (int_64)0
	$8 = CALL $132([17363])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$23 }
	*($5 + [144]) = ($8 << [1])
	$11 = (($5 + [144]) | [1])
	if ( $8 ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$23
	$4 = (($8 + [16]) & [-16])
	$11 = CALL _Znwj($4)
	*($5 + [144]) = ($4 | [1])
	*($5 + [152]) = $11
	*($5 + [148]) = $8
	
.LABEL $label$22
	CALL memcpy($11, [17363], $8)
	
.LABEL $label$21
	*(($11 + $8)) = [0]
	*((($5 + [8]) + [8])) = *((($5 + [160]) + [8]))
	*($5 + [8]) = *($5 + [160])
	CALL $28($0, $9, ($5 + [8]), ($5 + [144]))
	if ( ((*($5 + [144]) & [1]) == 0) ){ goto $label$24 }
	CALL _ZdlPv(*($5 + [152]))
	
.LABEL $label$24
	$8 = ($8 & [1])
	$8 = *($5 + [176])
	if ( (( *($5 + [180]) ? uint_32($8 >> [1]) : $8 ) == 0) ){ goto $label$25 }
	$12 = ((float_64)(CASTING float_64)(int_64 *($3)) * (float_64)(float_64)0.002)
	if ( ((float_64)(float_64)|$12| < (float_64)(float_64)9223372036854775808) ){ goto $label$27 }
	$13 = (int_64)-9223372036854775808
	goto $label$26 
	
.LABEL $label$27
	$13 = (Rounds 0)($12)
	
.LABEL $label$26
	$14 = *([0] + [8192])
	CALL eosio_assert((uint_64)(((int_64)$13 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17132])
	$6 = (uint_64)$14 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $6) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$7 = (uint_64)$6 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$6 & (int_64)65280) == (int_64)0) ){ goto $label$31 }
	$6 = $7
	$11 = [1]
	$4 = $8
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$31
	$6 = $7
	
.LOOP $label$32:
	if ( ((int_64)((int_64)$6 & (int_64)65280) != (int_64)0) ){ goto $label$29 }
	$6 = (uint_64)$6 >> (uint_64)(int_64)8)
	$11 = ((int_32)$8 < (int_32)[6])
	$4 = ($8 + [1])
	$8 = $4
	if ( $11 ){ goto $label$32 }
	$11 = [1]
	$8 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[6]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$11 = [0]
	
.LABEL $label$28
	CALL eosio_assert($11, [17181])
	$8 = ( *($5 + [184]) ? (($5 + [176]) | [1]) : (*($5 + [176]) & [1]) )
	$11 = [0]
	
.LOOP $label$33:
	$4 = ($8 + $11)
	$0 = ($11 + [1])
	$11 = $0
	if ( *($4) ){ goto $label$33 }
	$2 = (CASTING uint_64)(uint_32 ($0 + [-1]))
	$6 = (int_64)0
	$7 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$34:
	$10 = (int_64)0
	if ( ((uint_64)$6 >= (uint_64)$2) ){ goto $label$35 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$11 = ($11 + [-91])
	goto $label$36 
	
.LABEL $label$37
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$35
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$39 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$38 
	
.LABEL $label$39
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$38
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$34 }
	CALL eosio_assert(CALL $fimport$9($9), [17370])
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [17402]
	$2 = (int_64)0
	
.LOOP $label$40:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$41 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$11 = ($11 + [-91])
	goto $label$42 
	
.LABEL $label$43
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$41
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$2 = ((int_64)$10 | (int_64)$2)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$40 }
	$6 = (int_64)6
	
.LOOP $label$44:
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$44 }
	*($5 + [96]) = (int_64)3617214756542218240
	*($5 + [88]) = $2
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [17023]
	$2 = (int_64)0
	
.LOOP $label$45:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$50 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$49 }
	$11 = ($11 + [-91])
	goto $label$48 
	
.LABEL $label$50
	$7 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$47 }
	goto $label$46 
	
.LABEL $label$49
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$48
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$47
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$46
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)4294967291)
	$2 = ((int_64)$7 | (int_64)$2)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$45 }
	$6 = (int_64)0
	$10 = (int_64)59
	$8 = [17123]
	$1 = (int_64)0
	
.LOOP $label$51:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$56 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$11 = ($11 + [-91])
	goto $label$54 
	
.LABEL $label$56
	$7 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$55
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $11) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$10 & (int_64)4294967295))
	
.LABEL $label$52
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$1 = ((int_64)$7 | (int_64)$1)
	$10 = ((int_64)$10 + (int_64)4294967291)
	if ( ((int_64)$10 != (int_64)55834574842) ){ goto $label$51 }
	$6 = (int_64)0
	$7 = (int_64)59
	$8 = [17402]
	$15 = (int_64)0
	
.LOOP $label$57:
	$10 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$58 }
	$11 = *($8)
	if ( ((uint_32)(($11 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$11 = ($11 + [-91])
	goto $label$59 
	
.LABEL $label$60
	$11 = ( ($11 + [-48]) ? [0] : ((($11 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$10 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $11) & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$58
	$8 = ($8 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$15 = ((int_64)$10 | (int_64)$15)
	$7 = ((int_64)$7 + (int_64)4294967291)
	if ( ((int_64)$7 != (int_64)55834574842) ){ goto $label$57 }
	*(($5 + [32])) = [0]
	*($5 + [24]) = (int_64)0
	$8 = CALL $132([17415])
	if ( ((uint_32)$8 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$8 >= (uint_32)[11]) ){ goto $label$63 }
	*($5 + [24]) = ($8 << [1])
	$11 = (($5 + [24]) | [1])
	if ( $8 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$4 = (($8 + [16]) & [-16])
	$11 = CALL _Znwj($4)
	*($5 + [24]) = ($4 | [1])
	*($5 + [32]) = $11
	*($5 + [28]) = $8
	
.LABEL $label$62
	CALL memcpy($11, [17415], $8)
	
.LABEL $label$61
	*(($11 + $8)) = [0]
	*(($5 + [64])) = $14
	$8 = ($5 + [32])
	*(($5 + [80])) = *($8)
	*($8) = [0]
	*($5 + [48]) = $9
	*($5 + [40]) = $15
	*($5 + [56]) = $13
	*($5 + [72]) = *($5 + [24])
	*($5 + [24]) = (int_64)0
	$8 = CALL $29(($5 + [104]), ($5 + [88]), $2, $1, ($5 + [40]))
	CALL $30(($5 + [192]), $8)
	$11 = *($5 + [192])
	CALL send_inline($11, (*($5 + [196]) - $11))
	$11 = *($5 + [192])
	if ( ($11 == 0) ){ goto $label$64 }
	*($5 + [196]) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$64
	$11 = *($8 + [28])
	if ( ($11 == 0) ){ goto $label$65 }
	*(($8 + [32])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$65
	$11 = *($8 + [16])
	if ( ($11 == 0) ){ goto $label$66 }
	*(($8 + [20])) = $11
	CALL _ZdlPv($11)
	
.LABEL $label$66
	if ( ((*(($5 + [72])) & [1]) == 0) ){ goto $label$67 }
	CALL _ZdlPv(*(($5 + [80])))
	
.LABEL $label$67
	if ( ((*($5 + [24]) & [1]) == 0) ){ goto $label$68 }
	CALL _ZdlPv(*(($5 + [32])))
	
.LABEL $label$68
	$8 = (*($5 + [176]) & [1])
	
.LABEL $label$25
	if ( ($8 == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($5 + [184]))
	
.LABEL $label$7
	$global$0 = ($5 + [208])
	return (unreachable)
	
.LABEL $label$6
	CALL $117(($5 + [144]))
	
.LABEL $label$5
	CALL $117(($5 + [24]))
	(unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [17275])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $110(*($1), ($0 + [32]))
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$3 = ($global$0 - [256])
	$global$0 = $3
	$4 = ($0 + [8])
	CALL memcpy(($3 + [48]), CALL $31($4, $1, [17582]), [104])
	$5 = *($3 + [56])
	CALL require_auth($5)
	CALL eosio_assert((((int_64)*($3 + [112]) == (int_64)1) & (int_64)(*($3 + [120]) == 0)), [18272])
	$6 = [0]
	$7 = *([0] + [8192])
	$8 = *($3 + [104])
	CALL eosio_assert((uint_64)(((int_64)$8 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17132])
	$9 = (uint_64)$7 >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$10 = (uint_64)$9 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$9 & (int_64)65280) == (int_64)0) ){ goto $label$4 }
	$9 = $10
	$11 = [1]
	$12 = $6
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$4
	$9 = $10
	
.LOOP $label$5:
	if ( ((int_64)((int_64)$9 & (int_64)65280) != (int_64)0) ){ goto $label$2 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8)
	$11 = ((int_32)$6 < (int_32)[6])
	$12 = ($6 + [1])
	$6 = $12
	if ( $11 ){ goto $label$5 }
	$11 = [1]
	$6 = ($12 + [1])
	if ( ((int_32)$12 < (int_32)[6]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$11 = [0]
	
.LABEL $label$1
	CALL eosio_assert($11, [17181])
	*(($3 + [24])) = [0]
	*($3 + [40]) = $7
	*($3 + [32]) = $8
	*($3 + [16]) = (int_64)0
	$6 = CALL $132([18258])
	if ( ((uint_32)$6 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$6 >= (uint_32)[11]) ){ goto $label$9 }
	*($3 + [16]) = ($6 << [1])
	$11 = (($3 + [16]) | [1])
	if ( $6 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$12 = (($6 + [16]) & [-16])
	$11 = CALL _Znwj($12)
	*($3 + [16]) = ($12 | [1])
	*($3 + [24]) = $11
	*($3 + [20]) = $6
	
.LABEL $label$8
	CALL memcpy($11, [18258], $6)
	
.LABEL $label$7
	*(($11 + $6)) = [0]
	*(($3 + [8])) = *((($3 + [32]) + [8]))
	*($3) = *($3 + [32])
	CALL $28($0, $5, $3, ($3 + [16]))
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$10 }
	CALL _ZdlPv(*($3 + [24]))
	
.LABEL $label$10
	*(($3 + [120])) = (int_64)1
	*($3 + [144]) = $2
	CALL $32($0, ($3 + [48]))
	CALL memcpy(($3 + [152]), CALL $31($4, $1, [17582]), [104])
	*($3 + [232]) = (int_64)1
	CALL $32($0, ($3 + [152]))
	CALL $34($0, $1, $2)
	CALL $35($0, ($3 + [152]))
	CALL $37($0, $1, $2)
	$global$0 = ($3 + [256])
	return (unreachable)
	
.LABEL $label$6
	CALL $117(($3 + [16]))
}

void .FUNC $25 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4, float_64 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	float_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	$7 = ($global$0 - [224])
	$global$0 = $7
	$8 = [0]
	*($7 + [104]) = [0]
	*($7 + [96]) = (int_64)0
	$9 = (int_64)0
	if ( ((int_64)$3 < (int_64)1) ){ goto $label$1 }
	$10 = ((float_64)$5 * (float_64)(float_64)10652.17391)
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)9223372036854775808) ){ goto $label$3 }
	$11 = (int_64)-9223372036854775808
	goto $label$2 
	
.LABEL $label$3
	$11 = (Rounds 0)($10)
	
.LABEL $label$2
	$12 = ($0 + [8])
	$10 = (CASTING float_64)(int_64 $4)
	$13 = (($7 + [64]) + [8])
	$14 = (($7 + [64]) + [24])
	$15 = (($7 + [64]) + [16])
	$16 = (int_64)0
	$9 = (int_64)0
	
.LOOP $label$4:
	*($13) = (int_64)0
	*($14) = (int_64)1
	*($7 + [64]) = $10
	$17 = CALL tapos_block_num()
	$18 = CALL tapos_block_prefix()
	if ( ((int_64)*([0]) != (int_64)0) ){ goto $label$5 }
	*([0]) = ((int_64)(uint_64)((int_64)CALL current_time() + (int_64)(CASTING int_64)(int_32 ((int_32)$18 * (int_32)$17))) >> (uint_64)(int_64)15) & (int_64)562949953421310)
	
.LABEL $label$5
	$19 = ((int_64)$2 + (int_64)$16)
	CALL sha256([0], [8], ($7 + [112]))
	$20 = ((int_64)((int_64)*($7 + [113]) << (int_64)32) | (int_64)*($7 + [112]))
	*([0]) = $20
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$20 % (uint_64)(int_64)10000)) > (uint_32)[9099]) ){ goto $label$7 }
	*($15) = $11
	$20 = CALL $46($0, $2, $1, $4, $5, $6, *($14), $11, (int_64)1, (int_64)1, (int_64)1)
	$9 = ((int_64)$9 + (int_64)$11)
	goto $label$6 
	
.LABEL $label$7
	*($15) = (int_64)0
	$20 = CALL $46($0, $2, $1, $4, $5, $6, *($14), (int_64)0, (int_64)0, (int_64)0, (int_64)1)
	
.LABEL $label$6
	CALL $37($0, $20, $19)
	$17 = *($7 + [100])
	if ( ((int_32)$17 == (int_32)*((($7 + [96]) + [8]))) ){ goto $label$9 }
	*($17) = *($7 + [64])
	*(($17 + [24])) = *($14)
	*(($17 + [16])) = *($15)
	*(($17 + [8])) = *($13)
	*($7 + [100]) = ($17 + [32])
	goto $label$8 
	
.LABEL $label$9
	CALL $47(($7 + [96]), ($7 + [64]))
	
.LABEL $label$8
	CALL memcpy(($7 + [112]), CALL $31($12, $20, [17582]), [104])
	CALL $35($0, ($7 + [112]))
	$16 = ((int_64)$16 + (int_64)1)
	if ( ((int_64)$3 != (int_64)$16) ){ goto $label$4 }
	
.LABEL $label$1
	$19 = *([0] + [8192])
	CALL eosio_assert((uint_64)(((int_64)$9 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17132])
	$16 = (uint_64)$19 >> (uint_64)(int_64)8)
	
.LOOP $label$12:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $16) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$11 }
	$20 = (uint_64)$16 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$16 & (int_64)65280) == (int_64)0) ){ goto $label$13 }
	$16 = $20
	$17 = [1]
	$14 = $8
	$8 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$13
	$16 = $20
	
.LOOP $label$14:
	if ( ((int_64)((int_64)$16 & (int_64)65280) != (int_64)0) ){ goto $label$11 }
	$16 = (uint_64)$16 >> (uint_64)(int_64)8)
	$17 = ((int_32)$8 < (int_32)[6])
	$14 = ($8 + [1])
	$8 = $14
	if ( $17 ){ goto $label$14 }
	$17 = [1]
	$8 = ($14 + [1])
	if ( ((int_32)$14 < (int_32)[6]) ){ goto $label$12 }
	goto $label$10 
	
.LABEL $label$11
	$17 = [0]
	
.LABEL $label$10
	CALL eosio_assert($17, [17181])
	*(($7 + [40])) = [0]
	*($7 + [56]) = $19
	*($7 + [48]) = $9
	*($7 + [32]) = (int_64)0
	$17 = CALL $132([18122])
	if ( ((uint_32)$17 >= (uint_32)[-16]) ){ goto $label$16 }
	if ( ((uint_32)$17 >= (uint_32)[11]) ){ goto $label$19 }
	*($7 + [32]) = ($17 << [1])
	$8 = (($7 + [32]) | [1])
	if ( $17 ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$19
	$14 = (($17 + [16]) & [-16])
	$8 = CALL _Znwj($14)
	*($7 + [32]) = ($14 | [1])
	*($7 + [40]) = $8
	*($7 + [36]) = $17
	
.LABEL $label$18
	CALL memcpy($8, [18122], $17)
	
.LABEL $label$17
	*(($8 + $17)) = [0]
	*(($7 + [8])) = *((($7 + [48]) + [8]))
	*($7) = *($7 + [48])
	CALL $28($0, $1, $7, ($7 + [32]))
	if ( ((*($7 + [32]) & [1]) == 0) ){ goto $label$20 }
	CALL _ZdlPv(*($7 + [40]))
	
.LABEL $label$20
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$17 = (*($7 + [100]) - *($7 + [96]))
	if ( ($17 == 0) ){ goto $label$21 }
	$8 = int_32($17 >> [5])
	if ( ((uint_32)$8 >= (uint_32)[134217728]) ){ goto $label$15 }
	$17 = CALL _Znwj($17)
	*(($7 + [24])) = ($17 + ($8 << [5]))
	*($7 + [16]) = $17
	*($7 + [20]) = $17
	$14 = *($7 + [96])
	$8 = (*($7 + [100]) - $14)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$21 }
	CALL memcpy($17, $14, $8)
	*($7 + [20]) = (*($7 + [20]) + $8)
	
.LABEL $label$21
	CALL $48($0, $2, $1, ($7 + [16]), (int_64)1, $6)
	$17 = *($7 + [16])
	if ( ($17 == 0) ){ goto $label$22 }
	*($7 + [20]) = $17
	CALL _ZdlPv($17)
	
.LABEL $label$22
	$17 = *($7 + [96])
	if ( ($17 == 0) ){ goto $label$23 }
	*($7 + [100]) = $17
	CALL _ZdlPv($17)
	
.LABEL $label$23
	$global$0 = ($7 + [224])
	return (unreachable)
	
.LABEL $label$16
	CALL $117(($7 + [32]))
	
.LABEL $label$15
	CALL $126(($7 + [16]))
	(unreachable)
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [96])
	$global$0 = $2
	*(($3 = (($2 + [32]) + [8]))) = *(($1 + [24]))
	*($2 + [32]) = *($1 + [16])
	$4 = *($1 + [8])
	$5 = *($1)
	$1 = CALL $118(($2 + [16]), ($1 + [32]))
	*((($2 + [48]) + [8])) = *($3)
	*($2 + [48]) = *($2 + [32])
	$0 = *($0 + [4])
	$6 = *($0 + [4])
	$3 = (*(*($0)) + int_32($6 >> [1]))
	$0 = *($0)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$0 = *((*($3) + $0))
	
.LABEL $label$1
	*(($7 = (($2 + [80]) + [8]))) = *((($2 + [48]) + [8]))
	*($2 + [80]) = *($2 + [48])
	$6 = CALL $118(($2 + [64]), $1)
	*(($2 + [8])) = *($7)
	*($2) = *($2 + [80])
	CALL void $3((int_32 $5), (int_64 $4), (int_64 $2), (int_32 $6), (int_32 $0))
	if ( (*($2 + [64]) & [1]) ){ goto $label$4 }
	if ( (*($1) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL _ZdlPv(*($6 + [8]))
	if ( ((*($1) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL _ZdlPv(*($1 + [8]))
	$global$0 = ($2 + [96])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [96])
}

void .FUNC $27 (int_32 $0)
{
	int_32 $1
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_64 $8
	float_64 $9
	float_64 $10
	int_32 $11
	$1 = ($global$0 - [112])
	$global$0 = $1
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [17337]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [-91])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$1 }
	CALL $10(($1 + [96]), $5)
	CALL eosio_assert(((int_64)*($1 + [104]) == (int_64)*([0] + [8224])), [18182])
	$2 = *($1 + [96])
	if ( ((int_64)$2 < (int_64)*([0] + [8216])) ){ goto $label$7 }
	$8 = (int_64))($2 - *([0] + [8232]))
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [18135]
	$5 = (int_64)0
	
.LOOP $label$8:
	$6 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$9 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$11 }
	$7 = ($7 + [-91])
	goto $label$10 
	
.LABEL $label$11
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$10
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$8 }
	$4 = [0]
	$3 = *([0] + [8192])
	*($1 + [88]) = $3
	$9 = (CASTING float_64)(int_64 $8)
	$10 = ((float_64)$9 * (float_64)(float_64)0.8)
	if ( ((float_64)(float_64)|$10| < (float_64)(float_64)9223372036854775808) ){ goto $label$13 }
	$2 = (int_64)-9223372036854775808
	goto $label$12 
	
.LABEL $label$13
	$2 = (Rounds 0)($10)
	
.LABEL $label$12
	*($1 + [80]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17132])
	$2 = (uint_64)$3 >> (uint_64)(int_64)8)
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$17 }
	$2 = $3
	$7 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$17
	$2 = $3
	
.LOOP $label$18:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$15 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $7 ){ goto $label$18 }
	$7 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [17181])
	*(($1 + [72])) = [0]
	*($1 + [64]) = (int_64)0
	$4 = CALL $132([18148])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$21 }
	*($1 + [64]) = ($4 << [1])
	$7 = (($1 + [64]) | [1])
	if ( $4 ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$21
	$11 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($1 + [64]) = ($11 | [1])
	*($1 + [72]) = $7
	*($1 + [68]) = $4
	
.LABEL $label$20
	CALL memcpy($7, [18148], $4)
	
.LABEL $label$19
	*(($7 + $4)) = [0]
	*((($1 + [16]) + [8])) = *((($1 + [80]) + [8]))
	*($1 + [16]) = *($1 + [80])
	CALL $28($0, $5, ($1 + [16]), ($1 + [64]))
	if ( ((*($1 + [64]) & [1]) == 0) ){ goto $label$22 }
	CALL _ZdlPv(*($1 + [72]))
	
.LABEL $label$22
	$2 = (int_64)0
	$3 = (int_64)59
	$4 = [18169]
	$5 = (int_64)0
	
.LOOP $label$23:
	$6 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$24 }
	$7 = *($4)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$7 = ($7 + [-91])
	goto $label$25 
	
.LABEL $label$26
	$7 = ( ($7 + [-48]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$6 = ((int_64)((int_64)(CASTING uint_64)(uint_32 $7) & (int_64)31) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$24
	$4 = ($4 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)4294967291)
	if ( ((int_64)$3 != (int_64)55834574842) ){ goto $label$23 }
	$4 = [0]
	$3 = *([0] + [8192])
	*($1 + [56]) = $3
	$9 = ((float_64)$9 * (float_64)(float_64)0.2)
	if ( ((float_64)(float_64)|$9| < (float_64)(float_64)9223372036854775808) ){ goto $label$28 }
	$2 = (int_64)-9223372036854775808
	goto $label$27 
	
.LABEL $label$28
	$2 = (Rounds 0)($9)
	
.LABEL $label$27
	*($1 + [48]) = $2
	CALL eosio_assert((uint_64)(((int_64)$2 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [17132])
	$2 = (uint_64)$3 >> (uint_64)(int_64)8)
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$30 }
	$3 = (uint_64)$2 >> (uint_64)(int_64)8)
	if ( ((int_64)((int_64)$2 & (int_64)65280) == (int_64)0) ){ goto $label$32 }
	$2 = $3
	$7 = [1]
	$11 = $4
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$32
	$2 = $3
	
.LOOP $label$33:
	if ( ((int_64)((int_64)$2 & (int_64)65280) != (int_64)0) ){ goto $label$30 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8)
	$7 = ((int_32)$4 < (int_32)[6])
	$11 = ($4 + [1])
	$4 = $11
	if ( $7 ){ goto $label$33 }
	$7 = [1]
	$4 = ($11 + [1])
	if ( ((int_32)$11 < (int_32)[6]) ){ goto $label$31 }
	goto $label$29 
	
.LABEL $label$30
	$7 = [0]
	
.LABEL $label$29
	CALL eosio_assert($7, [17181])
	*(($1 + [40])) = [0]
	*($1 + [32]) = (int_64)0
	$4 = CALL $132([18148])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$36 }
	*($1 + [32]) = ($4 << [1])
	$7 = (($1 + [32]) | [1])
	if ( $4 ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$36
	$11 = (($4 + [16]) & [-16])
	$7 = CALL _Znwj($11)
	*($1 + [32]) = ($11 | [1])
	*($1 + [40]) = $7
	*($1 + [36]) = $4
	
.LABEL $label$35
	CALL memcpy($7, [18148], $4)
	
.LABEL $label$34
	*(($7 + $4)) = [0]
	*(($1 + [8])) = *((($1 + [48]) + [8]))
	*($1) = *($1 + [48])
	CALL $28($0, $5, $1, ($1 + [32]))
	if ( ((*($1 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL _ZdlPv(*($1 + [40]))
	
.LABEL $label$7
	$global$0 = ($1 + [112])
	return (unreachable)
	
.LABEL $label$6
	CALL $117(($1 + [64]))
	
.LABEL $label$5
	CALL $117(($1 + [32]))
	(unreachable)
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, float_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = ($global$0 - [112])
	$global$0 = $6
	$3 = CALL $46($0, $2, $1, $3, $4, $5, (int_64)1, (int_64)0, (int_64)1, (int_64)0, (int_64)0)
	$7 = CALL tapos_block_num()
	$8 = CALL tapos_block_prefix()
	if ( ((int_64)*([0]) != (int_64)0) ){ goto $label$1 }
	*([0]) = ((int_64)(uint_64)((int_64)CALL current_time() + (int_64)(CASTING int_64)(int_32 ((int_32)$8 * (int_32)$7))) >> (uint_64)(int_64)15) & (int_64)562949953421310)
	
.LABEL $label$1
	CALL sha256([0], [8], $6)
	$5 = ((int_64)((int_64)*($6 + [1]) << (int_64)32) | (int_64)*($6))
	*([0]) = $5
	if ( ((uint_32)(CASTING uint_32)(uint_64 ((uint_64)$5 % (uint_64)(int_64)10000)) > (uint_32)[8899]) ){ goto $label$5 }
	$7 = CALL memcpy($6, CALL $31(($0 + [8]), $3, [17582]), [104])
	$4 = ((float_64)*(((*($7 + [16]) << [5]) + [17600])) * (float_64)*($7 + [48]))
	if ( ((float_64)(float_64)|$4| < (float_64)(float_64)9223372036854775808) ){ goto $label$4 }
	$5 = (int_64)-9223372036854775808
	goto $label$3 
	
.LABEL $label$5
	*(($7 = CALL memcpy($6, CALL $31(($8 = ($0 + [8])), $3, [17582]), [104])) + [56]) = (int_64)0
	*($7 + [64]) = (int_64)0
	CALL $32($0, $7)
	CALL $33($0, *($7 + [8]), *($7 + [16]), *($7 + [48]))
	*(($7 = CALL memcpy($7, CALL $31($8, $3, [17582]), [104])) + [80]) = (int_64)1
	CALL $32($0, $7)
	CALL $34($0, $3, $2)
	CALL $35($0, $7)
	goto $label$2 
	
.LABEL $label$4
	$5 = (Rounds 0)($4)
	
.LABEL $label$3
	*($7 + [56]) = $5
	CALL $32($0, $7)
	if ( ((int_64)*($7 + [16]) != (int_64)6) ){ goto $label$2 }
	CALL $36($0, $7)
	
.LABEL $label$2
	CALL $37($0, $3, $2)
	CALL $38($0, $1, $2, $3)
	$global$0 = ($6 + [112])
}

void .FUNC $109 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $126($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $135 (int_32 $0)
{
	return CALL $136([8584], $0)
}

void .FUNC $69 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $126($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $68 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($0 + [40]) = $1
	$4 = *($2 + [4])
	$1 = *($4 + [4])
	*($0 + [8]) = *($1 + [8])
	*($0 + [16]) = *($1 + [24])
	*($0 + [24]) = *($1 + [56])
	*($0) = (int_64))((int_64)9999999999 - *(*(*($4) + [4])))
	$1 = *($2)
	*($0 + [32]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [56]) = ($3 + [40])
	*($3 + [52]) = $3
	*($3 + [48]) = $3
	*($3 + [64]) = ($3 + [48])
	*($3 + [76]) = ($0 + [8])
	*($3 + [72]) = $0
	*($3 + [80]) = ($0 + [16])
	*($3 + [84]) = ($0 + [24])
	*($3 + [88]) = ($0 + [32])
	CALL $70(($3 + [72]), ($3 + [64]))
	$5 = *($0)
	*($0 + [44]) = CALL db_store_i64(*($1 + [8]), (int_64)-6219044677433688064, *(*($2 + [8])), $5, $3, [40])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [96])
	return $0
}

int_32 .FUNC $108 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($0 + [16]) = $1
	$1 = *($2)
	*($0 + [8]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	CALL eosio_assert([1], [17331])
	CALL memcpy($3, $0, [8])
	CALL eosio_assert([1], [17331])
	CALL memcpy(($3 | [8]), ($0 + [8]), [8])
	$4 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)4982871462359400448, *(*($2 + [8])), $4, $3, [16])
	if ( (uint_64)($4 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [16])
	return $0
}

void .FUNC $65 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	$3 = CALL _Znwj([56])
	CALL $68($3, $1, ($4 + [16]))
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $69(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $64 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([32])) + [16]) = $1
	CALL $67(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [20])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $45(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = *($0)
	$5 = *(*($0 + [4]))
	$6 = *($5 + [16])
	if ( ((int_64)$6 != (int_64)-1) ){ goto $label$1 }
	$6 = (int_64)0
	$7 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)4982871462359400448, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$2 }
	CALL $14($5, $7)
	*($3 + [12]) = [0]
	*($3 + [8]) = $5
	$6 = *(*(CALL $59(($3 + [8])) + [4]))
	$6 = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $6
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($6 <= (int_64)-2), [17428])
	*($1) = *(($5 + [16]))
	$2 = $2
	$5 = ($2 + [-16])
	$global$0 = $5
	CALL eosio_assert([1], [17331])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [17331])
	CALL memcpy(($2 + [-8]), ($1 + [8]), [8])
	$6 = *($1)
	*($1 + [20]) = CALL db_store_i64(*($4 + [8]), (int_64)4982871462359400448, *(*($0 + [8])), $6, $5, [16])
	if ( (uint_64)($6 <= *($4 + [16])) ){ goto $label$3 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$global$0 = ($3 + [16])
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [96])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [96])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17252])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([120])) + [104]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	*($3 + [60]) = ($5 + [40])
	*($3 + [64]) = ($5 + [48])
	*($3 + [68]) = ($5 + [56])
	*($3 + [72]) = ($5 + [64])
	*($3 + [76]) = ($5 + [72])
	*($3 + [80]) = ($5 + [80])
	*($3 + [84]) = ($5 + [88])
	*($3 + [88]) = ($5 + [96])
	CALL $66(($3 + [40]), ($3 + [32]))
	*($5 + [108]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $57(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [96])
	return $5
}

void .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [24])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [28])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [32])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [36])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [40])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [44])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [48])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [17843])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [17889])
	$5 = *($3)
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	*($1 + [24]) = *($5 + [24])
	*($1 + [32]) = *($5 + [32])
	*($1 + [40]) = *($5 + [40])
	*($1 + [48]) = *($5 + [48])
	*($1 + [56]) = *($5 + [56])
	*($1 + [64]) = *($5 + [64])
	$6 = *($1)
	*($1 + [72]) = *($5 + [72])
	*($1 + [80]) = *($5 + [80])
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [96]) = *(*($3) + [96])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17940])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($1 + [8])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [16])
	*($4 + [148]) = ($1 + [24])
	*($4 + [152]) = ($1 + [32])
	*($4 + [156]) = ($1 + [40])
	*($4 + [160]) = ($1 + [48])
	*($4 + [164]) = ($1 + [56])
	*($4 + [168]) = ($1 + [64])
	*($4 + [172]) = ($1 + [72])
	*($4 + [176]) = ($1 + [80])
	*($4 + [180]) = ($1 + [88])
	*($4 + [184]) = ($1 + [96])
	CALL $60(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

void .FUNC $62 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	$4 = ($global$0 - [192])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [104]) == (int_32)$0), [17843])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [17889])
	$5 = *($3)
	*($1 + [8]) = *($5 + [8])
	*($1 + [16]) = *($5 + [16])
	*($1 + [24]) = *($5 + [24])
	*($1 + [32]) = *($5 + [32])
	*($1 + [40]) = *($5 + [40])
	*($1 + [48]) = *($5 + [48])
	*($1 + [56]) = *($5 + [56])
	*($1 + [64]) = *($5 + [64])
	$6 = *($1)
	*($1 + [72]) = *($5 + [72])
	*($1 + [80]) = *($5 + [80])
	*($1 + [88]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($1 + [96]) = *(*($3) + [96])
	CALL eosio_assert(((int_64)$6 == (int_64)*($1)), [17940])
	*($4 + [120]) = ($4 + [104])
	*($4 + [116]) = $4
	*($4 + [112]) = $4
	*($4 + [128]) = ($4 + [112])
	*($4 + [140]) = ($1 + [8])
	*($4 + [136]) = $1
	*($4 + [144]) = ($1 + [16])
	*($4 + [148]) = ($1 + [24])
	*($4 + [152]) = ($1 + [32])
	*($4 + [156]) = ($1 + [40])
	*($4 + [160]) = ($1 + [48])
	*($4 + [164]) = ($1 + [56])
	*($4 + [168]) = ($1 + [64])
	*($4 + [172]) = ($1 + [72])
	*($4 + [176]) = ($1 + [80])
	*($4 + [180]) = ($1 + [88])
	*($4 + [184]) = ($1 + [96])
	CALL $60(($4 + [136]), ($4 + [128]))
	CALL db_update_i64(*($1 + [108]), $2, $4, [104])
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [192])
}

void .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [20])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $100 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [96])
	$global$0 = $3
	*($0 + [48]) = $1
	$4 = *($2 + [4])
	$1 = *($4 + [4])
	*($0 + [8]) = *($1 + [8])
	*($0 + [16]) = *($1 + [16])
	*($0 + [24]) = *($1 + [56])
	*($0 + [32]) = *($1 + [64])
	*($0) = (int_64))((int_64)9999999999 - *(*(*($4) + [4])))
	$1 = *($2)
	*($0 + [40]) = ((int_64)((uint_64)CALL current_time() / (uint_64)(int_64)1000000) & (int_64)4294967295)
	*($3 + [56]) = ($3 + [48])
	*($3 + [52]) = $3
	*($3 + [48]) = $3
	*($3 + [64]) = ($3 + [48])
	*($3 + [76]) = ($0 + [8])
	*($3 + [72]) = $0
	*($3 + [80]) = ($0 + [16])
	*($3 + [84]) = ($0 + [24])
	*($3 + [88]) = ($0 + [32])
	*($3 + [92]) = ($0 + [40])
	CALL $101(($3 + [72]), ($3 + [64]))
	$5 = *($0)
	*($0 + [52]) = CALL db_store_i64(*($1 + [8]), (int_64)7035937260545130496, *(*($2 + [8])), $5, $3, [48])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [96])
	return $0
}

void .FUNC $103 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $126($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $102 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	$3 = ($global$0 - [112])
	$global$0 = $3
	*($0 + [56]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$4 = *($1 + [8])
	*($0 + [16]) = *($4 + [64])
	*($0 + [24]) = *($4 + [16])
	*($0 + [32]) = *($4 + [56])
	*($0 + [40]) = (int_64)0
	$4 = *($2)
	*($0 + [48]) = *(*($1 + [12]))
	*($3 + [64]) = ($3 + [56])
	*($3 + [60]) = $3
	*($3 + [56]) = $3
	*($3 + [72]) = ($3 + [56])
	*($3 + [84]) = ($0 + [8])
	*($3 + [80]) = $0
	*($3 + [88]) = ($0 + [16])
	*($3 + [92]) = ($0 + [24])
	*($3 + [96]) = ($0 + [32])
	*($3 + [100]) = ($0 + [40])
	*($3 + [104]) = ($0 + [48])
	CALL $104(($3 + [80]), ($3 + [72]))
	$5 = *($0)
	*($0 + [60]) = CALL db_store_i64(*($4 + [8]), (int_64)-4993458661321014272, *(*($2 + [8])), $5, $3, [56])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($3 + [112])
	return $0
}

int_32 .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$4 = *($0 + [4])
	$5 = ($0 + [8])
	
.LOOP $label$1:
	$6 = (CASTING uint_32)(uint_64 $3)
	$3 = (uint_64)$3 >> (uint_64)(int_64)7
	$7 = ((int_64)$3) != (int_64)0
	*($2 + [15]) = (($7) << [7]) | ($6 & [127]))
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[0]), [17331])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ($2 + [15]), [1])
	$4 = (*($6) + [1])
	*($6) = $4
	if ( $7 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$1) ){ goto $label$2 }
	$6 = ($0 + [4])
	
.LOOP $label$3:
	$5 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17331])
	CALL memcpy(*($6), $7, [8])
	$4 = (*($6) + [8])
	*($6) = $4
	CALL eosio_assert(((int_32)(*($5) - $4) > (int_32)[7]), [17331])
	CALL memcpy(*($6), ($7 + [8]), [8])
	$4 = (*($6) + [8])
	*($6) = $4
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [16])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [20])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [24])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $88 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [12])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [17275])
	CALL memcpy($3, *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $126($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [96])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	*($1 + [8]) = *(*($3 + [4]))
	$4 = *($0)
	*($2 + [72]) = *(*($3 + [8]) + [12 align=4])
	*($1 + [16]) = *(*(CALL $80(($2 + [72])) + [4]))
	*($2 + [72]) = *(*($3 + [8]) + [12 align=4])
	*($1 + [24]) = *(*(CALL $80(($2 + [72])) + [4]) + [8])
	*($2 + [72]) = *(*($3 + [8]) + [12 align=4])
	*($1 + [32]) = *(*(CALL $80(($2 + [72])) + [4]) + [16])
	*($2 + [56]) = ($2 + [40])
	*($2 + [52]) = $2
	*($2 + [48]) = $2
	*($2 + [64]) = ($2 + [48])
	*($2 + [76]) = ($1 + [8])
	*($2 + [72]) = $1
	*($2 + [80]) = ($1 + [16])
	*($2 + [84]) = ($1 + [24])
	*($2 + [88]) = ($1 + [32])
	CALL $91(($2 + [72]), ($2 + [64]))
	$5 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($4 + [8]), (int_64)-3020372071840163840, *(*($0 + [8])), $5, $2, [40])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [96])
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $126($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [80])
	$global$0 = $2
	$3 = *($0 + [4])
	*($1) = *(*($3))
	$4 = *($0)
	*($2 + [64]) = *(*($3 + [4]) + [12 align=4])
	*($1 + [8]) = *(*(CALL $80(($2 + [64])) + [4]))
	*($2 + [64]) = *(*($3 + [4]) + [12 align=4])
	*($1 + [16]) = *(*(CALL $80(($2 + [64])) + [4]) + [8])
	*($2 + [64]) = *(*($3 + [4]) + [12 align=4])
	*($1 + [24]) = *(*(CALL $80(($2 + [64])) + [4]) + [16])
	*($2 + [48]) = ($2 + [32])
	*($2 + [44]) = $2
	*($2 + [40]) = $2
	*($2 + [56]) = ($2 + [40])
	*($2 + [68]) = ($1 + [8])
	*($2 + [64]) = $1
	*($2 + [72]) = ($1 + [16])
	*($2 + [76]) = ($1 + [24])
	CALL $89(($2 + [64]), ($2 + [56]))
	$5 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($4 + [8]), (int_64)-5069074825895811056, *(*($0 + [8])), $5, $2, [32])
	if ( (uint_64)($5 <= *($4 + [16])) ){ goto $label$1 }
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($2 + [80])
}

void .FUNC $83 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([56])) + [40]) = $1
	CALL $86(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [44])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $87(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $82 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [96])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [17843])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [17889])
	*($1 + [8]) = *(*($3))
	$5 = *($1)
	*($4 + [72]) = *(*($3 + [4]) + [12 align=4])
	*($1 + [16]) = *(*(CALL $80(($4 + [72])) + [4]))
	*($4 + [72]) = *(*($3 + [4]) + [12 align=4])
	*($1 + [24]) = *(*(CALL $80(($4 + [72])) + [4]) + [8])
	*($4 + [72]) = *(*($3 + [4]) + [12 align=4])
	*($1 + [32]) = *(*(CALL $80(($4 + [72])) + [4]) + [16])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17940])
	*($4 + [56]) = ($4 + [40])
	*($4 + [52]) = $4
	*($4 + [48]) = $4
	*($4 + [64]) = ($4 + [48])
	*($4 + [76]) = ($1 + [8])
	*($4 + [72]) = $1
	*($4 + [80]) = ($1 + [16])
	*($4 + [84]) = ($1 + [24])
	*($4 + [88]) = ($1 + [32])
	CALL $91(($4 + [72]), ($4 + [64]))
	CALL db_update_i64(*($1 + [44]), $2, $4, [40])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [96])
}

int_32 .FUNC $81 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [64])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17252])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*($3 + [20]) = $2
	*($3 + [16]) = $2
	*($3 + [24]) = ($2 + $4)
	*(($5 = CALL _Znwj([56])) + [40]) = $0
	*($3 + [32]) = ($3 + [16])
	*($3 + [44]) = ($5 + [8])
	*($3 + [40]) = $5
	*($3 + [48]) = ($5 + [16])
	*($3 + [52]) = ($5 + [24])
	*($3 + [56]) = ($5 + [32])
	CALL $90(($3 + [40]), ($3 + [32]))
	*($5 + [44]) = $1
	*($3 + [32]) = $5
	$6 = *($5)
	*($3 + [40]) = $6
	*($3 + [12]) = $1
	$7 = ($0 + [28])
	$8 = *($7)
	if ( ((uint_32)$8 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($8 + [8]) = $6
	*($8 + [16]) = $1
	*($3 + [32]) = [0]
	*($8) = $5
	*($7) = ($8 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $87(($0 + [24]), ($3 + [32]), ($3 + [40]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [32])
	*($3 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [64])
	return $5
}

int_32 .FUNC $80 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = ($global$0 - [16])
	$global$0 = $1
	*($1 + [8]) = (int_64)0
	$2 = *($0 + [4])
	if ( ($2 == 0) ){ goto $label$2 }
	$3 = *($2 + [32])
	if ( ((int_32)$3 != (int_32)[-1]) ){ goto $label$3 }
	$3 = *(*($0))
	$3 = CALL db_idx64_find_primary(*($3), *($3 + [8]), (int_64)-3020376800539181056, $1, *($2))
	*(*(($0 + [4])) + [32]) = $3
	
.LABEL $label$3
	$4 = CALL db_idx64_previous($3, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [18053])
	goto $label$1 
	
.LABEL $label$2
	$2 = *(*($0))
	$2 = CALL db_idx64_end(*($2), *($2 + [8]), (int_64)-3020376800539181056)
	CALL eosio_assert(((int_32)$2 != (int_32)[-1]), [17999])
	$4 = CALL db_idx64_previous($2, ($1 + [8]))
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17999])
	
.LABEL $label$1
	$5 = *($1 + [8])
	$3 = *(($6 + [28]))
	$6 = *(*($0))
	$7 = *($6 + [24])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	
.LOOP $label$7:
	$2 = ($3 + [-24])
	$8 = *($2)
	if ( ((int_64)*($8) == (int_64)$5) ){ goto $label$6 }
	$3 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$5 }
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [17201])
	goto $label$4 
	
.LABEL $label$5
	$8 = CALL $71($6, CALL $fimport$6(*($6), *($6 + [8]), (int_64)-3020376800539181056, $5))
	CALL eosio_assert(((int_32)*($8 + [24]) == (int_32)$6), [17201])
	
.LABEL $label$4
	*(($0 + [4])) = $8
	*(($8 + [32])) = $4
	$global$0 = ($1 + [16])
	return $0
}

void .FUNC $72 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [24]) == (int_32)$0), [17843])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [17889])
	$5 = *($1 + [8])
	*($4 + [24]) = $5
	*($1 + [8]) = ((int_64)$5 + (int_64)*(*($3)))
	$5 = *($1)
	CALL eosio_assert([1], [17940])
	CALL eosio_assert([1], [17331])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [17331])
	$3 = ($1 + [8])
	CALL memcpy(($4 | [8]), $3, [8])
	CALL eosio_assert([1], [17331])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL db_update_i64(*($1 + [28]), $2, $4, [24])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($4 + [40]) = *($3)
	if ( (CALL $131(($4 + [24]), ($4 + [40]), [8]) == 0) ){ goto $label$2 }
	$3 = ($1 + [32])
	$1 = *($3)
	if ( ((int_32)$1 > (int_32)[-1]) ){ goto $label$3 }
	$1 = CALL db_idx64_find_primary(*($0), *($0 + [8]), (int_64)-3020376800539181056, ($4 + [32]), $5)
	*($3) = $1
	
.LABEL $label$3
	CALL db_idx64_update($1, $2, ($4 + [40]))
	
.LABEL $label$2
	$global$0 = ($4 + [48])
}

void .FUNC $73 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$2 = ($global$0 - [224])
	$global$0 = $2
	*($2 + [216]) = $1
	$1 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$1 = (int_64)
	*($2 + [208]) = $1(((int_64)$1 & (int_64)4294967295) - (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 $1) % (uint_32)[86400]))))
	*((($2 + [168]) + [32])) = [0]
	*($2 + [176]) = $1
	*($2 + [184]) = (int_64)-1
	*($2 + [192]) = (int_64)0
	*($2 + [204]) = [0]
	$3 = *($0)
	*($2 + [168]) = $3
	*($2 + [160]) = ($2 + [168])
	*((($2 + [136]) + [8])) = [0]
	*(($4 = ($2 + [152]))) = [0]
	*($2 + [140]) = ($2 + [160])
	*($2 + [148]) = ($2 + [160])
	*((($2 + [96]) + [32])) = [0]
	*($2 + [104]) = $1
	*($2 + [96]) = $3
	*($2 + [112]) = (int_64)-1
	*($2 + [120]) = (int_64)0
	*($2 + [16]) = [1]
	$5 = ($2 + [148])
	$6 = ($2 + [124])
	$7 = ($2 + [120])
	
.LOOP $label$2:
	*($2 + [32]) = (int_64)0
	CALL $77(($2 + [72]), ($2 + [160]), ($2 + [32]))
	if ( ((int_32)*($4) == (int_32)*($2 + [76])) ){ goto $label$1 }
	$1 = *($2 + [16])
	$9 = *($6)
	$8 = *($7)
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	
.LOOP $label$8:
	$10 = ($9 + [-24])
	$11 = *($10)
	if ( ((int_64)*($11) == (int_64)$1) ){ goto $label$7 }
	$9 = $10
	if ( ((int_32)$8 != (int_32)$10) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)($2 + [96])), [17201])
	goto $label$5 
	
.LABEL $label$6
	$10 = CALL db_find_i64(*($2 + [96]), *((($2 + [96]) + [8])), (int_64)-5069074825895811056, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$4 }
	$11 = CALL $40(($2 + [96]), $10)
	CALL eosio_assert(((int_32)*($11 + [32]) == (int_32)($2 + [96])), [17201])
	
.LABEL $label$5
	$1 = *($0)
	*($2 + [32]) = ($2 + [136])
	CALL eosio_assert([1], [17808])
	CALL $78(($2 + [96]), $11, $1, ($2 + [32]))
	goto $label$3 
	
.LABEL $label$4
	$1 = *($0)
	*($2 + [36]) = ($2 + [136])
	*($2 + [32]) = ($2 + [16])
	CALL $79(($2 + [72]), ($2 + [96]), $1, ($2 + [32]))
	
.LABEL $label$3
	*($2 + [16]) = (*($2 + [16]) + [1])
	CALL $80($5)
	if ( ((int_32)*($2 + [16]) < (int_32)[11]) ){ goto $label$2 }
	
.LABEL $label$1
	*($2 + [92]) = [0]
	CALL $77(($2 + [32]), ($2 + [160]), ($2 + [216]))
	*(($2 + [80])) = [0]
	*(($10 = ($2 + [88]))) = [0]
	*($2 + [76]) = ($2 + [160])
	*($2 + [84]) = ($2 + [160])
	*($2 + [32]) = (int_64)0
	CALL $77(($2 + [16]), ($2 + [160]), ($2 + [32]))
	if ( ((int_32)*($10) == (int_32)*($2 + [20])) ){ goto $label$9 }
	*($2 + [92]) = [1]
	$10 = ($2 + [84])
	*($2 + [32]) = *($10)
	$1 = *(*(CALL $80(($2 + [32])) + [4]))
	if ( ((int_64)$1 == (int_64)*($2 + [216])) ){ goto $label$10 }
	$9 = ($2 + [88])
	$11 = ($2 + [84])
	
.LOOP $label$11:
	CALL $80($10)
	*($2 + [32]) = (int_64)0
	CALL $77(($2 + [16]), ($2 + [160]), ($2 + [32]))
	if ( ((int_32)*($9) == (int_32)*($2 + [20])) ){ goto $label$9 }
	*($2 + [92]) = (*($2 + [92]) + [1])
	*($2 + [32]) = *($11)
	$1 = *(*(CALL $80(($2 + [32])) + [4]))
	if ( ((int_64)$1 != (int_64)*($2 + [216])) ){ goto $label$11 }
	
.LABEL $label$10
	*(($2 + [64])) = [0]
	*($2 + [48]) = (int_64)-1
	*($2 + [56]) = (int_64)0
	$3 = *($0)
	*($2 + [32]) = $3
	*($2 + [40]) = $1
	$10 = CALL db_find_i64($3, $1, (int_64)-3020372071840163840, *($2 + [208]))
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$13 }
	$10 = CALL $81(($2 + [32]), $10)
	CALL eosio_assert(((int_32)*($10 + [40]) == (int_32)($2 + [32])), [17201])
	$1 = *($0)
	*($2 + [20]) = ($2 + [72])
	*($2 + [16]) = ($2 + [92])
	CALL eosio_assert([1], [17808])
	CALL $82(($2 + [32]), $10, $1, ($2 + [16]))
	$11 = *($2 + [56])
	if ( $11 ){ goto $label$12 }
	goto $label$9 
	
.LABEL $label$13
	$1 = *($0)
	*($2 + [20]) = ($2 + [92])
	*($2 + [16]) = ($2 + [208])
	*($2 + [24]) = ($2 + [72])
	CALL $83(($2 + [8]), ($2 + [32]), $1, ($2 + [16]))
	$11 = *($2 + [56])
	if ( ($11 == 0) ){ goto $label$9 }
	
.LABEL $label$12
	$8 = ($2 + [60])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$15 }
	
.LOOP $label$16:
	$10 = ($10 + [-24])
	$9 = *($10)
	*($10) = [0]
	if ( ($9 == 0) ){ goto $label$17 }
	CALL _ZdlPv($9)
	
.LABEL $label$17
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$16 }
	$10 = *(($2 + [56]))
	goto $label$14 
	
.LABEL $label$15
	$10 = $11
	
.LABEL $label$14
	*($8) = $11
	CALL _ZdlPv($10)
	
.LABEL $label$9
	$11 = *($2 + [120])
	if ( ($11 == 0) ){ goto $label$18 }
	$8 = ($2 + [124])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$20 }
	
.LOOP $label$21:
	$10 = ($10 + [-24])
	$9 = *($10)
	*($10) = [0]
	if ( ($9 == 0) ){ goto $label$22 }
	CALL _ZdlPv($9)
	
.LABEL $label$22
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$21 }
	$10 = *(($2 + [120]))
	goto $label$19 
	
.LABEL $label$20
	$10 = $11
	
.LABEL $label$19
	*($8) = $11
	CALL _ZdlPv($10)
	
.LABEL $label$18
	$11 = *($2 + [192])
	if ( ($11 == 0) ){ goto $label$23 }
	$8 = ($2 + [196])
	$10 = *($8)
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$25 }
	
.LOOP $label$26:
	$10 = ($10 + [-24])
	$9 = *($10)
	*($10) = [0]
	if ( ($9 == 0) ){ goto $label$27 }
	CALL _ZdlPv($9)
	
.LABEL $label$27
	if ( ((int_32)$11 != (int_32)$10) ){ goto $label$26 }
	$10 = *(($2 + [192]))
	goto $label$24 
	
.LABEL $label$25
	$10 = $11
	
.LABEL $label$24
	*($8) = $11
	CALL _ZdlPv($10)
	
.LABEL $label$23
	$global$0 = ($2 + [224])
}

void .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [4])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$2 = *($0 + [12])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($0 + [16])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [17331])
	CALL memcpy(*($0 + [4]), $3, [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$3 = $2
	$global$0 = $2
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [32])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [17252])
	if ( ($4 <= [513]) ){ goto $label$5 }
	$2 = CALL $135($4)
	goto $label$4 
	
.LABEL $label$5
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$4
	CALL db_get_i64($1, $2, $4)
	*(($5 = CALL _Znwj([40])) + [24]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [17275])
	CALL memcpy($5, $2, [8])
	$6 = ($4 & [-8])
	CALL eosio_assert(((int_32)$6 != (int_32)[8]), [17275])
	CALL memcpy(($5 + [8]), ($2 + [8]), [8])
	CALL eosio_assert(((int_32)$6 != (int_32)[16]), [17275])
	CALL memcpy(($5 + [16]), ($2 + [16]), [8])
	*($5 + [32]) = [-1]
	*($5 + [28]) = $1
	*($3 + [24]) = $5
	$7 = *($5)
	*($3 + [16]) = $7
	*($3 + [12]) = $1
	$8 = ($0 + [28])
	$6 = *($8)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($6 + [8]) = $7
	*($6 + [16]) = $1
	*($3 + [24]) = [0]
	*($6) = $5
	*($8) = ($6 + [24])
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $76(($0 + [24]), ($3 + [24]), ($3 + [16]), ($3 + [12]))
	if ( ($4 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $139($2)
	
.LABEL $label$6
	$1 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$9 }
	CALL _ZdlPv($1)
	
.LABEL $label$9
	$global$0 = ($3 + [32])
	return $5
}

void .FUNC $76 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL _Znwj(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $126($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$11 }
	CALL _ZdlPv($2)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $77 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [16])
	$global$0 = $3
	*($3 + [8]) = (int_64)0
	*($3) = *($2)
	$4 = [0]
	$2 = *($1)
	$5 = CALL db_idx64_lowerbound(*($2), *($2 + [8]), (int_64)-3020376800539181056, $3, ($3 + [8]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$1 }
	$6 = *($3 + [8])
	$9 = *(($7 + [28]))
	$7 = *($1)
	$8 = *($7 + [24])
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	
.LOOP $label$5:
	$2 = ($9 + [-24])
	$4 = *($2)
	if ( ((int_64)*($4) == (int_64)$6) ){ goto $label$4 }
	$9 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$8 == (int_32)$9) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$7), [17201])
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $71($7, CALL $fimport$6(*($7), *($7 + [8]), (int_64)-3020376800539181056, $6))
	CALL eosio_assert(((int_32)*($4 + [24]) == (int_32)$7), [17201])
	
.LABEL $label$2
	*(($4 + [32])) = $5
	
.LABEL $label$1
	*($0 + [4]) = $4
	*($0) = $1
	$global$0 = ($3 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([40])) + [24]) = $1
	CALL $75(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [28])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $76(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

int_32 .FUNC $39 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [17201])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)4982871462359400448, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $14($0, $4)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$0), [17201])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

void .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [112])
	$global$0 = $2
	*((($2 + [72]) + [32])) = [0]
	*($2 + [80]) = (int_64)1
	*($2 + [88]) = (int_64)-1
	*($2 + [96]) = (int_64)0
	$3 = *($0)
	*($2 + [72]) = $3
	*($2 + [24]) = ($2 + [72])
	CALL $64(($2 + [64]), ($2 + [72]), $3, ($2 + [24]))
	*((($2 + [24]) + [32])) = [0]
	*($2 + [32]) = (int_64)0
	*($2 + [40]) = (int_64)-1
	*($2 + [48]) = (int_64)0
	$3 = *($0)
	*($2 + [24]) = $3
	*($2 + [20]) = $1
	*($2 + [16]) = ($2 + [64])
	CALL $65(($2 + [8]), ($2 + [24]), $3, ($2 + [16]))
	$4 = *($2 + [48])
	if ( ($4 == 0) ){ goto $label$1 }
	$5 = ($2 + [52])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$3 }
	
.LOOP $label$4:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$5 }
	CALL _ZdlPv($1)
	
.LABEL $label$5
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$4 }
	$0 = *(($2 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$0 = $4
	
.LABEL $label$2
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$1
	$4 = *($2 + [96])
	if ( ($4 == 0) ){ goto $label$6 }
	$5 = ($2 + [100])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$8 }
	
.LOOP $label$9:
	$0 = ($0 + [-24])
	$1 = *($0)
	*($0) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL _ZdlPv($1)
	
.LABEL $label$10
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$9 }
	$0 = *(($2 + [96]))
	goto $label$7 
	
.LABEL $label$8
	$0 = $4
	
.LABEL $label$7
	*($5) = $4
	CALL _ZdlPv($0)
	
.LABEL $label$6
	$global$0 = ($2 + [112])
}

void .FUNC $37 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	float_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [192])
	$global$0 = $3
	*($3 + [176]) = $2
	*($3 + [184]) = $1
	CALL memcpy(($3 + [72]), CALL $31(($0 + [8]), $1, [17582]), [104])
	$4 = ((float_64)*(((*($3 + [88]) << [5]) + [17608])) * (float_64)*($3 + [120]))
	if ( (((float_64)$4 < (float_64)(float_64)18446744073709551615) & ((float_64)$4 >= (float_64)(float_64)0)) ){ goto $label$2 }
	$1 = (int_64)0
	goto $label$1 
	
.LABEL $label$2
	$1 = (Rounds 0)($4)
	
.LABEL $label$1
	*($3 + [64]) = $1
	*(($3 + [56])) = [0]
	*($3 + [40]) = (int_64)-1
	*($3 + [48]) = (int_64)0
	$1 = *($0)
	*($3 + [24]) = $1
	*($3 + [32]) = *($3 + [80])
	*($3 + [12]) = ($3 + [184])
	*($3 + [8]) = ($3 + [176])
	*($3 + [16]) = ($3 + [72])
	*($3 + [20]) = ($3 + [64])
	CALL $54($3, ($3 + [24]), $1, ($3 + [8]))
	$5 = *($3 + [48])
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = ($3 + [52])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$7 }
	CALL _ZdlPv($7)
	
.LABEL $label$7
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [48]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $5
	
.LABEL $label$4
	*($6) = $5
	CALL _ZdlPv($0)
	
.LABEL $label$3
	$global$0 = ($3 + [192])
}

void .FUNC $78 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	$4 = ($global$0 - [80])
	$global$0 = $4
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [17843])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [17889])
	$5 = *($1)
	*($4 + [64]) = *(*($3) + [12 align=4])
	*($1 + [8]) = *(*(CALL $80(($4 + [64])) + [4]))
	*($4 + [64]) = *(*($3) + [12 align=4])
	*($1 + [16]) = *(*(CALL $80(($4 + [64])) + [4]) + [8])
	*($4 + [64]) = *(*($3) + [12 align=4])
	*($1 + [24]) = *(*(CALL $80(($4 + [64])) + [4]) + [16])
	CALL eosio_assert(((int_64)$5 == (int_64)*($1)), [17940])
	*($4 + [48]) = ($4 + [32])
	*($4 + [44]) = $4
	*($4 + [40]) = $4
	*($4 + [56]) = ($4 + [40])
	*($4 + [68]) = ($1 + [8])
	*($4 + [64]) = $1
	*($4 + [72]) = ($1 + [16])
	*($4 + [76]) = ($1 + [24])
	CALL $89(($4 + [64]), ($4 + [56]))
	CALL db_update_i64(*($1 + [36]), $2, $4, [32])
	if ( (uint_64)($5 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	$global$0 = ($4 + [80])
}

void .FUNC $79 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [17280])
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL _Znwj([48])) + [32]) = $1
	CALL $84(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3)
	*($4 + [16]) = $2
	$5 = *($3 + [36])
	*($4 + [12]) = $5
	$6 = ($1 + [28])
	$7 = *($6)
	if ( ((uint_32)$7 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($7 + [8]) = $2
	*($7 + [16]) = $5
	*($4 + [32]) = [0]
	*($7) = $3
	*($6) = ($7 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $85(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL _ZdlPv($1)
	
.LABEL $label$3
	$global$0 = ($4 + [48])
}

void .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	$3 = ($0 + [8])
	$4 = *($1)
	$6 = *(($0 + [36]))
	$5 = *(($0 + [32]))
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	
.LOOP $label$5:
	$7 = ($6 + [-24])
	$8 = *($7)
	if ( ((int_64)*($8) == (int_64)$4) ){ goto $label$4 }
	$6 = $7
	if ( ((int_32)$5 != (int_32)$7) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$3 }
	CALL eosio_assert(((int_32)*($8 + [104]) == (int_32)$3), [17201])
	goto $label$2 
	
.LABEL $label$3
	$7 = CALL db_find_i64(*($3), *(($0 + [16])), (int_64)-3020378119791651280, $4)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	$8 = CALL $61($3, $7)
	CALL eosio_assert(((int_32)*($8 + [104]) == (int_32)$3), [17201])
	
.LABEL $label$2
	$4 = *($0)
	*($2 + [8]) = $1
	CALL eosio_assert([1], [17808])
	CALL $62($3, $8, $4, ($2 + [8]))
	
.LABEL $label$1
	*(($2 + [40])) = [0]
	*($2 + [24]) = (int_64)-1
	*($2 + [32]) = (int_64)0
	$4 = *($0)
	*($2 + [8]) = $4
	$9 = *($1 + [8])
	*($2 + [16]) = $9
	$7 = CALL db_find_i64($4, $9, (int_64)-3020378119791651280, *($1))
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$6 }
	$7 = CALL $61(($2 + [8]), $7)
	CALL eosio_assert(((int_32)*($7 + [104]) == (int_32)($2 + [8])), [17201])
	$4 = *($0)
	*($2) = $1
	CALL eosio_assert([1], [17808])
	CALL $63(($2 + [8]), $7, $4, $2)
	$8 = *($2 + [32])
	if ( ($8 == 0) ){ goto $label$6 }
	$5 = ($2 + [36])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$6 = *($7)
	*($7) = [0]
	if ( ($6 == 0) ){ goto $label$10 }
	CALL _ZdlPv($6)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	$7 = *(($2 + [32]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $8
	
.LABEL $label$7
	*($5) = $8
	CALL _ZdlPv($7)
	
.LABEL $label$6
	$global$0 = ($2 + [48])
}

void .FUNC $33 (int_32 $0, int_64 $1, int_64 $2, float_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [80])
	$global$0 = $4
	$3 = ((float_64)*((((CASTING uint_32)(uint_64 $2) << [5]) + [17608])) * (float_64)$3)
	if ( ((float_64)(float_64)|$3| < (float_64)(float_64)9223372036854775808) ){ goto $label$2 }
	$2 = (int_64)-9223372036854775808
	goto $label$1 
	
.LABEL $label$2
	$2 = (Rounds 0)($3)
	
.LABEL $label$1
	*($4 + [72]) = $1
	*($4 + [64]) = $2
	$2 = CALL current_time()
	*(($4 + [56])) = [0]
	*($4 + [40]) = (int_64)-1
	*($4 + [48]) = (int_64)0
	*($4 + [60]) = [0]
	$5 = *($0)
	*($4 + [24]) = $5
	$2 = ((uint_64)$2 / (uint_64)(int_64)1000000)
	$2 = (int_64)
	*($4 + [32]) = $2(((int_64)$2 & (int_64)4294967295) - (CASTING uint_64)(uint_32 ((uint_32)(CASTING uint_32)(uint_64 $2) % (uint_32)[86400]))))
	$6 = CALL db_find_i64($5, $2, (int_64)-3020376800539181056, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $71(($4 + [24]), $6)
	CALL eosio_assert(((int_32)*($6 + [24]) == (int_32)($4 + [24])), [17201])
	$1 = *($0)
	*($4 + [16]) = ($4 + [64])
	CALL eosio_assert([1], [17808])
	CALL $72(($4 + [24]), $6, $1, ($4 + [16]))
	CALL $73($0, *($4 + [72]))
	$7 = *($4 + [48])
	if ( $7 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$1 = *($0)
	*($4 + [20]) = ($4 + [64])
	*($4 + [16]) = ($4 + [72])
	CALL $74(($4 + [8]), ($4 + [24]), $1, ($4 + [16]))
	CALL $73($0, *($4 + [72]))
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = ($4 + [52])
	$0 = *($8)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$9 }
	CALL _ZdlPv($6)
	
.LABEL $label$9
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($4 + [48]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $7
	
.LABEL $label$6
	*($8) = $7
	CALL _ZdlPv($0)
	$global$0 = ($4 + [80])
	return 
	
.LABEL $label$3
	$global$0 = ($4 + [80])
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$3 = [16]
	$4 = ($1 + [16])
	$6 = *($1 + [16])
	$5 = *(($1 + [20]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = *(($1 + [32]))
	$5 = *($1 + [28])
	$3 = (($5 - $3) - $6)
	$7 = ($1 + [28])
	$8 = (CASTING uint_64)(uint_32 ($6 - $5))
	
.LOOP $label$3:
	$3 = ($3 + [-1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	$5 = [0]
	if ( ($3 == 0) ){ goto $label$5 }
	CALL $49($0, ([0] - $3))
	$5 = *(($0 + [4]))
	$3 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$3 = [0]
	
.LABEL $label$4
	*($2) = $3
	*($2 + [8]) = $5
	$0 = ($5 - $3)
	CALL eosio_assert(((int_32)$0 > (int_32)[7]), [17331])
	CALL memcpy($3, $1, [8])
	CALL eosio_assert(((int_32)($0 + [-8]) > (int_32)[7]), [17331])
	CALL memcpy(($3 + [8]), ($1 + [8]), [8])
	*($2 + [4]) = ($3 + [16])
	CALL $106(CALL $105($2, $4), $7)
	$global$0 = ($2 + [16])
}

int_32 .FUNC $31 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	
.LOOP $label$3:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6) == (int_64)$1) ){ goto $label$2 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*($6 + [104]) == (int_32)$0), [17201])
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
	
.LABEL $label$1
	$5 = [0]
	$4 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)-3020378119791651280, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $61($0, $4)
	CALL eosio_assert(((int_32)*($5 + [104]) == (int_32)$0), [17201])
	
.LABEL $label$4
	CALL eosio_assert(((int_32)$5 != (int_32)[0]), $2)
	return $5
}

int_64 .FUNC $129 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	
.LOOP $label$1:
	$1 = *($0)
	$2 = ($1 + [-9])
	$3 = ($0 + [1])
	$0 = $3
	if ( ((int_32)$1 == (int_32)[32]) ){ goto $label$1 }
	$0 = $3
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$2 = [1]
	goto $label$4 
	
.LABEL $label$5
	$2 = [0]
	
.LABEL $label$4
	$1 = *($3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-1])
	$2 = [0]
	
.LABEL $label$2
	$4 = (int_64)0
	$1 = ($1 + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($3 + [1])
	$4 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64))(((int_64)$4 * (int_64)10) - (CASTING int_64)(int_32 $1))
	$1 = *($0)
	$0 = ($0 + [1])
	$1 = ($1 + [-48])
	if ( ($1 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $4 ? (int_64))((int_64)0 - $4) : $2 )
}

void .FUNC $127 (int_32 $0)
{
}