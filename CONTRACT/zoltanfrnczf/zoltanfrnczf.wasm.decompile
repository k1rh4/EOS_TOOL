(data (i32.const 8220) "failed to allocate pages\00Address for account already exists\00")
(data (i32.const 8280) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 8331) "error reading iterator\00")
(data (i32.const 8355) "cannot create objects in table of another contract\00")
(data (i32.const 8406) "write\00")
(data (i32.const 8412) "cannot pass end iterator to modify\00")
(data (i32.const 8447) "object passed to modify is not in multi_index\00")
(data (i32.const 8493) "cannot modify objects in table of another contract\00")
(data (i32.const 8544) "updater cannot change primary key when modifying an object\00")
(data (i32.const 8603) "Address for account not found\00")
(data (i32.const 8633) "unable to find key\00")
(data (i32.const 8652) "Data:\00")
(data (i32.const 8658) "#start#\00")
(data (i32.const 8666) "#end#\00")
(data (i32.const 8672) "cannot pass end iterator to erase\00")
(data (i32.const 8706) "cannot increment end iterator\00")
(data (i32.const 8736) "object passed to erase is not in multi_index\00")
(data (i32.const 8781) "cannot erase objects in table of another contract\00")
(data (i32.const 8831) "attempt to remove object that was not in multi_index\00")
(data (i32.const 8884) "{\00")
(data (i32.const 8886) "}=\00")
(data (i32.const 8889) "}\00")
(data (i32.const 8891) "{=\00")
(data (i32.const 8894) "notFoundIt |\00")
(data (i32.const 8907) "|\00")
(data (i32.const 8909) "notTheTrainer:\00")
(data (i32.const 8924) "\e0\"\00\00")
(data (i32.const 8928) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 8961) "ok\00")
(data (i32.const 8964) "read\00")
(data (i32.const 8969) "get\00")
(data (i32.const 0) "\10#\00\00")
(import "env" "eosio_assert" (func $fimport$0 (param i32 i32)))
(import "env" "memset" (func $fimport$1 (param i32 i32 i32) (result i32)))
(import "env" "action_data_size" (func $fimport$2 (result i32)))
(import "env" "read_action_data" (func $fimport$3 (param i32 i32) (result i32)))
(import "env" "memcpy" (func $fimport$4 (param i32 i32 i32) (result i32)))
(import "env" "abort" (func $fimport$5))
(import "env" "require_auth" (func $fimport$6 (param i64)))
(import "env" "db_find_i64" (func $fimport$7 (param i64 i64 i64 i64) (result i32)))
(import "env" "memmove" (func $fimport$8 (param i32 i32 i32) (result i32)))
(import "env" "__extendsftf2" (func $fimport$9 (param i32 f32)))
(import "env" "__floatsitf" (func $fimport$10 (param i32 i32)))
(import "env" "__multf3" (func $fimport$11 (param i32 i64 i64 i64 i64)))
(import "env" "__floatunsitf" (func $fimport$12 (param i32 i32)))
(import "env" "__divtf3" (func $fimport$13 (param i32 i64 i64 i64 i64)))
(import "env" "__addtf3" (func $fimport$14 (param i32 i64 i64 i64 i64)))
(import "env" "__extenddftf2" (func $fimport$15 (param i32 f64)))
(import "env" "__eqtf2" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "__letf2" (func $fimport$17 (param i64 i64 i64 i64) (result i32)))
(import "env" "__netf2" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$19 (param i32 i64 i64 i64 i64)))
(import "env" "__trunctfdf2" (func $fimport$20 (param i64 i64) (result f64)))
(import "env" "__getf2" (func $fimport$21 (param i64 i64 i64 i64) (result i32)))
(import "env" "__trunctfsf2" (func $fimport$22 (param i64 i64) (result f32)))
(import "env" "prints_l" (func $fimport$23 (param i32 i32)))
(import "env" "__unordtf2" (func $fimport$24 (param i64 i64 i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$25 (param i64 i64) (result i32)))
(import "env" "__fixtfsi" (func $fimport$26 (param i64 i64) (result i32)))
(import "env" "prints" (func $fimport$27 (param i32)))
(import "env" "db_next_i64" (func $fimport$28 (param i32 i32) (result i32)))
(import "env" "eosio_assert_code" (func $fimport$29 (param i32 i64)))
(import "env" "current_receiver" (func $fimport$30 (result i64)))
(import "env" "db_get_i64" (func $fimport$31 (param i32 i32 i32) (result i32)))
(import "env" "db_store_i64" (func $fimport$32 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$33 (param i32 i64 i32 i32)))
(import "env" "db_remove_i64" (func $fimport$34 (param i32)))
(export "apply" (func $34))
(table $0 8 8 anyfunc)
(elem (i32.const 1) $35 $37 $39 $41 $42 $43 $45)
(global $global$0 (mut i32) (i32.const 8192))
(global $global$1 i32 (i32.const 8973))
(global $global$2 i32 (i32.const 8973))


int_32 .FUNC $18 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$1 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	return ($3 - $4)
}

void .FUNC $62 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [192])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [132]) = $2
	*($3 + [128]) = $2
	*($3 + [136]) = ($2 + $4)
	*($3 + [120]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8964])
	$2 = *($3 + [132])
	
.LABEL $label$5
	CALL memcpy(($3 + [120]), $2, [8])
	*($3 + [132]) = ($2 + [8])
	*($3 + [112]) = [0]
	*($3 + [104]) = (int_64)0
	CALL $60(($3 + [128]), ($3 + [104]))
	$2 = *($3 + [132])
	$4 = (($3 + [128]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8964])
	$2 = *($3 + [132])
	
.LABEL $label$6
	CALL memcpy(($3 + [96]), $2, [8])
	$2 = (*($3 + [132]) + [8])
	*($3 + [132]) = $2
	*($3 + [88]) = (int_64)0
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8964])
	$2 = *($3 + [132])
	
.LABEL $label$7
	CALL memcpy(($3 + [88]), $2, [8])
	$2 = (*($3 + [132]) + [8])
	*($3 + [132]) = $2
	$4 = (($3 + [128]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$8 }
	CALL eosio_assert([0], [8964])
	$2 = *($3 + [132])
	
.LABEL $label$8
	CALL memcpy(($3 + [80]), $2, [8])
	*($3 + [132]) = (*($3 + [132]) + [8])
	*(($2 = (($3 + [24]) + [8]))) = *($4)
	*($3 + [24]) = *($3 + [128])
	$2 = *($2)
	*((($3 + [144]) + [8])) = $2
	*(($4 = (($3 + [160]) + [8]))) = $2
	$5 = *($3 + [24])
	*($3 + [160]) = $5
	*($3 + [144]) = $5
	$2 = *($4)
	*((($3 + [176]) + [8])) = $2
	*(($3 + [64])) = $2
	*($3 + [40]) = $0
	*($3 + [48]) = $1
	$0 = *($3 + [160])
	*($3 + [56]) = $0
	*($3 + [176]) = $0
	*(($3 + [76])) = [0]
	*($3 + [68 align=4]) = (int_64)0
	$2 = CALL $20(($3 + [8]), ($3 + [104]))
	CALL $45(($3 + [40]), *($3 + [120]), $2, *($3 + [96]), *($3 + [88]), *($3 + [80]))
	if ( (*($2) & [1]) ){ goto $label$13 }
	if ( (*($3 + [68]) & [1]) ){ goto $label$12 }
	goto $label$11 
	
.LABEL $label$13
	CALL $10(*($2 + [8]))
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$11 }
	
.LABEL $label$12
	CALL $10(*(($3 + [76])))
	if ( ((*($3 + [104]) & [1]) == 0) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	if ( (*($3 + [104]) & [1]) ){ goto $label$9 }
	
.LABEL $label$10
	$global$0 = ($3 + [192])
	return 
	
.LABEL $label$9
	CALL $10(*(($3 + [112])))
	$global$0 = ($3 + [192])
}

void .FUNC $19 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $66 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = $global$0
	$3 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	$global$0 = $3
}

void .FUNC $65 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8964])
	
.LABEL $label$5
	CALL memcpy(($3 + [40]), $2, [8])
	*(($3 + [20])) = ($2 + [8])
	*(($3 + [24])) = $5
	*(($4 = ($3 + [36]))) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	*($3 + [28 align=4]) = (int_64)0
	CALL $35($3, *($3 + [40]))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*($4))
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}

void .FUNC $39 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$3 = ($global$0 - [80])
	$global$0 = $3
	*((($4 = $3) + [72])) = [0]
	*($4 + [56]) = (int_64)-1
	*($4 + [64]) = (int_64)0
	$5 = *($0)
	*($4 + [40]) = $5
	*($4 + [48]) = $5
	$6 = CALL db_find_i64($5, $5, (int_64)5310416428162088960, $1)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)*(CALL $47(($4 + [40]), $6) + [24]) == (int_32)($4 + [40])) ){ goto $label$1 }
	CALL eosio_assert([0], [8280])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8603])
	
.LABEL $label$1
	$6 = CALL $52(($4 + [40]), $2, [8633])
	$7 = CALL $20(($4 + [16]), $6)
	*($4 + [32]) = *($6 + [16])
	CALL prints([8652])
	$6 = *($4 + [16])
	$8 = ($6 & [1])
	CALL prints_l(( *($4 + [24]) ? (($4 + [16]) | [1]) : $8 ), ( *($4 + [20]) ? uint_32($6 >> [1]) : $8 ))
	$6 = ($0 + [28])
	CALL $22($6, $7)
	CALL $30($4, [8658], $6)
	$7 = CALL $26($4, [8666])
	$9 = *($7 + [4])
	$8 = *($7)
	*($7) = (int_64)0
	$10 = *($7 + [8])
	*($7 + [8]) = [0]
	if ( (*($0 + [28]) & [1]) ){ goto $label$4 }
	*($6) = [0]
	$7 = ($0 + [36])
	$11 = ($0 + [32])
	goto $label$3 
	
.LABEL $label$4
	*(*(($7 = ($0 + [36])))) = [0]
	*(($11 = ($0 + [32]))) = [0]
	
.LABEL $label$3
	CALL $24($6, [0])
	*(($0 + [32])) = $9
	*($0 + [28]) = $8
	*($7) = $10
	if ( (*($4) & [1]) ){ goto $label$8 }
	if ( ($8 & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $10(*($4 + [8]))
	$8 = *($6)
	if ( (($8 & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	$0 = *($11)
	goto $label$5 
	
.LABEL $label$6
	$0 = uint_32(($8 & [254]) >> [1])
	
.LABEL $label$5
	$8 = $3
	$0 = ($3 - (($0 + [16]) & [-16]))
	$global$0 = $0
	if ( (*($6) & [1]) ){ goto $label$10 }
	$6 = ($6 + [1])
	goto $label$9 
	
.LABEL $label$10
	$6 = *($7)
	
.LABEL $label$9
	CALL $32($0, $6)
	CALL eosio_assert([0], $0)
	$8
	if ( ((*($4 + [16]) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*(($4 + [24])))
	
.LABEL $label$11
	$7 = *($4 + [64])
	if ( ($7 == 0) ){ goto $label$12 }
	$3 = ($4 + [68])
	$0 = *($3)
	if ( ((int_32)$0 == (int_32)$7) ){ goto $label$14 }
	
.LOOP $label$15:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$16 }
	if ( ((*($6) & [1]) == 0) ){ goto $label$17 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$17
	CALL $10($6)
	
.LABEL $label$16
	if ( ((int_32)$7 != (int_32)$0) ){ goto $label$15 }
	$0 = *(($4 + [64]))
	goto $label$13 
	
.LABEL $label$14
	$0 = $7
	
.LABEL $label$13
	*($3) = $7
	CALL $10($0)
	
.LABEL $label$12
	$global$0 = ($4 + [80])
}

void .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $3) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ($3 - $4)
	$6 = ($5 + $1)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$3 }
	$7 = [2147483647]
	$2 = ($2 - $4)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$2 = ($2 << [1])
	$7 = ( $6 ? $2 : ($2 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $8($7)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($3) = [0]
	$3 = (*($0) + [1])
	*($0) = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $33($0)
	
.LABEL $label$2
	$7 = ($2 + $7)
	$4 = (($3 + $1) - $4)
	$5 = ($2 + $5)
	$3 = $5
	
.LOOP $label$8:
	*($3) = [0]
	$3 = ($3 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = ($2 + $4)
	$1 = *($0)
	$6 = ($0 + [4])
	$3 = (*($6) - $1)
	$2 = ($5 - $3)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($2, $1, $3)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $2
	*($6) = $4
	*(($0 + [8])) = $7
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $10($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $67 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = $global$0
	$3 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	$global$0 = $3
}

int_32 .FUNC $29 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	if ( ($3 & [1]) ){ goto $label$3 }
	$4 = ($0 + [1])
	$5 = [-1]
	$0 = uint_32($3 >> [1])
	if ( ((uint_32)$0 <= (uint_32)$2) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$4 = *($0 + [8])
	$5 = [-1]
	$0 = *($0 + [4])
	if ( ((uint_32)$0 > (uint_32)$2) ){ goto $label$1 }
	
.LABEL $label$2
	return $5
	
.LABEL $label$1
	$0 = ($0 - $2)
	if ( ($0 == 0) ){ goto $label$4 }
	$0 = CALL $17(($4 + $2), ($1 & [255]), $0)
	return ( ($0 - $4) ? [-1] : $0 )
	
.LABEL $label$4
	return ( ([0] - $4) ? [-1] : [0] )
}

int_32 .FUNC $28 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$5 = *($0)
	$6 = ($5 & [1])
	if ( $6 ){ goto $label$3 }
	$5 = uint_32($5 >> [1])
	if ( ((uint_32)$5 >= (uint_32)$1) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = *($0 + [4])
	if ( ($5 <= $1) ){ goto $label$1 }
	
.LABEL $label$2
	$7 = ($5 - $1)
	$2 = ( $7 ? $2 : ($7 <= $2) )
	$8 = [10]
	if ( ($6 == 0) ){ goto $label$4 }
	$8 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$4
	if ( ((uint_32)(($2 - $5) + $8) >= (uint_32)$4) ){ goto $label$5 }
	CALL $23($0, $8, ((($5 + $4) - $2) - $8), $5, $1, $2, $4, $3)
	return $0
	
.LABEL $label$5
	if ( $6 ){ goto $label$11 }
	$8 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$8 = *($0 + [8])
	if ( ((int_32)$2 != (int_32)$4) ){ goto $label$9 }
	
.LABEL $label$10
	$2 = $4
	$6 = $4
	if ( ($6 == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$9 = ($7 - $2)
	if ( ($9 == 0) ){ goto $label$13 }
	$7 = ($8 + $1)
	if ( ((uint_32)$2 <= (uint_32)$4) ){ goto $label$12 }
	if ( ($4 == 0) ){ goto $label$14 }
	CALL memmove($7, $3, $4)
	
.LABEL $label$14
	CALL memmove(($7 + $4), ($7 + $2), $9)
	goto $label$6 
	
.LABEL $label$13
	$6 = $4
	if ( $6 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$12
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$15 }
	if ( ((uint_32)($8 + $5) <= (uint_32)$3) ){ goto $label$15 }
	if ( ((uint_32)($7 + $2) <= (uint_32)$3) ){ goto $label$16 }
	if ( ($2 == 0) ){ goto $label$17 }
	CALL memmove($7, $3, $2)
	
.LABEL $label$17
	$6 = ($4 - $2)
	$3 = ($3 + $4)
	$1 = ($2 + $1)
	$2 = [0]
	$4 = ($8 + $1)
	CALL memmove(($6 + $4), ($4 + [0]), $9)
	if ( $6 ){ goto $label$7 }
	goto $label$8 
	
.LABEL $label$16
	$3 = ($3 + ($4 - $2))
	
.LABEL $label$15
	$6 = $4
	CALL memmove(($7 + $6), ($7 + $2), $9)
	if ( $6 ){ goto $label$7 }
	
.LABEL $label$8
	$4 = [0]
	goto $label$6 
	
.LABEL $label$7
	CALL memmove(($8 + $1), $3, $6)
	$4 = $6
	
.LABEL $label$6
	$4 = (($4 - $2) + $5)
	if ( (*($0) & [1]) ){ goto $label$18 }
	*($0) = ($4 << [1])
	*(($8 + $4)) = [0]
	return $0
	
.LABEL $label$18
	*($0 + [4]) = $4
	*(($8 + $4)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $21 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$6 = ($5 & [1])
	$5 = *($1)
	$5 = ( *($1 + [4]) ? uint_32($5 >> [1]) : $6 )
	if ( ($5 <= $2) ){ goto $label$1 }
	$5 = ($5 - $2)
	$3 = ( $5 ? $3 : ($5 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$7 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$3 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$2 }
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$3
	$8 = (($3 + [16]) & [-16])
	$5 = CALL $8($8)
	*($0) = ($8 | [1])
	*($0 + [8]) = $5
	*($0 + [4]) = $3
	
.LABEL $label$2
	CALL memcpy($5, (( $7 ? ($1 + [1]) : $6 ) + $2), $3)
	*(($5 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($2 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($2) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$2 = *($1 + [4])
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$2 }
	$3 = *($1 + [8])
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($2 << [1])
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$4
	$4 = (($2 + [16]) & [-16])
	$1 = CALL $8($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $2
	
.LABEL $label$3
	CALL memcpy($1, $3, $2)
	*(($1 + $2)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $23 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$4 }
	$8 = ($0 + [1])
	$9 = [-17]
	if ( ((uint_32)$1 <= (uint_32)[2147483622]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = *($0 + [8])
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$2 }
	
.LABEL $label$3
	$9 = [11]
	$2 = ($2 + $1)
	$10 = ($1 << [1])
	$2 = ( $10 ? $2 : ($2 <= $10) )
	if ( ($2 <= [11]) ){ goto $label$2 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$2
	$2 = CALL $8($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $10($8)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$3 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $3 )
	$4 = ($1 + [1])
	$5 = *($1 + [8])
	$1 = [10]
	$6 = *($0)
	$7 = ($6 & [1])
	if ( ($7 == 0) ){ goto $label$5 }
	$1 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$5
	$3 = ( $5 ? $4 : $3 )
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $7 ){ goto $label$7 }
	$4 = uint_32($6 >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $7 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$4 = *($0 + [4])
	
.LABEL $label$6
	CALL $23($0, $1, ($2 - $1), $4, [0], $4, $2, $3)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $3, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $16($1)
	$3 = [10]
	$4 = *($0)
	$5 = ($4 & [1])
	if ( ($5 == 0) ){ goto $label$1 }
	$3 = ((*($0) & [-2]) + [-1])
	
.LABEL $label$1
	if ( ((uint_32)$2 <= (uint_32)$3) ){ goto $label$6 }
	if ( $5 ){ goto $label$5 }
	$5 = uint_32($4 >> [1])
	CALL $23($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$6
	if ( $5 ){ goto $label$4 }
	$3 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = *($0 + [4])
	CALL $23($0, $3, ($2 - $3), $5, [0], $5, $2, $1)
	return $0
	
.LABEL $label$4
	$3 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($3, $1, $2)
	
.LABEL $label$2
	*(($3 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	return $0
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$4 }
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$6 }
	$3 = uint_32($2 >> [1])
	$4 = [10]
	goto $label$5 
	
.LABEL $label$6
	$2 = *($0)
	$4 = (($2 & [-2]) + [-1])
	$3 = *($0 + [4])
	
.LABEL $label$5
	$5 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$7 }
	$5 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$7
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$10 }
	if ( ((int_32)$5 != (int_32)[10]) ){ goto $label$11 }
	$6 = [1]
	$1 = ($0 + [1])
	$4 = *($0 + [8])
	$7 = [0]
	$8 = [1]
	if ( ($2 & [1]) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$11
	$1 = CALL $8(($5 + [1]))
	if ( ((uint_32)$5 > (uint_32)$4) ){ goto $label$9 }
	if ( $1 ){ goto $label$9 }
	
.LABEL $label$10
	return (unreachable)
	
.LABEL $label$9
	$2 = *($0)
	if ( ($2 & [1]) ){ goto $label$12 }
	$7 = [1]
	$4 = ($0 + [1])
	$6 = [0]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	goto $label$8 
	
.LABEL $label$12
	$4 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	$8 = [1]
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	
.LABEL $label$8
	$2 = (*($0 + [4]) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	$2 = (uint_32(($2 & [254]) >> $8) + [1])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memcpy($1, $4, $2)
	
.LABEL $label$1
	if ( ($6 == 0) ){ goto $label$13 }
	CALL $10($4)
	
.LABEL $label$13
	if ( ($7 == 0) ){ goto $label$14 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($5 + [1]) | [1])
	return 
	
.LABEL $label$14
	*($0) = ($3 << [1])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $23($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL $16($1)
	$3 = *($0)
	$4 = ($3 & [1])
	if ( $4 ){ goto $label$6 }
	$5 = [10]
	$3 = uint_32($3 >> [1])
	if ( (([10] - $3) <= $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = *($0 + [4])
	$5 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($5 - $3) >= (uint_32)$2) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $23($0, $5, (($3 + $2) - $5), $3, $3, [0], $2, $1)
	goto $label$3 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$3 }
	if ( $4 ){ goto $label$2 }
	$5 = ($0 + [1])
	goto $label$1 
	
.LABEL $label$3
	return $0
	
.LABEL $label$2
	$5 = *($0 + [8])
	
.LABEL $label$1
	CALL memcpy(($5 + $3), $1, $2)
	$2 = ($3 + $2)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return $0
	
.LABEL $label$7
	*($0 + [4]) = $2
	*(($5 + $2)) = [0]
	return $0
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8964])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	CALL $60(*($1), ($3 + [8]))
	$0 = ($3 + [24])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8964])
	$3 = *(($1 + [4]))
	
.LABEL $label$2
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = ($global$0 - [48])
	$global$0 = $4
	*($4 + [40]) = $2
	if ( ((int_64)CALL current_receiver() == (int_64)*($1)) ){ goto $label$1 }
	CALL eosio_assert([0], [8355])
	
.LABEL $label$1
	*($4 + [20]) = $3
	*($4 + [16]) = $1
	*($4 + [24]) = ($4 + [40])
	*(($3 = CALL $8([40]))) = (int_64)0
	*(($3 + [8])) = [0]
	$5 = CALL $16([8354])
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[11]) ){ goto $label$5 }
	*($3) = ($5 << [1])
	$6 = ($3 + [1])
	if ( $5 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$7 = (($5 + [16]) & [-16])
	$6 = CALL $8($7)
	*($3) = ($7 | [1])
	*($3 + [8]) = $6
	*($3 + [4]) = $5
	
.LABEL $label$4
	CALL memcpy($6, [8354], $5)
	
.LABEL $label$3
	*(($6 + $5)) = [0]
	*($3 + [24]) = $1
	CALL $69(($4 + [16]), $3)
	*($4 + [32]) = $3
	$2 = *($3 + [16])
	*($4 + [16]) = $2
	$6 = *($3 + [28])
	*($4 + [12]) = $6
	$7 = ($1 + [28])
	$5 = *($7)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($5 + [8]) = $2
	*($5 + [16]) = $6
	*($4 + [32]) = [0]
	*($5) = $3
	*($7) = ($5 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $70(($1 + [24]), ($4 + [32]), ($4 + [16]), ($4 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($4 + [32])
	*($4 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	if ( ((*($3) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($3 + [8]))
	
.LABEL $label$9
	CALL $10($3)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
	return (unreachable)
	
.LABEL $label$2
	CALL $19($3)
}

void .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	*($1 + [16]) = *(*(*($0 + [4])))
	$4 = *($0)
	CALL $25($1, [8354])
	$5 = *($1)
	$6 = ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($6 + [8])
	$7 = (CASTING uint_64)(uint_32 $6)
	$8 = ($1 + [16])
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	*($3 + [4]) = $2
	*($3) = $2
	*($3 + [8]) = ($2 + $5)
	$9 = *($6 + [4])
	$6 = CALL $72($3, $1)
	if ( ((int_32)(*($6 + [8]) - $9) > (int_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8406])
	$9 = *(($6 + [4]))
	
.LABEL $label$4
	CALL memcpy($9, $8, [8])
	*(($6 = ($6 + [4]))) = (*($6) + [8])
	$7 = *(($1 + [16]))
	*($1 + [28]) = CALL db_store_i64(*($4 + [8]), (int_64)5310416428162088960, *(*($0 + [8])), $7, $2, $5)
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$7 }
	if ( ((uint_64)$7 >= (uint_64)*($4 + [16])) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	CALL $2($2)
	if ( (uint_64)($7 <= *($4 + [16])) ){ goto $label$5 }
	
.LABEL $label$6
	*(($4 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	$global$0 = ($3 + [16])
	return 
	
.LABEL $label$5
	$global$0 = ($3 + [16])
}

void .FUNC $68 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [16])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$1 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*(($3 + [8])) = [0]
	*($3) = (int_64)0
	$4 = CALL $16([8961])
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[11]) ){ goto $label$7 }
	*($3) = ($4 << [1])
	$2 = ($3 | [1])
	if ( $4 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$5 = (($4 + [16]) & [-16])
	$2 = CALL $8($5)
	*($3) = ($5 | [1])
	*($3 + [8]) = $2
	*($3 + [4]) = $4
	
.LABEL $label$6
	CALL memcpy($2, [8961], $4)
	
.LABEL $label$5
	*(($2 + $4)) = [0]
	if ( ((*($3) & [1]) == 0) ){ goto $label$8 }
	CALL $10(*($3 + [8]))
	
.LABEL $label$8
	$global$0 = ($3 + [16])
	return (unreachable)
	
.LABEL $label$4
	CALL $19($3)
}

void .FUNC $43 (int_32 $0)
{
}

void .FUNC $42 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth($1)
	$3 = [0]
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$4 = *($0)
	*($2) = $4
	*($2 + [8]) = $4
	$0 = CALL db_find_i64($4, $4, (int_64)5310416428162088960, $1)
	if ( ((int_32)$0 <= (int_32)[-1]) ){ goto $label$2 }
	$3 = CALL $47($2, $0)
	if ( ((int_32)*($3 + [24]) == (int_32)$2) ){ goto $label$1 }
	CALL eosio_assert([0], [8280])
	goto $label$1 
	
.LABEL $label$2
	CALL eosio_assert([0], [8603])
	CALL eosio_assert([0], [8672])
	CALL eosio_assert([0], [8706])
	
.LABEL $label$1
	$0 = CALL db_next_i64(*($3 + [28]), ($2 + [40]))
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$3 }
	CALL $47($2, $0)
	
.LABEL $label$3
	CALL $53($2, $3)
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$4 }
	$6 = ($2 + [28])
	$3 = *($6)
	if ( ((int_32)$3 == (int_32)$5) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = ($3 + [-24])
	$0 = *($3)
	*($3) = [0]
	if ( ($0 == 0) ){ goto $label$8 }
	if ( ((*($0) & [1]) == 0) ){ goto $label$9 }
	CALL $10(*($0 + [8]))
	
.LABEL $label$9
	CALL $10($0)
	
.LABEL $label$8
	if ( ((int_32)$5 != (int_32)$3) ){ goto $label$7 }
	$3 = *(($2 + [24]))
	goto $label$5 
	
.LABEL $label$6
	$3 = $5
	
.LABEL $label$5
	*($6) = $5
	CALL $10($3)
	
.LABEL $label$4
	$global$0 = ($2 + [48])
}

void .FUNC $41 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$3 = ($global$0 - [64])
	$global$0 = $3
	*($3 + [56]) = $2
	CALL require_auth($1)
	*(($3 + [48])) = [0]
	*($3 + [32]) = (int_64)-1
	*($3 + [40]) = (int_64)0
	$2 = *($0)
	*($3 + [16]) = $2
	*($3 + [24]) = $2
	$0 = CALL db_find_i64($2, $2, (int_64)5310416428162088960, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	if ( ((int_32)*(CALL $47(($3 + [16]), $0) + [24]) == (int_32)($3 + [16])) ){ goto $label$2 }
	CALL eosio_assert([0], [8280])
	
.LABEL $label$2
	CALL eosio_assert([0], [8245])
	
.LABEL $label$1
	*($3 + [8]) = ($3 + [56])
	CALL $48($3, ($3 + [16]), $1, ($3 + [8]))
	$4 = *($3 + [40])
	if ( ($4 == 0) ){ goto $label$3 }
	$5 = ($3 + [44])
	$0 = *($5)
	if ( ((int_32)$0 == (int_32)$4) ){ goto $label$5 }
	
.LOOP $label$6:
	$0 = ($0 + [-24])
	$6 = *($0)
	*($0) = [0]
	if ( ($6 == 0) ){ goto $label$7 }
	if ( ((*($6) & [1]) == 0) ){ goto $label$8 }
	CALL $10(*($6 + [8]))
	
.LABEL $label$8
	CALL $10($6)
	
.LABEL $label$7
	if ( ((int_32)$4 != (int_32)$0) ){ goto $label$6 }
	$0 = *(($3 + [40]))
	goto $label$4 
	
.LABEL $label$5
	$0 = $4
	
.LABEL $label$4
	*($5) = $4
	CALL $10($0)
	
.LABEL $label$3
	$global$0 = ($3 + [64])
}

int_32 .FUNC $40 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$3 = ($global$0 - [64])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = (int_64)0
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8964])
	
.LABEL $label$5
	$3 = ($2 + $7)
	$8 = (($4 + [48]) + [8])
	CALL memcpy(($4 + [48]), $2, [8])
	$9 = ($2 + [8])
	if ( ((int_32)($7 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8964])
	
.LABEL $label$6
	CALL memcpy($8, $9, [8])
	*(($4 + [32])) = $3
	*(($4 + [44])) = [0]
	*($4 + [24]) = $2
	*(($4 + [28])) = ($2 + [16])
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [36 align=4]) = (int_64)0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	$0 = *((($4 + [48]) + [8]))
	$1 = *($4 + [48])
	if ( ($5 & [1]) ){ goto $label$11 }
	CALL void $3((int_32 $1), (int_64 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL void $3((int_32 $1), (int_64 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = [1]
	if ( (*($4 + [36]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($4 + [64])
	return $2
	
.LABEL $label$7
	CALL $10(*(($4 + [44])))
	$global$0 = ($4 + [64])
	return $2
}

int_32 .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$2 = ($global$0 - [48])
	$global$0 = $2
	*(($3 = $2) + [44]) = $1
	$5 = *(($0 + [28]))
	$4 = *($0 + [24])
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	
.LOOP $label$3:
	if ( ((int_32)*(($5 + [-8])) == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [-24])
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$1 }
	$5 = *(($5 + [-24]))
	$global$0 = ($3 + [48])
	return $5
	
.LABEL $label$1
	$4 = CALL db_get_i64($1, [0], [0])
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$6 }
	if ( ((uint_32)$4 >= (uint_32)[513]) ){ goto $label$5 }
	$5 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $5
	$2 = [0]
	goto $label$4 
	
.LABEL $label$6
	CALL eosio_assert([0], [8331])
	
.LABEL $label$5
	$5 = CALL $1($4)
	$2 = [1]
	
.LABEL $label$4
	CALL db_get_i64($1, $5, $4)
	*($3 + [36]) = $5
	*($3 + [32]) = $5
	*($3 + [40]) = ($5 + $4)
	*($3 + [12]) = ($3 + [32])
	*($3 + [16]) = ($3 + [44])
	*($3 + [8]) = $0
	$1 = CALL $8([40])
	$6 = CALL $71($1, $0, ($3 + [8]))
	*($3 + [24]) = $1
	$7 = *($1 + [16])
	*($3 + [8]) = $7
	$8 = *($1 + [28])
	*($3 + [4]) = $8
	$9 = ($0 + [28])
	$4 = *($9)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $7
	*($4 + [16]) = $8
	*($3 + [24]) = [0]
	*($4) = $1
	*($9) = ($4 + [24])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	CALL $70(($0 + [24]), ($3 + [24]), ($3 + [8]), ($3 + [4]))
	if ( ($2 == 0) ){ goto $label$7 }
	
.LABEL $label$8
	CALL $2($5)
	
.LABEL $label$7
	$5 = *($3 + [24])
	*($3 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$10 }
	if ( ((*($5) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*($5 + [8]))
	
.LABEL $label$11
	CALL $10($5)
	
.LABEL $label$10
	$global$0 = ($3 + [48])
	return $6
}

int_32 .FUNC $46 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [176])
	$global$0 = $3
	*(($4 = $3) + [120]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [104]) = (int_64)0
	*($4 + [112]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [160]) = ($4 + [56])
	*($4 + [16]) = ($4 + [72])
	CALL $54(($4 + [16]), ($4 + [160]))
	*(($3 = ($4 + [8]))) = *($4 + [64])
	*($4) = *($4 + [56])
	$3 = *($3)
	*((($4 + [128]) + [8])) = $3
	*(($6 = (($4 + [144]) + [8]))) = $3
	$7 = *($4)
	*($4 + [144]) = $7
	*($4 + [128]) = $7
	$3 = *($6)
	*((($4 + [160]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [144])
	*($4 + [32]) = $0
	*($4 + [160]) = $0
	*(($4 + [52])) = [0]
	*($4 + [44 align=4]) = (int_64)0
	*($4 + [164]) = ($4 + [120])
	*($4 + [160]) = ($4 + [16])
	CALL $55(($4 + [160]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	$2 = [1]
	if ( (*($4 + [44]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $10(*(($4 + [52])))
	if ( (*($4 + [80]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [80]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*(($4 + [88])))
	
.LABEL $label$4
	$global$0 = ($4 + [176])
	return [1]
}

void .FUNC $45 (int_32 $0, int_64 $1, int_32 $2, int_64 $3, int_64 $4, int_64 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	$6 = ($global$0 - [208])
	$global$0 = $6
	$7 = [0]
	$9 = CALL $29($2, [44], [0])
	$8 = $6
	$10 = CALL $21(($8 + [192]), $2, ($9 + [1]), [-1], $2)
	$11 = CALL $21(($8 + [176]), $2, [0], $9, $2)
	if ( ((int_64)$1 == (int_64)0) ){ goto $label$4 }
	$12 = *([0] + [8924])
	$13 = $1
	
.LOOP $label$6:
	*((($8 + [120]) + ($9 = $7))) = *(($12 + (CASTING uint_32)(uint_64 (uint_64)((int_64)$13 & (int_64)-576460752303423488) >> (uint_64)( (int_64)60 ? (int_64)59 : ((int_32)$9 == (int_32)[12]) )))))
	$7 = ($9 + [1])
	if ( ((uint_32)$9 > (uint_32)[11]) ){ goto $label$5 }
	$13 = ((int_64)$13 << (int_64)5)
	if ( ((int_64)$13 != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	*(($8 + [168])) = [0]
	*($8 + [160]) = (int_64)0
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$3 }
	*($8 + [160]) = ($7 << [1])
	$12 = (($8 + [160]) | [1])
	goto $label$2 
	
.LABEL $label$4
	*(($8 + [168])) = [0]
	*($8 + [160]) = (int_64)0
	*($8 + [160]) = [0]
	$9 = (($8 + [160]) | [1])
	goto $label$1 
	
.LABEL $label$3
	$14 = (($7 + [16]) & [-16])
	$12 = CALL $8($14)
	*($8 + [160]) = ($14 | [1])
	*($8 + [168]) = $12
	*($8 + [164]) = $7
	
.LABEL $label$2
	$14 = ($9 + [1])
	$9 = [0]
	
.LOOP $label$7:
	*(($12 + $9)) = *((($8 + [120]) + $9))
	$9 = ($9 + [1])
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$7 }
	$9 = ($12 + $7)
	
.LABEL $label$1
	*($9) = [0]
	$7 = ($9 & [1])
	$9 = *($8 + [176])
	$12 = ($9 & [1])
	$9 = *($8 + [160])
	$15 = uint_32($9 >> [1])
	$16 = ( *($8 + [164]) ? $15 : $12 )
	if ( ((int_32)$16 != (int_32)( *($11 + [4]) ? uint_32($9 >> [1]) : $7 )) ){ goto $label$17 }
	$9 = (($8 + [160]) | [1])
	$14 = ($11 + [1])
	$7 = ( *($11 + [8]) ? $14 : $7 )
	if ( $12 ){ goto $label$16 }
	if ( ($16 == 0) ){ goto $label$15 }
	$12 = ([0] - $15)
	
.LOOP $label$18:
	if ( ((int_32)*($9) != (int_32)*($7)) ){ goto $label$14 }
	$7 = ($7 + [1])
	$9 = ($9 + [1])
	$12 = ($12 + [1])
	if ( $12 ){ goto $label$18 }
	goto $label$15 
	
.LABEL $label$17
	$14 = ($11 + [1])
	goto $label$14 
	
.LABEL $label$16
	if ( ($16 == 0) ){ goto $label$15 }
	if ( CALL $18(( *($8 + [168]) ? $9 : $12 ), $7, $16) ){ goto $label$14 }
	
.LABEL $label$15
	CALL require_auth($1)
	*(($8 + [152])) = [0]
	*($8 + [136]) = (int_64)-1
	*($8 + [144]) = (int_64)0
	$13 = *($0)
	*($8 + [120]) = $13
	*($8 + [128]) = $13
	$9 = CALL db_find_i64($13, $13, (int_64)5310416428162088960, $1)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$20 }
	if ( ((int_32)*(CALL $47(($8 + [120]), $9) + [24]) == (int_32)($8 + [120])) ){ goto $label$19 }
	CALL eosio_assert([0], [8280])
	goto $label$19 
	
.LABEL $label$20
	CALL eosio_assert([0], [8603])
	
.LABEL $label$19
	$9 = CALL $52(($8 + [120]), $5, [8633])
	$7 = CALL $20(($8 + [96]), $9)
	*($8 + [112]) = *($9 + [16])
	$14 = ($0 + [28])
	CALL $22($14, $7)
	CALL $30(($8 + [64]), [8884], $2)
	$9 = CALL $26(($8 + [64]), [8886])
	$7 = ($9 + [8])
	*((($8 + [80]) + [8])) = *($7)
	*($8 + [80]) = *($9)
	*($9) = (int_64)0
	*($7) = [0]
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$21 }
	CALL $10(*($8 + [72]))
	
.LABEL $label$21
	CALL $30(($8 + [48]), [8889], $2)
	$9 = CALL $26(($8 + [48]), [8891])
	$7 = ($9 + [8])
	*((($8 + [64]) + [8])) = *($7)
	*($8 + [64]) = *($9)
	*($9) = (int_64)0
	*($7) = [0]
	if ( ((*($8 + [48]) & [1]) == 0) ){ goto $label$22 }
	CALL $10(*($8 + [56]))
	
.LABEL $label$22
	$12 = *($14)
	if ( ($12 & [1]) ){ goto $label$24 }
	$7 = uint_32($12 >> [1])
	$17 = ($14 + [1])
	goto $label$23 
	
.LABEL $label$24
	$7 = *(($0 + [32]))
	$17 = *(($0 + [36]))
	
.LABEL $label$23
	$18 = (($8 + [80]) | [1])
	$2 = ($9 & [1])
	$9 = *($8 + [80])
	$9 = ( *($8 + [84]) ? uint_32($9 >> [1]) : $2 )
	if ( ($9 == 0) ){ goto $label$40 }
	if ( ((int_32)$7 < (int_32)$9) ){ goto $label$39 }
	$15 = ($17 + $7)
	$16 = ( *($8 + [88]) ? $18 : $2 )
	$2 = *($16)
	$12 = $17
	
.LOOP $label$41:
	$7 = (($7 - $9) + [1])
	if ( ($7 == 0) ){ goto $label$39 }
	$7 = CALL $17($12, $2, $7)
	if ( ($7 == 0) ){ goto $label$39 }
	if ( (CALL $18($7, $16, $9) == 0) ){ goto $label$42 }
	$12 = ($7 + [1])
	$7 = ($15 - $12)
	if ( ((int_32)$7 >= (int_32)$9) ){ goto $label$41 }
	goto $label$39 
	
.LABEL $label$42
	if ( ((int_32)$7 == (int_32)$15) ){ goto $label$39 }
	if ( ((int_32)($7 - $17) == (int_32)[-1]) ){ goto $label$39 }
	$12 = *($14)
	
.LABEL $label$40
	if ( ($12 & [1]) ){ goto $label$38 }
	$15 = ($14 + [1])
	$7 = uint_32(($12 & [254]) >> [1])
	goto $label$37 
	
.LABEL $label$39
	CALL $30($8, [8894], $14)
	$9 = CALL $26($8, [8907])
	$7 = ($9 + [8])
	*((($8 + [16]) + [8])) = *($7)
	*($8 + [16]) = *($9)
	*($9) = (int_64)0
	*($7) = [0]
	$9 = *($8 + [80])
	$7 = ($9 & [1])
	$9 = CALL $27(($8 + [16]), ( *((($8 + [80]) + [8])) ? $18 : $7 ), ( *($8 + [84]) ? uint_32($9 >> [1]) : $7 ))
	$7 = ($9 + [8])
	*((($8 + [32]) + [8])) = *($7)
	*($8 + [32]) = *($9)
	*($9) = (int_64)0
	*($7) = [0]
	$9 = CALL $26(($8 + [32]), [8907])
	$7 = ($9 + [8])
	*((($8 + [48]) + [8])) = *($7)
	*($8 + [48]) = *($9)
	*($9) = (int_64)0
	*($7) = [0]
	if ( (*($8 + [32]) & [1]) ){ goto $label$44 }
	if ( (*($8 + [16]) & [1]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$44
	CALL $10(*($8 + [40]))
	if ( ((*($8 + [16]) & [1]) == 0) ){ goto $label$36 }
	
.LABEL $label$43
	CALL $10(*($8 + [24]))
	$9 = [1]
	if ( (*($8) & [1]) ){ goto $label$35 }
	goto $label$34 
	
.LABEL $label$38
	$7 = *(($0 + [32]))
	$15 = *(($0 + [36]))
	
.LABEL $label$37
	$12 = ($9 & [1])
	$9 = *($8 + [80])
	$6 = uint_32($9 >> [1])
	$2 = *($8 + [84])
	$9 = ( $2 ? $6 : $12 )
	if ( ($9 == 0) ){ goto $label$47 }
	if ( ((int_32)$7 < (int_32)$9) ){ goto $label$33 }
	$6 = ($15 + $7)
	$16 = ( *(($8 + [88])) ? $18 : $12 )
	$2 = *($16)
	$12 = $15
	
.LOOP $label$48:
	$7 = (($7 - $9) + [1])
	if ( ($7 == 0) ){ goto $label$33 }
	$7 = CALL $17($12, $2, $7)
	if ( ($7 == 0) ){ goto $label$33 }
	if ( (CALL $18($7, $16, $9) == 0) ){ goto $label$46 }
	$12 = ($7 + [1])
	$7 = ($6 - $12)
	if ( ((int_32)$7 >= (int_32)$9) ){ goto $label$48 }
	goto $label$33 
	
.LABEL $label$47
	$9 = [0]
	goto $label$45 
	
.LABEL $label$46
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$33 }
	$9 = ($7 - $15)
	if ( ((int_32)$9 == (int_32)[-1]) ){ goto $label$33 }
	$7 = *($8 + [80])
	$6 = uint_32($7 >> [1])
	$12 = ($7 & [1])
	$2 = *($8 + [84])
	
.LABEL $label$45
	$7 = *($8 + [64])
	$12 = ($7 & [1])
	CALL $22($14, CALL $28($14, $9, ( $2 ? $6 : $12 ), ( *($8 + [72]) ? (($8 + [64]) | [1]) : $12 ), ( *($8 + [68]) ? uint_32($7 >> [1]) : $12 )))
	$7 = *(($8 + [148]))
	$14 = *(($8 + [144]))
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$52 }
	
.LOOP $label$54:
	$9 = ($7 + [-24])
	$12 = *($9)
	if ( ((int_64)*($12 + [16]) == (int_64)$5) ){ goto $label$53 }
	$7 = $9
	if ( ((int_32)$14 != (int_32)$9) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	if ( ((int_32)$14 == (int_32)$7) ){ goto $label$52 }
	if ( ((int_32)*($12 + [24]) == (int_32)($8 + [120])) ){ goto $label$51 }
	CALL eosio_assert([0], [8280])
	*($8 + [48]) = $0
	if ( $12 ){ goto $label$49 }
	goto $label$50 
	
.LABEL $label$52
	$12 = [0]
	$9 = CALL db_find_i64(*($8 + [120]), *(($8 + [128])), (int_64)5310416428162088960, $5)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$55 }
	$12 = CALL $47(($8 + [120]), $9)
	if ( ((int_32)*($12 + [24]) == (int_32)($8 + [120])) ){ goto $label$51 }
	CALL eosio_assert([0], [8280])
	*($8 + [48]) = $0
	if ( $12 ){ goto $label$49 }
	goto $label$50 
	
.LABEL $label$55
	CALL eosio_assert([0], [8603])
	
.LABEL $label$51
	*($8 + [48]) = $0
	if ( $12 ){ goto $label$49 }
	
.LABEL $label$50
	CALL eosio_assert([0], [8412])
	
.LABEL $label$49
	CALL $56(($8 + [120]), $12, $4, ($8 + [48]))
	goto $label$33 
	
.LABEL $label$36
	$9 = [1]
	if ( ((*($8) & [1]) == 0) ){ goto $label$34 }
	
.LABEL $label$35
	CALL $10(*($8 + [8]))
	
.LABEL $label$34
	$12 = ($7 & $9)
	$7 = *($8 + [48])
	$7 = ($6 - ((( *($8 + [52]) ? uint_32($7 >> $9) : $12 ) + [16]) & [-16]))
	$global$0 = $7
	CALL $32($7, ( *($8 + [56]) ? (($8 + [48]) | $9) : $12 ))
	CALL eosio_assert([0], $7)
	$6
	if ( ((*($8 + [48]) & $9) == 0) ){ goto $label$33 }
	CALL $10(*(($8 + [56])))
	$9 = [1]
	if ( ((*($8 + [64]) & [1]) == 0) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$33
	$9 = [1]
	if ( (*($8 + [64]) & [1]) ){ goto $label$31 }
	
.LABEL $label$32
	if ( (*($8 + [80]) & $9) ){ goto $label$30 }
	goto $label$29 
	
.LABEL $label$31
	CALL $10(*($8 + [72]))
	if ( ((*($8 + [80]) & $9) == 0) ){ goto $label$29 }
	
.LABEL $label$30
	CALL $10(*(($8 + [88])))
	if ( ((*($8 + [96]) & [1]) == 0) ){ goto $label$28 }
	goto $label$27 
	
.LABEL $label$29
	if ( (*($8 + [96]) & [1]) ){ goto $label$27 }
	
.LABEL $label$28
	$12 = *($8 + [144])
	if ( $12 ){ goto $label$26 }
	goto $label$25 
	
.LABEL $label$27
	CALL $10(*($8 + [104]))
	$12 = *($8 + [144])
	if ( ($12 == 0) ){ goto $label$25 }
	
.LABEL $label$26
	$14 = ($8 + [148])
	$9 = *($14)
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$57 }
	
.LOOP $label$58:
	$9 = ($9 + [-24])
	$7 = *($9)
	*($9) = [0]
	if ( ($7 == 0) ){ goto $label$59 }
	if ( ((*($7) & [1]) == 0) ){ goto $label$60 }
	CALL $10(*($7 + [8]))
	
.LABEL $label$60
	CALL $10($7)
	
.LABEL $label$59
	if ( ((int_32)$12 != (int_32)$9) ){ goto $label$58 }
	$9 = *(($8 + [144]))
	goto $label$56 
	
.LABEL $label$57
	$9 = $12
	
.LABEL $label$56
	*($14) = $12
	CALL $10($9)
	
.LABEL $label$25
	$9 = [1]
	if ( (*($8 + [160]) & [1]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$14
	$9 = ($0 + [28])
	CALL $25($9, [8909])
	CALL $57(($8 + [80]), ($8 + [160]), [8907])
	$7 = *($8 + [176])
	$12 = ($7 & [1])
	$7 = CALL $27(($8 + [80]), ( *(($11 + [8])) ? $14 : $12 ), ( *(($11 + [4])) ? uint_32($7 >> [1]) : $12 ))
	$12 = ($7 + [8])
	*((($8 + [96]) + [8])) = *($12)
	*($8 + [96]) = *($7)
	*($7) = (int_64)0
	*($12) = [0]
	$7 = CALL $26(($8 + [96]), [8907])
	$14 = ($7 + [8])
	*(($12 = (($8 + [120]) + [8]))) = *($14)
	*($8 + [120]) = *($7)
	*($7) = (int_64)0
	*($14) = [0]
	$7 = *($8 + [120])
	$14 = ($7 & [1])
	CALL $27($9, ( *($12) ? (($8 + [120]) | [1]) : $14 ), ( *($8 + [124]) ? uint_32($7 >> [1]) : $14 ))
	if ( (*($8 + [120]) & [1]) ){ goto $label$68 }
	if ( (*($8 + [96]) & [1]) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	CALL $10(*($12))
	if ( ((*($8 + [96]) & [1]) == 0) ){ goto $label$66 }
	
.LABEL $label$67
	CALL $10(*($8 + [104]))
	$7 = [1]
	if ( ((*($8 + [80]) & [1]) == 0) ){ goto $label$65 }
	goto $label$64 
	
.LABEL $label$66
	$7 = [1]
	if ( (*($8 + [80]) & [1]) ){ goto $label$64 }
	
.LABEL $label$65
	$12 = *($9)
	if ( ($12 & $7) ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$64
	CALL $10(*($8 + [88]))
	$12 = *($9)
	if ( (($12 & $7) == 0) ){ goto $label$62 }
	
.LABEL $label$63
	$7 = *(($0 + [32]))
	goto $label$61 
	
.LABEL $label$62
	$7 = uint_32($12 >> [1])
	
.LABEL $label$61
	$12 = $6
	$7 = ($6 - (($7 + [16]) & [-16]))
	$global$0 = $7
	if ( (*($9) & [1]) ){ goto $label$70 }
	$9 = ($9 + [1])
	goto $label$69 
	
.LABEL $label$70
	$9 = *(($0 + [36]))
	
.LABEL $label$69
	CALL $32($7, $9)
	CALL eosio_assert([0], $7)
	$12
	$9 = [1]
	if ( (*($8 + [160]) & [1]) ){ goto $label$12 }
	
.LABEL $label$13
	if ( (*($8 + [176]) & $9) ){ goto $label$11 }
	goto $label$10 
	
.LABEL $label$12
	CALL $10(*($8 + [168]))
	if ( ((*($8 + [176]) & $9) == 0) ){ goto $label$10 }
	
.LABEL $label$11
	CALL $10(*($11 + [8]))
	if ( ((*($8 + [192]) & [1]) == 0) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	if ( (*($8 + [192]) & [1]) ){ goto $label$8 }
	
.LABEL $label$9
	$global$0 = ($8 + [208])
	return 
	
.LABEL $label$8
	CALL $10(*($10 + [8]))
	$global$0 = ($8 + [208])
}

int_32 .FUNC $44 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$2 = [0]
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$1 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*(($4 + [28])) = $2
	*(($4 + [32])) = ($2 + $7)
	*(($4 + [44])) = [0]
	*($4 + [16]) = $1
	*($4 + [8]) = $0
	*($4 + [24]) = $2
	*($4 + [36 align=4]) = (int_64)0
	$3 = (($4 + [8]) + int_32($5 >> [1]))
	if ( ($5 & [1]) ){ goto $label$8 }
	CALL void $3((int_32 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL void $3((int_32 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [36]) & [1]) == 0) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$2 = [1]
	if ( (*($4 + [36]) & [1]) ){ goto $label$4 }
	
.LABEL $label$5
	$global$0 = ($4 + [48])
	return $2
	
.LABEL $label$4
	CALL $10(*(($4 + [44])))
	$global$0 = ($4 + [48])
	return $2
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = *($1)
	$4 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) ))
	$3 = *($0 + [4])
	$5 = ($0 + [8])
	$6 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$8 = ((int_64)$4) != (int_64)0
	*($2 + [15]) = (($8) << [7]) | ($7 & [127]))
	if ( ((int_32)(*($5) - $3) > (int_32)[0]) ){ goto $label$2 }
	CALL eosio_assert([0], [8406])
	$3 = *($6)
	
.LABEL $label$2
	CALL memcpy($3, ($2 + [15]), [1])
	$3 = (*($6) + [1])
	*($6) = $3
	if ( $8 ){ goto $label$1 }
	$7 = ($6 & [1])
	$6 = *($1)
	$6 = ( *(($1 + [4])) ? uint_32($6 >> [1]) : $7 )
	if ( ($6 == 0) ){ goto $label$3 }
	$7 = ( *($1 + [8]) ? ($1 + [1]) : $7 )
	if ( ((int_32)(*(($0 + [8])) - $3) >= (int_32)$6) ){ goto $label$4 }
	CALL eosio_assert([0], [8406])
	$3 = *(($0 + [4]))
	
.LABEL $label$4
	CALL memcpy($3, $7, $6)
	*(($3 = ($0 + [4]))) = (*($3) + $6)
	
.LABEL $label$3
	$global$0 = ($2 + [16])
	return $0
}

void .FUNC $51 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8447])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [8493])
	
.LABEL $label$2
	$6 = *($1 + [16])
	CALL $22($1, *($3))
	if ( ((int_64)$6 == (int_64)*($1 + [16])) ){ goto $label$3 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$3
	$7 = ($1 + [16])
	$3 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [8])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $1($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	$10 = *($8 + [4])
	$8 = CALL $72($5, $1)
	if ( ((int_32)(*($8 + [8]) - $10) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8406])
	$10 = *(($8 + [4]))
	
.LABEL $label$7
	CALL memcpy($10, $7, [8])
	*(($8 = ($8 + [4]))) = (*($8) + [8])
	CALL db_update_i64(*(($1 + [28])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $2($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $70 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $4) / (int_32)[24])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$4 = ((int_32)(*($0 + [8]) - $4) / (int_32)[24])
	if ( ((uint_32)$4 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($4 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $8(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $33($0)
	
.LABEL $label$1
	$6 = *($1)
	*($1) = [0]
	*(($1 = ($4 + ($8 = ((int_32)$5 * (int_32)[24]))))) = $6
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$5 = ($4 + ((int_32)$7 * (int_32)[24]))
	$6 = ($1 + [24])
	$7 = *($0)
	$2 = *(($0 + [4]))
	if ( ((int_32)$2 == (int_32)$7) ){ goto $label$6 }
	$1 = (($4 + $8) + [-24])
	
.LOOP $label$7:
	$4 = ($2 + [-24])
	$3 = *($4)
	*($4) = [0]
	*($1) = $3
	*(($1 + [16])) = *(($2 + [-8]))
	*(($1 + [8])) = *(($2 + [-16]))
	$1 = ($1 + [-24])
	$2 = $4
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$7 }
	$1 = ($1 + [24])
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL $10(*($1 + [8]))
	
.LABEL $label$11
	CALL $10($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $10($2)
	
.LABEL $label$12
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = ($global$0 - [32])
	$global$0 = $2
	*($2 + [24]) = [0]
	*($2 + [16]) = (int_64)0
	CALL $61($0, ($2 + [16]))
	$3 = *($2 + [16])
	$4 = (*($2 + [20]) - $3)
	if ( ($4 == 0) ){ goto $label$8 }
	*(($2 + [8])) = [0]
	*($2) = (int_64)0
	if ( ((uint_32)$4 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[10]) ){ goto $label$7 }
	*($2) = ($4 << [1])
	$5 = ($2 | [1])
	goto $label$6 
	
.LABEL $label$8
	if ( (*($1) & [1]) ){ goto $label$5 }
	*($1) = [0]
	$3 = ($1 + [8])
	goto $label$4 
	
.LABEL $label$7
	$6 = (($4 + [16]) & [-16])
	$5 = CALL $8($6)
	*($2) = ($6 | [1])
	*($2 + [8]) = $5
	*($2 + [4]) = $4
	
.LABEL $label$6
	$7 = $4
	$6 = $5
	
.LOOP $label$9:
	*($6) = *($3)
	$6 = ($6 + [1])
	$3 = ($3 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$9 }
	*(($5 + $4)) = [0]
	if ( (*($1) & [1]) ){ goto $label$11 }
	*($1) = [0]
	goto $label$10 
	
.LABEL $label$11
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$10
	CALL $24($1, [0])
	*(($1 + [8])) = *(($2 + [8]))
	*($1) = *($2)
	$3 = *($2 + [16])
	if ( ($3 == 0) ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$5
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$3 = ($1 + [8])
	
.LABEL $label$4
	CALL $24($1, [0])
	*($3) = [0]
	*($1) = (int_64)0
	$3 = *($2 + [16])
	if ( $3 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	CALL $19($2)
	
.LABEL $label$2
	*($2 + [20]) = $3
	CALL $10($3)
	
.LABEL $label$1
	$global$0 = ($2 + [32])
	(unreachable)
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$3 = CALL $16([8354])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$4 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = (($3 + [16]) & [-16])
	$4 = CALL $8($5)
	*($0) = ($5 | [1])
	*($0 + [8]) = $4
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($4, [8354], $3)
	
.LABEL $label$2
	*(($4 + $3)) = [0]
	*($0 + [24]) = $1
	$1 = ($0 + [16])
	$4 = *($3 + [4])
	$3 = CALL $60(*($2 + [4]), $0)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8964])
	$4 = *(($3 + [4]))
	
.LABEL $label$5
	CALL memcpy($1, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	*($0 + [28]) = *(*($2 + [8]))
	return $0
	
.LABEL $label$1
	CALL $19($0)
	return (unreachable)
}

int_32 .FUNC $8 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL $1($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [8216])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL $1($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $9 (int_32 $0)
{
	return CALL $8($0)
}

int_32 .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$2 = [0]
	$3 = ([0] - $0)
	if ( ((int_32)($3 & $0) != (int_32)$0) ){ goto $label$2 }
	if ( ((uint_32)$0 > (uint_32)[16]) ){ goto $label$1 }
	return CALL $1($1)
	
.LABEL $label$2
	*(CALL $5()) = [22]
	return [0]
	
.LABEL $label$1
	$4 = ($0 + [-1])
	$0 = CALL $1(($4 + $1))
	if ( ($0 == 0) ){ goto $label$5 }
	$2 = (($4 + $0) & $3)
	if ( ((int_32)$0 == (int_32)$2) ){ goto $label$4 }
	$3 = ($0 + [-4])
	$4 = *($3)
	$1 = ($4 & [7])
	if ( ($1 == 0) ){ goto $label$3 }
	$4 = ($0 + ($4 & [-8]))
	$5 = ($4 + [-8])
	$6 = *($5)
	$7 = ($2 - $0)
	*($3) = ($1 | $7)
	$3 = ($4 - $2)
	*(($2 + [-4])) = ($3 | $1)
	$1 = ($6 & [7])
	*(($2 + [-8])) = ($1 | $7)
	*($5) = ($1 | $3)
	CALL $2($0)
	
.LABEL $label$5
	return $2
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$0 = ($2 - $0)
	*(($2 + [-8])) = (*(($0 + [-8])) + $0)
	*(($2 + [-4])) = (*($3) - $0)
	return $2
}

int_32 .FUNC $7 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	*(CALL $5())
	$3 = [22]
	if ( ($1 <= [4]) ){ goto $label$2 }
	$1 = CALL $6($1, $2)
	if ( ($1 == 0) ){ goto $label$1 }
	*($0) = $1
	$3 = [0]
	
.LABEL $label$2
	return $3
	return .LABEL $label$1
}

void .FUNC $4 (int_32 $0)
{
}

int_32 .FUNC $5 ()
{
	return [8208]
}

void .FUNC $2 (int_32 $0)
{
}

void .FUNC $3 ()
{
	int_32 $0
	*(($0 = ($global$0 - [16])) + [12]) = [0]
	$0 = ((*(*($0 + [12])) + [7]) & [-8])
	*([0] + [8196]) = $0
	*([0] + [8192]) = $0
	*([0] + [8204]) = (current_memory)
}

void .FUNC $0 ()
{
	CALL $3()
}

int_32 .FUNC $1 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$4 }
	$1 = uint_32($0 >> [16])
	$2 = (*([0] + [8204]) + $1)
	*([0] + [8204]) = $2
	$3 = *([0] + [8196])
	$0 = ((($3 + $0) + [7]) & [-8])
	*([0] + [8196]) = $0
	if ( ((uint_32)($2 << [16]) <= (uint_32)$0) ){ goto $label$3 }
	if ( ((int_32)$1 == (int_32)[-1]) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	*([0] + [8204]) = ($2 + [1])
	if ( ((int_32)($1 + [1]) != (int_32)[-1]) ){ goto $label$1 }
	
.LABEL $label$2
	CALL eosio_assert([0], [8220])
	return $3
	
.LABEL $label$1
	return $3
}

void .FUNC $14 (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	CALL $14($0, $1)
}

int_32 .FUNC $16 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	$1 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$3 }
	if ( (*($0) == 0) ){ goto $label$2 }
	$1 = ($0 + [1])
	
.LOOP $label$4:
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	$2 = *($1)
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$4 }
	return (($3 + [-1]) - $0)
	
.LABEL $label$3
	$1 = ($1 + [-4])
	
.LOOP $label$5:
	$1 = ($1 + [4])
	$2 = *($1)
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	if ( (($2 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$6:
	$2 = *($1 + [1])
	$3 = ($1 + [1])
	$1 = $3
	if ( $2 ){ goto $label$6 }
	return ($3 - $0)
	
.LABEL $label$2
	return ($0 - $0)
	
.LABEL $label$1
	return ($1 - $0)
}

int_32 .FUNC $17 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$6:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$4 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$7 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$6 }
	
.LABEL $label$7
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$5 = $2
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$5 = $2
	
.LABEL $label$3
	if ( ((int_32)*($0) != (int_32)($1 & [255])) ){ goto $label$8 }
	if ( $5 ){ goto $label$1 }
	goto $label$2 
	
.LABEL $label$8
	if ( ($5 <= [4]) ){ goto $label$10 }
	$3 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$3)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$2 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$1 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $10 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL $2($0)
	
.LABEL $label$1
}

void .FUNC $11 (int_32 $0)
{
	CALL $10($0)
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = ($global$0 - [16])
	$global$0 = $2
	$3 = ( $0 ? [1] : $0 )
	$1 = ( $1 ? [4] : ((uint_32)$1 > (uint_32)[4]) )
	if ( (CALL $7(($2 + [12]), $1, $3) == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$0 = *([0] + [8216])
	if ( ($0 == 0) ){ goto $label$2 }
	CALL void $0()
	if ( CALL $7(($2 + [12]), $1, $3) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	*($2 + [12]) = [0]
	
.LABEL $label$1
	$0 = *($2 + [12])
	$global$0 = ($2 + [16])
	return $0
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	return CALL $12($0, $1)
}

int_32 .FUNC $36 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = ($global$0 - [48])
	$4 = $3
	$global$0 = $3
	$5 = *($2 + [4])
	$6 = *($2)
	$7 = CALL action_data_size()
	if ( ($7 == 0) ){ goto $label$4 }
	if ( ($7 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($7)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($3 - (($7 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $7)
	
.LABEL $label$1
	*($4 + [40]) = (int_64)0
	$3 = ($2 + $7)
	if ( ((uint_32)$7 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8964])
	
.LABEL $label$5
	CALL memcpy(($4 + [40]), $2, [8])
	*(($4 + [20])) = ($2 + [8])
	*(($4 + [24])) = $3
	*(($4 + [36])) = [0]
	*($4 + [8]) = $1
	*($4) = $0
	*($4 + [16]) = $2
	*($4 + [28 align=4]) = (int_64)0
	$3 = ($4 + int_32($5 >> [1]))
	$0 = *($4 + [40])
	if ( ($5 & [1]) ){ goto $label$10 }
	CALL void $3((int_32 $0), (int_64 $6))
	if ( ((uint_32)$7 >= (uint_32)[513]) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL void $3((int_32 $0), (int_64 *((*($3) + $6))))
	if ( ($7 <= [513]) ){ goto $label$8 }
	
.LABEL $label$9
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [28]) & [1]) == 0) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	$2 = [1]
	if ( (*($4 + [28]) & [1]) ){ goto $label$6 }
	
.LABEL $label$7
	$global$0 = ($4 + [48])
	return $2
	
.LABEL $label$6
	CALL $10(*(($4 + [36])))
	$global$0 = ($4 + [48])
	return $2
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2, int_64 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($global$0 - [48])
	$global$0 = $4
	CALL require_auth($1)
	*(($4 + [40])) = [0]
	*($4 + [24]) = (int_64)-1
	*($4 + [32]) = (int_64)0
	$5 = *($0)
	*($4 + [8]) = $5
	*($4 + [16]) = $5
	$0 = CALL db_find_i64($5, $5, (int_64)5310416428162088960, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	if ( ((int_32)*(CALL $47(($4 + [8]), $0) + [24]) == (int_32)($4 + [8])) ){ goto $label$1 }
	CALL eosio_assert([0], [8280])
	
.LABEL $label$1
	$7 = *(($4 + [36]))
	$6 = *(($4 + [32]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$5 }
	
.LOOP $label$7:
	$0 = ($7 + [-24])
	$8 = *($0)
	if ( ((int_64)*($8 + [16]) == (int_64)$3) ){ goto $label$6 }
	$7 = $0
	if ( ((int_32)$6 != (int_32)$0) ){ goto $label$7 }
	goto $label$5 
	
.LABEL $label$6
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$5 }
	if ( ((int_32)*($8 + [24]) == (int_32)($4 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [8280])
	*($4) = $2
	if ( $8 ){ goto $label$2 }
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	$0 = CALL db_find_i64(*($4 + [8]), *(($4 + [16])), (int_64)5310416428162088960, $3)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$4 }
	$8 = CALL $47(($4 + [8]), $0)
	if ( ((int_32)*($8 + [24]) == (int_32)($4 + [8])) ){ goto $label$4 }
	CALL eosio_assert([0], [8280])
	
.LABEL $label$4
	*($4) = $2
	if ( $8 ){ goto $label$2 }
	
.LABEL $label$3
	CALL eosio_assert([0], [8412])
	
.LABEL $label$2
	CALL $51(($4 + [8]), $8, $1, $4)
	$8 = *($4 + [32])
	if ( ($8 == 0) ){ goto $label$8 }
	$6 = ($4 + [36])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$8) ){ goto $label$10 }
	
.LOOP $label$11:
	$0 = ($0 + [-24])
	$7 = *($0)
	*($0) = [0]
	if ( ($7 == 0) ){ goto $label$12 }
	if ( ((*($7) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*($7 + [8]))
	
.LABEL $label$13
	CALL $10($7)
	
.LABEL $label$12
	if ( ((int_32)$8 != (int_32)$0) ){ goto $label$11 }
	$0 = *(($4 + [32]))
	goto $label$9 
	
.LABEL $label$10
	$0 = $8
	
.LABEL $label$9
	*($6) = $8
	CALL $10($0)
	
.LABEL $label$8
	$global$0 = ($4 + [48])
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = ($global$0 - [112])
	$global$0 = $3
	CALL $0()
	if ( ((int_64)$1 != (int_64)$0) ){ goto $label$1 }
	if ( ((int_64)$2 <= (int_64)3625960649986670591) ){ goto $label$7 }
	if ( ((int_64)$2 > (int_64)5666987383162142719) ){ goto $label$6 }
	if ( ((int_64)$2 == (int_64)3625960649986670592) ){ goto $label$5 }
	if ( ((int_64)$2 != (int_64)5378050747533983744) ){ goto $label$1 }
	*($3 + [76]) = [0]
	*($3 + [72]) = [1]
	*($3 + [32]) = *($3 + [72])
	CALL $36($1, $1, ($3 + [32]))
	goto $label$1 
	
.LABEL $label$7
	if ( ((int_64)$2 == (int_64)-4997502827547852800) ){ goto $label$4 }
	if ( ((int_64)$2 == (int_64)-4352394788318740480) ){ goto $label$2 }
	if ( ((int_64)$2 != (int_64)-3075276126730321920) ){ goto $label$1 }
	*($3 + [100]) = [0]
	*($3 + [96]) = [2]
	*($3 + [8]) = *($3 + [96])
	CALL $38($1, $1, ($3 + [8]))
	goto $label$1 
	
.LABEL $label$6
	if ( ((int_64)$2 == (int_64)5666987383162142720) ){ goto $label$3 }
	if ( ((int_64)$2 != (int_64)7111746761571434496) ){ goto $label$1 }
	*($3 + [92]) = [0]
	*($3 + [88]) = [3]
	*($3 + [16]) = *($3 + [88])
	CALL $40($1, $1, ($3 + [16]))
	goto $label$1 
	
.LABEL $label$5
	*($3 + [108]) = [0]
	*($3 + [104]) = [4]
	*($3) = *($3 + [104])
	CALL $40($1, $1, $3)
	goto $label$1 
	
.LABEL $label$4
	*($3 + [84]) = [0]
	*($3 + [80]) = [5]
	*($3 + [24]) = *($3 + [80])
	CALL $36($1, $1, ($3 + [24]))
	goto $label$1 
	
.LABEL $label$3
	*($3 + [68]) = [0]
	*($3 + [64]) = [6]
	*($3 + [40]) = *($3 + [64])
	CALL $44($1, $1, ($3 + [40]))
	goto $label$1 
	
.LABEL $label$2
	*($3 + [60]) = [0]
	*($3 + [56]) = [7]
	*($3 + [48]) = *($3 + [56])
	CALL $46($1, $1, ($3 + [48]))
	
.LABEL $label$1
	CALL $4([0])
	$global$0 = ($3 + [112])
}

void .FUNC $35 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [48])
	$global$0 = $2
	CALL require_auth(*($0))
	*(($2 + [32])) = [0]
	*($2 + [16]) = (int_64)-1
	*($2 + [24]) = (int_64)0
	$3 = *($0)
	*($2) = $3
	*($2 + [8]) = $3
	$0 = CALL db_find_i64($3, $3, (int_64)5310416428162088960, $1)
	if ( ((int_32)$0 < (int_32)[0]) ){ goto $label$1 }
	$4 = CALL $47($2, $0)
	if ( ((int_32)*($4 + [24]) == (int_32)$2) ){ goto $label$2 }
	CALL eosio_assert([0], [8280])
	
.LABEL $label$2
	
.LOOP $label$3:
	$0 = [0]
	$5 = CALL db_next_i64(*($4 + [28]), ($2 + [40]))
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$0 = CALL $47($2, $5)
	
.LABEL $label$4
	CALL $53($2, $4)
	$4 = $0
	if ( $0 ){ goto $label$3 }
	
.LABEL $label$1
	$5 = *($2 + [24])
	if ( ($5 == 0) ){ goto $label$5 }
	$6 = ($2 + [28])
	$0 = *($6)
	if ( ((int_32)$0 == (int_32)$5) ){ goto $label$7 }
	
.LOOP $label$8:
	$0 = ($0 + [-24])
	$4 = *($0)
	*($0) = [0]
	if ( ($4 == 0) ){ goto $label$9 }
	if ( ((*($4) & [1]) == 0) ){ goto $label$10 }
	CALL $10(*($4 + [8]))
	
.LABEL $label$10
	CALL $10($4)
	
.LABEL $label$9
	if ( ((int_32)$5 != (int_32)$0) ){ goto $label$8 }
	$0 = *(($2 + [24]))
	goto $label$6 
	
.LABEL $label$7
	$0 = $5
	
.LABEL $label$6
	*($6) = $5
	CALL $10($0)
	
.LABEL $label$5
	$global$0 = ($2 + [48])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	CALL $31($0, $1)
	return $0
}

void .FUNC $33 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $30 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = *($2)
	$4 = ( *($2 + [4]) ? uint_32($4 >> [1]) : ($4 & [1]) )
	$3 = CALL $16($1)
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$4 }
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$7 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$7
	$6 = (($5 + [16]) & [-16])
	$5 = CALL $8($6)
	*($0) = ($6 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$5 }
	
.LABEL $label$6
	CALL memcpy($5, $1, $3)
	
.LABEL $label$5
	*(($5 + $3)) = [0]
	$3 = ($2 + [1])
	$5 = (*($2) & [1])
	$2 = *($2 + [8])
	$6 = *($0)
	$7 = ($6 & [1])
	if ( $7 ){ goto $label$9 }
	$1 = [10]
	$3 = ( $2 ? $3 : $5 )
	$2 = uint_32($6 >> [1])
	if ( (([10] - $2) <= $4) ){ goto $label$8 }
	goto $label$3 
	
.LABEL $label$9
	$3 = ( $2 ? $3 : $5 )
	$2 = *(($0 + [4]))
	$1 = ((*($0) & [-2]) + [-1])
	if ( ((uint_32)($1 - $2) >= (uint_32)$4) ){ goto $label$3 }
	
.LABEL $label$8
	CALL $23($0, $1, (($2 + $4) - $1), $2, $2, [0], $4, $3)
	goto $label$2 
	
.LABEL $label$4
	CALL abort()
	
.LABEL $label$3
	if ( ($4 == 0) ){ goto $label$2 }
	$5 = ( *(($0 + [8])) ? ($0 + [1]) : $7 )
	CALL memcpy(($5 + $2), $3, $4)
	$2 = ($2 + $4)
	if ( (*($0) & [1]) ){ goto $label$1 }
	*($0) = ($2 << [1])
	*(($5 + $2)) = [0]
	return 
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($0 + [4])) = $2
	*(($5 + $2)) = [0]
	(unreachable)
}

int_32 .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	if ( (((int_32)$1 ^ (int_32)$0) & [3]) ){ goto $label$2 }
	if ( (($1 & [3]) == 0) ){ goto $label$3 }
	
.LOOP $label$4:
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ($1 & [3]) ){ goto $label$4 }
	
.LABEL $label$3
	$2 = *($1)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$2 }
	
.LOOP $label$5:
	*($0) = $2
	$2 = *($1 + [4])
	$0 = ($0 + [4])
	$1 = ($1 + [4])
	if ( (((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$5 }
	
.LABEL $label$2
	$2 = *($1)
	*($0) = $2
	if ( ($2 == 0) ){ goto $label$1 }
	$1 = ($1 + [1])
	
.LOOP $label$6:
	$2 = *($1)
	*($0 + [1]) = $2
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	if ( $2 ){ goto $label$6 }
	
.LABEL $label$1
	return $0
}

void .FUNC $58 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8964])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [56]), $2, [8])
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8964])
	
.LABEL $label$6
	CALL memcpy(($3 + [48]), $6, [8])
	*(($3 + [32])) = $5
	*(($4 = ($3 + [44]))) = [0]
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [16])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [36 align=4]) = (int_64)0
	CALL $41(($3 + [8]), *($3 + [56]), *($3 + [48]))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*($4))
	
.LABEL $label$7
	$global$0 = ($3 + [64])
}

void .FUNC $59 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	$2 = ($global$0 - [176])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [116]) = $2
	*($3 + [112]) = $2
	*($3 + [120]) = ($2 + $4)
	*($3 + [104]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8964])
	$2 = *($3 + [116])
	
.LABEL $label$5
	CALL memcpy(($3 + [104]), $2, [8])
	*($3 + [116]) = ($2 + [8])
	*($3 + [96]) = [0]
	*($3 + [88]) = (int_64)0
	CALL $60(($3 + [112]), ($3 + [88]))
	$2 = *($3 + [116])
	$4 = (($3 + [112]) + [8])
	if ( ((uint_32)(*($4) - $2) > (uint_32)[7]) ){ goto $label$6 }
	CALL eosio_assert([0], [8964])
	$2 = *($3 + [116])
	
.LABEL $label$6
	CALL memcpy(($3 + [80]), $2, [8])
	*($3 + [116]) = (*($3 + [116]) + [8])
	*(($2 = (($3 + [24]) + [8]))) = *($4)
	*($3 + [24]) = *($3 + [112])
	$2 = *($2)
	*((($3 + [128]) + [8])) = $2
	*(($4 = (($3 + [144]) + [8]))) = $2
	$5 = *($3 + [24])
	*($3 + [144]) = $5
	*($3 + [128]) = $5
	$2 = *($4)
	*((($3 + [160]) + [8])) = $2
	*(($3 + [64])) = $2
	*($3 + [40]) = $0
	*($3 + [48]) = $1
	$0 = *($3 + [144])
	*($3 + [56]) = $0
	*($3 + [160]) = $0
	*(($3 + [76])) = [0]
	*($3 + [68 align=4]) = (int_64)0
	$2 = CALL $20(($3 + [8]), ($3 + [88]))
	CALL $37(($3 + [40]), *($3 + [104]), $2, *($3 + [80]))
	if ( (*($2) & [1]) ){ goto $label$11 }
	if ( (*($3 + [68]) & [1]) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	CALL $10(*($2 + [8]))
	if ( ((*($3 + [68]) & [1]) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	CALL $10(*(($3 + [76])))
	if ( ((*($3 + [88]) & [1]) == 0) ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	if ( (*($3 + [88]) & [1]) ){ goto $label$7 }
	
.LABEL $label$8
	$global$0 = ($3 + [176])
	return 
	
.LABEL $label$7
	CALL $10(*(($3 + [96])))
	$global$0 = ($3 + [176])
}

int_32 .FUNC $61 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$2 = *($0 + [4])
	$3 = (int_64)0
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	$6 = [0]
	
.LOOP $label$1:
	if ( ($2 <= *($4)) ){ goto $label$2 }
	CALL eosio_assert([0], [8969])
	$2 = *($5)
	
.LABEL $label$2
	$7 = *($2)
	$8 = ($2 + [1])
	*($5) = $8
	$2 = ($6 & [255])
	$3 = ((int_64)$3 | (int_64)(CASTING uint_64)(uint_32 (($7 & [127]) << $2)))
	$6 = ($2 + [7])
	$2 = $8
	if ( ($7 & [128]) ){ goto $label$1 }
	$6 = (CASTING uint_32)(uint_64 $3)
	$2 = *($1)
	$7 = *($1 + [4])
	$5 = ($7 - $2)
	if ( ((uint_32)$5 >= (uint_32)$6) ){ goto $label$4 }
	CALL $73($1, ($6 - $5))
	$8 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	if ( ((uint_32)$5 <= (uint_32)$6) ){ goto $label$3 }
	$7 = ($2 + $6)
	*(($1 + [4])) = $7
	
.LABEL $label$3
	$7 = ($7 - $2)
	if ( ((uint_32)(*(($0 + [8])) - $8) >= (uint_32)$7) ){ goto $label$5 }
	CALL eosio_assert([0], [8964])
	$8 = *(($0 + [4]))
	
.LABEL $label$5
	CALL memcpy($2, $8, $7)
	*(($2 = ($0 + [4]))) = (*($2) + $7)
	return $0
}

void .FUNC $63 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$2 = ($global$0 - [64])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [56]) = (int_64)0
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8964])
	
.LABEL $label$5
	$5 = ($2 + $4)
	CALL memcpy(($3 + [56]), $2, [8])
	$6 = ($2 + [8])
	if ( ((int_32)($4 & [-8]) != (int_32)[8]) ){ goto $label$6 }
	CALL eosio_assert([0], [8964])
	
.LABEL $label$6
	CALL memcpy(($3 + [48]), $6, [8])
	*(($3 + [32])) = $5
	*(($4 = ($3 + [44]))) = [0]
	*($3 + [24]) = $2
	*(($3 + [28])) = ($2 + [16])
	*($3 + [16]) = $1
	*($3 + [8]) = $0
	*($3 + [36 align=4]) = (int_64)0
	CALL $39(($3 + [8]), *($3 + [56]), *($3 + [48]))
	if ( ((*($3 + [36]) & [1]) == 0) ){ goto $label$7 }
	CALL $10(*($4))
	
.LABEL $label$7
	$global$0 = ($3 + [64])
}

void .FUNC $64 (int_64 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = ($global$0 - [48])
	$3 = $2
	$global$0 = $2
	$4 = CALL action_data_size()
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ($4 <= [512]) ){ goto $label$3 }
	$2 = CALL $1($4)
	goto $label$2 
	
.LABEL $label$4
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	$2 = ($2 - (($4 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $4)
	
.LABEL $label$1
	*($3 + [40]) = (int_64)0
	$5 = ($2 + $4)
	if ( ((uint_32)$4 > (uint_32)[7]) ){ goto $label$5 }
	CALL eosio_assert([0], [8964])
	
.LABEL $label$5
	CALL memcpy(($3 + [40]), $2, [8])
	*(($3 + [20])) = ($2 + [8])
	*(($3 + [24])) = $5
	*(($4 = ($3 + [36]))) = [0]
	*($3 + [8]) = $1
	*($3) = $0
	*($3 + [16]) = $2
	*($3 + [28 align=4]) = (int_64)0
	CALL $42($3, *($3 + [40]))
	if ( ((*($3 + [28]) & [1]) == 0) ){ goto $label$6 }
	CALL $10(*($4))
	
.LABEL $label$6
	$global$0 = ($3 + [48])
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $20($2, ($1 + [8]))
	$5 = *($1 + [24])
	$1 = *($0 + [4])
	$6 = *($1 + [4])
	$0 = (*($0) + int_32($6 >> [1]))
	$1 = *($1)
	if ( (($6 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$6 = CALL $20(($2 + [16]), $4)
	CALL void $0((int_32 $3), (int_64 $6), (int_32 $5), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($6 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($4 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

int_32 .FUNC $38 (int_64 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	$3 = ($global$0 - [160])
	$global$0 = $3
	*(($4 = $3) + [104]) = *($2)
	$2 = [0]
	$5 = CALL action_data_size()
	if ( ($5 == 0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$2 = CALL $1($5)
	goto $label$2 
	
.LABEL $label$3
	$2 = ($3 - (($5 + [15]) & [-16]))
	$global$0 = $2
	
.LABEL $label$2
	CALL read_action_data($2, $5)
	
.LABEL $label$1
	*(($4 + [88])) = [0]
	*($4 + [72]) = (int_64)0
	*($4 + [80]) = (int_64)0
	*($4 + [96]) = (int_64)0
	*($4 + [60]) = $2
	*($4 + [56]) = $2
	*($4 + [64]) = ($2 + $5)
	*($4 + [144]) = ($4 + [56])
	*($4 + [16]) = ($4 + [72])
	CALL $49(($4 + [16]), ($4 + [144]))
	*(($3 = ($4 + [8]))) = *($4 + [64])
	*($4) = *($4 + [56])
	$3 = *($3)
	*((($4 + [112]) + [8])) = $3
	*(($6 = (($4 + [128]) + [8]))) = $3
	$7 = *($4)
	*($4 + [128]) = $7
	*($4 + [112]) = $7
	$3 = *($6)
	*((($4 + [144]) + [8])) = $3
	*(($4 + [40])) = $3
	*($4 + [16]) = $0
	*($4 + [24]) = $1
	$0 = *($4 + [128])
	*($4 + [32]) = $0
	*($4 + [144]) = $0
	*(($4 + [52])) = [0]
	*($4 + [44 align=4]) = (int_64)0
	*($4 + [148]) = ($4 + [104])
	*($4 + [144]) = ($4 + [16])
	CALL $50(($4 + [144]), ($4 + [72]))
	if ( ((uint_32)$5 >= (uint_32)[513]) ){ goto $label$8 }
	$2 = [1]
	if ( (*($4 + [44]) & [1]) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$8
	CALL $2($2)
	$2 = [1]
	if ( ((*($4 + [44]) & [1]) == 0) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $10(*(($4 + [52])))
	if ( (*($4 + [80]) & $2) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	if ( ((*($4 + [80]) & $2) == 0) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $10(*(($4 + [88])))
	
.LABEL $label$4
	$global$0 = ($4 + [160])
	return [1]
}

int_32 .FUNC $52 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *(($0 + [28]))
	$3 = *($0 + [24])
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$4:
	$5 = ($4 + [-24])
	$6 = *($5)
	if ( ((int_64)*($6 + [16]) == (int_64)$1) ){ goto $label$3 }
	$4 = $5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	if ( ((int_32)*($6 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8280])
	return $6
	
.LABEL $label$2
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)5310416428162088960, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$5 }
	$6 = CALL $47($0, $5)
	if ( ((int_32)*($6 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8280])
	return $6
	
.LABEL $label$5
	CALL eosio_assert([0], $2)
	
.LABEL $label$1
	return $6
}

void .FUNC $53 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8736])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [8781])
	
.LABEL $label$2
	$3 = ($0 + [28])
	$4 = *($3)
	$2 = *($0 + [24])
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$8 }
	$5 = $4
	$6 = *($1 + [16])
	if ( ((int_64)*(*(($4 + [-24])) + [16]) == (int_64)$6) ){ goto $label$9 }
	$7 = ($2 + [24])
	$8 = $4
	
.LOOP $label$10:
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$8 }
	$9 = ($8 + [-48])
	$5 = ($8 + [-24])
	$8 = $5
	if ( ((int_64)*(*($9) + [16]) != (int_64)$6) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ((int_32)$2 == (int_32)$5) ){ goto $label$7 }
	$9 = [-24]
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$5 = $2
	
.LABEL $label$7
	CALL eosio_assert([0], [8831])
	$9 = [-24]
	$4 = *($3)
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$5 }
	
.LABEL $label$6
	$7 = ($5 + $9)
	goto $label$4 
	
.LABEL $label$5
	$8 = $5
	
.LOOP $label$11:
	$7 = *($8)
	*($8) = [0]
	$2 = ($8 + $9)
	$5 = *($2)
	*($2) = $7
	if ( ($5 == 0) ){ goto $label$12 }
	if ( ((*($5) & [1]) == 0) ){ goto $label$13 }
	CALL $10(*($5 + [8]))
	
.LABEL $label$13
	CALL $10($5)
	
.LABEL $label$12
	*(($8 + [-8])) = *(($8 + [16]))
	*(($8 + [-16])) = *(($8 + [8]))
	$8 = ($8 + [24])
	if ( ((int_32)$4 != (int_32)$8) ){ goto $label$11 }
	$7 = ($8 + [-24])
	$5 = *(($0 + [28]))
	if ( ((int_32)($5 + [24]) == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$14:
	$5 = ($5 + $9)
	$8 = *($5)
	*($5) = [0]
	if ( ($8 == 0) ){ goto $label$15 }
	if ( ((*($8) & [1]) == 0) ){ goto $label$16 }
	CALL $10(*($8 + [8]))
	
.LABEL $label$16
	CALL $10($8)
	
.LABEL $label$15
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$14 }
	
.LABEL $label$3
	*(($0 + [28])) = $7
	CALL db_remove_i64(*(($1 + [28])))
}

void .FUNC $54 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$2 = *($0)
	$4 = *($3 + [4])
	$3 = *($1)
	if ( ((uint_32)(*($3 + [8]) - $4) > (uint_32)[7]) ){ goto $label$1 }
	CALL eosio_assert([0], [8964])
	$4 = *(($3 + [4]))
	
.LABEL $label$1
	CALL memcpy($2, $4, [8])
	*(($3 = ($3 + [4]))) = (*($3) + [8])
	$3 = *($0)
	CALL $60(*($1), ($3 + [8]))
	$2 = ($3 + [24])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$2 }
	CALL eosio_assert([0], [8964])
	$4 = *(($0 + [4]))
	
.LABEL $label$2
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$2 = ($3 + [32])
	$4 = *($0 + [4])
	$0 = *($1)
	if ( ((uint_32)(*($0 + [8]) - $4) > (uint_32)[7]) ){ goto $label$3 }
	CALL eosio_assert([0], [8964])
	$4 = *(($0 + [4]))
	
.LABEL $label$3
	CALL memcpy($2, $4, [8])
	*(($0 = ($0 + [4]))) = (*($0) + [8])
	$0 = ($3 + [40])
	$3 = *($1 + [4])
	$1 = *($1)
	if ( ((uint_32)(*($1 + [8]) - $3) > (uint_32)[7]) ){ goto $label$4 }
	CALL eosio_assert([0], [8964])
	$3 = *(($1 + [4]))
	
.LABEL $label$4
	CALL memcpy($0, $3, [8])
	*(($1 = ($1 + [4]))) = (*($1) + [8])
}

void .FUNC $55 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$2 = ($global$0 - [32])
	$global$0 = $2
	$3 = *($1)
	$4 = CALL $20($2, ($1 + [8]))
	$5 = *($1 + [40])
	$6 = *($1 + [32])
	$7 = *($1 + [24])
	$1 = *($0 + [4])
	$8 = *($1 + [4])
	$0 = (*($0) + int_32($8 >> [1]))
	$1 = *($1)
	if ( (($8 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	$8 = CALL $20(($2 + [16]), $4)
	CALL void $0((int_32 $3), (int_64 $8), (int_32 $7), (int_64 $6), (int_64 $5), (int_64 $1))
	if ( (*($2 + [16]) & [1]) ){ goto $label$4 }
	if ( (*($4) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	CALL $10(*($8 + [8]))
	if ( ((*($4) & [1]) == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL $10(*($4 + [8]))
	$global$0 = ($2 + [32])
	return 
	
.LABEL $label$2
	$global$0 = ($2 + [32])
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	$4 = ($global$0 - [16])
	$5 = $4
	$global$0 = $4
	if ( ((int_32)*($1 + [24]) == (int_32)$0) ){ goto $label$1 }
	CALL eosio_assert([0], [8447])
	
.LABEL $label$1
	if ( ((int_64)CALL current_receiver() == (int_64)*($0)) ){ goto $label$2 }
	CALL eosio_assert([0], [8493])
	
.LABEL $label$2
	$6 = *($1 + [16])
	CALL $22($1, (*($3) + [28]))
	if ( ((int_64)$6 == (int_64)*($1 + [16])) ){ goto $label$3 }
	CALL eosio_assert([0], [8544])
	
.LABEL $label$3
	$7 = ($1 + [16])
	$3 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($8 + [8])
	$9 = (CASTING uint_64)(uint_32 $8)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$6 }
	$4 = CALL $1($3)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($4 - (($3 + [15]) & [-16]))
	$global$0 = $4
	
.LABEL $label$5
	*($5 + [4]) = $4
	*($5) = $4
	*($5 + [8]) = ($4 + $3)
	$10 = *($8 + [4])
	$8 = CALL $72($5, $1)
	if ( ((int_32)(*($8 + [8]) - $10) > (int_32)[7]) ){ goto $label$7 }
	CALL eosio_assert([0], [8406])
	$10 = *(($8 + [4]))
	
.LABEL $label$7
	CALL memcpy($10, $7, [8])
	*(($8 = ($8 + [4]))) = (*($8) + [8])
	CALL db_update_i64(*(($1 + [28])), $2, $4, $3)
	if ( ((uint_32)$3 >= (uint_32)[513]) ){ goto $label$10 }
	if ( ((uint_64)$6 >= (uint_64)*($0 + [16])) ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	CALL $2($4)
	if ( (uint_64)($6 <= *($0 + [16])) ){ goto $label$8 }
	
.LABEL $label$9
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	$global$0 = ($5 + [16])
	return 
	
.LABEL $label$8
	$global$0 = ($5 + [16])
}

void .FUNC $57 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = CALL $16($2)
	$3 = *($1)
	$3 = ( *($1 + [4]) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($3 + $4)
	if ( ((uint_32)$5 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1)
	$7 = *($1 + [8])
	if ( ((uint_32)$5 > (uint_32)[10]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$5 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$8 = (($5 + [16]) & [-16])
	$5 = CALL $8($8)
	*($0) = ($8 | [1])
	*(($0 + [8])) = $5
	*(($0 + [4])) = $3
	if ( ($3 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memcpy($5, ( $7 ? ($1 + [1]) : ($6 & [1]) ), $3)
	
.LABEL $label$2
	*(($5 + $3)) = [0]
	CALL $27($0, $2, $4)
	return (unreachable)
	
.LABEL $label$1
	CALL $19($0)
}