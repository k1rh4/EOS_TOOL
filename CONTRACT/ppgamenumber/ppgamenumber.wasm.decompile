(data (i32.const 4) "\d0w\00\00")
(data (i32.const 16) "eosio\00")
(data (i32.const 32) "onerror\00")
(data (i32.const 48) "onerror action\'s are only valid from the \"EOS\" system account\00")
(data (i32.const 112) "eosio.token\00")
(data (i32.const 128) "ppgametokens\00")
(data (i32.const 144) "transfer\00")
(data (i32.const 160) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 224) "invalid symbol name\00")
(data (i32.const 256) "read\00")
(data (i32.const 272) "ppgamenumber\00")
(data (i32.const 288) "ppgameparter\00")
(data (i32.const 304) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 368) "inviter fee too big\00")
(data (i32.const 400) "Referral reward from PPDice! actor: %s, Bet ID: %lld\00")
(data (i32.const 464) "ppgamebanker\00")
(data (i32.const 480) "active\00")
(data (i32.const 496) "ppgamereward\00")
(data (i32.const 512) "To PPDice Bonus Pool [https://www.ppdice.com]\00")
(data (i32.const 560) "cannot pass end iterator to modify\00")
(data (i32.const 608) "object passed to modify is not in multi_index\00")
(data (i32.const 656) "cannot modify objects in table of another contract\00")
(data (i32.const 720) "updater cannot change primary key when modifying an object\00")
(data (i32.const 784) "write\00")
(data (i32.const 800) "error reading iterator\00")
(data (i32.const 832) "Bet id: %lld. You win! Remember to claim your dividens with your PPT token! https://www.ppdice.com\00")
(data (i32.const 944) "mining too big\00")
(data (i32.const 960) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 1024) "bettor fee NOT set\00")
(data (i32.const 1056) "bettor fee to big\00")
(data (i32.const 1088) "inviter fee NOT set\00")
(data (i32.const 1120) "bettor+inviter fee too big\00")
(data (i32.const 1152) "multiplication overflow\00")
(data (i32.const 1184) "multiplication underflow\00")
(data (i32.const 1216) "divide by zero\00")
(data (i32.const 1232) "signed division overflow\00")
(data (i32.const 1264) "attempt to subtract asset with different symbol\00")
(data (i32.const 1312) "subtraction underflow\00")
(data (i32.const 1344) "subtraction overflow\00")
(data (i32.const 1376) "PPT token for inviter! actor: %s.[https://www.ppdice.com] \00")
(data (i32.const 1440) "PPT token for actor [https://www.ppdice.com]\00")
(data (i32.const 1488) "PPT token for team [https://www.ppdice.com]\00")
(data (i32.const 1536) "unable to find key\00")
(data (i32.const 1556) " \06\00\00")
(data (i32.const 1568) ".12345abcdefghijklmnopqrstuvwxyz\00")
(data (i32.const 1616) "gamesmonitor\00")
(data (i32.const 1632) "account not exists!\00")
(data (i32.const 1664) "cannot create objects in table of another contract\00")
(data (i32.const 1728) "gameannounce\00")
(data (i32.const 1744) "unkown bet id!\00")
(data (i32.const 1760) "cannot pass end iterator to erase\00")
(data (i32.const 1808) "cannot increment end iterator\00")
(data (i32.const 1840) "Hit magic number! You got extra bonus! https://www.ppdice.com\00")
(data (i32.const 1904) "notify\00")
(data (i32.const 1920) "settle\00")
(data (i32.const 1936) "get\00")
(data (i32.const 1952) "object passed to erase is not in multi_index\00")
(data (i32.const 2000) "cannot erase objects in table of another contract\00")
(data (i32.const 2064) "attempt to remove object that was not in multi_index\00")
(data (i32.const 2128) "bet exists!\00")
(data (i32.const 2144) "Random value \00")
(data (i32.const 2160) "gameparamset\00")
(data (i32.const 2176) "Accept EOS/PPT only!\00")
(data (i32.const 2224) "eosio.stake\00")
(data (i32.const 2240) "tptvotepools\00")
(data (i32.const 2256) "read_transaction failed\00")
(data (i32.const 2288) "wrong transaction\00")
(data (i32.const 2320) "Invalid transfer amount.\00")
(data (i32.const 2352) "Transfer amount not positive\00")
(data (i32.const 2384) "Maintaining ...\00")
(data (i32.const 2400) " single percent NOT INIT \00")
(data (i32.const 2432) "Bet amount exceeds max amount.\00")
(data (i32.const 2464) "Game under maintain, stay tuned.\00")
(data (i32.const 2512) "Memo is for dice info, cannot be empty.\00")
(data (i32.const 2560) ",\00")
(data (i32.const 2576) "Roll type cannot be empty!\00")
(data (i32.const 2608) "Roll prediction cannot be empty!\00")
(data (i32.const 2656) "Inviter can\'t be self\00")
(data (i32.const 2688) " max reward percent NOT INIT \00")
(data (i32.const 2720) " max reward percent too big \00")
(data (i32.const 2752) "Bet amount must more than %.4f and max reward must less than %.4f\00")
(data (i32.const 2832) "Bet border must between 2 to 97\00")
(data (i32.const 2864) "Unknown global id\00")
(data (i32.const 2896) "token not found\00")
(data (i32.const 2912) "\11\00\00\00\12\00\00\00")
(data (i32.const 2928) "T = \00")
(data (i32.const 2944) "static const char *boost::detail::ctti<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> > >::n() [T = boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char> >]\00")
(data (i32.const 3168) "Token do not be supported, or symbol not match with the code!\00")
(data (i32.const 11632) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(data (i32.const 11728) "%llu\00")
(data (i32.const 11744) "\19\00\n\00\19\19\19\00\00\00\00\05\00\00\00\00\00\00\t\00\00\00\00\0b\00\00\00\00\00\00\00\00\19\00\11\n\19\19\19\03\n\07\00\01\1b\t\0b\18\00\00\t\06\0b\00\00\0b\00\06\19\00\00\00\19\19\19\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0e\00\00\00\00\00\00\00\00\19\00\n\0d\19\19\19\00\0d\00\00\02\00\t\0e\00\00\00\t\00\0e\00\00\0e\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\13\00\00\00\00\13\00\00\00\00\t\0c\00\00\00\00\00\0c\00\00\0c\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\10\00\00\00\00\00\00\00\00\00\00\00\0f\00\00\00\04\0f\00\00\00\00\t\10\00\00\00\00\00\10\00\00\10\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\12\00\00\00\00\00\00\00\00\00\00\00\11\00\00\00\00\11\00\00\00\00\t\12\00\00\00\00\00\12\00\00\12\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\1a\00\00\00\1a\1a\1a\00\00\00\00\00\00\t\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\14\00\00\00\00\00\00\00\00\00\00\00\17\00\00\00\00\17\00\00\00\00\t\14\00\00\00\00\00\14\00\00\14\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\16\00\00\00\00\00\00\00\00\00\00\00\15\00\00\00\00\15\00\00\00\00\t\16\00\00\00\00\00\16\00\00\16\00\00")
(data (i32.const 12208) "0123456789ABCDEF")
(data (i32.const 12224) "-+   0X0x\00")
(data (i32.const 12240) "(null)\00")
(data (i32.const 12256) "-0X+0X 0X-0x+0x 0x\00")
(data (i32.const 12288) "inf\00")
(data (i32.const 12304) "INF\00")
(data (i32.const 12320) "nan\00")
(data (i32.const 12336) "NAN\00")
(data (i32.const 12352) ".\00")
(data (i32.const 12368) "T!\"\19\0d\01\02\03\11K\1c\0c\10\04\0b\1d\12\1e\'hnopqb \05\06\0f\13\14\15\1a\08\16\07($\17\18\t\n\0e\1b\1f%#\83\82}&*+<=>?CGJMXYZ[\\]^_`acdefgijklrstyz{|\00")
(data (i32.const 12464) "Illegal byte sequence\00Domain error\00Result not representable\00Not a tty\00Permission denied\00Operation not permitted\00No such file or directory\00No such process\00File exists\00Value too large for data type\00No space left on device\00Out of memory\00Resource busy\00Interrupted system call\00Resource temporarily unavailable\00Invalid seek\00Cross-device link\00Read-only file system\00Directory not empty\00Connection reset by peer\00Operation timed out\00Connection refused\00Host is down\00Host is unreachable\00Address in use\00Broken pipe\00I/O error\00No such device or address\00Block device required\00No such device\00Not a directory\00Is a directory\00Text file busy\00Exec format error\00Invalid argument\00Argument list too long\00Symbolic link loop\00Filename too long\00Too many open files in system\00No file descriptors available\00Bad file descriptor\00No child process\00Bad address\00File too large\00Too many links\00No locks available\00Resource deadlock would occur\00State not recoverable\00Previous owner died\00Operation canceled\00Function not implemented\00No message of desired type\00Identifier removed\00Device not a stream\00No data available\00Device timeout\00Out of streams resources\00Link has been severed\00Protocol error\00Bad message\00File descriptor in bad state\00Not a socket\00Destination address required\00Message too large\00Protocol wrong type for socket\00Protocol not available\00Protocol not supported\00Socket type not supported\00Not supported\00Protocol family not supported\00Address family not supported by protocol\00Address not available\00Network is down\00Network unreachable\00Connection reset by network\00Connection aborted\00No buffer space available\00Socket is connected\00Socket not connected\00Cannot send after socket shutdown\00Operation already in progress\00Operation in progress\00Stale file handle\00Remote I/O error\00Quota exceeded\00No medium found\00Wrong medium type\00No error information\00\00")
(import "env" "__addtf3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__eqtf2" (func $fimport$1 (param i64 i64 i64 i64) (result i32)))
(import "env" "__extenddftf2" (func $fimport$2 (param i32 f64)))
(import "env" "__fixtfsi" (func $fimport$3 (param i64 i64) (result i32)))
(import "env" "__fixunstfsi" (func $fimport$4 (param i64 i64) (result i32)))
(import "env" "__floatsitf" (func $fimport$5 (param i32 i32)))
(import "env" "__floatunsitf" (func $fimport$6 (param i32 i32)))
(import "env" "__multf3" (func $fimport$7 (param i32 i64 i64 i64 i64)))
(import "env" "__multi3" (func $fimport$8 (param i32 i64 i64 i64 i64)))
(import "env" "__netf2" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "__subtf3" (func $fimport$10 (param i32 i64 i64 i64 i64)))
(import "env" "__unordtf2" (func $fimport$11 (param i64 i64 i64 i64) (result i32)))
(import "env" "abort" (func $fimport$12))
(import "env" "action_data_size" (func $fimport$13 (result i32)))
(import "env" "current_receiver" (func $fimport$14 (result i64)))
(import "env" "current_time" (func $fimport$15 (result i64)))
(import "env" "db_find_i64" (func $fimport$16 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$17 (param i32 i32 i32) (result i32)))
(import "env" "db_lowerbound_i64" (func $fimport$18 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$19 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$20 (param i32)))
(import "env" "db_store_i64" (func $fimport$21 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$22 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$23 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$24 (param i32)))
(import "env" "is_account" (func $fimport$25 (param i64) (result i32)))
(import "env" "memcpy" (func $fimport$26 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$27 (param i32 i32 i32) (result i32)))
(import "env" "memset" (func $fimport$28 (param i32 i32 i32) (result i32)))
(import "env" "prints" (func $fimport$29 (param i32)))
(import "env" "read_action_data" (func $fimport$30 (param i32 i32) (result i32)))
(import "env" "read_transaction" (func $fimport$31 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$32 (param i64)))
(import "env" "require_auth2" (func $fimport$33 (param i64 i64)))
(import "env" "require_recipient" (func $fimport$34 (param i64)))
(import "env" "send_deferred" (func $fimport$35 (param i32 i64 i32 i32 i32)))
(import "env" "send_inline" (func $fimport$36 (param i32 i32)))
(import "env" "sha256" (func $fimport$37 (param i32 i32 i32)))
(import "env" "transaction_size" (func $fimport$38 (result i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_ZN6ppgame6randomC2Ev" (func $5))
(export "_ZN6ppgame6randomD2Ev" (func $6))
(export "_ZN6ppgame6random4seedE11checksum256S1_" (func $7))
(export "_ZNK6ppgame6random7mixseedER11checksum256S2_S2_" (func $8))
(export "_ZN6ppgame6random9generatorEy" (func $9))
(export "_ZNK6ppgame6random3genER11checksum256y" (func $10))
(export "_ZNK6ppgame6random12get_sys_seedEv" (func $11))
(export "_ZNK6ppgame6random13get_user_seedEv" (func $12))
(export "_ZNK6ppgame6random9get_mixedEv" (func $13))
(export "_ZNK6ppgame6random8get_seedEv" (func $14))
(export "apply" (func $15))
(export "malloc" (func $252))
(export "free" (func $255))
(export "_ZNSt3__19to_stringEy" (func $271))
(export "snprintf" (func $276))
(export "vsnprintf" (func $277))
(export "__errno_location" (func $279))
(export "vfprintf" (func $280))
(export "__lockfile" (func $282))
(export "__unlockfile" (func $283))
(export "__fwritex" (func $284))
(export "strerror" (func $286))
(export "strnlen" (func $287))
(export "wctomb" (func $288))
(export "__signbitl" (func $289))
(export "__fpclassifyl" (func $290))
(export "frexpl" (func $291))
(export "wcrtomb" (func $292))
(export "memchr" (func $293))
(export "__lctrans" (func $294))
(export "__lctrans_impl" (func $295))
(export "__mo_lookup" (func $296))
(export "strcmp" (func $297))
(export "__towrite" (func $298))
(export "sprintf" (func $299))
(export "vsprintf" (func $300))
(export "atoi" (func $301))
(export "memcmp" (func $302))
(export "strlen" (func $303))
(table $0 19 19 anyfunc)
(elem (i32.const 0) $304 $16 $26 $33 $28 $39 $30 $18 $20 $37 $31 $35 $42 $22 $24 $41 $278 $244 $245)



int_32 .FUNC $220 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)118
	*($0 + [8]) = (int_64)5
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC __fwritex (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($2 + [16])
	if ( $6 ){ goto $label$2 }
	$6 = [0]
	if ( CALL __towrite($2) ){ goto $label$1 }
	$6 = *(($2 + [16]))
	
.LABEL $label$2
	$7 = *($2 + [20])
	if ( ((uint_32)($6 - $7) >= (uint_32)$1) ){ goto $label$3 }
	return CALL int_32 $2((int_32 $0), (int_32 $1), (int_32 *($2 + [36])))
	
.LABEL $label$3
	$8 = [0]
	if ( ((int_32)*($2 + [75]) < (int_32)[0]) ){ goto $label$4 }
	$3 = ($0 + $1)
	$8 = [0]
	$6 = [0]
	
.LOOP $label$5:
	if ( (($1 + $6) == 0) ){ goto $label$4 }
	$5 = ($3 + $6)
	$4 = ($6 + [-1])
	$6 = $4
	if ( ((int_32)*(($5 + [-1])) != (int_32)[10]) ){ goto $label$5 }
	$8 = (($1 + $4) + [1])
	$6 = CALL int_32 $2((int_32 $0), (int_32 $8), (int_32 *($2 + [36])))
	if ( ($6 <= $8) ){ goto $label$1 }
	$1 = ((int_32)$4 ^ (int_32)[-1])
	$0 = (($3 + $4) + [1])
	$7 = *(($2 + [20]))
	
.LABEL $label$4
	CALL memcpy($7, $0, $1)
	*(($6 = ($2 + [20]))) = (*($6) + $1)
	return ($8 + $1)
	
.LABEL $label$1
	return $6
}

void .FUNC $285 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$1 = ($1 + [-9])
	if ( ((uint_32)$1 > (uint_32)[17]) ){ goto $label$1 }
	goto $label$19 
	
.LABEL $label$19
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$18
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$17
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$16
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$15
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$14
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$13
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$12
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$11
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$10
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$9
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$8
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$7
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$6
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$5
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$4
	$1 = *($2)
	*($2) = ($1 + [4])
	*($0) = *($1)
	goto $label$1 
	
.LABEL $label$3
	$1 = ((*($2) + [7]) & [-8])
	*($2) = ($1 + [8])
	CALL __extenddftf2($4, *($1))
	*(($0 + [8])) = *(($4 + [8]))
	*($0) = *($4)
	goto $label$1 
	
.LABEL $label$2
	$1 = ((*($2) + [15]) & [-16])
	*($2) = ($1 + [16])
	$3 = *($1)
	*(($0 + [8])) = *($1 + [8])
	*($0) = $3
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	$1
}

int_32 .FUNC $174 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [80])
	*([0] + [4]) = $6
	*($0 + [24]) = (int_64)0
	*(($4 = ($0 + [32]))) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$3 = (uint_64)*($4) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	*($0 + [60]) = $1
	*($0 + [56]) = [0]
	$4 = *($2 + [4])
	*($0) = *(*($4))
	*($0 + [8]) = *(*($4 + [4]))
	$5 = *($2)
	*($0 + [16]) = *(*($4 + [8]))
	$1 = *($4 + [12])
	*($0 + [24]) = *($1)
	*(($0 + [32])) = *(($1 + [8]))
	*($0 + [40]) = *(*($4 + [16]))
	*($0 + [48]) = *(*($4 + [20]))
	*($0 + [56]) = *(*($4 + [24]))
	*($6 + [72]) = ($6 + [53])
	*($6 + [68]) = $6
	*($6 + [64]) = $6
	CALL $175(($6 + [64]), $0)
	$3 = *($0)
	*($0 + [64]) = CALL db_store_i64(*($5 + [8]), (int_64)-2189427484511660672, *(*($2 + [8])), $3, $6, [53])
	if ( (uint_64)($3 <= *($5 + [16])) ){ goto $label$6 }
	*(($5 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [80])
	return $0
}

int_32 .FUNC _ZN6ppgame6randomD2Ev (int_32 $0)
{
	return $0
}

void .FUNC $176 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $119(*($1), ($0 + [32]))
	*($4 + [8]) = $0
	CALL $178(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $177 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [224])
	*([0] + [4]) = $15
	*(($15 + [108])) = *(($1 + [28]))
	*(($9 = (($15 + [96]) + [8]))) = *(($1 + [24]))
	*($15 + [96]) = *($1 + [16])
	*($15 + [100]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	$11 = [0]
	*($15 + [80]) = [0]
	*($15 + [84]) = [0]
	*($15 + [88]) = [0]
	$12 = (*(($1 + [36])) - *($1 + [32]))
	$8 = int_32($12 >> [4])
	if ( ($8 == 0) ){ goto $label$6 }
	if ( ((uint_32)$8 >= (uint_32)[268435456]) ){ goto $label$2 }
	$12 = CALL $259($12)
	*(($15 + [88])) = ($12 + ($8 << [4]))
	*($15 + [80]) = $12
	*($15 + [84]) = $12
	$8 = *(($1 + [32]))
	$11 = (*(($1 + [36])) - $8)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($12, $8, $11)
	$11 = ($12 + $11)
	*($15 + [84]) = $11
	goto $label$4 
	
.LABEL $label$6
	$12 = [0]
	$13 = [0]
	$14 = [0]
	goto $label$3 
	
.LABEL $label$5
	$11 = $12
	
.LABEL $label$4
	$13 = $12
	$14 = $12
	
.LABEL $label$3
	*(($8 = (($15 + [48]) + [24]))) = *(($1 + [72]))
	*(($10 = (($15 + [48]) + [16]))) = *(($1 + [64]))
	*($15 + [48]) = *($1 + [48])
	*($15 + [56]) = *(($1 + [56]))
	$7 = *($1 + [104])
	$6 = *($1 + [96])
	$5 = *($1 + [88])
	$4 = *($1 + [80])
	*((($15 + [128]) + [24])) = *($8)
	*((($15 + [128]) + [16])) = *($10)
	*($15 + [136]) = *($15 + [56])
	*($15 + [128]) = *($15 + [48])
	*((($15 + [112]) + [8])) = *($9)
	*($15 + [112]) = *($15 + [96])
	$1 = *($0 + [4])
	$0 = *($1 + [4])
	$8 = (*(*($0)) + int_32($0 >> [1]))
	$1 = *($1)
	if ( (($0 & [1]) == 0) ){ goto $label$7 }
	$1 = *((*($8) + $1))
	
.LABEL $label$7
	*(($10 = (($15 + [208]) + [8]))) = *((($15 + [112]) + [8]))
	*($15 + [208]) = *($15 + [112])
	*($15 + [192]) = [0]
	*($15 + [200]) = [0]
	*($15 + [196]) = [0]
	$0 = ($11 - $14)
	$9 = int_32($0 >> [4])
	if ( ($9 == 0) ){ goto $label$8 }
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$1 }
	$0 = CALL $259($0)
	*(($15 + [200])) = ($0 + ($9 << [4]))
	*($15 + [192]) = $0
	*($15 + [196]) = $0
	$11 = ($11 - $13)
	if ( ((int_32)$11 < (int_32)[1]) ){ goto $label$8 }
	CALL memcpy($0, $12, $11)
	*($15 + [196]) = ($0 + $11)
	
.LABEL $label$8
	*(($12 = (($15 + [160]) + [24]))) = *((($15 + [128]) + [24]))
	*(($11 = (($15 + [160]) + [16]))) = *((($15 + [128]) + [16]))
	*($15 + [168]) = *($15 + [136])
	*($15 + [160]) = *($15 + [128])
	*((($15 + [32]) + [8])) = *($10)
	*($15 + [32]) = *($15 + [208])
	*(($15 + [24])) = *($12)
	*(($15 + [16])) = *($11)
	*($15 + [8]) = *($15 + [168])
	*($15) = *($15 + [160])
	CALL void $8((int_32 $2), (int_64 $3), (int_64 ($15 + [32])), (int_32 ($15 + [192])), (int_32 $15), (int_32 ($4 & [255])), (int_32 $5), (int_64 $6), (int_64 $7), (int_64 $1))
	$1 = *($15 + [192])
	if ( ($1 == 0) ){ goto $label$9 }
	*($15 + [196]) = $1
	CALL $261($1)
	
.LABEL $label$9
	$1 = *($15 + [80])
	if ( ($1 == 0) ){ goto $label$10 }
	*($15 + [84]) = $1
	CALL $261($1)
	
.LABEL $label$10
	*([0] + [4]) = ($15 + [224])
	return (unreachable)
	
.LABEL $label$2
	CALL $273(($15 + [80]))
	
.LABEL $label$1
	CALL $273(($15 + [192]))
	(unreachable)
}

void .FUNC $170 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $261($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $171 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [256])
	CALL memcpy(($0 + [24]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [32]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [40]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [48]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

void .FUNC $172 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_64 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	*($11 + [88]) = $7
	*($11 + [80]) = $1
	*($11 + [72]) = $2
	*($11 + [64]) = $3
	*($11 + [63]) = $5
	*($11 + [48]) = $6
	$8 = *(($0 + [88]))
	$10 = *(($0 + [92]))
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$1 }
	$5 = ($10 + [-24])
	$9 = ([0] - $8)
	
.LOOP $label$2:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$1 }
	$10 = $5
	$7 = ($5 + [-24])
	$5 = $7
	if ( ((int_32)($7 + $9) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [64])
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$4 }
	$7 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$5), [304])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$10 = CALL db_find_i64(*(($0 + [64])), *(($0 + [72])), (int_64)-2189427484511660672, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $79($5, $10)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$5), [304])
	
.LABEL $label$3
	CALL eosio_assert(($7 == 0), [2128])
	$1 = *($0)
	*($11 + [28]) = $4
	*($11 + [20]) = ($11 + [72])
	*($11 + [16]) = ($11 + [80])
	*($11 + [24]) = ($11 + [64])
	*($11 + [32]) = ($11 + [63])
	*($11 + [36]) = ($11 + [48])
	*($11 + [40]) = ($11 + [88])
	CALL $173(($11 + [8]), $5, $1, ($11 + [16]))
	*([0] + [4]) = ($11 + [96])
}

void .FUNC _ZN6ppgame6random4seedE11checksum256S1_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($0) = *($1)
	*(($3 = ($0 + [24]))) = *(($1 + [24]))
	*(($4 = ($0 + [16]))) = *(($1 + [16]))
	*(($5 = ($0 + [8]))) = *(($1 + [8]))
	*(($1 = ($0 + [56]))) = *(($2 + [24]))
	*(($6 = ($0 + [48]))) = *(($2 + [16]))
	*(($7 = ($0 + [40]))) = *(($2 + [8]))
	*($0 + [32]) = *($2)
	*(($8 + [24])) = *($3)
	*(($8 + [16])) = *($4)
	*($8 + [8]) = *($5)
	*($8) = *($0)
	*(($8 + [56])) = *($1)
	*(($8 + [48])) = *($6)
	*(($8 + [40])) = *($7)
	*($8 + [32]) = *($0 + [32])
	CALL sha256($8, [64], ($0 + [64]))
	*(($0 + [120])) = *(($0 + [88]))
	*(($0 + [112])) = *(($0 + [80]))
	*(($0 + [104])) = *(($0 + [72]))
	*($0 + [96]) = *($0 + [64])
	*([0] + [4]) = ($8 + [64])
}

void .FUNC $246 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	*($12) = [0]
	$8 = *($1 + [8])
	*($12 + [8]) = $8
	if ( ((uint_32)$8 > (uint_32)[8]) ){ goto $label$2 }
	$11 = $12
	$10 = $1
	goto $label$1 
	
.LABEL $label$2
	$11 = CALL $260($8)
	*($12) = $11
	$10 = *($1)
	
.LABEL $label$1
	CALL memcpy($11, $10, $8)
	$4 = *(($12 + [8]))
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$3 }
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$5 }
	$5 = ($12 + $4)
	
.LOOP $label$6:
	$7 = *($2)
	$10 = $12
	$8 = $4
	if ( ($8 == 0) ){ goto $label$7 }
	
.LOOP $label$8:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$9 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$9
	$8 = $11
	if ( $8 ){ goto $label$8 }
	
.LABEL $label$7
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$10 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$10
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$5 = *($12)
	$6 = ($5 + $4)
	
.LOOP $label$11:
	$7 = *($2)
	$10 = $5
	$8 = $4
	if ( ($8 == 0) ){ goto $label$12 }
	
.LOOP $label$13:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$14 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$14
	$8 = $11
	if ( $8 ){ goto $label$13 }
	
.LABEL $label$12
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$15 }
	if ( ((int_32)*($10) <= (int_32)$7) ){ goto $label$3 }
	
.LABEL $label$15
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)$3) ){ goto $label$11 }
	
.LABEL $label$4
	$2 = $3
	
.LABEL $label$3
	if ( ($4 <= [9]) ){ goto $label$16 }
	$8 = *($12)
	if ( ($8 == 0) ){ goto $label$16 }
	CALL $262($8)
	
.LABEL $label$16
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$19 }
	if ( (*($1 + [12]) == 0) ){ goto $label$18 }
	$4 = ($2 + [1])
	goto $label$17 
	
.LABEL $label$19
	$2 = $3
	$4 = $3
	goto $label$17 
	
.LABEL $label$18
	$5 = *(($1 + [8]))
	if ( ((uint_32)$5 >= (uint_32)[9]) ){ goto $label$20 }
	$6 = ($1 + $5)
	$4 = $2
	
.LOOP $label$21:
	$7 = *($4)
	$10 = $1
	$8 = $5
	if ( ($8 == 0) ){ goto $label$22 }
	
.LOOP $label$23:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$24 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$24
	$8 = $11
	if ( $8 ){ goto $label$23 }
	
.LABEL $label$22
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$21 }
	goto $label$17 
	
.LABEL $label$20
	$6 = *($1)
	$1 = ($6 + $5)
	$4 = $2
	
.LOOP $label$25:
	$7 = *($4)
	$10 = $6
	$8 = $5
	if ( ($8 == 0) ){ goto $label$26 }
	
.LOOP $label$27:
	$11 = ((int_32)$8 / (int_32)[2])
	$9 = ($10 + $11)
	if ( ((int_32)*($9) >= (int_32)$7) ){ goto $label$28 }
	$10 = ($9 + [1])
	$11 = (($8 + [-1]) - $11)
	
.LABEL $label$28
	$8 = $11
	if ( $8 ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)$10 == (int_32)$1) ){ goto $label$17 }
	if ( ((int_32)*($10) > (int_32)$7) ){ goto $label$17 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$25 }
	
.LABEL $label$17
	*($0 + [4]) = $4
	*($0) = $2
	*([0] + [4]) = ($12 + [16])
}

void .FUNC $178 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[31]), [256])
	CALL memcpy(($3 + [48]), *($2 + [4]), [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [256])
	CALL memcpy(($2 + [80]), *($0 + [4]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [88]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [96]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((uint_32)(*($1 + [8]) - *($1 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($2 + [104]), *($1 + [4]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

int_32 .FUNC snprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($4 + [12]) = $3
	$3 = CALL vsnprintf($0, $1, $2, $3)
	*([0] + [4]) = ($4 + [16])
	return $3
}

int_32 .FUNC $221 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)106
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC _ZN6ppgame6randomC2Ev (int_32 $0)
{
	return $0
}

void .FUNC $127 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	$7 = *(*($0 + [24]))
	$6 = *(*($0 + [20]))
	$5 = *(*($0 + [16]))
	$3 = *(*($0 + [8]))
	$2 = *(*($0 + [4]))
	$4 = *(*(*($0 + [12]) + [4]) + [8])
	$8 = *($0 + [28])
	$14 = [0]
	*($16 + [32]) = [0]
	*($16 + [36]) = [0]
	*($16 + [40]) = [0]
	$12 = (*($8 + [4]) - *($8))
	$9 = int_32($12 >> [4])
	if ( ($9 == 0) ){ goto $label$4 }
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$1 }
	$14 = CALL $259($12)
	*(($16 + [40])) = ($14 + ($9 << [4]))
	*($16 + [36]) = $14
	*($16 + [32]) = $14
	$9 = *($8)
	$8 = (*(($8 + [4])) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($14, $9, $8)
	$15 = ($14 + $8)
	*($16 + [36]) = $15
	goto $label$2 
	
.LABEL $label$4
	$15 = [0]
	goto $label$2 
	
.LABEL $label$3
	$15 = $14
	
.LABEL $label$2
	$11 = *(*($0 + [40]))
	$10 = *(*($0 + [36]))
	$9 = *(*($0 + [32]))
	$8 = *($0 + [44])
	*(($12 = ($16 + [24]))) = *(($8 + [24]))
	*(($13 = ($16 + [16]))) = *(($8 + [16]))
	*($16 + [8]) = *(($8 + [8]))
	*($16) = *($8)
	$0 = *(*($0 + [48]))
	*(($8 = (($16 + [48]) + [24]))) = *($12)
	*(($12 = (($16 + [48]) + [16]))) = *($13)
	*($16 + [56]) = *($16 + [8])
	*($16 + [48]) = *($16)
	*($1) = $2
	*($1 + [8]) = $3
	*($1 + [16]) = $4
	*($1 + [24]) = $5
	*($1 + [32]) = $6
	*($1 + [40]) = $7
	$13 = ($1 + [48])
	if ( ((int_32)$13 == (int_32)($16 + [32])) ){ goto $label$5 }
	CALL $116($13, $14, $15)
	$14 = *($16 + [32])
	
.LABEL $label$5
	*($1 + [64]) = $10
	*($1 + [60]) = $9
	*($1 + [72]) = $11
	*($1 + [80]) = *($16 + [48])
	*(($1 + [92])) = *($16 + [60])
	*(($1 + [88])) = *($16 + [56])
	*(($1 + [84])) = *($16 + [52])
	*(($1 + [108])) = *(($16 + [76]))
	*(($1 + [104])) = *($8)
	*(($1 + [100])) = *(($16 + [68]))
	*(($1 + [96])) = *($12)
	*($1 + [112]) = $0
	if ( ($14 == 0) ){ goto $label$6 }
	*($16 + [36]) = $14
	CALL $261($14)
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $273(($16 + [32]))
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

void .FUNC $189 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $191($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $188 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	if ( ((*($1 + [8]) & [1]) == 0) ){ goto $label$11 }
	CALL $261(*(($1 + [16])))
	
.LABEL $label$11
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $261($6)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)*($3 + [8]) != (int_32)*($3 + [4])), [256])
	CALL memcpy(($4 + [15]), *($3 + [4]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	*($2) = ((int_32)*($4 + [15]) != (int_32)[0])
	$3 = *($0)
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($3 + [8]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($3 + [16]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($3 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($4 + [8]) = $3
	CALL $50(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $48 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($0 + [8]) = (int_64)0
	$4 = [0]
	*($0) = [0]
	*($0 + [16]) = (int_64)0
	*($0 + [24]) = (int_64)0
	*($0 + [32]) = (int_64)0
	*($0 + [40]) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	*($0 + [56]) = (int_64)1398362884
	*($0 + [48]) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$5 = [0]
	
.LABEL $label$6
	CALL eosio_assert($5, [224])
	*($0 + [64]) = (int_64)0
	*($6 + [4]) = $1
	*($6) = $1
	*($6 + [8]) = ($1 + $2)
	*($6 + [16]) = $6
	*($6 + [24]) = $0
	CALL $49(($6 + [24]), ($6 + [16]))
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $264 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $265($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $266 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $259(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $261($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $236 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [272])
	*([0] + [4]) = $7
	$5 = *($1 + [8])
	$6 = *($1 + [4])
	$4 = *($1)
	*($7 + [176]) = [0]
	$3 = *($2 + [8])
	*($7 + [184]) = $3
	$1 = ($4 & [1])
	$5 = ( $5 ? ($1 + [1]) : $1 )
	$1 = ($5 + ( $6 ? uint_32($4 >> [1]) : $1 ))
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$4 = ($7 + [176])
	$6 = $2
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $260($3)
	*($7 + [176]) = $4
	$6 = *($2)
	
.LABEL $label$1
	CALL memcpy($4, $6, $3)
	*($7 + [188]) = *($2 + [12])
	$1 = CALL $237(($7 + [192]), $5, $1, ($7 + [176]))
	$2 = [0]
	*($7 + [232]) = [0]
	$3 = *($1)
	if ( ($3 == 0) ){ goto $label$3 }
	*($7 + [232]) = $3
	if ( ($3 & [1]) ){ goto $label$4 }
	CALL void ($1 + [4])((int_32 (($7 + [232]) | [4])), (int_32 [0]), (int_32 *(($3 & [-2]))))
	$2 = *($1)
	goto $label$3 
	
.LABEL $label$4
	*((($7 + [232]) + [12])) = *(($1 + [12]))
	*($7 + [236 align=4]) = *($1 + [4 align=4])
	$2 = $3
	
.LABEL $label$3
	*($7 + [248]) = *($1 + [16 align=4])
	*($7 + [256]) = *($1 + [24])
	*($7 + [260]) = *($1 + [28])
	*($7 + [264]) = *($1 + [32])
	if ( ($2 == 0) ){ goto $label$5 }
	if ( ($2 & [1]) ){ goto $label$6 }
	$2 = *(($2 & [-2]))
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ($1 + [4])
	CALL void $3((int_32 $3), (int_32 [2]), (int_32 $2))
	
.LABEL $label$6
	*($1) = [0]
	
.LABEL $label$5
	if ( (*(($7 + [184])) <= [9]) ){ goto $label$7 }
	$1 = *($7 + [176])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $262($1)
	
.LABEL $label$7
	*(($7 + [116])) = [0]
	*($7 + [96]) = [0]
	*($7 + [124]) = [0]
	*($7 + [120]) = [0]
	*($7 + [112]) = [0]
	*($7 + [128]) = [1]
	*($7 + [136]) = [0]
	*($7 + [164]) = [0]
	*($7 + [160]) = [0]
	*($7 + [168]) = [1]
	*($7 + [152]) = *($7 + [112])
	*($7 + [40]) = [0]
	$1 = [0]
	$2 = *($7 + [232])
	if ( ($2 == 0) ){ goto $label$8 }
	*($7 + [40]) = $2
	if ( ($2 & [1]) ){ goto $label$9 }
	CALL void (($7 + [232]) | [4])((int_32 (($7 + [40]) | [4])), (int_32 [0]), (int_32 *(($2 & [-2]))))
	$1 = *($7 + [136])
	goto $label$8 
	
.LABEL $label$9
	*((($7 + [40]) + [12])) = *((($7 + [232]) + [12]))
	*($7 + [44 align=4]) = *($7 + [236 align=4])
	$1 = [0]
	
.LABEL $label$8
	*($7 + [56]) = *((($7 + [232]) + [16]))
	*($7 + [64]) = *((($7 + [232]) + [24]))
	*($7 + [68]) = *((($7 + [232]) + [28]))
	*($7 + [72]) = *((($7 + [232]) + [32]))
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	*($7) = $1
	if ( ($1 & [1]) ){ goto $label$11 }
	CALL void (($7 + [136]) | [4])((int_32 ($7 | [4])), (int_32 [0]), (int_32 *(($1 & [-2]))))
	goto $label$10 
	
.LABEL $label$11
	*(($7 + [12])) = *((($7 + [136]) + [12]))
	*($7 + [4 align=4]) = *($7 + [140 align=4])
	
.LABEL $label$10
	*($7 + [16]) = *((($7 + [136]) + [16]))
	*($7 + [24]) = *((($7 + [136]) + [24]))
	*($7 + [28]) = *((($7 + [136]) + [28]))
	*($7 + [32]) = *((($7 + [136]) + [32]))
	$3 = CALL $238(($7 + [80]), ($7 + [40]), $7)
	$1 = *($7)
	if ( ($1 == 0) ){ goto $label$12 }
	if ( ($1 & [1]) ){ goto $label$13 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$13 }
	$2 = ($7 | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$13
	*($7) = [0]
	
.LABEL $label$12
	$1 = *($7 + [40])
	if ( ($1 == 0) ){ goto $label$14 }
	if ( ($1 & [1]) ){ goto $label$15 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$15 }
	$2 = (($7 + [40]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$15
	*($7 + [40]) = [0]
	
.LABEL $label$14
	$4 = *($0)
	*($0) = *($3)
	*($3) = $4
	$1 = *($0 + [4])
	*($0 + [4]) = *($3 + [4])
	*($3 + [4]) = $1
	$2 = *($0 + [8])
	*($0 + [8]) = *($3 + [8])
	*($3 + [8]) = $2
	if ( ($4 == 0) ){ goto $label$16 }
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$18 }
	$2 = ([0] - $4)
	$1 = ($1 + [-12])
	
.LOOP $label$19:
	if ( ((*($1) & [1]) == 0) ){ goto $label$20 }
	CALL $261(*(($1 + [8])))
	
.LABEL $label$20
	$1 = ($1 + [-12])
	if ( ((int_32)($1 + $2) != (int_32)[-12]) ){ goto $label$19 }
	$1 = *($3)
	goto $label$17 
	
.LABEL $label$18
	$1 = $4
	
.LABEL $label$17
	*(($3 + [4])) = $4
	CALL $261($1)
	
.LABEL $label$16
	$1 = *($7 + [136])
	if ( ($1 == 0) ){ goto $label$21 }
	if ( ($1 & [1]) ){ goto $label$22 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$22 }
	$2 = (($7 + [136]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$22
	*($7 + [136]) = [0]
	
.LABEL $label$21
	$1 = *($7 + [232])
	if ( ($1 == 0) ){ goto $label$23 }
	if ( ($1 & [1]) ){ goto $label$24 }
	$1 = *(($1 & [-2]))
	if ( ($1 == 0) ){ goto $label$24 }
	$2 = (($7 + [232]) | [4])
	CALL void $2((int_32 $2), (int_32 [2]), (int_32 $1))
	
.LABEL $label$24
	*($7 + [232]) = [0]
	
.LABEL $label$23
	*([0] + [4]) = ($7 + [272])
	return $0
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [208])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	$8 = ($8 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $1)
	
.LABEL $label$1
	CALL $48(($10 + [40]), $8, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($8)
	
.LABEL $label$5
	$3 = *($10 + [48])
	*(($10 + [140])) = *(($10 + [84]))
	*(($1 = (($10 + [128]) + [8]))) = *(($10 + [80]))
	*($10 + [132]) = *(($10 + [76]))
	$8 = *($10 + [40])
	*($10 + [128]) = *($10 + [72])
	$5 = *($10 + [64])
	$4 = *($10 + [56])
	*(($7 = (($10 + [112]) + [8]))) = *(($10 + [96]))
	*($10 + [112]) = *($10 + [88])
	$6 = *($10 + [104])
	*((($10 + [160]) + [8])) = *($7)
	*((($10 + [144]) + [8])) = *($1)
	*($10 + [160]) = *($10 + [112])
	*($10 + [144]) = *($10 + [128])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$9 = *((*($1) + $9))
	
.LABEL $label$6
	*(($2 = (($10 + [192]) + [8]))) = *((($10 + [144]) + [8]))
	*(($0 = (($10 + [176]) + [8]))) = *((($10 + [160]) + [8]))
	*($10 + [192]) = *($10 + [144])
	*($10 + [176]) = *($10 + [160])
	*((($10 + [24]) + [8])) = *($2)
	*($10 + [24]) = *($10 + [192])
	*((($10 + [8]) + [8])) = *($0)
	*($10 + [8]) = *($10 + [176])
	CALL void $1((int_32 ((int_32)($8 & [255]) != (int_32)[0])), (int_32 $3), (int_64 $4), (int_64 $5), (int_64 ($10 + [24])), (int_32 ($10 + [8])), (int_32 $6), (int_64 $9))
	*([0] + [4]) = ($10 + [208])
	return [1]
}

void .FUNC $42 (int_32 $0, int_32 $1, int_64 $2, int_64 $3, int_64 $4, int_32 $5, int_32 $6, int_64 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_32 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_32 $21
	$21 = (*([0] + [4]) - [320])
	*([0] + [4]) = $21
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [272]
	$16 = (int_64)0
	
.LOOP $label$1:
	$17 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$2 }
	$8 = *($13)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$8 = ($8 + [165])
	goto $label$3 
	
.LABEL $label$4
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$2
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($16)
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [288]
	$16 = (int_64)0
	
.LOOP $label$5:
	$17 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$6 }
	$8 = *($13)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$8 = ($8 + [165])
	goto $label$7 
	
.LABEL $label$8
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$6
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$5 }
	if ( ((int_64)$16 == (int_64)$7) ){ goto $label$10 }
	if ( (CALL is_account($7) == 0) ){ goto $label$10 }
	$9 = *(($0 + [248]))
	$18 = *(($0 + [252]))
	if ( ((int_32)$18 == (int_32)$9) ){ goto $label$11 }
	$13 = ($18 + [-24])
	$10 = ([0] - $9)
	
.LOOP $label$12:
	if ( ((int_64)*(*($13)) == (int_64)126) ){ goto $label$11 }
	$18 = $13
	$8 = ($13 + [-24])
	$13 = $8
	if ( ((int_32)($8 + $10) != (int_32)[-24]) ){ goto $label$12 }
	
.LABEL $label$11
	$8 = ($0 + [224])
	if ( ((int_32)$18 == (int_32)$9) ){ goto $label$16 }
	$13 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($13 + [16]) == (int_32)$8), [304])
	if ( $13 ){ goto $label$15 }
	$13 = [1]
	goto $label$13 
	
.LABEL $label$16
	$13 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)126)
	if ( ((int_32)$13 < (int_32)[0]) ){ goto $label$14 }
	$13 = CALL $51($8, $13)
	CALL eosio_assert(((int_32)*($13 + [16]) == (int_32)$8), [304])
	
.LABEL $label$15
	$13 = *($13 + [8])
	goto $label$13 
	
.LABEL $label$14
	$13 = [1]
	
.LABEL $label$13
	CALL eosio_assert(((int_32)$13 < (int_32)[6]), [368])
	$12 = *($5 + [8])
	$14 = ((int_64)*($5) * (int_64)(CASTING int_64)(int_32 $13))
	$11 = ((int_64)$14 / (int_64)1000)
	CALL eosio_assert((uint_64)(((int_64)$11 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [160])
	$15 = (uint_64)$12 >> (uint_64)(int_64)8)
	$13 = [0]
	
.LOOP $label$19:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $15) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	
.LOOP $label$21:
	$15 = (uint_64)$15 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$15) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	$8 = [1]
	$13 = ($13 + [1])
	if ( ((int_32)$13 < (int_32)[7]) ){ goto $label$19 }
	goto $label$17 
	
.LABEL $label$18
	$8 = [0]
	
.LABEL $label$17
	CALL eosio_assert($8, [224])
	if ( ((int_64)$14 < (int_64)1000) ){ goto $label$10 }
	*($21 + [304]) = $3
	CALL $52(($21 + [256]), ($21 + [304]))
	$13 = *($21 + [264])
	*($21 + [56]) = $4
	*($21 + [48]) = ( $13 ? (($21 + [256]) | [1]) : (*($21 + [256]) & [1]) )
	CALL sprintf(($21 + [128]), [400], ($21 + [48]))
	if ( ((*($21 + [256]) & [1]) == 0) ){ goto $label$22 }
	CALL $261(*(($21 + [264])))
	
.LABEL $label$22
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [464]
	$16 = (int_64)0
	
.LOOP $label$23:
	$17 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$24 }
	$8 = *($13)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$26 }
	$8 = ($8 + [165])
	goto $label$25 
	
.LABEL $label$26
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$25
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$24
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$16 = ((int_64)$17 | (int_64)$16)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$23 }
	$15 = (int_64)0
	$17 = (int_64)59
	$13 = [480]
	$19 = (int_64)0
	
.LOOP $label$27:
	if ( ((uint_64)$15 > (uint_64)(int_64)5) ){ goto $label$32 }
	$8 = *($13)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$31 }
	$8 = ($8 + [165])
	goto $label$30 
	
.LABEL $label$32
	$14 = (int_64)0
	if ( ((uint_64)$15 <= (uint_64)(int_64)11) ){ goto $label$29 }
	goto $label$28 
	
.LABEL $label$31
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$30
	$14 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$29
	$14 = ((int_64)((int_64)$14 & (int_64)31) << (int_64)((int_64)$17 & (int_64)4294967295))
	
.LABEL $label$28
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$19 = ((int_64)$14 | (int_64)$19)
	$17 = ((int_64)$17 + (int_64)-5)
	if ( ((int_64)$17 != (int_64)-6) ){ goto $label$27 }
	$15 = (int_64)0
	$14 = (int_64)59
	$13 = [464]
	$20 = (int_64)0
	
.LOOP $label$33:
	$17 = (int_64)0
	if ( ((uint_64)$15 > (uint_64)(int_64)11) ){ goto $label$34 }
	$8 = *($13)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$36 }
	$8 = ($8 + [165])
	goto $label$35 
	
.LABEL $label$36
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$35
	$17 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$34
	$13 = ($13 + [1])
	$15 = ((int_64)$15 + (int_64)1)
	$20 = ((int_64)$17 | (int_64)$20)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$33 }
	*(($21 + [120])) = [0]
	*($21 + [112]) = (int_64)0
	$13 = CALL strlen(($21 + [128]))
	if ( ((uint_32)$13 >= (uint_32)[-16]) ){ goto $label$9 }
	if ( ((uint_32)$13 >= (uint_32)[11]) ){ goto $label$39 }
	*($21 + [112]) = ($13 << [1])
	$8 = (($21 + [112]) | [1])
	if ( $13 ){ goto $label$38 }
	goto $label$37 
	
.LABEL $label$39
	$18 = (($13 + [16]) & [-16])
	$8 = CALL $259($18)
	*($21 + [112]) = ($18 | [1])
	*($21 + [120]) = $8
	*($21 + [116]) = $13
	
.LABEL $label$38
	CALL memcpy($8, ($21 + [128]), $13)
	
.LABEL $label$37
	*(($8 + $13)) = [0]
	$8 = *($21 + [112])
	*($21 + [112]) = [0]
	$18 = *($21 + [116])
	*($21 + [116]) = [0]
	$10 = *($21 + [120])
	*($21 + [120]) = [0]
	*(($13 = CALL $259([16]))) = $16
	*($13 + [8]) = $19
	*($21 + [304]) = $13
	$13 = ($13 + [16])
	*($21 + [312]) = $13
	*($21 + [256]) = $20
	*($21 + [308]) = $13
	*($21 + [264]) = $7
	*($21 + [272]) = $11
	*(($21 + [280])) = $12
	*($21 + [288]) = $8
	*(($21 + [292])) = $18
	*(($13 = ($21 + [296]))) = $10
	CALL $53($2, (int_64)-3617168760277827584, ($21 + [304]), ($21 + [256]))
	if ( ((*($21 + [288]) & [1]) == 0) ){ goto $label$40 }
	CALL $261(*($13))
	
.LABEL $label$40
	$13 = *($21 + [304])
	if ( ($13 == 0) ){ goto $label$41 }
	*($21 + [308]) = $13
	CALL $261($13)
	
.LABEL $label$41
	if ( ((*($21 + [112]) & [1]) == 0) ){ goto $label$10 }
	CALL $261(*(($21 + [120])))
	
.LABEL $label$10
	if ( ((int_64)*($5 + [8]) != (int_64)1397703940) ){ goto $label$42 }
	$15 = *(($5 + [8]))
	*((($21 + [96]) + [8])) = $15
	$14 = *($5)
	*((($21 + [32]) + [8])) = $15
	*($21 + [96]) = $14
	*($21 + [36]) = *($21 + [100])
	*($21 + [32]) = *($21 + [96])
	CALL $54($0, $3, $7, ($21 + [32]))
	
.LABEL $label$42
	if ( ($1 == 0) ){ goto $label$43 }
	$15 = *(($6 + [8]))
	*((($21 + [80]) + [8])) = $15
	$14 = *($6)
	*((($21 + [16]) + [8])) = $15
	*($21 + [80]) = $14
	*($21 + [20]) = *($21 + [84])
	*($21 + [16]) = *($21 + [80])
	CALL $55($0, $3, $4, $2, ($21 + [16]))
	
.LABEL $label$43
	$15 = *(($5 + [8]))
	*((($21 + [64]) + [8])) = $15
	$14 = *($5)
	*(($21 + [8])) = $15
	*($21 + [64]) = $14
	*($21 + [4]) = *($21 + [68])
	*($21) = *($21 + [64])
	CALL $56($0, $21, $2)
	*([0] + [4]) = ($21 + [320])
	return (unreachable)
	
.LABEL $label$9
	CALL $263(($21 + [112]))
}

void .FUNC $41 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1616]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$3 = *(($0 + [368]))
	$10 = *(($0 + [372]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$5 }
	$10 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$2 = ($0 + [344])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$8 }
	$5 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$2), [304])
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	$10 = CALL db_find_i64(*(($0 + [344])), *(($0 + [352])), (int_64)4344997574076792832, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$7 }
	$5 = CALL $73($2, $10)
	CALL eosio_assert(((int_32)*($5 + [16]) == (int_32)$2), [304])
	
.LABEL $label$7
	$10 = ((int_32)$5 != (int_32)[0])
	CALL eosio_assert($10, [1632])
	CALL eosio_assert($10, [560])
	CALL $74($2, $5, (int_64)0, ($11 + [8]))
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $40 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	*($6 + [8]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [256])
	CALL memcpy(($6 + [8]), $4, [8])
	$3 = *($6 + [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $5))
	*([0] + [4]) = ($6 + [16])
	return [1]
}

int_32 .FUNC $47 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$6 }
	$5 = ($2 + [52])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$4 = ([0] - $3)
	$7 = ($7 + [-32])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $261(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $4) != (int_32)[-32]) ){ goto $label$9 }
	$7 = *(($2 + [48]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $3
	
.LABEL $label$7
	*($5) = $3
	CALL $261($7)
	
.LABEL $label$6
	CALL $261($2)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $261($7)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $46 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$6 }
	$5 = ($2 + [52])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$4 = ([0] - $3)
	$7 = ($7 + [-32])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $261(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $4) != (int_32)[-32]) ){ goto $label$9 }
	$7 = *(($2 + [48]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $3
	
.LABEL $label$7
	*($5) = $3
	CALL $261($7)
	
.LABEL $label$6
	CALL $261($2)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $261($7)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $45 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$1 = *($0)
	if ( ($1 == 0) ){ goto $label$1 }
	$6 = *($0 + [4])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	
.LOOP $label$4:
	$6 = ($6 + [-24])
	$2 = *($6)
	*($6) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$6 }
	$5 = ($2 + [52])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$8 }
	$4 = ([0] - $3)
	$7 = ($7 + [-32])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $261(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-32])
	if ( ((int_32)($7 + $4) != (int_32)[-32]) ){ goto $label$9 }
	$7 = *(($2 + [48]))
	goto $label$7 
	
.LABEL $label$8
	$7 = $3
	
.LABEL $label$7
	*($5) = $3
	CALL $261($7)
	
.LABEL $label$6
	CALL $261($2)
	
.LABEL $label$5
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$4 }
	$7 = *($0)
	goto $label$2 
	
.LABEL $label$3
	$7 = $1
	
.LABEL $label$2
	*(($0 + [4])) = $1
	CALL $261($7)
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$3 = *(($0 + [568]))
	if ( ($3 == 0) ){ goto $label$1 }
	$1 = ($0 + [572])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$3 }
	
.LOOP $label$4:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $261($2)
	
.LABEL $label$5
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$4 }
	$5 = *(($0 + [568]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $3
	
.LABEL $label$2
	*($1) = $3
	CALL $261($5)
	
.LABEL $label$1
	$3 = *(($0 + [528]))
	if ( ($3 == 0) ){ goto $label$6 }
	$1 = ($0 + [532])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$8 }
	
.LOOP $label$9:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	CALL $261($2)
	
.LABEL $label$10
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$9 }
	$5 = *(($0 + [528]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $3
	
.LABEL $label$7
	*($1) = $3
	CALL $261($5)
	
.LABEL $label$6
	CALL $45(($0 + [488]))
	CALL $46(($0 + [448]))
	CALL $47(($0 + [408]))
	$3 = *(($0 + [368]))
	if ( ($3 == 0) ){ goto $label$11 }
	$1 = ($0 + [372])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$13 }
	
.LOOP $label$14:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$15 }
	CALL $261($2)
	
.LABEL $label$15
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$14 }
	$5 = *(($0 + [368]))
	goto $label$12 
	
.LABEL $label$13
	$5 = $3
	
.LABEL $label$12
	*($1) = $3
	CALL $261($5)
	
.LABEL $label$11
	$3 = *(($0 + [328]))
	if ( ($3 == 0) ){ goto $label$16 }
	$1 = ($0 + [332])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$20 }
	if ( ((*($2 + [8]) & [1]) == 0) ){ goto $label$21 }
	CALL $261(*(($2 + [16])))
	
.LABEL $label$21
	CALL $261($2)
	
.LABEL $label$20
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$19 }
	$5 = *(($0 + [328]))
	goto $label$17 
	
.LABEL $label$18
	$5 = $3
	
.LABEL $label$17
	*($1) = $3
	CALL $261($5)
	
.LABEL $label$16
	$3 = *(($0 + [288]))
	if ( ($3 == 0) ){ goto $label$22 }
	$1 = ($0 + [292])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$24 }
	
.LOOP $label$25:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$26 }
	CALL $261($2)
	
.LABEL $label$26
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$25 }
	$5 = *(($0 + [288]))
	goto $label$23 
	
.LABEL $label$24
	$5 = $3
	
.LABEL $label$23
	*($1) = $3
	CALL $261($5)
	
.LABEL $label$22
	$3 = *(($0 + [248]))
	if ( ($3 == 0) ){ goto $label$27 }
	$1 = ($0 + [252])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$29 }
	
.LOOP $label$30:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$31 }
	CALL $261($2)
	
.LABEL $label$31
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$30 }
	$5 = *(($0 + [248]))
	goto $label$28 
	
.LABEL $label$29
	$5 = $3
	
.LABEL $label$28
	*($1) = $3
	CALL $261($5)
	
.LABEL $label$27
	$1 = *(($0 + [208]))
	if ( ($1 == 0) ){ goto $label$32 }
	$4 = ($0 + [212])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$34 }
	
.LOOP $label$35:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$36 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$37 }
	*(($2 + [52])) = $3
	CALL $261($3)
	
.LABEL $label$37
	CALL $261($2)
	
.LABEL $label$36
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$35 }
	$5 = *(($0 + [208]))
	goto $label$33 
	
.LABEL $label$34
	$5 = $1
	
.LABEL $label$33
	*($4) = $1
	CALL $261($5)
	
.LABEL $label$32
	$1 = *(($0 + [168]))
	if ( ($1 == 0) ){ goto $label$38 }
	$4 = ($0 + [172])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$40 }
	
.LOOP $label$41:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$42 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$43 }
	*(($2 + [52])) = $3
	CALL $261($3)
	
.LABEL $label$43
	CALL $261($2)
	
.LABEL $label$42
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$41 }
	$5 = *(($0 + [168]))
	goto $label$39 
	
.LABEL $label$40
	$5 = $1
	
.LABEL $label$39
	*($4) = $1
	CALL $261($5)
	
.LABEL $label$38
	$1 = *(($0 + [128]))
	if ( ($1 == 0) ){ goto $label$44 }
	$4 = ($0 + [132])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$46 }
	
.LOOP $label$47:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$48 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$49 }
	*(($2 + [52])) = $3
	CALL $261($3)
	
.LABEL $label$49
	CALL $261($2)
	
.LABEL $label$48
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$47 }
	$5 = *(($0 + [128]))
	goto $label$45 
	
.LABEL $label$46
	$5 = $1
	
.LABEL $label$45
	*($4) = $1
	CALL $261($5)
	
.LABEL $label$44
	$3 = *(($0 + [88]))
	if ( ($3 == 0) ){ goto $label$50 }
	$1 = ($0 + [92])
	$5 = *($1)
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$52 }
	
.LOOP $label$53:
	$5 = ($5 + [-24])
	$2 = *($5)
	*($5) = [0]
	if ( ($2 == 0) ){ goto $label$54 }
	CALL $261($2)
	
.LABEL $label$54
	if ( ((int_32)$3 != (int_32)$5) ){ goto $label$53 }
	$5 = *(($0 + [88]))
	goto $label$51 
	
.LABEL $label$52
	$5 = $3
	
.LABEL $label$51
	*($1) = $3
	CALL $261($5)
	
.LABEL $label$50
	return $0
}

int_32 .FUNC $222 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)105
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $267 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$2 = CALL strlen($1)
	$5 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$5 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$5) ){ goto $label$7 }
	if ( $4 ){ goto $label$6 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$5 
	
.LABEL $label$7
	if ( $4 ){ goto $label$4 }
	$5 = ($0 + [1])
	if ( $2 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$3 = *($0 + [4])
	
.LABEL $label$5
	CALL $265($0, $5, ($2 - $5), $3, [0], $3, $2, $1)
	return $0
	
.LABEL $label$4
	$5 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	CALL memmove($5, $1, $2)
	
.LABEL $label$2
	*(($5 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$8 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$8
	*($0 + [4]) = $2
	return $0
}

void .FUNC $234 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $259($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*(($8 = ($9 + [56]))) = [0]
	*(($9 + [60])) = [0]
	CALL $66(($9 + [52]), [49])
	$8 = *($8)
	$2 = *($9 + [52])
	*($9 + [84]) = $2
	*($9 + [80]) = $2
	*($9 + [88]) = $8
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $235(($9 + [72]), ($9 + [64]))
	CALL $68(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$4 }
	*($9 + [84]) = $8
	CALL $261($8)
	
.LABEL $label$4
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$5 }
	*(($9 + [56])) = $8
	CALL $261($8)
	
.LABEL $label$5
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$6 }
	*(($9 + [44])) = $8
	CALL $261($8)
	
.LABEL $label$6
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [12]) = $8
	CALL $261($8)
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $273(($9 + [8]))
}

void .FUNC $233 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	CALL eosio_assert([1], [784])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $249 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)((int_32)($8 - $7) / (int_32)[40]) >= (uint_32)$1) ){ goto $label$5 }
	$4 = *($0)
	$5 = ((int_32)($7 - $4) / (int_32)[40])
	$6 = ($5 + $1)
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$3 }
	$7 = [107374182]
	$8 = ((int_32)($8 - $4) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$6 }
	$7 = ($8 << [1])
	$7 = ( $6 ? $7 : ($7 <= $6) )
	if ( ($7 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$8 = CALL $259(((int_32)$7 * (int_32)[40]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = (*($8) + [40])
	*($8) = $7
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$7 = [0]
	$8 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $273($0)
	
.LABEL $label$2
	$2 = ($8 + ((int_32)$7 * (int_32)[40]))
	$8 = ($8 + ((int_32)$5 * (int_32)[40]))
	$7 = $8
	
.LOOP $label$8:
	*($7) = (int_64)0
	*($7 + [16 align=4]) = (int_64)0
	*(($7 + [8])) = (int_64)0
	*(($7 + [24])) = (int_64)0
	*(($7 + [32])) = (int_64)0
	$7 = ($7 + [40])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$4 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$4) ){ goto $label$10 }
	$3 = ([0] - $4)
	$1 = ($1 + [-20])
	
.LOOP $label$11:
	*(($8 + [-32])) = *(($1 + [-12]))
	*(($8 + [-40])) = *(($1 + [-20]))
	*(($4 = ($8 + [-24]))) = (int_64)0
	*(($5 = ($8 + [-16]))) = [0]
	$6 = ($1 + [-4])
	*($4) = *($6)
	*(($8 + [-20])) = *($1)
	$4 = ($1 + [4])
	*($5) = *($4)
	*($4) = [0]
	*(($4 = ($8 + [-12]))) = (int_64)0
	*($6) = (int_64)0
	*(($5 = ($8 + [-4]))) = [0]
	$6 = ($1 + [8])
	*($4) = *($6)
	*(($8 + [-8])) = *(($1 + [12]))
	$4 = ($1 + [16])
	*($5) = *($4)
	*($4) = [0]
	*($6) = (int_64)0
	$8 = ($8 + [-40])
	$1 = ($1 + [-40])
	if ( ((int_32)($1 + $3) != (int_32)[-20]) ){ goto $label$11 }
	$4 = *(($0 + [4]))
	$5 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$5 = $4
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $7
	*(($0 + [8])) = $2
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$12 }
	$1 = ([0] - $5)
	$7 = ($4 + [-24])
	
.LOOP $label$13:
	$8 = *(($7 + [12]))
	if ( ($8 == 0) ){ goto $label$14 }
	*(($7 + [16])) = $8
	CALL $261($8)
	
.LABEL $label$14
	$8 = *($7)
	if ( ($8 == 0) ){ goto $label$15 }
	*(($7 + [4])) = $8
	CALL $261($8)
	
.LABEL $label$15
	$7 = ($7 + [-40])
	if ( ((int_32)($7 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($5 == 0) ){ goto $label$1 }
	CALL $261($5)
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $226 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	*(($5 + [44])) = *(($1 + [28]))
	*(($4 = (($5 + [32]) + [8]))) = *(($1 + [24]))
	*($5 + [32]) = *($1 + [16])
	*($5 + [36]) = *(($1 + [20]))
	$3 = *($1 + [8])
	$2 = *($1)
	CALL $274(($5 + [16]), ($1 + [32]))
	*((($5 + [48]) + [8])) = *($4)
	*($5 + [48]) = *($5 + [32])
	$1 = *($0 + [4])
	$4 = *($1 + [4])
	$0 = (*(*($0)) + int_32($4 >> [1]))
	$1 = *($1)
	if ( (($4 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	*(($4 = (($5 + [80]) + [8]))) = *((($5 + [48]) + [8]))
	*($5 + [80]) = *($5 + [48])
	CALL $274(($5 + [64]), ($5 + [16]))
	*(($5 + [8])) = *($4)
	*($5) = *($5 + [80])
	CALL void $0((int_32 $2), (int_64 $3), (int_64 $5), (int_32 ($5 + [64])), (int_32 $1))
	if ( ((*($5 + [64]) & [1]) == 0) ){ goto $label$2 }
	CALL $261(*($5 + [72]))
	
.LABEL $label$2
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $261(*($5 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $167 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $166 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $165 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $261($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $164 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [32])
	*([0] + [4]) = $4
	$2 = *($0 + [4])
	*($1) = *(*($2))
	$2 = *($2 + [4])
	*($1 + [16]) = (int_64)0
	*($1 + [8]) = *($2)
	$2 = *($0)
	*($1 + [24]) = (int_64)0
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 + [24]), ($1 + [24]), [8])
	$3 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)6714758524942942208, *(*($0 + [8])), $3, $4, [32])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [32])
}

void .FUNC $163 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $259(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [52])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-32])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $261(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $6) != (int_32)[-32]) ){ goto $label$14 }
	$1 = *(($2 + [48]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $261($1)
	
.LABEL $label$11
	CALL $261($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $261($7)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $162 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$2 = *($0)
	$6 = *($0 + [4])
	$7 = *($6)
	$8 = *(*($6 + [4]))
	$3 = *($6 + [8])
	*(($5 = ((($9 = $10) + [48]) + [8]))) = *(($3 + [8]))
	*($9 + [48]) = *($3)
	$4 = *($6 + [12])
	*(($3 = (($9 + [32]) + [8]))) = *(($4 + [8]))
	*($9 + [32]) = *($4)
	$6 = *(*($6 + [16]))
	*((($9 + [16]) + [8])) = *($5)
	*($9 + [16]) = *($9 + [48])
	*(($9 + [8])) = *($3)
	*($9) = *($9 + [32])
	CALL $141($7, $1, $8, ($9 + [16]), $9, $6)
	$7 = *($1 + [48])
	$3 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($3 - $7) >> [5]))
	$6 = [44]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7)
	$5 = ( *($7 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$6 = (($5 + $6) + [16])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($9 + [52]) = $7
	*($9 + [48]) = $7
	*($9 + [56]) = ($7 + $6)
	CALL $142(($9 + [48]), $1)
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($2 + [8]), (int_64)3617318351153397760, *(*($0 + [8])), $8, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($7)
	
.LABEL $label$7
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $161 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	$4 = *($1)
	$9 = *(*($3 + [4]))
	$8 = *($3 + [8])
	*(((($10 = $11) + [48]) + [12])) = *(($8 + [12]))
	*(($7 = (($10 + [48]) + [8]))) = *(($8 + [8]))
	*($10 + [48]) = *($8)
	*($10 + [52]) = *(($8 + [4]))
	$8 = *($3)
	$6 = *($3 + [12])
	*(($5 = (($10 + [32]) + [8]))) = *(($6 + [8]))
	*($10 + [32]) = *($6)
	$3 = *(*($3 + [16]))
	*((($10 + [16]) + [8])) = *($7)
	*($10 + [16]) = *($10 + [48])
	*(($10 + [8])) = *($5)
	*($10) = *($10 + [32])
	CALL $141($8, $1, $9, ($10 + [16]), $10, $3)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [720])
	$8 = *($1 + [48])
	$5 = *(($1 + [52]))
	$9 = (CASTING uint_64)(uint_32 int_32(($5 - $8) >> [5]))
	$3 = [44]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$7 = *($8)
	$7 = ( *($8 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = (($7 + $3) + [16])
	$9 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	$8 = ($8 + [32])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($10 + [52]) = $8
	*($10 + [48]) = $8
	*($10 + [56]) = ($8 + $3)
	CALL $142(($10 + [48]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $160 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([72])
	CALL $145($3)
	*($3 + [60]) = $1
	CALL $162(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [64])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $163(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [48])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [52])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	$3 = ([0] - $5)
	$1 = ($1 + [-32])
	
.LOOP $label$7:
	if ( ((*($1) & [1]) == 0) ){ goto $label$8 }
	CALL $261(*(($1 + [8])))
	
.LABEL $label$8
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $3) != (int_32)[-32]) ){ goto $label$7 }
	$1 = *(($0 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $261($1)
	
.LABEL $label$4
	CALL $261($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC __signbitl (int_64 $0, int_64 $1)
{
	return (CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)63))
}

int_32 .FUNC $230 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	*($0) = *($1)
	*(($0 + [8])) = *(($1 + [8]))
	*($0 + [16 align=4]) = (int_64)0
	*(($0 + [24])) = [0]
	$4 = (*(($1 + [20])) - *($1 + [16]))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$3 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	$4 = CALL $259($4)
	*(($0 + [16])) = $4
	*(($0 + [24])) = ($4 + ($5 << [4]))
	*(($5 = ($0 + [20]))) = $4
	$2 = *(($1 + [16]))
	$3 = (*(($1 + [20])) - $2)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($4, $2, $3)
	*($5) = (*($5) + $3)
	
.LABEL $label$3
	*($0 + [28 align=4]) = (int_64)0
	*(($0 + [36])) = [0]
	$4 = (*(($1 + [32])) - *($1 + [28]))
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$1 }
	$5 = CALL $259($4)
	*(($0 + [28])) = $5
	*(($0 + [36])) = ($5 + $4)
	*(($4 = ($0 + [32]))) = $5
	$3 = *(($1 + [28]))
	$1 = (*(($1 + [32])) - $3)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$4 }
	CALL memcpy($5, $3, $1)
	*($4) = (*($4) + $1)
	
.LABEL $label$4
	return $0
	
.LABEL $label$2
	CALL $273(($0 + [16]))
	
.LABEL $label$1
	CALL $273(($0 + [28]))
	(unreachable)
	return (unreachable)
}

void .FUNC $244 (int_32 $0, int_32 $1, int_32 $2)
{
	if ( ((int_32)$2 != (int_32)[4]) ){ goto $label$4 }
	$0 = [0]
	
.LOOP $label$5:
	$2 = [-3]
	
.LOOP $label$7:
	if ( ((int_32)*((($0 + $2) + [2986])) != (int_32)*(($2 + [2931]))) ){ goto $label$6 }
	if ( ($2 == 0) ){ goto $label$3 }
	$2 = ($2 + [1])
	if ( ((int_32)($0 + $2) != (int_32)[180]) ){ goto $label$7 }
	goto $label$2 
	
.LABEL $label$6
	$2 = [183]
	$0 = ($0 + [1])
	if ( ((int_32)$0 != (int_32)[183]) ){ goto $label$5 }
	goto $label$1 
	
.LABEL $label$4
	CALL $247($0, $1, $2)
	return 
	
.LABEL $label$3
	$2 = $0
	goto $label$1 
	
.LABEL $label$2
	$2 = [183]
	
.LABEL $label$1
	*($1 + [4]) = [0]
	*($1) = ( [2983] ? ($2 + [2987]) : ((int_32)$2 == (int_32)[183]) )
}

int_32 .FUNC $169 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [256])
	CALL memcpy(($1 + [40]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [256])
	CALL memcpy(($1 + [56]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $168 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $261($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $245 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	CALL $246($0, *($1), $2, $3)
}

int_32 .FUNC __errno_location ()
{
	return [14268]
}

int_32 .FUNC $175 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $242 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = $1
	$5 = [0]
	if ( CALL $243($6) ){ goto $label$1 }
	*($6 + [16]) = [0]
	$5 = *($1 + [8])
	*($6 + [24]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$3 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$2 
	
.LABEL $label$3
	$4 = CALL $260($5)
	*($6 + [16]) = $4
	$3 = *($1)
	
.LABEL $label$2
	CALL memcpy($4, $3, $5)
	*($6 + [28]) = *($1 + [12])
	*(($1 = CALL $259([16]))) = [0]
	$5 = *((($6 + [16]) + [8]))
	*($1 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$5 }
	$4 = ($6 + [16])
	$3 = $1
	goto $label$4 
	
.LABEL $label$5
	$3 = CALL $260($5)
	*($1) = $3
	$5 = *(($1 + [8]))
	$4 = *($6 + [16])
	
.LABEL $label$4
	CALL memcpy($3, $4, $5)
	*($2) = $1
	*($1 + [12]) = *(($6 + [28]))
	$5 = [1]
	if ( (*(($6 + [24])) <= [9]) ){ goto $label$1 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $262($1)
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
	return $5
}

int_32 .FUNC wctomb (int_32 $0, int_32 $1)
{
	if ( ($0 == 0) ){ goto $label$1 }
	return CALL wcrtomb($0, $1, [0])
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $243 (int_32 $0)
{
	return [0]
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [56]) = ((int_64)*($1 + [56]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	*($5 + [88]) = ($5 + [80])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $59(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $59 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [56]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC _ZNSt3__19to_stringEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	$6 = [10]
	$2 = (($7 + [16]) | [1])
	CALL memset($2, [0], [10])
	$3 = *($7 + [16])
	if ( ($3 & [1]) ){ goto $label$2 }
	$3 = [20]
	*($7 + [16]) = [20]
	$6 = *($7 + [20])
	goto $label$1 
	
.LABEL $label$2
	*($7 + [20]) = [10]
	
.LABEL $label$1
	*(($7 + [27])) = [0]
	$6 = ( $6 ? uint_32($3 >> [1]) : ($3 & [1]) )
	$5 = ($7 + [24])
	
.LOOP $label$4:
	*($7) = $1
	$3 = CALL snprintf(( *($5) ? $2 : ($3 & [1]) ), ($6 + [1]), [11728], $7)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$6 }
	if ( ((uint_32)$3 <= (uint_32)$6) ){ goto $label$3 }
	$6 = $3
	goto $label$5 
	
.LABEL $label$6
	$6 = (($6 << [1]) | [1])
	
.LABEL $label$5
	$4 = ($3 & [1])
	$3 = *($7 + [16])
	$3 = ( *($7 + [20]) ? uint_32($3 >> [1]) : $4 )
	if ( ((uint_32)$6 <= (uint_32)$3) ){ goto $label$7 }
	CALL $272(($7 + [16]), ($6 - $3), [0])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$7
	if ( $4 ){ goto $label$8 }
	*(((($7 + [16]) + $6) + [1])) = [0]
	*($7 + [16]) = ($6 << [1])
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$8
	*((*($5) + $6)) = [0]
	*($7 + [20]) = $6
	$3 = *($7 + [16])
	goto $label$4 
	
.LABEL $label$3
	$6 = ($6 & [1])
	$6 = *($7 + [16])
	$4 = ( *($7 + [20]) ? uint_32($6 >> [1]) : $6 )
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$10 }
	CALL $272(($7 + [16]), ($3 - $4), [0])
	goto $label$9 
	
.LABEL $label$10
	if ( $6 ){ goto $label$11 }
	*(((($7 + [16]) + $3) + [1])) = [0]
	*($7 + [16]) = ($3 << [1])
	goto $label$9 
	
.LABEL $label$11
	*((*(($7 + [24])) + $3)) = [0]
	*($7 + [20]) = $3
	
.LABEL $label$9
	*($0) = *($7 + [16])
	*(($0 + [8])) = *((($7 + [16]) + [8]))
	*([0] + [4]) = ($7 + [32])
}

void .FUNC $270 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6)
{
	int_32 $7
	int_32 $8
	int_32 $9
	if ( (([-17] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$8 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$8 = *($0 + [8])
	
.LABEL $label$2
	$9 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$9 = [11]
	$2 = ($2 + $1)
	$7 = ($1 << [1])
	$2 = ( $7 ? $2 : ($2 <= $7) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$9 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $259($9)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $8, $4)
	
.LABEL $label$5
	$3 = (($3 - $5) - $4)
	if ( ($3 == 0) ){ goto $label$6 }
	CALL memcpy((($2 + $4) + $6), (($8 + $4) + $5), $3)
	
.LABEL $label$6
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$7 }
	CALL $261($8)
	
.LABEL $label$7
	*($0 + [8]) = $2
	*($0) = ($9 | [1])
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC vsnprintf (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	$5 = [-1]
	*($4 + [148]) = ( ($1 + [-1]) ? [0] : $1 )
	$0 = ( $0 ? ($4 + [158]) : $1 )
	*($4 + [144]) = $0
	*(($4 = CALL memset($4, [0], [144])) + [36]) = [16]
	*($4 + [75]) = [255]
	*($4 + [76]) = [-1]
	*($4 + [44]) = ($4 + [159])
	*($4 + [84]) = ($4 + [144])
	if ( ((int_32)$1 <= (int_32)[-1]) ){ goto $label$2 }
	*($0) = [0]
	$5 = CALL vfprintf($4, $2, $3)
	goto $label$1 
	
.LABEL $label$2
	*(CALL __errno_location()) = [75]
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [160])
	return $5
}

int_32 .FUNC $240 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	*($6) = [0]
	$3 = *($1 + [8])
	*($6 + [8]) = $3
	if ( ((uint_32)$3 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	$4 = $1
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $260($3)
	*($6) = $5
	$4 = *($1)
	
.LABEL $label$1
	CALL memcpy($5, $4, $3)
	*($6 + [12]) = *($1 + [12])
	*($0) = [0]
	*($6 + [16]) = [0]
	$1 = *(($6 + [8]))
	*($6 + [24]) = $1
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$3 = $6
	$5 = ($6 + [16])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $260($1)
	*($6 + [16]) = $5
	$3 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $3, $1)
	*($6 + [28]) = *(($6 + [12]))
	CALL $241($0, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$1 = *($6 + [16])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $262($1)
	
.LABEL $label$5
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$6 }
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $262($1)
	
.LABEL $label$6
	*([0] + [4]) = ($6 + [32])
	return $0
}

int_32 .FUNC $275 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $259($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC $274 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $259($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($3 + [32]), *($2 + [4]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $4) > (uint_32)[7]), [256])
	CALL memcpy(($3 + [40]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [48]), *($2 + [4]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((uint_32)(*($2 + [8]) - $3) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [56]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((uint_32)(*($2 + [8]) - *($2 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [64]), *($2 + [4]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [800])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $259([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [256])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [256])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $72(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $261($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	*([0] + [4]) = $9
	$6 = CALL $259([16])
	*($0 + [8]) = $6
	*($0) = (int_64)55834574865
	CALL memset($6, [46], [13])
	*($6 + [13]) = [0]
	$2 = ($0 + [1])
	$8 = *($1)
	$7 = [17]
	$5 = ($0 + [8])
	$6 = [12]
	
.LOOP $label$1:
	$4 = ((int_32)$6 == (int_32)[12])
	$3 = *((*([0] + [1556]) + (CASTING uint_32)(uint_64 ((int_64)( (int_64)15 ? (int_64)31 : $4 ) & (int_64)$8))))
	$1 = $2
	if ( (($7 & [1]) == 0) ){ goto $label$2 }
	$1 = *($5)
	
.LABEL $label$2
	*(($1 + $6)) = $3
	if ( ($6 == 0) ){ goto $label$3 }
	$6 = ($6 + [-1])
	$8 = (uint_64)$8 >> (uint_64)( (int_64)4 ? (int_64)5 : $4 ))
	$7 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$1 = ($6 & [1])
	$6 = *($0)
	$6 = ( *(($0 + [4])) ? uint_32($6 >> [1]) : $1 )
	$7 = ( *(($0 + [8])) ? $2 : $1 )
	
.LOOP $label$5:
	if ( ($6 == 0) ){ goto $label$4 }
	$1 = ($7 + $6)
	$3 = ($6 + [-1])
	$6 = $3
	if ( ((int_32)*(($1 + [-1])) == (int_32)[46]) ){ goto $label$5 }
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	CALL $275($9, $0, [0], ($3 + [1]), $0)
	if ( (*($0) & [1]) ){ goto $label$7 }
	*($0) = [0]
	goto $label$6 
	
.LABEL $label$7
	*(*(($0 + [8]))) = [0]
	*(($0 + [4])) = [0]
	
.LABEL $label$6
	CALL $266($0, [0])
	*(($0 + [8])) = *(($9 + [8]))
	*($0) = *($9)
	
.LABEL $label$4
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $53 (int_64 $0, int_64 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [96])
	*([0] + [4]) = $9
	*($9 + [16]) = [0]
	*($9 + [8]) = (int_64)0
	$6 = [0]
	$7 = [0]
	$8 = [0]
	$4 = (*($2 + [4]) - *($2))
	$5 = int_32($4 >> [4])
	if ( ($5 == 0) ){ goto $label$2 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$1 }
	$8 = CALL $259($4)
	$6 = ($8 + ($5 << [4]))
	*(($9 + [16])) = $6
	*($9 + [8]) = $8
	*($9 + [12]) = $8
	$7 = *($2)
	$2 = (*(($2 + [4])) - $7)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($8, $7, $2)
	$7 = ($8 + $2)
	*($9 + [12]) = $7
	goto $label$2 
	
.LABEL $label$3
	$7 = $8
	
.LABEL $label$2
	*(($9 + [44])) = $7
	*($9 + [32]) = $1
	*(($9 + [16])) = [0]
	*(($9 + [48])) = $6
	*($9 + [24]) = $0
	*($9 + [40]) = $8
	*($9 + [8]) = (int_64)0
	*($9 + [52]) = [0]
	*((($9 + [24]) + [32])) = [0]
	*((($9 + [24]) + [36])) = [0]
	$8 = *($3 + [32])
	$2 = ( *(($3 + [36])) ? uint_32($8 >> [1]) : ($8 & [1]) )
	$8 = ($2 + [32])
	$0 = (CASTING uint_64)(uint_32 $2)
	$2 = ($9 + [52])
	
.LOOP $label$4:
	$8 = ($8 + [1])
	$0 = (uint_64)$0 >> (uint_64)(int_64)7
	if ( ((int_64)$0) != (int_64)0) ){ goto $label$4 }
	if ( ($8 == 0) ){ goto $label$6 }
	CALL $66($2, $8)
	$2 = *(($9 + [56]))
	$8 = *(($9 + [52]))
	goto $label$5 
	
.LABEL $label$6
	$2 = [0]
	$8 = [0]
	
.LABEL $label$5
	*($9 + [84]) = $8
	*($9 + [80]) = $8
	*($9 + [88]) = $2
	*($9 + [64]) = ($9 + [80])
	*($9 + [72]) = $3
	CALL $67(($9 + [72]), ($9 + [64]))
	CALL $68(($9 + [80]), ($9 + [24]))
	$8 = *($9 + [80])
	CALL send_inline($8, (*($9 + [84]) - $8))
	$8 = *($9 + [80])
	if ( ($8 == 0) ){ goto $label$7 }
	*($9 + [84]) = $8
	CALL $261($8)
	
.LABEL $label$7
	$8 = *($9 + [52])
	if ( ($8 == 0) ){ goto $label$8 }
	*(($9 + [56])) = $8
	CALL $261($8)
	
.LABEL $label$8
	$8 = *($9 + [40])
	if ( ($8 == 0) ){ goto $label$9 }
	*(($9 + [44])) = $8
	CALL $261($8)
	
.LABEL $label$9
	$8 = *($9 + [8])
	if ( ($8 == 0) ){ goto $label$10 }
	*($9 + [12]) = $8
	CALL $261($8)
	
.LABEL $label$10
	*([0] + [4]) = ($9 + [96])
	return (unreachable)
	
.LABEL $label$1
	CALL $273(($9 + [8]))
}

void .FUNC $54 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	$22 = (*([0] + [4]) - [384])
	*([0] + [4]) = $22
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [272]
	$13 = (int_64)0
	
.LOOP $label$1:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$2
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($13)
	$16 = *(($0 + [248]))
	$15 = *(($0 + [252]))
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$5 }
	$10 = ($15 + [-24])
	$6 = ([0] - $16)
	
.LOOP $label$6:
	if ( ((int_64)*(*($10)) == (int_64)118) ){ goto $label$5 }
	$15 = $10
	$4 = ($10 + [-24])
	$10 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [224])
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$10 }
	$10 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$5), [304])
	if ( $10 ){ goto $label$9 }
	$12 = (int_64)1
	goto $label$7 
	
.LABEL $label$10
	$10 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)118)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$8 }
	$10 = CALL $51($5, $10)
	CALL eosio_assert(((int_32)*($10 + [16]) == (int_32)$5), [304])
	
.LABEL $label$9
	$12 = *($10 + [8])
	goto $label$7 
	
.LABEL $label$8
	$12 = (int_64)1
	
.LABEL $label$7
	$11 = *($3)
	$18 = ((int_64)((int_64)((int_64)$11 / (int_64)2) * (int_64)$12) + (int_64)((int_64)$11 & (int_64)1))
	if ( (int_64)($18 == 0) ){ goto $label$14 }
	CALL eosio_assert((uint_64)($18 <= (int_64)100000000), [944])
	*($22 + [312]) = (int_64)1414549508
	*($22 + [304]) = $18
	CALL eosio_assert((uint_64)(((int_64)$18 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [160])
	$12 = (int_64)5525584
	$10 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $12) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$12 = (uint_64)$12 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$12) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$4 = [1]
	$10 = ($10 + [1])
	if ( ((int_32)$10 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$4 = [0]
	
.LABEL $label$15
	CALL eosio_assert($4, [224])
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$13 = (int_64)0
	
.LOOP $label$20:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$21 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$23 }
	$4 = ($4 + [165])
	goto $label$22 
	
.LABEL $label$23
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$22
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$21
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$20 }
	*(($22 + [192])) = [0]
	*($22 + [168]) = $13
	*($22 + [176]) = (int_64)-1
	*($22 + [184]) = (int_64)0
	*($22 + [160]) = *($0 + [40])
	$10 = CALL $62(($22 + [160]), (int_64)5525584, [1536])
	*((($22 + [288]) + [8])) = *(($10 + [8]))
	*($22 + [288]) = *($10)
	$15 = *($22 + [184])
	if ( ($15 == 0) ){ goto $label$24 }
	$6 = ($22 + [188])
	$10 = *($6)
	if ( ((int_32)$10 == (int_32)$15) ){ goto $label$26 }
	
.LOOP $label$27:
	$10 = ($10 + [-24])
	$4 = *($10)
	*($10) = [0]
	if ( ($4 == 0) ){ goto $label$28 }
	CALL $261($4)
	
.LABEL $label$28
	if ( ((int_32)$15 != (int_32)$10) ){ goto $label$27 }
	$10 = *(($22 + [184]))
	goto $label$25 
	
.LABEL $label$26
	$10 = $15
	
.LABEL $label$25
	*($6) = $15
	CALL $261($10)
	
.LABEL $label$24
	CALL eosio_assert(((int_64)1414549508 == (int_64)*($22 + [296])), [960])
	$10 = ( ($22 + [288]) ? ($22 + [304]) : ((int_64)$18 > (int_64)*($22 + [288])) )
	*((($22 + [304]) + [8])) = *(($10 + [8]))
	*($22 + [304]) = *($10)
	$16 = *(($0 + [248]))
	$15 = *(($0 + [252]))
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$29 }
	$10 = ($15 + [-24])
	$6 = ([0] - $16)
	
.LOOP $label$30:
	if ( ((int_64)*(*($10)) == (int_64)124) ){ goto $label$29 }
	$15 = $10
	$4 = ($10 + [-24])
	$10 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$30 }
	
.LABEL $label$29
	if ( ((int_32)$15 == (int_32)$16) ){ goto $label$32 }
	$16 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)$5), [304])
	goto $label$31 
	
.LABEL $label$32
	$16 = [0]
	$10 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)124)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$31 }
	$16 = CALL $51($5, $10)
	CALL eosio_assert(((int_32)*($16 + [16]) == (int_32)$5), [304])
	
.LABEL $label$31
	CALL eosio_assert(((int_32)$16 != (int_32)[0]), [1024])
	CALL eosio_assert((uint_64)(*($16 + [8]) <= (int_64)101), [1056])
	$3 = *(($0 + [248]))
	$15 = *(($0 + [252]))
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$33 }
	$10 = ($15 + [-24])
	$6 = ([0] - $3)
	
.LOOP $label$34:
	if ( ((int_64)*(*($10)) == (int_64)125) ){ goto $label$33 }
	$15 = $10
	$4 = ($10 + [-24])
	$10 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$34 }
	
.LABEL $label$33
	if ( ((int_32)$15 == (int_32)$3) ){ goto $label$36 }
	$15 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [16]) == (int_32)$5), [304])
	goto $label$35 
	
.LABEL $label$36
	$15 = [0]
	$10 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)125)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$35 }
	$15 = CALL $51($5, $10)
	CALL eosio_assert(((int_32)*($15 + [16]) == (int_32)$5), [304])
	
.LABEL $label$35
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [1088])
	CALL eosio_assert((uint_64)(*($15 + [8]) <= (int_64)101), [368])
	$10 = ($16 + [8])
	CALL eosio_assert((uint_64)(((int_64)*($10) + (int_64)*($15 + [8])) <= (int_64)101), [1120])
	$12 = *($10)
	$18 = *($22 + [304])
	CALL __multi3(($22 + [32]), $18, (int_64)$18 >> (int_64)63), $12, (int_64)$12 >> (int_64)63))
	$12 = (int_64)0
	$7 = *((($22 + [304]) + [8]))
	$11 = *((($22 + [32]) + [8]))
	$21 = *($22 + [32])
	CALL eosio_assert(( (uint_64)($21 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ), [1152])
	CALL eosio_assert(( ((uint_64)$21 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ), [1184])
	CALL eosio_assert([1], [1216])
	CALL eosio_assert([1], [1232])
	CALL eosio_assert([1], [1264])
	$8 = ((int_64)$21 / (int_64)100)
	$17 = (int_64)
	CALL eosio_assert(((int_64)$17($18 - $8)) > (int_64)-4611686018427387904), [1312])
	CALL eosio_assert(((int_64)$17 < (int_64)4611686018427387904), [1344])
	$11 = (int_64)59
	$10 = [288]
	$13 = (int_64)0
	
.LOOP $label$37:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$38 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$40 }
	$4 = ($4 + [165])
	goto $label$39 
	
.LABEL $label$40
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$39
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$38
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$37 }
	if ( ((int_64)$13 == (int_64)$2) ){ goto $label$41 }
	$12 = *(($15 + [8]))
	CALL __multi3(($22 + [16]), $18, (int_64)$18 >> (int_64)63), $12, (int_64)$12 >> (int_64)63))
	$11 = *((($22 + [16]) + [8]))
	$12 = *($22 + [16])
	CALL eosio_assert(( (uint_64)($12 <= (int_64)4611686018427387904) ? ((int_64)$11 < (int_64)0) : (int_64)($11 == 0) ), [1152])
	CALL eosio_assert(( ((uint_64)$12 > (uint_64)(int_64)-4611686018427387904) ? ((int_64)$11 > (int_64)-1) : ((int_64)$11 == (int_64)-1) ), [1184])
	CALL eosio_assert([1], [1216])
	CALL eosio_assert([1], [1232])
	$9 = ((int_64)$12 / (int_64)100)
	if ( ((int_64)$12 < (int_64)100) ){ goto $label$41 }
	if ( (CALL is_account($2) == 0) ){ goto $label$41 }
	$17 = (int_64)
	CALL eosio_assert((uint_64)(((int_64)$17($17 - $9)) + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [160])
	*($22 + [368]) = $1
	CALL $52(($22 + [320]), ($22 + [368]))
	*($22) = ( *($22 + [328]) ? (($22 + [320]) | [1]) : (*($22 + [320]) & [1]) )
	CALL sprintf(($22 + [160]), [1376], $22)
	if ( ((*($22 + [320]) & [1]) == 0) ){ goto $label$42 }
	CALL $261(*(($22 + [328])))
	
.LABEL $label$42
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$13 = (int_64)0
	
.LOOP $label$43:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$44 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$46 }
	$4 = ($4 + [165])
	goto $label$45 
	
.LABEL $label$46
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$45
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$44
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$43 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$18 = (int_64)0
	
.LOOP $label$47:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$48 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$50 }
	$4 = ($4 + [165])
	goto $label$49 
	
.LABEL $label$50
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$49
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$48
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$18 = ((int_64)$14 | (int_64)$18)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$47 }
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [480]
	$19 = (int_64)0
	
.LOOP $label$51:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$56 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$55 }
	$4 = ($4 + [165])
	goto $label$54 
	
.LABEL $label$56
	$11 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$55
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$54
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$53
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$52
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$19 = ((int_64)$11 | (int_64)$19)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$51 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$20 = (int_64)0
	
.LOOP $label$57:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$58 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$60 }
	$4 = ($4 + [165])
	goto $label$59 
	
.LABEL $label$60
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$59
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$58
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$20 = ((int_64)$14 | (int_64)$20)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$57 }
	*(($22 + [152])) = [0]
	*($22 + [144]) = (int_64)0
	$10 = CALL strlen(($22 + [160]))
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$63 }
	*($22 + [144]) = ($10 << [1])
	$4 = (($22 + [144]) | [1])
	if ( $10 ){ goto $label$62 }
	goto $label$61 
	
.LABEL $label$63
	$15 = (($10 + [16]) & [-16])
	$4 = CALL $259($15)
	*($22 + [144]) = ($15 | [1])
	*($22 + [152]) = $4
	*($22 + [148]) = $10
	
.LABEL $label$62
	CALL memcpy($4, ($22 + [160]), $10)
	
.LABEL $label$61
	*(($4 + $10)) = [0]
	$4 = *($22 + [144])
	*($22 + [144]) = [0]
	$15 = *($22 + [148])
	*($22 + [148]) = [0]
	$6 = *($22 + [152])
	*($22 + [152]) = [0]
	*(($10 = CALL $259([16]))) = $18
	*($10 + [8]) = $19
	*($22 + [368]) = $10
	$10 = ($10 + [16])
	*($22 + [376]) = $10
	*($22 + [320]) = $20
	*($22 + [372]) = $10
	*($22 + [328]) = $2
	*($22 + [336]) = $9
	*(($22 + [344])) = $7
	*($22 + [352]) = $4
	*(($22 + [356])) = $15
	*(($10 = ($22 + [360]))) = $6
	CALL $53($13, (int_64)-3617168760277827584, ($22 + [368]), ($22 + [320]))
	if ( ((*($22 + [352]) & [1]) == 0) ){ goto $label$64 }
	CALL $261(*($10))
	
.LABEL $label$64
	$10 = *($22 + [368])
	if ( ($10 == 0) ){ goto $label$65 }
	*($22 + [372]) = $10
	CALL $261($10)
	
.LABEL $label$65
	if ( ((*($22 + [144]) & [1]) == 0) ){ goto $label$41 }
	CALL $261(*(($22 + [152])))
	
.LABEL $label$41
	if ( ((int_64)$21 < (int_64)100) ){ goto $label$66 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$13 = (int_64)0
	
.LOOP $label$67:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$68 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$70 }
	$4 = ($4 + [165])
	goto $label$69 
	
.LABEL $label$70
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$69
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$68
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$67 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$18 = (int_64)0
	
.LOOP $label$71:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$72 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$74 }
	$4 = ($4 + [165])
	goto $label$73 
	
.LABEL $label$74
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$73
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$72
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$18 = ((int_64)$14 | (int_64)$18)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$71 }
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [480]
	$19 = (int_64)0
	
.LOOP $label$75:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$80 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$79 }
	$4 = ($4 + [165])
	goto $label$78 
	
.LABEL $label$80
	$11 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$77 }
	goto $label$76 
	
.LABEL $label$79
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$78
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$77
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$76
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$19 = ((int_64)$11 | (int_64)$19)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$75 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$20 = (int_64)0
	
.LOOP $label$81:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$82 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$84 }
	$4 = ($4 + [165])
	goto $label$83 
	
.LABEL $label$84
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$83
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$82
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$20 = ((int_64)$14 | (int_64)$20)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$81 }
	*(($22 + [120])) = $7
	*(($22 + [132])) = (int_64)0
	*($22 + [104]) = $1
	*($22 + [96]) = $20
	*($22 + [112]) = $8
	*($22 + [128]) = [0]
	$4 = ($22 + [128])
	$10 = CALL strlen([1440])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$12 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$87 }
	*(($22 + [128])) = ($10 << [1])
	$15 = ($4 + [1])
	if ( $10 ){ goto $label$86 }
	goto $label$85 
	
.LABEL $label$87
	$6 = (($10 + [16]) & [-16])
	$15 = CALL $259($6)
	*(($22 + [128])) = ($6 | [1])
	*(($22 + [136])) = $15
	*(($22 + [132])) = $10
	
.LABEL $label$86
	CALL memcpy($15, [1440], $10)
	
.LABEL $label$85
	*(($15 + $10)) = [0]
	*(($10 = CALL $259([16]))) = $18
	*($10 + [8]) = $19
	*($22 + [320]) = $10
	$10 = ($10 + [16])
	*($22 + [328]) = $10
	*($22 + [324]) = $10
	*($22 + [160]) = *($22 + [96])
	*($22 + [168]) = *((($22 + [96]) + [8]))
	*((($22 + [160]) + [24])) = *((($22 + [96]) + [24]))
	*($22 + [176]) = *($22 + [112])
	*(($10 = (($22 + [160]) + [40]))) = *(($4 + [8]))
	*($22 + [192]) = *($4)
	*(($22 + [128])) = [0]
	*(($22 + [132])) = [0]
	*((($22 + [96]) + [40])) = [0]
	CALL $53($13, (int_64)-3617168760277827584, ($22 + [320]), ($22 + [160]))
	if ( ((*($22 + [192]) & [1]) == 0) ){ goto $label$88 }
	CALL $261(*($10))
	
.LABEL $label$88
	$10 = *($22 + [320])
	if ( ($10 == 0) ){ goto $label$89 }
	*($22 + [324]) = $10
	CALL $261($10)
	
.LABEL $label$89
	if ( ((*(($22 + [128])) & [1]) == 0) ){ goto $label$66 }
	CALL $261(*(($22 + [136])))
	
.LABEL $label$66
	if ( ((int_64)$17 < (int_64)1) ){ goto $label$14 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$13 = (int_64)0
	
.LOOP $label$90:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$91 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$93 }
	$4 = ($4 + [165])
	goto $label$92 
	
.LABEL $label$93
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$92
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$91
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$13 = ((int_64)$14 | (int_64)$13)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$90 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$18 = (int_64)0
	
.LOOP $label$94:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$95 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$4 = ($4 + [165])
	goto $label$96 
	
.LABEL $label$97
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$95
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$18 = ((int_64)$14 | (int_64)$18)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$94 }
	$12 = (int_64)0
	$14 = (int_64)59
	$10 = [480]
	$19 = (int_64)0
	
.LOOP $label$98:
	if ( ((uint_64)$12 > (uint_64)(int_64)5) ){ goto $label$103 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$102 }
	$4 = ($4 + [165])
	goto $label$101 
	
.LABEL $label$103
	$11 = (int_64)0
	if ( ((uint_64)$12 <= (uint_64)(int_64)11) ){ goto $label$100 }
	goto $label$99 
	
.LABEL $label$102
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$101
	$11 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$100
	$11 = ((int_64)((int_64)$11 & (int_64)31) << (int_64)((int_64)$14 & (int_64)4294967295))
	
.LABEL $label$99
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$19 = ((int_64)$11 | (int_64)$19)
	$14 = ((int_64)$14 + (int_64)-5)
	if ( ((int_64)$14 != (int_64)-6) ){ goto $label$98 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [128]
	$20 = (int_64)0
	
.LOOP $label$104:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$105 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$107 }
	$4 = ($4 + [165])
	goto $label$106 
	
.LABEL $label$107
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$106
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$105
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$20 = ((int_64)$14 | (int_64)$20)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$104 }
	$12 = (int_64)0
	$11 = (int_64)59
	$10 = [288]
	$21 = (int_64)0
	
.LOOP $label$108:
	$14 = (int_64)0
	if ( ((uint_64)$12 > (uint_64)(int_64)11) ){ goto $label$109 }
	$4 = *($10)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$111 }
	$4 = ($4 + [165])
	goto $label$110 
	
.LABEL $label$111
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$110
	$14 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$109
	$10 = ($10 + [1])
	$12 = ((int_64)$12 + (int_64)1)
	$21 = ((int_64)$14 | (int_64)$21)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$108 }
	*(($22 + [72])) = $7
	*(($22 + [84])) = (int_64)0
	*($22 + [56]) = $21
	*($22 + [48]) = $20
	*($22 + [64]) = $17
	*($22 + [80]) = [0]
	$4 = ($22 + [80])
	$10 = CALL strlen([1488])
	if ( ((uint_32)$10 >= (uint_32)[-16]) ){ goto $label$13 }
	if ( ((uint_32)$10 >= (uint_32)[11]) ){ goto $label$114 }
	*(($22 + [80])) = ($10 << [1])
	$15 = ($4 + [1])
	if ( $10 ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$114
	$6 = (($10 + [16]) & [-16])
	$15 = CALL $259($6)
	*(($22 + [80])) = ($6 | [1])
	*(($22 + [88])) = $15
	*(($22 + [84])) = $10
	
.LABEL $label$113
	CALL memcpy($15, [1488], $10)
	
.LABEL $label$112
	*(($15 + $10)) = [0]
	*(($10 = CALL $259([16]))) = $18
	*($10 + [8]) = $19
	*($22 + [320]) = $10
	$10 = ($10 + [16])
	*($22 + [328]) = $10
	*($22 + [324]) = $10
	*($22 + [160]) = *($22 + [48])
	*($22 + [168]) = *((($22 + [48]) + [8]))
	*((($22 + [160]) + [24])) = *((($22 + [48]) + [24]))
	*($22 + [176]) = *($22 + [64])
	*(($10 = (($22 + [160]) + [40]))) = *(($4 + [8]))
	*($22 + [192]) = *($4)
	*(($22 + [80])) = [0]
	*(($22 + [84])) = [0]
	*((($22 + [48]) + [40])) = [0]
	CALL $53($13, (int_64)-3617168760277827584, ($22 + [320]), ($22 + [160]))
	if ( ((*($22 + [192]) & [1]) == 0) ){ goto $label$115 }
	CALL $261(*($10))
	
.LABEL $label$115
	$10 = *($22 + [320])
	if ( ($10 == 0) ){ goto $label$116 }
	*($22 + [324]) = $10
	CALL $261($10)
	
.LABEL $label$116
	if ( ((*(($22 + [80])) & [1]) == 0) ){ goto $label$14 }
	CALL $261(*(($22 + [88])))
	
.LABEL $label$14
	*([0] + [4]) = ($22 + [384])
	return (unreachable)
	
.LABEL $label$13
	CALL $263($4)
	
.LABEL $label$12
	CALL $263($4)
	
.LABEL $label$11
	CALL $263(($22 + [144]))
	(unreachable)
	(unreachable)
}

void .FUNC $55 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_32 $15
	$15 = (*([0] + [4]) - [240])
	*([0] + [4]) = $15
	*($15) = $2
	CALL sprintf(($15 + [48]), [832], $15)
	$2 = (int_64)0
	$13 = (int_64)59
	$9 = [464]
	$10 = (int_64)0
	
.LOOP $label$1:
	$11 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$5 = ($5 + [165])
	goto $label$3 
	
.LABEL $label$4
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$2
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$10 = ((int_64)$11 | (int_64)$10)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$1 }
	$2 = (int_64)0
	$11 = (int_64)59
	$9 = [480]
	$12 = (int_64)0
	
.LOOP $label$5:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$10 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$9 }
	$5 = ($5 + [165])
	goto $label$8 
	
.LABEL $label$10
	$13 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$7 }
	goto $label$6 
	
.LABEL $label$9
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$8
	$13 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$7
	$13 = ((int_64)((int_64)$13 & (int_64)31) << (int_64)((int_64)$11 & (int_64)4294967295))
	
.LABEL $label$6
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$11 = ((int_64)$11 + (int_64)-5)
	if ( ((int_64)$11 != (int_64)-6) ){ goto $label$5 }
	$2 = (int_64)0
	$13 = (int_64)59
	$9 = [464]
	$14 = (int_64)0
	
.LOOP $label$11:
	$11 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$12 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$5 = ($5 + [165])
	goto $label$13 
	
.LABEL $label$14
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$11 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$12
	$9 = ($9 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$14 = ((int_64)$11 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$11 }
	*(($15 + [24])) = [0]
	*($15 + [16]) = (int_64)0
	$9 = CALL strlen(($15 + [48]))
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$15 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$18 }
	*($15 + [16]) = ($9 << [1])
	$5 = (($15 + [16]) | [1])
	if ( $9 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$6 = (($9 + [16]) & [-16])
	$5 = CALL $259($6)
	*($15 + [16]) = ($6 | [1])
	*($15 + [24]) = $5
	*($15 + [20]) = $9
	
.LABEL $label$17
	CALL memcpy($5, ($15 + [48]), $9)
	
.LABEL $label$16
	*(($5 + $9)) = [0]
	*(($5 = (($15 + [32]) + [8]))) = *(($4 + [8]))
	*($15 + [32]) = *($4)
	$4 = *($15 + [16])
	*($15 + [16]) = [0]
	$6 = *($15 + [24])
	$7 = *($15 + [20])
	*($15 + [20]) = [0]
	*($15 + [24]) = [0]
	*(($9 = CALL $259([16]))) = $10
	*($9 + [8]) = $12
	$8 = ($9 + [16])
	*($15 + [232]) = $8
	*($15 + [224]) = $9
	*($15 + [184]) = $1
	*($15 + [176]) = $14
	*($15 + [228]) = $8
	*(($15 + [200])) = *($5)
	*($15 + [192]) = *($15 + [32])
	*($15 + [208]) = $4
	*(($15 + [212])) = $7
	*(($9 = ($15 + [216]))) = $6
	CALL $53($3, (int_64)-3617168760277827584, ($15 + [224]), ($15 + [176]))
	if ( ((*($15 + [208]) & [1]) == 0) ){ goto $label$19 }
	CALL $261(*($9))
	
.LABEL $label$19
	$9 = *($15 + [224])
	if ( ($9 == 0) ){ goto $label$20 }
	*($15 + [228]) = $9
	CALL $261($9)
	
.LABEL $label$20
	if ( ((*($15 + [16]) & [1]) == 0) ){ goto $label$21 }
	CALL $261(*(($15 + [24])))
	
.LABEL $label$21
	*([0] + [4]) = ($15 + [240])
	return (unreachable)
	
.LABEL $label$15
	CALL $263(($15 + [16]))
}

void .FUNC $56 (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_64 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	int_64 $16
	int_64 $17
	int_32 $18
	$18 = (*([0] + [4]) - [112])
	*([0] + [4]) = $18
	$3 = *(($0 + [248]))
	$10 = *(($0 + [252]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)121) ){ goto $label$1 }
	$10 = $9
	$5 = ($9 + [-24])
	$9 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [224])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$6 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [304])
	if ( $9 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$9 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)121)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$4 }
	$9 = CALL $51($5, $9)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [304])
	
.LABEL $label$5
	$11 = *($9 + [8])
	if ( (int_64)($11 == 0) ){ goto $label$4 }
	$15 = *($1)
	$7 = *($1 + [8])
	CALL eosio_assert([1], [160])
	$15 = ((int_64)$15 * (int_64)$11)
	$6 = ((uint_64)$15 / (uint_64)(int_64)1000)
	$9 = [0]
	$8 = (uint_64)$7 >> (uint_64)(int_64)8
	$11 = $8)
	
.LOOP $label$9:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $11) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$8 }
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	
.LOOP $label$11:
	$11 = (uint_64)$11 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$11) & (int_64)255) != (int_64)0) ){ goto $label$8 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$11 }
	
.LABEL $label$10
	$5 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$9 }
	goto $label$7 
	
.LABEL $label$8
	$5 = [0]
	
.LABEL $label$7
	CALL eosio_assert($5, [224])
	if ( (uint_64)($15 <= (int_64)1000) ){ goto $label$4 }
	$11 = (int_64)0
	$15 = (int_64)59
	$9 = [464]
	$12 = (int_64)0
	
.LOOP $label$12:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$13 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$15 }
	$5 = ($5 + [165])
	goto $label$14 
	
.LABEL $label$15
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$14
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$13
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$12 = ((int_64)$13 | (int_64)$12)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$12 }
	$11 = (int_64)0
	$13 = (int_64)59
	$9 = [480]
	$14 = (int_64)0
	
.LOOP $label$16:
	if ( ((uint_64)$11 > (uint_64)(int_64)5) ){ goto $label$21 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$20 }
	$5 = ($5 + [165])
	goto $label$19 
	
.LABEL $label$21
	$15 = (int_64)0
	if ( ((uint_64)$11 <= (uint_64)(int_64)11) ){ goto $label$18 }
	goto $label$17 
	
.LABEL $label$20
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$19
	$15 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$18
	$15 = ((int_64)((int_64)$15 & (int_64)31) << (int_64)((int_64)$13 & (int_64)4294967295))
	
.LABEL $label$17
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$13 = ((int_64)$13 + (int_64)-5)
	if ( ((int_64)$13 != (int_64)-6) ){ goto $label$16 }
	$11 = (int_64)0
	$15 = (int_64)59
	$9 = [464]
	$16 = (int_64)0
	
.LOOP $label$22:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$23 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$25 }
	$5 = ($5 + [165])
	goto $label$24 
	
.LABEL $label$25
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$24
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$23
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$16 = ((int_64)$13 | (int_64)$16)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$22 }
	$11 = (int_64)0
	$15 = (int_64)59
	$9 = [496]
	$17 = (int_64)0
	
.LOOP $label$26:
	$13 = (int_64)0
	if ( ((uint_64)$11 > (uint_64)(int_64)11) ){ goto $label$27 }
	$5 = *($9)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$5 = ($5 + [165])
	goto $label$28 
	
.LABEL $label$29
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$13 = ((int_64)(CASTING uint_64)(uint_32 ($5 & [31])) << (int_64)((int_64)$15 & (int_64)4294967295))
	
.LABEL $label$27
	$9 = ($9 + [1])
	$11 = ((int_64)$11 + (int_64)1)
	$17 = ((int_64)$13 | (int_64)$17)
	$15 = ((int_64)$15 + (int_64)-5)
	if ( ((int_64)$15 != (int_64)-6) ){ goto $label$26 }
	*(($18 + [24])) = $7
	*(($18 + [36])) = (int_64)0
	*($18 + [8]) = $17
	*($18) = $16
	*($18 + [16]) = $6
	*($18 + [32]) = [0]
	$5 = ($18 + [32])
	$9 = CALL strlen([512])
	if ( ((uint_32)$9 >= (uint_32)[-16]) ){ goto $label$3 }
	if ( ((uint_32)$9 >= (uint_32)[11]) ){ goto $label$32 }
	*(($18 + [32])) = ($9 << [1])
	$10 = ($5 + [1])
	if ( $9 ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$32
	$4 = (($9 + [16]) & [-16])
	$10 = CALL $259($4)
	*(($18 + [32])) = ($4 | [1])
	*(($18 + [40])) = $10
	*(($18 + [36])) = $9
	
.LABEL $label$31
	CALL memcpy($10, [512], $9)
	
.LABEL $label$30
	*(($10 + $9)) = [0]
	*(($9 = CALL $259([16]))) = $12
	*($9 + [8]) = $14
	*($18 + [96]) = $9
	$9 = ($9 + [16])
	*($18 + [104]) = $9
	*($18 + [100]) = $9
	*($18 + [48]) = *($18)
	*($18 + [56]) = *(($18 + [8]))
	*((($18 + [48]) + [24])) = *(($18 + [24]))
	*($18 + [64]) = *($18 + [16])
	*(($9 = (($18 + [48]) + [40]))) = *(($5 + [8]))
	*($18 + [80]) = *($5)
	*(($18 + [32])) = [0]
	*(($18 + [36])) = [0]
	*(($18 + [40])) = [0]
	CALL $53($2, (int_64)-3617168760277827584, ($18 + [96]), ($18 + [48]))
	if ( ((*($18 + [80]) & [1]) == 0) ){ goto $label$33 }
	CALL $261(*($9))
	
.LABEL $label$33
	$9 = *($18 + [96])
	if ( ($9 == 0) ){ goto $label$34 }
	*($18 + [100]) = $9
	CALL $261($9)
	
.LABEL $label$34
	if ( ((*(($18 + [32])) & [1]) == 0) ){ goto $label$35 }
	CALL $261(*(($18 + [40])))
	
.LABEL $label$35
	*($18 + [56]) = $7
	*($18 + [48]) = $6
	$3 = *(($0 + [288]))
	$10 = *(($0 + [292]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$36 }
	$9 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$37:
	if ( ((int_64)*(*($9)) == (int_64)$8) ){ goto $label$36 }
	$10 = $9
	$5 = ($9 + [-24])
	$9 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$37 }
	
.LABEL $label$36
	$9 = ($0 + [264])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$39 }
	$5 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$9), [304])
	if ( $5 ){ goto $label$38 }
	goto $label$4 
	
.LABEL $label$39
	$5 = CALL db_find_i64(*(($0 + [264])), *(($0 + [272])), (int_64)7035938535980793856, $8)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$4 }
	$5 = CALL $57($9, $5)
	CALL eosio_assert(((int_32)*($5 + [80]) == (int_32)$9), [304])
	
.LABEL $label$38
	*($18 + [96]) = ($18 + [48])
	CALL eosio_assert([1], [560])
	CALL $58($9, $5, (int_64)0, ($18 + [96]))
	
.LABEL $label$4
	*([0] + [4]) = ($18 + [112])
	return (unreachable)
	
.LABEL $label$3
	CALL $263($5)
}

int_32 .FUNC $57 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $259([96])) + [80]) = $0
	CALL $60(($8 + [32]), $6)
	*($6 + [84]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [84])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $61(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $261($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $247 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ((uint_32)$2 > (uint_32)[3]) ){ goto $label$12 }
	goto $label$13 
	
.LABEL $label$13
	$3 = *($0)
	*(($2 = CALL $259([16]))) = [0]
	$5 = *($3 + [8])
	*($2 + [8]) = $5
	if ( ((uint_32)$5 > (uint_32)[8]) ){ goto $label$8 }
	$0 = $3
	$4 = $2
	goto $label$7 
	
.LABEL $label$12
	$3 = [0]
	
.LOOP $label$14:
	$2 = [-3]
	
.LOOP $label$16:
	if ( ((int_32)*((($3 + $2) + [2986])) != (int_32)*(($2 + [2931]))) ){ goto $label$15 }
	if ( ($2 == 0) ){ goto $label$6 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[180]) ){ goto $label$16 }
	goto $label$4 
	
.LABEL $label$15
	$2 = [183]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[183]) ){ goto $label$14 }
	goto $label$3 
	
.LABEL $label$11
	*($1) = *($0)
	*($0) = [0]
	return 
	
.LABEL $label$10
	$2 = *($1)
	if ( ($2 == 0) ){ goto $label$17 }
	if ( (*($2 + [8]) <= [9]) ){ goto $label$18 }
	$3 = *($2)
	if ( ($3 == 0) ){ goto $label$18 }
	CALL $262($3)
	
.LABEL $label$18
	CALL $261($2)
	
.LABEL $label$17
	*($1) = [0]
	return 
	
.LABEL $label$9
	$5 = *($1)
	$3 = [0]
	
.LOOP $label$19:
	$2 = [-3]
	
.LOOP $label$21:
	if ( ((int_32)*((($3 + $2) + [2986])) != (int_32)*(($2 + [2931]))) ){ goto $label$20 }
	if ( ($2 == 0) ){ goto $label$5 }
	$2 = ($2 + [1])
	if ( ((int_32)($3 + $2) != (int_32)[180]) ){ goto $label$21 }
	goto $label$2 
	
.LABEL $label$20
	$2 = [183]
	$3 = ($3 + [1])
	if ( ((int_32)$3 != (int_32)[183]) ){ goto $label$19 }
	goto $label$1 
	
.LABEL $label$8
	$4 = CALL $260($5)
	*($2) = $4
	$5 = *(($2 + [8]))
	$0 = *($3)
	
.LABEL $label$7
	CALL memcpy($4, $0, $5)
	*($1) = $2
	*($2 + [12]) = *($3 + [12])
	return 
	
.LABEL $label$6
	$2 = $3
	goto $label$3 
	
.LABEL $label$5
	$2 = $3
	goto $label$1 
	
.LABEL $label$4
	$2 = [183]
	
.LABEL $label$3
	*($1 + [4]) = [0]
	*($1) = ( [2983] ? ($2 + [2987]) : ((int_32)$2 == (int_32)[183]) )
	return 
	
.LABEL $label$2
	$2 = [183]
	
.LABEL $label$1
	$3 = ( [2983] ? ($2 + [2987]) : ((int_32)$2 == (int_32)[183]) )
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$23 }
	$5 = ($5 + [1])
	
.LOOP $label$24:
	if ( ((int_32)($2 & [255]) != (int_32)*($3)) ){ goto $label$22 }
	$3 = ($3 + [1])
	$2 = *($5)
	$5 = ($5 + [1])
	if ( $2 ){ goto $label$24 }
	
.LABEL $label$23
	$2 = [0]
	
.LABEL $label$22
	*($1) = ( *($0) ? [0] : ((int_32)($2 & [255]) == (int_32)*($3)) )
	$2
}

void .FUNC $173 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([72])
	CALL $174($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [64])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $170(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $152 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1936])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $66($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [256])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $153 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$4 = CALL $259([72])
	$6 = CALL $145($4)
	*($4 + [60]) = $0
	CALL $148(($8 + [32]), $6)
	*($4 + [64]) = $1
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$7 = *($4 + [64])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($8 + [24]) = [0]
	*($6) = $4
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $158(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [48])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [52])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$7 = ([0] - $3)
	$6 = ($6 + [-32])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $261(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $7) != (int_32)[-32]) ){ goto $label$13 }
	$6 = *(($1 + [48]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $261($6)
	
.LABEL $label$10
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $150 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [5]) >= (uint_32)$1) ){ goto $label$6 }
	$5 = *($0)
	$2 = int_32(($6 - $5) >> [5])
	$4 = ($2 + $1)
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$4 }
	$6 = [134217727]
	$7 = ($7 - $5)
	if ( ((uint_32)int_32($7 >> [5]) > (uint_32)[67108862]) ){ goto $label$7 }
	$6 = int_32($7 >> [4])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[134217728]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $259(($6 << [5]))
	goto $label$2 
	
.LABEL $label$6
	
.LOOP $label$8:
	*($6) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*(($7 = ($6 + [8]))) = (int_64)0
	*($6) = [0]
	*(($6 + [4])) = [0]
	*($7) = [0]
	$6 = (*($6) + [32])
	*(($6 = ($0 + [4]))) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $273($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [5]))
	$7 = ($7 + ($2 << [5]))
	$6 = $7
	
.LOOP $label$9:
	*(($5 = ($6 + [8]))) = (int_64)0
	*($6) = (int_64)0
	*(($6 + [24])) = (int_64)0
	*(($6 + [16])) = (int_64)0
	*($5) = [0]
	$6 = ($6 + [32])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$9 }
	$5 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$11 }
	$4 = ([0] - $5)
	$1 = ($1 + [-32])
	
.LOOP $label$12:
	*(($7 + [-32])) = *($1)
	$5 = ($1 + [8])
	*(($7 + [-24])) = *($5)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($5) = [0]
	*(($7 + [-8])) = *(($1 + [24]))
	*(($7 + [-16])) = *(($1 + [16]))
	$7 = ($7 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $4) != (int_32)[-32]) ){ goto $label$12 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$10 
	
.LABEL $label$11
	$4 = $5
	
.LABEL $label$10
	*($0) = $7
	*(($0 + [4])) = $6
	*(($0 + [8])) = $3
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$13 }
	$1 = ([0] - $4)
	$6 = ($5 + [-32])
	
.LOOP $label$14:
	if ( ((*($6) & [1]) == 0) ){ goto $label$15 }
	CALL $261(*(($6 + [8])))
	
.LABEL $label$15
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $1) != (int_32)[-32]) ){ goto $label$14 }
	
.LABEL $label$13
	if ( ($4 == 0) ){ goto $label$1 }
	CALL $261($4)
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC $151 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $152($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $266($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $259($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $266($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $261($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $263($7)
	return (unreachable)
}

void .FUNC $156 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	$4 = *($1)
	$9 = *(*($3 + [4]))
	$8 = *($3 + [8])
	*(((($10 = $11) + [48]) + [12])) = *(($8 + [12]))
	*(($7 = (($10 + [48]) + [8]))) = *(($8 + [8]))
	*($10 + [48]) = *($8)
	*($10 + [52]) = *(($8 + [4]))
	$8 = *($3)
	$6 = *($3 + [12])
	*(($5 = (($10 + [32]) + [8]))) = *(($6 + [8]))
	*($10 + [32]) = *($6)
	$3 = *(*($3 + [16]))
	*((($10 + [16]) + [8])) = *($7)
	*($10 + [16]) = *($10 + [48])
	*(($10 + [8])) = *($5)
	*($10) = *($10 + [32])
	CALL $141($8, $1, $9, ($10 + [16]), $10, $3)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [720])
	$8 = *($1 + [48])
	$5 = *(($1 + [52]))
	$9 = (CASTING uint_64)(uint_32 int_32(($5 - $8) >> [5]))
	$3 = [44]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$7 = *($8)
	$7 = ( *($8 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = (($7 + $3) + [16])
	$9 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	$8 = ($8 + [32])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($10 + [52]) = $8
	*($10 + [48]) = $8
	*($10 + [56]) = ($8 + $3)
	CALL $142(($10 + [48]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [64])
}

void .FUNC $157 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$2 = *($0)
	$6 = *($0 + [4])
	$7 = *($6)
	$8 = *(*($6 + [4]))
	$3 = *($6 + [8])
	*(($5 = ((($9 = $10) + [48]) + [8]))) = *(($3 + [8]))
	*($9 + [48]) = *($3)
	$4 = *($6 + [12])
	*(($3 = (($9 + [32]) + [8]))) = *(($4 + [8]))
	*($9 + [32]) = *($4)
	$6 = *(*($6 + [16]))
	*((($9 + [16]) + [8])) = *($5)
	*($9 + [16]) = *($9 + [48])
	*(($9 + [8])) = *($3)
	*($9) = *($9 + [32])
	CALL $141($7, $1, $8, ($9 + [16]), $9, $6)
	$7 = *($1 + [48])
	$3 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($3 - $7) >> [5]))
	$6 = [44]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7)
	$5 = ( *($7 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$6 = (($5 + $6) + [16])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($9 + [52]) = $7
	*($9 + [48]) = $7
	*($9 + [56]) = ($7 + $6)
	CALL $142(($9 + [48]), $1)
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($2 + [8]), (int_64)-8451381970688016384, *(*($0 + [8])), $8, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($7)
	
.LABEL $label$7
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $154 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([72])
	CALL $145($3)
	*($3 + [60]) = $1
	CALL $157(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [64])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $158(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [48])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [52])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	$3 = ([0] - $5)
	$1 = ($1 + [-32])
	
.LOOP $label$7:
	if ( ((*($1) & [1]) == 0) ){ goto $label$8 }
	CALL $261(*(($1 + [8])))
	
.LABEL $label$8
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $3) != (int_32)[-32]) ){ goto $label$7 }
	$1 = *(($0 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $261($1)
	
.LABEL $label$4
	CALL $261($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $155 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	$4 = *($1)
	$7 = *($1 + [48])
	$6 = ($1 + [52])
	$5 = (uint_32((*($6) - $7) >> [5]) & [255])
	if ( ($5 == 0) ){ goto $label$1 }
	$8 = [0]
	$9 = [0]
	
.LOOP $label$2:
	*(($8 = ($7 + ($8 << [5]))) + [24]) = (int_64)0
	*($8 + [16]) = (int_64)0
	$9 = ($9 + [1])
	$8 = ($9 & [255])
	if ( ($8 <= $5) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert([1], [720])
	$9 = *(($1 + [48]))
	$5 = *($6)
	$10 = (CASTING uint_64)(uint_32 int_32(($5 - $9) >> [5]))
	$8 = [44]
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = *($9)
	$7 = ( *($9 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$8 = (($7 + $8) + [16])
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	$9 = ($9 + [32])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($8 <= [513]) ){ goto $label$8 }
	$9 = CALL malloc($8)
	goto $label$7 
	
.LABEL $label$8
	$9 = ($12 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$7
	*($11 + [4]) = $9
	*($11) = $9
	*($11 + [8]) = ($9 + $8)
	CALL $142($11, $1)
	CALL db_update_i64(*($1 + [64]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL free($9)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $158 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $259(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [52])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-32])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $261(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $6) != (int_32)[-32]) ){ goto $label$14 }
	$1 = *(($2 + [48]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $261($1)
	
.LABEL $label$11
	CALL $261($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $261($7)
	
.LABEL $label$16
	(unreachable)
}

int_32 .FUNC $159 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$4 = CALL $259([72])
	$6 = CALL $145($4)
	*($4 + [60]) = $0
	CALL $148(($8 + [32]), $6)
	*($4 + [64]) = $1
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$7 = *($4 + [64])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($8 + [24]) = [0]
	*($6) = $4
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $163(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [48])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [52])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$7 = ([0] - $3)
	$6 = ($6 + [-32])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $261(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $7) != (int_32)[-32]) ){ goto $label$13 }
	$6 = *(($1 + [48]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $261($6)
	
.LABEL $label$10
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $273 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $272 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	if ( ($1 == 0) ){ goto $label$1 }
	$3 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$3 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$4 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$4 = *($0 + [4])
	
.LABEL $label$3
	if ( ((uint_32)($3 - $4) >= (uint_32)$1) ){ goto $label$5 }
	CALL $270($0, $3, (($1 - $3) + $4), $4, $4, [0], [0])
	$5 = *($0)
	
.LABEL $label$5
	if ( ($5 & [1]) ){ goto $label$7 }
	$5 = ($0 + [1])
	goto $label$6 
	
.LABEL $label$7
	$5 = *($0 + [8])
	
.LABEL $label$6
	CALL memset(($5 + $4), ($2 & [255]), $1)
	$1 = ($4 + $1)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($1 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $1
	
.LABEL $label$8
	*(($5 + $1)) = [0]
	
.LABEL $label$1
	return $0
}

void .FUNC $179 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	$4 = *(*($3))
	*($1 + [64]) = $4
	*($1 + [72]) = ((int_64)$4 * (int_64)10)
	$4 = *($1)
	CALL eosio_assert([1], [720])
	*($5 + [88]) = ($5 + [80])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $59(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $224 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)101
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $183 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($4 = CALL $259([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [160])
	$2 = (int_64)5462355
	$3 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL eosio_assert($6, [224])
	*($4 + [32]) = $1
	CALL $185(($7 + [16]), $4)
	*($7 + [32]) = $4
	$2 = *($4)
	*($7 + [16]) = $2
	$6 = *($4 + [36])
	*($7 + [12]) = $6
	$5 = ($1 + [28])
	$3 = *($5)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$7 }
	*($3 + [8]) = $2
	*($3 + [16]) = $6
	*($7 + [32]) = [0]
	*($3) = $4
	*($5) = ($3 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $168(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$6
	*($0 + [4]) = $4
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$8 }
	CALL $261($3)
	
.LABEL $label$8
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [784])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [784])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [784])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $66($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [784])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [784])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $70(CALL $69($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $248 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$7 = *($0 + [4])
	$8 = *($0 + [8])
	if ( ((uint_32)int_32(($8 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$4 = int_32(($7 - $5) >> [4])
	$7 = ($4 + $1)
	if ( ((uint_32)$7 >= (uint_32)[268435456]) ){ goto $label$3 }
	$6 = [268435455]
	$8 = ($8 - $5)
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$6 = int_32($8 >> [3])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$4 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$8 = CALL $259(($6 << [4]))
	goto $label$1 
	
.LABEL $label$5
	$6 = $7
	$8 = $1
	
.LOOP $label$7:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$8 = ($8 + [-1])
	if ( $8 ){ goto $label$7 }
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $273($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$2 = ($8 + ($6 << [4]))
	$8 = ($8 + ($4 << [4]))
	$6 = $8
	$7 = $1
	
.LOOP $label$8:
	*($6) = [0]
	*(($6 + [4])) = (int_64)0
	*(($6 + [12])) = [0]
	$6 = ($6 + [16])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$8 }
	$3 = ($8 + ($1 << [4]))
	$6 = *($0)
	$7 = *(($0 + [4]))
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$10 }
	$4 = ([0] - $6)
	$6 = ($7 + [-16])
	
.LOOP $label$11:
	*(($8 + [-16])) = *($6)
	*(($7 = ($8 + [-12]))) = (int_64)0
	*(($1 = ($8 + [-4]))) = [0]
	$5 = ($6 + [4])
	*($7) = *($5)
	*(($8 + [-8])) = *(($6 + [8]))
	$7 = ($6 + [12])
	*($1) = *($7)
	*($7) = [0]
	*($5) = (int_64)0
	$8 = ($8 + [-16])
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $4) != (int_32)[-16]) ){ goto $label$11 }
	$6 = *(($0 + [4]))
	$1 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$1 = $6
	
.LABEL $label$9
	*($0) = $8
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$12 }
	$7 = ([0] - $1)
	$6 = ($6 + [-12])
	
.LOOP $label$13:
	$8 = *($6)
	if ( ($8 == 0) ){ goto $label$14 }
	*(($6 + [4])) = $8
	CALL $261($8)
	
.LABEL $label$14
	$6 = ($6 + [-16])
	if ( ((int_32)($6 + $7) != (int_32)[-12]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($1 == 0) ){ goto $label$15 }
	CALL $261($1)
	
.LABEL $label$15
	(unreachable)
}

void .FUNC $225 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $151(*($1), ($0 + [32]))
}

void .FUNC $65 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $261($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $64 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (uint_64)*($0 + [8]) >> (uint_64)(int_64)8)
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	*($0 + [16]) = $1
	$4 = *($2 + [4])
	CALL eosio_assert(((uint_32)(*($4 + [8]) - *($4 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($0, *($4 + [4]), [8])
	$5 = (*($4 + [4]) + [8])
	*($4 + [4]) = $5
	CALL eosio_assert(((uint_32)(*($4 + [8]) - $5) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [8]), *($4 + [4]), [8])
	*($4 + [4]) = (*($4 + [4]) + [8])
	*($0 + [20]) = *(*($2 + [8]))
	return $0
}

void .FUNC $67 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $71(*($1), ($0 + [32]))
}

void .FUNC $66 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $259($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $273($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $261($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $261($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $60 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [48]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [56]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $63 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	*([0] + [4]) = $9
	*(($8 = $9) + [44]) = $1
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*($8 + [12]) = ($8 + [32])
	*($8 + [16]) = ($8 + [44])
	*($8 + [8]) = $0
	$4 = CALL $259([32])
	$6 = CALL $64($4, $0, ($8 + [8]))
	*($8 + [24]) = $4
	$5 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8
	*($8 + [8]) = $5)
	$1 = *($4 + [20])
	*($8 + [4]) = $1
	$3 = ($0 + [28])
	$7 = *($3)
	if ( ((uint_32)$7 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($7 + [8]) = $5
	*($7 + [16]) = $1
	*($8 + [24]) = [0]
	*($7) = $4
	*($3) = ($7 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $65(($0 + [24]), ($8 + [24]), ($8 + [8]), ($8 + [4]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $261($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $62 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$3 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$2:
	if ( ((int_64)(uint_64)*(*($6) + [8]) >> (uint_64)(int_64)8) == (int_64)$1) ){ goto $label$1 }
	$7 = $6
	$5 = ($6 + [-24])
	$6 = $5
	if ( ((int_32)($5 + $4) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [304])
	goto $label$3 
	
.LABEL $label$4
	$6 = [0]
	$5 = CALL db_find_i64(*($0), *($0 + [8]), (int_64)3607749779137757184, $1)
	if ( ((int_32)$5 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $63($0, $5)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$0), [304])
	
.LABEL $label$3
	CALL eosio_assert(((int_32)$6 != (int_32)[0]), $2)
	return $6
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC $227 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[3]), [256])
	CALL memcpy($1, *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[1]), [256])
	CALL memcpy(($1 + [4]), *($0 + [4]), [2])
	$2 = (*($0 + [4]) + [2])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$6 = [0]
	$5 = (int_64)0
	
.LOOP $label$1:
	CALL eosio_assert(($4 <= *(($0 + [8]))), [1936])
	$7 = ($0 + [4])
	$4 = *($7)
	$2 = *($4)
	$4 = ($4 + [1])
	*($7) = $4
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$1 }
	*($1 + [12]) = $5
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)*($3) != (int_32)$4), [256])
	$4 = ($0 + [4])
	CALL memcpy(($1 + [16]), *($4), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	$7 = [0]
	$5 = (int_64)0
	
.LOOP $label$2:
	CALL eosio_assert(($6 <= *($3)), [1936])
	$6 = *($4)
	$2 = *($6)
	$6 = ($6 + [1])
	*($4) = $6
	$7 = ($7 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($2 & [127]) << $7)) | (int_64)$5)
	$7 = ($7 + [7])
	if ( uint_32($2 >> [7]) ){ goto $label$2 }
	*($1 + [20]) = $5
	return $0
}

int_32 .FUNC $228 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1936])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = ((int_32)($2 - $6) / (int_32)[40])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $249($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ((int_32)$4 * (int_32)[40])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$6 = (([0] - $6) - $4)
	$4 = ($2 + [-24])
	
.LOOP $label$5:
	$7 = *(($4 + [12]))
	if ( ($7 == 0) ){ goto $label$6 }
	*(($4 + [16])) = $7
	CALL $261($7)
	
.LABEL $label$6
	$7 = *($4)
	if ( ($7 == 0) ){ goto $label$7 }
	*(($4 + [4])) = $7
	CALL $261($7)
	
.LABEL $label$7
	$4 = ($4 + [-40])
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	$4 = ($0 + [4])
	
.LOOP $label$9:
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [256])
	CALL memcpy($7, *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [256])
	CALL memcpy(($7 + [8]), *($4), [8])
	*($4) = (*($4) + [8])
	CALL $152(CALL $250($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$9 }
	
.LABEL $label$8
	return $0
}

int_32 .FUNC $229 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [1936])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$3 = *($1)
	$7 = *($1 + [4])
	$5 = int_32(($7 - $3) >> [4])
	$4 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$4 <= (uint_32)$5) ){ goto $label$3 }
	CALL $248($1, ($4 - $5))
	$7 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$5) ){ goto $label$2 }
	$4 = ($4 << [4])
	$2 = ($3 + $4)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$3 = (([0] - $3) - $4)
	$4 = ($7 + [-12])
	
.LOOP $label$5:
	$5 = *($4)
	if ( ($5 == 0) ){ goto $label$6 }
	*(($4 + [4])) = $5
	CALL $261($5)
	
.LABEL $label$6
	$4 = ($4 + [-16])
	if ( ((int_32)($4 + $3) != (int_32)[-12]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $2
	$7 = $2
	
.LABEL $label$2
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$7) ){ goto $label$7 }
	$3 = ($0 + [8])
	
.LOOP $label$8:
	$5 = ($0 + [4])
	CALL eosio_assert(((uint_32)(*($3) - *($5)) > (uint_32)[1]), [256])
	CALL memcpy($4, *($5), [2])
	*($5) = (*($5) + [2])
	CALL $152($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 != (int_32)$7) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

void .FUNC $89 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [64])
	*([0] + [4]) = $12
	*($12 + [56]) = $1
	$6 = *(($0 + [248]))
	$10 = *(($0 + [252]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)102) ){ goto $label$1 }
	$10 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$5 = ($0 + [224])
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$5 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [304])
	if ( $9 ){ goto $label$4 }
	$11 = [0]
	goto $label$3 
	
.LABEL $label$5
	$11 = [0]
	$9 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)102)
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $51($5, $9)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [304])
	
.LABEL $label$4
	$11 = *($9 + [8])
	
.LABEL $label$3
	$6 = *(($0 + [248]))
	$10 = *(($0 + [252]))
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$6 }
	$9 = ($10 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$7:
	if ( ((int_64)*(*($9)) == (int_64)103) ){ goto $label$6 }
	$10 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$10 == (int_32)$6) ){ goto $label$10 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [304])
	if ( $9 ){ goto $label$9 }
	$9 = [0]
	goto $label$8 
	
.LABEL $label$10
	$9 = [0]
	$8 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)103)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$8 }
	$9 = CALL $51($5, $8)
	CALL eosio_assert(((int_32)*($9 + [16]) == (int_32)$5), [304])
	
.LABEL $label$9
	$9 = *($9 + [8])
	
.LABEL $label$8
	*($12 + [48]) = $4
	if ( ((uint_32)$11 > (uint_32)$4) ){ goto $label$11 }
	if ( ($9 <= $4) ){ goto $label$11 }
	$4 = *(($0 + [448]))
	$10 = *(($0 + [452]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$12 }
	$9 = ($10 + [-24])
	$7 = ([0] - $4)
	
.LOOP $label$13:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$12 }
	$10 = $9
	$8 = ($9 + [-24])
	$9 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	$8 = ($0 + [424])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$15 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [60]) == (int_32)$8), [304])
	goto $label$14 
	
.LABEL $label$15
	$9 = [0]
	$10 = CALL db_find_i64(*(($0 + [424])), *(($0 + [432])), (int_64)-8451381970688016384, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$14 }
	$9 = CALL $153($8, $10)
	CALL eosio_assert(((int_32)*($9 + [60]) == (int_32)$8), [304])
	
.LABEL $label$14
	*($12 + [32]) = (int_64)0
	*($12 + [40]) = [0]
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	if ( (int_64)($1) == 0) ){ goto $label$16 }
	
.LOOP $label$17:
	CALL $269(($12 + [32]), int_32(((CASTING uint_32)(uint_64 $1) << [24]) >> [24]))
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$17 }
	
.LABEL $label$16
	if ( ($9 == 0) ){ goto $label$19 }
	if ( ((uint_32)$11 <= (uint_32)*($9 + [8])) ){ goto $label$20 }
	*($12 + [8]) = $0
	CALL eosio_assert([1], [560])
	CALL $155($8, $9, (int_64)0, ($12 + [8]))
	
.LABEL $label$20
	*($12 + [8]) = $0
	*($12 + [16]) = $2
	*($12 + [20]) = $3
	*($12 + [12]) = ($12 + [56])
	*($12 + [24]) = ($12 + [48])
	CALL eosio_assert([1], [560])
	CALL $156($8, $9, (int_64)0, ($12 + [8]))
	goto $label$18 
	
.LABEL $label$19
	$1 = *($0)
	*($12 + [8]) = $0
	*($12 + [16]) = $2
	*($12 + [20]) = $3
	*($12 + [12]) = ($12 + [56])
	*($12 + [24]) = ($12 + [48])
	CALL $154($12, $8, $1, ($12 + [8]))
	
.LABEL $label$18
	if ( ((*($12 + [32]) & [1]) == 0) ){ goto $label$11 }
	CALL $261(*(($12 + [40])))
	
.LABEL $label$11
	*([0] + [4]) = ($12 + [64])
}

void .FUNC $88 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [64])
	*([0] + [4]) = $9
	*($9 + [56]) = $1
	*($9 + [48]) = $4
	$5 = *(($0 + [408]))
	$8 = *(($0 + [412]))
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$1 }
	$4 = ($8 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$1) ){ goto $label$1 }
	$8 = $4
	$7 = ($4 + [-24])
	$4 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [384])
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$4 }
	$7 = *(($8 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$4), [304])
	goto $label$3 
	
.LABEL $label$4
	$7 = [0]
	$8 = CALL db_find_i64(*(($0 + [384])), *(($0 + [392])), (int_64)3617318351153397760, $1)
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $159($4, $8)
	CALL eosio_assert(((int_32)*($7 + [60]) == (int_32)$4), [304])
	
.LABEL $label$3
	*($9 + [32]) = (int_64)0
	*($9 + [40]) = [0]
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	if ( (int_64)($1) == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $269(($9 + [32]), int_32(((CASTING uint_32)(uint_64 $1) << [24]) >> [24]))
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($7 == 0) ){ goto $label$8 }
	*($9 + [8]) = $0
	*($9 + [16]) = $2
	*($9 + [20]) = $3
	*($9 + [12]) = ($9 + [56])
	*($9 + [24]) = ($9 + [48])
	CALL eosio_assert([1], [560])
	CALL $161($4, $7, (int_64)0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$1 = *($0)
	*($9 + [8]) = $0
	*($9 + [16]) = $2
	*($9 + [20]) = $3
	*($9 + [12]) = ($9 + [56])
	*($9 + [24]) = ($9 + [48])
	CALL $160($9, $4, $1, ($9 + [8]))
	
.LABEL $label$7
	if ( ((*($9 + [32]) & [1]) == 0) ){ goto $label$9 }
	CALL $261(*(($9 + [40])))
	
.LABEL $label$9
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $87 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	CALL eosio_assert([1], [784])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 + [24]), ($1 + [24]), [8])
	CALL db_update_i64(*($1 + [36]), $2, $5, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [32])
}

void .FUNC $86 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $259([48])) + [32]) = $1
	CALL $164(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [36])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $165(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $85 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $259([48])) + [32]) = $0
	CALL $166(($8 + [32]), $6)
	*($6 + [36]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [36])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $165(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $261($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [800])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $259([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [160])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [224])
	*($4 + [32]) = $0
	CALL $167(($8 + [32]), $4)
	*($4 + [36]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [36])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $168($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $261($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $83 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$2 = *(($0 + [248]))
	$7 = *(($0 + [252]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$2:
	if ( ((int_64)*(*($6)) == (int_64)110) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$1 = ($0 + [224])
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$5 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [304])
	if ( $6 ){ goto $label$4 }
	$8 = [0]
	goto $label$3 
	
.LABEL $label$5
	$8 = [0]
	$6 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)110)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$3 }
	$6 = CALL $51($1, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [304])
	
.LABEL $label$4
	$8 = *($6 + [8])
	
.LABEL $label$3
	$2 = *(($0 + [248]))
	$7 = *(($0 + [252]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$6 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$7:
	if ( ((int_64)*(*($6)) == (int_64)111) ){ goto $label$6 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [304])
	if ( $6 ){ goto $label$9 }
	$4 = [0]
	goto $label$8 
	
.LABEL $label$10
	$4 = [0]
	$6 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)111)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$8 }
	$6 = CALL $51($1, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [304])
	
.LABEL $label$9
	$4 = *($6 + [8])
	
.LABEL $label$8
	$7 = (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
	if ( ((uint_32)$8 > (uint_32)$7) ){ goto $label$12 }
	$6 = [1]
	if ( ((uint_32)$7 <= (uint_32)$4) ){ goto $label$11 }
	
.LABEL $label$12
	$9 = (int_64)0
	$6 = CALL db_lowerbound_i64(*($0 + [264]), *(($0 + [272])), (int_64)7035938535980793856, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$4 = ($0 + [264])
	$6 = CALL $57($4, $6)
	$9 = *($6 + [40])
	CALL eosio_assert([1], [1808])
	$6 = CALL db_next_i64(*($6 + [84]), ($11 + [8]))
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	
.LOOP $label$14:
	$6 = CALL $57($4, $6)
	$5 = *($6 + [40])
	CALL eosio_assert([1], [1808])
	$9 = ((int_64)$5 + (int_64)$9)
	$6 = CALL db_next_i64(*($6 + [84]), ($11 + [8]))
	if ( ((int_32)$6 >= (int_32)[0]) ){ goto $label$14 }
	
.LABEL $label$13
	$2 = *(($0 + [248]))
	$7 = *(($0 + [252]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$15 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$16:
	if ( ((int_64)*(*($6)) == (int_64)112) ){ goto $label$15 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$16 }
	
.LABEL $label$15
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$20 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [304])
	if ( $6 ){ goto $label$19 }
	$5 = (int_64)0
	goto $label$17 
	
.LABEL $label$20
	$6 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)112)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	$6 = CALL $51($1, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [304])
	
.LABEL $label$19
	$5 = *($6 + [8])
	goto $label$17 
	
.LABEL $label$18
	$5 = (int_64)0
	
.LABEL $label$17
	$2 = *(($0 + [248]))
	$7 = *(($0 + [252]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$21 }
	$6 = ($7 + [-24])
	$3 = ([0] - $2)
	
.LOOP $label$22:
	if ( ((int_64)*(*($6)) == (int_64)113) ){ goto $label$21 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$22 }
	
.LABEL $label$21
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$26 }
	$6 = *(($7 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [304])
	if ( $6 ){ goto $label$25 }
	$10 = (int_64)0
	goto $label$23 
	
.LABEL $label$26
	$6 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)113)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$24 }
	$6 = CALL $51($1, $6)
	CALL eosio_assert(((int_32)*($6 + [16]) == (int_32)$1), [304])
	
.LABEL $label$25
	$10 = *($6 + [8])
	goto $label$23 
	
.LABEL $label$24
	$10 = (int_64)0
	
.LABEL $label$23
	$6 = (((uint_64)$5 <= (uint_64)$9) & ((uint_64)$9 <= (uint_64)$10))
	
.LABEL $label$11
	*([0] + [4]) = ($11 + [16])
	return $6
}

void .FUNC $82 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = *($0)
	$6 = *($0 + [4])
	$2 = int_32(($6 - $5) >> [4])
	$3 = ($2 + [1])
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$3 }
	$4 = [268435455]
	$7 = (*($0 + [8]) - $5)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$5 }
	$4 = int_32($7 >> [3])
	$4 = ( $3 ? $4 : ($4 <= $3) )
	if ( ($4 == 0) ){ goto $label$4 }
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$5
	$7 = CALL $259(($4 << [4]))
	$6 = *(($0 + [4]))
	$5 = *($0)
	goto $label$1 
	
.LABEL $label$4
	$4 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $273($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	*(($3 = ($7 + ($2 << [4])))) = *($1)
	*(($3 + [8])) = *(($1 + [8]))
	$1 = ($6 - $5)
	$6 = ($3 - $1)
	$4 = ($7 + ($4 << [4]))
	$3 = ($3 + [16])
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$6 }
	CALL memcpy($6, $5, $1)
	$5 = *($0)
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $4
	if ( ($5 == 0) ){ goto $label$7 }
	CALL $261($5)
	
.LABEL $label$7
	(unreachable)
	(unreachable)
}

void .FUNC $81 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [24]) = ((int_64)*($1 + [24]) + (int_64)*(*($3)))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	*($5 + [88]) = ($5 + [80])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $59(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $80 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [1952])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [2000])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [2064])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $261($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $261($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [64]))
}

void .FUNC $182 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($2, *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [8]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((uint_32)(*($3 + [8]) - *($3 + [4])) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [16]), *($3 + [4]), [8])
	$1 = (*($3 + [4]) + [8])
	*($3 + [4]) = $1
	CALL eosio_assert(((uint_32)(*($3 + [8]) - $1) > (uint_32)[7]), [256])
	CALL memcpy(($0 + [24]), *($3 + [4]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $149 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1936])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$6 = *($1)
	$2 = *($1 + [4])
	$7 = int_32(($2 - $6) >> [5])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$7) ){ goto $label$3 }
	CALL $150($1, ($4 - $7))
	$2 = *(($1 + [4]))
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$4 >= (uint_32)$7) ){ goto $label$2 }
	$4 = ($4 << [5])
	$3 = ($6 + $4)
	if ( ((int_32)$2 == (int_32)$3) ){ goto $label$4 }
	$7 = (([0] - $6) - $4)
	$4 = ($2 + [-32])
	
.LOOP $label$5:
	if ( ((*($4) & [1]) == 0) ){ goto $label$6 }
	CALL $261(*(($4 + [8])))
	
.LABEL $label$6
	$4 = ($4 + [-32])
	if ( ((int_32)($4 + $7) != (int_32)[-32]) ){ goto $label$5 }
	
.LABEL $label$4
	*(($1 + [4])) = $3
	$2 = $3
	
.LABEL $label$2
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$7 }
	$4 = ($0 + [4])
	
.LOOP $label$8:
	CALL $151($0, $7)
	$6 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($6) - *($4)) > (uint_32)[7]), [256])
	CALL memcpy(($7 + [16]), *($4), [8])
	$3 = (*($4) + [8])
	*($4) = $3
	CALL eosio_assert(((uint_32)(*($6) - $3) > (uint_32)[7]), [256])
	CALL memcpy(($7 + [24]), *($4), [8])
	*($4) = (*($4) + [8])
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$8 }
	
.LABEL $label$7
	return $0
}

int_32 .FUNC $148 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $149($0, ($1 + [48]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $145 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [16]) = (int_64)0
	$2 = [0]
	*($0 + [8]) = [0]
	*(($3 = ($0 + [24]))) = (int_64)1398362884
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($3) >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [224])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [160])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [224])
	*(($0 + [56])) = [0]
	*($0 + [48 align=4]) = (int_64)0
	return $0
}

void .FUNC $144 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = int_32((*($0 + [4]) - $6) >> [5])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[134217728]) ){ goto $label$3 }
	$5 = [134217727]
	$6 = (*($0 + [8]) - $6)
	if ( ((uint_32)int_32($6 >> [5]) > (uint_32)[67108862]) ){ goto $label$5 }
	$6 = int_32($6 >> [4])
	$5 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[134217728]) ){ goto $label$2 }
	
.LABEL $label$5
	$4 = CALL $259(($5 << [5]))
	goto $label$1 
	
.LABEL $label$4
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $273($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$6 = ($4 + ($2 << [5]))
	CALL $274($6, $1)
	*(($6 + [24])) = *(($1 + [24]))
	*($6 + [16]) = *($1 + [16])
	$2 = ($4 + ($5 << [5]))
	$3 = ($6 + [32])
	$1 = *($0)
	$5 = *(($0 + [4]))
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$7 }
	$4 = ([0] - $1)
	$1 = ($5 + [-32])
	
.LOOP $label$8:
	*(($6 + [-32])) = *($1)
	$5 = ($1 + [8])
	*(($6 + [-24])) = *($5)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($5) = [0]
	*(($6 + [-8])) = *(($1 + [24]))
	*(($6 + [-16])) = *(($1 + [16]))
	$6 = ($6 + [-32])
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $4) != (int_32)[-32]) ){ goto $label$8 }
	$1 = *(($0 + [4]))
	$5 = *($0)
	goto $label$6 
	
.LABEL $label$7
	$5 = $1
	
.LABEL $label$6
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$9 }
	$6 = ([0] - $5)
	$1 = ($1 + [-32])
	
.LOOP $label$10:
	if ( ((*($1) & [1]) == 0) ){ goto $label$11 }
	CALL $261(*(($1 + [8])))
	
.LABEL $label$11
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $6) != (int_32)[-32]) ){ goto $label$10 }
	
.LABEL $label$9
	if ( ($5 == 0) ){ goto $label$12 }
	CALL $261($5)
	
.LABEL $label$12
	(unreachable)
	(unreachable)
}

void .FUNC $147 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = *($0)
	$7 = ((int_32)(*($0 + [4]) - $8) / (int_32)[24])
	$4 = ($7 + [1])
	if ( ((uint_32)$4 >= (uint_32)[178956971]) ){ goto $label$2 }
	$6 = [178956970]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[24])
	if ( ((uint_32)$8 > (uint_32)[89478484]) ){ goto $label$4 }
	$6 = ($8 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$8 = CALL $259(((int_32)$6 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$8 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$4 = *($1)
	*($1) = [0]
	*(($1 = ($8 + ((int_32)$7 * (int_32)[24])))) = $4
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($8 + ((int_32)$6 * (int_32)[24]))
	$5 = ($1 + [24])
	$8 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$8 != (int_32)$2) ){ goto $label$7 }
	$8 = *(($0 + [4]))
	$7 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$7 = $8
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$8 }
	
.LOOP $label$9:
	$8 = ($8 + [-24])
	$2 = *($8)
	*($8) = [0]
	if ( ($2 == 0) ){ goto $label$10 }
	$3 = *($2 + [48])
	if ( ($3 == 0) ){ goto $label$11 }
	$0 = ($2 + [52])
	$1 = *($0)
	if ( ((int_32)$1 == (int_32)$3) ){ goto $label$13 }
	$6 = ([0] - $3)
	$1 = ($1 + [-32])
	
.LOOP $label$14:
	if ( ((*($1) & [1]) == 0) ){ goto $label$15 }
	CALL $261(*(($1 + [8])))
	
.LABEL $label$15
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $6) != (int_32)[-32]) ){ goto $label$14 }
	$1 = *(($2 + [48]))
	goto $label$12 
	
.LABEL $label$13
	$1 = $3
	
.LABEL $label$12
	*($0) = $3
	CALL $261($1)
	
.LABEL $label$11
	CALL $261($2)
	
.LABEL $label$10
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($7 == 0) ){ goto $label$16 }
	CALL $261($7)
	
.LABEL $label$16
	(unreachable)
}

void .FUNC $146 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [64])
	*([0] + [4]) = $10
	$2 = *($0)
	$6 = *($0 + [4])
	$7 = *($6)
	$8 = *(*($6 + [4]))
	$3 = *($6 + [8])
	*(($5 = ((($9 = $10) + [48]) + [8]))) = *(($3 + [8]))
	*($9 + [48]) = *($3)
	$4 = *($6 + [12])
	*(($3 = (($9 + [32]) + [8]))) = *(($4 + [8]))
	*($9 + [32]) = *($4)
	$6 = *(*($6 + [16]))
	*((($9 + [16]) + [8])) = *($5)
	*($9 + [16]) = *($9 + [48])
	*(($9 + [8])) = *($3)
	*($9) = *($9 + [32])
	CALL $141($7, $1, $8, ($9 + [16]), $9, $6)
	$7 = *($1 + [48])
	$3 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($3 - $7) >> [5]))
	$6 = [44]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	
.LOOP $label$3:
	$5 = *($7)
	$5 = ( *($7 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$6 = (($5 + $6) + [16])
	$8 = (CASTING uint_64)(uint_32 $5)
	
.LOOP $label$4:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$4 }
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$6 }
	$7 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$5
	*($9 + [52]) = $7
	*($9 + [48]) = $7
	*($9 + [56]) = ($7 + $6)
	CALL $142(($9 + [48]), $1)
	$8 = *($1)
	*($1 + [64]) = CALL db_store_i64(*($2 + [8]), (int_64)5313336380166766592, *(*($0 + [8])), $8, $7, $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($7)
	
.LABEL $label$7
	if ( (uint_64)($8 <= *($2 + [16])) ){ goto $label$8 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$8 + (int_64)1) : ((uint_64)$8 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($9 + [64])
}

void .FUNC $141 (int_32 $0, int_32 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_64 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	$21 = (*([0] + [4]) - [48])
	*([0] + [4]) = $21
	*($21 + [32]) = (int_64)0
	*($21 + [40]) = [0]
	$17 = (uint_64)*($3 + [8]) >> (uint_64)(int_64)8
	if ( (int_64)($17) == 0) ){ goto $label$1 }
	
.LOOP $label$2:
	CALL $269(($21 + [32]), int_32(((CASTING uint_32)(uint_64 $17) << [24]) >> [24]))
	$17 = (uint_64)$17 >> (uint_64)(int_64)8
	if ( ((int_64)$17) != (int_64)0) ){ goto $label$2 }
	
.LABEL $label$1
	*($1) = $2
	*($1 + [16]) = *($3)
	*(($1 + [28])) = *(($3 + [12]))
	*(($1 + [24])) = *(($3 + [8]))
	*(($1 + [20])) = *(($3 + [4]))
	*($1 + [8]) = $5
	*(($1 + [40])) = *(($4 + [8]))
	*($1 + [32]) = *($4)
	$6 = ($1 + [48])
	$9 = *($1 + [48])
	$14 = ($1 + [52])
	$7 = (uint_32((*($14) - $9) >> [5]) & [255])
	if ( ($7 == 0) ){ goto $label$4 }
	$8 = (($21 + [32]) | [1])
	$16 = (($21 + [32]) + [8])
	$5 = [0]
	$18 = [0]
	$10 = [0]
	
.LOOP $label$5:
	$5 = ($5 & [1])
	$5 = *($21 + [32])
	$11 = ($5 & [1])
	$5 = *($19)
	$12 = uint_32($5 >> [1])
	$15 = ($5 << [5])
	$19 = ($9 + $15)
	$13 = ( *($19 + [4]) ? $12 : $11 )
	if ( ((int_32)$13 != (int_32)( *($21 + [36]) ? uint_32($5 >> [1]) : $5 )) ){ goto $label$6 }
	$5 = ( *($16) ? $8 : $5 )
	$20 = ($19 + [1])
	if ( ($11 == 0) ){ goto $label$8 }
	if ( ($13 == 0) ){ goto $label$7 }
	if ( CALL memcmp(( *($19 + [8]) ? $20 : $11 ), $5, $13) ){ goto $label$6 }
	$9 = *($6)
	goto $label$7 
	
.LABEL $label$8
	if ( ($13 == 0) ){ goto $label$7 }
	$19 = ([0] - $12)
	
.LOOP $label$9:
	if ( ((int_32)*($20) != (int_32)*($5)) ){ goto $label$6 }
	$5 = ($5 + [1])
	$20 = ($20 + [1])
	$19 = ($19 + [1])
	if ( $19 ){ goto $label$9 }
	
.LABEL $label$7
	*(($5 = ($9 + $15)) + [16]) = ((int_64)*($5 + [16]) + (int_64)*($3))
	*($5 + [24]) = ((int_64)*($5 + [24]) + (int_64)*($4))
	$10 = [1]
	
.LABEL $label$6
	$18 = ($18 + [1])
	$5 = ($18 & [255])
	if ( ((uint_32)$5 >= (uint_32)$7) ){ goto $label$10 }
	$9 = *($6)
	goto $label$5 
	
.LABEL $label$10
	if ( ($10 & [1]) ){ goto $label$3 }
	
.LABEL $label$4
	*($21 + [8]) = [0]
	*($21) = (int_64)0
	CALL $264($21, ($21 + [32]))
	*($21 + [16]) = *($3)
	*($21 + [24]) = *($4)
	$5 = *($14)
	if ( ((int_32)$5 == (int_32)*(($1 + [56]))) ){ goto $label$12 }
	CALL $274($5, $21)
	$20 = ($21 + [16])
	*(($5 + [24])) = *(($20 + [8]))
	*($5 + [16]) = *($20)
	*(($5 = ($1 + [52]))) = (*($5) + [32])
	goto $label$11 
	
.LABEL $label$12
	CALL $144($6, $21)
	
.LABEL $label$11
	if ( ((*($21) & [1]) == 0) ){ goto $label$3 }
	CALL $261(*(($21 + [8])))
	
.LABEL $label$3
	if ( ((*($21 + [32]) & [1]) == 0) ){ goto $label$13 }
	CALL $261(*(($21 + [40])))
	
.LABEL $label$13
	*([0] + [4]) = ($21 + [48])
}

void .FUNC $140 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	$4 = *($1)
	$9 = *(*($3 + [4]))
	$8 = *($3 + [8])
	*(((($10 = $11) + [48]) + [12])) = *(($8 + [12]))
	*(($7 = (($10 + [48]) + [8]))) = *(($8 + [8]))
	*($10 + [48]) = *($8)
	*($10 + [52]) = *(($8 + [4]))
	$8 = *($3)
	$6 = *($3 + [12])
	*(($5 = (($10 + [32]) + [8]))) = *(($6 + [8]))
	*($10 + [32]) = *($6)
	$3 = *(*($3 + [16]))
	*((($10 + [16]) + [8])) = *($7)
	*($10 + [16]) = *($10 + [48])
	*(($10 + [8])) = *($5)
	*($10) = *($10 + [32])
	CALL $141($8, $1, $9, ($10 + [16]), $10, $3)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [720])
	$8 = *($1 + [48])
	$5 = *(($1 + [52]))
	$9 = (CASTING uint_64)(uint_32 int_32(($5 - $8) >> [5]))
	$3 = [44]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$8 == (int_32)$5) ){ goto $label$2 }
	
.LOOP $label$3:
	$7 = *($8)
	$7 = ( *($8 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$3 = (($7 + $3) + [16])
	$9 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$4:
	$3 = ($3 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$4 }
	$8 = ($8 + [32])
	if ( ((int_32)$8 != (int_32)$5) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$6 }
	$8 = CALL malloc($3)
	goto $label$5 
	
.LABEL $label$6
	$8 = ($11 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$5
	*($10 + [52]) = $8
	*($10 + [48]) = $8
	*($10 + [56]) = ($8 + $3)
	CALL $142(($10 + [48]), $1)
	CALL db_update_i64(*($1 + [64]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$7 }
	CALL free($8)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [64])
}

int_32 .FUNC $143 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$6 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [5]))
	$7 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$3 = ((int_64)$6) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $7) > (int_32)[0]), [784])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$7 = (*($5) + [1])
	*($5) = $7
	if ( $3 ){ goto $label$1 }
	$4 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$2 }
	$5 = ($0 + [4])
	
.LOOP $label$3:
	CALL $71($0, $7)
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - *($5)) > (int_32)[7]), [784])
	CALL memcpy(*($5), ($7 + [16]), [8])
	$3 = (*($5) + [8])
	*($5) = $3
	CALL eosio_assert(((int_32)(*($2) - $3) > (int_32)[7]), [784])
	CALL memcpy(*($5), ($7 + [24]), [8])
	*($5) = (*($5) + [8])
	$7 = ($7 + [32])
	if ( ((int_32)$7 != (int_32)$4) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $142 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $143($0, ($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

void .FUNC $72 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $261($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$4 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($4 >> [31]) ^ (int_32)[1]), [800])
	if ( ((uint_32)$4 <= (uint_32)[512]) ){ goto $label$6 }
	$7 = CALL malloc($4)
	CALL db_get_i64($1, $7, $4)
	CALL free($7)
	goto $label$5 
	
.LABEL $label$6
	$7 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $7
	CALL db_get_i64($1, $7, $4)
	
.LABEL $label$5
	*(($6 = CALL $259([32])) + [16]) = $0
	CALL eosio_assert(((uint_32)$4 > (uint_32)[7]), [256])
	CALL memcpy($6, $7, [8])
	CALL eosio_assert(((int_32)($4 & [-8]) != (int_32)[8]), [256])
	CALL memcpy(($6 + [8]), ($7 + [8]), [8])
	*($6 + [20]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [20])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $75(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $261($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [784])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [784])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC $76 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $78($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $75(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $77 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [8]) = (int_64)0
	$4 = *($1)
	CALL eosio_assert([1], [720])
	CALL eosio_assert([1], [784])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $74 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [8]) = (int_64)1
	$4 = *($1)
	CALL eosio_assert([1], [720])
	CALL eosio_assert([1], [784])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $75 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $261($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $78 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = *(*(*($2 + [4])))
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)4344997574076792832, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $79 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [800])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $259([72])) + [32]) = (int_64)1398362884
	*($4 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [224])
	*($4 + [60]) = $0
	*($4 + [56]) = [0]
	CALL $169(($8 + [32]), $4)
	*($4 + [64]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [64])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $170($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $261($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC $241 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [32])
	*([0] + [4]) = $5
	*($5) = [0]
	$2 = *($1 + [8])
	*($5 + [8]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$2 }
	$4 = $5
	$3 = $1
	goto $label$1 
	
.LABEL $label$2
	$4 = CALL $260($2)
	*($5) = $4
	$3 = *($1)
	
.LABEL $label$1
	CALL memcpy($4, $3, $2)
	*($5 + [12]) = *($1 + [12])
	*($5 + [16]) = [0]
	$1 = *(($5 + [8]))
	*($5 + [24]) = $1
	$2 = ($0 + [4])
	if ( ((uint_32)$1 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $5
	$3 = ($5 + [16])
	goto $label$3 
	
.LABEL $label$4
	$3 = CALL $260($1)
	*($5 + [16]) = $3
	$4 = *($5)
	
.LABEL $label$3
	CALL memcpy($3, $4, $1)
	*($5 + [28]) = *(($5 + [12]))
	$1 = CALL $242([2912], ($5 + [16]), $2)
	if ( (*((($5 + [16]) + [8])) <= [9]) ){ goto $label$5 }
	$2 = *($5 + [16])
	if ( ($2 == 0) ){ goto $label$5 }
	CALL $262($2)
	
.LABEL $label$5
	if ( (*(($5 + [8])) <= [9]) ){ goto $label$6 }
	$2 = *($5)
	if ( ($2 == 0) ){ goto $label$6 }
	CALL $262($2)
	
.LABEL $label$6
	*($0) = ( [2912] ? [0] : $1 )
	*([0] + [4]) = ($5 + [32])
}

int_32 .FUNC $259 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [11724])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

int_32 .FUNC $258 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = ($1 - $0)
	if ( ((uint_32)$4 > (uint_32)[5]) ){ goto $label$19 }
	$8 = [1]
	goto $label$1 
	
.LABEL $label$20
	$3 = *($0)
	$4 = ($1 + [-1])
	$2 = *($4)
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$1 }
	*($0) = $2
	*($4) = $3
	goto $label$1 
	
.LABEL $label$19
	$8 = *($0 + [2])
	$2 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$15 }
	if ( ((int_32)$8 >= (int_32)$4) ){ goto $label$12 }
	*($0) = $8
	*(($0 + [2])) = $2
	goto $label$11 
	
.LABEL $label$18
	$3 = ($1 + [-1])
	$4 = *($3)
	$6 = *($0)
	$2 = *($0 + [1])
	if ( ((int_32)$2 >= (int_32)$6) ){ goto $label$14 }
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$4 }
	*($0) = $4
	*($3) = $6
	goto $label$1 
	
.LABEL $label$17
	$8 = [1]
	CALL $257($0, ($0 + [1]), ($0 + [2]), ($0 + [3]), ($1 + [-1]), $2)
	goto $label$1 
	
.LABEL $label$16
	$6 = ($1 + [-1])
	$2 = *($0 + [2])
	$3 = *($0)
	$4 = *($0 + [1])
	if ( ((int_32)$4 >= (int_32)$3) ){ goto $label$13 }
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$8 }
	*($0) = $2
	*(($0 + [2])) = $3
	goto $label$7 
	
.LABEL $label$15
	if ( ((int_32)$8 >= (int_32)$4) ){ goto $label$10 }
	*(($0 + [2])) = $4
	*(($3 = ($0 + [1]))) = $8
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$9 }
	*($0) = $8
	*($3) = $2
	goto $label$9 
	
.LABEL $label$14
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	$8 = [1]
	*(($6 = ($0 + [1]))) = $4
	*($3) = $2
	$2 = *($0)
	$4 = *($6)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($0) = $4
	$8 = [1]
	*(($0 + [1])) = $2
	goto $label$1 
	
.LABEL $label$13
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$6 }
	*(($0 + [2])) = $4
	*(($5 = ($0 + [1]))) = $2
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$5 }
	*($0) = $2
	*($5) = $3
	goto $label$5 
	
.LABEL $label$12
	*($0) = $4
	*(($4 = ($0 + [1]))) = $2
	if ( ((int_32)$8 >= (int_32)$2) ){ goto $label$10 }
	*(($0 + [2])) = $2
	*($4) = $8
	
.LABEL $label$11
	$4 = $2
	goto $label$9 
	
.LABEL $label$10
	$4 = $8
	
.LABEL $label$9
	$6 = ($0 + [3])
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$3 }
	$5 = [0]
	$7 = [0]
	
.LOOP $label$22:
	$3 = *($6)
	if ( ((int_32)$3 >= (int_32)int_32(($4 << [24]) >> [24])) ){ goto $label$23 }
	$8 = $5
	
.LOOP $label$27:
	*((($2 = ($0 + $8)) + [3])) = $4
	if ( ((int_32)$8 == (int_32)[-2]) ){ goto $label$26 }
	$8 = ($8 + [-1])
	$4 = *(($2 + [1]))
	if ( ((int_32)$3 < (int_32)$4) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$8 = $0
	goto $label$24 
	
.LABEL $label$25
	$8 = (($0 + $8) + [3])
	
.LABEL $label$24
	*($8) = $3
	$7 = ($7 + [1])
	if ( ((int_32)$7 == (int_32)[8]) ){ goto $label$21 }
	
.LABEL $label$23
	$4 = [1]
	$8 = ($6 + [1])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$2 }
	$5 = ($5 + [1])
	$4 = *($6)
	$6 = $8
	goto $label$22 
	
.LABEL $label$21
	$8 = (((int_32)($6 + [1]) == (int_32)$1) | [0])
	goto $label$1 
	
.LABEL $label$8
	*($0) = $4
	*(($4 = ($0 + [1]))) = $3
	if ( ((int_32)$2 >= (int_32)$3) ){ goto $label$6 }
	*(($0 + [2])) = $3
	*($4) = $2
	
.LABEL $label$7
	$4 = $3
	goto $label$5 
	
.LABEL $label$6
	$4 = $2
	
.LABEL $label$5
	$2 = *($6)
	if ( ((int_32)$2 >= (int_32)$4) ){ goto $label$1 }
	*(($3 = ($0 + [2]))) = $2
	*($6) = $4
	$8 = [1]
	$2 = *(($0 + [1]))
	$4 = *($3)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($3) = $2
	$8 = [1]
	*(($0 + [1])) = $4
	$2 = *($0)
	if ( ((int_32)$4 >= (int_32)$2) ){ goto $label$1 }
	*($0) = $4
	$8 = [1]
	*(($0 + [1])) = $2
	goto $label$1 
	
.LABEL $label$4
	*($0) = $2
	$8 = [1]
	*(($0 + [1])) = $6
	$4 = *($3)
	if ( ((int_32)$4 >= (int_32)$6) ){ goto $label$1 }
	$8 = [1]
	*(($0 + [1])) = $4
	*($3) = $6
	goto $label$1 
	
.LABEL $label$3
	$4 = [1]
	
.LABEL $label$2
	$8 = ($2 | $4)
	
.LABEL $label$1
	$4
	return ($8 & [1])
}

int_32 .FUNC $223 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)104
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $268 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$4 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$1 }
	$3 = *($0)
	$4 = (($3 & [-2]) + [-1])
	
.LABEL $label$1
	if ( ($3 & [1]) ){ goto $label$3 }
	$5 = uint_32(($3 & [254]) >> [1])
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0 + [4])
	
.LABEL $label$2
	if ( ((uint_32)($4 - $5) >= (uint_32)$2) ){ goto $label$4 }
	CALL $265($0, $4, (($2 - $4) + $5), $5, $5, [0], $2, $1)
	return $0
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$7 }
	if ( ($3 & [1]) ){ goto $label$6 }
	$4 = ($0 + [1])
	goto $label$5 
	
.LABEL $label$7
	return $0
	
.LABEL $label$6
	$4 = *($0 + [8])
	
.LABEL $label$5
	CALL memcpy(($4 + $5), $1, $2)
	$2 = ($5 + $2)
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	goto $label$8 
	
.LABEL $label$9
	*($0 + [4]) = $2
	
.LABEL $label$8
	*(($4 + $2)) = [0]
	return $0
}

void .FUNC $251 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)int_32(($2 - $7) >> [4]) >= (uint_32)$1) ){ goto $label$5 }
	$6 = *($0)
	$3 = int_32(($7 - $6) >> [4])
	$4 = ($3 + $1)
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$3 }
	$5 = [268435455]
	$2 = ($2 - $6)
	if ( ((uint_32)int_32($2 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = int_32($2 >> [3])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$4 }
	if ( ((uint_32)$5 >= (uint_32)[268435456]) ){ goto $label$2 }
	
.LABEL $label$6
	$2 = CALL $259(($5 << [4]))
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$1 
	
.LABEL $label$5
	*(($0 + [4])) = ($7 + ($1 << [4]))
	return (unreachable)
	
.LABEL $label$4
	$5 = [0]
	$2 = [0]
	goto $label$1 
	
.LABEL $label$3
	CALL $273($0)
	
.LABEL $label$2
	CALL abort()
	
.LABEL $label$1
	$7 = ($7 - $6)
	$3 = ($2 + ($3 << [4]))
	$4 = ($3 - $7)
	$1 = ($3 + ($1 << [4]))
	$5 = ($2 + ($5 << [4]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$7 }
	CALL memcpy($4, $6, $7)
	$6 = *($0)
	
.LABEL $label$7
	*($0) = $4
	*(($0 + [4])) = $1
	*(($0 + [8])) = $5
	if ( ($6 == 0) ){ goto $label$8 }
	CALL $261($6)
	
.LABEL $label$8
	(unreachable)
}

int_32 .FUNC $250 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1936])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $251($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [256])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [256])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $253 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $254($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [11632])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $253([3232], $0)
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [11616])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [11424]
	$1 = (((int_32)$2 * (int_32)[12]) + [11424])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $254 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [11718]) == 0) ){ goto $label$2 }
	$7 = *([0] + [11720])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [11718]) = [1]
	$7 = ($7 << [16])
	*([0] + [11720]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [11720])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [11720]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [11718]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [11718]) = [1]
	$3 = ($3 << [16])
	*([0] + [11720]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [11720])
	
.LABEL $label$8
	*([0] + [11720]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

int_32 .FUNC $257 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5)
{
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$7 = *($2)
	$6 = *($0)
	$8 = *($1)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$5 }
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$4 }
	*($0) = $7
	*($2) = $6
	$9 = [1]
	goto $label$3 
	
.LABEL $label$5
	$9 = [0]
	if ( ((int_32)$7 >= (int_32)$8) ){ goto $label$2 }
	*($1) = $7
	*($2) = $8
	$9 = [1]
	$6 = *($0)
	$7 = *($1)
	if ( ((int_32)$7 >= (int_32)$6) ){ goto $label$1 }
	*($0) = $7
	*($1) = $6
	$8 = *($2)
	$9 = [2]
	goto $label$1 
	
.LABEL $label$4
	*($0) = $8
	*($1) = $6
	$9 = [1]
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$1 }
	*($1) = $8
	*($2) = $6
	$9 = [2]
	
.LABEL $label$3
	$8 = $6
	goto $label$1 
	
.LABEL $label$2
	$8 = $7
	
.LABEL $label$1
	$7 = *($3)
	if ( ((int_32)$7 >= (int_32)int_32(($8 << [24]) >> [24])) ){ goto $label$6 }
	*($2) = $7
	*($3) = $8
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$8 }
	*($1) = $8
	*($2) = $7
	$7 = *($0)
	$8 = *($1)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$7 }
	*($0) = $8
	*($1) = $7
	$9 = ($9 + [3])
	goto $label$6 
	
.LABEL $label$8
	$9 = ($9 + [1])
	goto $label$6 
	
.LABEL $label$7
	$9 = ($9 + [2])
	
.LABEL $label$6
	$7 = *($3)
	$8 = *($4)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$12 }
	*($3) = $8
	*($4) = $7
	$7 = *($2)
	$8 = *($3)
	if ( ((int_32)$8 >= (int_32)$7) ){ goto $label$11 }
	*($2) = $8
	*($3) = $7
	$3 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 >= (int_32)$3) ){ goto $label$10 }
	*($1) = $8
	*($2) = $3
	$8 = *($0)
	$2 = *($1)
	if ( ((int_32)$2 >= (int_32)$8) ){ goto $label$9 }
	*($0) = $2
	*($1) = $8
	$9 = ($9 + [4])
	
.LABEL $label$12
	return $9
	
.LABEL $label$11
	return ($9 + [1])
	
.LABEL $label$10
	return ($9 + [2])
	
.LABEL $label$9
	return ($9 + [3])
}

void .FUNC $256 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	
.LOOP $label$1:
	$4 = ($1 + [-2])
	$3 = ($1 + [-1])
	
.LOOP $label$2:
	$5 = $0
	
.LOOP $label$4:
	$0 = ($1 - $5)
	if ( ((uint_32)$0 <= (uint_32)[5]) ){ goto $label$12 }
	if ( ((int_32)$0 <= (int_32)[30]) ){ goto $label$11 }
	$12 = ($5 + uint_32($0 >> [1]))
	if ( ((int_32)$0 < (int_32)[1000]) ){ goto $label$13 }
	$0 = uint_32($0 >> [2])
	$10 = CALL $257($5, ($5 + $0), $12, ($12 + $0), $3, $2)
	goto $label$7 
	
.LABEL $label$13
	$0 = *($3)
	$6 = *($5)
	$11 = *($12)
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$16 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$15 }
	*($5) = $0
	*($3) = $6
	$10 = [1]
	goto $label$7 
	
.LABEL $label$16
	$10 = [0]
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$7 }
	*($12) = $0
	*($3) = $11
	$10 = [1]
	$11 = *($5)
	$0 = *($12)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$7 }
	*($5) = $0
	*($12) = $11
	goto $label$14 
	
.LABEL $label$15
	*($5) = $11
	*($12) = $6
	$10 = [1]
	$0 = *($3)
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$7 }
	*($12) = $0
	*($3) = $6
	
.LABEL $label$14
	$10 = [2]
	goto $label$7 
	
.LABEL $label$12
	goto $label$6 
	
.LABEL $label$17
	$11 = *($5)
	$0 = *($3)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($3) = $11
	return 
	
.LABEL $label$11
	$0 = *($5 + [2])
	$6 = *($5)
	$11 = *($5 + [1])
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$22 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$21 }
	*($5) = $0
	*(($5 + [2])) = $6
	goto $label$20 
	
.LABEL $label$22
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$19 }
	*(($5 + [2])) = $11
	*(($7 = ($5 + [1]))) = $0
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$18 }
	*($5) = $0
	*($7) = $6
	goto $label$18 
	
.LABEL $label$21
	*($5) = $11
	*(($11 = ($5 + [1]))) = $6
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$19 }
	*(($5 + [2])) = $6
	*($11) = $0
	
.LABEL $label$20
	$11 = $6
	goto $label$18 
	
.LABEL $label$19
	$11 = $0
	
.LABEL $label$18
	$8 = ($5 + [3])
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$6 }
	$12 = [0]
	
.LOOP $label$23:
	$7 = *($8)
	if ( ((int_32)$7 >= (int_32)int_32(($11 << [24]) >> [24])) ){ goto $label$24 }
	$0 = $12
	
.LOOP $label$28:
	*((($6 = ($5 + $0)) + [3])) = $11
	if ( ((int_32)$0 == (int_32)[-2]) ){ goto $label$27 }
	$0 = ($0 + [-1])
	$11 = *(($6 + [1]))
	if ( ((int_32)$7 < (int_32)$11) ){ goto $label$28 }
	goto $label$26 
	
.LABEL $label$27
	$0 = $5
	goto $label$25 
	
.LABEL $label$26
	$0 = (($5 + $0) + [3])
	
.LABEL $label$25
	*($0) = $7
	
.LABEL $label$24
	$0 = ($8 + [1])
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$6 }
	$12 = ($12 + [1])
	$11 = *($8)
	$8 = $0
	goto $label$23 
	
.LABEL $label$10
	$11 = *($5 + [2])
	$6 = *($5)
	$0 = *($5 + [1])
	if ( ((int_32)$0 >= (int_32)$6) ){ goto $label$33 }
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$32 }
	*($5) = $11
	*(($5 + [2])) = $6
	goto $label$31 
	
.LABEL $label$33
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$30 }
	*(($5 + [2])) = $0
	*(($7 = ($5 + [1]))) = $11
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$29 }
	*($5) = $11
	*($7) = $6
	goto $label$29 
	
.LABEL $label$32
	*($5) = $0
	*(($0 = ($5 + [1]))) = $6
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$30 }
	*(($5 + [2])) = $6
	*($0) = $11
	
.LABEL $label$31
	$0 = $6
	goto $label$29 
	
.LABEL $label$30
	$0 = $11
	
.LABEL $label$29
	$11 = *($3)
	if ( ((int_32)$11 >= (int_32)$0) ){ goto $label$6 }
	*(($6 = ($5 + [2]))) = $11
	*($3) = $0
	$11 = ($5 + [1])
	$7 = *($11)
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$7) ){ goto $label$6 }
	*($6) = $7
	*($11) = $0
	$11 = *($5)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*(($5 + [1])) = $11
	return 
	
.LABEL $label$9
	CALL $257($5, ($5 + [1]), ($5 + [2]), ($5 + [3]), $3, $2)
	return 
	
.LABEL $label$8
	$0 = *($3)
	$6 = *($5)
	$11 = *($5 + [1])
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$35 }
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$34 }
	*($5) = $0
	*($3) = $6
	return 
	
.LABEL $label$35
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*(($6 = ($5 + [1]))) = $0
	*($3) = $11
	$11 = *($5)
	$0 = *($6)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$6 }
	*($5) = $0
	*($6) = $11
	return 
	
.LABEL $label$34
	*($5) = $11
	*(($0 = ($5 + [1]))) = $6
	$11 = *($3)
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$6 }
	*($0) = $11
	*($3) = $6
	return 
	
.LABEL $label$7
	$6 = *($12)
	$8 = *($5)
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$37 }
	$0 = $4
	
.LOOP $label$40:
	if ( ((int_32)$5 == (int_32)$0) ){ goto $label$39 }
	$11 = *($0)
	$7 = ($0 + [-1])
	$0 = $7
	if ( ((int_32)$11 >= (int_32)$6) ){ goto $label$40 }
	goto $label$38 
	
.LABEL $label$39
	$12 = ($5 + [1])
	$6 = *($3)
	if ( ((int_32)$8 < (int_32)$6) ){ goto $label$41 }
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$12 = ($5 + [2])
	
.LOOP $label$43:
	$0 = ($12 + [-1])
	$11 = *($0)
	if ( ((int_32)$8 < (int_32)$11) ){ goto $label$42 }
	$12 = ($12 + [1])
	if ( ((int_32)$1 != (int_32)$12) ){ goto $label$43 }
	goto $label$6 
	
.LABEL $label$42
	*($0) = $6
	*($3) = $11
	
.LABEL $label$41
	if ( ((int_32)$12 == (int_32)$3) ){ goto $label$6 }
	$11 = $3
	
.LOOP $label$44:
	$0 = ($12 + [-1])
	$6 = *($5)
	
.LOOP $label$45:
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ((int_32)$6 >= (int_32)$7) ){ goto $label$45 }
	$12 = ($0 + [1])
	
.LOOP $label$46:
	$11 = ($11 + [-1])
	$8 = *($11)
	if ( ((int_32)$6 < (int_32)$8) ){ goto $label$46 }
	if ( ((uint_32)$0 >= (uint_32)$11) ){ goto $label$5 }
	*($0) = $8
	*($11) = $7
	goto $label$44 
	
.LABEL $label$38
	*($5) = $11
	*(($11 = ($7 + [1]))) = $8
	$10 = ($10 + [1])
	goto $label$36 
	
.LABEL $label$37
	$11 = $3
	
.LABEL $label$36
	$9 = ($5 + [1])
	if ( ((uint_32)$9 >= (uint_32)$11) ){ goto $label$47 }
	
.LOOP $label$48:
	$0 = ($9 + [-1])
	$6 = *($12)
	
.LOOP $label$49:
	$0 = ($0 + [1])
	$7 = *($0)
	if ( ((int_32)$7 < (int_32)$6) ){ goto $label$49 }
	$9 = ($0 + [1])
	
.LOOP $label$50:
	$11 = ($11 + [-1])
	$8 = *($11)
	if ( ((int_32)$8 >= (int_32)$6) ){ goto $label$50 }
	if ( ((uint_32)$0 > (uint_32)$11) ){ goto $label$51 }
	*($0) = $8
	*($11) = $7
	$12 = ( $11 ? $12 : ((int_32)$12 == (int_32)$0) )
	$10 = ($10 + [1])
	goto $label$48 
	
.LABEL $label$51
	$9 = $0
	
.LABEL $label$47
	if ( ((int_32)$9 == (int_32)$12) ){ goto $label$52 }
	$11 = *($9)
	$0 = *($12)
	if ( ((int_32)$0 >= (int_32)$11) ){ goto $label$52 }
	*($9) = $0
	*($12) = $11
	$10 = ($10 + [1])
	
.LABEL $label$52
	if ( $10 ){ goto $label$54 }
	$11 = CALL $258($5, $9, $2)
	$0 = ($9 + [1])
	if ( CALL $258($0, $1, $2) ){ goto $label$53 }
	if ( $11 ){ goto $label$2 }
	
.LABEL $label$54
	if ( ((int_32)($9 - $5) >= (int_32)($1 - $9)) ){ goto $label$3 }
	CALL $256($5, $9, $2)
	$0 = ($9 + [1])
	goto $label$2 
	
.LABEL $label$53
	$1 = $9
	$0 = $5
	if ( ($11 == 0) ){ goto $label$1 }
	
.LABEL $label$6
	return 
	
.LABEL $label$5
	$5 = $0
	goto $label$4 
	
.LABEL $label$3
	CALL $256(($9 + [1]), $1, $2)
	$1 = $9
	$0 = $5
	goto $label$1 
	$0
}

void .FUNC $98 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	*([0] + [4]) = $9
	$8 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $8) / (int_32)[40])
	$7 = ($5 + [1])
	if ( ((uint_32)$7 >= (uint_32)[107374183]) ){ goto $label$2 }
	$6 = [107374182]
	$8 = ((int_32)(*($0 + [8]) - $8) / (int_32)[40])
	if ( ((uint_32)$8 > (uint_32)[53687090]) ){ goto $label$4 }
	$8 = ($8 << [1])
	$6 = ( $7 ? $8 : ($8 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $259(((int_32)$6 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	*(($8 = ($7 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($8 + [8]) = *($3)
	*($8 + [16 align=4]) = (int_64)0
	*(($3 = ($8 + [24]))) = [0]
	$2 = CALL $259([16])
	*($8 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($8 + [20])) = $5
	*($8 + [28]) = [0]
	*(($2 = ($8 + [32]))) = [0]
	*(($8 + [36])) = [0]
	CALL $66(($8 + [28]), [65])
	$2 = *($2)
	$1 = *($8 + [28])
	*($9 + [4]) = $1
	*($9) = $1
	*($9 + [8]) = $2
	*($9 + [16]) = $9
	*($9 + [24]) = $4
	$4 = ($7 + ((int_32)$6 * (int_32)[40]))
	$5 = ($8 + [40])
	CALL $97(($9 + [24]), ($9 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$6 }
	$3 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$7:
	*(($8 + [-32])) = *(($2 + [-12]))
	*(($8 + [-40])) = *(($2 + [-20]))
	*(($1 = ($8 + [-24]))) = (int_64)0
	*(($6 = ($8 + [-16]))) = [0]
	$7 = ($2 + [-4])
	*($1) = *($7)
	*(($8 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($6) = *($1)
	*($1) = [0]
	*(($1 = ($8 + [-12]))) = (int_64)0
	*($7) = (int_64)0
	*(($6 = ($8 + [-4]))) = [0]
	$7 = ($2 + [8])
	*($1) = *($7)
	*(($8 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($6) = *($1)
	*($1) = [0]
	*($7) = (int_64)0
	$8 = ($8 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $3) != (int_32)[-20]) ){ goto $label$7 }
	$2 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $2
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$2 == (int_32)$6) ){ goto $label$8 }
	$1 = ([0] - $6)
	$8 = ($2 + [-24])
	
.LOOP $label$9:
	$2 = *(($8 + [12]))
	if ( ($2 == 0) ){ goto $label$10 }
	*(($8 + [16])) = $2
	CALL $261($2)
	
.LABEL $label$10
	$2 = *($8)
	if ( ($2 == 0) ){ goto $label$11 }
	*(($8 + [4])) = $2
	CALL $261($2)
	
.LABEL $label$11
	$8 = ($8 + [-40])
	if ( ((int_32)($8 + $1) != (int_32)[-24]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$12 }
	CALL $261($6)
	
.LABEL $label$12
	*([0] + [4]) = ($9 + [32])
	(unreachable)
}

void .FUNC $99 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$3 = [0]
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	*($4) = [0]
	CALL $101($4, $1)
	$2 = *($4)
	if ( ($2 == 0) ){ goto $label$2 }
	CALL $66($0, $2)
	$3 = *(($0 + [4]))
	$0 = *($0)
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	*($4 + [4]) = $0
	*($4) = $0
	*($4 + [8]) = $3
	CALL $102($4, $1)
	CALL $104(CALL $103(CALL $103($4, ($1 + [24])), ($1 + [36])), ($1 + [48]))
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $239 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$4 = *($0)
	$7 = *($0 + [4])
	$8 = ((int_32)($7 - $4) / (int_32)[12])
	$6 = ($8 + [1])
	if ( ((uint_32)$6 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[12])
	if ( ((uint_32)$3 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($3 << [1])
	$5 = ( $6 ? $5 : ($5 <= $6) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$5 * (int_32)[12]))
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$2 = *($1)
	*($1) = (int_64)0
	*(($8 = ($6 + ((int_32)$8 * (int_32)[12])))) = $2
	$1 = ($1 + [8])
	$3 = *($1)
	*($1) = [0]
	*(($8 + [8])) = $3
	$5 = ($6 + ((int_32)$5 * (int_32)[12]))
	$6 = ($8 + [12])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$6 }
	$1 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$7:
	*(($8 + [-12])) = *($7)
	$4 = ($7 + [8])
	*(($8 + [-4])) = *($4)
	*($7) = [0]
	*(($7 + [4])) = [0]
	*($4) = [0]
	$8 = ($8 + [-12])
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $7
	
.LABEL $label$5
	*($0) = $8
	*(($0 + [4])) = $6
	*(($0 + [8])) = $5
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$8 }
	$8 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$9:
	if ( ((*($7) & [1]) == 0) ){ goto $label$10 }
	CALL $261(*(($7 + [8])))
	
.LABEL $label$10
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $8) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $261($4)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $238 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [16])
	*([0] + [4]) = $16
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$4 = ($1 + [4])
	$3 = ($16 | [1])
	$5 = ($1 + [20])
	$6 = ($1 + [16])
	$7 = ($16 + [8])
	$8 = ($1 + [28])
	$9 = ($1 + [32])
	$10 = ($1 + [24])
	
.LOOP $label$1:
	$13 = [1]
	if ( (*($1) == 0) ){ goto $label$2 }
	$13 = ((int_32)*($9) != (int_32)[0])
	
.LABEL $label$2
	if ( (*($2) == 0) ){ goto $label$10 }
	$15 = ((int_32)*(($2 + [32])) != (int_32)[0])
	if ( ((int_32)($13 | $15) == (int_32)[1]) ){ goto $label$9 }
	$15 = *(($2 + [16]))
	$13 = *($6)
	$12 = *($5)
	if ( ((int_32)($12 - $13) != (int_32)(*(($2 + [20])) - $15)) ){ goto $label$7 }
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$11 }
	$11 = $13
	
.LOOP $label$12:
	if ( ((int_32)*($11) != (int_32)*($15)) ){ goto $label$7 }
	$15 = ($15 + [1])
	$11 = ($11 + [1])
	if ( ((int_32)$12 != (int_32)$11) ){ goto $label$12 }
	
.LABEL $label$11
	if ( ((int_32)*($10) != (int_32)*(($2 + [24]))) ){ goto $label$7 }
	if ( ((int_32)*($8) != (int_32)*(($2 + [28]))) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$10
	$15 = [1]
	
.LABEL $label$9
	if ( ((int_32)$13 == (int_32)$15) ){ goto $label$6 }
	
.LABEL $label$8
	$12 = *($5)
	$13 = *($6)
	
.LABEL $label$7
	*($7) = [0]
	*($16) = (int_64)0
	$11 = ($12 - $13)
	if ( ((uint_32)$11 >= (uint_32)[-16]) ){ goto $label$5 }
	if ( ((uint_32)$11 > (uint_32)[10]) ){ goto $label$15 }
	*($16) = ($11 << [1])
	$14 = $3
	if ( ((int_32)$13 != (int_32)$12) ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$15 = (($11 + [16]) & [-16])
	$14 = CALL $259($15)
	*($7) = $14
	*($16) = ($15 | [1])
	*($16 + [4]) = $11
	if ( ((int_32)$13 == (int_32)$12) ){ goto $label$13 }
	
.LABEL $label$14
	$15 = $14
	
.LOOP $label$16:
	*($15) = *($13)
	$15 = ($15 + [1])
	$13 = ($13 + [1])
	if ( ((int_32)$12 != (int_32)$13) ){ goto $label$16 }
	$14 = ($14 + $11)
	
.LABEL $label$13
	*($14) = [0]
	$13 = ($0 + [4])
	$15 = *($13)
	if ( ((uint_32)$15 >= (uint_32)*(($0 + [8]))) ){ goto $label$18 }
	*($15) = *($16)
	*(($15 + [8])) = *($7)
	*($7) = [0]
	*($16) = [0]
	*($16 + [4]) = [0]
	*($13) = (*($13) + [12])
	goto $label$17 
	
.LABEL $label$18
	CALL $239($0, $16)
	if ( ((*($16) & [1]) == 0) ){ goto $label$17 }
	CALL $261(*($7))
	
.LABEL $label$17
	$13 = *($8)
	$15 = *($1)
	if ( ($15 == 0) ){ goto $label$20 }
	CALL void $16((int_32 $4), (int_32 *($10)), (int_32 $13), (int_32 *(($15 & [-2]) + [4])))
	$15 = *($16)
	if ( ((int_32)$15 == (int_32)*($8)) ){ goto $label$19 }
	$13 = *($16 + [4])
	goto $label$3 
	
.LABEL $label$20
	*($16 + [4]) = $13
	*($16) = $13
	$15 = $13
	goto $label$4 
	
.LABEL $label$19
	$13 = *($16 + [4])
	if ( ((int_32)$13 != (int_32)$15) ){ goto $label$3 }
	goto $label$4 
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [16])
	return $0
	
.LABEL $label$5
	CALL $263($16)
	
.LABEL $label$4
	if ( ((int_32)*($5) != (int_32)$15) ){ goto $label$3 }
	*($9) = [1]
	
.LABEL $label$3
	*($5) = $15
	*($6) = *($10)
	*($10) = $13
	goto $label$1 
	return (unreachable)
}

void .FUNC $94 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [16]) = ((int_64)*($1 + [16]) + (int_64)*(*($3)))
	$4 = *($1)
	*($1 + [40]) = ((int_64)*($1 + [40]) + (int_64)1)
	CALL eosio_assert([1], [720])
	*($5 + [88]) = ($5 + [80])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $59(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

void .FUNC $95 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $106(*($1), ($0 + [32]))
	*($4 + [8]) = $0
	CALL $107(($4 + [8]), $1)
	*([0] + [4]) = ($4 + [16])
}

void .FUNC $96 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	$10 = *($0)
	$5 = ((int_32)(*($0 + [4]) - $10) / (int_32)[40])
	$6 = ($5 + [1])
	if ( ((uint_32)$6 >= (uint_32)[107374183]) ){ goto $label$2 }
	$8 = [107374182]
	$10 = ((int_32)(*($0 + [8]) - $10) / (int_32)[40])
	if ( ((uint_32)$10 > (uint_32)[53687090]) ){ goto $label$4 }
	$10 = ($10 << [1])
	$8 = ( $6 ? $10 : ($10 <= $6) )
	if ( ($8 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$8 * (int_32)[40]))
	goto $label$1 
	
.LABEL $label$3
	$8 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	*(($10 = ($6 + ((int_32)$5 * (int_32)[40])))) = *($2)
	*($10 + [8]) = *($3)
	*($10 + [16 align=4]) = (int_64)0
	*(($3 = ($10 + [24]))) = [0]
	$2 = CALL $259([16])
	*($10 + [16]) = $2
	$5 = ($2 + [16])
	*($3) = $5
	*(($2 + [12])) = *(($1 + [12]))
	*(($2 + [8])) = *(($1 + [8]))
	*(($2 + [4])) = *(($1 + [4]))
	*($2) = *($1)
	*(($10 + [20])) = $5
	*($10 + [28]) = [0]
	$2 = [32]
	*(($5 = ($10 + [32]))) = [0]
	*(($10 + [36])) = [0]
	$3 = ($6 + ((int_32)$8 * (int_32)[40]))
	$1 = ($10 + [28])
	$6 = *($4 + [32])
	$8 = *(($4 + [36]))
	$7 = ($8 - $6)
	$9 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	
.LOOP $label$5:
	$2 = ($2 + [1])
	$9 = (uint_64)$9 >> (uint_64)(int_64)7
	if ( ((int_64)$9) != (int_64)0) ){ goto $label$5 }
	if ( ((int_32)$6 == (int_32)$8) ){ goto $label$6 }
	$2 = (($7 & [-16]) + $2)
	
.LABEL $label$6
	$2 = ($2 + [57])
	if ( ($2 == 0) ){ goto $label$8 }
	CALL $66($1, $2)
	$8 = *($5)
	$2 = *($1)
	goto $label$7 
	
.LABEL $label$8
	$8 = [0]
	$2 = [0]
	
.LABEL $label$7
	*($11 + [4]) = $2
	*($11) = $2
	*($11 + [8]) = $8
	*($11 + [16]) = $11
	*($11 + [24]) = $4
	$5 = ($10 + [40])
	CALL $95(($11 + [24]), ($11 + [16]))
	$2 = *($0)
	$1 = *(($0 + [4]))
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$10 }
	$6 = ([0] - $2)
	$2 = ($1 + [-20])
	
.LOOP $label$11:
	*(($10 + [-32])) = *(($2 + [-12]))
	*(($10 + [-40])) = *(($2 + [-20]))
	*(($1 = ($10 + [-24]))) = (int_64)0
	*(($4 = ($10 + [-16]))) = [0]
	$8 = ($2 + [-4])
	*($1) = *($8)
	*(($10 + [-20])) = *($2)
	$1 = ($2 + [4])
	*($4) = *($1)
	*($1) = [0]
	*(($1 = ($10 + [-12]))) = (int_64)0
	*($8) = (int_64)0
	*(($4 = ($10 + [-4]))) = [0]
	$8 = ($2 + [8])
	*($1) = *($8)
	*(($10 + [-8])) = *(($2 + [12]))
	$1 = ($2 + [16])
	*($4) = *($1)
	*($1) = [0]
	*($8) = (int_64)0
	$10 = ($10 + [-40])
	$2 = ($2 + [-40])
	if ( ((int_32)($2 + $6) != (int_32)[-20]) ){ goto $label$11 }
	$2 = *(($0 + [4]))
	$4 = *($0)
	goto $label$9 
	
.LABEL $label$10
	$4 = $2
	
.LABEL $label$9
	*($0) = $10
	*(($0 + [4])) = $5
	*(($0 + [8])) = $3
	if ( ((int_32)$2 == (int_32)$4) ){ goto $label$12 }
	$1 = ([0] - $4)
	$10 = ($2 + [-24])
	
.LOOP $label$13:
	$2 = *(($10 + [12]))
	if ( ($2 == 0) ){ goto $label$14 }
	*(($10 + [16])) = $2
	CALL $261($2)
	
.LABEL $label$14
	$2 = *($10)
	if ( ($2 == 0) ){ goto $label$15 }
	*(($10 + [4])) = $2
	CALL $261($2)
	
.LABEL $label$15
	$10 = ($10 + [-40])
	if ( ((int_32)($10 + $1) != (int_32)[-24]) ){ goto $label$13 }
	
.LABEL $label$12
	if ( ($4 == 0) ){ goto $label$16 }
	CALL $261($4)
	
.LABEL $label$16
	*([0] + [4]) = ($11 + [32])
	(unreachable)
}

void .FUNC $97 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	$2 = *($1)
	*($3 + [15]) = *(*($0))
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[0]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [15]), [1])
	*($2 + [4]) = (*($2 + [4]) + [1])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($2 + [8]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($2 + [16]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($2 + [24]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*($3 + [8]) = $2
	CALL $105(($3 + [8]), $1)
	*([0] + [4]) = ($3 + [16])
}

void .FUNC $90 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [64])
	*([0] + [4]) = $11
	*($11 + [56]) = $1
	$5 = *(($0 + [488]))
	$10 = *(($0 + [492]))
	*($11 + [48]) = $4
	$8 = ((uint_32)$4 % (uint_32)[86400])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$1 }
	$9 = ($10 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$2:
	if ( ((int_64)*(*($9)) == (int_64)$1) ){ goto $label$1 }
	$10 = $9
	$7 = ($9 + [-24])
	$9 = $7
	if ( ((int_32)($7 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$7 = ($0 + [464])
	if ( ((int_32)$10 == (int_32)$5) ){ goto $label$4 }
	$9 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($9 + [60]) == (int_32)$7), [304])
	goto $label$3 
	
.LABEL $label$4
	$9 = [0]
	$10 = CALL db_find_i64(*(($0 + [464])), *(($0 + [472])), (int_64)5313336380166766592, $1)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$3 }
	$9 = CALL $137($7, $10)
	CALL eosio_assert(((int_32)*($9 + [60]) == (int_32)$7), [304])
	
.LABEL $label$3
	*($11 + [32]) = (int_64)0
	*($11 + [40]) = [0]
	$1 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8
	if ( (int_64)($1) == 0) ){ goto $label$5 }
	
.LOOP $label$6:
	CALL $269(($11 + [32]), int_32(((CASTING uint_32)(uint_64 $1) << [24]) >> [24]))
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)$1) != (int_64)0) ){ goto $label$6 }
	
.LABEL $label$5
	if ( ($9 == 0) ){ goto $label$8 }
	if ( ((uint_32)($4 - $8) <= (uint_32)*($9 + [8])) ){ goto $label$9 }
	*($11 + [8]) = $0
	CALL eosio_assert([1], [560])
	CALL $139($7, $9, (int_64)0, ($11 + [8]))
	
.LABEL $label$9
	*($11 + [8]) = $0
	*($11 + [16]) = $2
	*($11 + [20]) = $3
	*($11 + [12]) = ($11 + [56])
	*($11 + [24]) = ($11 + [48])
	CALL eosio_assert([1], [560])
	CALL $140($7, $9, (int_64)0, ($11 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$1 = *($0)
	*($11 + [8]) = $0
	*($11 + [16]) = $2
	*($11 + [20]) = $3
	*($11 + [12]) = ($11 + [56])
	*($11 + [24]) = ($11 + [48])
	CALL $138($11, $7, $1, ($11 + [8]))
	
.LABEL $label$7
	if ( ((*($11 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $261(*(($11 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [64])
}

void .FUNC $91 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	*($15 + [136]) = $10
	*($15 + [128]) = $1
	*($15 + [120]) = $2
	*($15 + [112]) = $3
	*($15 + [111]) = $6
	*($15 + [96]) = $7
	*($15 + [88]) = $8
	*($15 + [80]) = *($4)
	$8 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$14 = *(($0 + [288]))
	$10 = *(($0 + [292]))
	if ( ((int_32)$10 == (int_32)$14) ){ goto $label$1 }
	$4 = ($10 + [-24])
	$11 = ([0] - $14)
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$8) ){ goto $label$1 }
	$10 = $4
	$6 = ($4 + [-24])
	$4 = $6
	if ( ((int_32)($6 + $11) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [264])
	if ( ((int_32)$10 == (int_32)$14) ){ goto $label$4 }
	$6 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$4), [304])
	*($15 + [76]) = $6
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_find_i64(*(($0 + [264])), *(($0 + [272])), (int_64)7035938535980793856, $8)
	if ( ((int_32)$6 <= (int_32)[-1]) ){ goto $label$5 }
	$6 = CALL $57($4, $6)
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$4), [304])
	*($15 + [76]) = $6
	goto $label$3 
	
.LABEL $label$5
	*($15 + [76]) = [0]
	
.LABEL $label$3
	*($15 + [72]) = $4
	$14 = *(($0 + [248]))
	$10 = *(($0 + [252]))
	if ( ((int_32)$10 == (int_32)$14) ){ goto $label$6 }
	$4 = ($10 + [-24])
	$11 = ([0] - $14)
	
.LOOP $label$7:
	if ( ((int_64)*(*($4)) == (int_64)104) ){ goto $label$6 }
	$10 = $4
	$6 = ($4 + [-24])
	$4 = $6
	if ( ((int_32)($6 + $11) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$12 = ($0 + [224])
	if ( ((int_32)$10 == (int_32)$14) ){ goto $label$9 }
	$14 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$12), [304])
	goto $label$8 
	
.LABEL $label$9
	$14 = [0]
	$4 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)104)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$14 = CALL $51($12, $4)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$12), [304])
	
.LABEL $label$8
	$8 = ((int_64)((uint_64)*($14 + [8]) % (uint_64)(int_64)40) + (int_64)1)
	*($15 + [64]) = $8
	$13 = *(($0 + [128]))
	$10 = *(($0 + [132]))
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$10 }
	$4 = ($10 + [-24])
	$11 = ([0] - $13)
	
.LOOP $label$11:
	if ( ((int_64)*(*($4)) == (int_64)$8) ){ goto $label$10 }
	$10 = $4
	$6 = ($4 + [-24])
	$4 = $6
	if ( ((int_32)($6 + $11) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = ($0 + [104])
	if ( ((int_32)$10 == (int_32)$13) ){ goto $label$15 }
	$6 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)$4), [304])
	if ( $6 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL db_find_i64(*(($0 + [104])), *(($0 + [112])), (int_64)-8524867579968225280, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$6 = CALL $129($4, $6)
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)$4), [304])
	
.LABEL $label$14
	*($15 + [8]) = $0
	*($15 + [32]) = $5
	*($15 + [12]) = ($15 + [128])
	*($15 + [16]) = ($15 + [72])
	*($15 + [20]) = ($15 + [120])
	*($15 + [24]) = ($15 + [112])
	*($15 + [28]) = ($15 + [80])
	*($15 + [36]) = ($15 + [111])
	*($15 + [40]) = ($15 + [96])
	*($15 + [44]) = ($15 + [88])
	*($15 + [48]) = $9
	*($15 + [52]) = ($15 + [136])
	CALL eosio_assert([1], [560])
	CALL $130($4, $6, (int_64)0, ($15 + [8]))
	goto $label$12 
	
.LABEL $label$13
	$8 = *($0)
	*($15 + [8]) = $0
	*($15 + [12]) = ($15 + [64])
	*($15 + [16]) = ($15 + [128])
	*($15 + [20]) = ($15 + [72])
	*($15 + [24]) = ($15 + [120])
	*($15 + [28]) = ($15 + [112])
	*($15 + [32]) = ($15 + [80])
	*($15 + [36]) = $5
	*($15 + [40]) = ($15 + [111])
	*($15 + [44]) = ($15 + [96])
	*($15 + [48]) = ($15 + [88])
	*($15 + [52]) = $9
	*($15 + [56]) = ($15 + [136])
	CALL $131($15, $4, $8, ($15 + [8]))
	
.LABEL $label$12
	*($15 + [8]) = ($15 + [64])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [560])
	CALL $132($12, $14, (int_64)0, ($15 + [8]))
	*([0] + [4]) = ($15 + [144])
}

void .FUNC $92 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	*($15 + [136]) = $10
	*($15 + [128]) = $1
	*($15 + [120]) = $2
	*($15 + [112]) = $3
	*($15 + [111]) = $6
	*($15 + [96]) = $7
	*($15 + [88]) = $8
	if ( ((int_32)$6 == (int_32)[2]) ){ goto $label$3 }
	if ( ((int_32)$6 != (int_32)[1]) ){ goto $label$1 }
	if ( ((uint_64)$7 <= (uint_64)$8) ){ goto $label$1 }
	if ( (uint_64)($7 <= (int_64)20) ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	if ( ((uint_64)$8 <= (uint_64)$7) ){ goto $label$1 }
	if ( (uint_64)($7 <= (int_64)81) ){ goto $label$1 }
	
.LABEL $label$2
	*($15 + [80]) = *($4)
	$7 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$14 = *(($0 + [288]))
	$4 = *(($0 + [292]))
	if ( ((int_32)$4 == (int_32)$14) ){ goto $label$4 }
	$6 = ($4 + [-24])
	$11 = ([0] - $14)
	
.LOOP $label$5:
	if ( ((int_64)*(*($6)) == (int_64)$7) ){ goto $label$4 }
	$4 = $6
	$10 = ($6 + [-24])
	$6 = $10
	if ( ((int_32)($10 + $11) != (int_32)[-24]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = ($0 + [264])
	if ( ((int_32)$4 == (int_32)$14) ){ goto $label$7 }
	$10 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$6), [304])
	*($15 + [76]) = $10
	goto $label$6 
	
.LABEL $label$7
	$10 = CALL db_find_i64(*(($0 + [264])), *(($0 + [272])), (int_64)7035938535980793856, $7)
	if ( ((int_32)$10 <= (int_32)[-1]) ){ goto $label$8 }
	$10 = CALL $57($6, $10)
	CALL eosio_assert(((int_32)*($10 + [80]) == (int_32)$6), [304])
	*($15 + [76]) = $10
	goto $label$6 
	
.LABEL $label$8
	*($15 + [76]) = [0]
	
.LABEL $label$6
	*($15 + [72]) = $6
	$14 = *(($0 + [248]))
	$4 = *(($0 + [252]))
	if ( ((int_32)$4 == (int_32)$14) ){ goto $label$9 }
	$6 = ($4 + [-24])
	$11 = ([0] - $14)
	
.LOOP $label$10:
	if ( ((int_64)*(*($6)) == (int_64)106) ){ goto $label$9 }
	$4 = $6
	$10 = ($6 + [-24])
	$6 = $10
	if ( ((int_32)($10 + $11) != (int_32)[-24]) ){ goto $label$10 }
	
.LABEL $label$9
	$12 = ($0 + [224])
	if ( ((int_32)$4 == (int_32)$14) ){ goto $label$12 }
	$14 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$12), [304])
	goto $label$11 
	
.LABEL $label$12
	$14 = [0]
	$6 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)106)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$11 }
	$14 = CALL $51($12, $6)
	CALL eosio_assert(((int_32)*($14 + [16]) == (int_32)$12), [304])
	
.LABEL $label$11
	$7 = ((int_64)((uint_64)*($14 + [8]) % (uint_64)(int_64)40) + (int_64)1)
	*($15 + [64]) = $7
	$13 = *(($0 + [168]))
	$4 = *(($0 + [172]))
	if ( ((int_32)$4 == (int_32)$13) ){ goto $label$13 }
	$6 = ($4 + [-24])
	$11 = ([0] - $13)
	
.LOOP $label$14:
	if ( ((int_64)*(*($6)) == (int_64)$7) ){ goto $label$13 }
	$4 = $6
	$10 = ($6 + [-24])
	$6 = $10
	if ( ((int_32)($10 + $11) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	$6 = ($0 + [144])
	if ( ((int_32)$4 == (int_32)$13) ){ goto $label$18 }
	$10 = *(($4 + [-24]))
	CALL eosio_assert(((int_32)*($10 + [116]) == (int_32)$6), [304])
	if ( $10 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	$10 = CALL db_find_i64(*(($0 + [144])), *(($0 + [152])), (int_64)-3917262948703141888, $7)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$16 }
	$10 = CALL $121($6, $10)
	CALL eosio_assert(((int_32)*($10 + [116]) == (int_32)$6), [304])
	
.LABEL $label$17
	*($15 + [8]) = $0
	*($15 + [32]) = $5
	*($15 + [12]) = ($15 + [128])
	*($15 + [16]) = ($15 + [72])
	*($15 + [20]) = ($15 + [120])
	*($15 + [24]) = ($15 + [112])
	*($15 + [28]) = ($15 + [80])
	*($15 + [36]) = ($15 + [111])
	*($15 + [40]) = ($15 + [96])
	*($15 + [44]) = ($15 + [88])
	*($15 + [48]) = $9
	*($15 + [52]) = ($15 + [136])
	CALL eosio_assert([1], [560])
	CALL $122($6, $10, (int_64)0, ($15 + [8]))
	goto $label$15 
	
.LABEL $label$16
	$7 = *($0)
	*($15 + [8]) = $0
	*($15 + [12]) = ($15 + [64])
	*($15 + [16]) = ($15 + [128])
	*($15 + [20]) = ($15 + [72])
	*($15 + [24]) = ($15 + [120])
	*($15 + [28]) = ($15 + [112])
	*($15 + [32]) = ($15 + [80])
	*($15 + [36]) = $5
	*($15 + [40]) = ($15 + [111])
	*($15 + [44]) = ($15 + [96])
	*($15 + [48]) = ($15 + [88])
	*($15 + [52]) = $9
	*($15 + [56]) = ($15 + [136])
	CALL $123($15, $6, $7, ($15 + [8]))
	
.LABEL $label$15
	*($15 + [8]) = ($15 + [64])
	CALL eosio_assert(((int_32)$14 != (int_32)[0]), [560])
	CALL $124($12, $14, (int_64)0, ($15 + [8]))
	
.LABEL $label$1
	*([0] + [4]) = ($15 + [144])
}

void .FUNC $93 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8, int_32 $9, int_32 $10)
{
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	$15 = (*([0] + [4]) - [144])
	*([0] + [4]) = $15
	*($15 + [136]) = $10
	*($15 + [128]) = $1
	*($15 + [120]) = $2
	*($15 + [112]) = $3
	*($15 + [111]) = $6
	*($15 + [96]) = $7
	*($15 + [88]) = $8
	$7 = *($4)
	*($15 + [80]) = $7
	$8 = (uint_64)*($4 + [8]) >> (uint_64)(int_64)8)
	$11 = *(($0 + [288]))
	$10 = *(($0 + [292]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$1 }
	$4 = ($10 + [-24])
	$12 = ([0] - $11)
	
.LOOP $label$2:
	if ( ((int_64)*(*($4)) == (int_64)$8) ){ goto $label$1 }
	$10 = $4
	$6 = ($4 + [-24])
	$4 = $6
	if ( ((int_32)($6 + $12) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	$4 = ($0 + [264])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$4 }
	$6 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$4), [304])
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL $57($4, CALL $fimport$16(*(($0 + [264])), *(($0 + [272])), (int_64)7035938535980793856, $8))
	CALL eosio_assert(((int_32)*($6 + [80]) == (int_32)$4), [304])
	
.LABEL $label$3
	*($15 + [72]) = $4
	*($15 + [76]) = $6
	if ( (uint_64)($7 <= *($6 + [72])) ){ goto $label$5 }
	$11 = *(($0 + [248]))
	$10 = *(($0 + [252]))
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$6 }
	$4 = ($10 + [-24])
	$12 = ([0] - $11)
	
.LOOP $label$7:
	if ( ((int_64)*(*($4)) == (int_64)105) ){ goto $label$6 }
	$10 = $4
	$6 = ($4 + [-24])
	$4 = $6
	if ( ((int_32)($6 + $12) != (int_32)[-24]) ){ goto $label$7 }
	
.LABEL $label$6
	$13 = ($0 + [224])
	if ( ((int_32)$10 == (int_32)$11) ){ goto $label$9 }
	$11 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$13), [304])
	goto $label$8 
	
.LABEL $label$9
	$11 = [0]
	$4 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)105)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$11 = CALL $51($13, $4)
	CALL eosio_assert(((int_32)*($11 + [16]) == (int_32)$13), [304])
	
.LABEL $label$8
	$8 = ((int_64)((uint_64)*($11 + [8]) % (uint_64)(int_64)40) + (int_64)1)
	*($15 + [64]) = $8
	$14 = *(($0 + [208]))
	$10 = *(($0 + [212]))
	if ( ((int_32)$10 == (int_32)$14) ){ goto $label$10 }
	$4 = ($10 + [-24])
	$12 = ([0] - $14)
	
.LOOP $label$11:
	if ( ((int_64)*(*($4)) == (int_64)$8) ){ goto $label$10 }
	$10 = $4
	$6 = ($4 + [-24])
	$4 = $6
	if ( ((int_32)($6 + $12) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$4 = ($0 + [184])
	if ( ((int_32)$10 == (int_32)$14) ){ goto $label$15 }
	$6 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)$4), [304])
	if ( $6 ){ goto $label$14 }
	goto $label$13 
	
.LABEL $label$15
	$6 = CALL db_find_i64(*(($0 + [184])), *(($0 + [192])), (int_64)7337609168256413696, $8)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$13 }
	$6 = CALL $108($4, $6)
	CALL eosio_assert(((int_32)*($6 + [116]) == (int_32)$4), [304])
	
.LABEL $label$14
	*($15 + [8]) = $0
	*($15 + [32]) = $5
	*($15 + [12]) = ($15 + [128])
	*($15 + [16]) = ($15 + [72])
	*($15 + [20]) = ($15 + [120])
	*($15 + [24]) = ($15 + [112])
	*($15 + [28]) = ($15 + [80])
	*($15 + [36]) = ($15 + [111])
	*($15 + [40]) = ($15 + [96])
	*($15 + [44]) = ($15 + [88])
	*($15 + [48]) = $9
	*($15 + [52]) = ($15 + [136])
	CALL eosio_assert([1], [560])
	CALL $109($4, $6, (int_64)0, ($15 + [8]))
	goto $label$12 
	
.LABEL $label$13
	$8 = *($0)
	*($15 + [8]) = $0
	*($15 + [12]) = ($15 + [64])
	*($15 + [16]) = ($15 + [128])
	*($15 + [20]) = ($15 + [72])
	*($15 + [24]) = ($15 + [120])
	*($15 + [28]) = ($15 + [112])
	*($15 + [32]) = ($15 + [80])
	*($15 + [36]) = $5
	*($15 + [40]) = ($15 + [111])
	*($15 + [44]) = ($15 + [96])
	*($15 + [48]) = ($15 + [88])
	*($15 + [52]) = $9
	*($15 + [56]) = ($15 + [136])
	CALL $110($15, $4, $8, ($15 + [8]))
	
.LABEL $label$12
	*($15 + [8]) = ($15 + [64])
	CALL eosio_assert(((int_32)$11 != (int_32)[0]), [560])
	CALL $111($13, $11, (int_64)0, ($15 + [8]))
	
.LABEL $label$5
	*([0] + [4]) = ($15 + [144])
}

void .FUNC $138 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([72])
	CALL $145($3)
	*($3 + [60]) = $1
	CALL $146(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [64])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $147(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$0 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($0 == 0) ){ goto $label$3 }
	$5 = *($0 + [48])
	if ( ($5 == 0) ){ goto $label$4 }
	$4 = ($0 + [52])
	$1 = *($4)
	if ( ((int_32)$1 == (int_32)$5) ){ goto $label$6 }
	$3 = ([0] - $5)
	$1 = ($1 + [-32])
	
.LOOP $label$7:
	if ( ((*($1) & [1]) == 0) ){ goto $label$8 }
	CALL $261(*(($1 + [8])))
	
.LABEL $label$8
	$1 = ($1 + [-32])
	if ( ((int_32)($1 + $3) != (int_32)[-32]) ){ goto $label$7 }
	$1 = *(($0 + [48]))
	goto $label$5 
	
.LABEL $label$6
	$1 = $5
	
.LABEL $label$5
	*($4) = $5
	CALL $261($1)
	
.LABEL $label$4
	CALL $261($0)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $139 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [60]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	$4 = *($1)
	$7 = *($1 + [48])
	$6 = ($1 + [52])
	$5 = (uint_32((*($6) - $7) >> [5]) & [255])
	if ( ($5 == 0) ){ goto $label$1 }
	$8 = [0]
	$9 = [0]
	
.LOOP $label$2:
	*(($8 = ($7 + ($8 << [5]))) + [24]) = (int_64)0
	*($8 + [16]) = (int_64)0
	$9 = ($9 + [1])
	$8 = ($9 & [255])
	if ( ($8 <= $5) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert([1], [720])
	$9 = *(($1 + [48]))
	$5 = *($6)
	$10 = (CASTING uint_64)(uint_32 int_32(($5 - $9) >> [5]))
	$8 = [44]
	
.LOOP $label$3:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$3 }
	if ( ((int_32)$9 == (int_32)$5) ){ goto $label$4 }
	
.LOOP $label$5:
	$7 = *($9)
	$7 = ( *($9 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )
	$8 = (($7 + $8) + [16])
	$10 = (CASTING uint_64)(uint_32 $7)
	
.LOOP $label$6:
	$8 = ($8 + [1])
	$10 = (uint_64)$10 >> (uint_64)(int_64)7
	if ( ((int_64)$10) != (int_64)0) ){ goto $label$6 }
	$9 = ($9 + [32])
	if ( ((int_32)$9 != (int_32)$5) ){ goto $label$5 }
	
.LABEL $label$4
	if ( ($8 <= [513]) ){ goto $label$8 }
	$9 = CALL malloc($8)
	goto $label$7 
	
.LABEL $label$8
	$9 = ($12 - (($8 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$7
	*($11 + [4]) = $9
	*($11) = $9
	*($11 + [8]) = ($9 + $8)
	CALL $142($11, $1)
	CALL db_update_i64(*($1 + [64]), $2, $9, $8)
	if ( ($8 <= [513]) ){ goto $label$9 }
	CALL free($9)
	
.LABEL $label$9
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$10 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$10
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $269 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$4 = *($0)
	$2 = ($4 & [1])
	if ( ($2 == 0) ){ goto $label$6 }
	$3 = ((*($0) & [-2]) + [-1])
	$4 = *($0 + [4])
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$6
	$3 = [10]
	$4 = uint_32($4 >> [1])
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$4 }
	
.LABEL $label$5
	CALL $270($0, $3, [1], $3, $3, [0], [0])
	if ( (*($0) & [1]) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($0 + [4]) = ($4 + [1])
	$0 = *($0 + [8])
	goto $label$1 
	
.LABEL $label$2
	*($0) = (($4 << [1]) + [2])
	$0 = ($0 + [1])
	
.LABEL $label$1
	*(($0 = ($0 + $4)) + [1]) = [0]
	*($0) = $1
}

void .FUNC $130 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	$4 = *($1)
	CALL $136($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [720])
	$5 = *($1 + [48])
	$6 = *(($1 + [52]))
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	$3 = [48]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = ($3 + [53])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($3 + $6)
	CALL $115($9, $1)
	CALL db_update_i64(*(($1 + [120])), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $131 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $259([128])) + [56]) = [0]
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [116]) = $1
	CALL $133(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [120])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $134(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [52])) = $1
	CALL $261($1)
	
.LABEL $label$4
	CALL $261($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $132 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	CALL eosio_assert([1], [784])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $133 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	CALL $135(*($0 + [4]), $1)
	$3 = *($1 + [48])
	$4 = *(($1 + [52]))
	$5 = ($4 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	$6 = [48]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$2
	$4 = ($6 + [53])
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $4)
	CALL $115($8, $1)
	$7 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($2 + [8]), (int_64)-8524867579968225280, *(*($0 + [8])), $7, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $134 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [48])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [52])) = $6
	CALL $261($6)
	
.LABEL $label$11
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $261($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $135 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	$7 = *(*($0 + [24]))
	$6 = *(*($0 + [20]))
	$5 = *(*($0 + [16]))
	$3 = *(*($0 + [8]))
	$2 = *(*($0 + [4]))
	$4 = *(*(*($0 + [12]) + [4]) + [8])
	$8 = *($0 + [28])
	$14 = [0]
	*($16 + [32]) = [0]
	*($16 + [36]) = [0]
	*($16 + [40]) = [0]
	$12 = (*($8 + [4]) - *($8))
	$9 = int_32($12 >> [4])
	if ( ($9 == 0) ){ goto $label$4 }
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$1 }
	$14 = CALL $259($12)
	*(($16 + [40])) = ($14 + ($9 << [4]))
	*($16 + [36]) = $14
	*($16 + [32]) = $14
	$9 = *($8)
	$8 = (*(($8 + [4])) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($14, $9, $8)
	$15 = ($14 + $8)
	*($16 + [36]) = $15
	goto $label$2 
	
.LABEL $label$4
	$15 = [0]
	goto $label$2 
	
.LABEL $label$3
	$15 = $14
	
.LABEL $label$2
	$11 = *(*($0 + [40]))
	$10 = *(*($0 + [36]))
	$9 = *(*($0 + [32]))
	$8 = *($0 + [44])
	*(($12 = ($16 + [24]))) = *(($8 + [24]))
	*(($13 = ($16 + [16]))) = *(($8 + [16]))
	*($16 + [8]) = *(($8 + [8]))
	*($16) = *($8)
	$0 = *(*($0 + [48]))
	*(($8 = (($16 + [48]) + [24]))) = *($12)
	*(($12 = (($16 + [48]) + [16]))) = *($13)
	*($16 + [56]) = *($16 + [8])
	*($16 + [48]) = *($16)
	*($1) = $2
	*($1 + [8]) = $3
	*($1 + [16]) = $4
	*($1 + [24]) = $5
	*($1 + [32]) = $6
	*($1 + [40]) = $7
	$13 = ($1 + [48])
	if ( ((int_32)$13 == (int_32)($16 + [32])) ){ goto $label$5 }
	CALL $116($13, $14, $15)
	$14 = *($16 + [32])
	
.LABEL $label$5
	*($1 + [64]) = $10
	*($1 + [60]) = $9
	*($1 + [72]) = $11
	*($1 + [80]) = *($16 + [48])
	*(($1 + [92])) = *($16 + [60])
	*(($1 + [88])) = *($16 + [56])
	*(($1 + [84])) = *($16 + [52])
	*(($1 + [108])) = *(($16 + [76]))
	*(($1 + [104])) = *($8)
	*(($1 + [100])) = *(($16 + [68]))
	*(($1 + [96])) = *($12)
	*($1 + [112]) = $0
	if ( ($14 == 0) ){ goto $label$6 }
	*($16 + [36]) = $14
	CALL $261($14)
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $273(($16 + [32]))
}

void .FUNC $136 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	$2 = *($1)
	$7 = *(*($0 + [20]))
	$6 = *(*($0 + [16]))
	$5 = *(*($0 + [12]))
	$3 = *(*($0 + [4]))
	$4 = *(*(*($0 + [8]) + [4]) + [8])
	$8 = *($0 + [24])
	$14 = [0]
	*($16 + [32]) = [0]
	*($16 + [36]) = [0]
	*($16 + [40]) = [0]
	$12 = (*($8 + [4]) - *($8))
	$9 = int_32($12 >> [4])
	if ( ($9 == 0) ){ goto $label$4 }
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$1 }
	$14 = CALL $259($12)
	*(($16 + [40])) = ($14 + ($9 << [4]))
	*($16 + [36]) = $14
	*($16 + [32]) = $14
	$9 = *($8)
	$8 = (*(($8 + [4])) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($14, $9, $8)
	$15 = ($14 + $8)
	*($16 + [36]) = $15
	goto $label$2 
	
.LABEL $label$4
	$15 = [0]
	goto $label$2 
	
.LABEL $label$3
	$15 = $14
	
.LABEL $label$2
	$11 = *(*($0 + [36]))
	$10 = *(*($0 + [32]))
	$9 = *(*($0 + [28]))
	$8 = *($0 + [40])
	*(($12 = ($16 + [24]))) = *(($8 + [24]))
	*(($13 = ($16 + [16]))) = *(($8 + [16]))
	*($16 + [8]) = *(($8 + [8]))
	*($16) = *($8)
	$0 = *(*($0 + [44]))
	*(($8 = (($16 + [48]) + [24]))) = *($12)
	*(($12 = (($16 + [48]) + [16]))) = *($13)
	*($16 + [56]) = *($16 + [8])
	*($16 + [48]) = *($16)
	*($1) = $2
	*($1 + [8]) = $3
	*($1 + [16]) = $4
	*($1 + [24]) = $5
	*($1 + [32]) = $6
	*($1 + [40]) = $7
	$13 = ($1 + [48])
	if ( ((int_32)$13 == (int_32)($16 + [32])) ){ goto $label$5 }
	CALL $116($13, $14, $15)
	$14 = *($16 + [32])
	
.LABEL $label$5
	*($1 + [64]) = $10
	*($1 + [60]) = $9
	*($1 + [72]) = $11
	*($1 + [80]) = *($16 + [48])
	*(($1 + [92])) = *($16 + [60])
	*(($1 + [88])) = *($16 + [56])
	*(($1 + [84])) = *($16 + [52])
	*(($1 + [108])) = *(($16 + [76]))
	*(($1 + [104])) = *($8)
	*(($1 + [100])) = *(($16 + [68]))
	*(($1 + [96])) = *($12)
	*($1 + [112]) = $0
	if ( ($14 == 0) ){ goto $label$6 }
	*($16 + [36]) = $14
	CALL $261($14)
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $273(($16 + [32]))
}

int_32 .FUNC $137 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$4 = CALL $259([72])
	$6 = CALL $145($4)
	*($4 + [60]) = $0
	CALL $148(($8 + [32]), $6)
	*($4 + [64]) = $1
	*($8 + [24]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$7 = *($4 + [64])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$6 = *($1)
	if ( ((uint_32)$6 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($6 + [8]) = $5
	*($6 + [16]) = $7
	*($8 + [24]) = [0]
	*($6) = $4
	*($1) = ($6 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $147(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$1 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	$3 = *($1 + [48])
	if ( ($3 == 0) ){ goto $label$10 }
	$0 = ($1 + [52])
	$6 = *($0)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$12 }
	$7 = ([0] - $3)
	$6 = ($6 + [-32])
	
.LOOP $label$13:
	if ( ((*($6) & [1]) == 0) ){ goto $label$14 }
	CALL $261(*(($6 + [8])))
	
.LABEL $label$14
	$6 = ($6 + [-32])
	if ( ((int_32)($6 + $7) != (int_32)[-32]) ){ goto $label$13 }
	$6 = *(($1 + [48]))
	goto $label$11 
	
.LABEL $label$12
	$6 = $3
	
.LABEL $label$11
	*($0) = $3
	CALL $261($6)
	
.LABEL $label$10
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $260 (int_32 $0)
{
	return CALL $259($0)
}

void .FUNC $261 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $213 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)125
	*($0 + [8]) = (int_64)20
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $262 (int_32 $0)
{
	CALL $261($0)
}

void .FUNC __unlockfile (int_32 $0)
{
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC atoi (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	
.LOOP $label$1:
	$3 = *($0)
	$1 = int_32(($3 << [24]) >> [24])
	$2 = ($1 + [-9])
	$4 = ($0 + [1])
	$0 = $4
	if ( ((int_32)$3 == (int_32)[32]) ){ goto $label$1 }
	$0 = $4
	if ( ($2 <= [5]) ){ goto $label$1 }
	if ( ((int_32)$1 == (int_32)[43]) ){ goto $label$5 }
	if ( ((int_32)$1 != (int_32)[45]) ){ goto $label$3 }
	$1 = [1]
	goto $label$4 
	
.LABEL $label$5
	$1 = [0]
	
.LABEL $label$4
	$3 = *($4)
	goto $label$2 
	
.LABEL $label$3
	$4 = ($4 + [-1])
	$1 = [0]
	
.LABEL $label$2
	$2 = [0]
	$3 = (int_32(($3 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$3 > (uint_32)[9]) ){ goto $label$6 }
	$0 = ($4 + [1])
	$2 = [0]
	
.LOOP $label$7:
	$2 = (((int_32)$2 * (int_32)[10]) - $3)
	$3 = *($0)
	$0 = ($0 + [1])
	$3 = ($3 + [-48])
	if ( ($3 <= [10]) ){ goto $label$7 }
	
.LABEL $label$6
	return ( $2 ? ([0] - $2) : $1 )
}

void .FUNC $263 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $304 ()
{
	(unreachable)
}

void .FUNC $265 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $259($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $261($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $208 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $259([32])) + [16]) = [0]
	*($3 + [8 align=4]) = (int_64)0
	*($3 + [20]) = $1
	CALL $211(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [24])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $188(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	if ( ((*($3 + [8]) & [1]) == 0) ){ goto $label$4 }
	CALL $261(*(($3 + [16])))
	
.LABEL $label$4
	CALL $261($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $209 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [32])
	*([0] + [4]) = $8
	$5 = (int_64)0
	$4 = (int_64)59
	$3 = [112]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$6 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$1 = ($1 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $1) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$3 = ($3 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	*($8 + [24]) = (int_64)1397703940
	*($8 + [16]) = $6
	$5 = *($0)
	*($8 + [12]) = ($8 + [16])
	*($8 + [8]) = ($8 + [24])
	$2 = ($0 + [264])
	CALL $210($8, $2, $5, ($8 + [8]))
	$5 = (int_64)0
	$7 = (int_64)59
	$3 = [128]
	$6 = (int_64)0
	
.LOOP $label$7:
	$4 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$8 }
	$1 = *($3)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$10 }
	$1 = ($1 + [165])
	goto $label$9 
	
.LABEL $label$10
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$9
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$8
	$3 = ($3 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$7 }
	*($8 + [24]) = (int_64)1414549508
	*($8 + [16]) = $6
	$5 = *($0)
	*($8 + [12]) = ($8 + [16])
	*($8 + [8]) = ($8 + [24])
	CALL $210($8, $2, $5, ($8 + [8]))
	*([0] + [4]) = ($8 + [32])
}

void .FUNC $202 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $217($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $203 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $216($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $200 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $219($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $201 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $218($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $206 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $213($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $207 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $212($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $204 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $215($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $205 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $214($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC __lockfile (int_32 $0)
{
	int_32 $1
	return $1
}

void .FUNC $181 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [96])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [80]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [32]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	*($5 + [88]) = ($5 + [80])
	*($5 + [84]) = $5
	*($5 + [80]) = $5
	CALL $59(($5 + [80]), $1)
	CALL db_update_i64(*($1 + [84]), $2, $5, [80])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [96])
}

int_32 .FUNC $129 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $259([128])) + [56]) = [0]
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [112]) = [0]
	*($6 + [116]) = $0
	CALL $118(($8 + [32]), $6)
	*($6 + [120]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [120])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $134(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [52])) = $7
	CALL $261($7)
	
.LABEL $label$10
	CALL $261($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $128 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	$2 = *($1)
	$7 = *(*($0 + [20]))
	$6 = *(*($0 + [16]))
	$5 = *(*($0 + [12]))
	$3 = *(*($0 + [4]))
	$4 = *(*(*($0 + [8]) + [4]) + [8])
	$8 = *($0 + [24])
	$14 = [0]
	*($16 + [32]) = [0]
	*($16 + [36]) = [0]
	*($16 + [40]) = [0]
	$12 = (*($8 + [4]) - *($8))
	$9 = int_32($12 >> [4])
	if ( ($9 == 0) ){ goto $label$4 }
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$1 }
	$14 = CALL $259($12)
	*(($16 + [40])) = ($14 + ($9 << [4]))
	*($16 + [36]) = $14
	*($16 + [32]) = $14
	$9 = *($8)
	$8 = (*(($8 + [4])) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($14, $9, $8)
	$15 = ($14 + $8)
	*($16 + [36]) = $15
	goto $label$2 
	
.LABEL $label$4
	$15 = [0]
	goto $label$2 
	
.LABEL $label$3
	$15 = $14
	
.LABEL $label$2
	$11 = *(*($0 + [36]))
	$10 = *(*($0 + [32]))
	$9 = *(*($0 + [28]))
	$8 = *($0 + [40])
	*(($12 = ($16 + [24]))) = *(($8 + [24]))
	*(($13 = ($16 + [16]))) = *(($8 + [16]))
	*($16 + [8]) = *(($8 + [8]))
	*($16) = *($8)
	$0 = *(*($0 + [44]))
	*(($8 = (($16 + [48]) + [24]))) = *($12)
	*(($12 = (($16 + [48]) + [16]))) = *($13)
	*($16 + [56]) = *($16 + [8])
	*($16 + [48]) = *($16)
	*($1) = $2
	*($1 + [8]) = $3
	*($1 + [16]) = $4
	*($1 + [24]) = $5
	*($1 + [32]) = $6
	*($1 + [40]) = $7
	$13 = ($1 + [48])
	if ( ((int_32)$13 == (int_32)($16 + [32])) ){ goto $label$5 }
	CALL $116($13, $14, $15)
	$14 = *($16 + [32])
	
.LABEL $label$5
	*($1 + [64]) = $10
	*($1 + [60]) = $9
	*($1 + [72]) = $11
	*($1 + [80]) = *($16 + [48])
	*(($1 + [92])) = *($16 + [60])
	*(($1 + [88])) = *($16 + [56])
	*(($1 + [84])) = *($16 + [52])
	*(($1 + [108])) = *(($16 + [76]))
	*(($1 + [104])) = *($8)
	*(($1 + [100])) = *(($16 + [68]))
	*(($1 + [96])) = *($12)
	*($1 + [112]) = $0
	if ( ($14 == 0) ){ goto $label$6 }
	*($16 + [36]) = $14
	CALL $261($14)
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $273(($16 + [32]))
}

int_32 .FUNC strerror (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	CALL __lctrans($3, *([0] + [20]))
	$2 = [0]
	
.LOOP $label$5:
	if ( ((int_32)*(($2 + [12368])) == (int_32)$0) ){ goto $label$4 }
	$1 = [87]
	$2 = ($2 + [1])
	if ( ((int_32)$2 != (int_32)[87]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$1 = $2
	if ( ($2 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	$2 = [12464]
	
.LOOP $label$6:
	$0 = *($2)
	$3 = ($2 + [1])
	$2 = $3
	if ( $0 ){ goto $label$6 }
	$2 = $3
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$6 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [12464]
	return .LABEL $label$1
}

int_32 .FUNC strnlen (int_32 $0, int_32 $1)
{
	int_32 $2
	$2 = CALL memchr($0, [0], $1)
	return ( ($2 - $0) ? $1 : $2 )
}

void .FUNC _ZNK6ppgame6random7mixseedER11checksum256S2_S2_ (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($4 + [24])) = *(($1 + [24]))
	*(($4 + [16])) = *(($1 + [16]))
	*($4) = *($1)
	*($4 + [8]) = *(($1 + [8]))
	*(($4 + [56])) = *(($2 + [24]))
	*(($4 + [48])) = *(($2 + [16]))
	*(($4 + [40])) = *(($2 + [8]))
	*($4 + [32]) = *($2)
	CALL sha256($4, [64], $3)
	*([0] + [4]) = ($4 + [64])
}

int_64 .FUNC _ZN6ppgame6random9generatorEy (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	*(($3 + [24])) = *(($0 + [88]))
	*(($3 + [16])) = *(($0 + [80]))
	*($3) = *($0 + [64])
	*($3 + [8]) = *(($0 + [72]))
	*(($3 + [56])) = *(($0 + [120]))
	*(($3 + [48])) = *(($0 + [112]))
	$2 = ($0 + [104])
	*(($3 + [40])) = *($2)
	*($3 + [32]) = *($0 + [96])
	CALL sha256($3, [64], ($0 + [96]))
	if ( (int_64)($1 == 0) ){ goto $label$2 }
	$1 = ((uint_64)*($2) % (uint_64)$1)
	goto $label$1 
	
.LABEL $label$2
	$1 = (int_64)0
	
.LABEL $label$1
	*([0] + [4]) = ($3 + [64])
	return $1
}

void .FUNC $123 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $259([128])) + [56]) = [0]
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [116]) = $1
	CALL $125(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [120])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $126(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [52])) = $1
	CALL $261($1)
	
.LABEL $label$4
	CALL $261($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $122 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	$4 = *($1)
	CALL $128($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [720])
	$5 = *($1 + [48])
	$6 = *(($1 + [52]))
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	$3 = [48]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = ($3 + [53])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($3 + $6)
	CALL $115($9, $1)
	CALL db_update_i64(*(($1 + [120])), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $121 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $259([128])) + [56]) = [0]
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [112]) = [0]
	*($6 + [116]) = $0
	CALL $118(($8 + [32]), $6)
	*($6 + [120]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [120])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $126(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [52])) = $7
	CALL $261($7)
	
.LABEL $label$10
	CALL $261($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $120 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)int_32(($7 - $6) >> [4]) >= (uint_32)$1) ){ goto $label$6 }
	$8 = *($0)
	$2 = int_32(($6 - $8) >> [4])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[268435456]) ){ goto $label$4 }
	$6 = [268435455]
	$7 = ($7 - $8)
	if ( ((uint_32)int_32($7 >> [4]) > (uint_32)[134217726]) ){ goto $label$7 }
	$6 = int_32($7 >> [3])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$5 }
	if ( ((uint_32)$6 >= (uint_32)[268435456]) ){ goto $label$3 }
	
.LABEL $label$7
	$7 = CALL $259(($6 << [4]))
	goto $label$2 
	
.LABEL $label$6
	$8 = ($0 + [4])
	
.LOOP $label$8:
	*($6 + [8]) = (int_64)1398362884
	*($6) = (int_64)0
	CALL eosio_assert([1], [160])
	$5 = (uint_64)*($6 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$7 = [0]
	
.LABEL $label$9
	CALL eosio_assert($7, [224])
	$6 = (*($8) + [16])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	goto $label$1 
	
.LABEL $label$5
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$4
	CALL $273($0)
	
.LABEL $label$3
	CALL abort()
	
.LABEL $label$2
	$3 = ($7 + ($6 << [4]))
	$2 = ($7 + ($2 << [4]))
	$8 = $2
	
.LOOP $label$14:
	*($8 + [8]) = (int_64)1398362884
	*($8) = (int_64)0
	CALL eosio_assert([1], [160])
	$5 = (uint_64)*($8 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$17:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$16 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	
.LOOP $label$19:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$16 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	$7 = [0]
	
.LABEL $label$15
	CALL eosio_assert($7, [224])
	$8 = ($8 + [16])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$14 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 - $7)
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$20 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$20
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $261($6)
	return 
	
.LABEL $label$1
	(unreachable)
	(unreachable)
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

void .FUNC $126 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [48])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [52])) = $6
	CALL $261($6)
	
.LABEL $label$11
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $261($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $125 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	CALL $127(*($0 + [4]), $1)
	$3 = *($1 + [48])
	$4 = *(($1 + [52]))
	$5 = ($4 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	$6 = [48]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$2
	$4 = ($6 + [53])
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $4)
	CALL $115($8, $1)
	$7 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($2 + [8]), (int_64)-3917262948703141888, *(*($0 + [8])), $7, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $124 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	CALL eosio_assert([1], [784])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC _ZNK6ppgame6random8get_seedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [96])
	*(($0 + [24])) = *(($1 + [120]))
	*(($0 + [16])) = *(($1 + [112]))
	*(($0 + [8])) = *(($1 + [104]))
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [992])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [32]
	$7 = (int_64)0
	
.LOOP $label$8:
	if ( ((uint_64)$6 > (uint_64)(int_64)6) ){ goto $label$13 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$13
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$10
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$9
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$8 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$7 }
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [16]
	$7 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$6 > (uint_64)(int_64)4) ){ goto $label$19 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$3 = ($3 + [165])
	goto $label$17 
	
.LABEL $label$19
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$15
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$14 }
	CALL eosio_assert(((int_64)$7 == (int_64)$1), [48])
	
.LABEL $label$7
	*($9 + [248]) = (int_64)3600000000
	*($9 + [240]) = $0
	*($9 + [256]) = (int_64)3600000000
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$20:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$25 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$24 }
	$3 = ($3 + [165])
	goto $label$23 
	
.LABEL $label$25
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$22 }
	goto $label$21 
	
.LABEL $label$24
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$23
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$22
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$21
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$20 }
	*(($9 + [272])) = (int_64)86400000000
	*($9 + [264]) = $7
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$26:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$27 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$29 }
	$3 = ($3 + [165])
	goto $label$28 
	
.LABEL $label$29
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$28
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$27
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$26 }
	*(($9 + [288])) = (int_64)86400000000
	*(($9 + [312])) = $0
	*(($9 + [320])) = (int_64)-1
	$6 = (int_64)0
	*(($9 + [328])) = (int_64)0
	*($9 + [280]) = $7
	*($9 + [304]) = $0
	*(($9 + [336])) = [0]
	*($9 + [344]) = $0
	*(($9 + [352])) = $0
	*(($9 + [360])) = (int_64)-1
	*(($9 + [368])) = [0]
	*(($9 + [372])) = [0]
	*(($9 + [376])) = [0]
	*($9 + [384]) = $0
	*(($9 + [392])) = $0
	*(($9 + [400])) = (int_64)-1
	*(($9 + [408])) = [0]
	*(($9 + [412])) = [0]
	*(($9 + [416])) = [0]
	*($9 + [424]) = $0
	*(($9 + [432])) = $0
	*(($9 + [440])) = (int_64)-1
	*((($9 + [240]) + [208])) = [0]
	*(($9 + [452])) = [0]
	*(($9 + [456])) = [0]
	*($9 + [464]) = $0
	*(($9 + [472])) = $0
	*(($9 + [480])) = (int_64)-1
	*(($9 + [488])) = [0]
	*(($9 + [492])) = [0]
	*(($9 + [496])) = [0]
	*($9 + [504]) = $0
	*(($9 + [512])) = $0
	*(($9 + [520])) = (int_64)-1
	*(($9 + [528])) = [0]
	*(($9 + [532])) = [0]
	*(($9 + [536])) = [0]
	*($9 + [544]) = $0
	*(($9 + [552])) = $0
	*(($9 + [560])) = (int_64)-1
	*(($9 + [568])) = [0]
	*(($9 + [572])) = [0]
	*(($9 + [576])) = [0]
	*($9 + [584]) = $0
	*(($9 + [592])) = $0
	*(($9 + [600])) = (int_64)-1
	*(($9 + [608])) = [0]
	*(($9 + [612])) = [0]
	*(($9 + [616])) = [0]
	$8 = *($9 + [240])
	*($9 + [624]) = $0
	*(($9 + [632])) = $8
	*(($9 + [640])) = (int_64)-1
	*(($9 + [648])) = [0]
	*(($9 + [652])) = [0]
	*(($9 + [656])) = [0]
	*($9 + [664]) = $0
	*(($9 + [672])) = $8
	*(($9 + [680])) = (int_64)-1
	*(($9 + [688])) = [0]
	*(($9 + [692])) = [0]
	*(($9 + [696])) = [0]
	*($9 + [704]) = $0
	*(($9 + [712])) = $8
	*(($9 + [720])) = (int_64)-1
	*(($9 + [728])) = [0]
	*(($9 + [732])) = [0]
	*(($9 + [736])) = [0]
	*($9 + [744]) = $0
	*(($9 + [752])) = $0
	*(($9 + [760])) = (int_64)-1
	*(($9 + [768])) = [0]
	*(($9 + [772])) = [0]
	*(($9 + [776])) = [0]
	*($9 + [784]) = $0
	*(($9 + [792])) = $8
	*(($9 + [800])) = (int_64)-1
	*(($9 + [808])) = [0]
	*(($9 + [812])) = [0]
	*(($9 + [816])) = [0]
	$5 = (int_64)59
	$4 = [112]
	$7 = (int_64)0
	
.LOOP $label$30:
	if ( ((uint_64)$6 > (uint_64)(int_64)10) ){ goto $label$35 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$34 }
	$3 = ($3 + [165])
	goto $label$33 
	
.LABEL $label$35
	$8 = (int_64)0
	if ( ((int_64)$6 == (int_64)11) ){ goto $label$32 }
	goto $label$31 
	
.LABEL $label$34
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$33
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$32
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$31
	$4 = ($4 + [1])
	$5 = ((int_64)$5 + (int_64)-5)
	$7 = ((int_64)$8 | (int_64)$7)
	$6 = ((int_64)$6 + (int_64)1)
	if ( ((int_64)$6 != (int_64)13) ){ goto $label$30 }
	if ( ((int_64)$7 == (int_64)$1) ){ goto $label$39 }
	$6 = (int_64)0
	$8 = (int_64)59
	$4 = [128]
	$7 = (int_64)0
	
.LOOP $label$40:
	$5 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$41 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$43 }
	$3 = ($3 + [165])
	goto $label$42 
	
.LABEL $label$43
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$42
	$5 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$41
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$5 | (int_64)$7)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$40 }
	if ( ((int_64)$7 != (int_64)$1) ){ goto $label$38 }
	
.LABEL $label$39
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [144]
	$7 = (int_64)0
	
.LOOP $label$44:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$49 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$48 }
	$3 = ($3 + [165])
	goto $label$47 
	
.LABEL $label$49
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$46 }
	goto $label$45 
	
.LABEL $label$48
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$47
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$46
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$45
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$44 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$38 }
	*($9 + [236]) = [0]
	*($9 + [232]) = [1]
	*($9 + [296]) = $1
	*($9) = *($9 + [232])
	CALL $17(($9 + [240]), $9)
	goto $label$37 
	
.LABEL $label$38
	if ( ((int_64)$1 == (int_64)$0) ){ goto $label$36 }
	
.LABEL $label$37
	CALL $44(($9 + [240]))
	*([0] + [4]) = ($9 + [992])
	return (unreachable)
	
.LABEL $label$36
	if ( ((int_64)$2 > (int_64)-4417018962198396929) ){ goto $label$63 }
	if ( ((int_64)$2 <= (int_64)-4417281810148360193) ){ goto $label$62 }
	if ( ((int_64)$2 > (int_64)-4417145702281216001) ){ goto $label$60 }
	if ( ((int_64)$2 == (int_64)-4417281810148360192) ){ goto $label$58 }
	if ( ((int_64)$2 != (int_64)-4417263366442799104) ){ goto $label$50 }
	*($9 + [196]) = [0]
	*($9 + [192]) = [2]
	*($9 + [40 align=4]) = *($9 + [192])
	CALL $27(($9 + [240]), ($9 + [40]))
	goto $label$50 
	
.LABEL $label$63
	if ( ((int_64)$2 <= (int_64)3812100602868006911) ){ goto $label$61 }
	if ( ((int_64)$2 > (int_64)5377993503836713359) ){ goto $label$59 }
	if ( ((int_64)$2 == (int_64)3812100602868006912) ){ goto $label$57 }
	if ( ((int_64)$2 != (int_64)4851652232166244352) ){ goto $label$50 }
	*($9 + [164]) = [0]
	*($9 + [160]) = [3]
	*($9 + [72 align=4]) = *($9 + [160])
	CALL $34(($9 + [240]), ($9 + [72]))
	goto $label$50 
	
.LABEL $label$62
	if ( ((int_64)$2 == (int_64)-7119375207604682752) ){ goto $label$56 }
	if ( ((int_64)$2 == (int_64)-4817989584170254336) ){ goto $label$55 }
	if ( ((int_64)$2 != (int_64)-4417306323247955968) ){ goto $label$50 }
	*($9 + [188]) = [0]
	*($9 + [184]) = [4]
	*($9 + [48 align=4]) = *($9 + [184])
	CALL $29(($9 + [240]), ($9 + [48]))
	goto $label$50 
	
.LABEL $label$61
	if ( ((int_64)$2 == (int_64)-4417018962198396928) ){ goto $label$54 }
	if ( ((int_64)$2 == (int_64)-4416989601801961472) ){ goto $label$53 }
	if ( ((int_64)$2 != (int_64)3626093248789590416) ){ goto $label$50 }
	*($9 + [140]) = [0]
	*($9 + [136]) = [5]
	*($9 + [96 align=4]) = *($9 + [136])
	CALL $40(($9 + [240]), ($9 + [96]))
	goto $label$50 
	
.LABEL $label$60
	if ( ((int_64)$2 == (int_64)-4417145702281216000) ){ goto $label$52 }
	if ( ((int_64)$2 != (int_64)-4417143597628571648) ){ goto $label$50 }
	*($9 + [180]) = [0]
	*($9 + [176]) = [6]
	*($9 + [56 align=4]) = *($9 + [176])
	CALL $29(($9 + [240]), ($9 + [56]))
	goto $label$50 
	
.LABEL $label$59
	if ( ((int_64)$2 == (int_64)5377993503836713360) ){ goto $label$51 }
	if ( ((int_64)$2 != (int_64)8421045207927095296) ){ goto $label$50 }
	*($9 + [228]) = [0]
	*($9 + [224]) = [7]
	*($9 + [8 align=4]) = *($9 + [224])
	CALL $19(($9 + [240]), ($9 + [8]))
	goto $label$50 
	
.LABEL $label$58
	*($9 + [220]) = [0]
	*($9 + [216]) = [8]
	*($9 + [16 align=4]) = *($9 + [216])
	CALL $21(($9 + [240]), ($9 + [16]))
	goto $label$50 
	
.LABEL $label$57
	*($9 + [148]) = [0]
	*($9 + [144]) = [9]
	*($9 + [88 align=4]) = *($9 + [144])
	CALL $38(($9 + [240]), ($9 + [88]))
	goto $label$50 
	
.LABEL $label$56
	*($9 + [172]) = [0]
	*($9 + [168]) = [10]
	*($9 + [64 align=4]) = *($9 + [168])
	CALL $32(($9 + [240]), ($9 + [64]))
	goto $label$50 
	
.LABEL $label$55
	*($9 + [156]) = [0]
	*($9 + [152]) = [11]
	*($9 + [80 align=4]) = *($9 + [152])
	CALL $36(($9 + [240]), ($9 + [80]))
	goto $label$50 
	
.LABEL $label$54
	*($9 + [124]) = [0]
	*($9 + [120]) = [12]
	*($9 + [112 align=4]) = *($9 + [120])
	CALL $43(($9 + [240]), ($9 + [112]))
	goto $label$50 
	
.LABEL $label$53
	*($9 + [212]) = [0]
	*($9 + [208]) = [13]
	*($9 + [24 align=4]) = *($9 + [208])
	CALL $23(($9 + [240]), ($9 + [24]))
	goto $label$50 
	
.LABEL $label$52
	*($9 + [204]) = [0]
	*($9 + [200]) = [14]
	*($9 + [32 align=4]) = *($9 + [200])
	CALL $25(($9 + [240]), ($9 + [32]))
	goto $label$50 
	
.LABEL $label$51
	*($9 + [132]) = [0]
	*($9 + [128]) = [15]
	*($9 + [104 align=4]) = *($9 + [128])
	CALL $40(($9 + [240]), ($9 + [104]))
	
.LABEL $label$50
	CALL eosio_exit([0])
}

void .FUNC $16 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_64 $14
	int_32 $15
	float_32 $16
	int_64 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_32 $23
	$18 = (*([0] + [4]) - [544])
	*([0] + [4]) = $18
	*((($23 = $18) + [428])) = *(($3 + [12]))
	*(($23 + [424])) = *(($3 + [8]))
	*(($23 + [420])) = *(($3 + [4]))
	*($23 + [408]) = $2
	*($23 + [400]) = $1
	*($23 + [416]) = *($3)
	$6 = ($23 + [432])
	CALL $274($6, $4)
	$2 = *($0)
	$22 = *($23 + [400])
	if ( ((int_64)$22 == (int_64)$2) ){ goto $label$2 }
	if ( ((int_64)*($23 + [408]) != (int_64)$2) ){ goto $label$2 }
	$5 = ($23 + [416])
	$2 = (int_64)0
	$19 = (int_64)59
	$3 = [2224]
	$20 = (int_64)0
	
.LOOP $label$3:
	if ( ((uint_64)$2 > (uint_64)(int_64)10) ){ goto $label$8 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$4 = ($4 + [165])
	goto $label$6 
	
.LABEL $label$8
	$21 = (int_64)0
	if ( ((int_64)$2 == (int_64)11) ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$7
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$4
	$3 = ($3 + [1])
	$19 = ((int_64)$19 + (int_64)-5)
	$20 = ((int_64)$21 | (int_64)$20)
	$2 = ((int_64)$2 + (int_64)1)
	if ( ((int_64)$2 != (int_64)13) ){ goto $label$3 }
	if ( ((int_64)$22 == (int_64)$20) ){ goto $label$2 }
	$2 = (int_64)0
	$21 = (int_64)59
	$3 = [2240]
	$20 = (int_64)0
	
.LOOP $label$9:
	$19 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$10 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$4 = ($4 + [165])
	goto $label$11 
	
.LABEL $label$12
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$10
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$9 }
	if ( ((int_64)$22 == (int_64)$20) ){ goto $label$2 }
	$11 = *(($0 + [368]))
	$15 = *(($0 + [372]))
	if ( ((int_32)$15 == (int_32)$11) ){ goto $label$13 }
	$3 = ($15 + [-24])
	$7 = ([0] - $11)
	
.LOOP $label$14:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$13 }
	$15 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $7) != (int_32)[-24]) ){ goto $label$14 }
	
.LABEL $label$13
	$4 = ($0 + [344])
	if ( ((int_32)$15 == (int_32)$11) ){ goto $label$17 }
	$3 = *(($15 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$4), [304])
	if ( $3 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$17
	$3 = CALL db_find_i64(*(($0 + [344])), *(($0 + [352])), (int_64)4344997574076792832, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$15 }
	$3 = CALL $73($4, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$4), [304])
	
.LABEL $label$16
	if ( ((int_64)*($3 + [8]) != (int_64)1) ){ goto $label$2 }
	
.LABEL $label$15
	$8 = $18
	$4 = CALL transaction_size()
	$3 = ($18 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $3
	$18 = CALL read_transaction($3, $4)
	CALL eosio_assert(((int_32)$4 == (int_32)$18), [2256])
	$2 = CALL current_time()
	*(($23 + [364])) = [0]
	*(($23 + [368])) = [0]
	*($23 + [348]) = [0]
	*($23 + [352]) = [0]
	*($23 + [356]) = [0]
	*($23 + [360]) = [0]
	*($23 + [336]) = ((CASTING uint_32)(uint_64 ((uint_64)$2 / (uint_64)(int_64)1000000)) + [60])
	*($23 + [372]) = [0]
	*(($23 + [376])) = [0]
	*(($23 + [380])) = [0]
	*($23 + [384]) = [0]
	*(($23 + [388])) = [0]
	*(($23 + [392])) = [0]
	*($23 + [132]) = $3
	*($23 + [128]) = $3
	*($23 + [136]) = ($3 + $18)
	CALL $227(($23 + [128]), ($23 + [336]))
	CALL $229(CALL $228(CALL $228(($23 + [128]), ($23 + [360])), ($23 + [372])), ($23 + [384]))
	$9 = CALL $230(($23 + [296]), *($23 + [372]))
	$1 = *($9 + [8])
	$2 = (int_64)0
	$19 = (int_64)59
	$3 = [144]
	$20 = (int_64)0
	
.LOOP $label$18:
	if ( ((uint_64)$2 > (uint_64)(int_64)7) ){ goto $label$23 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$22 }
	$4 = ($4 + [165])
	goto $label$21 
	
.LABEL $label$23
	$21 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$20 }
	goto $label$19 
	
.LABEL $label$22
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$21
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$20
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$19
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$20 = ((int_64)$21 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$18 }
	$4 = [0]
	$3 = [0]
	if ( ((int_64)$1 != (int_64)$20) ){ goto $label$24 }
	$3 = ((int_64)*($9) == (int_64)*($0 + [56]))
	
.LABEL $label$24
	CALL eosio_assert($3, [2288])
	CALL $231($0, $5)
	$18 = ($23 + [416])
	if ( ((uint_64)((int_64)*($18) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$25 }
	$2 = (uint_64)*((($23 + [400]) + [24])) >> (uint_64)(int_64)8)
	$3 = [0]
	
.LOOP $label$27:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $2) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$28 }
	
.LOOP $label$29:
	$2 = (uint_64)$2 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$2) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$29 }
	
.LABEL $label$28
	$4 = [1]
	$3 = ($3 + [1])
	if ( ((int_32)$3 < (int_32)[7]) ){ goto $label$27 }
	goto $label$25 
	
.LABEL $label$26
	$4 = [0]
	
.LABEL $label$25
	CALL eosio_assert($4, [2320])
	$22 = *($18)
	CALL eosio_assert(((int_64)$22 > (int_64)0), [2352])
	$1 = (uint_64)*(($23 + [424])) >> (uint_64)(int_64)8)
	$7 = *(($0 + [288]))
	$18 = *(($0 + [292]))
	if ( ((int_32)$18 == (int_32)$7) ){ goto $label$30 }
	$3 = ($18 + [-24])
	$15 = ([0] - $7)
	
.LOOP $label$31:
	if ( ((int_64)*(*($3)) == (int_64)$1) ){ goto $label$30 }
	$18 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $15) != (int_32)[-24]) ){ goto $label$31 }
	
.LABEL $label$30
	$3 = ($0 + [264])
	if ( ((int_32)$18 == (int_32)$7) ){ goto $label$33 }
	$7 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$3), [304])
	goto $label$32 
	
.LABEL $label$33
	$7 = [0]
	$4 = CALL db_find_i64(*(($0 + [264])), *(($0 + [272])), (int_64)7035938535980793856, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$32 }
	$7 = CALL $57($3, $4)
	CALL eosio_assert(((int_32)*($7 + [80]) == (int_32)$3), [304])
	
.LABEL $label$32
	$10 = *($7 + [8])
	$2 = (int_64)0
	$21 = (int_64)59
	$3 = [464]
	$20 = (int_64)0
	
.LOOP $label$34:
	$19 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$35 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$37 }
	$4 = ($4 + [165])
	goto $label$36 
	
.LABEL $label$37
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$36
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$35
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$34 }
	*(($23 + [160])) = [0]
	*($23 + [136]) = $20
	*($23 + [128]) = $10
	*($23 + [144]) = (int_64)-1
	*($23 + [152]) = (int_64)0
	$10 = *(CALL $62(($23 + [128]), $1, [1536]))
	$18 = *($23 + [152])
	if ( ($18 == 0) ){ goto $label$38 }
	$15 = ($23 + [156])
	$3 = *($15)
	if ( ((int_32)$3 == (int_32)$18) ){ goto $label$40 }
	
.LOOP $label$41:
	$3 = ($3 + [-24])
	$4 = *($3)
	*($3) = [0]
	if ( ($4 == 0) ){ goto $label$42 }
	CALL $261($4)
	
.LABEL $label$42
	if ( ((int_32)$18 != (int_32)$3) ){ goto $label$41 }
	$3 = *(($23 + [152]))
	goto $label$39 
	
.LABEL $label$40
	$3 = $18
	
.LABEL $label$39
	*($15) = $18
	CALL $261($3)
	
.LABEL $label$38
	$12 = *(($0 + [248]))
	$18 = *(($0 + [252]))
	if ( ((int_32)$18 == (int_32)$12) ){ goto $label$43 }
	$3 = ($18 + [-24])
	$15 = ([0] - $12)
	
.LOOP $label$44:
	if ( ((int_64)*(*($3)) == (int_64)109) ){ goto $label$43 }
	$18 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $15) != (int_32)[-24]) ){ goto $label$44 }
	
.LABEL $label$43
	$11 = ($0 + [224])
	if ( ((int_32)$18 == (int_32)$12) ){ goto $label$47 }
	$3 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$11), [304])
	if ( $3 ){ goto $label$46 }
	$3 = [0]
	goto $label$45 
	
.LABEL $label$47
	$3 = [0]
	$4 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)109)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$45 }
	$3 = CALL $51($11, $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$11), [304])
	
.LABEL $label$46
	$3 = ((int_64)*($3 + [8]) != (int_64)0)
	
.LABEL $label$45
	CALL eosio_assert($3, [2384])
	$12 = *(($0 + [248]))
	$18 = *(($0 + [252]))
	if ( ((int_32)$18 == (int_32)$12) ){ goto $label$48 }
	$3 = ($18 + [-24])
	$15 = ([0] - $12)
	
.LOOP $label$49:
	if ( ((int_64)*(*($3)) == (int_64)123) ){ goto $label$48 }
	$18 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $15) != (int_32)[-24]) ){ goto $label$49 }
	
.LABEL $label$48
	if ( ((int_32)$18 == (int_32)$12) ){ goto $label$51 }
	$3 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$11), [304])
	goto $label$50 
	
.LABEL $label$51
	$3 = [0]
	$4 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)123)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$50 }
	$3 = CALL $51($11, $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$11), [304])
	
.LABEL $label$50
	$18 = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [2400])
	CALL eosio_assert(((int_64)$22 <= (int_64)(Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 $10) * (float_64)(CASTING float_64)(uint_64 *($3 + [8]))) / (float_64)(float_64)1e3))), [2432])
	CALL eosio_assert(((uint_64)$10 >= (uint_64)*($7 + [32])), [2464])
	$3 = *(($23 + [432]))
	CALL eosio_assert(((int_32)( *(($23 + [436])) ? uint_32($3 >> [1]) : ($3 & [1]) ) != (int_32)[0]), [2512])
	*($23 + [288]) = [0]
	*($23 + [280]) = (int_64)0
	$3 = CALL strlen([2560])
	*($23 + [272]) = $3
	*($23 + [264]) = [0]
	if ( ((uint_32)$3 >= (uint_32)[9]) ){ goto $label$54 }
	$4 = ($23 + [264])
	if ( $3 ){ goto $label$53 }
	goto $label$52 
	
.LABEL $label$54
	$4 = CALL $260($3)
	*($23 + [264]) = $4
	
.LABEL $label$53
	CALL memmove($4, [2560], $3)
	$18 = *(($23 + [272]))
	
.LABEL $label$52
	CALL $256($4, ($4 + $18), ($23 + [128]))
	CALL $232(($23 + [280]), $6, ($23 + [264]), [1])
	if ( (*(($23 + [272])) <= [9]) ){ goto $label$55 }
	$3 = *($23 + [264])
	if ( ($3 == 0) ){ goto $label$55 }
	CALL $262($3)
	
.LABEL $label$55
	$3 = *($23 + [280])
	$4 = *($3)
	if ( ($4 & [1]) ){ goto $label$57 }
	$3 = uint_32($4 >> [1])
	goto $label$56 
	
.LABEL $label$57
	$3 = *($3 + [4])
	
.LABEL $label$56
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [2576])
	$3 = *($23 + [280])
	$4 = *($3 + [12])
	if ( ($4 & [1]) ){ goto $label$59 }
	$3 = uint_32($4 >> [1])
	goto $label$58 
	
.LABEL $label$59
	$3 = *(($3 + [16]))
	
.LABEL $label$58
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [2608])
	$3 = *($23 + [280])
	if ( (*($3) & [1]) ){ goto $label$61 }
	$3 = ($3 + [1])
	goto $label$60 
	
.LABEL $label$61
	$3 = *($3 + [8])
	
.LABEL $label$60
	$12 = CALL atoi($3)
	$3 = *($23 + [280])
	if ( (*($3 + [12]) & [1]) ){ goto $label$63 }
	$3 = (($3 + [12]) + [1])
	goto $label$62 
	
.LABEL $label$63
	$3 = *(($3 + [20]))
	
.LABEL $label$62
	$13 = CALL atoi($3)
	$3 = *($23 + [280])
	$18 = *($3 + [24])
	$4 = ($18 & [1])
	if ( $4 ){ goto $label$68 }
	if ( uint_32($18 >> [1]) ){ goto $label$67 }
	goto $label$66 
	
.LABEL $label$68
	if ( (*(($3 + [28])) == 0) ){ goto $label$66 }
	
.LABEL $label$67
	if ( $4 ){ goto $label$65 }
	$3 = (($3 + [24]) + [1])
	goto $label$64 
	
.LABEL $label$66
	$3 = [288]
	goto $label$64 
	
.LABEL $label$65
	$3 = *(($3 + [32]))
	
.LABEL $label$64
	$14 = (CASTING int_64)(int_32 $13)
	$4 = [-1]
	
.LOOP $label$69:
	$18 = ($3 + $4)
	$15 = ($4 + [1])
	$4 = $15
	if ( *(($18 + [1])) ){ goto $label$69 }
	$1 = (CASTING uint_64)(uint_32 $15)
	$2 = (int_64)0
	$21 = (int_64)59
	$20 = (int_64)0
	
.LOOP $label$70:
	$19 = (int_64)0
	if ( ((uint_64)$2 >= (uint_64)$1) ){ goto $label$71 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$73 }
	$4 = ($4 + [165])
	goto $label$72 
	
.LABEL $label$73
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$72
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$71
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$75 }
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$21 & (int_64)4294967295))
	goto $label$74 
	
.LABEL $label$75
	$19 = ((int_64)$19 & (int_64)15)
	
.LABEL $label$74
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$20 = ((int_64)$19 | (int_64)$20)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$70 }
	CALL eosio_assert(((int_64)*($23 + [400]) != (int_64)$20), [2656])
	$4 = ($12 & [255])
	if ( ((int_32)$4 == (int_32)[2]) ){ goto $label$77 }
	$3 = [0]
	if ( ((int_32)$4 != (int_32)[1]) ){ goto $label$76 }
	$3 = $13
	goto $label$76 
	
.LABEL $label$77
	$3 = ([99] - $13)
	
.LABEL $label$76
	$21 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 $22) * (float_64)(float_64)98.5) / (float_64)(CASTING float_64)(int_32 ($3 & [255]))))
	$13 = *(($0 + [248]))
	$18 = *(($0 + [252]))
	if ( ((int_32)$18 == (int_32)$13) ){ goto $label$78 }
	$3 = ($18 + [-24])
	$15 = ([0] - $13)
	
.LOOP $label$79:
	if ( ((int_64)*(*($3)) == (int_64)122) ){ goto $label$78 }
	$18 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $15) != (int_32)[-24]) ){ goto $label$79 }
	
.LABEL $label$78
	if ( ((int_32)$18 == (int_32)$13) ){ goto $label$81 }
	$3 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$11), [304])
	goto $label$80 
	
.LABEL $label$81
	$3 = [0]
	$4 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)122)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$80 }
	$3 = CALL $51($11, $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$11), [304])
	
.LABEL $label$80
	$4 = [0]
	CALL eosio_assert(((int_32)$3 != (int_32)[0]), [2688])
	CALL eosio_assert((uint_64)(*($3 + [8]) <= (int_64)20), [2720])
	$2 = *($3 + [8])
	*($23 + [64]) = (PROMOTE float_64)(float_32 (DEMOTE float_32)(float_64 ((float_64)(CASTING float_64)(uint_64 *($7 + [64])) / (float_64)(float_64)1e4)))
	$16 = (CASTING float_32)(int_64 $10)
	*($23 + [72]) = (PROMOTE float_64)(float_32 ((float_32)((float_32)((float_32)$16 * (float_32)(CASTING float_32)(uint_64 $2)) / (float_32)(float_32)1e3) / (float_32)(float_32)1e4))
	CALL sprintf(($23 + [128]), [2752], ($23 + [64]))
	if ( (uint_64)($22 <= *($7 + [64])) ){ goto $label$82 }
	$4 = ((float_32)(CASTING float_32)(int_64 $21) <= (float_32)((float_32)$16 * (float_32)(CASTING float_32)(uint_64 *(($3 + [8])))))
	
.LABEL $label$82
	CALL eosio_assert($4, ($23 + [128]))
	CALL eosio_assert((uint_64)(((int_64)$14 + (int_64)-2) <= (int_64)96), [2832])
	$13 = *(($0 + [248]))
	$18 = *(($0 + [252]))
	if ( ((int_32)$18 == (int_32)$13) ){ goto $label$83 }
	$3 = ($18 + [-24])
	$15 = ([0] - $13)
	
.LOOP $label$84:
	if ( ((int_64)*(*($3)) == (int_64)101) ){ goto $label$83 }
	$18 = $3
	$4 = ($3 + [-24])
	$3 = $4
	if ( ((int_32)($4 + $15) != (int_32)[-24]) ){ goto $label$84 }
	
.LABEL $label$83
	if ( ((int_32)$18 == (int_32)$13) ){ goto $label$86 }
	$3 = *(($18 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$11), [304])
	goto $label$85 
	
.LABEL $label$86
	$3 = [0]
	$4 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)101)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$85 }
	$3 = CALL $51($11, $4)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$11), [304])
	
.LABEL $label$85
	$4 = ((int_32)$3 != (int_32)[0])
	CALL eosio_assert($4, [2864])
	*($23 + [120]) = ((int_64)*($3 + [8]) + (int_64)1)
	*($23 + [472]) = ($23 + [120])
	CALL eosio_assert($4, [560])
	$2 = (int_64)0
	CALL $233($11, $3, (int_64)0, ($23 + [472]))
	CALL eosio_assert(((int_32)$7 != (int_32)[0]), [2896])
	$10 = *(($7 + [8]))
	$17 = *($0)
	$19 = (int_64)59
	$3 = [480]
	$1 = (int_64)0
	
.LOOP $label$87:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$92 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$4 = ($4 + [165])
	goto $label$90 
	
.LABEL $label$92
	$21 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$91
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$89
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$88
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$21 | (int_64)$1)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$87 }
	$2 = (int_64)0
	$21 = (int_64)59
	$3 = [464]
	$22 = (int_64)0
	
.LOOP $label$93:
	$19 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$94 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$96 }
	$4 = ($4 + [165])
	goto $label$95 
	
.LABEL $label$96
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$95
	$19 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$21 & (int_64)4294967295))
	
.LABEL $label$94
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$22 = ((int_64)$19 | (int_64)$22)
	$21 = ((int_64)$21 + (int_64)-5)
	if ( ((int_64)$21 != (int_64)-6) ){ goto $label$93 }
	*(($23 + [536])) = [0]
	*($23 + [528]) = (int_64)0
	$3 = CALL strlen([2208])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$99 }
	*($23 + [528]) = ($3 << [1])
	$4 = (($23 + [528]) | [1])
	if ( $3 ){ goto $label$98 }
	goto $label$97 
	
.LABEL $label$99
	$18 = (($3 + [16]) & [-16])
	$4 = CALL $259($18)
	*($23 + [528]) = ($18 | [1])
	*($23 + [536]) = $4
	*($23 + [532]) = $3
	
.LABEL $label$98
	CALL memcpy($4, [2208], $3)
	
.LABEL $label$97
	*(($4 + $3)) = [0]
	*((($23 + [104]) + [12])) = *(($5 + [12]))
	*(($4 = (($23 + [104]) + [8]))) = *(($5 + [8]))
	*($23 + [108]) = *(($5 + [4]))
	*($23 + [104]) = *($5)
	$2 = *($0)
	$18 = *($23 + [536])
	$15 = *($23 + [532])
	$7 = *($23 + [528])
	*($23 + [528]) = [0]
	*($23 + [532]) = [0]
	*($23 + [536]) = [0]
	*(($3 = CALL $259([16]))) = $17
	*($3 + [8]) = $1
	$11 = ($3 + [16])
	*($23 + [464]) = $11
	*($23 + [456]) = $3
	*($23 + [480]) = $22
	*($23 + [472]) = $2
	*($23 + [460]) = $11
	*(($23 + [496])) = *($4)
	*($23 + [488]) = *($23 + [104])
	*($23 + [504]) = $7
	*(($23 + [508])) = $15
	*(($3 = ($23 + [512]))) = $18
	CALL $53($10, (int_64)-3617168760277827584, ($23 + [456]), ($23 + [472]))
	if ( ((*($23 + [504]) & [1]) == 0) ){ goto $label$100 }
	CALL $261(*($3))
	
.LABEL $label$100
	$3 = *($23 + [456])
	if ( ($3 == 0) ){ goto $label$101 }
	*($23 + [460]) = $3
	CALL $261($3)
	
.LABEL $label$101
	if ( ((*($23 + [528]) & [1]) == 0) ){ goto $label$102 }
	CALL $261(*(($23 + [536])))
	
.LABEL $label$102
	$22 = *($0)
	$2 = (int_64)0
	$19 = (int_64)59
	$3 = [480]
	$1 = (int_64)0
	
.LOOP $label$103:
	if ( ((uint_64)$2 > (uint_64)(int_64)5) ){ goto $label$108 }
	$4 = *($3)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$107 }
	$4 = ($4 + [165])
	goto $label$106 
	
.LABEL $label$108
	$21 = (int_64)0
	if ( ((uint_64)$2 <= (uint_64)(int_64)11) ){ goto $label$105 }
	goto $label$104 
	
.LABEL $label$107
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$106
	$21 = (int_64)((int_64)(CASTING uint_64)(uint_32 $4) << (int_64)56) >> (int_64)56)
	
.LABEL $label$105
	$21 = ((int_64)((int_64)$21 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$104
	$3 = ($3 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$1 = ((int_64)$21 | (int_64)$1)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$103 }
	*(($3 = (($23 + [88]) + [8]))) = *(($5 + [8]))
	$2 = *($23 + [400])
	*($23 + [88]) = *($5)
	$21 = *($23 + [120])
	*(($4 = (($23 + [456]) + [8]))) = *($3)
	*($23 + [456]) = *($23 + [88])
	*(($18 = (($23 + [448]) + [6]))) = *((($23 + [81]) + [6]))
	*(($0 = (($23 + [448]) + [4]))) = *((($23 + [81]) + [4]))
	*($23 + [448]) = *($23 + [81 align=1])
	*(($3 = CALL $259([16]))) = $22
	*($3 + [8]) = $1
	*(($23 + [492])) = *((($23 + [456]) + [12]))
	*((($23 + [472]) + [12])) = *($23 + [460])
	$15 = ($3 + [16])
	*($23 + [536]) = $15
	*((($23 + [472]) + [16])) = *($4)
	*($23 + [528]) = $3
	*($23 + [472]) = $2
	*($23 + [532]) = $15
	*($23 + [480]) = *($23 + [456])
	*($23 + [496]) = $12
	*(($23 + [503])) = *($18)
	*(($23 + [501])) = *($0)
	*($23 + [497 align=1]) = *($23 + [448])
	*($23 + [504]) = $14
	*($23 + [512]) = $20
	*($23 + [520]) = $21
	CALL memcpy(($23 + [8]), ($23 + [472]), [56])
	CALL $234($22, (int_64)-4817989584170254336, ($23 + [528]), ($23 + [8]))
	$3 = *($23 + [528])
	if ( ($3 == 0) ){ goto $label$109 }
	*($23 + [532]) = $3
	CALL $261($3)
	
.LABEL $label$109
	$18 = *($23 + [280])
	if ( ($18 == 0) ){ goto $label$110 }
	$3 = *($23 + [284])
	if ( ((int_32)$3 == (int_32)$18) ){ goto $label$112 }
	$4 = ([0] - $18)
	$3 = ($3 + [-12])
	
.LOOP $label$113:
	if ( ((*($3) & [1]) == 0) ){ goto $label$114 }
	CALL $261(*(($3 + [8])))
	
.LABEL $label$114
	$3 = ($3 + [-12])
	if ( ((int_32)($3 + $4) != (int_32)[-12]) ){ goto $label$113 }
	$3 = *($23 + [280])
	goto $label$111 
	
.LABEL $label$112
	$3 = $18
	
.LABEL $label$111
	*($23 + [284]) = $18
	CALL $261($3)
	
.LABEL $label$110
	$3 = *($9 + [28])
	if ( ($3 == 0) ){ goto $label$115 }
	*(($9 + [32])) = $3
	CALL $261($3)
	
.LABEL $label$115
	$3 = *($9 + [16])
	if ( ($3 == 0) ){ goto $label$116 }
	*(($9 + [20])) = $3
	CALL $261($3)
	
.LABEL $label$116
	CALL $100(($23 + [336]))
	$8
	
.LABEL $label$2
	if ( ((*($6) & [1]) == 0) ){ goto $label$117 }
	CALL $261(*(($23 + [440])))
	
.LABEL $label$117
	*([0] + [4]) = ($23 + [544])
	return (unreachable)
	
.LABEL $label$1
	CALL $263(($23 + [528]))
}

int_32 .FUNC $17 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [96])
	*([0] + [4]) = $4
	*(($5 = $4) + [60]) = $0
	*($5 + [48]) = *($1)
	*($5 + [52]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [224])
	*(($5 + [40])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [68]) = $0
	*($5 + [64]) = $0
	*($5 + [72]) = ($0 + $2)
	*($5 + [80]) = ($5 + [64])
	*($5 + [88]) = $5
	CALL $225(($5 + [88]), ($5 + [80]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [68]) = ($5 + [48])
	*($5 + [64]) = ($5 + [60])
	CALL $226(($5 + [64]), $5)
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$10 }
	CALL $261(*(($5 + [40])))
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [96])
	return [1]
}

int_64 .FUNC _ZNK6ppgame6random3genER11checksum256y (int_32 $0, int_32 $1, int_64 $2)
{
	if ( (int_64)($2 == 0) ){ goto $label$1 }
	return ((uint_64)*($1 + [8]) % (uint_64)$2)
	
.LABEL $label$1
	return (int_64)0
}

void .FUNC _ZNK6ppgame6random12get_sys_seedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1)
	*(($0 + [24])) = *(($1 + [24]))
	*(($0 + [16])) = *(($1 + [16]))
	*(($0 + [8])) = *(($1 + [8]))
}

void .FUNC _ZNK6ppgame6random13get_user_seedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [32])
	*(($0 + [24])) = *(($1 + [56]))
	*(($0 + [16])) = *(($1 + [48]))
	*(($0 + [8])) = *(($1 + [40]))
}

void .FUNC _ZNK6ppgame6random9get_mixedEv (int_32 $0, int_32 $1)
{
	*($0) = *($1 + [64])
	*(($0 + [24])) = *(($1 + [88]))
	*(($0 + [16])) = *(($1 + [80]))
	*(($0 + [8])) = *(($1 + [72]))
}

void .FUNC $185 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = *($0 + [4])
	*($1) = *(*($4))
	*($1 + [8]) = *(*($4 + [4]))
	$2 = *($0)
	$4 = *($4 + [8])
	*($1 + [16]) = *($4)
	*(($5 = ($1 + [24]))) = *(($4 + [8]))
	CALL eosio_assert([1], [784])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($6 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($6 + [24]), $5, [8])
	$3 = *($1)
	*($1 + [36]) = CALL db_store_i64(*($2 + [8]), (int_64)6714758524877189120, *(*($0 + [8])), $3, $6, [32])
	if ( (uint_64)($3 <= *($2 + [16])) ){ goto $label$1 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC $281 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_32 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_64 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_32 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_32 $36
	int_32 $37
	int_32 $38
	int_32 $39
	$39 = (*([0] + [4]) - [8128])
	*([0] + [4]) = $39
	$12 = (($39 + [692]) + [11])
	$11 = (($39 + [704]) | [8])
	$10 = (($39 + [704]) | [9])
	$9 = ($39 + [7664])
	$8 = ([-2] - ($39 + [704]))
	$7 = (($39 + [692]) + [12])
	$6 = (($39 + [352]) + [54])
	$5 = (($39 + [352]) + [55])
	$30 = [0]
	$38 = [0]
	$32 = [0]
	
.LOOP $label$17:
	$38 = ($30 + $38)
	$37 = $1
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$16 }
	$1 = $37
	$30 = ($30 & [255])
	if ( ($30 == 0) ){ goto $label$20 }
	
.LOOP $label$21:
	if ( ((int_32)$30 == (int_32)[37]) ){ goto $label$19 }
	$1 = ($1 + [1])
	$30 = (*($1) & [255])
	if ( $30 ){ goto $label$21 }
	
.LABEL $label$20
	$30 = $1
	goto $label$18 
	
.LABEL $label$19
	$30 = $1
	
.LOOP $label$22:
	if ( ((int_32)*(($1 + [1])) != (int_32)[37]) ){ goto $label$18 }
	$30 = ($30 + [1])
	$1 = ($1 + [2])
	if ( ((int_32)*($1) == (int_32)[37]) ){ goto $label$22 }
	
.LABEL $label$18
	$13 = ([2147483647] - $38)
	$30 = ($30 - $37)
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	if ( ($0 == 0) ){ goto $label$23 }
	if ( (*($0) & [32]) ){ goto $label$23 }
	CALL __fwritex($37, $30, $0)
	
.LABEL $label$23
	if ( $30 ){ goto $label$24 }
	$36 = ($1 + [1])
	$27 = [-1]
	$30 = *($1 + [1])
	$17 = ($30 + [-48])
	if ( ((uint_32)$17 > (uint_32)[9]) ){ goto $label$25 }
	$1 = ((int_32)*($1 + [2]) == (int_32)[36])
	$36 = ( ($1 + [3]) ? $36 : $1 )
	$30 = *($36)
	$27 = ( $17 ? [-1] : $1 )
	$32 = ( [1] ? $32 : $1 )
	
.LABEL $label$25
	$14 = [0]
	$1 = (int_32(($30 << [24]) >> [24]) + [-32])
	if ( ((uint_32)$1 > (uint_32)[31]) ){ goto $label$26 }
	$14 = [0]
	
.LOOP $label$27:
	if ( ((([1] << $1) & [75913]) == 0) ){ goto $label$26 }
	$14 = (([1] << (int_32(($30 << [24]) >> [24]) + [-32])) | $14)
	$36 = ($36 + [1])
	$30 = *($36)
	$1 = ($30 + [-32])
	if ( ($1 <= [32]) ){ goto $label$27 }
	
.LABEL $label$26
	if ( ((int_32)($30 & [255]) != (int_32)[42]) ){ goto $label$33 }
	$1 = (*($36 + [1]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$32 }
	if ( ((int_32)*($36 + [2]) != (int_32)[36]) ){ goto $label$32 }
	*(($4 + ($1 << [2]))) = [10]
	$17 = ($36 + [3])
	$32 = [1]
	$15 = *((($3 + (*(($36 + [1])) << [4])) + [-768]))
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	goto $label$31 
	
.LABEL $label$33
	$15 = [0]
	$30 = (int_32(($30 << [24]) >> [24]) + [-48])
	if ( ((uint_32)$30 > (uint_32)[9]) ){ goto $label$30 }
	$1 = [0]
	$17 = $36
	
.LOOP $label$34:
	$15 = [-1]
	if ( ((uint_32)$1 > (uint_32)[214748364]) ){ goto $label$35 }
	$1 = ((int_32)$1 * (int_32)[10])
	$15 = ( [-1] ? ($1 + $30) : ((int_32)$30 > (int_32)([2147483647] - $1)) )
	
.LABEL $label$35
	$1 = $15
	$17 = ($17 + [1])
	$30 = (*($17) + [-48])
	if ( ($30 <= [10]) ){ goto $label$34 }
	if ( ((int_32)$15 >= (int_32)[0]) ){ goto $label$28 }
	goto $label$15 
	
.LABEL $label$32
	if ( $32 ){ goto $label$3 }
	$17 = ($36 + [1])
	if ( ($0 == 0) ){ goto $label$29 }
	$1 = *($2)
	*($2) = ($1 + [4])
	$32 = [0]
	$15 = *($1)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$28 }
	
.LABEL $label$31
	$15 = ([0] - $15)
	$14 = ($14 | [8192])
	goto $label$28 
	
.LABEL $label$30
	$17 = $36
	goto $label$28 
	
.LABEL $label$29
	$32 = [0]
	$15 = [0]
	
.LABEL $label$28
	$30 = [0]
	$36 = [-1]
	if ( ((int_32)*($17) != (int_32)[46]) ){ goto $label$42 }
	$36 = *($17 + [1])
	if ( ((int_32)$36 != (int_32)[42]) ){ goto $label$41 }
	$1 = (*($17 + [2]) + [-48])
	if ( ((uint_32)$1 > (uint_32)[9]) ){ goto $label$40 }
	if ( ((int_32)*($17 + [3]) != (int_32)[36]) ){ goto $label$40 }
	*(($4 + ($1 << [2]))) = [10]
	$1 = ($17 + [4])
	$36 = *((($3 + (*(($17 + [2])) << [4])) + [-768]))
	goto $label$37 
	
.LABEL $label$42
	$1 = $17
	$16 = [0]
	goto $label$36 
	
.LABEL $label$41
	$1 = ($17 + [1])
	$31 = ($36 + [-48])
	if ( ((uint_32)$31 > (uint_32)[9]) ){ goto $label$39 }
	$17 = [0]
	
.LOOP $label$43:
	$36 = [-1]
	if ( ((uint_32)$17 > (uint_32)[214748364]) ){ goto $label$44 }
	$17 = ((int_32)$17 * (int_32)[10])
	$36 = ( [-1] ? ($17 + $31) : ((int_32)$31 > (int_32)([2147483647] - $17)) )
	
.LABEL $label$44
	$16 = [1]
	$17 = $36
	$1 = ($1 + [1])
	$31 = (*($1) + [-48])
	if ( ($31 <= [10]) ){ goto $label$43 }
	goto $label$36 
	
.LABEL $label$40
	if ( $32 ){ goto $label$3 }
	$1 = ($17 + [2])
	if ( ($0 == 0) ){ goto $label$38 }
	$17 = *($2)
	*($2) = ($17 + [4])
	$36 = *($17)
	goto $label$37 
	
.LABEL $label$39
	$16 = [1]
	$36 = [0]
	goto $label$36 
	
.LABEL $label$38
	$36 = [0]
	
.LABEL $label$37
	$16 = ((int_32)uint_32($36 >> [31]) ^ (int_32)[1])
	
.LABEL $label$36
	
.LOOP $label$45:
	$17 = $30
	$30 = (*($1) + [-65])
	if ( ((uint_32)$30 > (uint_32)[57]) ){ goto $label$3 }
	$1 = ($1 + [1])
	$30 = *(((((int_32)$17 * (int_32)[58]) + $30) + [11744]))
	if ( (($30 + [-1]) <= [8]) ){ goto $label$45 }
	if ( ($30 == 0) ){ goto $label$3 }
	if ( ((int_32)$30 != (int_32)[27]) ){ goto $label$49 }
	if ( ((int_32)$27 <= (int_32)[-1]) ){ goto $label$48 }
	goto $label$3 
	
.LABEL $label$49
	if ( ((int_32)$27 < (int_32)[0]) ){ goto $label$47 }
	*(($4 + ($27 << [2]))) = $30
	$30 = ($3 + ($27 << [4]))
	*($39 + [428]) = *(($30 + [12]))
	*($39 + [424]) = *(($30 + [8]))
	*($39 + [420]) = *(($30 + [4]))
	*($39 + [416]) = *($30)
	
.LABEL $label$48
	if ( $0 ){ goto $label$46 }
	$30 = [0]
	goto $label$24 
	
.LABEL $label$47
	if ( ($0 == 0) ){ goto $label$11 }
	CALL $285(($39 + [416]), $30, $2)
	
.LABEL $label$46
	$31 = ($14 & [-65537])
	$18 = ( $31 ? $14 : ($14 & [8192]) )
	$26 = [0]
	$24 = [12224]
	$30 = *(($1 + [-1]))
	$29 = ( ( ($30 & [-33]) ? $30 : ((int_32)($30 & [15]) == (int_32)[3]) ) ? $30 : $17 )
	$30 = ($29 + [-65])
	if ( ((uint_32)$30 > (uint_32)[55]) ){ goto $label$80 }
	$14 = $5
	goto $label$111 
	
.LABEL $label$111
	if ( ((int_32)$36 > (int_32)[-1]) ){ goto $label$112 }
	if ( $16 ){ goto $label$15 }
	
.LABEL $label$112
	$35 = *($39 + [424])
	$23 = *($39 + [416])
	*($39 + [748]) = [0]
	if ( (CALL __signbitl($23, $35) == 0) ){ goto $label$113 }
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	$20 = [1]
	$19 = [12256]
	goto $label$108 
	
.LABEL $label$113
	if ( ($18 & [2048]) ){ goto $label$109 }
	$20 = ($18 & [1])
	$19 = ( [12262] ? [12257] : $20 )
	goto $label$108 
	
.LABEL $label$110
	$35 = *($39 + [416])
	if ( ((int_64)$35 <= (int_64)-1) ){ goto $label$92 }
	if ( ($18 & [2048]) ){ goto $label$88 }
	$26 = ($18 & [1])
	$24 = ( [12226] ? [12224] : $26 )
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$109
	$20 = [1]
	$19 = [12259]
	
.LABEL $label$108
	if ( ((int_32)CALL __fpclassifyl($23, $35) <= (int_32)[1]) ){ goto $label$115 }
	CALL frexpl(($39 + [320]), $23, $35, ($39 + [748]))
	$23 = *($39 + [328])
	$35 = *($39 + [320])
	CALL __addtf3(($39 + [304]), $35, $23, $35, $23)
	$23 = *((($39 + [304]) + [8]))
	$35 = *($39 + [304])
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$116 }
	*($39 + [748]) = (*($39 + [748]) + [-1])
	
.LABEL $label$116
	$21 = ($29 | [32])
	if ( ((int_32)$21 != (int_32)[97]) ){ goto $label$114 }
	$37 = ($29 & [32])
	$24 = ( ($19 + [9]) ? $19 : $37 )
	if ( ((uint_32)$36 > (uint_32)[26]) ){ goto $label$77 }
	if ( (([27] - $36) == 0) ){ goto $label$77 }
	$30 = ($36 + [-27])
	$34 = (int_64)4612248968380809216
	$33 = (int_64)0
	
.LOOP $label$117:
	CALL __multf3(($39 + [208]), $33, $34, (int_64)0, (int_64)4612530443357519872)
	$34 = *((($39 + [208]) + [8]))
	$33 = *($39 + [208])
	$30 = ($30 + [1])
	if ( $30 ){ goto $label$117 }
	if ( ((int_32)*($24) != (int_32)[45]) ){ goto $label$78 }
	CALL __subtf3(($39 + [160]), $35, ((int_64)$23 ^ (int_64)-9223372036854775808), $33, $34)
	CALL __addtf3(($39 + [144]), $33, $34, *($39 + [160]), *((($39 + [160]) + [8])))
	$23 = ((int_64)*((($39 + [144]) + [8])) ^ (int_64)-9223372036854775808)
	$35 = *($39 + [144])
	goto $label$77 
	
.LABEL $label$115
	$16 = CALL __unordtf2($23, $35, $23, $35)
	$37 = ($20 + [3])
	if ( ($18 & [8192]) ){ goto $label$93 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$93 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$95 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$118:
	if ( (($30 & [1]) == 0) ){ goto $label$119 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$119
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$118 }
	if ( $14 ){ goto $label$93 }
	$31 = ($31 & [255])
	goto $label$94 
	
.LABEL $label$114
	$30 = ((int_32)$36 < (int_32)[0])
	if ( (CALL __netf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$90 }
	CALL __multf3(($39 + [288]), $35, $23, (int_64)0, (int_64)4619285842798575616)
	$31 = (*($39 + [748]) + [-28])
	*($39 + [748]) = $31
	$23 = *((($39 + [288]) + [8]))
	$35 = *($39 + [288])
	goto $label$89 
	
.LABEL $label$107
	$35 = *($39 + [416])
	*((($39 + [344]) + [4])) = [0]
	*($39 + [344]) = $35
	*($39 + [416]) = ($39 + [344])
	$36 = [-1]
	$37 = ($39 + [344])
	goto $label$105 
	
.LABEL $label$106
	$37 = *($39 + [416])
	if ( ($36 == 0) ){ goto $label$74 }
	
.LABEL $label$105
	$30 = [0]
	$14 = $37
	$17 = [0]
	
.LOOP $label$121:
	$31 = *($14)
	if ( ($31 == 0) ){ goto $label$120 }
	$17 = CALL wctomb(($39 + [340]), $31)
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$120 }
	if ( ((uint_32)$17 > (uint_32)($36 - $30)) ){ goto $label$120 }
	$14 = ($14 + [4])
	$30 = ($17 + $30)
	if ( ((uint_32)$36 > (uint_32)$30) ){ goto $label$121 }
	
.LABEL $label$120
	if ( ((int_32)$17 < (int_32)[0]) ){ goto $label$2 }
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	goto $label$73 
	
.LABEL $label$104
	*((($39 + [352]) + [54])) = *($39 + [416])
	$36 = [1]
	$37 = $6
	$14 = $5
	$18 = $31
	goto $label$79 
	
.LABEL $label$103
	$37 = CALL strerror(*(CALL $279()))
	goto $label$97 
	
.LABEL $label$102
	$30 = ($17 & [255])
	if ( ((uint_32)$30 > (uint_32)[7]) ){ goto $label$56 }
	goto $label$122 
	
.LABEL $label$122
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$101
	$37 = $5
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$123 }
	$37 = $5
	
.LOOP $label$124:
	*(($37 = ($37 + [-1]))) = ((int_64)((int_64)$35 & (int_64)7) | (int_64)48)
	$35 = (uint_64)$35 >> (uint_64)(int_64)3
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$124 }
	
.LABEL $label$123
	if ( ($18 & [8]) ){ goto $label$84 }
	$26 = [0]
	$24 = [12224]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$100
	$36 = ( $36 ? [8] : ((uint_32)$36 > (uint_32)[8]) )
	$18 = ($18 | [8])
	$29 = [120]
	
.LABEL $label$99
	$26 = [0]
	$24 = [12224]
	$35 = *($39 + [416])
	if ( (int_64)($35 == 0) ){ goto $label$125 }
	$30 = ($29 & [32])
	$37 = $5
	
.LOOP $label$126:
	*(($37 = ($37 + [-1]))) = (*((((CASTING uint_32)(uint_64 $35) & [15]) + [12208])) | $30)
	$35 = (uint_64)$35 >> (uint_64)(int_64)4
	if ( ((int_64)$35) != (int_64)0) ){ goto $label$126 }
	if ( (($18 & [8]) == 0) ){ goto $label$83 }
	if ( (int_64)(*($39 + [416]) == 0) ){ goto $label$83 }
	$24 = (int_32($29 >> [4]) + [12224])
	$26 = [2]
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$125
	$37 = $5
	if ( $16 ){ goto $label$82 }
	goto $label$81 
	
.LABEL $label$98
	$30 = *($39 + [416])
	$37 = ( $30 ? [12240] : $30 )
	
.LABEL $label$97
	$26 = [0]
	$30 = CALL strnlen($37, ( [2147483647] ? $36 : ((int_32)$36 < (int_32)[0]) ))
	$14 = ($37 + $30)
	if ( ((int_32)$36 <= (int_32)[-1]) ){ goto $label$91 }
	$18 = $31
	$36 = $30
	goto $label$79 
	
.LABEL $label$96
	$26 = [0]
	$24 = [12224]
	$35 = *($39 + [416])
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$95
	if ( $17 ){ goto $label$93 }
	
.LABEL $label$94
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$93
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$127 }
	CALL __fwritex($19, $20, $0)
	$30 = *($0)
	
.LABEL $label$127
	if ( ($30 & [32]) ){ goto $label$128 }
	$30 = uint_32(($29 & [32]) >> [5])
	CALL __fwritex(( ( [12320] ? [12336] : $30 ) ? ( [12288] ? [12304] : $30 ) : $16 ), [3], $0)
	
.LABEL $label$128
	if ( ((int_32)($18 & [73728]) != (int_32)[8192]) ){ goto $label$129 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$129 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$131 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$132:
	if ( (($30 & [1]) == 0) ){ goto $label$133 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$133
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$132 }
	if ( $14 ){ goto $label$129 }
	$31 = ($31 & [255])
	goto $label$130 
	
.LABEL $label$131
	if ( $17 ){ goto $label$129 }
	
.LABEL $label$130
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$129
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$92
	$35 = (int_64)
	*($39 + [416]) = $35((int_64)0 - $35))
	$26 = [1]
	$24 = [12224]
	if ( ((uint_64)$35 >= (uint_64)(int_64)4294967296) ){ goto $label$87 }
	goto $label$86 
	
.LABEL $label$91
	$18 = $31
	$36 = $30
	if ( (*($14) == 0) ){ goto $label$79 }
	goto $label$15 
	
.LABEL $label$90
	$31 = *($39 + [748])
	
.LABEL $label$89
	$28 = ( [6] ? $36 : $30 )
	$22 = ( ($39 + [752]) ? $9 : ((int_32)$31 < (int_32)[0]) )
	$36 = $22
	
.LOOP $label$134:
	$30 = CALL __fixunstfsi($35, $23)
	CALL __floatunsitf(($39 + [272]), $30)
	CALL __subtf3(($39 + [256]), $35, $23, *($39 + [272]), *((($39 + [272]) + [8])))
	CALL __multf3(($39 + [240]), *($39 + [256]), *((($39 + [256]) + [8])), (int_64)0, (int_64)4619810130798575616)
	*($36) = $30
	$36 = ($36 + [4])
	$23 = *((($39 + [240]) + [8]))
	$35 = *($39 + [240])
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$134 }
	if ( ((int_32)$31 < (int_32)[1]) ){ goto $label$137 }
	$17 = $22
	
.LOOP $label$138:
	$14 = ( $31 ? [29] : ((int_32)$31 < (int_32)[29]) )
	$30 = ($36 + [-4])
	if ( ($30 <= $17) ){ goto $label$139 }
	$23 = (CASTING uint_64)(uint_32 $14)
	$35 = (int_64)0
	
.LOOP $label$140:
	$35 = ((int_64)((int_64)*($30) << (int_64)$23) + (int_64)((int_64)$35 & (int_64)4294967295))
	*($30) = ((uint_64)$35 % (uint_64)(int_64)1000000000)
	$35 = ((uint_64)$35 / (uint_64)(int_64)1000000000)
	$30 = ($30 + [-4])
	if ( ((uint_32)$30 >= (uint_32)$17) ){ goto $label$140 }
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( ($30 == 0) ){ goto $label$139 }
	*(($17 = ($17 + [-4]))) = $30
	
.LABEL $label$139
	
.LOOP $label$142:
	$30 = $36
	if ( ((uint_32)$30 <= (uint_32)$17) ){ goto $label$141 }
	$36 = ($30 + [-4])
	if ( (*($36) == 0) ){ goto $label$142 }
	
.LABEL $label$141
	$36 = $30
	$31 = ($31 - $14)
	if ( ((int_32)$31 > (int_32)[0]) ){ goto $label$138 }
	*($39 + [748]) = $31
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	goto $label$136 
	
.LABEL $label$137
	$30 = $36
	$17 = $22
	if ( ((int_32)$31 > (int_32)[-1]) ){ goto $label$135 }
	
.LABEL $label$136
	$24 = (((uint_32)($28 + [45]) / (uint_32)[9]) + [1])
	if ( ((int_32)$21 != (int_32)[102]) ){ goto $label$144 }
	$25 = ($22 + ($24 << [2]))
	
.LOOP $label$145:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$147 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$148:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$148 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$146 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$146 
	
.LABEL $label$147
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$146
	$30 = ( $25 ? $30 : ((int_32)int_32(($30 - $22) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$145 }
	goto $label$143 
	
.LABEL $label$144
	
.LOOP $label$149:
	$36 = ([0] - $31)
	$16 = ( $36 ? [9] : ((int_32)$36 < (int_32)[9]) )
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$151 }
	$27 = uint_32([1000000000] >> $16)
	$26 = (([1] << $16) + [-1])
	$14 = [0]
	$36 = $17
	
.LOOP $label$152:
	$37 = *($36)
	*($36) = (uint_32($37 >> $16) + $14)
	$14 = ((int_32)($37 & $26) * (int_32)$27)
	$36 = ($36 + [4])
	if ( ($36 <= $30) ){ goto $label$152 }
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	if ( ($14 == 0) ){ goto $label$150 }
	*($30) = $14
	$30 = ($30 + [4])
	goto $label$150 
	
.LABEL $label$151
	$17 = ( $17 ? ($17 + [4]) : *($17) )
	
.LABEL $label$150
	$30 = ( ($17 + ($24 << [2])) ? $30 : ((int_32)int_32(($30 - $17) >> [2]) > (int_32)$24) )
	$31 = ($16 + $31)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$149 }
	
.LABEL $label$143
	*($39 + [748]) = $31
	
.LABEL $label$135
	$36 = [0]
	if ( ((uint_32)$17 >= (uint_32)$30) ){ goto $label$153 }
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$153 }
	$14 = [10]
	
.LOOP $label$154:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$154 }
	
.LABEL $label$153
	$16 = ((int_32)$21 == (int_32)[103])
	$14 = (($28 - ( $36 ? [0] : ((int_32)$21 != (int_32)[102]) )) - (((int_32)$28 != (int_32)[0]) & $16))
	if ( ((int_32)$14 >= (int_32)(((int_32)int_32(($30 - $22) >> [2]) * (int_32)[9]) + [-9])) ){ goto $label$155 }
	$37 = ($14 + [147456])
	$24 = ($22 + (((int_32)$37 / (int_32)[9]) << [2]))
	$31 = ($24 + [-65532])
	$14 = [10]
	$37 = ((int_32)$37 % (int_32)[9])
	if ( ((int_32)($37 + [1]) > (int_32)[8]) ){ goto $label$156 }
	$37 = ([8] - $37)
	$14 = [10]
	
.LOOP $label$157:
	$14 = ((int_32)$14 * (int_32)[10])
	$37 = ($37 + [-1])
	if ( $37 ){ goto $label$157 }
	
.LABEL $label$156
	$27 = *($31)
	$37 = ((uint_32)$27 % (uint_32)$14)
	$26 = ($31 + [4])
	if ( ((int_32)$26 != (int_32)$30) ){ goto $label$159 }
	if ( ($37 == 0) ){ goto $label$158 }
	
.LABEL $label$159
	if ( (((uint_32)$27 / (uint_32)$14) & [1]) ){ goto $label$161 }
	$35 = (int_64)4643211215818981376
	$23 = (int_64)0
	if ( ((uint_32)$31 <= (uint_32)$17) ){ goto $label$160 }
	if ( ((int_32)$14 != (int_32)[1000000000]) ){ goto $label$160 }
	if ( ((*(($31 + [-4])) & [1]) == 0) ){ goto $label$160 }
	
.LABEL $label$161
	$35 = (int_64)4643211215818981376
	$23 = (int_64)1
	
.LABEL $label$160
	$34 = (int_64)4611123068473966592
	$25 = ((int_32)$14 / (int_32)[2])
	if ( ($37 <= $25) ){ goto $label$162 }
	$34 = ( ( (int_64)4611404543450677248 ? (int_64)4611545280939032576 : ((int_32)$37 == (int_32)$25) ) ? (int_64)4611545280939032576 : ((int_32)$26 == (int_32)$30) )
	
.LABEL $label$162
	if ( ($20 == 0) ){ goto $label$163 }
	if ( ((int_32)*($19) != (int_32)[45]) ){ goto $label$163 }
	$34 = ((int_64)$34 ^ (int_64)-9223372036854775808)
	$35 = ((int_64)$35 ^ (int_64)-9223372036854775808)
	
.LABEL $label$163
	CALL __addtf3(($39 + [224]), $23, $35, (int_64)0, $34)
	$37 = ($27 - $37)
	*($31) = $37
	if ( (CALL __eqtf2(*($39 + [224]), *((($39 + [224]) + [8])), $23, $35) == 0) ){ goto $label$158 }
	$36 = ($37 + $14)
	*($31) = $36
	if ( ($36 <= [1000000000]) ){ goto $label$164 }
	$36 = ($24 + [-65536])
	
.LOOP $label$165:
	*(($36 + [4])) = [0]
	if ( ((uint_32)$36 >= (uint_32)$17) ){ goto $label$166 }
	*(($17 = ($17 + [-4]))) = [0]
	
.LABEL $label$166
	$14 = (*($36) + [1])
	*($36) = $14
	$36 = ($36 + [-4])
	if ( ((uint_32)$14 > (uint_32)[999999999]) ){ goto $label$165 }
	$31 = ($36 + [4])
	
.LABEL $label$164
	$36 = ((int_32)int_32(($22 - $17) >> [2]) * (int_32)[9])
	$37 = *($17)
	if ( ($37 <= [10]) ){ goto $label$158 }
	$14 = [10]
	
.LOOP $label$167:
	$36 = ($36 + [1])
	$14 = ((int_32)$14 * (int_32)[10])
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$167 }
	
.LABEL $label$158
	$14 = ($31 + [4])
	$30 = ( $14 ? $30 : ((uint_32)$30 > (uint_32)$14) )
	
.LABEL $label$155
	$31 = ([0] - $36)
	
.LOOP $label$171:
	$14 = $30
	if ( ((uint_32)$14 <= (uint_32)$17) ){ goto $label$170 }
	$30 = ($14 + [-4])
	if ( (*($30) == 0) ){ goto $label$171 }
	$27 = [1]
	if ( $16 ){ goto $label$169 }
	goto $label$168 
	
.LABEL $label$170
	$27 = [0]
	if ( ($16 == 0) ){ goto $label$168 }
	
.LABEL $label$169
	$30 = (($28 == 0) + $28)
	if ( ((int_32)$30 <= (int_32)$36) ){ goto $label$76 }
	if ( ((int_32)$36 < (int_32)[-4]) ){ goto $label$76 }
	$29 = ($29 + [-1])
	$28 = (($30 + [-1]) - $36)
	$16 = ($18 & [8])
	if ( ($16 == 0) ){ goto $label$75 }
	goto $label$68 
	
.LABEL $label$168
	$16 = ($18 & [8])
	goto $label$68 
	
.LABEL $label$88
	$26 = [1]
	$24 = [12225]
	if ( (uint_64)($35 <= (int_64)4294967296) ){ goto $label$86 }
	
.LABEL $label$87
	$37 = $5
	
.LOOP $label$172:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$172 }
	goto $label$85 
	
.LABEL $label$86
	$23 = $35
	$37 = $5
	
.LABEL $label$85
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$83 }
	
.LOOP $label$173:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $17 ){ goto $label$173 }
	goto $label$83 
	
.LABEL $label$84
	$30 = ($5 - $37)
	$24 = ( [12224] ? [12229] : ((int_32)$36 > (int_32)$30) )
	$26 = ((int_32)$36 <= (int_32)$30)
	
.LABEL $label$83
	if ( ($16 == 0) ){ goto $label$81 }
	
.LABEL $label$82
	if ( ((int_32)$36 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$81
	$18 = ( ($18 & [-65537]) ? $18 : ((int_32)$36 > (int_32)[-1]) )
	$35 = *($39 + [416])
	if ( $36 ){ goto $label$174 }
	if ( ((int_64)($35 == 0) == 0) ){ goto $label$174 }
	$37 = $5
	$14 = $5
	$36 = [0]
	goto $label$79 
	
.LABEL $label$174
	$30 = ((int_64)($35 == 0) + ($5 - $37))
	$36 = ( $36 ? $30 : ((int_32)$36 > (int_32)$30) )
	
.LABEL $label$80
	$14 = $5
	
.LABEL $label$79
	$29 = ($14 - $37)
	$28 = ( $29 ? $36 : ((int_32)$36 < (int_32)$29) )
	if ( ((int_32)$28 > (int_32)([2147483647] - $26)) ){ goto $label$15 }
	$27 = ($26 + $28)
	$30 = ( $27 ? $15 : ((int_32)$15 < (int_32)$27) )
	if ( ((int_32)$30 > (int_32)$13) ){ goto $label$15 }
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$175 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$175 }
	$17 = ($22 <= [256])
	$22 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $22 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$177 }
	$17 = ($14 == 0)
	$14 = $22
	
.LOOP $label$178:
	if ( (($17 & [1]) == 0) ){ goto $label$179 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$179
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$178 }
	if ( $16 ){ goto $label$175 }
	$22 = ($22 & [255])
	goto $label$176 
	
.LABEL $label$177
	if ( $14 ){ goto $label$175 }
	
.LABEL $label$176
	CALL __fwritex(($39 + [432]), $22, $0)
	
.LABEL $label$175
	if ( (*($0) & [32]) ){ goto $label$180 }
	CALL __fwritex($24, $26, $0)
	
.LABEL $label$180
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$181 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$181 }
	$17 = ($26 <= [256])
	$26 = ($30 - $27)
	CALL memset(($39 + [432]), [48], ( $26 ? [256] : $17 ))
	$31 = *($0)
	$14 = ($31 & [32])
	if ( $17 ){ goto $label$183 }
	$17 = ($14 == 0)
	$14 = $26
	
.LOOP $label$184:
	if ( (($17 & [1]) == 0) ){ goto $label$185 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$31 = *($0)
	
.LABEL $label$185
	$16 = ($31 & [32])
	$17 = ($16 == 0)
	$14 = ($14 + [-256])
	if ( ((uint_32)$14 > (uint_32)[255]) ){ goto $label$184 }
	if ( $16 ){ goto $label$181 }
	$26 = ($26 & [255])
	goto $label$182 
	
.LABEL $label$183
	if ( $14 ){ goto $label$181 }
	
.LABEL $label$182
	CALL __fwritex(($39 + [432]), $26, $0)
	
.LABEL $label$181
	if ( ((int_32)$29 >= (int_32)$36) ){ goto $label$186 }
	$17 = ($16 <= [256])
	$16 = ($28 - $29)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$188 }
	$17 = ($36 == 0)
	$36 = $16
	
.LOOP $label$189:
	if ( (($17 & [1]) == 0) ){ goto $label$190 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$190
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$189 }
	if ( $31 ){ goto $label$186 }
	$16 = ($16 & [255])
	goto $label$187 
	
.LABEL $label$188
	if ( $36 ){ goto $label$186 }
	
.LABEL $label$187
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$186
	if ( (*($0) & [32]) ){ goto $label$191 }
	CALL __fwritex($37, $29, $0)
	
.LABEL $label$191
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$24 }
	if ( ((int_32)$27 >= (int_32)$15) ){ goto $label$24 }
	$17 = ($37 <= [256])
	$37 = ($30 - $27)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $17 ))
	$36 = *($0)
	$15 = ($36 & [32])
	if ( $17 ){ goto $label$193 }
	$17 = ($15 == 0)
	$15 = $37
	
.LOOP $label$194:
	if ( (($17 & [1]) == 0) ){ goto $label$195 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$195
	$14 = ($36 & [32])
	$17 = ($14 == 0)
	$15 = ($15 + [-256])
	if ( ((uint_32)$15 > (uint_32)[255]) ){ goto $label$194 }
	if ( $14 ){ goto $label$24 }
	$37 = ($37 & [255])
	goto $label$192 
	
.LABEL $label$193
	if ( $15 ){ goto $label$24 }
	
.LABEL $label$192
	CALL __fwritex(($39 + [432]), $37, $0)
	goto $label$24 
	
.LABEL $label$78
	CALL __addtf3(($39 + [192]), $35, $23, $33, $34)
	CALL __subtf3(($39 + [176]), *($39 + [192]), *((($39 + [192]) + [8])), $33, $34)
	$23 = *((($39 + [176]) + [8]))
	$35 = *($39 + [176])
	
.LABEL $label$77
	$30 = int_32($31 >> [31])
	$31 = *($39 + [748])
	$17 = ((int_32)($31 + $30) ^ (int_32)$30)
	$34 = (CASTING int_64)(int_32 $17)
	$30 = [0]
	if ( ((int_32)$17 <= (int_32)[-1]) ){ goto $label$198 }
	$17 = (CASTING uint_32)(uint_64 $34)
	if ( $17 ){ goto $label$197 }
	goto $label$196 
	
.LABEL $label$198
	$30 = [0]
	
.LOOP $label$199:
	*(($12 + $30)) = ((int_64)((uint_64)$34 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ($30 + [-1])
	$17 = ((uint_64)$34 > (uint_64)(int_64)42949672959)
	$33 = ((uint_64)$34 / (uint_64)(int_64)10)
	$34 = $33
	if ( $17 ){ goto $label$199 }
	$17 = (CASTING uint_32)(uint_64 $33)
	if ( ($17 == 0) ){ goto $label$196 }
	
.LABEL $label$197
	
.LOOP $label$200:
	*(((($39 + [692]) + $30) + [11])) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$30 = ($30 + [-1])
	$14 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $14 ){ goto $label$200 }
	
.LABEL $label$196
	$17 = ($7 + $30)
	if ( $30 ){ goto $label$201 }
	*(($17 = ($17 + [-1]))) = [48]
	
.LABEL $label$201
	$16 = ($20 | [2])
	*(($27 = ($17 + [-2]))) = ($29 + [15])
	*(($17 + [-1])) = ((uint_32($31 >> [30]) & [2]) + [43])
	if ( ($18 & [8]) ){ goto $label$202 }
	if ( ((int_32)$36 < (int_32)[1]) ){ goto $label$71 }
	$30 = ($39 + [704])
	
.LOOP $label$203:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [80]), $17)
	CALL __subtf3(($39 + [64]), $35, $23, *($39 + [80]), *((($39 + [80]) + [8])))
	CALL __multf3(($39 + [48]), *($39 + [64]), *((($39 + [64]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [12208])) | $37)
	$23 = *((($39 + [48]) + [8]))
	$35 = *($39 + [48])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$204 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$204
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$203 }
	goto $label$70 
	
.LABEL $label$202
	$30 = ($39 + [704])
	
.LOOP $label$205:
	$17 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [128]), $17)
	CALL __subtf3(($39 + [112]), $35, $23, *($39 + [128]), *((($39 + [128]) + [8])))
	CALL __multf3(($39 + [96]), *($39 + [112]), *((($39 + [112]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*($30) = (*(($17 + [12208])) | $37)
	$23 = *((($39 + [96]) + [8]))
	$35 = *($39 + [96])
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$206 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$206
	$30 = $17
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$205 }
	goto $label$70 
	
.LABEL $label$76
	$28 = ($30 + [-1])
	$29 = ($29 + [-2])
	$16 = ($18 & [8])
	if ( $16 ){ goto $label$68 }
	
.LABEL $label$75
	$30 = [9]
	if ( ($27 == 0) ){ goto $label$207 }
	$16 = *(($14 + [-4]))
	if ( ($16 == 0) ){ goto $label$207 }
	$30 = [0]
	if ( ((uint_32)$16 % (uint_32)[10]) ){ goto $label$207 }
	$37 = [10]
	$30 = [0]
	
.LOOP $label$208:
	$30 = ($30 + [1])
	$37 = ((int_32)$37 * (int_32)[10])
	if ( (((uint_32)$16 % (uint_32)$37) == 0) ){ goto $label$208 }
	
.LABEL $label$207
	$37 = (((int_32)int_32(($14 - $22) >> [2]) * (int_32)[9]) + [-9])
	if ( ((int_32)($29 | [32]) != (int_32)[102]) ){ goto $label$69 }
	$16 = [0]
	$30 = ($37 - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	goto $label$68 
	
.LABEL $label$74
	$30 = [0]
	$16 = ($18 & [73728])
	if ( $16 ){ goto $label$72 }
	
.LABEL $label$73
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$72 }
	$17 = ($27 <= [256])
	$27 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $27 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$210 }
	$17 = ($36 == 0)
	$36 = $27
	
.LOOP $label$211:
	if ( (($17 & [1]) == 0) ){ goto $label$212 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$212
	$31 = ($14 & [32])
	$17 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$211 }
	if ( $31 ){ goto $label$72 }
	$27 = ($27 & [255])
	goto $label$209 
	
.LABEL $label$210
	if ( $36 ){ goto $label$72 }
	
.LABEL $label$209
	CALL __fwritex(($39 + [432]), $27, $0)
	
.LABEL $label$72
	if ( ($30 == 0) ){ goto $label$213 }
	$17 = [0]
	
.LOOP $label$214:
	$36 = *($37)
	if ( ($36 == 0) ){ goto $label$213 }
	$36 = CALL wctomb(($39 + [340]), $36)
	$17 = ($36 + $17)
	if ( ((uint_32)$17 > (uint_32)$30) ){ goto $label$213 }
	if ( (*($0) & [32]) ){ goto $label$215 }
	CALL __fwritex(($39 + [340]), $36, $0)
	
.LABEL $label$215
	$37 = ($37 + [4])
	if ( ($17 <= $30) ){ goto $label$214 }
	
.LABEL $label$213
	if ( ((int_32)$16 != (int_32)[8192]) ){ goto $label$216 }
	if ( ((int_32)$15 <= (int_32)$30) ){ goto $label$216 }
	$17 = ($31 <= [256])
	$31 = ($15 - $30)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$218 }
	$17 = ($36 == 0)
	$36 = $31
	
.LOOP $label$219:
	if ( (($17 & [1]) == 0) ){ goto $label$220 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$220
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$219 }
	if ( $37 ){ goto $label$216 }
	$31 = ($31 & [255])
	goto $label$217 
	
.LABEL $label$218
	if ( $36 ){ goto $label$216 }
	
.LABEL $label$217
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$216
	$30 = ( $15 ? $30 : ((int_32)$15 > (int_32)$30) )
	goto $label$24 
	
.LABEL $label$71
	$17 = ($39 + [704])
	
.LOOP $label$221:
	$14 = CALL __fixtfsi($35, $23)
	CALL __floatsitf(($39 + [32]), $14)
	CALL __subtf3(($39 + [16]), $35, $23, *($39 + [32]), *((($39 + [32]) + [8])))
	CALL __multf3($39, *($39 + [16]), *((($39 + [16]) + [8])), (int_64)0, (int_64)4612530443357519872)
	*(($30 = $17)) = (*(($14 + [12208])) | $37)
	$23 = *(($39 + [8]))
	$35 = *($39)
	$17 = ($30 + [1])
	if ( ((int_32)($17 - ($39 + [704])) != (int_32)[1]) ){ goto $label$222 }
	if ( (CALL __eqtf2($35, $23, (int_64)0, (int_64)0) == 0) ){ goto $label$222 }
	*(($30 + [1])) = [46]
	$17 = ($30 + [2])
	
.LABEL $label$222
	if ( CALL __netf2($35, $23, (int_64)0, (int_64)0) ){ goto $label$221 }
	
.LABEL $label$70
	$30 = [-1]
	$31 = ($7 - $27)
	if ( ((int_32)(([2147483645] - $16) - $31) < (int_32)$36) ){ goto $label$50 }
	$26 = ($17 - ($39 + [704]))
	$29 = ( ( ($36 + [2]) ? $26 : ((int_32)($8 + $17) < (int_32)$36) ) ? $26 : $36 )
	$37 = (($31 + $16) + $29)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$65 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$65 }
	$30 = ($28 <= [256])
	$28 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$67 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$223:
	if ( (($30 & [1]) == 0) ){ goto $label$224 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$224
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$223 }
	if ( $14 ){ goto $label$65 }
	$28 = ($28 & [255])
	goto $label$66 
	
.LABEL $label$69
	$16 = [0]
	$30 = (($37 + $36) - $30)
	$30 = ( $30 ? [0] : ((int_32)$30 > (int_32)[0]) )
	$28 = ( $28 ? $30 : ((int_32)$28 < (int_32)$30) )
	
.LABEL $label$68
	$30 = [-1]
	$24 = ($28 | $16)
	$37 = ((int_32)$24 != (int_32)[0])
	if ( ((int_32)$28 > (int_32)([2147483646] - $37)) ){ goto $label$50 }
	$26 = (($28 + $37) + [1])
	$21 = ((int_32)($29 | [32]) != (int_32)[102])
	if ( $21 ){ goto $label$225 }
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	$36 = ( $36 ? [0] : ((int_32)$36 > (int_32)[0]) )
	goto $label$61 
	
.LABEL $label$225
	$30 = ( $31 ? $36 : ((int_32)$36 < (int_32)[0]) )
	$35 = (CASTING int_64)(int_32 $30)
	if ( ((int_32)$30 <= (int_32)[-1]) ){ goto $label$64 }
	$37 = $7
	$30 = (CASTING uint_32)(uint_64 $35)
	if ( $30 ){ goto $label$63 }
	goto $label$62 
	
.LABEL $label$67
	if ( $17 ){ goto $label$65 }
	
.LABEL $label$66
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$65
	if ( (*($0) & [32]) ){ goto $label$226 }
	CALL __fwritex($24, $16, $0)
	
.LABEL $label$226
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$227 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$227 }
	$30 = ($16 <= [256])
	$16 = ($15 - $37)
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$229 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$230:
	if ( (($30 & [1]) == 0) ){ goto $label$231 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$231
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$230 }
	if ( $14 ){ goto $label$227 }
	$16 = ($16 & [255])
	goto $label$228 
	
.LABEL $label$229
	if ( $17 ){ goto $label$227 }
	
.LABEL $label$228
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$227
	if ( (*($0) & [32]) ){ goto $label$232 }
	CALL __fwritex(($39 + [704]), $26, $0)
	
.LABEL $label$232
	$16 = ($29 - $26)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$233 }
	$30 = ($16 <= [256])
	CALL memset(($39 + [432]), [48], ( $16 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$235 }
	$30 = ($17 == 0)
	$17 = $16
	
.LOOP $label$236:
	if ( (($30 & [1]) == 0) ){ goto $label$237 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$237
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$236 }
	if ( $14 ){ goto $label$233 }
	$16 = ($16 & [255])
	goto $label$234 
	
.LABEL $label$235
	if ( $17 ){ goto $label$233 }
	
.LABEL $label$234
	CALL __fwritex(($39 + [432]), $16, $0)
	
.LABEL $label$233
	if ( (*($0) & [32]) ){ goto $label$238 }
	CALL __fwritex($27, $31, $0)
	
.LABEL $label$238
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$239 }
	if ( ((int_32)$15 <= (int_32)$37) ){ goto $label$239 }
	$30 = ($31 <= [256])
	$31 = ($15 - $37)
	CALL memset(($39 + [432]), [32], ( $31 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$241 }
	$30 = ($17 == 0)
	$17 = $31
	
.LOOP $label$242:
	if ( (($30 & [1]) == 0) ){ goto $label$243 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$243
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$242 }
	if ( $14 ){ goto $label$239 }
	$31 = ($31 & [255])
	goto $label$240 
	
.LABEL $label$241
	if ( $17 ){ goto $label$239 }
	
.LABEL $label$240
	CALL __fwritex(($39 + [432]), $31, $0)
	
.LABEL $label$239
	$30 = ( $15 ? $37 : ((int_32)$15 > (int_32)$37) )
	goto $label$50 
	
.LABEL $label$64
	$37 = $7
	
.LOOP $label$244:
	*(($37 = ($37 + [-1]))) = ((int_64)((uint_64)$35 % (uint_64)(int_64)10) | (int_64)48)
	$30 = ((uint_64)$35 > (uint_64)(int_64)42949672959)
	$23 = ((uint_64)$35 / (uint_64)(int_64)10)
	$35 = $23
	if ( $30 ){ goto $label$244 }
	$30 = (CASTING uint_32)(uint_64 $23)
	if ( ($30 == 0) ){ goto $label$62 }
	
.LABEL $label$63
	
.LOOP $label$245:
	*(($37 = ($37 + [-1]))) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$31 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $31 ){ goto $label$245 }
	
.LABEL $label$62
	if ( ((int_32)($7 - $37) > (int_32)[1]) ){ goto $label$246 }
	$30 = ($37 + [-1])
	
.LOOP $label$247:
	*($30) = [48]
	$37 = ($7 - $30)
	$31 = ($30 + [-1])
	$30 = $31
	if ( ((int_32)$37 < (int_32)[2]) ){ goto $label$247 }
	$37 = ($31 + [1])
	
.LABEL $label$246
	*(($25 = ($37 + [-2]))) = $29
	$30 = [-1]
	*(($37 + [-1])) = ((uint_32($36 >> [30]) & [2]) + [43])
	$36 = ($7 - $25)
	if ( ((int_32)$36 > (int_32)([2147483647] - $26)) ){ goto $label$50 }
	
.LABEL $label$61
	$30 = [-1]
	$36 = ($36 + $26)
	if ( ((int_32)$36 > (int_32)((int_32)$20 ^ (int_32)[2147483647])) ){ goto $label$50 }
	$26 = ($36 + $20)
	$18 = ($18 & [73728])
	if ( $18 ){ goto $label$51 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$51 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$53 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$248:
	if ( (($30 & [1]) == 0) ){ goto $label$249 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$249
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$248 }
	if ( $31 ){ goto $label$51 }
	$29 = ($29 & [255])
	goto $label$52 
	
.LABEL $label$60
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$59
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$58
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$57
	*(*($39 + [416])) = $38
	
.LABEL $label$56
	$30 = [0]
	goto $label$24 
	
.LABEL $label$55
	*(*($39 + [416])) = $38
	$30 = [0]
	goto $label$24 
	
.LABEL $label$54
	*(*($39 + [416])) = (CASTING int_64)(int_32 $38)
	$30 = [0]
	goto $label$24 
	
.LABEL $label$53
	if ( $36 ){ goto $label$51 }
	
.LABEL $label$52
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$51
	if ( (*($0) & [32]) ){ goto $label$250 }
	CALL __fwritex($19, $20, $0)
	
.LABEL $label$250
	if ( ((int_32)$18 != (int_32)[65536]) ){ goto $label$251 }
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$251 }
	$30 = ($29 <= [256])
	$29 = ($15 - $26)
	CALL memset(($39 + [432]), [48], ( $29 ? [256] : $30 ))
	$37 = *($0)
	$36 = ($37 & [32])
	if ( $30 ){ goto $label$253 }
	$30 = ($36 == 0)
	$36 = $29
	
.LOOP $label$254:
	if ( (($30 & [1]) == 0) ){ goto $label$255 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$37 = *($0)
	
.LABEL $label$255
	$31 = ($37 & [32])
	$30 = ($31 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$254 }
	if ( $31 ){ goto $label$251 }
	$29 = ($29 & [255])
	goto $label$252 
	
.LABEL $label$253
	if ( $36 ){ goto $label$251 }
	
.LABEL $label$252
	CALL __fwritex(($39 + [432]), $29, $0)
	
.LABEL $label$251
	if ( $21 ){ goto $label$266 }
	$31 = ( $22 ? $17 : ((uint_32)$17 > (uint_32)$22) )
	$37 = $31
	
.LOOP $label$267:
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$269 }
	$17 = [0]
	
.LOOP $label$270:
	*(($11 + $17)) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$17 = ($17 + [-1])
	$36 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $36 ){ goto $label$270 }
	goto $label$268 
	
.LABEL $label$269
	$17 = [0]
	
.LABEL $label$268
	$30 = ($10 + $17)
	if ( ((int_32)$37 == (int_32)$31) ){ goto $label$272 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$271 }
	
.LOOP $label$273:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$273 }
	$30 = ($39 + [704])
	goto $label$271 
	
.LABEL $label$272
	if ( $17 ){ goto $label$271 }
	*(($30 = ($30 + [-1]))) = [48]
	
.LABEL $label$271
	if ( (*($0) & [32]) ){ goto $label$274 }
	CALL __fwritex($30, ($10 - $30), $0)
	
.LABEL $label$274
	$37 = ($37 + [4])
	if ( ((uint_32)$37 <= (uint_32)$22) ){ goto $label$267 }
	if ( ($24 == 0) ){ goto $label$275 }
	if ( (*($0) & [32]) ){ goto $label$275 }
	CALL __fwritex([12352], [1], $0)
	
.LABEL $label$275
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$265 }
	if ( ((uint_32)$37 >= (uint_32)$14) ){ goto $label$264 }
	
.LOOP $label$276:
	$30 = $10
	$17 = *($37)
	if ( ($17 == 0) ){ goto $label$278 }
	$30 = $10
	
.LOOP $label$279:
	*(($30 = ($30 + [-1]))) = (((uint_32)$17 % (uint_32)[10]) | [48])
	$36 = ((uint_32)$17 > (uint_32)[9])
	$17 = ((uint_32)$17 / (uint_32)[10])
	if ( $36 ){ goto $label$279 }
	if ( ((uint_32)$30 <= (uint_32)($39 + [704])) ){ goto $label$277 }
	
.LABEL $label$278
	
.LOOP $label$280:
	*(($30 = ($30 + [-1]))) = [48]
	if ( ((uint_32)$30 > (uint_32)($39 + [704])) ){ goto $label$280 }
	
.LABEL $label$277
	if ( (*($0) & [32]) ){ goto $label$281 }
	CALL __fwritex($30, ( $28 ? [9] : ((int_32)$28 < (int_32)[9]) ), $0)
	
.LABEL $label$281
	$30 = ($28 + [-9])
	if ( ((int_32)$28 < (int_32)[10]) ){ goto $label$263 }
	$28 = $30
	$37 = ($37 + [4])
	if ( ($37 <= $14) ){ goto $label$276 }
	goto $label$263 
	
.LABEL $label$266
	if ( ((int_32)$28 <= (int_32)[-1]) ){ goto $label$259 }
	$31 = ( $14 ? ($17 + [4]) : $27 )
	if ( ($16 == 0) ){ goto $label$261 }
	$37 = $17
	
.LOOP $label$282:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$284 }
	$36 = [0]
	
.LOOP $label$285:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$285 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$283 }
	
.LABEL $label$284
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$283
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$287 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$286 }
	
.LOOP $label$288:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$288 }
	goto $label$286 
	
.LABEL $label$287
	$30 = *($0)
	if ( ($30 & [32]) ){ goto $label$289 }
	CALL __fwritex($14, [1], $0)
	$30 = *($0)
	
.LABEL $label$289
	$14 = ($14 + [1])
	if ( ($30 & [32]) ){ goto $label$286 }
	CALL __fwritex([12352], [1], $0)
	
.LABEL $label$286
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$290 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$290
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$282 }
	goto $label$260 
	
.LABEL $label$265
	$30 = $28
	if ( ((int_32)$30 >= (int_32)[1]) ){ goto $label$262 }
	goto $label$258 
	
.LABEL $label$264
	$30 = $28
	
.LABEL $label$263
	if ( ((int_32)$30 < (int_32)[1]) ){ goto $label$258 }
	
.LABEL $label$262
	$17 = ($30 <= [256])
	CALL memset(($39 + [432]), [48], ( $30 ? [256] : $17 ))
	$14 = *($0)
	$36 = ($14 & [32])
	if ( $17 ){ goto $label$292 }
	$17 = ($36 == 0)
	$36 = $30
	
.LOOP $label$293:
	if ( (($17 & [1]) == 0) ){ goto $label$294 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$14 = *($0)
	
.LABEL $label$294
	$37 = ($14 & [32])
	$17 = ($37 == 0)
	$36 = ($36 + [-256])
	if ( ((uint_32)$36 > (uint_32)[255]) ){ goto $label$293 }
	if ( $37 ){ goto $label$258 }
	$30 = ($30 & [255])
	goto $label$291 
	
.LABEL $label$292
	if ( $36 ){ goto $label$258 }
	
.LABEL $label$291
	CALL __fwritex(($39 + [432]), $30, $0)
	if ( ((int_32)$18 == (int_32)[8192]) ){ goto $label$257 }
	goto $label$256 
	
.LABEL $label$261
	$37 = $17
	
.LOOP $label$295:
	$14 = $10
	$30 = *($37)
	if ( ($30 == 0) ){ goto $label$297 }
	$36 = [0]
	
.LOOP $label$298:
	*(((($39 + [704]) + $36) + [8])) = (((uint_32)$30 % (uint_32)[10]) | [48])
	$36 = ($36 + [-1])
	$14 = ((uint_32)$30 > (uint_32)[9])
	$30 = ((uint_32)$30 / (uint_32)[10])
	if ( $14 ){ goto $label$298 }
	$14 = ((($39 + [704]) + $36) + [9])
	if ( $36 ){ goto $label$296 }
	
.LABEL $label$297
	*(($14 = ($14 + [-1]))) = [48]
	
.LABEL $label$296
	if ( ((int_32)$37 == (int_32)$17) ){ goto $label$300 }
	if ( ((uint_32)$14 <= (uint_32)($39 + [704])) ){ goto $label$299 }
	
.LOOP $label$301:
	*(($14 = ($14 + [-1]))) = [48]
	if ( ((uint_32)$14 > (uint_32)($39 + [704])) ){ goto $label$301 }
	goto $label$299 
	
.LABEL $label$300
	if ( (*($0) & [32]) ){ goto $label$302 }
	CALL __fwritex($14, [1], $0)
	
.LABEL $label$302
	$14 = ($14 + [1])
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$299 }
	if ( (*($0) & [32]) ){ goto $label$299 }
	CALL __fwritex([12352], [1], $0)
	
.LABEL $label$299
	$30 = ($10 - $14)
	if ( (*($0) & [32]) ){ goto $label$303 }
	CALL __fwritex($14, ( $30 ? $28 : ((int_32)$28 > (int_32)$30) ), $0)
	
.LABEL $label$303
	$28 = ($28 - $30)
	$37 = ($37 + [4])
	if ( ((uint_32)$37 >= (uint_32)$31) ){ goto $label$260 }
	if ( ((int_32)$28 > (int_32)[-1]) ){ goto $label$295 }
	
.LABEL $label$260
	if ( ((int_32)$28 < (int_32)[1]) ){ goto $label$259 }
	$30 = ($28 <= [256])
	CALL memset(($39 + [432]), [48], ( $28 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$305 }
	$30 = ($17 == 0)
	$17 = $28
	
.LOOP $label$306:
	if ( (($30 & [1]) == 0) ){ goto $label$307 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$307
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$306 }
	if ( $14 ){ goto $label$259 }
	$28 = ($28 & [255])
	goto $label$304 
	
.LABEL $label$305
	if ( $17 ){ goto $label$259 }
	
.LABEL $label$304
	CALL __fwritex(($39 + [432]), $28, $0)
	
.LABEL $label$259
	if ( (*($0) & [32]) ){ goto $label$258 }
	CALL __fwritex($25, ($7 - $25), $0)
	
.LABEL $label$258
	if ( ((int_32)$18 != (int_32)[8192]) ){ goto $label$256 }
	
.LABEL $label$257
	if ( ((int_32)$15 <= (int_32)$26) ){ goto $label$256 }
	$30 = ($37 <= [256])
	$37 = ($15 - $26)
	CALL memset(($39 + [432]), [32], ( $37 ? [256] : $30 ))
	$36 = *($0)
	$17 = ($36 & [32])
	if ( $30 ){ goto $label$309 }
	$30 = ($17 == 0)
	$17 = $37
	
.LOOP $label$310:
	if ( (($30 & [1]) == 0) ){ goto $label$311 }
	CALL __fwritex(($39 + [432]), [256], $0)
	$36 = *($0)
	
.LABEL $label$311
	$14 = ($36 & [32])
	$30 = ($14 == 0)
	$17 = ($17 + [-256])
	if ( ((uint_32)$17 > (uint_32)[255]) ){ goto $label$310 }
	if ( $14 ){ goto $label$256 }
	$37 = ($37 & [255])
	goto $label$308 
	
.LABEL $label$309
	if ( $17 ){ goto $label$256 }
	
.LABEL $label$308
	CALL __fwritex(($39 + [432]), $37, $0)
	
.LABEL $label$256
	$30 = ( $15 ? $26 : ((int_32)$15 > (int_32)$26) )
	
.LABEL $label$50
	if ( ((int_32)$30 < (int_32)[0]) ){ goto $label$15 }
	
.LABEL $label$24
	if ( ((int_32)$30 <= (int_32)$13) ){ goto $label$17 }
	goto $label$15 
	
.LABEL $label$16
	if ( $0 ){ goto $label$1 }
	if ( ($32 == 0) ){ goto $label$14 }
	$30 = [1]
	$1 = *($4 + [4])
	if ( ($1 == 0) ){ goto $label$4 }
	CALL $285(($3 + [16]), $1, $2)
	$1 = *($4 + [8])
	if ( ($1 == 0) ){ goto $label$13 }
	CALL $285(($3 + [32]), $1, $2)
	$1 = *($4 + [12])
	if ( ($1 == 0) ){ goto $label$12 }
	CALL $285(($3 + [48]), $1, $2)
	$1 = *($4 + [16])
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $285(($3 + [64]), $1, $2)
	$1 = *($4 + [20])
	if ( ($1 == 0) ){ goto $label$9 }
	CALL $285(($3 + [80]), $1, $2)
	$1 = *($4 + [24])
	if ( ($1 == 0) ){ goto $label$8 }
	CALL $285(($3 + [96]), $1, $2)
	$1 = *($4 + [28])
	if ( ($1 == 0) ){ goto $label$7 }
	CALL $285(($3 + [112]), $1, $2)
	$1 = *($4 + [32])
	if ( ($1 == 0) ){ goto $label$6 }
	CALL $285(($3 + [128]), $1, $2)
	$1 = *($4 + [36])
	if ( ($1 == 0) ){ goto $label$5 }
	CALL $285(($3 + [144]), $1, $2)
	$38 = [1]
	goto $label$1 
	
.LABEL $label$15
	*(CALL __errno_location()) = [75]
	goto $label$2 
	
.LABEL $label$14
	$38 = [0]
	goto $label$1 
	
.LABEL $label$13
	$30 = [2]
	goto $label$4 
	
.LABEL $label$12
	$30 = [3]
	goto $label$4 
	
.LABEL $label$11
	$38 = [0]
	goto $label$1 
	
.LABEL $label$10
	$30 = [4]
	goto $label$4 
	
.LABEL $label$9
	$30 = [5]
	goto $label$4 
	
.LABEL $label$8
	$30 = [6]
	goto $label$4 
	
.LABEL $label$7
	$30 = [7]
	goto $label$4 
	
.LABEL $label$6
	$30 = [8]
	goto $label$4 
	
.LABEL $label$5
	$30 = [9]
	
.LABEL $label$4
	$1 = ($4 + ($30 << [2]))
	
.LOOP $label$312:
	if ( *($1) ){ goto $label$3 }
	$1 = ($1 + [4])
	$38 = [1]
	$30 = ($30 + [1])
	if ( ((uint_32)$30 <= (uint_32)[9]) ){ goto $label$312 }
	goto $label$1 
	
.LABEL $label$3
	*(CALL __errno_location()) = [22]
	
.LABEL $label$2
	$38 = [-1]
	
.LABEL $label$1
	*([0] + [4]) = ($39 + [8128])
	$30
	$30
	return $38
}

void .FUNC $18 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (int_64)0
	$3 = (int_64)59
	$2 = [272]
	$5 = (int_64)0
	
.LOOP $label$1:
	$6 = (int_64)0
	if ( ((uint_64)$4 > (uint_64)(int_64)11) ){ goto $label$2 }
	$1 = *($2)
	if ( ((uint_32)(($1 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$1 = ($1 + [165])
	goto $label$3 
	
.LABEL $label$4
	$1 = ( ($1 + [208]) ? [0] : ((($1 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$6 = ((int_64)(CASTING uint_64)(uint_32 ($1 & [31])) << (int_64)((int_64)$3 & (int_64)4294967295))
	
.LABEL $label$2
	$2 = ($2 + [1])
	$4 = ((int_64)$4 + (int_64)1)
	$5 = ((int_64)$6 | (int_64)$5)
	$3 = ((int_64)$3 + (int_64)-5)
	if ( ((int_64)$3 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($5)
	$2 = ($0 + [224])
	CALL $195($7, $2, *($0), ($7 + [8]))
	CALL $196($7, $2, *($0), ($7 + [8]))
	CALL $197($7, $2, *($0), ($7 + [8]))
	CALL $198($7, $2, *($0), ($7 + [8]))
	CALL $199($7, $2, *($0), ($7 + [8]))
	CALL $200($7, $2, *($0), ($7 + [8]))
	CALL $201($7, $2, *($0), ($7 + [8]))
	CALL $202($7, $2, *($0), ($7 + [8]))
	CALL $203($7, $2, *($0), ($7 + [8]))
	CALL $204($7, $2, *($0), ($7 + [8]))
	CALL $205($7, $2, *($0), ($7 + [8]))
	CALL $206($7, $2, *($0), ($7 + [8]))
	CALL $207($7, $2, *($0), ($7 + [8]))
	CALL $208($7, ($0 + [304]), *($0), ($7 + [8]))
	CALL $209($0)
	*([0] + [4]) = ($7 + [16])
}

int_32 .FUNC $19 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = *([0] + [4])
	$4 = $5
	$2 = *($1 + [4])
	$1 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ((uint_32)$3 <= (uint_32)[512]) ){ goto $label$2 }
	$5 = CALL malloc($3)
	CALL read_action_data($5, $3)
	CALL free($5)
	goto $label$1 
	
.LABEL $label$2
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	$3 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$3 }
	$1 = *((*($3) + $1))
	
.LABEL $label$3
	CALL void $3((int_32 $1))
	*([0] + [4]) = $4
	return [1]
}

void .FUNC $184 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)*($1 + [32]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [8]) = *(*($3))
	$3 = *($3 + [4])
	*($1 + [16]) = *($3)
	*(($5 = ($1 + [24]))) = *(($3 + [8]))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	CALL eosio_assert([1], [784])
	CALL memcpy($6, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($6 | [8]), ($1 + [8]), [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($6 + [16]), ($1 + [16]), [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($6 + [24]), $5, [8])
	CALL db_update_i64(*($1 + [36]), $2, $6, [32])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($6 + [32])
}

void .FUNC $187 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	CALL eosio_assert(((int_32)*($1 + [20]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	$4 = *($1)
	$5 = ($1 + [8])
	CALL $264($5, *($3))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [720])
	$3 = *($1 + [8])
	$6 = ( *(($1 + [12])) ? uint_32($3 >> [1]) : ($3 & [1]) )
	$3 = ($6 + [8])
	$7 = (CASTING uint_64)(uint_32 $6)
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	*($9) = $8
	*($9 + [8]) = ($8 + $3)
	CALL eosio_assert(((int_32)$3 > (int_32)[7]), [784])
	CALL memcpy($8, $1, [8])
	*($9 + [4]) = ($8 + [8])
	CALL $71($9, $5)
	CALL db_update_i64(*($1 + [24]), $2, $8, $3)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($8)
	
.LABEL $label$4
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$5 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $218 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)108
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $186 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	$7 = ($4 + $6)
	*($8 + [40]) = $7
	if ( ((uint_32)$6 <= (uint_32)[512]) ){ goto $label$7 }
	CALL free($4)
	$7 = *(($8 + [40]))
	$4 = *($8 + [36])
	
.LABEL $label$7
	*(($6 = CALL $259([32])) + [16]) = [0]
	*($6 + [8 align=4]) = (int_64)0
	*($6 + [20]) = $0
	CALL eosio_assert(((uint_32)($7 - $4) > (uint_32)[7]), [256])
	CALL memcpy($6, $4, [8])
	*($8 + [36]) = ($4 + [8])
	CALL $151(($8 + [32]), ($6 + [8]))
	*($6 + [24]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [24])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $188(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	if ( ((*($4 + [8]) & [1]) == 0) ){ goto $label$10 }
	CALL $261(*(($4 + [16])))
	
.LABEL $label$10
	CALL $261($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

void .FUNC $180 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_32 $5
	*($0 + [8]) = (int_64)1398362884
	*($0) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [224])
	CALL eosio_assert(((uint_32)$2 > (uint_32)[7]), [256])
	CALL memcpy($0, $1, [8])
	CALL eosio_assert(((int_32)($2 & [-8]) != (int_32)[8]), [256])
	CALL memcpy(($0 + [8]), ($1 + [8]), [8])
}

void .FUNC $116 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$5 = *($0)
	$8 = *($0 + [8])
	$3 = ($2 - $1)
	$4 = int_32($3 >> [4])
	if ( ((uint_32)$4 <= (uint_32)int_32(($8 - $5) >> [4])) ){ goto $label$4 }
	if ( ($5 == 0) ){ goto $label$5 }
	*($0 + [4]) = $5
	CALL $261($5)
	$8 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$5
	if ( ((uint_32)$4 >= (uint_32)[268435456]) ){ goto $label$1 }
	$5 = [268435455]
	if ( ((uint_32)int_32($8 >> [4]) > (uint_32)[134217726]) ){ goto $label$6 }
	$5 = $4
	$2 = int_32($8 >> [3])
	if ( ($2 <= $4) ){ goto $label$6 }
	$5 = $2
	if ( ((uint_32)$2 >= (uint_32)[268435456]) ){ goto $label$1 }
	
.LABEL $label$6
	$4 = ($5 << [4])
	$5 = CALL $259($4)
	*($0) = $5
	*($0 + [4]) = $5
	*(($0 + [8])) = ($5 + $4)
	if ( ((int_32)$3 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($5, $1, $3)
	*(($0 = ($0 + [4]))) = (*($0) + $3)
	return 
	
.LABEL $label$4
	$3 = int_32($3 >> [4])
	$3 = (*($0 + [4]) - $5)
	$8 = ( ($1 + $3) ? $2 : ((uint_32)$4 > (uint_32)$3) )
	$6 = ($8 - $1)
	$7 = int_32($6 >> [4])
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memmove($5, $1, $6)
	
.LABEL $label$7
	if ( ((uint_32)$4 <= (uint_32)$3) ){ goto $label$2 }
	$1 = ($2 - $8)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$3 }
	$0 = ($0 + [4])
	CALL memcpy(*($0), $8, $1)
	*($0) = (*($0) + $1)
	return 
	
.LABEL $label$3
	return 
	
.LABEL $label$2
	*(($0 + [4])) = ($5 + ($7 << [4]))
	return (unreachable)
	
.LABEL $label$1
	CALL $273($0)
}

void .FUNC $117 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	$2 = *($1)
	$7 = *(*($0 + [20]))
	$6 = *(*($0 + [16]))
	$5 = *(*($0 + [12]))
	$3 = *(*($0 + [4]))
	$4 = *(*(*($0 + [8]) + [4]) + [8])
	$8 = *($0 + [24])
	$14 = [0]
	*($16 + [32]) = [0]
	*($16 + [36]) = [0]
	*($16 + [40]) = [0]
	$12 = (*($8 + [4]) - *($8))
	$9 = int_32($12 >> [4])
	if ( ($9 == 0) ){ goto $label$4 }
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$1 }
	$14 = CALL $259($12)
	*(($16 + [40])) = ($14 + ($9 << [4]))
	*($16 + [36]) = $14
	*($16 + [32]) = $14
	$9 = *($8)
	$8 = (*(($8 + [4])) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($14, $9, $8)
	$15 = ($14 + $8)
	*($16 + [36]) = $15
	goto $label$2 
	
.LABEL $label$4
	$15 = [0]
	goto $label$2 
	
.LABEL $label$3
	$15 = $14
	
.LABEL $label$2
	$11 = *(*($0 + [36]))
	$10 = *(*($0 + [32]))
	$9 = *(*($0 + [28]))
	$8 = *($0 + [40])
	*(($12 = ($16 + [24]))) = *(($8 + [24]))
	*(($13 = ($16 + [16]))) = *(($8 + [16]))
	*($16 + [8]) = *(($8 + [8]))
	*($16) = *($8)
	$0 = *(*($0 + [44]))
	*(($8 = (($16 + [48]) + [24]))) = *($12)
	*(($12 = (($16 + [48]) + [16]))) = *($13)
	*($16 + [56]) = *($16 + [8])
	*($16 + [48]) = *($16)
	*($1) = $2
	*($1 + [8]) = $3
	*($1 + [16]) = $4
	*($1 + [24]) = $5
	*($1 + [32]) = $6
	*($1 + [40]) = $7
	$13 = ($1 + [48])
	if ( ((int_32)$13 == (int_32)($16 + [32])) ){ goto $label$5 }
	CALL $116($13, $14, $15)
	$14 = *($16 + [32])
	
.LABEL $label$5
	*($1 + [64]) = $10
	*($1 + [60]) = $9
	*($1 + [72]) = $11
	*($1 + [80]) = *($16 + [48])
	*(($1 + [92])) = *($16 + [60])
	*(($1 + [88])) = *($16 + [56])
	*(($1 + [84])) = *($16 + [52])
	*(($1 + [108])) = *(($16 + [76]))
	*(($1 + [104])) = *($8)
	*(($1 + [100])) = *(($16 + [68]))
	*(($1 + [96])) = *($12)
	*($1 + [112]) = $0
	if ( ($14 == 0) ){ goto $label$6 }
	*($16 + [36]) = $14
	CALL $261($14)
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $273(($16 + [32]))
}

void .FUNC $114 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_64 $10
	int_64 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	$16 = (*([0] + [4]) - [80])
	*([0] + [4]) = $16
	$7 = *(*($0 + [24]))
	$6 = *(*($0 + [20]))
	$5 = *(*($0 + [16]))
	$3 = *(*($0 + [8]))
	$2 = *(*($0 + [4]))
	$4 = *(*(*($0 + [12]) + [4]) + [8])
	$8 = *($0 + [28])
	$14 = [0]
	*($16 + [32]) = [0]
	*($16 + [36]) = [0]
	*($16 + [40]) = [0]
	$12 = (*($8 + [4]) - *($8))
	$9 = int_32($12 >> [4])
	if ( ($9 == 0) ){ goto $label$4 }
	if ( ((uint_32)$9 >= (uint_32)[268435456]) ){ goto $label$1 }
	$14 = CALL $259($12)
	*(($16 + [40])) = ($14 + ($9 << [4]))
	*($16 + [36]) = $14
	*($16 + [32]) = $14
	$9 = *($8)
	$8 = (*(($8 + [4])) - $9)
	if ( ((int_32)$8 < (int_32)[1]) ){ goto $label$3 }
	CALL memcpy($14, $9, $8)
	$15 = ($14 + $8)
	*($16 + [36]) = $15
	goto $label$2 
	
.LABEL $label$4
	$15 = [0]
	goto $label$2 
	
.LABEL $label$3
	$15 = $14
	
.LABEL $label$2
	$11 = *(*($0 + [40]))
	$10 = *(*($0 + [36]))
	$9 = *(*($0 + [32]))
	$8 = *($0 + [44])
	*(($12 = ($16 + [24]))) = *(($8 + [24]))
	*(($13 = ($16 + [16]))) = *(($8 + [16]))
	*($16 + [8]) = *(($8 + [8]))
	*($16) = *($8)
	$0 = *(*($0 + [48]))
	*(($8 = (($16 + [48]) + [24]))) = *($12)
	*(($12 = (($16 + [48]) + [16]))) = *($13)
	*($16 + [56]) = *($16 + [8])
	*($16 + [48]) = *($16)
	*($1) = $2
	*($1 + [8]) = $3
	*($1 + [16]) = $4
	*($1 + [24]) = $5
	*($1 + [32]) = $6
	*($1 + [40]) = $7
	$13 = ($1 + [48])
	if ( ((int_32)$13 == (int_32)($16 + [32])) ){ goto $label$5 }
	CALL $116($13, $14, $15)
	$14 = *($16 + [32])
	
.LABEL $label$5
	*($1 + [64]) = $10
	*($1 + [60]) = $9
	*($1 + [72]) = $11
	*($1 + [80]) = *($16 + [48])
	*(($1 + [92])) = *($16 + [60])
	*(($1 + [88])) = *($16 + [56])
	*(($1 + [84])) = *($16 + [52])
	*(($1 + [108])) = *(($16 + [76]))
	*(($1 + [104])) = *($8)
	*(($1 + [100])) = *(($16 + [68]))
	*(($1 + [96])) = *($12)
	*($1 + [112]) = $0
	if ( ($14 == 0) ){ goto $label$6 }
	*($16 + [36]) = $14
	CALL $261($14)
	
.LABEL $label$6
	*([0] + [4]) = ($16 + [80])
	return (unreachable)
	
.LABEL $label$1
	CALL $273(($16 + [32]))
}

int_32 .FUNC $115 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $106($0, ($1 + [48]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [60]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [64]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [72]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[31]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [80]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [112]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $112 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [16])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0)
	CALL $114(*($0 + [4]), $1)
	$3 = *($1 + [48])
	$4 = *(($1 + [52]))
	$5 = ($4 - $3)
	$7 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	$6 = [48]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$2
	$4 = ($6 + [53])
	if ( ($4 <= [513]) ){ goto $label$4 }
	$6 = CALL malloc($4)
	goto $label$3 
	
.LABEL $label$4
	$6 = ($9 - (($4 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$3
	*($8 + [4]) = $6
	*($8) = $6
	*($8 + [8]) = ($6 + $4)
	CALL $115($8, $1)
	$7 = *($1)
	*($1 + [120]) = CALL db_store_i64(*($2 + [8]), (int_64)7337609168256413696, *(*($0 + [8])), $7, $6, $4)
	if ( ($4 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$6 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $113 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $259(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $273($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [48])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [52])) = $6
	CALL $261($6)
	
.LABEL $label$11
	CALL $261($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $261($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC $110 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	*(($3 = CALL $259([128])) + [56]) = [0]
	*($3 + [48 align=4]) = (int_64)0
	*($3 + [112]) = [0]
	*($3 + [116]) = $1
	CALL $112(($7 + [16]), $3)
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [120])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $113(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$3 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($3 == 0) ){ goto $label$3 }
	$1 = *($3 + [48])
	if ( ($1 == 0) ){ goto $label$4 }
	*(($3 + [52])) = $1
	CALL $261($1)
	
.LABEL $label$4
	CALL $261($3)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $111 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	CALL eosio_assert([1], [784])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $237 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [8]) = [0]
	$4 = *($3 + [8])
	*($7 + [16]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$6 = ($7 + [8])
	$5 = $3
	goto $label$1 
	
.LABEL $label$2
	$6 = CALL $260($4)
	*($7 + [8]) = $6
	$5 = *($3)
	
.LABEL $label$1
	CALL memcpy($6, $5, $4)
	*($7 + [20]) = *($3 + [12])
	CALL $240($0, ($7 + [8]), [0])
	if ( (*(($7 + [16])) <= [9]) ){ goto $label$3 }
	$3 = *($7 + [8])
	if ( ($3 == 0) ){ goto $label$3 }
	CALL $262($3)
	
.LABEL $label$3
	*($0 + [16]) = $1
	*($0 + [24]) = $1
	*($0 + [28]) = $2
	*($0 + [32]) = [0]
	*(($0 + [20])) = $1
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$4 }
	$3 = *($0)
	if ( ($3 == 0) ){ goto $label$8 }
	CALL void ($7 + [24])((int_32 ($0 + [4])), (int_32 $1), (int_32 $2), (int_32 *(($3 & [-2]) + [4])))
	$1 = *($7 + [24])
	if ( ((int_32)$1 == (int_32)*($0 + [28])) ){ goto $label$7 }
	$2 = *($7 + [28])
	goto $label$5 
	
.LABEL $label$8
	*($7 + [28]) = $2
	*($7 + [24]) = $2
	$1 = $2
	goto $label$6 
	
.LABEL $label$7
	$2 = *($7 + [28])
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$5 }
	
.LABEL $label$6
	if ( ((int_32)*(($0 + [20])) != (int_32)$2) ){ goto $label$5 }
	*(($0 + [32])) = [1]
	
.LABEL $label$5
	*(($0 + [20])) = $1
	$1 = ($0 + [24])
	*(($0 + [16])) = *($1)
	*($1) = $2
	
.LABEL $label$4
	*([0] + [4]) = ($7 + [32])
	return $0
}

int_32 .FUNC $118 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [256])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $119($0, ($1 + [48]))
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)*($0 + [4])), [256])
	CALL memcpy(($1 + [60]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [64]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [256])
	CALL memcpy(($1 + [72]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[31]), [256])
	CALL memcpy(($1 + [80]), *($0 + [4]), [32])
	$2 = (*($0 + [4]) + [32])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [256])
	CALL memcpy(($1 + [112]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

int_32 .FUNC $119 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = *($0 + [4])
	$6 = [0]
	$5 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($7 <= *($2)), [1936])
	$7 = *($3)
	$4 = *($7)
	$7 = ($7 + [1])
	*($3) = $7
	$6 = ($6 & [255])
	$5 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $6)) | (int_64)$5)
	$6 = ($6 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$7 = *($1)
	$2 = *($1 + [4])
	$6 = int_32(($2 - $7) >> [4])
	$4 = (CASTING uint_32)(uint_64 $5)
	if ( ((uint_32)$4 <= (uint_32)$6) ){ goto $label$4 }
	CALL $120($1, ($4 - $6))
	$2 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$4 >= (uint_32)$6) ){ goto $label$5 }
	$2 = ($7 + ($4 << [4]))
	*(($1 + [4])) = $2
	
.LABEL $label$5
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$2 }
	
.LABEL $label$3
	$4 = ($0 + [4])
	$6 = *($4)
	
.LOOP $label$6:
	$3 = ($0 + [8])
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [256])
	CALL memcpy($7, *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((uint_32)(*($3) - $6) > (uint_32)[7]), [256])
	CALL memcpy(($7 + [8]), *($4), [8])
	$6 = (*($4) + [8])
	*($4) = $6
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC sprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [12]) = $2
	$2 = CALL vsprintf($0, $1, $2)
	*([0] + [4]) = ($3 + [16])
	return $2
}

int_32 .FUNC __towrite (int_32 $0)
{
	int_32 $1
	$1 = *($0 + [74])
	*($0 + [74]) = (($1 + [255]) | $1)
	$1 = *($0)
	if ( ($1 & [8]) ){ goto $label$1 }
	*($0 + [4 align=4]) = (int_64)0
	$1 = *($0 + [44])
	*($0 + [28]) = $1
	*($0 + [20]) = $1
	*($0 + [16]) = ($1 + *($0 + [48]))
	return [0]
	
.LABEL $label$1
	*($0) = ($1 | [32])
	return [-1]
}

int_32 .FUNC __lctrans_impl (int_32 $0, int_32 $1)
{
	if ( ($1 == 0) ){ goto $label$1 }
	$1 = CALL __mo_lookup(*($1), *($1 + [4]), $0)
	return ( $1 ? $0 : $1 )
	
.LABEL $label$1
	return ( [0] ? $0 : [0] )
}

int_32 .FUNC __lctrans (int_32 $0, int_32 $1)
{
	return CALL __lctrans_impl($0, $1)
}

int_32 .FUNC strcmp (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ((int_32)$2 != (int_32)($3 & [255])) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	
.LOOP $label$2:
	$3 = *($1)
	$2 = *($0)
	if ( ($2 == 0) ){ goto $label$1 }
	$0 = ($0 + [1])
	$1 = ($1 + [1])
	if ( ((int_32)$2 == (int_32)($3 & [255])) ){ goto $label$2 }
	
.LABEL $label$1
	return ($2 - ($3 & [255]))
}

int_32 .FUNC __mo_lookup (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	$3 = *($0)
	$10 = ((int_32)$3 == (int_32)[-1794895138])
	$9 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	$4 = *($0 + [8])
	$5 = ( $4 ? $9 : $10 )
	if ( ((uint_32)$5 >= (uint_32)uint_32($1 >> [2])) ){ goto $label$4 }
	$12 = ($1 - ($5 << [2]))
	$11 = *($0 + [12])
	$6 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$6 >= (uint_32)$12) ){ goto $label$3 }
	$11 = *($0 + [16])
	$10 = ( $11 ? ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24]))) : $10 )
	if ( ((uint_32)$10 >= (uint_32)$12) ){ goto $label$2 }
	if ( ((($10 | $6) & [3]) == 0) ){ goto $label$1 }
	return [0]
	
.LABEL $label$4
	return [0]
	
.LABEL $label$3
	return [0]
	
.LABEL $label$2
	return [0]
	
.LABEL $label$1
	$12 = uint_32($6 >> [2])
	if ( ((int_32)$3 != (int_32)[-1794895138]) ){ goto $label$16 }
	$5 = uint_32($5 >> [1])
	$6 = ($5 << [1])
	$9 = ($0 + (($6 + $12) << [2]))
	$11 = *(($9 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$15 }
	$8 = *($9)
	if ( ((uint_32)$8 >= (uint_32)($1 - $11)) ){ goto $label$14 }
	$9 = $5
	$7 = [0]
	
.LOOP $label$17:
	if ( *(($0 + ($11 + $8))) ){ goto $label$9 }
	$11 = CALL strcmp($2, ($0 + $11))
	if ( ($11 == 0) ){ goto $label$11 }
	if ( ((int_32)$4 == (int_32)[1]) ){ goto $label$7 }
	$13 = [0]
	$4 = ( $9 ? ($4 - $9) : $11 )
	$9 = uint_32($4 >> [1])
	$11 = ((int_32)$11 < (int_32)[0])
	$7 = ( $7 ? $5 : $11 )
	$5 = ($7 + $9)
	$6 = ($5 << [1])
	$8 = ($0 + (($6 + $12) << [2]))
	$11 = *(($8 + [4]))
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$10 }
	$8 = *($8)
	if ( ($8 <= ($1 - $11)) ){ goto $label$17 }
	goto $label$10 
	
.LABEL $label$16
	$8 = uint_32($9 >> [1])
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$13 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ((uint_32)$11 >= (uint_32)($1 - $4)) ){ goto $label$12 }
	$5 = $8
	$7 = [0]
	
.LOOP $label$18:
	if ( *(($0 + ($4 + $11))) ){ goto $label$8 }
	$4 = CALL strcmp($2, ($0 + $4))
	if ( ($4 == 0) ){ goto $label$11 }
	if ( ((int_32)$9 == (int_32)[1]) ){ goto $label$6 }
	$13 = [0]
	$9 = ( $5 ? ($9 - $5) : $4 )
	$5 = uint_32($9 >> [1])
	$4 = ((int_32)$4 < (int_32)[0])
	$7 = ( $7 ? $8 : $4 )
	$8 = ($7 + $5)
	$6 = ($8 << [1])
	$11 = ($0 + (($6 + $12) << [2]))
	$4 = *(($11 + [4]))
	$4 = ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24])))
	if ( ((uint_32)$4 >= (uint_32)$1) ){ goto $label$10 }
	$11 = *($11)
	$11 = ((($11 << [24]) | (($11 << [8]) & [16711680])) | ((uint_32($11 >> [8]) & [65280]) | uint_32($11 >> [24])))
	if ( ($11 <= ($1 - $4)) ){ goto $label$18 }
	goto $label$10 
	
.LABEL $label$15
	return [0]
	
.LABEL $label$14
	return [0]
	
.LABEL $label$13
	return [0]
	
.LABEL $label$12
	return [0]
	
.LABEL $label$11
	$9 = ((int_32)$3 == (int_32)[-1794895138])
	$10 = ($0 + (($6 + uint_32($10 >> [2])) << [2]))
	$4 = *(($10 + [4]))
	$11 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$11 >= (uint_32)$1) ){ goto $label$5 }
	$13 = [0]
	$4 = *($10)
	$4 = ( $4 ? ((($4 << [24]) | (($4 << [8]) & [16711680])) | ((uint_32($4 >> [8]) & [65280]) | uint_32($4 >> [24]))) : $9 )
	if ( ((uint_32)$4 >= (uint_32)($1 - $11)) ){ goto $label$10 }
	return ( [0] ? ($0 + $11) : *(($0 + ($11 + $4))) )
	
.LABEL $label$10
	return $13
	
.LABEL $label$9
	return [0]
	
.LABEL $label$8
	return [0]
	
.LABEL $label$7
	return [0]
	
.LABEL $label$6
	return [0]
	
.LABEL $label$5
	return [0]
}

void .FUNC frexpl (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [32])
	*([0] + [4]) = $6
	$4 = (CASTING uint_32)(uint_64 (uint_64)$2 >> (uint_64)(int_64)48)
	$5 = ($4) & [32767]
	if ( ((int_32)$5) == (int_32)[32767]) ){ goto $label$1 }
	if ( $5 ){ goto $label$4 }
	if ( (CALL __eqtf2($1, $2, (int_64)0, (int_64)0) == 0) ){ goto $label$3 }
	CALL __multf3($6, $1, $2, (int_64)0, (int_64)4645181540655955968)
	CALL frexpl(($6 + [16]), *($6), *(($6 + [8])), $3)
	$4 = (*($3) + [-120])
	$2 = *($6 + [24])
	$1 = *($6 + [16])
	goto $label$2 
	
.LABEL $label$4
	*($3) = (($4 & [32767]) + [-16382])
	$2 = ((int_64)((int_64)(CASTING uint_64)(uint_32 (($4 & [32768]) | [16382])) << (int_64)48) | (int_64)((int_64)$2 & (int_64)281474976710655))
	goto $label$1 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	*($3) = $4
	
.LABEL $label$1
	*($0) = $1
	*(($0 + [8])) = $2
	*([0] + [4]) = ($6 + [32])
}

int_32 .FUNC __fpclassifyl (int_64 $0, int_64 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	$2 = ((int_64)$1 & (int_64)281474976710655)
	$3 = ((CASTING uint_32)(uint_64 (uint_64)$1 >> (uint_64)(int_64)48)) & [32767]
	if ( ((int_32)$3) == (int_32)[32767]) ){ goto $label$2 }
	$4 = [4]
	if ( $3 ){ goto $label$1 }
	return ( [3] ? [2] : ((int_64)((int_64)$2 | (int_64)$0) != (int_64)0) )
	
.LABEL $label$2
	$4 = (int_64)(((int_64)$2 | (int_64)$0) == 0)
	
.LABEL $label$1
	return $4
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC wcrtomb (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	$3 = [1]
	if ( ($0 == 0) ){ goto $label$1 }
	if ( ((uint_32)$1 > (uint_32)[127]) ){ goto $label$2 }
	*($0) = $1
	return [1]
	
.LABEL $label$2
	if ( (*([0]) == 0) ){ goto $label$8 }
	if ( ((uint_32)$1 > (uint_32)[2047]) ){ goto $label$7 }
	*($0 + [1]) = (($1 & [63]) | [128])
	*($0) = (uint_32($1 >> [6]) | [192])
	return [2]
	
.LABEL $label$8
	if ( ((int_32)($1 & [-128]) != (int_32)[57216]) ){ goto $label$6 }
	*($0) = $1
	return [1]
	
.LABEL $label$7
	if ( ($1 <= [55296]) ){ goto $label$5 }
	if ( ((int_32)($1 & [-8192]) == (int_32)[57344]) ){ goto $label$5 }
	if ( ((uint_32)($1 + [-65536]) > (uint_32)[1048575]) ){ goto $label$4 }
	*($0) = (uint_32($1 >> [18]) | [240])
	*($0 + [3]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [12]) & [63]) | [128])
	*($0 + [2]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [4]
	
.LABEL $label$6
	*(CALL __errno_location()) = [84]
	goto $label$3 
	
.LABEL $label$5
	*($0) = (uint_32($1 >> [12]) | [224])
	*($0 + [2]) = (($1 & [63]) | [128])
	*($0 + [1]) = ((uint_32($1 >> [6]) & [63]) | [128])
	return [3]
	
.LABEL $label$4
	*(CALL __errno_location()) = [84]
	
.LABEL $label$3
	$3 = [-1]
	
.LABEL $label$1
	return $3
}

int_32 .FUNC $29 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [80])
	$6 = $4
	*([0] + [4]) = $4
	$2 = *($1 + [4])
	$5 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$4 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$4 = [0]
	goto $label$1 
	
.LABEL $label$3
	$4 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$2
	CALL read_action_data($4, $1)
	
.LABEL $label$1
	CALL $180(($6 + [16]), $4, $1)
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($4)
	
.LABEL $label$5
	*(($1 = (($6 + [32]) + [8]))) = *((($6 + [16]) + [8]))
	*($6 + [32]) = *($6 + [16])
	*((($6 + [48]) + [8])) = *($1)
	*($6 + [48]) = *($6 + [32])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$5 = *((*($1) + $5))
	
.LABEL $label$6
	$3 = *((($6 + [48]) + [8]))
	*((($6 + [64]) + [8])) = $3
	*(($6 + [8])) = $3
	$3 = *($6 + [48])
	*($6 + [64]) = $3
	*($6) = $3
	CALL void $1((int_32 $6), (int_32 $5))
	*([0] + [4]) = ($6 + [80])
	return [1]
}

void .FUNC $28 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [2160]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$7 = *($1 + [8])
	CALL eosio_assert((((int_64)$7 == (int_64)1397703940) | ((int_64)$7 == (int_64)1414549508)), [2176])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = *(($0 + [288]))
	$10 = *(($0 + [292]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)$7) ){ goto $label$5 }
	$10 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [264])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$9 }
	$2 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$5), [304])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = CALL db_find_i64(*(($0 + [264])), *(($0 + [272])), (int_64)7035938535980793856, $7)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $57($5, $2)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$5), [304])
	
.LABEL $label$8
	*($11 + [8]) = $1
	CALL eosio_assert([1], [560])
	CALL $181($5, $2, (int_64)0, ($11 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $235 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[0]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [1])
	*($3 + [4]) = (*($3 + [4]) + [1])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [32]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [40]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($3 + [4]), ($0 + [48]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
}

int_32 .FUNC $278 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = *($0 + [28])
	$6 = (*($0 + [20]) - $4)
	$3 = *($0 + [84])
	$5 = *($3 + [4])
	$6 = ( $5 ? $6 : ($5 <= $6) )
	if ( ($6 == 0) ){ goto $label$1 }
	CALL memcpy(*($3), $4, $6)
	*($3) = (*($3) + $6)
	$5 = (*($5) - $6)
	*(($5 = ($3 + [4]))) = $5
	
.LABEL $label$1
	$6 = *($3)
	$5 = ( $5 ? $2 : ($5 <= $2) )
	if ( ($5 == 0) ){ goto $label$2 }
	CALL memcpy($6, $1, $5)
	$6 = (*($3) + $5)
	*($3) = $6
	*(($3 = ($3 + [4]))) = (*($3) - $5)
	
.LABEL $label$2
	*($6) = [0]
	$3 = *($0 + [44])
	*(($0 + [28])) = $3
	*(($0 + [20])) = $3
	return $2
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$1 != (int_32)[0]), [256])
	CALL memcpy(($5 + [15]), $3, [1])
	$6 = *($5 + [15])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 ((int_32)($6 & [255]) != (int_32)[0])), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC $20 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	*([0] + [4]) = $10
	*($10 + [15]) = $1
	$6 = (int_64)0
	$5 = (int_64)59
	$1 = [2160]
	$7 = (int_64)0
	
.LOOP $label$1:
	$8 = (int_64)0
	if ( ((uint_64)$6 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($1)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$8 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$1 = ($1 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($7)
	$3 = *(($0 + [248]))
	$9 = *(($0 + [252]))
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$5 }
	$1 = ($9 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($1)) == (int_64)109) ){ goto $label$5 }
	$9 = $1
	$2 = ($1 + [-24])
	$1 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$1 = ($0 + [224])
	if ( ((int_32)$9 == (int_32)$3) ){ goto $label$10 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$1), [304])
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, (int_64)109)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	$2 = CALL $51($1, $2)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$1), [304])
	
.LABEL $label$9
	*($10) = ($10 + [15])
	CALL eosio_assert([1], [560])
	CALL $193($1, $2, (int_64)0, $10)
	goto $label$7 
	
.LABEL $label$8
	$6 = *($0)
	*($10 + [8]) = ($10 + [15])
	CALL $192($10, $1, $6, ($10 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = (*([0] + [4]) - [16])
	$8 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$7 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$6 = [0]
	goto $label$1 
	
.LABEL $label$3
	$6 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $1)
	
.LABEL $label$1
	*($8 + [8]) = (int_64)0
	*($8) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[7]), [256])
	CALL memcpy($8, $6, [8])
	CALL eosio_assert(((int_32)($1 & [-8]) != (int_32)[8]), [256])
	$5 = ($8 + [8])
	CALL memcpy($5, ($6 + [8]), [8])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($6)
	
.LABEL $label$5
	$1 = ($0 + int_32($2 >> [1]))
	$4 = *($5)
	$3 = *($8)
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$7 = *((*($1) + $7))
	
.LABEL $label$6
	CALL void $1((int_32 $3), (int_64 $4), (int_64 $7))
	*([0] + [4]) = ($8 + [16])
	return [1]
}

void .FUNC $22 (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	*($11 + [24]) = $1
	*($11 + [16]) = $2
	$2 = (int_64)0
	$7 = (int_64)59
	$6 = [2160]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$3 = *($6)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$3 = ($3 + [165])
	goto $label$3 
	
.LABEL $label$4
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$2
	$6 = ($6 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$4 = *(($0 + [248]))
	$10 = *(($0 + [252]))
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$5 }
	$6 = ($10 + [-24])
	$5 = ([0] - $4)
	
.LOOP $label$6:
	if ( ((int_64)*(*($6)) == (int_64)$1) ){ goto $label$5 }
	$10 = $6
	$3 = ($6 + [-24])
	$6 = $3
	if ( ((int_32)($3 + $5) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$6 = ($0 + [224])
	if ( ((int_32)$10 == (int_32)$4) ){ goto $label$10 }
	$3 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$6), [304])
	if ( $3 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$3 = CALL db_find_i64(*(($0 + [224])), *(($0 + [232])), (int_64)7035939398956875776, $1)
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$8 }
	$3 = CALL $51($6, $3)
	CALL eosio_assert(((int_32)*($3 + [16]) == (int_32)$6), [304])
	
.LABEL $label$9
	*($11 + [8]) = ($11 + [16])
	CALL eosio_assert([1], [560])
	CALL $190($6, $3, (int_64)0, ($11 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$2 = *($0)
	*($11 + [12]) = ($11 + [16])
	*($11 + [8]) = ($11 + [24])
	CALL $189($11, $6, $2, ($11 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $151(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $274(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $274(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $261(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $261(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $261(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

void .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [2160]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$3 = *(($0 + [328]))
	$10 = *(($0 + [332]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)1) ){ goto $label$5 }
	$10 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [304])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$9 }
	$2 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$5), [304])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = CALL db_find_i64(*(($0 + [304])), *(($0 + [312])), (int_64)-7876370025341255680, (int_64)1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $186($5, $2)
	CALL eosio_assert(((int_32)*($2 + [20]) == (int_32)$5), [304])
	
.LABEL $label$8
	*($11 + [8]) = $1
	CALL eosio_assert([1], [560])
	CALL $187($5, $2, (int_64)0, ($11 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [16])
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$8 = (*([0] + [4]) - [96])
	$10 = $8
	*([0] + [4]) = $8
	$2 = *($1 + [4])
	$9 = *($1)
	$1 = [0]
	$6 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$6 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($8 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $6
	
.LABEL $label$2
	CALL read_action_data($6, $3)
	
.LABEL $label$1
	*((($10 + [16]) + [24])) = (int_64)1398362884
	*($10 + [24]) = (int_64)0
	*($10 + [16]) = (int_64)0
	*($10 + [32]) = (int_64)0
	CALL eosio_assert([1], [160])
	$7 = (int_64)5462355
	
.LOOP $label$5:
	$8 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$8 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($8, [224])
	*($10 + [84]) = $6
	*($10 + [80]) = $6
	*($10 + [88]) = ($6 + $3)
	*($10 + [48]) = ($10 + [80])
	*($10 + [64]) = ($10 + [16])
	CALL $182(($10 + [64]), ($10 + [48]))
	if ( ($3 <= [513]) ){ goto $label$8 }
	CALL free($6)
	
.LABEL $label$8
	$7 = *((($10 + [16]) + [8]))
	*(($10 + [60])) = *(($10 + [44]))
	*(($1 = (($10 + [48]) + [8]))) = *(($10 + [40]))
	$4 = *($10 + [16])
	*($10 + [48]) = *($10 + [32])
	*($10 + [52]) = *(($10 + [36]))
	*((($10 + [64]) + [8])) = *($1)
	*($10 + [64]) = *($10 + [48])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$9 }
	$9 = *((*($1) + $9))
	
.LABEL $label$9
	$5 = *((($10 + [64]) + [8]))
	*((($10 + [80]) + [8])) = $5
	*(($10 + [8])) = $5
	$5 = *($10 + [64])
	*($10 + [80]) = $5
	*($10) = $5
	CALL void $1((int_32 $4), (int_64 $7), (int_64 $10), (int_32 $9))
	*([0] + [4]) = ($10 + [96])
	return [1]
}

void .FUNC $26 (int_32 $0, int_64 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [48])
	*([0] + [4]) = $12
	*($12 + [40]) = $1
	*($12 + [32]) = $2
	$2 = (int_64)0
	$8 = (int_64)59
	$7 = [2160]
	$9 = (int_64)0
	
.LOOP $label$1:
	$10 = (int_64)0
	if ( ((uint_64)$2 > (uint_64)(int_64)11) ){ goto $label$2 }
	$4 = *($7)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$4 = ($4 + [165])
	goto $label$3 
	
.LABEL $label$4
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$10 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$8 & (int_64)4294967295))
	
.LABEL $label$2
	$7 = ($7 + [1])
	$2 = ((int_64)$2 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$8 = ((int_64)$8 + (int_64)-5)
	if ( ((int_64)$8 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($9)
	$5 = *(($0 + [568]))
	$11 = *(($0 + [572]))
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$5 }
	$7 = ($11 + [-24])
	$6 = ([0] - $5)
	
.LOOP $label$6:
	if ( ((int_64)*(*($7)) == (int_64)$1) ){ goto $label$5 }
	$11 = $7
	$4 = ($7 + [-24])
	$7 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$7 = ($0 + [544])
	if ( ((int_32)$11 == (int_32)$5) ){ goto $label$10 }
	$4 = *(($11 + [-24]))
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [304])
	if ( $4 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$4 = CALL db_find_i64(*(($0 + [544])), *(($0 + [552])), (int_64)6714758524877189120, $1)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$8 }
	$4 = CALL $84($7, $4)
	CALL eosio_assert(((int_32)*($4 + [32]) == (int_32)$7), [304])
	
.LABEL $label$9
	*($12 + [20]) = $3
	*($12 + [16]) = ($12 + [32])
	CALL eosio_assert([1], [560])
	CALL $184($7, $4, (int_64)0, ($12 + [16]))
	goto $label$7 
	
.LABEL $label$8
	$2 = *($0)
	*($12 + [24]) = $3
	*($12 + [20]) = ($12 + [32])
	*($12 + [16]) = ($12 + [40])
	CALL $183(($12 + [8]), $7, $2, ($12 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($12 + [48])
}

int_32 .FUNC $232 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	*([0] + [4]) = $6
	*($6) = [0]
	$4 = *($2 + [8])
	*($6 + [8]) = $4
	if ( ((uint_32)$4 > (uint_32)[8]) ){ goto $label$2 }
	$5 = $6
	goto $label$1 
	
.LABEL $label$2
	$5 = CALL $260($4)
	*($6) = $5
	$2 = *($2)
	
.LABEL $label$1
	CALL memcpy($5, $2, $4)
	*($6 + [32]) = [0]
	$2 = *(($6 + [8]))
	*($6 + [40]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$4 }
	$4 = $6
	$5 = ($6 + [32])
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL $260($2)
	*($6 + [32]) = $5
	$4 = *($6)
	
.LABEL $label$3
	CALL memcpy($5, $4, $2)
	*($6 + [16]) = [0]
	$2 = *((($6 + [32]) + [8]))
	*($6 + [24]) = $2
	if ( ((uint_32)$2 > (uint_32)[8]) ){ goto $label$6 }
	$4 = ($6 + [16])
	$5 = ($6 + [32])
	goto $label$5 
	
.LABEL $label$6
	$4 = CALL $260($2)
	*($6 + [16]) = $4
	$2 = *((($6 + [16]) + [8]))
	$5 = *($6 + [32])
	
.LABEL $label$5
	CALL memcpy($4, $5, $2)
	*($6 + [28]) = $3
	if ( (*((($6 + [32]) + [8])) <= [9]) ){ goto $label$7 }
	$2 = *($6 + [32])
	if ( ($2 == 0) ){ goto $label$7 }
	CALL $262($2)
	
.LABEL $label$7
	$2 = CALL $236($0, $1, ($6 + [16]))
	if ( (*((($6 + [16]) + [8])) <= [9]) ){ goto $label$8 }
	$4 = *($6 + [16])
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $262($4)
	
.LABEL $label$8
	if ( (*(($6 + [8])) <= [9]) ){ goto $label$9 }
	$4 = *($6)
	if ( ($4 == 0) ){ goto $label$9 }
	CALL $262($4)
	
.LABEL $label$9
	*([0] + [4]) = ($6 + [48])
	return $2
}

int_32 .FUNC vsprintf (int_32 $0, int_32 $1, int_32 $2)
{
	return CALL vsnprintf($0, [2147483647], $1, $2)
}

int_32 .FUNC vfprintf (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [288])
	*([0] + [4]) = $7
	*($7 + [284]) = $2
	$6 = [0]
	CALL memset(($7 + [240]), [0], [40])
	*($7 + [280]) = *($7 + [284])
	$2 = [-1]
	if ( ((int_32)CALL $281([0], $1, ($7 + [280]), ($7 + [80]), ($7 + [240])) <= (int_32)[-1]) ){ goto $label$1 }
	if ( ((int_32)*($0 + [76]) < (int_32)[0]) ){ goto $label$2 }
	$6 = CALL __lockfile($0)
	
.LABEL $label$2
	$2 = *($0)
	if ( ((int_32)*($0 + [74]) > (int_32)[0]) ){ goto $label$3 }
	*($0) = ($2 & [-33])
	
.LABEL $label$3
	$3 = ($2 & [32])
	if ( (*($0 + [48]) == 0) ){ goto $label$5 }
	$2 = CALL $281($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	goto $label$4 
	
.LABEL $label$5
	*(($5 = ($0 + [48]))) = [80]
	*($0 + [16]) = ($7 + [80])
	*($0 + [28]) = $7
	*($0 + [20]) = $7
	$4 = *($0 + [44])
	*($0 + [44]) = $7
	$2 = CALL $281($0, $1, ($7 + [280]), ($7 + [80]), ($7 + [240]))
	if ( ($4 == 0) ){ goto $label$4 }
	CALL int_32 $0((int_32 [0]), (int_32 [0]), (int_32 *($0 + [36])))
	*(($0 + [44])) = $4
	*($5) = [0]
	*(($0 + [16])) = [0]
	*(($0 + [28])) = [0]
	$1 = ($0 + [20])
	$4 = *($1)
	*($1) = [0]
	$2 = ( $2 ? [-1] : $4 )
	
.LABEL $label$4
	$1 = *($0)
	*($0) = ($1 | $3)
	$1 = ($1 & [32])
	if ( ($6 == 0) ){ goto $label$6 }
	CALL __unlockfile($0)
	
.LABEL $label$6
	$2 = ( [-1] ? $2 : $1 )
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [288])
	return $2
}

int_32 .FUNC $101 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	$6 = *($0)
	*($0) = ($6 + [10])
	$6 = ($6 + [11])
	$8 = *($1 + [12])
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	*($0) = $6
	$8 = *($1 + [20])
	
.LOOP $label$2:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	*($0) = $6
	$7 = *($1 + [24])
	$2 = *(($1 + [28]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$3:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$3 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	
.LOOP $label$5:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$6:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$6 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$7 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$7
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$8:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$8 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$5 }
	*($0) = $6
	
.LABEL $label$4
	$7 = *($1 + [36])
	$2 = *(($1 + [40]))
	$8 = (CASTING uint_64)(uint_32 ((int_32)($2 - $7) / (int_32)[40]))
	
.LOOP $label$9:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$9 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$10 }
	
.LOOP $label$11:
	$6 = ($6 + [16])
	$4 = *($7 + [16])
	$3 = *(($7 + [20]))
	$5 = ($3 - $4)
	$8 = (CASTING uint_64)(uint_32 int_32($5 >> [4]))
	
.LOOP $label$12:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$12 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$13 }
	$6 = (($5 & [-16]) + $6)
	
.LABEL $label$13
	$4 = *($7 + [28])
	$3 = *(($7 + [32]))
	$6 = (($6 + $3) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$14:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$14 }
	$7 = ($7 + [40])
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$11 }
	*($0) = $6
	
.LABEL $label$10
	$7 = *($1 + [48])
	$5 = *(($1 + [52]))
	$8 = (CASTING uint_64)(uint_32 int_32(($5 - $7) >> [4]))
	
.LOOP $label$15:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$15 }
	*($0) = $6
	if ( ((int_32)$7 == (int_32)$5) ){ goto $label$16 }
	
.LOOP $label$17:
	$4 = *($7 + [4])
	$3 = *(($7 + [8]))
	$6 = ((($6 + $3) + [2]) - $4)
	$8 = (CASTING uint_64)(uint_32 ($3 - $4))
	
.LOOP $label$18:
	$6 = ($6 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$18 }
	$7 = ($7 + [16])
	if ( ((int_32)$7 != (int_32)$5) ){ goto $label$17 }
	*($0) = $6
	
.LABEL $label$16
	return $0
}

int_32 .FUNC $100 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$1 = *($0 + [48])
	if ( ($1 == 0) ){ goto $label$1 }
	$4 = ($0 + [52])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$3 }
	$2 = ([0] - $1)
	$5 = ($5 + [-12])
	
.LOOP $label$4:
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$5 }
	*(($5 + [4])) = $3
	CALL $261($3)
	
.LABEL $label$5
	$5 = ($5 + [-16])
	if ( ((int_32)($5 + $2) != (int_32)[-12]) ){ goto $label$4 }
	$5 = *(($0 + [48]))
	goto $label$2 
	
.LABEL $label$3
	$5 = $1
	
.LABEL $label$2
	*($4) = $1
	CALL $261($5)
	
.LABEL $label$1
	$1 = *($0 + [36])
	if ( ($1 == 0) ){ goto $label$6 }
	$4 = ($0 + [40])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$8 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$9:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$10 }
	*(($5 + [16])) = $3
	CALL $261($3)
	
.LABEL $label$10
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$11 }
	*(($5 + [4])) = $3
	CALL $261($3)
	
.LABEL $label$11
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$9 }
	$5 = *(($0 + [36]))
	goto $label$7 
	
.LABEL $label$8
	$5 = $1
	
.LABEL $label$7
	*($4) = $1
	CALL $261($5)
	
.LABEL $label$6
	$1 = *($0 + [24])
	if ( ($1 == 0) ){ goto $label$12 }
	$4 = ($0 + [28])
	$5 = *($4)
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$14 }
	$2 = ([0] - $1)
	$5 = ($5 + [-24])
	
.LOOP $label$15:
	$3 = *(($5 + [12]))
	if ( ($3 == 0) ){ goto $label$16 }
	*(($5 + [16])) = $3
	CALL $261($3)
	
.LABEL $label$16
	$3 = *($5)
	if ( ($3 == 0) ){ goto $label$17 }
	*(($5 + [4])) = $3
	CALL $261($3)
	
.LABEL $label$17
	$5 = ($5 + [-40])
	if ( ((int_32)($5 + $2) != (int_32)[-24]) ){ goto $label$15 }
	$5 = *(($0 + [24]))
	goto $label$13 
	
.LABEL $label$14
	$5 = $1
	
.LABEL $label$13
	*($4) = $1
	CALL $261($5)
	
.LABEL $label$12
	return $0
}

int_32 .FUNC $103 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*($1 + [4]) - *($1)) / (int_32)[40]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	$4 = ($0 + [4])
	
.LOOP $label$1:
	$7 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($8 + [15]) = (($2) << [7]) | ($7 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [784])
	CALL memcpy(*($4), ($8 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$3 = *(($1 + [4]))
	$7 = *($1)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$4 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [784])
	CALL memcpy(*($4), $7, [8])
	$6 = (*($4) + [8])
	*($4) = $6
	CALL eosio_assert(((int_32)(*($2) - $6) > (int_32)[7]), [784])
	CALL memcpy(*($4), ($7 + [8]), [8])
	*($4) = (*($4) + [8])
	CALL $70(CALL $69($0, ($7 + [16])), ($7 + [28]))
	$7 = ($7 + [40])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$2 }
	$6 = *($4)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $102 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[3]), [784])
	CALL memcpy(*($0 + [4]), $1, [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[1]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [4]), [2])
	$4 = (*($0 + [4]) + [2])
	*($0 + [4]) = $4
	CALL eosio_assert(((int_32)(*($0 + [8]) - $4) > (int_32)[3]), [784])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [4])
	$5 = (*($0 + [4]) + [4])
	*($0 + [4]) = $5
	$6 = *($1 + [12])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$2 = ((int_64)$6) != (int_64)0
	*($7 + [14]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $5) > (int_32)[0]), [784])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [14]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $2 ){ goto $label$1 }
	$3 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [784])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($1 + [16]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	$6 = *($1 + [20])
	
.LOOP $label$2:
	$2 = (CASTING uint_32)(uint_64 $6)
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	$1 = ((int_64)$6) != (int_64)0
	*($7 + [15]) = (($1) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $5) > (int_32)[0]), [784])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$5 = (*($4) + [1])
	*($4) = $5
	if ( $1 ){ goto $label$2 }
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $105 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [32]), [8])
	$4 = (*($2 + [4]) + [8])
	*($2 + [4]) = $4
	CALL eosio_assert(((int_32)(*($2 + [8]) - $4) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [40]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$0 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($0 + [48]), [8])
	$3 = (*($2 + [4]) + [8])
	*($2 + [4]) = $3
	CALL eosio_assert(((int_32)(*($2 + [8]) - $3) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($0 + [56]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($2 + [4]), ($0 + [64]), [8])
	*($2 + [4]) = (*($2 + [4]) + [8])
}

int_32 .FUNC $104 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$5 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$6 = *($0 + [4])
	$3 = ($0 + [8])
	
.LOOP $label$1:
	$4 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($7 + [15]) = (($2) << [7]) | ($4 & [127]))
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[0]), [784])
	$4 = ($0 + [4])
	CALL memcpy(*($4), ($7 + [15]), [1])
	$6 = (*($4) + [1])
	*($4) = $6
	if ( $2 ){ goto $label$1 }
	$2 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$3 = ($0 + [8])
	
.LOOP $label$3:
	CALL eosio_assert(((int_32)(*($3) - $6) > (int_32)[1]), [784])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $4, [2])
	*($6) = (*($6) + [2])
	CALL $70($0, ($4 + [4]))
	$4 = ($4 + [16])
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$2 }
	$6 = *($6)
	goto $label$3 
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $107 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = *($0)
	$2 = *($1)
	CALL eosio_assert(((int_32)(*($2 + [8]) - *($2 + [4])) > (int_32)[31]), [784])
	CALL memcpy(*($2 + [4]), ($3 + [48]), [32])
	*($2 + [4]) = (*($2 + [4]) + [32])
	$2 = *($0)
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[0]), [784])
	CALL memcpy(*($0 + [4]), ($2 + [80]), [1])
	*($0 + [4]) = (*($0 + [4]) + [1])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($2 + [88]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = *($1)
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($0 + [4]), ($2 + [96]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$1 = *($1)
	CALL eosio_assert(((int_32)(*($1 + [8]) - *($1 + [4])) > (int_32)[7]), [784])
	CALL memcpy(*($1 + [4]), ($2 + [104]), [8])
	*($1 + [4]) = (*($1 + [4]) + [8])
}

int_32 .FUNC $106 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [784])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [784])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [784])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $109 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [16])
	$9 = $10
	*([0] + [4]) = $10
	CALL eosio_assert(((int_32)*($1 + [116]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	$4 = *($1)
	CALL $117($3, $1)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [720])
	$5 = *($1 + [48])
	$6 = *(($1 + [52]))
	$7 = ($6 - $5)
	$8 = (CASTING uint_64)(uint_32 int_32($7 >> [4]))
	$3 = [48]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$5 == (int_32)$6) ){ goto $label$2 }
	$3 = (($7 & [-16]) + $3)
	
.LABEL $label$2
	$6 = ($3 + [53])
	if ( ($6 <= [513]) ){ goto $label$4 }
	$3 = CALL malloc($6)
	goto $label$3 
	
.LABEL $label$4
	$3 = ($10 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$3
	*($9 + [4]) = $3
	*($9) = $3
	*($9 + [8]) = ($3 + $6)
	CALL $115($9, $1)
	CALL db_update_i64(*(($1 + [120])), $2, $3, $6)
	if ( ($6 <= [513]) ){ goto $label$5 }
	CALL free($3)
	
.LABEL $label$5
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($9 + [16])
}

int_32 .FUNC $108 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [800])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	*(($6 = CALL $259([128])) + [56]) = [0]
	*($6 + [48 align=4]) = (int_64)0
	*($6 + [112]) = [0]
	*($6 + [116]) = $0
	CALL $118(($8 + [32]), $6)
	*($6 + [120]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [120])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $113(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	$7 = *($4 + [48])
	if ( ($7 == 0) ){ goto $label$10 }
	*(($4 + [52])) = $7
	CALL $261($7)
	
.LABEL $label$10
	CALL $261($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $212 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)126
	*($0 + [8]) = (int_64)1
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $231 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	$2 = *($0 + [56])
	$5 = (int_64)0
	$4 = (int_64)59
	$0 = [112]
	$6 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$5 > (uint_64)(int_64)10) ){ goto $label$6 }
	$3 = *($0)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$7 = (int_64)0
	if ( ((int_64)$5 == (int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$7 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$7 = ((int_64)((int_64)$7 & (int_64)31) << (int_64)((int_64)$4 & (int_64)4294967295))
	
.LABEL $label$2
	$0 = ($0 + [1])
	$4 = ((int_64)$4 + (int_64)-5)
	$6 = ((int_64)$7 | (int_64)$6)
	$5 = ((int_64)$5 + (int_64)1)
	if ( ((int_64)$5 != (int_64)13) ){ goto $label$1 }
	if ( ((int_64)$2 != (int_64)$6) ){ goto $label$8 }
	$0 = [1]
	if ( ((int_64)*($1 + [8]) == (int_64)1397703940) ){ goto $label$7 }
	
.LABEL $label$8
	$5 = (int_64)0
	$7 = (int_64)59
	$0 = [128]
	$6 = (int_64)0
	
.LOOP $label$9:
	$4 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$10 }
	$3 = *($0)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$12 }
	$3 = ($3 + [165])
	goto $label$11 
	
.LABEL $label$12
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$11
	$4 = ((int_64)(CASTING uint_64)(uint_32 ($3 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$10
	$0 = ($0 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$6 = ((int_64)$4 | (int_64)$6)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$9 }
	$0 = [0]
	if ( ((int_64)$2 != (int_64)$6) ){ goto $label$7 }
	$0 = ((int_64)*($1 + [8]) == (int_64)1414549508)
	
.LABEL $label$7
	CALL eosio_assert($0, [3168])
}

int_32 .FUNC $219 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)107
	*($0 + [8]) = (int_64)0
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $38 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [176])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$4 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $3)
	
.LABEL $label$1
	*(($7 + [72])) = (int_64)0
	*((($7 + [32]) + [32])) = (int_64)0
	*((($7 + [32]) + [24])) = (int_64)0
	*($7 + [48]) = (int_64)0
	*($7 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$3 > (uint_32)[7]), [256])
	CALL memcpy(($7 + [32]), $5, [8])
	CALL eosio_assert(((uint_32)($3 + [-8]) > (uint_32)[31]), [256])
	$1 = (($7 + [32]) + [16])
	CALL memcpy($1, ($5 + [8]), [32])
	if ( ($3 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($3 = (($7 + [80]) + [24]))) = *(($1 + [24]))
	*(($5 = (($7 + [80]) + [16]))) = *(($1 + [16]))
	$4 = *($7 + [32])
	*($7 + [80]) = *($1)
	*($7 + [92]) = *(($1 + [12]))
	*($7 + [88]) = *(($1 + [8]))
	*((($7 + [112]) + [24])) = *($3)
	*((($7 + [112]) + [16])) = *($5)
	*($7 + [120]) = *($7 + [88])
	*($7 + [112]) = *($7 + [80])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	*(($3 = (($7 + [144]) + [24]))) = *((($7 + [112]) + [24]))
	*(($5 = (($7 + [144]) + [16]))) = *((($7 + [112]) + [16]))
	*($7 + [152]) = *($7 + [120])
	*($7 + [144]) = *($7 + [112])
	*(($7 + [24])) = *($3)
	*(($7 + [16])) = *($5)
	*($7) = *($7 + [144])
	*($7 + [8]) = *($7 + [152])
	CALL void $1((int_32 $4), (int_64 $7), (int_32 $6))
	*([0] + [4]) = ($7 + [176])
	return [1]
}

void .FUNC $39 (int_32 $0, int_64 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	*([0] + [4]) = $11
	*($11 + [24]) = $1
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [1616]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$3 = *(($0 + [368]))
	$10 = *(($0 + [372]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)$1) ){ goto $label$5 }
	$10 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [344])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$10 }
	$2 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$5), [304])
	if ( $2 ){ goto $label$9 }
	goto $label$8 
	
.LABEL $label$10
	$2 = CALL db_find_i64(*(($0 + [344])), *(($0 + [352])), (int_64)4344997574076792832, $1)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$8 }
	$2 = CALL $73($5, $2)
	CALL eosio_assert(((int_32)*($2 + [16]) == (int_32)$5), [304])
	
.LABEL $label$9
	CALL eosio_assert([1], [560])
	CALL $77($5, $2, (int_64)0, ($11 + [8]))
	goto $label$7 
	
.LABEL $label$8
	$7 = *($0)
	*($11 + [16]) = ($11 + [24])
	CALL $76(($11 + [8]), $5, $7, ($11 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [32])
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_64 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$10 = (*([0] + [4]) - [128])
	$12 = $10
	*([0] + [4]) = $10
	$2 = *($1 + [4])
	$11 = *($1)
	$1 = [0]
	$8 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$8 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$8 = ($10 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$2
	CALL read_action_data($8, $3)
	
.LABEL $label$1
	*(($12 + [40])) = (int_64)1398362884
	*($12 + [32]) = (int_64)0
	*($12 + [24]) = (int_64)0
	CALL eosio_assert([1], [160])
	$9 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $9) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$9 = (uint_64)$9 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$9) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$10 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$10 = [0]
	
.LABEL $label$4
	CALL eosio_assert($10, [224])
	*($12 + [56]) = (int_64)0
	*($12 + [48]) = [0]
	*($12 + [64]) = (int_64)0
	*($12 + [72]) = (int_64)0
	*($12 + [116]) = $8
	*($12 + [112]) = $8
	*($12 + [120]) = ($8 + $3)
	*($12 + [80]) = ($12 + [112])
	*($12 + [96]) = ($12 + [24])
	CALL $171(($12 + [96]), ($12 + [80]))
	if ( ($3 <= [513]) ){ goto $label$9 }
	CALL free($8)
	
.LABEL $label$9
	*(($1 = (($12 + [80]) + [8]))) = *(($12 + [40]))
	$9 = *($12 + [24])
	*($12 + [80]) = *($12 + [32])
	$6 = *(($12 + [72]))
	$5 = *(($12 + [64]))
	$4 = *(($12 + [56]))
	$8 = *(($12 + [48]))
	*((($12 + [96]) + [8])) = *($1)
	*($12 + [96]) = *($12 + [80])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$10 }
	$11 = *((*($1) + $11))
	
.LABEL $label$10
	$7 = *((($12 + [96]) + [8]))
	*((($12 + [112]) + [8])) = $7
	*((($12 + [8]) + [8])) = $7
	$7 = *($12 + [96])
	*($12 + [112]) = $7
	*($12 + [8]) = $7
	CALL void $1((int_32 $9), (int_64 ($12 + [8])), (int_32 ($8 & [255])), (int_32 $4), (int_64 $5), (int_64 $6), (int_64 $11))
	*([0] + [4]) = ($12 + [128])
	return [1]
}

void .FUNC $37 (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_64 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_32 $20
	int_32 $21
	int_32 $22
	int_32 $23
	int_32 $24
	int_32 $25
	int_32 $26
	int_32 $27
	int_32 $28
	int_32 $29
	int_32 $30
	int_32 $31
	int_64 $32
	int_64 $33
	int_64 $34
	int_64 $35
	int_64 $36
	int_64 $37
	int_32 $38
	$38 = (*([0] + [4]) - [1040])
	*([0] + [4]) = $38
	$34 = (int_64)0
	$36 = (int_64)59
	$31 = [1728]
	$32 = (int_64)0
	
.LOOP $label$1:
	$33 = (int_64)0
	if ( ((uint_64)$34 > (uint_64)(int_64)11) ){ goto $label$2 }
	$16 = *($31)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$16 = ($16 + [165])
	goto $label$3 
	
.LABEL $label$4
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$33 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$2
	$31 = ($31 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$32 = ((int_64)$33 | (int_64)$32)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($32)
	$14 = *(($0 + [88]))
	$12 = *(($0 + [92]))
	if ( ((int_32)$12 == (int_32)$14) ){ goto $label$5 }
	$31 = ($12 + [-24])
	$18 = ([0] - $14)
	
.LOOP $label$6:
	if ( ((int_64)*(*($31)) == (int_64)$1) ){ goto $label$5 }
	$12 = $31
	$16 = ($31 + [-24])
	$31 = $16
	if ( ((int_32)($16 + $18) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$16 = ($0 + [64])
	if ( ((int_32)$12 == (int_32)$14) ){ goto $label$8 }
	$31 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($31 + [60]) == (int_32)$16), [304])
	goto $label$7 
	
.LABEL $label$8
	$31 = [0]
	$12 = CALL db_find_i64(*(($0 + [64])), *(($0 + [72])), (int_64)-2189427484511660672, $1)
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$7 }
	$31 = CALL $79($16, $12)
	CALL eosio_assert(((int_32)*($31 + [60]) == (int_32)$16), [304])
	
.LABEL $label$7
	$12 = ((int_32)$31 != (int_32)[0])
	CALL eosio_assert($12, [1744])
	*(($38 + [888])) = *(($31 + [32]))
	*($38 + [880]) = *($31 + [24])
	$4 = *($31 + [48])
	$3 = *($31 + [40])
	*($38 + [872]) = *($31 + [8])
	$5 = *($31 + [16])
	CALL eosio_assert($12, [1760])
	CALL eosio_assert($12, [1808])
	$12 = CALL db_next_i64(*($31 + [64]), ($38 + [688]))
	if ( ((int_32)$12 < (int_32)[0]) ){ goto $label$9 }
	CALL $79($16, $12)
	
.LABEL $label$9
	CALL $80($16, $31)
	$34 = (uint_64)*($38 + [888]) >> (uint_64)(int_64)8)
	$14 = *(($0 + [288]))
	$12 = *(($0 + [292]))
	if ( ((int_32)$12 == (int_32)$14) ){ goto $label$10 }
	$31 = ($12 + [-24])
	$18 = ([0] - $14)
	
.LOOP $label$11:
	if ( ((int_64)*(*($31)) == (int_64)$34) ){ goto $label$10 }
	$12 = $31
	$16 = ($31 + [-24])
	$31 = $16
	if ( ((int_32)($16 + $18) != (int_32)[-24]) ){ goto $label$11 }
	
.LABEL $label$10
	$6 = ($0 + [264])
	if ( ((int_32)$12 == (int_32)$14) ){ goto $label$13 }
	$17 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($17 + [80]) == (int_32)$6), [304])
	goto $label$12 
	
.LABEL $label$13
	$17 = [0]
	$31 = CALL db_find_i64(*(($0 + [264])), *(($0 + [272])), (int_64)7035938535980793856, $34)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$12 }
	$17 = CALL $57($6, $31)
	CALL eosio_assert(((int_32)*($17 + [80]) == (int_32)$6), [304])
	
.LABEL $label$12
	*(($31 = (($38 + [832]) + [24]))) = *(($2 + [24]))
	*(($16 = (($38 + [832]) + [16]))) = *(($2 + [16]))
	*($38 + [832]) = *($2)
	*($38 + [840]) = *(($2 + [8]))
	*(($12 = (($38 + [896]) + [24]))) = *($31)
	*(($18 = (($38 + [896]) + [16]))) = *($16)
	*($38 + [904]) = *($38 + [840])
	*($38 + [896]) = *($38 + [832])
	$31 = CALL read_transaction([0], [0])
	$16 = CALL malloc($31)
	CALL read_transaction($16, $31)
	CALL sha256($16, $31, ($38 + [992]))
	*(($31 = (($38 + [960]) + [24]))) = *($12)
	*(($16 = (($38 + [960]) + [16]))) = *($18)
	*($38 + [968]) = *($38 + [904])
	*($38 + [960]) = *($38 + [896])
	*(($12 = (($38 + [928]) + [24]))) = *((($38 + [992]) + [24]))
	*(($18 = (($38 + [928]) + [16]))) = *((($38 + [992]) + [16]))
	*($38 + [936]) = *($38 + [1000])
	*($38 + [928]) = *($38 + [992])
	*(($2 = (($38 + [240]) + [24]))) = *($12)
	*(($12 = (($38 + [240]) + [16]))) = *($18)
	*($38 + [248]) = *($38 + [936])
	*($38 + [240]) = *($38 + [928])
	*(($18 = (($38 + [320]) + [24]))) = *($31)
	*(($31 = (($38 + [320]) + [16]))) = *($16)
	*($38 + [328]) = *($38 + [968])
	*($38 + [320]) = *($38 + [960])
	*(($16 = ($0 + [616]))) = *($18)
	*(($18 = ($0 + [608]))) = *($31)
	*(($14 = ($0 + [600]))) = *($38 + [328])
	*($0 + [592]) = *($38 + [320])
	*(($26 = ($0 + [648]))) = *($2)
	*(($2 = ($0 + [640]))) = *($12)
	*(($12 = ($0 + [632]))) = *($38 + [248])
	*(($8 = ($0 + [624]))) = *($38 + [240])
	*(($31 = (($38 + [688]) + [24]))) = *($16)
	*(($16 = (($38 + [688]) + [16]))) = *($18)
	*($38 + [696]) = *($14)
	*($38 + [688]) = *($0 + [592])
	*(($13 = ($38 + [744]))) = *($26)
	*(($11 = ($38 + [736]))) = *($2)
	*(($28 = ($38 + [728]))) = *($12)
	*($38 + [720]) = *($8)
	$2 = ($0 + [656])
	CALL sha256(($38 + [688]), [64], $2)
	$8 = ($0 + [680])
	*(($14 = ($0 + [712]))) = *($8)
	$23 = ($0 + [672])
	*(($26 = ($0 + [704]))) = *($23)
	$27 = ($0 + [664])
	*(($12 = ($0 + [696]))) = *($27)
	*(($18 = ($0 + [688]))) = *($2)
	*($31) = *($8)
	*($16) = *($23)
	*($38 + [696]) = *($27)
	*($38 + [688]) = *($2)
	*($13) = *($14)
	*($11) = *($26)
	*($28) = *($12)
	*($38 + [720]) = *($18)
	CALL sha256(($38 + [688]), [64], $18)
	$34 = *($12)
	*($31) = *($14)
	*($16) = *($26)
	*($38 + [696]) = *($12)
	*($38 + [688]) = *($18)
	*(($0 + [744])) = *($31)
	*(($0 + [736])) = *($16)
	*(($0 + [728])) = *($38 + [696])
	*($0 + [720]) = *($38 + [688])
	*($38 + [904]) = [0]
	*($38 + [896]) = (int_64)0
	*($38 + [1000]) = (int_64)1398362884
	*($38 + [992]) = (int_64)0
	CALL eosio_assert([1], [160])
	$18 = ($0 + [720])
	$19 = ((uint_64)$34 % (uint_64)(int_64)100)
	$34 = (uint_64)*($38 + [1000]) >> (uint_64)(int_64)8)
	$31 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $34) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$16 = [1]
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$16 = [0]
	
.LABEL $label$14
	CALL eosio_assert($16, [224])
	*($38 + [828]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	if ( ((int_32)$3 == (int_32)[2]) ){ goto $label$24 }
	$7 = [0]
	if ( ((int_32)$3 != (int_32)[1]) ){ goto $label$22 }
	if ( ((uint_64)$19 >= (uint_64)$4) ){ goto $label$22 }
	$7 = [1]
	$34 = *($38 + [880])
	$36 = $4
	goto $label$23 
	
.LABEL $label$24
	$7 = ((uint_64)$19 > (uint_64)$4)
	if ( ($7 == 0) ){ goto $label$22 }
	$36 = (int_64))((int_64)99 - $4)
	$34 = *($38 + [880])
	
.LABEL $label$23
	$36 = (Rounds 0)(((float_64)((float_64)(CASTING float_64)(int_64 $34) * (float_64)(float_64)98.5) / (float_64)(CASTING float_64)(int_32 ((CASTING uint_32)(uint_64 $36) & [255]))))
	*($38 + [688]) = $36
	$33 = *(($38 + [888]))
	CALL eosio_assert((uint_64)(((int_64)$36 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [160])
	$34 = (uint_64)$33 >> (uint_64)(int_64)8)
	$31 = [0]
	
.LOOP $label$25:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $34) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$21 }
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	
.LOOP $label$27:
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$21 }
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$27 }
	
.LABEL $label$26
	$16 = [1]
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$25 }
	goto $label$20 
	
.LABEL $label$22
	$36 = *(($38 + [888]))
	CALL eosio_assert([1], [160])
	$34 = (uint_64)$36 >> (uint_64)(int_64)8)
	$31 = [0]
	
.LOOP $label$30:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $34) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$31 }
	
.LOOP $label$32:
	$34 = (uint_64)$34 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$34) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$32 }
	
.LABEL $label$31
	$16 = [1]
	$31 = ($31 + [1])
	if ( ((int_32)$31 < (int_32)[7]) ){ goto $label$30 }
	goto $label$28 
	
.LABEL $label$29
	$16 = [0]
	
.LABEL $label$28
	CALL eosio_assert($16, [224])
	*(($38 + [1000])) = $36
	*($38 + [992]) = (int_64)0
	goto $label$19 
	
.LABEL $label$21
	$16 = [0]
	
.LABEL $label$20
	CALL eosio_assert($16, [224])
	*(($38 + [1000])) = $33
	*($38 + [992]) = $36
	*($38 + [240]) = ($38 + [688])
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [560])
	CALL $81($6, $17, (int_64)0, ($38 + [240]))
	
.LABEL $label$19
	$31 = *($38 + [900])
	if ( ((int_32)$31 == (int_32)*((($38 + [896]) + [8]))) ){ goto $label$34 }
	*($31) = *($38 + [992])
	*(($31 + [8])) = *((($38 + [992]) + [8]))
	*($38 + [900]) = ($31 + [16])
	goto $label$33 
	
.LABEL $label$34
	CALL $82(($38 + [896]), ($38 + [992]))
	
.LABEL $label$33
	$20 = ($38 + [888])
	if ( ((int_64)*($20) != (int_64)1397703940) ){ goto $label$40 }
	if ( (CALL $83($0) == 0) ){ goto $label$40 }
	$31 = CALL db_lowerbound_i64(*($0 + [544]), *(($0 + [552])), (int_64)6714758524877189120, (int_64)0)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$40 }
	$8 = ($0 + [544])
	$12 = CALL $84($8, $31)
	$11 = (($38 + [240]) + [16])
	$10 = (($38 + [960]) | [1])
	$9 = (($38 + [240]) | [1])
	$21 = ($0 + [288])
	$22 = ($0 + [292])
	$24 = ($0 + [272])
	$25 = ($0 + [264])
	$26 = (($38 + [240]) + [8])
	$28 = ($38 + [272])
	$29 = ($38 + [276])
	$30 = ($38 + [280])
	
.LOOP $label$41:
	if ( ((int_64)$19 != (int_64)*($12 + [8])) ){ goto $label$42 }
	if ( ((uint_64)((int_64)*($12 + [16]) + (int_64)-1) > (uint_64)(int_64)9998) ){ goto $label$42 }
	$23 = ($12 + [24])
	$34 = (uint_64)*($23) >> (uint_64)(int_64)8)
	$13 = *($21)
	$2 = *($22)
	if ( ((int_32)$2 == (int_32)$13) ){ goto $label$43 }
	$31 = ($2 + [-24])
	$14 = ([0] - $13)
	
.LOOP $label$44:
	if ( ((int_64)*(*($31)) == (int_64)$34) ){ goto $label$43 }
	$2 = $31
	$16 = ($31 + [-24])
	$31 = $16
	if ( ((int_32)($16 + $14) != (int_32)[-24]) ){ goto $label$44 }
	
.LABEL $label$43
	if ( ((int_32)$2 == (int_32)$13) ){ goto $label$46 }
	$2 = *(($2 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$6), [304])
	goto $label$45 
	
.LABEL $label$46
	$2 = [0]
	$31 = CALL db_find_i64(*($25), *($24), (int_64)7035938535980793856, $34)
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$45 }
	$2 = CALL $57($6, $31)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$6), [304])
	
.LABEL $label$45
	CALL sprintf(($38 + [688]), [1840], [0])
	*($26) = [0]
	*($38 + [240]) = (int_64)0
	$31 = CALL strlen(($38 + [688]))
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$48 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$51 }
	*($38 + [240]) = ($31 << [1])
	$16 = $9
	if ( $31 ){ goto $label$50 }
	goto $label$49 
	
.LABEL $label$51
	$14 = (($31 + [16]) & [-16])
	$16 = CALL $259($14)
	*($26) = $16
	*($38 + [240]) = ($14 | [1])
	*($38 + [244]) = $31
	
.LABEL $label$50
	CALL memcpy($16, ($38 + [688]), $31)
	
.LABEL $label$49
	*(($16 + $31)) = [0]
	CALL prints(( *($26) ? $9 : (*($38 + [240]) & [1]) ))
	if ( ((*($38 + [240]) & [1]) == 0) ){ goto $label$52 }
	CALL $261(*($26))
	
.LABEL $label$52
	$15 = *($2 + [8])
	$34 = (int_64)0
	$36 = (int_64)59
	$31 = [464]
	$32 = (int_64)0
	
.LOOP $label$53:
	$33 = (int_64)0
	if ( ((uint_64)$34 > (uint_64)(int_64)11) ){ goto $label$54 }
	$16 = *($31)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$56 }
	$16 = ($16 + [165])
	goto $label$55 
	
.LABEL $label$56
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$55
	$33 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$54
	$31 = ($31 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$32 = ((int_64)$33 | (int_64)$32)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$53 }
	$34 = (int_64)0
	$33 = (int_64)59
	$31 = [480]
	$35 = (int_64)0
	
.LOOP $label$57:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$62 }
	$16 = *($31)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$61 }
	$16 = ($16 + [165])
	goto $label$60 
	
.LABEL $label$62
	$36 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$59 }
	goto $label$58 
	
.LABEL $label$61
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$60
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$59
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$58
	$31 = ($31 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$35 = ((int_64)$36 | (int_64)$35)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$57 }
	$34 = (int_64)0
	$36 = (int_64)59
	$31 = [464]
	$37 = (int_64)0
	
.LOOP $label$63:
	$33 = (int_64)0
	if ( ((uint_64)$34 > (uint_64)(int_64)11) ){ goto $label$64 }
	$16 = *($31)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$66 }
	$16 = ($16 + [165])
	goto $label$65 
	
.LABEL $label$66
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$65
	$33 = ((int_64)(CASTING uint_64)(uint_32 ($16 & [31])) << (int_64)((int_64)$36 & (int_64)4294967295))
	
.LABEL $label$64
	$31 = ($31 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$37 = ((int_64)$33 | (int_64)$37)
	$36 = ((int_64)$36 + (int_64)-5)
	if ( ((int_64)$36 != (int_64)-6) ){ goto $label$63 }
	goto $label$47 
	
.LABEL $label$48
	CALL $263(($38 + [240]))
	
.LABEL $label$47
	*(($16 = (($38 + [960]) + [8]))) = [0]
	*($38 + [960]) = (int_64)0
	$31 = CALL strlen(($38 + [688]))
	if ( ((uint_32)$31 >= (uint_32)[-16]) ){ goto $label$39 }
	if ( ((uint_32)$31 >= (uint_32)[11]) ){ goto $label$69 }
	*($38 + [960]) = ($31 << [1])
	$2 = $10
	if ( $31 ){ goto $label$68 }
	goto $label$67 
	
.LABEL $label$69
	$14 = (($31 + [16]) & [-16])
	$2 = CALL $259($14)
	*($16) = $2
	*($38 + [960]) = ($14 | [1])
	*($38 + [964]) = $31
	
.LABEL $label$68
	CALL memcpy($2, ($38 + [688]), $31)
	
.LABEL $label$67
	*(($2 + $31)) = [0]
	*(($2 = (($38 + [672]) + [8]))) = *($23)
	$34 = *($38 + [872])
	*($38 + [672]) = *($12 + [16])
	$14 = *($38 + [960])
	*($38 + [960]) = [0]
	$13 = *($16)
	$23 = *($38 + [964])
	*($38 + [964]) = [0]
	*($16) = [0]
	$31 = CALL $259([16])
	$27 = ($31 + [16])
	*((($38 + [320]) + [8])) = $27
	*($31) = $32
	*($31 + [8]) = $35
	*($26) = $34
	*($38 + [320]) = $31
	*($38 + [324]) = $27
	*($38 + [240]) = $37
	*($11) = *($38 + [672])
	*(($11 + [8])) = *($2)
	*($28) = $14
	*($29) = $23
	*($30) = $13
	CALL $53($15, (int_64)-3617168760277827584, ($38 + [320]), ($38 + [240]))
	if ( ((*($28) & [1]) == 0) ){ goto $label$70 }
	CALL $261(*($30))
	
.LABEL $label$70
	$31 = *($38 + [320])
	if ( ($31 == 0) ){ goto $label$71 }
	*($38 + [324]) = $31
	CALL $261($31)
	
.LABEL $label$71
	if ( ((*($38 + [960]) & [1]) == 0) ){ goto $label$72 }
	CALL $261(*($16))
	
.LABEL $label$72
	$16 = ($12 + [16])
	$31 = *($38 + [900])
	if ( ((int_32)$31 == (int_32)*((($38 + [896]) + [8]))) ){ goto $label$73 }
	*($31) = *($16)
	*(($31 + [8])) = *(($16 + [8]))
	*($38 + [900]) = ($31 + [16])
	goto $label$42 
	
.LABEL $label$73
	CALL $82(($38 + [896]), $16)
	
.LABEL $label$42
	CALL eosio_assert([1], [1808])
	$31 = CALL db_next_i64(*($12 + [36]), ($38 + [688]))
	if ( ((int_32)$31 < (int_32)[0]) ){ goto $label$40 }
	$12 = CALL $84($8, $31)
	goto $label$41 
	
.LABEL $label$40
	if ( ((int_64)*($20) != (int_64)1397703940) ){ goto $label$74 }
	$34 = *($38 + [872])
	$14 = *(($0 + [528]))
	$12 = *(($0 + [532]))
	if ( ((int_32)$12 == (int_32)$14) ){ goto $label$75 }
	$31 = ($12 + [-24])
	$2 = ([0] - $14)
	
.LOOP $label$76:
	if ( ((int_64)*(*($31)) == (int_64)$34) ){ goto $label$75 }
	$12 = $31
	$16 = ($31 + [-24])
	$31 = $16
	if ( ((int_32)($16 + $2) != (int_32)[-24]) ){ goto $label$76 }
	
.LABEL $label$75
	$31 = ($0 + [504])
	if ( ((int_32)$12 == (int_32)$14) ){ goto $label$79 }
	$16 = *(($12 + [-24]))
	CALL eosio_assert(((int_32)*($16 + [32]) == (int_32)$31), [304])
	if ( $16 ){ goto $label$78 }
	goto $label$77 
	
.LABEL $label$79
	$16 = CALL db_find_i64(*(($0 + [504])), *(($0 + [512])), (int_64)6714758524942942208, $34)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$77 }
	$16 = CALL $85($31, $16)
	CALL eosio_assert(((int_32)*($16 + [32]) == (int_32)$31), [304])
	
.LABEL $label$78
	*($38 + [688]) = ($38 + [828])
	CALL eosio_assert([1], [560])
	CALL $87($31, $16, (int_64)0, ($38 + [688]))
	goto $label$74 
	
.LABEL $label$77
	$34 = *($0)
	*($38 + [244]) = ($38 + [828])
	*($38 + [240]) = ($38 + [872])
	CALL $86(($38 + [688]), $31, $34, ($38 + [240]))
	
.LABEL $label$74
	$12 = (($38 + [880]) + [12])
	*((($38 + [656]) + [12])) = *($12)
	$16 = (($38 + [880]) + [8])
	*(($14 = (($38 + [656]) + [8]))) = *($16)
	*($38 + [660]) = *($38 + [884])
	$34 = *($38 + [872])
	$31 = *($38 + [828])
	*($38 + [656]) = *($38 + [880])
	$2 = (($38 + [992]) + [8])
	*(($26 = (($38 + [640]) + [8]))) = *($2)
	*($38 + [640]) = *($38 + [992])
	*((($38 + [224]) + [8])) = *($14)
	*($38 + [224]) = *($38 + [656])
	*((($38 + [208]) + [8])) = *($26)
	*($38 + [208]) = *($38 + [640])
	CALL $88($0, $34, ($38 + [224]), ($38 + [208]), $31)
	*((($38 + [624]) + [12])) = *($12)
	*(($14 = (($38 + [624]) + [8]))) = *($16)
	$34 = *($38 + [872])
	*($38 + [624]) = *($38 + [880])
	*(($26 = (($38 + [608]) + [8]))) = *($2)
	*($38 + [608]) = *($38 + [992])
	$8 = *($38 + [828])
	*((($38 + [192]) + [8])) = *($14)
	*($38 + [192]) = *($38 + [624])
	*((($38 + [176]) + [8])) = *($26)
	*($38 + [176]) = *($38 + [608])
	CALL $89($0, $34, ($38 + [192]), ($38 + [176]), $8)
	*((($38 + [592]) + [12])) = *($12)
	*(($12 = (($38 + [592]) + [8]))) = *($16)
	$34 = *($38 + [872])
	*($38 + [592]) = *($38 + [880])
	*(($14 = (($38 + [576]) + [8]))) = *($2)
	*($38 + [576]) = *($38 + [992])
	$2 = *($38 + [828])
	*((($38 + [160]) + [8])) = *($12)
	*($38 + [160]) = *($38 + [592])
	*((($38 + [144]) + [8])) = *($14)
	*($38 + [144]) = *($38 + [576])
	CALL $90($0, $34, ($38 + [160]), ($38 + [144]), $2)
	*(($2 = (($38 + [560]) + [8]))) = *($16)
	$34 = *($38 + [872])
	*($38 + [560]) = *($38 + [880])
	*($38 + [544]) = [0]
	*($38 + [548]) = [0]
	*($38 + [552]) = [0]
	$16 = (*($38 + [900]) - *($38 + [896]))
	$12 = int_32($16 >> [4])
	if ( ($12 == 0) ){ goto $label$80 }
	if ( ((uint_32)$12 >= (uint_32)[268435456]) ){ goto $label$38 }
	$16 = CALL $259($16)
	*(($38 + [552])) = ($16 + ($12 << [4]))
	*($38 + [544]) = $16
	*($38 + [548]) = $16
	$14 = *($38 + [896])
	$12 = (*($38 + [900]) - $14)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$80 }
	CALL memcpy($16, $14, $12)
	*($38 + [548]) = (*($38 + [548]) + $12)
	
.LABEL $label$80
	*(($16 = (($38 + [512]) + [24]))) = *(($18 + [24]))
	*(($12 = (($38 + [512]) + [16]))) = *(($18 + [16]))
	*($38 + [512]) = *($18)
	*($38 + [520]) = *(($18 + [8]))
	*((($38 + [128]) + [8])) = *($2)
	*($38 + [128]) = *($38 + [560])
	*((($38 + [96]) + [24])) = *($16)
	*((($38 + [96]) + [16])) = *($12)
	*($38 + [104]) = *($38 + [520])
	*($38 + [96]) = *($38 + [512])
	CALL $91($0, $1, $34, $5, ($38 + [128]), ($38 + [544]), $3, $4, $19, ($38 + [96]), $31)
	$16 = *($38 + [544])
	if ( ($16 == 0) ){ goto $label$81 }
	*($38 + [548]) = $16
	CALL $261($16)
	
.LABEL $label$81
	*(($2 = (($38 + [496]) + [8]))) = *((($38 + [880]) + [8]))
	$34 = *($38 + [872])
	*($38 + [496]) = *($38 + [880])
	*($38 + [480]) = [0]
	*($38 + [484]) = [0]
	*($38 + [488]) = [0]
	$16 = (*($38 + [900]) - *($38 + [896]))
	$12 = int_32($16 >> [4])
	if ( ($12 == 0) ){ goto $label$82 }
	if ( ((uint_32)$12 >= (uint_32)[268435456]) ){ goto $label$37 }
	$16 = CALL $259($16)
	*(($38 + [488])) = ($16 + ($12 << [4]))
	*($38 + [480]) = $16
	*($38 + [484]) = $16
	$14 = *($38 + [896])
	$12 = (*($38 + [900]) - $14)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$82 }
	CALL memcpy($16, $14, $12)
	*($38 + [484]) = (*($38 + [484]) + $12)
	
.LABEL $label$82
	*(($16 = (($38 + [448]) + [24]))) = *(($18 + [24]))
	*(($12 = (($38 + [448]) + [16]))) = *(($18 + [16]))
	*($38 + [448]) = *($18)
	*($38 + [456]) = *(($18 + [8]))
	*((($38 + [80]) + [8])) = *($2)
	*($38 + [80]) = *($38 + [496])
	*((($38 + [48]) + [24])) = *($16)
	*((($38 + [48]) + [16])) = *($12)
	*($38 + [56]) = *($38 + [456])
	*($38 + [48]) = *($38 + [448])
	CALL $92($0, $1, $34, $5, ($38 + [80]), ($38 + [480]), $3, $4, $19, ($38 + [48]), $31)
	$16 = *($38 + [480])
	if ( ($16 == 0) ){ goto $label$83 }
	*($38 + [484]) = $16
	CALL $261($16)
	
.LABEL $label$83
	*(($2 = (($38 + [432]) + [8]))) = *((($38 + [880]) + [8]))
	$34 = *($38 + [872])
	*($38 + [432]) = *($38 + [880])
	*($38 + [416]) = [0]
	*($38 + [420]) = [0]
	*($38 + [424]) = [0]
	$16 = (*($38 + [900]) - *($38 + [896]))
	$12 = int_32($16 >> [4])
	if ( ($12 == 0) ){ goto $label$84 }
	if ( ((uint_32)$12 >= (uint_32)[268435456]) ){ goto $label$36 }
	$16 = CALL $259($16)
	*(($38 + [424])) = ($16 + ($12 << [4]))
	*($38 + [416]) = $16
	*($38 + [420]) = $16
	$14 = *($38 + [896])
	$12 = (*($38 + [900]) - $14)
	if ( ((int_32)$12 < (int_32)[1]) ){ goto $label$84 }
	CALL memcpy($16, $14, $12)
	*($38 + [420]) = (*($38 + [420]) + $12)
	
.LABEL $label$84
	*(($16 = (($38 + [384]) + [24]))) = *(($18 + [24]))
	*(($12 = (($38 + [384]) + [16]))) = *(($18 + [16]))
	*($38 + [384]) = *($18)
	*($38 + [392]) = *(($18 + [8]))
	*((($38 + [32]) + [8])) = *($2)
	*($38 + [32]) = *($38 + [432])
	*(($38 + [24])) = *($16)
	*(($38 + [16])) = *($12)
	*($38 + [8]) = *($38 + [392])
	*($38) = *($38 + [384])
	CALL $93($0, $1, $34, $5, ($38 + [32]), ($38 + [416]), $3, $4, $19, $38, $31)
	$31 = *($38 + [416])
	if ( ($31 == 0) ){ goto $label$85 }
	*($38 + [420]) = $31
	CALL $261($31)
	
.LABEL $label$85
	*($38 + [688]) = ($38 + [880])
	CALL eosio_assert(((int_32)$17 != (int_32)[0]), [560])
	$34 = (int_64)0
	CALL $94($6, $17, (int_64)0, ($38 + [688]))
	$36 = CALL current_time()
	*((($38 + [320]) + [28])) = [0]
	*((($38 + [320]) + [32])) = [0]
	*($38 + [332]) = [0]
	*($38 + [336]) = [0]
	*($38 + [340]) = [0]
	*($38 + [344]) = [0]
	*($38 + [320]) = ((CASTING uint_32)(uint_64 ((uint_64)$36 / (uint_64)(int_64)1000000)) + [60])
	*($38 + [356]) = [0]
	*((($38 + [320]) + [40])) = [0]
	*(($38 + [364])) = [0]
	*($38 + [368]) = [0]
	*(($38 + [372])) = [0]
	*((($38 + [320]) + [56])) = [0]
	*((($38 + [688]) + [28])) = *(($38 + [892]))
	*((($38 + [688]) + [24])) = *((($38 + [880]) + [8]))
	*(($38 + [708])) = *($38 + [884])
	*($38 + [688]) = $1
	*($38 + [696]) = *($38 + [872])
	*($38 + [704]) = *($38 + [880])
	*($38 + [720]) = [0]
	*((($38 + [688]) + [36])) = [0]
	*((($38 + [688]) + [40])) = [0]
	$31 = (*($38 + [900]) - *($38 + [896]))
	$16 = int_32($31 >> [4])
	if ( ($16 == 0) ){ goto $label$86 }
	if ( ((uint_32)$16 >= (uint_32)[268435456]) ){ goto $label$35 }
	$31 = CALL $259($31)
	*(($38 + [720])) = $31
	*(($12 = ($38 + [724]))) = $31
	*(($38 + [728])) = ($31 + ($16 << [4]))
	$2 = *($38 + [896])
	$16 = (*($38 + [900]) - $2)
	if ( ((int_32)$16 < (int_32)[1]) ){ goto $label$86 }
	CALL memcpy($31, $2, $16)
	*($12) = (*($12) + $16)
	
.LABEL $label$86
	*(($38 + [760])) = *(($18 + [24]))
	*(($38 + [752])) = *(($18 + [16]))
	*((($38 + [688]) + [56])) = *(($18 + [8]))
	*($38 + [736]) = *($18)
	*($38 + [768]) = $3
	*($38 + [776]) = $4
	*($38 + [784]) = $19
	*($38 + [792]) = $5
	$12 = (($38 + [320]) + [36])
	$35 = *($0)
	$33 = (int_64)59
	$31 = [480]
	$32 = (int_64)0
	
.LOOP $label$87:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$92 }
	$16 = *($31)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$91 }
	$16 = ($16 + [165])
	goto $label$90 
	
.LABEL $label$92
	$36 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$89 }
	goto $label$88 
	
.LABEL $label$91
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$90
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$89
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$88
	$31 = ($31 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$32 = ((int_64)$36 | (int_64)$32)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$87 }
	*($38 + [248]) = $32
	*($38 + [240]) = $35
	$34 = (int_64)0
	$33 = (int_64)59
	$31 = [1904]
	$32 = (int_64)0
	
.LOOP $label$93:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$98 }
	$16 = *($31)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$97 }
	$16 = ($16 + [165])
	goto $label$96 
	
.LABEL $label$98
	$36 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$95 }
	goto $label$94 
	
.LABEL $label$97
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$96
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$95
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$94
	$31 = ($31 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$32 = ((int_64)$36 | (int_64)$32)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$93 }
	*($38 + [928]) = $32
	$16 = *(($38 + [360]))
	if ( ((uint_32)$16 >= (uint_32)*(($38 + [364]))) ){ goto $label$102 }
	*($16 + [8]) = $32
	*($16) = $35
	*($16 + [16 align=4]) = (int_64)0
	*(($18 = ($16 + [24]))) = [0]
	$31 = CALL $259([16])
	*($16 + [16]) = $31
	$2 = ($31 + [16])
	*($18) = $2
	*(($31 + [8])) = *((($38 + [240]) + [8]))
	*($31) = *($38 + [240])
	*(($16 + [20])) = $2
	*($16 + [28]) = [0]
	$31 = [32]
	*(($16 + [32])) = [0]
	*(($16 + [36])) = [0]
	$14 = ($16 + [28])
	$2 = *($38 + [720])
	$18 = *((($38 + [688]) + [36]))
	$3 = ($18 - $2)
	$34 = (CASTING uint_64)(uint_32 int_32($3 >> [4]))
	
.LOOP $label$103:
	$31 = ($31 + [1])
	$34 = (uint_64)$34 >> (uint_64)(int_64)7
	if ( ((int_64)$34) != (int_64)0) ){ goto $label$103 }
	if ( ((int_32)$2 == (int_32)$18) ){ goto $label$104 }
	$31 = (($3 & [-16]) + $31)
	
.LABEL $label$104
	$31 = ($31 + [57])
	if ( ($31 == 0) ){ goto $label$101 }
	CALL $66($14, $31)
	$18 = *(($16 + [32]))
	$31 = *(($16 + [28]))
	goto $label$100 
	
.LABEL $label$102
	CALL $96($12, ($38 + [240]), $0, ($38 + [928]), ($38 + [688]))
	goto $label$99 
	
.LABEL $label$101
	$18 = [0]
	$31 = [0]
	
.LABEL $label$100
	*($38 + [964]) = $31
	*($38 + [960]) = $31
	*($38 + [968]) = $18
	*($38 + [1032]) = ($38 + [960])
	*($38 + [312]) = ($38 + [688])
	CALL $95(($38 + [312]), ($38 + [1032]))
	*(($31 = (($38 + [320]) + [40]))) = (*($31) + [40])
	
.LABEL $label$99
	$35 = *($0)
	$34 = (int_64)0
	$33 = (int_64)59
	$31 = [480]
	$32 = (int_64)0
	
.LOOP $label$105:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$110 }
	$16 = *($31)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$109 }
	$16 = ($16 + [165])
	goto $label$108 
	
.LABEL $label$110
	$36 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$107 }
	goto $label$106 
	
.LABEL $label$109
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$108
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$107
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$106
	$31 = ($31 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$32 = ((int_64)$36 | (int_64)$32)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$105 }
	*($38 + [968]) = $32
	*($38 + [960]) = $35
	$34 = (int_64)0
	$33 = (int_64)59
	$31 = [1920]
	$32 = (int_64)0
	
.LOOP $label$111:
	if ( ((uint_64)$34 > (uint_64)(int_64)5) ){ goto $label$116 }
	$16 = *($31)
	if ( ((uint_32)(($16 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$115 }
	$16 = ($16 + [165])
	goto $label$114 
	
.LABEL $label$116
	$36 = (int_64)0
	if ( ((uint_64)$34 <= (uint_64)(int_64)11) ){ goto $label$113 }
	goto $label$112 
	
.LABEL $label$115
	$16 = ( ($16 + [208]) ? [0] : ((($16 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$114
	$36 = (int_64)((int_64)(CASTING uint_64)(uint_32 $16) << (int_64)56) >> (int_64)56)
	
.LABEL $label$113
	$36 = ((int_64)((int_64)$36 & (int_64)31) << (int_64)((int_64)$33 & (int_64)4294967295))
	
.LABEL $label$112
	$31 = ($31 + [1])
	$34 = ((int_64)$34 + (int_64)1)
	$32 = ((int_64)$36 | (int_64)$32)
	$33 = ((int_64)$33 + (int_64)-5)
	if ( ((int_64)$33 != (int_64)-6) ){ goto $label$111 }
	*($38 + [312]) = $32
	*($38 + [248]) = *($17 + [8])
	*((($38 + [240]) + [44])) = *(($38 + [892]))
	*((($38 + [240]) + [40])) = *((($38 + [880]) + [8]))
	*($38 + [240]) = $7
	*($38 + [264]) = $1
	*($38 + [256]) = *($38 + [872])
	*((($38 + [240]) + [36])) = *($38 + [884])
	*($38 + [272]) = *($38 + [880])
	*(($38 + [296])) = *((($38 + [992]) + [8]))
	*($38 + [288]) = *($38 + [992])
	*($38 + [304]) = $5
	$16 = (($38 + [320]) + [40])
	$31 = *($16)
	if ( ((uint_32)$31 >= (uint_32)*((($38 + [320]) + [44]))) ){ goto $label$118 }
	*($31 + [8]) = $32
	*($31) = $35
	*($31 + [16 align=4]) = (int_64)0
	*(($18 = ($31 + [24]))) = [0]
	$12 = CALL $259([16])
	*($31 + [16]) = $12
	$2 = ($12 + [16])
	*($18) = $2
	*(($12 + [8])) = *((($38 + [960]) + [8]))
	*($12) = *($38 + [960])
	*(($31 + [20])) = $2
	*($31 + [28]) = [0]
	*(($12 = ($31 + [32]))) = [0]
	*(($31 + [36])) = [0]
	CALL $66(($31 + [28]), [65])
	$12 = *($12)
	$31 = *($31 + [28])
	*($38 + [932]) = $31
	*($38 + [928]) = $31
	*($38 + [936]) = $12
	*($38 + [1024]) = ($38 + [928])
	*($38 + [1032]) = ($38 + [240])
	CALL $97(($38 + [1032]), ($38 + [1024]))
	*($16) = (*($16) + [40])
	goto $label$117 
	
.LABEL $label$118
	CALL $98($12, ($38 + [960]), $0, ($38 + [312]), ($38 + [240]))
	
.LABEL $label$117
	*(($38 + [340])) = [0]
	*($38 + [248]) = (int_64)0
	*($38 + [240]) = *($38 + [872])
	$34 = *($0)
	CALL $99(($38 + [960]), ($38 + [320]))
	$31 = *($38 + [960])
	CALL send_deferred(($38 + [240]), $34, $31, (*($38 + [964]) - $31), [0])
	$31 = *($38 + [960])
	if ( ($31 == 0) ){ goto $label$119 }
	*($38 + [964]) = $31
	CALL $261($31)
	
.LABEL $label$119
	$31 = *($38 + [720])
	if ( ($31 == 0) ){ goto $label$120 }
	*(($38 + [724])) = $31
	CALL $261($31)
	
.LABEL $label$120
	CALL $100(($38 + [320]))
	$31 = *($38 + [896])
	if ( ($31 == 0) ){ goto $label$121 }
	*($38 + [900]) = $31
	CALL $261($31)
	
.LABEL $label$121
	*([0] + [4]) = ($38 + [1040])
	return (unreachable)
	
.LABEL $label$39
	CALL $263(($38 + [960]))
	
.LABEL $label$38
	CALL $273(($38 + [544]))
	
.LABEL $label$37
	CALL $273(($38 + [480]))
	
.LABEL $label$36
	CALL $273(($38 + [416]))
	
.LABEL $label$35
	CALL $273((($38 + [688]) + [32]))
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
	(unreachable)
}

int_32 .FUNC $34 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$5 = (*([0] + [4]) - [160])
	$7 = $5
	*([0] + [4]) = $5
	$2 = *($1 + [4])
	$6 = *($1)
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$4 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$5 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$4
	$5 = [0]
	goto $label$1 
	
.LABEL $label$3
	$5 = ($5 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $5
	
.LABEL $label$2
	CALL read_action_data($5, $1)
	
.LABEL $label$1
	*(($3 = (($7 + [32]) + [24]))) = (int_64)0
	*(($4 = (($7 + [32]) + [16]))) = (int_64)0
	*($7 + [40]) = (int_64)0
	*($7 + [32]) = (int_64)0
	CALL eosio_assert(((uint_32)$1 > (uint_32)[31]), [256])
	CALL memcpy(($7 + [32]), $5, [32])
	if ( ($1 <= [513]) ){ goto $label$5 }
	CALL free($5)
	
.LABEL $label$5
	*(($1 = (($7 + [64]) + [24]))) = *($3)
	*(($5 = (($7 + [64]) + [16]))) = *($4)
	*($7 + [72]) = *($7 + [40])
	*($7 + [64]) = *($7 + [32])
	*((($7 + [96]) + [24])) = *($1)
	*((($7 + [96]) + [16])) = *($5)
	*($7 + [104]) = *($7 + [72])
	*($7 + [96]) = *($7 + [64])
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$6 }
	$6 = *((*($1) + $6))
	
.LABEL $label$6
	*(($5 = (($7 + [128]) + [24]))) = *((($7 + [96]) + [24]))
	*(($2 = (($7 + [128]) + [16]))) = *((($7 + [96]) + [16]))
	*($7 + [136]) = *($7 + [104])
	*($7 + [128]) = *($7 + [96])
	*(($7 + [24])) = *($5)
	*(($7 + [16])) = *($2)
	*($7) = *($7 + [128])
	*($7 + [8]) = *($7 + [136])
	CALL void $1((int_32 $7), (int_32 $6))
	*([0] + [4]) = ($7 + [160])
	return [1]
}

void .FUNC $35 (int_32 $0, int_64 $1, int_32 $2, int_32 $3, int_64 $4, int_64 $5, int_64 $6)
{
	int_32 $7
	int_32 $8
	int_64 $9
	int_64 $10
	int_64 $11
	int_64 $12
	int_32 $13
	$13 = (*([0] + [4]) - [32])
	*([0] + [4]) = $13
	$10 = (int_64)0
	$9 = (int_64)59
	$8 = [272]
	$11 = (int_64)0
	
.LOOP $label$1:
	$12 = (int_64)0
	if ( ((uint_64)$10 > (uint_64)(int_64)11) ){ goto $label$2 }
	$7 = *($8)
	if ( ((uint_32)(($7 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$7 = ($7 + [165])
	goto $label$3 
	
.LABEL $label$4
	$7 = ( ($7 + [208]) ? [0] : ((($7 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$12 = ((int_64)(CASTING uint_64)(uint_32 ($7 & [31])) << (int_64)((int_64)$9 & (int_64)4294967295))
	
.LABEL $label$2
	$8 = ($8 + [1])
	$10 = ((int_64)$10 + (int_64)1)
	$11 = ((int_64)$12 | (int_64)$11)
	$9 = ((int_64)$9 + (int_64)-5)
	if ( ((int_64)$9 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($11)
	$10 = CALL current_time()
	*(($8 = (($13 + [16]) + [8]))) = *(($2 + [8]))
	$9 = *($2)
	*(($13 + [12])) = *((($13 + [16]) + [12]))
	*(($13 + [8])) = *($8)
	*($13 + [16]) = $9
	*($13 + [4]) = *($13 + [20])
	*($13) = *($13 + [16])
	CALL $172($0, $6, $1, $5, $13, $3, $4, (CASTING uint_32)(uint_64 ((uint_64)$10 / (uint_64)(int_64)1000000)))
	*([0] + [4]) = ($13 + [32])
}

int_32 .FUNC $32 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [160])
	*([0] + [4]) = $4
	*(($5 = $4) + [124]) = $0
	*($5 + [112]) = *($1)
	*($5 + [116]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = (int_64)0
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [160])
	$3 = (int_64)5462355
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$4 = [0]
	
.LABEL $label$4
	CALL eosio_assert($4, [224])
	*(($5 + [40])) = [0]
	*(($5 + [76])) = [0]
	*(($5 + [72])) = [0]
	*(($5 + [68])) = [0]
	*(($5 + [64])) = [0]
	*(($5 + [60])) = [0]
	*(($5 + [56])) = [0]
	*(($5 + [52])) = [0]
	*($5 + [32]) = (int_64)0
	*($5 + [48]) = [0]
	*($5 + [80]) = [0]
	*($5 + [88]) = (int_64)0
	*($5 + [96]) = (int_64)0
	*($5 + [104]) = (int_64)0
	*($5 + [132]) = $0
	*($5 + [128]) = $0
	*($5 + [136]) = ($0 + $2)
	*($5 + [144]) = ($5 + [128])
	*($5 + [152]) = $5
	CALL $176(($5 + [152]), ($5 + [144]))
	if ( ($2 <= [513]) ){ goto $label$9 }
	CALL free($0)
	
.LABEL $label$9
	*($5 + [132]) = ($5 + [112])
	*($5 + [128]) = ($5 + [124])
	CALL $177(($5 + [128]), $5)
	$1 = *(($5 + [32]))
	if ( ($1 == 0) ){ goto $label$10 }
	*(($5 + [36])) = $1
	CALL $261($1)
	
.LABEL $label$10
	*([0] + [4]) = ($5 + [160])
	return [1]
}

void .FUNC $33 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [48])
	*([0] + [4]) = $5
	$2 = *($1 + [8])
	*(($5 + [24])) = [0]
	*($5 + [16]) = (int_64)0
	$2 = ((uint_64)$2 % (uint_64)(int_64)100)
	$1 = CALL strlen([2144])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$4 }
	*($5 + [16]) = ($1 << [1])
	$4 = (($5 + [16]) | [1])
	if ( $1 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$3 = (($1 + [16]) & [-16])
	$4 = CALL $259($3)
	*($5 + [16]) = ($3 | [1])
	*($5 + [24]) = $4
	*($5 + [20]) = $1
	
.LABEL $label$3
	CALL memcpy($4, [2144], $1)
	
.LABEL $label$2
	*(($4 + $1)) = [0]
	CALL _ZNSt3__19to_stringEy($5, $2)
	$1 = *($5)
	$4 = ($1 & [1])
	$1 = CALL $268(($5 + [16]), ( *($5 + [8]) ? ($5 | [1]) : $4 ), ( *($5 + [4]) ? uint_32($1 >> [1]) : $4 ))
	$4 = ($1 + [8])
	*((($5 + [32]) + [8])) = *($4)
	*($5 + [32]) = *($1)
	*($1) = [0]
	*(($1 + [4])) = [0]
	*($4) = [0]
	if ( ((*($5) & [1]) == 0) ){ goto $label$5 }
	CALL $261(*(($5 + [8])))
	
.LABEL $label$5
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$6 }
	CALL $261(*($5 + [24]))
	
.LABEL $label$6
	CALL eosio_assert([0], ( *($5 + [40]) ? (($5 + [32]) | [1]) : (*($5 + [32]) & [1]) ))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$7 }
	CALL $261(*(($5 + [40])))
	
.LABEL $label$7
	*([0] + [4]) = ($5 + [48])
	return (unreachable)
	
.LABEL $label$1
	CALL $263(($5 + [16]))
}

void .FUNC $30 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [16])
	*([0] + [4]) = $11
	$7 = (int_64)0
	$6 = (int_64)59
	$5 = [2160]
	$8 = (int_64)0
	
.LOOP $label$1:
	$9 = (int_64)0
	if ( ((uint_64)$7 > (uint_64)(int_64)11) ){ goto $label$2 }
	$2 = *($5)
	if ( ((uint_32)(($2 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$2 = ($2 + [165])
	goto $label$3 
	
.LABEL $label$4
	$2 = ( ($2 + [208]) ? [0] : ((($2 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($2 & [31])) << (int_64)((int_64)$6 & (int_64)4294967295))
	
.LABEL $label$2
	$5 = ($5 + [1])
	$7 = ((int_64)$7 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$6 = ((int_64)$6 + (int_64)-5)
	if ( ((int_64)$6 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($8)
	$7 = *($1 + [8])
	CALL eosio_assert((((int_64)$7 == (int_64)1397703940) | ((int_64)$7 == (int_64)1414549508)), [2176])
	$7 = (uint_64)$7 >> (uint_64)(int_64)8)
	$3 = *(($0 + [288]))
	$10 = *(($0 + [292]))
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$5 }
	$5 = ($10 + [-24])
	$4 = ([0] - $3)
	
.LOOP $label$6:
	if ( ((int_64)*(*($5)) == (int_64)$7) ){ goto $label$5 }
	$10 = $5
	$2 = ($5 + [-24])
	$5 = $2
	if ( ((int_32)($2 + $4) != (int_32)[-24]) ){ goto $label$6 }
	
.LABEL $label$5
	$5 = ($0 + [264])
	if ( ((int_32)$10 == (int_32)$3) ){ goto $label$9 }
	$2 = *(($10 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$5), [304])
	if ( $2 ){ goto $label$8 }
	goto $label$7 
	
.LABEL $label$9
	$2 = CALL db_find_i64(*(($0 + [264])), *(($0 + [272])), (int_64)7035938535980793856, $7)
	if ( ((int_32)$2 < (int_32)[0]) ){ goto $label$7 }
	$2 = CALL $57($5, $2)
	CALL eosio_assert(((int_32)*($2 + [80]) == (int_32)$5), [304])
	
.LABEL $label$8
	*($11 + [8]) = $1
	CALL eosio_assert([1], [560])
	CALL $179($5, $2, (int_64)0, ($11 + [8]))
	
.LABEL $label$7
	*([0] + [4]) = ($11 + [16])
}

void .FUNC $31 (int_32 $0, int_64 $1, int_64 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_64 $7, int_64 $8, int_64 $9)
{
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_64 $14
	int_64 $15
	$13 = (int_64)0
	$12 = (int_64)59
	$11 = [272]
	$14 = (int_64)0
	
.LOOP $label$1:
	$15 = (int_64)0
	if ( ((uint_64)$13 > (uint_64)(int_64)11) ){ goto $label$2 }
	$10 = *($11)
	if ( ((uint_32)(($10 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$4 }
	$10 = ($10 + [165])
	goto $label$3 
	
.LABEL $label$4
	$10 = ( ($10 + [208]) ? [0] : ((($10 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$3
	$15 = ((int_64)(CASTING uint_64)(uint_32 ($10 & [31])) << (int_64)((int_64)$12 & (int_64)4294967295))
	
.LABEL $label$2
	$11 = ($11 + [1])
	$13 = ((int_64)$13 + (int_64)1)
	$14 = ((int_64)$15 | (int_64)$14)
	$12 = ((int_64)$12 + (int_64)-5)
	if ( ((int_64)$12 != (int_64)-6) ){ goto $label$1 }
	CALL require_auth($14)
	CALL require_recipient($2)
}

int_32 .FUNC $215 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)122
	*($0 + [8]) = (int_64)10
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $214 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)124
	*($0 + [8]) = (int_64)80
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $217 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)121
	*($0 + [8]) = (int_64)25
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

int_32 .FUNC $216 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	*($0) = (int_64)123
	*($0 + [8]) = (int_64)5
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $211 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$7 = (*([0] + [4]) - [16])
	$8 = $7
	*([0] + [4]) = $7
	*($1) = (int_64)1
	$2 = *($0)
	$3 = ($1 + [8])
	CALL $267($3, [2208])
	$5 = *($1 + [8])
	$4 = ( *(($1 + [12])) ? uint_32($5 >> [1]) : ($5 & [1]) )
	$5 = ($4 + [8])
	$6 = (CASTING uint_64)(uint_32 $4)
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ($5 <= [513]) ){ goto $label$3 }
	$7 = CALL malloc($5)
	goto $label$2 
	
.LABEL $label$3
	$7 = ($7 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $7
	
.LABEL $label$2
	*($8) = $7
	*($8 + [8]) = ($7 + $5)
	CALL eosio_assert(((int_32)$5 > (int_32)[7]), [784])
	CALL memcpy($7, $1, [8])
	*($8 + [4]) = ($7 + [8])
	CALL $71($8, $3)
	$6 = *($1)
	*($1 + [24]) = CALL db_store_i64(*($2 + [8]), (int_64)-7876370025341255680, *(*($0 + [8])), $6, $7, $5)
	if ( ($5 <= [513]) ){ goto $label$4 }
	CALL free($7)
	
.LABEL $label$4
	if ( (uint_64)($6 <= *($2 + [16])) ){ goto $label$5 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$6 + (int_64)1) : ((uint_64)$6 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*([0] + [4]) = ($8 + [16])
}

void .FUNC $210 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [112])
	*([0] + [4]) = $8
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*(($4 = CALL $259([96])) + [80]) = $1
	*($4) = (uint_64)*(*($3)) >> (uint_64)(int_64)8)
	*($4 + [8]) = *(*($3 + [4]))
	*($4 + [16]) = (int_64)0
	*($4 + [24]) = (int_64)0
	*($4 + [32]) = (int_64)0
	*($4 + [40]) = (int_64)0
	$5 = CALL current_time()
	*($4 + [56]) = (int_64)0
	*($4 + [48]) = $5
	*($8 + [104]) = (($8 + [16]) + [80])
	*($8 + [100]) = ($8 + [16])
	*($8 + [96]) = ($8 + [16])
	CALL $59(($8 + [96]), $4)
	$5 = *($4)
	*($4 + [84]) = CALL db_store_i64(*($1 + [8]), (int_64)7035938535980793856, $2, $5, ($8 + [16]), [80])
	if ( (uint_64)($5 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*($8 + [96]) = $4
	$5 = *($4)
	*($8 + [16]) = $5
	$6 = *($4 + [84])
	*($8 + [12]) = $6
	$7 = ($1 + [28])
	$3 = *($7)
	if ( ((uint_32)$3 >= (uint_32)*(($1 + [32]))) ){ goto $label$3 }
	*($3 + [8]) = $5
	*($3 + [16]) = $6
	*($8 + [96]) = [0]
	*($3) = $4
	*($7) = ($3 + [24])
	goto $label$2 
	
.LABEL $label$3
	CALL $61(($1 + [24]), ($8 + [96]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$2
	*($0 + [4]) = $4
	*($0) = $1
	$4 = *($8 + [96])
	*($8 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$4 }
	CALL $261($4)
	
.LABEL $label$4
	*([0] + [4]) = ($8 + [112])
}

void .FUNC $198 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $221($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $199 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $220($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $196 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $223($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $197 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $222($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

int_32 .FUNC $194 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = (int_64)109
	*($0 + [8]) = *(*($1))
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}

void .FUNC $195 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $224($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $192 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [48])
	*([0] + [4]) = $7
	*($7 + [40]) = $2
	CALL eosio_assert(((int_64)*($1) == (int_64)CALL $fimport$14()), [1664])
	*($7 + [20]) = $3
	*($7 + [16]) = $1
	*($7 + [24]) = ($7 + [40])
	$3 = CALL $259([32])
	CALL $194($3, $1, ($7 + [16]))
	*($7 + [32]) = $3
	$2 = *($3)
	*($7 + [16]) = $2
	$4 = *($3 + [20])
	*($7 + [12]) = $4
	$6 = ($1 + [28])
	$5 = *($6)
	if ( ((uint_32)$5 >= (uint_32)*(($1 + [32]))) ){ goto $label$2 }
	*($5 + [8]) = $2
	*($5 + [16]) = $4
	*($7 + [32]) = [0]
	*($5) = $3
	*($6) = ($5 + [24])
	goto $label$1 
	
.LABEL $label$2
	CALL $72(($1 + [24]), ($7 + [32]), ($7 + [16]), ($7 + [12]))
	
.LABEL $label$1
	*($0 + [4]) = $3
	*($0) = $1
	$1 = *($7 + [32])
	*($7 + [32]) = [0]
	if ( ($1 == 0) ){ goto $label$3 }
	CALL $261($1)
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [48])
}

void .FUNC $193 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	CALL eosio_assert([1], [784])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

void .FUNC $190 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	$5 = (*([0] + [4]) - [16])
	*([0] + [4]) = $5
	CALL eosio_assert(((int_32)*($1 + [16]) == (int_32)$0), [608])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$14()), [656])
	*($1 + [8]) = *(*($3))
	$4 = *($1)
	CALL eosio_assert([1], [720])
	CALL eosio_assert([1], [784])
	CALL memcpy($5, $1, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($5 | [8]), ($1 + [8]), [8])
	CALL db_update_i64(*($1 + [20]), $2, $5, [16])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$1 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($5 + [16])
}

int_32 .FUNC $191 (int_32 $0, int_32 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	$4 = (*([0] + [4]) - [16])
	*([0] + [4]) = $4
	*($0 + [16]) = $1
	$1 = *($2 + [4])
	*($0) = *(*($1))
	*($0 + [8]) = *(*($1 + [4]))
	$1 = *($2)
	CALL eosio_assert([1], [784])
	CALL memcpy($4, $0, [8])
	CALL eosio_assert([1], [784])
	CALL memcpy(($4 | [8]), ($0 + [8]), [8])
	$3 = *($0)
	*($0 + [20]) = CALL db_store_i64(*($1 + [8]), (int_64)7035939398956875776, *(*($2 + [8])), $3, $4, [16])
	if ( (uint_64)($3 <= *($1 + [16])) ){ goto $label$1 }
	*(($1 + [16])) = ( (int_64)-2 ? ((int_64)$3 + (int_64)1) : ((uint_64)$3 > (uint_64)(int_64)-3) )
	
.LABEL $label$1
	*([0] + [4]) = ($4 + [16])
	return $0
}