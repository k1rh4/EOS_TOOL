(data (i32.const 4) "@g\00\00")
(data (i32.const 16) "&\00")
(data (i32.const 32) "=\00")
(data (i32.const 48) "opt\00")
(data (i32.const 64) "invalid symbol name\00")
(data (i32.const 96) "magnitude of asset amount must be less than 2^62\00")
(data (i32.const 160) "paying\00")
(data (i32.const 176) "object passed to iterator_to is not in multi_index\00")
(data (i32.const 240) "cannot create objects in table of another contract\00")
(data (i32.const 304) "attempt to add asset with different symbol\00")
(data (i32.const 352) "addition underflow\00")
(data (i32.const 384) "addition overflow\00")
(data (i32.const 416) "invalid amount\00")
(data (i32.const 432) "object passed to modify is not in multi_index\00")
(data (i32.const 480) "cannot modify objects in table of another contract\00")
(data (i32.const 544) "updater cannot change primary key when modifying an object\00")
(data (i32.const 608) "write\00")
(data (i32.const 624) "error reading iterator\00")
(data (i32.const 656) "read\00")
(data (i32.const 672) "get\00")
(data (i32.const 688) "invalid assert\00")
(data (i32.const 704) "comparison of assets with different symbols is not allowed\00")
(data (i32.const 768) "no enough stake\00")
(data (i32.const 784) "not found account\00")
(data (i32.const 816) "next primary key in table is at autoincrement limit\00")
(data (i32.const 880) "cannot decrement end iterator when the table is empty\00")
(data (i32.const 944) "cannot decrement iterator at beginning of table\00")
(data (i32.const 992) "attempt to subtract asset with different symbol\00")
(data (i32.const 1040) "subtraction underflow\00")
(data (i32.const 1072) "subtraction overflow\00")
(data (i32.const 1104) "active\00")
(data (i32.const 1120) "diceeostoken\00")
(data (i32.const 1136) "transfer\00")
(data (i32.const 1152) "refund\00")
(data (i32.const 1168) "cannot pass end iterator to erase\00")
(data (i32.const 1216) "cannot increment end iterator\00")
(data (i32.const 1248) "object passed to erase is not in multi_index\00")
(data (i32.const 1296) "cannot erase objects in table of another contract\00")
(data (i32.const 1360) "attempt to remove object that was not in multi_index\00")
(data (i32.const 1424) "state error\00")
(data (i32.const 1440) "total stake error\00")
(data (i32.const 1472) "dividend\00")
(data (i32.const 1488) "invalid quantity\00")
(data (i32.const 1520) "stake\00")
(data (i32.const 1536) "invalid token\00")
(data (i32.const 9952) "malloc_from_freed was designed to only be called after _heap was completely allocated\00")
(import "env" "__divti3" (func $fimport$0 (param i32 i64 i64 i64 i64)))
(import "env" "__fixdfti" (func $fimport$1 (param i32 f64)))
(import "env" "__floattidf" (func $fimport$2 (param i64 i64) (result f64)))
(import "env" "__multi3" (func $fimport$3 (param i32 i64 i64 i64 i64)))
(import "env" "abort" (func $fimport$4))
(import "env" "action_data_size" (func $fimport$5 (result i32)))
(import "env" "current_receiver" (func $fimport$6 (result i64)))
(import "env" "current_time" (func $fimport$7 (result i64)))
(import "env" "db_end_i64" (func $fimport$8 (param i64 i64 i64) (result i32)))
(import "env" "db_find_i64" (func $fimport$9 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_get_i64" (func $fimport$10 (param i32 i32 i32) (result i32)))
(import "env" "db_idx128_find_primary" (func $fimport$11 (param i64 i64 i64 i32 i64) (result i32)))
(import "env" "db_idx128_lowerbound" (func $fimport$12 (param i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_idx128_store" (func $fimport$13 (param i64 i64 i64 i64 i32) (result i32)))
(import "env" "db_idx128_update" (func $fimport$14 (param i32 i64 i32)))
(import "env" "db_lowerbound_i64" (func $fimport$15 (param i64 i64 i64 i64) (result i32)))
(import "env" "db_next_i64" (func $fimport$16 (param i32 i32) (result i32)))
(import "env" "db_previous_i64" (func $fimport$17 (param i32 i32) (result i32)))
(import "env" "db_remove_i64" (func $fimport$18 (param i32)))
(import "env" "db_store_i64" (func $fimport$19 (param i64 i64 i64 i64 i32 i32) (result i32)))
(import "env" "db_update_i64" (func $fimport$20 (param i32 i64 i32 i32)))
(import "env" "eosio_assert" (func $fimport$21 (param i32 i32)))
(import "env" "eosio_exit" (func $fimport$22 (param i32)))
(import "env" "memcpy" (func $fimport$23 (param i32 i32 i32) (result i32)))
(import "env" "memmove" (func $fimport$24 (param i32 i32 i32) (result i32)))
(import "env" "read_action_data" (func $fimport$25 (param i32 i32) (result i32)))
(import "env" "require_auth" (func $fimport$26 (param i64)))
(import "env" "require_auth2" (func $fimport$27 (param i64 i64)))
(import "env" "send_inline" (func $fimport$28 (param i32 i32)))
(export "memory" (memory $0))
(export "_ZeqRK11checksum256S1_" (func $0))
(export "_ZeqRK11checksum160S1_" (func $1))
(export "_ZneRK11checksum160S1_" (func $2))
(export "now" (func $3))
(export "_ZN5eosio12require_authERKNS_16permission_levelE" (func $4))
(export "_Z5splitRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEERKS6_S6_" (func $5))
(export "_Z10parse_memoNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEER10memo_param" (func $7))
(export "_Z19from_extended_assetRKN5eosio14extended_assetE" (func $8))
(export "_ZN8dividendC2Ey" (func $10))
(export "_ZN8dividend5stakeEyRKN5eosio5assetE" (func $11))
(export "_ZN8dividend18modify_total_stakeERKN5eosio5assetE" (func $17))
(export "_ZN8dividend6refundENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN5eosio5assetE" (func $28))
(export "_ZN8dividend13add_refundingEyRKN5eosio5assetE" (func $30))
(export "_ZN8dividend12deposit_poolEyRKN5eosio5assetE" (func $37))
(export "_ZN8dividend7releaseEl" (func $45))
(export "_ZN8dividend3payEl" (func $53))
(export "_ZN8dividend5claimENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE" (func $62))
(export "_ZN8dividend11on_transferERKN5eosio8currency8transferEy" (func $64))
(export "_ZN8dividend4testEm" (func $65))
(export "_ZN8dividend5applyEyy" (func $66))
(export "apply" (func $76))
(export "malloc" (func $77))
(export "free" (func $80))
(export "memchr" (func $91))
(export "memcmp" (func $92))
(export "strlen" (func $93))
(table $0 6 6 anyfunc)
(elem (i32.const 0) $94 $62 $28 $45 $65 $53)



void .FUNC $94 ()
{
	(unreachable)
}

int_32 .FUNC $90 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	*($0) = (int_64)0
	*(($0 + [8])) = [0]
	$5 = ($8 & [1])
	$8 = *($1)
	$8 = ( *($1 + [4]) ? uint_32($8 >> [1]) : $5 )
	if ( ($8 <= $2) ){ goto $label$1 }
	$8 = ($8 - $2)
	$3 = ( $8 ? $3 : ($8 <= $3) )
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$1 }
	$6 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$4 }
	*($0) = ($3 << [1])
	$8 = ($0 + [1])
	if ( $3 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$7 = (($3 + [16]) & [-16])
	$8 = CALL $81($7)
	*($0) = ($7 | [1])
	*($0 + [8]) = $8
	*($0 + [4]) = $3
	
.LABEL $label$3
	CALL memcpy($8, (( $6 ? ($1 + [1]) : $5 ) + $2), $3)
	
.LABEL $label$2
	*(($8 + $3)) = [0]
	return $0
	
.LABEL $label$1
	CALL abort()
	return (unreachable)
}

int_32 .FUNC memchr (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = [0]
	$4 = ((int_32)$2 != (int_32)[0])
	if ( ($2 == 0) ){ goto $label$6 }
	if ( (($0 & [3]) == 0) ){ goto $label$5 }
	$3 = ($1 & [255])
	
.LOOP $label$7:
	if ( ((int_32)*($0) == (int_32)$3) ){ goto $label$3 }
	$4 = ((int_32)$2 != (int_32)[1])
	$5 = ($2 + [-1])
	$0 = ($0 + [1])
	if ( ((int_32)$2 == (int_32)[1]) ){ goto $label$4 }
	$2 = $5
	if ( ($0 & [3]) ){ goto $label$7 }
	goto $label$4 
	
.LABEL $label$6
	$5 = $2
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$5
	$5 = $2
	
.LABEL $label$4
	if ( $4 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$3
	$5 = $2
	
.LABEL $label$2
	if ( ((int_32)*($0) == (int_32)($1 & [255])) ){ goto $label$8 }
	if ( ($5 <= [4]) ){ goto $label$10 }
	$4 = ((int_32)($1 & [255]) * (int_32)[16843009])
	
.LOOP $label$11:
	$2 = ((int_32)*($0) ^ (int_32)$4)
	if ( ((((int_32)$2 ^ (int_32)[-1]) & ($2 + [-16843009])) & [-2139062144]) ){ goto $label$9 }
	$0 = ($0 + [4])
	$5 = ($5 + [-4])
	if ( ((uint_32)$5 > (uint_32)[3]) ){ goto $label$11 }
	
.LABEL $label$10
	if ( ($5 == 0) ){ goto $label$1 }
	
.LABEL $label$9
	$2 = ($1 & [255])
	
.LOOP $label$12:
	if ( ((int_32)*($0) == (int_32)$2) ){ goto $label$8 }
	$0 = ($0 + [1])
	$5 = ($5 + [-1])
	if ( $5 ){ goto $label$12 }
	goto $label$1 
	
.LABEL $label$8
	$6 = $5
	
.LABEL $label$1
	return ( $0 ? [0] : $6 )
}

int_32 .FUNC memcmp (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = [0]
	if ( ($2 == 0) ){ goto $label$1 }
	
.LOOP $label$3:
	$4 = *($1)
	$3 = *($0)
	if ( ((int_32)$3 != (int_32)$4) ){ goto $label$2 }
	$1 = ($1 + [1])
	$0 = ($0 + [1])
	$2 = ($2 + [-1])
	if ( $2 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = ($3 - $4)
	
.LABEL $label$1
	return $5
}

int_32 .FUNC strlen (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = $0
	if ( (($0 & [3]) == 0) ){ goto $label$2 }
	$2 = $0
	
.LOOP $label$3:
	if ( (*($2) == 0) ){ goto $label$1 }
	$2 = ($2 + [1])
	if ( ($2 & [3]) ){ goto $label$3 }
	
.LABEL $label$2
	$2 = ($2 + [-4])
	
.LOOP $label$4:
	$2 = ($2 + [4])
	$1 = *($2)
	if ( (((((int_32)$1 ^ (int_32)[-1]) & ($1 + [-16843009])) & [-2139062144]) == 0) ){ goto $label$4 }
	if ( (($1 & [255]) == 0) ){ goto $label$1 }
	
.LOOP $label$5:
	$2 = ($2 + [1])
	if ( *($2) ){ goto $label$5 }
	
.LABEL $label$1
	return ($2 - $0)
}

void .FUNC $38 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	*($10 + [24]) = (int_64)0
	*($10 + [8]) = *(($2 + [8]))
	*($10) = *($2)
	$2 = [0]
	$8 = *($1)
	$3 = CALL db_idx128_lowerbound(*($8), *($8 + [8]), (int_64)-5969209044777304064, $10, ($10 + [24]))
	if ( ((int_32)$3 < (int_32)[0]) ){ goto $label$1 }
	$5 = *($10 + [24])
	$6 = *($4 + [24])
	$4 = *($1)
	$9 = *(($4 + [28]))
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$2 }
	$2 = ($9 + [-24])
	$7 = ([0] - $6)
	
.LOOP $label$3:
	if ( ((int_64)*(*($2)) == (int_64)$5) ){ goto $label$2 }
	$9 = $2
	$8 = ($2 + [-24])
	$2 = $8
	if ( ((int_32)($8 + $7) != (int_32)[-24]) ){ goto $label$3 }
	
.LABEL $label$2
	if ( ((int_32)$9 == (int_32)$6) ){ goto $label$5 }
	$2 = *(($9 + [-24]))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [176])
	goto $label$4 
	
.LABEL $label$5
	$2 = CALL $43($4, CALL $fimport$9(*($4), *($4 + [8]), (int_64)-5969209044777304064, $5))
	CALL eosio_assert(((int_32)*($2 + [56]) == (int_32)$4), [176])
	
.LABEL $label$4
	*(($2 + [64])) = $3
	
.LABEL $label$1
	*($0 + [4]) = $2
	*($0) = $1
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $49 (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	CALL eosio_assert(((int_32)*($1 + [36]) == (int_32)$0), [1248])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [1296])
	$3 = *($0 + [24])
	$5 = ($0 + [28])
	$7 = *($5)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	$2 = *($1)
	$6 = ([0] - $3)
	$8 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_64)*(*($8)) == (int_64)$2) ){ goto $label$1 }
	$7 = $8
	$4 = ($8 + [-24])
	$8 = $4
	if ( ((int_32)($4 + $6) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	CALL eosio_assert(((int_32)$7 != (int_32)$3), [1360])
	$8 = ($7 + [-24])
	$4 = *($5)
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$4 }
	$3 = ([0] - $4)
	$7 = $8
	
.LOOP $label$5:
	$8 = ($7 + [24])
	$6 = *($8)
	*($8) = [0]
	$4 = *($7)
	*($7) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $82($4)
	
.LABEL $label$6
	*(($7 + [16])) = *(($7 + [40]))
	*(($7 + [8])) = *(($7 + [32]))
	$7 = $8
	if ( ((int_32)($8 + $3) != (int_32)[-24]) ){ goto $label$5 }
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$8) ){ goto $label$3 }
	
.LABEL $label$4
	
.LOOP $label$7:
	$7 = ($7 + [-24])
	$4 = *($7)
	*($7) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $82($4)
	
.LABEL $label$8
	if ( ((int_32)$8 != (int_32)$7) ){ goto $label$7 }
	
.LABEL $label$3
	*(($0 + [28])) = $8
	CALL db_remove_i64(*($1 + [40]))
}

void .FUNC $48 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	*($0 + [8]) = [0]
	*($0) = (int_64)0
	$5 = [16]
	$2 = ($1 + [16])
	$3 = *($1 + [16])
	$7 = *(($1 + [20]))
	$4 = ($7 - $3)
	$6 = (CASTING uint_64)(uint_32 int_32($4 >> [4]))
	
.LOOP $label$1:
	$5 = ($5 + [1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$3 == (int_32)$7) ){ goto $label$2 }
	$5 = (($4 & [-16]) + $5)
	
.LABEL $label$2
	$3 = *(($1 + [32]))
	$7 = *($1 + [28])
	$5 = (($7 - $5) - $3)
	$4 = ($1 + [28])
	$6 = (CASTING uint_64)(uint_32 ($3 - $7))
	
.LOOP $label$3:
	$5 = ($5 + [-1])
	$6 = (uint_64)$6 >> (uint_64)(int_64)7
	if ( ((int_64)$6) != (int_64)0) ){ goto $label$3 }
	$7 = [0]
	if ( ($5 == 0) ){ goto $label$5 }
	CALL $46($0, ([0] - $5))
	$7 = *(($0 + [4]))
	$5 = *($0)
	goto $label$4 
	
.LABEL $label$5
	$5 = [0]
	
.LABEL $label$4
	*($8) = $5
	*($8 + [8]) = $7
	CALL eosio_assert(((int_32)($7 - $5) > (int_32)[7]), [608])
	CALL memcpy($5, $1, [8])
	$0 = ($5 + [8])
	CALL eosio_assert(((int_32)($7 - $0) > (int_32)[7]), [608])
	CALL memcpy($0, ($1 + [8]), [8])
	*($8 + [4]) = ($5 + [16])
	CALL $51(CALL $50($8, $2), $4)
	*([0] + [4]) = ($8 + [16])
}

int_32 .FUNC $43 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [32])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$7 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($7 >> [31]) ^ (int_32)[1]), [624])
	if ( ((uint_32)$7 <= (uint_32)[512]) ){ goto $label$6 }
	$4 = CALL malloc($7)
	CALL db_get_i64($1, $4, $7)
	CALL free($4)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $4
	CALL db_get_i64($1, $4, $7)
	
.LABEL $label$5
	$6 = CALL $81([72])
	CALL $40($6)
	*($6 + [56]) = $0
	CALL eosio_assert(((uint_32)$7 > (uint_32)[7]), [656])
	CALL memcpy($6, $4, [8])
	$7 = ($7 & [-8])
	CALL eosio_assert(((int_32)$7 != (int_32)[8]), [656])
	CALL memcpy(($6 + [8]), ($4 + [8]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[16]), [656])
	CALL memcpy(($6 + [16]), ($4 + [16]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[24]), [656])
	CALL memcpy(($6 + [24]), ($4 + [24]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[32]), [656])
	CALL memcpy(($6 + [32]), ($4 + [32]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[40]), [656])
	CALL memcpy(($6 + [40]), ($4 + [40]), [8])
	CALL eosio_assert(((int_32)$7 != (int_32)[48]), [656])
	CALL memcpy(($6 + [48]), ($4 + [48]), [8])
	*($6 + [64]) = [-1]
	*($6 + [60]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [60])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$8 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $42(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$7
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $82($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [32])
	return $6
}

void .FUNC $42 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $81(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $82($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $82($6)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC $41 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [64])
	$13 = $14
	*([0] + [4]) = $14
	$2 = *($0)
	$3 = *($0 + [4])
	$5 = *($3)
	$4 = *($5 + [16])
	if ( ((int_64)$4 != (int_64)-1) ){ goto $label$1 }
	$4 = (int_64)0
	$10 = CALL db_lowerbound_i64(*($5), *($5 + [8]), (int_64)-5969209044777304064, (int_64)0)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$2 }
	CALL $43($5, $10)
	*($13 + [52]) = [0]
	*($13 + [48]) = $5
	$4 = *(*(CALL $44(($13 + [48])) + [4]))
	$4 = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($5 + [16])) = $4
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($4 <= (int_64)-2), [816])
	*($1) = *(($5 + [16]))
	$5 = *($3 + [4])
	*((($13 + [16]) + [12])) = *(($5 + [12]))
	*(($10 = (($13 + [16]) + [8]))) = *(($5 + [8]))
	*($13 + [16]) = *($5)
	*($13 + [20]) = *(($5 + [4]))
	$4 = *(*($3 + [8]))
	$7 = *($10)
	*(($6 = (($13 + [48]) + [8]))) = $7
	*(($5 = (($13 + [32]) + [8]))) = $7
	$7 = *($13 + [16])
	*($13 + [48]) = $7
	*($13 + [32]) = $7
	*(($8 = ($1 + [24]))) = $4
	*(($9 = ($1 + [16]))) = *($5)
	*($1 + [8]) = *($13 + [32])
	$10 = *($3 + [4])
	*(($13 + [12])) = *(($10 + [12]))
	*(($11 = ($13 + [8]))) = *(($10 + [8]))
	*($13) = *($10)
	*($13 + [4]) = *(($10 + [4]))
	$4 = *(*($3 + [8]))
	$7 = *($11)
	*($6) = $7
	*($5) = $7
	$7 = *($13)
	*($13 + [48]) = $7
	*($13 + [32]) = $7
	*(($1 + [48])) = $4
	*(($1 + [40])) = *($5)
	*($1 + [32]) = *($13 + [32])
	$5 = $14
	$3 = ($5 + [-64])
	*([0] + [4]) = $3
	*($13 + [36]) = $3
	*($13 + [32]) = $3
	*($13 + [40]) = ($5 + [-8])
	CALL $39(($13 + [32]), $1)
	$4 = *($1)
	*($1 + [60]) = CALL db_store_i64(*($2 + [8]), (int_64)-5969209044777304064, *(*($0 + [8])), $4, $3, [56])
	if ( (uint_64)($4 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	$4 = *(($2 + [8]))
	$7 = *(*(($0 + [8])))
	$12 = *($1)
	*($13 + [56]) = *($8)
	*($13 + [48]) = *($9)
	*($1 + [64]) = CALL db_idx128_store($4, (int_64)-5969209044777304064, $7, $12, ($13 + [48]))
	*([0] + [4]) = ($13 + [64])
}

int_32 .FUNC $40 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [64])
	*(($2 = ($0 + [40]))) = (int_64)1398362884
	*($0 + [32]) = (int_64)0
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [64])
	return $0
}

void .FUNC $47 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$2 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), $2, [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$0 = *($0)
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [8]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	$3 = *($1)
	CALL eosio_assert(((int_32)(*($3 + [8]) - *($3 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [16]), [8])
	$2 = (*($3 + [4]) + [8])
	*($3 + [4]) = $2
	CALL eosio_assert(((int_32)(*($3 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($3 + [4]), ($0 + [24]), [8])
	*($3 + [4]) = (*($3 + [4]) + [8])
	CALL $52(*($1), ($0 + [32]))
}

void .FUNC $46 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0 + [4])
	$2 = *($0 + [8])
	if ( ((uint_32)($2 - $6) >= (uint_32)$1) ){ goto $label$5 }
	$5 = *($0)
	$3 = ($6 - $5)
	$4 = ($3 + $1)
	if ( ((int_32)$4 <= (int_32)[-1]) ){ goto $label$3 }
	$6 = [2147483647]
	$2 = ($2 - $5)
	if ( ((uint_32)$2 > (uint_32)[1073741822]) ){ goto $label$6 }
	$6 = ($2 << [1])
	$6 = ( $4 ? $6 : ($6 <= $4) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$2 = CALL $81($6)
	goto $label$2 
	
.LABEL $label$5
	$0 = ($0 + [4])
	
.LOOP $label$7:
	*($6) = [0]
	$6 = (*($0) + [1])
	*($0) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$2 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	$4 = ($2 + $6)
	$5 = ($2 + $3)
	$6 = $5
	
.LOOP $label$8:
	*($6) = [0]
	$6 = ($6 + [1])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$8 }
	$1 = *($0)
	$3 = ($0 + [4])
	$2 = (*($3) - $1)
	$5 = ($5 - $2)
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$9 }
	CALL memcpy($5, $1, $2)
	$1 = *($0)
	
.LABEL $label$9
	*($0) = $5
	*($3) = $6
	*(($0 + [8])) = $4
	if ( ($1 == 0) ){ goto $label$1 }
	CALL $82($1)
	return 
	
.LABEL $label$1
	(unreachable)
}

void .FUNC _ZN8dividend7releaseEl (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_64 $16
	int_64 $17
	int_64 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_32 $22
	int_32 $23
	$23 = (*([0] + [4]) - [176])
	*([0] + [4]) = $23
	CALL require_auth(*($0))
	*(($23 + [136])) = [0]
	*($23 + [120]) = (int_64)-1
	$17 = *($0)
	*($23 + [104]) = $17
	*($23 + [112]) = $17
	*($23 + [128]) = (int_64)0
	$19 = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$15 = CALL db_lowerbound_i64($17, $17, (int_64)-5001342331490271232, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$2 }
	$14 = CALL $33(($23 + [104]), $15)
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$2 }
	$2 = (CASTING uint_32)(uint_64 $19)
	$6 = ($23 + [92])
	$5 = (($23 + [16]) + [32])
	$4 = (($23 + [16]) + [16])
	$3 = ($23 | [1])
	$9 = ($23 + [8])
	$10 = ($23 + [84])
	$11 = ($23 + [88])
	$13 = ($23 + [56])
	
.LOOP $label$3:
	if ( ((uint_32)(*($14 + [32]) + [43200]) >= (uint_32)$2) ){ goto $label$2 }
	$7 = *($0)
	$17 = (int_64)0
	$16 = (int_64)59
	$15 = [1104]
	$18 = (int_64)0
	
.LOOP $label$4:
	if ( ((uint_64)$17 > (uint_64)(int_64)5) ){ goto $label$9 }
	$8 = *($15)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$8 }
	$8 = ($8 + [165])
	goto $label$7 
	
.LABEL $label$9
	$19 = (int_64)0
	if ( ((uint_64)$17 <= (uint_64)(int_64)11) ){ goto $label$6 }
	goto $label$5 
	
.LABEL $label$8
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$7
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$6
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$5
	$15 = ($15 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$18 = ((int_64)$19 | (int_64)$18)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$4 }
	$17 = (int_64)0
	$19 = (int_64)59
	$15 = [1120]
	$20 = (int_64)0
	
.LOOP $label$10:
	$16 = (int_64)0
	if ( ((uint_64)$17 > (uint_64)(int_64)11) ){ goto $label$11 }
	$8 = *($15)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$8 = ($8 + [165])
	goto $label$12 
	
.LABEL $label$13
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$16 = ((int_64)(CASTING uint_64)(uint_32 ($8 & [31])) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$11
	$15 = ($15 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$20 = ((int_64)$16 | (int_64)$20)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$10 }
	$17 = (int_64)0
	$16 = (int_64)59
	$15 = [1136]
	$21 = (int_64)0
	
.LOOP $label$14:
	if ( ((uint_64)$17 > (uint_64)(int_64)7) ){ goto $label$19 }
	$8 = *($15)
	if ( ((uint_32)(($8 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$18 }
	$8 = ($8 + [165])
	goto $label$17 
	
.LABEL $label$19
	$19 = (int_64)0
	if ( ((uint_64)$17 <= (uint_64)(int_64)11) ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	$8 = ( ($8 + [208]) ? [0] : ((($8 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$17
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $8) << (int_64)56) >> (int_64)56)
	
.LABEL $label$16
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$16 & (int_64)4294967295))
	
.LABEL $label$15
	$15 = ($15 + [1])
	$17 = ((int_64)$17 + (int_64)1)
	$21 = ((int_64)$19 | (int_64)$21)
	$16 = ((int_64)$16 + (int_64)-5)
	if ( ((int_64)$16 != (int_64)-6) ){ goto $label$14 }
	*($9) = [0]
	*($23) = (int_64)0
	$15 = CALL strlen([1152])
	if ( ((uint_32)$15 >= (uint_32)[-16]) ){ goto $label$1 }
	$8 = ($14 + [16])
	if ( ((uint_32)$15 >= (uint_32)[11]) ){ goto $label$22 }
	*($23) = ($15 << [1])
	$22 = $3
	if ( $15 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	$12 = (($15 + [16]) & [-16])
	$22 = CALL $81($12)
	*($9) = $22
	*($23) = ($12 | [1])
	*($23 + [4]) = $15
	
.LABEL $label$21
	CALL memcpy($22, [1152], $15)
	
.LABEL $label$20
	*(($22 + $15)) = [0]
	*((($23 + [16]) + [8])) = *(($14 + [8]))
	*(($4 + [8])) = *(($8 + [8]))
	*(($4 + [4])) = *(($8 + [4]))
	*($4) = *($8)
	*(($4 + [12])) = *(($8 + [12]))
	*($23 + [16]) = *($0)
	*(($5 + [4])) = *($23 + [4 align=4])
	*($5) = *($23)
	*($23) = [0]
	*($23 + [4]) = [0]
	*($9) = [0]
	*((($23 + [64]) + [8])) = $21
	*($23 + [64]) = $20
	*(($8 = (($23 + [64]) + [16]))) = [0]
	*($10) = [0]
	*($11) = [0]
	$15 = CALL $81([16])
	*($8) = $15
	*($15) = $7
	*($15 + [8]) = $18
	*($6) = [0]
	*(($22 = (($23 + [64]) + [32]))) = [0]
	$15 = ($15 + [16])
	*($11) = $15
	*($10) = $15
	*((($23 + [64]) + [36])) = [0]
	$15 = *($5)
	$12 = ( *((($23 + [16]) + [36])) ? uint_32($15 >> [1]) : ($15 & [1]) )
	$15 = ($12 + [32])
	$17 = (CASTING uint_64)(uint_32 $12)
	
.LOOP $label$23:
	$15 = ($15 + [1])
	$17 = (uint_64)$17 >> (uint_64)(int_64)7
	if ( ((int_64)$17) != (int_64)0) ){ goto $label$23 }
	if ( ($15 == 0) ){ goto $label$25 }
	CALL $46($6, $15)
	$12 = *($22)
	$15 = *($6)
	goto $label$24 
	
.LABEL $label$25
	$12 = [0]
	$15 = [0]
	
.LABEL $label$24
	*((($23 + [160]) + [8])) = $12
	*($23 + [164]) = $15
	*($23 + [160]) = $15
	*($23 + [144]) = ($23 + [160])
	*($23 + [152]) = ($23 + [16])
	CALL $47(($23 + [152]), ($23 + [144]))
	CALL $48(($23 + [160]), ($23 + [64]))
	$15 = *($23 + [160])
	CALL send_inline($15, (*($23 + [164]) - $15))
	$15 = *($23 + [160])
	if ( ($15 == 0) ){ goto $label$26 }
	*($23 + [164]) = $15
	CALL $82($15)
	
.LABEL $label$26
	$15 = *($6)
	if ( ($15 == 0) ){ goto $label$27 }
	*($22) = $15
	CALL $82($15)
	
.LABEL $label$27
	$15 = *($8)
	if ( ($15 == 0) ){ goto $label$28 }
	*($10) = $15
	CALL $82($15)
	
.LABEL $label$28
	if ( ((*($5) & [1]) == 0) ){ goto $label$29 }
	CALL $82(*($13))
	
.LABEL $label$29
	if ( ((*($23) & [1]) == 0) ){ goto $label$30 }
	CALL $82(*($9))
	
.LABEL $label$30
	$15 = [0]
	$8 = ((int_32)$14 != (int_32)[0])
	CALL eosio_assert($8, [1168])
	CALL eosio_assert($8, [1216])
	$8 = CALL db_next_i64(*($14 + [40]), ($23 + [16]))
	if ( ((int_32)$8 < (int_32)[0]) ){ goto $label$31 }
	$15 = CALL $33(($23 + [104]), $8)
	
.LABEL $label$31
	CALL $49(($23 + [104]), $14)
	if ( ($15 == 0) ){ goto $label$2 }
	$8 = ((int_32)$1 > (int_32)[1])
	$1 = ($1 + [-1])
	$14 = $15
	if ( $8 ){ goto $label$3 }
	
.LABEL $label$2
	$14 = *($23 + [128])
	if ( ($14 == 0) ){ goto $label$32 }
	$5 = ($23 + [132])
	$15 = *($5)
	if ( ((int_32)$15 == (int_32)$14) ){ goto $label$34 }
	
.LOOP $label$35:
	$15 = ($15 + [-24])
	$8 = *($15)
	*($15) = [0]
	if ( ($8 == 0) ){ goto $label$36 }
	CALL $82($8)
	
.LABEL $label$36
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$35 }
	$15 = *(($23 + [128]))
	goto $label$33 
	
.LABEL $label$34
	$15 = $14
	
.LABEL $label$33
	*($5) = $14
	CALL $82($15)
	
.LABEL $label$32
	*([0] + [4]) = ($23 + [176])
	return (unreachable)
	
.LABEL $label$1
	CALL $83($23)
}

int_32 .FUNC $44 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [60]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [944])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-5969209044777304064)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [880])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [880])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $43(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC _Z19from_extended_assetRKN5eosio14extended_assetE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	$2 = *($1)
	CALL __multi3($3, $2, (int_64)$2 >> (int_64)63), (int_64)10000000000, (int_64)0)
	CALL $9($0, *($1 + [16]), *($1 + [8]), *($3), *(($3 + [8])))
	*([0] + [4]) = ($3 + [16])
}

int_32 .FUNC $9 (int_32 $0, int_64 $1, int_64 $2, int_64 $3, int_64 $4)
{
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	*($0 + [16]) = $3
	*($0 + [8]) = $2
	*($0) = $1
	*($0 + [32]) = (int_64)0
	*(($0 + [24])) = $4
	*(($5 = ($0 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($5) >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$6 = [0]
	
.LABEL $label$1
	CALL __divti3($7, $3, $4, (int_64)10000000000, (int_64)0)
	CALL eosio_assert($6, [64])
	$4 = *($7)
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$1 = (uint_64)$2 >> (uint_64)(int_64)8)
	$5 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$6 = [0]
	
.LABEL $label$6
	CALL eosio_assert($6, [64])
	*(($0 + [40])) = $2
	*(($0 + [32])) = $4
	*([0] + [4]) = ($7 + [16])
	return $0
}

void .FUNC $6 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = *($0)
	$2 = ((int_32)(*($0 + [4]) - $6) / (int_32)[12])
	$4 = ($2 + [1])
	if ( ((uint_32)$4 >= (uint_32)[357913942]) ){ goto $label$2 }
	$5 = [357913941]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[12])
	if ( ((uint_32)$6 > (uint_32)[178956969]) ){ goto $label$4 }
	$5 = ($6 << [1])
	$5 = ( $4 ? $5 : ($5 <= $4) )
	if ( ($5 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$4 = CALL $81(((int_32)$5 * (int_32)[12]))
	goto $label$1 
	
.LABEL $label$3
	$5 = [0]
	$4 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$6 = ($4 + ((int_32)$2 * (int_32)[12]))
	CALL $89($6, $1)
	$2 = ($4 + ((int_32)$5 * (int_32)[12]))
	$3 = ($6 + [12])
	$5 = *($0)
	$4 = *(($0 + [4]))
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$6 }
	$1 = ([0] - $5)
	$5 = ($4 + [-12])
	
.LOOP $label$7:
	*(($6 + [-12])) = *($5)
	$4 = ($5 + [8])
	*(($6 + [-4])) = *($4)
	*($5) = [0]
	*(($5 + [4])) = [0]
	*($4) = [0]
	$6 = ($6 + [-12])
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $1) != (int_32)[-12]) ){ goto $label$7 }
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$4 = $5
	
.LABEL $label$5
	*($0) = $6
	*(($0 + [4])) = $3
	*(($0 + [8])) = $2
	if ( ((int_32)$5 == (int_32)$4) ){ goto $label$8 }
	$6 = ([0] - $4)
	$5 = ($5 + [-12])
	
.LOOP $label$9:
	if ( ((*($5) & [1]) == 0) ){ goto $label$10 }
	CALL $82(*(($5 + [8])))
	
.LABEL $label$10
	$5 = ($5 + [-12])
	if ( ((int_32)($5 + $6) != (int_32)[-12]) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($4 == 0) ){ goto $label$11 }
	CALL $82($4)
	
.LABEL $label$11
	(unreachable)
}

void .FUNC _Z10parse_memoNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEER10memo_param (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [64])
	*([0] + [4]) = $8
	*($8 + [56]) = [0]
	*(($8 + [40])) = [0]
	*($8 + [48]) = (int_64)0
	*($8 + [32]) = (int_64)0
	$7 = CALL strlen([16])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$4 }
	*($8 + [32]) = ($7 << [1])
	$4 = (($8 + [32]) | [1])
	if ( $7 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	$6 = (($7 + [16]) & [-16])
	$4 = CALL $81($6)
	*($8 + [32]) = ($6 | [1])
	*($8 + [40]) = $4
	*($8 + [36]) = $7
	
.LABEL $label$3
	CALL memcpy($4, [16], $7)
	
.LABEL $label$2
	*(($4 + $7)) = [0]
	CALL _Z5splitRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEERKS6_S6_(($8 + [48]), $0, ($8 + [32]))
	if ( ((*($8 + [32]) & [1]) == 0) ){ goto $label$5 }
	CALL $82(*($8 + [40]))
	
.LABEL $label$5
	$4 = *($8 + [48])
	$7 = *($8 + [52])
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$7 }
	$2 = ($8 | [1])
	$6 = [0]
	
.LOOP $label$8:
	*((($8 + [16]) + [8])) = [0]
	*(($0 = ($8 + [8]))) = [0]
	*($8 + [16]) = (int_64)0
	*($8) = (int_64)0
	$7 = CALL strlen([32])
	if ( ((uint_32)$7 >= (uint_32)[-16]) ){ goto $label$6 }
	$3 = ($4 + ((int_32)$6 * (int_32)[12]))
	if ( ((uint_32)$7 >= (uint_32)[11]) ){ goto $label$11 }
	*($8) = ($7 << [1])
	$4 = $2
	if ( $7 ){ goto $label$10 }
	goto $label$9 
	
.LABEL $label$11
	$5 = (($7 + [16]) & [-16])
	$4 = CALL $81($5)
	*($0) = $4
	*($8) = ($5 | [1])
	*($8 + [4]) = $7
	
.LABEL $label$10
	CALL memcpy($4, [32], $7)
	
.LABEL $label$9
	*(($4 + $7)) = [0]
	CALL _Z5splitRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEERKS6_S6_(($8 + [16]), $3, $8)
	if ( ((*($8) & [1]) == 0) ){ goto $label$12 }
	CALL $82(*($0))
	
.LABEL $label$12
	$0 = *($8 + [16])
	if ( (((int_32)(*($8 + [20]) - $0) / (int_32)[12]) <= [2]) ){ goto $label$13 }
	$7 = *($0)
	$4 = CALL strlen([48])
	if ( ((int_32)$4 != (int_32)( *($0 + [4]) ? uint_32($7 >> [1]) : ($7 & [1]) )) ){ goto $label$14 }
	if ( CALL $87($0, [0], [-1], [48], $4) ){ goto $label$14 }
	CALL $84($1, (*($8 + [16]) + [12]))
	
.LABEL $label$14
	$0 = *($8 + [16])
	
.LABEL $label$13
	if ( ($0 == 0) ){ goto $label$15 }
	$7 = *($8 + [20])
	if ( ((int_32)$7 == (int_32)$0) ){ goto $label$17 }
	$4 = ([0] - $0)
	$7 = ($7 + [-12])
	
.LOOP $label$18:
	if ( ((*($7) & [1]) == 0) ){ goto $label$19 }
	CALL $82(*(($7 + [8])))
	
.LABEL $label$19
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $4) != (int_32)[-12]) ){ goto $label$18 }
	$7 = *($8 + [16])
	goto $label$16 
	
.LABEL $label$17
	$7 = $0
	
.LABEL $label$16
	*($8 + [20]) = $0
	CALL $82($7)
	
.LABEL $label$15
	$4 = *($8 + [48])
	$7 = *($8 + [52])
	$6 = ($6 + [1])
	if ( ($6 <= ((int_32)($7 - $4) / (int_32)[12])) ){ goto $label$8 }
	
.LABEL $label$7
	if ( ($4 == 0) ){ goto $label$20 }
	if ( ((int_32)$7 == (int_32)$4) ){ goto $label$22 }
	$0 = ([0] - $4)
	$7 = ($7 + [-12])
	
.LOOP $label$23:
	if ( ((*($7) & [1]) == 0) ){ goto $label$24 }
	CALL $82(*(($7 + [8])))
	
.LABEL $label$24
	$7 = ($7 + [-12])
	if ( ((int_32)($7 + $0) != (int_32)[-12]) ){ goto $label$23 }
	$7 = *($8 + [48])
	goto $label$21 
	
.LABEL $label$22
	$7 = $4
	
.LABEL $label$21
	*($8 + [52]) = $4
	CALL $82($7)
	
.LABEL $label$20
	*([0] + [4]) = ($8 + [64])
	return (unreachable)
	
.LABEL $label$6
	CALL $83($8)
	
.LABEL $label$1
	CALL $83(($8 + [32]))
	(unreachable)
}

void .FUNC _ZN5eosio12require_authERKNS_16permission_levelE (int_32 $0)
{
	CALL require_auth2(*($0), *($0 + [8]))
}

void .FUNC _Z5splitRNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEERKS6_S6_ (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	$14 = (*([0] + [4]) - [32])
	*([0] + [4]) = $14
	$13 = ($13 & [1])
	$13 = *($1)
	$7 = ( *($1 + [4]) ? uint_32($13 >> [1]) : $13 )
	if ( ($7 == 0) ){ goto $label$1 }
	*($14 + [24]) = [0]
	*($14 + [16]) = (int_64)0
	$4 = ($2 + [1])
	$3 = ($1 + [1])
	$8 = ( *($1 + [8]) ? $3 : $13 )
	$13 = $8
	$12 = ($10 & [1])
	$10 = *($2)
	$10 = ( *($2 + [4]) ? uint_32($10 >> [1]) : $12 )
	if ( ($10 == 0) ){ goto $label$2 }
	$12 = ( *($2 + [8]) ? $4 : $12 )
	$13 = $8
	
.LOOP $label$3:
	if ( (CALL memchr($12, *($13), $10) == 0) ){ goto $label$2 }
	$13 = ($13 + [1])
	$7 = ($7 + [-1])
	if ( $7 ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$13 = ($13 - $8)
	if ( ((int_32)$13 == (int_32)[-1]) ){ goto $label$1 }
	
.LOOP $label$4:
	$10 = ($7 & [1])
	$7 = *($1)
	$12 = ( *(($1 + [4])) ? uint_32($7 >> [1]) : $10 )
	if ( ($12 <= $13) ){ goto $label$6 }
	$8 = $13
	$9 = ($7 & [1])
	$7 = *($2)
	$11 = ($2 + [4])
	$7 = ( *($11) ? uint_32($7 >> [1]) : $9 )
	if ( ($7 == 0) ){ goto $label$7 }
	$12 = ($5 + $13)
	$5 = ( *(($1 + [8])) ? $3 : $10 )
	$8 = ($5 + $12)
	$10 = ($8 - $12)
	if ( ((int_32)$10 < (int_32)$7) ){ goto $label$6 }
	$6 = ( *(($2 + [8])) ? $4 : $9 )
	$9 = *($6)
	
.LOOP $label$8:
	$10 = (($10 - $7) + [1])
	if ( ($10 == 0) ){ goto $label$6 }
	$10 = CALL memchr($12, $9, $10)
	if ( ($10 == 0) ){ goto $label$6 }
	if ( (CALL memcmp($10, $6, $7) == 0) ){ goto $label$9 }
	$12 = ($10 + [1])
	$10 = ($8 - $12)
	if ( ((int_32)$10 >= (int_32)$7) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$9
	if ( ((int_32)$10 == (int_32)$8) ){ goto $label$6 }
	$8 = ($10 - $5)
	if ( ((int_32)$8 == (int_32)[-1]) ){ goto $label$6 }
	
.LABEL $label$7
	CALL $90($14, $1, $13, ($8 - $13), $1)
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$11 }
	*(*((($14 + [16]) + [8]))) = [0]
	*($14 + [20]) = [0]
	goto $label$10 
	
.LABEL $label$11
	*($14 + [16]) = [0]
	
.LABEL $label$10
	CALL $86(($14 + [16]), [0])
	*((($14 + [16]) + [8])) = *(($14 + [8]))
	*($14 + [16]) = *($14)
	$13 = *($2)
	if ( ($13 & [1]) ){ goto $label$12 }
	$13 = (uint_32($13 >> [1]) + $8)
	goto $label$5 
	
.LABEL $label$12
	$13 = (*($11) + $8)
	goto $label$5 
	
.LABEL $label$6
	CALL $90($14, $1, $13, [-1], $1)
	if ( (*($14 + [16]) & [1]) ){ goto $label$14 }
	*($14 + [16]) = [0]
	goto $label$13 
	
.LABEL $label$14
	*(*((($14 + [16]) + [8]))) = [0]
	*($14 + [20]) = [0]
	
.LABEL $label$13
	CALL $86(($14 + [16]), [0])
	*((($14 + [16]) + [8])) = *(($14 + [8]))
	*($14 + [16]) = *($14)
	$13 = [-1]
	
.LABEL $label$5
	$7 = *($14 + [16])
	if ( (( *($14 + [20]) ? uint_32($7 >> [1]) : ($7 & [1]) ) == 0) ){ goto $label$16 }
	$7 = ($0 + [4])
	$10 = *($7)
	if ( ((int_32)$10 == (int_32)*(($0 + [8]))) ){ goto $label$18 }
	CALL $89($10, ($14 + [16]))
	*($7) = (*($7) + [12])
	goto $label$17 
	
.LABEL $label$18
	CALL $6($0, ($14 + [16]))
	
.LABEL $label$17
	if ( (*($14 + [16]) & [1]) ){ goto $label$19 }
	*($14 + [16]) = [0]
	if ( ((int_32)$13 != (int_32)[-1]) ){ goto $label$4 }
	goto $label$15 
	
.LABEL $label$19
	*(*((($14 + [16]) + [8]))) = [0]
	*($14 + [20]) = [0]
	
.LABEL $label$16
	if ( ((int_32)$13 != (int_32)[-1]) ){ goto $label$4 }
	
.LABEL $label$15
	if ( ((*($14 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $82(*(($14 + [24])))
	
.LABEL $label$1
	*([0] + [4]) = ($14 + [32])
}

int_32 .FUNC _ZneRK11checksum160S1_ (int_32 $0, int_32 $1)
{
	return ((int_32)CALL memcmp($0, $1, [32]) != (int_32)[0])
}

int_32 .FUNC now ()
{
	return (CASTING uint_32)(uint_64 ((uint_64)CALL current_time() / (uint_64)(int_64)1000000))
}

int_32 .FUNC memory (int_32 memory, int_32 $1)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

int_32 .FUNC _ZeqRK11checksum160S1_ (int_32 $0, int_32 _ZeqRK11checksum160S1_)
{
	return (CALL memcmp($0, $1, [32]) == 0)
}

void .FUNC $14 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [480])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [304])
	$8 = ((int_64)*($1 + [8]) + (int_64)*($3))
	*($1 + [8]) = $8
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [352])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [384])
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [544])
	$6 = *($1 + [28])
	$5 = *(($1 + [32]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[48]))
	$3 = [76]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$3 }
	$5 = ($7 + [-48])
	$3 = (($5 - ((uint_32)$5 % (uint_32)[48])) + $3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-48])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($3)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $3)
	CALL $22($10, $1)
	CALL db_update_i64(*($1 + [44]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC $15 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$8 = (*([0] + [4]) - [16])
	$9 = $8
	*([0] + [4]) = $8
	$6 = *($0 + [4])
	*($1) = *(*($6))
	$2 = *($0)
	$6 = *($6 + [4])
	*($1 + [8]) = *($6)
	*(($1 + [16])) = *(($6 + [8]))
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$4 = *($1 + [28])
	$3 = *(($1 + [32]))
	$5 = ($3 - $4)
	$7 = (CASTING uint_64)(uint_32 ((int_32)$5 / (int_32)[48]))
	$6 = [76]
	
.LOOP $label$1:
	$6 = ($6 + [1])
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	if ( ((int_64)$7) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$4 == (int_32)$3) ){ goto $label$3 }
	$3 = ($5 + [-48])
	$6 = (($3 - ((uint_32)$3 % (uint_32)[48])) + $6)
	goto $label$2 
	
.LABEL $label$3
	$6 = ($6 + [-48])
	
.LABEL $label$2
	if ( ($6 <= [513]) ){ goto $label$5 }
	$8 = CALL malloc($6)
	goto $label$4 
	
.LABEL $label$5
	$8 = ($8 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $8
	
.LABEL $label$4
	*($9 + [4]) = $8
	*($9) = $8
	*($9 + [8]) = ($8 + $6)
	CALL $22($9, $1)
	$7 = *($1)
	*($1 + [44]) = CALL db_store_i64(*($2 + [8]), (int_64)3607749779137757184, *(*($0 + [8])), $7, $8, $6)
	if ( ($6 <= [513]) ){ goto $label$6 }
	CALL free($8)
	
.LABEL $label$6
	if ( (uint_64)($7 <= *($2 + [16])) ){ goto $label$7 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$7 + (int_64)1) : ((uint_64)$7 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [16])
}

void .FUNC $16 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $81(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$2 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$2 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	$6 = *($1 + [28])
	if ( ($6 == 0) ){ goto $label$11 }
	*(($1 + [32])) = $6
	CALL $82($6)
	
.LABEL $label$11
	CALL $82($1)
	
.LABEL $label$10
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $82($2)
	
.LABEL $label$12
	(unreachable)
}

void .FUNC _ZN8dividend18modify_total_stakeERKN5eosio5assetE (int_32 $0, int_32 $1)
{
	int_64 $2
	int_32 $3
	int_64 $4
	int_64 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [208])
	*([0] + [4]) = $7
	*(($7 + [32])) = [0]
	*($7 + [16]) = (int_64)-1
	$2 = *($0)
	*($7) = $2
	*($7 + [8]) = $2
	*($7 + [24]) = (int_64)0
	$6 = CALL db_lowerbound_i64($2, $2, (int_64)-4157502641443700736, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$4 }
	$6 = CALL $12($7, $6)
	$2 = *($6 + [8])
	$3 = ($6 + [16])
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($3)), [304])
	$2 = ((int_64)$2 + (int_64)*($1))
	CALL eosio_assert(((int_64)$2 > (int_64)-4611686018427387904), [352])
	CALL eosio_assert(((int_64)$2 < (int_64)4611686018427387904), [384])
	CALL eosio_assert(((int_64)$2 > (int_64)0), [416])
	$4 = *($0)
	CALL eosio_assert(((int_32)*($6 + [152]) == (int_32)$7), [432])
	CALL eosio_assert(((int_64)*($7) == (int_64)CALL $fimport$6()), [480])
	$2 = *($6)
	CALL eosio_assert(((int_64)*($1 + [8]) == (int_64)*($3)), [304])
	$5 = ((int_64)*($6 + [8]) + (int_64)*($1))
	*($6 + [8]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [352])
	CALL eosio_assert(((int_64)*($6 + [8]) < (int_64)4611686018427387904), [384])
	CALL eosio_assert(((int_64)$2 == (int_64)*($6)), [544])
	*($7 + [200]) = (($7 + [48]) + [141])
	*($7 + [196]) = ($7 + [48])
	*($7 + [192]) = ($7 + [48])
	CALL $18(($7 + [192]), $6)
	CALL db_update_i64(*($6 + [156]), $4, ($7 + [48]), [141])
	$6 = ($7 + [16])
	if ( (uint_64)($2 <= *($6)) ){ goto $label$3 }
	*($6) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	$0 = *($7 + [24])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$4 = *($0)
	CALL eosio_assert(((int_64)$2 == (int_64)CALL $fimport$6()), [240])
	$6 = CALL $81([176])
	$0 = CALL $19($6)
	*($6 + [152]) = $7
	*(($6 + [16])) = *(($1 + [8]))
	*($6 + [8]) = *($1)
	*($7 + [200]) = (($7 + [48]) + [141])
	*($7 + [196]) = ($7 + [48])
	*($7 + [192]) = ($7 + [48])
	CALL $18(($7 + [192]), $0)
	$2 = *($6)
	$0 = CALL db_store_i64(*(($7 + [8])), (int_64)-4157502641443700736, $4, $2, ($7 + [48]), [141])
	*($6 + [156]) = $0
	$1 = ($7 + [16])
	if ( (uint_64)($2 <= *($1)) ){ goto $label$5 }
	*($1) = ( (int_64)-2 ? ((int_64)$2 + (int_64)1) : ((uint_64)$2 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($7 + [192]) = $6
	$2 = *($6)
	*($7 + [48]) = $2
	*($7 + [44]) = $0
	$3 = ($7 + [28])
	$1 = *($3)
	if ( ((uint_32)$1 >= (uint_32)*(($7 + [32]))) ){ goto $label$7 }
	*($1 + [8]) = $2
	*($1 + [16]) = $0
	*($7 + [192]) = [0]
	*($1) = $6
	*($3) = ($1 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $20(($7 + [24]), ($7 + [192]), ($7 + [48]), ($7 + [44]))
	
.LABEL $label$6
	$6 = *($7 + [192])
	*($7 + [192]) = [0]
	if ( ($6 == 0) ){ goto $label$3 }
	CALL $82($6)
	
.LABEL $label$3
	$0 = *($7 + [24])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$3 = ($7 + [28])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$0) ){ goto $label$9 }
	
.LOOP $label$10:
	$6 = ($6 + [-24])
	$1 = *($6)
	*($6) = [0]
	if ( ($1 == 0) ){ goto $label$11 }
	CALL $82($1)
	
.LABEL $label$11
	if ( ((int_32)$0 != (int_32)$6) ){ goto $label$10 }
	$6 = *(($7 + [24]))
	goto $label$8 
	
.LABEL $label$9
	$6 = $0
	
.LABEL $label$8
	*($3) = $0
	CALL $82($6)
	
.LABEL $label$1
	*([0] + [4]) = ($7 + [208])
}

int_32 .FUNC _ZN8dividendC2Ey (int_32 $0, int_64 $1)
{
	*($0) = $1
	return $0
}

void .FUNC _ZN8dividend5stakeEyRKN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [144])
	*([0] + [4]) = $8
	*($8 + [96]) = $1
	*((($8 + [56]) + [32])) = [0]
	*($8 + [72]) = (int_64)-1
	$5 = *($0)
	*($8 + [56]) = $5
	*($8 + [64]) = $5
	*($8 + [80]) = (int_64)0
	$7 = CALL db_lowerbound_i64($5, $5, (int_64)-4157502641443700736, (int_64)0)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$1 }
	CALL eosio_assert(((int_32)*(CALL $12(($8 + [56]), $7) + [28]) ^ (int_32)[1]), [160])
	$1 = *($8 + [96])
	
.LABEL $label$1
	*((($8 + [16]) + [32])) = [0]
	*($8 + [32]) = (int_64)-1
	*($8 + [40]) = (int_64)0
	$5 = *($0)
	*($8 + [16]) = $5
	*($8 + [24]) = $5
	$7 = CALL db_find_i64($5, $5, (int_64)3607749779137757184, $1)
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$3 }
	$7 = CALL $13(($8 + [16]), $7)
	CALL eosio_assert(((int_32)*($7 + [40]) == (int_32)($8 + [16])), [176])
	$5 = *($0)
	*($8 + [112]) = $2
	CALL $14(($8 + [16]), $7, $5, ($8 + [112]))
	goto $label$2 
	
.LABEL $label$3
	$5 = *($0)
	*($8 + [12]) = $2
	*($8 + [8]) = ($8 + [96])
	*($8 + [136]) = $5
	CALL eosio_assert(((int_64)*($8 + [16]) == (int_64)CALL $fimport$6()), [240])
	*($8 + [116]) = ($8 + [8])
	*($8 + [112]) = ($8 + [16])
	*($8 + [120]) = ($8 + [136])
	*(($3 = CALL $81([56])) + [16]) = (int_64)1398362884
	*($3 + [8]) = (int_64)0
	CALL eosio_assert([1], [96])
	$5 = (int_64)5462355
	$7 = [0]
	
.LOOP $label$6:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$5 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	
.LOOP $label$8:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$8 }
	
.LABEL $label$7
	$6 = [1]
	$7 = ($7 + [1])
	if ( ((int_32)$7 < (int_32)[7]) ){ goto $label$6 }
	goto $label$4 
	
.LABEL $label$5
	$6 = [0]
	
.LABEL $label$4
	CALL eosio_assert($6, [64])
	*($3 + [36]) = [0]
	*($3 + [28 align=4]) = (int_64)0
	*($3 + [40]) = ($8 + [16])
	CALL $15(($8 + [112]), $3)
	*($8 + [128]) = $3
	$5 = *($3)
	*($8 + [112]) = $5
	$6 = *($3 + [44])
	*($8 + [108]) = $6
	$4 = ($8 + [44])
	$7 = *($4)
	if ( ((uint_32)$7 >= (uint_32)*(($8 + [48]))) ){ goto $label$10 }
	*($7 + [8]) = $5
	*($7 + [16]) = $6
	*($8 + [128]) = [0]
	*($7) = $3
	*($4) = ($7 + [24])
	goto $label$9 
	
.LABEL $label$10
	CALL $16(($8 + [40]), ($8 + [128]), ($8 + [112]), ($8 + [108]))
	
.LABEL $label$9
	$7 = *($8 + [128])
	*($8 + [128]) = [0]
	if ( ($7 == 0) ){ goto $label$2 }
	$3 = *($7 + [28])
	if ( ($3 == 0) ){ goto $label$11 }
	*(($7 + [32])) = $3
	CALL $82($3)
	
.LABEL $label$11
	CALL $82($7)
	
.LABEL $label$2
	CALL _ZN8dividend18modify_total_stakeERKN5eosio5assetE($0, $2)
	$2 = *($8 + [40])
	if ( ($2 == 0) ){ goto $label$12 }
	$6 = ($8 + [44])
	$7 = *($6)
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$14 }
	
.LOOP $label$15:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$16 }
	$3 = *($0 + [28])
	if ( ($3 == 0) ){ goto $label$17 }
	*(($0 + [32])) = $3
	CALL $82($3)
	
.LABEL $label$17
	CALL $82($0)
	
.LABEL $label$16
	if ( ((int_32)$2 != (int_32)$7) ){ goto $label$15 }
	$7 = *(($8 + [40]))
	goto $label$13 
	
.LABEL $label$14
	$7 = $2
	
.LABEL $label$13
	*($6) = $2
	CALL $82($7)
	
.LABEL $label$12
	$3 = *($8 + [80])
	if ( ($3 == 0) ){ goto $label$18 }
	$2 = ($8 + [84])
	$7 = *($2)
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$20 }
	
.LOOP $label$21:
	$7 = ($7 + [-24])
	$0 = *($7)
	*($7) = [0]
	if ( ($0 == 0) ){ goto $label$22 }
	CALL $82($0)
	
.LABEL $label$22
	if ( ((int_32)$3 != (int_32)$7) ){ goto $label$21 }
	$7 = *(($8 + [80]))
	goto $label$19 
	
.LABEL $label$20
	$7 = $3
	
.LABEL $label$19
	*($2) = $3
	CALL $82($7)
	
.LABEL $label$18
	*([0] + [4]) = ($8 + [144])
}

int_32 .FUNC $12 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$7 = *(($0 + [28]))
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$6 = ($7 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($6 + [16])) == (int_32)$1) ){ goto $label$1 }
	$7 = $6
	$4 = ($6 + [-24])
	$6 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$7 == (int_32)$2) ){ goto $label$4 }
	$6 = *(($7 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$6 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($6 >> [31]) ^ (int_32)[1]), [624])
	if ( ($6 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($6)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($6 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $6)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $6)
	if ( ($6 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$6 = CALL $81([176])
	$4 = CALL $19($6)
	*($6 + [152]) = $0
	CALL $27(($8 + [32]), $4)
	*($6 + [156]) = $1
	*($8 + [24]) = $6
	$5 = *($6)
	*($8 + [16]) = $5
	$7 = *($6 + [156])
	*($8 + [12]) = $7
	$1 = ($0 + [28])
	$4 = *($1)
	if ( ((uint_32)$4 >= (uint_32)*(($0 + [32]))) ){ goto $label$9 }
	*($4 + [8]) = $5
	*($4 + [16]) = $7
	*($8 + [24]) = [0]
	*($4) = $6
	*($1) = ($4 + [24])
	goto $label$8 
	
.LABEL $label$9
	CALL $20(($0 + [24]), ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$8
	$4 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($4 == 0) ){ goto $label$3 }
	CALL $82($4)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $6
}

int_32 .FUNC $13 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [624])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $81([56])) + [16]) = (int_64)1398362884
	*($4 + [8]) = (int_64)0
	CALL eosio_assert([1], [96])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [64])
	*($4 + [36]) = [0]
	*($4 + [28 align=4]) = (int_64)0
	*($4 + [40]) = $0
	CALL $23(($8 + [32]), $4)
	*($4 + [44]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [44])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $16($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	$6 = *($5 + [28])
	if ( ($6 == 0) ){ goto $label$15 }
	*(($5 + [32])) = $6
	CALL $82($6)
	
.LABEL $label$15
	CALL $82($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

int_32 .FUNC $75 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $72($0, ($1 + [32]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [656])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	return *($0 + [4]) = (*($0 + [4]) + [8])
}

int_32 .FUNC $18 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	*($3 + [15]) = *($1 + [28])
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[0]), [608])
	CALL memcpy(*($0 + [4]), ($3 + [15]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $21(CALL $21($0, ($1 + [48])), ($1 + [96]))
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [144]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $19 (int_32 $0)
{
	int_64 $1
	int_32 $2
	int_32 $3
	*($0 + [8]) = (int_64)0
	*(($2 = ($0 + [16]))) = (int_64)1398362884
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$3 = [0]
	
.LABEL $label$1
	CALL eosio_assert($3, [64])
	*(($2 = ($0 + [88]))) = (int_64)1398362884
	*(($0 + [80])) = (int_64)0
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$3 = [0]
	
.LABEL $label$6
	CALL eosio_assert($3, [64])
	*(($2 = ($0 + [136]))) = (int_64)1398362884
	*(($0 + [128])) = (int_64)0
	CALL eosio_assert([1], [96])
	$1 = (uint_64)*($2) >> (uint_64)(int_64)8)
	$2 = [0]
	
.LOOP $label$13:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$12 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$14 }
	
.LOOP $label$15:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$15 }
	
.LABEL $label$14
	$3 = [1]
	$2 = ($2 + [1])
	if ( ((int_32)$2 < (int_32)[7]) ){ goto $label$13 }
	goto $label$11 
	
.LABEL $label$12
	$3 = [0]
	
.LABEL $label$11
	CALL eosio_assert($3, [64])
	return $0
}

void .FUNC $58 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [32])
	$11 = $12
	*([0] + [4]) = $12
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [480])
	$9 = [0]
	*($1 + [28]) = [0]
	*($1 + [32]) = *(*($3))
	$4 = *($1)
	$10 = *($3 + [4])
	$6 = ($1 + [96])
	if ( ((int_32)$6 == (int_32)$10) ){ goto $label$1 }
	$7 = *(($10 + [24]))
	$8 = *($10 + [16])
	CALL __divti3($11, $8, $7, (int_64)10000000000, (int_64)0)
	*($6) = *($10)
	$5 = *($10 + [8])
	*(($1 + [104])) = $5
	*(($1 + [120])) = $7
	*(($1 + [112])) = $8
	$7 = *($11)
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	$10 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$10 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($10, [64])
	*(($1 + [136])) = $5
	*(($1 + [128])) = $7
	
.LABEL $label$1
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	*($1 + [144]) = *(*($3 + [8]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [544])
	$10 = $12
	$9 = ($10 + [-144])
	*([0] + [4]) = $9
	*($11 + [20]) = $9
	*($11 + [16]) = $9
	*($11 + [24]) = ($10 + [-3])
	CALL $18(($11 + [16]), $1)
	CALL db_update_i64(*(($1 + [156])), $2, $9, [141])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($11 + [32])
}

void .FUNC $59 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [480])
	*($1 + [28]) = [1]
	$4 = *($1)
	$7 = $4
	$8 = *($3)
	$9 = ($1 + [96])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$1 }
	$6 = *(($8 + [24]))
	$7 = *($8 + [16])
	CALL __divti3($10, $7, $6, (int_64)10000000000, (int_64)0)
	*($9) = *($8)
	$5 = *($8 + [8])
	*(($1 + [104])) = $5
	*(($1 + [120])) = $6
	*(($1 + [112])) = $7
	$6 = *($10)
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [64])
	*(($1 + [136])) = $5
	*(($1 + [128])) = $6
	$7 = *($1)
	
.LABEL $label$1
	*($1 + [144]) = *(*($3 + [4]))
	CALL eosio_assert(((int_64)$4 == (int_64)$7), [544])
	$9 = $11
	$8 = ($9 + [-144])
	*([0] + [4]) = $8
	*($10 + [20]) = $8
	*($10 + [16]) = $8
	*($10 + [24]) = ($9 + [-3])
	CALL $18(($10 + [16]), $1)
	CALL db_update_i64(*(($1 + [156])), $2, $8, [141])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [32])
}

int_32 .FUNC $50 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [16])
	*([0] + [4]) = $7
	$4 = (CASTING uint_64)(uint_32 int_32((*($1 + [4]) - *($1)) >> [4]))
	$5 = *($0 + [4])
	$2 = ($0 + [8])
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $4)
	$4 = (uint_64)$4 >> (uint_64)(int_64)7
	$6 = ((int_64)$4) != (int_64)0
	*($7 + [15]) = (($6) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[0]), [608])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($7 + [15]), [1])
	$5 = (*($3) + [1])
	*($3) = $5
	if ( $6 ){ goto $label$1 }
	$1 = *(($1 + [4]))
	$6 = *($1)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$2 }
	$3 = ($0 + [4])
	
.LOOP $label$3:
	$2 = ($0 + [8])
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [608])
	CALL memcpy(*($3), $6, [8])
	$5 = (*($3) + [8])
	*($3) = $5
	CALL eosio_assert(((int_32)(*($2) - $5) > (int_32)[7]), [608])
	CALL memcpy(*($3), ($6 + [8]), [8])
	$5 = (*($3) + [8])
	*($3) = $5
	$6 = ($6 + [16])
	if ( ((int_32)$6 != (int_32)$1) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [16])
	return $0
}

int_32 .FUNC $51 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$7 = (CASTING uint_64)(uint_32 (*($1 + [4]) - *($1)))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [608])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = *($1)
	$5 = (*(($1 + [4])) - $2)
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [608])
	$6 = ($0 + [4])
	CALL memcpy(*($6), $2, $5)
	*($6) = (*($6) + $5)
	*([0] + [4]) = ($8 + [16])
	return $0
}

int_32 .FUNC $52 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	*([0] + [4]) = $8
	$5 = *($1)
	$7 = (CASTING uint_64)(uint_32 ( *($1 + [4]) ? uint_32($5 >> [1]) : ($5 & [1]) ))
	$6 = *($0 + [4])
	$4 = ($0 + [8])
	$5 = ($0 + [4])
	
.LOOP $label$1:
	$2 = (CASTING uint_32)(uint_64 $7)
	$7 = (uint_64)$7 >> (uint_64)(int_64)7
	$3 = ((int_64)$7) != (int_64)0
	*($8 + [15]) = (($3) << [7]) | ($2 & [127]))
	CALL eosio_assert(((int_32)(*($4) - $6) > (int_32)[0]), [608])
	CALL memcpy(*($5), ($8 + [15]), [1])
	$6 = (*($5) + [1])
	*($5) = $6
	if ( $3 ){ goto $label$1 }
	$2 = ($5 & [1])
	$5 = *($1)
	$5 = ( *(($1 + [4])) ? uint_32($5 >> [1]) : $2 )
	if ( ($5 == 0) ){ goto $label$2 }
	$3 = *($1 + [8])
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $6) >= (int_32)$5), [608])
	$6 = ($0 + [4])
	CALL memcpy(*($6), ( $3 ? ($1 + [1]) : $2 ), $5)
	*($6) = (*($6) + $5)
	
.LABEL $label$2
	*([0] + [4]) = ($8 + [16])
	return $0
}

void .FUNC _ZN8dividend3payEl (int_32 $0, int_32 $1)
{
	int_32 $2
	float_64 $3
	int_64 $4
	int_64 $5
	int_64 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_64 $12
	int_64 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	$17 = (*([0] + [4]) - [512])
	*([0] + [4]) = $17
	CALL require_auth(*($0))
	*(($17 + [376])) = (int_64)1398362884
	*($17 + [368]) = (int_64)0
	CALL eosio_assert([1], [96])
	$13 = (int_64)5462355
	$15 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$16 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$16 = [0]
	
.LABEL $label$1
	CALL eosio_assert($16, [64])
	*(($17 + [328])) = (int_64)1398362884
	*($17 + [320]) = (int_64)0
	CALL eosio_assert([1], [96])
	$13 = (int_64)5462355
	$15 = [0]
	
.LOOP $label$8:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$7 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	
.LOOP $label$10:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$7 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$10 }
	
.LABEL $label$9
	$16 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$8 }
	goto $label$6 
	
.LABEL $label$7
	$16 = [0]
	
.LABEL $label$6
	CALL eosio_assert($16, [64])
	$2 = [0]
	*((($17 + [248]) + [32])) = [0]
	*($17 + [264]) = (int_64)-1
	*($17 + [272]) = (int_64)0
	$13 = *($0)
	*($17 + [248]) = $13
	*($17 + [256]) = $13
	*((($17 + [208]) + [32])) = [0]
	*($17 + [216]) = $13
	*($17 + [208]) = $13
	*($17 + [224]) = (int_64)-1
	*($17 + [232]) = (int_64)0
	*((($17 + [168]) + [32])) = [0]
	*($17 + [176]) = $13
	*($17 + [168]) = $13
	*($17 + [184]) = (int_64)-1
	*($17 + [192]) = (int_64)0
	*($17 + [204]) = [0]
	$6 = $13
	$14 = [0]
	$15 = CALL db_lowerbound_i64($13, $13, (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$11 }
	$14 = CALL $13(($17 + [208]), $15)
	$13 = *(($17 + [256]))
	$6 = *($17 + [248])
	
.LABEL $label$11
	$15 = CALL db_lowerbound_i64($6, $13, (int_64)-4157502641443700736, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$12 }
	$2 = CALL $12(($17 + [248]), $15)
	
.LABEL $label$12
	$16 = [0]
	CALL eosio_assert(((int_32)$2 != (int_32)[0]), [1424])
	$6 = *($2 + [8])
	CALL eosio_assert(((int_64)$6 > (int_64)0), [1440])
	$15 = CALL db_lowerbound_i64(*($17 + [168]), *(($17 + [176])), (int_64)-5969209044777304064, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$13 }
	$16 = CALL $43(($17 + [168]), $15)
	
.LABEL $label$13
	if ( (*($2 + [28]) == 0) ){ goto $label$30 }
	$15 = ($2 + [48])
	if ( ((int_32)($17 + [336]) == (int_32)$15) ){ goto $label$27 }
	$12 = *(($2 + [72]))
	$13 = *(($2 + [64]))
	CALL __divti3(($17 + [144]), $13, $12, (int_64)10000000000, (int_64)0)
	*((($17 + [336]) + [24])) = $12
	*($17 + [336]) = *($15)
	*($17 + [352]) = $13
	$12 = *(($2 + [56]))
	*($17 + [344]) = $12
	$4 = *($17 + [144])
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	$15 = [0]
	
.LOOP $label$31:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$29 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$32 }
	
.LOOP $label$33:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$29 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$33 }
	
.LABEL $label$32
	$16 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$31 }
	goto $label$28 
	
.LABEL $label$30
	if ( ($16 == 0) ){ goto $label$17 }
	$13 = *($16 + [8])
	if ( ((int_64)$13 > (int_64)9999) ){ goto $label$34 }
	
.LOOP $label$35:
	CALL eosio_assert([1], [1216])
	$15 = CALL db_next_i64(*($16 + [60]), ($17 + [384]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$17 }
	$16 = CALL $43(($17 + [168]), $15)
	$13 = *($16 + [8])
	if ( ((int_64)$13 < (int_64)10000) ){ goto $label$35 }
	
.LABEL $label$34
	$8 = ($16 + [8])
	CALL __multi3(($17 + [64]), $13, (int_64)$13 >> (int_64)63), (int_64)10000000000, (int_64)0)
	*($17 + [160]) = *($16)
	$12 = *(($15 + [24]))
	$15 = CALL $9(($17 + [384]), *(($16 + [24])), *(($16 + [16])), *($17 + [64]), *((($17 + [64]) + [8])))
	$13 = *($15 + [16])
	CALL __divti3(($17 + [48]), $13, $12, (int_64)10000000000, (int_64)0)
	*((($17 + [336]) + [24])) = $12
	*($17 + [352]) = $13
	*($17 + [336]) = *($15)
	$12 = *($15 + [8])
	*($17 + [344]) = $12
	$4 = *($17 + [48])
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	$15 = [0]
	
.LOOP $label$36:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$26 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$37 }
	
.LOOP $label$38:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$26 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$38 }
	
.LABEL $label$37
	$7 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$36 }
	goto $label$25 
	
.LABEL $label$29
	$16 = [0]
	
.LABEL $label$28
	CALL eosio_assert($16, [64])
	*(($17 + [376])) = $12
	*(($17 + [368])) = $4
	
.LABEL $label$27
	$15 = ($2 + [96])
	if ( ((int_32)($17 + [288]) == (int_32)$15) ){ goto $label$39 }
	$12 = *(($2 + [120]))
	$13 = *(($2 + [112]))
	CALL __divti3(($17 + [128]), $13, $12, (int_64)10000000000, (int_64)0)
	*((($17 + [288]) + [24])) = $12
	*($17 + [288]) = *($15)
	*($17 + [304]) = $13
	$12 = *(($2 + [104]))
	*($17 + [296]) = $12
	$4 = *($17 + [128])
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	$15 = [0]
	
.LOOP $label$42:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$41 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$43 }
	
.LOOP $label$44:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$41 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$44 }
	
.LABEL $label$43
	$16 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$42 }
	goto $label$40 
	
.LABEL $label$41
	$16 = [0]
	
.LABEL $label$40
	CALL eosio_assert($16, [64])
	*(($17 + [328])) = $12
	*(($17 + [320])) = $4
	
.LABEL $label$39
	$13 = *($2 + [32])
	$8 = *(($17 + [232]))
	$14 = *(($17 + [236]))
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$45 }
	$15 = ($14 + [-24])
	$7 = ([0] - $8)
	
.LOOP $label$46:
	if ( ((int_64)*(*($15)) == (int_64)$13) ){ goto $label$45 }
	$14 = $15
	$16 = ($15 + [-24])
	$15 = $16
	if ( ((int_32)($16 + $7) != (int_32)[-24]) ){ goto $label$46 }
	
.LABEL $label$45
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$48 }
	$15 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [40]) == (int_32)($17 + [208])), [176])
	goto $label$47 
	
.LABEL $label$48
	$15 = [0]
	$16 = CALL db_find_i64(*($17 + [208]), *(($17 + [216])), (int_64)3607749779137757184, $13)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$47 }
	$15 = CALL $13(($17 + [208]), $16)
	CALL eosio_assert(((int_32)*($15 + [40]) == (int_32)($17 + [208])), [176])
	
.LABEL $label$47
	$14 = [0]
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [1216])
	$15 = CALL db_next_i64(*($15 + [44]), ($17 + [384]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$49 }
	$14 = CALL $13(($17 + [208]), $15)
	
.LABEL $label$49
	if ( ((int_64)((int_64)*($17 + [304]) | (int_64)*((($17 + [288]) + [24]))) != (int_64)0) ){ goto $label$22 }
	$13 = *($2 + [144])
	$8 = *((($17 + [168]) + [24]))
	$14 = *(($17 + [196]))
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$50 }
	$15 = ($14 + [-24])
	$7 = ([0] - $8)
	
.LOOP $label$51:
	if ( ((int_64)*(*($15)) == (int_64)$13) ){ goto $label$50 }
	$14 = $15
	$16 = ($15 + [-24])
	$15 = $16
	if ( ((int_32)($16 + $7) != (int_32)[-24]) ){ goto $label$51 }
	
.LABEL $label$50
	if ( ((int_32)$14 == (int_32)$8) ){ goto $label$24 }
	$15 = *(($14 + [-24]))
	CALL eosio_assert(((int_32)*($15 + [56]) == (int_32)($17 + [168])), [176])
	goto $label$23 
	
.LABEL $label$26
	$7 = [0]
	
.LABEL $label$25
	CALL eosio_assert($7, [64])
	*(($17 + [376])) = $12
	*(($17 + [368])) = $4
	$12 = *((($17 + [336]) + [24]))
	$13 = *(($17 + [352]))
	CALL __divti3(($17 + [32]), $13, $12, (int_64)10000000000, (int_64)0)
	*((($17 + [288]) + [24])) = $12
	*($17 + [304]) = $13
	*($17 + [288]) = *($17 + [336])
	$12 = *($17 + [344])
	*($17 + [296]) = $12
	$4 = *($17 + [32])
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	$15 = [0]
	
.LOOP $label$54:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$53 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$55 }
	
.LOOP $label$56:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$53 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$56 }
	
.LABEL $label$55
	$7 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$54 }
	goto $label$52 
	
.LABEL $label$53
	$7 = [0]
	
.LABEL $label$52
	CALL eosio_assert($7, [64])
	*(($17 + [328])) = $12
	*(($17 + [320])) = $4
	$12 = *($0)
	CALL eosio_assert(((int_32)*($16 + [56]) == (int_32)($17 + [168])), [432])
	CALL eosio_assert(((int_64)*($17 + [168]) == (int_64)CALL $fimport$6()), [480])
	*($8) = (int_64)0
	$15 = ($16 + [16])
	$13 = *($15)
	$7 = ($16 + [24])
	*($17 + [472]) = *($7)
	*($17 + [464]) = $13
	$13 = *($16)
	CALL eosio_assert([1], [544])
	*($17 + [456]) = (($17 + [384]) + [56])
	*($17 + [452]) = ($17 + [384])
	*($17 + [448]) = ($17 + [384])
	CALL $39(($17 + [448]), $16)
	CALL db_update_i64(*($16 + [60]), $12, ($17 + [384]), [56])
	$8 = (($17 + [168]) + [16])
	if ( (uint_64)($13 <= *($8)) ){ goto $label$57 }
	*($8) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$57
	*($17 + [504]) = *($7)
	*($17 + [496]) = *($15)
	if ( (CALL memcmp(($17 + [464]), ($17 + [496]), [16]) == 0) ){ goto $label$22 }
	$16 = ($16 + [64])
	$15 = *($16)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$58 }
	$15 = CALL db_idx128_find_primary(*($17 + [168]), *(($17 + [176])), (int_64)-5969209044777304064, ($17 + [480]), $13)
	*($16) = $15
	
.LABEL $label$58
	CALL db_idx128_update($15, $12, ($17 + [496]))
	if ( $14 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$24
	$15 = [0]
	$16 = CALL db_find_i64(*($17 + [168]), *(($17 + [176])), (int_64)-5969209044777304064, $13)
	if ( ((int_32)$16 < (int_32)[0]) ){ goto $label$23 }
	$15 = CALL $43(($17 + [168]), $16)
	CALL eosio_assert(((int_32)*($15 + [56]) == (int_32)($17 + [168])), [176])
	
.LABEL $label$23
	CALL eosio_assert(((int_32)$15 != (int_32)[0]), [1216])
	$15 = CALL db_next_i64(*($15 + [60]), ($17 + [384]))
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$61 }
	$7 = CALL $43(($17 + [168]), $15)
	if ( ((int_64)*($7 + [8]) > (int_64)9999) ){ goto $label$62 }
	
.LOOP $label$63:
	CALL eosio_assert([1], [1216])
	$15 = CALL db_next_i64(*($7 + [60]), ($17 + [384]))
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$61 }
	$7 = CALL $43(($17 + [168]), $15)
	if ( ((int_64)*($7 + [8]) <= (int_64)9999) ){ goto $label$63 }
	
.LABEL $label$62
	$9 = ($7 + [8])
	$16 = [0]
	$14 = [0]
	$15 = CALL db_lowerbound_i64(*($17 + [208]), *((($17 + [208]) + [8])), (int_64)3607749779137757184, (int_64)0)
	if ( ((int_32)$15 < (int_32)[0]) ){ goto $label$64 }
	$14 = CALL $13(($17 + [208]), $15)
	
.LABEL $label$64
	*($17 + [160]) = *($7)
	$13 = *($9)
	CALL __multi3(($17 + [112]), $13, (int_64)$13 >> (int_64)63), (int_64)10000000000, (int_64)0)
	$12 = *(($15 + [24]))
	$15 = CALL $9(($17 + [384]), *(($7 + [24])), *(($7 + [16])), *($17 + [112]), *(($17 + [120])))
	$13 = *($15 + [16])
	CALL __divti3(($17 + [96]), $13, $12, (int_64)10000000000, (int_64)0)
	*((($17 + [336]) + [24])) = $12
	*($17 + [352]) = $13
	*($17 + [336]) = *($15)
	$12 = *($15 + [8])
	*($17 + [344]) = $12
	$4 = *($17 + [96])
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	
.LOOP $label$65:
	$15 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$60 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$66 }
	
.LOOP $label$67:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$60 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$67 }
	
.LABEL $label$66
	$8 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$65 }
	goto $label$59 
	
.LABEL $label$61
	$13 = *($0)
	*($17 + [384]) = ($17 + [288])
	CALL $54(($17 + [248]), $2, $13, ($17 + [384]))
	$14 = *($17 + [192])
	if ( $14 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$60
	$8 = [0]
	
.LABEL $label$59
	CALL eosio_assert($8, [64])
	*(($17 + [376])) = $12
	*(($17 + [368])) = $4
	$12 = *((($17 + [336]) + [24]))
	$13 = *((($17 + [336]) + [16]))
	CALL __divti3(($17 + [80]), $13, $12, (int_64)10000000000, (int_64)0)
	*((($17 + [288]) + [24])) = $12
	*((($17 + [288]) + [16])) = $13
	*($17 + [288]) = *($17 + [336])
	$12 = *($17 + [344])
	*($17 + [296]) = $12
	$4 = *($17 + [80])
	CALL eosio_assert((uint_64)(((int_64)$4 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$13 = (uint_64)$12 >> (uint_64)(int_64)8)
	
.LOOP $label$69:
	$16 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$68 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$70 }
	
.LOOP $label$71:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$68 }
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$71 }
	
.LABEL $label$70
	$16 = [1]
	$15 = ($15 + [1])
	if ( ((int_32)$15 < (int_32)[7]) ){ goto $label$69 }
	
.LABEL $label$68
	CALL eosio_assert($16, [64])
	*(($17 + [328])) = $12
	*(($17 + [320])) = $4
	$12 = *($0)
	CALL eosio_assert(((int_32)*($7 + [56]) == (int_32)($17 + [168])), [432])
	CALL eosio_assert(((int_64)*($17 + [168]) == (int_64)CALL $fimport$6()), [480])
	*($9) = (int_64)0
	$15 = ($7 + [24])
	*($17 + [472]) = *($15)
	$16 = ($7 + [16])
	*($17 + [464]) = *($16)
	$13 = *($7)
	CALL eosio_assert([1], [544])
	*($17 + [456]) = (($17 + [384]) + [56])
	*($17 + [452]) = ($17 + [384])
	*($17 + [448]) = ($17 + [384])
	CALL $39(($17 + [448]), $7)
	CALL db_update_i64(*($7 + [60]), $12, ($17 + [384]), [56])
	$8 = (($17 + [168]) + [16])
	if ( (uint_64)($13 <= *($8)) ){ goto $label$72 }
	*($8) = ( (int_64)-2 ? ((int_64)$13 + (int_64)1) : ((uint_64)$13 > (uint_64)(int_64)-3) )
	
.LABEL $label$72
	*($17 + [504]) = *($15)
	*($17 + [496]) = *($16)
	if ( (CALL memcmp(($17 + [464]), ($17 + [496]), [16]) == 0) ){ goto $label$22 }
	$16 = ($7 + [64])
	$15 = *($16)
	if ( ((int_32)$15 > (int_32)[-1]) ){ goto $label$73 }
	$15 = CALL db_idx128_find_primary(*($17 + [168]), *(($17 + [176])), (int_64)-5969209044777304064, ($17 + [480]), $13)
	*($16) = $15
	
.LABEL $label$73
	CALL db_idx128_update($15, $12, ($17 + [496]))
	if ( $14 ){ goto $label$21 }
	goto $label$20 
	
.LABEL $label$22
	if ( ($14 == 0) ){ goto $label$20 }
	
.LABEL $label$21
	if ( ((int_32)$1 < (int_32)[1]) ){ goto $label$20 }
	$3 = (CASTING float_64)(int_64 $6)
	$8 = (($17 + [496]) + [8])
	$10 = (($17 + [336]) + [24])
	$11 = (($17 + [336]) + [16])
	
.LOOP $label$74:
	$13 = *($14 + [8])
	$16 = [0]
	*($8) = [0]
	*($17 + [496]) = (int_64)0
	$9 = ($14 + [32])
	$15 = (*($9) - *($14 + [28]))
	$7 = ((int_32)$15 / (int_32)[48])
	if ( ($15 == 0) ){ goto $label$75 }
	if ( ((uint_32)$7 >= (uint_32)[89478486]) ){ goto $label$14 }
	$16 = CALL $81($15)
	*($8) = ($16 + ((int_32)$7 * (int_32)[48]))
	*($17 + [496]) = $16
	*($17 + [500]) = $16
	$7 = *(($14 + [28]))
	$15 = (*($9) - $7)
	if ( ((int_32)$15 < (int_32)[1]) ){ goto $label$75 }
	CALL memcpy($16, $7, $15)
	$16 = (*($17 + [500]) + ((int_32)((uint_32)$15 / (uint_32)[48]) * (int_32)[48]))
	*($17 + [500]) = $16
	
.LABEL $label$75
	CALL __fixdfti(($17 + [16]), ((float_64)((float_64)(CASTING float_64)(int_64 $13) / (float_64)$3) * (float_64)CALL $fimport$2(*($11), *($10))))
	$13 = *((($17 + [16]) + [8]))
	$4 = *($17 + [16])
	if ( (int_64)(((int_64)$4 | (int_64)$13) == 0) ){ goto $label$76 }
	$15 = (($17 + [288]) + [24])
	$12 = *($15)
	$7 = ( ((uint_64)$4 > (uint_64)$6) ? ((int_64)$13 > (int_64)$12) : ((int_64)$13 == (int_64)$12) )
	$4 = ( $6 ? $4 : $7 )
	$6 = *($15)
	*(($15 = (($17 + [288]) + [16]))) = (int_64))($6 - $4)
	$5 = ( $12 ? $13 : $7 )
	*($15) = (int_64))((int_64))($12 - $5) - (CASTING uint_64)(uint_32 (uint_64)($6 <= $4)))
	$6 = *($17 + [344])
	$13 = *($17 + [336])
	$15 = *($17 + [496])
	if ( ((int_32)$16 == (int_32)$15) ){ goto $label$78 }
	$7 = ((int_32)($16 - $15) / (int_32)[48])
	$16 = [0]
	
.LOOP $label$79:
	CALL memcpy(($17 + [384]), $15, [48])
	if ( ((int_64)*($17 + [384]) != (int_64)$13) ){ goto $label$80 }
	if ( ((int_64)*($17 + [392]) == (int_64)$6) ){ goto $label$77 }
	
.LABEL $label$80
	$15 = ($15 + [48])
	$16 = ($16 + [1])
	if ( ($16 <= $7) ){ goto $label$79 }
	
.LABEL $label$78
	$16 = CALL $9(($17 + [384]), $13, $6, $4, $5)
	$15 = *($17 + [500])
	if ( ((int_32)$15 == (int_32)*($8)) ){ goto $label$82 }
	*($17 + [500]) = (CALL memcpy($15, ($17 + [384]), [48]) + [48])
	goto $label$81 
	
.LABEL $label$82
	CALL $56(($17 + [496]), $16)
	
.LABEL $label$81
	$13 = *($0)
	*($17 + [464]) = ($17 + [496])
	CALL $57(($17 + [208]), $14, $13, ($17 + [464]))
	goto $label$76 
	
.LABEL $label$77
	$7 = (($17 + [384]) + [24])
	$12 = ((int_64)((int_64)*($7) + (int_64)$5) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($6 <= $12)) : (uint_64)($6 <= $4) ))
	$16 = (($17 + [384]) + [16])
	$12 = *($16)
	$6 = ((int_64)$12 + (int_64)$4)
	CALL __divti3($17, $6, $12, (int_64)10000000000, (int_64)0)
	*($15) = $13
	*($16) = $6
	*($7) = $12
	$4 = *($17 + [392])
	*(($15 + [8])) = $4
	*(($15 + [24])) = $12
	*(($15 + [16])) = $6
	$6 = *($17)
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$13 = (uint_64)$4 >> (uint_64)(int_64)8)
	$16 = [0]
	
.LOOP $label$85:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $13) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$84 }
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$86 }
	
.LOOP $label$87:
	$13 = (uint_64)$13 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$13) & (int_64)255) != (int_64)0) ){ goto $label$84 }
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$87 }
	
.LABEL $label$86
	$7 = [1]
	$16 = ($16 + [1])
	if ( ((int_32)$16 < (int_32)[7]) ){ goto $label$85 }
	goto $label$83 
	
.LABEL $label$84
	$7 = [0]
	
.LABEL $label$83
	CALL eosio_assert($7, [64])
	*(($15 + [40])) = $4
	*(($15 + [32])) = $6
	$13 = *($0)
	*($17 + [464]) = ($17 + [496])
	CALL $55(($17 + [208]), $14, $13, ($17 + [464]))
	
.LABEL $label$76
	*($17 + [480]) = *($14)
	$15 = *($17 + [496])
	if ( ($15 == 0) ){ goto $label$88 }
	*($17 + [500]) = $15
	CALL $82($15)
	
.LABEL $label$88
	CALL eosio_assert([1], [1216])
	$15 = CALL db_next_i64(*($14 + [44]), ($17 + [384]))
	if ( ((int_32)$15 <= (int_32)[-1]) ){ goto $label$18 }
	$16 = ((int_32)$1 > (int_32)[1])
	$14 = CALL $13(($17 + [208]), $15)
	$1 = ($1 + [-1])
	if ( $16 ){ goto $label$74 }
	goto $label$19 
	
.LABEL $label$20
	if ( ($14 == 0) ){ goto $label$18 }
	
.LABEL $label$19
	$13 = *($0)
	*($17 + [388]) = ($17 + [336])
	*($17 + [384]) = ($17 + [480])
	*($17 + [392]) = ($17 + [288])
	*($17 + [396]) = ($17 + [160])
	CALL $60(($17 + [248]), $2, $13, ($17 + [384]))
	$14 = *($17 + [192])
	if ( $14 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$18
	*(($17 + [312])) = (int_64)0
	*($17 + [304]) = (int_64)0
	$13 = *($17 + [160])
	*($17 + [384]) = (CASTING uint_64)(uint_32 ($17 + [168]))
	$15 = CALL $44(($17 + [384]))
	$6 = *($0)
	if ( ((int_64)$13 != (int_64)*(*($15 + [4]))) ){ goto $label$89 }
	*($17 + [388]) = ($17 + [288])
	*($17 + [384]) = ($17 + [480])
	*($17 + [392]) = ($17 + [160])
	CALL $58(($17 + [248]), $2, $6, ($17 + [384]))
	$14 = *($17 + [192])
	if ( $14 ){ goto $label$16 }
	goto $label$15 
	
.LABEL $label$89
	*($17 + [388]) = ($17 + [160])
	*($17 + [384]) = ($17 + [288])
	CALL $59(($17 + [248]), $2, $6, ($17 + [384]))
	
.LABEL $label$17
	$14 = *($17 + [192])
	if ( ($14 == 0) ){ goto $label$15 }
	
.LABEL $label$16
	$7 = ($17 + [196])
	$15 = *($7)
	if ( ((int_32)$15 == (int_32)$14) ){ goto $label$91 }
	
.LOOP $label$92:
	$15 = ($15 + [-24])
	$16 = *($15)
	*($15) = [0]
	if ( ($16 == 0) ){ goto $label$93 }
	CALL $82($16)
	
.LABEL $label$93
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$92 }
	$15 = *(($17 + [192]))
	goto $label$90 
	
.LABEL $label$91
	$15 = $14
	
.LABEL $label$90
	*($7) = $14
	CALL $82($15)
	
.LABEL $label$15
	$7 = *($17 + [232])
	if ( ($7 == 0) ){ goto $label$94 }
	$1 = ($17 + [236])
	$15 = *($1)
	if ( ((int_32)$15 == (int_32)$7) ){ goto $label$96 }
	
.LOOP $label$97:
	$15 = ($15 + [-24])
	$16 = *($15)
	*($15) = [0]
	if ( ($16 == 0) ){ goto $label$98 }
	$14 = *($16 + [28])
	if ( ($14 == 0) ){ goto $label$99 }
	*(($16 + [32])) = $14
	CALL $82($14)
	
.LABEL $label$99
	CALL $82($16)
	
.LABEL $label$98
	if ( ((int_32)$7 != (int_32)$15) ){ goto $label$97 }
	$15 = *(($17 + [232]))
	goto $label$95 
	
.LABEL $label$96
	$15 = $7
	
.LABEL $label$95
	*($1) = $7
	CALL $82($15)
	
.LABEL $label$94
	$14 = *($17 + [272])
	if ( ($14 == 0) ){ goto $label$100 }
	$7 = ($17 + [276])
	$15 = *($7)
	if ( ((int_32)$15 == (int_32)$14) ){ goto $label$102 }
	
.LOOP $label$103:
	$15 = ($15 + [-24])
	$16 = *($15)
	*($15) = [0]
	if ( ($16 == 0) ){ goto $label$104 }
	CALL $82($16)
	
.LABEL $label$104
	if ( ((int_32)$14 != (int_32)$15) ){ goto $label$103 }
	$15 = *(($17 + [272]))
	goto $label$101 
	
.LABEL $label$102
	$15 = $14
	
.LABEL $label$101
	*($7) = $14
	CALL $82($15)
	
.LABEL $label$100
	*([0] + [4]) = ($17 + [512])
	return (unreachable)
	
.LABEL $label$14
	CALL $88(($17 + [496]))
}

void .FUNC $54 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [32])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [480])
	$9 = [0]
	*($1 + [28]) = [0]
	$4 = *($1)
	$3 = *($3)
	$6 = ($1 + [96])
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$1 }
	$7 = *(($3 + [24]))
	$8 = *($3 + [16])
	CALL __divti3($10, $8, $7, (int_64)10000000000, (int_64)0)
	*($6) = *($3)
	$5 = *($3 + [8])
	*(($1 + [104])) = $5
	*(($1 + [120])) = $7
	*(($1 + [112])) = $8
	$7 = *($10)
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$8 = (uint_64)$5 >> (uint_64)(int_64)8)
	
.LOOP $label$3:
	$3 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$3 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$3 }
	
.LABEL $label$2
	CALL eosio_assert($3, [64])
	*(($1 + [136])) = $5
	*(($1 + [128])) = $7
	
.LABEL $label$1
	*($1 + [24]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [544])
	$3 = $11
	$9 = ($3 + [-144])
	*([0] + [4]) = $9
	*($10 + [20]) = $9
	*($10 + [16]) = $9
	*($10 + [24]) = ($3 + [-3])
	CALL $18(($10 + [16]), $1)
	CALL db_update_i64(*(($1 + [156])), $2, $9, [141])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$6 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$6
	*([0] + [4]) = ($10 + [32])
}

int_32 .FUNC $34 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$2 = (*([0] + [4]) - [16])
	*([0] + [4]) = $2
	$1 = *($0 + [4])
	if ( ($1 == 0) ){ goto $label$2 }
	$1 = CALL db_previous_i64(*($1 + [40]), ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [944])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($0)
	$1 = CALL db_end_i64(*($1), *($1 + [8]), (int_64)-5001342331490271232)
	CALL eosio_assert(((int_32)$1 != (int_32)[-1]), [880])
	$1 = CALL db_previous_i64($1, ($2 + [8]))
	CALL eosio_assert(((int_32)uint_32($1 >> [31]) ^ (int_32)[1]), [880])
	
.LABEL $label$1
	*(($0 + [4])) = CALL $33(*($0), $1)
	*([0] + [4]) = ($2 + [16])
	return $0
}

void .FUNC $56 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$4 = *($0)
	$5 = *($0 + [4])
	$2 = ((int_32)($5 - $4) / (int_32)[48])
	$7 = ($2 + [1])
	if ( ((uint_32)$7 >= (uint_32)[89478486]) ){ goto $label$2 }
	$6 = [89478485]
	$3 = ((int_32)(*($0 + [8]) - $4) / (int_32)[48])
	if ( ((uint_32)$3 > (uint_32)[44739241]) ){ goto $label$4 }
	$6 = ($3 << [1])
	$6 = ( $7 ? $6 : ($6 <= $7) )
	if ( ($6 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$7 = CALL $81(((int_32)$6 * (int_32)[48]))
	$5 = *(($0 + [4]))
	$4 = *($0)
	goto $label$1 
	
.LABEL $label$3
	$6 = [0]
	$7 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = ($5 - $4)
	$2 = CALL memcpy(($7 + ((int_32)$2 * (int_32)[48])), $1, [48])
	$1 = ($2 + ((int_32)((int_32)$5 / (int_32)[-48]) * (int_32)[48]))
	$6 = ($7 + ((int_32)$6 * (int_32)[48]))
	$7 = ($2 + [48])
	if ( ((int_32)$5 < (int_32)[1]) ){ goto $label$5 }
	CALL memcpy($1, $4, $5)
	$4 = *($0)
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $7
	*(($0 + [8])) = $6
	if ( ($4 == 0) ){ goto $label$6 }
	CALL $82($4)
	
.LABEL $label$6
	(unreachable)
}

void .FUNC $57 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [480])
	$4 = *($1)
	$8 = $4
	$3 = *($3)
	$7 = ($1 + [28])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	CALL $61($7, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [544])
	$5 = *($7)
	$3 = *(($1 + [32]))
	$6 = ($3 - $5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[48]))
	$7 = [76]
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$3 = ($6 + [-48])
	$7 = (($3 - ((uint_32)$3 % (uint_32)[48])) + $7)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 + [-48])
	
.LABEL $label$3
	if ( ($7 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL $22($10, $1)
	CALL db_update_i64(*($1 + [44]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $35 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[3]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC $29 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [480])
	$4 = *($1)
	$3 = *($3)
	CALL eosio_assert(((int_64)*($3 + [8]) == (int_64)*(($1 + [16]))), [992])
	$8 = (int_64)
	*($1 + [8]) = $8(*($1 + [8]) - *($3)))
	CALL eosio_assert(((int_64)$8 > (int_64)-4611686018427387904), [1040])
	CALL eosio_assert(((int_64)*($1 + [8]) < (int_64)4611686018427387904), [1072])
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [544])
	$6 = *($1 + [28])
	$5 = *(($1 + [32]))
	$7 = ($5 - $6)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$7 / (int_32)[48]))
	$3 = [76]
	
.LOOP $label$1:
	$3 = ($3 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$1 }
	if ( ((int_32)$6 == (int_32)$5) ){ goto $label$3 }
	$5 = ($7 + [-48])
	$3 = (($5 - ((uint_32)$5 % (uint_32)[48])) + $3)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($3 + [-48])
	
.LABEL $label$2
	if ( ($3 <= [513]) ){ goto $label$5 }
	$9 = CALL malloc($3)
	goto $label$4 
	
.LABEL $label$5
	$9 = ($9 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$4
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $3)
	CALL $22($10, $1)
	CALL db_update_i64(*($1 + [44]), $2, $9, $3)
	if ( ($3 <= [513]) ){ goto $label$6 }
	CALL free($9)
	
.LABEL $label$6
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$7 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$7
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN8dividend6refundENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN5eosio5assetE (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_64 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_64 $10
	int_32 $11
	$11 = (*([0] + [4]) - [96])
	*([0] + [4]) = $11
	$5 = [0]
	if ( ((uint_64)((int_64)*($2) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$1 }
	$8 = (uint_64)*($2 + [8]) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$5 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$5 = [0]
	
.LABEL $label$1
	CALL eosio_assert($5, [688])
	*(($11 + [88])) = [0]
	*($11 + [72]) = (int_64)-1
	$8 = *($0)
	*($11 + [56]) = $8
	*($11 + [64]) = $8
	*($11 + [80]) = (int_64)0
	$6 = CALL db_lowerbound_i64($8, $8, (int_64)-4157502641443700736, (int_64)0)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$6 }
	CALL eosio_assert(((int_32)*(CALL $12(($11 + [56]), $6) + [28]) ^ (int_32)[1]), [160])
	
.LABEL $label$6
	if ( (*($1) & [1]) ){ goto $label$8 }
	$6 = ($1 + [1])
	goto $label$7 
	
.LABEL $label$8
	$6 = *($1 + [8])
	
.LABEL $label$7
	$5 = [-1]
	
.LOOP $label$9:
	$1 = ($6 + $5)
	$3 = ($5 + [1])
	$5 = $3
	if ( *(($1 + [1])) ){ goto $label$9 }
	$4 = (CASTING uint_64)(uint_32 $3)
	$8 = (int_64)0
	$7 = (int_64)59
	$9 = (int_64)0
	
.LOOP $label$10:
	$10 = (int_64)0
	if ( ((uint_64)$8 >= (uint_64)$4) ){ goto $label$11 }
	$5 = *($6)
	if ( ((uint_32)(($5 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$13 }
	$5 = ($5 + [165])
	goto $label$12 
	
.LABEL $label$13
	$5 = ( ($5 + [208]) ? [0] : ((($5 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$12
	$10 = (int_64)((int_64)(CASTING uint_64)(uint_32 $5) << (int_64)56) >> (int_64)56)
	
.LABEL $label$11
	if ( ((uint_64)$8 > (uint_64)(int_64)11) ){ goto $label$15 }
	$10 = ((int_64)((int_64)$10 & (int_64)31) << (int_64)((int_64)$7 & (int_64)4294967295))
	goto $label$14 
	
.LABEL $label$15
	$10 = ((int_64)$10 & (int_64)15)
	
.LABEL $label$14
	$6 = ($6 + [1])
	$8 = ((int_64)$8 + (int_64)1)
	$9 = ((int_64)$10 | (int_64)$9)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$10 }
	CALL require_auth($9)
	*(($11 + [48])) = [0]
	*($11 + [32]) = (int_64)-1
	*($11 + [40]) = (int_64)0
	$8 = *($0)
	*($11 + [16]) = $8
	*($11 + [24]) = $8
	$6 = CALL db_find_i64($8, $8, (int_64)3607749779137757184, $9)
	if ( ((int_32)$6 < (int_32)[0]) ){ goto $label$18 }
	$6 = CALL $13(($11 + [16]), $6)
	CALL eosio_assert(((int_32)*($6 + [40]) == (int_32)($11 + [16])), [176])
	CALL eosio_assert(((int_64)*(($6 + [16])) == (int_64)*($2 + [8])), [704])
	CALL eosio_assert(((int_64)*($6 + [8]) >= (int_64)*($2)), [768])
	$8 = *($0)
	*($11) = $2
	CALL $29(($11 + [16]), $6, $8, $11)
	CALL _ZN8dividend13add_refundingEyRKN5eosio5assetE($0, $9, $2)
	*(($11 + [8])) = *($2 + [8])
	$8 = *($2)
	*($11) = $8
	*($11) = (int_64))((int_64)0 - $8)
	CALL _ZN8dividend18modify_total_stakeERKN5eosio5assetE($0, $11)
	$3 = *($11 + [40])
	if ( $3 ){ goto $label$17 }
	goto $label$16 
	
.LABEL $label$18
	CALL eosio_assert([0], [784])
	$3 = *($11 + [40])
	if ( ($3 == 0) ){ goto $label$16 }
	
.LABEL $label$17
	$2 = ($11 + [44])
	$6 = *($2)
	if ( ((int_32)$6 == (int_32)$3) ){ goto $label$20 }
	
.LOOP $label$21:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$22 }
	$1 = *($5 + [28])
	if ( ($1 == 0) ){ goto $label$23 }
	*(($5 + [32])) = $1
	CALL $82($1)
	
.LABEL $label$23
	CALL $82($5)
	
.LABEL $label$22
	if ( ((int_32)$3 != (int_32)$6) ){ goto $label$21 }
	$6 = *(($11 + [40]))
	goto $label$19 
	
.LABEL $label$20
	$6 = $3
	
.LABEL $label$19
	*($2) = $3
	CALL $82($6)
	
.LABEL $label$16
	$1 = *($11 + [80])
	if ( ($1 == 0) ){ goto $label$24 }
	$3 = ($11 + [84])
	$6 = *($3)
	if ( ((int_32)$6 == (int_32)$1) ){ goto $label$26 }
	
.LOOP $label$27:
	$6 = ($6 + [-24])
	$5 = *($6)
	*($6) = [0]
	if ( ($5 == 0) ){ goto $label$28 }
	CALL $82($5)
	
.LABEL $label$28
	if ( ((int_32)$1 != (int_32)$6) ){ goto $label$27 }
	$6 = *(($11 + [80]))
	goto $label$25 
	
.LABEL $label$26
	$6 = $1
	
.LABEL $label$25
	*($3) = $1
	CALL $82($6)
	
.LABEL $label$24
	*([0] + [4]) = ($11 + [96])
}

void .FUNC $55 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [480])
	$4 = *($1)
	$8 = $4
	$3 = *($3)
	$7 = ($1 + [28])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	CALL $61($7, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [544])
	$5 = *($7)
	$3 = *(($1 + [32]))
	$6 = ($3 - $5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[48]))
	$7 = [76]
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$3 = ($6 + [-48])
	$7 = (($3 - ((uint_32)$3 % (uint_32)[48])) + $7)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 + [-48])
	
.LABEL $label$3
	if ( ($7 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL $22($10, $1)
	CALL db_update_i64(*($1 + [44]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

int_32 .FUNC $21 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[15]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

void .FUNC $20 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $81(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $82($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $82($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $23 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL $24($0, ($1 + [28]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [656])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [656])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	return *($0 + [4]) = (*($0 + [4]) + [4])
}

int_32 .FUNC $22 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	*([0] + [4]) = $6
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), $1, [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$3 = (*($0 + [4]) + [8])
	*($0 + [4]) = $3
	CALL eosio_assert(((int_32)(*($0 + [8]) - $3) > (int_32)[3]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [4])
	$4 = (*($0 + [4]) + [4])
	*($0 + [4]) = $4
	$5 = (CASTING uint_64)(uint_32 ((int_32)(*(($1 + [32])) - *($1 + [28])) / (int_32)[48]))
	
.LOOP $label$1:
	$3 = (CASTING uint_32)(uint_64 $5)
	$5 = (uint_64)$5 >> (uint_64)(int_64)7
	$2 = ((int_64)$5) != (int_64)0
	*($6 + [15]) = (($2) << [7]) | ($3 & [127]))
	CALL eosio_assert(((int_32)(*(($0 + [8])) - $4) > (int_32)[0]), [608])
	$3 = ($0 + [4])
	CALL memcpy(*($3), ($6 + [15]), [1])
	$4 = (*($3) + [1])
	*($3) = $4
	if ( $2 ){ goto $label$1 }
	$4 = *(($1 + [32]))
	$3 = *(($1 + [28]))
	if ( ((int_32)$3 == (int_32)$4) ){ goto $label$2 }
	
.LOOP $label$3:
	CALL $21($0, $3)
	$3 = ($3 + [48])
	if ( ((int_32)$4 != (int_32)$3) ){ goto $label$3 }
	
.LABEL $label$2
	*([0] + [4]) = ($6 + [16])
	return $0
}

void .FUNC $25 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$6 = *($0 + [4])
	$7 = *($0 + [8])
	if ( ((uint_32)((int_32)($7 - $6) / (int_32)[48]) >= (uint_32)$1) ){ goto $label$5 }
	$8 = *($0)
	$2 = ((int_32)($6 - $8) / (int_32)[48])
	$3 = ($2 + $1)
	if ( ((uint_32)$3 >= (uint_32)[89478486]) ){ goto $label$3 }
	$6 = [89478485]
	$7 = ((int_32)($7 - $8) / (int_32)[48])
	if ( ((uint_32)$7 > (uint_32)[44739241]) ){ goto $label$6 }
	$6 = ($7 << [1])
	$6 = ( $3 ? $6 : ($6 <= $3) )
	if ( ($6 == 0) ){ goto $label$4 }
	
.LABEL $label$6
	$7 = CALL $81(((int_32)$6 * (int_32)[48]))
	goto $label$2 
	
.LABEL $label$5
	$8 = ($0 + [4])
	
.LOOP $label$7:
	*($6 + [32]) = (int_64)0
	*(($6 = ($6 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [96])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$7 = [0]
	
.LABEL $label$8
	CALL eosio_assert($7, [64])
	$6 = (*($8) + [48])
	*($8) = $6
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$7 }
	goto $label$1 
	
.LABEL $label$4
	$6 = [0]
	$7 = [0]
	goto $label$2 
	
.LABEL $label$3
	CALL $88($0)
	
.LABEL $label$2
	$3 = ($7 + ((int_32)$6 * (int_32)[48]))
	$2 = ($7 + ((int_32)$2 * (int_32)[48]))
	$8 = $2
	
.LOOP $label$13:
	*($8 + [32]) = (int_64)0
	*(($6 = ($8 + [40]))) = (int_64)1398362884
	CALL eosio_assert([1], [96])
	$5 = (uint_64)*($6) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$16:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$15 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$17 }
	
.LOOP $label$18:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$15 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$18 }
	
.LABEL $label$17
	$7 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$16 }
	goto $label$14 
	
.LABEL $label$15
	$7 = [0]
	
.LABEL $label$14
	CALL eosio_assert($7, [64])
	$8 = ($8 + [48])
	$1 = ($1 + [-1])
	if ( $1 ){ goto $label$13 }
	$6 = *($0)
	$4 = ($0 + [4])
	$7 = (*($4) - $6)
	$1 = ($2 + ((int_32)((int_32)$7 / (int_32)[-48]) * (int_32)[48]))
	if ( ((int_32)$7 < (int_32)[1]) ){ goto $label$19 }
	CALL memcpy($1, $6, $7)
	$6 = *($0)
	
.LABEL $label$19
	*($0) = $1
	*($4) = $8
	*(($0 + [8])) = $3
	if ( ($6 == 0) ){ goto $label$1 }
	CALL $82($6)
	return 
	
.LABEL $label$1
	(unreachable)
}

int_32 .FUNC $24 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [672])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$5 = *($1 + [4])
	$3 = ((int_32)($5 - $4) / (int_32)[48])
	$7 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$7 <= (uint_32)$3) ){ goto $label$4 }
	CALL $25($1, ($7 - $3))
	$5 = *(($1 + [4]))
	$4 = *($1)
	if ( ((int_32)$4 != (int_32)$5) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$4
	if ( ((uint_32)$7 >= (uint_32)$3) ){ goto $label$5 }
	$5 = ($4 + ((int_32)$7 * (int_32)[48]))
	*(($1 + [4])) = $5
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$5) ){ goto $label$2 }
	
.LABEL $label$3
	
.LOOP $label$6:
	CALL $26($0, $4)
	$4 = ($4 + [48])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$6 }
	
.LABEL $label$2
	return $0
}

int_32 .FUNC $27 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [656])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [656])
	CALL memcpy(($1 + [24]), *($0 + [4]), [4])
	$2 = (*($0 + [4]) + [4])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)*($0 + [8]) != (int_32)$2), [656])
	CALL memcpy(($3 + [15]), *($0 + [4]), [1])
	$2 = (*($0 + [4]) + [1])
	*($0 + [4]) = $2
	*($1 + [28]) = ((int_32)*($3 + [15]) != (int_32)[0])
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	$0 = CALL $26(CALL $26($0, ($1 + [48])), ($1 + [96]))
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [144]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	*([0] + [4]) = ($3 + [16])
	return $0
}

int_32 .FUNC $26 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [656])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[15]), [656])
	CALL memcpy(($1 + [16]), *($0 + [4]), [16])
	$2 = (*($0 + [4]) + [16])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [32]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [40]), *($0 + [4]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $69 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [48])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$1 = [0]
	$3 = CALL action_data_size()
	if ( ($3 == 0) ){ goto $label$1 }
	if ( ($3 <= [513]) ){ goto $label$3 }
	$1 = CALL malloc($3)
	goto $label$2 
	
.LABEL $label$3
	$1 = ($6 - (($3 + [15]) & [-16]))
	*([0] + [4]) = $1
	
.LABEL $label$2
	CALL read_action_data($1, $3)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [36]) = $1
	*($5 + [32]) = $1
	*($5 + [40]) = ($1 + $3)
	CALL $72(($5 + [32]), $5)
	if ( ($3 <= [513]) ){ goto $label$4 }
	CALL free($1)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	CALL $89(($5 + [16]), $5)
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL $89(($5 + [32]), ($5 + [16]))
	CALL void $1((int_32 ($5 + [32])), (int_32 $4))
	if ( ((*($5 + [32]) & [1]) == 0) ){ goto $label$6 }
	CALL $82(*($5 + [40]))
	
.LABEL $label$6
	if ( ((*($5 + [16]) & [1]) == 0) ){ goto $label$7 }
	CALL $82(*($5 + [24]))
	
.LABEL $label$7
	if ( ((*($5) & [1]) == 0) ){ goto $label$8 }
	CALL $82(*(($5 + [8])))
	
.LABEL $label$8
	*([0] + [4]) = ($5 + [48])
	return [1]
}

int_32 .FUNC $68 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	$4 = (*([0] + [4]) - [64])
	*([0] + [4]) = $4
	*(($5 = $4) + [44]) = $0
	*($5 + [32]) = *($1)
	*($5 + [36]) = *($1 + [4])
	$1 = [0]
	$0 = [0]
	$2 = CALL action_data_size()
	if ( ($2 == 0) ){ goto $label$1 }
	if ( ($2 <= [513]) ){ goto $label$3 }
	$0 = CALL malloc($2)
	goto $label$2 
	
.LABEL $label$3
	$0 = ($4 - (($2 + [15]) & [-16]))
	*([0] + [4]) = $0
	
.LABEL $label$2
	CALL read_action_data($0, $2)
	
.LABEL $label$1
	*(($5 + [24])) = (int_64)1398362884
	*($5 + [8]) = [0]
	*($5) = (int_64)0
	*($5 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$3 = (int_64)5462355
	
.LOOP $label$5:
	$4 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$4 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	CALL eosio_assert($4, [64])
	*($5 + [52]) = $0
	*($5 + [48]) = $0
	*($5 + [56]) = ($0 + $2)
	CALL $72(($5 + [48]), $5)
	CALL eosio_assert(((uint_32)(*($5 + [56]) - *($5 + [52])) > (uint_32)[7]), [656])
	CALL memcpy(($5 + [16]), *($5 + [52]), [8])
	$1 = (*($5 + [52]) + [8])
	*($5 + [52]) = $1
	CALL eosio_assert(((uint_32)(*($5 + [56]) - $1) > (uint_32)[7]), [656])
	CALL memcpy(($5 + [24]), *($5 + [52]), [8])
	if ( ($2 <= [513]) ){ goto $label$8 }
	CALL free($0)
	
.LABEL $label$8
	*($5 + [52]) = ($5 + [32])
	*($5 + [48]) = ($5 + [44])
	CALL $74(($5 + [48]), $5)
	if ( ((*($5) & [1]) == 0) ){ goto $label$9 }
	CALL $82(*(($5 + [8])))
	
.LABEL $label$9
	*([0] + [4]) = ($5 + [64])
	return [1]
}

void .FUNC _ZN8dividend4testEm (int_32 $0, int_32 $1)
{
	CALL require_auth(*($0))
}

void .FUNC _ZN8dividend11on_transferERKN5eosio8currency8transferEy (int_32 $0, int_32 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_64 $9
	int_32 $10
	$10 = (*([0] + [4]) - [32])
	*([0] + [4]) = $10
	CALL require_auth(*($1))
	$5 = *($0)
	if ( ((int_64)*($1) == (int_64)$5) ){ goto $label$1 }
	if ( ((int_64)*($1 + [8]) != (int_64)$5) ){ goto $label$1 }
	$4 = [0]
	if ( ((uint_64)((int_64)*($1 + [16]) + (int_64)4611686018427387903) > (uint_64)(int_64)9223372036854775806) ){ goto $label$2 }
	$5 = (uint_64)*(($1 + [24])) >> (uint_64)(int_64)8)
	$6 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $5) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$5 = (uint_64)$5 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$5) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$4 = [1]
	$6 = ($6 + [1])
	if ( ((int_32)$6 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$4 = [0]
	
.LABEL $label$2
	CALL eosio_assert($4, [1488])
	*($10 + [24]) = [0]
	*($10 + [16]) = (int_64)0
	CALL $89($10, ($1 + [32]))
	CALL _Z10parse_memoNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEER10memo_param($10, ($10 + [16]))
	if ( ((*($10) & [1]) == 0) ){ goto $label$7 }
	CALL $82(*($10 + [8]))
	
.LABEL $label$7
	$3 = ($1 + [16])
	$6 = *($10 + [16])
	$4 = CALL strlen([1520])
	if ( ((int_32)$4 != (int_32)( *($10 + [20]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$10 }
	if ( (CALL $87(($10 + [16]), [0], [-1], [1520], $4) == 0) ){ goto $label$9 }
	
.LABEL $label$10
	$6 = *($10 + [16])
	$1 = CALL strlen([1472])
	if ( ((int_32)$1 != (int_32)( *($10 + [20]) ? uint_32($6 >> [1]) : ($6 & [1]) )) ){ goto $label$8 }
	if ( CALL $87(($10 + [16]), [0], [-1], [1472], $1) ){ goto $label$8 }
	CALL _ZN8dividend12deposit_poolEyRKN5eosio5assetE($0, $2, $3)
	goto $label$8 
	
.LABEL $label$9
	$5 = (int_64)0
	$7 = (int_64)59
	$6 = [1120]
	$8 = (int_64)0
	
.LOOP $label$11:
	$9 = (int_64)0
	if ( ((uint_64)$5 > (uint_64)(int_64)11) ){ goto $label$12 }
	$4 = *($6)
	if ( ((uint_32)(($4 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$14 }
	$4 = ($4 + [165])
	goto $label$13 
	
.LABEL $label$14
	$4 = ( ($4 + [208]) ? [0] : ((($4 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$13
	$9 = ((int_64)(CASTING uint_64)(uint_32 ($4 & [31])) << (int_64)((int_64)$7 & (int_64)4294967295))
	
.LABEL $label$12
	$6 = ($6 + [1])
	$5 = ((int_64)$5 + (int_64)1)
	$8 = ((int_64)$9 | (int_64)$8)
	$7 = ((int_64)$7 + (int_64)-5)
	if ( ((int_64)$7 != (int_64)-6) ){ goto $label$11 }
	$6 = [0]
	if ( ((int_64)$8 != (int_64)$2) ){ goto $label$15 }
	$6 = ((int_64)*(($1 + [24])) == (int_64)1413825540)
	
.LABEL $label$15
	CALL eosio_assert($6, [1536])
	CALL _ZN8dividend5stakeEyRKN5eosio5assetE($0, *($1), $3)
	
.LABEL $label$8
	if ( ((*($10 + [16]) & [1]) == 0) ){ goto $label$1 }
	CALL $82(*(($10 + [24])))
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [32])
}

void .FUNC $67 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_64 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$4 = (*([0] + [4]) - [16])
	$6 = $4
	*([0] + [4]) = $4
	$1 = CALL action_data_size()
	if ( ($1 <= [513]) ){ goto $label$2 }
	$2 = CALL malloc($1)
	goto $label$1 
	
.LABEL $label$2
	$2 = ($4 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $2
	
.LABEL $label$1
	CALL read_action_data($2, $1)
	*(($0 + [24])) = (int_64)1398362884
	*($0 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$3 = (int_64)5462355
	$4 = [0]
	
.LOOP $label$5:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $3) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$4 }
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$6 }
	
.LOOP $label$7:
	$3 = (uint_64)$3 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$3) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$7 }
	
.LABEL $label$6
	$5 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	goto $label$3 
	
.LABEL $label$4
	$5 = [0]
	
.LABEL $label$3
	CALL eosio_assert($5, [64])
	*(($0 + [40])) = [0]
	*($0 + [32 align=4]) = (int_64)0
	*($6 + [4]) = $2
	*($6) = $2
	*($6 + [8]) = ($2 + $1)
	CALL $75($6, $0)
	*([0] + [4]) = ($6 + [16])
}

void .FUNC _ZN8dividend5applyEyy (int_32 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	int_32 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	$9 = (*([0] + [4]) - [128])
	*([0] + [4]) = $9
	$6 = (int_64)0
	$5 = (int_64)59
	$4 = [1136]
	$7 = (int_64)0
	
.LOOP $label$1:
	if ( ((uint_64)$6 > (uint_64)(int_64)7) ){ goto $label$6 }
	$3 = *($4)
	if ( ((uint_32)(($3 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$5 }
	$3 = ($3 + [165])
	goto $label$4 
	
.LABEL $label$6
	$8 = (int_64)0
	if ( ((uint_64)$6 <= (uint_64)(int_64)11) ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$5
	$3 = ( ($3 + [208]) ? [0] : ((($3 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$4
	$8 = (int_64)((int_64)(CASTING uint_64)(uint_32 $3) << (int_64)56) >> (int_64)56)
	
.LABEL $label$3
	$8 = ((int_64)((int_64)$8 & (int_64)31) << (int_64)((int_64)$5 & (int_64)4294967295))
	
.LABEL $label$2
	$4 = ($4 + [1])
	$6 = ((int_64)$6 + (int_64)1)
	$7 = ((int_64)$8 | (int_64)$7)
	$5 = ((int_64)$5 + (int_64)-5)
	if ( ((int_64)$5 != (int_64)-6) ){ goto $label$1 }
	if ( ((int_64)$7 != (int_64)$2) ){ goto $label$8 }
	CALL $67(($9 + [80]))
	CALL _ZN8dividend11on_transferERKN5eosio8currency8transferEy($0, ($9 + [80]), $1)
	if ( ((*($9 + [112]) & [1]) == 0) ){ goto $label$7 }
	CALL $82(*(($9 + [120])))
	goto $label$7 
	
.LABEL $label$8
	if ( ((int_64)*($0) != (int_64)$1) ){ goto $label$7 }
	if ( ((int_64)$2 <= (int_64)-4998252998346932225) ){ goto $label$12 }
	if ( ((int_64)$2 == (int_64)-4998252998346932224) ){ goto $label$11 }
	if ( ((int_64)$2 == (int_64)-3841130677495922688) ){ goto $label$10 }
	if ( ((int_64)$2 != (int_64)4921564679018381312) ){ goto $label$7 }
	*($9 + [68]) = [0]
	*($9 + [64]) = [1]
	*($9 + [8 align=4]) = *($9 + [64])
	CALL $69($0, ($9 + [8]))
	goto $label$7 
	
.LABEL $label$12
	if ( ((int_64)$2 == (int_64)-6216093385678127104) ){ goto $label$9 }
	if ( ((int_64)$2 != (int_64)-5001342339331915776) ){ goto $label$7 }
	*($9 + [76]) = [0]
	*($9 + [72]) = [2]
	*($9) = *($9 + [72])
	CALL $68($0, $9)
	goto $label$7 
	
.LABEL $label$11
	*($9 + [52]) = [0]
	*($9 + [48]) = [3]
	*($9 + [24 align=4]) = *($9 + [48])
	CALL $70($0, ($9 + [24]))
	goto $label$7 
	
.LABEL $label$10
	*($9 + [44]) = [0]
	*($9 + [40]) = [4]
	*($9 + [32 align=4]) = *($9 + [40])
	CALL $71($0, ($9 + [32]))
	goto $label$7 
	
.LABEL $label$9
	*($9 + [60]) = [0]
	*($9 + [56]) = [5]
	*($9 + [16 align=4]) = *($9 + [56])
	CALL $70($0, ($9 + [16]))
	
.LABEL $label$7
	*([0] + [4]) = ($9 + [128])
}

void .FUNC $61 (int_32 $0, int_32 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	$12 = (*([0] + [4]) - [16])
	*([0] + [4]) = $12
	$11 = *($0)
	$10 = *($0 + [8])
	$9 = ($2 - $1)
	$3 = ((int_32)$9 / (int_32)[48])
	if ( ((uint_32)$3 <= (uint_32)((int_32)($10 - $11) / (int_32)[48])) ){ goto $label$3 }
	if ( ($11 == 0) ){ goto $label$4 }
	*($0 + [4]) = $11
	CALL $82($11)
	$10 = [0]
	*(($0 + [8])) = [0]
	*($0) = (int_64)0
	
.LABEL $label$4
	if ( ((uint_32)$3 >= (uint_32)[89478486]) ){ goto $label$1 }
	$11 = [89478485]
	$10 = ((int_32)$10 / (int_32)[48])
	if ( ((uint_32)$10 > (uint_32)[44739241]) ){ goto $label$5 }
	$11 = ($10 << [1])
	$11 = ( $3 ? $11 : ($11 <= $3) )
	
.LABEL $label$5
	$10 = ((int_32)$11 * (int_32)[48])
	$11 = CALL $81($10)
	*($0) = $11
	*($0 + [4]) = $11
	*(($0 + [8])) = ($11 + $10)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$2 }
	CALL memcpy($11, $1, $9)
	*(($11 = ($0 + [4]))) = (*($11) + ((int_32)((uint_32)$9 / (uint_32)[48]) * (int_32)[48]))
	goto $label$2 
	
.LABEL $label$3
	$4 = ((int_32)(*($0 + [4]) - $11) / (int_32)[48])
	$5 = ( ($1 + ((int_32)$4 * (int_32)[48])) ? $2 : ((uint_32)$3 > (uint_32)$4) )
	if ( ((int_32)$5 == (int_32)$1) ){ goto $label$6 }
	
.LOOP $label$7:
	if ( ((int_32)$11 == (int_32)$1) ){ goto $label$8 }
	$7 = *(($1 + [24]))
	$8 = *($1 + [16])
	CALL __divti3($12, $8, $7, (int_64)10000000000, (int_64)0)
	*($11) = *($1)
	$6 = *($1 + [8])
	*($11 + [8]) = $6
	*(($11 + [24])) = $7
	*($11 + [16]) = $8
	$7 = *($12)
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$8 = (uint_64)$6 >> (uint_64)(int_64)8)
	$9 = [0]
	
.LOOP $label$11:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $8) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$10 }
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$12 }
	
.LOOP $label$13:
	$8 = (uint_64)$8 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$8) & (int_64)255) != (int_64)0) ){ goto $label$10 }
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$13 }
	
.LABEL $label$12
	$10 = [1]
	$9 = ($9 + [1])
	if ( ((int_32)$9 < (int_32)[7]) ){ goto $label$11 }
	goto $label$9 
	
.LABEL $label$10
	$10 = [0]
	
.LABEL $label$9
	CALL eosio_assert($10, [64])
	*(($11 + [40])) = $6
	*($11 + [32]) = $7
	
.LABEL $label$8
	$11 = ($11 + [48])
	$1 = ($1 + [48])
	if ( ((int_32)$1 != (int_32)$5) ){ goto $label$7 }
	
.LABEL $label$6
	if ( ((uint_32)$3 <= (uint_32)$4) ){ goto $label$14 }
	$9 = ($2 - $5)
	if ( ((int_32)$9 < (int_32)[1]) ){ goto $label$2 }
	$11 = ($0 + [4])
	CALL memcpy(*($11), $5, $9)
	*($11) = (*($11) + ((int_32)((uint_32)$9 / (uint_32)[48]) * (int_32)[48]))
	goto $label$2 
	
.LABEL $label$14
	*(($0 + [4])) = $11
	
.LABEL $label$2
	*([0] + [4]) = ($12 + [16])
	return (unreachable)
	
.LABEL $label$1
	CALL $88($0)
}

void .FUNC $60 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_64 $5
	int_64 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	$11 = (*([0] + [4]) - [48])
	$10 = $11
	*([0] + [4]) = $11
	CALL eosio_assert(((int_32)*($1 + [152]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [480])
	*($1 + [28]) = [1]
	*($1 + [32]) = *(*($3))
	$4 = *($1)
	$8 = *($3 + [4])
	$9 = ($1 + [48])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$1 }
	$6 = *(($8 + [24]))
	$7 = *($8 + [16])
	CALL __divti3(($10 + [16]), $7, $6, (int_64)10000000000, (int_64)0)
	*($9) = *($8)
	$5 = *($8 + [8])
	*(($1 + [56])) = $5
	*(($1 + [72])) = $6
	*(($1 + [64])) = $7
	$6 = *($10 + [16])
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$4:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$3 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$5 }
	
.LOOP $label$6:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$3 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$6 }
	
.LABEL $label$5
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$4 }
	goto $label$2 
	
.LABEL $label$3
	$9 = [0]
	
.LABEL $label$2
	CALL eosio_assert($9, [64])
	*(($1 + [88])) = $5
	*(($1 + [80])) = $6
	
.LABEL $label$1
	$8 = *($3 + [8])
	$9 = ($1 + [96])
	if ( ((int_32)$9 == (int_32)$8) ){ goto $label$7 }
	$6 = *(($8 + [24]))
	$7 = *($8 + [16])
	CALL __divti3($10, $7, $6, (int_64)10000000000, (int_64)0)
	*($9) = *($8)
	$5 = *($8 + [8])
	*(($1 + [104])) = $5
	*(($1 + [120])) = $6
	*(($1 + [112])) = $7
	$6 = *($10)
	CALL eosio_assert((uint_64)(((int_64)$6 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$7 = (uint_64)$5 >> (uint_64)(int_64)8)
	$8 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$9 = [1]
	$8 = ($8 + [1])
	if ( ((int_32)$8 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$9 = [0]
	
.LABEL $label$8
	CALL eosio_assert($9, [64])
	*(($1 + [136])) = $5
	*(($1 + [128])) = $6
	
.LABEL $label$7
	*($1 + [144]) = *(*($3 + [12]))
	CALL eosio_assert(((int_64)$4 == (int_64)*($1)), [544])
	$3 = $11
	$8 = ($3 + [-144])
	*([0] + [4]) = $8
	*($10 + [36]) = $8
	*($10 + [32]) = $8
	*($10 + [40]) = ($3 + [-3])
	CALL $18(($10 + [32]), $1)
	CALL db_update_i64(*(($1 + [156])), $2, $8, [141])
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$13 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$13
	*([0] + [4]) = ($10 + [48])
}

void .FUNC $63 (int_32 $0, int_32 $1, int_64 $2, int_32 $3)
{
	int_64 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_64 $8
	int_32 $9
	int_32 $10
	$9 = (*([0] + [4]) - [16])
	$10 = $9
	*([0] + [4]) = $9
	CALL eosio_assert(((int_32)*($1 + [40]) == (int_32)$0), [432])
	CALL eosio_assert(((int_64)*($0) == (int_64)CALL $fimport$6()), [480])
	$4 = *($1)
	$8 = $4
	$3 = *($3)
	$7 = ($1 + [28])
	if ( ((int_32)$7 == (int_32)$3) ){ goto $label$1 }
	CALL $61($7, *($3), *($3 + [4]))
	$8 = *($1)
	
.LABEL $label$1
	CALL eosio_assert(((int_64)$4 == (int_64)$8), [544])
	$5 = *($7)
	$3 = *(($1 + [32]))
	$6 = ($3 - $5)
	$8 = (CASTING uint_64)(uint_32 ((int_32)$6 / (int_32)[48]))
	$7 = [76]
	
.LOOP $label$2:
	$7 = ($7 + [1])
	$8 = (uint_64)$8 >> (uint_64)(int_64)7
	if ( ((int_64)$8) != (int_64)0) ){ goto $label$2 }
	if ( ((int_32)$5 == (int_32)$3) ){ goto $label$4 }
	$3 = ($6 + [-48])
	$7 = (($3 - ((uint_32)$3 % (uint_32)[48])) + $7)
	goto $label$3 
	
.LABEL $label$4
	$7 = ($7 + [-48])
	
.LABEL $label$3
	if ( ($7 <= [513]) ){ goto $label$6 }
	$9 = CALL malloc($7)
	goto $label$5 
	
.LABEL $label$6
	$9 = ($9 - (($7 + [15]) & [-16]))
	*([0] + [4]) = $9
	
.LABEL $label$5
	*($10 + [4]) = $9
	*($10) = $9
	*($10 + [8]) = ($9 + $7)
	CALL $22($10, $1)
	CALL db_update_i64(*($1 + [44]), $2, $9, $7)
	if ( ($7 <= [513]) ){ goto $label$7 }
	CALL free($9)
	
.LABEL $label$7
	if ( (uint_64)($4 <= *($0 + [16])) ){ goto $label$8 }
	*(($0 + [16])) = ( (int_64)-2 ? ((int_64)$4 + (int_64)1) : ((uint_64)$4 > (uint_64)(int_64)-3) )
	
.LABEL $label$8
	*([0] + [4]) = ($10 + [16])
}

void .FUNC _ZN8dividend5claimENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_64 $8
	int_32 $9
	int_64 $10
	int_32 $11
	int_32 $12
	int_32 $13
	int_32 $14
	int_32 $15
	int_32 $16
	int_32 $17
	int_32 $18
	int_64 $19
	int_64 $20
	int_64 $21
	int_64 $22
	int_64 $23
	int_32 $24
	int_64 $25
	int_32 $26
	$26 = (*([0] + [4]) - [304])
	*([0] + [4]) = $26
	if ( (*($1) & [1]) ){ goto $label$2 }
	$1 = ($1 + [1])
	goto $label$1 
	
.LABEL $label$2
	$1 = *($1 + [8])
	
.LABEL $label$1
	$9 = [-1]
	
.LOOP $label$3:
	$11 = ($1 + $9)
	$2 = ($9 + [1])
	$9 = $2
	if ( *(($11 + [1])) ){ goto $label$3 }
	$23 = (CASTING uint_64)(uint_32 $2)
	$20 = (int_64)0
	$22 = (int_64)59
	$21 = (int_64)0
	
.LOOP $label$4:
	$19 = (int_64)0
	if ( ((uint_64)$20 >= (uint_64)$23) ){ goto $label$5 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$7 }
	$9 = ($9 + [165])
	goto $label$6 
	
.LABEL $label$7
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$6
	$19 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$5
	if ( ((uint_64)$20 > (uint_64)(int_64)11) ){ goto $label$9 }
	$19 = ((int_64)((int_64)$19 & (int_64)31) << (int_64)((int_64)$22 & (int_64)4294967295))
	goto $label$8 
	
.LABEL $label$9
	$19 = ((int_64)$19 & (int_64)15)
	
.LABEL $label$8
	$1 = ($1 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$19 | (int_64)$21)
	$22 = ((int_64)$22 + (int_64)-5)
	if ( ((int_64)$22 != (int_64)-6) ){ goto $label$4 }
	CALL require_auth($21)
	*((($26 + [232]) + [32])) = [0]
	*($26 + [248]) = (int_64)-1
	*($26 + [256]) = (int_64)0
	$20 = *($0)
	*($26 + [232]) = $20
	*($26 + [240]) = $20
	$1 = CALL db_find_i64($20, $20, (int_64)3607749779137757184, $21)
	if ( ((int_32)$1 < (int_32)[0]) ){ goto $label$15 }
	$3 = CALL $13(($26 + [232]), $1)
	CALL eosio_assert(((int_32)*($3 + [40]) == (int_32)($26 + [232])), [176])
	*($26 + [224]) = [0]
	*($26 + [216]) = (int_64)0
	$1 = (*(($3 + [32])) - *($3 + [28]))
	$9 = ((int_32)$1 / (int_32)[48])
	if ( ($1 == 0) ){ goto $label$16 }
	if ( ((uint_32)$9 >= (uint_32)[89478486]) ){ goto $label$10 }
	$1 = CALL $81($1)
	*(($26 + [224])) = ($1 + ((int_32)$9 * (int_32)[48]))
	*($26 + [216]) = $1
	*($26 + [220]) = $1
	$11 = *(($3 + [28]))
	$9 = (*(($3 + [32])) - $11)
	if ( ((int_32)$9 <= (int_32)[0]) ){ goto $label$16 }
	CALL memcpy($1, $11, $9)
	$9 = (*($26 + [220]) + ((int_32)((uint_32)$9 / (uint_32)[48]) * (int_32)[48]))
	*($26 + [220]) = $9
	$1 = *($26 + [216])
	if ( ((int_32)$9 == (int_32)$1) ){ goto $label$16 }
	$6 = ($26 + [148])
	$4 = (($26 + [56]) | [1])
	$12 = (($26 + [160]) + [24])
	$13 = (($26 + [160]) + [16])
	$14 = (($26 + [56]) + [8])
	$5 = (($26 + [72]) + [32])
	$15 = ($5 + [4])
	$16 = ($26 + [140])
	$18 = (($26 + [72]) + [40])
	$2 = [0]
	
.LOOP $label$17:
	$11 = ((int_32)$2 * (int_32)[48])
	CALL memcpy(($26 + [160]), ($1 + $11), [48])
	$19 = *($12)
	$22 = *($13)
	CALL __divti3(($26 + [40]), $22, $19, (int_64)10000000000, (int_64)0)
	$25 = *($26 + [168])
	$7 = *($26 + [40])
	CALL eosio_assert((uint_64)(((int_64)$7 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$20 = (uint_64)$25 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$19:
	$9 = [0]
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$18 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$20 }
	
.LOOP $label$21:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$18 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$21 }
	
.LABEL $label$20
	$9 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$19 }
	
.LABEL $label$18
	CALL eosio_assert($9, [64])
	if ( ((int_64)$7 < (int_64)1) ){ goto $label$22 }
	$8 = *($0)
	$20 = (int_64)0
	$19 = (int_64)59
	$1 = [1104]
	$21 = (int_64)0
	
.LOOP $label$23:
	if ( ((uint_64)$20 > (uint_64)(int_64)5) ){ goto $label$28 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$27 }
	$9 = ($9 + [165])
	goto $label$26 
	
.LABEL $label$28
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$25 }
	goto $label$24 
	
.LABEL $label$27
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$26
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$25
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$24
	$1 = ($1 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$21 = ((int_64)$22 | (int_64)$21)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$23 }
	$20 = (int_64)0
	$19 = (int_64)59
	$1 = [1136]
	$10 = *($26 + [160])
	$23 = (int_64)0
	
.LOOP $label$29:
	if ( ((uint_64)$20 > (uint_64)(int_64)7) ){ goto $label$34 }
	$9 = *($1)
	if ( ((uint_32)(($9 + [-97]) & [255]) > (uint_32)[25]) ){ goto $label$33 }
	$9 = ($9 + [165])
	goto $label$32 
	
.LABEL $label$34
	$22 = (int_64)0
	if ( ((uint_64)$20 <= (uint_64)(int_64)11) ){ goto $label$31 }
	goto $label$30 
	
.LABEL $label$33
	$9 = ( ($9 + [208]) ? [0] : ((($9 + [-49]) & [255]) <= [5]) )
	
.LABEL $label$32
	$22 = (int_64)((int_64)(CASTING uint_64)(uint_32 $9) << (int_64)56) >> (int_64)56)
	
.LABEL $label$31
	$22 = ((int_64)((int_64)$22 & (int_64)31) << (int_64)((int_64)$19 & (int_64)4294967295))
	
.LABEL $label$30
	$1 = ($1 + [1])
	$20 = ((int_64)$20 + (int_64)1)
	$23 = ((int_64)$22 | (int_64)$23)
	$19 = ((int_64)$19 + (int_64)-5)
	if ( ((int_64)$19 != (int_64)-6) ){ goto $label$29 }
	*($14) = [0]
	*($26 + [56]) = (int_64)0
	$1 = CALL strlen([1472])
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)[11]) ){ goto $label$37 }
	*($26 + [56]) = ($1 << [1])
	$9 = $4
	if ( $1 ){ goto $label$36 }
	goto $label$35 
	
.LABEL $label$37
	$17 = (($1 + [16]) & [-16])
	$9 = CALL $81($17)
	*($14) = $9
	*($26 + [56]) = ($17 | [1])
	*($26 + [60]) = $1
	
.LABEL $label$36
	CALL memcpy($9, [1472], $1)
	
.LABEL $label$35
	*(($9 + $1)) = [0]
	*((($26 + [72]) + [8])) = *($3)
	*((($26 + [72]) + [24])) = $25
	*((($26 + [72]) + [16])) = $7
	*($15) = *($26 + [60 align=4])
	*($26 + [72]) = *($0)
	*($5) = *($26 + [56])
	*($26 + [56]) = [0]
	*($26 + [60]) = [0]
	*($14) = [0]
	*((($26 + [120]) + [8])) = $23
	*($26 + [120]) = $10
	*(($9 = (($26 + [120]) + [16]))) = [0]
	*($16) = [0]
	*(($24 = (($26 + [120]) + [24]))) = [0]
	$1 = CALL $81([16])
	*($9) = $1
	*($1) = $8
	*($1 + [8]) = $21
	*($6) = [0]
	*(($17 = (($26 + [120]) + [32]))) = [0]
	$1 = ($1 + [16])
	*($24) = $1
	*($16) = $1
	*((($26 + [120]) + [36])) = [0]
	$1 = *($5)
	$24 = ( *((($26 + [72]) + [36])) ? uint_32($1 >> [1]) : ($1 & [1]) )
	$1 = ($24 + [32])
	$20 = (CASTING uint_64)(uint_32 $24)
	
.LOOP $label$38:
	$1 = ($1 + [1])
	$20 = (uint_64)$20 >> (uint_64)(int_64)7
	if ( ((int_64)$20) != (int_64)0) ){ goto $label$38 }
	if ( ($1 == 0) ){ goto $label$40 }
	CALL $46($6, $1)
	$24 = *($17)
	$1 = *($6)
	goto $label$39 
	
.LABEL $label$40
	$24 = [0]
	$1 = [0]
	
.LABEL $label$39
	*((($26 + [288]) + [8])) = $24
	*($26 + [292]) = $1
	*($26 + [288]) = $1
	*($26 + [272]) = ($26 + [288])
	*($26 + [280]) = ($26 + [72])
	CALL $47(($26 + [280]), ($26 + [272]))
	CALL $48(($26 + [288]), ($26 + [120]))
	$1 = *($26 + [288])
	CALL send_inline($1, (*($26 + [292]) - $1))
	$1 = *($26 + [288])
	if ( ($1 == 0) ){ goto $label$41 }
	*($26 + [292]) = $1
	CALL $82($1)
	
.LABEL $label$41
	$1 = *($6)
	if ( ($1 == 0) ){ goto $label$42 }
	*($17) = $1
	CALL $82($1)
	
.LABEL $label$42
	$1 = *($9)
	if ( ($1 == 0) ){ goto $label$43 }
	*($16) = $1
	CALL $82($1)
	
.LABEL $label$43
	if ( ((*($5) & [1]) == 0) ){ goto $label$44 }
	CALL $82(*($18))
	
.LABEL $label$44
	if ( ((*($26 + [56]) & [1]) == 0) ){ goto $label$45 }
	CALL $82(*($14))
	
.LABEL $label$45
	$19 = *($12)
	$22 = *($13)
	$25 = *($26 + [168])
	
.LABEL $label$22
	CALL __multi3(($26 + [24]), $7, (int_64)$7 >> (int_64)63), (int_64)-10000000000, (int_64)-1)
	$22 = ((int_64)((int_64)$19 + (int_64)*((($26 + [24]) + [8]))) + (int_64)( (int_64)1 ? (CASTING uint_64)(uint_32 (uint_64)($20 <= $22)) : (uint_64)($20 <= $21) ))
	$21 = *($26 + [24])
	$20 = ((int_64)$22 + (int_64)$21)
	CALL __divti3(($26 + [8]), $20, $22, (int_64)10000000000, (int_64)0)
	*((($26 + [160]) + [32])) = (int_64)0
	*(($9 = (*($26 + [216]) + $11))) = *($26 + [160])
	*($9 + [8]) = $25
	*($13) = $20
	*($12) = $22
	*(($9 + [24])) = $22
	*($9 + [16]) = $20
	$22 = *($26 + [8])
	CALL eosio_assert((uint_64)(((int_64)$22 + (int_64)4611686018427387903) <= (int_64)9223372036854775807), [96])
	$20 = (uint_64)$25 >> (uint_64)(int_64)8)
	$1 = [0]
	
.LOOP $label$48:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $20) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$47 }
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$49 }
	
.LOOP $label$50:
	$20 = (uint_64)$20 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$20) & (int_64)255) != (int_64)0) ){ goto $label$47 }
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$50 }
	
.LABEL $label$49
	$11 = [1]
	$1 = ($1 + [1])
	if ( ((int_32)$1 < (int_32)[7]) ){ goto $label$48 }
	goto $label$46 
	
.LABEL $label$47
	$11 = [0]
	
.LABEL $label$46
	CALL eosio_assert($11, [64])
	*($9 + [32]) = $22
	*(($9 + [40])) = $25
	$1 = *($26 + [216])
	$2 = ($2 + [1])
	if ( ($2 <= ((int_32)(*($26 + [220]) - $1) / (int_32)[48])) ){ goto $label$17 }
	
.LABEL $label$16
	$20 = *($0)
	*($26 + [160]) = ($26 + [216])
	CALL $63(($26 + [232]), $3, $20, ($26 + [160]))
	$1 = *($26 + [216])
	if ( ($1 == 0) ){ goto $label$51 }
	*($26 + [220]) = $1
	CALL $82($1)
	
.LABEL $label$51
	$2 = *($26 + [256])
	if ( ($2 == 0) ){ goto $label$12 }
	$12 = ($26 + [260])
	$1 = *($12)
	if ( ((int_32)$1 == (int_32)$2) ){ goto $label$14 }
	
.LOOP $label$52:
	$1 = ($1 + [-24])
	$9 = *($1)
	*($1) = [0]
	if ( ($9 == 0) ){ goto $label$53 }
	$11 = *($9 + [28])
	if ( ($11 == 0) ){ goto $label$54 }
	*(($9 + [32])) = $11
	CALL $82($11)
	
.LABEL $label$54
	CALL $82($9)
	
.LABEL $label$53
	if ( ((int_32)$2 != (int_32)$1) ){ goto $label$52 }
	$1 = *(($26 + [256]))
	goto $label$13 
	
.LABEL $label$15
	CALL eosio_assert([0], [784])
	goto $label$12 
	
.LABEL $label$14
	$1 = $2
	
.LABEL $label$13
	*($12) = $2
	CALL $82($1)
	
.LABEL $label$12
	*([0] + [4]) = ($26 + [304])
	return (unreachable)
	
.LABEL $label$11
	CALL $83(($26 + [56]))
	
.LABEL $label$10
	CALL $88(($26 + [216]))
	(unreachable)
}

int_32 .FUNC $89 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	*($0) = (int_64)0
	*(($3 = ($0 + [8]))) = [0]
	if ( (*($1) & [1]) ){ goto $label$1 }
	*($0) = *($1)
	*($3) = *(($1 + [8]))
	return $0
	
.LABEL $label$1
	$3 = *($1 + [4])
	if ( ((uint_32)$3 >= (uint_32)[-16]) ){ goto $label$2 }
	$2 = *($1 + [8])
	if ( ((uint_32)$3 >= (uint_32)[11]) ){ goto $label$5 }
	*($0) = ($3 << [1])
	$1 = ($0 + [1])
	if ( $3 ){ goto $label$4 }
	goto $label$3 
	
.LABEL $label$5
	$4 = (($3 + [16]) & [-16])
	$1 = CALL $81($4)
	*($0) = ($4 | [1])
	*($0 + [8]) = $1
	*($0 + [4]) = $3
	
.LABEL $label$4
	CALL memcpy($1, $2, $3)
	
.LABEL $label$3
	*(($1 + $3)) = [0]
	return $0
	
.LABEL $label$2
	CALL abort()
	return (unreachable)
}

void .FUNC $88 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

int_32 .FUNC $87 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4)
{
	int_32 $5
	int_32 $6
	$6 = *($0)
	$5 = ($6 & [1])
	if ( $5 ){ goto $label$2 }
	$6 = uint_32($6 >> [1])
	goto $label$1 
	
.LABEL $label$2
	$6 = *($0 + [4])
	
.LABEL $label$1
	if ( ((int_32)$4 == (int_32)[-1]) ){ goto $label$3 }
	if ( ($6 <= $1) ){ goto $label$3 }
	$6 = ($6 - $1)
	$6 = ( $6 ? $2 : ($6 <= $2) )
	if ( $5 ){ goto $label$5 }
	$0 = ($0 + [1])
	goto $label$4 
	
.LABEL $label$5
	$0 = *($0 + [8])
	
.LABEL $label$4
	$5 = ((uint_32)$6 > (uint_32)$4)
	$2 = ( $4 ? $6 : $5 )
	if ( ($2 == 0) ){ goto $label$6 }
	$1 = CALL memcmp(($0 + $1), $3, $2)
	if ( ($1 == 0) ){ goto $label$6 }
	return $1
	
.LABEL $label$6
	return ( [-1] ? $5 : ($6 <= $4) )
	
.LABEL $label$3
	CALL abort()
	return (unreachable)
}

void .FUNC $86 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	if ( ((uint_32)$1 >= (uint_32)[-16]) ){ goto $label$1 }
	$2 = [10]
	$5 = *($0)
	if ( (($5 & [1]) == 0) ){ goto $label$2 }
	$5 = *($0)
	$2 = (($5 & [-2]) + [-1])
	
.LABEL $label$2
	if ( ($5 & [1]) ){ goto $label$4 }
	$3 = uint_32(($5 & [254]) >> [1])
	goto $label$3 
	
.LABEL $label$4
	$3 = *($0 + [4])
	
.LABEL $label$3
	$4 = [10]
	$1 = ( $3 ? $1 : ((uint_32)$3 > (uint_32)$1) )
	if ( ($1 <= [11]) ){ goto $label$5 }
	$4 = ((($1 + [16]) & [-16]) + [-1])
	
.LABEL $label$5
	if ( ((int_32)$4 == (int_32)$2) ){ goto $label$6 }
	if ( ((int_32)$4 != (int_32)[10]) ){ goto $label$8 }
	$6 = [1]
	$1 = ($0 + [1])
	$2 = *($0 + [8])
	$7 = [0]
	goto $label$7 
	
.LABEL $label$8
	$1 = CALL $81(($4 + [1]))
	if ( ((uint_32)$4 > (uint_32)$2) ){ goto $label$9 }
	if ( ($1 == 0) ){ goto $label$6 }
	
.LABEL $label$9
	$5 = *($0)
	if ( ($5 & [1]) ){ goto $label$10 }
	$7 = [1]
	$2 = ($0 + [1])
	$6 = [0]
	goto $label$7 
	
.LABEL $label$10
	$2 = *($0 + [8])
	$6 = [1]
	$7 = [1]
	
.LABEL $label$7
	if ( ($5 & [1]) ){ goto $label$12 }
	$5 = uint_32(($5 & [254]) >> [1])
	goto $label$11 
	
.LABEL $label$12
	$5 = *($0 + [4])
	
.LABEL $label$11
	$5 = ($5 + [1])
	if ( ($5 == 0) ){ goto $label$13 }
	CALL memcpy($1, $2, $5)
	
.LABEL $label$13
	if ( ($6 == 0) ){ goto $label$14 }
	CALL $82($2)
	
.LABEL $label$14
	if ( ($7 == 0) ){ goto $label$15 }
	*($0 + [4]) = $3
	*($0 + [8]) = $1
	*($0) = (($4 + [1]) | [1])
	return 
	
.LABEL $label$15
	*($0) = ($3 << [1])
	
.LABEL $label$6
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

void .FUNC $85 (int_32 $0, int_32 $1, int_32 $2, int_32 $3, int_32 $4, int_32 $5, int_32 $6, int_32 $7)
{
	int_32 $8
	int_32 $9
	int_32 $10
	if ( (([-18] - $1) <= $2) ){ goto $label$1 }
	if ( (*($0) & [1]) ){ goto $label$3 }
	$9 = ($0 + [1])
	goto $label$2 
	
.LABEL $label$3
	$9 = *($0 + [8])
	
.LABEL $label$2
	$10 = [-17]
	if ( ((uint_32)$1 > (uint_32)[2147483622]) ){ goto $label$4 }
	$10 = [11]
	$2 = ($2 + $1)
	$8 = ($1 << [1])
	$2 = ( $8 ? $2 : ($2 <= $8) )
	if ( ($2 <= [11]) ){ goto $label$4 }
	$10 = (($2 + [16]) & [-16])
	
.LABEL $label$4
	$2 = CALL $81($10)
	if ( ($4 == 0) ){ goto $label$5 }
	CALL memcpy($2, $9, $4)
	
.LABEL $label$5
	if ( ($6 == 0) ){ goto $label$6 }
	CALL memcpy(($2 + $4), $7, $6)
	
.LABEL $label$6
	$3 = ($3 - $5)
	$7 = ($3 - $4)
	if ( ($7 == 0) ){ goto $label$7 }
	CALL memcpy((($2 + $4) + $6), (($9 + $4) + $5), $7)
	
.LABEL $label$7
	if ( ((int_32)$1 == (int_32)[10]) ){ goto $label$8 }
	CALL $82($9)
	
.LABEL $label$8
	*($0 + [8]) = $2
	*($0) = ($10 | [1])
	$4 = ($3 + $6)
	*($0 + [4]) = $4
	*(($2 + $4)) = [0]
	return (unreachable)
	
.LABEL $label$1
	CALL abort()
}

int_32 .FUNC $84 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	if ( ((int_32)$0 == (int_32)$1) ){ goto $label$4 }
	$4 = ($2 & [1])
	$2 = *($1)
	$2 = ( *($1 + [4]) ? uint_32($2 >> [1]) : $4 )
	$5 = ($1 + [1])
	$6 = *($1 + [8])
	$1 = [10]
	$3 = *($0)
	if ( (($3 & [1]) == 0) ){ goto $label$5 }
	$3 = *($0)
	$1 = (($3 & [-2]) + [-1])
	
.LABEL $label$5
	$5 = ( $6 ? $5 : $4 )
	$4 = ($3 & [1])
	if ( ((uint_32)$2 <= (uint_32)$1) ){ goto $label$8 }
	if ( $4 ){ goto $label$7 }
	$3 = uint_32(($3 & [254]) >> [1])
	goto $label$6 
	
.LABEL $label$8
	if ( $4 ){ goto $label$3 }
	$1 = ($0 + [1])
	if ( $2 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$7
	$3 = *($0 + [4])
	
.LABEL $label$6
	CALL $85($0, $1, ($2 - $1), $3, [0], $3, $2, $5)
	
.LABEL $label$4
	return $0
	
.LABEL $label$3
	$1 = *($0 + [8])
	if ( ($2 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	CALL memmove($1, $5, $2)
	
.LABEL $label$1
	*(($1 + $2)) = [0]
	if ( (*($0) & [1]) ){ goto $label$9 }
	*($0) = ($2 << [1])
	return $0
	
.LABEL $label$9
	*($0 + [4]) = $2
	return $0
}

void .FUNC $83 (int_32 $0)
{
	CALL abort()
	(unreachable)
}

void .FUNC $82 (int_32 $0)
{
	if ( ($0 == 0) ){ goto $label$1 }
	CALL free($0)
	
.LABEL $label$1
}

int_32 .FUNC $81 (int_32 $0)
{
	int_32 $1
	int_32 $2
	$1 = ( $0 ? [1] : $0 )
	$0 = CALL malloc($1)
	if ( $0 ){ goto $label$1 }
	
.LOOP $label$2:
	$0 = [0]
	$2 = *([0] + [10044])
	if ( ($2 == 0) ){ goto $label$1 }
	CALL void $2()
	$0 = CALL malloc($1)
	if ( ($0 == 0) ){ goto $label$2 }
	
.LABEL $label$1
	return $0
}

void .FUNC free (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	if ( ($0 == 0) ){ goto $label$2 }
	$2 = *([0] + [9936])
	if ( ((int_32)$2 < (int_32)[1]) ){ goto $label$2 }
	$3 = [9744]
	$1 = (((int_32)$2 * (int_32)[12]) + [9744])
	
.LOOP $label$3:
	$2 = *(($3 + [4]))
	if ( ($2 == 0) ){ goto $label$2 }
	if ( ((uint_32)($2 + [4]) > (uint_32)$0) ){ goto $label$4 }
	if ( ((uint_32)($2 + *($3)) > (uint_32)$0) ){ goto $label$1 }
	
.LABEL $label$4
	$3 = ($3 + [12])
	if ( ($3 <= $1) ){ goto $label$3 }
	
.LABEL $label$2
	return 
	
.LABEL $label$1
	*(($3 = ($0 + [-4]))) = (*($3) & [2147483647])
}

int_32 .FUNC $72 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$7 = (*([0] + [4]) - [32])
	*([0] + [4]) = $7
	*($7 + [24]) = [0]
	*($7 + [16]) = (int_64)0
	CALL $73($0, ($7 + [16]))
	$4 = *($7 + [16])
	$5 = *($7 + [20])
	if ( ((int_32)$5 != (int_32)$4) ){ goto $label$9 }
	if ( (*($1) & [1]) ){ goto $label$8 }
	*($1) = [0]
	$4 = ($1 + [8])
	goto $label$7 
	
.LABEL $label$9
	*(($7 + [8])) = [0]
	*($7) = (int_64)0
	$2 = ($5 - $4)
	if ( ((uint_32)$2 >= (uint_32)[-16]) ){ goto $label$1 }
	if ( ((uint_32)$2 >= (uint_32)[11]) ){ goto $label$6 }
	*($7) = ($2 << [1])
	$6 = ($7 | [1])
	if ( $2 ){ goto $label$5 }
	goto $label$4 
	
.LABEL $label$8
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	$4 = ($1 + [8])
	
.LABEL $label$7
	CALL $86($1, [0])
	*($4) = [0]
	*($1) = (int_64)0
	$4 = *($7 + [16])
	if ( $4 ){ goto $label$3 }
	goto $label$2 
	
.LABEL $label$6
	$5 = (($2 + [16]) & [-16])
	$6 = CALL $81($5)
	*($7) = ($5 | [1])
	*($7 + [8]) = $6
	*($7 + [4]) = $2
	
.LABEL $label$5
	$3 = $2
	$5 = $6
	
.LOOP $label$10:
	*($5) = *($4)
	$5 = ($5 + [1])
	$4 = ($4 + [1])
	$3 = ($3 + [-1])
	if ( $3 ){ goto $label$10 }
	$6 = ($6 + $2)
	
.LABEL $label$4
	*($6) = [0]
	if ( (*($1) & [1]) ){ goto $label$12 }
	*($1) = [0]
	goto $label$11 
	
.LABEL $label$12
	*(*($1 + [8])) = [0]
	*($1 + [4]) = [0]
	
.LABEL $label$11
	CALL $86($1, [0])
	*(($1 + [8])) = *(($7 + [8]))
	*($1) = *($7)
	$4 = *($7 + [16])
	if ( ($4 == 0) ){ goto $label$2 }
	
.LABEL $label$3
	*($7 + [20]) = $4
	CALL $82($4)
	
.LABEL $label$2
	*([0] + [4]) = ($7 + [32])
	return $0
	
.LABEL $label$1
	CALL $83($7)
	return (unreachable)
}

int_32 .FUNC $73 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_64 $6
	int_32 $7
	$5 = *($0 + [4])
	$7 = [0]
	$6 = (int_64)0
	$2 = ($0 + [8])
	$3 = ($0 + [4])
	
.LOOP $label$1:
	CALL eosio_assert(($5 <= *($2)), [672])
	$5 = *($3)
	$4 = *($5)
	$5 = ($5 + [1])
	*($3) = $5
	$7 = ($7 & [255])
	$6 = ((int_64)(CASTING uint_64)(uint_32 (($4 & [127]) << $7)) | (int_64)$6)
	$7 = ($7 + [7])
	if ( uint_32($4 >> [7]) ){ goto $label$1 }
	$4 = *($1)
	$7 = *($1 + [4])
	$2 = ($7 - $4)
	$3 = (CASTING uint_32)(uint_64 $6)
	if ( ((uint_32)$3 <= (uint_32)$2) ){ goto $label$3 }
	CALL $46($1, ($3 - $2))
	$5 = *(($0 + [4]))
	$7 = *(($1 + [4]))
	$4 = *($1)
	goto $label$2 
	
.LABEL $label$3
	if ( ((uint_32)$3 >= (uint_32)$2) ){ goto $label$2 }
	$7 = ($4 + $3)
	*(($1 + [4])) = $7
	
.LABEL $label$2
	$5 = ($7 - $4)
	CALL eosio_assert(((uint_32)(*(($0 + [8])) - $5) >= (uint_32)$5), [656])
	$7 = ($0 + [4])
	CALL memcpy($4, *($7), $5)
	*($7) = (*($7) + $5)
	return $0
}

int_32 .FUNC $70 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [656])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

int_32 .FUNC $71 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	$6 = (*([0] + [4]) - [16])
	$5 = $6
	*([0] + [4]) = $6
	$2 = *($1 + [4])
	$4 = *($1)
	$3 = [0]
	$1 = CALL action_data_size()
	if ( ($1 == 0) ){ goto $label$1 }
	if ( ($1 <= [513]) ){ goto $label$3 }
	$3 = CALL malloc($1)
	goto $label$2 
	
.LABEL $label$3
	$3 = ($6 - (($1 + [15]) & [-16]))
	*([0] + [4]) = $3
	
.LABEL $label$2
	CALL read_action_data($3, $1)
	
.LABEL $label$1
	*($5 + [8]) = [0]
	CALL eosio_assert(((uint_32)$1 > (uint_32)[3]), [656])
	CALL memcpy(($5 + [8]), $3, [4])
	$6 = *($5 + [8])
	if ( ($1 <= [513]) ){ goto $label$4 }
	CALL free($3)
	
.LABEL $label$4
	$1 = ($0 + int_32($2 >> [1]))
	if ( (($2 & [1]) == 0) ){ goto $label$5 }
	$4 = *((*($1) + $4))
	
.LABEL $label$5
	CALL void $1((int_32 $6), (int_32 $4))
	*([0] + [4]) = ($5 + [16])
	return [1]
}

void .FUNC apply (int_64 $0, int_64 $1, int_64 $2)
{
	int_32 $3
	$3 = (*([0] + [4]) - [16])
	*([0] + [4]) = $3
	*($3 + [8]) = $0
	CALL _ZN8dividend5applyEyy(($3 + [8]), $1, $2)
	CALL eosio_exit([0])
	(unreachable)
}

int_32 .FUNC malloc (int_32 $0)
{
	return CALL $78([1552], $0)
}

void .FUNC $74 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	$3 = (*([0] + [4]) - [64])
	*([0] + [4]) = $3
	CALL $89(($3 + [16]), $1)
	*(($2 = ($3 + [8]))) = *(($1 + [24]))
	*($3) = *($1 + [16])
	*((($3 + [32]) + [8])) = *($2)
	*($3 + [32]) = *($3)
	$1 = *($0 + [4])
	$2 = *($1 + [4])
	$0 = (*(*($0)) + int_32($2 >> [1]))
	$1 = *($1)
	if ( (($2 & [1]) == 0) ){ goto $label$1 }
	$1 = *((*($0) + $1))
	
.LABEL $label$1
	CALL $89(($3 + [48]), ($3 + [16]))
	CALL void $0((int_32 ($3 + [48])), (int_32 ($3 + [32])), (int_32 $1))
	if ( ((*($3 + [48]) & [1]) == 0) ){ goto $label$2 }
	CALL $82(*($3 + [56]))
	
.LABEL $label$2
	if ( ((*($3 + [16]) & [1]) == 0) ){ goto $label$3 }
	CALL $82(*($3 + [24]))
	
.LABEL $label$3
	*([0] + [4]) = ($3 + [64])
}

int_32 .FUNC $39 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - *($0 + [4])) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), $1, [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [8]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [16]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [24]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [32]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [40]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((int_32)(*($0 + [8]) - $2) > (int_32)[7]), [608])
	CALL memcpy(*($0 + [4]), ($1 + [48]), [8])
	*($0 + [4]) = (*($0 + [4]) + [8])
	return $0
}

int_32 .FUNC $36 (int_32 $0, int_32 $1)
{
	int_32 $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - *($0 + [4])) > (uint_32)[7]), [656])
	CALL memcpy($1, *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [8]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [16]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[7]), [656])
	CALL memcpy(($1 + [24]), *($0 + [4]), [8])
	$2 = (*($0 + [4]) + [8])
	*($0 + [4]) = $2
	CALL eosio_assert(((uint_32)(*($0 + [8]) - $2) > (uint_32)[3]), [656])
	CALL memcpy(($1 + [32]), *($0 + [4]), [4])
	*($0 + [4]) = (*($0 + [4]) + [4])
	return $0
}

void .FUNC _ZN8dividend12deposit_poolEyRKN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_64 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	int_32 $10
	$10 = (*([0] + [4]) - [208])
	*([0] + [4]) = $10
	*($10 + [72]) = $1
	*(($10 + [64])) = [0]
	*($10 + [48]) = (int_64)-1
	*($10 + [56]) = (int_64)0
	$3 = *($0)
	*($10 + [32]) = $3
	*($10 + [40]) = $3
	*($10 + [68]) = [0]
	*($10 + [24]) = $1
	*($10 + [16]) = *($2 + [8])
	*($10 + [8]) = ($10 + [32])
	CALL $38(($10 + [80]), ($10 + [8]), ($10 + [16]))
	$9 = *($10 + [84])
	if ( ($9 == 0) ){ goto $label$4 }
	if ( ((int_64)(((int_64)((int_64)*($10 + [16]) ^ (int_64)*(($9 + [16]))) | (int_64)((int_64)*($10 + [24]) ^ (int_64)*(($9 + [24])))) == 0) == 0) ){ goto $label$4 }
	if ( ($9 == 0) ){ goto $label$4 }
	$3 = *($0)
	CALL eosio_assert(((int_32)*($9 + [56]) == (int_32)($10 + [32])), [432])
	CALL eosio_assert(((int_64)*($10 + [32]) == (int_64)CALL $fimport$6()), [480])
	$8 = ($9 + [24])
	*($10 + [168]) = *($8)
	$4 = ($9 + [16])
	$5 = *($4)
	*($10 + [160]) = $5
	$1 = *($9)
	$7 = *($2)
	$6 = ($2 + [8])
	CALL eosio_assert(((int_64)$5 == (int_64)*($6)), [304])
	$5 = ((int_64)$7 + (int_64)*($0))
	*(($0 = ($9 + [8]))) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [352])
	CALL eosio_assert(((int_64)*($0) < (int_64)4611686018427387904), [384])
	$5 = *($2)
	CALL eosio_assert(((int_64)*($6) == (int_64)*(($9 + [40]))), [304])
	$5 = ((int_64)$5 + (int_64)*($9 + [32]))
	*($9 + [32]) = $5
	CALL eosio_assert(((int_64)$5 > (int_64)-4611686018427387904), [352])
	CALL eosio_assert(((int_64)*($9 + [32]) < (int_64)4611686018427387904), [384])
	CALL eosio_assert(((int_64)$1 == (int_64)*($9)), [544])
	*($10 + [152]) = (($10 + [80]) + [56])
	*($10 + [148]) = ($10 + [80])
	*($10 + [144]) = ($10 + [80])
	CALL $39(($10 + [144]), $9)
	CALL db_update_i64(*($9 + [60]), $3, ($10 + [80]), [56])
	$2 = (($10 + [32]) + [16])
	if ( (uint_64)($1 <= *($2)) ){ goto $label$5 }
	*($2) = ( (int_64)-2 ? ((int_64)$1 + (int_64)1) : ((uint_64)$1 > (uint_64)(int_64)-3) )
	
.LABEL $label$5
	*($10 + [200]) = *($8)
	*($10 + [192]) = *($4)
	if ( (CALL memcmp(($10 + [160]), ($10 + [192]), [16]) == 0) ){ goto $label$3 }
	$2 = ($9 + [64])
	$9 = *($2)
	if ( ((int_32)$9 > (int_32)[-1]) ){ goto $label$6 }
	$9 = CALL db_idx128_find_primary(*($10 + [32]), *(($10 + [40])), (int_64)-5969209044777304064, ($10 + [176]), $1)
	*($2) = $9
	
.LABEL $label$6
	CALL db_idx128_update($9, $3, ($10 + [192]))
	$0 = *($10 + [56])
	if ( $0 ){ goto $label$2 }
	goto $label$1 
	
.LABEL $label$4
	$1 = *($0)
	*($10 + [196]) = $2
	*($10 + [192]) = ($10 + [32])
	*($10 + [200]) = ($10 + [72])
	*($10 + [176]) = $1
	CALL eosio_assert(((int_64)*($10 + [32]) == (int_64)CALL $fimport$6()), [240])
	*($10 + [84]) = ($10 + [192])
	*($10 + [80]) = ($10 + [32])
	*($10 + [88]) = ($10 + [176])
	$9 = CALL $81([72])
	CALL $40($9)
	*($9 + [56]) = ($10 + [32])
	CALL $41(($10 + [80]), $9)
	*($10 + [160]) = $9
	$1 = *($9)
	*($10 + [80]) = $1
	$0 = *($9 + [60])
	*($10 + [144]) = $0
	$8 = ($10 + [60])
	$2 = *($8)
	if ( ((uint_32)$2 >= (uint_32)*(($10 + [64]))) ){ goto $label$8 }
	*($2 + [8]) = $1
	*($2 + [16]) = $0
	*($10 + [160]) = [0]
	*($2) = $9
	*($8) = ($2 + [24])
	goto $label$7 
	
.LABEL $label$8
	CALL $42(($10 + [56]), ($10 + [160]), ($10 + [80]), ($10 + [144]))
	
.LABEL $label$7
	$9 = *($10 + [160])
	*($10 + [160]) = [0]
	if ( ($9 == 0) ){ goto $label$3 }
	CALL $82($9)
	
.LABEL $label$3
	$0 = *($10 + [56])
	if ( ($0 == 0) ){ goto $label$1 }
	
.LABEL $label$2
	$8 = ($10 + [60])
	$9 = *($8)
	if ( ((int_32)$9 == (int_32)$0) ){ goto $label$10 }
	
.LOOP $label$11:
	$9 = ($9 + [-24])
	$2 = *($9)
	*($9) = [0]
	if ( ($2 == 0) ){ goto $label$12 }
	CALL $82($2)
	
.LABEL $label$12
	if ( ((int_32)$0 != (int_32)$9) ){ goto $label$11 }
	$9 = *(($10 + [56]))
	goto $label$9 
	
.LABEL $label$10
	$9 = $0
	
.LABEL $label$9
	*($8) = $0
	CALL $82($9)
	
.LABEL $label$1
	*([0] + [4]) = ($10 + [208])
}

int_32 .FUNC $78 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	int_32 $9
	int_32 $10
	int_32 $11
	int_32 $12
	int_32 $13
	if ( ($1 == 0) ){ goto $label$1 }
	$13 = *($0 + [8384])
	if ( $13 ){ goto $label$2 }
	$13 = [16]
	*(($0 + [8384])) = [16]
	
.LABEL $label$2
	$2 = (($1 + [4]) & [7])
	$2 = ( (($1 + [8]) - $2) ? $1 : $2 )
	$10 = *($0 + [8388])
	if ( ((uint_32)$10 >= (uint_32)$13) ){ goto $label$5 }
	$1 = (($0 + ((int_32)$10 * (int_32)[12])) + [8192])
	if ( $10 ){ goto $label$6 }
	$13 = ($0 + [8196])
	if ( *($13) ){ goto $label$6 }
	*($1) = [8192]
	*($13) = $0
	
.LABEL $label$6
	$10 = ($2 + [4])
	
.LOOP $label$7:
	$13 = *($1 + [8])
	if ( ((uint_32)($13 + $10) > (uint_32)*($1)) ){ goto $label$8 }
	*(($13 = (*($1 + [4]) + $13))) = ((*($13) & [-2147483648]) | $2)
	*(($1 = ($1 + [8]))) = (*($1) + $10)
	*($13) = (*($13) | [-2147483648])
	$1 = ($13 + [4])
	if ( $1 ){ goto $label$4 }
	
.LABEL $label$8
	$1 = CALL $79($0)
	if ( $1 ){ goto $label$7 }
	
.LABEL $label$5
	$4 = ([2147483644] - $2)
	$11 = ($0 + [8392])
	$12 = ($0 + [8384])
	$3 = *($0 + [8392])
	$13 = $3
	
.LOOP $label$9:
	$5 = ($1 + [8192])
	$1 = ($0 + ((int_32)$13 * (int_32)[12]))
	CALL eosio_assert(((int_32)*(($1 + [8200])) == (int_32)*($5)), [9952])
	$6 = *(($1 + [8196]))
	$13 = ($6 + [4])
	
.LOOP $label$10:
	$7 = ($6 + *($5))
	$8 = ($13 + [-4])
	$9 = *($8)
	$1 = ($9 & [2147483647])
	if ( ((int_32)$9 < (int_32)[0]) ){ goto $label$11 }
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$12 }
	
.LOOP $label$13:
	$10 = ($13 + $1)
	if ( ((uint_32)$10 >= (uint_32)$7) ){ goto $label$12 }
	$10 = *($10)
	if ( ((int_32)$10 < (int_32)[0]) ){ goto $label$12 }
	$1 = (($1 + ($10 & [2147483647])) + [4])
	if ( ($1 <= $2) ){ goto $label$13 }
	
.LABEL $label$12
	*($8) = (( $1 ? $2 : ($1 <= $2) ) | ($9 & [-2147483648]))
	if ( ((uint_32)$1 <= (uint_32)$2) ){ goto $label$14 }
	*(($13 + $2)) = (($4 + $1) & [2147483647])
	
.LABEL $label$14
	if ( ((uint_32)$1 >= (uint_32)$2) ){ goto $label$3 }
	
.LABEL $label$11
	$13 = (($13 + $1) + [4])
	if ( ($13 <= $7) ){ goto $label$10 }
	$1 = [0]
	$13 = (*($11) + [1])
	$13 = ( [0] ? $13 : ((int_32)$13 == (int_32)*($12)) )
	*($11) = $13
	if ( ((int_32)$13 != (int_32)$3) ){ goto $label$9 }
	
.LABEL $label$4
	return $1
	
.LABEL $label$3
	*($8) = (*($8) | [-2147483648])
	return $13
	
.LABEL $label$1
	return [0]
}

int_32 .FUNC $79 (int_32 $0)
{
	int_32 $1
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$1 = *($0 + [8388])
	if ( (*([0] + [10038]) == 0) ){ goto $label$2 }
	$7 = *([0] + [10040])
	goto $label$1 
	
.LABEL $label$2
	$7 = (current_memory)
	*([0] + [10038]) = [1]
	$7 = ($7 << [16])
	*([0] + [10040]) = $7
	
.LABEL $label$1
	$3 = $7
	$8 = (current_memory)
	$2 = uint_32(($7 + [65535]) >> [16])
	if ( ((uint_32)$2 <= (uint_32)$8) ){ goto $label$6 }
	($2 - $8)
	$8 = [0]
	if ( ((int_32)$2 != (int_32)(current_memory)) ){ goto $label$5 }
	$3 = *([0] + [10040])
	
.LABEL $label$6
	$8 = [0]
	*([0] + [10040]) = $3
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$5 }
	$2 = ($0 + ((int_32)$1 * (int_32)[12]))
	$8 = ($7 & [65535])
	$6 = ($8 <= [64513])
	$7 = ((($7 + ( [65536] ? [131072] : $6 )) - ( $8 ? ($7 & [131071]) : $6 )) - $7)
	if ( *([0] + [10038]) ){ goto $label$7 }
	$3 = (current_memory)
	*([0] + [10038]) = [1]
	$3 = ($3 << [16])
	*([0] + [10040]) = $3
	
.LABEL $label$7
	$2 = ($2 + [8192])
	if ( ((int_32)$7 < (int_32)[0]) ){ goto $label$4 }
	$6 = $3
	$4 = (current_memory)
	$5 = (($7 + [7]) & [-8])
	$8 = uint_32((($5 + $3) + [65535]) >> [16])
	if ( ((uint_32)$8 <= (uint_32)$4) ){ goto $label$8 }
	($8 - $4)
	if ( ((int_32)$8 != (int_32)(current_memory)) ){ goto $label$4 }
	$6 = *([0] + [10040])
	
.LABEL $label$8
	*([0] + [10040]) = ($6 + $5)
	if ( ((int_32)$3 == (int_32)[-1]) ){ goto $label$4 }
	$8 = *($2)
	$1 = ($0 + ((int_32)$1 * (int_32)[12]))
	$6 = *(($1 + [8196]))
	if ( ((int_32)($6 + $8) == (int_32)$3) ){ goto $label$3 }
	$5 = ($1 + [8200])
	$1 = *($5)
	if ( ((int_32)$8 == (int_32)$1) ){ goto $label$9 }
	*(($6 = ($6 + $1))) = ((*($6) & [-2147483648]) | (([-4] - $1) + $8))
	*($5) = *($2)
	*($6) = (*($6) & [2147483647])
	
.LABEL $label$9
	$2 = (*($2) + [1])
	*(($2 = ($0 + [8388]))) = $2
	*((($0 = ($0 + ((int_32)$2 * (int_32)[12]))) + [8196])) = $3
	*(($8 = ($0 + [8192]))) = $7
	
.LABEL $label$5
	return $8
	
.LABEL $label$4
	$3 = ($0 + ((int_32)$1 * (int_32)[12]))
	$1 = ($3 + [8200])
	$7 = *($1)
	$8 = *($2)
	if ( ((int_32)$8 == (int_32)$7) ){ goto $label$10 }
	*(($3 = (*(($3 + [8196])) + $7))) = ((*($3) & [-2147483648]) | (([-4] - $7) + $8))
	*($1) = *($2)
	*($3) = (*($3) & [2147483647])
	
.LABEL $label$10
	$7 = ($0 + [8388])
	$3 = (*($7) + [1])
	*($0 + [8384]) = $3
	*($7) = $3
	return [0]
	
.LABEL $label$3
	*($2) = ($8 + $7)
	return $2
}

void .FUNC $32 (int_32 $0, int_32 $1, int_32 $2, int_32 $3)
{
	int_32 $4
	int_32 $5
	int_32 $6
	int_32 $7
	$6 = *($0)
	$4 = ((int_32)(*($0 + [4]) - $6) / (int_32)[24])
	$5 = ($4 + [1])
	if ( ((uint_32)$5 >= (uint_32)[178956971]) ){ goto $label$2 }
	$7 = [178956970]
	$6 = ((int_32)(*($0 + [8]) - $6) / (int_32)[24])
	if ( ((uint_32)$6 > (uint_32)[89478484]) ){ goto $label$4 }
	$7 = ($6 << [1])
	$7 = ( $5 ? $7 : ($7 <= $5) )
	if ( ($7 == 0) ){ goto $label$3 }
	
.LABEL $label$4
	$6 = CALL $81(((int_32)$7 * (int_32)[24]))
	goto $label$1 
	
.LABEL $label$3
	$7 = [0]
	$6 = [0]
	goto $label$1 
	
.LABEL $label$2
	CALL $88($0)
	
.LABEL $label$1
	$5 = *($1)
	*($1) = [0]
	*(($1 = ($6 + ((int_32)$4 * (int_32)[24])))) = $5
	*($1 + [8]) = *($2)
	*($1 + [16]) = *($3)
	$4 = ($6 + ((int_32)$7 * (int_32)[24]))
	$5 = ($1 + [24])
	$7 = *($0)
	$6 = *(($0 + [4]))
	if ( ((int_32)$6 == (int_32)$7) ){ goto $label$6 }
	
.LOOP $label$7:
	$2 = ($6 + [-24])
	$3 = *($2)
	*($2) = [0]
	*(($1 + [-24])) = $3
	*(($1 + [-8])) = *(($6 + [-8]))
	*(($1 + [-12])) = *(($6 + [-12]))
	*(($1 + [-16])) = *(($6 + [-16]))
	$1 = ($1 + [-24])
	$6 = $2
	if ( ((int_32)$7 != (int_32)$2) ){ goto $label$7 }
	$7 = *(($0 + [4]))
	$6 = *($0)
	goto $label$5 
	
.LABEL $label$6
	$6 = $7
	
.LABEL $label$5
	*($0) = $1
	*(($0 + [4])) = $5
	*(($0 + [8])) = $4
	if ( ((int_32)$7 == (int_32)$6) ){ goto $label$8 }
	
.LOOP $label$9:
	$7 = ($7 + [-24])
	$1 = *($7)
	*($7) = [0]
	if ( ($1 == 0) ){ goto $label$10 }
	CALL $82($1)
	
.LABEL $label$10
	if ( ((int_32)$6 != (int_32)$7) ){ goto $label$9 }
	
.LABEL $label$8
	if ( ($6 == 0) ){ goto $label$11 }
	CALL $82($6)
	
.LABEL $label$11
	(unreachable)
}

int_32 .FUNC $33 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_32 $5
	int_32 $6
	int_64 $7
	int_32 $8
	int_32 $9
	$9 = (*([0] + [4]) - [48])
	$8 = $9
	*([0] + [4]) = $9
	$2 = *($0 + [24])
	$6 = *(($0 + [28]))
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$1 }
	$3 = ([0] - $2)
	$5 = ($6 + [-24])
	
.LOOP $label$2:
	if ( ((int_32)*(($5 + [16])) == (int_32)$1) ){ goto $label$1 }
	$6 = $5
	$4 = ($5 + [-24])
	$5 = $4
	if ( ((int_32)($4 + $3) != (int_32)[-24]) ){ goto $label$2 }
	
.LABEL $label$1
	if ( ((int_32)$6 == (int_32)$2) ){ goto $label$4 }
	$4 = *(($6 + [-24]))
	goto $label$3 
	
.LABEL $label$4
	$5 = CALL db_get_i64($1, [0], [0])
	CALL eosio_assert(((int_32)uint_32($5 >> [31]) ^ (int_32)[1]), [624])
	if ( ($5 <= [513]) ){ goto $label$6 }
	$4 = CALL malloc($5)
	goto $label$5 
	
.LABEL $label$6
	$4 = ($9 - (($5 + [15]) & [-16]))
	*([0] + [4]) = $4
	
.LABEL $label$5
	CALL db_get_i64($1, $4, $5)
	*($8 + [36]) = $4
	*($8 + [32]) = $4
	*($8 + [40]) = ($4 + $5)
	if ( ($5 <= [513]) ){ goto $label$7 }
	CALL free($4)
	
.LABEL $label$7
	$3 = ($0 + [24])
	*(($4 = CALL $81([48])) + [24]) = (int_64)1398362884
	*($4 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$7 = (int_64)5462355
	$5 = [0]
	
.LOOP $label$10:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $7) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$9 }
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$11 }
	
.LOOP $label$12:
	$7 = (uint_64)$7 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$7) & (int_64)255) != (int_64)0) ){ goto $label$9 }
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$12 }
	
.LABEL $label$11
	$6 = [1]
	$5 = ($5 + [1])
	if ( ((int_32)$5 < (int_32)[7]) ){ goto $label$10 }
	goto $label$8 
	
.LABEL $label$9
	$6 = [0]
	
.LABEL $label$8
	CALL eosio_assert($6, [64])
	*($4 + [36]) = $0
	CALL $36(($8 + [32]), $4)
	*($4 + [40]) = $1
	*($8 + [24]) = $4
	$7 = *($4)
	*($8 + [16]) = $7
	$6 = *($4 + [40])
	*($8 + [12]) = $6
	$1 = ($0 + [28])
	$5 = *($1)
	if ( ((uint_32)$5 >= (uint_32)*(($0 + [32]))) ){ goto $label$14 }
	*($5 + [8]) = $7
	*($5 + [16]) = $6
	*($8 + [24]) = [0]
	*($5) = $4
	*($1) = ($5 + [24])
	goto $label$13 
	
.LABEL $label$14
	CALL $32($3, ($8 + [24]), ($8 + [16]), ($8 + [12]))
	
.LABEL $label$13
	$5 = *($8 + [24])
	*($8 + [24]) = [0]
	if ( ($5 == 0) ){ goto $label$3 }
	CALL $82($5)
	
.LABEL $label$3
	*([0] + [4]) = ($8 + [48])
	return $4
}

void .FUNC _ZN8dividend13add_refundingEyRKN5eosio5assetE (int_32 $0, int_64 $1, int_32 $2)
{
	int_32 $3
	int_32 $4
	int_32 $5
	$5 = (*([0] + [4]) - [112])
	*([0] + [4]) = $5
	*($5 + [64]) = $1
	$4 = [0]
	*(($5 + [56])) = [0]
	*($5 + [40]) = (int_64)-1
	*($5 + [48]) = (int_64)0
	$1 = *($0)
	*($5 + [24]) = $1
	*($5 + [32]) = $1
	*($5 + [16]) = $2
	*($5 + [12]) = ($5 + [64])
	*($5 + [8]) = ($5 + [24])
	*($5 + [104]) = $1
	CALL eosio_assert(((int_64)$1 == (int_64)CALL $fimport$6()), [240])
	*($5 + [84]) = ($5 + [8])
	*($5 + [80]) = ($5 + [24])
	*($5 + [88]) = ($5 + [104])
	*(($2 = CALL $81([48])) + [24]) = (int_64)1398362884
	*($2 + [16]) = (int_64)0
	CALL eosio_assert([1], [96])
	$1 = (int_64)5462355
	
.LOOP $label$3:
	if ( ((uint_32)(((CASTING uint_32)(uint_64 $1) << [24]) + [-1073741825]) > (uint_32)[452984830]) ){ goto $label$2 }
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$4 }
	
.LOOP $label$5:
	$1 = (uint_64)$1 >> (uint_64)(int_64)8
	if ( ((int_64)((int_64)$1) & (int_64)255) != (int_64)0) ){ goto $label$2 }
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$5 }
	
.LABEL $label$4
	$0 = [1]
	$4 = ($4 + [1])
	if ( ((int_32)$4 < (int_32)[7]) ){ goto $label$3 }
	goto $label$1 
	
.LABEL $label$2
	$0 = [0]
	
.LABEL $label$1
	CALL eosio_assert($0, [64])
	*($2 + [36]) = ($5 + [24])
	CALL $31(($5 + [80]), $2)
	*($5 + [96]) = $2
	$1 = *($2)
	*($5 + [80]) = $1
	$0 = *($2 + [40])
	*($5 + [76]) = $0
	$3 = ($5 + [52])
	$4 = *($3)
	if ( ((uint_32)$4 >= (uint_32)*(($5 + [56]))) ){ goto $label$7 }
	*($4 + [8]) = $1
	*($4 + [16]) = $0
	*($5 + [96]) = [0]
	*($4) = $2
	*($3) = ($4 + [24])
	goto $label$6 
	
.LABEL $label$7
	CALL $32(($5 + [48]), ($5 + [96]), ($5 + [80]), ($5 + [76]))
	
.LABEL $label$6
	$4 = *($5 + [96])
	*($5 + [96]) = [0]
	if ( ($4 == 0) ){ goto $label$8 }
	CALL $82($4)
	
.LABEL $label$8
	$0 = *($5 + [48])
	if ( ($0 == 0) ){ goto $label$9 }
	$3 = ($5 + [52])
	$4 = *($3)
	if ( ((int_32)$4 == (int_32)$0) ){ goto $label$11 }
	
.LOOP $label$12:
	$4 = ($4 + [-24])
	$2 = *($4)
	*($4) = [0]
	if ( ($2 == 0) ){ goto $label$13 }
	CALL $82($2)
	
.LABEL $label$13
	if ( ((int_32)$0 != (int_32)$4) ){ goto $label$12 }
	$4 = *(($5 + [48]))
	goto $label$10 
	
.LABEL $label$11
	$4 = $0
	
.LABEL $label$10
	*($3) = $0
	CALL $82($4)
	
.LABEL $label$9
	*([0] + [4]) = ($5 + [112])
}

void .FUNC $31 (int_32 $0, int_32 $1)
{
	int_32 $2
	int_32 $3
	int_32 $4
	int_64 $5
	int_32 $6
	int_32 $7
	int_32 $8
	$8 = (*([0] + [4]) - [16])
	$7 = $8
	*([0] + [4]) = $8
	$2 = *($0)
	$3 = *($0 + [4])
	$6 = *($3)
	$5 = *($6 + [16])
	if ( ((int_64)$5 != (int_64)-1) ){ goto $label$1 }
	$5 = (int_64)0
	$4 = CALL db_lowerbound_i64(*($6), *($6 + [8]), (int_64)-5001342331490271232, (int_64)0)
	if ( ((int_32)$4 < (int_32)[0]) ){ goto $label$2 }
	CALL $33($6, $4)
	*($7 + [4]) = [0]
	*($7) = $6
	$5 = *(*(CALL $34($7) + [4]))
	$5 = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$2
	*(($6 + [16])) = $5
	
.LABEL $label$1
	CALL eosio_assert((uint_64)($5 <= (int_64)-2), [816])
	*($1) = *(($6 + [16]))
	*($1 + [8]) = *(*($3 + [4]))
	$6 = *($3 + [8])
	*($1 + [16]) = *($6)
	*(($1 + [24])) = *(($6 + [8]))
	*($1 + [32]) = ((uint_64)CALL current_time() / (uint_64)(int_64)1000000)
	$8 = $8
	$6 = ($8 + [-48])
	*([0] + [4]) = $6
	*($7 + [4]) = $6
	*($7) = $6
	*($7 + [8]) = ($8 + [-12])
	CALL $35($7, $1)
	$5 = *($1)
	*($1 + [40]) = CALL db_store_i64(*($2 + [8]), (int_64)-5001342331490271232, *(*($0 + [8])), $5, $6, [36])
	if ( (uint_64)($5 <= *($2 + [16])) ){ goto $label$3 }
	*(($2 + [16])) = ( (int_64)-2 ? ((int_64)$5 + (int_64)1) : ((uint_64)$5 > (uint_64)(int_64)-3) )
	
.LABEL $label$3
	*([0] + [4]) = ($7 + [16])
}